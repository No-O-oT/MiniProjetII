
prog_Mini-projMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002380  08010a98  08010a98  00020a98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012e18  08012e18  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012e18  08012e18  00022e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012e20  08012e20  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012e20  08012e20  00022e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012e24  08012e24  00022e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08012e28  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008d84  200000c8  08012ef0  000300c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008e4c  08012ef0  00038e4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f03e  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c7a  00000000  00000000  0005f136  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002608  00000000  00000000  00064db0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002370  00000000  00000000  000673b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4b6  00000000  00000000  00069728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a9fd  00000000  00000000  00097bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001154ac  00000000  00000000  000c25db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7a87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a8b0  00000000  00000000  001d7adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08010a7c 	.word	0x08010a7c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	08010a7c 	.word	0x08010a7c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	2000013c 	.word	0x2000013c

08000fac <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f002 fb8e 	bl	80036d8 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000fbc:	f000 f9b4 	bl	8001328 <ft5336_I2C_InitializeIfRequired>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ff4:	f000 f998 	bl	8001328 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e010      	b.n	8001020 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	21a8      	movs	r1, #168	; 0xa8
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fb49 	bl	800369c <TS_IO_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b51      	cmp	r3, #81	; 0x51
 8001014:	d101      	bne.n	800101a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d802      	bhi.n	800102c <ft5336_ReadID+0x4e>
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0e8      	beq.n	8000ffe <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b29b      	uxth	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f97e 	bl	8001348 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f932 	bl	80012b8 <ft5336_TS_DisableIT>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fb13 	bl	800369c <TS_IO_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	b2db      	uxtb	r3, r3
 8001084:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b05      	cmp	r3, #5
 800108c:	d901      	bls.n	8001092 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <ft5336_TS_DetectTouch+0x50>)
 8001098:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <ft5336_TS_DetectTouch+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000033c 	.word	0x2000033c

080010b0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80010d2:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010d4:	789a      	ldrb	r2, [r3, #2]
 80010d6:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	429a      	cmp	r2, r3
 80010dc:	f080 80cf 	bcs.w	800127e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010e2:	789b      	ldrb	r3, [r3, #2]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d871      	bhi.n	80011cc <ft5336_TS_GetXY+0x11c>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <ft5336_TS_GetXY+0x40>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001119 	.word	0x08001119
 80010f4:	0800112b 	.word	0x0800112b
 80010f8:	0800113d 	.word	0x0800113d
 80010fc:	0800114f 	.word	0x0800114f
 8001100:	08001161 	.word	0x08001161
 8001104:	08001173 	.word	0x08001173
 8001108:	08001185 	.word	0x08001185
 800110c:	08001197 	.word	0x08001197
 8001110:	080011a9 	.word	0x080011a9
 8001114:	080011bb 	.word	0x080011bb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001118:	2304      	movs	r3, #4
 800111a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800111c:	2303      	movs	r3, #3
 800111e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001120:	2306      	movs	r3, #6
 8001122:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001124:	2305      	movs	r3, #5
 8001126:	753b      	strb	r3, [r7, #20]
      break;
 8001128:	e051      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800112a:	230a      	movs	r3, #10
 800112c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800112e:	2309      	movs	r3, #9
 8001130:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001132:	230c      	movs	r3, #12
 8001134:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001136:	230b      	movs	r3, #11
 8001138:	753b      	strb	r3, [r7, #20]
      break;
 800113a:	e048      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800113c:	2310      	movs	r3, #16
 800113e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001140:	230f      	movs	r3, #15
 8001142:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001144:	2312      	movs	r3, #18
 8001146:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001148:	2311      	movs	r3, #17
 800114a:	753b      	strb	r3, [r7, #20]
      break;
 800114c:	e03f      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800114e:	2316      	movs	r3, #22
 8001150:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001152:	2315      	movs	r3, #21
 8001154:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001156:	2318      	movs	r3, #24
 8001158:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800115a:	2317      	movs	r3, #23
 800115c:	753b      	strb	r3, [r7, #20]
      break;
 800115e:	e036      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001160:	231c      	movs	r3, #28
 8001162:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001164:	231b      	movs	r3, #27
 8001166:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001168:	231e      	movs	r3, #30
 800116a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800116c:	231d      	movs	r3, #29
 800116e:	753b      	strb	r3, [r7, #20]
      break;
 8001170:	e02d      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001176:	2321      	movs	r3, #33	; 0x21
 8001178:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800117a:	2324      	movs	r3, #36	; 0x24
 800117c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800117e:	2323      	movs	r3, #35	; 0x23
 8001180:	753b      	strb	r3, [r7, #20]
      break;
 8001182:	e024      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001184:	2328      	movs	r3, #40	; 0x28
 8001186:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001188:	2327      	movs	r3, #39	; 0x27
 800118a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800118c:	232a      	movs	r3, #42	; 0x2a
 800118e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001190:	2329      	movs	r3, #41	; 0x29
 8001192:	753b      	strb	r3, [r7, #20]
      break;
 8001194:	e01b      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001196:	232e      	movs	r3, #46	; 0x2e
 8001198:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800119a:	232d      	movs	r3, #45	; 0x2d
 800119c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800119e:	2330      	movs	r3, #48	; 0x30
 80011a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80011a2:	232f      	movs	r3, #47	; 0x2f
 80011a4:	753b      	strb	r3, [r7, #20]
      break;
 80011a6:	e012      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80011a8:	2334      	movs	r3, #52	; 0x34
 80011aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80011ac:	2333      	movs	r3, #51	; 0x33
 80011ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80011b0:	2336      	movs	r3, #54	; 0x36
 80011b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80011b4:	2335      	movs	r3, #53	; 0x35
 80011b6:	753b      	strb	r3, [r7, #20]
      break;
 80011b8:	e009      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80011ba:	233a      	movs	r3, #58	; 0x3a
 80011bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80011be:	2339      	movs	r3, #57	; 0x39
 80011c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80011c2:	233c      	movs	r3, #60	; 0x3c
 80011c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80011c6:	233b      	movs	r3, #59	; 0x3b
 80011c8:	753b      	strb	r3, [r7, #20]
      break;
 80011ca:	e000      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80011cc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	7dfa      	ldrb	r2, [r7, #23]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 fa60 	bl	800369c <TS_IO_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 80011e8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	7dba      	ldrb	r2, [r7, #22]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 fa52 	bl	800369c <TS_IO_Read>
 80011f8:	4603      	mov	r3, r0
 80011fa:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011fc:	7cfb      	ldrb	r3, [r7, #19]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 8001216:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	7d7a      	ldrb	r2, [r7, #21]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f002 fa37 	bl	800369c <TS_IO_Read>
 800122e:	4603      	mov	r3, r0
 8001230:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800123a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	7d3a      	ldrb	r2, [r7, #20]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f002 fa29 	bl	800369c <TS_IO_Read>
 800124a:	4603      	mov	r3, r0
 800124c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 8001268:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 800127c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000033c 	.word	0x2000033c
 800128c:	20000340 	.word	0x20000340

08001290 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	21a4      	movs	r1, #164	; 0xa4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f9dc 	bl	8003668 <TS_IO_Write>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	21a4      	movs	r1, #164	; 0xa4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 f9c8 	bl	8003668 <TS_IO_Write>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000033c 	.word	0x2000033c

08001328 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800132c:	f7ff fff0 	bl	8001310 <ft5336_Get_I2C_InitializedStatus>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001336:	f002 f98d 	bl	8003654 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800133a:	4b02      	ldr	r3, [pc, #8]	; (8001344 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000033c 	.word	0x2000033c

08001348 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b0b8      	sub	sp, #224	; 0xe0
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136a:	f004 fbd0 	bl	8005b0e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136e:	f000 f94b 	bl	8001608 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001372:	f000 ffbd 	bl	80022f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001376:	f000 fa49 	bl	800180c <MX_ADC3_Init>
  MX_I2C1_Init();
 800137a:	f000 faf5 	bl	8001968 <MX_I2C1_Init>
  MX_I2C3_Init();
 800137e:	f000 fb33 	bl	80019e8 <MX_I2C3_Init>
  MX_LTDC_Init();
 8001382:	f000 fb71 	bl	8001a68 <MX_LTDC_Init>
  MX_RTC_Init();
 8001386:	f000 fbf1 	bl	8001b6c <MX_RTC_Init>
  MX_SPI2_Init();
 800138a:	f000 fc95 	bl	8001cb8 <MX_SPI2_Init>
  MX_TIM1_Init();
 800138e:	f000 fcd1 	bl	8001d34 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001392:	f000 fd23 	bl	8001ddc <MX_TIM2_Init>
  MX_TIM3_Init();
 8001396:	f000 fd6f 	bl	8001e78 <MX_TIM3_Init>
  MX_TIM5_Init();
 800139a:	f000 fdd3 	bl	8001f44 <MX_TIM5_Init>
  MX_TIM8_Init();
 800139e:	f000 fe1f 	bl	8001fe0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013a2:	f000 fef7 	bl	8002194 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80013a6:	f000 ff25 	bl	80021f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013aa:	f000 f9dd 	bl	8001768 <MX_ADC1_Init>
  MX_DAC_Init();
 80013ae:	f000 fa7f 	bl	80018b0 <MX_DAC_Init>
  MX_UART7_Init();
 80013b2:	f000 febf 	bl	8002134 <MX_UART7_Init>
  MX_FMC_Init();
 80013b6:	f000 ff4d 	bl	8002254 <MX_FMC_Init>
  MX_DMA2D_Init();
 80013ba:	f000 faa3 	bl	8001904 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 80013be:	f002 f997 	bl	80036f0 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80013c2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80013c6:	2000      	movs	r0, #0
 80013c8:	f002 fa2a 	bl	8003820 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80013cc:	f002 fa00 	bl	80037d0 <BSP_LCD_GetXSize>
 80013d0:	4604      	mov	r4, r0
 80013d2:	f002 fa11 	bl	80037f8 <BSP_LCD_GetYSize>
 80013d6:	4603      	mov	r3, r0
 80013d8:	fb03 f304 	mul.w	r3, r3, r4
 80013dc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	2001      	movs	r0, #1
 80013e6:	f002 fa1b 	bl	8003820 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80013ea:	f003 f891 	bl	8004510 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f002 fa76 	bl	80038e0 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80013f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013f8:	f002 fae4 	bl	80039c4 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80013fc:	486b      	ldr	r0, [pc, #428]	; (80015ac <main+0x248>)
 80013fe:	f002 fab1 	bl	8003964 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001402:	f04f 30ff 	mov.w	r0, #4294967295
 8001406:	f002 fa7b 	bl	8003900 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800140a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800140e:	f002 fa8f 	bl	8003930 <BSP_LCD_SetBackColor>
	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001412:	f002 f9dd 	bl	80037d0 <BSP_LCD_GetXSize>
 8001416:	4603      	mov	r3, r0
 8001418:	b29c      	uxth	r4, r3
 800141a:	f002 f9ed 	bl	80037f8 <BSP_LCD_GetYSize>
 800141e:	4603      	mov	r3, r0
 8001420:	b29b      	uxth	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	4620      	mov	r0, r4
 8001426:	f003 fd01 	bl	8004e2c <BSP_TS_Init>
		HAL_UART_Transmit_IT(&huart7,start+i,1);
		HAL_Delay(10);
	}
	*/

	HAL_Delay(200);
 800142a:	20c8      	movs	r0, #200	; 0xc8
 800142c:	f004 fb9c 	bl	8005b68 <HAL_Delay>
	// Attente démarrage
	BSP_LCD_DisplayStringAtLine(9, (uint8_t*) "Lorsque les modules bluetooth ne clignotent plus, appuyez sur BP2");
 8001430:	495f      	ldr	r1, [pc, #380]	; (80015b0 <main+0x24c>)
 8001432:	2009      	movs	r0, #9
 8001434:	f002 fbfa 	bl	8003c2c <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(10, (uint8_t*) "Si les modules ne se connectent pas, revoir leur configuration");
 8001438:	495e      	ldr	r1, [pc, #376]	; (80015b4 <main+0x250>)
 800143a:	200a      	movs	r0, #10
 800143c:	f002 fbf6 	bl	8003c2c <BSP_LCD_DisplayStringAtLine>
	while(HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin));
 8001440:	bf00      	nop
 8001442:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001446:	485c      	ldr	r0, [pc, #368]	; (80015b8 <main+0x254>)
 8001448:	f006 f860 	bl	800750c <HAL_GPIO_ReadPin>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f7      	bne.n	8001442 <main+0xde>

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001452:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001456:	f002 fab5 	bl	80039c4 <BSP_LCD_Clear>
	HAL_UART_Receive_IT(&huart7,rxbuffer,4);
 800145a:	2204      	movs	r2, #4
 800145c:	4957      	ldr	r1, [pc, #348]	; (80015bc <main+0x258>)
 800145e:	4858      	ldr	r0, [pc, #352]	; (80015c0 <main+0x25c>)
 8001460:	f00a fa34 	bl	800b8cc <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8001464:	2300      	movs	r3, #0
 8001466:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800146a:	2300      	movs	r3, #0
 800146c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8001470:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001474:	4618      	mov	r0, r3
 8001476:	f00b fb18 	bl	800caaa <osMutexCreate>
 800147a:	4603      	mov	r3, r0
 800147c:	4a51      	ldr	r2, [pc, #324]	; (80015c4 <main+0x260>)
 800147e:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8001480:	4b51      	ldr	r3, [pc, #324]	; (80015c8 <main+0x264>)
 8001482:	f107 04c8 	add.w	r4, r7, #200	; 0xc8
 8001486:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001488:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 800148c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00b fb21 	bl	800cada <osMessageCreate>
 8001498:	4603      	mov	r3, r0
 800149a:	4a4c      	ldr	r2, [pc, #304]	; (80015cc <main+0x268>)
 800149c:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 800149e:	4b4c      	ldr	r3, [pc, #304]	; (80015d0 <main+0x26c>)
 80014a0:	f107 04ac 	add.w	r4, r7, #172	; 0xac
 80014a4:	461d      	mov	r5, r3
 80014a6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014a8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014aa:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014ae:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014b2:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80014b6:	2100      	movs	r1, #0
 80014b8:	4618      	mov	r0, r3
 80014ba:	f00b fa96 	bl	800c9ea <osThreadCreate>
 80014be:	4603      	mov	r3, r0
 80014c0:	4a44      	ldr	r2, [pc, #272]	; (80015d4 <main+0x270>)
 80014c2:	6013      	str	r3, [r2, #0]

  /* definition and creation of horloge */
  osThreadDef(horloge, Starthorloge, osPriorityBelowNormal, 0, 1024);
 80014c4:	4b44      	ldr	r3, [pc, #272]	; (80015d8 <main+0x274>)
 80014c6:	f107 0490 	add.w	r4, r7, #144	; 0x90
 80014ca:	461d      	mov	r5, r3
 80014cc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014ce:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  horlogeHandle = osThreadCreate(osThread(horloge), NULL);
 80014d8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80014dc:	2100      	movs	r1, #0
 80014de:	4618      	mov	r0, r3
 80014e0:	f00b fa83 	bl	800c9ea <osThreadCreate>
 80014e4:	4603      	mov	r3, r0
 80014e6:	4a3d      	ldr	r2, [pc, #244]	; (80015dc <main+0x278>)
 80014e8:	6013      	str	r3, [r2, #0]

  /* definition and creation of LRacket */
  osThreadDef(LRacket, StartLRacket, osPriorityAboveNormal, 0, 1024);
 80014ea:	4b3d      	ldr	r3, [pc, #244]	; (80015e0 <main+0x27c>)
 80014ec:	f107 0474 	add.w	r4, r7, #116	; 0x74
 80014f0:	461d      	mov	r5, r3
 80014f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014fa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LRacketHandle = osThreadCreate(osThread(LRacket), NULL);
 80014fe:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001502:	2100      	movs	r1, #0
 8001504:	4618      	mov	r0, r3
 8001506:	f00b fa70 	bl	800c9ea <osThreadCreate>
 800150a:	4603      	mov	r3, r0
 800150c:	4a35      	ldr	r2, [pc, #212]	; (80015e4 <main+0x280>)
 800150e:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ball */
  osThreadDef(Ball, StartBall, osPriorityHigh, 0, 1024);
 8001510:	4b35      	ldr	r3, [pc, #212]	; (80015e8 <main+0x284>)
 8001512:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8001516:	461d      	mov	r5, r3
 8001518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallHandle = osThreadCreate(osThread(Ball), NULL);
 8001524:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001528:	2100      	movs	r1, #0
 800152a:	4618      	mov	r0, r3
 800152c:	f00b fa5d 	bl	800c9ea <osThreadCreate>
 8001530:	4603      	mov	r3, r0
 8001532:	4a2e      	ldr	r2, [pc, #184]	; (80015ec <main+0x288>)
 8001534:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8001536:	4b2e      	ldr	r3, [pc, #184]	; (80015f0 <main+0x28c>)
 8001538:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800153c:	461d      	mov	r5, r3
 800153e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001540:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001542:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001546:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 800154a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800154e:	2100      	movs	r1, #0
 8001550:	4618      	mov	r0, r3
 8001552:	f00b fa4a 	bl	800c9ea <osThreadCreate>
 8001556:	4603      	mov	r3, r0
 8001558:	4a26      	ldr	r2, [pc, #152]	; (80015f4 <main+0x290>)
 800155a:	6013      	str	r3, [r2, #0]

  /* definition and creation of Transmit */
  osThreadDef(Transmit, StartTransmit, osPriorityAboveNormal, 0, 128);
 800155c:	4b26      	ldr	r3, [pc, #152]	; (80015f8 <main+0x294>)
 800155e:	f107 0420 	add.w	r4, r7, #32
 8001562:	461d      	mov	r5, r3
 8001564:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001566:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001568:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitHandle = osThreadCreate(osThread(Transmit), NULL);
 8001570:	f107 0320 	add.w	r3, r7, #32
 8001574:	2100      	movs	r1, #0
 8001576:	4618      	mov	r0, r3
 8001578:	f00b fa37 	bl	800c9ea <osThreadCreate>
 800157c:	4603      	mov	r3, r0
 800157e:	4a1f      	ldr	r2, [pc, #124]	; (80015fc <main+0x298>)
 8001580:	6013      	str	r3, [r2, #0]

  /* definition and creation of Lost */
  osThreadDef(Lost, StartLost, osPriorityNormal, 0, 128);
 8001582:	4b1f      	ldr	r3, [pc, #124]	; (8001600 <main+0x29c>)
 8001584:	1d3c      	adds	r4, r7, #4
 8001586:	461d      	mov	r5, r3
 8001588:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001590:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LostHandle = osThreadCreate(osThread(Lost), NULL);
 8001594:	1d3b      	adds	r3, r7, #4
 8001596:	2100      	movs	r1, #0
 8001598:	4618      	mov	r0, r3
 800159a:	f00b fa26 	bl	800c9ea <osThreadCreate>
 800159e:	4603      	mov	r3, r0
 80015a0:	4a18      	ldr	r2, [pc, #96]	; (8001604 <main+0x2a0>)
 80015a2:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015a4:	f00b fa1a 	bl	800c9dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80015a8:	e7fe      	b.n	80015a8 <main+0x244>
 80015aa:	bf00      	nop
 80015ac:	20000048 	.word	0x20000048
 80015b0:	08010adc 	.word	0x08010adc
 80015b4:	08010b20 	.word	0x08010b20
 80015b8:	40020000 	.word	0x40020000
 80015bc:	20008cac 	.word	0x20008cac
 80015c0:	2000871c 	.word	0x2000871c
 80015c4:	20008ca8 	.word	0x20008ca8
 80015c8:	08010b60 	.word	0x08010b60
 80015cc:	20008d18 	.word	0x20008d18
 80015d0:	08010b70 	.word	0x08010b70
 80015d4:	20008668 	.word	0x20008668
 80015d8:	08010b8c 	.word	0x08010b8c
 80015dc:	20008998 	.word	0x20008998
 80015e0:	08010ba8 	.word	0x08010ba8
 80015e4:	20008664 	.word	0x20008664
 80015e8:	08010bc4 	.word	0x08010bc4
 80015ec:	20008d14 	.word	0x20008d14
 80015f0:	08010be0 	.word	0x08010be0
 80015f4:	200089e4 	.word	0x200089e4
 80015f8:	08010bfc 	.word	0x08010bfc
 80015fc:	200089e8 	.word	0x200089e8
 8001600:	08010c18 	.word	0x08010c18
 8001604:	20008d10 	.word	0x20008d10

08001608 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b0b4      	sub	sp, #208	; 0xd0
 800160c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800160e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001612:	2230      	movs	r2, #48	; 0x30
 8001614:	2100      	movs	r1, #0
 8001616:	4618      	mov	r0, r3
 8001618:	f00d fd82 	bl	800f120 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800161c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
 8001628:	60da      	str	r2, [r3, #12]
 800162a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800162c:	f107 0308 	add.w	r3, r7, #8
 8001630:	2284      	movs	r2, #132	; 0x84
 8001632:	2100      	movs	r1, #0
 8001634:	4618      	mov	r0, r3
 8001636:	f00d fd73 	bl	800f120 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800163a:	f007 f8c1 	bl	80087c0 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800163e:	4b47      	ldr	r3, [pc, #284]	; (800175c <SystemClock_Config+0x154>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a46      	ldr	r2, [pc, #280]	; (800175c <SystemClock_Config+0x154>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b44      	ldr	r3, [pc, #272]	; (800175c <SystemClock_Config+0x154>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001656:	4b42      	ldr	r3, [pc, #264]	; (8001760 <SystemClock_Config+0x158>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	4a41      	ldr	r2, [pc, #260]	; (8001760 <SystemClock_Config+0x158>)
 800165c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001660:	6013      	str	r3, [r2, #0]
 8001662:	4b3f      	ldr	r3, [pc, #252]	; (8001760 <SystemClock_Config+0x158>)
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800166a:	603b      	str	r3, [r7, #0]
 800166c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 800166e:	2309      	movs	r3, #9
 8001670:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001674:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001678:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800167c:	2301      	movs	r3, #1
 800167e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001682:	2302      	movs	r3, #2
 8001684:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001688:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800168c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001690:	2319      	movs	r3, #25
 8001692:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8001696:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800169a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800169e:	2302      	movs	r3, #2
 80016a0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80016a4:	2309      	movs	r3, #9
 80016a6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016aa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016ae:	4618      	mov	r0, r3
 80016b0:	f007 f8e6 	bl	8008880 <HAL_RCC_OscConfig>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80016ba:	f001 fe6f 	bl	800339c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016be:	f007 f88f 	bl	80087e0 <HAL_PWREx_EnableOverDrive>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016c8:	f001 fe68 	bl	800339c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016cc:	230f      	movs	r3, #15
 80016ce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016d2:	2302      	movs	r3, #2
 80016d4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016d8:	2300      	movs	r3, #0
 80016da:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016ee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016f2:	2106      	movs	r1, #6
 80016f4:	4618      	mov	r0, r3
 80016f6:	f007 fb67 	bl	8008dc8 <HAL_RCC_ClockConfig>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8001700:	f001 fe4c 	bl	800339c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8001704:	4b17      	ldr	r3, [pc, #92]	; (8001764 <SystemClock_Config+0x15c>)
 8001706:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8001708:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800170c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 800170e:	2305      	movs	r3, #5
 8001710:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001712:	2302      	movs	r3, #2
 8001714:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8001716:	2303      	movs	r3, #3
 8001718:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800171a:	2301      	movs	r3, #1
 800171c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 800171e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001722:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001728:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800172a:	2300      	movs	r3, #0
 800172c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800172e:	2300      	movs	r3, #0
 8001730:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001732:	2300      	movs	r3, #0
 8001734:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001736:	2300      	movs	r3, #0
 8001738:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800173a:	2300      	movs	r3, #0
 800173c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800173e:	f107 0308 	add.w	r3, r7, #8
 8001742:	4618      	mov	r0, r3
 8001744:	f007 fd48 	bl	80091d8 <HAL_RCCEx_PeriphCLKConfig>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d001      	beq.n	8001752 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 800174e:	f001 fe25 	bl	800339c <Error_Handler>
  }
}
 8001752:	bf00      	nop
 8001754:	37d0      	adds	r7, #208	; 0xd0
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}
 800175a:	bf00      	nop
 800175c:	40023800 	.word	0x40023800
 8001760:	40007000 	.word	0x40007000
 8001764:	00015868 	.word	0x00015868

08001768 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800176e:	463b      	mov	r3, r7
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <MX_ADC1_Init+0x98>)
 800177c:	4a21      	ldr	r2, [pc, #132]	; (8001804 <MX_ADC1_Init+0x9c>)
 800177e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001780:	4b1f      	ldr	r3, [pc, #124]	; (8001800 <MX_ADC1_Init+0x98>)
 8001782:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001786:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001788:	4b1d      	ldr	r3, [pc, #116]	; (8001800 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800178e:	4b1c      	ldr	r3, [pc, #112]	; (8001800 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001794:	4b1a      	ldr	r3, [pc, #104]	; (8001800 <MX_ADC1_Init+0x98>)
 8001796:	2200      	movs	r2, #0
 8001798:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800179a:	4b19      	ldr	r3, [pc, #100]	; (8001800 <MX_ADC1_Init+0x98>)
 800179c:	2200      	movs	r2, #0
 800179e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80017a2:	4b17      	ldr	r3, [pc, #92]	; (8001800 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80017a8:	4b15      	ldr	r3, [pc, #84]	; (8001800 <MX_ADC1_Init+0x98>)
 80017aa:	4a17      	ldr	r2, [pc, #92]	; (8001808 <MX_ADC1_Init+0xa0>)
 80017ac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017ae:	4b14      	ldr	r3, [pc, #80]	; (8001800 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017b4:	4b12      	ldr	r3, [pc, #72]	; (8001800 <MX_ADC1_Init+0x98>)
 80017b6:	2201      	movs	r2, #1
 80017b8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ba:	4b11      	ldr	r3, [pc, #68]	; (8001800 <MX_ADC1_Init+0x98>)
 80017bc:	2200      	movs	r2, #0
 80017be:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <MX_ADC1_Init+0x98>)
 80017c4:	2201      	movs	r2, #1
 80017c6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017c8:	480d      	ldr	r0, [pc, #52]	; (8001800 <MX_ADC1_Init+0x98>)
 80017ca:	f004 f9f1 	bl	8005bb0 <HAL_ADC_Init>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d001      	beq.n	80017d8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017d4:	f001 fde2 	bl	800339c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017d8:	2300      	movs	r3, #0
 80017da:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017dc:	2301      	movs	r3, #1
 80017de:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017e0:	2300      	movs	r3, #0
 80017e2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017e4:	463b      	mov	r3, r7
 80017e6:	4619      	mov	r1, r3
 80017e8:	4805      	ldr	r0, [pc, #20]	; (8001800 <MX_ADC1_Init+0x98>)
 80017ea:	f004 fb77 	bl	8005edc <HAL_ADC_ConfigChannel>
 80017ee:	4603      	mov	r3, r0
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d001      	beq.n	80017f8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017f4:	f001 fdd2 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	20008950 	.word	0x20008950
 8001804:	40012000 	.word	0x40012000
 8001808:	0f000001 	.word	0x0f000001

0800180c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 800180c:	b580      	push	{r7, lr}
 800180e:	b084      	sub	sp, #16
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001812:	463b      	mov	r3, r7
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800181e:	4b21      	ldr	r3, [pc, #132]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001820:	4a21      	ldr	r2, [pc, #132]	; (80018a8 <MX_ADC3_Init+0x9c>)
 8001822:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001824:	4b1f      	ldr	r3, [pc, #124]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001826:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800182a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 800182c:	4b1d      	ldr	r3, [pc, #116]	; (80018a4 <MX_ADC3_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001832:	4b1c      	ldr	r3, [pc, #112]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8001838:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <MX_ADC3_Init+0x98>)
 800183a:	2200      	movs	r2, #0
 800183c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 800183e:	4b19      	ldr	r3, [pc, #100]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001840:	2200      	movs	r2, #0
 8001842:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001846:	4b17      	ldr	r3, [pc, #92]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <MX_ADC3_Init+0x98>)
 800184e:	4a17      	ldr	r2, [pc, #92]	; (80018ac <MX_ADC3_Init+0xa0>)
 8001850:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001852:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8001858:	4b12      	ldr	r3, [pc, #72]	; (80018a4 <MX_ADC3_Init+0x98>)
 800185a:	2201      	movs	r2, #1
 800185c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 800185e:	4b11      	ldr	r3, [pc, #68]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001860:	2200      	movs	r2, #0
 8001862:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001866:	4b0f      	ldr	r3, [pc, #60]	; (80018a4 <MX_ADC3_Init+0x98>)
 8001868:	2201      	movs	r2, #1
 800186a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800186c:	480d      	ldr	r0, [pc, #52]	; (80018a4 <MX_ADC3_Init+0x98>)
 800186e:	f004 f99f 	bl	8005bb0 <HAL_ADC_Init>
 8001872:	4603      	mov	r3, r0
 8001874:	2b00      	cmp	r3, #0
 8001876:	d001      	beq.n	800187c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8001878:	f001 fd90 	bl	800339c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800187c:	2308      	movs	r3, #8
 800187e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001880:	2301      	movs	r3, #1
 8001882:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001884:	2300      	movs	r3, #0
 8001886:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001888:	463b      	mov	r3, r7
 800188a:	4619      	mov	r1, r3
 800188c:	4805      	ldr	r0, [pc, #20]	; (80018a4 <MX_ADC3_Init+0x98>)
 800188e:	f004 fb25 	bl	8005edc <HAL_ADC_ConfigChannel>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d001      	beq.n	800189c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8001898:	f001 fd80 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800189c:	bf00      	nop
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	2000899c 	.word	0x2000899c
 80018a8:	40012200 	.word	0x40012200
 80018ac:	0f000001 	.word	0x0f000001

080018b0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b082      	sub	sp, #8
 80018b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018b6:	463b      	mov	r3, r7
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80018be:	4b0f      	ldr	r3, [pc, #60]	; (80018fc <MX_DAC_Init+0x4c>)
 80018c0:	4a0f      	ldr	r2, [pc, #60]	; (8001900 <MX_DAC_Init+0x50>)
 80018c2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80018c4:	480d      	ldr	r0, [pc, #52]	; (80018fc <MX_DAC_Init+0x4c>)
 80018c6:	f004 fe2f 	bl	8006528 <HAL_DAC_Init>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80018d0:	f001 fd64 	bl	800339c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	2200      	movs	r2, #0
 80018e0:	4619      	mov	r1, r3
 80018e2:	4806      	ldr	r0, [pc, #24]	; (80018fc <MX_DAC_Init+0x4c>)
 80018e4:	f004 fe96 	bl	8006614 <HAL_DAC_ConfigChannel>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d001      	beq.n	80018f2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80018ee:	f001 fd55 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80018f2:	bf00      	nop
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20008a6c 	.word	0x20008a6c
 8001900:	40007400 	.word	0x40007400

08001904 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8001908:	4b15      	ldr	r3, [pc, #84]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800190a:	4a16      	ldr	r2, [pc, #88]	; (8001964 <MX_DMA2D_Init+0x60>)
 800190c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 800190e:	4b14      	ldr	r3, [pc, #80]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001914:	4b12      	ldr	r3, [pc, #72]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001920:	4b0f      	ldr	r3, [pc, #60]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8001926:	4b0e      	ldr	r3, [pc, #56]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800192c:	4b0c      	ldr	r3, [pc, #48]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800192e:	2200      	movs	r2, #0
 8001930:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001932:	4b0b      	ldr	r3, [pc, #44]	; (8001960 <MX_DMA2D_Init+0x5c>)
 8001934:	2200      	movs	r2, #0
 8001936:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8001938:	4809      	ldr	r0, [pc, #36]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800193a:	f005 f8a3 	bl	8006a84 <HAL_DMA2D_Init>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001944:	f001 fd2a 	bl	800339c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8001948:	2101      	movs	r1, #1
 800194a:	4805      	ldr	r0, [pc, #20]	; (8001960 <MX_DMA2D_Init+0x5c>)
 800194c:	f005 f9f8 	bl	8006d40 <HAL_DMA2D_ConfigLayer>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8001956:	f001 fd21 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20008bdc 	.word	0x20008bdc
 8001964:	4002b000 	.word	0x4002b000

08001968 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800196c:	4b1b      	ldr	r3, [pc, #108]	; (80019dc <MX_I2C1_Init+0x74>)
 800196e:	4a1c      	ldr	r2, [pc, #112]	; (80019e0 <MX_I2C1_Init+0x78>)
 8001970:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001972:	4b1a      	ldr	r3, [pc, #104]	; (80019dc <MX_I2C1_Init+0x74>)
 8001974:	4a1b      	ldr	r2, [pc, #108]	; (80019e4 <MX_I2C1_Init+0x7c>)
 8001976:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001978:	4b18      	ldr	r3, [pc, #96]	; (80019dc <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <MX_I2C1_Init+0x74>)
 8001980:	2201      	movs	r2, #1
 8001982:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001984:	4b15      	ldr	r3, [pc, #84]	; (80019dc <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800198a:	4b14      	ldr	r3, [pc, #80]	; (80019dc <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001990:	4b12      	ldr	r3, [pc, #72]	; (80019dc <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001996:	4b11      	ldr	r3, [pc, #68]	; (80019dc <MX_I2C1_Init+0x74>)
 8001998:	2200      	movs	r2, #0
 800199a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800199c:	4b0f      	ldr	r3, [pc, #60]	; (80019dc <MX_I2C1_Init+0x74>)
 800199e:	2200      	movs	r2, #0
 80019a0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019a2:	480e      	ldr	r0, [pc, #56]	; (80019dc <MX_I2C1_Init+0x74>)
 80019a4:	f005 fde4 	bl	8007570 <HAL_I2C_Init>
 80019a8:	4603      	mov	r3, r0
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d001      	beq.n	80019b2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019ae:	f001 fcf5 	bl	800339c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019b2:	2100      	movs	r1, #0
 80019b4:	4809      	ldr	r0, [pc, #36]	; (80019dc <MX_I2C1_Init+0x74>)
 80019b6:	f006 faf3 	bl	8007fa0 <HAL_I2CEx_ConfigAnalogFilter>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019c0:	f001 fcec 	bl	800339c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019c4:	2100      	movs	r1, #0
 80019c6:	4805      	ldr	r0, [pc, #20]	; (80019dc <MX_I2C1_Init+0x74>)
 80019c8:	f006 fb35 	bl	8008036 <HAL_I2CEx_ConfigDigitalFilter>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019d2:	f001 fce3 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	200087dc 	.word	0x200087dc
 80019e0:	40005400 	.word	0x40005400
 80019e4:	00c0eaff 	.word	0x00c0eaff

080019e8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019ec:	4b1b      	ldr	r3, [pc, #108]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019ee:	4a1c      	ldr	r2, [pc, #112]	; (8001a60 <MX_I2C3_Init+0x78>)
 80019f0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80019f2:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019f4:	4a1b      	ldr	r2, [pc, #108]	; (8001a64 <MX_I2C3_Init+0x7c>)
 80019f6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80019f8:	4b18      	ldr	r3, [pc, #96]	; (8001a5c <MX_I2C3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019fe:	4b17      	ldr	r3, [pc, #92]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a00:	2201      	movs	r2, #1
 8001a02:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a04:	4b15      	ldr	r3, [pc, #84]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001a0a:	4b14      	ldr	r3, [pc, #80]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a10:	4b12      	ldr	r3, [pc, #72]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a16:	4b11      	ldr	r3, [pc, #68]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a18:	2200      	movs	r2, #0
 8001a1a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a1c:	4b0f      	ldr	r3, [pc, #60]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a1e:	2200      	movs	r2, #0
 8001a20:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a22:	480e      	ldr	r0, [pc, #56]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a24:	f005 fda4 	bl	8007570 <HAL_I2C_Init>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d001      	beq.n	8001a32 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001a2e:	f001 fcb5 	bl	800339c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a32:	2100      	movs	r1, #0
 8001a34:	4809      	ldr	r0, [pc, #36]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a36:	f006 fab3 	bl	8007fa0 <HAL_I2CEx_ConfigAnalogFilter>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001a40:	f001 fcac 	bl	800339c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a44:	2100      	movs	r1, #0
 8001a46:	4805      	ldr	r0, [pc, #20]	; (8001a5c <MX_I2C3_Init+0x74>)
 8001a48:	f006 faf5 	bl	8008036 <HAL_I2CEx_ConfigDigitalFilter>
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d001      	beq.n	8001a56 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001a52:	f001 fca3 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	2000866c 	.word	0x2000866c
 8001a60:	40005c00 	.word	0x40005c00
 8001a64:	00c0eaff 	.word	0x00c0eaff

08001a68 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b08e      	sub	sp, #56	; 0x38
 8001a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a6e:	1d3b      	adds	r3, r7, #4
 8001a70:	2234      	movs	r2, #52	; 0x34
 8001a72:	2100      	movs	r1, #0
 8001a74:	4618      	mov	r0, r3
 8001a76:	f00d fb53 	bl	800f120 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a7a:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a7c:	4a3a      	ldr	r2, [pc, #232]	; (8001b68 <MX_LTDC_Init+0x100>)
 8001a7e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a80:	4b38      	ldr	r3, [pc, #224]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a86:	4b37      	ldr	r3, [pc, #220]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a8c:	4b35      	ldr	r3, [pc, #212]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a8e:	2200      	movs	r2, #0
 8001a90:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a92:	4b34      	ldr	r3, [pc, #208]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001a9a:	2228      	movs	r2, #40	; 0x28
 8001a9c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001a9e:	4b31      	ldr	r3, [pc, #196]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aa0:	2209      	movs	r2, #9
 8001aa2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001aa4:	4b2f      	ldr	r3, [pc, #188]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aa6:	2235      	movs	r2, #53	; 0x35
 8001aa8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001aaa:	4b2e      	ldr	r3, [pc, #184]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aac:	220b      	movs	r2, #11
 8001aae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001ab0:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001ab2:	f240 2215 	movw	r2, #533	; 0x215
 8001ab6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001ab8:	4b2a      	ldr	r3, [pc, #168]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aba:	f240 121b 	movw	r2, #283	; 0x11b
 8001abe:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001ac0:	4b28      	ldr	r3, [pc, #160]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001ac2:	f240 2235 	movw	r2, #565	; 0x235
 8001ac6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001ac8:	4b26      	ldr	r3, [pc, #152]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aca:	f240 121d 	movw	r2, #285	; 0x11d
 8001ace:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ad0:	4b24      	ldr	r3, [pc, #144]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001ad8:	4b22      	ldr	r3, [pc, #136]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001ada:	2200      	movs	r2, #0
 8001adc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ae0:	4b20      	ldr	r3, [pc, #128]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001ae8:	481e      	ldr	r0, [pc, #120]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001aea:	f006 faf1 	bl	80080d0 <HAL_LTDC_Init>
 8001aee:	4603      	mov	r3, r0
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001af4:	f001 fc52 	bl	800339c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001af8:	2300      	movs	r3, #0
 8001afa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001afc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b00:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001b06:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b0a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b0c:	2302      	movs	r3, #2
 8001b0e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b10:	23ff      	movs	r3, #255	; 0xff
 8001b12:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b18:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b1c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b1e:	2307      	movs	r3, #7
 8001b20:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b22:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b26:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001b28:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b2e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b32:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b40:	2300      	movs	r3, #0
 8001b42:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2200      	movs	r2, #0
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4805      	ldr	r0, [pc, #20]	; (8001b64 <MX_LTDC_Init+0xfc>)
 8001b4e:	f006 fc51 	bl	80083f4 <HAL_LTDC_ConfigLayer>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d001      	beq.n	8001b5c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b58:	f001 fc20 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b5c:	bf00      	nop
 8001b5e:	3738      	adds	r7, #56	; 0x38
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	200088a8 	.word	0x200088a8
 8001b68:	40016800 	.word	0x40016800

08001b6c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b092      	sub	sp, #72	; 0x48
 8001b70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b72:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b76:	2200      	movs	r2, #0
 8001b78:	601a      	str	r2, [r3, #0]
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	609a      	str	r2, [r3, #8]
 8001b7e:	60da      	str	r2, [r3, #12]
 8001b80:	611a      	str	r2, [r3, #16]
 8001b82:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001b84:	2300      	movs	r3, #0
 8001b86:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001b88:	463b      	mov	r3, r7
 8001b8a:	222c      	movs	r2, #44	; 0x2c
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f00d fac6 	bl	800f120 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b94:	4b46      	ldr	r3, [pc, #280]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001b96:	4a47      	ldr	r2, [pc, #284]	; (8001cb4 <MX_RTC_Init+0x148>)
 8001b98:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b9a:	4b45      	ldr	r3, [pc, #276]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001b9c:	2200      	movs	r2, #0
 8001b9e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001ba0:	4b43      	ldr	r3, [pc, #268]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001ba2:	227f      	movs	r2, #127	; 0x7f
 8001ba4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001ba6:	4b42      	ldr	r3, [pc, #264]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001ba8:	22ff      	movs	r2, #255	; 0xff
 8001baa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001bac:	4b40      	ldr	r3, [pc, #256]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001bb2:	4b3f      	ldr	r3, [pc, #252]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bb8:	4b3d      	ldr	r3, [pc, #244]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001bba:	2200      	movs	r2, #0
 8001bbc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bbe:	483c      	ldr	r0, [pc, #240]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001bc0:	f007 fef8 	bl	80099b4 <HAL_RTC_Init>
 8001bc4:	4603      	mov	r3, r0
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d001      	beq.n	8001bce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001bca:	f001 fbe7 	bl	800339c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001be0:	2300      	movs	r3, #0
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001be4:	2300      	movs	r3, #0
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001be8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bec:	2201      	movs	r2, #1
 8001bee:	4619      	mov	r1, r3
 8001bf0:	482f      	ldr	r0, [pc, #188]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001bf2:	f007 ff5b 	bl	8009aac <HAL_RTC_SetTime>
 8001bf6:	4603      	mov	r3, r0
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d001      	beq.n	8001c00 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001bfc:	f001 fbce 	bl	800339c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001c06:	2301      	movs	r3, #1
 8001c08:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c18:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4823      	ldr	r0, [pc, #140]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001c22:	f008 f85f 	bl	8009ce4 <HAL_RTC_SetDate>
 8001c26:	4603      	mov	r3, r0
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d001      	beq.n	8001c30 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001c2c:	f001 fbb6 	bl	800339c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c40:	2300      	movs	r3, #0
 8001c42:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c50:	2300      	movs	r3, #0
 8001c52:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c54:	2301      	movs	r3, #1
 8001c56:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001c5a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c5e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c60:	463b      	mov	r3, r7
 8001c62:	2201      	movs	r2, #1
 8001c64:	4619      	mov	r1, r3
 8001c66:	4812      	ldr	r0, [pc, #72]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001c68:	f008 f934 	bl	8009ed4 <HAL_RTC_SetAlarm>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001c72:	f001 fb93 	bl	800339c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c76:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c7a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c7c:	463b      	mov	r3, r7
 8001c7e:	2201      	movs	r2, #1
 8001c80:	4619      	mov	r1, r3
 8001c82:	480b      	ldr	r0, [pc, #44]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001c84:	f008 f926 	bl	8009ed4 <HAL_RTC_SetAlarm>
 8001c88:	4603      	mov	r3, r0
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001c8e:	f001 fb85 	bl	800339c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c92:	2202      	movs	r2, #2
 8001c94:	2100      	movs	r1, #0
 8001c96:	4806      	ldr	r0, [pc, #24]	; (8001cb0 <MX_RTC_Init+0x144>)
 8001c98:	f008 fac4 	bl	800a224 <HAL_RTCEx_SetTimeStamp>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d001      	beq.n	8001ca6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001ca2:	f001 fb7b 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001ca6:	bf00      	nop
 8001ca8:	3748      	adds	r7, #72	; 0x48
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
 8001cae:	bf00      	nop
 8001cb0:	20008a80 	.word	0x20008a80
 8001cb4:	40002800 	.word	0x40002800

08001cb8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cbc:	4b1b      	ldr	r3, [pc, #108]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cbe:	4a1c      	ldr	r2, [pc, #112]	; (8001d30 <MX_SPI2_Init+0x78>)
 8001cc0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cc2:	4b1a      	ldr	r3, [pc, #104]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cc4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cc8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cd0:	4b16      	ldr	r3, [pc, #88]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cd2:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cd6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cda:	2200      	movs	r2, #0
 8001cdc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cde:	4b13      	ldr	r3, [pc, #76]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001ce4:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001ce6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001d04:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001d06:	2207      	movs	r2, #7
 8001d08:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d10:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001d12:	2208      	movs	r2, #8
 8001d14:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	; (8001d2c <MX_SPI2_Init+0x74>)
 8001d18:	f008 fb59 	bl	800a3ce <HAL_SPI_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d22:	f001 fb3b 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	200086b8 	.word	0x200086b8
 8001d30:	40003800 	.word	0x40003800

08001d34 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b088      	sub	sp, #32
 8001d38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]
 8001d46:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d48:	1d3b      	adds	r3, r7, #4
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	605a      	str	r2, [r3, #4]
 8001d50:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d52:	4b20      	ldr	r3, [pc, #128]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d54:	4a20      	ldr	r2, [pc, #128]	; (8001dd8 <MX_TIM1_Init+0xa4>)
 8001d56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d58:	4b1e      	ldr	r3, [pc, #120]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d5e:	4b1d      	ldr	r3, [pc, #116]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d64:	4b1b      	ldr	r3, [pc, #108]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d66:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d6c:	4b19      	ldr	r3, [pc, #100]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d72:	4b18      	ldr	r3, [pc, #96]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d78:	4b16      	ldr	r3, [pc, #88]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d7e:	4815      	ldr	r0, [pc, #84]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d80:	f008 fbb7 	bl	800a4f2 <HAL_TIM_Base_Init>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d8a:	f001 fb07 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d92:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480e      	ldr	r0, [pc, #56]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001d9c:	f008 fe6a 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001da0:	4603      	mov	r3, r0
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d001      	beq.n	8001daa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001da6:	f001 faf9 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001daa:	2300      	movs	r3, #0
 8001dac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001db6:	1d3b      	adds	r3, r7, #4
 8001db8:	4619      	mov	r1, r3
 8001dba:	4806      	ldr	r0, [pc, #24]	; (8001dd4 <MX_TIM1_Init+0xa0>)
 8001dbc:	f009 fbb2 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d001      	beq.n	8001dca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dc6:	f001 fae9 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dca:	bf00      	nop
 8001dcc:	3720      	adds	r7, #32
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	20008aa0 	.word	0x20008aa0
 8001dd8:	40010000 	.word	0x40010000

08001ddc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b088      	sub	sp, #32
 8001de0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]
 8001dee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001df0:	1d3b      	adds	r3, r7, #4
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dfa:	4b1e      	ldr	r3, [pc, #120]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001dfc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001e00:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001e02:	4b1c      	ldr	r3, [pc, #112]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e04:	2200      	movs	r2, #0
 8001e06:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e08:	4b1a      	ldr	r3, [pc, #104]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e0a:	2200      	movs	r2, #0
 8001e0c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e0e:	4b19      	ldr	r3, [pc, #100]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e10:	f04f 32ff 	mov.w	r2, #4294967295
 8001e14:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e16:	4b17      	ldr	r3, [pc, #92]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e1c:	4b15      	ldr	r3, [pc, #84]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e22:	4814      	ldr	r0, [pc, #80]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e24:	f008 fb65 	bl	800a4f2 <HAL_TIM_Base_Init>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e2e:	f001 fab5 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e36:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e38:	f107 0310 	add.w	r3, r7, #16
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	480d      	ldr	r0, [pc, #52]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e40:	f008 fe18 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001e44:	4603      	mov	r3, r0
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d001      	beq.n	8001e4e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e4a:	f001 faa7 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e52:	2300      	movs	r3, #0
 8001e54:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e56:	1d3b      	adds	r3, r7, #4
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_TIM2_Init+0x98>)
 8001e5c:	f009 fb62 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 8001e60:	4603      	mov	r3, r0
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d001      	beq.n	8001e6a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e66:	f001 fa99 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e6a:	bf00      	nop
 8001e6c:	3720      	adds	r7, #32
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20008c1c 	.word	0x20008c1c

08001e78 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b08c      	sub	sp, #48	; 0x30
 8001e7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e7e:	f107 0320 	add.w	r3, r7, #32
 8001e82:	2200      	movs	r2, #0
 8001e84:	601a      	str	r2, [r3, #0]
 8001e86:	605a      	str	r2, [r3, #4]
 8001e88:	609a      	str	r2, [r3, #8]
 8001e8a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e8c:	f107 030c 	add.w	r3, r7, #12
 8001e90:	2200      	movs	r2, #0
 8001e92:	601a      	str	r2, [r3, #0]
 8001e94:	605a      	str	r2, [r3, #4]
 8001e96:	609a      	str	r2, [r3, #8]
 8001e98:	60da      	str	r2, [r3, #12]
 8001e9a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e9c:	463b      	mov	r3, r7
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001ea6:	4b25      	ldr	r3, [pc, #148]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001ea8:	4a25      	ldr	r2, [pc, #148]	; (8001f40 <MX_TIM3_Init+0xc8>)
 8001eaa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001eac:	4b23      	ldr	r3, [pc, #140]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001eb2:	4b22      	ldr	r3, [pc, #136]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eb8:	4b20      	ldr	r3, [pc, #128]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001eba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ebe:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ec0:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ec6:	4b1d      	ldr	r3, [pc, #116]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ecc:	481b      	ldr	r0, [pc, #108]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001ece:	f008 fb10 	bl	800a4f2 <HAL_TIM_Base_Init>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d001      	beq.n	8001edc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ed8:	f001 fa60 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001edc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ee0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ee2:	f107 0320 	add.w	r3, r7, #32
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	4814      	ldr	r0, [pc, #80]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001eea:	f008 fdc3 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d001      	beq.n	8001ef8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ef4:	f001 fa52 	bl	800339c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001efc:	2300      	movs	r3, #0
 8001efe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001f00:	f107 030c 	add.w	r3, r7, #12
 8001f04:	4619      	mov	r1, r3
 8001f06:	480d      	ldr	r0, [pc, #52]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001f08:	f008 fe7a 	bl	800ac00 <HAL_TIM_SlaveConfigSynchro>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d001      	beq.n	8001f16 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f12:	f001 fa43 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f16:	2300      	movs	r3, #0
 8001f18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f1a:	2300      	movs	r3, #0
 8001f1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f1e:	463b      	mov	r3, r7
 8001f20:	4619      	mov	r1, r3
 8001f22:	4806      	ldr	r0, [pc, #24]	; (8001f3c <MX_TIM3_Init+0xc4>)
 8001f24:	f009 fafe 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001f2e:	f001 fa35 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	3730      	adds	r7, #48	; 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20008868 	.word	0x20008868
 8001f40:	40000400 	.word	0x40000400

08001f44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b088      	sub	sp, #32
 8001f48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]
 8001f56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f58:	1d3b      	adds	r3, r7, #4
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	601a      	str	r2, [r3, #0]
 8001f5e:	605a      	str	r2, [r3, #4]
 8001f60:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f62:	4b1d      	ldr	r3, [pc, #116]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f64:	4a1d      	ldr	r2, [pc, #116]	; (8001fdc <MX_TIM5_Init+0x98>)
 8001f66:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f68:	4b1b      	ldr	r3, [pc, #108]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f6e:	4b1a      	ldr	r3, [pc, #104]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f70:	2200      	movs	r2, #0
 8001f72:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f74:	4b18      	ldr	r3, [pc, #96]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f76:	f04f 32ff 	mov.w	r2, #4294967295
 8001f7a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f7c:	4b16      	ldr	r3, [pc, #88]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f82:	4b15      	ldr	r3, [pc, #84]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f88:	4813      	ldr	r0, [pc, #76]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001f8a:	f008 fab2 	bl	800a4f2 <HAL_TIM_Base_Init>
 8001f8e:	4603      	mov	r3, r0
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d001      	beq.n	8001f98 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f94:	f001 fa02 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f98:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f9e:	f107 0310 	add.w	r3, r7, #16
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	480c      	ldr	r0, [pc, #48]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001fa6:	f008 fd65 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 8001faa:	4603      	mov	r3, r0
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d001      	beq.n	8001fb4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001fb0:	f001 f9f4 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fb8:	2300      	movs	r3, #0
 8001fba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fbc:	1d3b      	adds	r3, r7, #4
 8001fbe:	4619      	mov	r1, r3
 8001fc0:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_TIM5_Init+0x94>)
 8001fc2:	f009 faaf 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d001      	beq.n	8001fd0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001fcc:	f001 f9e6 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fd0:	bf00      	nop
 8001fd2:	3720      	adds	r7, #32
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	20008828 	.word	0x20008828
 8001fdc:	40000c00 	.word	0x40000c00

08001fe0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b09a      	sub	sp, #104	; 0x68
 8001fe4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fe6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ff4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002000:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002004:	2200      	movs	r2, #0
 8002006:	601a      	str	r2, [r3, #0]
 8002008:	605a      	str	r2, [r3, #4]
 800200a:	609a      	str	r2, [r3, #8]
 800200c:	60da      	str	r2, [r3, #12]
 800200e:	611a      	str	r2, [r3, #16]
 8002010:	615a      	str	r2, [r3, #20]
 8002012:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002014:	1d3b      	adds	r3, r7, #4
 8002016:	222c      	movs	r2, #44	; 0x2c
 8002018:	2100      	movs	r1, #0
 800201a:	4618      	mov	r0, r3
 800201c:	f00d f880 	bl	800f120 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002020:	4b42      	ldr	r3, [pc, #264]	; (800212c <MX_TIM8_Init+0x14c>)
 8002022:	4a43      	ldr	r2, [pc, #268]	; (8002130 <MX_TIM8_Init+0x150>)
 8002024:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8002026:	4b41      	ldr	r3, [pc, #260]	; (800212c <MX_TIM8_Init+0x14c>)
 8002028:	2200      	movs	r2, #0
 800202a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800202c:	4b3f      	ldr	r3, [pc, #252]	; (800212c <MX_TIM8_Init+0x14c>)
 800202e:	2200      	movs	r2, #0
 8002030:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002032:	4b3e      	ldr	r3, [pc, #248]	; (800212c <MX_TIM8_Init+0x14c>)
 8002034:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002038:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800203a:	4b3c      	ldr	r3, [pc, #240]	; (800212c <MX_TIM8_Init+0x14c>)
 800203c:	2200      	movs	r2, #0
 800203e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002040:	4b3a      	ldr	r3, [pc, #232]	; (800212c <MX_TIM8_Init+0x14c>)
 8002042:	2200      	movs	r2, #0
 8002044:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002046:	4b39      	ldr	r3, [pc, #228]	; (800212c <MX_TIM8_Init+0x14c>)
 8002048:	2200      	movs	r2, #0
 800204a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800204c:	4837      	ldr	r0, [pc, #220]	; (800212c <MX_TIM8_Init+0x14c>)
 800204e:	f008 fa50 	bl	800a4f2 <HAL_TIM_Base_Init>
 8002052:	4603      	mov	r3, r0
 8002054:	2b00      	cmp	r3, #0
 8002056:	d001      	beq.n	800205c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8002058:	f001 f9a0 	bl	800339c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800205c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002060:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002062:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002066:	4619      	mov	r1, r3
 8002068:	4830      	ldr	r0, [pc, #192]	; (800212c <MX_TIM8_Init+0x14c>)
 800206a:	f008 fd03 	bl	800aa74 <HAL_TIM_ConfigClockSource>
 800206e:	4603      	mov	r3, r0
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002074:	f001 f992 	bl	800339c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8002078:	482c      	ldr	r0, [pc, #176]	; (800212c <MX_TIM8_Init+0x14c>)
 800207a:	f008 fa8f 	bl	800a59c <HAL_TIM_PWM_Init>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d001      	beq.n	8002088 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002084:	f001 f98a 	bl	800339c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002088:	2300      	movs	r3, #0
 800208a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800208c:	2300      	movs	r3, #0
 800208e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002090:	2300      	movs	r3, #0
 8002092:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002094:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002098:	4619      	mov	r1, r3
 800209a:	4824      	ldr	r0, [pc, #144]	; (800212c <MX_TIM8_Init+0x14c>)
 800209c:	f009 fa42 	bl	800b524 <HAL_TIMEx_MasterConfigSynchronization>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d001      	beq.n	80020aa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80020a6:	f001 f979 	bl	800339c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80020aa:	2360      	movs	r3, #96	; 0x60
 80020ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020ae:	2300      	movs	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020b2:	2300      	movs	r3, #0
 80020b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020b6:	2300      	movs	r3, #0
 80020b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ba:	2300      	movs	r3, #0
 80020bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020be:	2300      	movs	r3, #0
 80020c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020c6:	220c      	movs	r2, #12
 80020c8:	4619      	mov	r1, r3
 80020ca:	4818      	ldr	r0, [pc, #96]	; (800212c <MX_TIM8_Init+0x14c>)
 80020cc:	f008 fbba 	bl	800a844 <HAL_TIM_PWM_ConfigChannel>
 80020d0:	4603      	mov	r3, r0
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d001      	beq.n	80020da <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80020d6:	f001 f961 	bl	800339c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020da:	2300      	movs	r3, #0
 80020dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020e2:	2300      	movs	r3, #0
 80020e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020e6:	2300      	movs	r3, #0
 80020e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020f4:	2300      	movs	r3, #0
 80020f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002100:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8002106:	2300      	movs	r3, #0
 8002108:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800210a:	1d3b      	adds	r3, r7, #4
 800210c:	4619      	mov	r1, r3
 800210e:	4807      	ldr	r0, [pc, #28]	; (800212c <MX_TIM8_Init+0x14c>)
 8002110:	f009 fa96 	bl	800b640 <HAL_TIMEx_ConfigBreakDeadTime>
 8002114:	4603      	mov	r3, r0
 8002116:	2b00      	cmp	r3, #0
 8002118:	d001      	beq.n	800211e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800211a:	f001 f93f 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800211e:	4803      	ldr	r0, [pc, #12]	; (800212c <MX_TIM8_Init+0x14c>)
 8002120:	f003 fa38 	bl	8005594 <HAL_TIM_MspPostInit>

}
 8002124:	bf00      	nop
 8002126:	3768      	adds	r7, #104	; 0x68
 8002128:	46bd      	mov	sp, r7
 800212a:	bd80      	pop	{r7, pc}
 800212c:	2000879c 	.word	0x2000879c
 8002130:	40010400 	.word	0x40010400

08002134 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002138:	4b14      	ldr	r3, [pc, #80]	; (800218c <MX_UART7_Init+0x58>)
 800213a:	4a15      	ldr	r2, [pc, #84]	; (8002190 <MX_UART7_Init+0x5c>)
 800213c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800213e:	4b13      	ldr	r3, [pc, #76]	; (800218c <MX_UART7_Init+0x58>)
 8002140:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002144:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002146:	4b11      	ldr	r3, [pc, #68]	; (800218c <MX_UART7_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800214c:	4b0f      	ldr	r3, [pc, #60]	; (800218c <MX_UART7_Init+0x58>)
 800214e:	2200      	movs	r2, #0
 8002150:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002152:	4b0e      	ldr	r3, [pc, #56]	; (800218c <MX_UART7_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002158:	4b0c      	ldr	r3, [pc, #48]	; (800218c <MX_UART7_Init+0x58>)
 800215a:	220c      	movs	r2, #12
 800215c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800215e:	4b0b      	ldr	r3, [pc, #44]	; (800218c <MX_UART7_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002164:	4b09      	ldr	r3, [pc, #36]	; (800218c <MX_UART7_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800216a:	4b08      	ldr	r3, [pc, #32]	; (800218c <MX_UART7_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <MX_UART7_Init+0x58>)
 8002172:	2200      	movs	r2, #0
 8002174:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002176:	4805      	ldr	r0, [pc, #20]	; (800218c <MX_UART7_Init+0x58>)
 8002178:	f009 fafe 	bl	800b778 <HAL_UART_Init>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002182:	f001 f90b 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	2000871c 	.word	0x2000871c
 8002190:	40007800 	.word	0x40007800

08002194 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <MX_USART1_UART_Init+0x58>)
 800219a:	4a15      	ldr	r2, [pc, #84]	; (80021f0 <MX_USART1_UART_Init+0x5c>)
 800219c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800219e:	4b13      	ldr	r3, [pc, #76]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021a6:	4b11      	ldr	r3, [pc, #68]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021ac:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021b2:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021b8:	4b0c      	ldr	r3, [pc, #48]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021ba:	220c      	movs	r2, #12
 80021bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021be:	4b0b      	ldr	r3, [pc, #44]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021c4:	4b09      	ldr	r3, [pc, #36]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021ca:	4b08      	ldr	r3, [pc, #32]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021d0:	4b06      	ldr	r3, [pc, #24]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021d2:	2200      	movs	r2, #0
 80021d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021d6:	4805      	ldr	r0, [pc, #20]	; (80021ec <MX_USART1_UART_Init+0x58>)
 80021d8:	f009 face 	bl	800b778 <HAL_UART_Init>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021e2:	f001 f8db 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021e6:	bf00      	nop
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	200089ec 	.word	0x200089ec
 80021f0:	40011000 	.word	0x40011000

080021f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021f8:	4b14      	ldr	r3, [pc, #80]	; (800224c <MX_USART6_UART_Init+0x58>)
 80021fa:	4a15      	ldr	r2, [pc, #84]	; (8002250 <MX_USART6_UART_Init+0x5c>)
 80021fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021fe:	4b13      	ldr	r3, [pc, #76]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002200:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002204:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002206:	4b11      	ldr	r3, [pc, #68]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800220c:	4b0f      	ldr	r3, [pc, #60]	; (800224c <MX_USART6_UART_Init+0x58>)
 800220e:	2200      	movs	r2, #0
 8002210:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002212:	4b0e      	ldr	r3, [pc, #56]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002218:	4b0c      	ldr	r3, [pc, #48]	; (800224c <MX_USART6_UART_Init+0x58>)
 800221a:	220c      	movs	r2, #12
 800221c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800221e:	4b0b      	ldr	r3, [pc, #44]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002224:	4b09      	ldr	r3, [pc, #36]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <MX_USART6_UART_Init+0x58>)
 800222c:	2200      	movs	r2, #0
 800222e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002232:	2200      	movs	r2, #0
 8002234:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002236:	4805      	ldr	r0, [pc, #20]	; (800224c <MX_USART6_UART_Init+0x58>)
 8002238:	f009 fa9e 	bl	800b778 <HAL_UART_Init>
 800223c:	4603      	mov	r3, r0
 800223e:	2b00      	cmp	r3, #0
 8002240:	d001      	beq.n	8002246 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002242:	f001 f8ab 	bl	800339c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002246:	bf00      	nop
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	20008b5c 	.word	0x20008b5c
 8002250:	40011400 	.word	0x40011400

08002254 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002254:	b580      	push	{r7, lr}
 8002256:	b088      	sub	sp, #32
 8002258:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800225a:	1d3b      	adds	r3, r7, #4
 800225c:	2200      	movs	r2, #0
 800225e:	601a      	str	r2, [r3, #0]
 8002260:	605a      	str	r2, [r3, #4]
 8002262:	609a      	str	r2, [r3, #8]
 8002264:	60da      	str	r2, [r3, #12]
 8002266:	611a      	str	r2, [r3, #16]
 8002268:	615a      	str	r2, [r3, #20]
 800226a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800226c:	4b1e      	ldr	r3, [pc, #120]	; (80022e8 <MX_FMC_Init+0x94>)
 800226e:	4a1f      	ldr	r2, [pc, #124]	; (80022ec <MX_FMC_Init+0x98>)
 8002270:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002272:	4b1d      	ldr	r3, [pc, #116]	; (80022e8 <MX_FMC_Init+0x94>)
 8002274:	2200      	movs	r2, #0
 8002276:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8002278:	4b1b      	ldr	r3, [pc, #108]	; (80022e8 <MX_FMC_Init+0x94>)
 800227a:	2200      	movs	r2, #0
 800227c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800227e:	4b1a      	ldr	r3, [pc, #104]	; (80022e8 <MX_FMC_Init+0x94>)
 8002280:	2204      	movs	r2, #4
 8002282:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002284:	4b18      	ldr	r3, [pc, #96]	; (80022e8 <MX_FMC_Init+0x94>)
 8002286:	2210      	movs	r2, #16
 8002288:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800228a:	4b17      	ldr	r3, [pc, #92]	; (80022e8 <MX_FMC_Init+0x94>)
 800228c:	2240      	movs	r2, #64	; 0x40
 800228e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002290:	4b15      	ldr	r3, [pc, #84]	; (80022e8 <MX_FMC_Init+0x94>)
 8002292:	2280      	movs	r2, #128	; 0x80
 8002294:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8002296:	4b14      	ldr	r3, [pc, #80]	; (80022e8 <MX_FMC_Init+0x94>)
 8002298:	2200      	movs	r2, #0
 800229a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800229c:	4b12      	ldr	r3, [pc, #72]	; (80022e8 <MX_FMC_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80022a2:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <MX_FMC_Init+0x94>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80022a8:	4b0f      	ldr	r3, [pc, #60]	; (80022e8 <MX_FMC_Init+0x94>)
 80022aa:	2200      	movs	r2, #0
 80022ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80022ae:	2310      	movs	r3, #16
 80022b0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80022b2:	2310      	movs	r3, #16
 80022b4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80022b6:	2310      	movs	r3, #16
 80022b8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80022ba:	2310      	movs	r3, #16
 80022bc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80022be:	2310      	movs	r3, #16
 80022c0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80022c2:	2310      	movs	r3, #16
 80022c4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80022c6:	2310      	movs	r3, #16
 80022c8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4806      	ldr	r0, [pc, #24]	; (80022e8 <MX_FMC_Init+0x94>)
 80022d0:	f007 fffe 	bl	800a2d0 <HAL_SDRAM_Init>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80022da:	f001 f85f 	bl	800339c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022de:	bf00      	nop
 80022e0:	3720      	adds	r7, #32
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bd80      	pop	{r7, pc}
 80022e6:	bf00      	nop
 80022e8:	20008c74 	.word	0x20008c74
 80022ec:	a0000140 	.word	0xa0000140

080022f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b090      	sub	sp, #64	; 0x40
 80022f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022fa:	2200      	movs	r2, #0
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	605a      	str	r2, [r3, #4]
 8002300:	609a      	str	r2, [r3, #8]
 8002302:	60da      	str	r2, [r3, #12]
 8002304:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8002306:	4bb0      	ldr	r3, [pc, #704]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	4aaf      	ldr	r2, [pc, #700]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800230c:	f043 0310 	orr.w	r3, r3, #16
 8002310:	6313      	str	r3, [r2, #48]	; 0x30
 8002312:	4bad      	ldr	r3, [pc, #692]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f003 0310 	and.w	r3, r3, #16
 800231a:	62bb      	str	r3, [r7, #40]	; 0x28
 800231c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800231e:	4baa      	ldr	r3, [pc, #680]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	4aa9      	ldr	r2, [pc, #676]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002324:	f043 0302 	orr.w	r3, r3, #2
 8002328:	6313      	str	r3, [r2, #48]	; 0x30
 800232a:	4ba7      	ldr	r3, [pc, #668]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	f003 0302 	and.w	r3, r3, #2
 8002332:	627b      	str	r3, [r7, #36]	; 0x24
 8002334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002336:	4ba4      	ldr	r3, [pc, #656]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	4aa3      	ldr	r2, [pc, #652]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800233c:	f043 0301 	orr.w	r3, r3, #1
 8002340:	6313      	str	r3, [r2, #48]	; 0x30
 8002342:	4ba1      	ldr	r3, [pc, #644]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	f003 0301 	and.w	r3, r3, #1
 800234a:	623b      	str	r3, [r7, #32]
 800234c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800234e:	4b9e      	ldr	r3, [pc, #632]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	4a9d      	ldr	r2, [pc, #628]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002354:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002358:	6313      	str	r3, [r2, #48]	; 0x30
 800235a:	4b9b      	ldr	r3, [pc, #620]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002362:	61fb      	str	r3, [r7, #28]
 8002364:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8002366:	4b98      	ldr	r3, [pc, #608]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a97      	ldr	r2, [pc, #604]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800236c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b95      	ldr	r3, [pc, #596]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800237a:	61bb      	str	r3, [r7, #24]
 800237c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800237e:	4b92      	ldr	r3, [pc, #584]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	4a91      	ldr	r2, [pc, #580]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002384:	f043 0308 	orr.w	r3, r3, #8
 8002388:	6313      	str	r3, [r2, #48]	; 0x30
 800238a:	4b8f      	ldr	r3, [pc, #572]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f003 0308 	and.w	r3, r3, #8
 8002392:	617b      	str	r3, [r7, #20]
 8002394:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8002396:	4b8c      	ldr	r3, [pc, #560]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	4a8b      	ldr	r2, [pc, #556]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 800239c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a0:	6313      	str	r3, [r2, #48]	; 0x30
 80023a2:	4b89      	ldr	r3, [pc, #548]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023aa:	613b      	str	r3, [r7, #16]
 80023ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023ae:	4b86      	ldr	r3, [pc, #536]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	4a85      	ldr	r2, [pc, #532]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023b8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ba:	4b83      	ldr	r3, [pc, #524]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023c2:	60fb      	str	r3, [r7, #12]
 80023c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023c6:	4b80      	ldr	r3, [pc, #512]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a7f      	ldr	r2, [pc, #508]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023cc:	f043 0304 	orr.w	r3, r3, #4
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b7d      	ldr	r3, [pc, #500]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0304 	and.w	r3, r3, #4
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023de:	4b7a      	ldr	r3, [pc, #488]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a79      	ldr	r2, [pc, #484]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023e4:	f043 0320 	orr.w	r3, r3, #32
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b77      	ldr	r3, [pc, #476]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0320 	and.w	r3, r3, #32
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023f6:	4b74      	ldr	r3, [pc, #464]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	4a73      	ldr	r2, [pc, #460]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 80023fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002400:	6313      	str	r3, [r2, #48]	; 0x30
 8002402:	4b71      	ldr	r3, [pc, #452]	; (80025c8 <MX_GPIO_Init+0x2d8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800240e:	2200      	movs	r2, #0
 8002410:	2110      	movs	r1, #16
 8002412:	486e      	ldr	r0, [pc, #440]	; (80025cc <MX_GPIO_Init+0x2dc>)
 8002414:	f005 f892 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8002418:	2200      	movs	r2, #0
 800241a:	2160      	movs	r1, #96	; 0x60
 800241c:	486c      	ldr	r0, [pc, #432]	; (80025d0 <MX_GPIO_Init+0x2e0>)
 800241e:	f005 f88d 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002422:	2201      	movs	r2, #1
 8002424:	2120      	movs	r1, #32
 8002426:	486b      	ldr	r0, [pc, #428]	; (80025d4 <MX_GPIO_Init+0x2e4>)
 8002428:	f005 f888 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 800242c:	2200      	movs	r2, #0
 800242e:	2108      	movs	r1, #8
 8002430:	4868      	ldr	r0, [pc, #416]	; (80025d4 <MX_GPIO_Init+0x2e4>)
 8002432:	f005 f883 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8002436:	2200      	movs	r2, #0
 8002438:	2108      	movs	r1, #8
 800243a:	4867      	ldr	r0, [pc, #412]	; (80025d8 <MX_GPIO_Init+0x2e8>)
 800243c:	f005 f87e 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002440:	2201      	movs	r2, #1
 8002442:	2108      	movs	r1, #8
 8002444:	4865      	ldr	r0, [pc, #404]	; (80025dc <MX_GPIO_Init+0x2ec>)
 8002446:	f005 f879 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800244a:	2201      	movs	r2, #1
 800244c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002450:	4861      	ldr	r0, [pc, #388]	; (80025d8 <MX_GPIO_Init+0x2e8>)
 8002452:	f005 f873 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8002456:	2200      	movs	r2, #0
 8002458:	f645 6140 	movw	r1, #24128	; 0x5e40
 800245c:	4860      	ldr	r0, [pc, #384]	; (80025e0 <MX_GPIO_Init+0x2f0>)
 800245e:	f005 f86d 	bl	800753c <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8002462:	2200      	movs	r2, #0
 8002464:	2108      	movs	r1, #8
 8002466:	485f      	ldr	r0, [pc, #380]	; (80025e4 <MX_GPIO_Init+0x2f4>)
 8002468:	f005 f868 	bl	800753c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800246c:	2308      	movs	r3, #8
 800246e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002470:	2300      	movs	r3, #0
 8002472:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002474:	2300      	movs	r3, #0
 8002476:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002478:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800247c:	4619      	mov	r1, r3
 800247e:	4854      	ldr	r0, [pc, #336]	; (80025d0 <MX_GPIO_Init+0x2e0>)
 8002480:	f004 fd8c 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002484:	f643 0323 	movw	r3, #14371	; 0x3823
 8002488:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248a:	2302      	movs	r3, #2
 800248c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800248e:	2300      	movs	r3, #0
 8002490:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002492:	2303      	movs	r3, #3
 8002494:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002496:	230a      	movs	r3, #10
 8002498:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800249a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800249e:	4619      	mov	r1, r3
 80024a0:	484a      	ldr	r0, [pc, #296]	; (80025cc <MX_GPIO_Init+0x2dc>)
 80024a2:	f004 fd7b 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80024a6:	2310      	movs	r3, #16
 80024a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024aa:	2301      	movs	r3, #1
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80024b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ba:	4619      	mov	r1, r3
 80024bc:	4843      	ldr	r0, [pc, #268]	; (80025cc <MX_GPIO_Init+0x2dc>)
 80024be:	f004 fd6d 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80024c2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80024c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024c8:	2300      	movs	r3, #0
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024d0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024d4:	4619      	mov	r1, r3
 80024d6:	4844      	ldr	r0, [pc, #272]	; (80025e8 <MX_GPIO_Init+0x2f8>)
 80024d8:	f004 fd60 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80024dc:	2360      	movs	r3, #96	; 0x60
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024e0:	2301      	movs	r3, #1
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024e4:	2300      	movs	r3, #0
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e8:	2300      	movs	r3, #0
 80024ea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024f0:	4619      	mov	r1, r3
 80024f2:	4837      	ldr	r0, [pc, #220]	; (80025d0 <MX_GPIO_Init+0x2e0>)
 80024f4:	f004 fd52 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80024f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024fe:	2300      	movs	r3, #0
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002502:	2300      	movs	r3, #0
 8002504:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002506:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800250a:	4619      	mov	r1, r3
 800250c:	4837      	ldr	r0, [pc, #220]	; (80025ec <MX_GPIO_Init+0x2fc>)
 800250e:	f004 fd45 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002512:	2340      	movs	r3, #64	; 0x40
 8002514:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002516:	4b36      	ldr	r3, [pc, #216]	; (80025f0 <MX_GPIO_Init+0x300>)
 8002518:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800251a:	2300      	movs	r3, #0
 800251c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 800251e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002522:	4619      	mov	r1, r3
 8002524:	482b      	ldr	r0, [pc, #172]	; (80025d4 <MX_GPIO_Init+0x2e4>)
 8002526:	f004 fd39 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800252a:	2328      	movs	r3, #40	; 0x28
 800252c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800252e:	2301      	movs	r3, #1
 8002530:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002532:	2300      	movs	r3, #0
 8002534:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002536:	2300      	movs	r3, #0
 8002538:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800253a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800253e:	4619      	mov	r1, r3
 8002540:	4824      	ldr	r0, [pc, #144]	; (80025d4 <MX_GPIO_Init+0x2e4>)
 8002542:	f004 fd2b 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8002546:	f241 0308 	movw	r3, #4104	; 0x1008
 800254a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800254c:	2301      	movs	r3, #1
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002550:	2300      	movs	r3, #0
 8002552:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002554:	2300      	movs	r3, #0
 8002556:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8002558:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800255c:	4619      	mov	r1, r3
 800255e:	481e      	ldr	r0, [pc, #120]	; (80025d8 <MX_GPIO_Init+0x2e8>)
 8002560:	f004 fd1c 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002564:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002568:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800256a:	2300      	movs	r3, #0
 800256c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800256e:	2300      	movs	r3, #0
 8002570:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002572:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002576:	4619      	mov	r1, r3
 8002578:	481e      	ldr	r0, [pc, #120]	; (80025f4 <MX_GPIO_Init+0x304>)
 800257a:	f004 fd0f 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 800257e:	2308      	movs	r3, #8
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002582:	2301      	movs	r3, #1
 8002584:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002586:	2300      	movs	r3, #0
 8002588:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258a:	2300      	movs	r3, #0
 800258c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 800258e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002592:	4619      	mov	r1, r3
 8002594:	4811      	ldr	r0, [pc, #68]	; (80025dc <MX_GPIO_Init+0x2ec>)
 8002596:	f004 fd01 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800259a:	2310      	movs	r3, #16
 800259c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800259e:	2300      	movs	r3, #0
 80025a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a2:	2300      	movs	r3, #0
 80025a4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80025a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025aa:	4619      	mov	r1, r3
 80025ac:	4809      	ldr	r0, [pc, #36]	; (80025d4 <MX_GPIO_Init+0x2e4>)
 80025ae:	f004 fcf5 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80025b2:	f248 0304 	movw	r3, #32772	; 0x8004
 80025b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025b8:	2300      	movs	r3, #0
 80025ba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025bc:	2300      	movs	r3, #0
 80025be:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025c4:	4619      	mov	r1, r3
 80025c6:	e017      	b.n	80025f8 <MX_GPIO_Init+0x308>
 80025c8:	40023800 	.word	0x40023800
 80025cc:	40020400 	.word	0x40020400
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40020c00 	.word	0x40020c00
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40022800 	.word	0x40022800
 80025e0:	40021c00 	.word	0x40021c00
 80025e4:	40021800 	.word	0x40021800
 80025e8:	40020000 	.word	0x40020000
 80025ec:	40022400 	.word	0x40022400
 80025f0:	10120000 	.word	0x10120000
 80025f4:	40020800 	.word	0x40020800
 80025f8:	4836      	ldr	r0, [pc, #216]	; (80026d4 <MX_GPIO_Init+0x3e4>)
 80025fa:	f004 fccf 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80025fe:	f645 6340 	movw	r3, #24128	; 0x5e40
 8002602:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002604:	2301      	movs	r3, #1
 8002606:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002608:	2300      	movs	r3, #0
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800260c:	2300      	movs	r3, #0
 800260e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002610:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002614:	4619      	mov	r1, r3
 8002616:	482f      	ldr	r0, [pc, #188]	; (80026d4 <MX_GPIO_Init+0x3e4>)
 8002618:	f004 fcc0 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 800261c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002622:	4b2d      	ldr	r3, [pc, #180]	; (80026d8 <MX_GPIO_Init+0x3e8>)
 8002624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002626:	2300      	movs	r3, #0
 8002628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800262a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800262e:	4619      	mov	r1, r3
 8002630:	482a      	ldr	r0, [pc, #168]	; (80026dc <MX_GPIO_Init+0x3ec>)
 8002632:	f004 fcb3 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8002636:	2310      	movs	r3, #16
 8002638:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800263a:	2302      	movs	r3, #2
 800263c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800263e:	2300      	movs	r3, #0
 8002640:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002642:	2303      	movs	r3, #3
 8002644:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002646:	230a      	movs	r3, #10
 8002648:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800264a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800264e:	4619      	mov	r1, r3
 8002650:	4820      	ldr	r0, [pc, #128]	; (80026d4 <MX_GPIO_Init+0x3e4>)
 8002652:	f004 fca3 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8002656:	2384      	movs	r3, #132	; 0x84
 8002658:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800265a:	2300      	movs	r3, #0
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002662:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002666:	4619      	mov	r1, r3
 8002668:	481d      	ldr	r0, [pc, #116]	; (80026e0 <MX_GPIO_Init+0x3f0>)
 800266a:	f004 fc97 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 800266e:	2305      	movs	r3, #5
 8002670:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002672:	2302      	movs	r3, #2
 8002674:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002676:	2300      	movs	r3, #0
 8002678:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800267a:	2303      	movs	r3, #3
 800267c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800267e:	230a      	movs	r3, #10
 8002680:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002682:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002686:	4619      	mov	r1, r3
 8002688:	4816      	ldr	r0, [pc, #88]	; (80026e4 <MX_GPIO_Init+0x3f4>)
 800268a:	f004 fc87 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 800268e:	2308      	movs	r3, #8
 8002690:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002692:	2301      	movs	r3, #1
 8002694:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002696:	2300      	movs	r3, #0
 8002698:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800269a:	2300      	movs	r3, #0
 800269c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 800269e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026a2:	4619      	mov	r1, r3
 80026a4:	480e      	ldr	r0, [pc, #56]	; (80026e0 <MX_GPIO_Init+0x3f0>)
 80026a6:	f004 fc79 	bl	8006f9c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 80026aa:	2328      	movs	r3, #40	; 0x28
 80026ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ae:	2302      	movs	r3, #2
 80026b0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026b2:	2300      	movs	r3, #0
 80026b4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026b6:	2303      	movs	r3, #3
 80026b8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026ba:	230a      	movs	r3, #10
 80026bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026c2:	4619      	mov	r1, r3
 80026c4:	4808      	ldr	r0, [pc, #32]	; (80026e8 <MX_GPIO_Init+0x3f8>)
 80026c6:	f004 fc69 	bl	8006f9c <HAL_GPIO_Init>

}
 80026ca:	bf00      	nop
 80026cc:	3740      	adds	r7, #64	; 0x40
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021c00 	.word	0x40021c00
 80026d8:	10120000 	.word	0x10120000
 80026dc:	40022000 	.word	0x40022000
 80026e0:	40021800 	.word	0x40021800
 80026e4:	40020800 	.word	0x40020800
 80026e8:	40020000 	.word	0x40020000

080026ec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]

	//Réception des coordonnées de la raquette droite
	x_RRacket = (rxbuffer[0] << 8) | rxbuffer[1];
 80026f4:	4b14      	ldr	r3, [pc, #80]	; (8002748 <HAL_UART_RxCpltCallback+0x5c>)
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	021b      	lsls	r3, r3, #8
 80026fa:	b21a      	sxth	r2, r3
 80026fc:	4b12      	ldr	r3, [pc, #72]	; (8002748 <HAL_UART_RxCpltCallback+0x5c>)
 80026fe:	785b      	ldrb	r3, [r3, #1]
 8002700:	b21b      	sxth	r3, r3
 8002702:	4313      	orrs	r3, r2
 8002704:	b21a      	sxth	r2, r3
 8002706:	4b11      	ldr	r3, [pc, #68]	; (800274c <HAL_UART_RxCpltCallback+0x60>)
 8002708:	801a      	strh	r2, [r3, #0]
	y_RRacket = (rxbuffer[2] << 8) | rxbuffer[3];
 800270a:	4b0f      	ldr	r3, [pc, #60]	; (8002748 <HAL_UART_RxCpltCallback+0x5c>)
 800270c:	789b      	ldrb	r3, [r3, #2]
 800270e:	021b      	lsls	r3, r3, #8
 8002710:	b21a      	sxth	r2, r3
 8002712:	4b0d      	ldr	r3, [pc, #52]	; (8002748 <HAL_UART_RxCpltCallback+0x5c>)
 8002714:	78db      	ldrb	r3, [r3, #3]
 8002716:	b21b      	sxth	r3, r3
 8002718:	4313      	orrs	r3, r2
 800271a:	b21a      	sxth	r2, r3
 800271c:	4b0c      	ldr	r3, [pc, #48]	; (8002750 <HAL_UART_RxCpltCallback+0x64>)
 800271e:	801a      	strh	r2, [r3, #0]

	//Offset des coordonées de la raquette droite
	x_RRacket += 480;
 8002720:	4b0a      	ldr	r3, [pc, #40]	; (800274c <HAL_UART_RxCpltCallback+0x60>)
 8002722:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002726:	b29b      	uxth	r3, r3
 8002728:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 800272c:	b29b      	uxth	r3, r3
 800272e:	b21a      	sxth	r2, r3
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_UART_RxCpltCallback+0x60>)
 8002732:	801a      	strh	r2, [r3, #0]


	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7,rxbuffer,4);
 8002734:	2204      	movs	r2, #4
 8002736:	4904      	ldr	r1, [pc, #16]	; (8002748 <HAL_UART_RxCpltCallback+0x5c>)
 8002738:	4806      	ldr	r0, [pc, #24]	; (8002754 <HAL_UART_RxCpltCallback+0x68>)
 800273a:	f009 f8c7 	bl	800b8cc <HAL_UART_Receive_IT>
}
 800273e:	bf00      	nop
 8002740:	3708      	adds	r7, #8
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	20008cac 	.word	0x20008cac
 800274c:	2000002e 	.word	0x2000002e
 8002750:	20000030 	.word	0x20000030
 8002754:	2000871c 	.word	0x2000871c

08002758 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b082      	sub	sp, #8
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(10000);
 8002760:	f242 7010 	movw	r0, #10000	; 0x2710
 8002764:	f00a f98d 	bl	800ca82 <osDelay>
 8002768:	e7fa      	b.n	8002760 <StartDefaultTask+0x8>
	...

0800276c <Starthorloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Starthorloge */
void Starthorloge(void const * argument)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b090      	sub	sp, #64	; 0x40
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthorloge */
	//Initialisation du texte d'affichage
	char text[50] = { };
 8002774:	2300      	movs	r3, #0
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	f107 0310 	add.w	r3, r7, #16
 800277c:	222e      	movs	r2, #46	; 0x2e
 800277e:	2100      	movs	r1, #0
 8002780:	4618      	mov	r0, r3
 8002782:	f00c fccd 	bl	800f120 <memset>

	/* Infinite loop */
	for (;;) {
		//Récupération des grandeurs temps et date (même si la date ne nous sert pas)
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002786:	2200      	movs	r2, #0
 8002788:	4915      	ldr	r1, [pc, #84]	; (80027e0 <Starthorloge+0x74>)
 800278a:	4816      	ldr	r0, [pc, #88]	; (80027e4 <Starthorloge+0x78>)
 800278c:	f007 fa4c 	bl	8009c28 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002790:	2200      	movs	r2, #0
 8002792:	4915      	ldr	r1, [pc, #84]	; (80027e8 <Starthorloge+0x7c>)
 8002794:	4813      	ldr	r0, [pc, #76]	; (80027e4 <Starthorloge+0x78>)
 8002796:	f007 fb4d 	bl	8009e34 <HAL_RTC_GetDate>

		//Conversion en chaine de caractères et stockage dans le texte d'affichage
		sprintf(text, "%2u:%2u", time.Minutes, time.Seconds);
 800279a:	4b11      	ldr	r3, [pc, #68]	; (80027e0 <Starthorloge+0x74>)
 800279c:	785b      	ldrb	r3, [r3, #1]
 800279e:	461a      	mov	r2, r3
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <Starthorloge+0x74>)
 80027a2:	789b      	ldrb	r3, [r3, #2]
 80027a4:	f107 000c 	add.w	r0, r7, #12
 80027a8:	4910      	ldr	r1, [pc, #64]	; (80027ec <Starthorloge+0x80>)
 80027aa:	f00c fcc1 	bl	800f130 <siprintf>

		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80027ae:	4b10      	ldr	r3, [pc, #64]	; (80027f0 <Starthorloge+0x84>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f04f 31ff 	mov.w	r1, #4294967295
 80027b6:	4618      	mov	r0, r3
 80027b8:	f00a fd0c 	bl	800d1d4 <xQueueSemaphoreTake>

		//Affichage du chronomètre de jeu
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 80027bc:	f107 030c 	add.w	r3, r7, #12
 80027c0:	4619      	mov	r1, r3
 80027c2:	2001      	movs	r0, #1
 80027c4:	f001 fa32 	bl	8003c2c <BSP_LCD_DisplayStringAtLine>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <Starthorloge+0x84>)
 80027ca:	6818      	ldr	r0, [r3, #0]
 80027cc:	2300      	movs	r3, #0
 80027ce:	2200      	movs	r2, #0
 80027d0:	2100      	movs	r1, #0
 80027d2:	f00a fbf9 	bl	800cfc8 <xQueueGenericSend>

		osDelay(500);
 80027d6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027da:	f00a f952 	bl	800ca82 <osDelay>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 80027de:	e7d2      	b.n	8002786 <Starthorloge+0x1a>
 80027e0:	20008b44 	.word	0x20008b44
 80027e4:	20008a80 	.word	0x20008a80
 80027e8:	20008c5c 	.word	0x20008c5c
 80027ec:	08010c34 	.word	0x08010c34
 80027f0:	20008ca8 	.word	0x20008ca8

080027f4 <StartLRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLRacket */
void StartLRacket(void const * argument)
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b08a      	sub	sp, #40	; 0x28
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLRacket */

	x_LRacket = 50-width_rackets/2;
 80027fc:	4b67      	ldr	r3, [pc, #412]	; (800299c <StartLRacket+0x1a8>)
 80027fe:	222e      	movs	r2, #46	; 0x2e
 8002800:	801a      	strh	r2, [r3, #0]
	y_LRacket = 136-height_rackets/2;
 8002802:	4b67      	ldr	r3, [pc, #412]	; (80029a0 <StartLRacket+0x1ac>)
 8002804:	226f      	movs	r2, #111	; 0x6f
 8002806:	801a      	strh	r2, [r3, #0]
	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8002808:	2300      	movs	r3, #0
 800280a:	61fb      	str	r3, [r7, #28]
	joystick_v = 0;
 800280c:	2300      	movs	r3, #0
 800280e:	61bb      	str	r3, [r7, #24]
	//Initialisation du stockage des coordonnées de la raquette gauche
	int32_t x_LRacket_hold;
	int32_t y_LRacket_hold;

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002810:	f107 0308 	add.w	r3, r7, #8
 8002814:	2200      	movs	r2, #0
 8002816:	601a      	str	r2, [r3, #0]
 8002818:	605a      	str	r2, [r3, #4]
 800281a:	609a      	str	r2, [r3, #8]
 800281c:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 800281e:	2301      	movs	r3, #1
 8002820:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002822:	2300      	movs	r3, #0
 8002824:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002826:	f107 0308 	add.w	r3, r7, #8
 800282a:	4619      	mov	r1, r3
 800282c:	485d      	ldr	r0, [pc, #372]	; (80029a4 <StartLRacket+0x1b0>)
 800282e:	f003 fb55 	bl	8005edc <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for (;;) {
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8002832:	2308      	movs	r3, #8
 8002834:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8002836:	f107 0308 	add.w	r3, r7, #8
 800283a:	4619      	mov	r1, r3
 800283c:	4859      	ldr	r0, [pc, #356]	; (80029a4 <StartLRacket+0x1b0>)
 800283e:	f003 fb4d 	bl	8005edc <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8002842:	4858      	ldr	r0, [pc, #352]	; (80029a4 <StartLRacket+0x1b0>)
 8002844:	f003 f9f8 	bl	8005c38 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8002848:	bf00      	nop
 800284a:	2164      	movs	r1, #100	; 0x64
 800284c:	4855      	ldr	r0, [pc, #340]	; (80029a4 <StartLRacket+0x1b0>)
 800284e:	f003 fab3 	bl	8005db8 <HAL_ADC_PollForConversion>
 8002852:	4603      	mov	r3, r0
 8002854:	2b00      	cmp	r3, #0
 8002856:	d1f8      	bne.n	800284a <StartLRacket+0x56>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8002858:	4852      	ldr	r0, [pc, #328]	; (80029a4 <StartLRacket+0x1b0>)
 800285a:	f003 fb31 	bl	8005ec0 <HAL_ADC_GetValue>
 800285e:	4603      	mov	r3, r0
 8002860:	61bb      	str	r3, [r7, #24]

		HAL_ADC_Start(&hadc1);
 8002862:	4851      	ldr	r0, [pc, #324]	; (80029a8 <StartLRacket+0x1b4>)
 8002864:	f003 f9e8 	bl	8005c38 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8002868:	bf00      	nop
 800286a:	2164      	movs	r1, #100	; 0x64
 800286c:	484e      	ldr	r0, [pc, #312]	; (80029a8 <StartLRacket+0x1b4>)
 800286e:	f003 faa3 	bl	8005db8 <HAL_ADC_PollForConversion>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d1f8      	bne.n	800286a <StartLRacket+0x76>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8002878:	484b      	ldr	r0, [pc, #300]	; (80029a8 <StartLRacket+0x1b4>)
 800287a:	f003 fb21 	bl	8005ec0 <HAL_ADC_GetValue>
 800287e:	4603      	mov	r3, r0
 8002880:	61fb      	str	r3, [r7, #28]

		//Actualisation des coordonnées de la raquette gauche
		x_LRacket -= (joystick_h - 2080)/300;
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8002888:	4a48      	ldr	r2, [pc, #288]	; (80029ac <StartLRacket+0x1b8>)
 800288a:	fb82 1203 	smull	r1, r2, r2, r3
 800288e:	1152      	asrs	r2, r2, #5
 8002890:	17db      	asrs	r3, r3, #31
 8002892:	1a9b      	subs	r3, r3, r2
 8002894:	b29a      	uxth	r2, r3
 8002896:	4b41      	ldr	r3, [pc, #260]	; (800299c <StartLRacket+0x1a8>)
 8002898:	f9b3 3000 	ldrsh.w	r3, [r3]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4413      	add	r3, r2
 80028a0:	b29b      	uxth	r3, r3
 80028a2:	b21a      	sxth	r2, r3
 80028a4:	4b3d      	ldr	r3, [pc, #244]	; (800299c <StartLRacket+0x1a8>)
 80028a6:	801a      	strh	r2, [r3, #0]
		y_LRacket -= (joystick_v - 2080)/150;
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 80028ae:	4a3f      	ldr	r2, [pc, #252]	; (80029ac <StartLRacket+0x1b8>)
 80028b0:	fb82 1203 	smull	r1, r2, r2, r3
 80028b4:	1112      	asrs	r2, r2, #4
 80028b6:	17db      	asrs	r3, r3, #31
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	4b38      	ldr	r3, [pc, #224]	; (80029a0 <StartLRacket+0x1ac>)
 80028be:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	4413      	add	r3, r2
 80028c6:	b29b      	uxth	r3, r3
 80028c8:	b21a      	sxth	r2, r3
 80028ca:	4b35      	ldr	r3, [pc, #212]	; (80029a0 <StartLRacket+0x1ac>)
 80028cc:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées LRacket
		if (x_LRacket >= 239 - width_rackets) x_LRacket = 239-width_rackets;
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <StartLRacket+0x1a8>)
 80028d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028d4:	2be6      	cmp	r3, #230	; 0xe6
 80028d6:	dd02      	ble.n	80028de <StartLRacket+0xea>
 80028d8:	4b30      	ldr	r3, [pc, #192]	; (800299c <StartLRacket+0x1a8>)
 80028da:	22e7      	movs	r2, #231	; 0xe7
 80028dc:	801a      	strh	r2, [r3, #0]
		if (x_LRacket <= 0) x_LRacket = 0;
 80028de:	4b2f      	ldr	r3, [pc, #188]	; (800299c <StartLRacket+0x1a8>)
 80028e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	dc02      	bgt.n	80028ee <StartLRacket+0xfa>
 80028e8:	4b2c      	ldr	r3, [pc, #176]	; (800299c <StartLRacket+0x1a8>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	801a      	strh	r2, [r3, #0]
		if (y_LRacket <= 0) y_LRacket = 0;
 80028ee:	4b2c      	ldr	r3, [pc, #176]	; (80029a0 <StartLRacket+0x1ac>)
 80028f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	dc02      	bgt.n	80028fe <StartLRacket+0x10a>
 80028f8:	4b29      	ldr	r3, [pc, #164]	; (80029a0 <StartLRacket+0x1ac>)
 80028fa:	2200      	movs	r2, #0
 80028fc:	801a      	strh	r2, [r3, #0]
		if (y_LRacket + height_rackets >= 272) y_LRacket = 272 - height_rackets;
 80028fe:	4b28      	ldr	r3, [pc, #160]	; (80029a0 <StartLRacket+0x1ac>)
 8002900:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002904:	2bdd      	cmp	r3, #221	; 0xdd
 8002906:	dd02      	ble.n	800290e <StartLRacket+0x11a>
 8002908:	4b25      	ldr	r3, [pc, #148]	; (80029a0 <StartLRacket+0x1ac>)
 800290a:	22de      	movs	r2, #222	; 0xde
 800290c:	801a      	strh	r2, [r3, #0]

		//Tracé de LRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800290e:	4b28      	ldr	r3, [pc, #160]	; (80029b0 <StartLRacket+0x1bc>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f04f 31ff 	mov.w	r1, #4294967295
 8002916:	4618      	mov	r0, r3
 8002918:	f00a fc5c 	bl	800d1d4 <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 800291c:	4b25      	ldr	r3, [pc, #148]	; (80029b4 <StartLRacket+0x1c0>)
 800291e:	781b      	ldrb	r3, [r3, #0]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d102      	bne.n	800292a <StartLRacket+0x136>
 8002924:	f04f 33ff 	mov.w	r3, #4294967295
 8002928:	e001      	b.n	800292e <StartLRacket+0x13a>
 800292a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800292e:	4618      	mov	r0, r3
 8002930:	f000 ffe6 	bl	8003900 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket_hold, y_LRacket_hold, width_rackets,
 8002934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002936:	b298      	uxth	r0, r3
 8002938:	6a3b      	ldr	r3, [r7, #32]
 800293a:	b299      	uxth	r1, r3
 800293c:	2332      	movs	r3, #50	; 0x32
 800293e:	2208      	movs	r2, #8
 8002940:	f001 fbe8 	bl	8004114 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002944:	4b1b      	ldr	r3, [pc, #108]	; (80029b4 <StartLRacket+0x1c0>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	2b00      	cmp	r3, #0
 800294a:	d102      	bne.n	8002952 <StartLRacket+0x15e>
 800294c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002950:	e001      	b.n	8002956 <StartLRacket+0x162>
 8002952:	f04f 33ff 	mov.w	r3, #4294967295
 8002956:	4618      	mov	r0, r3
 8002958:	f000 ffd2 	bl	8003900 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket, y_LRacket, width_rackets, height_rackets);
 800295c:	4b0f      	ldr	r3, [pc, #60]	; (800299c <StartLRacket+0x1a8>)
 800295e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002962:	b298      	uxth	r0, r3
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <StartLRacket+0x1ac>)
 8002966:	f9b3 3000 	ldrsh.w	r3, [r3]
 800296a:	b299      	uxth	r1, r3
 800296c:	2332      	movs	r3, #50	; 0x32
 800296e:	2208      	movs	r2, #8
 8002970:	f001 fbd0 	bl	8004114 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8002974:	4b0e      	ldr	r3, [pc, #56]	; (80029b0 <StartLRacket+0x1bc>)
 8002976:	6818      	ldr	r0, [r3, #0]
 8002978:	2300      	movs	r3, #0
 800297a:	2200      	movs	r2, #0
 800297c:	2100      	movs	r1, #0
 800297e:	f00a fb23 	bl	800cfc8 <xQueueGenericSend>

		//Stockage des dernières coordonnées de la raquette gauche
		x_LRacket_hold = x_LRacket;
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <StartLRacket+0x1a8>)
 8002984:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
		y_LRacket_hold = y_LRacket;
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <StartLRacket+0x1ac>)
 800298c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002990:	623b      	str	r3, [r7, #32]

		osDelay(30);
 8002992:	201e      	movs	r0, #30
 8002994:	f00a f875 	bl	800ca82 <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8002998:	e74b      	b.n	8002832 <StartLRacket+0x3e>
 800299a:	bf00      	nop
 800299c:	2000002a 	.word	0x2000002a
 80029a0:	2000002c 	.word	0x2000002c
 80029a4:	2000899c 	.word	0x2000899c
 80029a8:	20008950 	.word	0x20008950
 80029ac:	1b4e81b5 	.word	0x1b4e81b5
 80029b0:	20008ca8 	.word	0x20008ca8
 80029b4:	2000003d 	.word	0x2000003d

080029b8 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 80029b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029bc:	b094      	sub	sp, #80	; 0x50
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=10; //remettre à 10
 80029c2:	230a      	movs	r3, #10
 80029c4:	647b      	str	r3, [r7, #68]	; 0x44
	TickType_t xLastWakeTime=xTaskGetTickCount();
 80029c6:	f00b fa1d 	bl	800de04 <xTaskGetTickCount>
 80029ca:	4603      	mov	r3, r0
 80029cc:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialisation des coordonnées entières de la balle

	x_balle_f = 480;
 80029ce:	4bc0      	ldr	r3, [pc, #768]	; (8002cd0 <StartBall+0x318>)
 80029d0:	4ac0      	ldr	r2, [pc, #768]	; (8002cd4 <StartBall+0x31c>)
 80029d2:	601a      	str	r2, [r3, #0]
	y_balle_f = 136;
 80029d4:	4bc0      	ldr	r3, [pc, #768]	; (8002cd8 <StartBall+0x320>)
 80029d6:	4ac1      	ldr	r2, [pc, #772]	; (8002cdc <StartBall+0x324>)
 80029d8:	601a      	str	r2, [r3, #0]
	uint16_t x_balle = x_balle_f;
 80029da:	4bbd      	ldr	r3, [pc, #756]	; (8002cd0 <StartBall+0x318>)
 80029dc:	edd3 7a00 	vldr	s15, [r3]
 80029e0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029e4:	ee17 3a90 	vmov	r3, s15
 80029e8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t y_balle = y_balle_f;
 80029ec:	4bba      	ldr	r3, [pc, #744]	; (8002cd8 <StartBall+0x320>)
 80029ee:	edd3 7a00 	vldr	s15, [r3]
 80029f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80029f6:	ee17 3a90 	vmov	r3, s15
 80029fa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	//Initialisation des anciennes coordonnées de la balle
	uint16_t x_balle_hold = 480;
 80029fe:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002a02:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t y_balle_hold = 136;
 8002a06:	2388      	movs	r3, #136	; 0x88
 8002a08:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	//Initialisation du sens de déplacement de la balle
	int16_t angle;

	// Récupération des grandeurs temps et date pour générer un départ aléatoire (à la pression du bouton)
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002a0c:	2200      	movs	r2, #0
 8002a0e:	49b4      	ldr	r1, [pc, #720]	; (8002ce0 <StartBall+0x328>)
 8002a10:	48b4      	ldr	r0, [pc, #720]	; (8002ce4 <StartBall+0x32c>)
 8002a12:	f007 f909 	bl	8009c28 <HAL_RTC_GetTime>

	uint16_t time2 = time.SubSeconds;
 8002a16:	4bb2      	ldr	r3, [pc, #712]	; (8002ce0 <StartBall+0x328>)
 8002a18:	685b      	ldr	r3, [r3, #4]
 8002a1a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t timeFraction = time.SecondFraction;
 8002a1e:	4bb0      	ldr	r3, [pc, #704]	; (8002ce0 <StartBall+0x328>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Nombre pseudo aléatoire entre 30 et 150
	angle = time2*1.0/timeFraction*120+30;
 8002a24:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7fd fd93 	bl	8000554 <__aeabi_i2d>
 8002a2e:	4680      	mov	r8, r0
 8002a30:	4689      	mov	r9, r1
 8002a32:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002a34:	4618      	mov	r0, r3
 8002a36:	f7fd fd8d 	bl	8000554 <__aeabi_i2d>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	460b      	mov	r3, r1
 8002a3e:	4640      	mov	r0, r8
 8002a40:	4649      	mov	r1, r9
 8002a42:	f7fd ff1b 	bl	800087c <__aeabi_ddiv>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	f04f 0200 	mov.w	r2, #0
 8002a52:	4ba5      	ldr	r3, [pc, #660]	; (8002ce8 <StartBall+0x330>)
 8002a54:	f7fd fde8 	bl	8000628 <__aeabi_dmul>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	4ba1      	ldr	r3, [pc, #644]	; (8002cec <StartBall+0x334>)
 8002a66:	f7fd fc29 	bl	80002bc <__adddf3>
 8002a6a:	4602      	mov	r2, r0
 8002a6c:	460b      	mov	r3, r1
 8002a6e:	4610      	mov	r0, r2
 8002a70:	4619      	mov	r1, r3
 8002a72:	f7fe f873 	bl	8000b5c <__aeabi_d2iz>
 8002a76:	4603      	mov	r3, r0
 8002a78:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	if(time2%2) // Une chance sur 2 de partir dans chaque sens
 8002a7c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	b29b      	uxth	r3, r3
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <StartBall+0xde>
		angle=-angle;
 8002a8a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a8e:	425b      	negs	r3, r3
 8002a90:	b29b      	uxth	r3, r3
 8002a92:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  /* Infinite loop */
  for(;;)
  {
	  //Mouvement de la balle
	  x_balle_f += vitesse*sin(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 8002a96:	4b8e      	ldr	r3, [pc, #568]	; (8002cd0 <StartBall+0x318>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	f7fd fd6c 	bl	8000578 <__aeabi_f2d>
 8002aa0:	4680      	mov	r8, r0
 8002aa2:	4689      	mov	r9, r1
 8002aa4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f7fd fd53 	bl	8000554 <__aeabi_i2d>
 8002aae:	a386      	add	r3, pc, #536	; (adr r3, 8002cc8 <StartBall+0x310>)
 8002ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab4:	f7fd fdb8 	bl	8000628 <__aeabi_dmul>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	460b      	mov	r3, r1
 8002abc:	4610      	mov	r0, r2
 8002abe:	4619      	mov	r1, r3
 8002ac0:	f04f 0200 	mov.w	r2, #0
 8002ac4:	4b8a      	ldr	r3, [pc, #552]	; (8002cf0 <StartBall+0x338>)
 8002ac6:	f7fd fed9 	bl	800087c <__aeabi_ddiv>
 8002aca:	4602      	mov	r2, r0
 8002acc:	460b      	mov	r3, r1
 8002ace:	ec43 2b17 	vmov	d7, r2, r3
 8002ad2:	eeb0 0a47 	vmov.f32	s0, s14
 8002ad6:	eef0 0a67 	vmov.f32	s1, s15
 8002ada:	f00c ff99 	bl	800fa10 <sin>
 8002ade:	ec51 0b10 	vmov	r0, r1, d0
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	f7fd fbe9 	bl	80002bc <__adddf3>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	4692      	mov	sl, r2
 8002af0:	469b      	mov	fp, r3
 8002af2:	4b80      	ldr	r3, [pc, #512]	; (8002cf4 <StartBall+0x33c>)
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd2c 	bl	8000554 <__aeabi_i2d>
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	4b7d      	ldr	r3, [pc, #500]	; (8002cf8 <StartBall+0x340>)
 8002b02:	f7fd febb 	bl	800087c <__aeabi_ddiv>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f04f 0200 	mov.w	r2, #0
 8002b12:	4b7a      	ldr	r3, [pc, #488]	; (8002cfc <StartBall+0x344>)
 8002b14:	f7fd fbd2 	bl	80002bc <__adddf3>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	4650      	mov	r0, sl
 8002b1e:	4659      	mov	r1, fp
 8002b20:	f7fd fd82 	bl	8000628 <__aeabi_dmul>
 8002b24:	4602      	mov	r2, r0
 8002b26:	460b      	mov	r3, r1
 8002b28:	4640      	mov	r0, r8
 8002b2a:	4649      	mov	r1, r9
 8002b2c:	f7fd fbc6 	bl	80002bc <__adddf3>
 8002b30:	4602      	mov	r2, r0
 8002b32:	460b      	mov	r3, r1
 8002b34:	4610      	mov	r0, r2
 8002b36:	4619      	mov	r1, r3
 8002b38:	f7fe f838 	bl	8000bac <__aeabi_d2f>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	4a64      	ldr	r2, [pc, #400]	; (8002cd0 <StartBall+0x318>)
 8002b40:	6013      	str	r3, [r2, #0]
	  y_balle_f -= vitesse*cos(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 8002b42:	4b65      	ldr	r3, [pc, #404]	; (8002cd8 <StartBall+0x320>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	4618      	mov	r0, r3
 8002b48:	f7fd fd16 	bl	8000578 <__aeabi_f2d>
 8002b4c:	4680      	mov	r8, r0
 8002b4e:	4689      	mov	r9, r1
 8002b50:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002b54:	4618      	mov	r0, r3
 8002b56:	f7fd fcfd 	bl	8000554 <__aeabi_i2d>
 8002b5a:	a35b      	add	r3, pc, #364	; (adr r3, 8002cc8 <StartBall+0x310>)
 8002b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b60:	f7fd fd62 	bl	8000628 <__aeabi_dmul>
 8002b64:	4602      	mov	r2, r0
 8002b66:	460b      	mov	r3, r1
 8002b68:	4610      	mov	r0, r2
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	f04f 0200 	mov.w	r2, #0
 8002b70:	4b5f      	ldr	r3, [pc, #380]	; (8002cf0 <StartBall+0x338>)
 8002b72:	f7fd fe83 	bl	800087c <__aeabi_ddiv>
 8002b76:	4602      	mov	r2, r0
 8002b78:	460b      	mov	r3, r1
 8002b7a:	ec43 2b17 	vmov	d7, r2, r3
 8002b7e:	eeb0 0a47 	vmov.f32	s0, s14
 8002b82:	eef0 0a67 	vmov.f32	s1, s15
 8002b86:	f00c fef3 	bl	800f970 <cos>
 8002b8a:	ec51 0b10 	vmov	r0, r1, d0
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	f7fd fb93 	bl	80002bc <__adddf3>
 8002b96:	4602      	mov	r2, r0
 8002b98:	460b      	mov	r3, r1
 8002b9a:	4692      	mov	sl, r2
 8002b9c:	469b      	mov	fp, r3
 8002b9e:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <StartBall+0x33c>)
 8002ba0:	781b      	ldrb	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcd6 	bl	8000554 <__aeabi_i2d>
 8002ba8:	f04f 0200 	mov.w	r2, #0
 8002bac:	4b52      	ldr	r3, [pc, #328]	; (8002cf8 <StartBall+0x340>)
 8002bae:	f7fd fe65 	bl	800087c <__aeabi_ddiv>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <StartBall+0x344>)
 8002bc0:	f7fd fb7c 	bl	80002bc <__adddf3>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4650      	mov	r0, sl
 8002bca:	4659      	mov	r1, fp
 8002bcc:	f7fd fd2c 	bl	8000628 <__aeabi_dmul>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	460b      	mov	r3, r1
 8002bd4:	4640      	mov	r0, r8
 8002bd6:	4649      	mov	r1, r9
 8002bd8:	f7fd fb6e 	bl	80002b8 <__aeabi_dsub>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	460b      	mov	r3, r1
 8002be0:	4610      	mov	r0, r2
 8002be2:	4619      	mov	r1, r3
 8002be4:	f7fd ffe2 	bl	8000bac <__aeabi_d2f>
 8002be8:	4603      	mov	r3, r0
 8002bea:	4a3b      	ldr	r2, [pc, #236]	; (8002cd8 <StartBall+0x320>)
 8002bec:	6013      	str	r3, [r2, #0]

	  x_balle=x_balle_f;
 8002bee:	4b38      	ldr	r3, [pc, #224]	; (8002cd0 <StartBall+0x318>)
 8002bf0:	edd3 7a00 	vldr	s15, [r3]
 8002bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bf8:	ee17 3a90 	vmov	r3, s15
 8002bfc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  y_balle=y_balle_f;
 8002c00:	4b35      	ldr	r3, [pc, #212]	; (8002cd8 <StartBall+0x320>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c0a:	ee17 3a90 	vmov	r3, s15
 8002c0e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	  //Gestion des rebonds sur les bords horizontaux : cadrage vertical des coordonnées de la balle
	  if(y_balle<= radius_balle){
 8002c12:	4b3b      	ldr	r3, [pc, #236]	; (8002d00 <StartBall+0x348>)
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	b29b      	uxth	r3, r3
 8002c18:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d826      	bhi.n	8002c6e <StartBall+0x2b6>
		  y_balle_f=radius_balle;
 8002c20:	4b37      	ldr	r3, [pc, #220]	; (8002d00 <StartBall+0x348>)
 8002c22:	781b      	ldrb	r3, [r3, #0]
 8002c24:	ee07 3a90 	vmov	s15, r3
 8002c28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c2c:	4b2a      	ldr	r3, [pc, #168]	; (8002cd8 <StartBall+0x320>)
 8002c2e:	edc3 7a00 	vstr	s15, [r3]
		  y_balle=y_balle_f;
 8002c32:	4b29      	ldr	r3, [pc, #164]	; (8002cd8 <StartBall+0x320>)
 8002c34:	edd3 7a00 	vldr	s15, [r3]
 8002c38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c3c:	ee17 3a90 	vmov	r3, s15
 8002c40:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  angle=angle>0?180-angle:-180-angle;
 8002c44:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	dd06      	ble.n	8002c5a <StartBall+0x2a2>
 8002c4c:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c50:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8002c54:	b29b      	uxth	r3, r3
 8002c56:	b21b      	sxth	r3, r3
 8002c58:	e006      	b.n	8002c68 <StartBall+0x2b0>
 8002c5a:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002c5e:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 8002c62:	1a9b      	subs	r3, r3, r2
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	b21b      	sxth	r3, r3
 8002c68:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002c6c:	e053      	b.n	8002d16 <StartBall+0x35e>
	  }
	  else if(y_balle>= 271-radius_balle){
 8002c6e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002c72:	4b23      	ldr	r3, [pc, #140]	; (8002d00 <StartBall+0x348>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	4619      	mov	r1, r3
 8002c78:	f240 130f 	movw	r3, #271	; 0x10f
 8002c7c:	1a5b      	subs	r3, r3, r1
 8002c7e:	429a      	cmp	r2, r3
 8002c80:	db49      	blt.n	8002d16 <StartBall+0x35e>
		  y_balle_f=271-radius_balle;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <StartBall+0x348>)
 8002c84:	781b      	ldrb	r3, [r3, #0]
 8002c86:	461a      	mov	r2, r3
 8002c88:	f240 130f 	movw	r3, #271	; 0x10f
 8002c8c:	1a9b      	subs	r3, r3, r2
 8002c8e:	ee07 3a90 	vmov	s15, r3
 8002c92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c96:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <StartBall+0x320>)
 8002c98:	edc3 7a00 	vstr	s15, [r3]
		  y_balle=y_balle_f;
 8002c9c:	4b0e      	ldr	r3, [pc, #56]	; (8002cd8 <StartBall+0x320>)
 8002c9e:	edd3 7a00 	vldr	s15, [r3]
 8002ca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002ca6:	ee17 3a90 	vmov	r3, s15
 8002caa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  angle=angle>0?180-angle:-180-angle;
 8002cae:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	dd26      	ble.n	8002d04 <StartBall+0x34c>
 8002cb6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002cba:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	b21b      	sxth	r3, r3
 8002cc2:	e026      	b.n	8002d12 <StartBall+0x35a>
 8002cc4:	f3af 8000 	nop.w
 8002cc8:	f01b866e 	.word	0xf01b866e
 8002ccc:	400921f9 	.word	0x400921f9
 8002cd0:	20000034 	.word	0x20000034
 8002cd4:	43f00000 	.word	0x43f00000
 8002cd8:	20000038 	.word	0x20000038
 8002cdc:	43080000 	.word	0x43080000
 8002ce0:	20008b44 	.word	0x20008b44
 8002ce4:	20008a80 	.word	0x20008a80
 8002ce8:	405e0000 	.word	0x405e0000
 8002cec:	403e0000 	.word	0x403e0000
 8002cf0:	40668000 	.word	0x40668000
 8002cf4:	20000028 	.word	0x20000028
 8002cf8:	40200000 	.word	0x40200000
 8002cfc:	3ff00000 	.word	0x3ff00000
 8002d00:	2000003c 	.word	0x2000003c
 8002d04:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002d08:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 8002d0c:	1a9b      	subs	r3, r3, r2
 8002d0e:	b29b      	uxth	r3, r3
 8002d10:	b21b      	sxth	r3, r3
 8002d12:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  }

	  //Gestion des rebonds sur les raquettes ou de la perte de la balle : cadrage horizontal des coordonnées de la balle
	  if(angle < 0){
 8002d16:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	f280 8094 	bge.w	8002e48 <StartBall+0x490>
		  //Dans le sens droite vers gauche, le rebond doit avoir lieu, s'il existe, sur LRacket
		  if(((x_balle - radius_balle) <= (x_LRacket + width_rackets)) && ((x_balle - radius_balle) >= x_LRacket))
 8002d20:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002d24:	4aad      	ldr	r2, [pc, #692]	; (8002fdc <StartBall+0x624>)
 8002d26:	7812      	ldrb	r2, [r2, #0]
 8002d28:	1a9a      	subs	r2, r3, r2
 8002d2a:	4bad      	ldr	r3, [pc, #692]	; (8002fe0 <StartBall+0x628>)
 8002d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d30:	3308      	adds	r3, #8
 8002d32:	429a      	cmp	r2, r3
 8002d34:	dc4a      	bgt.n	8002dcc <StartBall+0x414>
 8002d36:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002d3a:	4aa8      	ldr	r2, [pc, #672]	; (8002fdc <StartBall+0x624>)
 8002d3c:	7812      	ldrb	r2, [r2, #0]
 8002d3e:	1a9b      	subs	r3, r3, r2
 8002d40:	4aa7      	ldr	r2, [pc, #668]	; (8002fe0 <StartBall+0x628>)
 8002d42:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	db40      	blt.n	8002dcc <StartBall+0x414>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002d4a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d4e:	4aa5      	ldr	r2, [pc, #660]	; (8002fe4 <StartBall+0x62c>)
 8002d50:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d54:	4293      	cmp	r3, r2
 8002d56:	f2c0 8113 	blt.w	8002f80 <StartBall+0x5c8>
 8002d5a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002d5e:	4ba1      	ldr	r3, [pc, #644]	; (8002fe4 <StartBall+0x62c>)
 8002d60:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002d64:	3332      	adds	r3, #50	; 0x32
 8002d66:	429a      	cmp	r2, r3
 8002d68:	f300 810a 	bgt.w	8002f80 <StartBall+0x5c8>
			  {
				  //Et verticalement "dans" la raquette, il y a rebond, l'angle est calculé selon la position relative de la balle et de la raquette
				  angle= (y_balle-y_LRacket)*1.0/height_rackets * 120 + 30;
 8002d6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002d70:	4a9c      	ldr	r2, [pc, #624]	; (8002fe4 <StartBall+0x62c>)
 8002d72:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002d76:	1a9b      	subs	r3, r3, r2
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f7fd fbeb 	bl	8000554 <__aeabi_i2d>
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	4b99      	ldr	r3, [pc, #612]	; (8002fe8 <StartBall+0x630>)
 8002d84:	f7fd fd7a 	bl	800087c <__aeabi_ddiv>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	4b95      	ldr	r3, [pc, #596]	; (8002fec <StartBall+0x634>)
 8002d96:	f7fd fc47 	bl	8000628 <__aeabi_dmul>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	4610      	mov	r0, r2
 8002da0:	4619      	mov	r1, r3
 8002da2:	f04f 0200 	mov.w	r2, #0
 8002da6:	4b92      	ldr	r3, [pc, #584]	; (8002ff0 <StartBall+0x638>)
 8002da8:	f7fd fa88 	bl	80002bc <__adddf3>
 8002dac:	4602      	mov	r2, r0
 8002dae:	460b      	mov	r3, r1
 8002db0:	4610      	mov	r0, r2
 8002db2:	4619      	mov	r1, r3
 8002db4:	f7fd fed2 	bl	8000b5c <__aeabi_d2iz>
 8002db8:	4603      	mov	r3, r0
 8002dba:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				  multiplicateur++; // Augmentation de la vitesse à chaque rebond
 8002dbe:	4b8d      	ldr	r3, [pc, #564]	; (8002ff4 <StartBall+0x63c>)
 8002dc0:	781b      	ldrb	r3, [r3, #0]
 8002dc2:	3301      	adds	r3, #1
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4b8b      	ldr	r3, [pc, #556]	; (8002ff4 <StartBall+0x63c>)
 8002dc8:	701a      	strb	r2, [r3, #0]
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002dca:	e0d9      	b.n	8002f80 <StartBall+0x5c8>
			  }
		  }
		  else if(x_balle<=radius_balle)
 8002dcc:	4b83      	ldr	r3, [pc, #524]	; (8002fdc <StartBall+0x624>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	f200 80d5 	bhi.w	8002f86 <StartBall+0x5ce>
		  {
			  //Si la balle touche le bord gauche de l'écran, on a perdu
			  perdu = 2;
 8002ddc:	4b86      	ldr	r3, [pc, #536]	; (8002ff8 <StartBall+0x640>)
 8002dde:	2202      	movs	r2, #2
 8002de0:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002de2:	4b86      	ldr	r3, [pc, #536]	; (8002ffc <StartBall+0x644>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f04f 31ff 	mov.w	r1, #4294967295
 8002dea:	4618      	mov	r0, r3
 8002dec:	f00a f9f2 	bl	800d1d4 <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_Clear(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002df0:	4b83      	ldr	r3, [pc, #524]	; (8003000 <StartBall+0x648>)
 8002df2:	781b      	ldrb	r3, [r3, #0]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d102      	bne.n	8002dfe <StartBall+0x446>
 8002df8:	f04f 33ff 	mov.w	r3, #4294967295
 8002dfc:	e001      	b.n	8002e02 <StartBall+0x44a>
 8002dfe:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002e02:	4618      	mov	r0, r3
 8002e04:	f000 fdde 	bl	80039c4 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002e08:	4b7d      	ldr	r3, [pc, #500]	; (8003000 <StartBall+0x648>)
 8002e0a:	781b      	ldrb	r3, [r3, #0]
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d102      	bne.n	8002e16 <StartBall+0x45e>
 8002e10:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002e14:	e001      	b.n	8002e1a <StartBall+0x462>
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	f000 fd70 	bl	8003900 <BSP_LCD_SetTextColor>
			  BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "Le joueur de droite gagne ! Appuyez sur BP2 pour rejouer");
 8002e20:	4978      	ldr	r1, [pc, #480]	; (8003004 <StartBall+0x64c>)
 8002e22:	200c      	movs	r0, #12
 8002e24:	f000 ff02 	bl	8003c2c <BSP_LCD_DisplayStringAtLine>
			  xSemaphoreGive(myMutex_LCDHandle);
 8002e28:	4b74      	ldr	r3, [pc, #464]	; (8002ffc <StartBall+0x644>)
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	2200      	movs	r2, #0
 8002e30:	2100      	movs	r1, #0
 8002e32:	f00a f8c9 	bl	800cfc8 <xQueueGenericSend>
			  vTaskDelete(LRacketHandle);
 8002e36:	4b74      	ldr	r3, [pc, #464]	; (8003008 <StartBall+0x650>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f00a fd86 	bl	800d94c <vTaskDelete>
			  vTaskDelete(NULL);
 8002e40:	2000      	movs	r0, #0
 8002e42:	f00a fd83 	bl	800d94c <vTaskDelete>
 8002e46:	e09e      	b.n	8002f86 <StartBall+0x5ce>
		  }
	  }
	  else if(angle > 0){
 8002e48:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	f340 809a 	ble.w	8002f86 <StartBall+0x5ce>
		  //Dans le sens gauche vers droite, le rebond doit avoir lieu, s'il existe, sur RRacket
		  if(((x_balle + radius_balle) >= x_RRacket) && ((x_balle + radius_balle) <= (x_RRacket + width_rackets)))
 8002e52:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e56:	4a61      	ldr	r2, [pc, #388]	; (8002fdc <StartBall+0x624>)
 8002e58:	7812      	ldrb	r2, [r2, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a6b      	ldr	r2, [pc, #428]	; (800300c <StartBall+0x654>)
 8002e5e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e62:	4293      	cmp	r3, r2
 8002e64:	db4c      	blt.n	8002f00 <StartBall+0x548>
 8002e66:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002e6a:	4a5c      	ldr	r2, [pc, #368]	; (8002fdc <StartBall+0x624>)
 8002e6c:	7812      	ldrb	r2, [r2, #0]
 8002e6e:	441a      	add	r2, r3
 8002e70:	4b66      	ldr	r3, [pc, #408]	; (800300c <StartBall+0x654>)
 8002e72:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e76:	3308      	adds	r3, #8
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	dc41      	bgt.n	8002f00 <StartBall+0x548>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002e7c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e80:	4a63      	ldr	r2, [pc, #396]	; (8003010 <StartBall+0x658>)
 8002e82:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002e86:	4293      	cmp	r3, r2
 8002e88:	db7c      	blt.n	8002f84 <StartBall+0x5cc>
 8002e8a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002e8e:	4b60      	ldr	r3, [pc, #384]	; (8003010 <StartBall+0x658>)
 8002e90:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002e94:	3332      	adds	r3, #50	; 0x32
 8002e96:	429a      	cmp	r2, r3
 8002e98:	dc74      	bgt.n	8002f84 <StartBall+0x5cc>
			  {
				  //Et verticalement "dans" la raquette, il y a rebond, l'angle est calculé selon la position relative de la balle et de la raquette
				  angle= -((y_balle-y_RRacket)*1.0/height_rackets * 120 + 30);
 8002e9a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002e9e:	4a5c      	ldr	r2, [pc, #368]	; (8003010 <StartBall+0x658>)
 8002ea0:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f7fd fb54 	bl	8000554 <__aeabi_i2d>
 8002eac:	f04f 0200 	mov.w	r2, #0
 8002eb0:	4b4d      	ldr	r3, [pc, #308]	; (8002fe8 <StartBall+0x630>)
 8002eb2:	f7fd fce3 	bl	800087c <__aeabi_ddiv>
 8002eb6:	4602      	mov	r2, r0
 8002eb8:	460b      	mov	r3, r1
 8002eba:	4610      	mov	r0, r2
 8002ebc:	4619      	mov	r1, r3
 8002ebe:	f04f 0200 	mov.w	r2, #0
 8002ec2:	4b4a      	ldr	r3, [pc, #296]	; (8002fec <StartBall+0x634>)
 8002ec4:	f7fd fbb0 	bl	8000628 <__aeabi_dmul>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	460b      	mov	r3, r1
 8002ecc:	4610      	mov	r0, r2
 8002ece:	4619      	mov	r1, r3
 8002ed0:	f04f 0200 	mov.w	r2, #0
 8002ed4:	4b46      	ldr	r3, [pc, #280]	; (8002ff0 <StartBall+0x638>)
 8002ed6:	f7fd f9f1 	bl	80002bc <__adddf3>
 8002eda:	4602      	mov	r2, r0
 8002edc:	460b      	mov	r3, r1
 8002ede:	4614      	mov	r4, r2
 8002ee0:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002ee4:	4620      	mov	r0, r4
 8002ee6:	4629      	mov	r1, r5
 8002ee8:	f7fd fe38 	bl	8000b5c <__aeabi_d2iz>
 8002eec:	4603      	mov	r3, r0
 8002eee:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				  multiplicateur++; // Augmentation de la vitesse à chaque rebond
 8002ef2:	4b40      	ldr	r3, [pc, #256]	; (8002ff4 <StartBall+0x63c>)
 8002ef4:	781b      	ldrb	r3, [r3, #0]
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	4b3e      	ldr	r3, [pc, #248]	; (8002ff4 <StartBall+0x63c>)
 8002efc:	701a      	strb	r2, [r3, #0]
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002efe:	e041      	b.n	8002f84 <StartBall+0x5cc>
			  }
		  }
		  else if(x_balle>=(959-radius_balle))
 8002f00:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002f04:	4b35      	ldr	r3, [pc, #212]	; (8002fdc <StartBall+0x624>)
 8002f06:	781b      	ldrb	r3, [r3, #0]
 8002f08:	4619      	mov	r1, r3
 8002f0a:	f240 33bf 	movw	r3, #959	; 0x3bf
 8002f0e:	1a5b      	subs	r3, r3, r1
 8002f10:	429a      	cmp	r2, r3
 8002f12:	db38      	blt.n	8002f86 <StartBall+0x5ce>
		  {
			  //Si la balle touche le bord droit de l'écran, on a perdu
			  perdu = 1;
 8002f14:	4b38      	ldr	r3, [pc, #224]	; (8002ff8 <StartBall+0x640>)
 8002f16:	2201      	movs	r2, #1
 8002f18:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002f1a:	4b38      	ldr	r3, [pc, #224]	; (8002ffc <StartBall+0x644>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002f22:	4618      	mov	r0, r3
 8002f24:	f00a f956 	bl	800d1d4 <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_Clear(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002f28:	4b35      	ldr	r3, [pc, #212]	; (8003000 <StartBall+0x648>)
 8002f2a:	781b      	ldrb	r3, [r3, #0]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d102      	bne.n	8002f36 <StartBall+0x57e>
 8002f30:	f04f 33ff 	mov.w	r3, #4294967295
 8002f34:	e001      	b.n	8002f3a <StartBall+0x582>
 8002f36:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 fd42 	bl	80039c4 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002f40:	4b2f      	ldr	r3, [pc, #188]	; (8003000 <StartBall+0x648>)
 8002f42:	781b      	ldrb	r3, [r3, #0]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d102      	bne.n	8002f4e <StartBall+0x596>
 8002f48:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002f4c:	e001      	b.n	8002f52 <StartBall+0x59a>
 8002f4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 fcd4 	bl	8003900 <BSP_LCD_SetTextColor>
			  BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "Le joueur de gauche gagne ! Appuyez sur BP2 pour rejouer");
 8002f58:	492e      	ldr	r1, [pc, #184]	; (8003014 <StartBall+0x65c>)
 8002f5a:	200c      	movs	r0, #12
 8002f5c:	f000 fe66 	bl	8003c2c <BSP_LCD_DisplayStringAtLine>
			  xSemaphoreGive(myMutex_LCDHandle);
 8002f60:	4b26      	ldr	r3, [pc, #152]	; (8002ffc <StartBall+0x644>)
 8002f62:	6818      	ldr	r0, [r3, #0]
 8002f64:	2300      	movs	r3, #0
 8002f66:	2200      	movs	r2, #0
 8002f68:	2100      	movs	r1, #0
 8002f6a:	f00a f82d 	bl	800cfc8 <xQueueGenericSend>
			  vTaskDelete(LRacketHandle);
 8002f6e:	4b26      	ldr	r3, [pc, #152]	; (8003008 <StartBall+0x650>)
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f00a fcea 	bl	800d94c <vTaskDelete>
			  vTaskDelete(NULL);
 8002f78:	2000      	movs	r0, #0
 8002f7a:	f00a fce7 	bl	800d94c <vTaskDelete>
 8002f7e:	e002      	b.n	8002f86 <StartBall+0x5ce>
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002f80:	bf00      	nop
 8002f82:	e000      	b.n	8002f86 <StartBall+0x5ce>
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002f84:	bf00      	nop
		  }
	  }

	  //Affichage de la balle
	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002f86:	4b1d      	ldr	r3, [pc, #116]	; (8002ffc <StartBall+0x644>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f04f 31ff 	mov.w	r1, #4294967295
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f00a f920 	bl	800d1d4 <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold <=479){
 8002f94:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002f98:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002f9c:	d216      	bcs.n	8002fcc <StartBall+0x614>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002f9e:	4b18      	ldr	r3, [pc, #96]	; (8003000 <StartBall+0x648>)
 8002fa0:	781b      	ldrb	r3, [r3, #0]
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d102      	bne.n	8002fac <StartBall+0x5f4>
 8002fa6:	f04f 33ff 	mov.w	r3, #4294967295
 8002faa:	e001      	b.n	8002fb0 <StartBall+0x5f8>
 8002fac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002fb0:	4618      	mov	r0, r3
 8002fb2:	f000 fca5 	bl	8003900 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, radius_balle);
 8002fb6:	4b09      	ldr	r3, [pc, #36]	; (8002fdc <StartBall+0x624>)
 8002fb8:	781b      	ldrb	r3, [r3, #0]
 8002fba:	b29a      	uxth	r2, r3
 8002fbc:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002fc0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 f91f 	bl	8004208 <BSP_LCD_FillCircle>
 8002fca:	e04e      	b.n	800306a <StartBall+0x6b2>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002fcc:	4b0c      	ldr	r3, [pc, #48]	; (8003000 <StartBall+0x648>)
 8002fce:	781b      	ldrb	r3, [r3, #0]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d121      	bne.n	8003018 <StartBall+0x660>
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	e020      	b.n	800301c <StartBall+0x664>
 8002fda:	bf00      	nop
 8002fdc:	2000003c 	.word	0x2000003c
 8002fe0:	2000002a 	.word	0x2000002a
 8002fe4:	2000002c 	.word	0x2000002c
 8002fe8:	40490000 	.word	0x40490000
 8002fec:	405e0000 	.word	0x405e0000
 8002ff0:	403e0000 	.word	0x403e0000
 8002ff4:	20000028 	.word	0x20000028
 8002ff8:	20000342 	.word	0x20000342
 8002ffc:	20008ca8 	.word	0x20008ca8
 8003000:	2000003d 	.word	0x2000003d
 8003004:	08010c3c 	.word	0x08010c3c
 8003008:	20008664 	.word	0x20008664
 800300c:	2000002e 	.word	0x2000002e
 8003010:	20000030 	.word	0x20000030
 8003014:	08010c78 	.word	0x08010c78
 8003018:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800301c:	4618      	mov	r0, r3
 800301e:	f000 fc6f 	bl	8003900 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle_hold+3};
 8003022:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003026:	86bb      	strh	r3, [r7, #52]	; 0x34
 8003028:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800302c:	3303      	adds	r3, #3
 800302e:	b29b      	uxth	r3, r3
 8003030:	b21b      	sxth	r3, r3
 8003032:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point2 = {479,y_balle_hold};
 8003034:	f240 13df 	movw	r3, #479	; 0x1df
 8003038:	863b      	strh	r3, [r7, #48]	; 0x30
 800303a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 800303e:	867b      	strh	r3, [r7, #50]	; 0x32
		  Point Point3 = {473,y_balle_hold-3};
 8003040:	f240 13d9 	movw	r3, #473	; 0x1d9
 8003044:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8003046:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 800304a:	3b03      	subs	r3, #3
 800304c:	b29b      	uxth	r3, r3
 800304e:	b21b      	sxth	r3, r3
 8003050:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  Point Points[3] = {Point1, Point2, Point3};
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003054:	623b      	str	r3, [r7, #32]
 8003056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800305c:	62bb      	str	r3, [r7, #40]	; 0x28
		  BSP_LCD_FillPolygon(Points,3);
 800305e:	f107 0320 	add.w	r3, r7, #32
 8003062:	2103      	movs	r1, #3
 8003064:	4618      	mov	r0, r3
 8003066:	f001 f96f 	bl	8004348 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle <=479){
 800306a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800306e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8003072:	d216      	bcs.n	80030a2 <StartBall+0x6ea>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8003074:	4b2e      	ldr	r3, [pc, #184]	; (8003130 <StartBall+0x778>)
 8003076:	781b      	ldrb	r3, [r3, #0]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d102      	bne.n	8003082 <StartBall+0x6ca>
 800307c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003080:	e001      	b.n	8003086 <StartBall+0x6ce>
 8003082:	f04f 33ff 	mov.w	r3, #4294967295
 8003086:	4618      	mov	r0, r3
 8003088:	f000 fc3a 	bl	8003900 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, radius_balle);
 800308c:	4b29      	ldr	r3, [pc, #164]	; (8003134 <StartBall+0x77c>)
 800308e:	781b      	ldrb	r3, [r3, #0]
 8003090:	b29a      	uxth	r2, r3
 8003092:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8003096:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800309a:	4618      	mov	r0, r3
 800309c:	f001 f8b4 	bl	8004208 <BSP_LCD_FillCircle>
 80030a0:	e02f      	b.n	8003102 <StartBall+0x74a>
	  }
	  else{
		  //Afficage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 80030a2:	4b23      	ldr	r3, [pc, #140]	; (8003130 <StartBall+0x778>)
 80030a4:	781b      	ldrb	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d102      	bne.n	80030b0 <StartBall+0x6f8>
 80030aa:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80030ae:	e001      	b.n	80030b4 <StartBall+0x6fc>
 80030b0:	f04f 33ff 	mov.w	r3, #4294967295
 80030b4:	4618      	mov	r0, r3
 80030b6:	f000 fc23 	bl	8003900 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle+3};
 80030ba:	f240 13d9 	movw	r3, #473	; 0x1d9
 80030be:	83bb      	strh	r3, [r7, #28]
 80030c0:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030c4:	3303      	adds	r3, #3
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	b21b      	sxth	r3, r3
 80030ca:	83fb      	strh	r3, [r7, #30]
		  Point Point2 = {479,y_balle};
 80030cc:	f240 13df 	movw	r3, #479	; 0x1df
 80030d0:	833b      	strh	r3, [r7, #24]
 80030d2:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 80030d6:	837b      	strh	r3, [r7, #26]
		  Point Point3 = {473,y_balle-3};
 80030d8:	f240 13d9 	movw	r3, #473	; 0x1d9
 80030dc:	82bb      	strh	r3, [r7, #20]
 80030de:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80030e2:	3b03      	subs	r3, #3
 80030e4:	b29b      	uxth	r3, r3
 80030e6:	b21b      	sxth	r3, r3
 80030e8:	82fb      	strh	r3, [r7, #22]

		  Point Points[3] = {Point1, Point2, Point3};
 80030ea:	69fb      	ldr	r3, [r7, #28]
 80030ec:	60bb      	str	r3, [r7, #8]
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	60fb      	str	r3, [r7, #12]
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	613b      	str	r3, [r7, #16]
		  BSP_LCD_FillPolygon(Points,3);
 80030f6:	f107 0308 	add.w	r3, r7, #8
 80030fa:	2103      	movs	r1, #3
 80030fc:	4618      	mov	r0, r3
 80030fe:	f001 f923 	bl	8004348 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	  xSemaphoreGive(myMutex_LCDHandle);
 8003102:	4b0d      	ldr	r3, [pc, #52]	; (8003138 <StartBall+0x780>)
 8003104:	6818      	ldr	r0, [r3, #0]
 8003106:	2300      	movs	r3, #0
 8003108:	2200      	movs	r2, #0
 800310a:	2100      	movs	r1, #0
 800310c:	f009 ff5c 	bl	800cfc8 <xQueueGenericSend>

	  //Stockage du dernier emplacement de dessin
	  x_balle_hold = x_balle;
 8003110:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003114:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  y_balle_hold = y_balle;
 8003118:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800311c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003120:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003124:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003126:	4618      	mov	r0, r3
 8003128:	f00a fca2 	bl	800da70 <vTaskDelayUntil>
	  x_balle_f += vitesse*sin(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 800312c:	e4b3      	b.n	8002a96 <StartBall+0xde>
 800312e:	bf00      	nop
 8003130:	2000003d 	.word	0x2000003d
 8003134:	2000003c 	.word	0x2000003c
 8003138:	20008ca8 	.word	0x20008ca8

0800313c <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	  //Initialisation de l'état de BP1 et de l'état
	  uint8_t BP1=1;
 8003144:	2301      	movs	r3, #1
 8003146:	73bb      	strb	r3, [r7, #14]
	  uint8_t state=0;
 8003148:	2300      	movs	r3, #0
 800314a:	73fb      	strb	r3, [r7, #15]
	  /* Infinite loop */
	  for(;;)
	  {
		  //Lecture de l'état du BP1
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800314c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003150:	4834      	ldr	r0, [pc, #208]	; (8003224 <StartBgChanger+0xe8>)
 8003152:	f004 f9db 	bl	800750c <HAL_GPIO_ReadPin>
 8003156:	4603      	mov	r3, r0
 8003158:	73bb      	strb	r3, [r7, #14]

		  //Machine à états
		  switch(state){
 800315a:	7bfb      	ldrb	r3, [r7, #15]
 800315c:	2b02      	cmp	r3, #2
 800315e:	d052      	beq.n	8003206 <StartBgChanger+0xca>
 8003160:	2b02      	cmp	r3, #2
 8003162:	dc59      	bgt.n	8003218 <StartBgChanger+0xdc>
 8003164:	2b00      	cmp	r3, #0
 8003166:	d002      	beq.n	800316e <StartBgChanger+0x32>
 8003168:	2b01      	cmp	r3, #1
 800316a:	d006      	beq.n	800317a <StartBgChanger+0x3e>
 800316c:	e054      	b.n	8003218 <StartBgChanger+0xdc>
			  case 0:
				  //Attente d'un changement d'état (d'un appui sur BP1)
				  if(!BP1) state = 1;
 800316e:	7bbb      	ldrb	r3, [r7, #14]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d14e      	bne.n	8003212 <StartBgChanger+0xd6>
 8003174:	2301      	movs	r3, #1
 8003176:	73fb      	strb	r3, [r7, #15]
				  break;
 8003178:	e04b      	b.n	8003212 <StartBgChanger+0xd6>
			  case 1:
				  //Changement de la couleur
				  couleur = !couleur;
 800317a:	4b2b      	ldr	r3, [pc, #172]	; (8003228 <StartBgChanger+0xec>)
 800317c:	781b      	ldrb	r3, [r3, #0]
 800317e:	2b00      	cmp	r3, #0
 8003180:	bf0c      	ite	eq
 8003182:	2301      	moveq	r3, #1
 8003184:	2300      	movne	r3, #0
 8003186:	b2db      	uxtb	r3, r3
 8003188:	461a      	mov	r2, r3
 800318a:	4b27      	ldr	r3, [pc, #156]	; (8003228 <StartBgChanger+0xec>)
 800318c:	701a      	strb	r2, [r3, #0]
				  if(couleur==0){
 800318e:	4b26      	ldr	r3, [pc, #152]	; (8003228 <StartBgChanger+0xec>)
 8003190:	781b      	ldrb	r3, [r3, #0]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d11a      	bne.n	80031cc <StartBgChanger+0x90>
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8003196:	4b25      	ldr	r3, [pc, #148]	; (800322c <StartBgChanger+0xf0>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f04f 31ff 	mov.w	r1, #4294967295
 800319e:	4618      	mov	r0, r3
 80031a0:	f00a f818 	bl	800d1d4 <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en noir sur fond blanc
					  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	f000 fc0c 	bl	80039c4 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80031ac:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80031b0:	f000 fba6 	bl	8003900 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80031b4:	f04f 30ff 	mov.w	r0, #4294967295
 80031b8:	f000 fbba 	bl	8003930 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 80031bc:	4b1b      	ldr	r3, [pc, #108]	; (800322c <StartBgChanger+0xf0>)
 80031be:	6818      	ldr	r0, [r3, #0]
 80031c0:	2300      	movs	r3, #0
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	f009 feff 	bl	800cfc8 <xQueueGenericSend>
 80031ca:	e019      	b.n	8003200 <StartBgChanger+0xc4>
				  }
				  else{
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80031cc:	4b17      	ldr	r3, [pc, #92]	; (800322c <StartBgChanger+0xf0>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f04f 31ff 	mov.w	r1, #4294967295
 80031d4:	4618      	mov	r0, r3
 80031d6:	f009 fffd 	bl	800d1d4 <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en blanc sur fond noir
					  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80031da:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80031de:	f000 fbf1 	bl	80039c4 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80031e2:	f04f 30ff 	mov.w	r0, #4294967295
 80031e6:	f000 fb8b 	bl	8003900 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80031ea:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80031ee:	f000 fb9f 	bl	8003930 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 80031f2:	4b0e      	ldr	r3, [pc, #56]	; (800322c <StartBgChanger+0xf0>)
 80031f4:	6818      	ldr	r0, [r3, #0]
 80031f6:	2300      	movs	r3, #0
 80031f8:	2200      	movs	r2, #0
 80031fa:	2100      	movs	r1, #0
 80031fc:	f009 fee4 	bl	800cfc8 <xQueueGenericSend>
				  }

				  //Changement d'état
				  state = 2;
 8003200:	2302      	movs	r3, #2
 8003202:	73fb      	strb	r3, [r7, #15]
				  break;
 8003204:	e008      	b.n	8003218 <StartBgChanger+0xdc>
			  case 2:
				  //Attente d'un changement d'état (relachement du bouton BP1)
				  if(BP1) state = 0;
 8003206:	7bbb      	ldrb	r3, [r7, #14]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <StartBgChanger+0xda>
 800320c:	2300      	movs	r3, #0
 800320e:	73fb      	strb	r3, [r7, #15]
				  break;
 8003210:	e001      	b.n	8003216 <StartBgChanger+0xda>
				  break;
 8003212:	bf00      	nop
 8003214:	e000      	b.n	8003218 <StartBgChanger+0xdc>
				  break;
 8003216:	bf00      	nop
		  }
	  osDelay(400);
 8003218:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800321c:	f009 fc31 	bl	800ca82 <osDelay>
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8003220:	e794      	b.n	800314c <StartBgChanger+0x10>
 8003222:	bf00      	nop
 8003224:	40020000 	.word	0x40020000
 8003228:	2000003d 	.word	0x2000003d
 800322c:	20008ca8 	.word	0x20008ca8

08003230 <StartTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmit */
void StartTransmit(void const * argument)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b084      	sub	sp, #16
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmit */
	uint16_t x_balle = x_balle_f;
 8003238:	4b22      	ldr	r3, [pc, #136]	; (80032c4 <StartTransmit+0x94>)
 800323a:	edd3 7a00 	vldr	s15, [r3]
 800323e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003242:	ee17 3a90 	vmov	r3, s15
 8003246:	81fb      	strh	r3, [r7, #14]
	uint16_t y_balle = y_balle_f;
 8003248:	4b1f      	ldr	r3, [pc, #124]	; (80032c8 <StartTransmit+0x98>)
 800324a:	edd3 7a00 	vldr	s15, [r3]
 800324e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003252:	ee17 3a90 	vmov	r3, s15
 8003256:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	x_balle= x_balle_f;
 8003258:	4b1a      	ldr	r3, [pc, #104]	; (80032c4 <StartTransmit+0x94>)
 800325a:	edd3 7a00 	vldr	s15, [r3]
 800325e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003262:	ee17 3a90 	vmov	r3, s15
 8003266:	81fb      	strh	r3, [r7, #14]
	y_balle = y_balle_f;
 8003268:	4b17      	ldr	r3, [pc, #92]	; (80032c8 <StartTransmit+0x98>)
 800326a:	edd3 7a00 	vldr	s15, [r3]
 800326e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003272:	ee17 3a90 	vmov	r3, s15
 8003276:	81bb      	strh	r3, [r7, #12]
	//Transmission du rayon de la balle et des coordonnées de la balle et du drapeau de perte
	txbuffer[0] = radius_balle;
 8003278:	4b14      	ldr	r3, [pc, #80]	; (80032cc <StartTransmit+0x9c>)
 800327a:	781a      	ldrb	r2, [r3, #0]
 800327c:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <StartTransmit+0xa0>)
 800327e:	701a      	strb	r2, [r3, #0]
	txbuffer[1] = (x_balle & 0xFF00) >> 8;
 8003280:	89fb      	ldrh	r3, [r7, #14]
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	b29b      	uxth	r3, r3
 8003286:	b2da      	uxtb	r2, r3
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <StartTransmit+0xa0>)
 800328a:	705a      	strb	r2, [r3, #1]
	txbuffer[2] = (x_balle & 0x00FF);
 800328c:	89fb      	ldrh	r3, [r7, #14]
 800328e:	b2da      	uxtb	r2, r3
 8003290:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <StartTransmit+0xa0>)
 8003292:	709a      	strb	r2, [r3, #2]
	txbuffer[3] = (y_balle & 0xFF00) >> 8;
 8003294:	89bb      	ldrh	r3, [r7, #12]
 8003296:	0a1b      	lsrs	r3, r3, #8
 8003298:	b29b      	uxth	r3, r3
 800329a:	b2da      	uxtb	r2, r3
 800329c:	4b0c      	ldr	r3, [pc, #48]	; (80032d0 <StartTransmit+0xa0>)
 800329e:	70da      	strb	r2, [r3, #3]
	txbuffer[4] = (y_balle & 0x00FF);
 80032a0:	89bb      	ldrh	r3, [r7, #12]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	4b0a      	ldr	r3, [pc, #40]	; (80032d0 <StartTransmit+0xa0>)
 80032a6:	711a      	strb	r2, [r3, #4]
	txbuffer[5] = perdu;
 80032a8:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <StartTransmit+0xa4>)
 80032aa:	781a      	ldrb	r2, [r3, #0]
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <StartTransmit+0xa0>)
 80032ae:	715a      	strb	r2, [r3, #5]

	HAL_UART_Transmit_IT(&huart7,txbuffer,6);
 80032b0:	2206      	movs	r2, #6
 80032b2:	4907      	ldr	r1, [pc, #28]	; (80032d0 <StartTransmit+0xa0>)
 80032b4:	4808      	ldr	r0, [pc, #32]	; (80032d8 <StartTransmit+0xa8>)
 80032b6:	f008 faad 	bl	800b814 <HAL_UART_Transmit_IT>
	osDelay(15);
 80032ba:	200f      	movs	r0, #15
 80032bc:	f009 fbe1 	bl	800ca82 <osDelay>
	x_balle= x_balle_f;
 80032c0:	e7ca      	b.n	8003258 <StartTransmit+0x28>
 80032c2:	bf00      	nop
 80032c4:	20000034 	.word	0x20000034
 80032c8:	20000038 	.word	0x20000038
 80032cc:	2000003c 	.word	0x2000003c
 80032d0:	20008ae0 	.word	0x20008ae0
 80032d4:	20000342 	.word	0x20000342
 80032d8:	2000871c 	.word	0x2000871c

080032dc <StartLost>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLost */
void StartLost(void const * argument)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af02      	add	r7, sp, #8
 80032e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLost */
  /* Infinite loop */
  for(;;)
  {
	  if(perdu!=0 && !HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin)){
 80032e4:	4b1c      	ldr	r3, [pc, #112]	; (8003358 <StartLost+0x7c>)
 80032e6:	781b      	ldrb	r3, [r3, #0]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d030      	beq.n	800334e <StartLost+0x72>
 80032ec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80032f0:	481a      	ldr	r0, [pc, #104]	; (800335c <StartLost+0x80>)
 80032f2:	f004 f90b 	bl	800750c <HAL_GPIO_ReadPin>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d128      	bne.n	800334e <StartLost+0x72>
		  taskENTER_CRITICAL();
 80032fc:	f00b fc06 	bl	800eb0c <vPortEnterCritical>
		  perdu=0;
 8003300:	4b15      	ldr	r3, [pc, #84]	; (8003358 <StartLost+0x7c>)
 8003302:	2200      	movs	r2, #0
 8003304:	701a      	strb	r2, [r3, #0]
		  BSP_LCD_Clear(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8003306:	4b16      	ldr	r3, [pc, #88]	; (8003360 <StartLost+0x84>)
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d102      	bne.n	8003314 <StartLost+0x38>
 800330e:	f04f 33ff 	mov.w	r3, #4294967295
 8003312:	e001      	b.n	8003318 <StartLost+0x3c>
 8003314:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8003318:	4618      	mov	r0, r3
 800331a:	f000 fb53 	bl	80039c4 <BSP_LCD_Clear>
		  xTaskCreate(StartBall, "", 1024, NULL, osPriorityHigh,  &BallHandle);
 800331e:	4b11      	ldr	r3, [pc, #68]	; (8003364 <StartLost+0x88>)
 8003320:	9301      	str	r3, [sp, #4]
 8003322:	2302      	movs	r3, #2
 8003324:	9300      	str	r3, [sp, #0]
 8003326:	2300      	movs	r3, #0
 8003328:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800332c:	490e      	ldr	r1, [pc, #56]	; (8003368 <StartLost+0x8c>)
 800332e:	480f      	ldr	r0, [pc, #60]	; (800336c <StartLost+0x90>)
 8003330:	f00a f9c9 	bl	800d6c6 <xTaskCreate>
		  xTaskCreate(StartLRacket, "", 1024, NULL, osPriorityAboveNormal, &LRacketHandle);
 8003334:	4b0e      	ldr	r3, [pc, #56]	; (8003370 <StartLost+0x94>)
 8003336:	9301      	str	r3, [sp, #4]
 8003338:	2301      	movs	r3, #1
 800333a:	9300      	str	r3, [sp, #0]
 800333c:	2300      	movs	r3, #0
 800333e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003342:	4909      	ldr	r1, [pc, #36]	; (8003368 <StartLost+0x8c>)
 8003344:	480b      	ldr	r0, [pc, #44]	; (8003374 <StartLost+0x98>)
 8003346:	f00a f9be 	bl	800d6c6 <xTaskCreate>
		  taskEXIT_CRITICAL();
 800334a:	f00b fc13 	bl	800eb74 <vPortExitCritical>
	  }

    osDelay(100);
 800334e:	2064      	movs	r0, #100	; 0x64
 8003350:	f009 fb97 	bl	800ca82 <osDelay>
	  if(perdu!=0 && !HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin)){
 8003354:	e7c6      	b.n	80032e4 <StartLost+0x8>
 8003356:	bf00      	nop
 8003358:	20000342 	.word	0x20000342
 800335c:	40020000 	.word	0x40020000
 8003360:	2000003d 	.word	0x2000003d
 8003364:	20008d14 	.word	0x20008d14
 8003368:	08010cb4 	.word	0x08010cb4
 800336c:	080029b9 	.word	0x080029b9
 8003370:	20008664 	.word	0x20008664
 8003374:	080027f5 	.word	0x080027f5

08003378 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003378:	b580      	push	{r7, lr}
 800337a:	b082      	sub	sp, #8
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a04      	ldr	r2, [pc, #16]	; (8003398 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d101      	bne.n	800338e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800338a:	f002 fbcd 	bl	8005b28 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800338e:	bf00      	nop
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40001000 	.word	0x40001000

0800339c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80033a0:	b672      	cpsid	i
}
 80033a2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80033a4:	e7fe      	b.n	80033a4 <Error_Handler+0x8>
	...

080033a8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	4a51      	ldr	r2, [pc, #324]	; (80034f8 <I2Cx_MspInit+0x150>)
 80033b4:	4293      	cmp	r3, r2
 80033b6:	d14d      	bne.n	8003454 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80033b8:	4b50      	ldr	r3, [pc, #320]	; (80034fc <I2Cx_MspInit+0x154>)
 80033ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033bc:	4a4f      	ldr	r2, [pc, #316]	; (80034fc <I2Cx_MspInit+0x154>)
 80033be:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c2:	6313      	str	r3, [r2, #48]	; 0x30
 80033c4:	4b4d      	ldr	r3, [pc, #308]	; (80034fc <I2Cx_MspInit+0x154>)
 80033c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033cc:	61bb      	str	r3, [r7, #24]
 80033ce:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80033d0:	2380      	movs	r3, #128	; 0x80
 80033d2:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80033d4:	2312      	movs	r3, #18
 80033d6:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80033d8:	2300      	movs	r3, #0
 80033da:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80033dc:	2302      	movs	r3, #2
 80033de:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80033e0:	2304      	movs	r3, #4
 80033e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033e4:	f107 031c 	add.w	r3, r7, #28
 80033e8:	4619      	mov	r1, r3
 80033ea:	4845      	ldr	r0, [pc, #276]	; (8003500 <I2Cx_MspInit+0x158>)
 80033ec:	f003 fdd6 	bl	8006f9c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80033f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80033f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80033f6:	f107 031c 	add.w	r3, r7, #28
 80033fa:	4619      	mov	r1, r3
 80033fc:	4840      	ldr	r0, [pc, #256]	; (8003500 <I2Cx_MspInit+0x158>)
 80033fe:	f003 fdcd 	bl	8006f9c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003402:	4b3e      	ldr	r3, [pc, #248]	; (80034fc <I2Cx_MspInit+0x154>)
 8003404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003406:	4a3d      	ldr	r2, [pc, #244]	; (80034fc <I2Cx_MspInit+0x154>)
 8003408:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800340c:	6413      	str	r3, [r2, #64]	; 0x40
 800340e:	4b3b      	ldr	r3, [pc, #236]	; (80034fc <I2Cx_MspInit+0x154>)
 8003410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003412:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800341a:	4b38      	ldr	r3, [pc, #224]	; (80034fc <I2Cx_MspInit+0x154>)
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	4a37      	ldr	r2, [pc, #220]	; (80034fc <I2Cx_MspInit+0x154>)
 8003420:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003424:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8003426:	4b35      	ldr	r3, [pc, #212]	; (80034fc <I2Cx_MspInit+0x154>)
 8003428:	6a1b      	ldr	r3, [r3, #32]
 800342a:	4a34      	ldr	r2, [pc, #208]	; (80034fc <I2Cx_MspInit+0x154>)
 800342c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003430:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8003432:	2200      	movs	r2, #0
 8003434:	210f      	movs	r1, #15
 8003436:	2048      	movs	r0, #72	; 0x48
 8003438:	f003 f84c 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800343c:	2048      	movs	r0, #72	; 0x48
 800343e:	f003 f865 	bl	800650c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8003442:	2200      	movs	r2, #0
 8003444:	210f      	movs	r1, #15
 8003446:	2049      	movs	r0, #73	; 0x49
 8003448:	f003 f844 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800344c:	2049      	movs	r0, #73	; 0x49
 800344e:	f003 f85d 	bl	800650c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8003452:	e04d      	b.n	80034f0 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003454:	4b29      	ldr	r3, [pc, #164]	; (80034fc <I2Cx_MspInit+0x154>)
 8003456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003458:	4a28      	ldr	r2, [pc, #160]	; (80034fc <I2Cx_MspInit+0x154>)
 800345a:	f043 0302 	orr.w	r3, r3, #2
 800345e:	6313      	str	r3, [r2, #48]	; 0x30
 8003460:	4b26      	ldr	r3, [pc, #152]	; (80034fc <I2Cx_MspInit+0x154>)
 8003462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003464:	f003 0302 	and.w	r3, r3, #2
 8003468:	613b      	str	r3, [r7, #16]
 800346a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800346c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003470:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003472:	2312      	movs	r3, #18
 8003474:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003476:	2300      	movs	r3, #0
 8003478:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800347a:	2302      	movs	r3, #2
 800347c:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800347e:	2304      	movs	r3, #4
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003482:	f107 031c 	add.w	r3, r7, #28
 8003486:	4619      	mov	r1, r3
 8003488:	481e      	ldr	r0, [pc, #120]	; (8003504 <I2Cx_MspInit+0x15c>)
 800348a:	f003 fd87 	bl	8006f9c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800348e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003492:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003494:	f107 031c 	add.w	r3, r7, #28
 8003498:	4619      	mov	r1, r3
 800349a:	481a      	ldr	r0, [pc, #104]	; (8003504 <I2Cx_MspInit+0x15c>)
 800349c:	f003 fd7e 	bl	8006f9c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80034a0:	4b16      	ldr	r3, [pc, #88]	; (80034fc <I2Cx_MspInit+0x154>)
 80034a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034a4:	4a15      	ldr	r2, [pc, #84]	; (80034fc <I2Cx_MspInit+0x154>)
 80034a6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034aa:	6413      	str	r3, [r2, #64]	; 0x40
 80034ac:	4b13      	ldr	r3, [pc, #76]	; (80034fc <I2Cx_MspInit+0x154>)
 80034ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034b0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80034b4:	60fb      	str	r3, [r7, #12]
 80034b6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80034b8:	4b10      	ldr	r3, [pc, #64]	; (80034fc <I2Cx_MspInit+0x154>)
 80034ba:	6a1b      	ldr	r3, [r3, #32]
 80034bc:	4a0f      	ldr	r2, [pc, #60]	; (80034fc <I2Cx_MspInit+0x154>)
 80034be:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80034c2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80034c4:	4b0d      	ldr	r3, [pc, #52]	; (80034fc <I2Cx_MspInit+0x154>)
 80034c6:	6a1b      	ldr	r3, [r3, #32]
 80034c8:	4a0c      	ldr	r2, [pc, #48]	; (80034fc <I2Cx_MspInit+0x154>)
 80034ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80034ce:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80034d0:	2200      	movs	r2, #0
 80034d2:	210f      	movs	r1, #15
 80034d4:	201f      	movs	r0, #31
 80034d6:	f002 fffd 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80034da:	201f      	movs	r0, #31
 80034dc:	f003 f816 	bl	800650c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80034e0:	2200      	movs	r2, #0
 80034e2:	210f      	movs	r1, #15
 80034e4:	2020      	movs	r0, #32
 80034e6:	f002 fff5 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80034ea:	2020      	movs	r0, #32
 80034ec:	f003 f80e 	bl	800650c <HAL_NVIC_EnableIRQ>
}
 80034f0:	bf00      	nop
 80034f2:	3730      	adds	r7, #48	; 0x30
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}
 80034f8:	20000344 	.word	0x20000344
 80034fc:	40023800 	.word	0x40023800
 8003500:	40021c00 	.word	0x40021c00
 8003504:	40020400 	.word	0x40020400

08003508 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003510:	6878      	ldr	r0, [r7, #4]
 8003512:	f004 fb1b 	bl	8007b4c <HAL_I2C_GetState>
 8003516:	4603      	mov	r3, r0
 8003518:	2b00      	cmp	r3, #0
 800351a:	d125      	bne.n	8003568 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a14      	ldr	r2, [pc, #80]	; (8003570 <I2Cx_Init+0x68>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a13      	ldr	r2, [pc, #76]	; (8003574 <I2Cx_Init+0x6c>)
 8003528:	601a      	str	r2, [r3, #0]
 800352a:	e002      	b.n	8003532 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	4a12      	ldr	r2, [pc, #72]	; (8003578 <I2Cx_Init+0x70>)
 8003530:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4a11      	ldr	r2, [pc, #68]	; (800357c <I2Cx_Init+0x74>)
 8003536:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2200      	movs	r2, #0
 8003548:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	2200      	movs	r2, #0
 800355a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f7ff ff23 	bl	80033a8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f004 f804 	bl	8007570 <HAL_I2C_Init>
  }
}
 8003568:	bf00      	nop
 800356a:	3708      	adds	r7, #8
 800356c:	46bd      	mov	sp, r7
 800356e:	bd80      	pop	{r7, pc}
 8003570:	20000344 	.word	0x20000344
 8003574:	40005c00 	.word	0x40005c00
 8003578:	40005400 	.word	0x40005400
 800357c:	40912732 	.word	0x40912732

08003580 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b08a      	sub	sp, #40	; 0x28
 8003584:	af04      	add	r7, sp, #16
 8003586:	60f8      	str	r0, [r7, #12]
 8003588:	4608      	mov	r0, r1
 800358a:	4611      	mov	r1, r2
 800358c:	461a      	mov	r2, r3
 800358e:	4603      	mov	r3, r0
 8003590:	72fb      	strb	r3, [r7, #11]
 8003592:	460b      	mov	r3, r1
 8003594:	813b      	strh	r3, [r7, #8]
 8003596:	4613      	mov	r3, r2
 8003598:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800359a:	2300      	movs	r3, #0
 800359c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800359e:	7afb      	ldrb	r3, [r7, #11]
 80035a0:	b299      	uxth	r1, r3
 80035a2:	88f8      	ldrh	r0, [r7, #6]
 80035a4:	893a      	ldrh	r2, [r7, #8]
 80035a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80035aa:	9302      	str	r3, [sp, #8]
 80035ac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035ae:	9301      	str	r3, [sp, #4]
 80035b0:	6a3b      	ldr	r3, [r7, #32]
 80035b2:	9300      	str	r3, [sp, #0]
 80035b4:	4603      	mov	r3, r0
 80035b6:	68f8      	ldr	r0, [r7, #12]
 80035b8:	f004 f9ae 	bl	8007918 <HAL_I2C_Mem_Read>
 80035bc:	4603      	mov	r3, r0
 80035be:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80035c0:	7dfb      	ldrb	r3, [r7, #23]
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d004      	beq.n	80035d0 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	4619      	mov	r1, r3
 80035ca:	68f8      	ldr	r0, [r7, #12]
 80035cc:	f000 f832 	bl	8003634 <I2Cx_Error>
  }
  return status;    
 80035d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80035d2:	4618      	mov	r0, r3
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b08a      	sub	sp, #40	; 0x28
 80035de:	af04      	add	r7, sp, #16
 80035e0:	60f8      	str	r0, [r7, #12]
 80035e2:	4608      	mov	r0, r1
 80035e4:	4611      	mov	r1, r2
 80035e6:	461a      	mov	r2, r3
 80035e8:	4603      	mov	r3, r0
 80035ea:	72fb      	strb	r3, [r7, #11]
 80035ec:	460b      	mov	r3, r1
 80035ee:	813b      	strh	r3, [r7, #8]
 80035f0:	4613      	mov	r3, r2
 80035f2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80035f4:	2300      	movs	r3, #0
 80035f6:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80035f8:	7afb      	ldrb	r3, [r7, #11]
 80035fa:	b299      	uxth	r1, r3
 80035fc:	88f8      	ldrh	r0, [r7, #6]
 80035fe:	893a      	ldrh	r2, [r7, #8]
 8003600:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003604:	9302      	str	r3, [sp, #8]
 8003606:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003608:	9301      	str	r3, [sp, #4]
 800360a:	6a3b      	ldr	r3, [r7, #32]
 800360c:	9300      	str	r3, [sp, #0]
 800360e:	4603      	mov	r3, r0
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f004 f86d 	bl	80076f0 <HAL_I2C_Mem_Write>
 8003616:	4603      	mov	r3, r0
 8003618:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800361a:	7dfb      	ldrb	r3, [r7, #23]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d004      	beq.n	800362a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8003620:	7afb      	ldrb	r3, [r7, #11]
 8003622:	4619      	mov	r1, r3
 8003624:	68f8      	ldr	r0, [r7, #12]
 8003626:	f000 f805 	bl	8003634 <I2Cx_Error>
  }
  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
 800363c:	460b      	mov	r3, r1
 800363e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8003640:	6878      	ldr	r0, [r7, #4]
 8003642:	f004 f825 	bl	8007690 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8003646:	6878      	ldr	r0, [r7, #4]
 8003648:	f7ff ff5e 	bl	8003508 <I2Cx_Init>
}
 800364c:	bf00      	nop
 800364e:	3708      	adds	r7, #8
 8003650:	46bd      	mov	sp, r7
 8003652:	bd80      	pop	{r7, pc}

08003654 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8003658:	4802      	ldr	r0, [pc, #8]	; (8003664 <TS_IO_Init+0x10>)
 800365a:	f7ff ff55 	bl	8003508 <I2Cx_Init>
}
 800365e:	bf00      	nop
 8003660:	bd80      	pop	{r7, pc}
 8003662:	bf00      	nop
 8003664:	20000344 	.word	0x20000344

08003668 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af02      	add	r7, sp, #8
 800366e:	4603      	mov	r3, r0
 8003670:	71fb      	strb	r3, [r7, #7]
 8003672:	460b      	mov	r3, r1
 8003674:	71bb      	strb	r3, [r7, #6]
 8003676:	4613      	mov	r3, r2
 8003678:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800367a:	79bb      	ldrb	r3, [r7, #6]
 800367c:	b29a      	uxth	r2, r3
 800367e:	79f9      	ldrb	r1, [r7, #7]
 8003680:	2301      	movs	r3, #1
 8003682:	9301      	str	r3, [sp, #4]
 8003684:	1d7b      	adds	r3, r7, #5
 8003686:	9300      	str	r3, [sp, #0]
 8003688:	2301      	movs	r3, #1
 800368a:	4803      	ldr	r0, [pc, #12]	; (8003698 <TS_IO_Write+0x30>)
 800368c:	f7ff ffa5 	bl	80035da <I2Cx_WriteMultiple>
}
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000344 	.word	0x20000344

0800369c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b086      	sub	sp, #24
 80036a0:	af02      	add	r7, sp, #8
 80036a2:	4603      	mov	r3, r0
 80036a4:	460a      	mov	r2, r1
 80036a6:	71fb      	strb	r3, [r7, #7]
 80036a8:	4613      	mov	r3, r2
 80036aa:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80036b0:	79bb      	ldrb	r3, [r7, #6]
 80036b2:	b29a      	uxth	r2, r3
 80036b4:	79f9      	ldrb	r1, [r7, #7]
 80036b6:	2301      	movs	r3, #1
 80036b8:	9301      	str	r3, [sp, #4]
 80036ba:	f107 030f 	add.w	r3, r7, #15
 80036be:	9300      	str	r3, [sp, #0]
 80036c0:	2301      	movs	r3, #1
 80036c2:	4804      	ldr	r0, [pc, #16]	; (80036d4 <TS_IO_Read+0x38>)
 80036c4:	f7ff ff5c 	bl	8003580 <I2Cx_ReadMultiple>

  return read_value;
 80036c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3710      	adds	r7, #16
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	20000344 	.word	0x20000344

080036d8 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f002 fa41 	bl	8005b68 <HAL_Delay>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
	...

080036f0 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80036f0:	b580      	push	{r7, lr}
 80036f2:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80036f4:	4b31      	ldr	r3, [pc, #196]	; (80037bc <BSP_LCD_Init+0xcc>)
 80036f6:	2228      	movs	r2, #40	; 0x28
 80036f8:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80036fa:	4b30      	ldr	r3, [pc, #192]	; (80037bc <BSP_LCD_Init+0xcc>)
 80036fc:	2209      	movs	r2, #9
 80036fe:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003700:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003702:	2235      	movs	r2, #53	; 0x35
 8003704:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003706:	4b2d      	ldr	r3, [pc, #180]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003708:	220b      	movs	r2, #11
 800370a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800370c:	4b2b      	ldr	r3, [pc, #172]	; (80037bc <BSP_LCD_Init+0xcc>)
 800370e:	f240 121b 	movw	r2, #283	; 0x11b
 8003712:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003714:	4b29      	ldr	r3, [pc, #164]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003716:	f240 2215 	movw	r2, #533	; 0x215
 800371a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800371c:	4b27      	ldr	r3, [pc, #156]	; (80037bc <BSP_LCD_Init+0xcc>)
 800371e:	f240 121d 	movw	r2, #285	; 0x11d
 8003722:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8003724:	4b25      	ldr	r3, [pc, #148]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003726:	f240 2235 	movw	r2, #565	; 0x235
 800372a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800372c:	2100      	movs	r1, #0
 800372e:	4823      	ldr	r0, [pc, #140]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003730:	f000 ffe6 	bl	8004700 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8003734:	4b21      	ldr	r3, [pc, #132]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003736:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800373a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800373c:	4b1f      	ldr	r3, [pc, #124]	; (80037bc <BSP_LCD_Init+0xcc>)
 800373e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8003742:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8003744:	4b1d      	ldr	r3, [pc, #116]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003746:	2200      	movs	r2, #0
 8003748:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800374c:	4b1b      	ldr	r3, [pc, #108]	; (80037bc <BSP_LCD_Init+0xcc>)
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8003754:	4b19      	ldr	r3, [pc, #100]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003756:	2200      	movs	r2, #0
 8003758:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800375c:	4b17      	ldr	r3, [pc, #92]	; (80037bc <BSP_LCD_Init+0xcc>)
 800375e:	2200      	movs	r2, #0
 8003760:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8003762:	4b16      	ldr	r3, [pc, #88]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003764:	2200      	movs	r2, #0
 8003766:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8003768:	4b14      	ldr	r3, [pc, #80]	; (80037bc <BSP_LCD_Init+0xcc>)
 800376a:	2200      	movs	r2, #0
 800376c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800376e:	4b13      	ldr	r3, [pc, #76]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003770:	2200      	movs	r2, #0
 8003772:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8003774:	4b11      	ldr	r3, [pc, #68]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003776:	4a12      	ldr	r2, [pc, #72]	; (80037c0 <BSP_LCD_Init+0xd0>)
 8003778:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800377a:	4810      	ldr	r0, [pc, #64]	; (80037bc <BSP_LCD_Init+0xcc>)
 800377c:	f004 fe78 	bl	8008470 <HAL_LTDC_GetState>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d103      	bne.n	800378e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003786:	2100      	movs	r1, #0
 8003788:	480c      	ldr	r0, [pc, #48]	; (80037bc <BSP_LCD_Init+0xcc>)
 800378a:	f000 fedf 	bl	800454c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800378e:	480b      	ldr	r0, [pc, #44]	; (80037bc <BSP_LCD_Init+0xcc>)
 8003790:	f004 fc9e 	bl	80080d0 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003794:	2201      	movs	r2, #1
 8003796:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800379a:	480a      	ldr	r0, [pc, #40]	; (80037c4 <BSP_LCD_Init+0xd4>)
 800379c:	f003 fece 	bl	800753c <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80037a0:	2201      	movs	r2, #1
 80037a2:	2108      	movs	r1, #8
 80037a4:	4808      	ldr	r0, [pc, #32]	; (80037c8 <BSP_LCD_Init+0xd8>)
 80037a6:	f003 fec9 	bl	800753c <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80037aa:	f001 f989 	bl	8004ac0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80037ae:	4807      	ldr	r0, [pc, #28]	; (80037cc <BSP_LCD_Init+0xdc>)
 80037b0:	f000 f8d8 	bl	8003964 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80037b4:	2300      	movs	r3, #0
}
 80037b6:	4618      	mov	r0, r3
 80037b8:	bd80      	pop	{r7, pc}
 80037ba:	bf00      	nop
 80037bc:	20008d1c 	.word	0x20008d1c
 80037c0:	40016800 	.word	0x40016800
 80037c4:	40022000 	.word	0x40022000
 80037c8:	40022800 	.word	0x40022800
 80037cc:	20000040 	.word	0x20000040

080037d0 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80037d0:	b480      	push	{r7}
 80037d2:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80037d4:	4b06      	ldr	r3, [pc, #24]	; (80037f0 <BSP_LCD_GetXSize+0x20>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a06      	ldr	r2, [pc, #24]	; (80037f4 <BSP_LCD_GetXSize+0x24>)
 80037da:	2134      	movs	r1, #52	; 0x34
 80037dc:	fb01 f303 	mul.w	r3, r1, r3
 80037e0:	4413      	add	r3, r2
 80037e2:	3360      	adds	r3, #96	; 0x60
 80037e4:	681b      	ldr	r3, [r3, #0]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	200003d0 	.word	0x200003d0
 80037f4:	20008d1c 	.word	0x20008d1c

080037f8 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80037fc:	4b06      	ldr	r3, [pc, #24]	; (8003818 <BSP_LCD_GetYSize+0x20>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	4a06      	ldr	r2, [pc, #24]	; (800381c <BSP_LCD_GetYSize+0x24>)
 8003802:	2134      	movs	r1, #52	; 0x34
 8003804:	fb01 f303 	mul.w	r3, r1, r3
 8003808:	4413      	add	r3, r2
 800380a:	3364      	adds	r3, #100	; 0x64
 800380c:	681b      	ldr	r3, [r3, #0]
}
 800380e:	4618      	mov	r0, r3
 8003810:	46bd      	mov	sp, r7
 8003812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003816:	4770      	bx	lr
 8003818:	200003d0 	.word	0x200003d0
 800381c:	20008d1c 	.word	0x20008d1c

08003820 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8003820:	b580      	push	{r7, lr}
 8003822:	b090      	sub	sp, #64	; 0x40
 8003824:	af00      	add	r7, sp, #0
 8003826:	4603      	mov	r3, r0
 8003828:	6039      	str	r1, [r7, #0]
 800382a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8003830:	f7ff ffce 	bl	80037d0 <BSP_LCD_GetXSize>
 8003834:	4603      	mov	r3, r0
 8003836:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8003838:	2300      	movs	r3, #0
 800383a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800383c:	f7ff ffdc 	bl	80037f8 <BSP_LCD_GetYSize>
 8003840:	4603      	mov	r3, r0
 8003842:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003844:	2300      	movs	r3, #0
 8003846:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800384c:	23ff      	movs	r3, #255	; 0xff
 800384e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8003850:	2300      	movs	r3, #0
 8003852:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800385a:	2300      	movs	r3, #0
 800385c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003866:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800386a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800386c:	2307      	movs	r3, #7
 800386e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8003870:	f7ff ffae 	bl	80037d0 <BSP_LCD_GetXSize>
 8003874:	4603      	mov	r3, r0
 8003876:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8003878:	f7ff ffbe 	bl	80037f8 <BSP_LCD_GetYSize>
 800387c:	4603      	mov	r3, r0
 800387e:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003880:	88fa      	ldrh	r2, [r7, #6]
 8003882:	f107 030c 	add.w	r3, r7, #12
 8003886:	4619      	mov	r1, r3
 8003888:	4812      	ldr	r0, [pc, #72]	; (80038d4 <BSP_LCD_LayerDefaultInit+0xb4>)
 800388a:	f004 fdb3 	bl	80083f4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800388e:	88fa      	ldrh	r2, [r7, #6]
 8003890:	4911      	ldr	r1, [pc, #68]	; (80038d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003892:	4613      	mov	r3, r2
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	4413      	add	r3, r2
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	440b      	add	r3, r1
 800389c:	3304      	adds	r3, #4
 800389e:	f04f 32ff 	mov.w	r2, #4294967295
 80038a2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80038a4:	88fa      	ldrh	r2, [r7, #6]
 80038a6:	490c      	ldr	r1, [pc, #48]	; (80038d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80038a8:	4613      	mov	r3, r2
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	4413      	add	r3, r2
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	3308      	adds	r3, #8
 80038b4:	4a09      	ldr	r2, [pc, #36]	; (80038dc <BSP_LCD_LayerDefaultInit+0xbc>)
 80038b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80038b8:	88fa      	ldrh	r2, [r7, #6]
 80038ba:	4907      	ldr	r1, [pc, #28]	; (80038d8 <BSP_LCD_LayerDefaultInit+0xb8>)
 80038bc:	4613      	mov	r3, r2
 80038be:	005b      	lsls	r3, r3, #1
 80038c0:	4413      	add	r3, r2
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	440b      	add	r3, r1
 80038c6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80038ca:	601a      	str	r2, [r3, #0]
}
 80038cc:	bf00      	nop
 80038ce:	3740      	adds	r7, #64	; 0x40
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}
 80038d4:	20008d1c 	.word	0x20008d1c
 80038d8:	200003d4 	.word	0x200003d4
 80038dc:	20000040 	.word	0x20000040

080038e0 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80038e8:	4a04      	ldr	r2, [pc, #16]	; (80038fc <BSP_LCD_SelectLayer+0x1c>)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6013      	str	r3, [r2, #0]
} 
 80038ee:	bf00      	nop
 80038f0:	370c      	adds	r7, #12
 80038f2:	46bd      	mov	sp, r7
 80038f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f8:	4770      	bx	lr
 80038fa:	bf00      	nop
 80038fc:	200003d0 	.word	0x200003d0

08003900 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003900:	b480      	push	{r7}
 8003902:	b083      	sub	sp, #12
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003908:	4b07      	ldr	r3, [pc, #28]	; (8003928 <BSP_LCD_SetTextColor+0x28>)
 800390a:	681a      	ldr	r2, [r3, #0]
 800390c:	4907      	ldr	r1, [pc, #28]	; (800392c <BSP_LCD_SetTextColor+0x2c>)
 800390e:	4613      	mov	r3, r2
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	4413      	add	r3, r2
 8003914:	009b      	lsls	r3, r3, #2
 8003916:	440b      	add	r3, r1
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	601a      	str	r2, [r3, #0]
}
 800391c:	bf00      	nop
 800391e:	370c      	adds	r7, #12
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr
 8003928:	200003d0 	.word	0x200003d0
 800392c:	200003d4 	.word	0x200003d4

08003930 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8003938:	4b08      	ldr	r3, [pc, #32]	; (800395c <BSP_LCD_SetBackColor+0x2c>)
 800393a:	681a      	ldr	r2, [r3, #0]
 800393c:	4908      	ldr	r1, [pc, #32]	; (8003960 <BSP_LCD_SetBackColor+0x30>)
 800393e:	4613      	mov	r3, r2
 8003940:	005b      	lsls	r3, r3, #1
 8003942:	4413      	add	r3, r2
 8003944:	009b      	lsls	r3, r3, #2
 8003946:	440b      	add	r3, r1
 8003948:	3304      	adds	r3, #4
 800394a:	687a      	ldr	r2, [r7, #4]
 800394c:	601a      	str	r2, [r3, #0]
}
 800394e:	bf00      	nop
 8003950:	370c      	adds	r7, #12
 8003952:	46bd      	mov	sp, r7
 8003954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	200003d0 	.word	0x200003d0
 8003960:	200003d4 	.word	0x200003d4

08003964 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800396c:	4b08      	ldr	r3, [pc, #32]	; (8003990 <BSP_LCD_SetFont+0x2c>)
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	4908      	ldr	r1, [pc, #32]	; (8003994 <BSP_LCD_SetFont+0x30>)
 8003972:	4613      	mov	r3, r2
 8003974:	005b      	lsls	r3, r3, #1
 8003976:	4413      	add	r3, r2
 8003978:	009b      	lsls	r3, r3, #2
 800397a:	440b      	add	r3, r1
 800397c:	3308      	adds	r3, #8
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	601a      	str	r2, [r3, #0]
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	200003d0 	.word	0x200003d0
 8003994:	200003d4 	.word	0x200003d4

08003998 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003998:	b480      	push	{r7}
 800399a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800399c:	4b07      	ldr	r3, [pc, #28]	; (80039bc <BSP_LCD_GetFont+0x24>)
 800399e:	681a      	ldr	r2, [r3, #0]
 80039a0:	4907      	ldr	r1, [pc, #28]	; (80039c0 <BSP_LCD_GetFont+0x28>)
 80039a2:	4613      	mov	r3, r2
 80039a4:	005b      	lsls	r3, r3, #1
 80039a6:	4413      	add	r3, r2
 80039a8:	009b      	lsls	r3, r3, #2
 80039aa:	440b      	add	r3, r1
 80039ac:	3308      	adds	r3, #8
 80039ae:	681b      	ldr	r3, [r3, #0]
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	46bd      	mov	sp, r7
 80039b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b8:	4770      	bx	lr
 80039ba:	bf00      	nop
 80039bc:	200003d0 	.word	0x200003d0
 80039c0:	200003d4 	.word	0x200003d4

080039c4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80039c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80039c6:	b085      	sub	sp, #20
 80039c8:	af02      	add	r7, sp, #8
 80039ca:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80039cc:	4b0f      	ldr	r3, [pc, #60]	; (8003a0c <BSP_LCD_Clear+0x48>)
 80039ce:	681c      	ldr	r4, [r3, #0]
 80039d0:	4b0e      	ldr	r3, [pc, #56]	; (8003a0c <BSP_LCD_Clear+0x48>)
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	4a0e      	ldr	r2, [pc, #56]	; (8003a10 <BSP_LCD_Clear+0x4c>)
 80039d6:	2134      	movs	r1, #52	; 0x34
 80039d8:	fb01 f303 	mul.w	r3, r1, r3
 80039dc:	4413      	add	r3, r2
 80039de:	335c      	adds	r3, #92	; 0x5c
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	461e      	mov	r6, r3
 80039e4:	f7ff fef4 	bl	80037d0 <BSP_LCD_GetXSize>
 80039e8:	4605      	mov	r5, r0
 80039ea:	f7ff ff05 	bl	80037f8 <BSP_LCD_GetYSize>
 80039ee:	4602      	mov	r2, r0
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	9301      	str	r3, [sp, #4]
 80039f4:	2300      	movs	r3, #0
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	4613      	mov	r3, r2
 80039fa:	462a      	mov	r2, r5
 80039fc:	4631      	mov	r1, r6
 80039fe:	4620      	mov	r0, r4
 8003a00:	f001 f812 	bl	8004a28 <LL_FillBuffer>
}
 8003a04:	bf00      	nop
 8003a06:	370c      	adds	r7, #12
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a0c:	200003d0 	.word	0x200003d0
 8003a10:	20008d1c 	.word	0x20008d1c

08003a14 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003a14:	b590      	push	{r4, r7, lr}
 8003a16:	b083      	sub	sp, #12
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	4603      	mov	r3, r0
 8003a1c:	80fb      	strh	r3, [r7, #6]
 8003a1e:	460b      	mov	r3, r1
 8003a20:	80bb      	strh	r3, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a26:	4b1b      	ldr	r3, [pc, #108]	; (8003a94 <BSP_LCD_DisplayChar+0x80>)
 8003a28:	681a      	ldr	r2, [r3, #0]
 8003a2a:	491b      	ldr	r1, [pc, #108]	; (8003a98 <BSP_LCD_DisplayChar+0x84>)
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	005b      	lsls	r3, r3, #1
 8003a30:	4413      	add	r3, r2
 8003a32:	009b      	lsls	r3, r3, #2
 8003a34:	440b      	add	r3, r1
 8003a36:	3308      	adds	r3, #8
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	6819      	ldr	r1, [r3, #0]
 8003a3c:	78fb      	ldrb	r3, [r7, #3]
 8003a3e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a42:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <BSP_LCD_DisplayChar+0x80>)
 8003a44:	681a      	ldr	r2, [r3, #0]
 8003a46:	4c14      	ldr	r4, [pc, #80]	; (8003a98 <BSP_LCD_DisplayChar+0x84>)
 8003a48:	4613      	mov	r3, r2
 8003a4a:	005b      	lsls	r3, r3, #1
 8003a4c:	4413      	add	r3, r2
 8003a4e:	009b      	lsls	r3, r3, #2
 8003a50:	4423      	add	r3, r4
 8003a52:	3308      	adds	r3, #8
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a58:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8003a5c:	4b0d      	ldr	r3, [pc, #52]	; (8003a94 <BSP_LCD_DisplayChar+0x80>)
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	4c0d      	ldr	r4, [pc, #52]	; (8003a98 <BSP_LCD_DisplayChar+0x84>)
 8003a62:	4613      	mov	r3, r2
 8003a64:	005b      	lsls	r3, r3, #1
 8003a66:	4413      	add	r3, r2
 8003a68:	009b      	lsls	r3, r3, #2
 8003a6a:	4423      	add	r3, r4
 8003a6c:	3308      	adds	r3, #8
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	889b      	ldrh	r3, [r3, #4]
 8003a72:	3307      	adds	r3, #7
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	da00      	bge.n	8003a7a <BSP_LCD_DisplayChar+0x66>
 8003a78:	3307      	adds	r3, #7
 8003a7a:	10db      	asrs	r3, r3, #3
 8003a7c:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003a80:	18ca      	adds	r2, r1, r3
 8003a82:	88b9      	ldrh	r1, [r7, #4]
 8003a84:	88fb      	ldrh	r3, [r7, #6]
 8003a86:	4618      	mov	r0, r3
 8003a88:	f000 fe56 	bl	8004738 <DrawChar>
}
 8003a8c:	bf00      	nop
 8003a8e:	370c      	adds	r7, #12
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd90      	pop	{r4, r7, pc}
 8003a94:	200003d0 	.word	0x200003d0
 8003a98:	200003d4 	.word	0x200003d4

08003a9c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8003a9c:	b5b0      	push	{r4, r5, r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	60ba      	str	r2, [r7, #8]
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	81fb      	strh	r3, [r7, #14]
 8003aaa:	460b      	mov	r3, r1
 8003aac:	81bb      	strh	r3, [r7, #12]
 8003aae:	4613      	mov	r3, r2
 8003ab0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	83fb      	strh	r3, [r7, #30]
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8003aba:	2300      	movs	r3, #0
 8003abc:	61bb      	str	r3, [r7, #24]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003ac6:	e002      	b.n	8003ace <BSP_LCD_DisplayStringAt+0x32>
 8003ac8:	69bb      	ldr	r3, [r7, #24]
 8003aca:	3301      	adds	r3, #1
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	1c5a      	adds	r2, r3, #1
 8003ad2:	617a      	str	r2, [r7, #20]
 8003ad4:	781b      	ldrb	r3, [r3, #0]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f6      	bne.n	8003ac8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8003ada:	f7ff fe79 	bl	80037d0 <BSP_LCD_GetXSize>
 8003ade:	4601      	mov	r1, r0
 8003ae0:	4b50      	ldr	r3, [pc, #320]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003ae2:	681a      	ldr	r2, [r3, #0]
 8003ae4:	4850      	ldr	r0, [pc, #320]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003ae6:	4613      	mov	r3, r2
 8003ae8:	005b      	lsls	r3, r3, #1
 8003aea:	4413      	add	r3, r2
 8003aec:	009b      	lsls	r3, r3, #2
 8003aee:	4403      	add	r3, r0
 8003af0:	3308      	adds	r3, #8
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	889b      	ldrh	r3, [r3, #4]
 8003af6:	fbb1 f3f3 	udiv	r3, r1, r3
 8003afa:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	2b03      	cmp	r3, #3
 8003b00:	d01c      	beq.n	8003b3c <BSP_LCD_DisplayStringAt+0xa0>
 8003b02:	2b03      	cmp	r3, #3
 8003b04:	dc33      	bgt.n	8003b6e <BSP_LCD_DisplayStringAt+0xd2>
 8003b06:	2b01      	cmp	r3, #1
 8003b08:	d002      	beq.n	8003b10 <BSP_LCD_DisplayStringAt+0x74>
 8003b0a:	2b02      	cmp	r3, #2
 8003b0c:	d019      	beq.n	8003b42 <BSP_LCD_DisplayStringAt+0xa6>
 8003b0e:	e02e      	b.n	8003b6e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003b10:	693a      	ldr	r2, [r7, #16]
 8003b12:	69bb      	ldr	r3, [r7, #24]
 8003b14:	1ad1      	subs	r1, r2, r3
 8003b16:	4b43      	ldr	r3, [pc, #268]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003b18:	681a      	ldr	r2, [r3, #0]
 8003b1a:	4843      	ldr	r0, [pc, #268]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	005b      	lsls	r3, r3, #1
 8003b20:	4413      	add	r3, r2
 8003b22:	009b      	lsls	r3, r3, #2
 8003b24:	4403      	add	r3, r0
 8003b26:	3308      	adds	r3, #8
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	889b      	ldrh	r3, [r3, #4]
 8003b2c:	fb03 f301 	mul.w	r3, r3, r1
 8003b30:	085b      	lsrs	r3, r3, #1
 8003b32:	b29a      	uxth	r2, r3
 8003b34:	89fb      	ldrh	r3, [r7, #14]
 8003b36:	4413      	add	r3, r2
 8003b38:	83fb      	strh	r3, [r7, #30]
      break;
 8003b3a:	e01b      	b.n	8003b74 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8003b3c:	89fb      	ldrh	r3, [r7, #14]
 8003b3e:	83fb      	strh	r3, [r7, #30]
      break;
 8003b40:	e018      	b.n	8003b74 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8003b42:	693a      	ldr	r2, [r7, #16]
 8003b44:	69bb      	ldr	r3, [r7, #24]
 8003b46:	1ad3      	subs	r3, r2, r3
 8003b48:	b299      	uxth	r1, r3
 8003b4a:	4b36      	ldr	r3, [pc, #216]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	4836      	ldr	r0, [pc, #216]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b50:	4613      	mov	r3, r2
 8003b52:	005b      	lsls	r3, r3, #1
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4403      	add	r3, r0
 8003b5a:	3308      	adds	r3, #8
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	889b      	ldrh	r3, [r3, #4]
 8003b60:	fb11 f303 	smulbb	r3, r1, r3
 8003b64:	b29a      	uxth	r2, r3
 8003b66:	89fb      	ldrh	r3, [r7, #14]
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	83fb      	strh	r3, [r7, #30]
      break;
 8003b6c:	e002      	b.n	8003b74 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 8003b6e:	89fb      	ldrh	r3, [r7, #14]
 8003b70:	83fb      	strh	r3, [r7, #30]
      break;
 8003b72:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8003b74:	8bfb      	ldrh	r3, [r7, #30]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d003      	beq.n	8003b82 <BSP_LCD_DisplayStringAt+0xe6>
 8003b7a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	da1d      	bge.n	8003bbe <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003b82:	2301      	movs	r3, #1
 8003b84:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003b86:	e01a      	b.n	8003bbe <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	781a      	ldrb	r2, [r3, #0]
 8003b8c:	89b9      	ldrh	r1, [r7, #12]
 8003b8e:	8bfb      	ldrh	r3, [r7, #30]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f7ff ff3f 	bl	8003a14 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	4923      	ldr	r1, [pc, #140]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003b9c:	4613      	mov	r3, r2
 8003b9e:	005b      	lsls	r3, r3, #1
 8003ba0:	4413      	add	r3, r2
 8003ba2:	009b      	lsls	r3, r3, #2
 8003ba4:	440b      	add	r3, r1
 8003ba6:	3308      	adds	r3, #8
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	889a      	ldrh	r2, [r3, #4]
 8003bac:	8bfb      	ldrh	r3, [r7, #30]
 8003bae:	4413      	add	r3, r2
 8003bb0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003bb2:	68bb      	ldr	r3, [r7, #8]
 8003bb4:	3301      	adds	r3, #1
 8003bb6:	60bb      	str	r3, [r7, #8]
    i++;
 8003bb8:	8bbb      	ldrh	r3, [r7, #28]
 8003bba:	3301      	adds	r3, #1
 8003bbc:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003bbe:	68bb      	ldr	r3, [r7, #8]
 8003bc0:	781b      	ldrb	r3, [r3, #0]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	bf14      	ite	ne
 8003bc6:	2301      	movne	r3, #1
 8003bc8:	2300      	moveq	r3, #0
 8003bca:	b2dc      	uxtb	r4, r3
 8003bcc:	f7ff fe00 	bl	80037d0 <BSP_LCD_GetXSize>
 8003bd0:	8bb9      	ldrh	r1, [r7, #28]
 8003bd2:	4b14      	ldr	r3, [pc, #80]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003bd4:	681a      	ldr	r2, [r3, #0]
 8003bd6:	4d14      	ldr	r5, [pc, #80]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bd8:	4613      	mov	r3, r2
 8003bda:	005b      	lsls	r3, r3, #1
 8003bdc:	4413      	add	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	442b      	add	r3, r5
 8003be2:	3308      	adds	r3, #8
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	889b      	ldrh	r3, [r3, #4]
 8003be8:	fb03 f301 	mul.w	r3, r3, r1
 8003bec:	1ac3      	subs	r3, r0, r3
 8003bee:	b299      	uxth	r1, r3
 8003bf0:	4b0c      	ldr	r3, [pc, #48]	; (8003c24 <BSP_LCD_DisplayStringAt+0x188>)
 8003bf2:	681a      	ldr	r2, [r3, #0]
 8003bf4:	480c      	ldr	r0, [pc, #48]	; (8003c28 <BSP_LCD_DisplayStringAt+0x18c>)
 8003bf6:	4613      	mov	r3, r2
 8003bf8:	005b      	lsls	r3, r3, #1
 8003bfa:	4413      	add	r3, r2
 8003bfc:	009b      	lsls	r3, r3, #2
 8003bfe:	4403      	add	r3, r0
 8003c00:	3308      	adds	r3, #8
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	889b      	ldrh	r3, [r3, #4]
 8003c06:	4299      	cmp	r1, r3
 8003c08:	bf2c      	ite	cs
 8003c0a:	2301      	movcs	r3, #1
 8003c0c:	2300      	movcc	r3, #0
 8003c0e:	b2db      	uxtb	r3, r3
 8003c10:	4023      	ands	r3, r4
 8003c12:	b2db      	uxtb	r3, r3
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d1b7      	bne.n	8003b88 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003c18:	bf00      	nop
 8003c1a:	bf00      	nop
 8003c1c:	3720      	adds	r7, #32
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	bdb0      	pop	{r4, r5, r7, pc}
 8003c22:	bf00      	nop
 8003c24:	200003d0 	.word	0x200003d0
 8003c28:	200003d4 	.word	0x200003d4

08003c2c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b082      	sub	sp, #8
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	4603      	mov	r3, r0
 8003c34:	6039      	str	r1, [r7, #0]
 8003c36:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003c38:	f7ff feae 	bl	8003998 <BSP_LCD_GetFont>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	88db      	ldrh	r3, [r3, #6]
 8003c40:	88fa      	ldrh	r2, [r7, #6]
 8003c42:	fb12 f303 	smulbb	r3, r2, r3
 8003c46:	b299      	uxth	r1, r3
 8003c48:	2303      	movs	r3, #3
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	2000      	movs	r0, #0
 8003c4e:	f7ff ff25 	bl	8003a9c <BSP_LCD_DisplayStringAt>
}
 8003c52:	bf00      	nop
 8003c54:	3708      	adds	r7, #8
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
	...

08003c5c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003c5c:	b5b0      	push	{r4, r5, r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af02      	add	r7, sp, #8
 8003c62:	4603      	mov	r3, r0
 8003c64:	80fb      	strh	r3, [r7, #6]
 8003c66:	460b      	mov	r3, r1
 8003c68:	80bb      	strh	r3, [r7, #4]
 8003c6a:	4613      	mov	r3, r2
 8003c6c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003c6e:	2300      	movs	r3, #0
 8003c70:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c72:	4b26      	ldr	r3, [pc, #152]	; (8003d0c <BSP_LCD_DrawHLine+0xb0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	4a26      	ldr	r2, [pc, #152]	; (8003d10 <BSP_LCD_DrawHLine+0xb4>)
 8003c78:	2134      	movs	r1, #52	; 0x34
 8003c7a:	fb01 f303 	mul.w	r3, r1, r3
 8003c7e:	4413      	add	r3, r2
 8003c80:	3348      	adds	r3, #72	; 0x48
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2b02      	cmp	r3, #2
 8003c86:	d114      	bne.n	8003cb2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003c88:	4b20      	ldr	r3, [pc, #128]	; (8003d0c <BSP_LCD_DrawHLine+0xb0>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a20      	ldr	r2, [pc, #128]	; (8003d10 <BSP_LCD_DrawHLine+0xb4>)
 8003c8e:	2134      	movs	r1, #52	; 0x34
 8003c90:	fb01 f303 	mul.w	r3, r1, r3
 8003c94:	4413      	add	r3, r2
 8003c96:	335c      	adds	r3, #92	; 0x5c
 8003c98:	681c      	ldr	r4, [r3, #0]
 8003c9a:	f7ff fd99 	bl	80037d0 <BSP_LCD_GetXSize>
 8003c9e:	4602      	mov	r2, r0
 8003ca0:	88bb      	ldrh	r3, [r7, #4]
 8003ca2:	fb03 f202 	mul.w	r2, r3, r2
 8003ca6:	88fb      	ldrh	r3, [r7, #6]
 8003ca8:	4413      	add	r3, r2
 8003caa:	005b      	lsls	r3, r3, #1
 8003cac:	4423      	add	r3, r4
 8003cae:	60fb      	str	r3, [r7, #12]
 8003cb0:	e013      	b.n	8003cda <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003cb2:	4b16      	ldr	r3, [pc, #88]	; (8003d0c <BSP_LCD_DrawHLine+0xb0>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a16      	ldr	r2, [pc, #88]	; (8003d10 <BSP_LCD_DrawHLine+0xb4>)
 8003cb8:	2134      	movs	r1, #52	; 0x34
 8003cba:	fb01 f303 	mul.w	r3, r1, r3
 8003cbe:	4413      	add	r3, r2
 8003cc0:	335c      	adds	r3, #92	; 0x5c
 8003cc2:	681c      	ldr	r4, [r3, #0]
 8003cc4:	f7ff fd84 	bl	80037d0 <BSP_LCD_GetXSize>
 8003cc8:	4602      	mov	r2, r0
 8003cca:	88bb      	ldrh	r3, [r7, #4]
 8003ccc:	fb03 f202 	mul.w	r2, r3, r2
 8003cd0:	88fb      	ldrh	r3, [r7, #6]
 8003cd2:	4413      	add	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4423      	add	r3, r4
 8003cd8:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003cda:	4b0c      	ldr	r3, [pc, #48]	; (8003d0c <BSP_LCD_DrawHLine+0xb0>)
 8003cdc:	6818      	ldr	r0, [r3, #0]
 8003cde:	68f9      	ldr	r1, [r7, #12]
 8003ce0:	887c      	ldrh	r4, [r7, #2]
 8003ce2:	4b0a      	ldr	r3, [pc, #40]	; (8003d0c <BSP_LCD_DrawHLine+0xb0>)
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4d0b      	ldr	r5, [pc, #44]	; (8003d14 <BSP_LCD_DrawHLine+0xb8>)
 8003ce8:	4613      	mov	r3, r2
 8003cea:	005b      	lsls	r3, r3, #1
 8003cec:	4413      	add	r3, r2
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	442b      	add	r3, r5
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	9301      	str	r3, [sp, #4]
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	9300      	str	r3, [sp, #0]
 8003cfa:	2301      	movs	r3, #1
 8003cfc:	4622      	mov	r2, r4
 8003cfe:	f000 fe93 	bl	8004a28 <LL_FillBuffer>
}
 8003d02:	bf00      	nop
 8003d04:	3710      	adds	r7, #16
 8003d06:	46bd      	mov	sp, r7
 8003d08:	bdb0      	pop	{r4, r5, r7, pc}
 8003d0a:	bf00      	nop
 8003d0c:	200003d0 	.word	0x200003d0
 8003d10:	20008d1c 	.word	0x20008d1c
 8003d14:	200003d4 	.word	0x200003d4

08003d18 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b08b      	sub	sp, #44	; 0x2c
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4604      	mov	r4, r0
 8003d20:	4608      	mov	r0, r1
 8003d22:	4611      	mov	r1, r2
 8003d24:	461a      	mov	r2, r3
 8003d26:	4623      	mov	r3, r4
 8003d28:	80fb      	strh	r3, [r7, #6]
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	80bb      	strh	r3, [r7, #4]
 8003d2e:	460b      	mov	r3, r1
 8003d30:	807b      	strh	r3, [r7, #2]
 8003d32:	4613      	mov	r3, r2
 8003d34:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003d36:	2300      	movs	r3, #0
 8003d38:	823b      	strh	r3, [r7, #16]
 8003d3a:	2300      	movs	r3, #0
 8003d3c:	81fb      	strh	r3, [r7, #14]
 8003d3e:	2300      	movs	r3, #0
 8003d40:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003d42:	2300      	movs	r3, #0
 8003d44:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003d46:	2300      	movs	r3, #0
 8003d48:	847b      	strh	r3, [r7, #34]	; 0x22
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8003d4e:	2300      	movs	r3, #0
 8003d50:	83fb      	strh	r3, [r7, #30]
 8003d52:	2300      	movs	r3, #0
 8003d54:	83bb      	strh	r3, [r7, #28]
 8003d56:	2300      	movs	r3, #0
 8003d58:	837b      	strh	r3, [r7, #26]
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	833b      	strh	r3, [r7, #24]
 8003d5e:	2300      	movs	r3, #0
 8003d60:	82fb      	strh	r3, [r7, #22]
 8003d62:	2300      	movs	r3, #0
 8003d64:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003d66:	2300      	movs	r3, #0
 8003d68:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003d6a:	887a      	ldrh	r2, [r7, #2]
 8003d6c:	88fb      	ldrh	r3, [r7, #6]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	bfb8      	it	lt
 8003d74:	425b      	neglt	r3, r3
 8003d76:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003d78:	883a      	ldrh	r2, [r7, #0]
 8003d7a:	88bb      	ldrh	r3, [r7, #4]
 8003d7c:	1ad3      	subs	r3, r2, r3
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	bfb8      	it	lt
 8003d82:	425b      	neglt	r3, r3
 8003d84:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003d86:	88fb      	ldrh	r3, [r7, #6]
 8003d88:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003d8a:	88bb      	ldrh	r3, [r7, #4]
 8003d8c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003d8e:	887a      	ldrh	r2, [r7, #2]
 8003d90:	88fb      	ldrh	r3, [r7, #6]
 8003d92:	429a      	cmp	r2, r3
 8003d94:	d304      	bcc.n	8003da0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003d96:	2301      	movs	r3, #1
 8003d98:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	843b      	strh	r3, [r7, #32]
 8003d9e:	e005      	b.n	8003dac <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003da0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003da4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003da6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003daa:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003dac:	883a      	ldrh	r2, [r7, #0]
 8003dae:	88bb      	ldrh	r3, [r7, #4]
 8003db0:	429a      	cmp	r2, r3
 8003db2:	d304      	bcc.n	8003dbe <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003db4:	2301      	movs	r3, #1
 8003db6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003db8:	2301      	movs	r3, #1
 8003dba:	83bb      	strh	r3, [r7, #28]
 8003dbc:	e005      	b.n	8003dca <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003dbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dc2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003dc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dc8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003dca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003dce:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003dd2:	429a      	cmp	r2, r3
 8003dd4:	db11      	blt.n	8003dfa <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003dda:	2300      	movs	r3, #0
 8003ddc:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003dde:	8a3b      	ldrh	r3, [r7, #16]
 8003de0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003de2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da00      	bge.n	8003dec <BSP_LCD_DrawLine+0xd4>
 8003dea:	3301      	adds	r3, #1
 8003dec:	105b      	asrs	r3, r3, #1
 8003dee:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003df0:	89fb      	ldrh	r3, [r7, #14]
 8003df2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003df4:	8a3b      	ldrh	r3, [r7, #16]
 8003df6:	82bb      	strh	r3, [r7, #20]
 8003df8:	e010      	b.n	8003e1c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003dfe:	2300      	movs	r3, #0
 8003e00:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003e02:	89fb      	ldrh	r3, [r7, #14]
 8003e04:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003e06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	da00      	bge.n	8003e10 <BSP_LCD_DrawLine+0xf8>
 8003e0e:	3301      	adds	r3, #1
 8003e10:	105b      	asrs	r3, r3, #1
 8003e12:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003e14:	8a3b      	ldrh	r3, [r7, #16]
 8003e16:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003e18:	89fb      	ldrh	r3, [r7, #14]
 8003e1a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	827b      	strh	r3, [r7, #18]
 8003e20:	e037      	b.n	8003e92 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003e22:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003e24:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003e26:	4b20      	ldr	r3, [pc, #128]	; (8003ea8 <BSP_LCD_DrawLine+0x190>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	4c20      	ldr	r4, [pc, #128]	; (8003eac <BSP_LCD_DrawLine+0x194>)
 8003e2c:	4613      	mov	r3, r2
 8003e2e:	005b      	lsls	r3, r3, #1
 8003e30:	4413      	add	r3, r2
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4423      	add	r3, r4
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	461a      	mov	r2, r3
 8003e3a:	f000 f923 	bl	8004084 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003e3e:	8b3a      	ldrh	r2, [r7, #24]
 8003e40:	8afb      	ldrh	r3, [r7, #22]
 8003e42:	4413      	add	r3, r2
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003e48:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003e4c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003e50:	429a      	cmp	r2, r3
 8003e52:	db0e      	blt.n	8003e72 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003e54:	8b3a      	ldrh	r2, [r7, #24]
 8003e56:	8b7b      	ldrh	r3, [r7, #26]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	b29b      	uxth	r3, r3
 8003e5c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003e5e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e60:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003e62:	4413      	add	r3, r2
 8003e64:	b29b      	uxth	r3, r3
 8003e66:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003e68:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e6a:	8bfb      	ldrh	r3, [r7, #30]
 8003e6c:	4413      	add	r3, r2
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003e72:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003e74:	8c3b      	ldrh	r3, [r7, #32]
 8003e76:	4413      	add	r3, r2
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003e7c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003e7e:	8bbb      	ldrh	r3, [r7, #28]
 8003e80:	4413      	add	r3, r2
 8003e82:	b29b      	uxth	r3, r3
 8003e84:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003e86:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	3301      	adds	r3, #1
 8003e8e:	b29b      	uxth	r3, r3
 8003e90:	827b      	strh	r3, [r7, #18]
 8003e92:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003e96:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003e9a:	429a      	cmp	r2, r3
 8003e9c:	ddc1      	ble.n	8003e22 <BSP_LCD_DrawLine+0x10a>
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	bf00      	nop
 8003ea2:	372c      	adds	r7, #44	; 0x2c
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bd90      	pop	{r4, r7, pc}
 8003ea8:	200003d0 	.word	0x200003d0
 8003eac:	200003d4 	.word	0x200003d4

08003eb0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003eb0:	b590      	push	{r4, r7, lr}
 8003eb2:	b087      	sub	sp, #28
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	80fb      	strh	r3, [r7, #6]
 8003eba:	460b      	mov	r3, r1
 8003ebc:	80bb      	strh	r3, [r7, #4]
 8003ebe:	4613      	mov	r3, r2
 8003ec0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003ec2:	887b      	ldrh	r3, [r7, #2]
 8003ec4:	005b      	lsls	r3, r3, #1
 8003ec6:	f1c3 0303 	rsb	r3, r3, #3
 8003eca:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003ed0:	887b      	ldrh	r3, [r7, #2]
 8003ed2:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003ed4:	e0c7      	b.n	8004066 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003ed6:	693b      	ldr	r3, [r7, #16]
 8003ed8:	b29a      	uxth	r2, r3
 8003eda:	88fb      	ldrh	r3, [r7, #6]
 8003edc:	4413      	add	r3, r2
 8003ede:	b298      	uxth	r0, r3
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	b29b      	uxth	r3, r3
 8003ee4:	88ba      	ldrh	r2, [r7, #4]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	b299      	uxth	r1, r3
 8003eea:	4b64      	ldr	r3, [pc, #400]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	4c64      	ldr	r4, [pc, #400]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003ef0:	4613      	mov	r3, r2
 8003ef2:	005b      	lsls	r3, r3, #1
 8003ef4:	4413      	add	r3, r2
 8003ef6:	009b      	lsls	r3, r3, #2
 8003ef8:	4423      	add	r3, r4
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	461a      	mov	r2, r3
 8003efe:	f000 f8c1 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	b29b      	uxth	r3, r3
 8003f06:	88fa      	ldrh	r2, [r7, #6]
 8003f08:	1ad3      	subs	r3, r2, r3
 8003f0a:	b298      	uxth	r0, r3
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	88ba      	ldrh	r2, [r7, #4]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	b299      	uxth	r1, r3
 8003f16:	4b59      	ldr	r3, [pc, #356]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	4c59      	ldr	r4, [pc, #356]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003f1c:	4613      	mov	r3, r2
 8003f1e:	005b      	lsls	r3, r3, #1
 8003f20:	4413      	add	r3, r2
 8003f22:	009b      	lsls	r3, r3, #2
 8003f24:	4423      	add	r3, r4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	461a      	mov	r2, r3
 8003f2a:	f000 f8ab 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	b29a      	uxth	r2, r3
 8003f32:	88fb      	ldrh	r3, [r7, #6]
 8003f34:	4413      	add	r3, r2
 8003f36:	b298      	uxth	r0, r3
 8003f38:	693b      	ldr	r3, [r7, #16]
 8003f3a:	b29b      	uxth	r3, r3
 8003f3c:	88ba      	ldrh	r2, [r7, #4]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	b299      	uxth	r1, r3
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	4c4e      	ldr	r4, [pc, #312]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003f48:	4613      	mov	r3, r2
 8003f4a:	005b      	lsls	r3, r3, #1
 8003f4c:	4413      	add	r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	4423      	add	r3, r4
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	461a      	mov	r2, r3
 8003f56:	f000 f895 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	88fa      	ldrh	r2, [r7, #6]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	b298      	uxth	r0, r3
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	88ba      	ldrh	r2, [r7, #4]
 8003f6a:	1ad3      	subs	r3, r2, r3
 8003f6c:	b299      	uxth	r1, r3
 8003f6e:	4b43      	ldr	r3, [pc, #268]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003f70:	681a      	ldr	r2, [r3, #0]
 8003f72:	4c43      	ldr	r4, [pc, #268]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003f74:	4613      	mov	r3, r2
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4423      	add	r3, r4
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	461a      	mov	r2, r3
 8003f82:	f000 f87f 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	b29a      	uxth	r2, r3
 8003f8a:	88fb      	ldrh	r3, [r7, #6]
 8003f8c:	4413      	add	r3, r2
 8003f8e:	b298      	uxth	r0, r3
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	b29a      	uxth	r2, r3
 8003f94:	88bb      	ldrh	r3, [r7, #4]
 8003f96:	4413      	add	r3, r2
 8003f98:	b299      	uxth	r1, r3
 8003f9a:	4b38      	ldr	r3, [pc, #224]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	4c38      	ldr	r4, [pc, #224]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	005b      	lsls	r3, r3, #1
 8003fa4:	4413      	add	r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	4423      	add	r3, r4
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	461a      	mov	r2, r3
 8003fae:	f000 f869 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003fb2:	693b      	ldr	r3, [r7, #16]
 8003fb4:	b29b      	uxth	r3, r3
 8003fb6:	88fa      	ldrh	r2, [r7, #6]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	b298      	uxth	r0, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	b29a      	uxth	r2, r3
 8003fc0:	88bb      	ldrh	r3, [r7, #4]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	b299      	uxth	r1, r3
 8003fc6:	4b2d      	ldr	r3, [pc, #180]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	4c2d      	ldr	r4, [pc, #180]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003fcc:	4613      	mov	r3, r2
 8003fce:	005b      	lsls	r3, r3, #1
 8003fd0:	4413      	add	r3, r2
 8003fd2:	009b      	lsls	r3, r3, #2
 8003fd4:	4423      	add	r3, r4
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	461a      	mov	r2, r3
 8003fda:	f000 f853 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	b29a      	uxth	r2, r3
 8003fe2:	88fb      	ldrh	r3, [r7, #6]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	b298      	uxth	r0, r3
 8003fe8:	693b      	ldr	r3, [r7, #16]
 8003fea:	b29a      	uxth	r2, r3
 8003fec:	88bb      	ldrh	r3, [r7, #4]
 8003fee:	4413      	add	r3, r2
 8003ff0:	b299      	uxth	r1, r3
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8003ff4:	681a      	ldr	r2, [r3, #0]
 8003ff6:	4c22      	ldr	r4, [pc, #136]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	005b      	lsls	r3, r3, #1
 8003ffc:	4413      	add	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4423      	add	r3, r4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	461a      	mov	r2, r3
 8004006:	f000 f83d 	bl	8004084 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	b29b      	uxth	r3, r3
 800400e:	88fa      	ldrh	r2, [r7, #6]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	b298      	uxth	r0, r3
 8004014:	693b      	ldr	r3, [r7, #16]
 8004016:	b29a      	uxth	r2, r3
 8004018:	88bb      	ldrh	r3, [r7, #4]
 800401a:	4413      	add	r3, r2
 800401c:	b299      	uxth	r1, r3
 800401e:	4b17      	ldr	r3, [pc, #92]	; (800407c <BSP_LCD_DrawCircle+0x1cc>)
 8004020:	681a      	ldr	r2, [r3, #0]
 8004022:	4c17      	ldr	r4, [pc, #92]	; (8004080 <BSP_LCD_DrawCircle+0x1d0>)
 8004024:	4613      	mov	r3, r2
 8004026:	005b      	lsls	r3, r3, #1
 8004028:	4413      	add	r3, r2
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4423      	add	r3, r4
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	f000 f827 	bl	8004084 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	2b00      	cmp	r3, #0
 800403a:	da06      	bge.n	800404a <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 800403c:	693b      	ldr	r3, [r7, #16]
 800403e:	009a      	lsls	r2, r3, #2
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	4413      	add	r3, r2
 8004044:	3306      	adds	r3, #6
 8004046:	617b      	str	r3, [r7, #20]
 8004048:	e00a      	b.n	8004060 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800404a:	693a      	ldr	r2, [r7, #16]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	009a      	lsls	r2, r3, #2
 8004052:	697b      	ldr	r3, [r7, #20]
 8004054:	4413      	add	r3, r2
 8004056:	330a      	adds	r3, #10
 8004058:	617b      	str	r3, [r7, #20]
      current_y--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	3b01      	subs	r3, #1
 800405e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3301      	adds	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8004066:	693a      	ldr	r2, [r7, #16]
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	429a      	cmp	r2, r3
 800406c:	f67f af33 	bls.w	8003ed6 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8004070:	bf00      	nop
 8004072:	bf00      	nop
 8004074:	371c      	adds	r7, #28
 8004076:	46bd      	mov	sp, r7
 8004078:	bd90      	pop	{r4, r7, pc}
 800407a:	bf00      	nop
 800407c:	200003d0 	.word	0x200003d0
 8004080:	200003d4 	.word	0x200003d4

08004084 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8004084:	b5b0      	push	{r4, r5, r7, lr}
 8004086:	b082      	sub	sp, #8
 8004088:	af00      	add	r7, sp, #0
 800408a:	4603      	mov	r3, r0
 800408c:	603a      	str	r2, [r7, #0]
 800408e:	80fb      	strh	r3, [r7, #6]
 8004090:	460b      	mov	r3, r1
 8004092:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004094:	4b1d      	ldr	r3, [pc, #116]	; (800410c <BSP_LCD_DrawPixel+0x88>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	4a1d      	ldr	r2, [pc, #116]	; (8004110 <BSP_LCD_DrawPixel+0x8c>)
 800409a:	2134      	movs	r1, #52	; 0x34
 800409c:	fb01 f303 	mul.w	r3, r1, r3
 80040a0:	4413      	add	r3, r2
 80040a2:	3348      	adds	r3, #72	; 0x48
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d116      	bne.n	80040d8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80040aa:	4b18      	ldr	r3, [pc, #96]	; (800410c <BSP_LCD_DrawPixel+0x88>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a18      	ldr	r2, [pc, #96]	; (8004110 <BSP_LCD_DrawPixel+0x8c>)
 80040b0:	2134      	movs	r1, #52	; 0x34
 80040b2:	fb01 f303 	mul.w	r3, r1, r3
 80040b6:	4413      	add	r3, r2
 80040b8:	335c      	adds	r3, #92	; 0x5c
 80040ba:	681c      	ldr	r4, [r3, #0]
 80040bc:	88bd      	ldrh	r5, [r7, #4]
 80040be:	f7ff fb87 	bl	80037d0 <BSP_LCD_GetXSize>
 80040c2:	4603      	mov	r3, r0
 80040c4:	fb03 f205 	mul.w	r2, r3, r5
 80040c8:	88fb      	ldrh	r3, [r7, #6]
 80040ca:	4413      	add	r3, r2
 80040cc:	005b      	lsls	r3, r3, #1
 80040ce:	4423      	add	r3, r4
 80040d0:	683a      	ldr	r2, [r7, #0]
 80040d2:	b292      	uxth	r2, r2
 80040d4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80040d6:	e015      	b.n	8004104 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80040d8:	4b0c      	ldr	r3, [pc, #48]	; (800410c <BSP_LCD_DrawPixel+0x88>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a0c      	ldr	r2, [pc, #48]	; (8004110 <BSP_LCD_DrawPixel+0x8c>)
 80040de:	2134      	movs	r1, #52	; 0x34
 80040e0:	fb01 f303 	mul.w	r3, r1, r3
 80040e4:	4413      	add	r3, r2
 80040e6:	335c      	adds	r3, #92	; 0x5c
 80040e8:	681c      	ldr	r4, [r3, #0]
 80040ea:	88bd      	ldrh	r5, [r7, #4]
 80040ec:	f7ff fb70 	bl	80037d0 <BSP_LCD_GetXSize>
 80040f0:	4603      	mov	r3, r0
 80040f2:	fb03 f205 	mul.w	r2, r3, r5
 80040f6:	88fb      	ldrh	r3, [r7, #6]
 80040f8:	4413      	add	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4423      	add	r3, r4
 80040fe:	461a      	mov	r2, r3
 8004100:	683b      	ldr	r3, [r7, #0]
 8004102:	6013      	str	r3, [r2, #0]
}
 8004104:	bf00      	nop
 8004106:	3708      	adds	r7, #8
 8004108:	46bd      	mov	sp, r7
 800410a:	bdb0      	pop	{r4, r5, r7, pc}
 800410c:	200003d0 	.word	0x200003d0
 8004110:	20008d1c 	.word	0x20008d1c

08004114 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8004114:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004118:	b086      	sub	sp, #24
 800411a:	af02      	add	r7, sp, #8
 800411c:	4604      	mov	r4, r0
 800411e:	4608      	mov	r0, r1
 8004120:	4611      	mov	r1, r2
 8004122:	461a      	mov	r2, r3
 8004124:	4623      	mov	r3, r4
 8004126:	80fb      	strh	r3, [r7, #6]
 8004128:	4603      	mov	r3, r0
 800412a:	80bb      	strh	r3, [r7, #4]
 800412c:	460b      	mov	r3, r1
 800412e:	807b      	strh	r3, [r7, #2]
 8004130:	4613      	mov	r3, r2
 8004132:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8004134:	2300      	movs	r3, #0
 8004136:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004138:	4b30      	ldr	r3, [pc, #192]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	4930      	ldr	r1, [pc, #192]	; (8004200 <BSP_LCD_FillRect+0xec>)
 800413e:	4613      	mov	r3, r2
 8004140:	005b      	lsls	r3, r3, #1
 8004142:	4413      	add	r3, r2
 8004144:	009b      	lsls	r3, r3, #2
 8004146:	440b      	add	r3, r1
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fbd8 	bl	8003900 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004150:	4b2a      	ldr	r3, [pc, #168]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a2b      	ldr	r2, [pc, #172]	; (8004204 <BSP_LCD_FillRect+0xf0>)
 8004156:	2134      	movs	r1, #52	; 0x34
 8004158:	fb01 f303 	mul.w	r3, r1, r3
 800415c:	4413      	add	r3, r2
 800415e:	3348      	adds	r3, #72	; 0x48
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	2b02      	cmp	r3, #2
 8004164:	d114      	bne.n	8004190 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004166:	4b25      	ldr	r3, [pc, #148]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a26      	ldr	r2, [pc, #152]	; (8004204 <BSP_LCD_FillRect+0xf0>)
 800416c:	2134      	movs	r1, #52	; 0x34
 800416e:	fb01 f303 	mul.w	r3, r1, r3
 8004172:	4413      	add	r3, r2
 8004174:	335c      	adds	r3, #92	; 0x5c
 8004176:	681c      	ldr	r4, [r3, #0]
 8004178:	f7ff fb2a 	bl	80037d0 <BSP_LCD_GetXSize>
 800417c:	4602      	mov	r2, r0
 800417e:	88bb      	ldrh	r3, [r7, #4]
 8004180:	fb03 f202 	mul.w	r2, r3, r2
 8004184:	88fb      	ldrh	r3, [r7, #6]
 8004186:	4413      	add	r3, r2
 8004188:	005b      	lsls	r3, r3, #1
 800418a:	4423      	add	r3, r4
 800418c:	60fb      	str	r3, [r7, #12]
 800418e:	e013      	b.n	80041b8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004190:	4b1a      	ldr	r3, [pc, #104]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	4a1b      	ldr	r2, [pc, #108]	; (8004204 <BSP_LCD_FillRect+0xf0>)
 8004196:	2134      	movs	r1, #52	; 0x34
 8004198:	fb01 f303 	mul.w	r3, r1, r3
 800419c:	4413      	add	r3, r2
 800419e:	335c      	adds	r3, #92	; 0x5c
 80041a0:	681c      	ldr	r4, [r3, #0]
 80041a2:	f7ff fb15 	bl	80037d0 <BSP_LCD_GetXSize>
 80041a6:	4602      	mov	r2, r0
 80041a8:	88bb      	ldrh	r3, [r7, #4]
 80041aa:	fb03 f202 	mul.w	r2, r3, r2
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4423      	add	r3, r4
 80041b6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80041b8:	4b10      	ldr	r3, [pc, #64]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 80041ba:	681c      	ldr	r4, [r3, #0]
 80041bc:	68fd      	ldr	r5, [r7, #12]
 80041be:	887e      	ldrh	r6, [r7, #2]
 80041c0:	f8b7 8000 	ldrh.w	r8, [r7]
 80041c4:	f7ff fb04 	bl	80037d0 <BSP_LCD_GetXSize>
 80041c8:	4602      	mov	r2, r0
 80041ca:	887b      	ldrh	r3, [r7, #2]
 80041cc:	1ad1      	subs	r1, r2, r3
 80041ce:	4b0b      	ldr	r3, [pc, #44]	; (80041fc <BSP_LCD_FillRect+0xe8>)
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	480b      	ldr	r0, [pc, #44]	; (8004200 <BSP_LCD_FillRect+0xec>)
 80041d4:	4613      	mov	r3, r2
 80041d6:	005b      	lsls	r3, r3, #1
 80041d8:	4413      	add	r3, r2
 80041da:	009b      	lsls	r3, r3, #2
 80041dc:	4403      	add	r3, r0
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	9100      	str	r1, [sp, #0]
 80041e4:	4643      	mov	r3, r8
 80041e6:	4632      	mov	r2, r6
 80041e8:	4629      	mov	r1, r5
 80041ea:	4620      	mov	r0, r4
 80041ec:	f000 fc1c 	bl	8004a28 <LL_FillBuffer>
}
 80041f0:	bf00      	nop
 80041f2:	3710      	adds	r7, #16
 80041f4:	46bd      	mov	sp, r7
 80041f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80041fa:	bf00      	nop
 80041fc:	200003d0 	.word	0x200003d0
 8004200:	200003d4 	.word	0x200003d4
 8004204:	20008d1c 	.word	0x20008d1c

08004208 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b086      	sub	sp, #24
 800420c:	af00      	add	r7, sp, #0
 800420e:	4603      	mov	r3, r0
 8004210:	80fb      	strh	r3, [r7, #6]
 8004212:	460b      	mov	r3, r1
 8004214:	80bb      	strh	r3, [r7, #4]
 8004216:	4613      	mov	r3, r2
 8004218:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800421a:	887b      	ldrh	r3, [r7, #2]
 800421c:	005b      	lsls	r3, r3, #1
 800421e:	f1c3 0303 	rsb	r3, r3, #3
 8004222:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8004224:	2300      	movs	r3, #0
 8004226:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8004228:	887b      	ldrh	r3, [r7, #2]
 800422a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800422c:	4b44      	ldr	r3, [pc, #272]	; (8004340 <BSP_LCD_FillCircle+0x138>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	4944      	ldr	r1, [pc, #272]	; (8004344 <BSP_LCD_FillCircle+0x13c>)
 8004232:	4613      	mov	r3, r2
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	4413      	add	r3, r2
 8004238:	009b      	lsls	r3, r3, #2
 800423a:	440b      	add	r3, r1
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4618      	mov	r0, r3
 8004240:	f7ff fb5e 	bl	8003900 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8004244:	e061      	b.n	800430a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d021      	beq.n	8004290 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	b29b      	uxth	r3, r3
 8004250:	88fa      	ldrh	r2, [r7, #6]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	b298      	uxth	r0, r3
 8004256:	693b      	ldr	r3, [r7, #16]
 8004258:	b29a      	uxth	r2, r3
 800425a:	88bb      	ldrh	r3, [r7, #4]
 800425c:	4413      	add	r3, r2
 800425e:	b299      	uxth	r1, r3
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	b29b      	uxth	r3, r3
 8004264:	005b      	lsls	r3, r3, #1
 8004266:	b29b      	uxth	r3, r3
 8004268:	461a      	mov	r2, r3
 800426a:	f7ff fcf7 	bl	8003c5c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	b29b      	uxth	r3, r3
 8004272:	88fa      	ldrh	r2, [r7, #6]
 8004274:	1ad3      	subs	r3, r2, r3
 8004276:	b298      	uxth	r0, r3
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	b29b      	uxth	r3, r3
 800427c:	88ba      	ldrh	r2, [r7, #4]
 800427e:	1ad3      	subs	r3, r2, r3
 8004280:	b299      	uxth	r1, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	b29b      	uxth	r3, r3
 8004286:	005b      	lsls	r3, r3, #1
 8004288:	b29b      	uxth	r3, r3
 800428a:	461a      	mov	r2, r3
 800428c:	f7ff fce6 	bl	8003c5c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d021      	beq.n	80042da <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004296:	693b      	ldr	r3, [r7, #16]
 8004298:	b29b      	uxth	r3, r3
 800429a:	88fa      	ldrh	r2, [r7, #6]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	b298      	uxth	r0, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	b29b      	uxth	r3, r3
 80042a4:	88ba      	ldrh	r2, [r7, #4]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	b299      	uxth	r1, r3
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	005b      	lsls	r3, r3, #1
 80042b0:	b29b      	uxth	r3, r3
 80042b2:	461a      	mov	r2, r3
 80042b4:	f7ff fcd2 	bl	8003c5c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	b29b      	uxth	r3, r3
 80042bc:	88fa      	ldrh	r2, [r7, #6]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	b298      	uxth	r0, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	b29a      	uxth	r2, r3
 80042c6:	88bb      	ldrh	r3, [r7, #4]
 80042c8:	4413      	add	r3, r2
 80042ca:	b299      	uxth	r1, r3
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	b29b      	uxth	r3, r3
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	461a      	mov	r2, r3
 80042d6:	f7ff fcc1 	bl	8003c5c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80042da:	697b      	ldr	r3, [r7, #20]
 80042dc:	2b00      	cmp	r3, #0
 80042de:	da06      	bge.n	80042ee <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80042e0:	693b      	ldr	r3, [r7, #16]
 80042e2:	009a      	lsls	r2, r3, #2
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	4413      	add	r3, r2
 80042e8:	3306      	adds	r3, #6
 80042ea:	617b      	str	r3, [r7, #20]
 80042ec:	e00a      	b.n	8004304 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	1ad3      	subs	r3, r2, r3
 80042f4:	009a      	lsls	r2, r3, #2
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	4413      	add	r3, r2
 80042fa:	330a      	adds	r3, #10
 80042fc:	617b      	str	r3, [r7, #20]
      current_y--;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	3b01      	subs	r3, #1
 8004302:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	3301      	adds	r3, #1
 8004308:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800430a:	693a      	ldr	r2, [r7, #16]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	429a      	cmp	r2, r3
 8004310:	d999      	bls.n	8004246 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004312:	4b0b      	ldr	r3, [pc, #44]	; (8004340 <BSP_LCD_FillCircle+0x138>)
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	490b      	ldr	r1, [pc, #44]	; (8004344 <BSP_LCD_FillCircle+0x13c>)
 8004318:	4613      	mov	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4413      	add	r3, r2
 800431e:	009b      	lsls	r3, r3, #2
 8004320:	440b      	add	r3, r1
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4618      	mov	r0, r3
 8004326:	f7ff faeb 	bl	8003900 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800432a:	887a      	ldrh	r2, [r7, #2]
 800432c:	88b9      	ldrh	r1, [r7, #4]
 800432e:	88fb      	ldrh	r3, [r7, #6]
 8004330:	4618      	mov	r0, r3
 8004332:	f7ff fdbd 	bl	8003eb0 <BSP_LCD_DrawCircle>
}
 8004336:	bf00      	nop
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	200003d0 	.word	0x200003d0
 8004344:	200003d4 	.word	0x200003d4

08004348 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8004348:	b5b0      	push	{r4, r5, r7, lr}
 800434a:	b08c      	sub	sp, #48	; 0x30
 800434c:	af02      	add	r7, sp, #8
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	833b      	strh	r3, [r7, #24]
 8004358:	2300      	movs	r3, #0
 800435a:	82fb      	strh	r3, [r7, #22]
 800435c:	2300      	movs	r3, #0
 800435e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004360:	2300      	movs	r3, #0
 8004362:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004364:	2300      	movs	r3, #0
 8004366:	82bb      	strh	r3, [r7, #20]
 8004368:	2300      	movs	r3, #0
 800436a:	827b      	strh	r3, [r7, #18]
 800436c:	2300      	movs	r3, #0
 800436e:	823b      	strh	r3, [r7, #16]
 8004370:	2300      	movs	r3, #0
 8004372:	81fb      	strh	r3, [r7, #14]
 8004374:	2300      	movs	r3, #0
 8004376:	81bb      	strh	r3, [r7, #12]
 8004378:	2300      	movs	r3, #0
 800437a:	817b      	strh	r3, [r7, #10]
 800437c:	2300      	movs	r3, #0
 800437e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8004380:	2300      	movs	r3, #0
 8004382:	843b      	strh	r3, [r7, #32]
 8004384:	2300      	movs	r3, #0
 8004386:	83fb      	strh	r3, [r7, #30]
 8004388:	2300      	movs	r3, #0
 800438a:	83bb      	strh	r3, [r7, #28]
 800438c:	2300      	movs	r3, #0
 800438e:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004396:	83fb      	strh	r3, [r7, #30]
 8004398:	8bfb      	ldrh	r3, [r7, #30]
 800439a:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80043a2:	837b      	strh	r3, [r7, #26]
 80043a4:	8b7b      	ldrh	r3, [r7, #26]
 80043a6:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80043a8:	2301      	movs	r3, #1
 80043aa:	847b      	strh	r3, [r7, #34]	; 0x22
 80043ac:	e02f      	b.n	800440e <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80043ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80043b2:	009b      	lsls	r3, r3, #2
 80043b4:	687a      	ldr	r2, [r7, #4]
 80043b6:	4413      	add	r3, r2
 80043b8:	881b      	ldrh	r3, [r3, #0]
 80043ba:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80043bc:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043c0:	8c3b      	ldrh	r3, [r7, #32]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	da01      	bge.n	80043ca <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80043c6:	89bb      	ldrh	r3, [r7, #12]
 80043c8:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80043ca:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80043ce:	8bfb      	ldrh	r3, [r7, #30]
 80043d0:	429a      	cmp	r2, r3
 80043d2:	dd01      	ble.n	80043d8 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80043d4:	89bb      	ldrh	r3, [r7, #12]
 80043d6:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80043d8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80043dc:	009b      	lsls	r3, r3, #2
 80043de:	687a      	ldr	r2, [r7, #4]
 80043e0:	4413      	add	r3, r2
 80043e2:	885b      	ldrh	r3, [r3, #2]
 80043e4:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80043e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043ea:	8bbb      	ldrh	r3, [r7, #28]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	da01      	bge.n	80043f4 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80043f0:	897b      	ldrh	r3, [r7, #10]
 80043f2:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80043f4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80043f8:	8b7b      	ldrh	r3, [r7, #26]
 80043fa:	429a      	cmp	r2, r3
 80043fc:	dd01      	ble.n	8004402 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80043fe:	897b      	ldrh	r3, [r7, #10]
 8004400:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8004402:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004406:	b29b      	uxth	r3, r3
 8004408:	3301      	adds	r3, #1
 800440a:	b29b      	uxth	r3, r3
 800440c:	847b      	strh	r3, [r7, #34]	; 0x22
 800440e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004412:	887b      	ldrh	r3, [r7, #2]
 8004414:	429a      	cmp	r2, r3
 8004416:	dbca      	blt.n	80043ae <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8004418:	887b      	ldrh	r3, [r7, #2]
 800441a:	2b01      	cmp	r3, #1
 800441c:	d974      	bls.n	8004508 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800441e:	8c3a      	ldrh	r2, [r7, #32]
 8004420:	8bfb      	ldrh	r3, [r7, #30]
 8004422:	4413      	add	r3, r2
 8004424:	2b00      	cmp	r3, #0
 8004426:	da00      	bge.n	800442a <BSP_LCD_FillPolygon+0xe2>
 8004428:	3301      	adds	r3, #1
 800442a:	105b      	asrs	r3, r3, #1
 800442c:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 800442e:	8b7a      	ldrh	r2, [r7, #26]
 8004430:	8bbb      	ldrh	r3, [r7, #28]
 8004432:	4413      	add	r3, r2
 8004434:	2b00      	cmp	r3, #0
 8004436:	da00      	bge.n	800443a <BSP_LCD_FillPolygon+0xf2>
 8004438:	3301      	adds	r3, #1
 800443a:	105b      	asrs	r3, r3, #1
 800443c:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	881b      	ldrh	r3, [r3, #0]
 8004442:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	885b      	ldrh	r3, [r3, #2]
 8004448:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800444a:	e032      	b.n	80044b2 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	881b      	ldrh	r3, [r3, #0]
 8004450:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	885b      	ldrh	r3, [r3, #2]
 8004456:	82fb      	strh	r3, [r7, #22]
    Points++;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	3304      	adds	r3, #4
 800445c:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	885b      	ldrh	r3, [r3, #2]
 8004468:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800446a:	8b38      	ldrh	r0, [r7, #24]
 800446c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800446e:	8abc      	ldrh	r4, [r7, #20]
 8004470:	8afd      	ldrh	r5, [r7, #22]
 8004472:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004474:	8a7a      	ldrh	r2, [r7, #18]
 8004476:	9201      	str	r2, [sp, #4]
 8004478:	9300      	str	r3, [sp, #0]
 800447a:	462b      	mov	r3, r5
 800447c:	4622      	mov	r2, r4
 800447e:	f000 fa13 	bl	80048a8 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8004482:	8b38      	ldrh	r0, [r7, #24]
 8004484:	8ab9      	ldrh	r1, [r7, #20]
 8004486:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004488:	8afd      	ldrh	r5, [r7, #22]
 800448a:	8a7b      	ldrh	r3, [r7, #18]
 800448c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800448e:	9201      	str	r2, [sp, #4]
 8004490:	9300      	str	r3, [sp, #0]
 8004492:	462b      	mov	r3, r5
 8004494:	4622      	mov	r2, r4
 8004496:	f000 fa07 	bl	80048a8 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800449a:	8ab8      	ldrh	r0, [r7, #20]
 800449c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800449e:	8b3c      	ldrh	r4, [r7, #24]
 80044a0:	8a7d      	ldrh	r5, [r7, #18]
 80044a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044a4:	8afa      	ldrh	r2, [r7, #22]
 80044a6:	9201      	str	r2, [sp, #4]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	462b      	mov	r3, r5
 80044ac:	4622      	mov	r2, r4
 80044ae:	f000 f9fb 	bl	80048a8 <FillTriangle>
  while(--PointCount)
 80044b2:	887b      	ldrh	r3, [r7, #2]
 80044b4:	3b01      	subs	r3, #1
 80044b6:	807b      	strh	r3, [r7, #2]
 80044b8:	887b      	ldrh	r3, [r7, #2]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1c6      	bne.n	800444c <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80044be:	8a38      	ldrh	r0, [r7, #16]
 80044c0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80044c2:	8abc      	ldrh	r4, [r7, #20]
 80044c4:	89fd      	ldrh	r5, [r7, #14]
 80044c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044c8:	8a7a      	ldrh	r2, [r7, #18]
 80044ca:	9201      	str	r2, [sp, #4]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	462b      	mov	r3, r5
 80044d0:	4622      	mov	r2, r4
 80044d2:	f000 f9e9 	bl	80048a8 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80044d6:	8a38      	ldrh	r0, [r7, #16]
 80044d8:	8ab9      	ldrh	r1, [r7, #20]
 80044da:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80044dc:	89fd      	ldrh	r5, [r7, #14]
 80044de:	8a7b      	ldrh	r3, [r7, #18]
 80044e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80044e2:	9201      	str	r2, [sp, #4]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	462b      	mov	r3, r5
 80044e8:	4622      	mov	r2, r4
 80044ea:	f000 f9dd 	bl	80048a8 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80044ee:	8ab8      	ldrh	r0, [r7, #20]
 80044f0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80044f2:	8a3c      	ldrh	r4, [r7, #16]
 80044f4:	8a7d      	ldrh	r5, [r7, #18]
 80044f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80044f8:	89fa      	ldrh	r2, [r7, #14]
 80044fa:	9201      	str	r2, [sp, #4]
 80044fc:	9300      	str	r3, [sp, #0]
 80044fe:	462b      	mov	r3, r5
 8004500:	4622      	mov	r2, r4
 8004502:	f000 f9d1 	bl	80048a8 <FillTriangle>
 8004506:	e000      	b.n	800450a <BSP_LCD_FillPolygon+0x1c2>
    return;
 8004508:	bf00      	nop
}
 800450a:	3728      	adds	r7, #40	; 0x28
 800450c:	46bd      	mov	sp, r7
 800450e:	bdb0      	pop	{r4, r5, r7, pc}

08004510 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004514:	4b0a      	ldr	r3, [pc, #40]	; (8004540 <BSP_LCD_DisplayOn+0x30>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	4b09      	ldr	r3, [pc, #36]	; (8004540 <BSP_LCD_DisplayOn+0x30>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0201 	orr.w	r2, r2, #1
 8004522:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8004524:	2201      	movs	r2, #1
 8004526:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800452a:	4806      	ldr	r0, [pc, #24]	; (8004544 <BSP_LCD_DisplayOn+0x34>)
 800452c:	f003 f806 	bl	800753c <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8004530:	2201      	movs	r2, #1
 8004532:	2108      	movs	r1, #8
 8004534:	4804      	ldr	r0, [pc, #16]	; (8004548 <BSP_LCD_DisplayOn+0x38>)
 8004536:	f003 f801 	bl	800753c <HAL_GPIO_WritePin>
}
 800453a:	bf00      	nop
 800453c:	bd80      	pop	{r7, pc}
 800453e:	bf00      	nop
 8004540:	20008d1c 	.word	0x20008d1c
 8004544:	40022000 	.word	0x40022000
 8004548:	40022800 	.word	0x40022800

0800454c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b090      	sub	sp, #64	; 0x40
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8004556:	4b64      	ldr	r3, [pc, #400]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004558:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455a:	4a63      	ldr	r2, [pc, #396]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 800455c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004560:	6453      	str	r3, [r2, #68]	; 0x44
 8004562:	4b61      	ldr	r3, [pc, #388]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004564:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004566:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800456a:	62bb      	str	r3, [r7, #40]	; 0x28
 800456c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800456e:	4b5e      	ldr	r3, [pc, #376]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004572:	4a5d      	ldr	r2, [pc, #372]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004574:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004578:	6313      	str	r3, [r2, #48]	; 0x30
 800457a:	4b5b      	ldr	r3, [pc, #364]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 800457c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800457e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004582:	627b      	str	r3, [r7, #36]	; 0x24
 8004584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004586:	4b58      	ldr	r3, [pc, #352]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800458a:	4a57      	ldr	r2, [pc, #348]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 800458c:	f043 0310 	orr.w	r3, r3, #16
 8004590:	6313      	str	r3, [r2, #48]	; 0x30
 8004592:	4b55      	ldr	r3, [pc, #340]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004596:	f003 0310 	and.w	r3, r3, #16
 800459a:	623b      	str	r3, [r7, #32]
 800459c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800459e:	4b52      	ldr	r3, [pc, #328]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	4a51      	ldr	r2, [pc, #324]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80045a8:	6313      	str	r3, [r2, #48]	; 0x30
 80045aa:	4b4f      	ldr	r3, [pc, #316]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b2:	61fb      	str	r3, [r7, #28]
 80045b4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80045b6:	4b4c      	ldr	r3, [pc, #304]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	4a4b      	ldr	r2, [pc, #300]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045c0:	6313      	str	r3, [r2, #48]	; 0x30
 80045c2:	4b49      	ldr	r3, [pc, #292]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045ca:	61bb      	str	r3, [r7, #24]
 80045cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80045ce:	4b46      	ldr	r3, [pc, #280]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045d2:	4a45      	ldr	r2, [pc, #276]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80045d8:	6313      	str	r3, [r2, #48]	; 0x30
 80045da:	4b43      	ldr	r3, [pc, #268]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045e2:	617b      	str	r3, [r7, #20]
 80045e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80045e6:	4b40      	ldr	r3, [pc, #256]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ea:	4a3f      	ldr	r2, [pc, #252]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045ec:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80045f0:	6313      	str	r3, [r2, #48]	; 0x30
 80045f2:	4b3d      	ldr	r3, [pc, #244]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 80045f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045f6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80045fe:	4b3a      	ldr	r3, [pc, #232]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a39      	ldr	r2, [pc, #228]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b37      	ldr	r3, [pc, #220]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004616:	4b34      	ldr	r3, [pc, #208]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a33      	ldr	r2, [pc, #204]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 800461c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b31      	ldr	r3, [pc, #196]	; (80046e8 <BSP_LCD_MspInit+0x19c>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800462e:	2310      	movs	r3, #16
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800463a:	2302      	movs	r3, #2
 800463c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800463e:	230e      	movs	r3, #14
 8004640:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004642:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004646:	4619      	mov	r1, r3
 8004648:	4828      	ldr	r0, [pc, #160]	; (80046ec <BSP_LCD_MspInit+0x1a0>)
 800464a:	f002 fca7 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800464e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004652:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004654:	2302      	movs	r3, #2
 8004656:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8004658:	2309      	movs	r3, #9
 800465a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800465c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004660:	4619      	mov	r1, r3
 8004662:	4823      	ldr	r0, [pc, #140]	; (80046f0 <BSP_LCD_MspInit+0x1a4>)
 8004664:	f002 fc9a 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8004668:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800466c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800466e:	2302      	movs	r3, #2
 8004670:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004672:	230e      	movs	r3, #14
 8004674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8004676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800467a:	4619      	mov	r1, r3
 800467c:	481d      	ldr	r0, [pc, #116]	; (80046f4 <BSP_LCD_MspInit+0x1a8>)
 800467e:	f002 fc8d 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004682:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004686:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004688:	2302      	movs	r3, #2
 800468a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800468c:	230e      	movs	r3, #14
 800468e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004694:	4619      	mov	r1, r3
 8004696:	4818      	ldr	r0, [pc, #96]	; (80046f8 <BSP_LCD_MspInit+0x1ac>)
 8004698:	f002 fc80 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800469c:	23f7      	movs	r3, #247	; 0xf7
 800469e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80046a0:	2302      	movs	r3, #2
 80046a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80046a4:	230e      	movs	r3, #14
 80046a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80046a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046ac:	4619      	mov	r1, r3
 80046ae:	4813      	ldr	r0, [pc, #76]	; (80046fc <BSP_LCD_MspInit+0x1b0>)
 80046b0:	f002 fc74 	bl	8006f9c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80046b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80046b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046ba:	2301      	movs	r3, #1
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80046be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046c2:	4619      	mov	r1, r3
 80046c4:	480b      	ldr	r0, [pc, #44]	; (80046f4 <BSP_LCD_MspInit+0x1a8>)
 80046c6:	f002 fc69 	bl	8006f9c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80046ca:	2308      	movs	r3, #8
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80046ce:	2301      	movs	r3, #1
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80046d2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80046d6:	4619      	mov	r1, r3
 80046d8:	4808      	ldr	r0, [pc, #32]	; (80046fc <BSP_LCD_MspInit+0x1b0>)
 80046da:	f002 fc5f 	bl	8006f9c <HAL_GPIO_Init>
}
 80046de:	bf00      	nop
 80046e0:	3740      	adds	r7, #64	; 0x40
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}
 80046e6:	bf00      	nop
 80046e8:	40023800 	.word	0x40023800
 80046ec:	40021000 	.word	0x40021000
 80046f0:	40021800 	.word	0x40021800
 80046f4:	40022000 	.word	0x40022000
 80046f8:	40022400 	.word	0x40022400
 80046fc:	40022800 	.word	0x40022800

08004700 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
 8004708:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800470a:	4b0a      	ldr	r3, [pc, #40]	; (8004734 <BSP_LCD_ClockConfig+0x34>)
 800470c:	2208      	movs	r2, #8
 800470e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004710:	4b08      	ldr	r3, [pc, #32]	; (8004734 <BSP_LCD_ClockConfig+0x34>)
 8004712:	22c0      	movs	r2, #192	; 0xc0
 8004714:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004716:	4b07      	ldr	r3, [pc, #28]	; (8004734 <BSP_LCD_ClockConfig+0x34>)
 8004718:	2205      	movs	r2, #5
 800471a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <BSP_LCD_ClockConfig+0x34>)
 800471e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8004722:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8004724:	4803      	ldr	r0, [pc, #12]	; (8004734 <BSP_LCD_ClockConfig+0x34>)
 8004726:	f004 fd57 	bl	80091d8 <HAL_RCCEx_PeriphCLKConfig>
}
 800472a:	bf00      	nop
 800472c:	3708      	adds	r7, #8
 800472e:	46bd      	mov	sp, r7
 8004730:	bd80      	pop	{r7, pc}
 8004732:	bf00      	nop
 8004734:	200003ec 	.word	0x200003ec

08004738 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b088      	sub	sp, #32
 800473c:	af00      	add	r7, sp, #0
 800473e:	4603      	mov	r3, r0
 8004740:	603a      	str	r2, [r7, #0]
 8004742:	80fb      	strh	r3, [r7, #6]
 8004744:	460b      	mov	r3, r1
 8004746:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8004748:	2300      	movs	r3, #0
 800474a:	61fb      	str	r3, [r7, #28]
 800474c:	2300      	movs	r3, #0
 800474e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8004750:	4b53      	ldr	r3, [pc, #332]	; (80048a0 <DrawChar+0x168>)
 8004752:	681a      	ldr	r2, [r3, #0]
 8004754:	4953      	ldr	r1, [pc, #332]	; (80048a4 <DrawChar+0x16c>)
 8004756:	4613      	mov	r3, r2
 8004758:	005b      	lsls	r3, r3, #1
 800475a:	4413      	add	r3, r2
 800475c:	009b      	lsls	r3, r3, #2
 800475e:	440b      	add	r3, r1
 8004760:	3308      	adds	r3, #8
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	88db      	ldrh	r3, [r3, #6]
 8004766:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8004768:	4b4d      	ldr	r3, [pc, #308]	; (80048a0 <DrawChar+0x168>)
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	494d      	ldr	r1, [pc, #308]	; (80048a4 <DrawChar+0x16c>)
 800476e:	4613      	mov	r3, r2
 8004770:	005b      	lsls	r3, r3, #1
 8004772:	4413      	add	r3, r2
 8004774:	009b      	lsls	r3, r3, #2
 8004776:	440b      	add	r3, r1
 8004778:	3308      	adds	r3, #8
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	889b      	ldrh	r3, [r3, #4]
 800477e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004780:	8a3b      	ldrh	r3, [r7, #16]
 8004782:	3307      	adds	r3, #7
 8004784:	2b00      	cmp	r3, #0
 8004786:	da00      	bge.n	800478a <DrawChar+0x52>
 8004788:	3307      	adds	r3, #7
 800478a:	10db      	asrs	r3, r3, #3
 800478c:	b2db      	uxtb	r3, r3
 800478e:	00db      	lsls	r3, r3, #3
 8004790:	b2da      	uxtb	r2, r3
 8004792:	8a3b      	ldrh	r3, [r7, #16]
 8004794:	b2db      	uxtb	r3, r3
 8004796:	1ad3      	subs	r3, r2, r3
 8004798:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800479a:	2300      	movs	r3, #0
 800479c:	61fb      	str	r3, [r7, #28]
 800479e:	e076      	b.n	800488e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80047a0:	8a3b      	ldrh	r3, [r7, #16]
 80047a2:	3307      	adds	r3, #7
 80047a4:	2b00      	cmp	r3, #0
 80047a6:	da00      	bge.n	80047aa <DrawChar+0x72>
 80047a8:	3307      	adds	r3, #7
 80047aa:	10db      	asrs	r3, r3, #3
 80047ac:	461a      	mov	r2, r3
 80047ae:	69fb      	ldr	r3, [r7, #28]
 80047b0:	fb03 f302 	mul.w	r3, r3, r2
 80047b4:	683a      	ldr	r2, [r7, #0]
 80047b6:	4413      	add	r3, r2
 80047b8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80047ba:	8a3b      	ldrh	r3, [r7, #16]
 80047bc:	3307      	adds	r3, #7
 80047be:	2b00      	cmp	r3, #0
 80047c0:	da00      	bge.n	80047c4 <DrawChar+0x8c>
 80047c2:	3307      	adds	r3, #7
 80047c4:	10db      	asrs	r3, r3, #3
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d002      	beq.n	80047d0 <DrawChar+0x98>
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d004      	beq.n	80047d8 <DrawChar+0xa0>
 80047ce:	e00c      	b.n	80047ea <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	617b      	str	r3, [r7, #20]
      break;
 80047d6:	e016      	b.n	8004806 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	021b      	lsls	r3, r3, #8
 80047de:	68ba      	ldr	r2, [r7, #8]
 80047e0:	3201      	adds	r2, #1
 80047e2:	7812      	ldrb	r2, [r2, #0]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	617b      	str	r3, [r7, #20]
      break;
 80047e8:	e00d      	b.n	8004806 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	041a      	lsls	r2, r3, #16
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	3301      	adds	r3, #1
 80047f4:	781b      	ldrb	r3, [r3, #0]
 80047f6:	021b      	lsls	r3, r3, #8
 80047f8:	4313      	orrs	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	3202      	adds	r2, #2
 80047fe:	7812      	ldrb	r2, [r2, #0]
 8004800:	4313      	orrs	r3, r2
 8004802:	617b      	str	r3, [r7, #20]
      break;
 8004804:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004806:	2300      	movs	r3, #0
 8004808:	61bb      	str	r3, [r7, #24]
 800480a:	e036      	b.n	800487a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800480c:	8a3a      	ldrh	r2, [r7, #16]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	1ad2      	subs	r2, r2, r3
 8004812:	7bfb      	ldrb	r3, [r7, #15]
 8004814:	4413      	add	r3, r2
 8004816:	3b01      	subs	r3, #1
 8004818:	2201      	movs	r2, #1
 800481a:	fa02 f303 	lsl.w	r3, r2, r3
 800481e:	461a      	mov	r2, r3
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	4013      	ands	r3, r2
 8004824:	2b00      	cmp	r3, #0
 8004826:	d012      	beq.n	800484e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	b29a      	uxth	r2, r3
 800482c:	88fb      	ldrh	r3, [r7, #6]
 800482e:	4413      	add	r3, r2
 8004830:	b298      	uxth	r0, r3
 8004832:	4b1b      	ldr	r3, [pc, #108]	; (80048a0 <DrawChar+0x168>)
 8004834:	681a      	ldr	r2, [r3, #0]
 8004836:	491b      	ldr	r1, [pc, #108]	; (80048a4 <DrawChar+0x16c>)
 8004838:	4613      	mov	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	4413      	add	r3, r2
 800483e:	009b      	lsls	r3, r3, #2
 8004840:	440b      	add	r3, r1
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	88bb      	ldrh	r3, [r7, #4]
 8004846:	4619      	mov	r1, r3
 8004848:	f7ff fc1c 	bl	8004084 <BSP_LCD_DrawPixel>
 800484c:	e012      	b.n	8004874 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800484e:	69bb      	ldr	r3, [r7, #24]
 8004850:	b29a      	uxth	r2, r3
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	4413      	add	r3, r2
 8004856:	b298      	uxth	r0, r3
 8004858:	4b11      	ldr	r3, [pc, #68]	; (80048a0 <DrawChar+0x168>)
 800485a:	681a      	ldr	r2, [r3, #0]
 800485c:	4911      	ldr	r1, [pc, #68]	; (80048a4 <DrawChar+0x16c>)
 800485e:	4613      	mov	r3, r2
 8004860:	005b      	lsls	r3, r3, #1
 8004862:	4413      	add	r3, r2
 8004864:	009b      	lsls	r3, r3, #2
 8004866:	440b      	add	r3, r1
 8004868:	3304      	adds	r3, #4
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	88bb      	ldrh	r3, [r7, #4]
 800486e:	4619      	mov	r1, r3
 8004870:	f7ff fc08 	bl	8004084 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	3301      	adds	r3, #1
 8004878:	61bb      	str	r3, [r7, #24]
 800487a:	8a3b      	ldrh	r3, [r7, #16]
 800487c:	69ba      	ldr	r2, [r7, #24]
 800487e:	429a      	cmp	r2, r3
 8004880:	d3c4      	bcc.n	800480c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004882:	88bb      	ldrh	r3, [r7, #4]
 8004884:	3301      	adds	r3, #1
 8004886:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004888:	69fb      	ldr	r3, [r7, #28]
 800488a:	3301      	adds	r3, #1
 800488c:	61fb      	str	r3, [r7, #28]
 800488e:	8a7b      	ldrh	r3, [r7, #18]
 8004890:	69fa      	ldr	r2, [r7, #28]
 8004892:	429a      	cmp	r2, r3
 8004894:	d384      	bcc.n	80047a0 <DrawChar+0x68>
  }
}
 8004896:	bf00      	nop
 8004898:	bf00      	nop
 800489a:	3720      	adds	r7, #32
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	200003d0 	.word	0x200003d0
 80048a4:	200003d4 	.word	0x200003d4

080048a8 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80048a8:	b590      	push	{r4, r7, lr}
 80048aa:	b08b      	sub	sp, #44	; 0x2c
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	4604      	mov	r4, r0
 80048b0:	4608      	mov	r0, r1
 80048b2:	4611      	mov	r1, r2
 80048b4:	461a      	mov	r2, r3
 80048b6:	4623      	mov	r3, r4
 80048b8:	80fb      	strh	r3, [r7, #6]
 80048ba:	4603      	mov	r3, r0
 80048bc:	80bb      	strh	r3, [r7, #4]
 80048be:	460b      	mov	r3, r1
 80048c0:	807b      	strh	r3, [r7, #2]
 80048c2:	4613      	mov	r3, r2
 80048c4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80048c6:	2300      	movs	r3, #0
 80048c8:	823b      	strh	r3, [r7, #16]
 80048ca:	2300      	movs	r3, #0
 80048cc:	81fb      	strh	r3, [r7, #14]
 80048ce:	2300      	movs	r3, #0
 80048d0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80048d2:	2300      	movs	r3, #0
 80048d4:	84bb      	strh	r3, [r7, #36]	; 0x24
 80048d6:	2300      	movs	r3, #0
 80048d8:	847b      	strh	r3, [r7, #34]	; 0x22
 80048da:	2300      	movs	r3, #0
 80048dc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80048de:	2300      	movs	r3, #0
 80048e0:	83fb      	strh	r3, [r7, #30]
 80048e2:	2300      	movs	r3, #0
 80048e4:	83bb      	strh	r3, [r7, #28]
 80048e6:	2300      	movs	r3, #0
 80048e8:	837b      	strh	r3, [r7, #26]
 80048ea:	2300      	movs	r3, #0
 80048ec:	833b      	strh	r3, [r7, #24]
 80048ee:	2300      	movs	r3, #0
 80048f0:	82fb      	strh	r3, [r7, #22]
 80048f2:	2300      	movs	r3, #0
 80048f4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80048f6:	2300      	movs	r3, #0
 80048f8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80048fa:	88ba      	ldrh	r2, [r7, #4]
 80048fc:	88fb      	ldrh	r3, [r7, #6]
 80048fe:	1ad3      	subs	r3, r2, r3
 8004900:	2b00      	cmp	r3, #0
 8004902:	bfb8      	it	lt
 8004904:	425b      	neglt	r3, r3
 8004906:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8004908:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800490a:	883b      	ldrh	r3, [r7, #0]
 800490c:	1ad3      	subs	r3, r2, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	bfb8      	it	lt
 8004912:	425b      	neglt	r3, r3
 8004914:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8004916:	88fb      	ldrh	r3, [r7, #6]
 8004918:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800491a:	883b      	ldrh	r3, [r7, #0]
 800491c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800491e:	88ba      	ldrh	r2, [r7, #4]
 8004920:	88fb      	ldrh	r3, [r7, #6]
 8004922:	429a      	cmp	r2, r3
 8004924:	d304      	bcc.n	8004930 <FillTriangle+0x88>
  {
    xinc1 = 1;
 8004926:	2301      	movs	r3, #1
 8004928:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800492a:	2301      	movs	r3, #1
 800492c:	843b      	strh	r3, [r7, #32]
 800492e:	e005      	b.n	800493c <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8004930:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004934:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8004936:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800493a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800493c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800493e:	883b      	ldrh	r3, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d304      	bcc.n	800494e <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8004944:	2301      	movs	r3, #1
 8004946:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8004948:	2301      	movs	r3, #1
 800494a:	83bb      	strh	r3, [r7, #28]
 800494c:	e005      	b.n	800495a <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800494e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004952:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8004954:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004958:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800495a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800495e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8004962:	429a      	cmp	r2, r3
 8004964:	db11      	blt.n	800498a <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8004966:	2300      	movs	r3, #0
 8004968:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800496a:	2300      	movs	r3, #0
 800496c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800496e:	8a3b      	ldrh	r3, [r7, #16]
 8004970:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8004972:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	da00      	bge.n	800497c <FillTriangle+0xd4>
 800497a:	3301      	adds	r3, #1
 800497c:	105b      	asrs	r3, r3, #1
 800497e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8004980:	89fb      	ldrh	r3, [r7, #14]
 8004982:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8004984:	8a3b      	ldrh	r3, [r7, #16]
 8004986:	82bb      	strh	r3, [r7, #20]
 8004988:	e010      	b.n	80049ac <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800498a:	2300      	movs	r3, #0
 800498c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800498e:	2300      	movs	r3, #0
 8004990:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004992:	89fb      	ldrh	r3, [r7, #14]
 8004994:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800499a:	2b00      	cmp	r3, #0
 800499c:	da00      	bge.n	80049a0 <FillTriangle+0xf8>
 800499e:	3301      	adds	r3, #1
 80049a0:	105b      	asrs	r3, r3, #1
 80049a2:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80049a4:	8a3b      	ldrh	r3, [r7, #16]
 80049a6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80049a8:	89fb      	ldrh	r3, [r7, #14]
 80049aa:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80049ac:	2300      	movs	r3, #0
 80049ae:	827b      	strh	r3, [r7, #18]
 80049b0:	e02f      	b.n	8004a12 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80049b2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80049b4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80049b6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80049b8:	887a      	ldrh	r2, [r7, #2]
 80049ba:	f7ff f9ad 	bl	8003d18 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80049be:	8b3a      	ldrh	r2, [r7, #24]
 80049c0:	8afb      	ldrh	r3, [r7, #22]
 80049c2:	4413      	add	r3, r2
 80049c4:	b29b      	uxth	r3, r3
 80049c6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80049c8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80049cc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	db0e      	blt.n	80049f2 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80049d4:	8b3a      	ldrh	r2, [r7, #24]
 80049d6:	8b7b      	ldrh	r3, [r7, #26]
 80049d8:	1ad3      	subs	r3, r2, r3
 80049da:	b29b      	uxth	r3, r3
 80049dc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80049de:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049e2:	4413      	add	r3, r2
 80049e4:	b29b      	uxth	r3, r3
 80049e6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80049e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049ea:	8bfb      	ldrh	r3, [r7, #30]
 80049ec:	4413      	add	r3, r2
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80049f2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80049f4:	8c3b      	ldrh	r3, [r7, #32]
 80049f6:	4413      	add	r3, r2
 80049f8:	b29b      	uxth	r3, r3
 80049fa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80049fc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80049fe:	8bbb      	ldrh	r3, [r7, #28]
 8004a00:	4413      	add	r3, r2
 8004a02:	b29b      	uxth	r3, r3
 8004a04:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004a06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8004a0a:	b29b      	uxth	r3, r3
 8004a0c:	3301      	adds	r3, #1
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	827b      	strh	r3, [r7, #18]
 8004a12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004a16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	ddc9      	ble.n	80049b2 <FillTriangle+0x10a>
  } 
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	372c      	adds	r7, #44	; 0x2c
 8004a24:	46bd      	mov	sp, r7
 8004a26:	bd90      	pop	{r4, r7, pc}

08004a28 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b086      	sub	sp, #24
 8004a2c:	af02      	add	r7, sp, #8
 8004a2e:	60f8      	str	r0, [r7, #12]
 8004a30:	60b9      	str	r1, [r7, #8]
 8004a32:	607a      	str	r2, [r7, #4]
 8004a34:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8004a36:	4b1e      	ldr	r3, [pc, #120]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a38:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8004a3c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <LL_FillBuffer+0x8c>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a1d      	ldr	r2, [pc, #116]	; (8004ab8 <LL_FillBuffer+0x90>)
 8004a44:	2134      	movs	r1, #52	; 0x34
 8004a46:	fb01 f303 	mul.w	r3, r1, r3
 8004a4a:	4413      	add	r3, r2
 8004a4c:	3348      	adds	r3, #72	; 0x48
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d103      	bne.n	8004a5c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8004a54:	4b16      	ldr	r3, [pc, #88]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a56:	2202      	movs	r2, #2
 8004a58:	609a      	str	r2, [r3, #8]
 8004a5a:	e002      	b.n	8004a62 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8004a5c:	4b14      	ldr	r3, [pc, #80]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a5e:	2200      	movs	r2, #0
 8004a60:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8004a62:	4a13      	ldr	r2, [pc, #76]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8004a68:	4b11      	ldr	r3, [pc, #68]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a6a:	4a14      	ldr	r2, [pc, #80]	; (8004abc <LL_FillBuffer+0x94>)
 8004a6c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8004a6e:	4810      	ldr	r0, [pc, #64]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a70:	f002 f808 	bl	8006a84 <HAL_DMA2D_Init>
 8004a74:	4603      	mov	r3, r0
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d115      	bne.n	8004aa6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8004a7a:	68f9      	ldr	r1, [r7, #12]
 8004a7c:	480c      	ldr	r0, [pc, #48]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a7e:	f002 f95f 	bl	8006d40 <HAL_DMA2D_ConfigLayer>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d10e      	bne.n	8004aa6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	9300      	str	r3, [sp, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	69f9      	ldr	r1, [r7, #28]
 8004a92:	4807      	ldr	r0, [pc, #28]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004a94:	f002 f840 	bl	8006b18 <HAL_DMA2D_Start>
 8004a98:	4603      	mov	r3, r0
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d103      	bne.n	8004aa6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8004a9e:	210a      	movs	r1, #10
 8004aa0:	4803      	ldr	r0, [pc, #12]	; (8004ab0 <LL_FillBuffer+0x88>)
 8004aa2:	f002 f864 	bl	8006b6e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004aa6:	bf00      	nop
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	20000390 	.word	0x20000390
 8004ab4:	200003d0 	.word	0x200003d0
 8004ab8:	20008d1c 	.word	0x20008d1c
 8004abc:	4002b000 	.word	0x4002b000

08004ac0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004ac4:	4b29      	ldr	r3, [pc, #164]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004ac6:	4a2a      	ldr	r2, [pc, #168]	; (8004b70 <BSP_SDRAM_Init+0xb0>)
 8004ac8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8004aca:	4b2a      	ldr	r3, [pc, #168]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004acc:	2202      	movs	r2, #2
 8004ace:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004ad0:	4b28      	ldr	r3, [pc, #160]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004ad2:	2207      	movs	r2, #7
 8004ad4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004ad6:	4b27      	ldr	r3, [pc, #156]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004ad8:	2204      	movs	r2, #4
 8004ada:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8004adc:	4b25      	ldr	r3, [pc, #148]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004ade:	2207      	movs	r2, #7
 8004ae0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004ae2:	4b24      	ldr	r3, [pc, #144]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004ae4:	2202      	movs	r2, #2
 8004ae6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004ae8:	4b22      	ldr	r3, [pc, #136]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004aea:	2202      	movs	r2, #2
 8004aec:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8004aee:	4b21      	ldr	r3, [pc, #132]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004af0:	2202      	movs	r2, #2
 8004af2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004af4:	4b1d      	ldr	r3, [pc, #116]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004af6:	2200      	movs	r2, #0
 8004af8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004afa:	4b1c      	ldr	r3, [pc, #112]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004afc:	2200      	movs	r2, #0
 8004afe:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004b00:	4b1a      	ldr	r3, [pc, #104]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b02:	2204      	movs	r2, #4
 8004b04:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004b06:	4b19      	ldr	r3, [pc, #100]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b08:	2210      	movs	r2, #16
 8004b0a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8004b0c:	4b17      	ldr	r3, [pc, #92]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b0e:	2240      	movs	r2, #64	; 0x40
 8004b10:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004b12:	4b16      	ldr	r3, [pc, #88]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b14:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b18:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8004b1a:	4b14      	ldr	r3, [pc, #80]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004b20:	4b12      	ldr	r3, [pc, #72]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b22:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004b26:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8004b28:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b2a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8004b30:	4b0e      	ldr	r3, [pc, #56]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8004b36:	2100      	movs	r1, #0
 8004b38:	480c      	ldr	r0, [pc, #48]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b3a:	f000 f87f 	bl	8004c3c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8004b3e:	490d      	ldr	r1, [pc, #52]	; (8004b74 <BSP_SDRAM_Init+0xb4>)
 8004b40:	480a      	ldr	r0, [pc, #40]	; (8004b6c <BSP_SDRAM_Init+0xac>)
 8004b42:	f005 fbc5 	bl	800a2d0 <HAL_SDRAM_Init>
 8004b46:	4603      	mov	r3, r0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d003      	beq.n	8004b54 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8004b4c:	4b0a      	ldr	r3, [pc, #40]	; (8004b78 <BSP_SDRAM_Init+0xb8>)
 8004b4e:	2201      	movs	r2, #1
 8004b50:	701a      	strb	r2, [r3, #0]
 8004b52:	e002      	b.n	8004b5a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8004b54:	4b08      	ldr	r3, [pc, #32]	; (8004b78 <BSP_SDRAM_Init+0xb8>)
 8004b56:	2200      	movs	r2, #0
 8004b58:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8004b5a:	f240 6003 	movw	r0, #1539	; 0x603
 8004b5e:	f000 f80d 	bl	8004b7c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8004b62:	4b05      	ldr	r3, [pc, #20]	; (8004b78 <BSP_SDRAM_Init+0xb8>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	bd80      	pop	{r7, pc}
 8004b6a:	bf00      	nop
 8004b6c:	20008dc4 	.word	0x20008dc4
 8004b70:	a0000140 	.word	0xa0000140
 8004b74:	20000470 	.word	0x20000470
 8004b78:	20000050 	.word	0x20000050

08004b7c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004b84:	2300      	movs	r3, #0
 8004b86:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004b88:	4b2a      	ldr	r3, [pc, #168]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004b8e:	4b29      	ldr	r3, [pc, #164]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b90:	2210      	movs	r2, #16
 8004b92:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004b94:	4b27      	ldr	r3, [pc, #156]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b96:	2201      	movs	r2, #1
 8004b98:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004b9a:	4b26      	ldr	r3, [pc, #152]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004ba0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ba4:	4923      	ldr	r1, [pc, #140]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004ba6:	4824      	ldr	r0, [pc, #144]	; (8004c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004ba8:	f005 fbc6 	bl	800a338 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004bac:	2001      	movs	r0, #1
 8004bae:	f000 ffdb 	bl	8005b68 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004bb2:	4b20      	ldr	r3, [pc, #128]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bb4:	2202      	movs	r2, #2
 8004bb6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bb8:	4b1e      	ldr	r3, [pc, #120]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bba:	2210      	movs	r2, #16
 8004bbc:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004bbe:	4b1d      	ldr	r3, [pc, #116]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004bc4:	4b1b      	ldr	r3, [pc, #108]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004bca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bce:	4919      	ldr	r1, [pc, #100]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd0:	4819      	ldr	r0, [pc, #100]	; (8004c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bd2:	f005 fbb1 	bl	800a338 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004bd6:	4b17      	ldr	r3, [pc, #92]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bd8:	2203      	movs	r2, #3
 8004bda:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004bdc:	4b15      	ldr	r3, [pc, #84]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bde:	2210      	movs	r2, #16
 8004be0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004be2:	4b14      	ldr	r3, [pc, #80]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004be4:	2208      	movs	r2, #8
 8004be6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004be8:	4b12      	ldr	r3, [pc, #72]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bea:	2200      	movs	r2, #0
 8004bec:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004bee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004bf2:	4910      	ldr	r1, [pc, #64]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004bf4:	4810      	ldr	r0, [pc, #64]	; (8004c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004bf6:	f005 fb9f 	bl	800a338 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004bfa:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004bfe:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004c00:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c02:	2204      	movs	r2, #4
 8004c04:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004c06:	4b0b      	ldr	r3, [pc, #44]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c08:	2210      	movs	r2, #16
 8004c0a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004c0c:	4b09      	ldr	r3, [pc, #36]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c0e:	2201      	movs	r2, #1
 8004c10:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	4a07      	ldr	r2, [pc, #28]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c16:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004c18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004c1c:	4905      	ldr	r1, [pc, #20]	; (8004c34 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004c1e:	4806      	ldr	r0, [pc, #24]	; (8004c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c20:	f005 fb8a 	bl	800a338 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004c24:	6879      	ldr	r1, [r7, #4]
 8004c26:	4804      	ldr	r0, [pc, #16]	; (8004c38 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004c28:	f005 fbb1 	bl	800a38e <HAL_SDRAM_ProgramRefreshRate>
}
 8004c2c:	bf00      	nop
 8004c2e:	3710      	adds	r7, #16
 8004c30:	46bd      	mov	sp, r7
 8004c32:	bd80      	pop	{r7, pc}
 8004c34:	2000048c 	.word	0x2000048c
 8004c38:	20008dc4 	.word	0x20008dc4

08004c3c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b090      	sub	sp, #64	; 0x40
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	6078      	str	r0, [r7, #4]
 8004c44:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004c46:	4b70      	ldr	r3, [pc, #448]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4a:	4a6f      	ldr	r2, [pc, #444]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c4c:	f043 0301 	orr.w	r3, r3, #1
 8004c50:	6393      	str	r3, [r2, #56]	; 0x38
 8004c52:	4b6d      	ldr	r3, [pc, #436]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	f003 0301 	and.w	r3, r3, #1
 8004c5a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004c5e:	4b6a      	ldr	r3, [pc, #424]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c62:	4a69      	ldr	r2, [pc, #420]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004c68:	6313      	str	r3, [r2, #48]	; 0x30
 8004c6a:	4b67      	ldr	r3, [pc, #412]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c72:	627b      	str	r3, [r7, #36]	; 0x24
 8004c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004c76:	4b64      	ldr	r3, [pc, #400]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c7a:	4a63      	ldr	r2, [pc, #396]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c7c:	f043 0304 	orr.w	r3, r3, #4
 8004c80:	6313      	str	r3, [r2, #48]	; 0x30
 8004c82:	4b61      	ldr	r3, [pc, #388]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c86:	f003 0304 	and.w	r3, r3, #4
 8004c8a:	623b      	str	r3, [r7, #32]
 8004c8c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004c8e:	4b5e      	ldr	r3, [pc, #376]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c92:	4a5d      	ldr	r2, [pc, #372]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c94:	f043 0308 	orr.w	r3, r3, #8
 8004c98:	6313      	str	r3, [r2, #48]	; 0x30
 8004c9a:	4b5b      	ldr	r3, [pc, #364]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c9e:	f003 0308 	and.w	r3, r3, #8
 8004ca2:	61fb      	str	r3, [r7, #28]
 8004ca4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004ca6:	4b58      	ldr	r3, [pc, #352]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004caa:	4a57      	ldr	r2, [pc, #348]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cac:	f043 0310 	orr.w	r3, r3, #16
 8004cb0:	6313      	str	r3, [r2, #48]	; 0x30
 8004cb2:	4b55      	ldr	r3, [pc, #340]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cb6:	f003 0310 	and.w	r3, r3, #16
 8004cba:	61bb      	str	r3, [r7, #24]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004cbe:	4b52      	ldr	r3, [pc, #328]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc2:	4a51      	ldr	r2, [pc, #324]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cc4:	f043 0320 	orr.w	r3, r3, #32
 8004cc8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cca:	4b4f      	ldr	r3, [pc, #316]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004ccc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cce:	f003 0320 	and.w	r3, r3, #32
 8004cd2:	617b      	str	r3, [r7, #20]
 8004cd4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004cd6:	4b4c      	ldr	r3, [pc, #304]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	4a4b      	ldr	r2, [pc, #300]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8004ce2:	4b49      	ldr	r3, [pc, #292]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ce6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cea:	613b      	str	r3, [r7, #16]
 8004cec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004cee:	4b46      	ldr	r3, [pc, #280]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cf2:	4a45      	ldr	r2, [pc, #276]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cf4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8004cfa:	4b43      	ldr	r3, [pc, #268]	; (8004e08 <BSP_SDRAM_MspInit+0x1cc>)
 8004cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d02:	60fb      	str	r3, [r7, #12]
 8004d04:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004d06:	2302      	movs	r3, #2
 8004d08:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004d0a:	2301      	movs	r3, #1
 8004d0c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004d0e:	2302      	movs	r3, #2
 8004d10:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004d12:	230c      	movs	r3, #12
 8004d14:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004d16:	2308      	movs	r3, #8
 8004d18:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004d1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d1e:	4619      	mov	r1, r3
 8004d20:	483a      	ldr	r0, [pc, #232]	; (8004e0c <BSP_SDRAM_MspInit+0x1d0>)
 8004d22:	f002 f93b 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004d26:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004d2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d30:	4619      	mov	r1, r3
 8004d32:	4837      	ldr	r0, [pc, #220]	; (8004e10 <BSP_SDRAM_MspInit+0x1d4>)
 8004d34:	f002 f932 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004d38:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004d3e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d42:	4619      	mov	r1, r3
 8004d44:	4833      	ldr	r0, [pc, #204]	; (8004e14 <BSP_SDRAM_MspInit+0x1d8>)
 8004d46:	f002 f929 	bl	8006f9c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004d4a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004d4e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004d50:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d54:	4619      	mov	r1, r3
 8004d56:	4830      	ldr	r0, [pc, #192]	; (8004e18 <BSP_SDRAM_MspInit+0x1dc>)
 8004d58:	f002 f920 	bl	8006f9c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004d5c:	f248 1333 	movw	r3, #33075	; 0x8133
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d66:	4619      	mov	r1, r3
 8004d68:	482c      	ldr	r0, [pc, #176]	; (8004e1c <BSP_SDRAM_MspInit+0x1e0>)
 8004d6a:	f002 f917 	bl	8006f9c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004d6e:	2328      	movs	r3, #40	; 0x28
 8004d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004d72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004d76:	4619      	mov	r1, r3
 8004d78:	4829      	ldr	r0, [pc, #164]	; (8004e20 <BSP_SDRAM_MspInit+0x1e4>)
 8004d7a:	f002 f90f 	bl	8006f9c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004d7e:	4b29      	ldr	r3, [pc, #164]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004d80:	2200      	movs	r2, #0
 8004d82:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004d84:	4b27      	ldr	r3, [pc, #156]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004d86:	2280      	movs	r2, #128	; 0x80
 8004d88:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004d8a:	4b26      	ldr	r3, [pc, #152]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004d8c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d90:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004d92:	4b24      	ldr	r3, [pc, #144]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004d94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d98:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004d9a:	4b22      	ldr	r3, [pc, #136]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004d9c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004da0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004da2:	4b20      	ldr	r3, [pc, #128]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004da4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004da8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004daa:	4b1e      	ldr	r3, [pc, #120]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dac:	2200      	movs	r2, #0
 8004dae:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004db0:	4b1c      	ldr	r3, [pc, #112]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004db2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004db6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004db8:	4b1a      	ldr	r3, [pc, #104]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dba:	2200      	movs	r2, #0
 8004dbc:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004dbe:	4b19      	ldr	r3, [pc, #100]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dc0:	2203      	movs	r2, #3
 8004dc2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004dc4:	4b17      	ldr	r3, [pc, #92]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dc6:	2200      	movs	r2, #0
 8004dc8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004dca:	4b16      	ldr	r3, [pc, #88]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dcc:	2200      	movs	r2, #0
 8004dce:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004dd0:	4b14      	ldr	r3, [pc, #80]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dd2:	4a15      	ldr	r2, [pc, #84]	; (8004e28 <BSP_SDRAM_MspInit+0x1ec>)
 8004dd4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a12      	ldr	r2, [pc, #72]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dda:	631a      	str	r2, [r3, #48]	; 0x30
 8004ddc:	4a11      	ldr	r2, [pc, #68]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004de2:	4810      	ldr	r0, [pc, #64]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004de4:	f001 fd1c 	bl	8006820 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004de8:	480e      	ldr	r0, [pc, #56]	; (8004e24 <BSP_SDRAM_MspInit+0x1e8>)
 8004dea:	f001 fc6b 	bl	80066c4 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004dee:	2200      	movs	r2, #0
 8004df0:	210f      	movs	r1, #15
 8004df2:	2038      	movs	r0, #56	; 0x38
 8004df4:	f001 fb6e 	bl	80064d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004df8:	2038      	movs	r0, #56	; 0x38
 8004dfa:	f001 fb87 	bl	800650c <HAL_NVIC_EnableIRQ>
}
 8004dfe:	bf00      	nop
 8004e00:	3740      	adds	r7, #64	; 0x40
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	40023800 	.word	0x40023800
 8004e0c:	40020800 	.word	0x40020800
 8004e10:	40020c00 	.word	0x40020c00
 8004e14:	40021000 	.word	0x40021000
 8004e18:	40021400 	.word	0x40021400
 8004e1c:	40021800 	.word	0x40021800
 8004e20:	40021c00 	.word	0x40021c00
 8004e24:	2000049c 	.word	0x2000049c
 8004e28:	40026410 	.word	0x40026410

08004e2c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004e2c:	b580      	push	{r7, lr}
 8004e2e:	b084      	sub	sp, #16
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	4603      	mov	r3, r0
 8004e34:	460a      	mov	r2, r1
 8004e36:	80fb      	strh	r3, [r7, #6]
 8004e38:	4613      	mov	r3, r2
 8004e3a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004e3c:	2300      	movs	r3, #0
 8004e3e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004e40:	4a14      	ldr	r2, [pc, #80]	; (8004e94 <BSP_TS_Init+0x68>)
 8004e42:	88fb      	ldrh	r3, [r7, #6]
 8004e44:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004e46:	4a14      	ldr	r2, [pc, #80]	; (8004e98 <BSP_TS_Init+0x6c>)
 8004e48:	88bb      	ldrh	r3, [r7, #4]
 8004e4a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004e4c:	4b13      	ldr	r3, [pc, #76]	; (8004e9c <BSP_TS_Init+0x70>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	2070      	movs	r0, #112	; 0x70
 8004e52:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004e54:	4b11      	ldr	r3, [pc, #68]	; (8004e9c <BSP_TS_Init+0x70>)
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2070      	movs	r0, #112	; 0x70
 8004e5a:	4798      	blx	r3
 8004e5c:	4603      	mov	r3, r0
 8004e5e:	2b51      	cmp	r3, #81	; 0x51
 8004e60:	d111      	bne.n	8004e86 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004e62:	4b0f      	ldr	r3, [pc, #60]	; (8004ea0 <BSP_TS_Init+0x74>)
 8004e64:	4a0d      	ldr	r2, [pc, #52]	; (8004e9c <BSP_TS_Init+0x70>)
 8004e66:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004e68:	4b0e      	ldr	r3, [pc, #56]	; (8004ea4 <BSP_TS_Init+0x78>)
 8004e6a:	2270      	movs	r2, #112	; 0x70
 8004e6c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004e6e:	4b0e      	ldr	r3, [pc, #56]	; (8004ea8 <BSP_TS_Init+0x7c>)
 8004e70:	2208      	movs	r2, #8
 8004e72:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004e74:	4b0a      	ldr	r3, [pc, #40]	; (8004ea0 <BSP_TS_Init+0x74>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68db      	ldr	r3, [r3, #12]
 8004e7a:	4a0a      	ldr	r2, [pc, #40]	; (8004ea4 <BSP_TS_Init+0x78>)
 8004e7c:	7812      	ldrb	r2, [r2, #0]
 8004e7e:	b292      	uxth	r2, r2
 8004e80:	4610      	mov	r0, r2
 8004e82:	4798      	blx	r3
 8004e84:	e001      	b.n	8004e8a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004e86:	2303      	movs	r3, #3
 8004e88:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004e8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3710      	adds	r7, #16
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}
 8004e94:	20000500 	.word	0x20000500
 8004e98:	20000502 	.word	0x20000502
 8004e9c:	20000000 	.word	0x20000000
 8004ea0:	200004fc 	.word	0x200004fc
 8004ea4:	20000505 	.word	0x20000505
 8004ea8:	20000504 	.word	0x20000504

08004eac <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004eac:	b580      	push	{r7, lr}
 8004eae:	b082      	sub	sp, #8
 8004eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004eb2:	4b11      	ldr	r3, [pc, #68]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a10      	ldr	r2, [pc, #64]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8004ebe:	4b0e      	ldr	r3, [pc, #56]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	607b      	str	r3, [r7, #4]
 8004ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004eca:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	4a0a      	ldr	r2, [pc, #40]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ed0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ed4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ed6:	4b08      	ldr	r3, [pc, #32]	; (8004ef8 <HAL_MspInit+0x4c>)
 8004ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ede:	603b      	str	r3, [r7, #0]
 8004ee0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	210f      	movs	r1, #15
 8004ee6:	f06f 0001 	mvn.w	r0, #1
 8004eea:	f001 faf3 	bl	80064d4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004eee:	bf00      	nop
 8004ef0:	3708      	adds	r7, #8
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	40023800 	.word	0x40023800

08004efc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b08c      	sub	sp, #48	; 0x30
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f04:	f107 031c 	add.w	r3, r7, #28
 8004f08:	2200      	movs	r2, #0
 8004f0a:	601a      	str	r2, [r3, #0]
 8004f0c:	605a      	str	r2, [r3, #4]
 8004f0e:	609a      	str	r2, [r3, #8]
 8004f10:	60da      	str	r2, [r3, #12]
 8004f12:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	4a2a      	ldr	r2, [pc, #168]	; (8004fc4 <HAL_ADC_MspInit+0xc8>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d124      	bne.n	8004f68 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004f1e:	4b2a      	ldr	r3, [pc, #168]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f22:	4a29      	ldr	r2, [pc, #164]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004f28:	6453      	str	r3, [r2, #68]	; 0x44
 8004f2a:	4b27      	ldr	r3, [pc, #156]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f32:	61bb      	str	r3, [r7, #24]
 8004f34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f36:	4b24      	ldr	r3, [pc, #144]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f3a:	4a23      	ldr	r2, [pc, #140]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f3c:	f043 0301 	orr.w	r3, r3, #1
 8004f40:	6313      	str	r3, [r2, #48]	; 0x30
 8004f42:	4b21      	ldr	r3, [pc, #132]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f46:	f003 0301 	and.w	r3, r3, #1
 8004f4a:	617b      	str	r3, [r7, #20]
 8004f4c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f52:	2303      	movs	r3, #3
 8004f54:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f56:	2300      	movs	r3, #0
 8004f58:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f5a:	f107 031c 	add.w	r3, r7, #28
 8004f5e:	4619      	mov	r1, r3
 8004f60:	481a      	ldr	r0, [pc, #104]	; (8004fcc <HAL_ADC_MspInit+0xd0>)
 8004f62:	f002 f81b 	bl	8006f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004f66:	e029      	b.n	8004fbc <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a18      	ldr	r2, [pc, #96]	; (8004fd0 <HAL_ADC_MspInit+0xd4>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d124      	bne.n	8004fbc <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004f72:	4b15      	ldr	r3, [pc, #84]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f76:	4a14      	ldr	r2, [pc, #80]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f78:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004f7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f7e:	4b12      	ldr	r3, [pc, #72]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f86:	613b      	str	r3, [r7, #16]
 8004f88:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004f8a:	4b0f      	ldr	r3, [pc, #60]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f8e:	4a0e      	ldr	r2, [pc, #56]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f90:	f043 0320 	orr.w	r3, r3, #32
 8004f94:	6313      	str	r3, [r2, #48]	; 0x30
 8004f96:	4b0c      	ldr	r3, [pc, #48]	; (8004fc8 <HAL_ADC_MspInit+0xcc>)
 8004f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f9a:	f003 0320 	and.w	r3, r3, #32
 8004f9e:	60fb      	str	r3, [r7, #12]
 8004fa0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004fa2:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004fa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004fa8:	2303      	movs	r3, #3
 8004faa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fac:	2300      	movs	r3, #0
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004fb0:	f107 031c 	add.w	r3, r7, #28
 8004fb4:	4619      	mov	r1, r3
 8004fb6:	4807      	ldr	r0, [pc, #28]	; (8004fd4 <HAL_ADC_MspInit+0xd8>)
 8004fb8:	f001 fff0 	bl	8006f9c <HAL_GPIO_Init>
}
 8004fbc:	bf00      	nop
 8004fbe:	3730      	adds	r7, #48	; 0x30
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	bd80      	pop	{r7, pc}
 8004fc4:	40012000 	.word	0x40012000
 8004fc8:	40023800 	.word	0x40023800
 8004fcc:	40020000 	.word	0x40020000
 8004fd0:	40012200 	.word	0x40012200
 8004fd4:	40021400 	.word	0x40021400

08004fd8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b08a      	sub	sp, #40	; 0x28
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fe0:	f107 0314 	add.w	r3, r7, #20
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	601a      	str	r2, [r3, #0]
 8004fe8:	605a      	str	r2, [r3, #4]
 8004fea:	609a      	str	r2, [r3, #8]
 8004fec:	60da      	str	r2, [r3, #12]
 8004fee:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	4a19      	ldr	r2, [pc, #100]	; (800505c <HAL_DAC_MspInit+0x84>)
 8004ff6:	4293      	cmp	r3, r2
 8004ff8:	d12b      	bne.n	8005052 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004ffa:	4b19      	ldr	r3, [pc, #100]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8004ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ffe:	4a18      	ldr	r2, [pc, #96]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8005000:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005004:	6413      	str	r3, [r2, #64]	; 0x40
 8005006:	4b16      	ldr	r3, [pc, #88]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8005008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800500e:	613b      	str	r3, [r7, #16]
 8005010:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005012:	4b13      	ldr	r3, [pc, #76]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8005014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005016:	4a12      	ldr	r2, [pc, #72]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8005018:	f043 0301 	orr.w	r3, r3, #1
 800501c:	6313      	str	r3, [r2, #48]	; 0x30
 800501e:	4b10      	ldr	r3, [pc, #64]	; (8005060 <HAL_DAC_MspInit+0x88>)
 8005020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005022:	f003 0301 	and.w	r3, r3, #1
 8005026:	60fb      	str	r3, [r7, #12]
 8005028:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800502a:	2310      	movs	r3, #16
 800502c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800502e:	2303      	movs	r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005032:	2300      	movs	r3, #0
 8005034:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005036:	f107 0314 	add.w	r3, r7, #20
 800503a:	4619      	mov	r1, r3
 800503c:	4809      	ldr	r0, [pc, #36]	; (8005064 <HAL_DAC_MspInit+0x8c>)
 800503e:	f001 ffad 	bl	8006f9c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8005042:	2200      	movs	r2, #0
 8005044:	2100      	movs	r1, #0
 8005046:	2036      	movs	r0, #54	; 0x36
 8005048:	f001 fa44 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800504c:	2036      	movs	r0, #54	; 0x36
 800504e:	f001 fa5d 	bl	800650c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8005052:	bf00      	nop
 8005054:	3728      	adds	r7, #40	; 0x28
 8005056:	46bd      	mov	sp, r7
 8005058:	bd80      	pop	{r7, pc}
 800505a:	bf00      	nop
 800505c:	40007400 	.word	0x40007400
 8005060:	40023800 	.word	0x40023800
 8005064:	40020000 	.word	0x40020000

08005068 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8005068:	b480      	push	{r7}
 800506a:	b085      	sub	sp, #20
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <HAL_DMA2D_MspInit+0x38>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d10b      	bne.n	8005092 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800507a:	4b0a      	ldr	r3, [pc, #40]	; (80050a4 <HAL_DMA2D_MspInit+0x3c>)
 800507c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <HAL_DMA2D_MspInit+0x3c>)
 8005080:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005084:	6313      	str	r3, [r2, #48]	; 0x30
 8005086:	4b07      	ldr	r3, [pc, #28]	; (80050a4 <HAL_DMA2D_MspInit+0x3c>)
 8005088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800508a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800508e:	60fb      	str	r3, [r7, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8005092:	bf00      	nop
 8005094:	3714      	adds	r7, #20
 8005096:	46bd      	mov	sp, r7
 8005098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800509c:	4770      	bx	lr
 800509e:	bf00      	nop
 80050a0:	4002b000 	.word	0x4002b000
 80050a4:	40023800 	.word	0x40023800

080050a8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b08c      	sub	sp, #48	; 0x30
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80050b0:	f107 031c 	add.w	r3, r7, #28
 80050b4:	2200      	movs	r2, #0
 80050b6:	601a      	str	r2, [r3, #0]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	609a      	str	r2, [r3, #8]
 80050bc:	60da      	str	r2, [r3, #12]
 80050be:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	4a2f      	ldr	r2, [pc, #188]	; (8005184 <HAL_I2C_MspInit+0xdc>)
 80050c6:	4293      	cmp	r3, r2
 80050c8:	d129      	bne.n	800511e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80050ca:	4b2f      	ldr	r3, [pc, #188]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 80050cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050ce:	4a2e      	ldr	r2, [pc, #184]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 80050d0:	f043 0302 	orr.w	r3, r3, #2
 80050d4:	6313      	str	r3, [r2, #48]	; 0x30
 80050d6:	4b2c      	ldr	r3, [pc, #176]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f003 0302 	and.w	r3, r3, #2
 80050de:	61bb      	str	r3, [r7, #24]
 80050e0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80050e2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80050e6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80050e8:	2312      	movs	r3, #18
 80050ea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80050ec:	2301      	movs	r3, #1
 80050ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050f0:	2300      	movs	r3, #0
 80050f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80050f4:	2304      	movs	r3, #4
 80050f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80050f8:	f107 031c 	add.w	r3, r7, #28
 80050fc:	4619      	mov	r1, r3
 80050fe:	4823      	ldr	r0, [pc, #140]	; (800518c <HAL_I2C_MspInit+0xe4>)
 8005100:	f001 ff4c 	bl	8006f9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8005104:	4b20      	ldr	r3, [pc, #128]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005108:	4a1f      	ldr	r2, [pc, #124]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 800510a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800510e:	6413      	str	r3, [r2, #64]	; 0x40
 8005110:	4b1d      	ldr	r3, [pc, #116]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005114:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005118:	617b      	str	r3, [r7, #20]
 800511a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800511c:	e02d      	b.n	800517a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_I2C_MspInit+0xe8>)
 8005124:	4293      	cmp	r3, r2
 8005126:	d128      	bne.n	800517a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8005128:	4b17      	ldr	r3, [pc, #92]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 800512a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800512c:	4a16      	ldr	r2, [pc, #88]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 800512e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005132:	6313      	str	r3, [r2, #48]	; 0x30
 8005134:	4b14      	ldr	r3, [pc, #80]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005136:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005138:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800513c:	613b      	str	r3, [r7, #16]
 800513e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8005140:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005146:	2312      	movs	r3, #18
 8005148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800514a:	2301      	movs	r3, #1
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800514e:	2303      	movs	r3, #3
 8005150:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8005152:	2304      	movs	r3, #4
 8005154:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8005156:	f107 031c 	add.w	r3, r7, #28
 800515a:	4619      	mov	r1, r3
 800515c:	480d      	ldr	r0, [pc, #52]	; (8005194 <HAL_I2C_MspInit+0xec>)
 800515e:	f001 ff1d 	bl	8006f9c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8005162:	4b09      	ldr	r3, [pc, #36]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005166:	4a08      	ldr	r2, [pc, #32]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005168:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800516c:	6413      	str	r3, [r2, #64]	; 0x40
 800516e:	4b06      	ldr	r3, [pc, #24]	; (8005188 <HAL_I2C_MspInit+0xe0>)
 8005170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005172:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005176:	60fb      	str	r3, [r7, #12]
 8005178:	68fb      	ldr	r3, [r7, #12]
}
 800517a:	bf00      	nop
 800517c:	3730      	adds	r7, #48	; 0x30
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	40005400 	.word	0x40005400
 8005188:	40023800 	.word	0x40023800
 800518c:	40020400 	.word	0x40020400
 8005190:	40005c00 	.word	0x40005c00
 8005194:	40021c00 	.word	0x40021c00

08005198 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	4a15      	ldr	r2, [pc, #84]	; (80051fc <HAL_I2C_MspDeInit+0x64>)
 80051a6:	4293      	cmp	r3, r2
 80051a8:	d110      	bne.n	80051cc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80051aa:	4b15      	ldr	r3, [pc, #84]	; (8005200 <HAL_I2C_MspDeInit+0x68>)
 80051ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051ae:	4a14      	ldr	r2, [pc, #80]	; (8005200 <HAL_I2C_MspDeInit+0x68>)
 80051b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051b4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80051b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ba:	4812      	ldr	r0, [pc, #72]	; (8005204 <HAL_I2C_MspDeInit+0x6c>)
 80051bc:	f002 f89a 	bl	80072f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80051c0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80051c4:	480f      	ldr	r0, [pc, #60]	; (8005204 <HAL_I2C_MspDeInit+0x6c>)
 80051c6:	f002 f895 	bl	80072f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80051ca:	e013      	b.n	80051f4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	4a0d      	ldr	r2, [pc, #52]	; (8005208 <HAL_I2C_MspDeInit+0x70>)
 80051d2:	4293      	cmp	r3, r2
 80051d4:	d10e      	bne.n	80051f4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80051d6:	4b0a      	ldr	r3, [pc, #40]	; (8005200 <HAL_I2C_MspDeInit+0x68>)
 80051d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051da:	4a09      	ldr	r2, [pc, #36]	; (8005200 <HAL_I2C_MspDeInit+0x68>)
 80051dc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051e0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80051e2:	2180      	movs	r1, #128	; 0x80
 80051e4:	4809      	ldr	r0, [pc, #36]	; (800520c <HAL_I2C_MspDeInit+0x74>)
 80051e6:	f002 f885 	bl	80072f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80051ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80051ee:	4807      	ldr	r0, [pc, #28]	; (800520c <HAL_I2C_MspDeInit+0x74>)
 80051f0:	f002 f880 	bl	80072f4 <HAL_GPIO_DeInit>
}
 80051f4:	bf00      	nop
 80051f6:	3708      	adds	r7, #8
 80051f8:	46bd      	mov	sp, r7
 80051fa:	bd80      	pop	{r7, pc}
 80051fc:	40005400 	.word	0x40005400
 8005200:	40023800 	.word	0x40023800
 8005204:	40020400 	.word	0x40020400
 8005208:	40005c00 	.word	0x40005c00
 800520c:	40021c00 	.word	0x40021c00

08005210 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	b08e      	sub	sp, #56	; 0x38
 8005214:	af00      	add	r7, sp, #0
 8005216:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800521c:	2200      	movs	r2, #0
 800521e:	601a      	str	r2, [r3, #0]
 8005220:	605a      	str	r2, [r3, #4]
 8005222:	609a      	str	r2, [r3, #8]
 8005224:	60da      	str	r2, [r3, #12]
 8005226:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a55      	ldr	r2, [pc, #340]	; (8005384 <HAL_LTDC_MspInit+0x174>)
 800522e:	4293      	cmp	r3, r2
 8005230:	f040 80a3 	bne.w	800537a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8005234:	4b54      	ldr	r3, [pc, #336]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005236:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005238:	4a53      	ldr	r2, [pc, #332]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800523a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800523e:	6453      	str	r3, [r2, #68]	; 0x44
 8005240:	4b51      	ldr	r3, [pc, #324]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005242:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005244:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005248:	623b      	str	r3, [r7, #32]
 800524a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800524c:	4b4e      	ldr	r3, [pc, #312]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800524e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005250:	4a4d      	ldr	r2, [pc, #308]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005252:	f043 0310 	orr.w	r3, r3, #16
 8005256:	6313      	str	r3, [r2, #48]	; 0x30
 8005258:	4b4b      	ldr	r3, [pc, #300]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	f003 0310 	and.w	r3, r3, #16
 8005260:	61fb      	str	r3, [r7, #28]
 8005262:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8005264:	4b48      	ldr	r3, [pc, #288]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005268:	4a47      	ldr	r2, [pc, #284]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800526a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800526e:	6313      	str	r3, [r2, #48]	; 0x30
 8005270:	4b45      	ldr	r3, [pc, #276]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005274:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005278:	61bb      	str	r3, [r7, #24]
 800527a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800527c:	4b42      	ldr	r3, [pc, #264]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800527e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005280:	4a41      	ldr	r2, [pc, #260]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005282:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005286:	6313      	str	r3, [r2, #48]	; 0x30
 8005288:	4b3f      	ldr	r3, [pc, #252]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800528a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800528c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005290:	617b      	str	r3, [r7, #20]
 8005292:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005294:	4b3c      	ldr	r3, [pc, #240]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 8005296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005298:	4a3b      	ldr	r2, [pc, #236]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 800529a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800529e:	6313      	str	r3, [r2, #48]	; 0x30
 80052a0:	4b39      	ldr	r3, [pc, #228]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 80052a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052a8:	613b      	str	r3, [r7, #16]
 80052aa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80052ac:	4b36      	ldr	r3, [pc, #216]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 80052ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b0:	4a35      	ldr	r2, [pc, #212]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 80052b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052b6:	6313      	str	r3, [r2, #48]	; 0x30
 80052b8:	4b33      	ldr	r3, [pc, #204]	; (8005388 <HAL_LTDC_MspInit+0x178>)
 80052ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c0:	60fb      	str	r3, [r7, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80052c4:	2310      	movs	r3, #16
 80052c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c8:	2302      	movs	r3, #2
 80052ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052cc:	2300      	movs	r3, #0
 80052ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052d0:	2300      	movs	r3, #0
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80052d4:	230e      	movs	r3, #14
 80052d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80052d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052dc:	4619      	mov	r1, r3
 80052de:	482b      	ldr	r0, [pc, #172]	; (800538c <HAL_LTDC_MspInit+0x17c>)
 80052e0:	f001 fe5c 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80052e4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052ea:	2302      	movs	r3, #2
 80052ec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052ee:	2300      	movs	r3, #0
 80052f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052f2:	2300      	movs	r3, #0
 80052f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80052f6:	230e      	movs	r3, #14
 80052f8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80052fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80052fe:	4619      	mov	r1, r3
 8005300:	4823      	ldr	r0, [pc, #140]	; (8005390 <HAL_LTDC_MspInit+0x180>)
 8005302:	f001 fe4b 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005306:	23f7      	movs	r3, #247	; 0xf7
 8005308:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800530a:	2302      	movs	r3, #2
 800530c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800530e:	2300      	movs	r3, #0
 8005310:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005312:	2300      	movs	r3, #0
 8005314:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005316:	230e      	movs	r3, #14
 8005318:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800531a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800531e:	4619      	mov	r1, r3
 8005320:	481c      	ldr	r0, [pc, #112]	; (8005394 <HAL_LTDC_MspInit+0x184>)
 8005322:	f001 fe3b 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8005326:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800532a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800532c:	2302      	movs	r3, #2
 800532e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005330:	2300      	movs	r3, #0
 8005332:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005334:	2300      	movs	r3, #0
 8005336:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8005338:	2309      	movs	r3, #9
 800533a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800533c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005340:	4619      	mov	r1, r3
 8005342:	4815      	ldr	r0, [pc, #84]	; (8005398 <HAL_LTDC_MspInit+0x188>)
 8005344:	f001 fe2a 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8005348:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800534c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800534e:	2302      	movs	r3, #2
 8005350:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005352:	2300      	movs	r3, #0
 8005354:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005356:	2300      	movs	r3, #0
 8005358:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800535a:	230e      	movs	r3, #14
 800535c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800535e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005362:	4619      	mov	r1, r3
 8005364:	480d      	ldr	r0, [pc, #52]	; (800539c <HAL_LTDC_MspInit+0x18c>)
 8005366:	f001 fe19 	bl	8006f9c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800536a:	2200      	movs	r2, #0
 800536c:	2105      	movs	r1, #5
 800536e:	2058      	movs	r0, #88	; 0x58
 8005370:	f001 f8b0 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8005374:	2058      	movs	r0, #88	; 0x58
 8005376:	f001 f8c9 	bl	800650c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800537a:	bf00      	nop
 800537c:	3738      	adds	r7, #56	; 0x38
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}
 8005382:	bf00      	nop
 8005384:	40016800 	.word	0x40016800
 8005388:	40023800 	.word	0x40023800
 800538c:	40021000 	.word	0x40021000
 8005390:	40022400 	.word	0x40022400
 8005394:	40022800 	.word	0x40022800
 8005398:	40021800 	.word	0x40021800
 800539c:	40022000 	.word	0x40022000

080053a0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80053a0:	b480      	push	{r7}
 80053a2:	b083      	sub	sp, #12
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a07      	ldr	r2, [pc, #28]	; (80053cc <HAL_RTC_MspInit+0x2c>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d105      	bne.n	80053be <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80053b2:	4b07      	ldr	r3, [pc, #28]	; (80053d0 <HAL_RTC_MspInit+0x30>)
 80053b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b6:	4a06      	ldr	r2, [pc, #24]	; (80053d0 <HAL_RTC_MspInit+0x30>)
 80053b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80053bc:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80053be:	bf00      	nop
 80053c0:	370c      	adds	r7, #12
 80053c2:	46bd      	mov	sp, r7
 80053c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c8:	4770      	bx	lr
 80053ca:	bf00      	nop
 80053cc:	40002800 	.word	0x40002800
 80053d0:	40023800 	.word	0x40023800

080053d4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08a      	sub	sp, #40	; 0x28
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053dc:	f107 0314 	add.w	r3, r7, #20
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
 80053e4:	605a      	str	r2, [r3, #4]
 80053e6:	609a      	str	r2, [r3, #8]
 80053e8:	60da      	str	r2, [r3, #12]
 80053ea:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a2d      	ldr	r2, [pc, #180]	; (80054a8 <HAL_SPI_MspInit+0xd4>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d154      	bne.n	80054a0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80053f6:	4b2d      	ldr	r3, [pc, #180]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 80053f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053fa:	4a2c      	ldr	r2, [pc, #176]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 80053fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005400:	6413      	str	r3, [r2, #64]	; 0x40
 8005402:	4b2a      	ldr	r3, [pc, #168]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 8005404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800540a:	613b      	str	r3, [r7, #16]
 800540c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800540e:	4b27      	ldr	r3, [pc, #156]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 8005410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005412:	4a26      	ldr	r2, [pc, #152]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 8005414:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005418:	6313      	str	r3, [r2, #48]	; 0x30
 800541a:	4b24      	ldr	r3, [pc, #144]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 800541c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005426:	4b21      	ldr	r3, [pc, #132]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 8005428:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800542a:	4a20      	ldr	r2, [pc, #128]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 800542c:	f043 0302 	orr.w	r3, r3, #2
 8005430:	6313      	str	r3, [r2, #48]	; 0x30
 8005432:	4b1e      	ldr	r3, [pc, #120]	; (80054ac <HAL_SPI_MspInit+0xd8>)
 8005434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005436:	f003 0302 	and.w	r3, r3, #2
 800543a:	60bb      	str	r3, [r7, #8]
 800543c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800543e:	2302      	movs	r3, #2
 8005440:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005442:	2302      	movs	r3, #2
 8005444:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005446:	2300      	movs	r3, #0
 8005448:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800544a:	2300      	movs	r3, #0
 800544c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800544e:	2305      	movs	r3, #5
 8005450:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8005452:	f107 0314 	add.w	r3, r7, #20
 8005456:	4619      	mov	r1, r3
 8005458:	4815      	ldr	r0, [pc, #84]	; (80054b0 <HAL_SPI_MspInit+0xdc>)
 800545a:	f001 fd9f 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800545e:	2301      	movs	r3, #1
 8005460:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005462:	2302      	movs	r3, #2
 8005464:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005466:	2300      	movs	r3, #0
 8005468:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800546a:	2303      	movs	r3, #3
 800546c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800546e:	2305      	movs	r3, #5
 8005470:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005472:	f107 0314 	add.w	r3, r7, #20
 8005476:	4619      	mov	r1, r3
 8005478:	480d      	ldr	r0, [pc, #52]	; (80054b0 <HAL_SPI_MspInit+0xdc>)
 800547a:	f001 fd8f 	bl	8006f9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800547e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005482:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005484:	2302      	movs	r3, #2
 8005486:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005488:	2300      	movs	r3, #0
 800548a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800548c:	2303      	movs	r3, #3
 800548e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005490:	2305      	movs	r3, #5
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005494:	f107 0314 	add.w	r3, r7, #20
 8005498:	4619      	mov	r1, r3
 800549a:	4806      	ldr	r0, [pc, #24]	; (80054b4 <HAL_SPI_MspInit+0xe0>)
 800549c:	f001 fd7e 	bl	8006f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80054a0:	bf00      	nop
 80054a2:	3728      	adds	r7, #40	; 0x28
 80054a4:	46bd      	mov	sp, r7
 80054a6:	bd80      	pop	{r7, pc}
 80054a8:	40003800 	.word	0x40003800
 80054ac:	40023800 	.word	0x40023800
 80054b0:	40022000 	.word	0x40022000
 80054b4:	40020400 	.word	0x40020400

080054b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b089      	sub	sp, #36	; 0x24
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	4a2e      	ldr	r2, [pc, #184]	; (8005580 <HAL_TIM_Base_MspInit+0xc8>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d10c      	bne.n	80054e4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80054ca:	4b2e      	ldr	r3, [pc, #184]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054ce:	4a2d      	ldr	r2, [pc, #180]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054d0:	f043 0301 	orr.w	r3, r3, #1
 80054d4:	6453      	str	r3, [r2, #68]	; 0x44
 80054d6:	4b2b      	ldr	r3, [pc, #172]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054da:	f003 0301 	and.w	r3, r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
 80054e0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80054e2:	e046      	b.n	8005572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054ec:	d10c      	bne.n	8005508 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80054ee:	4b25      	ldr	r3, [pc, #148]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	4a24      	ldr	r2, [pc, #144]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054f4:	f043 0301 	orr.w	r3, r3, #1
 80054f8:	6413      	str	r3, [r2, #64]	; 0x40
 80054fa:	4b22      	ldr	r3, [pc, #136]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 80054fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054fe:	f003 0301 	and.w	r3, r3, #1
 8005502:	61bb      	str	r3, [r7, #24]
 8005504:	69bb      	ldr	r3, [r7, #24]
}
 8005506:	e034      	b.n	8005572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <HAL_TIM_Base_MspInit+0xd0>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d10c      	bne.n	800552c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005512:	4b1c      	ldr	r3, [pc, #112]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	4a1b      	ldr	r2, [pc, #108]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005518:	f043 0302 	orr.w	r3, r3, #2
 800551c:	6413      	str	r3, [r2, #64]	; 0x40
 800551e:	4b19      	ldr	r3, [pc, #100]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005522:	f003 0302 	and.w	r3, r3, #2
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	697b      	ldr	r3, [r7, #20]
}
 800552a:	e022      	b.n	8005572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a16      	ldr	r2, [pc, #88]	; (800558c <HAL_TIM_Base_MspInit+0xd4>)
 8005532:	4293      	cmp	r3, r2
 8005534:	d10c      	bne.n	8005550 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8005536:	4b13      	ldr	r3, [pc, #76]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800553a:	4a12      	ldr	r2, [pc, #72]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 800553c:	f043 0308 	orr.w	r3, r3, #8
 8005540:	6413      	str	r3, [r2, #64]	; 0x40
 8005542:	4b10      	ldr	r3, [pc, #64]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005546:	f003 0308 	and.w	r3, r3, #8
 800554a:	613b      	str	r3, [r7, #16]
 800554c:	693b      	ldr	r3, [r7, #16]
}
 800554e:	e010      	b.n	8005572 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	4a0e      	ldr	r2, [pc, #56]	; (8005590 <HAL_TIM_Base_MspInit+0xd8>)
 8005556:	4293      	cmp	r3, r2
 8005558:	d10b      	bne.n	8005572 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800555a:	4b0a      	ldr	r3, [pc, #40]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 800555c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800555e:	4a09      	ldr	r2, [pc, #36]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005560:	f043 0302 	orr.w	r3, r3, #2
 8005564:	6453      	str	r3, [r2, #68]	; 0x44
 8005566:	4b07      	ldr	r3, [pc, #28]	; (8005584 <HAL_TIM_Base_MspInit+0xcc>)
 8005568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800556a:	f003 0302 	and.w	r3, r3, #2
 800556e:	60fb      	str	r3, [r7, #12]
 8005570:	68fb      	ldr	r3, [r7, #12]
}
 8005572:	bf00      	nop
 8005574:	3724      	adds	r7, #36	; 0x24
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40023800 	.word	0x40023800
 8005588:	40000400 	.word	0x40000400
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400

08005594 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005594:	b580      	push	{r7, lr}
 8005596:	b088      	sub	sp, #32
 8005598:	af00      	add	r7, sp, #0
 800559a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	2200      	movs	r2, #0
 80055a2:	601a      	str	r2, [r3, #0]
 80055a4:	605a      	str	r2, [r3, #4]
 80055a6:	609a      	str	r2, [r3, #8]
 80055a8:	60da      	str	r2, [r3, #12]
 80055aa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a11      	ldr	r2, [pc, #68]	; (80055f8 <HAL_TIM_MspPostInit+0x64>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d11b      	bne.n	80055ee <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80055b6:	4b11      	ldr	r3, [pc, #68]	; (80055fc <HAL_TIM_MspPostInit+0x68>)
 80055b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055ba:	4a10      	ldr	r2, [pc, #64]	; (80055fc <HAL_TIM_MspPostInit+0x68>)
 80055bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80055c0:	6313      	str	r3, [r2, #48]	; 0x30
 80055c2:	4b0e      	ldr	r3, [pc, #56]	; (80055fc <HAL_TIM_MspPostInit+0x68>)
 80055c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055ca:	60bb      	str	r3, [r7, #8]
 80055cc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80055ce:	2304      	movs	r3, #4
 80055d0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055d2:	2302      	movs	r3, #2
 80055d4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055d6:	2300      	movs	r3, #0
 80055d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80055da:	2300      	movs	r3, #0
 80055dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80055de:	2303      	movs	r3, #3
 80055e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	4619      	mov	r1, r3
 80055e8:	4805      	ldr	r0, [pc, #20]	; (8005600 <HAL_TIM_MspPostInit+0x6c>)
 80055ea:	f001 fcd7 	bl	8006f9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80055ee:	bf00      	nop
 80055f0:	3720      	adds	r7, #32
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	40010400 	.word	0x40010400
 80055fc:	40023800 	.word	0x40023800
 8005600:	40022000 	.word	0x40022000

08005604 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	b08e      	sub	sp, #56	; 0x38
 8005608:	af00      	add	r7, sp, #0
 800560a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800560c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005610:	2200      	movs	r2, #0
 8005612:	601a      	str	r2, [r3, #0]
 8005614:	605a      	str	r2, [r3, #4]
 8005616:	609a      	str	r2, [r3, #8]
 8005618:	60da      	str	r2, [r3, #12]
 800561a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	4a5b      	ldr	r2, [pc, #364]	; (8005790 <HAL_UART_MspInit+0x18c>)
 8005622:	4293      	cmp	r3, r2
 8005624:	d130      	bne.n	8005688 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8005626:	4b5b      	ldr	r3, [pc, #364]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	4a5a      	ldr	r2, [pc, #360]	; (8005794 <HAL_UART_MspInit+0x190>)
 800562c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005630:	6413      	str	r3, [r2, #64]	; 0x40
 8005632:	4b58      	ldr	r3, [pc, #352]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005636:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800563a:	623b      	str	r3, [r7, #32]
 800563c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800563e:	4b55      	ldr	r3, [pc, #340]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005642:	4a54      	ldr	r2, [pc, #336]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005644:	f043 0320 	orr.w	r3, r3, #32
 8005648:	6313      	str	r3, [r2, #48]	; 0x30
 800564a:	4b52      	ldr	r3, [pc, #328]	; (8005794 <HAL_UART_MspInit+0x190>)
 800564c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800564e:	f003 0320 	and.w	r3, r3, #32
 8005652:	61fb      	str	r3, [r7, #28]
 8005654:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005656:	23c0      	movs	r3, #192	; 0xc0
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800565a:	2302      	movs	r3, #2
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800565e:	2300      	movs	r3, #0
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005662:	2303      	movs	r3, #3
 8005664:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8005666:	2308      	movs	r3, #8
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800566a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800566e:	4619      	mov	r1, r3
 8005670:	4849      	ldr	r0, [pc, #292]	; (8005798 <HAL_UART_MspInit+0x194>)
 8005672:	f001 fc93 	bl	8006f9c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8005676:	2200      	movs	r2, #0
 8005678:	2105      	movs	r1, #5
 800567a:	2052      	movs	r0, #82	; 0x52
 800567c:	f000 ff2a 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005680:	2052      	movs	r0, #82	; 0x52
 8005682:	f000 ff43 	bl	800650c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005686:	e07f      	b.n	8005788 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	4a43      	ldr	r2, [pc, #268]	; (800579c <HAL_UART_MspInit+0x198>)
 800568e:	4293      	cmp	r3, r2
 8005690:	d14d      	bne.n	800572e <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005692:	4b40      	ldr	r3, [pc, #256]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005696:	4a3f      	ldr	r2, [pc, #252]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005698:	f043 0310 	orr.w	r3, r3, #16
 800569c:	6453      	str	r3, [r2, #68]	; 0x44
 800569e:	4b3d      	ldr	r3, [pc, #244]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056a2:	f003 0310 	and.w	r3, r3, #16
 80056a6:	61bb      	str	r3, [r7, #24]
 80056a8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80056aa:	4b3a      	ldr	r3, [pc, #232]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ae:	4a39      	ldr	r2, [pc, #228]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056b0:	f043 0302 	orr.w	r3, r3, #2
 80056b4:	6313      	str	r3, [r2, #48]	; 0x30
 80056b6:	4b37      	ldr	r3, [pc, #220]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056ba:	f003 0302 	and.w	r3, r3, #2
 80056be:	617b      	str	r3, [r7, #20]
 80056c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80056c2:	4b34      	ldr	r3, [pc, #208]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c6:	4a33      	ldr	r2, [pc, #204]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	6313      	str	r3, [r2, #48]	; 0x30
 80056ce:	4b31      	ldr	r3, [pc, #196]	; (8005794 <HAL_UART_MspInit+0x190>)
 80056d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	613b      	str	r3, [r7, #16]
 80056d8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80056da:	2380      	movs	r3, #128	; 0x80
 80056dc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056de:	2302      	movs	r3, #2
 80056e0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056e2:	2300      	movs	r3, #0
 80056e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80056e6:	2300      	movs	r3, #0
 80056e8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80056ea:	2307      	movs	r3, #7
 80056ec:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80056ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056f2:	4619      	mov	r1, r3
 80056f4:	482a      	ldr	r0, [pc, #168]	; (80057a0 <HAL_UART_MspInit+0x19c>)
 80056f6:	f001 fc51 	bl	8006f9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80056fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80056fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005700:	2302      	movs	r3, #2
 8005702:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005704:	2300      	movs	r3, #0
 8005706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005708:	2300      	movs	r3, #0
 800570a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800570c:	2307      	movs	r3, #7
 800570e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005710:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005714:	4619      	mov	r1, r3
 8005716:	4823      	ldr	r0, [pc, #140]	; (80057a4 <HAL_UART_MspInit+0x1a0>)
 8005718:	f001 fc40 	bl	8006f9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800571c:	2200      	movs	r2, #0
 800571e:	2107      	movs	r1, #7
 8005720:	2025      	movs	r0, #37	; 0x25
 8005722:	f000 fed7 	bl	80064d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005726:	2025      	movs	r0, #37	; 0x25
 8005728:	f000 fef0 	bl	800650c <HAL_NVIC_EnableIRQ>
}
 800572c:	e02c      	b.n	8005788 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	4a1d      	ldr	r2, [pc, #116]	; (80057a8 <HAL_UART_MspInit+0x1a4>)
 8005734:	4293      	cmp	r3, r2
 8005736:	d127      	bne.n	8005788 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005738:	4b16      	ldr	r3, [pc, #88]	; (8005794 <HAL_UART_MspInit+0x190>)
 800573a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800573c:	4a15      	ldr	r2, [pc, #84]	; (8005794 <HAL_UART_MspInit+0x190>)
 800573e:	f043 0320 	orr.w	r3, r3, #32
 8005742:	6453      	str	r3, [r2, #68]	; 0x44
 8005744:	4b13      	ldr	r3, [pc, #76]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005748:	f003 0320 	and.w	r3, r3, #32
 800574c:	60fb      	str	r3, [r7, #12]
 800574e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005750:	4b10      	ldr	r3, [pc, #64]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005754:	4a0f      	ldr	r2, [pc, #60]	; (8005794 <HAL_UART_MspInit+0x190>)
 8005756:	f043 0304 	orr.w	r3, r3, #4
 800575a:	6313      	str	r3, [r2, #48]	; 0x30
 800575c:	4b0d      	ldr	r3, [pc, #52]	; (8005794 <HAL_UART_MspInit+0x190>)
 800575e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005760:	f003 0304 	and.w	r3, r3, #4
 8005764:	60bb      	str	r3, [r7, #8]
 8005766:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8005768:	23c0      	movs	r3, #192	; 0xc0
 800576a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800576c:	2302      	movs	r3, #2
 800576e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005770:	2300      	movs	r3, #0
 8005772:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005774:	2303      	movs	r3, #3
 8005776:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005778:	2308      	movs	r3, #8
 800577a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800577c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005780:	4619      	mov	r1, r3
 8005782:	480a      	ldr	r0, [pc, #40]	; (80057ac <HAL_UART_MspInit+0x1a8>)
 8005784:	f001 fc0a 	bl	8006f9c <HAL_GPIO_Init>
}
 8005788:	bf00      	nop
 800578a:	3738      	adds	r7, #56	; 0x38
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}
 8005790:	40007800 	.word	0x40007800
 8005794:	40023800 	.word	0x40023800
 8005798:	40021400 	.word	0x40021400
 800579c:	40011000 	.word	0x40011000
 80057a0:	40020400 	.word	0x40020400
 80057a4:	40020000 	.word	0x40020000
 80057a8:	40011400 	.word	0x40011400
 80057ac:	40020800 	.word	0x40020800

080057b0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80057b0:	b580      	push	{r7, lr}
 80057b2:	b086      	sub	sp, #24
 80057b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80057b6:	1d3b      	adds	r3, r7, #4
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]
 80057bc:	605a      	str	r2, [r3, #4]
 80057be:	609a      	str	r2, [r3, #8]
 80057c0:	60da      	str	r2, [r3, #12]
 80057c2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80057c4:	4b3a      	ldr	r3, [pc, #232]	; (80058b0 <HAL_FMC_MspInit+0x100>)
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d16d      	bne.n	80058a8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80057cc:	4b38      	ldr	r3, [pc, #224]	; (80058b0 <HAL_FMC_MspInit+0x100>)
 80057ce:	2201      	movs	r2, #1
 80057d0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80057d2:	4b38      	ldr	r3, [pc, #224]	; (80058b4 <HAL_FMC_MspInit+0x104>)
 80057d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d6:	4a37      	ldr	r2, [pc, #220]	; (80058b4 <HAL_FMC_MspInit+0x104>)
 80057d8:	f043 0301 	orr.w	r3, r3, #1
 80057dc:	6393      	str	r3, [r2, #56]	; 0x38
 80057de:	4b35      	ldr	r3, [pc, #212]	; (80058b4 <HAL_FMC_MspInit+0x104>)
 80057e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057e2:	f003 0301 	and.w	r3, r3, #1
 80057e6:	603b      	str	r3, [r7, #0]
 80057e8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80057ea:	f64f 7383 	movw	r3, #65411	; 0xff83
 80057ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f0:	2302      	movs	r3, #2
 80057f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f8:	2303      	movs	r3, #3
 80057fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80057fc:	230c      	movs	r3, #12
 80057fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005800:	1d3b      	adds	r3, r7, #4
 8005802:	4619      	mov	r1, r3
 8005804:	482c      	ldr	r0, [pc, #176]	; (80058b8 <HAL_FMC_MspInit+0x108>)
 8005806:	f001 fbc9 	bl	8006f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800580a:	f248 1333 	movw	r3, #33075	; 0x8133
 800580e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005810:	2302      	movs	r3, #2
 8005812:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005814:	2300      	movs	r3, #0
 8005816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005818:	2303      	movs	r3, #3
 800581a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800581c:	230c      	movs	r3, #12
 800581e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005820:	1d3b      	adds	r3, r7, #4
 8005822:	4619      	mov	r1, r3
 8005824:	4825      	ldr	r0, [pc, #148]	; (80058bc <HAL_FMC_MspInit+0x10c>)
 8005826:	f001 fbb9 	bl	8006f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800582a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800582e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005830:	2302      	movs	r3, #2
 8005832:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005834:	2300      	movs	r3, #0
 8005836:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005838:	2303      	movs	r3, #3
 800583a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800583c:	230c      	movs	r3, #12
 800583e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005840:	1d3b      	adds	r3, r7, #4
 8005842:	4619      	mov	r1, r3
 8005844:	481e      	ldr	r0, [pc, #120]	; (80058c0 <HAL_FMC_MspInit+0x110>)
 8005846:	f001 fba9 	bl	8006f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800584a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800584e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005850:	2302      	movs	r3, #2
 8005852:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005854:	2300      	movs	r3, #0
 8005856:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005858:	2303      	movs	r3, #3
 800585a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800585c:	230c      	movs	r3, #12
 800585e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8005860:	1d3b      	adds	r3, r7, #4
 8005862:	4619      	mov	r1, r3
 8005864:	4817      	ldr	r0, [pc, #92]	; (80058c4 <HAL_FMC_MspInit+0x114>)
 8005866:	f001 fb99 	bl	8006f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800586a:	2328      	movs	r3, #40	; 0x28
 800586c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800586e:	2302      	movs	r3, #2
 8005870:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005872:	2300      	movs	r3, #0
 8005874:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005876:	2303      	movs	r3, #3
 8005878:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800587a:	230c      	movs	r3, #12
 800587c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800587e:	1d3b      	adds	r3, r7, #4
 8005880:	4619      	mov	r1, r3
 8005882:	4811      	ldr	r0, [pc, #68]	; (80058c8 <HAL_FMC_MspInit+0x118>)
 8005884:	f001 fb8a 	bl	8006f9c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005888:	2308      	movs	r3, #8
 800588a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800588c:	2302      	movs	r3, #2
 800588e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005890:	2300      	movs	r3, #0
 8005892:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005894:	2303      	movs	r3, #3
 8005896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005898:	230c      	movs	r3, #12
 800589a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800589c:	1d3b      	adds	r3, r7, #4
 800589e:	4619      	mov	r1, r3
 80058a0:	480a      	ldr	r0, [pc, #40]	; (80058cc <HAL_FMC_MspInit+0x11c>)
 80058a2:	f001 fb7b 	bl	8006f9c <HAL_GPIO_Init>
 80058a6:	e000      	b.n	80058aa <HAL_FMC_MspInit+0xfa>
    return;
 80058a8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80058aa:	3718      	adds	r7, #24
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000508 	.word	0x20000508
 80058b4:	40023800 	.word	0x40023800
 80058b8:	40021000 	.word	0x40021000
 80058bc:	40021800 	.word	0x40021800
 80058c0:	40020c00 	.word	0x40020c00
 80058c4:	40021400 	.word	0x40021400
 80058c8:	40021c00 	.word	0x40021c00
 80058cc:	40020800 	.word	0x40020800

080058d0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b082      	sub	sp, #8
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80058d8:	f7ff ff6a 	bl	80057b0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	; 0x30
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80058ec:	2300      	movs	r3, #0
 80058ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80058f0:	2300      	movs	r3, #0
 80058f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80058f4:	2200      	movs	r2, #0
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	2036      	movs	r0, #54	; 0x36
 80058fa:	f000 fdeb 	bl	80064d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80058fe:	2036      	movs	r0, #54	; 0x36
 8005900:	f000 fe04 	bl	800650c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005904:	4b1f      	ldr	r3, [pc, #124]	; (8005984 <HAL_InitTick+0xa0>)
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <HAL_InitTick+0xa0>)
 800590a:	f043 0310 	orr.w	r3, r3, #16
 800590e:	6413      	str	r3, [r2, #64]	; 0x40
 8005910:	4b1c      	ldr	r3, [pc, #112]	; (8005984 <HAL_InitTick+0xa0>)
 8005912:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005914:	f003 0310 	and.w	r3, r3, #16
 8005918:	60fb      	str	r3, [r7, #12]
 800591a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800591c:	f107 0210 	add.w	r2, r7, #16
 8005920:	f107 0314 	add.w	r3, r7, #20
 8005924:	4611      	mov	r1, r2
 8005926:	4618      	mov	r0, r3
 8005928:	f003 fc24 	bl	8009174 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800592c:	f003 fbfa 	bl	8009124 <HAL_RCC_GetPCLK1Freq>
 8005930:	4603      	mov	r3, r0
 8005932:	005b      	lsls	r3, r3, #1
 8005934:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005936:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005938:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_InitTick+0xa4>)
 800593a:	fba2 2303 	umull	r2, r3, r2, r3
 800593e:	0c9b      	lsrs	r3, r3, #18
 8005940:	3b01      	subs	r3, #1
 8005942:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8005944:	4b11      	ldr	r3, [pc, #68]	; (800598c <HAL_InitTick+0xa8>)
 8005946:	4a12      	ldr	r2, [pc, #72]	; (8005990 <HAL_InitTick+0xac>)
 8005948:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800594a:	4b10      	ldr	r3, [pc, #64]	; (800598c <HAL_InitTick+0xa8>)
 800594c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005950:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8005952:	4a0e      	ldr	r2, [pc, #56]	; (800598c <HAL_InitTick+0xa8>)
 8005954:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005956:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_InitTick+0xa8>)
 800595a:	2200      	movs	r2, #0
 800595c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800595e:	4b0b      	ldr	r3, [pc, #44]	; (800598c <HAL_InitTick+0xa8>)
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8005964:	4809      	ldr	r0, [pc, #36]	; (800598c <HAL_InitTick+0xa8>)
 8005966:	f004 fdc4 	bl	800a4f2 <HAL_TIM_Base_Init>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8005970:	4806      	ldr	r0, [pc, #24]	; (800598c <HAL_InitTick+0xa8>)
 8005972:	f004 fde9 	bl	800a548 <HAL_TIM_Base_Start_IT>
 8005976:	4603      	mov	r3, r0
 8005978:	e000      	b.n	800597c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
}
 800597c:	4618      	mov	r0, r3
 800597e:	3730      	adds	r7, #48	; 0x30
 8005980:	46bd      	mov	sp, r7
 8005982:	bd80      	pop	{r7, pc}
 8005984:	40023800 	.word	0x40023800
 8005988:	431bde83 	.word	0x431bde83
 800598c:	20008df8 	.word	0x20008df8
 8005990:	40001000 	.word	0x40001000

08005994 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005994:	b480      	push	{r7}
 8005996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005998:	e7fe      	b.n	8005998 <NMI_Handler+0x4>

0800599a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800599a:	b480      	push	{r7}
 800599c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800599e:	e7fe      	b.n	800599e <HardFault_Handler+0x4>

080059a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80059a0:	b480      	push	{r7}
 80059a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80059a4:	e7fe      	b.n	80059a4 <MemManage_Handler+0x4>

080059a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80059a6:	b480      	push	{r7}
 80059a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80059aa:	e7fe      	b.n	80059aa <BusFault_Handler+0x4>

080059ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80059ac:	b480      	push	{r7}
 80059ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80059b0:	e7fe      	b.n	80059b0 <UsageFault_Handler+0x4>

080059b2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80059b2:	b480      	push	{r7}
 80059b4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80059b6:	bf00      	nop
 80059b8:	46bd      	mov	sp, r7
 80059ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059be:	4770      	bx	lr

080059c0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80059c4:	4802      	ldr	r0, [pc, #8]	; (80059d0 <USART1_IRQHandler+0x10>)
 80059c6:	f006 f823 	bl	800ba10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 80059ca:	bf00      	nop
 80059cc:	bd80      	pop	{r7, pc}
 80059ce:	bf00      	nop
 80059d0:	200089ec 	.word	0x200089ec

080059d4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 80059d8:	4b06      	ldr	r3, [pc, #24]	; (80059f4 <TIM6_DAC_IRQHandler+0x20>)
 80059da:	791b      	ldrb	r3, [r3, #4]
 80059dc:	b2db      	uxtb	r3, r3
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d002      	beq.n	80059e8 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 80059e2:	4804      	ldr	r0, [pc, #16]	; (80059f4 <TIM6_DAC_IRQHandler+0x20>)
 80059e4:	f000 fdc2 	bl	800656c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 80059e8:	4803      	ldr	r0, [pc, #12]	; (80059f8 <TIM6_DAC_IRQHandler+0x24>)
 80059ea:	f004 fe0c 	bl	800a606 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80059ee:	bf00      	nop
 80059f0:	bd80      	pop	{r7, pc}
 80059f2:	bf00      	nop
 80059f4:	20008a6c 	.word	0x20008a6c
 80059f8:	20008df8 	.word	0x20008df8

080059fc <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80059fc:	b580      	push	{r7, lr}
 80059fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005a00:	4802      	ldr	r0, [pc, #8]	; (8005a0c <UART7_IRQHandler+0x10>)
 8005a02:	f006 f805 	bl	800ba10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  /* USER CODE END UART7_IRQn 1 */
}
 8005a06:	bf00      	nop
 8005a08:	bd80      	pop	{r7, pc}
 8005a0a:	bf00      	nop
 8005a0c:	2000871c 	.word	0x2000871c

08005a10 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005a14:	4802      	ldr	r0, [pc, #8]	; (8005a20 <LTDC_IRQHandler+0x10>)
 8005a16:	f002 fc2b 	bl	8008270 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8005a1a:	bf00      	nop
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop
 8005a20:	200088a8 	.word	0x200088a8

08005a24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005a24:	b580      	push	{r7, lr}
 8005a26:	b086      	sub	sp, #24
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005a2c:	4a14      	ldr	r2, [pc, #80]	; (8005a80 <_sbrk+0x5c>)
 8005a2e:	4b15      	ldr	r3, [pc, #84]	; (8005a84 <_sbrk+0x60>)
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005a38:	4b13      	ldr	r3, [pc, #76]	; (8005a88 <_sbrk+0x64>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d102      	bne.n	8005a46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005a40:	4b11      	ldr	r3, [pc, #68]	; (8005a88 <_sbrk+0x64>)
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <_sbrk+0x68>)
 8005a44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005a46:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <_sbrk+0x64>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	4413      	add	r3, r2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d207      	bcs.n	8005a64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005a54:	f009 fb2c 	bl	800f0b0 <__errno>
 8005a58:	4603      	mov	r3, r0
 8005a5a:	220c      	movs	r2, #12
 8005a5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005a5e:	f04f 33ff 	mov.w	r3, #4294967295
 8005a62:	e009      	b.n	8005a78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005a64:	4b08      	ldr	r3, [pc, #32]	; (8005a88 <_sbrk+0x64>)
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005a6a:	4b07      	ldr	r3, [pc, #28]	; (8005a88 <_sbrk+0x64>)
 8005a6c:	681a      	ldr	r2, [r3, #0]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	4413      	add	r3, r2
 8005a72:	4a05      	ldr	r2, [pc, #20]	; (8005a88 <_sbrk+0x64>)
 8005a74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3718      	adds	r7, #24
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	20050000 	.word	0x20050000
 8005a84:	00000400 	.word	0x00000400
 8005a88:	2000050c 	.word	0x2000050c
 8005a8c:	20008e50 	.word	0x20008e50

08005a90 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005a90:	b480      	push	{r7}
 8005a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005a94:	4b08      	ldr	r3, [pc, #32]	; (8005ab8 <SystemInit+0x28>)
 8005a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a9a:	4a07      	ldr	r2, [pc, #28]	; (8005ab8 <SystemInit+0x28>)
 8005a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005aa4:	4b04      	ldr	r3, [pc, #16]	; (8005ab8 <SystemInit+0x28>)
 8005aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8005aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8005aac:	bf00      	nop
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab4:	4770      	bx	lr
 8005ab6:	bf00      	nop
 8005ab8:	e000ed00 	.word	0xe000ed00

08005abc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8005abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005af4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005ac0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005ac2:	e003      	b.n	8005acc <LoopCopyDataInit>

08005ac4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005ac4:	4b0c      	ldr	r3, [pc, #48]	; (8005af8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005ac6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005ac8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8005aca:	3104      	adds	r1, #4

08005acc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8005acc:	480b      	ldr	r0, [pc, #44]	; (8005afc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8005ace:	4b0c      	ldr	r3, [pc, #48]	; (8005b00 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005ad0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005ad2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005ad4:	d3f6      	bcc.n	8005ac4 <CopyDataInit>
  ldr  r2, =_sbss
 8005ad6:	4a0b      	ldr	r2, [pc, #44]	; (8005b04 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005ad8:	e002      	b.n	8005ae0 <LoopFillZerobss>

08005ada <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8005ada:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8005adc:	f842 3b04 	str.w	r3, [r2], #4

08005ae0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005ae0:	4b09      	ldr	r3, [pc, #36]	; (8005b08 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005ae2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005ae4:	d3f9      	bcc.n	8005ada <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005ae6:	f7ff ffd3 	bl	8005a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005aea:	f009 fae7 	bl	800f0bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005aee:	f7fb fc39 	bl	8001364 <main>
  bx  lr    
 8005af2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005af4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005af8:	08012e28 	.word	0x08012e28
  ldr  r0, =_sdata
 8005afc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005b00:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8005b04:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8005b08:	20008e4c 	.word	0x20008e4c

08005b0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005b0c:	e7fe      	b.n	8005b0c <ADC_IRQHandler>

08005b0e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005b0e:	b580      	push	{r7, lr}
 8005b10:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005b12:	2003      	movs	r0, #3
 8005b14:	f000 fcd3 	bl	80064be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f7ff fee3 	bl	80058e4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8005b1e:	f7ff f9c5 	bl	8004eac <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_IncTick+0x20>)
 8005b2e:	781b      	ldrb	r3, [r3, #0]
 8005b30:	461a      	mov	r2, r3
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <HAL_IncTick+0x24>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4413      	add	r3, r2
 8005b38:	4a04      	ldr	r2, [pc, #16]	; (8005b4c <HAL_IncTick+0x24>)
 8005b3a:	6013      	str	r3, [r2, #0]
}
 8005b3c:	bf00      	nop
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop
 8005b48:	2000005c 	.word	0x2000005c
 8005b4c:	20008e38 	.word	0x20008e38

08005b50 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005b50:	b480      	push	{r7}
 8005b52:	af00      	add	r7, sp, #0
  return uwTick;
 8005b54:	4b03      	ldr	r3, [pc, #12]	; (8005b64 <HAL_GetTick+0x14>)
 8005b56:	681b      	ldr	r3, [r3, #0]
}
 8005b58:	4618      	mov	r0, r3
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr
 8005b62:	bf00      	nop
 8005b64:	20008e38 	.word	0x20008e38

08005b68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b084      	sub	sp, #16
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005b70:	f7ff ffee 	bl	8005b50 <HAL_GetTick>
 8005b74:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b80:	d005      	beq.n	8005b8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005b82:	4b0a      	ldr	r3, [pc, #40]	; (8005bac <HAL_Delay+0x44>)
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	461a      	mov	r2, r3
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	4413      	add	r3, r2
 8005b8c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005b8e:	bf00      	nop
 8005b90:	f7ff ffde 	bl	8005b50 <HAL_GetTick>
 8005b94:	4602      	mov	r2, r0
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	1ad3      	subs	r3, r2, r3
 8005b9a:	68fa      	ldr	r2, [r7, #12]
 8005b9c:	429a      	cmp	r2, r3
 8005b9e:	d8f7      	bhi.n	8005b90 <HAL_Delay+0x28>
  {
  }
}
 8005ba0:	bf00      	nop
 8005ba2:	bf00      	nop
 8005ba4:	3710      	adds	r7, #16
 8005ba6:	46bd      	mov	sp, r7
 8005ba8:	bd80      	pop	{r7, pc}
 8005baa:	bf00      	nop
 8005bac:	2000005c 	.word	0x2000005c

08005bb0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005bb8:	2300      	movs	r3, #0
 8005bba:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d101      	bne.n	8005bc6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005bc2:	2301      	movs	r3, #1
 8005bc4:	e031      	b.n	8005c2a <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005bce:	6878      	ldr	r0, [r7, #4]
 8005bd0:	f7ff f994 	bl	8004efc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2200      	movs	r2, #0
 8005bde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be6:	f003 0310 	and.w	r3, r3, #16
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d116      	bne.n	8005c1c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bf2:	4b10      	ldr	r3, [pc, #64]	; (8005c34 <HAL_ADC_Init+0x84>)
 8005bf4:	4013      	ands	r3, r2
 8005bf6:	f043 0202 	orr.w	r2, r3, #2
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005bfe:	6878      	ldr	r0, [r7, #4]
 8005c00:	f000 fab6 	bl	8006170 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f023 0303 	bic.w	r3, r3, #3
 8005c12:	f043 0201 	orr.w	r2, r3, #1
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	641a      	str	r2, [r3, #64]	; 0x40
 8005c1a:	e001      	b.n	8005c20 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005c1c:	2301      	movs	r3, #1
 8005c1e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2200      	movs	r2, #0
 8005c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005c28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3710      	adds	r7, #16
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	ffffeefd 	.word	0xffffeefd

08005c38 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005c40:	2300      	movs	r3, #0
 8005c42:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d101      	bne.n	8005c52 <HAL_ADC_Start+0x1a>
 8005c4e:	2302      	movs	r3, #2
 8005c50:	e0a0      	b.n	8005d94 <HAL_ADC_Start+0x15c>
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	2201      	movs	r2, #1
 8005c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	f003 0301 	and.w	r3, r3, #1
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d018      	beq.n	8005c9a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	689a      	ldr	r2, [r3, #8]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005c78:	4b49      	ldr	r3, [pc, #292]	; (8005da0 <HAL_ADC_Start+0x168>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	4a49      	ldr	r2, [pc, #292]	; (8005da4 <HAL_ADC_Start+0x16c>)
 8005c7e:	fba2 2303 	umull	r2, r3, r2, r3
 8005c82:	0c9a      	lsrs	r2, r3, #18
 8005c84:	4613      	mov	r3, r2
 8005c86:	005b      	lsls	r3, r3, #1
 8005c88:	4413      	add	r3, r2
 8005c8a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005c8c:	e002      	b.n	8005c94 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	3b01      	subs	r3, #1
 8005c92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d1f9      	bne.n	8005c8e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	689b      	ldr	r3, [r3, #8]
 8005ca0:	f003 0301 	and.w	r3, r3, #1
 8005ca4:	2b01      	cmp	r3, #1
 8005ca6:	d174      	bne.n	8005d92 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005cac:	4b3e      	ldr	r3, [pc, #248]	; (8005da8 <HAL_ADC_Start+0x170>)
 8005cae:	4013      	ands	r3, r2
 8005cb0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d007      	beq.n	8005cd6 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cca:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005cce:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cda:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ce2:	d106      	bne.n	8005cf2 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ce8:	f023 0206 	bic.w	r2, r3, #6
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	645a      	str	r2, [r3, #68]	; 0x44
 8005cf0:	e002      	b.n	8005cf8 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2200      	movs	r2, #0
 8005cf6:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2200      	movs	r2, #0
 8005cfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005d08:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005d0a:	4b28      	ldr	r3, [pc, #160]	; (8005dac <HAL_ADC_Start+0x174>)
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f003 031f 	and.w	r3, r3, #31
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10f      	bne.n	8005d36 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	689b      	ldr	r3, [r3, #8]
 8005d1c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d136      	bne.n	8005d92 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	689a      	ldr	r2, [r3, #8]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d32:	609a      	str	r2, [r3, #8]
 8005d34:	e02d      	b.n	8005d92 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a1d      	ldr	r2, [pc, #116]	; (8005db0 <HAL_ADC_Start+0x178>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d10e      	bne.n	8005d5e <HAL_ADC_Start+0x126>
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d107      	bne.n	8005d5e <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	689a      	ldr	r2, [r3, #8]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d5c:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005d5e:	4b13      	ldr	r3, [pc, #76]	; (8005dac <HAL_ADC_Start+0x174>)
 8005d60:	685b      	ldr	r3, [r3, #4]
 8005d62:	f003 0310 	and.w	r3, r3, #16
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d113      	bne.n	8005d92 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a11      	ldr	r2, [pc, #68]	; (8005db4 <HAL_ADC_Start+0x17c>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d10e      	bne.n	8005d92 <HAL_ADC_Start+0x15a>
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689b      	ldr	r3, [r3, #8]
 8005d7a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d107      	bne.n	8005d92 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	689a      	ldr	r2, [r3, #8]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005d90:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3714      	adds	r7, #20
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9e:	4770      	bx	lr
 8005da0:	20000054 	.word	0x20000054
 8005da4:	431bde83 	.word	0x431bde83
 8005da8:	fffff8fe 	.word	0xfffff8fe
 8005dac:	40012300 	.word	0x40012300
 8005db0:	40012000 	.word	0x40012000
 8005db4:	40012200 	.word	0x40012200

08005db8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005db8:	b580      	push	{r7, lr}
 8005dba:	b084      	sub	sp, #16
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
 8005dc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005dd0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd4:	d113      	bne.n	8005dfe <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005de0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005de4:	d10b      	bne.n	8005dfe <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dea:	f043 0220 	orr.w	r2, r3, #32
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	2200      	movs	r2, #0
 8005df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005dfa:	2301      	movs	r3, #1
 8005dfc:	e05c      	b.n	8005eb8 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005dfe:	f7ff fea7 	bl	8005b50 <HAL_GetTick>
 8005e02:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e04:	e01a      	b.n	8005e3c <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e0c:	d016      	beq.n	8005e3c <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d007      	beq.n	8005e24 <HAL_ADC_PollForConversion+0x6c>
 8005e14:	f7ff fe9c 	bl	8005b50 <HAL_GetTick>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	1ad3      	subs	r3, r2, r3
 8005e1e:	683a      	ldr	r2, [r7, #0]
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d20b      	bcs.n	8005e3c <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e28:	f043 0204 	orr.w	r2, r3, #4
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2200      	movs	r2, #0
 8005e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005e38:	2303      	movs	r3, #3
 8005e3a:	e03d      	b.n	8005eb8 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	d1dd      	bne.n	8005e06 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f06f 0212 	mvn.w	r2, #18
 8005e52:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	689b      	ldr	r3, [r3, #8]
 8005e66:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d123      	bne.n	8005eb6 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d11f      	bne.n	8005eb6 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e7c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d006      	beq.n	8005e92 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d111      	bne.n	8005eb6 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ea2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d105      	bne.n	8005eb6 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005eae:	f043 0201 	orr.w	r2, r3, #1
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
}
 8005eb8:	4618      	mov	r0, r3
 8005eba:	3710      	adds	r7, #16
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	bd80      	pop	{r7, pc}

08005ec0 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005ec0:	b480      	push	{r7}
 8005ec2:	b083      	sub	sp, #12
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005ece:	4618      	mov	r0, r3
 8005ed0:	370c      	adds	r7, #12
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed8:	4770      	bx	lr
	...

08005edc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005edc:	b480      	push	{r7}
 8005ede:	b085      	sub	sp, #20
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
 8005ee4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ef0:	2b01      	cmp	r3, #1
 8005ef2:	d101      	bne.n	8005ef8 <HAL_ADC_ConfigChannel+0x1c>
 8005ef4:	2302      	movs	r3, #2
 8005ef6:	e12a      	b.n	800614e <HAL_ADC_ConfigChannel+0x272>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2201      	movs	r2, #1
 8005efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	2b09      	cmp	r3, #9
 8005f06:	d93a      	bls.n	8005f7e <HAL_ADC_ConfigChannel+0xa2>
 8005f08:	683b      	ldr	r3, [r7, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f10:	d035      	beq.n	8005f7e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	68d9      	ldr	r1, [r3, #12]
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	b29b      	uxth	r3, r3
 8005f1e:	461a      	mov	r2, r3
 8005f20:	4613      	mov	r3, r2
 8005f22:	005b      	lsls	r3, r3, #1
 8005f24:	4413      	add	r3, r2
 8005f26:	3b1e      	subs	r3, #30
 8005f28:	2207      	movs	r2, #7
 8005f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f2e:	43da      	mvns	r2, r3
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	400a      	ands	r2, r1
 8005f36:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f38:	683b      	ldr	r3, [r7, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	4a87      	ldr	r2, [pc, #540]	; (800615c <HAL_ADC_ConfigChannel+0x280>)
 8005f3e:	4293      	cmp	r3, r2
 8005f40:	d10a      	bne.n	8005f58 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	689b      	ldr	r3, [r3, #8]
 8005f4c:	061a      	lsls	r2, r3, #24
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	430a      	orrs	r2, r1
 8005f54:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f56:	e035      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	68d9      	ldr	r1, [r3, #12]
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	689a      	ldr	r2, [r3, #8]
 8005f62:	683b      	ldr	r3, [r7, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	4603      	mov	r3, r0
 8005f6c:	005b      	lsls	r3, r3, #1
 8005f6e:	4403      	add	r3, r0
 8005f70:	3b1e      	subs	r3, #30
 8005f72:	409a      	lsls	r2, r3
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	430a      	orrs	r2, r1
 8005f7a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f7c:	e022      	b.n	8005fc4 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	6919      	ldr	r1, [r3, #16]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	005b      	lsls	r3, r3, #1
 8005f90:	4413      	add	r3, r2
 8005f92:	2207      	movs	r2, #7
 8005f94:	fa02 f303 	lsl.w	r3, r2, r3
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	400a      	ands	r2, r1
 8005fa0:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	6919      	ldr	r1, [r3, #16]
 8005fa8:	683b      	ldr	r3, [r7, #0]
 8005faa:	689a      	ldr	r2, [r3, #8]
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	005b      	lsls	r3, r3, #1
 8005fb8:	4403      	add	r3, r0
 8005fba:	409a      	lsls	r2, r3
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	430a      	orrs	r2, r1
 8005fc2:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005fc4:	683b      	ldr	r3, [r7, #0]
 8005fc6:	685b      	ldr	r3, [r3, #4]
 8005fc8:	2b06      	cmp	r3, #6
 8005fca:	d824      	bhi.n	8006016 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	685a      	ldr	r2, [r3, #4]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	3b05      	subs	r3, #5
 8005fde:	221f      	movs	r2, #31
 8005fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe4:	43da      	mvns	r2, r3
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	400a      	ands	r2, r1
 8005fec:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	b29b      	uxth	r3, r3
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	685a      	ldr	r2, [r3, #4]
 8006000:	4613      	mov	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	4413      	add	r3, r2
 8006006:	3b05      	subs	r3, #5
 8006008:	fa00 f203 	lsl.w	r2, r0, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	430a      	orrs	r2, r1
 8006012:	635a      	str	r2, [r3, #52]	; 0x34
 8006014:	e04c      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	2b0c      	cmp	r3, #12
 800601c:	d824      	bhi.n	8006068 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	685a      	ldr	r2, [r3, #4]
 8006028:	4613      	mov	r3, r2
 800602a:	009b      	lsls	r3, r3, #2
 800602c:	4413      	add	r3, r2
 800602e:	3b23      	subs	r3, #35	; 0x23
 8006030:	221f      	movs	r2, #31
 8006032:	fa02 f303 	lsl.w	r3, r2, r3
 8006036:	43da      	mvns	r2, r3
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	400a      	ands	r2, r1
 800603e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	b29b      	uxth	r3, r3
 800604c:	4618      	mov	r0, r3
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	685a      	ldr	r2, [r3, #4]
 8006052:	4613      	mov	r3, r2
 8006054:	009b      	lsls	r3, r3, #2
 8006056:	4413      	add	r3, r2
 8006058:	3b23      	subs	r3, #35	; 0x23
 800605a:	fa00 f203 	lsl.w	r2, r0, r3
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	430a      	orrs	r2, r1
 8006064:	631a      	str	r2, [r3, #48]	; 0x30
 8006066:	e023      	b.n	80060b0 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	4613      	mov	r3, r2
 8006074:	009b      	lsls	r3, r3, #2
 8006076:	4413      	add	r3, r2
 8006078:	3b41      	subs	r3, #65	; 0x41
 800607a:	221f      	movs	r2, #31
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	43da      	mvns	r2, r3
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	400a      	ands	r2, r1
 8006088:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006090:	683b      	ldr	r3, [r7, #0]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	b29b      	uxth	r3, r3
 8006096:	4618      	mov	r0, r3
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685a      	ldr	r2, [r3, #4]
 800609c:	4613      	mov	r3, r2
 800609e:	009b      	lsls	r3, r3, #2
 80060a0:	4413      	add	r3, r2
 80060a2:	3b41      	subs	r3, #65	; 0x41
 80060a4:	fa00 f203 	lsl.w	r2, r0, r3
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	430a      	orrs	r2, r1
 80060ae:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a2a      	ldr	r2, [pc, #168]	; (8006160 <HAL_ADC_ConfigChannel+0x284>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d10a      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x1f4>
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060c2:	d105      	bne.n	80060d0 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80060c4:	4b27      	ldr	r3, [pc, #156]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 80060c6:	685b      	ldr	r3, [r3, #4]
 80060c8:	4a26      	ldr	r2, [pc, #152]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 80060ca:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80060ce:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a22      	ldr	r2, [pc, #136]	; (8006160 <HAL_ADC_ConfigChannel+0x284>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d109      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x212>
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b12      	cmp	r3, #18
 80060e0:	d105      	bne.n	80060ee <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80060e2:	4b20      	ldr	r3, [pc, #128]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 80060e4:	685b      	ldr	r3, [r3, #4]
 80060e6:	4a1f      	ldr	r2, [pc, #124]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 80060e8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80060ec:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a1b      	ldr	r2, [pc, #108]	; (8006160 <HAL_ADC_ConfigChannel+0x284>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d125      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x268>
 80060f8:	683b      	ldr	r3, [r7, #0]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a17      	ldr	r2, [pc, #92]	; (800615c <HAL_ADC_ConfigChannel+0x280>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d003      	beq.n	800610a <HAL_ADC_ConfigChannel+0x22e>
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	2b11      	cmp	r3, #17
 8006108:	d11c      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 800610a:	4b16      	ldr	r3, [pc, #88]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 800610c:	685b      	ldr	r3, [r3, #4]
 800610e:	4a15      	ldr	r2, [pc, #84]	; (8006164 <HAL_ADC_ConfigChannel+0x288>)
 8006110:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006114:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	4a10      	ldr	r2, [pc, #64]	; (800615c <HAL_ADC_ConfigChannel+0x280>)
 800611c:	4293      	cmp	r3, r2
 800611e:	d111      	bne.n	8006144 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8006120:	4b11      	ldr	r3, [pc, #68]	; (8006168 <HAL_ADC_ConfigChannel+0x28c>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	4a11      	ldr	r2, [pc, #68]	; (800616c <HAL_ADC_ConfigChannel+0x290>)
 8006126:	fba2 2303 	umull	r2, r3, r2, r3
 800612a:	0c9a      	lsrs	r2, r3, #18
 800612c:	4613      	mov	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	4413      	add	r3, r2
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8006136:	e002      	b.n	800613e <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	3b01      	subs	r3, #1
 800613c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	2b00      	cmp	r3, #0
 8006142:	d1f9      	bne.n	8006138 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2200      	movs	r2, #0
 8006148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800614c:	2300      	movs	r3, #0
}
 800614e:	4618      	mov	r0, r3
 8006150:	3714      	adds	r7, #20
 8006152:	46bd      	mov	sp, r7
 8006154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006158:	4770      	bx	lr
 800615a:	bf00      	nop
 800615c:	10000012 	.word	0x10000012
 8006160:	40012000 	.word	0x40012000
 8006164:	40012300 	.word	0x40012300
 8006168:	20000054 	.word	0x20000054
 800616c:	431bde83 	.word	0x431bde83

08006170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8006170:	b480      	push	{r7}
 8006172:	b083      	sub	sp, #12
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8006178:	4b78      	ldr	r3, [pc, #480]	; (800635c <ADC_Init+0x1ec>)
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	4a77      	ldr	r2, [pc, #476]	; (800635c <ADC_Init+0x1ec>)
 800617e:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006182:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006184:	4b75      	ldr	r3, [pc, #468]	; (800635c <ADC_Init+0x1ec>)
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	685b      	ldr	r3, [r3, #4]
 800618c:	4973      	ldr	r1, [pc, #460]	; (800635c <ADC_Init+0x1ec>)
 800618e:	4313      	orrs	r3, r2
 8006190:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	685a      	ldr	r2, [r3, #4]
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	6859      	ldr	r1, [r3, #4]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	021a      	lsls	r2, r3, #8
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	685a      	ldr	r2, [r3, #4]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80061c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	689a      	ldr	r2, [r3, #8]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	430a      	orrs	r2, r1
 80061d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	689a      	ldr	r2, [r3, #8]
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	6899      	ldr	r1, [r3, #8]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	68da      	ldr	r2, [r3, #12]
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	430a      	orrs	r2, r1
 80061f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061fe:	4a58      	ldr	r2, [pc, #352]	; (8006360 <ADC_Init+0x1f0>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d022      	beq.n	800624a <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006212:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	6899      	ldr	r1, [r3, #8]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	430a      	orrs	r2, r1
 8006224:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	689a      	ldr	r2, [r3, #8]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006234:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	6899      	ldr	r1, [r3, #8]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	430a      	orrs	r2, r1
 8006246:	609a      	str	r2, [r3, #8]
 8006248:	e00f      	b.n	800626a <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	689a      	ldr	r2, [r3, #8]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006258:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	689a      	ldr	r2, [r3, #8]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8006268:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f022 0202 	bic.w	r2, r2, #2
 8006278:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	6899      	ldr	r1, [r3, #8]
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	699b      	ldr	r3, [r3, #24]
 8006284:	005a      	lsls	r2, r3, #1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	430a      	orrs	r2, r1
 800628c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d01b      	beq.n	80062d0 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	685a      	ldr	r2, [r3, #4]
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	685a      	ldr	r2, [r3, #4]
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80062b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	6859      	ldr	r1, [r3, #4]
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062c2:	3b01      	subs	r3, #1
 80062c4:	035a      	lsls	r2, r3, #13
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	430a      	orrs	r2, r1
 80062cc:	605a      	str	r2, [r3, #4]
 80062ce:	e007      	b.n	80062e0 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	685a      	ldr	r2, [r3, #4]
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80062ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	3b01      	subs	r3, #1
 80062fc:	051a      	lsls	r2, r3, #20
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	430a      	orrs	r2, r1
 8006304:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006314:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	6899      	ldr	r1, [r3, #8]
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8006322:	025a      	lsls	r2, r3, #9
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	430a      	orrs	r2, r1
 800632a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800633a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	6899      	ldr	r1, [r3, #8]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	695b      	ldr	r3, [r3, #20]
 8006346:	029a      	lsls	r2, r3, #10
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	430a      	orrs	r2, r1
 800634e:	609a      	str	r2, [r3, #8]
}
 8006350:	bf00      	nop
 8006352:	370c      	adds	r7, #12
 8006354:	46bd      	mov	sp, r7
 8006356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635a:	4770      	bx	lr
 800635c:	40012300 	.word	0x40012300
 8006360:	0f000001 	.word	0x0f000001

08006364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006364:	b480      	push	{r7}
 8006366:	b085      	sub	sp, #20
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	f003 0307 	and.w	r3, r3, #7
 8006372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006374:	4b0b      	ldr	r3, [pc, #44]	; (80063a4 <__NVIC_SetPriorityGrouping+0x40>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800637a:	68ba      	ldr	r2, [r7, #8]
 800637c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006380:	4013      	ands	r3, r2
 8006382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800638c:	4b06      	ldr	r3, [pc, #24]	; (80063a8 <__NVIC_SetPriorityGrouping+0x44>)
 800638e:	4313      	orrs	r3, r2
 8006390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006392:	4a04      	ldr	r2, [pc, #16]	; (80063a4 <__NVIC_SetPriorityGrouping+0x40>)
 8006394:	68bb      	ldr	r3, [r7, #8]
 8006396:	60d3      	str	r3, [r2, #12]
}
 8006398:	bf00      	nop
 800639a:	3714      	adds	r7, #20
 800639c:	46bd      	mov	sp, r7
 800639e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a2:	4770      	bx	lr
 80063a4:	e000ed00 	.word	0xe000ed00
 80063a8:	05fa0000 	.word	0x05fa0000

080063ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063ac:	b480      	push	{r7}
 80063ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063b0:	4b04      	ldr	r3, [pc, #16]	; (80063c4 <__NVIC_GetPriorityGrouping+0x18>)
 80063b2:	68db      	ldr	r3, [r3, #12]
 80063b4:	0a1b      	lsrs	r3, r3, #8
 80063b6:	f003 0307 	and.w	r3, r3, #7
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	46bd      	mov	sp, r7
 80063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c2:	4770      	bx	lr
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b083      	sub	sp, #12
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	4603      	mov	r3, r0
 80063d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80063d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	db0b      	blt.n	80063f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80063da:	79fb      	ldrb	r3, [r7, #7]
 80063dc:	f003 021f 	and.w	r2, r3, #31
 80063e0:	4907      	ldr	r1, [pc, #28]	; (8006400 <__NVIC_EnableIRQ+0x38>)
 80063e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80063e6:	095b      	lsrs	r3, r3, #5
 80063e8:	2001      	movs	r0, #1
 80063ea:	fa00 f202 	lsl.w	r2, r0, r2
 80063ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80063f2:	bf00      	nop
 80063f4:	370c      	adds	r7, #12
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr
 80063fe:	bf00      	nop
 8006400:	e000e100 	.word	0xe000e100

08006404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006404:	b480      	push	{r7}
 8006406:	b083      	sub	sp, #12
 8006408:	af00      	add	r7, sp, #0
 800640a:	4603      	mov	r3, r0
 800640c:	6039      	str	r1, [r7, #0]
 800640e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006410:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006414:	2b00      	cmp	r3, #0
 8006416:	db0a      	blt.n	800642e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	b2da      	uxtb	r2, r3
 800641c:	490c      	ldr	r1, [pc, #48]	; (8006450 <__NVIC_SetPriority+0x4c>)
 800641e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006422:	0112      	lsls	r2, r2, #4
 8006424:	b2d2      	uxtb	r2, r2
 8006426:	440b      	add	r3, r1
 8006428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800642c:	e00a      	b.n	8006444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	b2da      	uxtb	r2, r3
 8006432:	4908      	ldr	r1, [pc, #32]	; (8006454 <__NVIC_SetPriority+0x50>)
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	f003 030f 	and.w	r3, r3, #15
 800643a:	3b04      	subs	r3, #4
 800643c:	0112      	lsls	r2, r2, #4
 800643e:	b2d2      	uxtb	r2, r2
 8006440:	440b      	add	r3, r1
 8006442:	761a      	strb	r2, [r3, #24]
}
 8006444:	bf00      	nop
 8006446:	370c      	adds	r7, #12
 8006448:	46bd      	mov	sp, r7
 800644a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644e:	4770      	bx	lr
 8006450:	e000e100 	.word	0xe000e100
 8006454:	e000ed00 	.word	0xe000ed00

08006458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006458:	b480      	push	{r7}
 800645a:	b089      	sub	sp, #36	; 0x24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	f003 0307 	and.w	r3, r3, #7
 800646a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	f1c3 0307 	rsb	r3, r3, #7
 8006472:	2b04      	cmp	r3, #4
 8006474:	bf28      	it	cs
 8006476:	2304      	movcs	r3, #4
 8006478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800647a:	69fb      	ldr	r3, [r7, #28]
 800647c:	3304      	adds	r3, #4
 800647e:	2b06      	cmp	r3, #6
 8006480:	d902      	bls.n	8006488 <NVIC_EncodePriority+0x30>
 8006482:	69fb      	ldr	r3, [r7, #28]
 8006484:	3b03      	subs	r3, #3
 8006486:	e000      	b.n	800648a <NVIC_EncodePriority+0x32>
 8006488:	2300      	movs	r3, #0
 800648a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800648c:	f04f 32ff 	mov.w	r2, #4294967295
 8006490:	69bb      	ldr	r3, [r7, #24]
 8006492:	fa02 f303 	lsl.w	r3, r2, r3
 8006496:	43da      	mvns	r2, r3
 8006498:	68bb      	ldr	r3, [r7, #8]
 800649a:	401a      	ands	r2, r3
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064a0:	f04f 31ff 	mov.w	r1, #4294967295
 80064a4:	697b      	ldr	r3, [r7, #20]
 80064a6:	fa01 f303 	lsl.w	r3, r1, r3
 80064aa:	43d9      	mvns	r1, r3
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064b0:	4313      	orrs	r3, r2
         );
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3724      	adds	r7, #36	; 0x24
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr

080064be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064be:	b580      	push	{r7, lr}
 80064c0:	b082      	sub	sp, #8
 80064c2:	af00      	add	r7, sp, #0
 80064c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f7ff ff4c 	bl	8006364 <__NVIC_SetPriorityGrouping>
}
 80064cc:	bf00      	nop
 80064ce:	3708      	adds	r7, #8
 80064d0:	46bd      	mov	sp, r7
 80064d2:	bd80      	pop	{r7, pc}

080064d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064d4:	b580      	push	{r7, lr}
 80064d6:	b086      	sub	sp, #24
 80064d8:	af00      	add	r7, sp, #0
 80064da:	4603      	mov	r3, r0
 80064dc:	60b9      	str	r1, [r7, #8]
 80064de:	607a      	str	r2, [r7, #4]
 80064e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80064e2:	2300      	movs	r3, #0
 80064e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064e6:	f7ff ff61 	bl	80063ac <__NVIC_GetPriorityGrouping>
 80064ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	6978      	ldr	r0, [r7, #20]
 80064f2:	f7ff ffb1 	bl	8006458 <NVIC_EncodePriority>
 80064f6:	4602      	mov	r2, r0
 80064f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064fc:	4611      	mov	r1, r2
 80064fe:	4618      	mov	r0, r3
 8006500:	f7ff ff80 	bl	8006404 <__NVIC_SetPriority>
}
 8006504:	bf00      	nop
 8006506:	3718      	adds	r7, #24
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	4603      	mov	r3, r0
 8006514:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006516:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800651a:	4618      	mov	r0, r3
 800651c:	f7ff ff54 	bl	80063c8 <__NVIC_EnableIRQ>
}
 8006520:	bf00      	nop
 8006522:	3708      	adds	r7, #8
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e014      	b.n	8006564 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	791b      	ldrb	r3, [r3, #4]
 800653e:	b2db      	uxtb	r3, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	d105      	bne.n	8006550 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2200      	movs	r2, #0
 8006548:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f7fe fd44 	bl	8004fd8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2202      	movs	r2, #2
 8006554:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	2201      	movs	r2, #1
 8006560:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8006562:	2300      	movs	r3, #0
}
 8006564:	4618      	mov	r0, r3
 8006566:	3708      	adds	r7, #8
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}

0800656c <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 800656c:	b580      	push	{r7, lr}
 800656e:	b082      	sub	sp, #8
 8006570:	af00      	add	r7, sp, #0
 8006572:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800657a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800657e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006582:	d118      	bne.n	80065b6 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2204      	movs	r2, #4
 8006588:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	691b      	ldr	r3, [r3, #16]
 800658e:	f043 0201 	orr.w	r2, r3, #1
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800659e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	681a      	ldr	r2, [r3, #0]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80065ae:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80065b0:	6878      	ldr	r0, [r7, #4]
 80065b2:	f000 f825 	bl	8006600 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	681b      	ldr	r3, [r3, #0]
 80065ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80065bc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80065c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065c4:	d118      	bne.n	80065f8 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	2204      	movs	r2, #4
 80065ca:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	f043 0202 	orr.w	r2, r3, #2
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80065e0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80065f0:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80065f2:	6878      	ldr	r0, [r7, #4]
 80065f4:	f000 f85b 	bl	80066ae <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80065f8:	bf00      	nop
 80065fa:	3708      	adds	r7, #8
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}

08006600 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006612:	4770      	bx	lr

08006614 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006614:	b480      	push	{r7}
 8006616:	b087      	sub	sp, #28
 8006618:	af00      	add	r7, sp, #0
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8006620:	2300      	movs	r3, #0
 8006622:	617b      	str	r3, [r7, #20]
 8006624:	2300      	movs	r3, #0
 8006626:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	795b      	ldrb	r3, [r3, #5]
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_DAC_ConfigChannel+0x20>
 8006630:	2302      	movs	r3, #2
 8006632:	e036      	b.n	80066a2 <HAL_DAC_ConfigChannel+0x8e>
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	2201      	movs	r2, #1
 8006638:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2202      	movs	r2, #2
 800663e:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8006648:	f640 72fe 	movw	r2, #4094	; 0xffe
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	fa02 f303 	lsl.w	r3, r2, r3
 8006652:	43db      	mvns	r3, r3
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	4013      	ands	r3, r2
 8006658:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	681a      	ldr	r2, [r3, #0]
 800665e:	68bb      	ldr	r3, [r7, #8]
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	4313      	orrs	r3, r2
 8006664:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8006666:	693a      	ldr	r2, [r7, #16]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	fa02 f303 	lsl.w	r3, r2, r3
 800666e:	697a      	ldr	r2, [r7, #20]
 8006670:	4313      	orrs	r3, r2
 8006672:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	697a      	ldr	r2, [r7, #20]
 800667a:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	22c0      	movs	r2, #192	; 0xc0
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	43da      	mvns	r2, r3
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	400a      	ands	r2, r1
 8006692:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	2201      	movs	r2, #1
 8006698:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2200      	movs	r2, #0
 800669e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80066a0:	2300      	movs	r3, #0
}
 80066a2:	4618      	mov	r0, r3
 80066a4:	371c      	adds	r7, #28
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr

080066ae <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80066ae:	b480      	push	{r7}
 80066b0:	b083      	sub	sp, #12
 80066b2:	af00      	add	r7, sp, #0
 80066b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80066b6:	bf00      	nop
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr
	...

080066c4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80066c4:	b580      	push	{r7, lr}
 80066c6:	b086      	sub	sp, #24
 80066c8:	af00      	add	r7, sp, #0
 80066ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80066cc:	2300      	movs	r3, #0
 80066ce:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80066d0:	f7ff fa3e 	bl	8005b50 <HAL_GetTick>
 80066d4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e099      	b.n	8006814 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2200      	movs	r2, #0
 80066e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2202      	movs	r2, #2
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006700:	e00f      	b.n	8006722 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006702:	f7ff fa25 	bl	8005b50 <HAL_GetTick>
 8006706:	4602      	mov	r2, r0
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	1ad3      	subs	r3, r2, r3
 800670c:	2b05      	cmp	r3, #5
 800670e:	d908      	bls.n	8006722 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2220      	movs	r2, #32
 8006714:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	2203      	movs	r2, #3
 800671a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800671e:	2303      	movs	r3, #3
 8006720:	e078      	b.n	8006814 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f003 0301 	and.w	r3, r3, #1
 800672c:	2b00      	cmp	r3, #0
 800672e:	d1e8      	bne.n	8006702 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006738:	697a      	ldr	r2, [r7, #20]
 800673a:	4b38      	ldr	r3, [pc, #224]	; (800681c <HAL_DMA_Init+0x158>)
 800673c:	4013      	ands	r3, r2
 800673e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	685a      	ldr	r2, [r3, #4]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	689b      	ldr	r3, [r3, #8]
 8006748:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800674e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	691b      	ldr	r3, [r3, #16]
 8006754:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800675a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	699b      	ldr	r3, [r3, #24]
 8006760:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006766:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	6a1b      	ldr	r3, [r3, #32]
 800676c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800676e:	697a      	ldr	r2, [r7, #20]
 8006770:	4313      	orrs	r3, r2
 8006772:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006778:	2b04      	cmp	r3, #4
 800677a:	d107      	bne.n	800678c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006784:	4313      	orrs	r3, r2
 8006786:	697a      	ldr	r2, [r7, #20]
 8006788:	4313      	orrs	r3, r2
 800678a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	695b      	ldr	r3, [r3, #20]
 800679a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800679c:	697b      	ldr	r3, [r7, #20]
 800679e:	f023 0307 	bic.w	r3, r3, #7
 80067a2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	4313      	orrs	r3, r2
 80067ac:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d117      	bne.n	80067e6 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067ba:	697a      	ldr	r2, [r7, #20]
 80067bc:	4313      	orrs	r3, r2
 80067be:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00e      	beq.n	80067e6 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f000 f8df 	bl	800698c <DMA_CheckFifoParam>
 80067ce:	4603      	mov	r3, r0
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d008      	beq.n	80067e6 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2240      	movs	r2, #64	; 0x40
 80067d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2201      	movs	r2, #1
 80067de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80067e2:	2301      	movs	r3, #1
 80067e4:	e016      	b.n	8006814 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	697a      	ldr	r2, [r7, #20]
 80067ec:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80067ee:	6878      	ldr	r0, [r7, #4]
 80067f0:	f000 f896 	bl	8006920 <DMA_CalcBaseAndBitshift>
 80067f4:	4603      	mov	r3, r0
 80067f6:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80067fc:	223f      	movs	r2, #63	; 0x3f
 80067fe:	409a      	lsls	r2, r3
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2200      	movs	r2, #0
 8006808:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	2201      	movs	r2, #1
 800680e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006812:	2300      	movs	r3, #0
}
 8006814:	4618      	mov	r0, r3
 8006816:	3718      	adds	r7, #24
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}
 800681c:	f010803f 	.word	0xf010803f

08006820 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b084      	sub	sp, #16
 8006824:	af00      	add	r7, sp, #0
 8006826:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2b00      	cmp	r3, #0
 800682c:	d101      	bne.n	8006832 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800682e:	2301      	movs	r3, #1
 8006830:	e050      	b.n	80068d4 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2b02      	cmp	r3, #2
 800683c:	d101      	bne.n	8006842 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800683e:	2302      	movs	r3, #2
 8006840:	e048      	b.n	80068d4 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	681a      	ldr	r2, [r3, #0]
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	f022 0201 	bic.w	r2, r2, #1
 8006850:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2200      	movs	r2, #0
 8006858:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2200      	movs	r2, #0
 8006860:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	2200      	movs	r2, #0
 8006868:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	2200      	movs	r2, #0
 8006870:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2200      	movs	r2, #0
 8006878:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2221      	movs	r2, #33	; 0x21
 8006880:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006882:	6878      	ldr	r0, [r7, #4]
 8006884:	f000 f84c 	bl	8006920 <DMA_CalcBaseAndBitshift>
 8006888:	4603      	mov	r3, r0
 800688a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006890:	223f      	movs	r2, #63	; 0x3f
 8006892:	409a      	lsls	r2, r3
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	2200      	movs	r2, #0
 800689c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	2200      	movs	r2, #0
 80068a2:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	2200      	movs	r2, #0
 80068a8:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	2200      	movs	r2, #0
 80068ae:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	2200      	movs	r2, #0
 80068b4:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	2200      	movs	r2, #0
 80068ba:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2200      	movs	r2, #0
 80068c0:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	2200      	movs	r2, #0
 80068c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80068d2:	2300      	movs	r3, #0
}
 80068d4:	4618      	mov	r0, r3
 80068d6:	3710      	adds	r7, #16
 80068d8:	46bd      	mov	sp, r7
 80068da:	bd80      	pop	{r7, pc}

080068dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80068ea:	b2db      	uxtb	r3, r3
 80068ec:	2b02      	cmp	r3, #2
 80068ee:	d004      	beq.n	80068fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	2280      	movs	r2, #128	; 0x80
 80068f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80068f6:	2301      	movs	r3, #1
 80068f8:	e00c      	b.n	8006914 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2205      	movs	r2, #5
 80068fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	681a      	ldr	r2, [r3, #0]
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f022 0201 	bic.w	r2, r2, #1
 8006910:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006912:	2300      	movs	r3, #0
}
 8006914:	4618      	mov	r0, r3
 8006916:	370c      	adds	r7, #12
 8006918:	46bd      	mov	sp, r7
 800691a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800691e:	4770      	bx	lr

08006920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8006920:	b480      	push	{r7}
 8006922:	b085      	sub	sp, #20
 8006924:	af00      	add	r7, sp, #0
 8006926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	b2db      	uxtb	r3, r3
 800692e:	3b10      	subs	r3, #16
 8006930:	4a13      	ldr	r2, [pc, #76]	; (8006980 <DMA_CalcBaseAndBitshift+0x60>)
 8006932:	fba2 2303 	umull	r2, r3, r2, r3
 8006936:	091b      	lsrs	r3, r3, #4
 8006938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800693a:	4a12      	ldr	r2, [pc, #72]	; (8006984 <DMA_CalcBaseAndBitshift+0x64>)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	4413      	add	r3, r2
 8006940:	781b      	ldrb	r3, [r3, #0]
 8006942:	461a      	mov	r2, r3
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2b03      	cmp	r3, #3
 800694c:	d908      	bls.n	8006960 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	461a      	mov	r2, r3
 8006954:	4b0c      	ldr	r3, [pc, #48]	; (8006988 <DMA_CalcBaseAndBitshift+0x68>)
 8006956:	4013      	ands	r3, r2
 8006958:	1d1a      	adds	r2, r3, #4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	659a      	str	r2, [r3, #88]	; 0x58
 800695e:	e006      	b.n	800696e <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	461a      	mov	r2, r3
 8006966:	4b08      	ldr	r3, [pc, #32]	; (8006988 <DMA_CalcBaseAndBitshift+0x68>)
 8006968:	4013      	ands	r3, r2
 800696a:	687a      	ldr	r2, [r7, #4]
 800696c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8006972:	4618      	mov	r0, r3
 8006974:	3714      	adds	r7, #20
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
 800697e:	bf00      	nop
 8006980:	aaaaaaab 	.word	0xaaaaaaab
 8006984:	08012c04 	.word	0x08012c04
 8006988:	fffffc00 	.word	0xfffffc00

0800698c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800698c:	b480      	push	{r7}
 800698e:	b085      	sub	sp, #20
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800699c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	699b      	ldr	r3, [r3, #24]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d11f      	bne.n	80069e6 <DMA_CheckFifoParam+0x5a>
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	2b03      	cmp	r3, #3
 80069aa:	d856      	bhi.n	8006a5a <DMA_CheckFifoParam+0xce>
 80069ac:	a201      	add	r2, pc, #4	; (adr r2, 80069b4 <DMA_CheckFifoParam+0x28>)
 80069ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069b2:	bf00      	nop
 80069b4:	080069c5 	.word	0x080069c5
 80069b8:	080069d7 	.word	0x080069d7
 80069bc:	080069c5 	.word	0x080069c5
 80069c0:	08006a5b 	.word	0x08006a5b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d046      	beq.n	8006a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80069d0:	2301      	movs	r3, #1
 80069d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069d4:	e043      	b.n	8006a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80069de:	d140      	bne.n	8006a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80069e0:	2301      	movs	r3, #1
 80069e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80069e4:	e03d      	b.n	8006a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	699b      	ldr	r3, [r3, #24]
 80069ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80069ee:	d121      	bne.n	8006a34 <DMA_CheckFifoParam+0xa8>
 80069f0:	68bb      	ldr	r3, [r7, #8]
 80069f2:	2b03      	cmp	r3, #3
 80069f4:	d837      	bhi.n	8006a66 <DMA_CheckFifoParam+0xda>
 80069f6:	a201      	add	r2, pc, #4	; (adr r2, 80069fc <DMA_CheckFifoParam+0x70>)
 80069f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069fc:	08006a0d 	.word	0x08006a0d
 8006a00:	08006a13 	.word	0x08006a13
 8006a04:	08006a0d 	.word	0x08006a0d
 8006a08:	08006a25 	.word	0x08006a25
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8006a10:	e030      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d025      	beq.n	8006a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
 8006a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006a22:	e022      	b.n	8006a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8006a2c:	d11f      	bne.n	8006a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8006a32:	e01c      	b.n	8006a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	2b02      	cmp	r3, #2
 8006a38:	d903      	bls.n	8006a42 <DMA_CheckFifoParam+0xb6>
 8006a3a:	68bb      	ldr	r3, [r7, #8]
 8006a3c:	2b03      	cmp	r3, #3
 8006a3e:	d003      	beq.n	8006a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8006a40:	e018      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8006a42:	2301      	movs	r3, #1
 8006a44:	73fb      	strb	r3, [r7, #15]
      break;
 8006a46:	e015      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00e      	beq.n	8006a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	73fb      	strb	r3, [r7, #15]
      break;
 8006a58:	e00b      	b.n	8006a72 <DMA_CheckFifoParam+0xe6>
      break;
 8006a5a:	bf00      	nop
 8006a5c:	e00a      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;
 8006a5e:	bf00      	nop
 8006a60:	e008      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;
 8006a62:	bf00      	nop
 8006a64:	e006      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;
 8006a66:	bf00      	nop
 8006a68:	e004      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;
 8006a6a:	bf00      	nop
 8006a6c:	e002      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8006a6e:	bf00      	nop
 8006a70:	e000      	b.n	8006a74 <DMA_CheckFifoParam+0xe8>
      break;
 8006a72:	bf00      	nop
    }
  } 
  
  return status; 
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a76:	4618      	mov	r0, r3
 8006a78:	3714      	adds	r7, #20
 8006a7a:	46bd      	mov	sp, r7
 8006a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a80:	4770      	bx	lr
 8006a82:	bf00      	nop

08006a84 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b082      	sub	sp, #8
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d101      	bne.n	8006a96 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e039      	b.n	8006b0a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006a9c:	b2db      	uxtb	r3, r3
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d106      	bne.n	8006ab0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006aaa:	6878      	ldr	r0, [r7, #4]
 8006aac:	f7fe fadc 	bl	8005068 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2202      	movs	r2, #2
 8006ab4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	685a      	ldr	r2, [r3, #4]
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	430a      	orrs	r2, r1
 8006acc:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ad4:	f023 0107 	bic.w	r1, r3, #7
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	689a      	ldr	r2, [r3, #8]
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	430a      	orrs	r2, r1
 8006ae2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006aea:	4b0a      	ldr	r3, [pc, #40]	; (8006b14 <HAL_DMA2D_Init+0x90>)
 8006aec:	4013      	ands	r3, r2
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	68d1      	ldr	r1, [r2, #12]
 8006af2:	687a      	ldr	r2, [r7, #4]
 8006af4:	6812      	ldr	r2, [r2, #0]
 8006af6:	430b      	orrs	r3, r1
 8006af8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2200      	movs	r2, #0
 8006afe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006b08:	2300      	movs	r3, #0
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3708      	adds	r7, #8
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	ffffc000 	.word	0xffffc000

08006b18 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af02      	add	r7, sp, #8
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006b2c:	2b01      	cmp	r3, #1
 8006b2e:	d101      	bne.n	8006b34 <HAL_DMA2D_Start+0x1c>
 8006b30:	2302      	movs	r3, #2
 8006b32:	e018      	b.n	8006b66 <HAL_DMA2D_Start+0x4e>
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2201      	movs	r2, #1
 8006b38:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	2202      	movs	r2, #2
 8006b40:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8006b44:	69bb      	ldr	r3, [r7, #24]
 8006b46:	9300      	str	r3, [sp, #0]
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	68b9      	ldr	r1, [r7, #8]
 8006b4e:	68f8      	ldr	r0, [r7, #12]
 8006b50:	f000 f988 	bl	8006e64 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	681a      	ldr	r2, [r3, #0]
 8006b5a:	68fb      	ldr	r3, [r7, #12]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	f042 0201 	orr.w	r2, r2, #1
 8006b62:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8006b64:	2300      	movs	r3, #0
}
 8006b66:	4618      	mov	r0, r3
 8006b68:	3710      	adds	r7, #16
 8006b6a:	46bd      	mov	sp, r7
 8006b6c:	bd80      	pop	{r7, pc}

08006b6e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
 8006b76:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8006b78:	2300      	movs	r3, #0
 8006b7a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d056      	beq.n	8006c38 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006b8a:	f7fe ffe1 	bl	8005b50 <HAL_GetTick>
 8006b8e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006b90:	e04b      	b.n	8006c2a <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	685b      	ldr	r3, [r3, #4]
 8006b98:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d023      	beq.n	8006bec <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	f003 0320 	and.w	r3, r3, #32
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d005      	beq.n	8006bba <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bb2:	f043 0202 	orr.w	r2, r3, #2
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006bba:	68fb      	ldr	r3, [r7, #12]
 8006bbc:	f003 0301 	and.w	r3, r3, #1
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d005      	beq.n	8006bd0 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006bc8:	f043 0201 	orr.w	r2, r3, #1
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	2221      	movs	r2, #33	; 0x21
 8006bd6:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2204      	movs	r2, #4
 8006bdc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006be8:	2301      	movs	r3, #1
 8006bea:	e0a5      	b.n	8006d38 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bf2:	d01a      	beq.n	8006c2a <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006bf4:	f7fe ffac 	bl	8005b50 <HAL_GetTick>
 8006bf8:	4602      	mov	r2, r0
 8006bfa:	697b      	ldr	r3, [r7, #20]
 8006bfc:	1ad3      	subs	r3, r2, r3
 8006bfe:	683a      	ldr	r2, [r7, #0]
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d302      	bcc.n	8006c0a <HAL_DMA2D_PollForTransfer+0x9c>
 8006c04:	683b      	ldr	r3, [r7, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d10f      	bne.n	8006c2a <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c0e:	f043 0220 	orr.w	r2, r3, #32
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2203      	movs	r2, #3
 8006c1a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e086      	b.n	8006d38 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ac      	beq.n	8006b92 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	69db      	ldr	r3, [r3, #28]
 8006c3e:	f003 0320 	and.w	r3, r3, #32
 8006c42:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c4a:	f003 0320 	and.w	r3, r3, #32
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006c54:	693b      	ldr	r3, [r7, #16]
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d061      	beq.n	8006d1e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006c5a:	f7fe ff79 	bl	8005b50 <HAL_GetTick>
 8006c5e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006c60:	e056      	b.n	8006d10 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	685b      	ldr	r3, [r3, #4]
 8006c68:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d02e      	beq.n	8006cd2 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	f003 0308 	and.w	r3, r3, #8
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d005      	beq.n	8006c8a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c82:	f043 0204 	orr.w	r2, r3, #4
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	f003 0320 	and.w	r3, r3, #32
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d005      	beq.n	8006ca0 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006c98:	f043 0202 	orr.w	r2, r3, #2
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	f003 0301 	and.w	r3, r3, #1
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d005      	beq.n	8006cb6 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cae:	f043 0201 	orr.w	r2, r3, #1
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2229      	movs	r2, #41	; 0x29
 8006cbc:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	2204      	movs	r2, #4
 8006cc2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	2200      	movs	r2, #0
 8006cca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006cce:	2301      	movs	r3, #1
 8006cd0:	e032      	b.n	8006d38 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006cd2:	683b      	ldr	r3, [r7, #0]
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d01a      	beq.n	8006d10 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006cda:	f7fe ff39 	bl	8005b50 <HAL_GetTick>
 8006cde:	4602      	mov	r2, r0
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	1ad3      	subs	r3, r2, r3
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d302      	bcc.n	8006cf0 <HAL_DMA2D_PollForTransfer+0x182>
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	d10f      	bne.n	8006d10 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cf4:	f043 0220 	orr.w	r2, r3, #32
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2203      	movs	r2, #3
 8006d00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006d0c:	2303      	movs	r3, #3
 8006d0e:	e013      	b.n	8006d38 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 0310 	and.w	r3, r3, #16
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d0a1      	beq.n	8006c62 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2212      	movs	r2, #18
 8006d24:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	2201      	movs	r2, #1
 8006d2a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006d36:	2300      	movs	r3, #0
}
 8006d38:	4618      	mov	r0, r3
 8006d3a:	3718      	adds	r7, #24
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	bd80      	pop	{r7, pc}

08006d40 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006d40:	b480      	push	{r7}
 8006d42:	b087      	sub	sp, #28
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
 8006d48:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	685b      	ldr	r3, [r3, #4]
 8006d4e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006d58:	2b01      	cmp	r3, #1
 8006d5a:	d101      	bne.n	8006d60 <HAL_DMA2D_ConfigLayer+0x20>
 8006d5c:	2302      	movs	r3, #2
 8006d5e:	e079      	b.n	8006e54 <HAL_DMA2D_ConfigLayer+0x114>
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2201      	movs	r2, #1
 8006d64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	2202      	movs	r2, #2
 8006d6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	3318      	adds	r3, #24
 8006d76:	687a      	ldr	r2, [r7, #4]
 8006d78:	4413      	add	r3, r2
 8006d7a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	685a      	ldr	r2, [r3, #4]
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	041b      	lsls	r3, r3, #16
 8006d86:	4313      	orrs	r3, r2
 8006d88:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006d8a:	4b35      	ldr	r3, [pc, #212]	; (8006e60 <HAL_DMA2D_ConfigLayer+0x120>)
 8006d8c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006d8e:	693b      	ldr	r3, [r7, #16]
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	2b0a      	cmp	r3, #10
 8006d94:	d003      	beq.n	8006d9e <HAL_DMA2D_ConfigLayer+0x5e>
 8006d96:	693b      	ldr	r3, [r7, #16]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b09      	cmp	r3, #9
 8006d9c:	d107      	bne.n	8006dae <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	68db      	ldr	r3, [r3, #12]
 8006da2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	4313      	orrs	r3, r2
 8006daa:	617b      	str	r3, [r7, #20]
 8006dac:	e005      	b.n	8006dba <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006dae:	693b      	ldr	r3, [r7, #16]
 8006db0:	68db      	ldr	r3, [r3, #12]
 8006db2:	061b      	lsls	r3, r3, #24
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d120      	bne.n	8006e02 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	43db      	mvns	r3, r3
 8006dca:	ea02 0103 	and.w	r1, r2, r3
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	697a      	ldr	r2, [r7, #20]
 8006dd4:	430a      	orrs	r2, r1
 8006dd6:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	693a      	ldr	r2, [r7, #16]
 8006dde:	6812      	ldr	r2, [r2, #0]
 8006de0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006de2:	693b      	ldr	r3, [r7, #16]
 8006de4:	685b      	ldr	r3, [r3, #4]
 8006de6:	2b0a      	cmp	r3, #10
 8006de8:	d003      	beq.n	8006df2 <HAL_DMA2D_ConfigLayer+0xb2>
 8006dea:	693b      	ldr	r3, [r7, #16]
 8006dec:	685b      	ldr	r3, [r3, #4]
 8006dee:	2b09      	cmp	r3, #9
 8006df0:	d127      	bne.n	8006e42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	68da      	ldr	r2, [r3, #12]
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006dfe:	629a      	str	r2, [r3, #40]	; 0x28
 8006e00:	e01f      	b.n	8006e42 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	69da      	ldr	r2, [r3, #28]
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	43db      	mvns	r3, r3
 8006e0c:	ea02 0103 	and.w	r1, r2, r3
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	430a      	orrs	r2, r1
 8006e18:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	693a      	ldr	r2, [r7, #16]
 8006e20:	6812      	ldr	r2, [r2, #0]
 8006e22:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006e24:	693b      	ldr	r3, [r7, #16]
 8006e26:	685b      	ldr	r3, [r3, #4]
 8006e28:	2b0a      	cmp	r3, #10
 8006e2a:	d003      	beq.n	8006e34 <HAL_DMA2D_ConfigLayer+0xf4>
 8006e2c:	693b      	ldr	r3, [r7, #16]
 8006e2e:	685b      	ldr	r3, [r3, #4]
 8006e30:	2b09      	cmp	r3, #9
 8006e32:	d106      	bne.n	8006e42 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006e34:	693b      	ldr	r3, [r7, #16]
 8006e36:	68da      	ldr	r2, [r3, #12]
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006e40:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	2201      	movs	r2, #1
 8006e46:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006e52:	2300      	movs	r3, #0
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	371c      	adds	r7, #28
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr
 8006e60:	ff03000f 	.word	0xff03000f

08006e64 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006e64:	b480      	push	{r7}
 8006e66:	b08b      	sub	sp, #44	; 0x2c
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	60f8      	str	r0, [r7, #12]
 8006e6c:	60b9      	str	r1, [r7, #8]
 8006e6e:	607a      	str	r2, [r7, #4]
 8006e70:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e78:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	041a      	lsls	r2, r3, #16
 8006e80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e82:	431a      	orrs	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	430a      	orrs	r2, r1
 8006e8a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006e9c:	d174      	bne.n	8006f88 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006ea4:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006eac:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006eb4:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	b2db      	uxtb	r3, r3
 8006eba:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	689b      	ldr	r3, [r3, #8]
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d108      	bne.n	8006ed6 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006ec4:	69ba      	ldr	r2, [r7, #24]
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	431a      	orrs	r2, r3
 8006eca:	6a3b      	ldr	r3, [r7, #32]
 8006ecc:	4313      	orrs	r3, r2
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	4313      	orrs	r3, r2
 8006ed2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ed4:	e053      	b.n	8006f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	2b01      	cmp	r3, #1
 8006edc:	d106      	bne.n	8006eec <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006ede:	69ba      	ldr	r2, [r7, #24]
 8006ee0:	69fb      	ldr	r3, [r7, #28]
 8006ee2:	4313      	orrs	r3, r2
 8006ee4:	697a      	ldr	r2, [r7, #20]
 8006ee6:	4313      	orrs	r3, r2
 8006ee8:	627b      	str	r3, [r7, #36]	; 0x24
 8006eea:	e048      	b.n	8006f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	689b      	ldr	r3, [r3, #8]
 8006ef0:	2b02      	cmp	r3, #2
 8006ef2:	d111      	bne.n	8006f18 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006ef4:	69fb      	ldr	r3, [r7, #28]
 8006ef6:	0cdb      	lsrs	r3, r3, #19
 8006ef8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006efa:	69bb      	ldr	r3, [r7, #24]
 8006efc:	0a9b      	lsrs	r3, r3, #10
 8006efe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	08db      	lsrs	r3, r3, #3
 8006f04:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	015a      	lsls	r2, r3, #5
 8006f0a:	69fb      	ldr	r3, [r7, #28]
 8006f0c:	02db      	lsls	r3, r3, #11
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	697a      	ldr	r2, [r7, #20]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	627b      	str	r3, [r7, #36]	; 0x24
 8006f16:	e032      	b.n	8006f7e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	689b      	ldr	r3, [r3, #8]
 8006f1c:	2b03      	cmp	r3, #3
 8006f1e:	d117      	bne.n	8006f50 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006f20:	6a3b      	ldr	r3, [r7, #32]
 8006f22:	0fdb      	lsrs	r3, r3, #31
 8006f24:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006f26:	69fb      	ldr	r3, [r7, #28]
 8006f28:	0cdb      	lsrs	r3, r3, #19
 8006f2a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006f2c:	69bb      	ldr	r3, [r7, #24]
 8006f2e:	0adb      	lsrs	r3, r3, #11
 8006f30:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006f32:	697b      	ldr	r3, [r7, #20]
 8006f34:	08db      	lsrs	r3, r3, #3
 8006f36:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006f38:	69bb      	ldr	r3, [r7, #24]
 8006f3a:	015a      	lsls	r2, r3, #5
 8006f3c:	69fb      	ldr	r3, [r7, #28]
 8006f3e:	029b      	lsls	r3, r3, #10
 8006f40:	431a      	orrs	r2, r3
 8006f42:	6a3b      	ldr	r3, [r7, #32]
 8006f44:	03db      	lsls	r3, r3, #15
 8006f46:	4313      	orrs	r3, r2
 8006f48:	697a      	ldr	r2, [r7, #20]
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4e:	e016      	b.n	8006f7e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006f50:	6a3b      	ldr	r3, [r7, #32]
 8006f52:	0f1b      	lsrs	r3, r3, #28
 8006f54:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	0d1b      	lsrs	r3, r3, #20
 8006f5a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006f5c:	69bb      	ldr	r3, [r7, #24]
 8006f5e:	0b1b      	lsrs	r3, r3, #12
 8006f60:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	091b      	lsrs	r3, r3, #4
 8006f66:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006f68:	69bb      	ldr	r3, [r7, #24]
 8006f6a:	011a      	lsls	r2, r3, #4
 8006f6c:	69fb      	ldr	r3, [r7, #28]
 8006f6e:	021b      	lsls	r3, r3, #8
 8006f70:	431a      	orrs	r2, r3
 8006f72:	6a3b      	ldr	r3, [r7, #32]
 8006f74:	031b      	lsls	r3, r3, #12
 8006f76:	4313      	orrs	r3, r2
 8006f78:	697a      	ldr	r2, [r7, #20]
 8006f7a:	4313      	orrs	r3, r2
 8006f7c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f84:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006f86:	e003      	b.n	8006f90 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	68ba      	ldr	r2, [r7, #8]
 8006f8e:	60da      	str	r2, [r3, #12]
}
 8006f90:	bf00      	nop
 8006f92:	372c      	adds	r7, #44	; 0x2c
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr

08006f9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006f9c:	b480      	push	{r7}
 8006f9e:	b089      	sub	sp, #36	; 0x24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
 8006fa4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006fa6:	2300      	movs	r3, #0
 8006fa8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006faa:	2300      	movs	r3, #0
 8006fac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006fae:	2300      	movs	r3, #0
 8006fb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	61fb      	str	r3, [r7, #28]
 8006fba:	e175      	b.n	80072a8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006fbc:	2201      	movs	r2, #1
 8006fbe:	69fb      	ldr	r3, [r7, #28]
 8006fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8006fc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	697a      	ldr	r2, [r7, #20]
 8006fcc:	4013      	ands	r3, r2
 8006fce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006fd0:	693a      	ldr	r2, [r7, #16]
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	429a      	cmp	r2, r3
 8006fd6:	f040 8164 	bne.w	80072a2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	685b      	ldr	r3, [r3, #4]
 8006fde:	2b01      	cmp	r3, #1
 8006fe0:	d00b      	beq.n	8006ffa <HAL_GPIO_Init+0x5e>
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	2b02      	cmp	r3, #2
 8006fe8:	d007      	beq.n	8006ffa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006fea:	683b      	ldr	r3, [r7, #0]
 8006fec:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006fee:	2b11      	cmp	r3, #17
 8006ff0:	d003      	beq.n	8006ffa <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	685b      	ldr	r3, [r3, #4]
 8006ff6:	2b12      	cmp	r3, #18
 8006ff8:	d130      	bne.n	800705c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	689b      	ldr	r3, [r3, #8]
 8006ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007000:	69fb      	ldr	r3, [r7, #28]
 8007002:	005b      	lsls	r3, r3, #1
 8007004:	2203      	movs	r2, #3
 8007006:	fa02 f303 	lsl.w	r3, r2, r3
 800700a:	43db      	mvns	r3, r3
 800700c:	69ba      	ldr	r2, [r7, #24]
 800700e:	4013      	ands	r3, r2
 8007010:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8007012:	683b      	ldr	r3, [r7, #0]
 8007014:	68da      	ldr	r2, [r3, #12]
 8007016:	69fb      	ldr	r3, [r7, #28]
 8007018:	005b      	lsls	r3, r3, #1
 800701a:	fa02 f303 	lsl.w	r3, r2, r3
 800701e:	69ba      	ldr	r2, [r7, #24]
 8007020:	4313      	orrs	r3, r2
 8007022:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	69ba      	ldr	r2, [r7, #24]
 8007028:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007030:	2201      	movs	r2, #1
 8007032:	69fb      	ldr	r3, [r7, #28]
 8007034:	fa02 f303 	lsl.w	r3, r2, r3
 8007038:	43db      	mvns	r3, r3
 800703a:	69ba      	ldr	r2, [r7, #24]
 800703c:	4013      	ands	r3, r2
 800703e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8007040:	683b      	ldr	r3, [r7, #0]
 8007042:	685b      	ldr	r3, [r3, #4]
 8007044:	091b      	lsrs	r3, r3, #4
 8007046:	f003 0201 	and.w	r2, r3, #1
 800704a:	69fb      	ldr	r3, [r7, #28]
 800704c:	fa02 f303 	lsl.w	r3, r2, r3
 8007050:	69ba      	ldr	r2, [r7, #24]
 8007052:	4313      	orrs	r3, r2
 8007054:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	69ba      	ldr	r2, [r7, #24]
 800705a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	68db      	ldr	r3, [r3, #12]
 8007060:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8007062:	69fb      	ldr	r3, [r7, #28]
 8007064:	005b      	lsls	r3, r3, #1
 8007066:	2203      	movs	r2, #3
 8007068:	fa02 f303 	lsl.w	r3, r2, r3
 800706c:	43db      	mvns	r3, r3
 800706e:	69ba      	ldr	r2, [r7, #24]
 8007070:	4013      	ands	r3, r2
 8007072:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8007074:	683b      	ldr	r3, [r7, #0]
 8007076:	689a      	ldr	r2, [r3, #8]
 8007078:	69fb      	ldr	r3, [r7, #28]
 800707a:	005b      	lsls	r3, r3, #1
 800707c:	fa02 f303 	lsl.w	r3, r2, r3
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	4313      	orrs	r3, r2
 8007084:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	69ba      	ldr	r2, [r7, #24]
 800708a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	685b      	ldr	r3, [r3, #4]
 8007090:	2b02      	cmp	r3, #2
 8007092:	d003      	beq.n	800709c <HAL_GPIO_Init+0x100>
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	685b      	ldr	r3, [r3, #4]
 8007098:	2b12      	cmp	r3, #18
 800709a:	d123      	bne.n	80070e4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800709c:	69fb      	ldr	r3, [r7, #28]
 800709e:	08da      	lsrs	r2, r3, #3
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	3208      	adds	r2, #8
 80070a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80070aa:	69fb      	ldr	r3, [r7, #28]
 80070ac:	f003 0307 	and.w	r3, r3, #7
 80070b0:	009b      	lsls	r3, r3, #2
 80070b2:	220f      	movs	r2, #15
 80070b4:	fa02 f303 	lsl.w	r3, r2, r3
 80070b8:	43db      	mvns	r3, r3
 80070ba:	69ba      	ldr	r2, [r7, #24]
 80070bc:	4013      	ands	r3, r2
 80070be:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	691a      	ldr	r2, [r3, #16]
 80070c4:	69fb      	ldr	r3, [r7, #28]
 80070c6:	f003 0307 	and.w	r3, r3, #7
 80070ca:	009b      	lsls	r3, r3, #2
 80070cc:	fa02 f303 	lsl.w	r3, r2, r3
 80070d0:	69ba      	ldr	r2, [r7, #24]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80070d6:	69fb      	ldr	r3, [r7, #28]
 80070d8:	08da      	lsrs	r2, r3, #3
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	3208      	adds	r2, #8
 80070de:	69b9      	ldr	r1, [r7, #24]
 80070e0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80070ea:	69fb      	ldr	r3, [r7, #28]
 80070ec:	005b      	lsls	r3, r3, #1
 80070ee:	2203      	movs	r2, #3
 80070f0:	fa02 f303 	lsl.w	r3, r2, r3
 80070f4:	43db      	mvns	r3, r3
 80070f6:	69ba      	ldr	r2, [r7, #24]
 80070f8:	4013      	ands	r3, r2
 80070fa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	685b      	ldr	r3, [r3, #4]
 8007100:	f003 0203 	and.w	r2, r3, #3
 8007104:	69fb      	ldr	r3, [r7, #28]
 8007106:	005b      	lsls	r3, r3, #1
 8007108:	fa02 f303 	lsl.w	r3, r2, r3
 800710c:	69ba      	ldr	r2, [r7, #24]
 800710e:	4313      	orrs	r3, r2
 8007110:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007120:	2b00      	cmp	r3, #0
 8007122:	f000 80be 	beq.w	80072a2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007126:	4b66      	ldr	r3, [pc, #408]	; (80072c0 <HAL_GPIO_Init+0x324>)
 8007128:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800712a:	4a65      	ldr	r2, [pc, #404]	; (80072c0 <HAL_GPIO_Init+0x324>)
 800712c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007130:	6453      	str	r3, [r2, #68]	; 0x44
 8007132:	4b63      	ldr	r3, [pc, #396]	; (80072c0 <HAL_GPIO_Init+0x324>)
 8007134:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007136:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800713a:	60fb      	str	r3, [r7, #12]
 800713c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800713e:	4a61      	ldr	r2, [pc, #388]	; (80072c4 <HAL_GPIO_Init+0x328>)
 8007140:	69fb      	ldr	r3, [r7, #28]
 8007142:	089b      	lsrs	r3, r3, #2
 8007144:	3302      	adds	r3, #2
 8007146:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800714a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800714c:	69fb      	ldr	r3, [r7, #28]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	009b      	lsls	r3, r3, #2
 8007154:	220f      	movs	r2, #15
 8007156:	fa02 f303 	lsl.w	r3, r2, r3
 800715a:	43db      	mvns	r3, r3
 800715c:	69ba      	ldr	r2, [r7, #24]
 800715e:	4013      	ands	r3, r2
 8007160:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a58      	ldr	r2, [pc, #352]	; (80072c8 <HAL_GPIO_Init+0x32c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d037      	beq.n	80071da <HAL_GPIO_Init+0x23e>
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	4a57      	ldr	r2, [pc, #348]	; (80072cc <HAL_GPIO_Init+0x330>)
 800716e:	4293      	cmp	r3, r2
 8007170:	d031      	beq.n	80071d6 <HAL_GPIO_Init+0x23a>
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	4a56      	ldr	r2, [pc, #344]	; (80072d0 <HAL_GPIO_Init+0x334>)
 8007176:	4293      	cmp	r3, r2
 8007178:	d02b      	beq.n	80071d2 <HAL_GPIO_Init+0x236>
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	4a55      	ldr	r2, [pc, #340]	; (80072d4 <HAL_GPIO_Init+0x338>)
 800717e:	4293      	cmp	r3, r2
 8007180:	d025      	beq.n	80071ce <HAL_GPIO_Init+0x232>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	4a54      	ldr	r2, [pc, #336]	; (80072d8 <HAL_GPIO_Init+0x33c>)
 8007186:	4293      	cmp	r3, r2
 8007188:	d01f      	beq.n	80071ca <HAL_GPIO_Init+0x22e>
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	4a53      	ldr	r2, [pc, #332]	; (80072dc <HAL_GPIO_Init+0x340>)
 800718e:	4293      	cmp	r3, r2
 8007190:	d019      	beq.n	80071c6 <HAL_GPIO_Init+0x22a>
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	4a52      	ldr	r2, [pc, #328]	; (80072e0 <HAL_GPIO_Init+0x344>)
 8007196:	4293      	cmp	r3, r2
 8007198:	d013      	beq.n	80071c2 <HAL_GPIO_Init+0x226>
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	4a51      	ldr	r2, [pc, #324]	; (80072e4 <HAL_GPIO_Init+0x348>)
 800719e:	4293      	cmp	r3, r2
 80071a0:	d00d      	beq.n	80071be <HAL_GPIO_Init+0x222>
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	4a50      	ldr	r2, [pc, #320]	; (80072e8 <HAL_GPIO_Init+0x34c>)
 80071a6:	4293      	cmp	r3, r2
 80071a8:	d007      	beq.n	80071ba <HAL_GPIO_Init+0x21e>
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	4a4f      	ldr	r2, [pc, #316]	; (80072ec <HAL_GPIO_Init+0x350>)
 80071ae:	4293      	cmp	r3, r2
 80071b0:	d101      	bne.n	80071b6 <HAL_GPIO_Init+0x21a>
 80071b2:	2309      	movs	r3, #9
 80071b4:	e012      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071b6:	230a      	movs	r3, #10
 80071b8:	e010      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071ba:	2308      	movs	r3, #8
 80071bc:	e00e      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071be:	2307      	movs	r3, #7
 80071c0:	e00c      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071c2:	2306      	movs	r3, #6
 80071c4:	e00a      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071c6:	2305      	movs	r3, #5
 80071c8:	e008      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071ca:	2304      	movs	r3, #4
 80071cc:	e006      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071ce:	2303      	movs	r3, #3
 80071d0:	e004      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071d2:	2302      	movs	r3, #2
 80071d4:	e002      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071d6:	2301      	movs	r3, #1
 80071d8:	e000      	b.n	80071dc <HAL_GPIO_Init+0x240>
 80071da:	2300      	movs	r3, #0
 80071dc:	69fa      	ldr	r2, [r7, #28]
 80071de:	f002 0203 	and.w	r2, r2, #3
 80071e2:	0092      	lsls	r2, r2, #2
 80071e4:	4093      	lsls	r3, r2
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	4313      	orrs	r3, r2
 80071ea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80071ec:	4935      	ldr	r1, [pc, #212]	; (80072c4 <HAL_GPIO_Init+0x328>)
 80071ee:	69fb      	ldr	r3, [r7, #28]
 80071f0:	089b      	lsrs	r3, r3, #2
 80071f2:	3302      	adds	r3, #2
 80071f4:	69ba      	ldr	r2, [r7, #24]
 80071f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80071fa:	4b3d      	ldr	r3, [pc, #244]	; (80072f0 <HAL_GPIO_Init+0x354>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	43db      	mvns	r3, r3
 8007204:	69ba      	ldr	r2, [r7, #24]
 8007206:	4013      	ands	r3, r2
 8007208:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800720a:	683b      	ldr	r3, [r7, #0]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007212:	2b00      	cmp	r3, #0
 8007214:	d003      	beq.n	800721e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007216:	69ba      	ldr	r2, [r7, #24]
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4313      	orrs	r3, r2
 800721c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800721e:	4a34      	ldr	r2, [pc, #208]	; (80072f0 <HAL_GPIO_Init+0x354>)
 8007220:	69bb      	ldr	r3, [r7, #24]
 8007222:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007224:	4b32      	ldr	r3, [pc, #200]	; (80072f0 <HAL_GPIO_Init+0x354>)
 8007226:	685b      	ldr	r3, [r3, #4]
 8007228:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800722a:	693b      	ldr	r3, [r7, #16]
 800722c:	43db      	mvns	r3, r3
 800722e:	69ba      	ldr	r2, [r7, #24]
 8007230:	4013      	ands	r3, r2
 8007232:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	685b      	ldr	r3, [r3, #4]
 8007238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800723c:	2b00      	cmp	r3, #0
 800723e:	d003      	beq.n	8007248 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8007240:	69ba      	ldr	r2, [r7, #24]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	4313      	orrs	r3, r2
 8007246:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007248:	4a29      	ldr	r2, [pc, #164]	; (80072f0 <HAL_GPIO_Init+0x354>)
 800724a:	69bb      	ldr	r3, [r7, #24]
 800724c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800724e:	4b28      	ldr	r3, [pc, #160]	; (80072f0 <HAL_GPIO_Init+0x354>)
 8007250:	689b      	ldr	r3, [r3, #8]
 8007252:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007254:	693b      	ldr	r3, [r7, #16]
 8007256:	43db      	mvns	r3, r3
 8007258:	69ba      	ldr	r2, [r7, #24]
 800725a:	4013      	ands	r3, r2
 800725c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800725e:	683b      	ldr	r3, [r7, #0]
 8007260:	685b      	ldr	r3, [r3, #4]
 8007262:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800726a:	69ba      	ldr	r2, [r7, #24]
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	4313      	orrs	r3, r2
 8007270:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007272:	4a1f      	ldr	r2, [pc, #124]	; (80072f0 <HAL_GPIO_Init+0x354>)
 8007274:	69bb      	ldr	r3, [r7, #24]
 8007276:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007278:	4b1d      	ldr	r3, [pc, #116]	; (80072f0 <HAL_GPIO_Init+0x354>)
 800727a:	68db      	ldr	r3, [r3, #12]
 800727c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	43db      	mvns	r3, r3
 8007282:	69ba      	ldr	r2, [r7, #24]
 8007284:	4013      	ands	r3, r2
 8007286:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007288:	683b      	ldr	r3, [r7, #0]
 800728a:	685b      	ldr	r3, [r3, #4]
 800728c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007290:	2b00      	cmp	r3, #0
 8007292:	d003      	beq.n	800729c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007294:	69ba      	ldr	r2, [r7, #24]
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	4313      	orrs	r3, r2
 800729a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800729c:	4a14      	ldr	r2, [pc, #80]	; (80072f0 <HAL_GPIO_Init+0x354>)
 800729e:	69bb      	ldr	r3, [r7, #24]
 80072a0:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80072a2:	69fb      	ldr	r3, [r7, #28]
 80072a4:	3301      	adds	r3, #1
 80072a6:	61fb      	str	r3, [r7, #28]
 80072a8:	69fb      	ldr	r3, [r7, #28]
 80072aa:	2b0f      	cmp	r3, #15
 80072ac:	f67f ae86 	bls.w	8006fbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80072b0:	bf00      	nop
 80072b2:	bf00      	nop
 80072b4:	3724      	adds	r7, #36	; 0x24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop
 80072c0:	40023800 	.word	0x40023800
 80072c4:	40013800 	.word	0x40013800
 80072c8:	40020000 	.word	0x40020000
 80072cc:	40020400 	.word	0x40020400
 80072d0:	40020800 	.word	0x40020800
 80072d4:	40020c00 	.word	0x40020c00
 80072d8:	40021000 	.word	0x40021000
 80072dc:	40021400 	.word	0x40021400
 80072e0:	40021800 	.word	0x40021800
 80072e4:	40021c00 	.word	0x40021c00
 80072e8:	40022000 	.word	0x40022000
 80072ec:	40022400 	.word	0x40022400
 80072f0:	40013c00 	.word	0x40013c00

080072f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80072f4:	b480      	push	{r7}
 80072f6:	b087      	sub	sp, #28
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	6078      	str	r0, [r7, #4]
 80072fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80072fe:	2300      	movs	r3, #0
 8007300:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007302:	2300      	movs	r3, #0
 8007304:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007306:	2300      	movs	r3, #0
 8007308:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800730a:	2300      	movs	r3, #0
 800730c:	617b      	str	r3, [r7, #20]
 800730e:	e0d9      	b.n	80074c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007310:	2201      	movs	r2, #1
 8007312:	697b      	ldr	r3, [r7, #20]
 8007314:	fa02 f303 	lsl.w	r3, r2, r3
 8007318:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800731a:	683a      	ldr	r2, [r7, #0]
 800731c:	693b      	ldr	r3, [r7, #16]
 800731e:	4013      	ands	r3, r2
 8007320:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8007322:	68fa      	ldr	r2, [r7, #12]
 8007324:	693b      	ldr	r3, [r7, #16]
 8007326:	429a      	cmp	r2, r3
 8007328:	f040 80c9 	bne.w	80074be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800732c:	4a6b      	ldr	r2, [pc, #428]	; (80074dc <HAL_GPIO_DeInit+0x1e8>)
 800732e:	697b      	ldr	r3, [r7, #20]
 8007330:	089b      	lsrs	r3, r3, #2
 8007332:	3302      	adds	r3, #2
 8007334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007338:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800733a:	697b      	ldr	r3, [r7, #20]
 800733c:	f003 0303 	and.w	r3, r3, #3
 8007340:	009b      	lsls	r3, r3, #2
 8007342:	220f      	movs	r2, #15
 8007344:	fa02 f303 	lsl.w	r3, r2, r3
 8007348:	68ba      	ldr	r2, [r7, #8]
 800734a:	4013      	ands	r3, r2
 800734c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	4a63      	ldr	r2, [pc, #396]	; (80074e0 <HAL_GPIO_DeInit+0x1ec>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d037      	beq.n	80073c6 <HAL_GPIO_DeInit+0xd2>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	4a62      	ldr	r2, [pc, #392]	; (80074e4 <HAL_GPIO_DeInit+0x1f0>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d031      	beq.n	80073c2 <HAL_GPIO_DeInit+0xce>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4a61      	ldr	r2, [pc, #388]	; (80074e8 <HAL_GPIO_DeInit+0x1f4>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d02b      	beq.n	80073be <HAL_GPIO_DeInit+0xca>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a60      	ldr	r2, [pc, #384]	; (80074ec <HAL_GPIO_DeInit+0x1f8>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d025      	beq.n	80073ba <HAL_GPIO_DeInit+0xc6>
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	4a5f      	ldr	r2, [pc, #380]	; (80074f0 <HAL_GPIO_DeInit+0x1fc>)
 8007372:	4293      	cmp	r3, r2
 8007374:	d01f      	beq.n	80073b6 <HAL_GPIO_DeInit+0xc2>
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	4a5e      	ldr	r2, [pc, #376]	; (80074f4 <HAL_GPIO_DeInit+0x200>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d019      	beq.n	80073b2 <HAL_GPIO_DeInit+0xbe>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	4a5d      	ldr	r2, [pc, #372]	; (80074f8 <HAL_GPIO_DeInit+0x204>)
 8007382:	4293      	cmp	r3, r2
 8007384:	d013      	beq.n	80073ae <HAL_GPIO_DeInit+0xba>
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	4a5c      	ldr	r2, [pc, #368]	; (80074fc <HAL_GPIO_DeInit+0x208>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d00d      	beq.n	80073aa <HAL_GPIO_DeInit+0xb6>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	4a5b      	ldr	r2, [pc, #364]	; (8007500 <HAL_GPIO_DeInit+0x20c>)
 8007392:	4293      	cmp	r3, r2
 8007394:	d007      	beq.n	80073a6 <HAL_GPIO_DeInit+0xb2>
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	4a5a      	ldr	r2, [pc, #360]	; (8007504 <HAL_GPIO_DeInit+0x210>)
 800739a:	4293      	cmp	r3, r2
 800739c:	d101      	bne.n	80073a2 <HAL_GPIO_DeInit+0xae>
 800739e:	2309      	movs	r3, #9
 80073a0:	e012      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073a2:	230a      	movs	r3, #10
 80073a4:	e010      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073a6:	2308      	movs	r3, #8
 80073a8:	e00e      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073aa:	2307      	movs	r3, #7
 80073ac:	e00c      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073ae:	2306      	movs	r3, #6
 80073b0:	e00a      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073b2:	2305      	movs	r3, #5
 80073b4:	e008      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073b6:	2304      	movs	r3, #4
 80073b8:	e006      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073ba:	2303      	movs	r3, #3
 80073bc:	e004      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073be:	2302      	movs	r3, #2
 80073c0:	e002      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073c2:	2301      	movs	r3, #1
 80073c4:	e000      	b.n	80073c8 <HAL_GPIO_DeInit+0xd4>
 80073c6:	2300      	movs	r3, #0
 80073c8:	697a      	ldr	r2, [r7, #20]
 80073ca:	f002 0203 	and.w	r2, r2, #3
 80073ce:	0092      	lsls	r2, r2, #2
 80073d0:	4093      	lsls	r3, r2
 80073d2:	68ba      	ldr	r2, [r7, #8]
 80073d4:	429a      	cmp	r2, r3
 80073d6:	d132      	bne.n	800743e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80073d8:	4b4b      	ldr	r3, [pc, #300]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	43db      	mvns	r3, r3
 80073e0:	4949      	ldr	r1, [pc, #292]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073e2:	4013      	ands	r3, r2
 80073e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80073e6:	4b48      	ldr	r3, [pc, #288]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073e8:	685a      	ldr	r2, [r3, #4]
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	43db      	mvns	r3, r3
 80073ee:	4946      	ldr	r1, [pc, #280]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073f0:	4013      	ands	r3, r2
 80073f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80073f4:	4b44      	ldr	r3, [pc, #272]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073f6:	689a      	ldr	r2, [r3, #8]
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	43db      	mvns	r3, r3
 80073fc:	4942      	ldr	r1, [pc, #264]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 80073fe:	4013      	ands	r3, r2
 8007400:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007402:	4b41      	ldr	r3, [pc, #260]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 8007404:	68da      	ldr	r2, [r3, #12]
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	43db      	mvns	r3, r3
 800740a:	493f      	ldr	r1, [pc, #252]	; (8007508 <HAL_GPIO_DeInit+0x214>)
 800740c:	4013      	ands	r3, r2
 800740e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	f003 0303 	and.w	r3, r3, #3
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	220f      	movs	r2, #15
 800741a:	fa02 f303 	lsl.w	r3, r2, r3
 800741e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8007420:	4a2e      	ldr	r2, [pc, #184]	; (80074dc <HAL_GPIO_DeInit+0x1e8>)
 8007422:	697b      	ldr	r3, [r7, #20]
 8007424:	089b      	lsrs	r3, r3, #2
 8007426:	3302      	adds	r3, #2
 8007428:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800742c:	68bb      	ldr	r3, [r7, #8]
 800742e:	43da      	mvns	r2, r3
 8007430:	482a      	ldr	r0, [pc, #168]	; (80074dc <HAL_GPIO_DeInit+0x1e8>)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	089b      	lsrs	r3, r3, #2
 8007436:	400a      	ands	r2, r1
 8007438:	3302      	adds	r3, #2
 800743a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681a      	ldr	r2, [r3, #0]
 8007442:	697b      	ldr	r3, [r7, #20]
 8007444:	005b      	lsls	r3, r3, #1
 8007446:	2103      	movs	r1, #3
 8007448:	fa01 f303 	lsl.w	r3, r1, r3
 800744c:	43db      	mvns	r3, r3
 800744e:	401a      	ands	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	08da      	lsrs	r2, r3, #3
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	3208      	adds	r2, #8
 800745c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	f003 0307 	and.w	r3, r3, #7
 8007466:	009b      	lsls	r3, r3, #2
 8007468:	220f      	movs	r2, #15
 800746a:	fa02 f303 	lsl.w	r3, r2, r3
 800746e:	43db      	mvns	r3, r3
 8007470:	697a      	ldr	r2, [r7, #20]
 8007472:	08d2      	lsrs	r2, r2, #3
 8007474:	4019      	ands	r1, r3
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	3208      	adds	r2, #8
 800747a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	68da      	ldr	r2, [r3, #12]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	005b      	lsls	r3, r3, #1
 8007486:	2103      	movs	r1, #3
 8007488:	fa01 f303 	lsl.w	r3, r1, r3
 800748c:	43db      	mvns	r3, r3
 800748e:	401a      	ands	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	685a      	ldr	r2, [r3, #4]
 8007498:	2101      	movs	r1, #1
 800749a:	697b      	ldr	r3, [r7, #20]
 800749c:	fa01 f303 	lsl.w	r3, r1, r3
 80074a0:	43db      	mvns	r3, r3
 80074a2:	401a      	ands	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	689a      	ldr	r2, [r3, #8]
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	005b      	lsls	r3, r3, #1
 80074b0:	2103      	movs	r1, #3
 80074b2:	fa01 f303 	lsl.w	r3, r1, r3
 80074b6:	43db      	mvns	r3, r3
 80074b8:	401a      	ands	r2, r3
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80074be:	697b      	ldr	r3, [r7, #20]
 80074c0:	3301      	adds	r3, #1
 80074c2:	617b      	str	r3, [r7, #20]
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	2b0f      	cmp	r3, #15
 80074c8:	f67f af22 	bls.w	8007310 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	371c      	adds	r7, #28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074d8:	4770      	bx	lr
 80074da:	bf00      	nop
 80074dc:	40013800 	.word	0x40013800
 80074e0:	40020000 	.word	0x40020000
 80074e4:	40020400 	.word	0x40020400
 80074e8:	40020800 	.word	0x40020800
 80074ec:	40020c00 	.word	0x40020c00
 80074f0:	40021000 	.word	0x40021000
 80074f4:	40021400 	.word	0x40021400
 80074f8:	40021800 	.word	0x40021800
 80074fc:	40021c00 	.word	0x40021c00
 8007500:	40022000 	.word	0x40022000
 8007504:	40022400 	.word	0x40022400
 8007508:	40013c00 	.word	0x40013c00

0800750c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800750c:	b480      	push	{r7}
 800750e:	b085      	sub	sp, #20
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	460b      	mov	r3, r1
 8007516:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	691a      	ldr	r2, [r3, #16]
 800751c:	887b      	ldrh	r3, [r7, #2]
 800751e:	4013      	ands	r3, r2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007524:	2301      	movs	r3, #1
 8007526:	73fb      	strb	r3, [r7, #15]
 8007528:	e001      	b.n	800752e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800752a:	2300      	movs	r3, #0
 800752c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800752e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007530:	4618      	mov	r0, r3
 8007532:	3714      	adds	r7, #20
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr

0800753c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800753c:	b480      	push	{r7}
 800753e:	b083      	sub	sp, #12
 8007540:	af00      	add	r7, sp, #0
 8007542:	6078      	str	r0, [r7, #4]
 8007544:	460b      	mov	r3, r1
 8007546:	807b      	strh	r3, [r7, #2]
 8007548:	4613      	mov	r3, r2
 800754a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800754c:	787b      	ldrb	r3, [r7, #1]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d003      	beq.n	800755a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007552:	887a      	ldrh	r2, [r7, #2]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8007558:	e003      	b.n	8007562 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800755a:	887b      	ldrh	r3, [r7, #2]
 800755c:	041a      	lsls	r2, r3, #16
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	619a      	str	r2, [r3, #24]
}
 8007562:	bf00      	nop
 8007564:	370c      	adds	r7, #12
 8007566:	46bd      	mov	sp, r7
 8007568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756c:	4770      	bx	lr
	...

08007570 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d101      	bne.n	8007582 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e07f      	b.n	8007682 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007588:	b2db      	uxtb	r3, r3
 800758a:	2b00      	cmp	r3, #0
 800758c:	d106      	bne.n	800759c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2200      	movs	r2, #0
 8007592:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007596:	6878      	ldr	r0, [r7, #4]
 8007598:	f7fd fd86 	bl	80050a8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2224      	movs	r2, #36	; 0x24
 80075a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	681a      	ldr	r2, [r3, #0]
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	f022 0201 	bic.w	r2, r2, #1
 80075b2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	685a      	ldr	r2, [r3, #4]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80075c0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	689a      	ldr	r2, [r3, #8]
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	681b      	ldr	r3, [r3, #0]
 80075cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80075d0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	68db      	ldr	r3, [r3, #12]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d107      	bne.n	80075ea <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	689a      	ldr	r2, [r3, #8]
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80075e6:	609a      	str	r2, [r3, #8]
 80075e8:	e006      	b.n	80075f8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	689a      	ldr	r2, [r3, #8]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80075f6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b02      	cmp	r3, #2
 80075fe:	d104      	bne.n	800760a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007608:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	6859      	ldr	r1, [r3, #4]
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	4b1d      	ldr	r3, [pc, #116]	; (800768c <HAL_I2C_Init+0x11c>)
 8007616:	430b      	orrs	r3, r1
 8007618:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	68da      	ldr	r2, [r3, #12]
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007628:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	691a      	ldr	r2, [r3, #16]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	695b      	ldr	r3, [r3, #20]
 8007632:	ea42 0103 	orr.w	r1, r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	699b      	ldr	r3, [r3, #24]
 800763a:	021a      	lsls	r2, r3, #8
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	430a      	orrs	r2, r1
 8007642:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	69d9      	ldr	r1, [r3, #28]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	6a1a      	ldr	r2, [r3, #32]
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	430a      	orrs	r2, r1
 8007652:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	681a      	ldr	r2, [r3, #0]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f042 0201 	orr.w	r2, r2, #1
 8007662:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	2200      	movs	r2, #0
 8007668:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2220      	movs	r2, #32
 800766e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2200      	movs	r2, #0
 8007676:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}
 800768a:	bf00      	nop
 800768c:	02008000 	.word	0x02008000

08007690 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007690:	b580      	push	{r7, lr}
 8007692:	b082      	sub	sp, #8
 8007694:	af00      	add	r7, sp, #0
 8007696:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	2b00      	cmp	r3, #0
 800769c:	d101      	bne.n	80076a2 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800769e:	2301      	movs	r3, #1
 80076a0:	e021      	b.n	80076e6 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2224      	movs	r2, #36	; 0x24
 80076a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681a      	ldr	r2, [r3, #0]
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f022 0201 	bic.w	r2, r2, #1
 80076b8:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80076ba:	6878      	ldr	r0, [r7, #4]
 80076bc:	f7fd fd6c 	bl	8005198 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	2200      	movs	r2, #0
 80076c4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	2200      	movs	r2, #0
 80076ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2200      	movs	r2, #0
 80076d2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	2200      	movs	r2, #0
 80076d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80076e4:	2300      	movs	r3, #0
}
 80076e6:	4618      	mov	r0, r3
 80076e8:	3708      	adds	r7, #8
 80076ea:	46bd      	mov	sp, r7
 80076ec:	bd80      	pop	{r7, pc}
	...

080076f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b088      	sub	sp, #32
 80076f4:	af02      	add	r7, sp, #8
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	4608      	mov	r0, r1
 80076fa:	4611      	mov	r1, r2
 80076fc:	461a      	mov	r2, r3
 80076fe:	4603      	mov	r3, r0
 8007700:	817b      	strh	r3, [r7, #10]
 8007702:	460b      	mov	r3, r1
 8007704:	813b      	strh	r3, [r7, #8]
 8007706:	4613      	mov	r3, r2
 8007708:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007710:	b2db      	uxtb	r3, r3
 8007712:	2b20      	cmp	r3, #32
 8007714:	f040 80f9 	bne.w	800790a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d002      	beq.n	8007724 <HAL_I2C_Mem_Write+0x34>
 800771e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007720:	2b00      	cmp	r3, #0
 8007722:	d105      	bne.n	8007730 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f44f 7200 	mov.w	r2, #512	; 0x200
 800772a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800772c:	2301      	movs	r3, #1
 800772e:	e0ed      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007736:	2b01      	cmp	r3, #1
 8007738:	d101      	bne.n	800773e <HAL_I2C_Mem_Write+0x4e>
 800773a:	2302      	movs	r3, #2
 800773c:	e0e6      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	2201      	movs	r2, #1
 8007742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8007746:	f7fe fa03 	bl	8005b50 <HAL_GetTick>
 800774a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	9300      	str	r3, [sp, #0]
 8007750:	2319      	movs	r3, #25
 8007752:	2201      	movs	r2, #1
 8007754:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007758:	68f8      	ldr	r0, [r7, #12]
 800775a:	f000 fad1 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 800775e:	4603      	mov	r3, r0
 8007760:	2b00      	cmp	r3, #0
 8007762:	d001      	beq.n	8007768 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8007764:	2301      	movs	r3, #1
 8007766:	e0d1      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2221      	movs	r2, #33	; 0x21
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	2240      	movs	r2, #64	; 0x40
 8007774:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007778:	68fb      	ldr	r3, [r7, #12]
 800777a:	2200      	movs	r2, #0
 800777c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	6a3a      	ldr	r2, [r7, #32]
 8007782:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007788:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	2200      	movs	r2, #0
 800778e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007790:	88f8      	ldrh	r0, [r7, #6]
 8007792:	893a      	ldrh	r2, [r7, #8]
 8007794:	8979      	ldrh	r1, [r7, #10]
 8007796:	697b      	ldr	r3, [r7, #20]
 8007798:	9301      	str	r3, [sp, #4]
 800779a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800779c:	9300      	str	r3, [sp, #0]
 800779e:	4603      	mov	r3, r0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 f9e1 	bl	8007b68 <I2C_RequestMemoryWrite>
 80077a6:	4603      	mov	r3, r0
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d005      	beq.n	80077b8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	2200      	movs	r2, #0
 80077b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	e0a9      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077bc:	b29b      	uxth	r3, r3
 80077be:	2bff      	cmp	r3, #255	; 0xff
 80077c0:	d90e      	bls.n	80077e0 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	22ff      	movs	r2, #255	; 0xff
 80077c6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077cc:	b2da      	uxtb	r2, r3
 80077ce:	8979      	ldrh	r1, [r7, #10]
 80077d0:	2300      	movs	r3, #0
 80077d2:	9300      	str	r3, [sp, #0]
 80077d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80077d8:	68f8      	ldr	r0, [r7, #12]
 80077da:	f000 fbb3 	bl	8007f44 <I2C_TransferConfig>
 80077de:	e00f      	b.n	8007800 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80077e4:	b29a      	uxth	r2, r3
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80077ee:	b2da      	uxtb	r2, r3
 80077f0:	8979      	ldrh	r1, [r7, #10]
 80077f2:	2300      	movs	r3, #0
 80077f4:	9300      	str	r3, [sp, #0]
 80077f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80077fa:	68f8      	ldr	r0, [r7, #12]
 80077fc:	f000 fba2 	bl	8007f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007800:	697a      	ldr	r2, [r7, #20]
 8007802:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007804:	68f8      	ldr	r0, [r7, #12]
 8007806:	f000 fabb 	bl	8007d80 <I2C_WaitOnTXISFlagUntilTimeout>
 800780a:	4603      	mov	r3, r0
 800780c:	2b00      	cmp	r3, #0
 800780e:	d001      	beq.n	8007814 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007810:	2301      	movs	r3, #1
 8007812:	e07b      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007818:	781a      	ldrb	r2, [r3, #0]
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007824:	1c5a      	adds	r2, r3, #1
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800782e:	b29b      	uxth	r3, r3
 8007830:	3b01      	subs	r3, #1
 8007832:	b29a      	uxth	r2, r3
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800783c:	3b01      	subs	r3, #1
 800783e:	b29a      	uxth	r2, r3
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007848:	b29b      	uxth	r3, r3
 800784a:	2b00      	cmp	r3, #0
 800784c:	d034      	beq.n	80078b8 <HAL_I2C_Mem_Write+0x1c8>
 800784e:	68fb      	ldr	r3, [r7, #12]
 8007850:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007852:	2b00      	cmp	r3, #0
 8007854:	d130      	bne.n	80078b8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007856:	697b      	ldr	r3, [r7, #20]
 8007858:	9300      	str	r3, [sp, #0]
 800785a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800785c:	2200      	movs	r2, #0
 800785e:	2180      	movs	r1, #128	; 0x80
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f000 fa4d 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007866:	4603      	mov	r3, r0
 8007868:	2b00      	cmp	r3, #0
 800786a:	d001      	beq.n	8007870 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800786c:	2301      	movs	r3, #1
 800786e:	e04d      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007874:	b29b      	uxth	r3, r3
 8007876:	2bff      	cmp	r3, #255	; 0xff
 8007878:	d90e      	bls.n	8007898 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	22ff      	movs	r2, #255	; 0xff
 800787e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007884:	b2da      	uxtb	r2, r3
 8007886:	8979      	ldrh	r1, [r7, #10]
 8007888:	2300      	movs	r3, #0
 800788a:	9300      	str	r3, [sp, #0]
 800788c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007890:	68f8      	ldr	r0, [r7, #12]
 8007892:	f000 fb57 	bl	8007f44 <I2C_TransferConfig>
 8007896:	e00f      	b.n	80078b8 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800789c:	b29a      	uxth	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078a6:	b2da      	uxtb	r2, r3
 80078a8:	8979      	ldrh	r1, [r7, #10]
 80078aa:	2300      	movs	r3, #0
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 fb46 	bl	8007f44 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078bc:	b29b      	uxth	r3, r3
 80078be:	2b00      	cmp	r3, #0
 80078c0:	d19e      	bne.n	8007800 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80078c2:	697a      	ldr	r2, [r7, #20]
 80078c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80078c6:	68f8      	ldr	r0, [r7, #12]
 80078c8:	f000 fa9a 	bl	8007e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 80078cc:	4603      	mov	r3, r0
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d001      	beq.n	80078d6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80078d2:	2301      	movs	r3, #1
 80078d4:	e01a      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	2220      	movs	r2, #32
 80078dc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	6859      	ldr	r1, [r3, #4]
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	681a      	ldr	r2, [r3, #0]
 80078e8:	4b0a      	ldr	r3, [pc, #40]	; (8007914 <HAL_I2C_Mem_Write+0x224>)
 80078ea:	400b      	ands	r3, r1
 80078ec:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	2220      	movs	r2, #32
 80078f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	2200      	movs	r2, #0
 80078fa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	2200      	movs	r2, #0
 8007902:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007906:	2300      	movs	r3, #0
 8007908:	e000      	b.n	800790c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800790a:	2302      	movs	r3, #2
  }
}
 800790c:	4618      	mov	r0, r3
 800790e:	3718      	adds	r7, #24
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	fe00e800 	.word	0xfe00e800

08007918 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b088      	sub	sp, #32
 800791c:	af02      	add	r7, sp, #8
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	4608      	mov	r0, r1
 8007922:	4611      	mov	r1, r2
 8007924:	461a      	mov	r2, r3
 8007926:	4603      	mov	r3, r0
 8007928:	817b      	strh	r3, [r7, #10]
 800792a:	460b      	mov	r3, r1
 800792c:	813b      	strh	r3, [r7, #8]
 800792e:	4613      	mov	r3, r2
 8007930:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007938:	b2db      	uxtb	r3, r3
 800793a:	2b20      	cmp	r3, #32
 800793c:	f040 80fd 	bne.w	8007b3a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8007940:	6a3b      	ldr	r3, [r7, #32]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d002      	beq.n	800794c <HAL_I2C_Mem_Read+0x34>
 8007946:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007948:	2b00      	cmp	r3, #0
 800794a:	d105      	bne.n	8007958 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800794c:	68fb      	ldr	r3, [r7, #12]
 800794e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007952:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8007954:	2301      	movs	r3, #1
 8007956:	e0f1      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800795e:	2b01      	cmp	r3, #1
 8007960:	d101      	bne.n	8007966 <HAL_I2C_Mem_Read+0x4e>
 8007962:	2302      	movs	r3, #2
 8007964:	e0ea      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	2201      	movs	r2, #1
 800796a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800796e:	f7fe f8ef 	bl	8005b50 <HAL_GetTick>
 8007972:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007974:	697b      	ldr	r3, [r7, #20]
 8007976:	9300      	str	r3, [sp, #0]
 8007978:	2319      	movs	r3, #25
 800797a:	2201      	movs	r2, #1
 800797c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007980:	68f8      	ldr	r0, [r7, #12]
 8007982:	f000 f9bd 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007986:	4603      	mov	r3, r0
 8007988:	2b00      	cmp	r3, #0
 800798a:	d001      	beq.n	8007990 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	e0d5      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2222      	movs	r2, #34	; 0x22
 8007994:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2240      	movs	r2, #64	; 0x40
 800799c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	6a3a      	ldr	r2, [r7, #32]
 80079aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80079b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80079b8:	88f8      	ldrh	r0, [r7, #6]
 80079ba:	893a      	ldrh	r2, [r7, #8]
 80079bc:	8979      	ldrh	r1, [r7, #10]
 80079be:	697b      	ldr	r3, [r7, #20]
 80079c0:	9301      	str	r3, [sp, #4]
 80079c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079c4:	9300      	str	r3, [sp, #0]
 80079c6:	4603      	mov	r3, r0
 80079c8:	68f8      	ldr	r0, [r7, #12]
 80079ca:	f000 f921 	bl	8007c10 <I2C_RequestMemoryRead>
 80079ce:	4603      	mov	r3, r0
 80079d0:	2b00      	cmp	r3, #0
 80079d2:	d005      	beq.n	80079e0 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2200      	movs	r2, #0
 80079d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80079dc:	2301      	movs	r3, #1
 80079de:	e0ad      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80079e4:	b29b      	uxth	r3, r3
 80079e6:	2bff      	cmp	r3, #255	; 0xff
 80079e8:	d90e      	bls.n	8007a08 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	22ff      	movs	r2, #255	; 0xff
 80079ee:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80079f4:	b2da      	uxtb	r2, r3
 80079f6:	8979      	ldrh	r1, [r7, #10]
 80079f8:	4b52      	ldr	r3, [pc, #328]	; (8007b44 <HAL_I2C_Mem_Read+0x22c>)
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a00:	68f8      	ldr	r0, [r7, #12]
 8007a02:	f000 fa9f 	bl	8007f44 <I2C_TransferConfig>
 8007a06:	e00f      	b.n	8007a28 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a0c:	b29a      	uxth	r2, r3
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a16:	b2da      	uxtb	r2, r3
 8007a18:	8979      	ldrh	r1, [r7, #10]
 8007a1a:	4b4a      	ldr	r3, [pc, #296]	; (8007b44 <HAL_I2C_Mem_Read+0x22c>)
 8007a1c:	9300      	str	r3, [sp, #0]
 8007a1e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007a22:	68f8      	ldr	r0, [r7, #12]
 8007a24:	f000 fa8e 	bl	8007f44 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007a28:	697b      	ldr	r3, [r7, #20]
 8007a2a:	9300      	str	r3, [sp, #0]
 8007a2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a2e:	2200      	movs	r2, #0
 8007a30:	2104      	movs	r1, #4
 8007a32:	68f8      	ldr	r0, [r7, #12]
 8007a34:	f000 f964 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007a38:	4603      	mov	r3, r0
 8007a3a:	2b00      	cmp	r3, #0
 8007a3c:	d001      	beq.n	8007a42 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8007a3e:	2301      	movs	r3, #1
 8007a40:	e07c      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a4c:	b2d2      	uxtb	r2, r2
 8007a4e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a54:	1c5a      	adds	r2, r3, #1
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	b29a      	uxth	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a6a:	b29b      	uxth	r3, r3
 8007a6c:	3b01      	subs	r3, #1
 8007a6e:	b29a      	uxth	r2, r3
 8007a70:	68fb      	ldr	r3, [r7, #12]
 8007a72:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a78:	b29b      	uxth	r3, r3
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d034      	beq.n	8007ae8 <HAL_I2C_Mem_Read+0x1d0>
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d130      	bne.n	8007ae8 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007a86:	697b      	ldr	r3, [r7, #20]
 8007a88:	9300      	str	r3, [sp, #0]
 8007a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a8c:	2200      	movs	r2, #0
 8007a8e:	2180      	movs	r1, #128	; 0x80
 8007a90:	68f8      	ldr	r0, [r7, #12]
 8007a92:	f000 f935 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007a96:	4603      	mov	r3, r0
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d001      	beq.n	8007aa0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8007a9c:	2301      	movs	r3, #1
 8007a9e:	e04d      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	2bff      	cmp	r3, #255	; 0xff
 8007aa8:	d90e      	bls.n	8007ac8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	22ff      	movs	r2, #255	; 0xff
 8007aae:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab4:	b2da      	uxtb	r2, r3
 8007ab6:	8979      	ldrh	r1, [r7, #10]
 8007ab8:	2300      	movs	r3, #0
 8007aba:	9300      	str	r3, [sp, #0]
 8007abc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 fa3f 	bl	8007f44 <I2C_TransferConfig>
 8007ac6:	e00f      	b.n	8007ae8 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007acc:	b29a      	uxth	r2, r3
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad6:	b2da      	uxtb	r2, r3
 8007ad8:	8979      	ldrh	r1, [r7, #10]
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 fa2e 	bl	8007f44 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29b      	uxth	r3, r3
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d19a      	bne.n	8007a28 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007af2:	697a      	ldr	r2, [r7, #20]
 8007af4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007af6:	68f8      	ldr	r0, [r7, #12]
 8007af8:	f000 f982 	bl	8007e00 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007afc:	4603      	mov	r3, r0
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d001      	beq.n	8007b06 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007b02:	2301      	movs	r3, #1
 8007b04:	e01a      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007b0e:	68fb      	ldr	r3, [r7, #12]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	6859      	ldr	r1, [r3, #4]
 8007b14:	68fb      	ldr	r3, [r7, #12]
 8007b16:	681a      	ldr	r2, [r3, #0]
 8007b18:	4b0b      	ldr	r3, [pc, #44]	; (8007b48 <HAL_I2C_Mem_Read+0x230>)
 8007b1a:	400b      	ands	r3, r1
 8007b1c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	2220      	movs	r2, #32
 8007b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	2200      	movs	r2, #0
 8007b2a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007b36:	2300      	movs	r3, #0
 8007b38:	e000      	b.n	8007b3c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8007b3a:	2302      	movs	r3, #2
  }
}
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	3718      	adds	r7, #24
 8007b40:	46bd      	mov	sp, r7
 8007b42:	bd80      	pop	{r7, pc}
 8007b44:	80002400 	.word	0x80002400
 8007b48:	fe00e800 	.word	0xfe00e800

08007b4c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5a:	b2db      	uxtb	r3, r3
}
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	370c      	adds	r7, #12
 8007b60:	46bd      	mov	sp, r7
 8007b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b66:	4770      	bx	lr

08007b68 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007b68:	b580      	push	{r7, lr}
 8007b6a:	b086      	sub	sp, #24
 8007b6c:	af02      	add	r7, sp, #8
 8007b6e:	60f8      	str	r0, [r7, #12]
 8007b70:	4608      	mov	r0, r1
 8007b72:	4611      	mov	r1, r2
 8007b74:	461a      	mov	r2, r3
 8007b76:	4603      	mov	r3, r0
 8007b78:	817b      	strh	r3, [r7, #10]
 8007b7a:	460b      	mov	r3, r1
 8007b7c:	813b      	strh	r3, [r7, #8]
 8007b7e:	4613      	mov	r3, r2
 8007b80:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b82:	88fb      	ldrh	r3, [r7, #6]
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	8979      	ldrh	r1, [r7, #10]
 8007b88:	4b20      	ldr	r3, [pc, #128]	; (8007c0c <I2C_RequestMemoryWrite+0xa4>)
 8007b8a:	9300      	str	r3, [sp, #0]
 8007b8c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007b90:	68f8      	ldr	r0, [r7, #12]
 8007b92:	f000 f9d7 	bl	8007f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b96:	69fa      	ldr	r2, [r7, #28]
 8007b98:	69b9      	ldr	r1, [r7, #24]
 8007b9a:	68f8      	ldr	r0, [r7, #12]
 8007b9c:	f000 f8f0 	bl	8007d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ba0:	4603      	mov	r3, r0
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d001      	beq.n	8007baa <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e02c      	b.n	8007c04 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007baa:	88fb      	ldrh	r3, [r7, #6]
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d105      	bne.n	8007bbc <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bb0:	893b      	ldrh	r3, [r7, #8]
 8007bb2:	b2da      	uxtb	r2, r3
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	629a      	str	r2, [r3, #40]	; 0x28
 8007bba:	e015      	b.n	8007be8 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007bbc:	893b      	ldrh	r3, [r7, #8]
 8007bbe:	0a1b      	lsrs	r3, r3, #8
 8007bc0:	b29b      	uxth	r3, r3
 8007bc2:	b2da      	uxtb	r2, r3
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	69b9      	ldr	r1, [r7, #24]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 f8d6 	bl	8007d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	2b00      	cmp	r3, #0
 8007bd8:	d001      	beq.n	8007bde <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007bda:	2301      	movs	r3, #1
 8007bdc:	e012      	b.n	8007c04 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007bde:	893b      	ldrh	r3, [r7, #8]
 8007be0:	b2da      	uxtb	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007be8:	69fb      	ldr	r3, [r7, #28]
 8007bea:	9300      	str	r3, [sp, #0]
 8007bec:	69bb      	ldr	r3, [r7, #24]
 8007bee:	2200      	movs	r2, #0
 8007bf0:	2180      	movs	r1, #128	; 0x80
 8007bf2:	68f8      	ldr	r0, [r7, #12]
 8007bf4:	f000 f884 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007bf8:	4603      	mov	r3, r0
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d001      	beq.n	8007c02 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007bfe:	2301      	movs	r3, #1
 8007c00:	e000      	b.n	8007c04 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007c02:	2300      	movs	r3, #0
}
 8007c04:	4618      	mov	r0, r3
 8007c06:	3710      	adds	r7, #16
 8007c08:	46bd      	mov	sp, r7
 8007c0a:	bd80      	pop	{r7, pc}
 8007c0c:	80002000 	.word	0x80002000

08007c10 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007c10:	b580      	push	{r7, lr}
 8007c12:	b086      	sub	sp, #24
 8007c14:	af02      	add	r7, sp, #8
 8007c16:	60f8      	str	r0, [r7, #12]
 8007c18:	4608      	mov	r0, r1
 8007c1a:	4611      	mov	r1, r2
 8007c1c:	461a      	mov	r2, r3
 8007c1e:	4603      	mov	r3, r0
 8007c20:	817b      	strh	r3, [r7, #10]
 8007c22:	460b      	mov	r3, r1
 8007c24:	813b      	strh	r3, [r7, #8]
 8007c26:	4613      	mov	r3, r2
 8007c28:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007c2a:	88fb      	ldrh	r3, [r7, #6]
 8007c2c:	b2da      	uxtb	r2, r3
 8007c2e:	8979      	ldrh	r1, [r7, #10]
 8007c30:	4b20      	ldr	r3, [pc, #128]	; (8007cb4 <I2C_RequestMemoryRead+0xa4>)
 8007c32:	9300      	str	r3, [sp, #0]
 8007c34:	2300      	movs	r3, #0
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f984 	bl	8007f44 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c3c:	69fa      	ldr	r2, [r7, #28]
 8007c3e:	69b9      	ldr	r1, [r7, #24]
 8007c40:	68f8      	ldr	r0, [r7, #12]
 8007c42:	f000 f89d 	bl	8007d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c46:	4603      	mov	r3, r0
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d001      	beq.n	8007c50 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e02c      	b.n	8007caa <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007c50:	88fb      	ldrh	r3, [r7, #6]
 8007c52:	2b01      	cmp	r3, #1
 8007c54:	d105      	bne.n	8007c62 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c56:	893b      	ldrh	r3, [r7, #8]
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c60:	e015      	b.n	8007c8e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007c62:	893b      	ldrh	r3, [r7, #8]
 8007c64:	0a1b      	lsrs	r3, r3, #8
 8007c66:	b29b      	uxth	r3, r3
 8007c68:	b2da      	uxtb	r2, r3
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c70:	69fa      	ldr	r2, [r7, #28]
 8007c72:	69b9      	ldr	r1, [r7, #24]
 8007c74:	68f8      	ldr	r0, [r7, #12]
 8007c76:	f000 f883 	bl	8007d80 <I2C_WaitOnTXISFlagUntilTimeout>
 8007c7a:	4603      	mov	r3, r0
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d001      	beq.n	8007c84 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007c80:	2301      	movs	r3, #1
 8007c82:	e012      	b.n	8007caa <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007c84:	893b      	ldrh	r3, [r7, #8]
 8007c86:	b2da      	uxtb	r2, r3
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007c8e:	69fb      	ldr	r3, [r7, #28]
 8007c90:	9300      	str	r3, [sp, #0]
 8007c92:	69bb      	ldr	r3, [r7, #24]
 8007c94:	2200      	movs	r2, #0
 8007c96:	2140      	movs	r1, #64	; 0x40
 8007c98:	68f8      	ldr	r0, [r7, #12]
 8007c9a:	f000 f831 	bl	8007d00 <I2C_WaitOnFlagUntilTimeout>
 8007c9e:	4603      	mov	r3, r0
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d001      	beq.n	8007ca8 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007ca4:	2301      	movs	r3, #1
 8007ca6:	e000      	b.n	8007caa <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007ca8:	2300      	movs	r3, #0
}
 8007caa:	4618      	mov	r0, r3
 8007cac:	3710      	adds	r7, #16
 8007cae:	46bd      	mov	sp, r7
 8007cb0:	bd80      	pop	{r7, pc}
 8007cb2:	bf00      	nop
 8007cb4:	80002000 	.word	0x80002000

08007cb8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007cb8:	b480      	push	{r7}
 8007cba:	b083      	sub	sp, #12
 8007cbc:	af00      	add	r7, sp, #0
 8007cbe:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	699b      	ldr	r3, [r3, #24]
 8007cc6:	f003 0302 	and.w	r3, r3, #2
 8007cca:	2b02      	cmp	r3, #2
 8007ccc:	d103      	bne.n	8007cd6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	2200      	movs	r2, #0
 8007cd4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	699b      	ldr	r3, [r3, #24]
 8007cdc:	f003 0301 	and.w	r3, r3, #1
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d007      	beq.n	8007cf4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	699a      	ldr	r2, [r3, #24]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f042 0201 	orr.w	r2, r2, #1
 8007cf2:	619a      	str	r2, [r3, #24]
  }
}
 8007cf4:	bf00      	nop
 8007cf6:	370c      	adds	r7, #12
 8007cf8:	46bd      	mov	sp, r7
 8007cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cfe:	4770      	bx	lr

08007d00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b084      	sub	sp, #16
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	60f8      	str	r0, [r7, #12]
 8007d08:	60b9      	str	r1, [r7, #8]
 8007d0a:	603b      	str	r3, [r7, #0]
 8007d0c:	4613      	mov	r3, r2
 8007d0e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d10:	e022      	b.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007d12:	683b      	ldr	r3, [r7, #0]
 8007d14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d18:	d01e      	beq.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1a:	f7fd ff19 	bl	8005b50 <HAL_GetTick>
 8007d1e:	4602      	mov	r2, r0
 8007d20:	69bb      	ldr	r3, [r7, #24]
 8007d22:	1ad3      	subs	r3, r2, r3
 8007d24:	683a      	ldr	r2, [r7, #0]
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d302      	bcc.n	8007d30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d113      	bne.n	8007d58 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d34:	f043 0220 	orr.w	r2, r3, #32
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	2220      	movs	r2, #32
 8007d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d44:	68fb      	ldr	r3, [r7, #12]
 8007d46:	2200      	movs	r2, #0
 8007d48:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007d4c:	68fb      	ldr	r3, [r7, #12]
 8007d4e:	2200      	movs	r2, #0
 8007d50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007d54:	2301      	movs	r3, #1
 8007d56:	e00f      	b.n	8007d78 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	699a      	ldr	r2, [r3, #24]
 8007d5e:	68bb      	ldr	r3, [r7, #8]
 8007d60:	4013      	ands	r3, r2
 8007d62:	68ba      	ldr	r2, [r7, #8]
 8007d64:	429a      	cmp	r2, r3
 8007d66:	bf0c      	ite	eq
 8007d68:	2301      	moveq	r3, #1
 8007d6a:	2300      	movne	r3, #0
 8007d6c:	b2db      	uxtb	r3, r3
 8007d6e:	461a      	mov	r2, r3
 8007d70:	79fb      	ldrb	r3, [r7, #7]
 8007d72:	429a      	cmp	r2, r3
 8007d74:	d0cd      	beq.n	8007d12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007d76:	2300      	movs	r3, #0
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3710      	adds	r7, #16
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	60f8      	str	r0, [r7, #12]
 8007d88:	60b9      	str	r1, [r7, #8]
 8007d8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007d8c:	e02c      	b.n	8007de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d8e:	687a      	ldr	r2, [r7, #4]
 8007d90:	68b9      	ldr	r1, [r7, #8]
 8007d92:	68f8      	ldr	r0, [r7, #12]
 8007d94:	f000 f870 	bl	8007e78 <I2C_IsAcknowledgeFailed>
 8007d98:	4603      	mov	r3, r0
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d001      	beq.n	8007da2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007d9e:	2301      	movs	r3, #1
 8007da0:	e02a      	b.n	8007df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007da2:	68bb      	ldr	r3, [r7, #8]
 8007da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007da8:	d01e      	beq.n	8007de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007daa:	f7fd fed1 	bl	8005b50 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	68ba      	ldr	r2, [r7, #8]
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d302      	bcc.n	8007dc0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007dba:	68bb      	ldr	r3, [r7, #8]
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d113      	bne.n	8007de8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc4:	f043 0220 	orr.w	r2, r3, #32
 8007dc8:	68fb      	ldr	r3, [r7, #12]
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	2220      	movs	r2, #32
 8007dd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	2200      	movs	r2, #0
 8007de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007de4:	2301      	movs	r3, #1
 8007de6:	e007      	b.n	8007df8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	699b      	ldr	r3, [r3, #24]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b02      	cmp	r3, #2
 8007df4:	d1cb      	bne.n	8007d8e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007df6:	2300      	movs	r3, #0
}
 8007df8:	4618      	mov	r0, r3
 8007dfa:	3710      	adds	r7, #16
 8007dfc:	46bd      	mov	sp, r7
 8007dfe:	bd80      	pop	{r7, pc}

08007e00 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e00:	b580      	push	{r7, lr}
 8007e02:	b084      	sub	sp, #16
 8007e04:	af00      	add	r7, sp, #0
 8007e06:	60f8      	str	r0, [r7, #12]
 8007e08:	60b9      	str	r1, [r7, #8]
 8007e0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e0c:	e028      	b.n	8007e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007e0e:	687a      	ldr	r2, [r7, #4]
 8007e10:	68b9      	ldr	r1, [r7, #8]
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f000 f830 	bl	8007e78 <I2C_IsAcknowledgeFailed>
 8007e18:	4603      	mov	r3, r0
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d001      	beq.n	8007e22 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007e1e:	2301      	movs	r3, #1
 8007e20:	e026      	b.n	8007e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e22:	f7fd fe95 	bl	8005b50 <HAL_GetTick>
 8007e26:	4602      	mov	r2, r0
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	1ad3      	subs	r3, r2, r3
 8007e2c:	68ba      	ldr	r2, [r7, #8]
 8007e2e:	429a      	cmp	r2, r3
 8007e30:	d302      	bcc.n	8007e38 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007e32:	68bb      	ldr	r3, [r7, #8]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	d113      	bne.n	8007e60 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e3c:	f043 0220 	orr.w	r2, r3, #32
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	2220      	movs	r2, #32
 8007e48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e4c:	68fb      	ldr	r3, [r7, #12]
 8007e4e:	2200      	movs	r2, #0
 8007e50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	2200      	movs	r2, #0
 8007e58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007e5c:	2301      	movs	r3, #1
 8007e5e:	e007      	b.n	8007e70 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	699b      	ldr	r3, [r3, #24]
 8007e66:	f003 0320 	and.w	r3, r3, #32
 8007e6a:	2b20      	cmp	r3, #32
 8007e6c:	d1cf      	bne.n	8007e0e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007e6e:	2300      	movs	r3, #0
}
 8007e70:	4618      	mov	r0, r3
 8007e72:	3710      	adds	r7, #16
 8007e74:	46bd      	mov	sp, r7
 8007e76:	bd80      	pop	{r7, pc}

08007e78 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007e78:	b580      	push	{r7, lr}
 8007e7a:	b084      	sub	sp, #16
 8007e7c:	af00      	add	r7, sp, #0
 8007e7e:	60f8      	str	r0, [r7, #12]
 8007e80:	60b9      	str	r1, [r7, #8]
 8007e82:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	699b      	ldr	r3, [r3, #24]
 8007e8a:	f003 0310 	and.w	r3, r3, #16
 8007e8e:	2b10      	cmp	r3, #16
 8007e90:	d151      	bne.n	8007f36 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007e92:	e022      	b.n	8007eda <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007e94:	68bb      	ldr	r3, [r7, #8]
 8007e96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007e9a:	d01e      	beq.n	8007eda <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007e9c:	f7fd fe58 	bl	8005b50 <HAL_GetTick>
 8007ea0:	4602      	mov	r2, r0
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad3      	subs	r3, r2, r3
 8007ea6:	68ba      	ldr	r2, [r7, #8]
 8007ea8:	429a      	cmp	r2, r3
 8007eaa:	d302      	bcc.n	8007eb2 <I2C_IsAcknowledgeFailed+0x3a>
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d113      	bne.n	8007eda <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007eb6:	f043 0220 	orr.w	r2, r3, #32
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	e02e      	b.n	8007f38 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	699b      	ldr	r3, [r3, #24]
 8007ee0:	f003 0320 	and.w	r3, r3, #32
 8007ee4:	2b20      	cmp	r3, #32
 8007ee6:	d1d5      	bne.n	8007e94 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007ee8:	68fb      	ldr	r3, [r7, #12]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	2210      	movs	r2, #16
 8007eee:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	2220      	movs	r2, #32
 8007ef6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff fedd 	bl	8007cb8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6859      	ldr	r1, [r3, #4]
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681a      	ldr	r2, [r3, #0]
 8007f08:	4b0d      	ldr	r3, [pc, #52]	; (8007f40 <I2C_IsAcknowledgeFailed+0xc8>)
 8007f0a:	400b      	ands	r3, r1
 8007f0c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007f0e:	68fb      	ldr	r3, [r7, #12]
 8007f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007f12:	f043 0204 	orr.w	r2, r3, #4
 8007f16:	68fb      	ldr	r3, [r7, #12]
 8007f18:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f22:	68fb      	ldr	r3, [r7, #12]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	2200      	movs	r2, #0
 8007f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007f32:	2301      	movs	r3, #1
 8007f34:	e000      	b.n	8007f38 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007f36:	2300      	movs	r3, #0
}
 8007f38:	4618      	mov	r0, r3
 8007f3a:	3710      	adds	r7, #16
 8007f3c:	46bd      	mov	sp, r7
 8007f3e:	bd80      	pop	{r7, pc}
 8007f40:	fe00e800 	.word	0xfe00e800

08007f44 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007f44:	b480      	push	{r7}
 8007f46:	b085      	sub	sp, #20
 8007f48:	af00      	add	r7, sp, #0
 8007f4a:	60f8      	str	r0, [r7, #12]
 8007f4c:	607b      	str	r3, [r7, #4]
 8007f4e:	460b      	mov	r3, r1
 8007f50:	817b      	strh	r3, [r7, #10]
 8007f52:	4613      	mov	r3, r2
 8007f54:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	685a      	ldr	r2, [r3, #4]
 8007f5c:	69bb      	ldr	r3, [r7, #24]
 8007f5e:	0d5b      	lsrs	r3, r3, #21
 8007f60:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007f64:	4b0d      	ldr	r3, [pc, #52]	; (8007f9c <I2C_TransferConfig+0x58>)
 8007f66:	430b      	orrs	r3, r1
 8007f68:	43db      	mvns	r3, r3
 8007f6a:	ea02 0103 	and.w	r1, r2, r3
 8007f6e:	897b      	ldrh	r3, [r7, #10]
 8007f70:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007f74:	7a7b      	ldrb	r3, [r7, #9]
 8007f76:	041b      	lsls	r3, r3, #16
 8007f78:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007f7c:	431a      	orrs	r2, r3
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	431a      	orrs	r2, r3
 8007f82:	69bb      	ldr	r3, [r7, #24]
 8007f84:	431a      	orrs	r2, r3
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	430a      	orrs	r2, r1
 8007f8c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007f8e:	bf00      	nop
 8007f90:	3714      	adds	r7, #20
 8007f92:	46bd      	mov	sp, r7
 8007f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f98:	4770      	bx	lr
 8007f9a:	bf00      	nop
 8007f9c:	03ff63ff 	.word	0x03ff63ff

08007fa0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007fa0:	b480      	push	{r7}
 8007fa2:	b083      	sub	sp, #12
 8007fa4:	af00      	add	r7, sp, #0
 8007fa6:	6078      	str	r0, [r7, #4]
 8007fa8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fb0:	b2db      	uxtb	r3, r3
 8007fb2:	2b20      	cmp	r3, #32
 8007fb4:	d138      	bne.n	8008028 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007fbc:	2b01      	cmp	r3, #1
 8007fbe:	d101      	bne.n	8007fc4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	e032      	b.n	800802a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2224      	movs	r2, #36	; 0x24
 8007fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	681a      	ldr	r2, [r3, #0]
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f022 0201 	bic.w	r2, r2, #1
 8007fe2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	681a      	ldr	r2, [r3, #0]
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007ff2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6819      	ldr	r1, [r3, #0]
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	683a      	ldr	r2, [r7, #0]
 8008000:	430a      	orrs	r2, r1
 8008002:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	681a      	ldr	r2, [r3, #0]
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	f042 0201 	orr.w	r2, r2, #1
 8008012:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2220      	movs	r2, #32
 8008018:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008024:	2300      	movs	r3, #0
 8008026:	e000      	b.n	800802a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008028:	2302      	movs	r3, #2
  }
}
 800802a:	4618      	mov	r0, r3
 800802c:	370c      	adds	r7, #12
 800802e:	46bd      	mov	sp, r7
 8008030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008034:	4770      	bx	lr

08008036 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008036:	b480      	push	{r7}
 8008038:	b085      	sub	sp, #20
 800803a:	af00      	add	r7, sp, #0
 800803c:	6078      	str	r0, [r7, #4]
 800803e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008046:	b2db      	uxtb	r3, r3
 8008048:	2b20      	cmp	r3, #32
 800804a:	d139      	bne.n	80080c0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008052:	2b01      	cmp	r3, #1
 8008054:	d101      	bne.n	800805a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008056:	2302      	movs	r3, #2
 8008058:	e033      	b.n	80080c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2201      	movs	r2, #1
 800805e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2224      	movs	r2, #36	; 0x24
 8008066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	681a      	ldr	r2, [r3, #0]
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f022 0201 	bic.w	r2, r2, #1
 8008078:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008088:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800808a:	683b      	ldr	r3, [r7, #0]
 800808c:	021b      	lsls	r3, r3, #8
 800808e:	68fa      	ldr	r2, [r7, #12]
 8008090:	4313      	orrs	r3, r2
 8008092:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	681a      	ldr	r2, [r3, #0]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	f042 0201 	orr.w	r2, r2, #1
 80080aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2220      	movs	r2, #32
 80080b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	2200      	movs	r2, #0
 80080b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80080bc:	2300      	movs	r3, #0
 80080be:	e000      	b.n	80080c2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80080c0:	2302      	movs	r3, #2
  }
}
 80080c2:	4618      	mov	r0, r3
 80080c4:	3714      	adds	r7, #20
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
	...

080080d0 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b084      	sub	sp, #16
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d101      	bne.n	80080e2 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80080de:	2301      	movs	r3, #1
 80080e0:	e0bf      	b.n	8008262 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80080e8:	b2db      	uxtb	r3, r3
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d106      	bne.n	80080fc <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	2200      	movs	r2, #0
 80080f2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80080f6:	6878      	ldr	r0, [r7, #4]
 80080f8:	f7fd f88a 	bl	8005210 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2202      	movs	r2, #2
 8008100:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	699a      	ldr	r2, [r3, #24]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8008112:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	6999      	ldr	r1, [r3, #24]
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	685a      	ldr	r2, [r3, #4]
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008128:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	430a      	orrs	r2, r1
 8008136:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	6899      	ldr	r1, [r3, #8]
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	4b4a      	ldr	r3, [pc, #296]	; (800826c <HAL_LTDC_Init+0x19c>)
 8008144:	400b      	ands	r3, r1
 8008146:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	695b      	ldr	r3, [r3, #20]
 800814c:	041b      	lsls	r3, r3, #16
 800814e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	6899      	ldr	r1, [r3, #8]
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	699a      	ldr	r2, [r3, #24]
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	431a      	orrs	r2, r3
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	430a      	orrs	r2, r1
 8008164:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	68d9      	ldr	r1, [r3, #12]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681a      	ldr	r2, [r3, #0]
 8008170:	4b3e      	ldr	r3, [pc, #248]	; (800826c <HAL_LTDC_Init+0x19c>)
 8008172:	400b      	ands	r3, r1
 8008174:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	69db      	ldr	r3, [r3, #28]
 800817a:	041b      	lsls	r3, r3, #16
 800817c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68d9      	ldr	r1, [r3, #12]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	6a1a      	ldr	r2, [r3, #32]
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	431a      	orrs	r2, r3
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	430a      	orrs	r2, r1
 8008192:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	6919      	ldr	r1, [r3, #16]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681a      	ldr	r2, [r3, #0]
 800819e:	4b33      	ldr	r3, [pc, #204]	; (800826c <HAL_LTDC_Init+0x19c>)
 80081a0:	400b      	ands	r3, r1
 80081a2:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a8:	041b      	lsls	r3, r3, #16
 80081aa:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	6919      	ldr	r1, [r3, #16]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	431a      	orrs	r2, r3
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	430a      	orrs	r2, r1
 80081c0:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	6959      	ldr	r1, [r3, #20]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	4b27      	ldr	r3, [pc, #156]	; (800826c <HAL_LTDC_Init+0x19c>)
 80081ce:	400b      	ands	r3, r1
 80081d0:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081d6:	041b      	lsls	r3, r3, #16
 80081d8:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	681b      	ldr	r3, [r3, #0]
 80081de:	6959      	ldr	r1, [r3, #20]
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80081e4:	68fb      	ldr	r3, [r7, #12]
 80081e6:	431a      	orrs	r2, r3
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	430a      	orrs	r2, r1
 80081ee:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80081f6:	021b      	lsls	r3, r3, #8
 80081f8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008200:	041b      	lsls	r3, r3, #16
 8008202:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008212:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800821a:	68ba      	ldr	r2, [r7, #8]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	4313      	orrs	r3, r2
 8008220:	687a      	ldr	r2, [r7, #4]
 8008222:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8008226:	431a      	orrs	r2, r3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	430a      	orrs	r2, r1
 800822e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	f042 0206 	orr.w	r2, r2, #6
 800823e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	681b      	ldr	r3, [r3, #0]
 8008244:	699a      	ldr	r2, [r3, #24]
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	f042 0201 	orr.w	r2, r2, #1
 800824e:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	2200      	movs	r2, #0
 8008254:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	2201      	movs	r2, #1
 800825c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8008260:	2300      	movs	r3, #0
}
 8008262:	4618      	mov	r0, r3
 8008264:	3710      	adds	r7, #16
 8008266:	46bd      	mov	sp, r7
 8008268:	bd80      	pop	{r7, pc}
 800826a:	bf00      	nop
 800826c:	f000f800 	.word	0xf000f800

08008270 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8008270:	b580      	push	{r7, lr}
 8008272:	b084      	sub	sp, #16
 8008274:	af00      	add	r7, sp, #0
 8008276:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	681b      	ldr	r3, [r3, #0]
 800827c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800827e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008286:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	f003 0304 	and.w	r3, r3, #4
 800828e:	2b00      	cmp	r3, #0
 8008290:	d023      	beq.n	80082da <HAL_LTDC_IRQHandler+0x6a>
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f003 0304 	and.w	r3, r3, #4
 8008298:	2b00      	cmp	r3, #0
 800829a:	d01e      	beq.n	80082da <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0204 	bic.w	r2, r2, #4
 80082aa:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	2204      	movs	r2, #4
 80082b2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80082ba:	f043 0201 	orr.w	r2, r3, #1
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	2204      	movs	r2, #4
 80082c8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2200      	movs	r2, #0
 80082d0:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80082d4:	6878      	ldr	r0, [r7, #4]
 80082d6:	f000 f86f 	bl	80083b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f003 0302 	and.w	r3, r3, #2
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d023      	beq.n	800832c <HAL_LTDC_IRQHandler+0xbc>
 80082e4:	68bb      	ldr	r3, [r7, #8]
 80082e6:	f003 0302 	and.w	r3, r3, #2
 80082ea:	2b00      	cmp	r3, #0
 80082ec:	d01e      	beq.n	800832c <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	681b      	ldr	r3, [r3, #0]
 80082f8:	f022 0202 	bic.w	r2, r2, #2
 80082fc:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	2202      	movs	r2, #2
 8008304:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800830c:	f043 0202 	orr.w	r2, r3, #2
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2204      	movs	r2, #4
 800831a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	2200      	movs	r2, #0
 8008322:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 f846 	bl	80083b8 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	f003 0301 	and.w	r3, r3, #1
 8008332:	2b00      	cmp	r3, #0
 8008334:	d01b      	beq.n	800836e <HAL_LTDC_IRQHandler+0xfe>
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	f003 0301 	and.w	r3, r3, #1
 800833c:	2b00      	cmp	r3, #0
 800833e:	d016      	beq.n	800836e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	f022 0201 	bic.w	r2, r2, #1
 800834e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	2201      	movs	r2, #1
 8008356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2201      	movs	r2, #1
 800835c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	2200      	movs	r2, #0
 8008364:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f82f 	bl	80083cc <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	f003 0308 	and.w	r3, r3, #8
 8008374:	2b00      	cmp	r3, #0
 8008376:	d01b      	beq.n	80083b0 <HAL_LTDC_IRQHandler+0x140>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f003 0308 	and.w	r3, r3, #8
 800837e:	2b00      	cmp	r3, #0
 8008380:	d016      	beq.n	80083b0 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f022 0208 	bic.w	r2, r2, #8
 8008390:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	2208      	movs	r2, #8
 8008398:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	2201      	movs	r2, #1
 800839e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	2200      	movs	r2, #0
 80083a6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f000 f818 	bl	80083e0 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80083b0:	bf00      	nop
 80083b2:	3710      	adds	r7, #16
 80083b4:	46bd      	mov	sp, r7
 80083b6:	bd80      	pop	{r7, pc}

080083b8 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b083      	sub	sp, #12
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80083c0:	bf00      	nop
 80083c2:	370c      	adds	r7, #12
 80083c4:	46bd      	mov	sp, r7
 80083c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ca:	4770      	bx	lr

080083cc <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083cc:	b480      	push	{r7}
 80083ce:	b083      	sub	sp, #12
 80083d0:	af00      	add	r7, sp, #0
 80083d2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80083d4:	bf00      	nop
 80083d6:	370c      	adds	r7, #12
 80083d8:	46bd      	mov	sp, r7
 80083da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083de:	4770      	bx	lr

080083e0 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80083e0:	b480      	push	{r7}
 80083e2:	b083      	sub	sp, #12
 80083e4:	af00      	add	r7, sp, #0
 80083e6:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80083e8:	bf00      	nop
 80083ea:	370c      	adds	r7, #12
 80083ec:	46bd      	mov	sp, r7
 80083ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f2:	4770      	bx	lr

080083f4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80083f4:	b5b0      	push	{r4, r5, r7, lr}
 80083f6:	b084      	sub	sp, #16
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	60f8      	str	r0, [r7, #12]
 80083fc:	60b9      	str	r1, [r7, #8]
 80083fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008406:	2b01      	cmp	r3, #1
 8008408:	d101      	bne.n	800840e <HAL_LTDC_ConfigLayer+0x1a>
 800840a:	2302      	movs	r3, #2
 800840c:	e02c      	b.n	8008468 <HAL_LTDC_ConfigLayer+0x74>
 800840e:	68fb      	ldr	r3, [r7, #12]
 8008410:	2201      	movs	r2, #1
 8008412:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	2202      	movs	r2, #2
 800841a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800841e:	68fa      	ldr	r2, [r7, #12]
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2134      	movs	r1, #52	; 0x34
 8008424:	fb01 f303 	mul.w	r3, r1, r3
 8008428:	4413      	add	r3, r2
 800842a:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800842e:	68bb      	ldr	r3, [r7, #8]
 8008430:	4614      	mov	r4, r2
 8008432:	461d      	mov	r5, r3
 8008434:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008436:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008438:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800843a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800843c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800843e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008440:	682b      	ldr	r3, [r5, #0]
 8008442:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008444:	687a      	ldr	r2, [r7, #4]
 8008446:	68b9      	ldr	r1, [r7, #8]
 8008448:	68f8      	ldr	r0, [r7, #12]
 800844a:	f000 f81f 	bl	800848c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	2201      	movs	r2, #1
 8008454:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	2201      	movs	r2, #1
 800845a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	2200      	movs	r2, #0
 8008462:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8008466:	2300      	movs	r3, #0
}
 8008468:	4618      	mov	r0, r3
 800846a:	3710      	adds	r7, #16
 800846c:	46bd      	mov	sp, r7
 800846e:	bdb0      	pop	{r4, r5, r7, pc}

08008470 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8008470:	b480      	push	{r7}
 8008472:	b083      	sub	sp, #12
 8008474:	af00      	add	r7, sp, #0
 8008476:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800847e:	b2db      	uxtb	r3, r3
}
 8008480:	4618      	mov	r0, r3
 8008482:	370c      	adds	r7, #12
 8008484:	46bd      	mov	sp, r7
 8008486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800848a:	4770      	bx	lr

0800848c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800848c:	b480      	push	{r7}
 800848e:	b089      	sub	sp, #36	; 0x24
 8008490:	af00      	add	r7, sp, #0
 8008492:	60f8      	str	r0, [r7, #12]
 8008494:	60b9      	str	r1, [r7, #8]
 8008496:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	685a      	ldr	r2, [r3, #4]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	68db      	ldr	r3, [r3, #12]
 80084a2:	0c1b      	lsrs	r3, r3, #16
 80084a4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084a8:	4413      	add	r3, r2
 80084aa:	041b      	lsls	r3, r3, #16
 80084ac:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	461a      	mov	r2, r3
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	01db      	lsls	r3, r3, #7
 80084b8:	4413      	add	r3, r2
 80084ba:	3384      	adds	r3, #132	; 0x84
 80084bc:	685b      	ldr	r3, [r3, #4]
 80084be:	68fa      	ldr	r2, [r7, #12]
 80084c0:	6812      	ldr	r2, [r2, #0]
 80084c2:	4611      	mov	r1, r2
 80084c4:	687a      	ldr	r2, [r7, #4]
 80084c6:	01d2      	lsls	r2, r2, #7
 80084c8:	440a      	add	r2, r1
 80084ca:	3284      	adds	r2, #132	; 0x84
 80084cc:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80084d0:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80084d2:	68bb      	ldr	r3, [r7, #8]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	0c1b      	lsrs	r3, r3, #16
 80084de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084e2:	4413      	add	r3, r2
 80084e4:	1c5a      	adds	r2, r3, #1
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	4619      	mov	r1, r3
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	01db      	lsls	r3, r3, #7
 80084f0:	440b      	add	r3, r1
 80084f2:	3384      	adds	r3, #132	; 0x84
 80084f4:	4619      	mov	r1, r3
 80084f6:	69fb      	ldr	r3, [r7, #28]
 80084f8:	4313      	orrs	r3, r2
 80084fa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	68da      	ldr	r2, [r3, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	68db      	ldr	r3, [r3, #12]
 8008506:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800850a:	4413      	add	r3, r2
 800850c:	041b      	lsls	r3, r3, #16
 800850e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	461a      	mov	r2, r3
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	01db      	lsls	r3, r3, #7
 800851a:	4413      	add	r3, r2
 800851c:	3384      	adds	r3, #132	; 0x84
 800851e:	689b      	ldr	r3, [r3, #8]
 8008520:	68fa      	ldr	r2, [r7, #12]
 8008522:	6812      	ldr	r2, [r2, #0]
 8008524:	4611      	mov	r1, r2
 8008526:	687a      	ldr	r2, [r7, #4]
 8008528:	01d2      	lsls	r2, r2, #7
 800852a:	440a      	add	r2, r1
 800852c:	3284      	adds	r2, #132	; 0x84
 800852e:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008532:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008534:	68bb      	ldr	r3, [r7, #8]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	68db      	ldr	r3, [r3, #12]
 800853e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8008542:	4413      	add	r3, r2
 8008544:	1c5a      	adds	r2, r3, #1
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	4619      	mov	r1, r3
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	01db      	lsls	r3, r3, #7
 8008550:	440b      	add	r3, r1
 8008552:	3384      	adds	r3, #132	; 0x84
 8008554:	4619      	mov	r1, r3
 8008556:	69fb      	ldr	r3, [r7, #28]
 8008558:	4313      	orrs	r3, r2
 800855a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	01db      	lsls	r3, r3, #7
 8008566:	4413      	add	r3, r2
 8008568:	3384      	adds	r3, #132	; 0x84
 800856a:	691b      	ldr	r3, [r3, #16]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	6812      	ldr	r2, [r2, #0]
 8008570:	4611      	mov	r1, r2
 8008572:	687a      	ldr	r2, [r7, #4]
 8008574:	01d2      	lsls	r2, r2, #7
 8008576:	440a      	add	r2, r1
 8008578:	3284      	adds	r2, #132	; 0x84
 800857a:	f023 0307 	bic.w	r3, r3, #7
 800857e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	461a      	mov	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	01db      	lsls	r3, r3, #7
 800858a:	4413      	add	r3, r2
 800858c:	3384      	adds	r3, #132	; 0x84
 800858e:	461a      	mov	r2, r3
 8008590:	68bb      	ldr	r3, [r7, #8]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800859c:	021b      	lsls	r3, r3, #8
 800859e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80085a6:	041b      	lsls	r3, r3, #16
 80085a8:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	699b      	ldr	r3, [r3, #24]
 80085ae:	061b      	lsls	r3, r3, #24
 80085b0:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	01db      	lsls	r3, r3, #7
 80085bc:	4413      	add	r3, r2
 80085be:	3384      	adds	r3, #132	; 0x84
 80085c0:	699b      	ldr	r3, [r3, #24]
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	681b      	ldr	r3, [r3, #0]
 80085c6:	461a      	mov	r2, r3
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	01db      	lsls	r3, r3, #7
 80085cc:	4413      	add	r3, r2
 80085ce:	3384      	adds	r3, #132	; 0x84
 80085d0:	461a      	mov	r2, r3
 80085d2:	2300      	movs	r3, #0
 80085d4:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80085dc:	461a      	mov	r2, r3
 80085de:	69fb      	ldr	r3, [r7, #28]
 80085e0:	431a      	orrs	r2, r3
 80085e2:	69bb      	ldr	r3, [r7, #24]
 80085e4:	431a      	orrs	r2, r3
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	681b      	ldr	r3, [r3, #0]
 80085ea:	4619      	mov	r1, r3
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	01db      	lsls	r3, r3, #7
 80085f0:	440b      	add	r3, r1
 80085f2:	3384      	adds	r3, #132	; 0x84
 80085f4:	4619      	mov	r1, r3
 80085f6:	697b      	ldr	r3, [r7, #20]
 80085f8:	4313      	orrs	r3, r2
 80085fa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	461a      	mov	r2, r3
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	01db      	lsls	r3, r3, #7
 8008606:	4413      	add	r3, r2
 8008608:	3384      	adds	r3, #132	; 0x84
 800860a:	695b      	ldr	r3, [r3, #20]
 800860c:	68fa      	ldr	r2, [r7, #12]
 800860e:	6812      	ldr	r2, [r2, #0]
 8008610:	4611      	mov	r1, r2
 8008612:	687a      	ldr	r2, [r7, #4]
 8008614:	01d2      	lsls	r2, r2, #7
 8008616:	440a      	add	r2, r1
 8008618:	3284      	adds	r2, #132	; 0x84
 800861a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800861e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	461a      	mov	r2, r3
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	01db      	lsls	r3, r3, #7
 800862a:	4413      	add	r3, r2
 800862c:	3384      	adds	r3, #132	; 0x84
 800862e:	461a      	mov	r2, r3
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	695b      	ldr	r3, [r3, #20]
 8008634:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	461a      	mov	r2, r3
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	01db      	lsls	r3, r3, #7
 8008640:	4413      	add	r3, r2
 8008642:	3384      	adds	r3, #132	; 0x84
 8008644:	69da      	ldr	r2, [r3, #28]
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	4619      	mov	r1, r3
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	01db      	lsls	r3, r3, #7
 8008650:	440b      	add	r3, r1
 8008652:	3384      	adds	r3, #132	; 0x84
 8008654:	4619      	mov	r1, r3
 8008656:	4b58      	ldr	r3, [pc, #352]	; (80087b8 <LTDC_SetConfig+0x32c>)
 8008658:	4013      	ands	r3, r2
 800865a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800865c:	68bb      	ldr	r3, [r7, #8]
 800865e:	69da      	ldr	r2, [r3, #28]
 8008660:	68bb      	ldr	r3, [r7, #8]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	68f9      	ldr	r1, [r7, #12]
 8008666:	6809      	ldr	r1, [r1, #0]
 8008668:	4608      	mov	r0, r1
 800866a:	6879      	ldr	r1, [r7, #4]
 800866c:	01c9      	lsls	r1, r1, #7
 800866e:	4401      	add	r1, r0
 8008670:	3184      	adds	r1, #132	; 0x84
 8008672:	4313      	orrs	r3, r2
 8008674:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	461a      	mov	r2, r3
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	01db      	lsls	r3, r3, #7
 8008680:	4413      	add	r3, r2
 8008682:	3384      	adds	r3, #132	; 0x84
 8008684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	461a      	mov	r2, r3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	01db      	lsls	r3, r3, #7
 8008690:	4413      	add	r3, r2
 8008692:	3384      	adds	r3, #132	; 0x84
 8008694:	461a      	mov	r2, r3
 8008696:	2300      	movs	r3, #0
 8008698:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	461a      	mov	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	01db      	lsls	r3, r3, #7
 80086a4:	4413      	add	r3, r2
 80086a6:	3384      	adds	r3, #132	; 0x84
 80086a8:	461a      	mov	r2, r3
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086ae:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80086b0:	68bb      	ldr	r3, [r7, #8]
 80086b2:	691b      	ldr	r3, [r3, #16]
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	d102      	bne.n	80086be <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80086b8:	2304      	movs	r3, #4
 80086ba:	61fb      	str	r3, [r7, #28]
 80086bc:	e01b      	b.n	80086f6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80086be:	68bb      	ldr	r3, [r7, #8]
 80086c0:	691b      	ldr	r3, [r3, #16]
 80086c2:	2b01      	cmp	r3, #1
 80086c4:	d102      	bne.n	80086cc <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80086c6:	2303      	movs	r3, #3
 80086c8:	61fb      	str	r3, [r7, #28]
 80086ca:	e014      	b.n	80086f6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086cc:	68bb      	ldr	r3, [r7, #8]
 80086ce:	691b      	ldr	r3, [r3, #16]
 80086d0:	2b04      	cmp	r3, #4
 80086d2:	d00b      	beq.n	80086ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086d4:	68bb      	ldr	r3, [r7, #8]
 80086d6:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80086d8:	2b02      	cmp	r3, #2
 80086da:	d007      	beq.n	80086ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80086e0:	2b03      	cmp	r3, #3
 80086e2:	d003      	beq.n	80086ec <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80086e4:	68bb      	ldr	r3, [r7, #8]
 80086e6:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80086e8:	2b07      	cmp	r3, #7
 80086ea:	d102      	bne.n	80086f2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80086ec:	2302      	movs	r3, #2
 80086ee:	61fb      	str	r3, [r7, #28]
 80086f0:	e001      	b.n	80086f6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80086f2:	2301      	movs	r3, #1
 80086f4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80086f6:	68fb      	ldr	r3, [r7, #12]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	461a      	mov	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	01db      	lsls	r3, r3, #7
 8008700:	4413      	add	r3, r2
 8008702:	3384      	adds	r3, #132	; 0x84
 8008704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008706:	68fa      	ldr	r2, [r7, #12]
 8008708:	6812      	ldr	r2, [r2, #0]
 800870a:	4611      	mov	r1, r2
 800870c:	687a      	ldr	r2, [r7, #4]
 800870e:	01d2      	lsls	r2, r2, #7
 8008710:	440a      	add	r2, r1
 8008712:	3284      	adds	r2, #132	; 0x84
 8008714:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008718:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800871e:	69fa      	ldr	r2, [r7, #28]
 8008720:	fb02 f303 	mul.w	r3, r2, r3
 8008724:	041a      	lsls	r2, r3, #16
 8008726:	68bb      	ldr	r3, [r7, #8]
 8008728:	6859      	ldr	r1, [r3, #4]
 800872a:	68bb      	ldr	r3, [r7, #8]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	1acb      	subs	r3, r1, r3
 8008730:	69f9      	ldr	r1, [r7, #28]
 8008732:	fb01 f303 	mul.w	r3, r1, r3
 8008736:	3303      	adds	r3, #3
 8008738:	68f9      	ldr	r1, [r7, #12]
 800873a:	6809      	ldr	r1, [r1, #0]
 800873c:	4608      	mov	r0, r1
 800873e:	6879      	ldr	r1, [r7, #4]
 8008740:	01c9      	lsls	r1, r1, #7
 8008742:	4401      	add	r1, r0
 8008744:	3184      	adds	r1, #132	; 0x84
 8008746:	4313      	orrs	r3, r2
 8008748:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	461a      	mov	r2, r3
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	01db      	lsls	r3, r3, #7
 8008754:	4413      	add	r3, r2
 8008756:	3384      	adds	r3, #132	; 0x84
 8008758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800875a:	68fb      	ldr	r3, [r7, #12]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	4619      	mov	r1, r3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	01db      	lsls	r3, r3, #7
 8008764:	440b      	add	r3, r1
 8008766:	3384      	adds	r3, #132	; 0x84
 8008768:	4619      	mov	r1, r3
 800876a:	4b14      	ldr	r3, [pc, #80]	; (80087bc <LTDC_SetConfig+0x330>)
 800876c:	4013      	ands	r3, r2
 800876e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	461a      	mov	r2, r3
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	01db      	lsls	r3, r3, #7
 800877a:	4413      	add	r3, r2
 800877c:	3384      	adds	r3, #132	; 0x84
 800877e:	461a      	mov	r2, r3
 8008780:	68bb      	ldr	r3, [r7, #8]
 8008782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008784:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008786:	68fb      	ldr	r3, [r7, #12]
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	01db      	lsls	r3, r3, #7
 8008790:	4413      	add	r3, r2
 8008792:	3384      	adds	r3, #132	; 0x84
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	68fa      	ldr	r2, [r7, #12]
 8008798:	6812      	ldr	r2, [r2, #0]
 800879a:	4611      	mov	r1, r2
 800879c:	687a      	ldr	r2, [r7, #4]
 800879e:	01d2      	lsls	r2, r2, #7
 80087a0:	440a      	add	r2, r1
 80087a2:	3284      	adds	r2, #132	; 0x84
 80087a4:	f043 0301 	orr.w	r3, r3, #1
 80087a8:	6013      	str	r3, [r2, #0]
}
 80087aa:	bf00      	nop
 80087ac:	3724      	adds	r7, #36	; 0x24
 80087ae:	46bd      	mov	sp, r7
 80087b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b4:	4770      	bx	lr
 80087b6:	bf00      	nop
 80087b8:	fffff8f8 	.word	0xfffff8f8
 80087bc:	fffff800 	.word	0xfffff800

080087c0 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80087c0:	b480      	push	{r7}
 80087c2:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80087c4:	4b05      	ldr	r3, [pc, #20]	; (80087dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	4a04      	ldr	r2, [pc, #16]	; (80087dc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80087ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ce:	6013      	str	r3, [r2, #0]
}
 80087d0:	bf00      	nop
 80087d2:	46bd      	mov	sp, r7
 80087d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087d8:	4770      	bx	lr
 80087da:	bf00      	nop
 80087dc:	40007000 	.word	0x40007000

080087e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80087e6:	2300      	movs	r3, #0
 80087e8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80087ea:	4b23      	ldr	r3, [pc, #140]	; (8008878 <HAL_PWREx_EnableOverDrive+0x98>)
 80087ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ee:	4a22      	ldr	r2, [pc, #136]	; (8008878 <HAL_PWREx_EnableOverDrive+0x98>)
 80087f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087f4:	6413      	str	r3, [r2, #64]	; 0x40
 80087f6:	4b20      	ldr	r3, [pc, #128]	; (8008878 <HAL_PWREx_EnableOverDrive+0x98>)
 80087f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087fe:	603b      	str	r3, [r7, #0]
 8008800:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008802:	4b1e      	ldr	r3, [pc, #120]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	4a1d      	ldr	r2, [pc, #116]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008808:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800880c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800880e:	f7fd f99f 	bl	8005b50 <HAL_GetTick>
 8008812:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008814:	e009      	b.n	800882a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008816:	f7fd f99b 	bl	8005b50 <HAL_GetTick>
 800881a:	4602      	mov	r2, r0
 800881c:	687b      	ldr	r3, [r7, #4]
 800881e:	1ad3      	subs	r3, r2, r3
 8008820:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008824:	d901      	bls.n	800882a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008826:	2303      	movs	r3, #3
 8008828:	e022      	b.n	8008870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800882a:	4b14      	ldr	r3, [pc, #80]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008832:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008836:	d1ee      	bne.n	8008816 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008838:	4b10      	ldr	r3, [pc, #64]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	4a0f      	ldr	r2, [pc, #60]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 800883e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008842:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008844:	f7fd f984 	bl	8005b50 <HAL_GetTick>
 8008848:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800884a:	e009      	b.n	8008860 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800884c:	f7fd f980 	bl	8005b50 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800885a:	d901      	bls.n	8008860 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800885c:	2303      	movs	r3, #3
 800885e:	e007      	b.n	8008870 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008860:	4b06      	ldr	r3, [pc, #24]	; (800887c <HAL_PWREx_EnableOverDrive+0x9c>)
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008868:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800886c:	d1ee      	bne.n	800884c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800886e:	2300      	movs	r3, #0
}
 8008870:	4618      	mov	r0, r3
 8008872:	3708      	adds	r7, #8
 8008874:	46bd      	mov	sp, r7
 8008876:	bd80      	pop	{r7, pc}
 8008878:	40023800 	.word	0x40023800
 800887c:	40007000 	.word	0x40007000

08008880 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008880:	b580      	push	{r7, lr}
 8008882:	b086      	sub	sp, #24
 8008884:	af00      	add	r7, sp, #0
 8008886:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008888:	2300      	movs	r3, #0
 800888a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d101      	bne.n	8008896 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008892:	2301      	movs	r3, #1
 8008894:	e291      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f003 0301 	and.w	r3, r3, #1
 800889e:	2b00      	cmp	r3, #0
 80088a0:	f000 8087 	beq.w	80089b2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80088a4:	4b96      	ldr	r3, [pc, #600]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088a6:	689b      	ldr	r3, [r3, #8]
 80088a8:	f003 030c 	and.w	r3, r3, #12
 80088ac:	2b04      	cmp	r3, #4
 80088ae:	d00c      	beq.n	80088ca <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80088b0:	4b93      	ldr	r3, [pc, #588]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	f003 030c 	and.w	r3, r3, #12
 80088b8:	2b08      	cmp	r3, #8
 80088ba:	d112      	bne.n	80088e2 <HAL_RCC_OscConfig+0x62>
 80088bc:	4b90      	ldr	r3, [pc, #576]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088be:	685b      	ldr	r3, [r3, #4]
 80088c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80088c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088c8:	d10b      	bne.n	80088e2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80088ca:	4b8d      	ldr	r3, [pc, #564]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d06c      	beq.n	80089b0 <HAL_RCC_OscConfig+0x130>
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	685b      	ldr	r3, [r3, #4]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d168      	bne.n	80089b0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80088de:	2301      	movs	r3, #1
 80088e0:	e26b      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	685b      	ldr	r3, [r3, #4]
 80088e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80088ea:	d106      	bne.n	80088fa <HAL_RCC_OscConfig+0x7a>
 80088ec:	4b84      	ldr	r3, [pc, #528]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	4a83      	ldr	r2, [pc, #524]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80088f2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80088f6:	6013      	str	r3, [r2, #0]
 80088f8:	e02e      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	685b      	ldr	r3, [r3, #4]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	d10c      	bne.n	800891c <HAL_RCC_OscConfig+0x9c>
 8008902:	4b7f      	ldr	r3, [pc, #508]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008904:	681b      	ldr	r3, [r3, #0]
 8008906:	4a7e      	ldr	r2, [pc, #504]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008908:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800890c:	6013      	str	r3, [r2, #0]
 800890e:	4b7c      	ldr	r3, [pc, #496]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a7b      	ldr	r2, [pc, #492]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008914:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008918:	6013      	str	r3, [r2, #0]
 800891a:	e01d      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	685b      	ldr	r3, [r3, #4]
 8008920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008924:	d10c      	bne.n	8008940 <HAL_RCC_OscConfig+0xc0>
 8008926:	4b76      	ldr	r3, [pc, #472]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	4a75      	ldr	r2, [pc, #468]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 800892c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008930:	6013      	str	r3, [r2, #0]
 8008932:	4b73      	ldr	r3, [pc, #460]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008934:	681b      	ldr	r3, [r3, #0]
 8008936:	4a72      	ldr	r2, [pc, #456]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800893c:	6013      	str	r3, [r2, #0]
 800893e:	e00b      	b.n	8008958 <HAL_RCC_OscConfig+0xd8>
 8008940:	4b6f      	ldr	r3, [pc, #444]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	4a6e      	ldr	r2, [pc, #440]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800894a:	6013      	str	r3, [r2, #0]
 800894c:	4b6c      	ldr	r3, [pc, #432]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	4a6b      	ldr	r2, [pc, #428]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008956:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	685b      	ldr	r3, [r3, #4]
 800895c:	2b00      	cmp	r3, #0
 800895e:	d013      	beq.n	8008988 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008960:	f7fd f8f6 	bl	8005b50 <HAL_GetTick>
 8008964:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008966:	e008      	b.n	800897a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008968:	f7fd f8f2 	bl	8005b50 <HAL_GetTick>
 800896c:	4602      	mov	r2, r0
 800896e:	693b      	ldr	r3, [r7, #16]
 8008970:	1ad3      	subs	r3, r2, r3
 8008972:	2b64      	cmp	r3, #100	; 0x64
 8008974:	d901      	bls.n	800897a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008976:	2303      	movs	r3, #3
 8008978:	e21f      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800897a:	4b61      	ldr	r3, [pc, #388]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008982:	2b00      	cmp	r3, #0
 8008984:	d0f0      	beq.n	8008968 <HAL_RCC_OscConfig+0xe8>
 8008986:	e014      	b.n	80089b2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008988:	f7fd f8e2 	bl	8005b50 <HAL_GetTick>
 800898c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800898e:	e008      	b.n	80089a2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008990:	f7fd f8de 	bl	8005b50 <HAL_GetTick>
 8008994:	4602      	mov	r2, r0
 8008996:	693b      	ldr	r3, [r7, #16]
 8008998:	1ad3      	subs	r3, r2, r3
 800899a:	2b64      	cmp	r3, #100	; 0x64
 800899c:	d901      	bls.n	80089a2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800899e:	2303      	movs	r3, #3
 80089a0:	e20b      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80089a2:	4b57      	ldr	r3, [pc, #348]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d1f0      	bne.n	8008990 <HAL_RCC_OscConfig+0x110>
 80089ae:	e000      	b.n	80089b2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f003 0302 	and.w	r3, r3, #2
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d069      	beq.n	8008a92 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80089be:	4b50      	ldr	r3, [pc, #320]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089c0:	689b      	ldr	r3, [r3, #8]
 80089c2:	f003 030c 	and.w	r3, r3, #12
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d00b      	beq.n	80089e2 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80089ca:	4b4d      	ldr	r3, [pc, #308]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089cc:	689b      	ldr	r3, [r3, #8]
 80089ce:	f003 030c 	and.w	r3, r3, #12
 80089d2:	2b08      	cmp	r3, #8
 80089d4:	d11c      	bne.n	8008a10 <HAL_RCC_OscConfig+0x190>
 80089d6:	4b4a      	ldr	r3, [pc, #296]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089d8:	685b      	ldr	r3, [r3, #4]
 80089da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d116      	bne.n	8008a10 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80089e2:	4b47      	ldr	r3, [pc, #284]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d005      	beq.n	80089fa <HAL_RCC_OscConfig+0x17a>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	68db      	ldr	r3, [r3, #12]
 80089f2:	2b01      	cmp	r3, #1
 80089f4:	d001      	beq.n	80089fa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	e1df      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80089fa:	4b41      	ldr	r3, [pc, #260]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	691b      	ldr	r3, [r3, #16]
 8008a06:	00db      	lsls	r3, r3, #3
 8008a08:	493d      	ldr	r1, [pc, #244]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008a0e:	e040      	b.n	8008a92 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	68db      	ldr	r3, [r3, #12]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d023      	beq.n	8008a60 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008a18:	4b39      	ldr	r3, [pc, #228]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a38      	ldr	r2, [pc, #224]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a1e:	f043 0301 	orr.w	r3, r3, #1
 8008a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a24:	f7fd f894 	bl	8005b50 <HAL_GetTick>
 8008a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a2a:	e008      	b.n	8008a3e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a2c:	f7fd f890 	bl	8005b50 <HAL_GetTick>
 8008a30:	4602      	mov	r2, r0
 8008a32:	693b      	ldr	r3, [r7, #16]
 8008a34:	1ad3      	subs	r3, r2, r3
 8008a36:	2b02      	cmp	r3, #2
 8008a38:	d901      	bls.n	8008a3e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008a3a:	2303      	movs	r3, #3
 8008a3c:	e1bd      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008a3e:	4b30      	ldr	r3, [pc, #192]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	f003 0302 	and.w	r3, r3, #2
 8008a46:	2b00      	cmp	r3, #0
 8008a48:	d0f0      	beq.n	8008a2c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008a4a:	4b2d      	ldr	r3, [pc, #180]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	691b      	ldr	r3, [r3, #16]
 8008a56:	00db      	lsls	r3, r3, #3
 8008a58:	4929      	ldr	r1, [pc, #164]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a5a:	4313      	orrs	r3, r2
 8008a5c:	600b      	str	r3, [r1, #0]
 8008a5e:	e018      	b.n	8008a92 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008a60:	4b27      	ldr	r3, [pc, #156]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a26      	ldr	r2, [pc, #152]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a66:	f023 0301 	bic.w	r3, r3, #1
 8008a6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a6c:	f7fd f870 	bl	8005b50 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a72:	e008      	b.n	8008a86 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008a74:	f7fd f86c 	bl	8005b50 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	2b02      	cmp	r3, #2
 8008a80:	d901      	bls.n	8008a86 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008a82:	2303      	movs	r3, #3
 8008a84:	e199      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008a86:	4b1e      	ldr	r3, [pc, #120]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f003 0302 	and.w	r3, r3, #2
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d1f0      	bne.n	8008a74 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0308 	and.w	r3, r3, #8
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d038      	beq.n	8008b10 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	695b      	ldr	r3, [r3, #20]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d019      	beq.n	8008ada <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008aa6:	4b16      	ldr	r3, [pc, #88]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008aaa:	4a15      	ldr	r2, [pc, #84]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008aac:	f043 0301 	orr.w	r3, r3, #1
 8008ab0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ab2:	f7fd f84d 	bl	8005b50 <HAL_GetTick>
 8008ab6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008ab8:	e008      	b.n	8008acc <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aba:	f7fd f849 	bl	8005b50 <HAL_GetTick>
 8008abe:	4602      	mov	r2, r0
 8008ac0:	693b      	ldr	r3, [r7, #16]
 8008ac2:	1ad3      	subs	r3, r2, r3
 8008ac4:	2b02      	cmp	r3, #2
 8008ac6:	d901      	bls.n	8008acc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008ac8:	2303      	movs	r3, #3
 8008aca:	e176      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008acc:	4b0c      	ldr	r3, [pc, #48]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008ace:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ad0:	f003 0302 	and.w	r3, r3, #2
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	d0f0      	beq.n	8008aba <HAL_RCC_OscConfig+0x23a>
 8008ad8:	e01a      	b.n	8008b10 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008ada:	4b09      	ldr	r3, [pc, #36]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008adc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ade:	4a08      	ldr	r2, [pc, #32]	; (8008b00 <HAL_RCC_OscConfig+0x280>)
 8008ae0:	f023 0301 	bic.w	r3, r3, #1
 8008ae4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ae6:	f7fd f833 	bl	8005b50 <HAL_GetTick>
 8008aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008aec:	e00a      	b.n	8008b04 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008aee:	f7fd f82f 	bl	8005b50 <HAL_GetTick>
 8008af2:	4602      	mov	r2, r0
 8008af4:	693b      	ldr	r3, [r7, #16]
 8008af6:	1ad3      	subs	r3, r2, r3
 8008af8:	2b02      	cmp	r3, #2
 8008afa:	d903      	bls.n	8008b04 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e15c      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
 8008b00:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008b04:	4b91      	ldr	r3, [pc, #580]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d1ee      	bne.n	8008aee <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008b10:	687b      	ldr	r3, [r7, #4]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f003 0304 	and.w	r3, r3, #4
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	f000 80a4 	beq.w	8008c66 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008b1e:	4b8b      	ldr	r3, [pc, #556]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d10d      	bne.n	8008b46 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008b2a:	4b88      	ldr	r3, [pc, #544]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b2e:	4a87      	ldr	r2, [pc, #540]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b34:	6413      	str	r3, [r2, #64]	; 0x40
 8008b36:	4b85      	ldr	r3, [pc, #532]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b3e:	60bb      	str	r3, [r7, #8]
 8008b40:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008b42:	2301      	movs	r3, #1
 8008b44:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b46:	4b82      	ldr	r3, [pc, #520]	; (8008d50 <HAL_RCC_OscConfig+0x4d0>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d118      	bne.n	8008b84 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008b52:	4b7f      	ldr	r3, [pc, #508]	; (8008d50 <HAL_RCC_OscConfig+0x4d0>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a7e      	ldr	r2, [pc, #504]	; (8008d50 <HAL_RCC_OscConfig+0x4d0>)
 8008b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008b5e:	f7fc fff7 	bl	8005b50 <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b64:	e008      	b.n	8008b78 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008b66:	f7fc fff3 	bl	8005b50 <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b64      	cmp	r3, #100	; 0x64
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e120      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008b78:	4b75      	ldr	r3, [pc, #468]	; (8008d50 <HAL_RCC_OscConfig+0x4d0>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f0      	beq.n	8008b66 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	2b01      	cmp	r3, #1
 8008b8a:	d106      	bne.n	8008b9a <HAL_RCC_OscConfig+0x31a>
 8008b8c:	4b6f      	ldr	r3, [pc, #444]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008b90:	4a6e      	ldr	r2, [pc, #440]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008b92:	f043 0301 	orr.w	r3, r3, #1
 8008b96:	6713      	str	r3, [r2, #112]	; 0x70
 8008b98:	e02d      	b.n	8008bf6 <HAL_RCC_OscConfig+0x376>
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	689b      	ldr	r3, [r3, #8]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d10c      	bne.n	8008bbc <HAL_RCC_OscConfig+0x33c>
 8008ba2:	4b6a      	ldr	r3, [pc, #424]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ba6:	4a69      	ldr	r2, [pc, #420]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008ba8:	f023 0301 	bic.w	r3, r3, #1
 8008bac:	6713      	str	r3, [r2, #112]	; 0x70
 8008bae:	4b67      	ldr	r3, [pc, #412]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bb2:	4a66      	ldr	r2, [pc, #408]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bb4:	f023 0304 	bic.w	r3, r3, #4
 8008bb8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bba:	e01c      	b.n	8008bf6 <HAL_RCC_OscConfig+0x376>
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	2b05      	cmp	r3, #5
 8008bc2:	d10c      	bne.n	8008bde <HAL_RCC_OscConfig+0x35e>
 8008bc4:	4b61      	ldr	r3, [pc, #388]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bc8:	4a60      	ldr	r2, [pc, #384]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bca:	f043 0304 	orr.w	r3, r3, #4
 8008bce:	6713      	str	r3, [r2, #112]	; 0x70
 8008bd0:	4b5e      	ldr	r3, [pc, #376]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bd4:	4a5d      	ldr	r2, [pc, #372]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bd6:	f043 0301 	orr.w	r3, r3, #1
 8008bda:	6713      	str	r3, [r2, #112]	; 0x70
 8008bdc:	e00b      	b.n	8008bf6 <HAL_RCC_OscConfig+0x376>
 8008bde:	4b5b      	ldr	r3, [pc, #364]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008be2:	4a5a      	ldr	r2, [pc, #360]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008be4:	f023 0301 	bic.w	r3, r3, #1
 8008be8:	6713      	str	r3, [r2, #112]	; 0x70
 8008bea:	4b58      	ldr	r3, [pc, #352]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008bee:	4a57      	ldr	r2, [pc, #348]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008bf0:	f023 0304 	bic.w	r3, r3, #4
 8008bf4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d015      	beq.n	8008c2a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bfe:	f7fc ffa7 	bl	8005b50 <HAL_GetTick>
 8008c02:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c04:	e00a      	b.n	8008c1c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c06:	f7fc ffa3 	bl	8005b50 <HAL_GetTick>
 8008c0a:	4602      	mov	r2, r0
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	1ad3      	subs	r3, r2, r3
 8008c10:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c14:	4293      	cmp	r3, r2
 8008c16:	d901      	bls.n	8008c1c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008c18:	2303      	movs	r3, #3
 8008c1a:	e0ce      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008c1c:	4b4b      	ldr	r3, [pc, #300]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c20:	f003 0302 	and.w	r3, r3, #2
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d0ee      	beq.n	8008c06 <HAL_RCC_OscConfig+0x386>
 8008c28:	e014      	b.n	8008c54 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2a:	f7fc ff91 	bl	8005b50 <HAL_GetTick>
 8008c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c30:	e00a      	b.n	8008c48 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008c32:	f7fc ff8d 	bl	8005b50 <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8008c40:	4293      	cmp	r3, r2
 8008c42:	d901      	bls.n	8008c48 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008c44:	2303      	movs	r3, #3
 8008c46:	e0b8      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008c48:	4b40      	ldr	r3, [pc, #256]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c4c:	f003 0302 	and.w	r3, r3, #2
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d1ee      	bne.n	8008c32 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008c54:	7dfb      	ldrb	r3, [r7, #23]
 8008c56:	2b01      	cmp	r3, #1
 8008c58:	d105      	bne.n	8008c66 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008c5a:	4b3c      	ldr	r3, [pc, #240]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5e:	4a3b      	ldr	r2, [pc, #236]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c60:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c64:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	699b      	ldr	r3, [r3, #24]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	f000 80a4 	beq.w	8008db8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008c70:	4b36      	ldr	r3, [pc, #216]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c72:	689b      	ldr	r3, [r3, #8]
 8008c74:	f003 030c 	and.w	r3, r3, #12
 8008c78:	2b08      	cmp	r3, #8
 8008c7a:	d06b      	beq.n	8008d54 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	699b      	ldr	r3, [r3, #24]
 8008c80:	2b02      	cmp	r3, #2
 8008c82:	d149      	bne.n	8008d18 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c84:	4b31      	ldr	r3, [pc, #196]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	4a30      	ldr	r2, [pc, #192]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008c8a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008c90:	f7fc ff5e 	bl	8005b50 <HAL_GetTick>
 8008c94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008c96:	e008      	b.n	8008caa <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c98:	f7fc ff5a 	bl	8005b50 <HAL_GetTick>
 8008c9c:	4602      	mov	r2, r0
 8008c9e:	693b      	ldr	r3, [r7, #16]
 8008ca0:	1ad3      	subs	r3, r2, r3
 8008ca2:	2b02      	cmp	r3, #2
 8008ca4:	d901      	bls.n	8008caa <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008ca6:	2303      	movs	r3, #3
 8008ca8:	e087      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008caa:	4b28      	ldr	r3, [pc, #160]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cb2:	2b00      	cmp	r3, #0
 8008cb4:	d1f0      	bne.n	8008c98 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	69da      	ldr	r2, [r3, #28]
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	6a1b      	ldr	r3, [r3, #32]
 8008cbe:	431a      	orrs	r2, r3
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cc4:	019b      	lsls	r3, r3, #6
 8008cc6:	431a      	orrs	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ccc:	085b      	lsrs	r3, r3, #1
 8008cce:	3b01      	subs	r3, #1
 8008cd0:	041b      	lsls	r3, r3, #16
 8008cd2:	431a      	orrs	r2, r3
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008cd8:	061b      	lsls	r3, r3, #24
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	4a1b      	ldr	r2, [pc, #108]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008cde:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008ce2:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008ce4:	4b19      	ldr	r3, [pc, #100]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	4a18      	ldr	r2, [pc, #96]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008cea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008cee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008cf0:	f7fc ff2e 	bl	8005b50 <HAL_GetTick>
 8008cf4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008cf6:	e008      	b.n	8008d0a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008cf8:	f7fc ff2a 	bl	8005b50 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	693b      	ldr	r3, [r7, #16]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	2b02      	cmp	r3, #2
 8008d04:	d901      	bls.n	8008d0a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008d06:	2303      	movs	r3, #3
 8008d08:	e057      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d0a:	4b10      	ldr	r3, [pc, #64]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d0f0      	beq.n	8008cf8 <HAL_RCC_OscConfig+0x478>
 8008d16:	e04f      	b.n	8008db8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d18:	4b0c      	ldr	r3, [pc, #48]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	4a0b      	ldr	r2, [pc, #44]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008d1e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008d22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d24:	f7fc ff14 	bl	8005b50 <HAL_GetTick>
 8008d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d2a:	e008      	b.n	8008d3e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008d2c:	f7fc ff10 	bl	8005b50 <HAL_GetTick>
 8008d30:	4602      	mov	r2, r0
 8008d32:	693b      	ldr	r3, [r7, #16]
 8008d34:	1ad3      	subs	r3, r2, r3
 8008d36:	2b02      	cmp	r3, #2
 8008d38:	d901      	bls.n	8008d3e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008d3a:	2303      	movs	r3, #3
 8008d3c:	e03d      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d3e:	4b03      	ldr	r3, [pc, #12]	; (8008d4c <HAL_RCC_OscConfig+0x4cc>)
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d1f0      	bne.n	8008d2c <HAL_RCC_OscConfig+0x4ac>
 8008d4a:	e035      	b.n	8008db8 <HAL_RCC_OscConfig+0x538>
 8008d4c:	40023800 	.word	0x40023800
 8008d50:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008d54:	4b1b      	ldr	r3, [pc, #108]	; (8008dc4 <HAL_RCC_OscConfig+0x544>)
 8008d56:	685b      	ldr	r3, [r3, #4]
 8008d58:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	699b      	ldr	r3, [r3, #24]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d028      	beq.n	8008db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008d6c:	429a      	cmp	r2, r3
 8008d6e:	d121      	bne.n	8008db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008d7a:	429a      	cmp	r2, r3
 8008d7c:	d11a      	bne.n	8008db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008d7e:	68fa      	ldr	r2, [r7, #12]
 8008d80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008d84:	4013      	ands	r3, r2
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008d8a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008d8c:	4293      	cmp	r3, r2
 8008d8e:	d111      	bne.n	8008db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d9a:	085b      	lsrs	r3, r3, #1
 8008d9c:	3b01      	subs	r3, #1
 8008d9e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008da0:	429a      	cmp	r2, r3
 8008da2:	d107      	bne.n	8008db4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008dae:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008db0:	429a      	cmp	r2, r3
 8008db2:	d001      	beq.n	8008db8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008db4:	2301      	movs	r3, #1
 8008db6:	e000      	b.n	8008dba <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008db8:	2300      	movs	r3, #0
}
 8008dba:	4618      	mov	r0, r3
 8008dbc:	3718      	adds	r7, #24
 8008dbe:	46bd      	mov	sp, r7
 8008dc0:	bd80      	pop	{r7, pc}
 8008dc2:	bf00      	nop
 8008dc4:	40023800 	.word	0x40023800

08008dc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b084      	sub	sp, #16
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
 8008dd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d101      	bne.n	8008de0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008ddc:	2301      	movs	r3, #1
 8008dde:	e0d0      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008de0:	4b6a      	ldr	r3, [pc, #424]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	f003 030f 	and.w	r3, r3, #15
 8008de8:	683a      	ldr	r2, [r7, #0]
 8008dea:	429a      	cmp	r2, r3
 8008dec:	d910      	bls.n	8008e10 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008dee:	4b67      	ldr	r3, [pc, #412]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f023 020f 	bic.w	r2, r3, #15
 8008df6:	4965      	ldr	r1, [pc, #404]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008df8:	683b      	ldr	r3, [r7, #0]
 8008dfa:	4313      	orrs	r3, r2
 8008dfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008dfe:	4b63      	ldr	r3, [pc, #396]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	f003 030f 	and.w	r3, r3, #15
 8008e06:	683a      	ldr	r2, [r7, #0]
 8008e08:	429a      	cmp	r2, r3
 8008e0a:	d001      	beq.n	8008e10 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	e0b8      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	f003 0302 	and.w	r3, r3, #2
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d020      	beq.n	8008e5e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	681b      	ldr	r3, [r3, #0]
 8008e20:	f003 0304 	and.w	r3, r3, #4
 8008e24:	2b00      	cmp	r3, #0
 8008e26:	d005      	beq.n	8008e34 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008e28:	4b59      	ldr	r3, [pc, #356]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e2a:	689b      	ldr	r3, [r3, #8]
 8008e2c:	4a58      	ldr	r2, [pc, #352]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e2e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008e32:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f003 0308 	and.w	r3, r3, #8
 8008e3c:	2b00      	cmp	r3, #0
 8008e3e:	d005      	beq.n	8008e4c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008e40:	4b53      	ldr	r3, [pc, #332]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e42:	689b      	ldr	r3, [r3, #8]
 8008e44:	4a52      	ldr	r2, [pc, #328]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e46:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008e4a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008e4c:	4b50      	ldr	r3, [pc, #320]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e4e:	689b      	ldr	r3, [r3, #8]
 8008e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	494d      	ldr	r1, [pc, #308]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e5a:	4313      	orrs	r3, r2
 8008e5c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f003 0301 	and.w	r3, r3, #1
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d040      	beq.n	8008eec <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	685b      	ldr	r3, [r3, #4]
 8008e6e:	2b01      	cmp	r3, #1
 8008e70:	d107      	bne.n	8008e82 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e72:	4b47      	ldr	r3, [pc, #284]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e7a:	2b00      	cmp	r3, #0
 8008e7c:	d115      	bne.n	8008eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	e07f      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	685b      	ldr	r3, [r3, #4]
 8008e86:	2b02      	cmp	r3, #2
 8008e88:	d107      	bne.n	8008e9a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008e8a:	4b41      	ldr	r3, [pc, #260]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d109      	bne.n	8008eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008e96:	2301      	movs	r3, #1
 8008e98:	e073      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e9a:	4b3d      	ldr	r3, [pc, #244]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	f003 0302 	and.w	r3, r3, #2
 8008ea2:	2b00      	cmp	r3, #0
 8008ea4:	d101      	bne.n	8008eaa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	e06b      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008eaa:	4b39      	ldr	r3, [pc, #228]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008eac:	689b      	ldr	r3, [r3, #8]
 8008eae:	f023 0203 	bic.w	r2, r3, #3
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	685b      	ldr	r3, [r3, #4]
 8008eb6:	4936      	ldr	r1, [pc, #216]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008eb8:	4313      	orrs	r3, r2
 8008eba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008ebc:	f7fc fe48 	bl	8005b50 <HAL_GetTick>
 8008ec0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008ec2:	e00a      	b.n	8008eda <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008ec4:	f7fc fe44 	bl	8005b50 <HAL_GetTick>
 8008ec8:	4602      	mov	r2, r0
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	1ad3      	subs	r3, r2, r3
 8008ece:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ed2:	4293      	cmp	r3, r2
 8008ed4:	d901      	bls.n	8008eda <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008ed6:	2303      	movs	r3, #3
 8008ed8:	e053      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008eda:	4b2d      	ldr	r3, [pc, #180]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008edc:	689b      	ldr	r3, [r3, #8]
 8008ede:	f003 020c 	and.w	r2, r3, #12
 8008ee2:	687b      	ldr	r3, [r7, #4]
 8008ee4:	685b      	ldr	r3, [r3, #4]
 8008ee6:	009b      	lsls	r3, r3, #2
 8008ee8:	429a      	cmp	r2, r3
 8008eea:	d1eb      	bne.n	8008ec4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008eec:	4b27      	ldr	r3, [pc, #156]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f003 030f 	and.w	r3, r3, #15
 8008ef4:	683a      	ldr	r2, [r7, #0]
 8008ef6:	429a      	cmp	r2, r3
 8008ef8:	d210      	bcs.n	8008f1c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008efa:	4b24      	ldr	r3, [pc, #144]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	f023 020f 	bic.w	r2, r3, #15
 8008f02:	4922      	ldr	r1, [pc, #136]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008f04:	683b      	ldr	r3, [r7, #0]
 8008f06:	4313      	orrs	r3, r2
 8008f08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008f0a:	4b20      	ldr	r3, [pc, #128]	; (8008f8c <HAL_RCC_ClockConfig+0x1c4>)
 8008f0c:	681b      	ldr	r3, [r3, #0]
 8008f0e:	f003 030f 	and.w	r3, r3, #15
 8008f12:	683a      	ldr	r2, [r7, #0]
 8008f14:	429a      	cmp	r2, r3
 8008f16:	d001      	beq.n	8008f1c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008f18:	2301      	movs	r3, #1
 8008f1a:	e032      	b.n	8008f82 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	f003 0304 	and.w	r3, r3, #4
 8008f24:	2b00      	cmp	r3, #0
 8008f26:	d008      	beq.n	8008f3a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008f28:	4b19      	ldr	r3, [pc, #100]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008f2a:	689b      	ldr	r3, [r3, #8]
 8008f2c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	68db      	ldr	r3, [r3, #12]
 8008f34:	4916      	ldr	r1, [pc, #88]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008f36:	4313      	orrs	r3, r2
 8008f38:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d009      	beq.n	8008f5a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008f46:	4b12      	ldr	r3, [pc, #72]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008f48:	689b      	ldr	r3, [r3, #8]
 8008f4a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	00db      	lsls	r3, r3, #3
 8008f54:	490e      	ldr	r1, [pc, #56]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008f56:	4313      	orrs	r3, r2
 8008f58:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008f5a:	f000 f821 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	4b0b      	ldr	r3, [pc, #44]	; (8008f90 <HAL_RCC_ClockConfig+0x1c8>)
 8008f62:	689b      	ldr	r3, [r3, #8]
 8008f64:	091b      	lsrs	r3, r3, #4
 8008f66:	f003 030f 	and.w	r3, r3, #15
 8008f6a:	490a      	ldr	r1, [pc, #40]	; (8008f94 <HAL_RCC_ClockConfig+0x1cc>)
 8008f6c:	5ccb      	ldrb	r3, [r1, r3]
 8008f6e:	fa22 f303 	lsr.w	r3, r2, r3
 8008f72:	4a09      	ldr	r2, [pc, #36]	; (8008f98 <HAL_RCC_ClockConfig+0x1d0>)
 8008f74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008f76:	4b09      	ldr	r3, [pc, #36]	; (8008f9c <HAL_RCC_ClockConfig+0x1d4>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4618      	mov	r0, r3
 8008f7c:	f7fc fcb2 	bl	80058e4 <HAL_InitTick>

  return HAL_OK;
 8008f80:	2300      	movs	r3, #0
}
 8008f82:	4618      	mov	r0, r3
 8008f84:	3710      	adds	r7, #16
 8008f86:	46bd      	mov	sp, r7
 8008f88:	bd80      	pop	{r7, pc}
 8008f8a:	bf00      	nop
 8008f8c:	40023c00 	.word	0x40023c00
 8008f90:	40023800 	.word	0x40023800
 8008f94:	08012bec 	.word	0x08012bec
 8008f98:	20000054 	.word	0x20000054
 8008f9c:	20000058 	.word	0x20000058

08008fa0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008fa0:	b5b0      	push	{r4, r5, r7, lr}
 8008fa2:	b084      	sub	sp, #16
 8008fa4:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008fa6:	2100      	movs	r1, #0
 8008fa8:	6079      	str	r1, [r7, #4]
 8008faa:	2100      	movs	r1, #0
 8008fac:	60f9      	str	r1, [r7, #12]
 8008fae:	2100      	movs	r1, #0
 8008fb0:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008fb2:	2100      	movs	r1, #0
 8008fb4:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008fb6:	4952      	ldr	r1, [pc, #328]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 8008fb8:	6889      	ldr	r1, [r1, #8]
 8008fba:	f001 010c 	and.w	r1, r1, #12
 8008fbe:	2908      	cmp	r1, #8
 8008fc0:	d00d      	beq.n	8008fde <HAL_RCC_GetSysClockFreq+0x3e>
 8008fc2:	2908      	cmp	r1, #8
 8008fc4:	f200 8094 	bhi.w	80090f0 <HAL_RCC_GetSysClockFreq+0x150>
 8008fc8:	2900      	cmp	r1, #0
 8008fca:	d002      	beq.n	8008fd2 <HAL_RCC_GetSysClockFreq+0x32>
 8008fcc:	2904      	cmp	r1, #4
 8008fce:	d003      	beq.n	8008fd8 <HAL_RCC_GetSysClockFreq+0x38>
 8008fd0:	e08e      	b.n	80090f0 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008fd2:	4b4c      	ldr	r3, [pc, #304]	; (8009104 <HAL_RCC_GetSysClockFreq+0x164>)
 8008fd4:	60bb      	str	r3, [r7, #8]
      break;
 8008fd6:	e08e      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008fd8:	4b4b      	ldr	r3, [pc, #300]	; (8009108 <HAL_RCC_GetSysClockFreq+0x168>)
 8008fda:	60bb      	str	r3, [r7, #8]
      break;
 8008fdc:	e08b      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008fde:	4948      	ldr	r1, [pc, #288]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 8008fe0:	6849      	ldr	r1, [r1, #4]
 8008fe2:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008fe6:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008fe8:	4945      	ldr	r1, [pc, #276]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 8008fea:	6849      	ldr	r1, [r1, #4]
 8008fec:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008ff0:	2900      	cmp	r1, #0
 8008ff2:	d024      	beq.n	800903e <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ff4:	4942      	ldr	r1, [pc, #264]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ff6:	6849      	ldr	r1, [r1, #4]
 8008ff8:	0989      	lsrs	r1, r1, #6
 8008ffa:	4608      	mov	r0, r1
 8008ffc:	f04f 0100 	mov.w	r1, #0
 8009000:	f240 14ff 	movw	r4, #511	; 0x1ff
 8009004:	f04f 0500 	mov.w	r5, #0
 8009008:	ea00 0204 	and.w	r2, r0, r4
 800900c:	ea01 0305 	and.w	r3, r1, r5
 8009010:	493d      	ldr	r1, [pc, #244]	; (8009108 <HAL_RCC_GetSysClockFreq+0x168>)
 8009012:	fb01 f003 	mul.w	r0, r1, r3
 8009016:	2100      	movs	r1, #0
 8009018:	fb01 f102 	mul.w	r1, r1, r2
 800901c:	1844      	adds	r4, r0, r1
 800901e:	493a      	ldr	r1, [pc, #232]	; (8009108 <HAL_RCC_GetSysClockFreq+0x168>)
 8009020:	fba2 0101 	umull	r0, r1, r2, r1
 8009024:	1863      	adds	r3, r4, r1
 8009026:	4619      	mov	r1, r3
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	461a      	mov	r2, r3
 800902c:	f04f 0300 	mov.w	r3, #0
 8009030:	f7f7 fe0c 	bl	8000c4c <__aeabi_uldivmod>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	4613      	mov	r3, r2
 800903a:	60fb      	str	r3, [r7, #12]
 800903c:	e04a      	b.n	80090d4 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800903e:	4b30      	ldr	r3, [pc, #192]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 8009040:	685b      	ldr	r3, [r3, #4]
 8009042:	099b      	lsrs	r3, r3, #6
 8009044:	461a      	mov	r2, r3
 8009046:	f04f 0300 	mov.w	r3, #0
 800904a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800904e:	f04f 0100 	mov.w	r1, #0
 8009052:	ea02 0400 	and.w	r4, r2, r0
 8009056:	ea03 0501 	and.w	r5, r3, r1
 800905a:	4620      	mov	r0, r4
 800905c:	4629      	mov	r1, r5
 800905e:	f04f 0200 	mov.w	r2, #0
 8009062:	f04f 0300 	mov.w	r3, #0
 8009066:	014b      	lsls	r3, r1, #5
 8009068:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800906c:	0142      	lsls	r2, r0, #5
 800906e:	4610      	mov	r0, r2
 8009070:	4619      	mov	r1, r3
 8009072:	1b00      	subs	r0, r0, r4
 8009074:	eb61 0105 	sbc.w	r1, r1, r5
 8009078:	f04f 0200 	mov.w	r2, #0
 800907c:	f04f 0300 	mov.w	r3, #0
 8009080:	018b      	lsls	r3, r1, #6
 8009082:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8009086:	0182      	lsls	r2, r0, #6
 8009088:	1a12      	subs	r2, r2, r0
 800908a:	eb63 0301 	sbc.w	r3, r3, r1
 800908e:	f04f 0000 	mov.w	r0, #0
 8009092:	f04f 0100 	mov.w	r1, #0
 8009096:	00d9      	lsls	r1, r3, #3
 8009098:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800909c:	00d0      	lsls	r0, r2, #3
 800909e:	4602      	mov	r2, r0
 80090a0:	460b      	mov	r3, r1
 80090a2:	1912      	adds	r2, r2, r4
 80090a4:	eb45 0303 	adc.w	r3, r5, r3
 80090a8:	f04f 0000 	mov.w	r0, #0
 80090ac:	f04f 0100 	mov.w	r1, #0
 80090b0:	0299      	lsls	r1, r3, #10
 80090b2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80090b6:	0290      	lsls	r0, r2, #10
 80090b8:	4602      	mov	r2, r0
 80090ba:	460b      	mov	r3, r1
 80090bc:	4610      	mov	r0, r2
 80090be:	4619      	mov	r1, r3
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	461a      	mov	r2, r3
 80090c4:	f04f 0300 	mov.w	r3, #0
 80090c8:	f7f7 fdc0 	bl	8000c4c <__aeabi_uldivmod>
 80090cc:	4602      	mov	r2, r0
 80090ce:	460b      	mov	r3, r1
 80090d0:	4613      	mov	r3, r2
 80090d2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80090d4:	4b0a      	ldr	r3, [pc, #40]	; (8009100 <HAL_RCC_GetSysClockFreq+0x160>)
 80090d6:	685b      	ldr	r3, [r3, #4]
 80090d8:	0c1b      	lsrs	r3, r3, #16
 80090da:	f003 0303 	and.w	r3, r3, #3
 80090de:	3301      	adds	r3, #1
 80090e0:	005b      	lsls	r3, r3, #1
 80090e2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80090e4:	68fa      	ldr	r2, [r7, #12]
 80090e6:	683b      	ldr	r3, [r7, #0]
 80090e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80090ec:	60bb      	str	r3, [r7, #8]
      break;
 80090ee:	e002      	b.n	80090f6 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80090f0:	4b04      	ldr	r3, [pc, #16]	; (8009104 <HAL_RCC_GetSysClockFreq+0x164>)
 80090f2:	60bb      	str	r3, [r7, #8]
      break;
 80090f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80090f6:	68bb      	ldr	r3, [r7, #8]
}
 80090f8:	4618      	mov	r0, r3
 80090fa:	3710      	adds	r7, #16
 80090fc:	46bd      	mov	sp, r7
 80090fe:	bdb0      	pop	{r4, r5, r7, pc}
 8009100:	40023800 	.word	0x40023800
 8009104:	00f42400 	.word	0x00f42400
 8009108:	017d7840 	.word	0x017d7840

0800910c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800910c:	b480      	push	{r7}
 800910e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009110:	4b03      	ldr	r3, [pc, #12]	; (8009120 <HAL_RCC_GetHCLKFreq+0x14>)
 8009112:	681b      	ldr	r3, [r3, #0]
}
 8009114:	4618      	mov	r0, r3
 8009116:	46bd      	mov	sp, r7
 8009118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911c:	4770      	bx	lr
 800911e:	bf00      	nop
 8009120:	20000054 	.word	0x20000054

08009124 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009124:	b580      	push	{r7, lr}
 8009126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009128:	f7ff fff0 	bl	800910c <HAL_RCC_GetHCLKFreq>
 800912c:	4602      	mov	r2, r0
 800912e:	4b05      	ldr	r3, [pc, #20]	; (8009144 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009130:	689b      	ldr	r3, [r3, #8]
 8009132:	0a9b      	lsrs	r3, r3, #10
 8009134:	f003 0307 	and.w	r3, r3, #7
 8009138:	4903      	ldr	r1, [pc, #12]	; (8009148 <HAL_RCC_GetPCLK1Freq+0x24>)
 800913a:	5ccb      	ldrb	r3, [r1, r3]
 800913c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009140:	4618      	mov	r0, r3
 8009142:	bd80      	pop	{r7, pc}
 8009144:	40023800 	.word	0x40023800
 8009148:	08012bfc 	.word	0x08012bfc

0800914c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009150:	f7ff ffdc 	bl	800910c <HAL_RCC_GetHCLKFreq>
 8009154:	4602      	mov	r2, r0
 8009156:	4b05      	ldr	r3, [pc, #20]	; (800916c <HAL_RCC_GetPCLK2Freq+0x20>)
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	0b5b      	lsrs	r3, r3, #13
 800915c:	f003 0307 	and.w	r3, r3, #7
 8009160:	4903      	ldr	r1, [pc, #12]	; (8009170 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009162:	5ccb      	ldrb	r3, [r1, r3]
 8009164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009168:	4618      	mov	r0, r3
 800916a:	bd80      	pop	{r7, pc}
 800916c:	40023800 	.word	0x40023800
 8009170:	08012bfc 	.word	0x08012bfc

08009174 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8009174:	b480      	push	{r7}
 8009176:	b083      	sub	sp, #12
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]
 800917c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	220f      	movs	r2, #15
 8009182:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009184:	4b12      	ldr	r3, [pc, #72]	; (80091d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009186:	689b      	ldr	r3, [r3, #8]
 8009188:	f003 0203 	and.w	r2, r3, #3
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009190:	4b0f      	ldr	r3, [pc, #60]	; (80091d0 <HAL_RCC_GetClockConfig+0x5c>)
 8009192:	689b      	ldr	r3, [r3, #8]
 8009194:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800919c:	4b0c      	ldr	r3, [pc, #48]	; (80091d0 <HAL_RCC_GetClockConfig+0x5c>)
 800919e:	689b      	ldr	r3, [r3, #8]
 80091a0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80091a8:	4b09      	ldr	r3, [pc, #36]	; (80091d0 <HAL_RCC_GetClockConfig+0x5c>)
 80091aa:	689b      	ldr	r3, [r3, #8]
 80091ac:	08db      	lsrs	r3, r3, #3
 80091ae:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80091b6:	4b07      	ldr	r3, [pc, #28]	; (80091d4 <HAL_RCC_GetClockConfig+0x60>)
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f003 020f 	and.w	r2, r3, #15
 80091be:	683b      	ldr	r3, [r7, #0]
 80091c0:	601a      	str	r2, [r3, #0]
}
 80091c2:	bf00      	nop
 80091c4:	370c      	adds	r7, #12
 80091c6:	46bd      	mov	sp, r7
 80091c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091cc:	4770      	bx	lr
 80091ce:	bf00      	nop
 80091d0:	40023800 	.word	0x40023800
 80091d4:	40023c00 	.word	0x40023c00

080091d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b088      	sub	sp, #32
 80091dc:	af00      	add	r7, sp, #0
 80091de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80091e4:	2300      	movs	r3, #0
 80091e6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80091e8:	2300      	movs	r3, #0
 80091ea:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80091ec:	2300      	movs	r3, #0
 80091ee:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80091f0:	2300      	movs	r3, #0
 80091f2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f003 0301 	and.w	r3, r3, #1
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d012      	beq.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009200:	4b69      	ldr	r3, [pc, #420]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009202:	689b      	ldr	r3, [r3, #8]
 8009204:	4a68      	ldr	r2, [pc, #416]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009206:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800920a:	6093      	str	r3, [r2, #8]
 800920c:	4b66      	ldr	r3, [pc, #408]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800920e:	689a      	ldr	r2, [r3, #8]
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009214:	4964      	ldr	r1, [pc, #400]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009216:	4313      	orrs	r3, r2
 8009218:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800921e:	2b00      	cmp	r3, #0
 8009220:	d101      	bne.n	8009226 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8009222:	2301      	movs	r3, #1
 8009224:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800922e:	2b00      	cmp	r3, #0
 8009230:	d017      	beq.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009232:	4b5d      	ldr	r3, [pc, #372]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009234:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009238:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009240:	4959      	ldr	r1, [pc, #356]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009242:	4313      	orrs	r3, r2
 8009244:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800924c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009250:	d101      	bne.n	8009256 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8009252:	2301      	movs	r3, #1
 8009254:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800925a:	2b00      	cmp	r3, #0
 800925c:	d101      	bne.n	8009262 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800925e:	2301      	movs	r3, #1
 8009260:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800926a:	2b00      	cmp	r3, #0
 800926c:	d017      	beq.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800926e:	4b4e      	ldr	r3, [pc, #312]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009270:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009274:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800927c:	494a      	ldr	r1, [pc, #296]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009288:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800928c:	d101      	bne.n	8009292 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800928e:	2301      	movs	r3, #1
 8009290:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009296:	2b00      	cmp	r3, #0
 8009298:	d101      	bne.n	800929e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800929a:	2301      	movs	r3, #1
 800929c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d001      	beq.n	80092ae <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80092aa:	2301      	movs	r3, #1
 80092ac:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f003 0320 	and.w	r3, r3, #32
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	f000 808b 	beq.w	80093d2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80092bc:	4b3a      	ldr	r3, [pc, #232]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092c0:	4a39      	ldr	r2, [pc, #228]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80092c6:	6413      	str	r3, [r2, #64]	; 0x40
 80092c8:	4b37      	ldr	r3, [pc, #220]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80092ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80092d0:	60bb      	str	r3, [r7, #8]
 80092d2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80092d4:	4b35      	ldr	r3, [pc, #212]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a34      	ldr	r2, [pc, #208]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80092de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80092e0:	f7fc fc36 	bl	8005b50 <HAL_GetTick>
 80092e4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092e6:	e008      	b.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80092e8:	f7fc fc32 	bl	8005b50 <HAL_GetTick>
 80092ec:	4602      	mov	r2, r0
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	1ad3      	subs	r3, r2, r3
 80092f2:	2b64      	cmp	r3, #100	; 0x64
 80092f4:	d901      	bls.n	80092fa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80092f6:	2303      	movs	r3, #3
 80092f8:	e355      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80092fa:	4b2c      	ldr	r3, [pc, #176]	; (80093ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009302:	2b00      	cmp	r3, #0
 8009304:	d0f0      	beq.n	80092e8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009306:	4b28      	ldr	r3, [pc, #160]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800930a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800930e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009310:	693b      	ldr	r3, [r7, #16]
 8009312:	2b00      	cmp	r3, #0
 8009314:	d035      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800931a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800931e:	693a      	ldr	r2, [r7, #16]
 8009320:	429a      	cmp	r2, r3
 8009322:	d02e      	beq.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009324:	4b20      	ldr	r3, [pc, #128]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800932c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800932e:	4b1e      	ldr	r3, [pc, #120]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009330:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009332:	4a1d      	ldr	r2, [pc, #116]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009338:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800933a:	4b1b      	ldr	r3, [pc, #108]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800933c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800933e:	4a1a      	ldr	r2, [pc, #104]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009340:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009344:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009346:	4a18      	ldr	r2, [pc, #96]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009348:	693b      	ldr	r3, [r7, #16]
 800934a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800934c:	4b16      	ldr	r3, [pc, #88]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800934e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009350:	f003 0301 	and.w	r3, r3, #1
 8009354:	2b01      	cmp	r3, #1
 8009356:	d114      	bne.n	8009382 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009358:	f7fc fbfa 	bl	8005b50 <HAL_GetTick>
 800935c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800935e:	e00a      	b.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009360:	f7fc fbf6 	bl	8005b50 <HAL_GetTick>
 8009364:	4602      	mov	r2, r0
 8009366:	697b      	ldr	r3, [r7, #20]
 8009368:	1ad3      	subs	r3, r2, r3
 800936a:	f241 3288 	movw	r2, #5000	; 0x1388
 800936e:	4293      	cmp	r3, r2
 8009370:	d901      	bls.n	8009376 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8009372:	2303      	movs	r3, #3
 8009374:	e317      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009376:	4b0c      	ldr	r3, [pc, #48]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800937a:	f003 0302 	and.w	r3, r3, #2
 800937e:	2b00      	cmp	r3, #0
 8009380:	d0ee      	beq.n	8009360 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009386:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800938a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800938e:	d111      	bne.n	80093b4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009390:	4b05      	ldr	r3, [pc, #20]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009392:	689b      	ldr	r3, [r3, #8]
 8009394:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800939c:	4b04      	ldr	r3, [pc, #16]	; (80093b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800939e:	400b      	ands	r3, r1
 80093a0:	4901      	ldr	r1, [pc, #4]	; (80093a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	608b      	str	r3, [r1, #8]
 80093a6:	e00b      	b.n	80093c0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80093a8:	40023800 	.word	0x40023800
 80093ac:	40007000 	.word	0x40007000
 80093b0:	0ffffcff 	.word	0x0ffffcff
 80093b4:	4bb0      	ldr	r3, [pc, #704]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093b6:	689b      	ldr	r3, [r3, #8]
 80093b8:	4aaf      	ldr	r2, [pc, #700]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ba:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80093be:	6093      	str	r3, [r2, #8]
 80093c0:	4bad      	ldr	r3, [pc, #692]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093c2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093cc:	49aa      	ldr	r1, [pc, #680]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f003 0310 	and.w	r3, r3, #16
 80093da:	2b00      	cmp	r3, #0
 80093dc:	d010      	beq.n	8009400 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80093de:	4ba6      	ldr	r3, [pc, #664]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e4:	4aa4      	ldr	r2, [pc, #656]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80093ea:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80093ee:	4ba2      	ldr	r3, [pc, #648]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093f0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093f8:	499f      	ldr	r1, [pc, #636]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093fa:	4313      	orrs	r3, r2
 80093fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009408:	2b00      	cmp	r3, #0
 800940a:	d00a      	beq.n	8009422 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800940c:	4b9a      	ldr	r3, [pc, #616]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800940e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009412:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800941a:	4997      	ldr	r1, [pc, #604]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800941c:	4313      	orrs	r3, r2
 800941e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800942a:	2b00      	cmp	r3, #0
 800942c:	d00a      	beq.n	8009444 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800942e:	4b92      	ldr	r3, [pc, #584]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009434:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800943c:	498e      	ldr	r1, [pc, #568]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800943e:	4313      	orrs	r3, r2
 8009440:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800944c:	2b00      	cmp	r3, #0
 800944e:	d00a      	beq.n	8009466 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009450:	4b89      	ldr	r3, [pc, #548]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009452:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009456:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800945e:	4986      	ldr	r1, [pc, #536]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009460:	4313      	orrs	r3, r2
 8009462:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800946e:	2b00      	cmp	r3, #0
 8009470:	d00a      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8009472:	4b81      	ldr	r3, [pc, #516]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009474:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009478:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009480:	497d      	ldr	r1, [pc, #500]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009490:	2b00      	cmp	r3, #0
 8009492:	d00a      	beq.n	80094aa <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009494:	4b78      	ldr	r3, [pc, #480]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009496:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800949a:	f023 0203 	bic.w	r2, r3, #3
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094a2:	4975      	ldr	r1, [pc, #468]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094a4:	4313      	orrs	r3, r2
 80094a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d00a      	beq.n	80094cc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80094b6:	4b70      	ldr	r3, [pc, #448]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094bc:	f023 020c 	bic.w	r2, r3, #12
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80094c4:	496c      	ldr	r1, [pc, #432]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094c6:	4313      	orrs	r3, r2
 80094c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094d4:	2b00      	cmp	r3, #0
 80094d6:	d00a      	beq.n	80094ee <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80094d8:	4b67      	ldr	r3, [pc, #412]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094de:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80094e6:	4964      	ldr	r1, [pc, #400]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094e8:	4313      	orrs	r3, r2
 80094ea:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80094f6:	2b00      	cmp	r3, #0
 80094f8:	d00a      	beq.n	8009510 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80094fa:	4b5f      	ldr	r3, [pc, #380]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009500:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009508:	495b      	ldr	r1, [pc, #364]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800950a:	4313      	orrs	r3, r2
 800950c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009518:	2b00      	cmp	r3, #0
 800951a:	d00a      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800951c:	4b56      	ldr	r3, [pc, #344]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800951e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009522:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009526:	687b      	ldr	r3, [r7, #4]
 8009528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800952a:	4953      	ldr	r1, [pc, #332]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800952c:	4313      	orrs	r3, r2
 800952e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800953a:	2b00      	cmp	r3, #0
 800953c:	d00a      	beq.n	8009554 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800953e:	4b4e      	ldr	r3, [pc, #312]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009544:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800954c:	494a      	ldr	r1, [pc, #296]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800955c:	2b00      	cmp	r3, #0
 800955e:	d00a      	beq.n	8009576 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009560:	4b45      	ldr	r3, [pc, #276]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009562:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009566:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800956e:	4942      	ldr	r1, [pc, #264]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009570:	4313      	orrs	r3, r2
 8009572:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	681b      	ldr	r3, [r3, #0]
 800957a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00a      	beq.n	8009598 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009582:	4b3d      	ldr	r3, [pc, #244]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009588:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009590:	4939      	ldr	r1, [pc, #228]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009592:	4313      	orrs	r3, r2
 8009594:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d00a      	beq.n	80095ba <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80095a4:	4b34      	ldr	r3, [pc, #208]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80095a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095aa:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80095b2:	4931      	ldr	r1, [pc, #196]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80095b4:	4313      	orrs	r3, r2
 80095b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d011      	beq.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80095c6:	4b2c      	ldr	r3, [pc, #176]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80095c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095cc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095d4:	4928      	ldr	r1, [pc, #160]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80095d6:	4313      	orrs	r3, r2
 80095d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80095e0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095e4:	d101      	bne.n	80095ea <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80095e6:	2301      	movs	r3, #1
 80095e8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f003 0308 	and.w	r3, r3, #8
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d001      	beq.n	80095fa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80095f6:	2301      	movs	r3, #1
 80095f8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009602:	2b00      	cmp	r3, #0
 8009604:	d00a      	beq.n	800961c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009606:	4b1c      	ldr	r3, [pc, #112]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009614:	4918      	ldr	r1, [pc, #96]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009616:	4313      	orrs	r3, r2
 8009618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009624:	2b00      	cmp	r3, #0
 8009626:	d00b      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009628:	4b13      	ldr	r3, [pc, #76]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800962a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800962e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009638:	490f      	ldr	r1, [pc, #60]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800963a:	4313      	orrs	r3, r2
 800963c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8009640:	69fb      	ldr	r3, [r7, #28]
 8009642:	2b01      	cmp	r3, #1
 8009644:	d005      	beq.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800964e:	f040 80d8 	bne.w	8009802 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009652:	4b09      	ldr	r3, [pc, #36]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	4a08      	ldr	r2, [pc, #32]	; (8009678 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009658:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800965c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965e:	f7fc fa77 	bl	8005b50 <HAL_GetTick>
 8009662:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009664:	e00a      	b.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009666:	f7fc fa73 	bl	8005b50 <HAL_GetTick>
 800966a:	4602      	mov	r2, r0
 800966c:	697b      	ldr	r3, [r7, #20]
 800966e:	1ad3      	subs	r3, r2, r3
 8009670:	2b64      	cmp	r3, #100	; 0x64
 8009672:	d903      	bls.n	800967c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009674:	2303      	movs	r3, #3
 8009676:	e196      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009678:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800967c:	4b6c      	ldr	r3, [pc, #432]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009684:	2b00      	cmp	r3, #0
 8009686:	d1ee      	bne.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	f003 0301 	and.w	r3, r3, #1
 8009690:	2b00      	cmp	r3, #0
 8009692:	d021      	beq.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009698:	2b00      	cmp	r3, #0
 800969a:	d11d      	bne.n	80096d8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800969c:	4b64      	ldr	r3, [pc, #400]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800969e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096a2:	0c1b      	lsrs	r3, r3, #16
 80096a4:	f003 0303 	and.w	r3, r3, #3
 80096a8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80096aa:	4b61      	ldr	r3, [pc, #388]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80096b0:	0e1b      	lsrs	r3, r3, #24
 80096b2:	f003 030f 	and.w	r3, r3, #15
 80096b6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	685b      	ldr	r3, [r3, #4]
 80096bc:	019a      	lsls	r2, r3, #6
 80096be:	693b      	ldr	r3, [r7, #16]
 80096c0:	041b      	lsls	r3, r3, #16
 80096c2:	431a      	orrs	r2, r3
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	061b      	lsls	r3, r3, #24
 80096c8:	431a      	orrs	r2, r3
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	071b      	lsls	r3, r3, #28
 80096d0:	4957      	ldr	r1, [pc, #348]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80096d2:	4313      	orrs	r3, r2
 80096d4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096e0:	2b00      	cmp	r3, #0
 80096e2:	d004      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x516>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80096ec:	d00a      	beq.n	8009704 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d02e      	beq.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009702:	d129      	bne.n	8009758 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009704:	4b4a      	ldr	r3, [pc, #296]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009706:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800970a:	0c1b      	lsrs	r3, r3, #16
 800970c:	f003 0303 	and.w	r3, r3, #3
 8009710:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009712:	4b47      	ldr	r3, [pc, #284]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009714:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009718:	0f1b      	lsrs	r3, r3, #28
 800971a:	f003 0307 	and.w	r3, r3, #7
 800971e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	685b      	ldr	r3, [r3, #4]
 8009724:	019a      	lsls	r2, r3, #6
 8009726:	693b      	ldr	r3, [r7, #16]
 8009728:	041b      	lsls	r3, r3, #16
 800972a:	431a      	orrs	r2, r3
 800972c:	687b      	ldr	r3, [r7, #4]
 800972e:	68db      	ldr	r3, [r3, #12]
 8009730:	061b      	lsls	r3, r3, #24
 8009732:	431a      	orrs	r2, r3
 8009734:	68fb      	ldr	r3, [r7, #12]
 8009736:	071b      	lsls	r3, r3, #28
 8009738:	493d      	ldr	r1, [pc, #244]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009740:	4b3b      	ldr	r3, [pc, #236]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009742:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009746:	f023 021f 	bic.w	r2, r3, #31
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800974e:	3b01      	subs	r3, #1
 8009750:	4937      	ldr	r1, [pc, #220]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009752:	4313      	orrs	r3, r2
 8009754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	681b      	ldr	r3, [r3, #0]
 800975c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009760:	2b00      	cmp	r3, #0
 8009762:	d01d      	beq.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009764:	4b32      	ldr	r3, [pc, #200]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009766:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800976a:	0e1b      	lsrs	r3, r3, #24
 800976c:	f003 030f 	and.w	r3, r3, #15
 8009770:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009772:	4b2f      	ldr	r3, [pc, #188]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009774:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009778:	0f1b      	lsrs	r3, r3, #28
 800977a:	f003 0307 	and.w	r3, r3, #7
 800977e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	685b      	ldr	r3, [r3, #4]
 8009784:	019a      	lsls	r2, r3, #6
 8009786:	687b      	ldr	r3, [r7, #4]
 8009788:	691b      	ldr	r3, [r3, #16]
 800978a:	041b      	lsls	r3, r3, #16
 800978c:	431a      	orrs	r2, r3
 800978e:	693b      	ldr	r3, [r7, #16]
 8009790:	061b      	lsls	r3, r3, #24
 8009792:	431a      	orrs	r2, r3
 8009794:	68fb      	ldr	r3, [r7, #12]
 8009796:	071b      	lsls	r3, r3, #28
 8009798:	4925      	ldr	r1, [pc, #148]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800979a:	4313      	orrs	r3, r2
 800979c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d011      	beq.n	80097d0 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	685b      	ldr	r3, [r3, #4]
 80097b0:	019a      	lsls	r2, r3, #6
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	691b      	ldr	r3, [r3, #16]
 80097b6:	041b      	lsls	r3, r3, #16
 80097b8:	431a      	orrs	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	061b      	lsls	r3, r3, #24
 80097c0:	431a      	orrs	r2, r3
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	689b      	ldr	r3, [r3, #8]
 80097c6:	071b      	lsls	r3, r3, #28
 80097c8:	4919      	ldr	r1, [pc, #100]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80097ca:	4313      	orrs	r3, r2
 80097cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80097d0:	4b17      	ldr	r3, [pc, #92]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a16      	ldr	r2, [pc, #88]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80097d6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80097da:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097dc:	f7fc f9b8 	bl	8005b50 <HAL_GetTick>
 80097e0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097e2:	e008      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80097e4:	f7fc f9b4 	bl	8005b50 <HAL_GetTick>
 80097e8:	4602      	mov	r2, r0
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	1ad3      	subs	r3, r2, r3
 80097ee:	2b64      	cmp	r3, #100	; 0x64
 80097f0:	d901      	bls.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80097f2:	2303      	movs	r3, #3
 80097f4:	e0d7      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80097f6:	4b0e      	ldr	r3, [pc, #56]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d0f0      	beq.n	80097e4 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009802:	69bb      	ldr	r3, [r7, #24]
 8009804:	2b01      	cmp	r3, #1
 8009806:	f040 80cd 	bne.w	80099a4 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800980a:	4b09      	ldr	r3, [pc, #36]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	4a08      	ldr	r2, [pc, #32]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009810:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009814:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009816:	f7fc f99b 	bl	8005b50 <HAL_GetTick>
 800981a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800981c:	e00a      	b.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800981e:	f7fc f997 	bl	8005b50 <HAL_GetTick>
 8009822:	4602      	mov	r2, r0
 8009824:	697b      	ldr	r3, [r7, #20]
 8009826:	1ad3      	subs	r3, r2, r3
 8009828:	2b64      	cmp	r3, #100	; 0x64
 800982a:	d903      	bls.n	8009834 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	e0ba      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8009830:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009834:	4b5e      	ldr	r3, [pc, #376]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800983c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009840:	d0ed      	beq.n	800981e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800984a:	2b00      	cmp	r3, #0
 800984c:	d003      	beq.n	8009856 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009852:	2b00      	cmp	r3, #0
 8009854:	d009      	beq.n	800986a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009856:	687b      	ldr	r3, [r7, #4]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800985e:	2b00      	cmp	r3, #0
 8009860:	d02e      	beq.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009866:	2b00      	cmp	r3, #0
 8009868:	d12a      	bne.n	80098c0 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800986a:	4b51      	ldr	r3, [pc, #324]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800986c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009870:	0c1b      	lsrs	r3, r3, #16
 8009872:	f003 0303 	and.w	r3, r3, #3
 8009876:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009878:	4b4d      	ldr	r3, [pc, #308]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800987a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800987e:	0f1b      	lsrs	r3, r3, #28
 8009880:	f003 0307 	and.w	r3, r3, #7
 8009884:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	695b      	ldr	r3, [r3, #20]
 800988a:	019a      	lsls	r2, r3, #6
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	041b      	lsls	r3, r3, #16
 8009890:	431a      	orrs	r2, r3
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	699b      	ldr	r3, [r3, #24]
 8009896:	061b      	lsls	r3, r3, #24
 8009898:	431a      	orrs	r2, r3
 800989a:	68fb      	ldr	r3, [r7, #12]
 800989c:	071b      	lsls	r3, r3, #28
 800989e:	4944      	ldr	r1, [pc, #272]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80098a0:	4313      	orrs	r3, r2
 80098a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80098a6:	4b42      	ldr	r3, [pc, #264]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80098a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80098ac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098b4:	3b01      	subs	r3, #1
 80098b6:	021b      	lsls	r3, r3, #8
 80098b8:	493d      	ldr	r1, [pc, #244]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80098ba:	4313      	orrs	r3, r2
 80098bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	d022      	beq.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80098d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80098d4:	d11d      	bne.n	8009912 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80098d6:	4b36      	ldr	r3, [pc, #216]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80098d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098dc:	0e1b      	lsrs	r3, r3, #24
 80098de:	f003 030f 	and.w	r3, r3, #15
 80098e2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80098e4:	4b32      	ldr	r3, [pc, #200]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80098e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ea:	0f1b      	lsrs	r3, r3, #28
 80098ec:	f003 0307 	and.w	r3, r3, #7
 80098f0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	695b      	ldr	r3, [r3, #20]
 80098f6:	019a      	lsls	r2, r3, #6
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	041b      	lsls	r3, r3, #16
 80098fe:	431a      	orrs	r2, r3
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	061b      	lsls	r3, r3, #24
 8009904:	431a      	orrs	r2, r3
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	071b      	lsls	r3, r3, #28
 800990a:	4929      	ldr	r1, [pc, #164]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800990c:	4313      	orrs	r3, r2
 800990e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	f003 0308 	and.w	r3, r3, #8
 800991a:	2b00      	cmp	r3, #0
 800991c:	d028      	beq.n	8009970 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800991e:	4b24      	ldr	r3, [pc, #144]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009924:	0e1b      	lsrs	r3, r3, #24
 8009926:	f003 030f 	and.w	r3, r3, #15
 800992a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800992c:	4b20      	ldr	r3, [pc, #128]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800992e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009932:	0c1b      	lsrs	r3, r3, #16
 8009934:	f003 0303 	and.w	r3, r3, #3
 8009938:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	695b      	ldr	r3, [r3, #20]
 800993e:	019a      	lsls	r2, r3, #6
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	041b      	lsls	r3, r3, #16
 8009944:	431a      	orrs	r2, r3
 8009946:	693b      	ldr	r3, [r7, #16]
 8009948:	061b      	lsls	r3, r3, #24
 800994a:	431a      	orrs	r2, r3
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	69db      	ldr	r3, [r3, #28]
 8009950:	071b      	lsls	r3, r3, #28
 8009952:	4917      	ldr	r1, [pc, #92]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009954:	4313      	orrs	r3, r2
 8009956:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800995a:	4b15      	ldr	r3, [pc, #84]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800995c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009960:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009968:	4911      	ldr	r1, [pc, #68]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800996a:	4313      	orrs	r3, r2
 800996c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009970:	4b0f      	ldr	r3, [pc, #60]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	4a0e      	ldr	r2, [pc, #56]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009976:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800997a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800997c:	f7fc f8e8 	bl	8005b50 <HAL_GetTick>
 8009980:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009982:	e008      	b.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009984:	f7fc f8e4 	bl	8005b50 <HAL_GetTick>
 8009988:	4602      	mov	r2, r0
 800998a:	697b      	ldr	r3, [r7, #20]
 800998c:	1ad3      	subs	r3, r2, r3
 800998e:	2b64      	cmp	r3, #100	; 0x64
 8009990:	d901      	bls.n	8009996 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009992:	2303      	movs	r3, #3
 8009994:	e007      	b.n	80099a6 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009996:	4b06      	ldr	r3, [pc, #24]	; (80099b0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80099a2:	d1ef      	bne.n	8009984 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 80099a4:	2300      	movs	r3, #0
}
 80099a6:	4618      	mov	r0, r3
 80099a8:	3720      	adds	r7, #32
 80099aa:	46bd      	mov	sp, r7
 80099ac:	bd80      	pop	{r7, pc}
 80099ae:	bf00      	nop
 80099b0:	40023800 	.word	0x40023800

080099b4 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80099b4:	b580      	push	{r7, lr}
 80099b6:	b082      	sub	sp, #8
 80099b8:	af00      	add	r7, sp, #0
 80099ba:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 80099bc:	687b      	ldr	r3, [r7, #4]
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d101      	bne.n	80099c6 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 80099c2:	2301      	movs	r3, #1
 80099c4:	e06b      	b.n	8009a9e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	7f5b      	ldrb	r3, [r3, #29]
 80099ca:	b2db      	uxtb	r3, r3
 80099cc:	2b00      	cmp	r3, #0
 80099ce:	d105      	bne.n	80099dc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	2200      	movs	r2, #0
 80099d4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80099d6:	6878      	ldr	r0, [r7, #4]
 80099d8:	f7fb fce2 	bl	80053a0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	2202      	movs	r2, #2
 80099e0:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	22ca      	movs	r2, #202	; 0xca
 80099e8:	625a      	str	r2, [r3, #36]	; 0x24
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	2253      	movs	r2, #83	; 0x53
 80099f0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80099f2:	6878      	ldr	r0, [r7, #4]
 80099f4:	f000 fbae 	bl	800a154 <RTC_EnterInitMode>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d008      	beq.n	8009a10 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	22ff      	movs	r2, #255	; 0xff
 8009a04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2204      	movs	r2, #4
 8009a0a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8009a0c:	2301      	movs	r3, #1
 8009a0e:	e046      	b.n	8009a9e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	6899      	ldr	r1, [r3, #8]
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	4b23      	ldr	r3, [pc, #140]	; (8009aa8 <HAL_RTC_Init+0xf4>)
 8009a1c:	400b      	ands	r3, r1
 8009a1e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	6899      	ldr	r1, [r3, #8]
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685a      	ldr	r2, [r3, #4]
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	691b      	ldr	r3, [r3, #16]
 8009a2e:	431a      	orrs	r2, r3
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	431a      	orrs	r2, r3
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	430a      	orrs	r2, r1
 8009a3c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	68d2      	ldr	r2, [r2, #12]
 8009a46:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	6919      	ldr	r1, [r3, #16]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	041a      	lsls	r2, r3, #16
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	430a      	orrs	r2, r1
 8009a5a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	68da      	ldr	r2, [r3, #12]
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a6a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f022 0208 	bic.w	r2, r2, #8
 8009a7a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	699a      	ldr	r2, [r3, #24]
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	430a      	orrs	r2, r1
 8009a8c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	22ff      	movs	r2, #255	; 0xff
 8009a94:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8009a9c:	2300      	movs	r3, #0
  }
}
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	3708      	adds	r7, #8
 8009aa2:	46bd      	mov	sp, r7
 8009aa4:	bd80      	pop	{r7, pc}
 8009aa6:	bf00      	nop
 8009aa8:	ff8fffbf 	.word	0xff8fffbf

08009aac <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009aac:	b590      	push	{r4, r7, lr}
 8009aae:	b087      	sub	sp, #28
 8009ab0:	af00      	add	r7, sp, #0
 8009ab2:	60f8      	str	r0, [r7, #12]
 8009ab4:	60b9      	str	r1, [r7, #8]
 8009ab6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009ab8:	2300      	movs	r3, #0
 8009aba:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	7f1b      	ldrb	r3, [r3, #28]
 8009ac0:	2b01      	cmp	r3, #1
 8009ac2:	d101      	bne.n	8009ac8 <HAL_RTC_SetTime+0x1c>
 8009ac4:	2302      	movs	r3, #2
 8009ac6:	e0a8      	b.n	8009c1a <HAL_RTC_SetTime+0x16e>
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	2201      	movs	r2, #1
 8009acc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009ace:	68fb      	ldr	r3, [r7, #12]
 8009ad0:	2202      	movs	r2, #2
 8009ad2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	2b00      	cmp	r3, #0
 8009ad8:	d126      	bne.n	8009b28 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	689b      	ldr	r3, [r3, #8]
 8009ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d102      	bne.n	8009aee <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	2200      	movs	r2, #0
 8009aec:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009aee:	68bb      	ldr	r3, [r7, #8]
 8009af0:	781b      	ldrb	r3, [r3, #0]
 8009af2:	4618      	mov	r0, r3
 8009af4:	f000 fb5a 	bl	800a1ac <RTC_ByteToBcd2>
 8009af8:	4603      	mov	r3, r0
 8009afa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009afc:	68bb      	ldr	r3, [r7, #8]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fb53 	bl	800a1ac <RTC_ByteToBcd2>
 8009b06:	4603      	mov	r3, r0
 8009b08:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009b0a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8009b0c:	68bb      	ldr	r3, [r7, #8]
 8009b0e:	789b      	ldrb	r3, [r3, #2]
 8009b10:	4618      	mov	r0, r3
 8009b12:	f000 fb4b 	bl	800a1ac <RTC_ByteToBcd2>
 8009b16:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009b18:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8009b1c:	68bb      	ldr	r3, [r7, #8]
 8009b1e:	7b1b      	ldrb	r3, [r3, #12]
 8009b20:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8009b22:	4313      	orrs	r3, r2
 8009b24:	617b      	str	r3, [r7, #20]
 8009b26:	e018      	b.n	8009b5a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	689b      	ldr	r3, [r3, #8]
 8009b2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d102      	bne.n	8009b3c <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009b36:	68bb      	ldr	r3, [r7, #8]
 8009b38:	2200      	movs	r2, #0
 8009b3a:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009b3c:	68bb      	ldr	r3, [r7, #8]
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009b42:	68bb      	ldr	r3, [r7, #8]
 8009b44:	785b      	ldrb	r3, [r3, #1]
 8009b46:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009b48:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8009b4a:	68ba      	ldr	r2, [r7, #8]
 8009b4c:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8009b4e:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8009b50:	68bb      	ldr	r3, [r7, #8]
 8009b52:	7b1b      	ldrb	r3, [r3, #12]
 8009b54:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8009b56:	4313      	orrs	r3, r2
 8009b58:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	22ca      	movs	r2, #202	; 0xca
 8009b60:	625a      	str	r2, [r3, #36]	; 0x24
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	681b      	ldr	r3, [r3, #0]
 8009b66:	2253      	movs	r2, #83	; 0x53
 8009b68:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009b6a:	68f8      	ldr	r0, [r7, #12]
 8009b6c:	f000 faf2 	bl	800a154 <RTC_EnterInitMode>
 8009b70:	4603      	mov	r3, r0
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d00b      	beq.n	8009b8e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009b76:	68fb      	ldr	r3, [r7, #12]
 8009b78:	681b      	ldr	r3, [r3, #0]
 8009b7a:	22ff      	movs	r2, #255	; 0xff
 8009b7c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	2204      	movs	r2, #4
 8009b82:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009b84:	68fb      	ldr	r3, [r7, #12]
 8009b86:	2200      	movs	r2, #0
 8009b88:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009b8a:	2301      	movs	r3, #1
 8009b8c:	e045      	b.n	8009c1a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681a      	ldr	r2, [r3, #0]
 8009b92:	6979      	ldr	r1, [r7, #20]
 8009b94:	4b23      	ldr	r3, [pc, #140]	; (8009c24 <HAL_RTC_SetTime+0x178>)
 8009b96:	400b      	ands	r3, r1
 8009b98:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009b9a:	68fb      	ldr	r3, [r7, #12]
 8009b9c:	681b      	ldr	r3, [r3, #0]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009ba8:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009baa:	68fb      	ldr	r3, [r7, #12]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	6899      	ldr	r1, [r3, #8]
 8009bb0:	68bb      	ldr	r3, [r7, #8]
 8009bb2:	691a      	ldr	r2, [r3, #16]
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	695b      	ldr	r3, [r3, #20]
 8009bb8:	431a      	orrs	r2, r3
 8009bba:	68fb      	ldr	r3, [r7, #12]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	430a      	orrs	r2, r1
 8009bc0:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009bc2:	68fb      	ldr	r3, [r7, #12]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	68da      	ldr	r2, [r3, #12]
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009bd0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009bd2:	68fb      	ldr	r3, [r7, #12]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	689b      	ldr	r3, [r3, #8]
 8009bd8:	f003 0320 	and.w	r3, r3, #32
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d111      	bne.n	8009c04 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009be0:	68f8      	ldr	r0, [r7, #12]
 8009be2:	f000 fa8f 	bl	800a104 <HAL_RTC_WaitForSynchro>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b00      	cmp	r3, #0
 8009bea:	d00b      	beq.n	8009c04 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	681b      	ldr	r3, [r3, #0]
 8009bf0:	22ff      	movs	r2, #255	; 0xff
 8009bf2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	2204      	movs	r2, #4
 8009bf8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	2200      	movs	r2, #0
 8009bfe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009c00:	2301      	movs	r3, #1
 8009c02:	e00a      	b.n	8009c1a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	22ff      	movs	r2, #255	; 0xff
 8009c0a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009c0c:	68fb      	ldr	r3, [r7, #12]
 8009c0e:	2201      	movs	r2, #1
 8009c10:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009c18:	2300      	movs	r3, #0
  }
}
 8009c1a:	4618      	mov	r0, r3
 8009c1c:	371c      	adds	r7, #28
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	bd90      	pop	{r4, r7, pc}
 8009c22:	bf00      	nop
 8009c24:	007f7f7f 	.word	0x007f7f7f

08009c28 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b086      	sub	sp, #24
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	60f8      	str	r0, [r7, #12]
 8009c30:	60b9      	str	r1, [r7, #8]
 8009c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009c34:	2300      	movs	r3, #0
 8009c36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681b      	ldr	r3, [r3, #0]
 8009c46:	691b      	ldr	r3, [r3, #16]
 8009c48:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009c4c:	68bb      	ldr	r3, [r7, #8]
 8009c4e:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	681b      	ldr	r3, [r3, #0]
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	4b22      	ldr	r3, [pc, #136]	; (8009ce0 <HAL_RTC_GetTime+0xb8>)
 8009c58:	4013      	ands	r3, r2
 8009c5a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009c5c:	697b      	ldr	r3, [r7, #20]
 8009c5e:	0c1b      	lsrs	r3, r3, #16
 8009c60:	b2db      	uxtb	r3, r3
 8009c62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009c66:	b2da      	uxtb	r2, r3
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009c6c:	697b      	ldr	r3, [r7, #20]
 8009c6e:	0a1b      	lsrs	r3, r3, #8
 8009c70:	b2db      	uxtb	r3, r3
 8009c72:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c76:	b2da      	uxtb	r2, r3
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009c7c:	697b      	ldr	r3, [r7, #20]
 8009c7e:	b2db      	uxtb	r3, r3
 8009c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009c84:	b2da      	uxtb	r2, r3
 8009c86:	68bb      	ldr	r3, [r7, #8]
 8009c88:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8009c8a:	697b      	ldr	r3, [r7, #20]
 8009c8c:	0c1b      	lsrs	r3, r3, #16
 8009c8e:	b2db      	uxtb	r3, r3
 8009c90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c94:	b2da      	uxtb	r2, r3
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	2b00      	cmp	r3, #0
 8009c9e:	d11a      	bne.n	8009cd6 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009ca0:	68bb      	ldr	r3, [r7, #8]
 8009ca2:	781b      	ldrb	r3, [r3, #0]
 8009ca4:	4618      	mov	r0, r3
 8009ca6:	f000 fa9f 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009caa:	4603      	mov	r3, r0
 8009cac:	461a      	mov	r2, r3
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009cb2:	68bb      	ldr	r3, [r7, #8]
 8009cb4:	785b      	ldrb	r3, [r3, #1]
 8009cb6:	4618      	mov	r0, r3
 8009cb8:	f000 fa96 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009cbc:	4603      	mov	r3, r0
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	68bb      	ldr	r3, [r7, #8]
 8009cc2:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	789b      	ldrb	r3, [r3, #2]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f000 fa8d 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	461a      	mov	r2, r3
 8009cd2:	68bb      	ldr	r3, [r7, #8]
 8009cd4:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009cd6:	2300      	movs	r3, #0
}
 8009cd8:	4618      	mov	r0, r3
 8009cda:	3718      	adds	r7, #24
 8009cdc:	46bd      	mov	sp, r7
 8009cde:	bd80      	pop	{r7, pc}
 8009ce0:	007f7f7f 	.word	0x007f7f7f

08009ce4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009ce4:	b590      	push	{r4, r7, lr}
 8009ce6:	b087      	sub	sp, #28
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	60f8      	str	r0, [r7, #12]
 8009cec:	60b9      	str	r1, [r7, #8]
 8009cee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009cf0:	2300      	movs	r3, #0
 8009cf2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	7f1b      	ldrb	r3, [r3, #28]
 8009cf8:	2b01      	cmp	r3, #1
 8009cfa:	d101      	bne.n	8009d00 <HAL_RTC_SetDate+0x1c>
 8009cfc:	2302      	movs	r3, #2
 8009cfe:	e092      	b.n	8009e26 <HAL_RTC_SetDate+0x142>
 8009d00:	68fb      	ldr	r3, [r7, #12]
 8009d02:	2201      	movs	r2, #1
 8009d04:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	2202      	movs	r2, #2
 8009d0a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d10e      	bne.n	8009d30 <HAL_RTC_SetDate+0x4c>
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	785b      	ldrb	r3, [r3, #1]
 8009d16:	f003 0310 	and.w	r3, r3, #16
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d008      	beq.n	8009d30 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	785b      	ldrb	r3, [r3, #1]
 8009d22:	f023 0310 	bic.w	r3, r3, #16
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	330a      	adds	r3, #10
 8009d2a:	b2da      	uxtb	r2, r3
 8009d2c:	68bb      	ldr	r3, [r7, #8]
 8009d2e:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009d30:	687b      	ldr	r3, [r7, #4]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d11c      	bne.n	8009d70 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009d36:	68bb      	ldr	r3, [r7, #8]
 8009d38:	78db      	ldrb	r3, [r3, #3]
 8009d3a:	4618      	mov	r0, r3
 8009d3c:	f000 fa36 	bl	800a1ac <RTC_ByteToBcd2>
 8009d40:	4603      	mov	r3, r0
 8009d42:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	785b      	ldrb	r3, [r3, #1]
 8009d48:	4618      	mov	r0, r3
 8009d4a:	f000 fa2f 	bl	800a1ac <RTC_ByteToBcd2>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009d52:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009d54:	68bb      	ldr	r3, [r7, #8]
 8009d56:	789b      	ldrb	r3, [r3, #2]
 8009d58:	4618      	mov	r0, r3
 8009d5a:	f000 fa27 	bl	800a1ac <RTC_ByteToBcd2>
 8009d5e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009d60:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009d64:	68bb      	ldr	r3, [r7, #8]
 8009d66:	781b      	ldrb	r3, [r3, #0]
 8009d68:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009d6a:	4313      	orrs	r3, r2
 8009d6c:	617b      	str	r3, [r7, #20]
 8009d6e:	e00e      	b.n	8009d8e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009d70:	68bb      	ldr	r3, [r7, #8]
 8009d72:	78db      	ldrb	r3, [r3, #3]
 8009d74:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009d76:	68bb      	ldr	r3, [r7, #8]
 8009d78:	785b      	ldrb	r3, [r3, #1]
 8009d7a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009d7c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009d7e:	68ba      	ldr	r2, [r7, #8]
 8009d80:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009d82:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009d84:	68bb      	ldr	r3, [r7, #8]
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009d8a:	4313      	orrs	r3, r2
 8009d8c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	22ca      	movs	r2, #202	; 0xca
 8009d94:	625a      	str	r2, [r3, #36]	; 0x24
 8009d96:	68fb      	ldr	r3, [r7, #12]
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	2253      	movs	r2, #83	; 0x53
 8009d9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f000 f9d8 	bl	800a154 <RTC_EnterInitMode>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00b      	beq.n	8009dc2 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	681b      	ldr	r3, [r3, #0]
 8009dae:	22ff      	movs	r2, #255	; 0xff
 8009db0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	2204      	movs	r2, #4
 8009db6:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	2200      	movs	r2, #0
 8009dbc:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	e031      	b.n	8009e26 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681a      	ldr	r2, [r3, #0]
 8009dc6:	6979      	ldr	r1, [r7, #20]
 8009dc8:	4b19      	ldr	r3, [pc, #100]	; (8009e30 <HAL_RTC_SetDate+0x14c>)
 8009dca:	400b      	ands	r3, r1
 8009dcc:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	68da      	ldr	r2, [r3, #12]
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009ddc:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	689b      	ldr	r3, [r3, #8]
 8009de4:	f003 0320 	and.w	r3, r3, #32
 8009de8:	2b00      	cmp	r3, #0
 8009dea:	d111      	bne.n	8009e10 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 f989 	bl	800a104 <HAL_RTC_WaitForSynchro>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d00b      	beq.n	8009e10 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	22ff      	movs	r2, #255	; 0xff
 8009dfe:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	2204      	movs	r2, #4
 8009e04:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	e00a      	b.n	8009e26 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	22ff      	movs	r2, #255	; 0xff
 8009e16:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	2201      	movs	r2, #1
 8009e1c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	2200      	movs	r2, #0
 8009e22:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009e24:	2300      	movs	r3, #0
  }
}
 8009e26:	4618      	mov	r0, r3
 8009e28:	371c      	adds	r7, #28
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	bd90      	pop	{r4, r7, pc}
 8009e2e:	bf00      	nop
 8009e30:	00ffff3f 	.word	0x00ffff3f

08009e34 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009e34:	b580      	push	{r7, lr}
 8009e36:	b086      	sub	sp, #24
 8009e38:	af00      	add	r7, sp, #0
 8009e3a:	60f8      	str	r0, [r7, #12]
 8009e3c:	60b9      	str	r1, [r7, #8]
 8009e3e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009e40:	2300      	movs	r3, #0
 8009e42:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	685a      	ldr	r2, [r3, #4]
 8009e4a:	4b21      	ldr	r3, [pc, #132]	; (8009ed0 <HAL_RTC_GetDate+0x9c>)
 8009e4c:	4013      	ands	r3, r2
 8009e4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009e50:	697b      	ldr	r3, [r7, #20]
 8009e52:	0c1b      	lsrs	r3, r3, #16
 8009e54:	b2da      	uxtb	r2, r3
 8009e56:	68bb      	ldr	r3, [r7, #8]
 8009e58:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009e5a:	697b      	ldr	r3, [r7, #20]
 8009e5c:	0a1b      	lsrs	r3, r3, #8
 8009e5e:	b2db      	uxtb	r3, r3
 8009e60:	f003 031f 	and.w	r3, r3, #31
 8009e64:	b2da      	uxtb	r2, r3
 8009e66:	68bb      	ldr	r3, [r7, #8]
 8009e68:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009e6a:	697b      	ldr	r3, [r7, #20]
 8009e6c:	b2db      	uxtb	r3, r3
 8009e6e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009e72:	b2da      	uxtb	r2, r3
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009e78:	697b      	ldr	r3, [r7, #20]
 8009e7a:	0b5b      	lsrs	r3, r3, #13
 8009e7c:	b2db      	uxtb	r3, r3
 8009e7e:	f003 0307 	and.w	r3, r3, #7
 8009e82:	b2da      	uxtb	r2, r3
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d11a      	bne.n	8009ec4 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	78db      	ldrb	r3, [r3, #3]
 8009e92:	4618      	mov	r0, r3
 8009e94:	f000 f9a8 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009e98:	4603      	mov	r3, r0
 8009e9a:	461a      	mov	r2, r3
 8009e9c:	68bb      	ldr	r3, [r7, #8]
 8009e9e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	785b      	ldrb	r3, [r3, #1]
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	f000 f99f 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009eaa:	4603      	mov	r3, r0
 8009eac:	461a      	mov	r2, r3
 8009eae:	68bb      	ldr	r3, [r7, #8]
 8009eb0:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	789b      	ldrb	r3, [r3, #2]
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f000 f996 	bl	800a1e8 <RTC_Bcd2ToByte>
 8009ebc:	4603      	mov	r3, r0
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	68bb      	ldr	r3, [r7, #8]
 8009ec2:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009ec4:	2300      	movs	r3, #0
}
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	3718      	adds	r7, #24
 8009eca:	46bd      	mov	sp, r7
 8009ecc:	bd80      	pop	{r7, pc}
 8009ece:	bf00      	nop
 8009ed0:	00ffff3f 	.word	0x00ffff3f

08009ed4 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009ed4:	b590      	push	{r4, r7, lr}
 8009ed6:	b089      	sub	sp, #36	; 0x24
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	60f8      	str	r0, [r7, #12]
 8009edc:	60b9      	str	r1, [r7, #8]
 8009ede:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	61fb      	str	r3, [r7, #28]
 8009ee8:	2300      	movs	r3, #0
 8009eea:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009eec:	68fb      	ldr	r3, [r7, #12]
 8009eee:	7f1b      	ldrb	r3, [r3, #28]
 8009ef0:	2b01      	cmp	r3, #1
 8009ef2:	d101      	bne.n	8009ef8 <HAL_RTC_SetAlarm+0x24>
 8009ef4:	2302      	movs	r3, #2
 8009ef6:	e101      	b.n	800a0fc <HAL_RTC_SetAlarm+0x228>
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	2201      	movs	r2, #1
 8009efc:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	2202      	movs	r2, #2
 8009f02:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d137      	bne.n	8009f7a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	681b      	ldr	r3, [r3, #0]
 8009f0e:	689b      	ldr	r3, [r3, #8]
 8009f10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d102      	bne.n	8009f1e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009f18:	68bb      	ldr	r3, [r7, #8]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009f1e:	68bb      	ldr	r3, [r7, #8]
 8009f20:	781b      	ldrb	r3, [r3, #0]
 8009f22:	4618      	mov	r0, r3
 8009f24:	f000 f942 	bl	800a1ac <RTC_ByteToBcd2>
 8009f28:	4603      	mov	r3, r0
 8009f2a:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009f2c:	68bb      	ldr	r3, [r7, #8]
 8009f2e:	785b      	ldrb	r3, [r3, #1]
 8009f30:	4618      	mov	r0, r3
 8009f32:	f000 f93b 	bl	800a1ac <RTC_ByteToBcd2>
 8009f36:	4603      	mov	r3, r0
 8009f38:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009f3a:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	789b      	ldrb	r3, [r3, #2]
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 f933 	bl	800a1ac <RTC_ByteToBcd2>
 8009f46:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009f48:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009f4c:	68bb      	ldr	r3, [r7, #8]
 8009f4e:	7b1b      	ldrb	r3, [r3, #12]
 8009f50:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009f52:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009f56:	68bb      	ldr	r3, [r7, #8]
 8009f58:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	f000 f925 	bl	800a1ac <RTC_ByteToBcd2>
 8009f62:	4603      	mov	r3, r0
 8009f64:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009f66:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009f6a:	68bb      	ldr	r3, [r7, #8]
 8009f6c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009f6e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009f70:	68bb      	ldr	r3, [r7, #8]
 8009f72:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009f74:	4313      	orrs	r3, r2
 8009f76:	61fb      	str	r3, [r7, #28]
 8009f78:	e023      	b.n	8009fc2 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d102      	bne.n	8009f8e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009f88:	68bb      	ldr	r3, [r7, #8]
 8009f8a:	2200      	movs	r2, #0
 8009f8c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009f8e:	68bb      	ldr	r3, [r7, #8]
 8009f90:	781b      	ldrb	r3, [r3, #0]
 8009f92:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009f94:	68bb      	ldr	r3, [r7, #8]
 8009f96:	785b      	ldrb	r3, [r3, #1]
 8009f98:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009f9a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009f9c:	68ba      	ldr	r2, [r7, #8]
 8009f9e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009fa0:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	7b1b      	ldrb	r3, [r3, #12]
 8009fa6:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009fa8:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009faa:	68bb      	ldr	r3, [r7, #8]
 8009fac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009fb0:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009fb2:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009fb4:	68bb      	ldr	r3, [r7, #8]
 8009fb6:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009fb8:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009fc2:	68bb      	ldr	r3, [r7, #8]
 8009fc4:	685a      	ldr	r2, [r3, #4]
 8009fc6:	68bb      	ldr	r3, [r7, #8]
 8009fc8:	69db      	ldr	r3, [r3, #28]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009fce:	68fb      	ldr	r3, [r7, #12]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	22ca      	movs	r2, #202	; 0xca
 8009fd4:	625a      	str	r2, [r3, #36]	; 0x24
 8009fd6:	68fb      	ldr	r3, [r7, #12]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	2253      	movs	r2, #83	; 0x53
 8009fdc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009fde:	68bb      	ldr	r3, [r7, #8]
 8009fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fe2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fe6:	d13f      	bne.n	800a068 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009fe8:	68fb      	ldr	r3, [r7, #12]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	689a      	ldr	r2, [r3, #8]
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009ff6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009ff8:	68fb      	ldr	r3, [r7, #12]
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	689a      	ldr	r2, [r3, #8]
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a006:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a008:	f7fb fda2 	bl	8005b50 <HAL_GetTick>
 800a00c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a00e:	e013      	b.n	800a038 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a010:	f7fb fd9e 	bl	8005b50 <HAL_GetTick>
 800a014:	4602      	mov	r2, r0
 800a016:	69bb      	ldr	r3, [r7, #24]
 800a018:	1ad3      	subs	r3, r2, r3
 800a01a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a01e:	d90b      	bls.n	800a038 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	22ff      	movs	r2, #255	; 0xff
 800a026:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	2203      	movs	r2, #3
 800a02c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	2200      	movs	r2, #0
 800a032:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a034:	2303      	movs	r3, #3
 800a036:	e061      	b.n	800a0fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	681b      	ldr	r3, [r3, #0]
 800a03c:	68db      	ldr	r3, [r3, #12]
 800a03e:	f003 0301 	and.w	r3, r3, #1
 800a042:	2b00      	cmp	r3, #0
 800a044:	d0e4      	beq.n	800a010 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800a046:	68fb      	ldr	r3, [r7, #12]
 800a048:	681b      	ldr	r3, [r3, #0]
 800a04a:	69fa      	ldr	r2, [r7, #28]
 800a04c:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	697a      	ldr	r2, [r7, #20]
 800a054:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800a056:	68fb      	ldr	r3, [r7, #12]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	689a      	ldr	r2, [r3, #8]
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a064:	609a      	str	r2, [r3, #8]
 800a066:	e03e      	b.n	800a0e6 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	681b      	ldr	r3, [r3, #0]
 800a06c:	689a      	ldr	r2, [r3, #8]
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	681b      	ldr	r3, [r3, #0]
 800a072:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800a076:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	689a      	ldr	r2, [r3, #8]
 800a07e:	68fb      	ldr	r3, [r7, #12]
 800a080:	681b      	ldr	r3, [r3, #0]
 800a082:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a086:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a088:	f7fb fd62 	bl	8005b50 <HAL_GetTick>
 800a08c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a08e:	e013      	b.n	800a0b8 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a090:	f7fb fd5e 	bl	8005b50 <HAL_GetTick>
 800a094:	4602      	mov	r2, r0
 800a096:	69bb      	ldr	r3, [r7, #24]
 800a098:	1ad3      	subs	r3, r2, r3
 800a09a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a09e:	d90b      	bls.n	800a0b8 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0a0:	68fb      	ldr	r3, [r7, #12]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	22ff      	movs	r2, #255	; 0xff
 800a0a6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2203      	movs	r2, #3
 800a0ac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800a0ae:	68fb      	ldr	r3, [r7, #12]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800a0b4:	2303      	movs	r3, #3
 800a0b6:	e021      	b.n	800a0fc <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	681b      	ldr	r3, [r3, #0]
 800a0bc:	68db      	ldr	r3, [r3, #12]
 800a0be:	f003 0302 	and.w	r3, r3, #2
 800a0c2:	2b00      	cmp	r3, #0
 800a0c4:	d0e4      	beq.n	800a090 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	681b      	ldr	r3, [r3, #0]
 800a0ca:	69fa      	ldr	r2, [r7, #28]
 800a0cc:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	681b      	ldr	r3, [r3, #0]
 800a0d2:	697a      	ldr	r2, [r7, #20]
 800a0d4:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	689a      	ldr	r2, [r3, #8]
 800a0dc:	68fb      	ldr	r3, [r7, #12]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a0e4:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	681b      	ldr	r3, [r3, #0]
 800a0ea:	22ff      	movs	r2, #255	; 0xff
 800a0ec:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	2200      	movs	r2, #0
 800a0f8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a0fa:	2300      	movs	r3, #0
}
 800a0fc:	4618      	mov	r0, r3
 800a0fe:	3724      	adds	r7, #36	; 0x24
 800a100:	46bd      	mov	sp, r7
 800a102:	bd90      	pop	{r4, r7, pc}

0800a104 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a10c:	2300      	movs	r3, #0
 800a10e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	68da      	ldr	r2, [r3, #12]
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800a11e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a120:	f7fb fd16 	bl	8005b50 <HAL_GetTick>
 800a124:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a126:	e009      	b.n	800a13c <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a128:	f7fb fd12 	bl	8005b50 <HAL_GetTick>
 800a12c:	4602      	mov	r2, r0
 800a12e:	68fb      	ldr	r3, [r7, #12]
 800a130:	1ad3      	subs	r3, r2, r3
 800a132:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a136:	d901      	bls.n	800a13c <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800a138:	2303      	movs	r3, #3
 800a13a:	e007      	b.n	800a14c <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	68db      	ldr	r3, [r3, #12]
 800a142:	f003 0320 	and.w	r3, r3, #32
 800a146:	2b00      	cmp	r3, #0
 800a148:	d0ee      	beq.n	800a128 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800a14a:	2300      	movs	r3, #0
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}

0800a154 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b084      	sub	sp, #16
 800a158:	af00      	add	r7, sp, #0
 800a15a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800a15c:	2300      	movs	r3, #0
 800a15e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	681b      	ldr	r3, [r3, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d119      	bne.n	800a1a2 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	f04f 32ff 	mov.w	r2, #4294967295
 800a176:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800a178:	f7fb fcea 	bl	8005b50 <HAL_GetTick>
 800a17c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a17e:	e009      	b.n	800a194 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a180:	f7fb fce6 	bl	8005b50 <HAL_GetTick>
 800a184:	4602      	mov	r2, r0
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	1ad3      	subs	r3, r2, r3
 800a18a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a18e:	d901      	bls.n	800a194 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a190:	2303      	movs	r3, #3
 800a192:	e007      	b.n	800a1a4 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	681b      	ldr	r3, [r3, #0]
 800a198:	68db      	ldr	r3, [r3, #12]
 800a19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d0ee      	beq.n	800a180 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a1a2:	2300      	movs	r3, #0
}
 800a1a4:	4618      	mov	r0, r3
 800a1a6:	3710      	adds	r7, #16
 800a1a8:	46bd      	mov	sp, r7
 800a1aa:	bd80      	pop	{r7, pc}

0800a1ac <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a1ac:	b480      	push	{r7}
 800a1ae:	b085      	sub	sp, #20
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	4603      	mov	r3, r0
 800a1b4:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a1ba:	e005      	b.n	800a1c8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	3301      	adds	r3, #1
 800a1c0:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a1c2:	79fb      	ldrb	r3, [r7, #7]
 800a1c4:	3b0a      	subs	r3, #10
 800a1c6:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a1c8:	79fb      	ldrb	r3, [r7, #7]
 800a1ca:	2b09      	cmp	r3, #9
 800a1cc:	d8f6      	bhi.n	800a1bc <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a1ce:	68fb      	ldr	r3, [r7, #12]
 800a1d0:	b2db      	uxtb	r3, r3
 800a1d2:	011b      	lsls	r3, r3, #4
 800a1d4:	b2da      	uxtb	r2, r3
 800a1d6:	79fb      	ldrb	r3, [r7, #7]
 800a1d8:	4313      	orrs	r3, r2
 800a1da:	b2db      	uxtb	r3, r3
}
 800a1dc:	4618      	mov	r0, r3
 800a1de:	3714      	adds	r7, #20
 800a1e0:	46bd      	mov	sp, r7
 800a1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e6:	4770      	bx	lr

0800a1e8 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a1e8:	b480      	push	{r7}
 800a1ea:	b085      	sub	sp, #20
 800a1ec:	af00      	add	r7, sp, #0
 800a1ee:	4603      	mov	r3, r0
 800a1f0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a1f6:	79fb      	ldrb	r3, [r7, #7]
 800a1f8:	091b      	lsrs	r3, r3, #4
 800a1fa:	b2db      	uxtb	r3, r3
 800a1fc:	461a      	mov	r2, r3
 800a1fe:	4613      	mov	r3, r2
 800a200:	009b      	lsls	r3, r3, #2
 800a202:	4413      	add	r3, r2
 800a204:	005b      	lsls	r3, r3, #1
 800a206:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a208:	79fb      	ldrb	r3, [r7, #7]
 800a20a:	f003 030f 	and.w	r3, r3, #15
 800a20e:	b2da      	uxtb	r2, r3
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	b2db      	uxtb	r3, r3
 800a214:	4413      	add	r3, r2
 800a216:	b2db      	uxtb	r3, r3
}
 800a218:	4618      	mov	r0, r3
 800a21a:	3714      	adds	r7, #20
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a224:	b480      	push	{r7}
 800a226:	b087      	sub	sp, #28
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	7f1b      	ldrb	r3, [r3, #28]
 800a238:	2b01      	cmp	r3, #1
 800a23a:	d101      	bne.n	800a240 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a23c:	2302      	movs	r3, #2
 800a23e:	e03e      	b.n	800a2be <HAL_RTCEx_SetTimeStamp+0x9a>
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	2201      	movs	r2, #1
 800a244:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	2202      	movs	r2, #2
 800a24a:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a24c:	68fb      	ldr	r3, [r7, #12]
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	689a      	ldr	r2, [r3, #8]
 800a252:	4b1e      	ldr	r3, [pc, #120]	; (800a2cc <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a254:	4013      	ands	r3, r2
 800a256:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a258:	697a      	ldr	r2, [r7, #20]
 800a25a:	68bb      	ldr	r3, [r7, #8]
 800a25c:	4313      	orrs	r3, r2
 800a25e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	681b      	ldr	r3, [r3, #0]
 800a264:	22ca      	movs	r2, #202	; 0xca
 800a266:	625a      	str	r2, [r3, #36]	; 0x24
 800a268:	68fb      	ldr	r3, [r7, #12]
 800a26a:	681b      	ldr	r3, [r3, #0]
 800a26c:	2253      	movs	r2, #83	; 0x53
 800a26e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	681b      	ldr	r3, [r3, #0]
 800a27a:	f022 0206 	bic.w	r2, r2, #6
 800a27e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a286:	68fb      	ldr	r3, [r7, #12]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	687a      	ldr	r2, [r7, #4]
 800a28c:	430a      	orrs	r2, r1
 800a28e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	697a      	ldr	r2, [r7, #20]
 800a296:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	689a      	ldr	r2, [r3, #8]
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2a6:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	22ff      	movs	r2, #255	; 0xff
 800a2ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	2201      	movs	r2, #1
 800a2b4:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a2b6:	68fb      	ldr	r3, [r7, #12]
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a2bc:	2300      	movs	r3, #0
}
 800a2be:	4618      	mov	r0, r3
 800a2c0:	371c      	adds	r7, #28
 800a2c2:	46bd      	mov	sp, r7
 800a2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2c8:	4770      	bx	lr
 800a2ca:	bf00      	nop
 800a2cc:	fffff7f7 	.word	0xfffff7f7

0800a2d0 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b082      	sub	sp, #8
 800a2d4:	af00      	add	r7, sp, #0
 800a2d6:	6078      	str	r0, [r7, #4]
 800a2d8:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d101      	bne.n	800a2e4 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a2e0:	2301      	movs	r3, #1
 800a2e2:	e025      	b.n	800a330 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a2e4:	687b      	ldr	r3, [r7, #4]
 800a2e6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a2ea:	b2db      	uxtb	r3, r3
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d106      	bne.n	800a2fe <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a2f8:	6878      	ldr	r0, [r7, #4]
 800a2fa:	f7fb fae9 	bl	80058d0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	2202      	movs	r2, #2
 800a302:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a306:	687b      	ldr	r3, [r7, #4]
 800a308:	681a      	ldr	r2, [r3, #0]
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	3304      	adds	r3, #4
 800a30e:	4619      	mov	r1, r3
 800a310:	4610      	mov	r0, r2
 800a312:	f002 fa25 	bl	800c760 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6818      	ldr	r0, [r3, #0]
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	461a      	mov	r2, r3
 800a320:	6839      	ldr	r1, [r7, #0]
 800a322:	f002 fa8f 	bl	800c844 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	2201      	movs	r2, #1
 800a32a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a32e:	2300      	movs	r3, #0
}
 800a330:	4618      	mov	r0, r3
 800a332:	3708      	adds	r7, #8
 800a334:	46bd      	mov	sp, r7
 800a336:	bd80      	pop	{r7, pc}

0800a338 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b084      	sub	sp, #16
 800a33c:	af00      	add	r7, sp, #0
 800a33e:	60f8      	str	r0, [r7, #12]
 800a340:	60b9      	str	r1, [r7, #8]
 800a342:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a34a:	b2db      	uxtb	r3, r3
 800a34c:	2b02      	cmp	r3, #2
 800a34e:	d101      	bne.n	800a354 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a350:	2302      	movs	r3, #2
 800a352:	e018      	b.n	800a386 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	2202      	movs	r2, #2
 800a358:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	687a      	ldr	r2, [r7, #4]
 800a362:	68b9      	ldr	r1, [r7, #8]
 800a364:	4618      	mov	r0, r3
 800a366:	f002 faed 	bl	800c944 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a36a:	68bb      	ldr	r3, [r7, #8]
 800a36c:	681b      	ldr	r3, [r3, #0]
 800a36e:	2b02      	cmp	r3, #2
 800a370:	d104      	bne.n	800a37c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a372:	68fb      	ldr	r3, [r7, #12]
 800a374:	2205      	movs	r2, #5
 800a376:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a37a:	e003      	b.n	800a384 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2201      	movs	r2, #1
 800a380:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a384:	2300      	movs	r3, #0
}
 800a386:	4618      	mov	r0, r3
 800a388:	3710      	adds	r7, #16
 800a38a:	46bd      	mov	sp, r7
 800a38c:	bd80      	pop	{r7, pc}

0800a38e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a38e:	b580      	push	{r7, lr}
 800a390:	b082      	sub	sp, #8
 800a392:	af00      	add	r7, sp, #0
 800a394:	6078      	str	r0, [r7, #4]
 800a396:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a39e:	b2db      	uxtb	r3, r3
 800a3a0:	2b02      	cmp	r3, #2
 800a3a2:	d101      	bne.n	800a3a8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a3a4:	2302      	movs	r3, #2
 800a3a6:	e00e      	b.n	800a3c6 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	2202      	movs	r2, #2
 800a3ac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	6839      	ldr	r1, [r7, #0]
 800a3b6:	4618      	mov	r0, r3
 800a3b8:	f002 fae5 	bl	800c986 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a3bc:	687b      	ldr	r3, [r7, #4]
 800a3be:	2201      	movs	r2, #1
 800a3c0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a3c4:	2300      	movs	r3, #0
}
 800a3c6:	4618      	mov	r0, r3
 800a3c8:	3708      	adds	r7, #8
 800a3ca:	46bd      	mov	sp, r7
 800a3cc:	bd80      	pop	{r7, pc}

0800a3ce <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a3ce:	b580      	push	{r7, lr}
 800a3d0:	b084      	sub	sp, #16
 800a3d2:	af00      	add	r7, sp, #0
 800a3d4:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d101      	bne.n	800a3e0 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a3dc:	2301      	movs	r3, #1
 800a3de:	e084      	b.n	800a4ea <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a3e6:	687b      	ldr	r3, [r7, #4]
 800a3e8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3ec:	b2db      	uxtb	r3, r3
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d106      	bne.n	800a400 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f7fa ffea 	bl	80053d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	2202      	movs	r2, #2
 800a404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	681a      	ldr	r2, [r3, #0]
 800a40e:	687b      	ldr	r3, [r7, #4]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a416:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a420:	d902      	bls.n	800a428 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a422:	2300      	movs	r3, #0
 800a424:	60fb      	str	r3, [r7, #12]
 800a426:	e002      	b.n	800a42e <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a428:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a42c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a436:	d007      	beq.n	800a448 <HAL_SPI_Init+0x7a>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	68db      	ldr	r3, [r3, #12]
 800a43c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a440:	d002      	beq.n	800a448 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	2200      	movs	r2, #0
 800a446:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a44c:	2b00      	cmp	r3, #0
 800a44e:	d10b      	bne.n	800a468 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a458:	d903      	bls.n	800a462 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	2202      	movs	r2, #2
 800a45e:	631a      	str	r2, [r3, #48]	; 0x30
 800a460:	e002      	b.n	800a468 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	2201      	movs	r2, #1
 800a466:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	685a      	ldr	r2, [r3, #4]
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	431a      	orrs	r2, r3
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	691b      	ldr	r3, [r3, #16]
 800a476:	431a      	orrs	r2, r3
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	695b      	ldr	r3, [r3, #20]
 800a47c:	431a      	orrs	r2, r3
 800a47e:	687b      	ldr	r3, [r7, #4]
 800a480:	699b      	ldr	r3, [r3, #24]
 800a482:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a486:	431a      	orrs	r2, r3
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	69db      	ldr	r3, [r3, #28]
 800a48c:	431a      	orrs	r2, r3
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	6a1b      	ldr	r3, [r3, #32]
 800a492:	ea42 0103 	orr.w	r1, r2, r3
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	430a      	orrs	r2, r1
 800a4a0:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	699b      	ldr	r3, [r3, #24]
 800a4a6:	0c1b      	lsrs	r3, r3, #16
 800a4a8:	f003 0204 	and.w	r2, r3, #4
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b0:	431a      	orrs	r2, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a4b6:	431a      	orrs	r2, r3
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	68db      	ldr	r3, [r3, #12]
 800a4bc:	ea42 0103 	orr.w	r1, r2, r3
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	68fa      	ldr	r2, [r7, #12]
 800a4c6:	430a      	orrs	r2, r1
 800a4c8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	681b      	ldr	r3, [r3, #0]
 800a4ce:	69da      	ldr	r2, [r3, #28]
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a4d8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2200      	movs	r2, #0
 800a4de:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	2201      	movs	r2, #1
 800a4e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a4e8:	2300      	movs	r3, #0
}
 800a4ea:	4618      	mov	r0, r3
 800a4ec:	3710      	adds	r7, #16
 800a4ee:	46bd      	mov	sp, r7
 800a4f0:	bd80      	pop	{r7, pc}

0800a4f2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a4f2:	b580      	push	{r7, lr}
 800a4f4:	b082      	sub	sp, #8
 800a4f6:	af00      	add	r7, sp, #0
 800a4f8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2b00      	cmp	r3, #0
 800a4fe:	d101      	bne.n	800a504 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a500:	2301      	movs	r3, #1
 800a502:	e01d      	b.n	800a540 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a504:	687b      	ldr	r3, [r7, #4]
 800a506:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a50a:	b2db      	uxtb	r3, r3
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d106      	bne.n	800a51e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2200      	movs	r2, #0
 800a514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a518:	6878      	ldr	r0, [r7, #4]
 800a51a:	f7fa ffcd 	bl	80054b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	2202      	movs	r2, #2
 800a522:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681a      	ldr	r2, [r3, #0]
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	3304      	adds	r3, #4
 800a52e:	4619      	mov	r1, r3
 800a530:	4610      	mov	r0, r2
 800a532:	f000 fbcf 	bl	800acd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	2201      	movs	r2, #1
 800a53a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a53e:	2300      	movs	r3, #0
}
 800a540:	4618      	mov	r0, r3
 800a542:	3708      	adds	r7, #8
 800a544:	46bd      	mov	sp, r7
 800a546:	bd80      	pop	{r7, pc}

0800a548 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a548:	b480      	push	{r7}
 800a54a:	b085      	sub	sp, #20
 800a54c:	af00      	add	r7, sp, #0
 800a54e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	68da      	ldr	r2, [r3, #12]
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	f042 0201 	orr.w	r2, r2, #1
 800a55e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	689a      	ldr	r2, [r3, #8]
 800a566:	4b0c      	ldr	r3, [pc, #48]	; (800a598 <HAL_TIM_Base_Start_IT+0x50>)
 800a568:	4013      	ands	r3, r2
 800a56a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a56c:	68fb      	ldr	r3, [r7, #12]
 800a56e:	2b06      	cmp	r3, #6
 800a570:	d00b      	beq.n	800a58a <HAL_TIM_Base_Start_IT+0x42>
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a578:	d007      	beq.n	800a58a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	681a      	ldr	r2, [r3, #0]
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	f042 0201 	orr.w	r2, r2, #1
 800a588:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a58a:	2300      	movs	r3, #0
}
 800a58c:	4618      	mov	r0, r3
 800a58e:	3714      	adds	r7, #20
 800a590:	46bd      	mov	sp, r7
 800a592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a596:	4770      	bx	lr
 800a598:	00010007 	.word	0x00010007

0800a59c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a59c:	b580      	push	{r7, lr}
 800a59e:	b082      	sub	sp, #8
 800a5a0:	af00      	add	r7, sp, #0
 800a5a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d101      	bne.n	800a5ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	e01d      	b.n	800a5ea <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a5b4:	b2db      	uxtb	r3, r3
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d106      	bne.n	800a5c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	2200      	movs	r2, #0
 800a5be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a5c2:	6878      	ldr	r0, [r7, #4]
 800a5c4:	f000 f815 	bl	800a5f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	2202      	movs	r2, #2
 800a5cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681a      	ldr	r2, [r3, #0]
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	3304      	adds	r3, #4
 800a5d8:	4619      	mov	r1, r3
 800a5da:	4610      	mov	r0, r2
 800a5dc:	f000 fb7a 	bl	800acd4 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	2201      	movs	r2, #1
 800a5e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a5e8:	2300      	movs	r3, #0
}
 800a5ea:	4618      	mov	r0, r3
 800a5ec:	3708      	adds	r7, #8
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd80      	pop	{r7, pc}

0800a5f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a5f2:	b480      	push	{r7}
 800a5f4:	b083      	sub	sp, #12
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a5fa:	bf00      	nop
 800a5fc:	370c      	adds	r7, #12
 800a5fe:	46bd      	mov	sp, r7
 800a600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a604:	4770      	bx	lr

0800a606 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a606:	b580      	push	{r7, lr}
 800a608:	b082      	sub	sp, #8
 800a60a:	af00      	add	r7, sp, #0
 800a60c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	691b      	ldr	r3, [r3, #16]
 800a614:	f003 0302 	and.w	r3, r3, #2
 800a618:	2b02      	cmp	r3, #2
 800a61a:	d122      	bne.n	800a662 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	68db      	ldr	r3, [r3, #12]
 800a622:	f003 0302 	and.w	r3, r3, #2
 800a626:	2b02      	cmp	r3, #2
 800a628:	d11b      	bne.n	800a662 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f06f 0202 	mvn.w	r2, #2
 800a632:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	2201      	movs	r2, #1
 800a638:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a63a:	687b      	ldr	r3, [r7, #4]
 800a63c:	681b      	ldr	r3, [r3, #0]
 800a63e:	699b      	ldr	r3, [r3, #24]
 800a640:	f003 0303 	and.w	r3, r3, #3
 800a644:	2b00      	cmp	r3, #0
 800a646:	d003      	beq.n	800a650 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a648:	6878      	ldr	r0, [r7, #4]
 800a64a:	f000 fb25 	bl	800ac98 <HAL_TIM_IC_CaptureCallback>
 800a64e:	e005      	b.n	800a65c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a650:	6878      	ldr	r0, [r7, #4]
 800a652:	f000 fb17 	bl	800ac84 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a656:	6878      	ldr	r0, [r7, #4]
 800a658:	f000 fb28 	bl	800acac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	2200      	movs	r2, #0
 800a660:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	691b      	ldr	r3, [r3, #16]
 800a668:	f003 0304 	and.w	r3, r3, #4
 800a66c:	2b04      	cmp	r3, #4
 800a66e:	d122      	bne.n	800a6b6 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	68db      	ldr	r3, [r3, #12]
 800a676:	f003 0304 	and.w	r3, r3, #4
 800a67a:	2b04      	cmp	r3, #4
 800a67c:	d11b      	bne.n	800a6b6 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	681b      	ldr	r3, [r3, #0]
 800a682:	f06f 0204 	mvn.w	r2, #4
 800a686:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	2202      	movs	r2, #2
 800a68c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	681b      	ldr	r3, [r3, #0]
 800a692:	699b      	ldr	r3, [r3, #24]
 800a694:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d003      	beq.n	800a6a4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a69c:	6878      	ldr	r0, [r7, #4]
 800a69e:	f000 fafb 	bl	800ac98 <HAL_TIM_IC_CaptureCallback>
 800a6a2:	e005      	b.n	800a6b0 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6a4:	6878      	ldr	r0, [r7, #4]
 800a6a6:	f000 faed 	bl	800ac84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6aa:	6878      	ldr	r0, [r7, #4]
 800a6ac:	f000 fafe 	bl	800acac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	2200      	movs	r2, #0
 800a6b4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	681b      	ldr	r3, [r3, #0]
 800a6ba:	691b      	ldr	r3, [r3, #16]
 800a6bc:	f003 0308 	and.w	r3, r3, #8
 800a6c0:	2b08      	cmp	r3, #8
 800a6c2:	d122      	bne.n	800a70a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	68db      	ldr	r3, [r3, #12]
 800a6ca:	f003 0308 	and.w	r3, r3, #8
 800a6ce:	2b08      	cmp	r3, #8
 800a6d0:	d11b      	bne.n	800a70a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f06f 0208 	mvn.w	r2, #8
 800a6da:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2204      	movs	r2, #4
 800a6e0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	69db      	ldr	r3, [r3, #28]
 800a6e8:	f003 0303 	and.w	r3, r3, #3
 800a6ec:	2b00      	cmp	r3, #0
 800a6ee:	d003      	beq.n	800a6f8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a6f0:	6878      	ldr	r0, [r7, #4]
 800a6f2:	f000 fad1 	bl	800ac98 <HAL_TIM_IC_CaptureCallback>
 800a6f6:	e005      	b.n	800a704 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a6f8:	6878      	ldr	r0, [r7, #4]
 800a6fa:	f000 fac3 	bl	800ac84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a6fe:	6878      	ldr	r0, [r7, #4]
 800a700:	f000 fad4 	bl	800acac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2200      	movs	r2, #0
 800a708:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	691b      	ldr	r3, [r3, #16]
 800a710:	f003 0310 	and.w	r3, r3, #16
 800a714:	2b10      	cmp	r3, #16
 800a716:	d122      	bne.n	800a75e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a718:	687b      	ldr	r3, [r7, #4]
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	68db      	ldr	r3, [r3, #12]
 800a71e:	f003 0310 	and.w	r3, r3, #16
 800a722:	2b10      	cmp	r3, #16
 800a724:	d11b      	bne.n	800a75e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f06f 0210 	mvn.w	r2, #16
 800a72e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2208      	movs	r2, #8
 800a734:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a736:	687b      	ldr	r3, [r7, #4]
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	69db      	ldr	r3, [r3, #28]
 800a73c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a740:	2b00      	cmp	r3, #0
 800a742:	d003      	beq.n	800a74c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a744:	6878      	ldr	r0, [r7, #4]
 800a746:	f000 faa7 	bl	800ac98 <HAL_TIM_IC_CaptureCallback>
 800a74a:	e005      	b.n	800a758 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a74c:	6878      	ldr	r0, [r7, #4]
 800a74e:	f000 fa99 	bl	800ac84 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a752:	6878      	ldr	r0, [r7, #4]
 800a754:	f000 faaa 	bl	800acac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	2200      	movs	r2, #0
 800a75c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
 800a762:	691b      	ldr	r3, [r3, #16]
 800a764:	f003 0301 	and.w	r3, r3, #1
 800a768:	2b01      	cmp	r3, #1
 800a76a:	d10e      	bne.n	800a78a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	68db      	ldr	r3, [r3, #12]
 800a772:	f003 0301 	and.w	r3, r3, #1
 800a776:	2b01      	cmp	r3, #1
 800a778:	d107      	bne.n	800a78a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	681b      	ldr	r3, [r3, #0]
 800a77e:	f06f 0201 	mvn.w	r2, #1
 800a782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a784:	6878      	ldr	r0, [r7, #4]
 800a786:	f7f8 fdf7 	bl	8003378 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	691b      	ldr	r3, [r3, #16]
 800a790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a794:	2b80      	cmp	r3, #128	; 0x80
 800a796:	d10e      	bne.n	800a7b6 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	68db      	ldr	r3, [r3, #12]
 800a79e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7a2:	2b80      	cmp	r3, #128	; 0x80
 800a7a4:	d107      	bne.n	800a7b6 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a7ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a7b0:	6878      	ldr	r0, [r7, #4]
 800a7b2:	f000 ffcd 	bl	800b750 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	681b      	ldr	r3, [r3, #0]
 800a7ba:	691b      	ldr	r3, [r3, #16]
 800a7bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a7c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a7c4:	d10e      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	68db      	ldr	r3, [r3, #12]
 800a7cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a7d0:	2b80      	cmp	r3, #128	; 0x80
 800a7d2:	d107      	bne.n	800a7e4 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a7dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a7de:	6878      	ldr	r0, [r7, #4]
 800a7e0:	f000 ffc0 	bl	800b764 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	691b      	ldr	r3, [r3, #16]
 800a7ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7ee:	2b40      	cmp	r3, #64	; 0x40
 800a7f0:	d10e      	bne.n	800a810 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	681b      	ldr	r3, [r3, #0]
 800a7f6:	68db      	ldr	r3, [r3, #12]
 800a7f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7fc:	2b40      	cmp	r3, #64	; 0x40
 800a7fe:	d107      	bne.n	800a810 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a808:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	f000 fa58 	bl	800acc0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	691b      	ldr	r3, [r3, #16]
 800a816:	f003 0320 	and.w	r3, r3, #32
 800a81a:	2b20      	cmp	r3, #32
 800a81c:	d10e      	bne.n	800a83c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	68db      	ldr	r3, [r3, #12]
 800a824:	f003 0320 	and.w	r3, r3, #32
 800a828:	2b20      	cmp	r3, #32
 800a82a:	d107      	bne.n	800a83c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	f06f 0220 	mvn.w	r2, #32
 800a834:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a836:	6878      	ldr	r0, [r7, #4]
 800a838:	f000 ff80 	bl	800b73c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a83c:	bf00      	nop
 800a83e:	3708      	adds	r7, #8
 800a840:	46bd      	mov	sp, r7
 800a842:	bd80      	pop	{r7, pc}

0800a844 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b084      	sub	sp, #16
 800a848:	af00      	add	r7, sp, #0
 800a84a:	60f8      	str	r0, [r7, #12]
 800a84c:	60b9      	str	r1, [r7, #8]
 800a84e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a856:	2b01      	cmp	r3, #1
 800a858:	d101      	bne.n	800a85e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a85a:	2302      	movs	r3, #2
 800a85c:	e105      	b.n	800aa6a <HAL_TIM_PWM_ConfigChannel+0x226>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	2201      	movs	r2, #1
 800a862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	2202      	movs	r2, #2
 800a86a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	2b14      	cmp	r3, #20
 800a872:	f200 80f0 	bhi.w	800aa56 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a876:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87c:	0800a8d1 	.word	0x0800a8d1
 800a880:	0800aa57 	.word	0x0800aa57
 800a884:	0800aa57 	.word	0x0800aa57
 800a888:	0800aa57 	.word	0x0800aa57
 800a88c:	0800a911 	.word	0x0800a911
 800a890:	0800aa57 	.word	0x0800aa57
 800a894:	0800aa57 	.word	0x0800aa57
 800a898:	0800aa57 	.word	0x0800aa57
 800a89c:	0800a953 	.word	0x0800a953
 800a8a0:	0800aa57 	.word	0x0800aa57
 800a8a4:	0800aa57 	.word	0x0800aa57
 800a8a8:	0800aa57 	.word	0x0800aa57
 800a8ac:	0800a993 	.word	0x0800a993
 800a8b0:	0800aa57 	.word	0x0800aa57
 800a8b4:	0800aa57 	.word	0x0800aa57
 800a8b8:	0800aa57 	.word	0x0800aa57
 800a8bc:	0800a9d5 	.word	0x0800a9d5
 800a8c0:	0800aa57 	.word	0x0800aa57
 800a8c4:	0800aa57 	.word	0x0800aa57
 800a8c8:	0800aa57 	.word	0x0800aa57
 800a8cc:	0800aa15 	.word	0x0800aa15
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	68b9      	ldr	r1, [r7, #8]
 800a8d6:	4618      	mov	r0, r3
 800a8d8:	f000 fa9c 	bl	800ae14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	699a      	ldr	r2, [r3, #24]
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	f042 0208 	orr.w	r2, r2, #8
 800a8ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	699a      	ldr	r2, [r3, #24]
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	f022 0204 	bic.w	r2, r2, #4
 800a8fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	681b      	ldr	r3, [r3, #0]
 800a900:	6999      	ldr	r1, [r3, #24]
 800a902:	68bb      	ldr	r3, [r7, #8]
 800a904:	691a      	ldr	r2, [r3, #16]
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	430a      	orrs	r2, r1
 800a90c:	619a      	str	r2, [r3, #24]
      break;
 800a90e:	e0a3      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	68b9      	ldr	r1, [r7, #8]
 800a916:	4618      	mov	r0, r3
 800a918:	f000 faee 	bl	800aef8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	699a      	ldr	r2, [r3, #24]
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a92a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	699a      	ldr	r2, [r3, #24]
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a93a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	6999      	ldr	r1, [r3, #24]
 800a942:	68bb      	ldr	r3, [r7, #8]
 800a944:	691b      	ldr	r3, [r3, #16]
 800a946:	021a      	lsls	r2, r3, #8
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	430a      	orrs	r2, r1
 800a94e:	619a      	str	r2, [r3, #24]
      break;
 800a950:	e082      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	68b9      	ldr	r1, [r7, #8]
 800a958:	4618      	mov	r0, r3
 800a95a:	f000 fb45 	bl	800afe8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	69da      	ldr	r2, [r3, #28]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	f042 0208 	orr.w	r2, r2, #8
 800a96c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	69da      	ldr	r2, [r3, #28]
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	f022 0204 	bic.w	r2, r2, #4
 800a97c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a97e:	68fb      	ldr	r3, [r7, #12]
 800a980:	681b      	ldr	r3, [r3, #0]
 800a982:	69d9      	ldr	r1, [r3, #28]
 800a984:	68bb      	ldr	r3, [r7, #8]
 800a986:	691a      	ldr	r2, [r3, #16]
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	430a      	orrs	r2, r1
 800a98e:	61da      	str	r2, [r3, #28]
      break;
 800a990:	e062      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a992:	68fb      	ldr	r3, [r7, #12]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	68b9      	ldr	r1, [r7, #8]
 800a998:	4618      	mov	r0, r3
 800a99a:	f000 fb9b 	bl	800b0d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a99e:	68fb      	ldr	r3, [r7, #12]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	69da      	ldr	r2, [r3, #28]
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a9ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	69da      	ldr	r2, [r3, #28]
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	681b      	ldr	r3, [r3, #0]
 800a9b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a9bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	69d9      	ldr	r1, [r3, #28]
 800a9c4:	68bb      	ldr	r3, [r7, #8]
 800a9c6:	691b      	ldr	r3, [r3, #16]
 800a9c8:	021a      	lsls	r2, r3, #8
 800a9ca:	68fb      	ldr	r3, [r7, #12]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	430a      	orrs	r2, r1
 800a9d0:	61da      	str	r2, [r3, #28]
      break;
 800a9d2:	e041      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	681b      	ldr	r3, [r3, #0]
 800a9d8:	68b9      	ldr	r1, [r7, #8]
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f000 fbd2 	bl	800b184 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	681b      	ldr	r3, [r3, #0]
 800a9ea:	f042 0208 	orr.w	r2, r2, #8
 800a9ee:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a9f0:	68fb      	ldr	r3, [r7, #12]
 800a9f2:	681b      	ldr	r3, [r3, #0]
 800a9f4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	f022 0204 	bic.w	r2, r2, #4
 800a9fe:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800aa00:	68fb      	ldr	r3, [r7, #12]
 800aa02:	681b      	ldr	r3, [r3, #0]
 800aa04:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa06:	68bb      	ldr	r3, [r7, #8]
 800aa08:	691a      	ldr	r2, [r3, #16]
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	681b      	ldr	r3, [r3, #0]
 800aa0e:	430a      	orrs	r2, r1
 800aa10:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa12:	e021      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	68b9      	ldr	r1, [r7, #8]
 800aa1a:	4618      	mov	r0, r3
 800aa1c:	f000 fc04 	bl	800b228 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa2e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800aa36:	68fb      	ldr	r3, [r7, #12]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800aa3e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	691b      	ldr	r3, [r3, #16]
 800aa4a:	021a      	lsls	r2, r3, #8
 800aa4c:	68fb      	ldr	r3, [r7, #12]
 800aa4e:	681b      	ldr	r3, [r3, #0]
 800aa50:	430a      	orrs	r2, r1
 800aa52:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800aa54:	e000      	b.n	800aa58 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800aa56:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800aa58:	68fb      	ldr	r3, [r7, #12]
 800aa5a:	2201      	movs	r2, #1
 800aa5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa60:	68fb      	ldr	r3, [r7, #12]
 800aa62:	2200      	movs	r2, #0
 800aa64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa68:	2300      	movs	r3, #0
}
 800aa6a:	4618      	mov	r0, r3
 800aa6c:	3710      	adds	r7, #16
 800aa6e:	46bd      	mov	sp, r7
 800aa70:	bd80      	pop	{r7, pc}
 800aa72:	bf00      	nop

0800aa74 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800aa74:	b580      	push	{r7, lr}
 800aa76:	b084      	sub	sp, #16
 800aa78:	af00      	add	r7, sp, #0
 800aa7a:	6078      	str	r0, [r7, #4]
 800aa7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa84:	2b01      	cmp	r3, #1
 800aa86:	d101      	bne.n	800aa8c <HAL_TIM_ConfigClockSource+0x18>
 800aa88:	2302      	movs	r3, #2
 800aa8a:	e0b3      	b.n	800abf4 <HAL_TIM_ConfigClockSource+0x180>
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	2201      	movs	r2, #1
 800aa90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	2202      	movs	r2, #2
 800aa98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800aaa4:	68fa      	ldr	r2, [r7, #12]
 800aaa6:	4b55      	ldr	r3, [pc, #340]	; (800abfc <HAL_TIM_ConfigClockSource+0x188>)
 800aaa8:	4013      	ands	r3, r2
 800aaaa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aaac:	68fb      	ldr	r3, [r7, #12]
 800aaae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aab2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	68fa      	ldr	r2, [r7, #12]
 800aaba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800aabc:	683b      	ldr	r3, [r7, #0]
 800aabe:	681b      	ldr	r3, [r3, #0]
 800aac0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aac4:	d03e      	beq.n	800ab44 <HAL_TIM_ConfigClockSource+0xd0>
 800aac6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800aaca:	f200 8087 	bhi.w	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aad2:	f000 8085 	beq.w	800abe0 <HAL_TIM_ConfigClockSource+0x16c>
 800aad6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aada:	d87f      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aadc:	2b70      	cmp	r3, #112	; 0x70
 800aade:	d01a      	beq.n	800ab16 <HAL_TIM_ConfigClockSource+0xa2>
 800aae0:	2b70      	cmp	r3, #112	; 0x70
 800aae2:	d87b      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aae4:	2b60      	cmp	r3, #96	; 0x60
 800aae6:	d050      	beq.n	800ab8a <HAL_TIM_ConfigClockSource+0x116>
 800aae8:	2b60      	cmp	r3, #96	; 0x60
 800aaea:	d877      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aaec:	2b50      	cmp	r3, #80	; 0x50
 800aaee:	d03c      	beq.n	800ab6a <HAL_TIM_ConfigClockSource+0xf6>
 800aaf0:	2b50      	cmp	r3, #80	; 0x50
 800aaf2:	d873      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d058      	beq.n	800abaa <HAL_TIM_ConfigClockSource+0x136>
 800aaf8:	2b40      	cmp	r3, #64	; 0x40
 800aafa:	d86f      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800aafc:	2b30      	cmp	r3, #48	; 0x30
 800aafe:	d064      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x156>
 800ab00:	2b30      	cmp	r3, #48	; 0x30
 800ab02:	d86b      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800ab04:	2b20      	cmp	r3, #32
 800ab06:	d060      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x156>
 800ab08:	2b20      	cmp	r3, #32
 800ab0a:	d867      	bhi.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	d05c      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x156>
 800ab10:	2b10      	cmp	r3, #16
 800ab12:	d05a      	beq.n	800abca <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800ab14:	e062      	b.n	800abdc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6818      	ldr	r0, [r3, #0]
 800ab1a:	683b      	ldr	r3, [r7, #0]
 800ab1c:	6899      	ldr	r1, [r3, #8]
 800ab1e:	683b      	ldr	r3, [r7, #0]
 800ab20:	685a      	ldr	r2, [r3, #4]
 800ab22:	683b      	ldr	r3, [r7, #0]
 800ab24:	68db      	ldr	r3, [r3, #12]
 800ab26:	f000 fcdd 	bl	800b4e4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ab38:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	68fa      	ldr	r2, [r7, #12]
 800ab40:	609a      	str	r2, [r3, #8]
      break;
 800ab42:	e04e      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	6818      	ldr	r0, [r3, #0]
 800ab48:	683b      	ldr	r3, [r7, #0]
 800ab4a:	6899      	ldr	r1, [r3, #8]
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	685a      	ldr	r2, [r3, #4]
 800ab50:	683b      	ldr	r3, [r7, #0]
 800ab52:	68db      	ldr	r3, [r3, #12]
 800ab54:	f000 fcc6 	bl	800b4e4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	689a      	ldr	r2, [r3, #8]
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ab66:	609a      	str	r2, [r3, #8]
      break;
 800ab68:	e03b      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6818      	ldr	r0, [r3, #0]
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	6859      	ldr	r1, [r3, #4]
 800ab72:	683b      	ldr	r3, [r7, #0]
 800ab74:	68db      	ldr	r3, [r3, #12]
 800ab76:	461a      	mov	r2, r3
 800ab78:	f000 fc3a 	bl	800b3f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	2150      	movs	r1, #80	; 0x50
 800ab82:	4618      	mov	r0, r3
 800ab84:	f000 fc93 	bl	800b4ae <TIM_ITRx_SetConfig>
      break;
 800ab88:	e02b      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	6818      	ldr	r0, [r3, #0]
 800ab8e:	683b      	ldr	r3, [r7, #0]
 800ab90:	6859      	ldr	r1, [r3, #4]
 800ab92:	683b      	ldr	r3, [r7, #0]
 800ab94:	68db      	ldr	r3, [r3, #12]
 800ab96:	461a      	mov	r2, r3
 800ab98:	f000 fc59 	bl	800b44e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	681b      	ldr	r3, [r3, #0]
 800aba0:	2160      	movs	r1, #96	; 0x60
 800aba2:	4618      	mov	r0, r3
 800aba4:	f000 fc83 	bl	800b4ae <TIM_ITRx_SetConfig>
      break;
 800aba8:	e01b      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	6818      	ldr	r0, [r3, #0]
 800abae:	683b      	ldr	r3, [r7, #0]
 800abb0:	6859      	ldr	r1, [r3, #4]
 800abb2:	683b      	ldr	r3, [r7, #0]
 800abb4:	68db      	ldr	r3, [r3, #12]
 800abb6:	461a      	mov	r2, r3
 800abb8:	f000 fc1a 	bl	800b3f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	2140      	movs	r1, #64	; 0x40
 800abc2:	4618      	mov	r0, r3
 800abc4:	f000 fc73 	bl	800b4ae <TIM_ITRx_SetConfig>
      break;
 800abc8:	e00b      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	681a      	ldr	r2, [r3, #0]
 800abce:	683b      	ldr	r3, [r7, #0]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	4619      	mov	r1, r3
 800abd4:	4610      	mov	r0, r2
 800abd6:	f000 fc6a 	bl	800b4ae <TIM_ITRx_SetConfig>
      break;
 800abda:	e002      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800abdc:	bf00      	nop
 800abde:	e000      	b.n	800abe2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800abe0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2201      	movs	r2, #1
 800abe6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	2200      	movs	r2, #0
 800abee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800abf2:	2300      	movs	r3, #0
}
 800abf4:	4618      	mov	r0, r3
 800abf6:	3710      	adds	r7, #16
 800abf8:	46bd      	mov	sp, r7
 800abfa:	bd80      	pop	{r7, pc}
 800abfc:	fffeff88 	.word	0xfffeff88

0800ac00 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800ac00:	b580      	push	{r7, lr}
 800ac02:	b082      	sub	sp, #8
 800ac04:	af00      	add	r7, sp, #0
 800ac06:	6078      	str	r0, [r7, #4]
 800ac08:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800ac0a:	687b      	ldr	r3, [r7, #4]
 800ac0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ac10:	2b01      	cmp	r3, #1
 800ac12:	d101      	bne.n	800ac18 <HAL_TIM_SlaveConfigSynchro+0x18>
 800ac14:	2302      	movs	r3, #2
 800ac16:	e031      	b.n	800ac7c <HAL_TIM_SlaveConfigSynchro+0x7c>
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	2201      	movs	r2, #1
 800ac1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	2202      	movs	r2, #2
 800ac24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800ac28:	6839      	ldr	r1, [r7, #0]
 800ac2a:	6878      	ldr	r0, [r7, #4]
 800ac2c:	f000 fb50 	bl	800b2d0 <TIM_SlaveTimer_SetConfig>
 800ac30:	4603      	mov	r3, r0
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d009      	beq.n	800ac4a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	2201      	movs	r2, #1
 800ac3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	2200      	movs	r2, #0
 800ac42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800ac46:	2301      	movs	r3, #1
 800ac48:	e018      	b.n	800ac7c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	68da      	ldr	r2, [r3, #12]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac58:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	68da      	ldr	r2, [r3, #12]
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800ac68:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	2201      	movs	r2, #1
 800ac6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	2200      	movs	r2, #0
 800ac76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac7a:	2300      	movs	r3, #0
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3708      	adds	r7, #8
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}

0800ac84 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ac84:	b480      	push	{r7}
 800ac86:	b083      	sub	sp, #12
 800ac88:	af00      	add	r7, sp, #0
 800ac8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ac8c:	bf00      	nop
 800ac8e:	370c      	adds	r7, #12
 800ac90:	46bd      	mov	sp, r7
 800ac92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac96:	4770      	bx	lr

0800ac98 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b083      	sub	sp, #12
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aca0:	bf00      	nop
 800aca2:	370c      	adds	r7, #12
 800aca4:	46bd      	mov	sp, r7
 800aca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acaa:	4770      	bx	lr

0800acac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800acac:	b480      	push	{r7}
 800acae:	b083      	sub	sp, #12
 800acb0:	af00      	add	r7, sp, #0
 800acb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800acb4:	bf00      	nop
 800acb6:	370c      	adds	r7, #12
 800acb8:	46bd      	mov	sp, r7
 800acba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acbe:	4770      	bx	lr

0800acc0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800acc0:	b480      	push	{r7}
 800acc2:	b083      	sub	sp, #12
 800acc4:	af00      	add	r7, sp, #0
 800acc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800acc8:	bf00      	nop
 800acca:	370c      	adds	r7, #12
 800accc:	46bd      	mov	sp, r7
 800acce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acd2:	4770      	bx	lr

0800acd4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800acd4:	b480      	push	{r7}
 800acd6:	b085      	sub	sp, #20
 800acd8:	af00      	add	r7, sp, #0
 800acda:	6078      	str	r0, [r7, #4]
 800acdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	681b      	ldr	r3, [r3, #0]
 800ace2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	4a40      	ldr	r2, [pc, #256]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800ace8:	4293      	cmp	r3, r2
 800acea:	d013      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800acf2:	d00f      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	4a3d      	ldr	r2, [pc, #244]	; (800adec <TIM_Base_SetConfig+0x118>)
 800acf8:	4293      	cmp	r3, r2
 800acfa:	d00b      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	4a3c      	ldr	r2, [pc, #240]	; (800adf0 <TIM_Base_SetConfig+0x11c>)
 800ad00:	4293      	cmp	r3, r2
 800ad02:	d007      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800ad04:	687b      	ldr	r3, [r7, #4]
 800ad06:	4a3b      	ldr	r2, [pc, #236]	; (800adf4 <TIM_Base_SetConfig+0x120>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d003      	beq.n	800ad14 <TIM_Base_SetConfig+0x40>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	4a3a      	ldr	r2, [pc, #232]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800ad10:	4293      	cmp	r3, r2
 800ad12:	d108      	bne.n	800ad26 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ad1a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ad1c:	683b      	ldr	r3, [r7, #0]
 800ad1e:	685b      	ldr	r3, [r3, #4]
 800ad20:	68fa      	ldr	r2, [r7, #12]
 800ad22:	4313      	orrs	r3, r2
 800ad24:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ad26:	687b      	ldr	r3, [r7, #4]
 800ad28:	4a2f      	ldr	r2, [pc, #188]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800ad2a:	4293      	cmp	r3, r2
 800ad2c:	d02b      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ad34:	d027      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	4a2c      	ldr	r2, [pc, #176]	; (800adec <TIM_Base_SetConfig+0x118>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d023      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	4a2b      	ldr	r2, [pc, #172]	; (800adf0 <TIM_Base_SetConfig+0x11c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d01f      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	4a2a      	ldr	r2, [pc, #168]	; (800adf4 <TIM_Base_SetConfig+0x120>)
 800ad4a:	4293      	cmp	r3, r2
 800ad4c:	d01b      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	4a29      	ldr	r2, [pc, #164]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800ad52:	4293      	cmp	r3, r2
 800ad54:	d017      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	4a28      	ldr	r2, [pc, #160]	; (800adfc <TIM_Base_SetConfig+0x128>)
 800ad5a:	4293      	cmp	r3, r2
 800ad5c:	d013      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad5e:	687b      	ldr	r3, [r7, #4]
 800ad60:	4a27      	ldr	r2, [pc, #156]	; (800ae00 <TIM_Base_SetConfig+0x12c>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d00f      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	4a26      	ldr	r2, [pc, #152]	; (800ae04 <TIM_Base_SetConfig+0x130>)
 800ad6a:	4293      	cmp	r3, r2
 800ad6c:	d00b      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad6e:	687b      	ldr	r3, [r7, #4]
 800ad70:	4a25      	ldr	r2, [pc, #148]	; (800ae08 <TIM_Base_SetConfig+0x134>)
 800ad72:	4293      	cmp	r3, r2
 800ad74:	d007      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	4a24      	ldr	r2, [pc, #144]	; (800ae0c <TIM_Base_SetConfig+0x138>)
 800ad7a:	4293      	cmp	r3, r2
 800ad7c:	d003      	beq.n	800ad86 <TIM_Base_SetConfig+0xb2>
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	4a23      	ldr	r2, [pc, #140]	; (800ae10 <TIM_Base_SetConfig+0x13c>)
 800ad82:	4293      	cmp	r3, r2
 800ad84:	d108      	bne.n	800ad98 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ad86:	68fb      	ldr	r3, [r7, #12]
 800ad88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ad8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	68db      	ldr	r3, [r3, #12]
 800ad92:	68fa      	ldr	r2, [r7, #12]
 800ad94:	4313      	orrs	r3, r2
 800ad96:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ad98:	68fb      	ldr	r3, [r7, #12]
 800ad9a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	695b      	ldr	r3, [r3, #20]
 800ada2:	4313      	orrs	r3, r2
 800ada4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ada6:	687b      	ldr	r3, [r7, #4]
 800ada8:	68fa      	ldr	r2, [r7, #12]
 800adaa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	689a      	ldr	r2, [r3, #8]
 800adb0:	687b      	ldr	r3, [r7, #4]
 800adb2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800adb4:	683b      	ldr	r3, [r7, #0]
 800adb6:	681a      	ldr	r2, [r3, #0]
 800adb8:	687b      	ldr	r3, [r7, #4]
 800adba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800adbc:	687b      	ldr	r3, [r7, #4]
 800adbe:	4a0a      	ldr	r2, [pc, #40]	; (800ade8 <TIM_Base_SetConfig+0x114>)
 800adc0:	4293      	cmp	r3, r2
 800adc2:	d003      	beq.n	800adcc <TIM_Base_SetConfig+0xf8>
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	4a0c      	ldr	r2, [pc, #48]	; (800adf8 <TIM_Base_SetConfig+0x124>)
 800adc8:	4293      	cmp	r3, r2
 800adca:	d103      	bne.n	800add4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800adcc:	683b      	ldr	r3, [r7, #0]
 800adce:	691a      	ldr	r2, [r3, #16]
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	2201      	movs	r2, #1
 800add8:	615a      	str	r2, [r3, #20]
}
 800adda:	bf00      	nop
 800addc:	3714      	adds	r7, #20
 800adde:	46bd      	mov	sp, r7
 800ade0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade4:	4770      	bx	lr
 800ade6:	bf00      	nop
 800ade8:	40010000 	.word	0x40010000
 800adec:	40000400 	.word	0x40000400
 800adf0:	40000800 	.word	0x40000800
 800adf4:	40000c00 	.word	0x40000c00
 800adf8:	40010400 	.word	0x40010400
 800adfc:	40014000 	.word	0x40014000
 800ae00:	40014400 	.word	0x40014400
 800ae04:	40014800 	.word	0x40014800
 800ae08:	40001800 	.word	0x40001800
 800ae0c:	40001c00 	.word	0x40001c00
 800ae10:	40002000 	.word	0x40002000

0800ae14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae14:	b480      	push	{r7}
 800ae16:	b087      	sub	sp, #28
 800ae18:	af00      	add	r7, sp, #0
 800ae1a:	6078      	str	r0, [r7, #4]
 800ae1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6a1b      	ldr	r3, [r3, #32]
 800ae22:	f023 0201 	bic.w	r2, r3, #1
 800ae26:	687b      	ldr	r3, [r7, #4]
 800ae28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6a1b      	ldr	r3, [r3, #32]
 800ae2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	685b      	ldr	r3, [r3, #4]
 800ae34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	699b      	ldr	r3, [r3, #24]
 800ae3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	4b2b      	ldr	r3, [pc, #172]	; (800aeec <TIM_OC1_SetConfig+0xd8>)
 800ae40:	4013      	ands	r3, r2
 800ae42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800ae44:	68fb      	ldr	r3, [r7, #12]
 800ae46:	f023 0303 	bic.w	r3, r3, #3
 800ae4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	68fa      	ldr	r2, [r7, #12]
 800ae52:	4313      	orrs	r3, r2
 800ae54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800ae56:	697b      	ldr	r3, [r7, #20]
 800ae58:	f023 0302 	bic.w	r3, r3, #2
 800ae5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800ae5e:	683b      	ldr	r3, [r7, #0]
 800ae60:	689b      	ldr	r3, [r3, #8]
 800ae62:	697a      	ldr	r2, [r7, #20]
 800ae64:	4313      	orrs	r3, r2
 800ae66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	4a21      	ldr	r2, [pc, #132]	; (800aef0 <TIM_OC1_SetConfig+0xdc>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d003      	beq.n	800ae78 <TIM_OC1_SetConfig+0x64>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	4a20      	ldr	r2, [pc, #128]	; (800aef4 <TIM_OC1_SetConfig+0xe0>)
 800ae74:	4293      	cmp	r3, r2
 800ae76:	d10c      	bne.n	800ae92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800ae78:	697b      	ldr	r3, [r7, #20]
 800ae7a:	f023 0308 	bic.w	r3, r3, #8
 800ae7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ae80:	683b      	ldr	r3, [r7, #0]
 800ae82:	68db      	ldr	r3, [r3, #12]
 800ae84:	697a      	ldr	r2, [r7, #20]
 800ae86:	4313      	orrs	r3, r2
 800ae88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	f023 0304 	bic.w	r3, r3, #4
 800ae90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	4a16      	ldr	r2, [pc, #88]	; (800aef0 <TIM_OC1_SetConfig+0xdc>)
 800ae96:	4293      	cmp	r3, r2
 800ae98:	d003      	beq.n	800aea2 <TIM_OC1_SetConfig+0x8e>
 800ae9a:	687b      	ldr	r3, [r7, #4]
 800ae9c:	4a15      	ldr	r2, [pc, #84]	; (800aef4 <TIM_OC1_SetConfig+0xe0>)
 800ae9e:	4293      	cmp	r3, r2
 800aea0:	d111      	bne.n	800aec6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800aea2:	693b      	ldr	r3, [r7, #16]
 800aea4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800aea8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800aeaa:	693b      	ldr	r3, [r7, #16]
 800aeac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aeb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	695b      	ldr	r3, [r3, #20]
 800aeb6:	693a      	ldr	r2, [r7, #16]
 800aeb8:	4313      	orrs	r3, r2
 800aeba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800aebc:	683b      	ldr	r3, [r7, #0]
 800aebe:	699b      	ldr	r3, [r3, #24]
 800aec0:	693a      	ldr	r2, [r7, #16]
 800aec2:	4313      	orrs	r3, r2
 800aec4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	693a      	ldr	r2, [r7, #16]
 800aeca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	68fa      	ldr	r2, [r7, #12]
 800aed0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800aed2:	683b      	ldr	r3, [r7, #0]
 800aed4:	685a      	ldr	r2, [r3, #4]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	621a      	str	r2, [r3, #32]
}
 800aee0:	bf00      	nop
 800aee2:	371c      	adds	r7, #28
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr
 800aeec:	fffeff8f 	.word	0xfffeff8f
 800aef0:	40010000 	.word	0x40010000
 800aef4:	40010400 	.word	0x40010400

0800aef8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800aef8:	b480      	push	{r7}
 800aefa:	b087      	sub	sp, #28
 800aefc:	af00      	add	r7, sp, #0
 800aefe:	6078      	str	r0, [r7, #4]
 800af00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800af02:	687b      	ldr	r3, [r7, #4]
 800af04:	6a1b      	ldr	r3, [r3, #32]
 800af06:	f023 0210 	bic.w	r2, r3, #16
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	6a1b      	ldr	r3, [r3, #32]
 800af12:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	685b      	ldr	r3, [r3, #4]
 800af18:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	699b      	ldr	r3, [r3, #24]
 800af1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800af20:	68fa      	ldr	r2, [r7, #12]
 800af22:	4b2e      	ldr	r3, [pc, #184]	; (800afdc <TIM_OC2_SetConfig+0xe4>)
 800af24:	4013      	ands	r3, r2
 800af26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	021b      	lsls	r3, r3, #8
 800af36:	68fa      	ldr	r2, [r7, #12]
 800af38:	4313      	orrs	r3, r2
 800af3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800af3c:	697b      	ldr	r3, [r7, #20]
 800af3e:	f023 0320 	bic.w	r3, r3, #32
 800af42:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800af44:	683b      	ldr	r3, [r7, #0]
 800af46:	689b      	ldr	r3, [r3, #8]
 800af48:	011b      	lsls	r3, r3, #4
 800af4a:	697a      	ldr	r2, [r7, #20]
 800af4c:	4313      	orrs	r3, r2
 800af4e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	4a23      	ldr	r2, [pc, #140]	; (800afe0 <TIM_OC2_SetConfig+0xe8>)
 800af54:	4293      	cmp	r3, r2
 800af56:	d003      	beq.n	800af60 <TIM_OC2_SetConfig+0x68>
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	4a22      	ldr	r2, [pc, #136]	; (800afe4 <TIM_OC2_SetConfig+0xec>)
 800af5c:	4293      	cmp	r3, r2
 800af5e:	d10d      	bne.n	800af7c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800af60:	697b      	ldr	r3, [r7, #20]
 800af62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800af66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800af68:	683b      	ldr	r3, [r7, #0]
 800af6a:	68db      	ldr	r3, [r3, #12]
 800af6c:	011b      	lsls	r3, r3, #4
 800af6e:	697a      	ldr	r2, [r7, #20]
 800af70:	4313      	orrs	r3, r2
 800af72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800af74:	697b      	ldr	r3, [r7, #20]
 800af76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800af7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	4a18      	ldr	r2, [pc, #96]	; (800afe0 <TIM_OC2_SetConfig+0xe8>)
 800af80:	4293      	cmp	r3, r2
 800af82:	d003      	beq.n	800af8c <TIM_OC2_SetConfig+0x94>
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	4a17      	ldr	r2, [pc, #92]	; (800afe4 <TIM_OC2_SetConfig+0xec>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d113      	bne.n	800afb4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800af8c:	693b      	ldr	r3, [r7, #16]
 800af8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800af92:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800af94:	693b      	ldr	r3, [r7, #16]
 800af96:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800af9a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800af9c:	683b      	ldr	r3, [r7, #0]
 800af9e:	695b      	ldr	r3, [r3, #20]
 800afa0:	009b      	lsls	r3, r3, #2
 800afa2:	693a      	ldr	r2, [r7, #16]
 800afa4:	4313      	orrs	r3, r2
 800afa6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	699b      	ldr	r3, [r3, #24]
 800afac:	009b      	lsls	r3, r3, #2
 800afae:	693a      	ldr	r2, [r7, #16]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	693a      	ldr	r2, [r7, #16]
 800afb8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	68fa      	ldr	r2, [r7, #12]
 800afbe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800afc0:	683b      	ldr	r3, [r7, #0]
 800afc2:	685a      	ldr	r2, [r3, #4]
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afc8:	687b      	ldr	r3, [r7, #4]
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	621a      	str	r2, [r3, #32]
}
 800afce:	bf00      	nop
 800afd0:	371c      	adds	r7, #28
 800afd2:	46bd      	mov	sp, r7
 800afd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afd8:	4770      	bx	lr
 800afda:	bf00      	nop
 800afdc:	feff8fff 	.word	0xfeff8fff
 800afe0:	40010000 	.word	0x40010000
 800afe4:	40010400 	.word	0x40010400

0800afe8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800afe8:	b480      	push	{r7}
 800afea:	b087      	sub	sp, #28
 800afec:	af00      	add	r7, sp, #0
 800afee:	6078      	str	r0, [r7, #4]
 800aff0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	6a1b      	ldr	r3, [r3, #32]
 800aff6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	6a1b      	ldr	r3, [r3, #32]
 800b002:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b00a:	687b      	ldr	r3, [r7, #4]
 800b00c:	69db      	ldr	r3, [r3, #28]
 800b00e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800b010:	68fa      	ldr	r2, [r7, #12]
 800b012:	4b2d      	ldr	r3, [pc, #180]	; (800b0c8 <TIM_OC3_SetConfig+0xe0>)
 800b014:	4013      	ands	r3, r2
 800b016:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	f023 0303 	bic.w	r3, r3, #3
 800b01e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b020:	683b      	ldr	r3, [r7, #0]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	4313      	orrs	r3, r2
 800b028:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800b02a:	697b      	ldr	r3, [r7, #20]
 800b02c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800b030:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800b032:	683b      	ldr	r3, [r7, #0]
 800b034:	689b      	ldr	r3, [r3, #8]
 800b036:	021b      	lsls	r3, r3, #8
 800b038:	697a      	ldr	r2, [r7, #20]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800b03e:	687b      	ldr	r3, [r7, #4]
 800b040:	4a22      	ldr	r2, [pc, #136]	; (800b0cc <TIM_OC3_SetConfig+0xe4>)
 800b042:	4293      	cmp	r3, r2
 800b044:	d003      	beq.n	800b04e <TIM_OC3_SetConfig+0x66>
 800b046:	687b      	ldr	r3, [r7, #4]
 800b048:	4a21      	ldr	r2, [pc, #132]	; (800b0d0 <TIM_OC3_SetConfig+0xe8>)
 800b04a:	4293      	cmp	r3, r2
 800b04c:	d10d      	bne.n	800b06a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800b04e:	697b      	ldr	r3, [r7, #20]
 800b050:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800b054:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800b056:	683b      	ldr	r3, [r7, #0]
 800b058:	68db      	ldr	r3, [r3, #12]
 800b05a:	021b      	lsls	r3, r3, #8
 800b05c:	697a      	ldr	r2, [r7, #20]
 800b05e:	4313      	orrs	r3, r2
 800b060:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800b068:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	4a17      	ldr	r2, [pc, #92]	; (800b0cc <TIM_OC3_SetConfig+0xe4>)
 800b06e:	4293      	cmp	r3, r2
 800b070:	d003      	beq.n	800b07a <TIM_OC3_SetConfig+0x92>
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	4a16      	ldr	r2, [pc, #88]	; (800b0d0 <TIM_OC3_SetConfig+0xe8>)
 800b076:	4293      	cmp	r3, r2
 800b078:	d113      	bne.n	800b0a2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800b07a:	693b      	ldr	r3, [r7, #16]
 800b07c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800b080:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800b082:	693b      	ldr	r3, [r7, #16]
 800b084:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b088:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800b08a:	683b      	ldr	r3, [r7, #0]
 800b08c:	695b      	ldr	r3, [r3, #20]
 800b08e:	011b      	lsls	r3, r3, #4
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	4313      	orrs	r3, r2
 800b094:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800b096:	683b      	ldr	r3, [r7, #0]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	011b      	lsls	r3, r3, #4
 800b09c:	693a      	ldr	r2, [r7, #16]
 800b09e:	4313      	orrs	r3, r2
 800b0a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	693a      	ldr	r2, [r7, #16]
 800b0a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	68fa      	ldr	r2, [r7, #12]
 800b0ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800b0ae:	683b      	ldr	r3, [r7, #0]
 800b0b0:	685a      	ldr	r2, [r3, #4]
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	697a      	ldr	r2, [r7, #20]
 800b0ba:	621a      	str	r2, [r3, #32]
}
 800b0bc:	bf00      	nop
 800b0be:	371c      	adds	r7, #28
 800b0c0:	46bd      	mov	sp, r7
 800b0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0c6:	4770      	bx	lr
 800b0c8:	fffeff8f 	.word	0xfffeff8f
 800b0cc:	40010000 	.word	0x40010000
 800b0d0:	40010400 	.word	0x40010400

0800b0d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800b0d4:	b480      	push	{r7}
 800b0d6:	b087      	sub	sp, #28
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
 800b0dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a1b      	ldr	r3, [r3, #32]
 800b0e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a1b      	ldr	r3, [r3, #32]
 800b0ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	685b      	ldr	r3, [r3, #4]
 800b0f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	69db      	ldr	r3, [r3, #28]
 800b0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800b0fc:	68fa      	ldr	r2, [r7, #12]
 800b0fe:	4b1e      	ldr	r3, [pc, #120]	; (800b178 <TIM_OC4_SetConfig+0xa4>)
 800b100:	4013      	ands	r3, r2
 800b102:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800b104:	68fb      	ldr	r3, [r7, #12]
 800b106:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b10a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b10c:	683b      	ldr	r3, [r7, #0]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	021b      	lsls	r3, r3, #8
 800b112:	68fa      	ldr	r2, [r7, #12]
 800b114:	4313      	orrs	r3, r2
 800b116:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800b118:	693b      	ldr	r3, [r7, #16]
 800b11a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800b11e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800b120:	683b      	ldr	r3, [r7, #0]
 800b122:	689b      	ldr	r3, [r3, #8]
 800b124:	031b      	lsls	r3, r3, #12
 800b126:	693a      	ldr	r2, [r7, #16]
 800b128:	4313      	orrs	r3, r2
 800b12a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	4a13      	ldr	r2, [pc, #76]	; (800b17c <TIM_OC4_SetConfig+0xa8>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d003      	beq.n	800b13c <TIM_OC4_SetConfig+0x68>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	4a12      	ldr	r2, [pc, #72]	; (800b180 <TIM_OC4_SetConfig+0xac>)
 800b138:	4293      	cmp	r3, r2
 800b13a:	d109      	bne.n	800b150 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800b13c:	697b      	ldr	r3, [r7, #20]
 800b13e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b142:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800b144:	683b      	ldr	r3, [r7, #0]
 800b146:	695b      	ldr	r3, [r3, #20]
 800b148:	019b      	lsls	r3, r3, #6
 800b14a:	697a      	ldr	r2, [r7, #20]
 800b14c:	4313      	orrs	r3, r2
 800b14e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	697a      	ldr	r2, [r7, #20]
 800b154:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	68fa      	ldr	r2, [r7, #12]
 800b15a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800b15c:	683b      	ldr	r3, [r7, #0]
 800b15e:	685a      	ldr	r2, [r3, #4]
 800b160:	687b      	ldr	r3, [r7, #4]
 800b162:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	693a      	ldr	r2, [r7, #16]
 800b168:	621a      	str	r2, [r3, #32]
}
 800b16a:	bf00      	nop
 800b16c:	371c      	adds	r7, #28
 800b16e:	46bd      	mov	sp, r7
 800b170:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b174:	4770      	bx	lr
 800b176:	bf00      	nop
 800b178:	feff8fff 	.word	0xfeff8fff
 800b17c:	40010000 	.word	0x40010000
 800b180:	40010400 	.word	0x40010400

0800b184 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b184:	b480      	push	{r7}
 800b186:	b087      	sub	sp, #28
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]
 800b18c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b18e:	687b      	ldr	r3, [r7, #4]
 800b190:	6a1b      	ldr	r3, [r3, #32]
 800b192:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b196:	687b      	ldr	r3, [r7, #4]
 800b198:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6a1b      	ldr	r3, [r3, #32]
 800b19e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	685b      	ldr	r3, [r3, #4]
 800b1a4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b1aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b1ac:	68fa      	ldr	r2, [r7, #12]
 800b1ae:	4b1b      	ldr	r3, [pc, #108]	; (800b21c <TIM_OC5_SetConfig+0x98>)
 800b1b0:	4013      	ands	r3, r2
 800b1b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b1b4:	683b      	ldr	r3, [r7, #0]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	68fa      	ldr	r2, [r7, #12]
 800b1ba:	4313      	orrs	r3, r2
 800b1bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b1be:	693b      	ldr	r3, [r7, #16]
 800b1c0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b1c4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b1c6:	683b      	ldr	r3, [r7, #0]
 800b1c8:	689b      	ldr	r3, [r3, #8]
 800b1ca:	041b      	lsls	r3, r3, #16
 800b1cc:	693a      	ldr	r2, [r7, #16]
 800b1ce:	4313      	orrs	r3, r2
 800b1d0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	4a12      	ldr	r2, [pc, #72]	; (800b220 <TIM_OC5_SetConfig+0x9c>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d003      	beq.n	800b1e2 <TIM_OC5_SetConfig+0x5e>
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	4a11      	ldr	r2, [pc, #68]	; (800b224 <TIM_OC5_SetConfig+0xa0>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d109      	bne.n	800b1f6 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b1e2:	697b      	ldr	r3, [r7, #20]
 800b1e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b1e8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b1ea:	683b      	ldr	r3, [r7, #0]
 800b1ec:	695b      	ldr	r3, [r3, #20]
 800b1ee:	021b      	lsls	r3, r3, #8
 800b1f0:	697a      	ldr	r2, [r7, #20]
 800b1f2:	4313      	orrs	r3, r2
 800b1f4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	697a      	ldr	r2, [r7, #20]
 800b1fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	68fa      	ldr	r2, [r7, #12]
 800b200:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b202:	683b      	ldr	r3, [r7, #0]
 800b204:	685a      	ldr	r2, [r3, #4]
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	693a      	ldr	r2, [r7, #16]
 800b20e:	621a      	str	r2, [r3, #32]
}
 800b210:	bf00      	nop
 800b212:	371c      	adds	r7, #28
 800b214:	46bd      	mov	sp, r7
 800b216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b21a:	4770      	bx	lr
 800b21c:	fffeff8f 	.word	0xfffeff8f
 800b220:	40010000 	.word	0x40010000
 800b224:	40010400 	.word	0x40010400

0800b228 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b228:	b480      	push	{r7}
 800b22a:	b087      	sub	sp, #28
 800b22c:	af00      	add	r7, sp, #0
 800b22e:	6078      	str	r0, [r7, #4]
 800b230:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	6a1b      	ldr	r3, [r3, #32]
 800b236:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b23a:	687b      	ldr	r3, [r7, #4]
 800b23c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6a1b      	ldr	r3, [r3, #32]
 800b242:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	685b      	ldr	r3, [r3, #4]
 800b248:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b24e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b250:	68fa      	ldr	r2, [r7, #12]
 800b252:	4b1c      	ldr	r3, [pc, #112]	; (800b2c4 <TIM_OC6_SetConfig+0x9c>)
 800b254:	4013      	ands	r3, r2
 800b256:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b258:	683b      	ldr	r3, [r7, #0]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	021b      	lsls	r3, r3, #8
 800b25e:	68fa      	ldr	r2, [r7, #12]
 800b260:	4313      	orrs	r3, r2
 800b262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b264:	693b      	ldr	r3, [r7, #16]
 800b266:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b26a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	051b      	lsls	r3, r3, #20
 800b272:	693a      	ldr	r2, [r7, #16]
 800b274:	4313      	orrs	r3, r2
 800b276:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	4a13      	ldr	r2, [pc, #76]	; (800b2c8 <TIM_OC6_SetConfig+0xa0>)
 800b27c:	4293      	cmp	r3, r2
 800b27e:	d003      	beq.n	800b288 <TIM_OC6_SetConfig+0x60>
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	4a12      	ldr	r2, [pc, #72]	; (800b2cc <TIM_OC6_SetConfig+0xa4>)
 800b284:	4293      	cmp	r3, r2
 800b286:	d109      	bne.n	800b29c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b288:	697b      	ldr	r3, [r7, #20]
 800b28a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b28e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b290:	683b      	ldr	r3, [r7, #0]
 800b292:	695b      	ldr	r3, [r3, #20]
 800b294:	029b      	lsls	r3, r3, #10
 800b296:	697a      	ldr	r2, [r7, #20]
 800b298:	4313      	orrs	r3, r2
 800b29a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	697a      	ldr	r2, [r7, #20]
 800b2a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	68fa      	ldr	r2, [r7, #12]
 800b2a6:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b2a8:	683b      	ldr	r3, [r7, #0]
 800b2aa:	685a      	ldr	r2, [r3, #4]
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	693a      	ldr	r2, [r7, #16]
 800b2b4:	621a      	str	r2, [r3, #32]
}
 800b2b6:	bf00      	nop
 800b2b8:	371c      	adds	r7, #28
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2c0:	4770      	bx	lr
 800b2c2:	bf00      	nop
 800b2c4:	feff8fff 	.word	0xfeff8fff
 800b2c8:	40010000 	.word	0x40010000
 800b2cc:	40010400 	.word	0x40010400

0800b2d0 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
 800b2d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b2e2:	697b      	ldr	r3, [r7, #20]
 800b2e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b2e8:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b2ea:	683b      	ldr	r3, [r7, #0]
 800b2ec:	685b      	ldr	r3, [r3, #4]
 800b2ee:	697a      	ldr	r2, [r7, #20]
 800b2f0:	4313      	orrs	r3, r2
 800b2f2:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b2f4:	697a      	ldr	r2, [r7, #20]
 800b2f6:	4b3d      	ldr	r3, [pc, #244]	; (800b3ec <TIM_SlaveTimer_SetConfig+0x11c>)
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	681b      	ldr	r3, [r3, #0]
 800b300:	697a      	ldr	r2, [r7, #20]
 800b302:	4313      	orrs	r3, r2
 800b304:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	697a      	ldr	r2, [r7, #20]
 800b30c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b30e:	683b      	ldr	r3, [r7, #0]
 800b310:	685b      	ldr	r3, [r3, #4]
 800b312:	2b70      	cmp	r3, #112	; 0x70
 800b314:	d01a      	beq.n	800b34c <TIM_SlaveTimer_SetConfig+0x7c>
 800b316:	2b70      	cmp	r3, #112	; 0x70
 800b318:	d860      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b31a:	2b60      	cmp	r3, #96	; 0x60
 800b31c:	d054      	beq.n	800b3c8 <TIM_SlaveTimer_SetConfig+0xf8>
 800b31e:	2b60      	cmp	r3, #96	; 0x60
 800b320:	d85c      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b322:	2b50      	cmp	r3, #80	; 0x50
 800b324:	d046      	beq.n	800b3b4 <TIM_SlaveTimer_SetConfig+0xe4>
 800b326:	2b50      	cmp	r3, #80	; 0x50
 800b328:	d858      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b32a:	2b40      	cmp	r3, #64	; 0x40
 800b32c:	d019      	beq.n	800b362 <TIM_SlaveTimer_SetConfig+0x92>
 800b32e:	2b40      	cmp	r3, #64	; 0x40
 800b330:	d854      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b332:	2b30      	cmp	r3, #48	; 0x30
 800b334:	d054      	beq.n	800b3e0 <TIM_SlaveTimer_SetConfig+0x110>
 800b336:	2b30      	cmp	r3, #48	; 0x30
 800b338:	d850      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b33a:	2b20      	cmp	r3, #32
 800b33c:	d050      	beq.n	800b3e0 <TIM_SlaveTimer_SetConfig+0x110>
 800b33e:	2b20      	cmp	r3, #32
 800b340:	d84c      	bhi.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
 800b342:	2b00      	cmp	r3, #0
 800b344:	d04c      	beq.n	800b3e0 <TIM_SlaveTimer_SetConfig+0x110>
 800b346:	2b10      	cmp	r3, #16
 800b348:	d04a      	beq.n	800b3e0 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b34a:	e047      	b.n	800b3dc <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6818      	ldr	r0, [r3, #0]
 800b350:	683b      	ldr	r3, [r7, #0]
 800b352:	68d9      	ldr	r1, [r3, #12]
 800b354:	683b      	ldr	r3, [r7, #0]
 800b356:	689a      	ldr	r2, [r3, #8]
 800b358:	683b      	ldr	r3, [r7, #0]
 800b35a:	691b      	ldr	r3, [r3, #16]
 800b35c:	f000 f8c2 	bl	800b4e4 <TIM_ETR_SetConfig>
      break;
 800b360:	e03f      	b.n	800b3e2 <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b362:	683b      	ldr	r3, [r7, #0]
 800b364:	681b      	ldr	r3, [r3, #0]
 800b366:	2b05      	cmp	r3, #5
 800b368:	d101      	bne.n	800b36e <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800b36a:	2301      	movs	r3, #1
 800b36c:	e03a      	b.n	800b3e4 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	6a1b      	ldr	r3, [r3, #32]
 800b374:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	6a1a      	ldr	r2, [r3, #32]
 800b37c:	687b      	ldr	r3, [r7, #4]
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	f022 0201 	bic.w	r2, r2, #1
 800b384:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	699b      	ldr	r3, [r3, #24]
 800b38c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b38e:	68fb      	ldr	r3, [r7, #12]
 800b390:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b394:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b396:	683b      	ldr	r3, [r7, #0]
 800b398:	691b      	ldr	r3, [r3, #16]
 800b39a:	011b      	lsls	r3, r3, #4
 800b39c:	68fa      	ldr	r2, [r7, #12]
 800b39e:	4313      	orrs	r3, r2
 800b3a0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	68fa      	ldr	r2, [r7, #12]
 800b3a8:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	693a      	ldr	r2, [r7, #16]
 800b3b0:	621a      	str	r2, [r3, #32]
      break;
 800b3b2:	e016      	b.n	800b3e2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	6818      	ldr	r0, [r3, #0]
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	6899      	ldr	r1, [r3, #8]
 800b3bc:	683b      	ldr	r3, [r7, #0]
 800b3be:	691b      	ldr	r3, [r3, #16]
 800b3c0:	461a      	mov	r2, r3
 800b3c2:	f000 f815 	bl	800b3f0 <TIM_TI1_ConfigInputStage>
      break;
 800b3c6:	e00c      	b.n	800b3e2 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	6818      	ldr	r0, [r3, #0]
 800b3cc:	683b      	ldr	r3, [r7, #0]
 800b3ce:	6899      	ldr	r1, [r3, #8]
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	691b      	ldr	r3, [r3, #16]
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	f000 f83a 	bl	800b44e <TIM_TI2_ConfigInputStage>
      break;
 800b3da:	e002      	b.n	800b3e2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b3dc:	bf00      	nop
 800b3de:	e000      	b.n	800b3e2 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b3e0:	bf00      	nop
  }
  return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
}
 800b3e4:	4618      	mov	r0, r3
 800b3e6:	3718      	adds	r7, #24
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}
 800b3ec:	fffefff8 	.word	0xfffefff8

0800b3f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b3f0:	b480      	push	{r7}
 800b3f2:	b087      	sub	sp, #28
 800b3f4:	af00      	add	r7, sp, #0
 800b3f6:	60f8      	str	r0, [r7, #12]
 800b3f8:	60b9      	str	r1, [r7, #8]
 800b3fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	6a1b      	ldr	r3, [r3, #32]
 800b400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	6a1b      	ldr	r3, [r3, #32]
 800b406:	f023 0201 	bic.w	r2, r3, #1
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b40e:	68fb      	ldr	r3, [r7, #12]
 800b410:	699b      	ldr	r3, [r3, #24]
 800b412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b414:	693b      	ldr	r3, [r7, #16]
 800b416:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b41a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	011b      	lsls	r3, r3, #4
 800b420:	693a      	ldr	r2, [r7, #16]
 800b422:	4313      	orrs	r3, r2
 800b424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	f023 030a 	bic.w	r3, r3, #10
 800b42c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b42e:	697a      	ldr	r2, [r7, #20]
 800b430:	68bb      	ldr	r3, [r7, #8]
 800b432:	4313      	orrs	r3, r2
 800b434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	693a      	ldr	r2, [r7, #16]
 800b43a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b43c:	68fb      	ldr	r3, [r7, #12]
 800b43e:	697a      	ldr	r2, [r7, #20]
 800b440:	621a      	str	r2, [r3, #32]
}
 800b442:	bf00      	nop
 800b444:	371c      	adds	r7, #28
 800b446:	46bd      	mov	sp, r7
 800b448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b44c:	4770      	bx	lr

0800b44e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b44e:	b480      	push	{r7}
 800b450:	b087      	sub	sp, #28
 800b452:	af00      	add	r7, sp, #0
 800b454:	60f8      	str	r0, [r7, #12]
 800b456:	60b9      	str	r1, [r7, #8]
 800b458:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b45a:	68fb      	ldr	r3, [r7, #12]
 800b45c:	6a1b      	ldr	r3, [r3, #32]
 800b45e:	f023 0210 	bic.w	r2, r3, #16
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	699b      	ldr	r3, [r3, #24]
 800b46a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	6a1b      	ldr	r3, [r3, #32]
 800b470:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b472:	697b      	ldr	r3, [r7, #20]
 800b474:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b478:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	031b      	lsls	r3, r3, #12
 800b47e:	697a      	ldr	r2, [r7, #20]
 800b480:	4313      	orrs	r3, r2
 800b482:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b484:	693b      	ldr	r3, [r7, #16]
 800b486:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b48a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	011b      	lsls	r3, r3, #4
 800b490:	693a      	ldr	r2, [r7, #16]
 800b492:	4313      	orrs	r3, r2
 800b494:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	697a      	ldr	r2, [r7, #20]
 800b49a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b49c:	68fb      	ldr	r3, [r7, #12]
 800b49e:	693a      	ldr	r2, [r7, #16]
 800b4a0:	621a      	str	r2, [r3, #32]
}
 800b4a2:	bf00      	nop
 800b4a4:	371c      	adds	r7, #28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ac:	4770      	bx	lr

0800b4ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b4ae:	b480      	push	{r7}
 800b4b0:	b085      	sub	sp, #20
 800b4b2:	af00      	add	r7, sp, #0
 800b4b4:	6078      	str	r0, [r7, #4]
 800b4b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	689b      	ldr	r3, [r3, #8]
 800b4bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b4c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b4c6:	683a      	ldr	r2, [r7, #0]
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	4313      	orrs	r3, r2
 800b4cc:	f043 0307 	orr.w	r3, r3, #7
 800b4d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	68fa      	ldr	r2, [r7, #12]
 800b4d6:	609a      	str	r2, [r3, #8]
}
 800b4d8:	bf00      	nop
 800b4da:	3714      	adds	r7, #20
 800b4dc:	46bd      	mov	sp, r7
 800b4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4e2:	4770      	bx	lr

0800b4e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b4e4:	b480      	push	{r7}
 800b4e6:	b087      	sub	sp, #28
 800b4e8:	af00      	add	r7, sp, #0
 800b4ea:	60f8      	str	r0, [r7, #12]
 800b4ec:	60b9      	str	r1, [r7, #8]
 800b4ee:	607a      	str	r2, [r7, #4]
 800b4f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	689b      	ldr	r3, [r3, #8]
 800b4f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b4fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b500:	683b      	ldr	r3, [r7, #0]
 800b502:	021a      	lsls	r2, r3, #8
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	431a      	orrs	r2, r3
 800b508:	68bb      	ldr	r3, [r7, #8]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	697a      	ldr	r2, [r7, #20]
 800b50e:	4313      	orrs	r3, r2
 800b510:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b512:	68fb      	ldr	r3, [r7, #12]
 800b514:	697a      	ldr	r2, [r7, #20]
 800b516:	609a      	str	r2, [r3, #8]
}
 800b518:	bf00      	nop
 800b51a:	371c      	adds	r7, #28
 800b51c:	46bd      	mov	sp, r7
 800b51e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b522:	4770      	bx	lr

0800b524 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b524:	b480      	push	{r7}
 800b526:	b085      	sub	sp, #20
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b534:	2b01      	cmp	r3, #1
 800b536:	d101      	bne.n	800b53c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b538:	2302      	movs	r3, #2
 800b53a:	e06d      	b.n	800b618 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	2201      	movs	r2, #1
 800b540:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	2202      	movs	r2, #2
 800b548:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b54c:	687b      	ldr	r3, [r7, #4]
 800b54e:	681b      	ldr	r3, [r3, #0]
 800b550:	685b      	ldr	r3, [r3, #4]
 800b552:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	689b      	ldr	r3, [r3, #8]
 800b55a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	4a30      	ldr	r2, [pc, #192]	; (800b624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b562:	4293      	cmp	r3, r2
 800b564:	d004      	beq.n	800b570 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	4a2f      	ldr	r2, [pc, #188]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b56c:	4293      	cmp	r3, r2
 800b56e:	d108      	bne.n	800b582 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b576:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	685b      	ldr	r3, [r3, #4]
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4313      	orrs	r3, r2
 800b580:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b588:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b58a:	683b      	ldr	r3, [r7, #0]
 800b58c:	681b      	ldr	r3, [r3, #0]
 800b58e:	68fa      	ldr	r2, [r7, #12]
 800b590:	4313      	orrs	r3, r2
 800b592:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b594:	687b      	ldr	r3, [r7, #4]
 800b596:	681b      	ldr	r3, [r3, #0]
 800b598:	68fa      	ldr	r2, [r7, #12]
 800b59a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	4a20      	ldr	r2, [pc, #128]	; (800b624 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b5a2:	4293      	cmp	r3, r2
 800b5a4:	d022      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	681b      	ldr	r3, [r3, #0]
 800b5aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b5ae:	d01d      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5b0:	687b      	ldr	r3, [r7, #4]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	4a1d      	ldr	r2, [pc, #116]	; (800b62c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b5b6:	4293      	cmp	r3, r2
 800b5b8:	d018      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	4a1c      	ldr	r2, [pc, #112]	; (800b630 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b5c0:	4293      	cmp	r3, r2
 800b5c2:	d013      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	681b      	ldr	r3, [r3, #0]
 800b5c8:	4a1a      	ldr	r2, [pc, #104]	; (800b634 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b5ca:	4293      	cmp	r3, r2
 800b5cc:	d00e      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	4a15      	ldr	r2, [pc, #84]	; (800b628 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b5d4:	4293      	cmp	r3, r2
 800b5d6:	d009      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5d8:	687b      	ldr	r3, [r7, #4]
 800b5da:	681b      	ldr	r3, [r3, #0]
 800b5dc:	4a16      	ldr	r2, [pc, #88]	; (800b638 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b5de:	4293      	cmp	r3, r2
 800b5e0:	d004      	beq.n	800b5ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	4a15      	ldr	r2, [pc, #84]	; (800b63c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b5e8:	4293      	cmp	r3, r2
 800b5ea:	d10c      	bne.n	800b606 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b5ec:	68bb      	ldr	r3, [r7, #8]
 800b5ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b5f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b5f4:	683b      	ldr	r3, [r7, #0]
 800b5f6:	689b      	ldr	r3, [r3, #8]
 800b5f8:	68ba      	ldr	r2, [r7, #8]
 800b5fa:	4313      	orrs	r3, r2
 800b5fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	681b      	ldr	r3, [r3, #0]
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	2201      	movs	r2, #1
 800b60a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	2200      	movs	r2, #0
 800b612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b616:	2300      	movs	r3, #0
}
 800b618:	4618      	mov	r0, r3
 800b61a:	3714      	adds	r7, #20
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr
 800b624:	40010000 	.word	0x40010000
 800b628:	40010400 	.word	0x40010400
 800b62c:	40000400 	.word	0x40000400
 800b630:	40000800 	.word	0x40000800
 800b634:	40000c00 	.word	0x40000c00
 800b638:	40014000 	.word	0x40014000
 800b63c:	40001800 	.word	0x40001800

0800b640 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b640:	b480      	push	{r7}
 800b642:	b085      	sub	sp, #20
 800b644:	af00      	add	r7, sp, #0
 800b646:	6078      	str	r0, [r7, #4]
 800b648:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b64a:	2300      	movs	r3, #0
 800b64c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b654:	2b01      	cmp	r3, #1
 800b656:	d101      	bne.n	800b65c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b658:	2302      	movs	r3, #2
 800b65a:	e065      	b.n	800b728 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	2201      	movs	r2, #1
 800b660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b664:	68fb      	ldr	r3, [r7, #12]
 800b666:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b66a:	683b      	ldr	r3, [r7, #0]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	4313      	orrs	r3, r2
 800b670:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b672:	68fb      	ldr	r3, [r7, #12]
 800b674:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b678:	683b      	ldr	r3, [r7, #0]
 800b67a:	689b      	ldr	r3, [r3, #8]
 800b67c:	4313      	orrs	r3, r2
 800b67e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b680:	68fb      	ldr	r3, [r7, #12]
 800b682:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b686:	683b      	ldr	r3, [r7, #0]
 800b688:	685b      	ldr	r3, [r3, #4]
 800b68a:	4313      	orrs	r3, r2
 800b68c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b694:	683b      	ldr	r3, [r7, #0]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4313      	orrs	r3, r2
 800b69a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b6a2:	683b      	ldr	r3, [r7, #0]
 800b6a4:	691b      	ldr	r3, [r3, #16]
 800b6a6:	4313      	orrs	r3, r2
 800b6a8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	695b      	ldr	r3, [r3, #20]
 800b6b4:	4313      	orrs	r3, r2
 800b6b6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b6be:	683b      	ldr	r3, [r7, #0]
 800b6c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b6cc:	683b      	ldr	r3, [r7, #0]
 800b6ce:	699b      	ldr	r3, [r3, #24]
 800b6d0:	041b      	lsls	r3, r3, #16
 800b6d2:	4313      	orrs	r3, r2
 800b6d4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	4a16      	ldr	r2, [pc, #88]	; (800b734 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b6dc:	4293      	cmp	r3, r2
 800b6de:	d004      	beq.n	800b6ea <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	681b      	ldr	r3, [r3, #0]
 800b6e4:	4a14      	ldr	r2, [pc, #80]	; (800b738 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b6e6:	4293      	cmp	r3, r2
 800b6e8:	d115      	bne.n	800b716 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b6f0:	683b      	ldr	r3, [r7, #0]
 800b6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f4:	051b      	lsls	r3, r3, #20
 800b6f6:	4313      	orrs	r3, r2
 800b6f8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b6fa:	68fb      	ldr	r3, [r7, #12]
 800b6fc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b700:	683b      	ldr	r3, [r7, #0]
 800b702:	69db      	ldr	r3, [r3, #28]
 800b704:	4313      	orrs	r3, r2
 800b706:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	6a1b      	ldr	r3, [r3, #32]
 800b712:	4313      	orrs	r3, r2
 800b714:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	681b      	ldr	r3, [r3, #0]
 800b71a:	68fa      	ldr	r2, [r7, #12]
 800b71c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	2200      	movs	r2, #0
 800b722:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b726:	2300      	movs	r3, #0
}
 800b728:	4618      	mov	r0, r3
 800b72a:	3714      	adds	r7, #20
 800b72c:	46bd      	mov	sp, r7
 800b72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b732:	4770      	bx	lr
 800b734:	40010000 	.word	0x40010000
 800b738:	40010400 	.word	0x40010400

0800b73c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b744:	bf00      	nop
 800b746:	370c      	adds	r7, #12
 800b748:	46bd      	mov	sp, r7
 800b74a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b74e:	4770      	bx	lr

0800b750 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b750:	b480      	push	{r7}
 800b752:	b083      	sub	sp, #12
 800b754:	af00      	add	r7, sp, #0
 800b756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b758:	bf00      	nop
 800b75a:	370c      	adds	r7, #12
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr

0800b764 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b764:	b480      	push	{r7}
 800b766:	b083      	sub	sp, #12
 800b768:	af00      	add	r7, sp, #0
 800b76a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b76c:	bf00      	nop
 800b76e:	370c      	adds	r7, #12
 800b770:	46bd      	mov	sp, r7
 800b772:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b776:	4770      	bx	lr

0800b778 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b778:	b580      	push	{r7, lr}
 800b77a:	b082      	sub	sp, #8
 800b77c:	af00      	add	r7, sp, #0
 800b77e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2b00      	cmp	r3, #0
 800b784:	d101      	bne.n	800b78a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b786:	2301      	movs	r3, #1
 800b788:	e040      	b.n	800b80c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b78a:	687b      	ldr	r3, [r7, #4]
 800b78c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b78e:	2b00      	cmp	r3, #0
 800b790:	d106      	bne.n	800b7a0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b792:	687b      	ldr	r3, [r7, #4]
 800b794:	2200      	movs	r2, #0
 800b796:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f7f9 ff32 	bl	8005604 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	2224      	movs	r2, #36	; 0x24
 800b7a4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	f022 0201 	bic.w	r2, r2, #1
 800b7b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b7b6:	6878      	ldr	r0, [r7, #4]
 800b7b8:	f000 fa6e 	bl	800bc98 <UART_SetConfig>
 800b7bc:	4603      	mov	r3, r0
 800b7be:	2b01      	cmp	r3, #1
 800b7c0:	d101      	bne.n	800b7c6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b7c2:	2301      	movs	r3, #1
 800b7c4:	e022      	b.n	800b80c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d002      	beq.n	800b7d4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b7ce:	6878      	ldr	r0, [r7, #4]
 800b7d0:	f000 fd0e 	bl	800c1f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	685a      	ldr	r2, [r3, #4]
 800b7da:	687b      	ldr	r3, [r7, #4]
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b7e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b7e4:	687b      	ldr	r3, [r7, #4]
 800b7e6:	681b      	ldr	r3, [r3, #0]
 800b7e8:	689a      	ldr	r2, [r3, #8]
 800b7ea:	687b      	ldr	r3, [r7, #4]
 800b7ec:	681b      	ldr	r3, [r3, #0]
 800b7ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b7f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	681a      	ldr	r2, [r3, #0]
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	f042 0201 	orr.w	r2, r2, #1
 800b802:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b804:	6878      	ldr	r0, [r7, #4]
 800b806:	f000 fd95 	bl	800c334 <UART_CheckIdleState>
 800b80a:	4603      	mov	r3, r0
}
 800b80c:	4618      	mov	r0, r3
 800b80e:	3708      	adds	r7, #8
 800b810:	46bd      	mov	sp, r7
 800b812:	bd80      	pop	{r7, pc}

0800b814 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b814:	b480      	push	{r7}
 800b816:	b085      	sub	sp, #20
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	4613      	mov	r3, r2
 800b820:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b826:	2b20      	cmp	r3, #32
 800b828:	d144      	bne.n	800b8b4 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b82a:	68bb      	ldr	r3, [r7, #8]
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d002      	beq.n	800b836 <HAL_UART_Transmit_IT+0x22>
 800b830:	88fb      	ldrh	r3, [r7, #6]
 800b832:	2b00      	cmp	r3, #0
 800b834:	d101      	bne.n	800b83a <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b836:	2301      	movs	r3, #1
 800b838:	e03d      	b.n	800b8b6 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b840:	2b01      	cmp	r3, #1
 800b842:	d101      	bne.n	800b848 <HAL_UART_Transmit_IT+0x34>
 800b844:	2302      	movs	r3, #2
 800b846:	e036      	b.n	800b8b6 <HAL_UART_Transmit_IT+0xa2>
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	2201      	movs	r2, #1
 800b84c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	68ba      	ldr	r2, [r7, #8]
 800b854:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	88fa      	ldrh	r2, [r7, #6]
 800b85a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	88fa      	ldrh	r2, [r7, #6]
 800b862:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	2200      	movs	r2, #0
 800b86a:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	2200      	movs	r2, #0
 800b870:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2221      	movs	r2, #33	; 0x21
 800b876:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	689b      	ldr	r3, [r3, #8]
 800b87c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b880:	d107      	bne.n	800b892 <HAL_UART_Transmit_IT+0x7e>
 800b882:	68fb      	ldr	r3, [r7, #12]
 800b884:	691b      	ldr	r3, [r3, #16]
 800b886:	2b00      	cmp	r3, #0
 800b888:	d103      	bne.n	800b892 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	4a0d      	ldr	r2, [pc, #52]	; (800b8c4 <HAL_UART_Transmit_IT+0xb0>)
 800b88e:	665a      	str	r2, [r3, #100]	; 0x64
 800b890:	e002      	b.n	800b898 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	4a0c      	ldr	r2, [pc, #48]	; (800b8c8 <HAL_UART_Transmit_IT+0xb4>)
 800b896:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800b898:	68fb      	ldr	r3, [r7, #12]
 800b89a:	2200      	movs	r2, #0
 800b89c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b8a0:	68fb      	ldr	r3, [r7, #12]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	681a      	ldr	r2, [r3, #0]
 800b8a6:	68fb      	ldr	r3, [r7, #12]
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b8ae:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b8b0:	2300      	movs	r3, #0
 800b8b2:	e000      	b.n	800b8b6 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800b8b4:	2302      	movs	r3, #2
  }
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3714      	adds	r7, #20
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	0800c567 	.word	0x0800c567
 800b8c8:	0800c4f5 	.word	0x0800c4f5

0800b8cc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b8cc:	b480      	push	{r7}
 800b8ce:	b085      	sub	sp, #20
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	60f8      	str	r0, [r7, #12]
 800b8d4:	60b9      	str	r1, [r7, #8]
 800b8d6:	4613      	mov	r3, r2
 800b8d8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b8de:	2b20      	cmp	r3, #32
 800b8e0:	f040 808a 	bne.w	800b9f8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800b8e4:	68bb      	ldr	r3, [r7, #8]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	d002      	beq.n	800b8f0 <HAL_UART_Receive_IT+0x24>
 800b8ea:	88fb      	ldrh	r3, [r7, #6]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d101      	bne.n	800b8f4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800b8f0:	2301      	movs	r3, #1
 800b8f2:	e082      	b.n	800b9fa <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b8fa:	2b01      	cmp	r3, #1
 800b8fc:	d101      	bne.n	800b902 <HAL_UART_Receive_IT+0x36>
 800b8fe:	2302      	movs	r3, #2
 800b900:	e07b      	b.n	800b9fa <HAL_UART_Receive_IT+0x12e>
 800b902:	68fb      	ldr	r3, [r7, #12]
 800b904:	2201      	movs	r2, #1
 800b906:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	68ba      	ldr	r2, [r7, #8]
 800b90e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	88fa      	ldrh	r2, [r7, #6]
 800b914:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	88fa      	ldrh	r2, [r7, #6]
 800b91c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800b920:	68fb      	ldr	r3, [r7, #12]
 800b922:	2200      	movs	r2, #0
 800b924:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	689b      	ldr	r3, [r3, #8]
 800b92a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b92e:	d10e      	bne.n	800b94e <HAL_UART_Receive_IT+0x82>
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	691b      	ldr	r3, [r3, #16]
 800b934:	2b00      	cmp	r3, #0
 800b936:	d105      	bne.n	800b944 <HAL_UART_Receive_IT+0x78>
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800b93e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b942:	e02d      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	22ff      	movs	r2, #255	; 0xff
 800b948:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b94c:	e028      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b94e:	68fb      	ldr	r3, [r7, #12]
 800b950:	689b      	ldr	r3, [r3, #8]
 800b952:	2b00      	cmp	r3, #0
 800b954:	d10d      	bne.n	800b972 <HAL_UART_Receive_IT+0xa6>
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	691b      	ldr	r3, [r3, #16]
 800b95a:	2b00      	cmp	r3, #0
 800b95c:	d104      	bne.n	800b968 <HAL_UART_Receive_IT+0x9c>
 800b95e:	68fb      	ldr	r3, [r7, #12]
 800b960:	22ff      	movs	r2, #255	; 0xff
 800b962:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b966:	e01b      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	227f      	movs	r2, #127	; 0x7f
 800b96c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b970:	e016      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b972:	68fb      	ldr	r3, [r7, #12]
 800b974:	689b      	ldr	r3, [r3, #8]
 800b976:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800b97a:	d10d      	bne.n	800b998 <HAL_UART_Receive_IT+0xcc>
 800b97c:	68fb      	ldr	r3, [r7, #12]
 800b97e:	691b      	ldr	r3, [r3, #16]
 800b980:	2b00      	cmp	r3, #0
 800b982:	d104      	bne.n	800b98e <HAL_UART_Receive_IT+0xc2>
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	227f      	movs	r2, #127	; 0x7f
 800b988:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b98c:	e008      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b98e:	68fb      	ldr	r3, [r7, #12]
 800b990:	223f      	movs	r2, #63	; 0x3f
 800b992:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800b996:	e003      	b.n	800b9a0 <HAL_UART_Receive_IT+0xd4>
 800b998:	68fb      	ldr	r3, [r7, #12]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b9a0:	68fb      	ldr	r3, [r7, #12]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800b9a6:	68fb      	ldr	r3, [r7, #12]
 800b9a8:	2222      	movs	r2, #34	; 0x22
 800b9aa:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b9ac:	68fb      	ldr	r3, [r7, #12]
 800b9ae:	681b      	ldr	r3, [r3, #0]
 800b9b0:	689a      	ldr	r2, [r3, #8]
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	f042 0201 	orr.w	r2, r2, #1
 800b9ba:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	689b      	ldr	r3, [r3, #8]
 800b9c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b9c4:	d107      	bne.n	800b9d6 <HAL_UART_Receive_IT+0x10a>
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	691b      	ldr	r3, [r3, #16]
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d103      	bne.n	800b9d6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800b9ce:	68fb      	ldr	r3, [r7, #12]
 800b9d0:	4a0d      	ldr	r2, [pc, #52]	; (800ba08 <HAL_UART_Receive_IT+0x13c>)
 800b9d2:	661a      	str	r2, [r3, #96]	; 0x60
 800b9d4:	e002      	b.n	800b9dc <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800b9d6:	68fb      	ldr	r3, [r7, #12]
 800b9d8:	4a0c      	ldr	r2, [pc, #48]	; (800ba0c <HAL_UART_Receive_IT+0x140>)
 800b9da:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	2200      	movs	r2, #0
 800b9e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	681a      	ldr	r2, [r3, #0]
 800b9ea:	68fb      	ldr	r3, [r7, #12]
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800b9f2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b9f4:	2300      	movs	r3, #0
 800b9f6:	e000      	b.n	800b9fa <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800b9f8:	2302      	movs	r3, #2
  }
}
 800b9fa:	4618      	mov	r0, r3
 800b9fc:	3714      	adds	r7, #20
 800b9fe:	46bd      	mov	sp, r7
 800ba00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba04:	4770      	bx	lr
 800ba06:	bf00      	nop
 800ba08:	0800c6bb 	.word	0x0800c6bb
 800ba0c:	0800c615 	.word	0x0800c615

0800ba10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ba10:	b580      	push	{r7, lr}
 800ba12:	b088      	sub	sp, #32
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	69db      	ldr	r3, [r3, #28]
 800ba1e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800ba20:	687b      	ldr	r3, [r7, #4]
 800ba22:	681b      	ldr	r3, [r3, #0]
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800ba28:	687b      	ldr	r3, [r7, #4]
 800ba2a:	681b      	ldr	r3, [r3, #0]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ba30:	69fa      	ldr	r2, [r7, #28]
 800ba32:	f640 030f 	movw	r3, #2063	; 0x80f
 800ba36:	4013      	ands	r3, r2
 800ba38:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ba3a:	693b      	ldr	r3, [r7, #16]
 800ba3c:	2b00      	cmp	r3, #0
 800ba3e:	d113      	bne.n	800ba68 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ba40:	69fb      	ldr	r3, [r7, #28]
 800ba42:	f003 0320 	and.w	r3, r3, #32
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d00e      	beq.n	800ba68 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	f003 0320 	and.w	r3, r3, #32
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d009      	beq.n	800ba68 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800ba54:	687b      	ldr	r3, [r7, #4]
 800ba56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba58:	2b00      	cmp	r3, #0
 800ba5a:	f000 80ff 	beq.w	800bc5c <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba62:	6878      	ldr	r0, [r7, #4]
 800ba64:	4798      	blx	r3
      }
      return;
 800ba66:	e0f9      	b.n	800bc5c <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	2b00      	cmp	r3, #0
 800ba6c:	f000 80d5 	beq.w	800bc1a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ba70:	697b      	ldr	r3, [r7, #20]
 800ba72:	f003 0301 	and.w	r3, r3, #1
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	d105      	bne.n	800ba86 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800ba7a:	69bb      	ldr	r3, [r7, #24]
 800ba7c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ba80:	2b00      	cmp	r3, #0
 800ba82:	f000 80ca 	beq.w	800bc1a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ba86:	69fb      	ldr	r3, [r7, #28]
 800ba88:	f003 0301 	and.w	r3, r3, #1
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d00e      	beq.n	800baae <HAL_UART_IRQHandler+0x9e>
 800ba90:	69bb      	ldr	r3, [r7, #24]
 800ba92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ba96:	2b00      	cmp	r3, #0
 800ba98:	d009      	beq.n	800baae <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baa6:	f043 0201 	orr.w	r2, r3, #1
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800baae:	69fb      	ldr	r3, [r7, #28]
 800bab0:	f003 0302 	and.w	r3, r3, #2
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d00e      	beq.n	800bad6 <HAL_UART_IRQHandler+0xc6>
 800bab8:	697b      	ldr	r3, [r7, #20]
 800baba:	f003 0301 	and.w	r3, r3, #1
 800babe:	2b00      	cmp	r3, #0
 800bac0:	d009      	beq.n	800bad6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	2202      	movs	r2, #2
 800bac8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800baca:	687b      	ldr	r3, [r7, #4]
 800bacc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bace:	f043 0204 	orr.w	r2, r3, #4
 800bad2:	687b      	ldr	r3, [r7, #4]
 800bad4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bad6:	69fb      	ldr	r3, [r7, #28]
 800bad8:	f003 0304 	and.w	r3, r3, #4
 800badc:	2b00      	cmp	r3, #0
 800bade:	d00e      	beq.n	800bafe <HAL_UART_IRQHandler+0xee>
 800bae0:	697b      	ldr	r3, [r7, #20]
 800bae2:	f003 0301 	and.w	r3, r3, #1
 800bae6:	2b00      	cmp	r3, #0
 800bae8:	d009      	beq.n	800bafe <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	681b      	ldr	r3, [r3, #0]
 800baee:	2204      	movs	r2, #4
 800baf0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800baf6:	f043 0202 	orr.w	r2, r3, #2
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bafe:	69fb      	ldr	r3, [r7, #28]
 800bb00:	f003 0308 	and.w	r3, r3, #8
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d013      	beq.n	800bb30 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb08:	69bb      	ldr	r3, [r7, #24]
 800bb0a:	f003 0320 	and.w	r3, r3, #32
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d104      	bne.n	800bb1c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800bb12:	697b      	ldr	r3, [r7, #20]
 800bb14:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800bb18:	2b00      	cmp	r3, #0
 800bb1a:	d009      	beq.n	800bb30 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bb1c:	687b      	ldr	r3, [r7, #4]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	2208      	movs	r2, #8
 800bb22:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb28:	f043 0208 	orr.w	r2, r3, #8
 800bb2c:	687b      	ldr	r3, [r7, #4]
 800bb2e:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bb30:	69fb      	ldr	r3, [r7, #28]
 800bb32:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d00f      	beq.n	800bb5a <HAL_UART_IRQHandler+0x14a>
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800bb40:	2b00      	cmp	r3, #0
 800bb42:	d00a      	beq.n	800bb5a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bb44:	687b      	ldr	r3, [r7, #4]
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800bb4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bb4e:	687b      	ldr	r3, [r7, #4]
 800bb50:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb52:	f043 0220 	orr.w	r2, r3, #32
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb5e:	2b00      	cmp	r3, #0
 800bb60:	d07e      	beq.n	800bc60 <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800bb62:	69fb      	ldr	r3, [r7, #28]
 800bb64:	f003 0320 	and.w	r3, r3, #32
 800bb68:	2b00      	cmp	r3, #0
 800bb6a:	d00c      	beq.n	800bb86 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800bb6c:	69bb      	ldr	r3, [r7, #24]
 800bb6e:	f003 0320 	and.w	r3, r3, #32
 800bb72:	2b00      	cmp	r3, #0
 800bb74:	d007      	beq.n	800bb86 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d003      	beq.n	800bb86 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb82:	6878      	ldr	r0, [r7, #4]
 800bb84:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bb8a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	681b      	ldr	r3, [r3, #0]
 800bb90:	689b      	ldr	r3, [r3, #8]
 800bb92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bb96:	2b40      	cmp	r3, #64	; 0x40
 800bb98:	d004      	beq.n	800bba4 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d031      	beq.n	800bc08 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800bba4:	6878      	ldr	r0, [r7, #4]
 800bba6:	f000 fc6f 	bl	800c488 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	689b      	ldr	r3, [r3, #8]
 800bbb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bbb4:	2b40      	cmp	r3, #64	; 0x40
 800bbb6:	d123      	bne.n	800bc00 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	689a      	ldr	r2, [r3, #8]
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	681b      	ldr	r3, [r3, #0]
 800bbc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bbc6:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d013      	beq.n	800bbf8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbd4:	4a25      	ldr	r2, [pc, #148]	; (800bc6c <HAL_UART_IRQHandler+0x25c>)
 800bbd6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bbd8:	687b      	ldr	r3, [r7, #4]
 800bbda:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbdc:	4618      	mov	r0, r3
 800bbde:	f7fa fe7d 	bl	80068dc <HAL_DMA_Abort_IT>
 800bbe2:	4603      	mov	r3, r0
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d016      	beq.n	800bc16 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800bbec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800bbee:	687a      	ldr	r2, [r7, #4]
 800bbf0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800bbf2:	4610      	mov	r0, r2
 800bbf4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbf6:	e00e      	b.n	800bc16 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800bbf8:	6878      	ldr	r0, [r7, #4]
 800bbfa:	f000 f843 	bl	800bc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bbfe:	e00a      	b.n	800bc16 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f000 f83f 	bl	800bc84 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc06:	e006      	b.n	800bc16 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800bc08:	6878      	ldr	r0, [r7, #4]
 800bc0a:	f000 f83b 	bl	800bc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	2200      	movs	r2, #0
 800bc12:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800bc14:	e024      	b.n	800bc60 <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bc16:	bf00      	nop
    return;
 800bc18:	e022      	b.n	800bc60 <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800bc1a:	69fb      	ldr	r3, [r7, #28]
 800bc1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d00d      	beq.n	800bc40 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800bc24:	69bb      	ldr	r3, [r7, #24]
 800bc26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc2a:	2b00      	cmp	r3, #0
 800bc2c:	d008      	beq.n	800bc40 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800bc2e:	687b      	ldr	r3, [r7, #4]
 800bc30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d016      	beq.n	800bc64 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	4798      	blx	r3
    }
    return;
 800bc3e:	e011      	b.n	800bc64 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bc40:	69fb      	ldr	r3, [r7, #28]
 800bc42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00d      	beq.n	800bc66 <HAL_UART_IRQHandler+0x256>
 800bc4a:	69bb      	ldr	r3, [r7, #24]
 800bc4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc50:	2b00      	cmp	r3, #0
 800bc52:	d008      	beq.n	800bc66 <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 800bc54:	6878      	ldr	r0, [r7, #4]
 800bc56:	f000 fcc4 	bl	800c5e2 <UART_EndTransmit_IT>
    return;
 800bc5a:	e004      	b.n	800bc66 <HAL_UART_IRQHandler+0x256>
      return;
 800bc5c:	bf00      	nop
 800bc5e:	e002      	b.n	800bc66 <HAL_UART_IRQHandler+0x256>
    return;
 800bc60:	bf00      	nop
 800bc62:	e000      	b.n	800bc66 <HAL_UART_IRQHandler+0x256>
    return;
 800bc64:	bf00      	nop
  }

}
 800bc66:	3720      	adds	r7, #32
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	bd80      	pop	{r7, pc}
 800bc6c:	0800c4c9 	.word	0x0800c4c9

0800bc70 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800bc70:	b480      	push	{r7}
 800bc72:	b083      	sub	sp, #12
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800bc78:	bf00      	nop
 800bc7a:	370c      	adds	r7, #12
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc82:	4770      	bx	lr

0800bc84 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800bc84:	b480      	push	{r7}
 800bc86:	b083      	sub	sp, #12
 800bc88:	af00      	add	r7, sp, #0
 800bc8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800bc8c:	bf00      	nop
 800bc8e:	370c      	adds	r7, #12
 800bc90:	46bd      	mov	sp, r7
 800bc92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc96:	4770      	bx	lr

0800bc98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800bc98:	b580      	push	{r7, lr}
 800bc9a:	b088      	sub	sp, #32
 800bc9c:	af00      	add	r7, sp, #0
 800bc9e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800bca0:	2300      	movs	r3, #0
 800bca2:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800bca4:	2300      	movs	r3, #0
 800bca6:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	689a      	ldr	r2, [r3, #8]
 800bcac:	687b      	ldr	r3, [r7, #4]
 800bcae:	691b      	ldr	r3, [r3, #16]
 800bcb0:	431a      	orrs	r2, r3
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	695b      	ldr	r3, [r3, #20]
 800bcb6:	431a      	orrs	r2, r3
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	69db      	ldr	r3, [r3, #28]
 800bcbc:	4313      	orrs	r3, r2
 800bcbe:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	681a      	ldr	r2, [r3, #0]
 800bcc6:	4ba7      	ldr	r3, [pc, #668]	; (800bf64 <UART_SetConfig+0x2cc>)
 800bcc8:	4013      	ands	r3, r2
 800bcca:	687a      	ldr	r2, [r7, #4]
 800bccc:	6812      	ldr	r2, [r2, #0]
 800bcce:	6939      	ldr	r1, [r7, #16]
 800bcd0:	430b      	orrs	r3, r1
 800bcd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bcd4:	687b      	ldr	r3, [r7, #4]
 800bcd6:	681b      	ldr	r3, [r3, #0]
 800bcd8:	685b      	ldr	r3, [r3, #4]
 800bcda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	68da      	ldr	r2, [r3, #12]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	430a      	orrs	r2, r1
 800bce8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bcea:	687b      	ldr	r3, [r7, #4]
 800bcec:	699b      	ldr	r3, [r3, #24]
 800bcee:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	6a1b      	ldr	r3, [r3, #32]
 800bcf4:	693a      	ldr	r2, [r7, #16]
 800bcf6:	4313      	orrs	r3, r2
 800bcf8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bcfa:	687b      	ldr	r3, [r7, #4]
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	689b      	ldr	r3, [r3, #8]
 800bd00:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800bd04:	687b      	ldr	r3, [r7, #4]
 800bd06:	681b      	ldr	r3, [r3, #0]
 800bd08:	693a      	ldr	r2, [r7, #16]
 800bd0a:	430a      	orrs	r2, r1
 800bd0c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	681b      	ldr	r3, [r3, #0]
 800bd12:	4a95      	ldr	r2, [pc, #596]	; (800bf68 <UART_SetConfig+0x2d0>)
 800bd14:	4293      	cmp	r3, r2
 800bd16:	d120      	bne.n	800bd5a <UART_SetConfig+0xc2>
 800bd18:	4b94      	ldr	r3, [pc, #592]	; (800bf6c <UART_SetConfig+0x2d4>)
 800bd1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd1e:	f003 0303 	and.w	r3, r3, #3
 800bd22:	2b03      	cmp	r3, #3
 800bd24:	d816      	bhi.n	800bd54 <UART_SetConfig+0xbc>
 800bd26:	a201      	add	r2, pc, #4	; (adr r2, 800bd2c <UART_SetConfig+0x94>)
 800bd28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd2c:	0800bd3d 	.word	0x0800bd3d
 800bd30:	0800bd49 	.word	0x0800bd49
 800bd34:	0800bd43 	.word	0x0800bd43
 800bd38:	0800bd4f 	.word	0x0800bd4f
 800bd3c:	2301      	movs	r3, #1
 800bd3e:	77fb      	strb	r3, [r7, #31]
 800bd40:	e14f      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bd42:	2302      	movs	r3, #2
 800bd44:	77fb      	strb	r3, [r7, #31]
 800bd46:	e14c      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bd48:	2304      	movs	r3, #4
 800bd4a:	77fb      	strb	r3, [r7, #31]
 800bd4c:	e149      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bd4e:	2308      	movs	r3, #8
 800bd50:	77fb      	strb	r3, [r7, #31]
 800bd52:	e146      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bd54:	2310      	movs	r3, #16
 800bd56:	77fb      	strb	r3, [r7, #31]
 800bd58:	e143      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	681b      	ldr	r3, [r3, #0]
 800bd5e:	4a84      	ldr	r2, [pc, #528]	; (800bf70 <UART_SetConfig+0x2d8>)
 800bd60:	4293      	cmp	r3, r2
 800bd62:	d132      	bne.n	800bdca <UART_SetConfig+0x132>
 800bd64:	4b81      	ldr	r3, [pc, #516]	; (800bf6c <UART_SetConfig+0x2d4>)
 800bd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bd6a:	f003 030c 	and.w	r3, r3, #12
 800bd6e:	2b0c      	cmp	r3, #12
 800bd70:	d828      	bhi.n	800bdc4 <UART_SetConfig+0x12c>
 800bd72:	a201      	add	r2, pc, #4	; (adr r2, 800bd78 <UART_SetConfig+0xe0>)
 800bd74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd78:	0800bdad 	.word	0x0800bdad
 800bd7c:	0800bdc5 	.word	0x0800bdc5
 800bd80:	0800bdc5 	.word	0x0800bdc5
 800bd84:	0800bdc5 	.word	0x0800bdc5
 800bd88:	0800bdb9 	.word	0x0800bdb9
 800bd8c:	0800bdc5 	.word	0x0800bdc5
 800bd90:	0800bdc5 	.word	0x0800bdc5
 800bd94:	0800bdc5 	.word	0x0800bdc5
 800bd98:	0800bdb3 	.word	0x0800bdb3
 800bd9c:	0800bdc5 	.word	0x0800bdc5
 800bda0:	0800bdc5 	.word	0x0800bdc5
 800bda4:	0800bdc5 	.word	0x0800bdc5
 800bda8:	0800bdbf 	.word	0x0800bdbf
 800bdac:	2300      	movs	r3, #0
 800bdae:	77fb      	strb	r3, [r7, #31]
 800bdb0:	e117      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdb2:	2302      	movs	r3, #2
 800bdb4:	77fb      	strb	r3, [r7, #31]
 800bdb6:	e114      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdb8:	2304      	movs	r3, #4
 800bdba:	77fb      	strb	r3, [r7, #31]
 800bdbc:	e111      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdbe:	2308      	movs	r3, #8
 800bdc0:	77fb      	strb	r3, [r7, #31]
 800bdc2:	e10e      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdc4:	2310      	movs	r3, #16
 800bdc6:	77fb      	strb	r3, [r7, #31]
 800bdc8:	e10b      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdca:	687b      	ldr	r3, [r7, #4]
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	4a69      	ldr	r2, [pc, #420]	; (800bf74 <UART_SetConfig+0x2dc>)
 800bdd0:	4293      	cmp	r3, r2
 800bdd2:	d120      	bne.n	800be16 <UART_SetConfig+0x17e>
 800bdd4:	4b65      	ldr	r3, [pc, #404]	; (800bf6c <UART_SetConfig+0x2d4>)
 800bdd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bdda:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bdde:	2b30      	cmp	r3, #48	; 0x30
 800bde0:	d013      	beq.n	800be0a <UART_SetConfig+0x172>
 800bde2:	2b30      	cmp	r3, #48	; 0x30
 800bde4:	d814      	bhi.n	800be10 <UART_SetConfig+0x178>
 800bde6:	2b20      	cmp	r3, #32
 800bde8:	d009      	beq.n	800bdfe <UART_SetConfig+0x166>
 800bdea:	2b20      	cmp	r3, #32
 800bdec:	d810      	bhi.n	800be10 <UART_SetConfig+0x178>
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	d002      	beq.n	800bdf8 <UART_SetConfig+0x160>
 800bdf2:	2b10      	cmp	r3, #16
 800bdf4:	d006      	beq.n	800be04 <UART_SetConfig+0x16c>
 800bdf6:	e00b      	b.n	800be10 <UART_SetConfig+0x178>
 800bdf8:	2300      	movs	r3, #0
 800bdfa:	77fb      	strb	r3, [r7, #31]
 800bdfc:	e0f1      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bdfe:	2302      	movs	r3, #2
 800be00:	77fb      	strb	r3, [r7, #31]
 800be02:	e0ee      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be04:	2304      	movs	r3, #4
 800be06:	77fb      	strb	r3, [r7, #31]
 800be08:	e0eb      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be0a:	2308      	movs	r3, #8
 800be0c:	77fb      	strb	r3, [r7, #31]
 800be0e:	e0e8      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be10:	2310      	movs	r3, #16
 800be12:	77fb      	strb	r3, [r7, #31]
 800be14:	e0e5      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a57      	ldr	r2, [pc, #348]	; (800bf78 <UART_SetConfig+0x2e0>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d120      	bne.n	800be62 <UART_SetConfig+0x1ca>
 800be20:	4b52      	ldr	r3, [pc, #328]	; (800bf6c <UART_SetConfig+0x2d4>)
 800be22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be26:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800be2a:	2bc0      	cmp	r3, #192	; 0xc0
 800be2c:	d013      	beq.n	800be56 <UART_SetConfig+0x1be>
 800be2e:	2bc0      	cmp	r3, #192	; 0xc0
 800be30:	d814      	bhi.n	800be5c <UART_SetConfig+0x1c4>
 800be32:	2b80      	cmp	r3, #128	; 0x80
 800be34:	d009      	beq.n	800be4a <UART_SetConfig+0x1b2>
 800be36:	2b80      	cmp	r3, #128	; 0x80
 800be38:	d810      	bhi.n	800be5c <UART_SetConfig+0x1c4>
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d002      	beq.n	800be44 <UART_SetConfig+0x1ac>
 800be3e:	2b40      	cmp	r3, #64	; 0x40
 800be40:	d006      	beq.n	800be50 <UART_SetConfig+0x1b8>
 800be42:	e00b      	b.n	800be5c <UART_SetConfig+0x1c4>
 800be44:	2300      	movs	r3, #0
 800be46:	77fb      	strb	r3, [r7, #31]
 800be48:	e0cb      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be4a:	2302      	movs	r3, #2
 800be4c:	77fb      	strb	r3, [r7, #31]
 800be4e:	e0c8      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be50:	2304      	movs	r3, #4
 800be52:	77fb      	strb	r3, [r7, #31]
 800be54:	e0c5      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be56:	2308      	movs	r3, #8
 800be58:	77fb      	strb	r3, [r7, #31]
 800be5a:	e0c2      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be5c:	2310      	movs	r3, #16
 800be5e:	77fb      	strb	r3, [r7, #31]
 800be60:	e0bf      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	681b      	ldr	r3, [r3, #0]
 800be66:	4a45      	ldr	r2, [pc, #276]	; (800bf7c <UART_SetConfig+0x2e4>)
 800be68:	4293      	cmp	r3, r2
 800be6a:	d125      	bne.n	800beb8 <UART_SetConfig+0x220>
 800be6c:	4b3f      	ldr	r3, [pc, #252]	; (800bf6c <UART_SetConfig+0x2d4>)
 800be6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800be72:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800be76:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be7a:	d017      	beq.n	800beac <UART_SetConfig+0x214>
 800be7c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800be80:	d817      	bhi.n	800beb2 <UART_SetConfig+0x21a>
 800be82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be86:	d00b      	beq.n	800bea0 <UART_SetConfig+0x208>
 800be88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800be8c:	d811      	bhi.n	800beb2 <UART_SetConfig+0x21a>
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <UART_SetConfig+0x202>
 800be92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800be96:	d006      	beq.n	800bea6 <UART_SetConfig+0x20e>
 800be98:	e00b      	b.n	800beb2 <UART_SetConfig+0x21a>
 800be9a:	2300      	movs	r3, #0
 800be9c:	77fb      	strb	r3, [r7, #31]
 800be9e:	e0a0      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bea0:	2302      	movs	r3, #2
 800bea2:	77fb      	strb	r3, [r7, #31]
 800bea4:	e09d      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bea6:	2304      	movs	r3, #4
 800bea8:	77fb      	strb	r3, [r7, #31]
 800beaa:	e09a      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800beac:	2308      	movs	r3, #8
 800beae:	77fb      	strb	r3, [r7, #31]
 800beb0:	e097      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800beb2:	2310      	movs	r3, #16
 800beb4:	77fb      	strb	r3, [r7, #31]
 800beb6:	e094      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	681b      	ldr	r3, [r3, #0]
 800bebc:	4a30      	ldr	r2, [pc, #192]	; (800bf80 <UART_SetConfig+0x2e8>)
 800bebe:	4293      	cmp	r3, r2
 800bec0:	d125      	bne.n	800bf0e <UART_SetConfig+0x276>
 800bec2:	4b2a      	ldr	r3, [pc, #168]	; (800bf6c <UART_SetConfig+0x2d4>)
 800bec4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bec8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800becc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed0:	d017      	beq.n	800bf02 <UART_SetConfig+0x26a>
 800bed2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bed6:	d817      	bhi.n	800bf08 <UART_SetConfig+0x270>
 800bed8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bedc:	d00b      	beq.n	800bef6 <UART_SetConfig+0x25e>
 800bede:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bee2:	d811      	bhi.n	800bf08 <UART_SetConfig+0x270>
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d003      	beq.n	800bef0 <UART_SetConfig+0x258>
 800bee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800beec:	d006      	beq.n	800befc <UART_SetConfig+0x264>
 800beee:	e00b      	b.n	800bf08 <UART_SetConfig+0x270>
 800bef0:	2301      	movs	r3, #1
 800bef2:	77fb      	strb	r3, [r7, #31]
 800bef4:	e075      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bef6:	2302      	movs	r3, #2
 800bef8:	77fb      	strb	r3, [r7, #31]
 800befa:	e072      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800befc:	2304      	movs	r3, #4
 800befe:	77fb      	strb	r3, [r7, #31]
 800bf00:	e06f      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf02:	2308      	movs	r3, #8
 800bf04:	77fb      	strb	r3, [r7, #31]
 800bf06:	e06c      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf08:	2310      	movs	r3, #16
 800bf0a:	77fb      	strb	r3, [r7, #31]
 800bf0c:	e069      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	681b      	ldr	r3, [r3, #0]
 800bf12:	4a1c      	ldr	r2, [pc, #112]	; (800bf84 <UART_SetConfig+0x2ec>)
 800bf14:	4293      	cmp	r3, r2
 800bf16:	d137      	bne.n	800bf88 <UART_SetConfig+0x2f0>
 800bf18:	4b14      	ldr	r3, [pc, #80]	; (800bf6c <UART_SetConfig+0x2d4>)
 800bf1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bf22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf26:	d017      	beq.n	800bf58 <UART_SetConfig+0x2c0>
 800bf28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bf2c:	d817      	bhi.n	800bf5e <UART_SetConfig+0x2c6>
 800bf2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf32:	d00b      	beq.n	800bf4c <UART_SetConfig+0x2b4>
 800bf34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bf38:	d811      	bhi.n	800bf5e <UART_SetConfig+0x2c6>
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d003      	beq.n	800bf46 <UART_SetConfig+0x2ae>
 800bf3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bf42:	d006      	beq.n	800bf52 <UART_SetConfig+0x2ba>
 800bf44:	e00b      	b.n	800bf5e <UART_SetConfig+0x2c6>
 800bf46:	2300      	movs	r3, #0
 800bf48:	77fb      	strb	r3, [r7, #31]
 800bf4a:	e04a      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf4c:	2302      	movs	r3, #2
 800bf4e:	77fb      	strb	r3, [r7, #31]
 800bf50:	e047      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf52:	2304      	movs	r3, #4
 800bf54:	77fb      	strb	r3, [r7, #31]
 800bf56:	e044      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf58:	2308      	movs	r3, #8
 800bf5a:	77fb      	strb	r3, [r7, #31]
 800bf5c:	e041      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf5e:	2310      	movs	r3, #16
 800bf60:	77fb      	strb	r3, [r7, #31]
 800bf62:	e03e      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bf64:	efff69f3 	.word	0xefff69f3
 800bf68:	40011000 	.word	0x40011000
 800bf6c:	40023800 	.word	0x40023800
 800bf70:	40004400 	.word	0x40004400
 800bf74:	40004800 	.word	0x40004800
 800bf78:	40004c00 	.word	0x40004c00
 800bf7c:	40005000 	.word	0x40005000
 800bf80:	40011400 	.word	0x40011400
 800bf84:	40007800 	.word	0x40007800
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a94      	ldr	r2, [pc, #592]	; (800c1e0 <UART_SetConfig+0x548>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d125      	bne.n	800bfde <UART_SetConfig+0x346>
 800bf92:	4b94      	ldr	r3, [pc, #592]	; (800c1e4 <UART_SetConfig+0x54c>)
 800bf94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bf98:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bf9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bfa0:	d017      	beq.n	800bfd2 <UART_SetConfig+0x33a>
 800bfa2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bfa6:	d817      	bhi.n	800bfd8 <UART_SetConfig+0x340>
 800bfa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfac:	d00b      	beq.n	800bfc6 <UART_SetConfig+0x32e>
 800bfae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfb2:	d811      	bhi.n	800bfd8 <UART_SetConfig+0x340>
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <UART_SetConfig+0x328>
 800bfb8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bfbc:	d006      	beq.n	800bfcc <UART_SetConfig+0x334>
 800bfbe:	e00b      	b.n	800bfd8 <UART_SetConfig+0x340>
 800bfc0:	2300      	movs	r3, #0
 800bfc2:	77fb      	strb	r3, [r7, #31]
 800bfc4:	e00d      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bfc6:	2302      	movs	r3, #2
 800bfc8:	77fb      	strb	r3, [r7, #31]
 800bfca:	e00a      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bfcc:	2304      	movs	r3, #4
 800bfce:	77fb      	strb	r3, [r7, #31]
 800bfd0:	e007      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bfd2:	2308      	movs	r3, #8
 800bfd4:	77fb      	strb	r3, [r7, #31]
 800bfd6:	e004      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bfd8:	2310      	movs	r3, #16
 800bfda:	77fb      	strb	r3, [r7, #31]
 800bfdc:	e001      	b.n	800bfe2 <UART_SetConfig+0x34a>
 800bfde:	2310      	movs	r3, #16
 800bfe0:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfe2:	687b      	ldr	r3, [r7, #4]
 800bfe4:	69db      	ldr	r3, [r3, #28]
 800bfe6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bfea:	d17f      	bne.n	800c0ec <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800bfec:	7ffb      	ldrb	r3, [r7, #31]
 800bfee:	2b08      	cmp	r3, #8
 800bff0:	d85c      	bhi.n	800c0ac <UART_SetConfig+0x414>
 800bff2:	a201      	add	r2, pc, #4	; (adr r2, 800bff8 <UART_SetConfig+0x360>)
 800bff4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bff8:	0800c01d 	.word	0x0800c01d
 800bffc:	0800c03d 	.word	0x0800c03d
 800c000:	0800c05d 	.word	0x0800c05d
 800c004:	0800c0ad 	.word	0x0800c0ad
 800c008:	0800c075 	.word	0x0800c075
 800c00c:	0800c0ad 	.word	0x0800c0ad
 800c010:	0800c0ad 	.word	0x0800c0ad
 800c014:	0800c0ad 	.word	0x0800c0ad
 800c018:	0800c095 	.word	0x0800c095
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c01c:	f7fd f882 	bl	8009124 <HAL_RCC_GetPCLK1Freq>
 800c020:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c022:	68fb      	ldr	r3, [r7, #12]
 800c024:	005a      	lsls	r2, r3, #1
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	685b      	ldr	r3, [r3, #4]
 800c02a:	085b      	lsrs	r3, r3, #1
 800c02c:	441a      	add	r2, r3
 800c02e:	687b      	ldr	r3, [r7, #4]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	fbb2 f3f3 	udiv	r3, r2, r3
 800c036:	b29b      	uxth	r3, r3
 800c038:	61bb      	str	r3, [r7, #24]
        break;
 800c03a:	e03a      	b.n	800c0b2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c03c:	f7fd f886 	bl	800914c <HAL_RCC_GetPCLK2Freq>
 800c040:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c042:	68fb      	ldr	r3, [r7, #12]
 800c044:	005a      	lsls	r2, r3, #1
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	685b      	ldr	r3, [r3, #4]
 800c04a:	085b      	lsrs	r3, r3, #1
 800c04c:	441a      	add	r2, r3
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	685b      	ldr	r3, [r3, #4]
 800c052:	fbb2 f3f3 	udiv	r3, r2, r3
 800c056:	b29b      	uxth	r3, r3
 800c058:	61bb      	str	r3, [r7, #24]
        break;
 800c05a:	e02a      	b.n	800c0b2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	685b      	ldr	r3, [r3, #4]
 800c060:	085a      	lsrs	r2, r3, #1
 800c062:	4b61      	ldr	r3, [pc, #388]	; (800c1e8 <UART_SetConfig+0x550>)
 800c064:	4413      	add	r3, r2
 800c066:	687a      	ldr	r2, [r7, #4]
 800c068:	6852      	ldr	r2, [r2, #4]
 800c06a:	fbb3 f3f2 	udiv	r3, r3, r2
 800c06e:	b29b      	uxth	r3, r3
 800c070:	61bb      	str	r3, [r7, #24]
        break;
 800c072:	e01e      	b.n	800c0b2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c074:	f7fc ff94 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 800c078:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800c07a:	68fb      	ldr	r3, [r7, #12]
 800c07c:	005a      	lsls	r2, r3, #1
 800c07e:	687b      	ldr	r3, [r7, #4]
 800c080:	685b      	ldr	r3, [r3, #4]
 800c082:	085b      	lsrs	r3, r3, #1
 800c084:	441a      	add	r2, r3
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	685b      	ldr	r3, [r3, #4]
 800c08a:	fbb2 f3f3 	udiv	r3, r2, r3
 800c08e:	b29b      	uxth	r3, r3
 800c090:	61bb      	str	r3, [r7, #24]
        break;
 800c092:	e00e      	b.n	800c0b2 <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	685b      	ldr	r3, [r3, #4]
 800c098:	085b      	lsrs	r3, r3, #1
 800c09a:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	685b      	ldr	r3, [r3, #4]
 800c0a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800c0a6:	b29b      	uxth	r3, r3
 800c0a8:	61bb      	str	r3, [r7, #24]
        break;
 800c0aa:	e002      	b.n	800c0b2 <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	75fb      	strb	r3, [r7, #23]
        break;
 800c0b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c0b2:	69bb      	ldr	r3, [r7, #24]
 800c0b4:	2b0f      	cmp	r3, #15
 800c0b6:	d916      	bls.n	800c0e6 <UART_SetConfig+0x44e>
 800c0b8:	69bb      	ldr	r3, [r7, #24]
 800c0ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c0be:	d212      	bcs.n	800c0e6 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c0c0:	69bb      	ldr	r3, [r7, #24]
 800c0c2:	b29b      	uxth	r3, r3
 800c0c4:	f023 030f 	bic.w	r3, r3, #15
 800c0c8:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c0ca:	69bb      	ldr	r3, [r7, #24]
 800c0cc:	085b      	lsrs	r3, r3, #1
 800c0ce:	b29b      	uxth	r3, r3
 800c0d0:	f003 0307 	and.w	r3, r3, #7
 800c0d4:	b29a      	uxth	r2, r3
 800c0d6:	897b      	ldrh	r3, [r7, #10]
 800c0d8:	4313      	orrs	r3, r2
 800c0da:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	897a      	ldrh	r2, [r7, #10]
 800c0e2:	60da      	str	r2, [r3, #12]
 800c0e4:	e070      	b.n	800c1c8 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800c0e6:	2301      	movs	r3, #1
 800c0e8:	75fb      	strb	r3, [r7, #23]
 800c0ea:	e06d      	b.n	800c1c8 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800c0ec:	7ffb      	ldrb	r3, [r7, #31]
 800c0ee:	2b08      	cmp	r3, #8
 800c0f0:	d859      	bhi.n	800c1a6 <UART_SetConfig+0x50e>
 800c0f2:	a201      	add	r2, pc, #4	; (adr r2, 800c0f8 <UART_SetConfig+0x460>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c11d 	.word	0x0800c11d
 800c0fc:	0800c13b 	.word	0x0800c13b
 800c100:	0800c159 	.word	0x0800c159
 800c104:	0800c1a7 	.word	0x0800c1a7
 800c108:	0800c171 	.word	0x0800c171
 800c10c:	0800c1a7 	.word	0x0800c1a7
 800c110:	0800c1a7 	.word	0x0800c1a7
 800c114:	0800c1a7 	.word	0x0800c1a7
 800c118:	0800c18f 	.word	0x0800c18f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800c11c:	f7fd f802 	bl	8009124 <HAL_RCC_GetPCLK1Freq>
 800c120:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	685b      	ldr	r3, [r3, #4]
 800c126:	085a      	lsrs	r2, r3, #1
 800c128:	68fb      	ldr	r3, [r7, #12]
 800c12a:	441a      	add	r2, r3
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	685b      	ldr	r3, [r3, #4]
 800c130:	fbb2 f3f3 	udiv	r3, r2, r3
 800c134:	b29b      	uxth	r3, r3
 800c136:	61bb      	str	r3, [r7, #24]
        break;
 800c138:	e038      	b.n	800c1ac <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800c13a:	f7fd f807 	bl	800914c <HAL_RCC_GetPCLK2Freq>
 800c13e:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	685b      	ldr	r3, [r3, #4]
 800c144:	085a      	lsrs	r2, r3, #1
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	441a      	add	r2, r3
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	685b      	ldr	r3, [r3, #4]
 800c14e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c152:	b29b      	uxth	r3, r3
 800c154:	61bb      	str	r3, [r7, #24]
        break;
 800c156:	e029      	b.n	800c1ac <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	085a      	lsrs	r2, r3, #1
 800c15e:	4b23      	ldr	r3, [pc, #140]	; (800c1ec <UART_SetConfig+0x554>)
 800c160:	4413      	add	r3, r2
 800c162:	687a      	ldr	r2, [r7, #4]
 800c164:	6852      	ldr	r2, [r2, #4]
 800c166:	fbb3 f3f2 	udiv	r3, r3, r2
 800c16a:	b29b      	uxth	r3, r3
 800c16c:	61bb      	str	r3, [r7, #24]
        break;
 800c16e:	e01d      	b.n	800c1ac <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800c170:	f7fc ff16 	bl	8008fa0 <HAL_RCC_GetSysClockFreq>
 800c174:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	685b      	ldr	r3, [r3, #4]
 800c17a:	085a      	lsrs	r2, r3, #1
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	441a      	add	r2, r3
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	685b      	ldr	r3, [r3, #4]
 800c184:	fbb2 f3f3 	udiv	r3, r2, r3
 800c188:	b29b      	uxth	r3, r3
 800c18a:	61bb      	str	r3, [r7, #24]
        break;
 800c18c:	e00e      	b.n	800c1ac <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	085b      	lsrs	r3, r3, #1
 800c194:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	685b      	ldr	r3, [r3, #4]
 800c19c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c1a0:	b29b      	uxth	r3, r3
 800c1a2:	61bb      	str	r3, [r7, #24]
        break;
 800c1a4:	e002      	b.n	800c1ac <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800c1a6:	2301      	movs	r3, #1
 800c1a8:	75fb      	strb	r3, [r7, #23]
        break;
 800c1aa:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c1ac:	69bb      	ldr	r3, [r7, #24]
 800c1ae:	2b0f      	cmp	r3, #15
 800c1b0:	d908      	bls.n	800c1c4 <UART_SetConfig+0x52c>
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c1b8:	d204      	bcs.n	800c1c4 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800c1ba:	687b      	ldr	r3, [r7, #4]
 800c1bc:	681b      	ldr	r3, [r3, #0]
 800c1be:	69ba      	ldr	r2, [r7, #24]
 800c1c0:	60da      	str	r2, [r3, #12]
 800c1c2:	e001      	b.n	800c1c8 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800c1c4:	2301      	movs	r3, #1
 800c1c6:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800c1c8:	687b      	ldr	r3, [r7, #4]
 800c1ca:	2200      	movs	r2, #0
 800c1cc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	2200      	movs	r2, #0
 800c1d2:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800c1d4:	7dfb      	ldrb	r3, [r7, #23]
}
 800c1d6:	4618      	mov	r0, r3
 800c1d8:	3720      	adds	r7, #32
 800c1da:	46bd      	mov	sp, r7
 800c1dc:	bd80      	pop	{r7, pc}
 800c1de:	bf00      	nop
 800c1e0:	40007c00 	.word	0x40007c00
 800c1e4:	40023800 	.word	0x40023800
 800c1e8:	01e84800 	.word	0x01e84800
 800c1ec:	00f42400 	.word	0x00f42400

0800c1f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c1f8:	687b      	ldr	r3, [r7, #4]
 800c1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1fc:	f003 0301 	and.w	r3, r3, #1
 800c200:	2b00      	cmp	r3, #0
 800c202:	d00a      	beq.n	800c21a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c204:	687b      	ldr	r3, [r7, #4]
 800c206:	681b      	ldr	r3, [r3, #0]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800c20e:	687b      	ldr	r3, [r7, #4]
 800c210:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	430a      	orrs	r2, r1
 800c218:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c21e:	f003 0302 	and.w	r3, r3, #2
 800c222:	2b00      	cmp	r3, #0
 800c224:	d00a      	beq.n	800c23c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	685b      	ldr	r3, [r3, #4]
 800c22c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800c230:	687b      	ldr	r3, [r7, #4]
 800c232:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	681b      	ldr	r3, [r3, #0]
 800c238:	430a      	orrs	r2, r1
 800c23a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c240:	f003 0304 	and.w	r3, r3, #4
 800c244:	2b00      	cmp	r3, #0
 800c246:	d00a      	beq.n	800c25e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	685b      	ldr	r3, [r3, #4]
 800c24e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	430a      	orrs	r2, r1
 800c25c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c262:	f003 0308 	and.w	r3, r3, #8
 800c266:	2b00      	cmp	r3, #0
 800c268:	d00a      	beq.n	800c280 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	685b      	ldr	r3, [r3, #4]
 800c270:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	430a      	orrs	r2, r1
 800c27e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c284:	f003 0310 	and.w	r3, r3, #16
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00a      	beq.n	800c2a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c28c:	687b      	ldr	r3, [r7, #4]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	689b      	ldr	r3, [r3, #8]
 800c292:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	681b      	ldr	r3, [r3, #0]
 800c29e:	430a      	orrs	r2, r1
 800c2a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2a6:	f003 0320 	and.w	r3, r3, #32
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d00a      	beq.n	800c2c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	681b      	ldr	r3, [r3, #0]
 800c2b2:	689b      	ldr	r3, [r3, #8]
 800c2b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c2bc:	687b      	ldr	r3, [r7, #4]
 800c2be:	681b      	ldr	r3, [r3, #0]
 800c2c0:	430a      	orrs	r2, r1
 800c2c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d01a      	beq.n	800c306 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	681b      	ldr	r3, [r3, #0]
 800c2d4:	685b      	ldr	r3, [r3, #4]
 800c2d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	681b      	ldr	r3, [r3, #0]
 800c2e2:	430a      	orrs	r2, r1
 800c2e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c2ee:	d10a      	bne.n	800c306 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c2f0:	687b      	ldr	r3, [r7, #4]
 800c2f2:	681b      	ldr	r3, [r3, #0]
 800c2f4:	685b      	ldr	r3, [r3, #4]
 800c2f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	681b      	ldr	r3, [r3, #0]
 800c302:	430a      	orrs	r2, r1
 800c304:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c30a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c30e:	2b00      	cmp	r3, #0
 800c310:	d00a      	beq.n	800c328 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	685b      	ldr	r3, [r3, #4]
 800c318:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c320:	687b      	ldr	r3, [r7, #4]
 800c322:	681b      	ldr	r3, [r3, #0]
 800c324:	430a      	orrs	r2, r1
 800c326:	605a      	str	r2, [r3, #4]
  }
}
 800c328:	bf00      	nop
 800c32a:	370c      	adds	r7, #12
 800c32c:	46bd      	mov	sp, r7
 800c32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c332:	4770      	bx	lr

0800c334 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c334:	b580      	push	{r7, lr}
 800c336:	b086      	sub	sp, #24
 800c338:	af02      	add	r7, sp, #8
 800c33a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c342:	f7f9 fc05 	bl	8005b50 <HAL_GetTick>
 800c346:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	681b      	ldr	r3, [r3, #0]
 800c34e:	f003 0308 	and.w	r3, r3, #8
 800c352:	2b08      	cmp	r3, #8
 800c354:	d10e      	bne.n	800c374 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c356:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c35a:	9300      	str	r3, [sp, #0]
 800c35c:	68fb      	ldr	r3, [r7, #12]
 800c35e:	2200      	movs	r2, #0
 800c360:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c364:	6878      	ldr	r0, [r7, #4]
 800c366:	f000 f814 	bl	800c392 <UART_WaitOnFlagUntilTimeout>
 800c36a:	4603      	mov	r3, r0
 800c36c:	2b00      	cmp	r3, #0
 800c36e:	d001      	beq.n	800c374 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c370:	2303      	movs	r3, #3
 800c372:	e00a      	b.n	800c38a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2220      	movs	r2, #32
 800c378:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	2220      	movs	r2, #32
 800c37e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c380:	687b      	ldr	r3, [r7, #4]
 800c382:	2200      	movs	r2, #0
 800c384:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c388:	2300      	movs	r3, #0
}
 800c38a:	4618      	mov	r0, r3
 800c38c:	3710      	adds	r7, #16
 800c38e:	46bd      	mov	sp, r7
 800c390:	bd80      	pop	{r7, pc}

0800c392 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c392:	b580      	push	{r7, lr}
 800c394:	b084      	sub	sp, #16
 800c396:	af00      	add	r7, sp, #0
 800c398:	60f8      	str	r0, [r7, #12]
 800c39a:	60b9      	str	r1, [r7, #8]
 800c39c:	603b      	str	r3, [r7, #0]
 800c39e:	4613      	mov	r3, r2
 800c3a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c3a2:	e05d      	b.n	800c460 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c3a4:	69bb      	ldr	r3, [r7, #24]
 800c3a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3aa:	d059      	beq.n	800c460 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c3ac:	f7f9 fbd0 	bl	8005b50 <HAL_GetTick>
 800c3b0:	4602      	mov	r2, r0
 800c3b2:	683b      	ldr	r3, [r7, #0]
 800c3b4:	1ad3      	subs	r3, r2, r3
 800c3b6:	69ba      	ldr	r2, [r7, #24]
 800c3b8:	429a      	cmp	r2, r3
 800c3ba:	d302      	bcc.n	800c3c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800c3bc:	69bb      	ldr	r3, [r7, #24]
 800c3be:	2b00      	cmp	r3, #0
 800c3c0:	d11b      	bne.n	800c3fa <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	681b      	ldr	r3, [r3, #0]
 800c3c6:	681a      	ldr	r2, [r3, #0]
 800c3c8:	68fb      	ldr	r3, [r7, #12]
 800c3ca:	681b      	ldr	r3, [r3, #0]
 800c3cc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c3d0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c3d2:	68fb      	ldr	r3, [r7, #12]
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	689a      	ldr	r2, [r3, #8]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	681b      	ldr	r3, [r3, #0]
 800c3dc:	f022 0201 	bic.w	r2, r2, #1
 800c3e0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c3e2:	68fb      	ldr	r3, [r7, #12]
 800c3e4:	2220      	movs	r2, #32
 800c3e6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	2220      	movs	r2, #32
 800c3ec:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	2200      	movs	r2, #0
 800c3f2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c3f6:	2303      	movs	r3, #3
 800c3f8:	e042      	b.n	800c480 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c3fa:	68fb      	ldr	r3, [r7, #12]
 800c3fc:	681b      	ldr	r3, [r3, #0]
 800c3fe:	681b      	ldr	r3, [r3, #0]
 800c400:	f003 0304 	and.w	r3, r3, #4
 800c404:	2b00      	cmp	r3, #0
 800c406:	d02b      	beq.n	800c460 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	69db      	ldr	r3, [r3, #28]
 800c40e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c412:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c416:	d123      	bne.n	800c460 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	681b      	ldr	r3, [r3, #0]
 800c41c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c420:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	681b      	ldr	r3, [r3, #0]
 800c426:	681a      	ldr	r2, [r3, #0]
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c430:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	f022 0201 	bic.w	r2, r2, #1
 800c440:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c442:	68fb      	ldr	r3, [r7, #12]
 800c444:	2220      	movs	r2, #32
 800c446:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c448:	68fb      	ldr	r3, [r7, #12]
 800c44a:	2220      	movs	r2, #32
 800c44c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	2220      	movs	r2, #32
 800c452:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c454:	68fb      	ldr	r3, [r7, #12]
 800c456:	2200      	movs	r2, #0
 800c458:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c45c:	2303      	movs	r3, #3
 800c45e:	e00f      	b.n	800c480 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c460:	68fb      	ldr	r3, [r7, #12]
 800c462:	681b      	ldr	r3, [r3, #0]
 800c464:	69da      	ldr	r2, [r3, #28]
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	4013      	ands	r3, r2
 800c46a:	68ba      	ldr	r2, [r7, #8]
 800c46c:	429a      	cmp	r2, r3
 800c46e:	bf0c      	ite	eq
 800c470:	2301      	moveq	r3, #1
 800c472:	2300      	movne	r3, #0
 800c474:	b2db      	uxtb	r3, r3
 800c476:	461a      	mov	r2, r3
 800c478:	79fb      	ldrb	r3, [r7, #7]
 800c47a:	429a      	cmp	r2, r3
 800c47c:	d092      	beq.n	800c3a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c47e:	2300      	movs	r3, #0
}
 800c480:	4618      	mov	r0, r3
 800c482:	3710      	adds	r7, #16
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c488:	b480      	push	{r7}
 800c48a:	b083      	sub	sp, #12
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	681a      	ldr	r2, [r3, #0]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c49e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 0201 	bic.w	r2, r2, #1
 800c4ae:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	2220      	movs	r2, #32
 800c4b4:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c4bc:	bf00      	nop
 800c4be:	370c      	adds	r7, #12
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4c6:	4770      	bx	lr

0800c4c8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c4c8:	b580      	push	{r7, lr}
 800c4ca:	b084      	sub	sp, #16
 800c4cc:	af00      	add	r7, sp, #0
 800c4ce:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c4d0:	687b      	ldr	r3, [r7, #4]
 800c4d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4d4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c4d6:	68fb      	ldr	r3, [r7, #12]
 800c4d8:	2200      	movs	r2, #0
 800c4da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	2200      	movs	r2, #0
 800c4e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c4e6:	68f8      	ldr	r0, [r7, #12]
 800c4e8:	f7ff fbcc 	bl	800bc84 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c4ec:	bf00      	nop
 800c4ee:	3710      	adds	r7, #16
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	bd80      	pop	{r7, pc}

0800c4f4 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c4f4:	b480      	push	{r7}
 800c4f6:	b083      	sub	sp, #12
 800c4f8:	af00      	add	r7, sp, #0
 800c4fa:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c500:	2b21      	cmp	r3, #33	; 0x21
 800c502:	d12a      	bne.n	800c55a <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800c504:	687b      	ldr	r3, [r7, #4]
 800c506:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c50a:	b29b      	uxth	r3, r3
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d110      	bne.n	800c532 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c510:	687b      	ldr	r3, [r7, #4]
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	681a      	ldr	r2, [r3, #0]
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c51e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c520:	687b      	ldr	r3, [r7, #4]
 800c522:	681b      	ldr	r3, [r3, #0]
 800c524:	681a      	ldr	r2, [r3, #0]
 800c526:	687b      	ldr	r3, [r7, #4]
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c52e:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c530:	e013      	b.n	800c55a <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c536:	781a      	ldrb	r2, [r3, #0]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c542:	1c5a      	adds	r2, r3, #1
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c54e:	b29b      	uxth	r3, r3
 800c550:	3b01      	subs	r3, #1
 800c552:	b29a      	uxth	r2, r3
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c55a:	bf00      	nop
 800c55c:	370c      	adds	r7, #12
 800c55e:	46bd      	mov	sp, r7
 800c560:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c564:	4770      	bx	lr

0800c566 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c566:	b480      	push	{r7}
 800c568:	b085      	sub	sp, #20
 800c56a:	af00      	add	r7, sp, #0
 800c56c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c572:	2b21      	cmp	r3, #33	; 0x21
 800c574:	d12f      	bne.n	800c5d6 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c57c:	b29b      	uxth	r3, r3
 800c57e:	2b00      	cmp	r3, #0
 800c580:	d110      	bne.n	800c5a4 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	681b      	ldr	r3, [r3, #0]
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c590:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	681b      	ldr	r3, [r3, #0]
 800c596:	681a      	ldr	r2, [r3, #0]
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c5a0:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c5a2:	e018      	b.n	800c5d6 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c5a4:	687b      	ldr	r3, [r7, #4]
 800c5a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	881b      	ldrh	r3, [r3, #0]
 800c5ae:	461a      	mov	r2, r3
 800c5b0:	687b      	ldr	r3, [r7, #4]
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c5b8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c5be:	1c9a      	adds	r2, r3, #2
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c5ca:	b29b      	uxth	r3, r3
 800c5cc:	3b01      	subs	r3, #1
 800c5ce:	b29a      	uxth	r2, r3
 800c5d0:	687b      	ldr	r3, [r7, #4]
 800c5d2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c5d6:	bf00      	nop
 800c5d8:	3714      	adds	r7, #20
 800c5da:	46bd      	mov	sp, r7
 800c5dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5e0:	4770      	bx	lr

0800c5e2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c5e2:	b580      	push	{r7, lr}
 800c5e4:	b082      	sub	sp, #8
 800c5e6:	af00      	add	r7, sp, #0
 800c5e8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c5ea:	687b      	ldr	r3, [r7, #4]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	681a      	ldr	r2, [r3, #0]
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c5f8:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	2220      	movs	r2, #32
 800c5fe:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	2200      	movs	r2, #0
 800c604:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f7ff fb32 	bl	800bc70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c60c:	bf00      	nop
 800c60e:	3708      	adds	r7, #8
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b084      	sub	sp, #16
 800c618:	af00      	add	r7, sp, #0
 800c61a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800c61c:	687b      	ldr	r3, [r7, #4]
 800c61e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c622:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c624:	687b      	ldr	r3, [r7, #4]
 800c626:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c628:	2b22      	cmp	r3, #34	; 0x22
 800c62a:	d13a      	bne.n	800c6a2 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c632:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800c634:	89bb      	ldrh	r3, [r7, #12]
 800c636:	b2d9      	uxtb	r1, r3
 800c638:	89fb      	ldrh	r3, [r7, #14]
 800c63a:	b2da      	uxtb	r2, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c640:	400a      	ands	r2, r1
 800c642:	b2d2      	uxtb	r2, r2
 800c644:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c64a:	1c5a      	adds	r2, r3, #1
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c656:	b29b      	uxth	r3, r3
 800c658:	3b01      	subs	r3, #1
 800c65a:	b29a      	uxth	r2, r3
 800c65c:	687b      	ldr	r3, [r7, #4]
 800c65e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c662:	687b      	ldr	r3, [r7, #4]
 800c664:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c668:	b29b      	uxth	r3, r3
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d121      	bne.n	800c6b2 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	681b      	ldr	r3, [r3, #0]
 800c672:	681a      	ldr	r2, [r3, #0]
 800c674:	687b      	ldr	r3, [r7, #4]
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c67c:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c67e:	687b      	ldr	r3, [r7, #4]
 800c680:	681b      	ldr	r3, [r3, #0]
 800c682:	689a      	ldr	r2, [r3, #8]
 800c684:	687b      	ldr	r3, [r7, #4]
 800c686:	681b      	ldr	r3, [r3, #0]
 800c688:	f022 0201 	bic.w	r2, r2, #1
 800c68c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c68e:	687b      	ldr	r3, [r7, #4]
 800c690:	2220      	movs	r2, #32
 800c692:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c694:	687b      	ldr	r3, [r7, #4]
 800c696:	2200      	movs	r2, #0
 800c698:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c69a:	6878      	ldr	r0, [r7, #4]
 800c69c:	f7f6 f826 	bl	80026ec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c6a0:	e007      	b.n	800c6b2 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	699a      	ldr	r2, [r3, #24]
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	f042 0208 	orr.w	r2, r2, #8
 800c6b0:	619a      	str	r2, [r3, #24]
}
 800c6b2:	bf00      	nop
 800c6b4:	3710      	adds	r7, #16
 800c6b6:	46bd      	mov	sp, r7
 800c6b8:	bd80      	pop	{r7, pc}

0800c6ba <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b084      	sub	sp, #16
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800c6c2:	687b      	ldr	r3, [r7, #4]
 800c6c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800c6c8:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800c6ca:	687b      	ldr	r3, [r7, #4]
 800c6cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800c6ce:	2b22      	cmp	r3, #34	; 0x22
 800c6d0:	d13a      	bne.n	800c748 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800c6d2:	687b      	ldr	r3, [r7, #4]
 800c6d4:	681b      	ldr	r3, [r3, #0]
 800c6d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c6d8:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6de:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800c6e0:	89ba      	ldrh	r2, [r7, #12]
 800c6e2:	89fb      	ldrh	r3, [r7, #14]
 800c6e4:	4013      	ands	r3, r2
 800c6e6:	b29a      	uxth	r2, r3
 800c6e8:	68bb      	ldr	r3, [r7, #8]
 800c6ea:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800c6f0:	1c9a      	adds	r2, r3, #2
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c6fc:	b29b      	uxth	r3, r3
 800c6fe:	3b01      	subs	r3, #1
 800c700:	b29a      	uxth	r2, r3
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c70e:	b29b      	uxth	r3, r3
 800c710:	2b00      	cmp	r3, #0
 800c712:	d121      	bne.n	800c758 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	681b      	ldr	r3, [r3, #0]
 800c718:	681a      	ldr	r2, [r3, #0]
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c722:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	689a      	ldr	r2, [r3, #8]
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	f022 0201 	bic.w	r2, r2, #1
 800c732:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2220      	movs	r2, #32
 800c738:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	2200      	movs	r2, #0
 800c73e:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800c740:	6878      	ldr	r0, [r7, #4]
 800c742:	f7f5 ffd3 	bl	80026ec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800c746:	e007      	b.n	800c758 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	699a      	ldr	r2, [r3, #24]
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	681b      	ldr	r3, [r3, #0]
 800c752:	f042 0208 	orr.w	r2, r2, #8
 800c756:	619a      	str	r2, [r3, #24]
}
 800c758:	bf00      	nop
 800c75a:	3710      	adds	r7, #16
 800c75c:	46bd      	mov	sp, r7
 800c75e:	bd80      	pop	{r7, pc}

0800c760 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c76a:	2300      	movs	r3, #0
 800c76c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c76e:	2300      	movs	r3, #0
 800c770:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c772:	683b      	ldr	r3, [r7, #0]
 800c774:	681b      	ldr	r3, [r3, #0]
 800c776:	2b01      	cmp	r3, #1
 800c778:	d027      	beq.n	800c7ca <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c780:	68fa      	ldr	r2, [r7, #12]
 800c782:	4b2f      	ldr	r3, [pc, #188]	; (800c840 <FMC_SDRAM_Init+0xe0>)
 800c784:	4013      	ands	r3, r2
 800c786:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c78c:	683b      	ldr	r3, [r7, #0]
 800c78e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c790:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c792:	683b      	ldr	r3, [r7, #0]
 800c794:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c796:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c798:	683b      	ldr	r3, [r7, #0]
 800c79a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c79c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c79e:	683b      	ldr	r3, [r7, #0]
 800c7a0:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c7a2:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c7a4:	683b      	ldr	r3, [r7, #0]
 800c7a6:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c7a8:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c7aa:	683b      	ldr	r3, [r7, #0]
 800c7ac:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c7ae:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c7b0:	683b      	ldr	r3, [r7, #0]
 800c7b2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c7b4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c7b6:	683b      	ldr	r3, [r7, #0]
 800c7b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c7ba:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c7bc:	68fa      	ldr	r2, [r7, #12]
 800c7be:	4313      	orrs	r3, r2
 800c7c0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68fa      	ldr	r2, [r7, #12]
 800c7c6:	601a      	str	r2, [r3, #0]
 800c7c8:	e032      	b.n	800c830 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c7ca:	687b      	ldr	r3, [r7, #4]
 800c7cc:	681b      	ldr	r3, [r3, #0]
 800c7ce:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c7d0:	68fb      	ldr	r3, [r7, #12]
 800c7d2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c7d6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c7dc:	683b      	ldr	r3, [r7, #0]
 800c7de:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c7e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c7e2:	683b      	ldr	r3, [r7, #0]
 800c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c7e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c7e8:	68fa      	ldr	r2, [r7, #12]
 800c7ea:	4313      	orrs	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c7f4:	68ba      	ldr	r2, [r7, #8]
 800c7f6:	4b12      	ldr	r3, [pc, #72]	; (800c840 <FMC_SDRAM_Init+0xe0>)
 800c7f8:	4013      	ands	r3, r2
 800c7fa:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c7fc:	683b      	ldr	r3, [r7, #0]
 800c7fe:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c800:	683b      	ldr	r3, [r7, #0]
 800c802:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c804:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c80a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c80c:	683b      	ldr	r3, [r7, #0]
 800c80e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c810:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c816:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c818:	683b      	ldr	r3, [r7, #0]
 800c81a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c81c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c81e:	68ba      	ldr	r2, [r7, #8]
 800c820:	4313      	orrs	r3, r2
 800c822:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	68fa      	ldr	r2, [r7, #12]
 800c828:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c830:	2300      	movs	r3, #0
}
 800c832:	4618      	mov	r0, r3
 800c834:	3714      	adds	r7, #20
 800c836:	46bd      	mov	sp, r7
 800c838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c83c:	4770      	bx	lr
 800c83e:	bf00      	nop
 800c840:	ffff8000 	.word	0xffff8000

0800c844 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c844:	b480      	push	{r7}
 800c846:	b087      	sub	sp, #28
 800c848:	af00      	add	r7, sp, #0
 800c84a:	60f8      	str	r0, [r7, #12]
 800c84c:	60b9      	str	r1, [r7, #8]
 800c84e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c850:	2300      	movs	r3, #0
 800c852:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c854:	2300      	movs	r3, #0
 800c856:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2b01      	cmp	r3, #1
 800c85c:	d02e      	beq.n	800c8bc <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c864:	697b      	ldr	r3, [r7, #20]
 800c866:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c86a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c86c:	68bb      	ldr	r3, [r7, #8]
 800c86e:	681b      	ldr	r3, [r3, #0]
 800c870:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	685b      	ldr	r3, [r3, #4]
 800c876:	3b01      	subs	r3, #1
 800c878:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c87a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c87c:	68bb      	ldr	r3, [r7, #8]
 800c87e:	689b      	ldr	r3, [r3, #8]
 800c880:	3b01      	subs	r3, #1
 800c882:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c884:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c886:	68bb      	ldr	r3, [r7, #8]
 800c888:	68db      	ldr	r3, [r3, #12]
 800c88a:	3b01      	subs	r3, #1
 800c88c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c88e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	691b      	ldr	r3, [r3, #16]
 800c894:	3b01      	subs	r3, #1
 800c896:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c898:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	695b      	ldr	r3, [r3, #20]
 800c89e:	3b01      	subs	r3, #1
 800c8a0:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c8a2:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c8a4:	68bb      	ldr	r3, [r7, #8]
 800c8a6:	699b      	ldr	r3, [r3, #24]
 800c8a8:	3b01      	subs	r3, #1
 800c8aa:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8ac:	4313      	orrs	r3, r2
 800c8ae:	697a      	ldr	r2, [r7, #20]
 800c8b0:	4313      	orrs	r3, r2
 800c8b2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c8b4:	68fb      	ldr	r3, [r7, #12]
 800c8b6:	697a      	ldr	r2, [r7, #20]
 800c8b8:	609a      	str	r2, [r3, #8]
 800c8ba:	e039      	b.n	800c930 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	689b      	ldr	r3, [r3, #8]
 800c8c0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c8c2:	697a      	ldr	r2, [r7, #20]
 800c8c4:	4b1e      	ldr	r3, [pc, #120]	; (800c940 <FMC_SDRAM_Timing_Init+0xfc>)
 800c8c6:	4013      	ands	r3, r2
 800c8c8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c8ca:	68bb      	ldr	r3, [r7, #8]
 800c8cc:	68db      	ldr	r3, [r3, #12]
 800c8ce:	3b01      	subs	r3, #1
 800c8d0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c8d2:	68bb      	ldr	r3, [r7, #8]
 800c8d4:	695b      	ldr	r3, [r3, #20]
 800c8d6:	3b01      	subs	r3, #1
 800c8d8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c8da:	4313      	orrs	r3, r2
 800c8dc:	697a      	ldr	r2, [r7, #20]
 800c8de:	4313      	orrs	r3, r2
 800c8e0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	68db      	ldr	r3, [r3, #12]
 800c8e6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c8e8:	693b      	ldr	r3, [r7, #16]
 800c8ea:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c8ee:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8f0:	68bb      	ldr	r3, [r7, #8]
 800c8f2:	681b      	ldr	r3, [r3, #0]
 800c8f4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	685b      	ldr	r3, [r3, #4]
 800c8fa:	3b01      	subs	r3, #1
 800c8fc:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c8fe:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c900:	68bb      	ldr	r3, [r7, #8]
 800c902:	689b      	ldr	r3, [r3, #8]
 800c904:	3b01      	subs	r3, #1
 800c906:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c908:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	691b      	ldr	r3, [r3, #16]
 800c90e:	3b01      	subs	r3, #1
 800c910:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c912:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c914:	68bb      	ldr	r3, [r7, #8]
 800c916:	699b      	ldr	r3, [r3, #24]
 800c918:	3b01      	subs	r3, #1
 800c91a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c91c:	4313      	orrs	r3, r2
 800c91e:	693a      	ldr	r2, [r7, #16]
 800c920:	4313      	orrs	r3, r2
 800c922:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c924:	68fb      	ldr	r3, [r7, #12]
 800c926:	697a      	ldr	r2, [r7, #20]
 800c928:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c92a:	68fb      	ldr	r3, [r7, #12]
 800c92c:	693a      	ldr	r2, [r7, #16]
 800c92e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c930:	2300      	movs	r3, #0
}
 800c932:	4618      	mov	r0, r3
 800c934:	371c      	adds	r7, #28
 800c936:	46bd      	mov	sp, r7
 800c938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93c:	4770      	bx	lr
 800c93e:	bf00      	nop
 800c940:	ff0f0fff 	.word	0xff0f0fff

0800c944 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c944:	b480      	push	{r7}
 800c946:	b087      	sub	sp, #28
 800c948:	af00      	add	r7, sp, #0
 800c94a:	60f8      	str	r0, [r7, #12]
 800c94c:	60b9      	str	r1, [r7, #8]
 800c94e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c950:	2300      	movs	r3, #0
 800c952:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c954:	68bb      	ldr	r3, [r7, #8]
 800c956:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c958:	68bb      	ldr	r3, [r7, #8]
 800c95a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c95c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c95e:	68bb      	ldr	r3, [r7, #8]
 800c960:	689b      	ldr	r3, [r3, #8]
 800c962:	3b01      	subs	r3, #1
 800c964:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c966:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c968:	68bb      	ldr	r3, [r7, #8]
 800c96a:	68db      	ldr	r3, [r3, #12]
 800c96c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c96e:	4313      	orrs	r3, r2
 800c970:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c972:	697a      	ldr	r2, [r7, #20]
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c978:	2300      	movs	r3, #0
}
 800c97a:	4618      	mov	r0, r3
 800c97c:	371c      	adds	r7, #28
 800c97e:	46bd      	mov	sp, r7
 800c980:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c984:	4770      	bx	lr

0800c986 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c986:	b480      	push	{r7}
 800c988:	b083      	sub	sp, #12
 800c98a:	af00      	add	r7, sp, #0
 800c98c:	6078      	str	r0, [r7, #4]
 800c98e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	695a      	ldr	r2, [r3, #20]
 800c994:	683b      	ldr	r3, [r7, #0]
 800c996:	005b      	lsls	r3, r3, #1
 800c998:	431a      	orrs	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c99e:	2300      	movs	r3, #0
}
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	370c      	adds	r7, #12
 800c9a4:	46bd      	mov	sp, r7
 800c9a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9aa:	4770      	bx	lr

0800c9ac <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c9ac:	b480      	push	{r7}
 800c9ae:	b085      	sub	sp, #20
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c9ba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c9be:	2b84      	cmp	r3, #132	; 0x84
 800c9c0:	d005      	beq.n	800c9ce <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c9c2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c9c6:	68fb      	ldr	r3, [r7, #12]
 800c9c8:	4413      	add	r3, r2
 800c9ca:	3303      	adds	r3, #3
 800c9cc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c9ce:	68fb      	ldr	r3, [r7, #12]
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3714      	adds	r7, #20
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9da:	4770      	bx	lr

0800c9dc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c9dc:	b580      	push	{r7, lr}
 800c9de:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c9e0:	f001 f900 	bl	800dbe4 <vTaskStartScheduler>
  
  return osOK;
 800c9e4:	2300      	movs	r3, #0
}
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	bd80      	pop	{r7, pc}

0800c9ea <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c9ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c9ec:	b089      	sub	sp, #36	; 0x24
 800c9ee:	af04      	add	r7, sp, #16
 800c9f0:	6078      	str	r0, [r7, #4]
 800c9f2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	695b      	ldr	r3, [r3, #20]
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d020      	beq.n	800ca3e <osThreadCreate+0x54>
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	699b      	ldr	r3, [r3, #24]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d01c      	beq.n	800ca3e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca04:	687b      	ldr	r3, [r7, #4]
 800ca06:	685c      	ldr	r4, [r3, #4]
 800ca08:	687b      	ldr	r3, [r7, #4]
 800ca0a:	681d      	ldr	r5, [r3, #0]
 800ca0c:	687b      	ldr	r3, [r7, #4]
 800ca0e:	691e      	ldr	r6, [r3, #16]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca16:	4618      	mov	r0, r3
 800ca18:	f7ff ffc8 	bl	800c9ac <makeFreeRtosPriority>
 800ca1c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	695b      	ldr	r3, [r3, #20]
 800ca22:	687a      	ldr	r2, [r7, #4]
 800ca24:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca26:	9202      	str	r2, [sp, #8]
 800ca28:	9301      	str	r3, [sp, #4]
 800ca2a:	9100      	str	r1, [sp, #0]
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	4632      	mov	r2, r6
 800ca30:	4629      	mov	r1, r5
 800ca32:	4620      	mov	r0, r4
 800ca34:	f000 fde4 	bl	800d600 <xTaskCreateStatic>
 800ca38:	4603      	mov	r3, r0
 800ca3a:	60fb      	str	r3, [r7, #12]
 800ca3c:	e01c      	b.n	800ca78 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	685c      	ldr	r4, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ca4a:	b29e      	uxth	r6, r3
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800ca52:	4618      	mov	r0, r3
 800ca54:	f7ff ffaa 	bl	800c9ac <makeFreeRtosPriority>
 800ca58:	4602      	mov	r2, r0
 800ca5a:	f107 030c 	add.w	r3, r7, #12
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	9200      	str	r2, [sp, #0]
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	4632      	mov	r2, r6
 800ca66:	4629      	mov	r1, r5
 800ca68:	4620      	mov	r0, r4
 800ca6a:	f000 fe2c 	bl	800d6c6 <xTaskCreate>
 800ca6e:	4603      	mov	r3, r0
 800ca70:	2b01      	cmp	r3, #1
 800ca72:	d001      	beq.n	800ca78 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ca74:	2300      	movs	r3, #0
 800ca76:	e000      	b.n	800ca7a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ca78:	68fb      	ldr	r3, [r7, #12]
}
 800ca7a:	4618      	mov	r0, r3
 800ca7c:	3714      	adds	r7, #20
 800ca7e:	46bd      	mov	sp, r7
 800ca80:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ca82 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ca82:	b580      	push	{r7, lr}
 800ca84:	b084      	sub	sp, #16
 800ca86:	af00      	add	r7, sp, #0
 800ca88:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ca8a:	687b      	ldr	r3, [r7, #4]
 800ca8c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	2b00      	cmp	r3, #0
 800ca92:	d001      	beq.n	800ca98 <osDelay+0x16>
 800ca94:	68fb      	ldr	r3, [r7, #12]
 800ca96:	e000      	b.n	800ca9a <osDelay+0x18>
 800ca98:	2301      	movs	r3, #1
 800ca9a:	4618      	mov	r0, r3
 800ca9c:	f001 f86c 	bl	800db78 <vTaskDelay>
  
  return osOK;
 800caa0:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800caa2:	4618      	mov	r0, r3
 800caa4:	3710      	adds	r7, #16
 800caa6:	46bd      	mov	sp, r7
 800caa8:	bd80      	pop	{r7, pc}

0800caaa <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800caaa:	b580      	push	{r7, lr}
 800caac:	b082      	sub	sp, #8
 800caae:	af00      	add	r7, sp, #0
 800cab0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	685b      	ldr	r3, [r3, #4]
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d007      	beq.n	800caca <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	685b      	ldr	r3, [r3, #4]
 800cabe:	4619      	mov	r1, r3
 800cac0:	2001      	movs	r0, #1
 800cac2:	f000 fa66 	bl	800cf92 <xQueueCreateMutexStatic>
 800cac6:	4603      	mov	r3, r0
 800cac8:	e003      	b.n	800cad2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800caca:	2001      	movs	r0, #1
 800cacc:	f000 fa49 	bl	800cf62 <xQueueCreateMutex>
 800cad0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800cad2:	4618      	mov	r0, r3
 800cad4:	3708      	adds	r7, #8
 800cad6:	46bd      	mov	sp, r7
 800cad8:	bd80      	pop	{r7, pc}

0800cada <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800cada:	b590      	push	{r4, r7, lr}
 800cadc:	b085      	sub	sp, #20
 800cade:	af02      	add	r7, sp, #8
 800cae0:	6078      	str	r0, [r7, #4]
 800cae2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	689b      	ldr	r3, [r3, #8]
 800cae8:	2b00      	cmp	r3, #0
 800caea:	d011      	beq.n	800cb10 <osMessageCreate+0x36>
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	68db      	ldr	r3, [r3, #12]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d00d      	beq.n	800cb10 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800caf4:	687b      	ldr	r3, [r7, #4]
 800caf6:	6818      	ldr	r0, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	6859      	ldr	r1, [r3, #4]
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	689a      	ldr	r2, [r3, #8]
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	68db      	ldr	r3, [r3, #12]
 800cb04:	2400      	movs	r4, #0
 800cb06:	9400      	str	r4, [sp, #0]
 800cb08:	f000 f92e 	bl	800cd68 <xQueueGenericCreateStatic>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	e008      	b.n	800cb22 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	6818      	ldr	r0, [r3, #0]
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	2200      	movs	r2, #0
 800cb1a:	4619      	mov	r1, r3
 800cb1c:	f000 f9a6 	bl	800ce6c <xQueueGenericCreate>
 800cb20:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800cb22:	4618      	mov	r0, r3
 800cb24:	370c      	adds	r7, #12
 800cb26:	46bd      	mov	sp, r7
 800cb28:	bd90      	pop	{r4, r7, pc}

0800cb2a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800cb2a:	b480      	push	{r7}
 800cb2c:	b083      	sub	sp, #12
 800cb2e:	af00      	add	r7, sp, #0
 800cb30:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f103 0208 	add.w	r2, r3, #8
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	f04f 32ff 	mov.w	r2, #4294967295
 800cb42:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	f103 0208 	add.w	r2, r3, #8
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb4e:	687b      	ldr	r3, [r7, #4]
 800cb50:	f103 0208 	add.w	r2, r3, #8
 800cb54:	687b      	ldr	r3, [r7, #4]
 800cb56:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	2200      	movs	r2, #0
 800cb5c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb5e:	bf00      	nop
 800cb60:	370c      	adds	r7, #12
 800cb62:	46bd      	mov	sp, r7
 800cb64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb68:	4770      	bx	lr

0800cb6a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb6a:	b480      	push	{r7}
 800cb6c:	b083      	sub	sp, #12
 800cb6e:	af00      	add	r7, sp, #0
 800cb70:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb72:	687b      	ldr	r3, [r7, #4]
 800cb74:	2200      	movs	r2, #0
 800cb76:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb78:	bf00      	nop
 800cb7a:	370c      	adds	r7, #12
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb82:	4770      	bx	lr

0800cb84 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb84:	b480      	push	{r7}
 800cb86:	b085      	sub	sp, #20
 800cb88:	af00      	add	r7, sp, #0
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	685b      	ldr	r3, [r3, #4]
 800cb92:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb94:	683b      	ldr	r3, [r7, #0]
 800cb96:	68fa      	ldr	r2, [r7, #12]
 800cb98:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb9a:	68fb      	ldr	r3, [r7, #12]
 800cb9c:	689a      	ldr	r2, [r3, #8]
 800cb9e:	683b      	ldr	r3, [r7, #0]
 800cba0:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	689b      	ldr	r3, [r3, #8]
 800cba6:	683a      	ldr	r2, [r7, #0]
 800cba8:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cbaa:	68fb      	ldr	r3, [r7, #12]
 800cbac:	683a      	ldr	r2, [r7, #0]
 800cbae:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	687a      	ldr	r2, [r7, #4]
 800cbb4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	1c5a      	adds	r2, r3, #1
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	601a      	str	r2, [r3, #0]
}
 800cbc0:	bf00      	nop
 800cbc2:	3714      	adds	r7, #20
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cbcc:	b480      	push	{r7}
 800cbce:	b085      	sub	sp, #20
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	6078      	str	r0, [r7, #4]
 800cbd4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cbd6:	683b      	ldr	r3, [r7, #0]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cbdc:	68bb      	ldr	r3, [r7, #8]
 800cbde:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cbe2:	d103      	bne.n	800cbec <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbe4:	687b      	ldr	r3, [r7, #4]
 800cbe6:	691b      	ldr	r3, [r3, #16]
 800cbe8:	60fb      	str	r3, [r7, #12]
 800cbea:	e00c      	b.n	800cc06 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbec:	687b      	ldr	r3, [r7, #4]
 800cbee:	3308      	adds	r3, #8
 800cbf0:	60fb      	str	r3, [r7, #12]
 800cbf2:	e002      	b.n	800cbfa <vListInsert+0x2e>
 800cbf4:	68fb      	ldr	r3, [r7, #12]
 800cbf6:	685b      	ldr	r3, [r3, #4]
 800cbf8:	60fb      	str	r3, [r7, #12]
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	685b      	ldr	r3, [r3, #4]
 800cbfe:	681b      	ldr	r3, [r3, #0]
 800cc00:	68ba      	ldr	r2, [r7, #8]
 800cc02:	429a      	cmp	r2, r3
 800cc04:	d2f6      	bcs.n	800cbf4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cc06:	68fb      	ldr	r3, [r7, #12]
 800cc08:	685a      	ldr	r2, [r3, #4]
 800cc0a:	683b      	ldr	r3, [r7, #0]
 800cc0c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cc0e:	683b      	ldr	r3, [r7, #0]
 800cc10:	685b      	ldr	r3, [r3, #4]
 800cc12:	683a      	ldr	r2, [r7, #0]
 800cc14:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cc16:	683b      	ldr	r3, [r7, #0]
 800cc18:	68fa      	ldr	r2, [r7, #12]
 800cc1a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	683a      	ldr	r2, [r7, #0]
 800cc20:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cc22:	683b      	ldr	r3, [r7, #0]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cc28:	687b      	ldr	r3, [r7, #4]
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	1c5a      	adds	r2, r3, #1
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	601a      	str	r2, [r3, #0]
}
 800cc32:	bf00      	nop
 800cc34:	3714      	adds	r7, #20
 800cc36:	46bd      	mov	sp, r7
 800cc38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc3c:	4770      	bx	lr

0800cc3e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc3e:	b480      	push	{r7}
 800cc40:	b085      	sub	sp, #20
 800cc42:	af00      	add	r7, sp, #0
 800cc44:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	691b      	ldr	r3, [r3, #16]
 800cc4a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	685b      	ldr	r3, [r3, #4]
 800cc50:	687a      	ldr	r2, [r7, #4]
 800cc52:	6892      	ldr	r2, [r2, #8]
 800cc54:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	689b      	ldr	r3, [r3, #8]
 800cc5a:	687a      	ldr	r2, [r7, #4]
 800cc5c:	6852      	ldr	r2, [r2, #4]
 800cc5e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc60:	68fb      	ldr	r3, [r7, #12]
 800cc62:	685b      	ldr	r3, [r3, #4]
 800cc64:	687a      	ldr	r2, [r7, #4]
 800cc66:	429a      	cmp	r2, r3
 800cc68:	d103      	bne.n	800cc72 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	689a      	ldr	r2, [r3, #8]
 800cc6e:	68fb      	ldr	r3, [r7, #12]
 800cc70:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	2200      	movs	r2, #0
 800cc76:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	681b      	ldr	r3, [r3, #0]
 800cc7c:	1e5a      	subs	r2, r3, #1
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc82:	68fb      	ldr	r3, [r7, #12]
 800cc84:	681b      	ldr	r3, [r3, #0]
}
 800cc86:	4618      	mov	r0, r3
 800cc88:	3714      	adds	r7, #20
 800cc8a:	46bd      	mov	sp, r7
 800cc8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc90:	4770      	bx	lr
	...

0800cc94 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc94:	b580      	push	{r7, lr}
 800cc96:	b084      	sub	sp, #16
 800cc98:	af00      	add	r7, sp, #0
 800cc9a:	6078      	str	r0, [r7, #4]
 800cc9c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc9e:	687b      	ldr	r3, [r7, #4]
 800cca0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	2b00      	cmp	r3, #0
 800cca6:	d10c      	bne.n	800ccc2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccac:	b672      	cpsid	i
 800ccae:	f383 8811 	msr	BASEPRI, r3
 800ccb2:	f3bf 8f6f 	isb	sy
 800ccb6:	f3bf 8f4f 	dsb	sy
 800ccba:	b662      	cpsie	i
 800ccbc:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800ccbe:	bf00      	nop
 800ccc0:	e7fe      	b.n	800ccc0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800ccc2:	f001 ff23 	bl	800eb0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	681a      	ldr	r2, [r3, #0]
 800ccca:	68fb      	ldr	r3, [r7, #12]
 800cccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccce:	68f9      	ldr	r1, [r7, #12]
 800ccd0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccd2:	fb01 f303 	mul.w	r3, r1, r3
 800ccd6:	441a      	add	r2, r3
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	2200      	movs	r2, #0
 800cce0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	681a      	ldr	r2, [r3, #0]
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccea:	68fb      	ldr	r3, [r7, #12]
 800ccec:	681a      	ldr	r2, [r3, #0]
 800ccee:	68fb      	ldr	r3, [r7, #12]
 800ccf0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccf2:	3b01      	subs	r3, #1
 800ccf4:	68f9      	ldr	r1, [r7, #12]
 800ccf6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccf8:	fb01 f303 	mul.w	r3, r1, r3
 800ccfc:	441a      	add	r2, r3
 800ccfe:	68fb      	ldr	r3, [r7, #12]
 800cd00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800cd02:	68fb      	ldr	r3, [r7, #12]
 800cd04:	22ff      	movs	r2, #255	; 0xff
 800cd06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	22ff      	movs	r2, #255	; 0xff
 800cd0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800cd12:	683b      	ldr	r3, [r7, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d114      	bne.n	800cd42 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cd18:	68fb      	ldr	r3, [r7, #12]
 800cd1a:	691b      	ldr	r3, [r3, #16]
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d01a      	beq.n	800cd56 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cd20:	68fb      	ldr	r3, [r7, #12]
 800cd22:	3310      	adds	r3, #16
 800cd24:	4618      	mov	r0, r3
 800cd26:	f001 f9df 	bl	800e0e8 <xTaskRemoveFromEventList>
 800cd2a:	4603      	mov	r3, r0
 800cd2c:	2b00      	cmp	r3, #0
 800cd2e:	d012      	beq.n	800cd56 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800cd30:	4b0c      	ldr	r3, [pc, #48]	; (800cd64 <xQueueGenericReset+0xd0>)
 800cd32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd36:	601a      	str	r2, [r3, #0]
 800cd38:	f3bf 8f4f 	dsb	sy
 800cd3c:	f3bf 8f6f 	isb	sy
 800cd40:	e009      	b.n	800cd56 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd42:	68fb      	ldr	r3, [r7, #12]
 800cd44:	3310      	adds	r3, #16
 800cd46:	4618      	mov	r0, r3
 800cd48:	f7ff feef 	bl	800cb2a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd4c:	68fb      	ldr	r3, [r7, #12]
 800cd4e:	3324      	adds	r3, #36	; 0x24
 800cd50:	4618      	mov	r0, r3
 800cd52:	f7ff feea 	bl	800cb2a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd56:	f001 ff0d 	bl	800eb74 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd5a:	2301      	movs	r3, #1
}
 800cd5c:	4618      	mov	r0, r3
 800cd5e:	3710      	adds	r7, #16
 800cd60:	46bd      	mov	sp, r7
 800cd62:	bd80      	pop	{r7, pc}
 800cd64:	e000ed04 	.word	0xe000ed04

0800cd68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b08e      	sub	sp, #56	; 0x38
 800cd6c:	af02      	add	r7, sp, #8
 800cd6e:	60f8      	str	r0, [r7, #12]
 800cd70:	60b9      	str	r1, [r7, #8]
 800cd72:	607a      	str	r2, [r7, #4]
 800cd74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd76:	68fb      	ldr	r3, [r7, #12]
 800cd78:	2b00      	cmp	r3, #0
 800cd7a:	d10c      	bne.n	800cd96 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800cd7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd80:	b672      	cpsid	i
 800cd82:	f383 8811 	msr	BASEPRI, r3
 800cd86:	f3bf 8f6f 	isb	sy
 800cd8a:	f3bf 8f4f 	dsb	sy
 800cd8e:	b662      	cpsie	i
 800cd90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd92:	bf00      	nop
 800cd94:	e7fe      	b.n	800cd94 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd96:	683b      	ldr	r3, [r7, #0]
 800cd98:	2b00      	cmp	r3, #0
 800cd9a:	d10c      	bne.n	800cdb6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800cd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cda0:	b672      	cpsid	i
 800cda2:	f383 8811 	msr	BASEPRI, r3
 800cda6:	f3bf 8f6f 	isb	sy
 800cdaa:	f3bf 8f4f 	dsb	sy
 800cdae:	b662      	cpsie	i
 800cdb0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cdb2:	bf00      	nop
 800cdb4:	e7fe      	b.n	800cdb4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <xQueueGenericCreateStatic+0x5a>
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d001      	beq.n	800cdc6 <xQueueGenericCreateStatic+0x5e>
 800cdc2:	2301      	movs	r3, #1
 800cdc4:	e000      	b.n	800cdc8 <xQueueGenericCreateStatic+0x60>
 800cdc6:	2300      	movs	r3, #0
 800cdc8:	2b00      	cmp	r3, #0
 800cdca:	d10c      	bne.n	800cde6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800cdcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd0:	b672      	cpsid	i
 800cdd2:	f383 8811 	msr	BASEPRI, r3
 800cdd6:	f3bf 8f6f 	isb	sy
 800cdda:	f3bf 8f4f 	dsb	sy
 800cdde:	b662      	cpsie	i
 800cde0:	623b      	str	r3, [r7, #32]
}
 800cde2:	bf00      	nop
 800cde4:	e7fe      	b.n	800cde4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cde6:	687b      	ldr	r3, [r7, #4]
 800cde8:	2b00      	cmp	r3, #0
 800cdea:	d102      	bne.n	800cdf2 <xQueueGenericCreateStatic+0x8a>
 800cdec:	68bb      	ldr	r3, [r7, #8]
 800cdee:	2b00      	cmp	r3, #0
 800cdf0:	d101      	bne.n	800cdf6 <xQueueGenericCreateStatic+0x8e>
 800cdf2:	2301      	movs	r3, #1
 800cdf4:	e000      	b.n	800cdf8 <xQueueGenericCreateStatic+0x90>
 800cdf6:	2300      	movs	r3, #0
 800cdf8:	2b00      	cmp	r3, #0
 800cdfa:	d10c      	bne.n	800ce16 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800cdfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce00:	b672      	cpsid	i
 800ce02:	f383 8811 	msr	BASEPRI, r3
 800ce06:	f3bf 8f6f 	isb	sy
 800ce0a:	f3bf 8f4f 	dsb	sy
 800ce0e:	b662      	cpsie	i
 800ce10:	61fb      	str	r3, [r7, #28]
}
 800ce12:	bf00      	nop
 800ce14:	e7fe      	b.n	800ce14 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ce16:	2348      	movs	r3, #72	; 0x48
 800ce18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ce1a:	697b      	ldr	r3, [r7, #20]
 800ce1c:	2b48      	cmp	r3, #72	; 0x48
 800ce1e:	d00c      	beq.n	800ce3a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ce20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce24:	b672      	cpsid	i
 800ce26:	f383 8811 	msr	BASEPRI, r3
 800ce2a:	f3bf 8f6f 	isb	sy
 800ce2e:	f3bf 8f4f 	dsb	sy
 800ce32:	b662      	cpsie	i
 800ce34:	61bb      	str	r3, [r7, #24]
}
 800ce36:	bf00      	nop
 800ce38:	e7fe      	b.n	800ce38 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ce3a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ce40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d00d      	beq.n	800ce62 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ce46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce48:	2201      	movs	r2, #1
 800ce4a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce4e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce54:	9300      	str	r3, [sp, #0]
 800ce56:	4613      	mov	r3, r2
 800ce58:	687a      	ldr	r2, [r7, #4]
 800ce5a:	68b9      	ldr	r1, [r7, #8]
 800ce5c:	68f8      	ldr	r0, [r7, #12]
 800ce5e:	f000 f847 	bl	800cef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce64:	4618      	mov	r0, r3
 800ce66:	3730      	adds	r7, #48	; 0x30
 800ce68:	46bd      	mov	sp, r7
 800ce6a:	bd80      	pop	{r7, pc}

0800ce6c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce6c:	b580      	push	{r7, lr}
 800ce6e:	b08a      	sub	sp, #40	; 0x28
 800ce70:	af02      	add	r7, sp, #8
 800ce72:	60f8      	str	r0, [r7, #12]
 800ce74:	60b9      	str	r1, [r7, #8]
 800ce76:	4613      	mov	r3, r2
 800ce78:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	2b00      	cmp	r3, #0
 800ce7e:	d10c      	bne.n	800ce9a <xQueueGenericCreate+0x2e>
	__asm volatile
 800ce80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce84:	b672      	cpsid	i
 800ce86:	f383 8811 	msr	BASEPRI, r3
 800ce8a:	f3bf 8f6f 	isb	sy
 800ce8e:	f3bf 8f4f 	dsb	sy
 800ce92:	b662      	cpsie	i
 800ce94:	613b      	str	r3, [r7, #16]
}
 800ce96:	bf00      	nop
 800ce98:	e7fe      	b.n	800ce98 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ce9a:	68bb      	ldr	r3, [r7, #8]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d102      	bne.n	800cea6 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800cea0:	2300      	movs	r3, #0
 800cea2:	61fb      	str	r3, [r7, #28]
 800cea4:	e004      	b.n	800ceb0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cea6:	68fb      	ldr	r3, [r7, #12]
 800cea8:	68ba      	ldr	r2, [r7, #8]
 800ceaa:	fb02 f303 	mul.w	r3, r2, r3
 800ceae:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ceb0:	69fb      	ldr	r3, [r7, #28]
 800ceb2:	3348      	adds	r3, #72	; 0x48
 800ceb4:	4618      	mov	r0, r3
 800ceb6:	f001 ff11 	bl	800ecdc <pvPortMalloc>
 800ceba:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800cebc:	69bb      	ldr	r3, [r7, #24]
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d011      	beq.n	800cee6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cec2:	69bb      	ldr	r3, [r7, #24]
 800cec4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cec6:	697b      	ldr	r3, [r7, #20]
 800cec8:	3348      	adds	r3, #72	; 0x48
 800ceca:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cecc:	69bb      	ldr	r3, [r7, #24]
 800cece:	2200      	movs	r2, #0
 800ced0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ced4:	79fa      	ldrb	r2, [r7, #7]
 800ced6:	69bb      	ldr	r3, [r7, #24]
 800ced8:	9300      	str	r3, [sp, #0]
 800ceda:	4613      	mov	r3, r2
 800cedc:	697a      	ldr	r2, [r7, #20]
 800cede:	68b9      	ldr	r1, [r7, #8]
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f000 f805 	bl	800cef0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cee6:	69bb      	ldr	r3, [r7, #24]
	}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3720      	adds	r7, #32
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}

0800cef0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cef0:	b580      	push	{r7, lr}
 800cef2:	b084      	sub	sp, #16
 800cef4:	af00      	add	r7, sp, #0
 800cef6:	60f8      	str	r0, [r7, #12]
 800cef8:	60b9      	str	r1, [r7, #8]
 800cefa:	607a      	str	r2, [r7, #4]
 800cefc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800cefe:	68bb      	ldr	r3, [r7, #8]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d103      	bne.n	800cf0c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cf04:	69bb      	ldr	r3, [r7, #24]
 800cf06:	69ba      	ldr	r2, [r7, #24]
 800cf08:	601a      	str	r2, [r3, #0]
 800cf0a:	e002      	b.n	800cf12 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cf0c:	69bb      	ldr	r3, [r7, #24]
 800cf0e:	687a      	ldr	r2, [r7, #4]
 800cf10:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cf12:	69bb      	ldr	r3, [r7, #24]
 800cf14:	68fa      	ldr	r2, [r7, #12]
 800cf16:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cf18:	69bb      	ldr	r3, [r7, #24]
 800cf1a:	68ba      	ldr	r2, [r7, #8]
 800cf1c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cf1e:	2101      	movs	r1, #1
 800cf20:	69b8      	ldr	r0, [r7, #24]
 800cf22:	f7ff feb7 	bl	800cc94 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cf26:	bf00      	nop
 800cf28:	3710      	adds	r7, #16
 800cf2a:	46bd      	mov	sp, r7
 800cf2c:	bd80      	pop	{r7, pc}

0800cf2e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cf2e:	b580      	push	{r7, lr}
 800cf30:	b082      	sub	sp, #8
 800cf32:	af00      	add	r7, sp, #0
 800cf34:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d00e      	beq.n	800cf5a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cf3c:	687b      	ldr	r3, [r7, #4]
 800cf3e:	2200      	movs	r2, #0
 800cf40:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	2200      	movs	r2, #0
 800cf46:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cf48:	687b      	ldr	r3, [r7, #4]
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cf4e:	2300      	movs	r3, #0
 800cf50:	2200      	movs	r2, #0
 800cf52:	2100      	movs	r1, #0
 800cf54:	6878      	ldr	r0, [r7, #4]
 800cf56:	f000 f837 	bl	800cfc8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf5a:	bf00      	nop
 800cf5c:	3708      	adds	r7, #8
 800cf5e:	46bd      	mov	sp, r7
 800cf60:	bd80      	pop	{r7, pc}

0800cf62 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf62:	b580      	push	{r7, lr}
 800cf64:	b086      	sub	sp, #24
 800cf66:	af00      	add	r7, sp, #0
 800cf68:	4603      	mov	r3, r0
 800cf6a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf6c:	2301      	movs	r3, #1
 800cf6e:	617b      	str	r3, [r7, #20]
 800cf70:	2300      	movs	r3, #0
 800cf72:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf74:	79fb      	ldrb	r3, [r7, #7]
 800cf76:	461a      	mov	r2, r3
 800cf78:	6939      	ldr	r1, [r7, #16]
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	f7ff ff76 	bl	800ce6c <xQueueGenericCreate>
 800cf80:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf82:	68f8      	ldr	r0, [r7, #12]
 800cf84:	f7ff ffd3 	bl	800cf2e <prvInitialiseMutex>

		return xNewQueue;
 800cf88:	68fb      	ldr	r3, [r7, #12]
	}
 800cf8a:	4618      	mov	r0, r3
 800cf8c:	3718      	adds	r7, #24
 800cf8e:	46bd      	mov	sp, r7
 800cf90:	bd80      	pop	{r7, pc}

0800cf92 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf92:	b580      	push	{r7, lr}
 800cf94:	b088      	sub	sp, #32
 800cf96:	af02      	add	r7, sp, #8
 800cf98:	4603      	mov	r3, r0
 800cf9a:	6039      	str	r1, [r7, #0]
 800cf9c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf9e:	2301      	movs	r3, #1
 800cfa0:	617b      	str	r3, [r7, #20]
 800cfa2:	2300      	movs	r3, #0
 800cfa4:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cfa6:	79fb      	ldrb	r3, [r7, #7]
 800cfa8:	9300      	str	r3, [sp, #0]
 800cfaa:	683b      	ldr	r3, [r7, #0]
 800cfac:	2200      	movs	r2, #0
 800cfae:	6939      	ldr	r1, [r7, #16]
 800cfb0:	6978      	ldr	r0, [r7, #20]
 800cfb2:	f7ff fed9 	bl	800cd68 <xQueueGenericCreateStatic>
 800cfb6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cfb8:	68f8      	ldr	r0, [r7, #12]
 800cfba:	f7ff ffb8 	bl	800cf2e <prvInitialiseMutex>

		return xNewQueue;
 800cfbe:	68fb      	ldr	r3, [r7, #12]
	}
 800cfc0:	4618      	mov	r0, r3
 800cfc2:	3718      	adds	r7, #24
 800cfc4:	46bd      	mov	sp, r7
 800cfc6:	bd80      	pop	{r7, pc}

0800cfc8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cfc8:	b580      	push	{r7, lr}
 800cfca:	b08e      	sub	sp, #56	; 0x38
 800cfcc:	af00      	add	r7, sp, #0
 800cfce:	60f8      	str	r0, [r7, #12]
 800cfd0:	60b9      	str	r1, [r7, #8]
 800cfd2:	607a      	str	r2, [r7, #4]
 800cfd4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cfd6:	2300      	movs	r3, #0
 800cfd8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cfda:	68fb      	ldr	r3, [r7, #12]
 800cfdc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	d10c      	bne.n	800cffe <xQueueGenericSend+0x36>
	__asm volatile
 800cfe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfe8:	b672      	cpsid	i
 800cfea:	f383 8811 	msr	BASEPRI, r3
 800cfee:	f3bf 8f6f 	isb	sy
 800cff2:	f3bf 8f4f 	dsb	sy
 800cff6:	b662      	cpsie	i
 800cff8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cffa:	bf00      	nop
 800cffc:	e7fe      	b.n	800cffc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	2b00      	cmp	r3, #0
 800d002:	d103      	bne.n	800d00c <xQueueGenericSend+0x44>
 800d004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d101      	bne.n	800d010 <xQueueGenericSend+0x48>
 800d00c:	2301      	movs	r3, #1
 800d00e:	e000      	b.n	800d012 <xQueueGenericSend+0x4a>
 800d010:	2300      	movs	r3, #0
 800d012:	2b00      	cmp	r3, #0
 800d014:	d10c      	bne.n	800d030 <xQueueGenericSend+0x68>
	__asm volatile
 800d016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d01a:	b672      	cpsid	i
 800d01c:	f383 8811 	msr	BASEPRI, r3
 800d020:	f3bf 8f6f 	isb	sy
 800d024:	f3bf 8f4f 	dsb	sy
 800d028:	b662      	cpsie	i
 800d02a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d02c:	bf00      	nop
 800d02e:	e7fe      	b.n	800d02e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d030:	683b      	ldr	r3, [r7, #0]
 800d032:	2b02      	cmp	r3, #2
 800d034:	d103      	bne.n	800d03e <xQueueGenericSend+0x76>
 800d036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d03a:	2b01      	cmp	r3, #1
 800d03c:	d101      	bne.n	800d042 <xQueueGenericSend+0x7a>
 800d03e:	2301      	movs	r3, #1
 800d040:	e000      	b.n	800d044 <xQueueGenericSend+0x7c>
 800d042:	2300      	movs	r3, #0
 800d044:	2b00      	cmp	r3, #0
 800d046:	d10c      	bne.n	800d062 <xQueueGenericSend+0x9a>
	__asm volatile
 800d048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d04c:	b672      	cpsid	i
 800d04e:	f383 8811 	msr	BASEPRI, r3
 800d052:	f3bf 8f6f 	isb	sy
 800d056:	f3bf 8f4f 	dsb	sy
 800d05a:	b662      	cpsie	i
 800d05c:	623b      	str	r3, [r7, #32]
}
 800d05e:	bf00      	nop
 800d060:	e7fe      	b.n	800d060 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d062:	f001 fa07 	bl	800e474 <xTaskGetSchedulerState>
 800d066:	4603      	mov	r3, r0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d102      	bne.n	800d072 <xQueueGenericSend+0xaa>
 800d06c:	687b      	ldr	r3, [r7, #4]
 800d06e:	2b00      	cmp	r3, #0
 800d070:	d101      	bne.n	800d076 <xQueueGenericSend+0xae>
 800d072:	2301      	movs	r3, #1
 800d074:	e000      	b.n	800d078 <xQueueGenericSend+0xb0>
 800d076:	2300      	movs	r3, #0
 800d078:	2b00      	cmp	r3, #0
 800d07a:	d10c      	bne.n	800d096 <xQueueGenericSend+0xce>
	__asm volatile
 800d07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d080:	b672      	cpsid	i
 800d082:	f383 8811 	msr	BASEPRI, r3
 800d086:	f3bf 8f6f 	isb	sy
 800d08a:	f3bf 8f4f 	dsb	sy
 800d08e:	b662      	cpsie	i
 800d090:	61fb      	str	r3, [r7, #28]
}
 800d092:	bf00      	nop
 800d094:	e7fe      	b.n	800d094 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d096:	f001 fd39 	bl	800eb0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d09c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d0a2:	429a      	cmp	r2, r3
 800d0a4:	d302      	bcc.n	800d0ac <xQueueGenericSend+0xe4>
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	2b02      	cmp	r3, #2
 800d0aa:	d129      	bne.n	800d100 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0ac:	683a      	ldr	r2, [r7, #0]
 800d0ae:	68b9      	ldr	r1, [r7, #8]
 800d0b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d0b2:	f000 f9bb 	bl	800d42c <prvCopyDataToQueue>
 800d0b6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d0bc:	2b00      	cmp	r3, #0
 800d0be:	d010      	beq.n	800d0e2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d0c2:	3324      	adds	r3, #36	; 0x24
 800d0c4:	4618      	mov	r0, r3
 800d0c6:	f001 f80f 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d0ca:	4603      	mov	r3, r0
 800d0cc:	2b00      	cmp	r3, #0
 800d0ce:	d013      	beq.n	800d0f8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d0d0:	4b3f      	ldr	r3, [pc, #252]	; (800d1d0 <xQueueGenericSend+0x208>)
 800d0d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0d6:	601a      	str	r2, [r3, #0]
 800d0d8:	f3bf 8f4f 	dsb	sy
 800d0dc:	f3bf 8f6f 	isb	sy
 800d0e0:	e00a      	b.n	800d0f8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d0e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0e4:	2b00      	cmp	r3, #0
 800d0e6:	d007      	beq.n	800d0f8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d0e8:	4b39      	ldr	r3, [pc, #228]	; (800d1d0 <xQueueGenericSend+0x208>)
 800d0ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ee:	601a      	str	r2, [r3, #0]
 800d0f0:	f3bf 8f4f 	dsb	sy
 800d0f4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d0f8:	f001 fd3c 	bl	800eb74 <vPortExitCritical>
				return pdPASS;
 800d0fc:	2301      	movs	r3, #1
 800d0fe:	e063      	b.n	800d1c8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d100:	687b      	ldr	r3, [r7, #4]
 800d102:	2b00      	cmp	r3, #0
 800d104:	d103      	bne.n	800d10e <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d106:	f001 fd35 	bl	800eb74 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d10a:	2300      	movs	r3, #0
 800d10c:	e05c      	b.n	800d1c8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d10e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d110:	2b00      	cmp	r3, #0
 800d112:	d106      	bne.n	800d122 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d114:	f107 0314 	add.w	r3, r7, #20
 800d118:	4618      	mov	r0, r3
 800d11a:	f001 f849 	bl	800e1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d11e:	2301      	movs	r3, #1
 800d120:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d122:	f001 fd27 	bl	800eb74 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d126:	f000 fdc1 	bl	800dcac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d12a:	f001 fcef 	bl	800eb0c <vPortEnterCritical>
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d134:	b25b      	sxtb	r3, r3
 800d136:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d13a:	d103      	bne.n	800d144 <xQueueGenericSend+0x17c>
 800d13c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d13e:	2200      	movs	r2, #0
 800d140:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d146:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d14a:	b25b      	sxtb	r3, r3
 800d14c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d150:	d103      	bne.n	800d15a <xQueueGenericSend+0x192>
 800d152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d154:	2200      	movs	r2, #0
 800d156:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d15a:	f001 fd0b 	bl	800eb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d15e:	1d3a      	adds	r2, r7, #4
 800d160:	f107 0314 	add.w	r3, r7, #20
 800d164:	4611      	mov	r1, r2
 800d166:	4618      	mov	r0, r3
 800d168:	f001 f838 	bl	800e1dc <xTaskCheckForTimeOut>
 800d16c:	4603      	mov	r3, r0
 800d16e:	2b00      	cmp	r3, #0
 800d170:	d124      	bne.n	800d1bc <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d172:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d174:	f000 fa2c 	bl	800d5d0 <prvIsQueueFull>
 800d178:	4603      	mov	r3, r0
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d018      	beq.n	800d1b0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	3310      	adds	r3, #16
 800d182:	687a      	ldr	r2, [r7, #4]
 800d184:	4611      	mov	r1, r2
 800d186:	4618      	mov	r0, r3
 800d188:	f000 ff88 	bl	800e09c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d18c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d18e:	f000 f9b7 	bl	800d500 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d192:	f000 fd99 	bl	800dcc8 <xTaskResumeAll>
 800d196:	4603      	mov	r3, r0
 800d198:	2b00      	cmp	r3, #0
 800d19a:	f47f af7c 	bne.w	800d096 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800d19e:	4b0c      	ldr	r3, [pc, #48]	; (800d1d0 <xQueueGenericSend+0x208>)
 800d1a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d1a4:	601a      	str	r2, [r3, #0]
 800d1a6:	f3bf 8f4f 	dsb	sy
 800d1aa:	f3bf 8f6f 	isb	sy
 800d1ae:	e772      	b.n	800d096 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d1b0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1b2:	f000 f9a5 	bl	800d500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d1b6:	f000 fd87 	bl	800dcc8 <xTaskResumeAll>
 800d1ba:	e76c      	b.n	800d096 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d1bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1be:	f000 f99f 	bl	800d500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d1c2:	f000 fd81 	bl	800dcc8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d1c6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d1c8:	4618      	mov	r0, r3
 800d1ca:	3738      	adds	r7, #56	; 0x38
 800d1cc:	46bd      	mov	sp, r7
 800d1ce:	bd80      	pop	{r7, pc}
 800d1d0:	e000ed04 	.word	0xe000ed04

0800d1d4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d1d4:	b580      	push	{r7, lr}
 800d1d6:	b08e      	sub	sp, #56	; 0x38
 800d1d8:	af00      	add	r7, sp, #0
 800d1da:	6078      	str	r0, [r7, #4]
 800d1dc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d1e2:	687b      	ldr	r3, [r7, #4]
 800d1e4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d1ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d10c      	bne.n	800d20a <xQueueSemaphoreTake+0x36>
	__asm volatile
 800d1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f4:	b672      	cpsid	i
 800d1f6:	f383 8811 	msr	BASEPRI, r3
 800d1fa:	f3bf 8f6f 	isb	sy
 800d1fe:	f3bf 8f4f 	dsb	sy
 800d202:	b662      	cpsie	i
 800d204:	623b      	str	r3, [r7, #32]
}
 800d206:	bf00      	nop
 800d208:	e7fe      	b.n	800d208 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d20e:	2b00      	cmp	r3, #0
 800d210:	d00c      	beq.n	800d22c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800d212:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d216:	b672      	cpsid	i
 800d218:	f383 8811 	msr	BASEPRI, r3
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	f3bf 8f4f 	dsb	sy
 800d224:	b662      	cpsie	i
 800d226:	61fb      	str	r3, [r7, #28]
}
 800d228:	bf00      	nop
 800d22a:	e7fe      	b.n	800d22a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d22c:	f001 f922 	bl	800e474 <xTaskGetSchedulerState>
 800d230:	4603      	mov	r3, r0
 800d232:	2b00      	cmp	r3, #0
 800d234:	d102      	bne.n	800d23c <xQueueSemaphoreTake+0x68>
 800d236:	683b      	ldr	r3, [r7, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d101      	bne.n	800d240 <xQueueSemaphoreTake+0x6c>
 800d23c:	2301      	movs	r3, #1
 800d23e:	e000      	b.n	800d242 <xQueueSemaphoreTake+0x6e>
 800d240:	2300      	movs	r3, #0
 800d242:	2b00      	cmp	r3, #0
 800d244:	d10c      	bne.n	800d260 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800d246:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24a:	b672      	cpsid	i
 800d24c:	f383 8811 	msr	BASEPRI, r3
 800d250:	f3bf 8f6f 	isb	sy
 800d254:	f3bf 8f4f 	dsb	sy
 800d258:	b662      	cpsie	i
 800d25a:	61bb      	str	r3, [r7, #24]
}
 800d25c:	bf00      	nop
 800d25e:	e7fe      	b.n	800d25e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d260:	f001 fc54 	bl	800eb0c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d266:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d268:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d26a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d024      	beq.n	800d2ba <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d272:	1e5a      	subs	r2, r3, #1
 800d274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d276:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	2b00      	cmp	r3, #0
 800d27e:	d104      	bne.n	800d28a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d280:	f001 fabe 	bl	800e800 <pvTaskIncrementMutexHeldCount>
 800d284:	4602      	mov	r2, r0
 800d286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d288:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d28a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d28c:	691b      	ldr	r3, [r3, #16]
 800d28e:	2b00      	cmp	r3, #0
 800d290:	d00f      	beq.n	800d2b2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d292:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d294:	3310      	adds	r3, #16
 800d296:	4618      	mov	r0, r3
 800d298:	f000 ff26 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d29c:	4603      	mov	r3, r0
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d007      	beq.n	800d2b2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d2a2:	4b55      	ldr	r3, [pc, #340]	; (800d3f8 <xQueueSemaphoreTake+0x224>)
 800d2a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2a8:	601a      	str	r2, [r3, #0]
 800d2aa:	f3bf 8f4f 	dsb	sy
 800d2ae:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d2b2:	f001 fc5f 	bl	800eb74 <vPortExitCritical>
				return pdPASS;
 800d2b6:	2301      	movs	r3, #1
 800d2b8:	e099      	b.n	800d3ee <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d2ba:	683b      	ldr	r3, [r7, #0]
 800d2bc:	2b00      	cmp	r3, #0
 800d2be:	d113      	bne.n	800d2e8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d2c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c2:	2b00      	cmp	r3, #0
 800d2c4:	d00c      	beq.n	800d2e0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800d2c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ca:	b672      	cpsid	i
 800d2cc:	f383 8811 	msr	BASEPRI, r3
 800d2d0:	f3bf 8f6f 	isb	sy
 800d2d4:	f3bf 8f4f 	dsb	sy
 800d2d8:	b662      	cpsie	i
 800d2da:	617b      	str	r3, [r7, #20]
}
 800d2dc:	bf00      	nop
 800d2de:	e7fe      	b.n	800d2de <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d2e0:	f001 fc48 	bl	800eb74 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d2e4:	2300      	movs	r3, #0
 800d2e6:	e082      	b.n	800d3ee <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d2e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d2ea:	2b00      	cmp	r3, #0
 800d2ec:	d106      	bne.n	800d2fc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d2ee:	f107 030c 	add.w	r3, r7, #12
 800d2f2:	4618      	mov	r0, r3
 800d2f4:	f000 ff5c 	bl	800e1b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d2f8:	2301      	movs	r3, #1
 800d2fa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d2fc:	f001 fc3a 	bl	800eb74 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d300:	f000 fcd4 	bl	800dcac <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d304:	f001 fc02 	bl	800eb0c <vPortEnterCritical>
 800d308:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d30a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d30e:	b25b      	sxtb	r3, r3
 800d310:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d314:	d103      	bne.n	800d31e <xQueueSemaphoreTake+0x14a>
 800d316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d318:	2200      	movs	r2, #0
 800d31a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d31e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d320:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d324:	b25b      	sxtb	r3, r3
 800d326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d32a:	d103      	bne.n	800d334 <xQueueSemaphoreTake+0x160>
 800d32c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d32e:	2200      	movs	r2, #0
 800d330:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d334:	f001 fc1e 	bl	800eb74 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d338:	463a      	mov	r2, r7
 800d33a:	f107 030c 	add.w	r3, r7, #12
 800d33e:	4611      	mov	r1, r2
 800d340:	4618      	mov	r0, r3
 800d342:	f000 ff4b 	bl	800e1dc <xTaskCheckForTimeOut>
 800d346:	4603      	mov	r3, r0
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d132      	bne.n	800d3b2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d34c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d34e:	f000 f929 	bl	800d5a4 <prvIsQueueEmpty>
 800d352:	4603      	mov	r3, r0
 800d354:	2b00      	cmp	r3, #0
 800d356:	d026      	beq.n	800d3a6 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d35a:	681b      	ldr	r3, [r3, #0]
 800d35c:	2b00      	cmp	r3, #0
 800d35e:	d109      	bne.n	800d374 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800d360:	f001 fbd4 	bl	800eb0c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d364:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d366:	689b      	ldr	r3, [r3, #8]
 800d368:	4618      	mov	r0, r3
 800d36a:	f001 f8a1 	bl	800e4b0 <xTaskPriorityInherit>
 800d36e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d370:	f001 fc00 	bl	800eb74 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d376:	3324      	adds	r3, #36	; 0x24
 800d378:	683a      	ldr	r2, [r7, #0]
 800d37a:	4611      	mov	r1, r2
 800d37c:	4618      	mov	r0, r3
 800d37e:	f000 fe8d 	bl	800e09c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d382:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d384:	f000 f8bc 	bl	800d500 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d388:	f000 fc9e 	bl	800dcc8 <xTaskResumeAll>
 800d38c:	4603      	mov	r3, r0
 800d38e:	2b00      	cmp	r3, #0
 800d390:	f47f af66 	bne.w	800d260 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800d394:	4b18      	ldr	r3, [pc, #96]	; (800d3f8 <xQueueSemaphoreTake+0x224>)
 800d396:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d39a:	601a      	str	r2, [r3, #0]
 800d39c:	f3bf 8f4f 	dsb	sy
 800d3a0:	f3bf 8f6f 	isb	sy
 800d3a4:	e75c      	b.n	800d260 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d3a6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3a8:	f000 f8aa 	bl	800d500 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d3ac:	f000 fc8c 	bl	800dcc8 <xTaskResumeAll>
 800d3b0:	e756      	b.n	800d260 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d3b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3b4:	f000 f8a4 	bl	800d500 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d3b8:	f000 fc86 	bl	800dcc8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3bc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3be:	f000 f8f1 	bl	800d5a4 <prvIsQueueEmpty>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	f43f af4b 	beq.w	800d260 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d3ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3cc:	2b00      	cmp	r3, #0
 800d3ce:	d00d      	beq.n	800d3ec <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800d3d0:	f001 fb9c 	bl	800eb0c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d3d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d3d6:	f000 f811 	bl	800d3fc <prvGetDisinheritPriorityAfterTimeout>
 800d3da:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d3de:	689b      	ldr	r3, [r3, #8]
 800d3e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	f001 f96e 	bl	800e6c4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d3e8:	f001 fbc4 	bl	800eb74 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d3ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d3ee:	4618      	mov	r0, r3
 800d3f0:	3738      	adds	r7, #56	; 0x38
 800d3f2:	46bd      	mov	sp, r7
 800d3f4:	bd80      	pop	{r7, pc}
 800d3f6:	bf00      	nop
 800d3f8:	e000ed04 	.word	0xe000ed04

0800d3fc <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d404:	687b      	ldr	r3, [r7, #4]
 800d406:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d006      	beq.n	800d41a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	f1c3 0307 	rsb	r3, r3, #7
 800d416:	60fb      	str	r3, [r7, #12]
 800d418:	e001      	b.n	800d41e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d41a:	2300      	movs	r3, #0
 800d41c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d41e:	68fb      	ldr	r3, [r7, #12]
	}
 800d420:	4618      	mov	r0, r3
 800d422:	3714      	adds	r7, #20
 800d424:	46bd      	mov	sp, r7
 800d426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d42a:	4770      	bx	lr

0800d42c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d42c:	b580      	push	{r7, lr}
 800d42e:	b086      	sub	sp, #24
 800d430:	af00      	add	r7, sp, #0
 800d432:	60f8      	str	r0, [r7, #12]
 800d434:	60b9      	str	r1, [r7, #8]
 800d436:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d438:	2300      	movs	r3, #0
 800d43a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d43c:	68fb      	ldr	r3, [r7, #12]
 800d43e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d440:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d442:	68fb      	ldr	r3, [r7, #12]
 800d444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d446:	2b00      	cmp	r3, #0
 800d448:	d10d      	bne.n	800d466 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d44a:	68fb      	ldr	r3, [r7, #12]
 800d44c:	681b      	ldr	r3, [r3, #0]
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d14d      	bne.n	800d4ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d452:	68fb      	ldr	r3, [r7, #12]
 800d454:	689b      	ldr	r3, [r3, #8]
 800d456:	4618      	mov	r0, r3
 800d458:	f001 f8aa 	bl	800e5b0 <xTaskPriorityDisinherit>
 800d45c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d45e:	68fb      	ldr	r3, [r7, #12]
 800d460:	2200      	movs	r2, #0
 800d462:	609a      	str	r2, [r3, #8]
 800d464:	e043      	b.n	800d4ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d119      	bne.n	800d4a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	6858      	ldr	r0, [r3, #4]
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d474:	461a      	mov	r2, r3
 800d476:	68b9      	ldr	r1, [r7, #8]
 800d478:	f001 fe44 	bl	800f104 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	685a      	ldr	r2, [r3, #4]
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d484:	441a      	add	r2, r3
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d48a:	68fb      	ldr	r3, [r7, #12]
 800d48c:	685a      	ldr	r2, [r3, #4]
 800d48e:	68fb      	ldr	r3, [r7, #12]
 800d490:	689b      	ldr	r3, [r3, #8]
 800d492:	429a      	cmp	r2, r3
 800d494:	d32b      	bcc.n	800d4ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	605a      	str	r2, [r3, #4]
 800d49e:	e026      	b.n	800d4ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d4a0:	68fb      	ldr	r3, [r7, #12]
 800d4a2:	68d8      	ldr	r0, [r3, #12]
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4a8:	461a      	mov	r2, r3
 800d4aa:	68b9      	ldr	r1, [r7, #8]
 800d4ac:	f001 fe2a 	bl	800f104 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	68da      	ldr	r2, [r3, #12]
 800d4b4:	68fb      	ldr	r3, [r7, #12]
 800d4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4b8:	425b      	negs	r3, r3
 800d4ba:	441a      	add	r2, r3
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	68da      	ldr	r2, [r3, #12]
 800d4c4:	68fb      	ldr	r3, [r7, #12]
 800d4c6:	681b      	ldr	r3, [r3, #0]
 800d4c8:	429a      	cmp	r2, r3
 800d4ca:	d207      	bcs.n	800d4dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	689a      	ldr	r2, [r3, #8]
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4d4:	425b      	negs	r3, r3
 800d4d6:	441a      	add	r2, r3
 800d4d8:	68fb      	ldr	r3, [r7, #12]
 800d4da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d4dc:	687b      	ldr	r3, [r7, #4]
 800d4de:	2b02      	cmp	r3, #2
 800d4e0:	d105      	bne.n	800d4ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	2b00      	cmp	r3, #0
 800d4e6:	d002      	beq.n	800d4ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	3b01      	subs	r3, #1
 800d4ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	1c5a      	adds	r2, r3, #1
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d4f6:	697b      	ldr	r3, [r7, #20]
}
 800d4f8:	4618      	mov	r0, r3
 800d4fa:	3718      	adds	r7, #24
 800d4fc:	46bd      	mov	sp, r7
 800d4fe:	bd80      	pop	{r7, pc}

0800d500 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d500:	b580      	push	{r7, lr}
 800d502:	b084      	sub	sp, #16
 800d504:	af00      	add	r7, sp, #0
 800d506:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d508:	f001 fb00 	bl	800eb0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d50c:	687b      	ldr	r3, [r7, #4]
 800d50e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d512:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d514:	e011      	b.n	800d53a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d516:	687b      	ldr	r3, [r7, #4]
 800d518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d51a:	2b00      	cmp	r3, #0
 800d51c:	d012      	beq.n	800d544 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d51e:	687b      	ldr	r3, [r7, #4]
 800d520:	3324      	adds	r3, #36	; 0x24
 800d522:	4618      	mov	r0, r3
 800d524:	f000 fde0 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d528:	4603      	mov	r3, r0
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d001      	beq.n	800d532 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d52e:	f000 febb 	bl	800e2a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d532:	7bfb      	ldrb	r3, [r7, #15]
 800d534:	3b01      	subs	r3, #1
 800d536:	b2db      	uxtb	r3, r3
 800d538:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d53a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d53e:	2b00      	cmp	r3, #0
 800d540:	dce9      	bgt.n	800d516 <prvUnlockQueue+0x16>
 800d542:	e000      	b.n	800d546 <prvUnlockQueue+0x46>
					break;
 800d544:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	22ff      	movs	r2, #255	; 0xff
 800d54a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d54e:	f001 fb11 	bl	800eb74 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d552:	f001 fadb 	bl	800eb0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d55c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d55e:	e011      	b.n	800d584 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d560:	687b      	ldr	r3, [r7, #4]
 800d562:	691b      	ldr	r3, [r3, #16]
 800d564:	2b00      	cmp	r3, #0
 800d566:	d012      	beq.n	800d58e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	3310      	adds	r3, #16
 800d56c:	4618      	mov	r0, r3
 800d56e:	f000 fdbb 	bl	800e0e8 <xTaskRemoveFromEventList>
 800d572:	4603      	mov	r3, r0
 800d574:	2b00      	cmp	r3, #0
 800d576:	d001      	beq.n	800d57c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d578:	f000 fe96 	bl	800e2a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d57c:	7bbb      	ldrb	r3, [r7, #14]
 800d57e:	3b01      	subs	r3, #1
 800d580:	b2db      	uxtb	r3, r3
 800d582:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d584:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	dce9      	bgt.n	800d560 <prvUnlockQueue+0x60>
 800d58c:	e000      	b.n	800d590 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d58e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	22ff      	movs	r2, #255	; 0xff
 800d594:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d598:	f001 faec 	bl	800eb74 <vPortExitCritical>
}
 800d59c:	bf00      	nop
 800d59e:	3710      	adds	r7, #16
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}

0800d5a4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d5a4:	b580      	push	{r7, lr}
 800d5a6:	b084      	sub	sp, #16
 800d5a8:	af00      	add	r7, sp, #0
 800d5aa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5ac:	f001 faae 	bl	800eb0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5b4:	2b00      	cmp	r3, #0
 800d5b6:	d102      	bne.n	800d5be <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	60fb      	str	r3, [r7, #12]
 800d5bc:	e001      	b.n	800d5c2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d5be:	2300      	movs	r3, #0
 800d5c0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5c2:	f001 fad7 	bl	800eb74 <vPortExitCritical>

	return xReturn;
 800d5c6:	68fb      	ldr	r3, [r7, #12]
}
 800d5c8:	4618      	mov	r0, r3
 800d5ca:	3710      	adds	r7, #16
 800d5cc:	46bd      	mov	sp, r7
 800d5ce:	bd80      	pop	{r7, pc}

0800d5d0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b084      	sub	sp, #16
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d5d8:	f001 fa98 	bl	800eb0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d5e4:	429a      	cmp	r2, r3
 800d5e6:	d102      	bne.n	800d5ee <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d5e8:	2301      	movs	r3, #1
 800d5ea:	60fb      	str	r3, [r7, #12]
 800d5ec:	e001      	b.n	800d5f2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d5ee:	2300      	movs	r3, #0
 800d5f0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d5f2:	f001 fabf 	bl	800eb74 <vPortExitCritical>

	return xReturn;
 800d5f6:	68fb      	ldr	r3, [r7, #12]
}
 800d5f8:	4618      	mov	r0, r3
 800d5fa:	3710      	adds	r7, #16
 800d5fc:	46bd      	mov	sp, r7
 800d5fe:	bd80      	pop	{r7, pc}

0800d600 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d600:	b580      	push	{r7, lr}
 800d602:	b08e      	sub	sp, #56	; 0x38
 800d604:	af04      	add	r7, sp, #16
 800d606:	60f8      	str	r0, [r7, #12]
 800d608:	60b9      	str	r1, [r7, #8]
 800d60a:	607a      	str	r2, [r7, #4]
 800d60c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d60e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d610:	2b00      	cmp	r3, #0
 800d612:	d10c      	bne.n	800d62e <xTaskCreateStatic+0x2e>
	__asm volatile
 800d614:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d618:	b672      	cpsid	i
 800d61a:	f383 8811 	msr	BASEPRI, r3
 800d61e:	f3bf 8f6f 	isb	sy
 800d622:	f3bf 8f4f 	dsb	sy
 800d626:	b662      	cpsie	i
 800d628:	623b      	str	r3, [r7, #32]
}
 800d62a:	bf00      	nop
 800d62c:	e7fe      	b.n	800d62c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d62e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d630:	2b00      	cmp	r3, #0
 800d632:	d10c      	bne.n	800d64e <xTaskCreateStatic+0x4e>
	__asm volatile
 800d634:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d638:	b672      	cpsid	i
 800d63a:	f383 8811 	msr	BASEPRI, r3
 800d63e:	f3bf 8f6f 	isb	sy
 800d642:	f3bf 8f4f 	dsb	sy
 800d646:	b662      	cpsie	i
 800d648:	61fb      	str	r3, [r7, #28]
}
 800d64a:	bf00      	nop
 800d64c:	e7fe      	b.n	800d64c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d64e:	2358      	movs	r3, #88	; 0x58
 800d650:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d652:	693b      	ldr	r3, [r7, #16]
 800d654:	2b58      	cmp	r3, #88	; 0x58
 800d656:	d00c      	beq.n	800d672 <xTaskCreateStatic+0x72>
	__asm volatile
 800d658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65c:	b672      	cpsid	i
 800d65e:	f383 8811 	msr	BASEPRI, r3
 800d662:	f3bf 8f6f 	isb	sy
 800d666:	f3bf 8f4f 	dsb	sy
 800d66a:	b662      	cpsie	i
 800d66c:	61bb      	str	r3, [r7, #24]
}
 800d66e:	bf00      	nop
 800d670:	e7fe      	b.n	800d670 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d672:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d674:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d676:	2b00      	cmp	r3, #0
 800d678:	d01e      	beq.n	800d6b8 <xTaskCreateStatic+0xb8>
 800d67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d01b      	beq.n	800d6b8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d682:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d686:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d688:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d68c:	2202      	movs	r2, #2
 800d68e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d692:	2300      	movs	r3, #0
 800d694:	9303      	str	r3, [sp, #12]
 800d696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d698:	9302      	str	r3, [sp, #8]
 800d69a:	f107 0314 	add.w	r3, r7, #20
 800d69e:	9301      	str	r3, [sp, #4]
 800d6a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6a2:	9300      	str	r3, [sp, #0]
 800d6a4:	683b      	ldr	r3, [r7, #0]
 800d6a6:	687a      	ldr	r2, [r7, #4]
 800d6a8:	68b9      	ldr	r1, [r7, #8]
 800d6aa:	68f8      	ldr	r0, [r7, #12]
 800d6ac:	f000 f850 	bl	800d750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d6b0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d6b2:	f000 f8e1 	bl	800d878 <prvAddNewTaskToReadyList>
 800d6b6:	e001      	b.n	800d6bc <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d6b8:	2300      	movs	r3, #0
 800d6ba:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d6bc:	697b      	ldr	r3, [r7, #20]
	}
 800d6be:	4618      	mov	r0, r3
 800d6c0:	3728      	adds	r7, #40	; 0x28
 800d6c2:	46bd      	mov	sp, r7
 800d6c4:	bd80      	pop	{r7, pc}

0800d6c6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d6c6:	b580      	push	{r7, lr}
 800d6c8:	b08c      	sub	sp, #48	; 0x30
 800d6ca:	af04      	add	r7, sp, #16
 800d6cc:	60f8      	str	r0, [r7, #12]
 800d6ce:	60b9      	str	r1, [r7, #8]
 800d6d0:	603b      	str	r3, [r7, #0]
 800d6d2:	4613      	mov	r3, r2
 800d6d4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d6d6:	88fb      	ldrh	r3, [r7, #6]
 800d6d8:	009b      	lsls	r3, r3, #2
 800d6da:	4618      	mov	r0, r3
 800d6dc:	f001 fafe 	bl	800ecdc <pvPortMalloc>
 800d6e0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d6e2:	697b      	ldr	r3, [r7, #20]
 800d6e4:	2b00      	cmp	r3, #0
 800d6e6:	d00e      	beq.n	800d706 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d6e8:	2058      	movs	r0, #88	; 0x58
 800d6ea:	f001 faf7 	bl	800ecdc <pvPortMalloc>
 800d6ee:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d6f0:	69fb      	ldr	r3, [r7, #28]
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d003      	beq.n	800d6fe <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d6f6:	69fb      	ldr	r3, [r7, #28]
 800d6f8:	697a      	ldr	r2, [r7, #20]
 800d6fa:	631a      	str	r2, [r3, #48]	; 0x30
 800d6fc:	e005      	b.n	800d70a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d6fe:	6978      	ldr	r0, [r7, #20]
 800d700:	f001 fbbc 	bl	800ee7c <vPortFree>
 800d704:	e001      	b.n	800d70a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d706:	2300      	movs	r3, #0
 800d708:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d70a:	69fb      	ldr	r3, [r7, #28]
 800d70c:	2b00      	cmp	r3, #0
 800d70e:	d017      	beq.n	800d740 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d710:	69fb      	ldr	r3, [r7, #28]
 800d712:	2200      	movs	r2, #0
 800d714:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d718:	88fa      	ldrh	r2, [r7, #6]
 800d71a:	2300      	movs	r3, #0
 800d71c:	9303      	str	r3, [sp, #12]
 800d71e:	69fb      	ldr	r3, [r7, #28]
 800d720:	9302      	str	r3, [sp, #8]
 800d722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d724:	9301      	str	r3, [sp, #4]
 800d726:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d728:	9300      	str	r3, [sp, #0]
 800d72a:	683b      	ldr	r3, [r7, #0]
 800d72c:	68b9      	ldr	r1, [r7, #8]
 800d72e:	68f8      	ldr	r0, [r7, #12]
 800d730:	f000 f80e 	bl	800d750 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d734:	69f8      	ldr	r0, [r7, #28]
 800d736:	f000 f89f 	bl	800d878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d73a:	2301      	movs	r3, #1
 800d73c:	61bb      	str	r3, [r7, #24]
 800d73e:	e002      	b.n	800d746 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d740:	f04f 33ff 	mov.w	r3, #4294967295
 800d744:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d746:	69bb      	ldr	r3, [r7, #24]
	}
 800d748:	4618      	mov	r0, r3
 800d74a:	3720      	adds	r7, #32
 800d74c:	46bd      	mov	sp, r7
 800d74e:	bd80      	pop	{r7, pc}

0800d750 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af00      	add	r7, sp, #0
 800d756:	60f8      	str	r0, [r7, #12]
 800d758:	60b9      	str	r1, [r7, #8]
 800d75a:	607a      	str	r2, [r7, #4]
 800d75c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d75e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d760:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	009b      	lsls	r3, r3, #2
 800d766:	461a      	mov	r2, r3
 800d768:	21a5      	movs	r1, #165	; 0xa5
 800d76a:	f001 fcd9 	bl	800f120 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d76e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d772:	6879      	ldr	r1, [r7, #4]
 800d774:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d778:	440b      	add	r3, r1
 800d77a:	009b      	lsls	r3, r3, #2
 800d77c:	4413      	add	r3, r2
 800d77e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d780:	69bb      	ldr	r3, [r7, #24]
 800d782:	f023 0307 	bic.w	r3, r3, #7
 800d786:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d788:	69bb      	ldr	r3, [r7, #24]
 800d78a:	f003 0307 	and.w	r3, r3, #7
 800d78e:	2b00      	cmp	r3, #0
 800d790:	d00c      	beq.n	800d7ac <prvInitialiseNewTask+0x5c>
	__asm volatile
 800d792:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d796:	b672      	cpsid	i
 800d798:	f383 8811 	msr	BASEPRI, r3
 800d79c:	f3bf 8f6f 	isb	sy
 800d7a0:	f3bf 8f4f 	dsb	sy
 800d7a4:	b662      	cpsie	i
 800d7a6:	617b      	str	r3, [r7, #20]
}
 800d7a8:	bf00      	nop
 800d7aa:	e7fe      	b.n	800d7aa <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d7ac:	68bb      	ldr	r3, [r7, #8]
 800d7ae:	2b00      	cmp	r3, #0
 800d7b0:	d01f      	beq.n	800d7f2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7b2:	2300      	movs	r3, #0
 800d7b4:	61fb      	str	r3, [r7, #28]
 800d7b6:	e012      	b.n	800d7de <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	4413      	add	r3, r2
 800d7be:	7819      	ldrb	r1, [r3, #0]
 800d7c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7c2:	69fb      	ldr	r3, [r7, #28]
 800d7c4:	4413      	add	r3, r2
 800d7c6:	3334      	adds	r3, #52	; 0x34
 800d7c8:	460a      	mov	r2, r1
 800d7ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d7cc:	68ba      	ldr	r2, [r7, #8]
 800d7ce:	69fb      	ldr	r3, [r7, #28]
 800d7d0:	4413      	add	r3, r2
 800d7d2:	781b      	ldrb	r3, [r3, #0]
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d006      	beq.n	800d7e6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d7d8:	69fb      	ldr	r3, [r7, #28]
 800d7da:	3301      	adds	r3, #1
 800d7dc:	61fb      	str	r3, [r7, #28]
 800d7de:	69fb      	ldr	r3, [r7, #28]
 800d7e0:	2b0f      	cmp	r3, #15
 800d7e2:	d9e9      	bls.n	800d7b8 <prvInitialiseNewTask+0x68>
 800d7e4:	e000      	b.n	800d7e8 <prvInitialiseNewTask+0x98>
			{
				break;
 800d7e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d7e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7ea:	2200      	movs	r2, #0
 800d7ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d7f0:	e003      	b.n	800d7fa <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d7f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d7f4:	2200      	movs	r2, #0
 800d7f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d7fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7fc:	2b06      	cmp	r3, #6
 800d7fe:	d901      	bls.n	800d804 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d800:	2306      	movs	r3, #6
 800d802:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d808:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d80a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d80c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d80e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d810:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d812:	2200      	movs	r2, #0
 800d814:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d818:	3304      	adds	r3, #4
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7ff f9a5 	bl	800cb6a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d820:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d822:	3318      	adds	r3, #24
 800d824:	4618      	mov	r0, r3
 800d826:	f7ff f9a0 	bl	800cb6a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d82a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d82c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d82e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	f1c3 0207 	rsb	r2, r3, #7
 800d836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d838:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d83a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d83c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d83e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d842:	2200      	movs	r2, #0
 800d844:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d848:	2200      	movs	r2, #0
 800d84a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d84e:	2200      	movs	r2, #0
 800d850:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d854:	683a      	ldr	r2, [r7, #0]
 800d856:	68f9      	ldr	r1, [r7, #12]
 800d858:	69b8      	ldr	r0, [r7, #24]
 800d85a:	f001 f84b 	bl	800e8f4 <pxPortInitialiseStack>
 800d85e:	4602      	mov	r2, r0
 800d860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d862:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d864:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d86a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d86e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d870:	bf00      	nop
 800d872:	3720      	adds	r7, #32
 800d874:	46bd      	mov	sp, r7
 800d876:	bd80      	pop	{r7, pc}

0800d878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d878:	b580      	push	{r7, lr}
 800d87a:	b082      	sub	sp, #8
 800d87c:	af00      	add	r7, sp, #0
 800d87e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d880:	f001 f944 	bl	800eb0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d884:	4b2a      	ldr	r3, [pc, #168]	; (800d930 <prvAddNewTaskToReadyList+0xb8>)
 800d886:	681b      	ldr	r3, [r3, #0]
 800d888:	3301      	adds	r3, #1
 800d88a:	4a29      	ldr	r2, [pc, #164]	; (800d930 <prvAddNewTaskToReadyList+0xb8>)
 800d88c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d88e:	4b29      	ldr	r3, [pc, #164]	; (800d934 <prvAddNewTaskToReadyList+0xbc>)
 800d890:	681b      	ldr	r3, [r3, #0]
 800d892:	2b00      	cmp	r3, #0
 800d894:	d109      	bne.n	800d8aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d896:	4a27      	ldr	r2, [pc, #156]	; (800d934 <prvAddNewTaskToReadyList+0xbc>)
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d89c:	4b24      	ldr	r3, [pc, #144]	; (800d930 <prvAddNewTaskToReadyList+0xb8>)
 800d89e:	681b      	ldr	r3, [r3, #0]
 800d8a0:	2b01      	cmp	r3, #1
 800d8a2:	d110      	bne.n	800d8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d8a4:	f000 fd26 	bl	800e2f4 <prvInitialiseTaskLists>
 800d8a8:	e00d      	b.n	800d8c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d8aa:	4b23      	ldr	r3, [pc, #140]	; (800d938 <prvAddNewTaskToReadyList+0xc0>)
 800d8ac:	681b      	ldr	r3, [r3, #0]
 800d8ae:	2b00      	cmp	r3, #0
 800d8b0:	d109      	bne.n	800d8c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d8b2:	4b20      	ldr	r3, [pc, #128]	; (800d934 <prvAddNewTaskToReadyList+0xbc>)
 800d8b4:	681b      	ldr	r3, [r3, #0]
 800d8b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8b8:	687b      	ldr	r3, [r7, #4]
 800d8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d802      	bhi.n	800d8c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d8c0:	4a1c      	ldr	r2, [pc, #112]	; (800d934 <prvAddNewTaskToReadyList+0xbc>)
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d8c6:	4b1d      	ldr	r3, [pc, #116]	; (800d93c <prvAddNewTaskToReadyList+0xc4>)
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	3301      	adds	r3, #1
 800d8cc:	4a1b      	ldr	r2, [pc, #108]	; (800d93c <prvAddNewTaskToReadyList+0xc4>)
 800d8ce:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8d4:	2201      	movs	r2, #1
 800d8d6:	409a      	lsls	r2, r3
 800d8d8:	4b19      	ldr	r3, [pc, #100]	; (800d940 <prvAddNewTaskToReadyList+0xc8>)
 800d8da:	681b      	ldr	r3, [r3, #0]
 800d8dc:	4313      	orrs	r3, r2
 800d8de:	4a18      	ldr	r2, [pc, #96]	; (800d940 <prvAddNewTaskToReadyList+0xc8>)
 800d8e0:	6013      	str	r3, [r2, #0]
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8e6:	4613      	mov	r3, r2
 800d8e8:	009b      	lsls	r3, r3, #2
 800d8ea:	4413      	add	r3, r2
 800d8ec:	009b      	lsls	r3, r3, #2
 800d8ee:	4a15      	ldr	r2, [pc, #84]	; (800d944 <prvAddNewTaskToReadyList+0xcc>)
 800d8f0:	441a      	add	r2, r3
 800d8f2:	687b      	ldr	r3, [r7, #4]
 800d8f4:	3304      	adds	r3, #4
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	4610      	mov	r0, r2
 800d8fa:	f7ff f943 	bl	800cb84 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d8fe:	f001 f939 	bl	800eb74 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d902:	4b0d      	ldr	r3, [pc, #52]	; (800d938 <prvAddNewTaskToReadyList+0xc0>)
 800d904:	681b      	ldr	r3, [r3, #0]
 800d906:	2b00      	cmp	r3, #0
 800d908:	d00e      	beq.n	800d928 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d90a:	4b0a      	ldr	r3, [pc, #40]	; (800d934 <prvAddNewTaskToReadyList+0xbc>)
 800d90c:	681b      	ldr	r3, [r3, #0]
 800d90e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d914:	429a      	cmp	r2, r3
 800d916:	d207      	bcs.n	800d928 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d918:	4b0b      	ldr	r3, [pc, #44]	; (800d948 <prvAddNewTaskToReadyList+0xd0>)
 800d91a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d91e:	601a      	str	r2, [r3, #0]
 800d920:	f3bf 8f4f 	dsb	sy
 800d924:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d928:	bf00      	nop
 800d92a:	3708      	adds	r7, #8
 800d92c:	46bd      	mov	sp, r7
 800d92e:	bd80      	pop	{r7, pc}
 800d930:	20000610 	.word	0x20000610
 800d934:	20000510 	.word	0x20000510
 800d938:	2000061c 	.word	0x2000061c
 800d93c:	2000062c 	.word	0x2000062c
 800d940:	20000618 	.word	0x20000618
 800d944:	20000514 	.word	0x20000514
 800d948:	e000ed04 	.word	0xe000ed04

0800d94c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 800d94c:	b580      	push	{r7, lr}
 800d94e:	b084      	sub	sp, #16
 800d950:	af00      	add	r7, sp, #0
 800d952:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800d954:	f001 f8da 	bl	800eb0c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	d102      	bne.n	800d964 <vTaskDelete+0x18>
 800d95e:	4b3a      	ldr	r3, [pc, #232]	; (800da48 <vTaskDelete+0xfc>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	e000      	b.n	800d966 <vTaskDelete+0x1a>
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	3304      	adds	r3, #4
 800d96c:	4618      	mov	r0, r3
 800d96e:	f7ff f966 	bl	800cc3e <uxListRemove>
 800d972:	4603      	mov	r3, r0
 800d974:	2b00      	cmp	r3, #0
 800d976:	d115      	bne.n	800d9a4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d978:	68fb      	ldr	r3, [r7, #12]
 800d97a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d97c:	4933      	ldr	r1, [pc, #204]	; (800da4c <vTaskDelete+0x100>)
 800d97e:	4613      	mov	r3, r2
 800d980:	009b      	lsls	r3, r3, #2
 800d982:	4413      	add	r3, r2
 800d984:	009b      	lsls	r3, r3, #2
 800d986:	440b      	add	r3, r1
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d10a      	bne.n	800d9a4 <vTaskDelete+0x58>
 800d98e:	68fb      	ldr	r3, [r7, #12]
 800d990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d992:	2201      	movs	r2, #1
 800d994:	fa02 f303 	lsl.w	r3, r2, r3
 800d998:	43da      	mvns	r2, r3
 800d99a:	4b2d      	ldr	r3, [pc, #180]	; (800da50 <vTaskDelete+0x104>)
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	4013      	ands	r3, r2
 800d9a0:	4a2b      	ldr	r2, [pc, #172]	; (800da50 <vTaskDelete+0x104>)
 800d9a2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9a4:	68fb      	ldr	r3, [r7, #12]
 800d9a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9a8:	2b00      	cmp	r3, #0
 800d9aa:	d004      	beq.n	800d9b6 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ac:	68fb      	ldr	r3, [r7, #12]
 800d9ae:	3318      	adds	r3, #24
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7ff f944 	bl	800cc3e <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800d9b6:	4b27      	ldr	r3, [pc, #156]	; (800da54 <vTaskDelete+0x108>)
 800d9b8:	681b      	ldr	r3, [r3, #0]
 800d9ba:	3301      	adds	r3, #1
 800d9bc:	4a25      	ldr	r2, [pc, #148]	; (800da54 <vTaskDelete+0x108>)
 800d9be:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 800d9c0:	4b21      	ldr	r3, [pc, #132]	; (800da48 <vTaskDelete+0xfc>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	68fa      	ldr	r2, [r7, #12]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d10b      	bne.n	800d9e2 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	3304      	adds	r3, #4
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	4821      	ldr	r0, [pc, #132]	; (800da58 <vTaskDelete+0x10c>)
 800d9d2:	f7ff f8d7 	bl	800cb84 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800d9d6:	4b21      	ldr	r3, [pc, #132]	; (800da5c <vTaskDelete+0x110>)
 800d9d8:	681b      	ldr	r3, [r3, #0]
 800d9da:	3301      	adds	r3, #1
 800d9dc:	4a1f      	ldr	r2, [pc, #124]	; (800da5c <vTaskDelete+0x110>)
 800d9de:	6013      	str	r3, [r2, #0]
 800d9e0:	e009      	b.n	800d9f6 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 800d9e2:	4b1f      	ldr	r3, [pc, #124]	; (800da60 <vTaskDelete+0x114>)
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	4a1d      	ldr	r2, [pc, #116]	; (800da60 <vTaskDelete+0x114>)
 800d9ea:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 800d9ec:	68f8      	ldr	r0, [r7, #12]
 800d9ee:	f000 fcef 	bl	800e3d0 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 800d9f2:	f000 fd1f 	bl	800e434 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 800d9f6:	f001 f8bd 	bl	800eb74 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800d9fa:	4b1a      	ldr	r3, [pc, #104]	; (800da64 <vTaskDelete+0x118>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	d01d      	beq.n	800da3e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 800da02:	4b11      	ldr	r3, [pc, #68]	; (800da48 <vTaskDelete+0xfc>)
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	68fa      	ldr	r2, [r7, #12]
 800da08:	429a      	cmp	r2, r3
 800da0a:	d118      	bne.n	800da3e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800da0c:	4b16      	ldr	r3, [pc, #88]	; (800da68 <vTaskDelete+0x11c>)
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	2b00      	cmp	r3, #0
 800da12:	d00c      	beq.n	800da2e <vTaskDelete+0xe2>
	__asm volatile
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	b672      	cpsid	i
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	b662      	cpsie	i
 800da28:	60bb      	str	r3, [r7, #8]
}
 800da2a:	bf00      	nop
 800da2c:	e7fe      	b.n	800da2c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 800da2e:	4b0f      	ldr	r3, [pc, #60]	; (800da6c <vTaskDelete+0x120>)
 800da30:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800da34:	601a      	str	r2, [r3, #0]
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800da3e:	bf00      	nop
 800da40:	3710      	adds	r7, #16
 800da42:	46bd      	mov	sp, r7
 800da44:	bd80      	pop	{r7, pc}
 800da46:	bf00      	nop
 800da48:	20000510 	.word	0x20000510
 800da4c:	20000514 	.word	0x20000514
 800da50:	20000618 	.word	0x20000618
 800da54:	2000062c 	.word	0x2000062c
 800da58:	200005e4 	.word	0x200005e4
 800da5c:	200005f8 	.word	0x200005f8
 800da60:	20000610 	.word	0x20000610
 800da64:	2000061c 	.word	0x2000061c
 800da68:	20000638 	.word	0x20000638
 800da6c:	e000ed04 	.word	0xe000ed04

0800da70 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800da70:	b580      	push	{r7, lr}
 800da72:	b08a      	sub	sp, #40	; 0x28
 800da74:	af00      	add	r7, sp, #0
 800da76:	6078      	str	r0, [r7, #4]
 800da78:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800da7a:	2300      	movs	r3, #0
 800da7c:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	2b00      	cmp	r3, #0
 800da82:	d10c      	bne.n	800da9e <vTaskDelayUntil+0x2e>
	__asm volatile
 800da84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da88:	b672      	cpsid	i
 800da8a:	f383 8811 	msr	BASEPRI, r3
 800da8e:	f3bf 8f6f 	isb	sy
 800da92:	f3bf 8f4f 	dsb	sy
 800da96:	b662      	cpsie	i
 800da98:	617b      	str	r3, [r7, #20]
}
 800da9a:	bf00      	nop
 800da9c:	e7fe      	b.n	800da9c <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	2b00      	cmp	r3, #0
 800daa2:	d10c      	bne.n	800dabe <vTaskDelayUntil+0x4e>
	__asm volatile
 800daa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daa8:	b672      	cpsid	i
 800daaa:	f383 8811 	msr	BASEPRI, r3
 800daae:	f3bf 8f6f 	isb	sy
 800dab2:	f3bf 8f4f 	dsb	sy
 800dab6:	b662      	cpsie	i
 800dab8:	613b      	str	r3, [r7, #16]
}
 800daba:	bf00      	nop
 800dabc:	e7fe      	b.n	800dabc <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800dabe:	4b2b      	ldr	r3, [pc, #172]	; (800db6c <vTaskDelayUntil+0xfc>)
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	2b00      	cmp	r3, #0
 800dac4:	d00c      	beq.n	800dae0 <vTaskDelayUntil+0x70>
	__asm volatile
 800dac6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800daca:	b672      	cpsid	i
 800dacc:	f383 8811 	msr	BASEPRI, r3
 800dad0:	f3bf 8f6f 	isb	sy
 800dad4:	f3bf 8f4f 	dsb	sy
 800dad8:	b662      	cpsie	i
 800dada:	60fb      	str	r3, [r7, #12]
}
 800dadc:	bf00      	nop
 800dade:	e7fe      	b.n	800dade <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800dae0:	f000 f8e4 	bl	800dcac <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800dae4:	4b22      	ldr	r3, [pc, #136]	; (800db70 <vTaskDelayUntil+0x100>)
 800dae6:	681b      	ldr	r3, [r3, #0]
 800dae8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800daea:	687b      	ldr	r3, [r7, #4]
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	683a      	ldr	r2, [r7, #0]
 800daf0:	4413      	add	r3, r2
 800daf2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	681b      	ldr	r3, [r3, #0]
 800daf8:	6a3a      	ldr	r2, [r7, #32]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d20b      	bcs.n	800db16 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	69fa      	ldr	r2, [r7, #28]
 800db04:	429a      	cmp	r2, r3
 800db06:	d211      	bcs.n	800db2c <vTaskDelayUntil+0xbc>
 800db08:	69fa      	ldr	r2, [r7, #28]
 800db0a:	6a3b      	ldr	r3, [r7, #32]
 800db0c:	429a      	cmp	r2, r3
 800db0e:	d90d      	bls.n	800db2c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800db10:	2301      	movs	r3, #1
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
 800db14:	e00a      	b.n	800db2c <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	429a      	cmp	r2, r3
 800db1e:	d303      	bcc.n	800db28 <vTaskDelayUntil+0xb8>
 800db20:	69fa      	ldr	r2, [r7, #28]
 800db22:	6a3b      	ldr	r3, [r7, #32]
 800db24:	429a      	cmp	r2, r3
 800db26:	d901      	bls.n	800db2c <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800db28:	2301      	movs	r3, #1
 800db2a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	69fa      	ldr	r2, [r7, #28]
 800db30:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800db32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db34:	2b00      	cmp	r3, #0
 800db36:	d006      	beq.n	800db46 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800db38:	69fa      	ldr	r2, [r7, #28]
 800db3a:	6a3b      	ldr	r3, [r7, #32]
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	2100      	movs	r1, #0
 800db40:	4618      	mov	r0, r3
 800db42:	f000 fe71 	bl	800e828 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800db46:	f000 f8bf 	bl	800dcc8 <xTaskResumeAll>
 800db4a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800db4c:	69bb      	ldr	r3, [r7, #24]
 800db4e:	2b00      	cmp	r3, #0
 800db50:	d107      	bne.n	800db62 <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800db52:	4b08      	ldr	r3, [pc, #32]	; (800db74 <vTaskDelayUntil+0x104>)
 800db54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800db58:	601a      	str	r2, [r3, #0]
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800db62:	bf00      	nop
 800db64:	3728      	adds	r7, #40	; 0x28
 800db66:	46bd      	mov	sp, r7
 800db68:	bd80      	pop	{r7, pc}
 800db6a:	bf00      	nop
 800db6c:	20000638 	.word	0x20000638
 800db70:	20000614 	.word	0x20000614
 800db74:	e000ed04 	.word	0xe000ed04

0800db78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800db78:	b580      	push	{r7, lr}
 800db7a:	b084      	sub	sp, #16
 800db7c:	af00      	add	r7, sp, #0
 800db7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800db80:	2300      	movs	r3, #0
 800db82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	2b00      	cmp	r3, #0
 800db88:	d019      	beq.n	800dbbe <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800db8a:	4b14      	ldr	r3, [pc, #80]	; (800dbdc <vTaskDelay+0x64>)
 800db8c:	681b      	ldr	r3, [r3, #0]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	d00c      	beq.n	800dbac <vTaskDelay+0x34>
	__asm volatile
 800db92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db96:	b672      	cpsid	i
 800db98:	f383 8811 	msr	BASEPRI, r3
 800db9c:	f3bf 8f6f 	isb	sy
 800dba0:	f3bf 8f4f 	dsb	sy
 800dba4:	b662      	cpsie	i
 800dba6:	60bb      	str	r3, [r7, #8]
}
 800dba8:	bf00      	nop
 800dbaa:	e7fe      	b.n	800dbaa <vTaskDelay+0x32>
			vTaskSuspendAll();
 800dbac:	f000 f87e 	bl	800dcac <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	6878      	ldr	r0, [r7, #4]
 800dbb4:	f000 fe38 	bl	800e828 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800dbb8:	f000 f886 	bl	800dcc8 <xTaskResumeAll>
 800dbbc:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800dbbe:	68fb      	ldr	r3, [r7, #12]
 800dbc0:	2b00      	cmp	r3, #0
 800dbc2:	d107      	bne.n	800dbd4 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800dbc4:	4b06      	ldr	r3, [pc, #24]	; (800dbe0 <vTaskDelay+0x68>)
 800dbc6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dbca:	601a      	str	r2, [r3, #0]
 800dbcc:	f3bf 8f4f 	dsb	sy
 800dbd0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dbd4:	bf00      	nop
 800dbd6:	3710      	adds	r7, #16
 800dbd8:	46bd      	mov	sp, r7
 800dbda:	bd80      	pop	{r7, pc}
 800dbdc:	20000638 	.word	0x20000638
 800dbe0:	e000ed04 	.word	0xe000ed04

0800dbe4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08a      	sub	sp, #40	; 0x28
 800dbe8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dbea:	2300      	movs	r3, #0
 800dbec:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dbee:	2300      	movs	r3, #0
 800dbf0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dbf2:	463a      	mov	r2, r7
 800dbf4:	1d39      	adds	r1, r7, #4
 800dbf6:	f107 0308 	add.w	r3, r7, #8
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7f3 f9bc 	bl	8000f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dc00:	6839      	ldr	r1, [r7, #0]
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	68ba      	ldr	r2, [r7, #8]
 800dc06:	9202      	str	r2, [sp, #8]
 800dc08:	9301      	str	r3, [sp, #4]
 800dc0a:	2300      	movs	r3, #0
 800dc0c:	9300      	str	r3, [sp, #0]
 800dc0e:	2300      	movs	r3, #0
 800dc10:	460a      	mov	r2, r1
 800dc12:	4920      	ldr	r1, [pc, #128]	; (800dc94 <vTaskStartScheduler+0xb0>)
 800dc14:	4820      	ldr	r0, [pc, #128]	; (800dc98 <vTaskStartScheduler+0xb4>)
 800dc16:	f7ff fcf3 	bl	800d600 <xTaskCreateStatic>
 800dc1a:	4603      	mov	r3, r0
 800dc1c:	4a1f      	ldr	r2, [pc, #124]	; (800dc9c <vTaskStartScheduler+0xb8>)
 800dc1e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dc20:	4b1e      	ldr	r3, [pc, #120]	; (800dc9c <vTaskStartScheduler+0xb8>)
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	d002      	beq.n	800dc2e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800dc28:	2301      	movs	r3, #1
 800dc2a:	617b      	str	r3, [r7, #20]
 800dc2c:	e001      	b.n	800dc32 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800dc2e:	2300      	movs	r3, #0
 800dc30:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800dc32:	697b      	ldr	r3, [r7, #20]
 800dc34:	2b01      	cmp	r3, #1
 800dc36:	d118      	bne.n	800dc6a <vTaskStartScheduler+0x86>
	__asm volatile
 800dc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc3c:	b672      	cpsid	i
 800dc3e:	f383 8811 	msr	BASEPRI, r3
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	f3bf 8f4f 	dsb	sy
 800dc4a:	b662      	cpsie	i
 800dc4c:	613b      	str	r3, [r7, #16]
}
 800dc4e:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800dc50:	4b13      	ldr	r3, [pc, #76]	; (800dca0 <vTaskStartScheduler+0xbc>)
 800dc52:	f04f 32ff 	mov.w	r2, #4294967295
 800dc56:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800dc58:	4b12      	ldr	r3, [pc, #72]	; (800dca4 <vTaskStartScheduler+0xc0>)
 800dc5a:	2201      	movs	r2, #1
 800dc5c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800dc5e:	4b12      	ldr	r3, [pc, #72]	; (800dca8 <vTaskStartScheduler+0xc4>)
 800dc60:	2200      	movs	r2, #0
 800dc62:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800dc64:	f000 fed4 	bl	800ea10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800dc68:	e010      	b.n	800dc8c <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800dc6a:	697b      	ldr	r3, [r7, #20]
 800dc6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dc70:	d10c      	bne.n	800dc8c <vTaskStartScheduler+0xa8>
	__asm volatile
 800dc72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc76:	b672      	cpsid	i
 800dc78:	f383 8811 	msr	BASEPRI, r3
 800dc7c:	f3bf 8f6f 	isb	sy
 800dc80:	f3bf 8f4f 	dsb	sy
 800dc84:	b662      	cpsie	i
 800dc86:	60fb      	str	r3, [r7, #12]
}
 800dc88:	bf00      	nop
 800dc8a:	e7fe      	b.n	800dc8a <vTaskStartScheduler+0xa6>
}
 800dc8c:	bf00      	nop
 800dc8e:	3718      	adds	r7, #24
 800dc90:	46bd      	mov	sp, r7
 800dc92:	bd80      	pop	{r7, pc}
 800dc94:	08010cb8 	.word	0x08010cb8
 800dc98:	0800e2c1 	.word	0x0800e2c1
 800dc9c:	20000634 	.word	0x20000634
 800dca0:	20000630 	.word	0x20000630
 800dca4:	2000061c 	.word	0x2000061c
 800dca8:	20000614 	.word	0x20000614

0800dcac <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800dcac:	b480      	push	{r7}
 800dcae:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800dcb0:	4b04      	ldr	r3, [pc, #16]	; (800dcc4 <vTaskSuspendAll+0x18>)
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	3301      	adds	r3, #1
 800dcb6:	4a03      	ldr	r2, [pc, #12]	; (800dcc4 <vTaskSuspendAll+0x18>)
 800dcb8:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800dcba:	bf00      	nop
 800dcbc:	46bd      	mov	sp, r7
 800dcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcc2:	4770      	bx	lr
 800dcc4:	20000638 	.word	0x20000638

0800dcc8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b084      	sub	sp, #16
 800dccc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800dcce:	2300      	movs	r3, #0
 800dcd0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800dcd2:	2300      	movs	r3, #0
 800dcd4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800dcd6:	4b42      	ldr	r3, [pc, #264]	; (800dde0 <xTaskResumeAll+0x118>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d10c      	bne.n	800dcf8 <xTaskResumeAll+0x30>
	__asm volatile
 800dcde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce2:	b672      	cpsid	i
 800dce4:	f383 8811 	msr	BASEPRI, r3
 800dce8:	f3bf 8f6f 	isb	sy
 800dcec:	f3bf 8f4f 	dsb	sy
 800dcf0:	b662      	cpsie	i
 800dcf2:	603b      	str	r3, [r7, #0]
}
 800dcf4:	bf00      	nop
 800dcf6:	e7fe      	b.n	800dcf6 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800dcf8:	f000 ff08 	bl	800eb0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800dcfc:	4b38      	ldr	r3, [pc, #224]	; (800dde0 <xTaskResumeAll+0x118>)
 800dcfe:	681b      	ldr	r3, [r3, #0]
 800dd00:	3b01      	subs	r3, #1
 800dd02:	4a37      	ldr	r2, [pc, #220]	; (800dde0 <xTaskResumeAll+0x118>)
 800dd04:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dd06:	4b36      	ldr	r3, [pc, #216]	; (800dde0 <xTaskResumeAll+0x118>)
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d161      	bne.n	800ddd2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800dd0e:	4b35      	ldr	r3, [pc, #212]	; (800dde4 <xTaskResumeAll+0x11c>)
 800dd10:	681b      	ldr	r3, [r3, #0]
 800dd12:	2b00      	cmp	r3, #0
 800dd14:	d05d      	beq.n	800ddd2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd16:	e02e      	b.n	800dd76 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dd18:	4b33      	ldr	r3, [pc, #204]	; (800dde8 <xTaskResumeAll+0x120>)
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	68db      	ldr	r3, [r3, #12]
 800dd1e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dd20:	68fb      	ldr	r3, [r7, #12]
 800dd22:	3318      	adds	r3, #24
 800dd24:	4618      	mov	r0, r3
 800dd26:	f7fe ff8a 	bl	800cc3e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800dd2a:	68fb      	ldr	r3, [r7, #12]
 800dd2c:	3304      	adds	r3, #4
 800dd2e:	4618      	mov	r0, r3
 800dd30:	f7fe ff85 	bl	800cc3e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd38:	2201      	movs	r2, #1
 800dd3a:	409a      	lsls	r2, r3
 800dd3c:	4b2b      	ldr	r3, [pc, #172]	; (800ddec <xTaskResumeAll+0x124>)
 800dd3e:	681b      	ldr	r3, [r3, #0]
 800dd40:	4313      	orrs	r3, r2
 800dd42:	4a2a      	ldr	r2, [pc, #168]	; (800ddec <xTaskResumeAll+0x124>)
 800dd44:	6013      	str	r3, [r2, #0]
 800dd46:	68fb      	ldr	r3, [r7, #12]
 800dd48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd4a:	4613      	mov	r3, r2
 800dd4c:	009b      	lsls	r3, r3, #2
 800dd4e:	4413      	add	r3, r2
 800dd50:	009b      	lsls	r3, r3, #2
 800dd52:	4a27      	ldr	r2, [pc, #156]	; (800ddf0 <xTaskResumeAll+0x128>)
 800dd54:	441a      	add	r2, r3
 800dd56:	68fb      	ldr	r3, [r7, #12]
 800dd58:	3304      	adds	r3, #4
 800dd5a:	4619      	mov	r1, r3
 800dd5c:	4610      	mov	r0, r2
 800dd5e:	f7fe ff11 	bl	800cb84 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800dd62:	68fb      	ldr	r3, [r7, #12]
 800dd64:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd66:	4b23      	ldr	r3, [pc, #140]	; (800ddf4 <xTaskResumeAll+0x12c>)
 800dd68:	681b      	ldr	r3, [r3, #0]
 800dd6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dd6c:	429a      	cmp	r2, r3
 800dd6e:	d302      	bcc.n	800dd76 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800dd70:	4b21      	ldr	r3, [pc, #132]	; (800ddf8 <xTaskResumeAll+0x130>)
 800dd72:	2201      	movs	r2, #1
 800dd74:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800dd76:	4b1c      	ldr	r3, [pc, #112]	; (800dde8 <xTaskResumeAll+0x120>)
 800dd78:	681b      	ldr	r3, [r3, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d1cc      	bne.n	800dd18 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d001      	beq.n	800dd88 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800dd84:	f000 fb56 	bl	800e434 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800dd88:	4b1c      	ldr	r3, [pc, #112]	; (800ddfc <xTaskResumeAll+0x134>)
 800dd8a:	681b      	ldr	r3, [r3, #0]
 800dd8c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800dd8e:	687b      	ldr	r3, [r7, #4]
 800dd90:	2b00      	cmp	r3, #0
 800dd92:	d010      	beq.n	800ddb6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800dd94:	f000 f846 	bl	800de24 <xTaskIncrementTick>
 800dd98:	4603      	mov	r3, r0
 800dd9a:	2b00      	cmp	r3, #0
 800dd9c:	d002      	beq.n	800dda4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800dd9e:	4b16      	ldr	r3, [pc, #88]	; (800ddf8 <xTaskResumeAll+0x130>)
 800dda0:	2201      	movs	r2, #1
 800dda2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	3b01      	subs	r3, #1
 800dda8:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	2b00      	cmp	r3, #0
 800ddae:	d1f1      	bne.n	800dd94 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800ddb0:	4b12      	ldr	r3, [pc, #72]	; (800ddfc <xTaskResumeAll+0x134>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ddb6:	4b10      	ldr	r3, [pc, #64]	; (800ddf8 <xTaskResumeAll+0x130>)
 800ddb8:	681b      	ldr	r3, [r3, #0]
 800ddba:	2b00      	cmp	r3, #0
 800ddbc:	d009      	beq.n	800ddd2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ddbe:	2301      	movs	r3, #1
 800ddc0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ddc2:	4b0f      	ldr	r3, [pc, #60]	; (800de00 <xTaskResumeAll+0x138>)
 800ddc4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddc8:	601a      	str	r2, [r3, #0]
 800ddca:	f3bf 8f4f 	dsb	sy
 800ddce:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ddd2:	f000 fecf 	bl	800eb74 <vPortExitCritical>

	return xAlreadyYielded;
 800ddd6:	68bb      	ldr	r3, [r7, #8]
}
 800ddd8:	4618      	mov	r0, r3
 800ddda:	3710      	adds	r7, #16
 800dddc:	46bd      	mov	sp, r7
 800ddde:	bd80      	pop	{r7, pc}
 800dde0:	20000638 	.word	0x20000638
 800dde4:	20000610 	.word	0x20000610
 800dde8:	200005d0 	.word	0x200005d0
 800ddec:	20000618 	.word	0x20000618
 800ddf0:	20000514 	.word	0x20000514
 800ddf4:	20000510 	.word	0x20000510
 800ddf8:	20000624 	.word	0x20000624
 800ddfc:	20000620 	.word	0x20000620
 800de00:	e000ed04 	.word	0xe000ed04

0800de04 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800de0a:	4b05      	ldr	r3, [pc, #20]	; (800de20 <xTaskGetTickCount+0x1c>)
 800de0c:	681b      	ldr	r3, [r3, #0]
 800de0e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800de10:	687b      	ldr	r3, [r7, #4]
}
 800de12:	4618      	mov	r0, r3
 800de14:	370c      	adds	r7, #12
 800de16:	46bd      	mov	sp, r7
 800de18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de1c:	4770      	bx	lr
 800de1e:	bf00      	nop
 800de20:	20000614 	.word	0x20000614

0800de24 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800de24:	b580      	push	{r7, lr}
 800de26:	b086      	sub	sp, #24
 800de28:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800de2a:	2300      	movs	r3, #0
 800de2c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800de2e:	4b4f      	ldr	r3, [pc, #316]	; (800df6c <xTaskIncrementTick+0x148>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	2b00      	cmp	r3, #0
 800de34:	f040 808a 	bne.w	800df4c <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800de38:	4b4d      	ldr	r3, [pc, #308]	; (800df70 <xTaskIncrementTick+0x14c>)
 800de3a:	681b      	ldr	r3, [r3, #0]
 800de3c:	3301      	adds	r3, #1
 800de3e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800de40:	4a4b      	ldr	r2, [pc, #300]	; (800df70 <xTaskIncrementTick+0x14c>)
 800de42:	693b      	ldr	r3, [r7, #16]
 800de44:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800de46:	693b      	ldr	r3, [r7, #16]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d122      	bne.n	800de92 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800de4c:	4b49      	ldr	r3, [pc, #292]	; (800df74 <xTaskIncrementTick+0x150>)
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	2b00      	cmp	r3, #0
 800de54:	d00c      	beq.n	800de70 <xTaskIncrementTick+0x4c>
	__asm volatile
 800de56:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de5a:	b672      	cpsid	i
 800de5c:	f383 8811 	msr	BASEPRI, r3
 800de60:	f3bf 8f6f 	isb	sy
 800de64:	f3bf 8f4f 	dsb	sy
 800de68:	b662      	cpsie	i
 800de6a:	603b      	str	r3, [r7, #0]
}
 800de6c:	bf00      	nop
 800de6e:	e7fe      	b.n	800de6e <xTaskIncrementTick+0x4a>
 800de70:	4b40      	ldr	r3, [pc, #256]	; (800df74 <xTaskIncrementTick+0x150>)
 800de72:	681b      	ldr	r3, [r3, #0]
 800de74:	60fb      	str	r3, [r7, #12]
 800de76:	4b40      	ldr	r3, [pc, #256]	; (800df78 <xTaskIncrementTick+0x154>)
 800de78:	681b      	ldr	r3, [r3, #0]
 800de7a:	4a3e      	ldr	r2, [pc, #248]	; (800df74 <xTaskIncrementTick+0x150>)
 800de7c:	6013      	str	r3, [r2, #0]
 800de7e:	4a3e      	ldr	r2, [pc, #248]	; (800df78 <xTaskIncrementTick+0x154>)
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	6013      	str	r3, [r2, #0]
 800de84:	4b3d      	ldr	r3, [pc, #244]	; (800df7c <xTaskIncrementTick+0x158>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	4a3c      	ldr	r2, [pc, #240]	; (800df7c <xTaskIncrementTick+0x158>)
 800de8c:	6013      	str	r3, [r2, #0]
 800de8e:	f000 fad1 	bl	800e434 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800de92:	4b3b      	ldr	r3, [pc, #236]	; (800df80 <xTaskIncrementTick+0x15c>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	693a      	ldr	r2, [r7, #16]
 800de98:	429a      	cmp	r2, r3
 800de9a:	d348      	bcc.n	800df2e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de9c:	4b35      	ldr	r3, [pc, #212]	; (800df74 <xTaskIncrementTick+0x150>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	681b      	ldr	r3, [r3, #0]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d104      	bne.n	800deb0 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dea6:	4b36      	ldr	r3, [pc, #216]	; (800df80 <xTaskIncrementTick+0x15c>)
 800dea8:	f04f 32ff 	mov.w	r2, #4294967295
 800deac:	601a      	str	r2, [r3, #0]
					break;
 800deae:	e03e      	b.n	800df2e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deb0:	4b30      	ldr	r3, [pc, #192]	; (800df74 <xTaskIncrementTick+0x150>)
 800deb2:	681b      	ldr	r3, [r3, #0]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	68db      	ldr	r3, [r3, #12]
 800deb8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800deba:	68bb      	ldr	r3, [r7, #8]
 800debc:	685b      	ldr	r3, [r3, #4]
 800debe:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800dec0:	693a      	ldr	r2, [r7, #16]
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	429a      	cmp	r2, r3
 800dec6:	d203      	bcs.n	800ded0 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800dec8:	4a2d      	ldr	r2, [pc, #180]	; (800df80 <xTaskIncrementTick+0x15c>)
 800deca:	687b      	ldr	r3, [r7, #4]
 800decc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800dece:	e02e      	b.n	800df2e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ded0:	68bb      	ldr	r3, [r7, #8]
 800ded2:	3304      	adds	r3, #4
 800ded4:	4618      	mov	r0, r3
 800ded6:	f7fe feb2 	bl	800cc3e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800deda:	68bb      	ldr	r3, [r7, #8]
 800dedc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dede:	2b00      	cmp	r3, #0
 800dee0:	d004      	beq.n	800deec <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800dee2:	68bb      	ldr	r3, [r7, #8]
 800dee4:	3318      	adds	r3, #24
 800dee6:	4618      	mov	r0, r3
 800dee8:	f7fe fea9 	bl	800cc3e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800deec:	68bb      	ldr	r3, [r7, #8]
 800deee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800def0:	2201      	movs	r2, #1
 800def2:	409a      	lsls	r2, r3
 800def4:	4b23      	ldr	r3, [pc, #140]	; (800df84 <xTaskIncrementTick+0x160>)
 800def6:	681b      	ldr	r3, [r3, #0]
 800def8:	4313      	orrs	r3, r2
 800defa:	4a22      	ldr	r2, [pc, #136]	; (800df84 <xTaskIncrementTick+0x160>)
 800defc:	6013      	str	r3, [r2, #0]
 800defe:	68bb      	ldr	r3, [r7, #8]
 800df00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df02:	4613      	mov	r3, r2
 800df04:	009b      	lsls	r3, r3, #2
 800df06:	4413      	add	r3, r2
 800df08:	009b      	lsls	r3, r3, #2
 800df0a:	4a1f      	ldr	r2, [pc, #124]	; (800df88 <xTaskIncrementTick+0x164>)
 800df0c:	441a      	add	r2, r3
 800df0e:	68bb      	ldr	r3, [r7, #8]
 800df10:	3304      	adds	r3, #4
 800df12:	4619      	mov	r1, r3
 800df14:	4610      	mov	r0, r2
 800df16:	f7fe fe35 	bl	800cb84 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1e:	4b1b      	ldr	r3, [pc, #108]	; (800df8c <xTaskIncrementTick+0x168>)
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df24:	429a      	cmp	r2, r3
 800df26:	d3b9      	bcc.n	800de9c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800df28:	2301      	movs	r3, #1
 800df2a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df2c:	e7b6      	b.n	800de9c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800df2e:	4b17      	ldr	r3, [pc, #92]	; (800df8c <xTaskIncrementTick+0x168>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df34:	4914      	ldr	r1, [pc, #80]	; (800df88 <xTaskIncrementTick+0x164>)
 800df36:	4613      	mov	r3, r2
 800df38:	009b      	lsls	r3, r3, #2
 800df3a:	4413      	add	r3, r2
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	440b      	add	r3, r1
 800df40:	681b      	ldr	r3, [r3, #0]
 800df42:	2b01      	cmp	r3, #1
 800df44:	d907      	bls.n	800df56 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800df46:	2301      	movs	r3, #1
 800df48:	617b      	str	r3, [r7, #20]
 800df4a:	e004      	b.n	800df56 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800df4c:	4b10      	ldr	r3, [pc, #64]	; (800df90 <xTaskIncrementTick+0x16c>)
 800df4e:	681b      	ldr	r3, [r3, #0]
 800df50:	3301      	adds	r3, #1
 800df52:	4a0f      	ldr	r2, [pc, #60]	; (800df90 <xTaskIncrementTick+0x16c>)
 800df54:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800df56:	4b0f      	ldr	r3, [pc, #60]	; (800df94 <xTaskIncrementTick+0x170>)
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	2b00      	cmp	r3, #0
 800df5c:	d001      	beq.n	800df62 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800df5e:	2301      	movs	r3, #1
 800df60:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800df62:	697b      	ldr	r3, [r7, #20]
}
 800df64:	4618      	mov	r0, r3
 800df66:	3718      	adds	r7, #24
 800df68:	46bd      	mov	sp, r7
 800df6a:	bd80      	pop	{r7, pc}
 800df6c:	20000638 	.word	0x20000638
 800df70:	20000614 	.word	0x20000614
 800df74:	200005c8 	.word	0x200005c8
 800df78:	200005cc 	.word	0x200005cc
 800df7c:	20000628 	.word	0x20000628
 800df80:	20000630 	.word	0x20000630
 800df84:	20000618 	.word	0x20000618
 800df88:	20000514 	.word	0x20000514
 800df8c:	20000510 	.word	0x20000510
 800df90:	20000620 	.word	0x20000620
 800df94:	20000624 	.word	0x20000624

0800df98 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b088      	sub	sp, #32
 800df9c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800df9e:	4b3a      	ldr	r3, [pc, #232]	; (800e088 <vTaskSwitchContext+0xf0>)
 800dfa0:	681b      	ldr	r3, [r3, #0]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d003      	beq.n	800dfae <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800dfa6:	4b39      	ldr	r3, [pc, #228]	; (800e08c <vTaskSwitchContext+0xf4>)
 800dfa8:	2201      	movs	r2, #1
 800dfaa:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800dfac:	e068      	b.n	800e080 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800dfae:	4b37      	ldr	r3, [pc, #220]	; (800e08c <vTaskSwitchContext+0xf4>)
 800dfb0:	2200      	movs	r2, #0
 800dfb2:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800dfb4:	4b36      	ldr	r3, [pc, #216]	; (800e090 <vTaskSwitchContext+0xf8>)
 800dfb6:	681b      	ldr	r3, [r3, #0]
 800dfb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dfba:	61fb      	str	r3, [r7, #28]
 800dfbc:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800dfc0:	61bb      	str	r3, [r7, #24]
 800dfc2:	69fb      	ldr	r3, [r7, #28]
 800dfc4:	681b      	ldr	r3, [r3, #0]
 800dfc6:	69ba      	ldr	r2, [r7, #24]
 800dfc8:	429a      	cmp	r2, r3
 800dfca:	d111      	bne.n	800dff0 <vTaskSwitchContext+0x58>
 800dfcc:	69fb      	ldr	r3, [r7, #28]
 800dfce:	3304      	adds	r3, #4
 800dfd0:	681b      	ldr	r3, [r3, #0]
 800dfd2:	69ba      	ldr	r2, [r7, #24]
 800dfd4:	429a      	cmp	r2, r3
 800dfd6:	d10b      	bne.n	800dff0 <vTaskSwitchContext+0x58>
 800dfd8:	69fb      	ldr	r3, [r7, #28]
 800dfda:	3308      	adds	r3, #8
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	69ba      	ldr	r2, [r7, #24]
 800dfe0:	429a      	cmp	r2, r3
 800dfe2:	d105      	bne.n	800dff0 <vTaskSwitchContext+0x58>
 800dfe4:	69fb      	ldr	r3, [r7, #28]
 800dfe6:	330c      	adds	r3, #12
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	69ba      	ldr	r2, [r7, #24]
 800dfec:	429a      	cmp	r2, r3
 800dfee:	d008      	beq.n	800e002 <vTaskSwitchContext+0x6a>
 800dff0:	4b27      	ldr	r3, [pc, #156]	; (800e090 <vTaskSwitchContext+0xf8>)
 800dff2:	681a      	ldr	r2, [r3, #0]
 800dff4:	4b26      	ldr	r3, [pc, #152]	; (800e090 <vTaskSwitchContext+0xf8>)
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	3334      	adds	r3, #52	; 0x34
 800dffa:	4619      	mov	r1, r3
 800dffc:	4610      	mov	r0, r2
 800dffe:	f7f2 ffa8 	bl	8000f52 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e002:	4b24      	ldr	r3, [pc, #144]	; (800e094 <vTaskSwitchContext+0xfc>)
 800e004:	681b      	ldr	r3, [r3, #0]
 800e006:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	fab3 f383 	clz	r3, r3
 800e00e:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800e010:	7afb      	ldrb	r3, [r7, #11]
 800e012:	f1c3 031f 	rsb	r3, r3, #31
 800e016:	617b      	str	r3, [r7, #20]
 800e018:	491f      	ldr	r1, [pc, #124]	; (800e098 <vTaskSwitchContext+0x100>)
 800e01a:	697a      	ldr	r2, [r7, #20]
 800e01c:	4613      	mov	r3, r2
 800e01e:	009b      	lsls	r3, r3, #2
 800e020:	4413      	add	r3, r2
 800e022:	009b      	lsls	r3, r3, #2
 800e024:	440b      	add	r3, r1
 800e026:	681b      	ldr	r3, [r3, #0]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10c      	bne.n	800e046 <vTaskSwitchContext+0xae>
	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	b672      	cpsid	i
 800e032:	f383 8811 	msr	BASEPRI, r3
 800e036:	f3bf 8f6f 	isb	sy
 800e03a:	f3bf 8f4f 	dsb	sy
 800e03e:	b662      	cpsie	i
 800e040:	607b      	str	r3, [r7, #4]
}
 800e042:	bf00      	nop
 800e044:	e7fe      	b.n	800e044 <vTaskSwitchContext+0xac>
 800e046:	697a      	ldr	r2, [r7, #20]
 800e048:	4613      	mov	r3, r2
 800e04a:	009b      	lsls	r3, r3, #2
 800e04c:	4413      	add	r3, r2
 800e04e:	009b      	lsls	r3, r3, #2
 800e050:	4a11      	ldr	r2, [pc, #68]	; (800e098 <vTaskSwitchContext+0x100>)
 800e052:	4413      	add	r3, r2
 800e054:	613b      	str	r3, [r7, #16]
 800e056:	693b      	ldr	r3, [r7, #16]
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	685a      	ldr	r2, [r3, #4]
 800e05c:	693b      	ldr	r3, [r7, #16]
 800e05e:	605a      	str	r2, [r3, #4]
 800e060:	693b      	ldr	r3, [r7, #16]
 800e062:	685a      	ldr	r2, [r3, #4]
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	3308      	adds	r3, #8
 800e068:	429a      	cmp	r2, r3
 800e06a:	d104      	bne.n	800e076 <vTaskSwitchContext+0xde>
 800e06c:	693b      	ldr	r3, [r7, #16]
 800e06e:	685b      	ldr	r3, [r3, #4]
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	693b      	ldr	r3, [r7, #16]
 800e074:	605a      	str	r2, [r3, #4]
 800e076:	693b      	ldr	r3, [r7, #16]
 800e078:	685b      	ldr	r3, [r3, #4]
 800e07a:	68db      	ldr	r3, [r3, #12]
 800e07c:	4a04      	ldr	r2, [pc, #16]	; (800e090 <vTaskSwitchContext+0xf8>)
 800e07e:	6013      	str	r3, [r2, #0]
}
 800e080:	bf00      	nop
 800e082:	3720      	adds	r7, #32
 800e084:	46bd      	mov	sp, r7
 800e086:	bd80      	pop	{r7, pc}
 800e088:	20000638 	.word	0x20000638
 800e08c:	20000624 	.word	0x20000624
 800e090:	20000510 	.word	0x20000510
 800e094:	20000618 	.word	0x20000618
 800e098:	20000514 	.word	0x20000514

0800e09c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e09c:	b580      	push	{r7, lr}
 800e09e:	b084      	sub	sp, #16
 800e0a0:	af00      	add	r7, sp, #0
 800e0a2:	6078      	str	r0, [r7, #4]
 800e0a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d10c      	bne.n	800e0c6 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800e0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0b0:	b672      	cpsid	i
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	b662      	cpsie	i
 800e0c0:	60fb      	str	r3, [r7, #12]
}
 800e0c2:	bf00      	nop
 800e0c4:	e7fe      	b.n	800e0c4 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e0c6:	4b07      	ldr	r3, [pc, #28]	; (800e0e4 <vTaskPlaceOnEventList+0x48>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	3318      	adds	r3, #24
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f7fe fd7c 	bl	800cbcc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e0d4:	2101      	movs	r1, #1
 800e0d6:	6838      	ldr	r0, [r7, #0]
 800e0d8:	f000 fba6 	bl	800e828 <prvAddCurrentTaskToDelayedList>
}
 800e0dc:	bf00      	nop
 800e0de:	3710      	adds	r7, #16
 800e0e0:	46bd      	mov	sp, r7
 800e0e2:	bd80      	pop	{r7, pc}
 800e0e4:	20000510 	.word	0x20000510

0800e0e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e0e8:	b580      	push	{r7, lr}
 800e0ea:	b086      	sub	sp, #24
 800e0ec:	af00      	add	r7, sp, #0
 800e0ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0f0:	687b      	ldr	r3, [r7, #4]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	68db      	ldr	r3, [r3, #12]
 800e0f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e0f8:	693b      	ldr	r3, [r7, #16]
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d10c      	bne.n	800e118 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800e0fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e102:	b672      	cpsid	i
 800e104:	f383 8811 	msr	BASEPRI, r3
 800e108:	f3bf 8f6f 	isb	sy
 800e10c:	f3bf 8f4f 	dsb	sy
 800e110:	b662      	cpsie	i
 800e112:	60fb      	str	r3, [r7, #12]
}
 800e114:	bf00      	nop
 800e116:	e7fe      	b.n	800e116 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e118:	693b      	ldr	r3, [r7, #16]
 800e11a:	3318      	adds	r3, #24
 800e11c:	4618      	mov	r0, r3
 800e11e:	f7fe fd8e 	bl	800cc3e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e122:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <xTaskRemoveFromEventList+0xb0>)
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	d11c      	bne.n	800e164 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e12a:	693b      	ldr	r3, [r7, #16]
 800e12c:	3304      	adds	r3, #4
 800e12e:	4618      	mov	r0, r3
 800e130:	f7fe fd85 	bl	800cc3e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e134:	693b      	ldr	r3, [r7, #16]
 800e136:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e138:	2201      	movs	r2, #1
 800e13a:	409a      	lsls	r2, r3
 800e13c:	4b17      	ldr	r3, [pc, #92]	; (800e19c <xTaskRemoveFromEventList+0xb4>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	4313      	orrs	r3, r2
 800e142:	4a16      	ldr	r2, [pc, #88]	; (800e19c <xTaskRemoveFromEventList+0xb4>)
 800e144:	6013      	str	r3, [r2, #0]
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e14a:	4613      	mov	r3, r2
 800e14c:	009b      	lsls	r3, r3, #2
 800e14e:	4413      	add	r3, r2
 800e150:	009b      	lsls	r3, r3, #2
 800e152:	4a13      	ldr	r2, [pc, #76]	; (800e1a0 <xTaskRemoveFromEventList+0xb8>)
 800e154:	441a      	add	r2, r3
 800e156:	693b      	ldr	r3, [r7, #16]
 800e158:	3304      	adds	r3, #4
 800e15a:	4619      	mov	r1, r3
 800e15c:	4610      	mov	r0, r2
 800e15e:	f7fe fd11 	bl	800cb84 <vListInsertEnd>
 800e162:	e005      	b.n	800e170 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e164:	693b      	ldr	r3, [r7, #16]
 800e166:	3318      	adds	r3, #24
 800e168:	4619      	mov	r1, r3
 800e16a:	480e      	ldr	r0, [pc, #56]	; (800e1a4 <xTaskRemoveFromEventList+0xbc>)
 800e16c:	f7fe fd0a 	bl	800cb84 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e170:	693b      	ldr	r3, [r7, #16]
 800e172:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e174:	4b0c      	ldr	r3, [pc, #48]	; (800e1a8 <xTaskRemoveFromEventList+0xc0>)
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d905      	bls.n	800e18a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e17e:	2301      	movs	r3, #1
 800e180:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e182:	4b0a      	ldr	r3, [pc, #40]	; (800e1ac <xTaskRemoveFromEventList+0xc4>)
 800e184:	2201      	movs	r2, #1
 800e186:	601a      	str	r2, [r3, #0]
 800e188:	e001      	b.n	800e18e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800e18a:	2300      	movs	r3, #0
 800e18c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e18e:	697b      	ldr	r3, [r7, #20]
}
 800e190:	4618      	mov	r0, r3
 800e192:	3718      	adds	r7, #24
 800e194:	46bd      	mov	sp, r7
 800e196:	bd80      	pop	{r7, pc}
 800e198:	20000638 	.word	0x20000638
 800e19c:	20000618 	.word	0x20000618
 800e1a0:	20000514 	.word	0x20000514
 800e1a4:	200005d0 	.word	0x200005d0
 800e1a8:	20000510 	.word	0x20000510
 800e1ac:	20000624 	.word	0x20000624

0800e1b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e1b0:	b480      	push	{r7}
 800e1b2:	b083      	sub	sp, #12
 800e1b4:	af00      	add	r7, sp, #0
 800e1b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e1b8:	4b06      	ldr	r3, [pc, #24]	; (800e1d4 <vTaskInternalSetTimeOutState+0x24>)
 800e1ba:	681a      	ldr	r2, [r3, #0]
 800e1bc:	687b      	ldr	r3, [r7, #4]
 800e1be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e1c0:	4b05      	ldr	r3, [pc, #20]	; (800e1d8 <vTaskInternalSetTimeOutState+0x28>)
 800e1c2:	681a      	ldr	r2, [r3, #0]
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	605a      	str	r2, [r3, #4]
}
 800e1c8:	bf00      	nop
 800e1ca:	370c      	adds	r7, #12
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1d2:	4770      	bx	lr
 800e1d4:	20000628 	.word	0x20000628
 800e1d8:	20000614 	.word	0x20000614

0800e1dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e1dc:	b580      	push	{r7, lr}
 800e1de:	b088      	sub	sp, #32
 800e1e0:	af00      	add	r7, sp, #0
 800e1e2:	6078      	str	r0, [r7, #4]
 800e1e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d10c      	bne.n	800e206 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800e1ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1f0:	b672      	cpsid	i
 800e1f2:	f383 8811 	msr	BASEPRI, r3
 800e1f6:	f3bf 8f6f 	isb	sy
 800e1fa:	f3bf 8f4f 	dsb	sy
 800e1fe:	b662      	cpsie	i
 800e200:	613b      	str	r3, [r7, #16]
}
 800e202:	bf00      	nop
 800e204:	e7fe      	b.n	800e204 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800e206:	683b      	ldr	r3, [r7, #0]
 800e208:	2b00      	cmp	r3, #0
 800e20a:	d10c      	bne.n	800e226 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800e20c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e210:	b672      	cpsid	i
 800e212:	f383 8811 	msr	BASEPRI, r3
 800e216:	f3bf 8f6f 	isb	sy
 800e21a:	f3bf 8f4f 	dsb	sy
 800e21e:	b662      	cpsie	i
 800e220:	60fb      	str	r3, [r7, #12]
}
 800e222:	bf00      	nop
 800e224:	e7fe      	b.n	800e224 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800e226:	f000 fc71 	bl	800eb0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e22a:	4b1d      	ldr	r3, [pc, #116]	; (800e2a0 <xTaskCheckForTimeOut+0xc4>)
 800e22c:	681b      	ldr	r3, [r3, #0]
 800e22e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	685b      	ldr	r3, [r3, #4]
 800e234:	69ba      	ldr	r2, [r7, #24]
 800e236:	1ad3      	subs	r3, r2, r3
 800e238:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e23a:	683b      	ldr	r3, [r7, #0]
 800e23c:	681b      	ldr	r3, [r3, #0]
 800e23e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e242:	d102      	bne.n	800e24a <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e244:	2300      	movs	r3, #0
 800e246:	61fb      	str	r3, [r7, #28]
 800e248:	e023      	b.n	800e292 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	681a      	ldr	r2, [r3, #0]
 800e24e:	4b15      	ldr	r3, [pc, #84]	; (800e2a4 <xTaskCheckForTimeOut+0xc8>)
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	429a      	cmp	r2, r3
 800e254:	d007      	beq.n	800e266 <xTaskCheckForTimeOut+0x8a>
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	69ba      	ldr	r2, [r7, #24]
 800e25c:	429a      	cmp	r2, r3
 800e25e:	d302      	bcc.n	800e266 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e260:	2301      	movs	r3, #1
 800e262:	61fb      	str	r3, [r7, #28]
 800e264:	e015      	b.n	800e292 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e266:	683b      	ldr	r3, [r7, #0]
 800e268:	681b      	ldr	r3, [r3, #0]
 800e26a:	697a      	ldr	r2, [r7, #20]
 800e26c:	429a      	cmp	r2, r3
 800e26e:	d20b      	bcs.n	800e288 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	681a      	ldr	r2, [r3, #0]
 800e274:	697b      	ldr	r3, [r7, #20]
 800e276:	1ad2      	subs	r2, r2, r3
 800e278:	683b      	ldr	r3, [r7, #0]
 800e27a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e27c:	6878      	ldr	r0, [r7, #4]
 800e27e:	f7ff ff97 	bl	800e1b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e282:	2300      	movs	r3, #0
 800e284:	61fb      	str	r3, [r7, #28]
 800e286:	e004      	b.n	800e292 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800e288:	683b      	ldr	r3, [r7, #0]
 800e28a:	2200      	movs	r2, #0
 800e28c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e28e:	2301      	movs	r3, #1
 800e290:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e292:	f000 fc6f 	bl	800eb74 <vPortExitCritical>

	return xReturn;
 800e296:	69fb      	ldr	r3, [r7, #28]
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3720      	adds	r7, #32
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}
 800e2a0:	20000614 	.word	0x20000614
 800e2a4:	20000628 	.word	0x20000628

0800e2a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e2a8:	b480      	push	{r7}
 800e2aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e2ac:	4b03      	ldr	r3, [pc, #12]	; (800e2bc <vTaskMissedYield+0x14>)
 800e2ae:	2201      	movs	r2, #1
 800e2b0:	601a      	str	r2, [r3, #0]
}
 800e2b2:	bf00      	nop
 800e2b4:	46bd      	mov	sp, r7
 800e2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ba:	4770      	bx	lr
 800e2bc:	20000624 	.word	0x20000624

0800e2c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e2c0:	b580      	push	{r7, lr}
 800e2c2:	b082      	sub	sp, #8
 800e2c4:	af00      	add	r7, sp, #0
 800e2c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e2c8:	f000 f854 	bl	800e374 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e2cc:	4b07      	ldr	r3, [pc, #28]	; (800e2ec <prvIdleTask+0x2c>)
 800e2ce:	681b      	ldr	r3, [r3, #0]
 800e2d0:	2b01      	cmp	r3, #1
 800e2d2:	d907      	bls.n	800e2e4 <prvIdleTask+0x24>
			{
				taskYIELD();
 800e2d4:	4b06      	ldr	r3, [pc, #24]	; (800e2f0 <prvIdleTask+0x30>)
 800e2d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e2da:	601a      	str	r2, [r3, #0]
 800e2dc:	f3bf 8f4f 	dsb	sy
 800e2e0:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800e2e4:	f7f2 fe2e 	bl	8000f44 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800e2e8:	e7ee      	b.n	800e2c8 <prvIdleTask+0x8>
 800e2ea:	bf00      	nop
 800e2ec:	20000514 	.word	0x20000514
 800e2f0:	e000ed04 	.word	0xe000ed04

0800e2f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b082      	sub	sp, #8
 800e2f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e2fa:	2300      	movs	r3, #0
 800e2fc:	607b      	str	r3, [r7, #4]
 800e2fe:	e00c      	b.n	800e31a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e300:	687a      	ldr	r2, [r7, #4]
 800e302:	4613      	mov	r3, r2
 800e304:	009b      	lsls	r3, r3, #2
 800e306:	4413      	add	r3, r2
 800e308:	009b      	lsls	r3, r3, #2
 800e30a:	4a12      	ldr	r2, [pc, #72]	; (800e354 <prvInitialiseTaskLists+0x60>)
 800e30c:	4413      	add	r3, r2
 800e30e:	4618      	mov	r0, r3
 800e310:	f7fe fc0b 	bl	800cb2a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e314:	687b      	ldr	r3, [r7, #4]
 800e316:	3301      	adds	r3, #1
 800e318:	607b      	str	r3, [r7, #4]
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	2b06      	cmp	r3, #6
 800e31e:	d9ef      	bls.n	800e300 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e320:	480d      	ldr	r0, [pc, #52]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e322:	f7fe fc02 	bl	800cb2a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e326:	480d      	ldr	r0, [pc, #52]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e328:	f7fe fbff 	bl	800cb2a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e32c:	480c      	ldr	r0, [pc, #48]	; (800e360 <prvInitialiseTaskLists+0x6c>)
 800e32e:	f7fe fbfc 	bl	800cb2a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e332:	480c      	ldr	r0, [pc, #48]	; (800e364 <prvInitialiseTaskLists+0x70>)
 800e334:	f7fe fbf9 	bl	800cb2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e338:	480b      	ldr	r0, [pc, #44]	; (800e368 <prvInitialiseTaskLists+0x74>)
 800e33a:	f7fe fbf6 	bl	800cb2a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e33e:	4b0b      	ldr	r3, [pc, #44]	; (800e36c <prvInitialiseTaskLists+0x78>)
 800e340:	4a05      	ldr	r2, [pc, #20]	; (800e358 <prvInitialiseTaskLists+0x64>)
 800e342:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e344:	4b0a      	ldr	r3, [pc, #40]	; (800e370 <prvInitialiseTaskLists+0x7c>)
 800e346:	4a05      	ldr	r2, [pc, #20]	; (800e35c <prvInitialiseTaskLists+0x68>)
 800e348:	601a      	str	r2, [r3, #0]
}
 800e34a:	bf00      	nop
 800e34c:	3708      	adds	r7, #8
 800e34e:	46bd      	mov	sp, r7
 800e350:	bd80      	pop	{r7, pc}
 800e352:	bf00      	nop
 800e354:	20000514 	.word	0x20000514
 800e358:	200005a0 	.word	0x200005a0
 800e35c:	200005b4 	.word	0x200005b4
 800e360:	200005d0 	.word	0x200005d0
 800e364:	200005e4 	.word	0x200005e4
 800e368:	200005fc 	.word	0x200005fc
 800e36c:	200005c8 	.word	0x200005c8
 800e370:	200005cc 	.word	0x200005cc

0800e374 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e374:	b580      	push	{r7, lr}
 800e376:	b082      	sub	sp, #8
 800e378:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e37a:	e019      	b.n	800e3b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e37c:	f000 fbc6 	bl	800eb0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e380:	4b10      	ldr	r3, [pc, #64]	; (800e3c4 <prvCheckTasksWaitingTermination+0x50>)
 800e382:	68db      	ldr	r3, [r3, #12]
 800e384:	68db      	ldr	r3, [r3, #12]
 800e386:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	3304      	adds	r3, #4
 800e38c:	4618      	mov	r0, r3
 800e38e:	f7fe fc56 	bl	800cc3e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e392:	4b0d      	ldr	r3, [pc, #52]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	3b01      	subs	r3, #1
 800e398:	4a0b      	ldr	r2, [pc, #44]	; (800e3c8 <prvCheckTasksWaitingTermination+0x54>)
 800e39a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e39c:	4b0b      	ldr	r3, [pc, #44]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3b01      	subs	r3, #1
 800e3a2:	4a0a      	ldr	r2, [pc, #40]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e3a6:	f000 fbe5 	bl	800eb74 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e3aa:	6878      	ldr	r0, [r7, #4]
 800e3ac:	f000 f810 	bl	800e3d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e3b0:	4b06      	ldr	r3, [pc, #24]	; (800e3cc <prvCheckTasksWaitingTermination+0x58>)
 800e3b2:	681b      	ldr	r3, [r3, #0]
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d1e1      	bne.n	800e37c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e3b8:	bf00      	nop
 800e3ba:	bf00      	nop
 800e3bc:	3708      	adds	r7, #8
 800e3be:	46bd      	mov	sp, r7
 800e3c0:	bd80      	pop	{r7, pc}
 800e3c2:	bf00      	nop
 800e3c4:	200005e4 	.word	0x200005e4
 800e3c8:	20000610 	.word	0x20000610
 800e3cc:	200005f8 	.word	0x200005f8

0800e3d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e3d0:	b580      	push	{r7, lr}
 800e3d2:	b084      	sub	sp, #16
 800e3d4:	af00      	add	r7, sp, #0
 800e3d6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	d108      	bne.n	800e3f4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e3e2:	687b      	ldr	r3, [r7, #4]
 800e3e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e3e6:	4618      	mov	r0, r3
 800e3e8:	f000 fd48 	bl	800ee7c <vPortFree>
				vPortFree( pxTCB );
 800e3ec:	6878      	ldr	r0, [r7, #4]
 800e3ee:	f000 fd45 	bl	800ee7c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e3f2:	e01a      	b.n	800e42a <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e3f4:	687b      	ldr	r3, [r7, #4]
 800e3f6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e3fa:	2b01      	cmp	r3, #1
 800e3fc:	d103      	bne.n	800e406 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e3fe:	6878      	ldr	r0, [r7, #4]
 800e400:	f000 fd3c 	bl	800ee7c <vPortFree>
	}
 800e404:	e011      	b.n	800e42a <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800e40c:	2b02      	cmp	r3, #2
 800e40e:	d00c      	beq.n	800e42a <prvDeleteTCB+0x5a>
	__asm volatile
 800e410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e414:	b672      	cpsid	i
 800e416:	f383 8811 	msr	BASEPRI, r3
 800e41a:	f3bf 8f6f 	isb	sy
 800e41e:	f3bf 8f4f 	dsb	sy
 800e422:	b662      	cpsie	i
 800e424:	60fb      	str	r3, [r7, #12]
}
 800e426:	bf00      	nop
 800e428:	e7fe      	b.n	800e428 <prvDeleteTCB+0x58>
	}
 800e42a:	bf00      	nop
 800e42c:	3710      	adds	r7, #16
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
	...

0800e434 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e434:	b480      	push	{r7}
 800e436:	b083      	sub	sp, #12
 800e438:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e43a:	4b0c      	ldr	r3, [pc, #48]	; (800e46c <prvResetNextTaskUnblockTime+0x38>)
 800e43c:	681b      	ldr	r3, [r3, #0]
 800e43e:	681b      	ldr	r3, [r3, #0]
 800e440:	2b00      	cmp	r3, #0
 800e442:	d104      	bne.n	800e44e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e444:	4b0a      	ldr	r3, [pc, #40]	; (800e470 <prvResetNextTaskUnblockTime+0x3c>)
 800e446:	f04f 32ff 	mov.w	r2, #4294967295
 800e44a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e44c:	e008      	b.n	800e460 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e44e:	4b07      	ldr	r3, [pc, #28]	; (800e46c <prvResetNextTaskUnblockTime+0x38>)
 800e450:	681b      	ldr	r3, [r3, #0]
 800e452:	68db      	ldr	r3, [r3, #12]
 800e454:	68db      	ldr	r3, [r3, #12]
 800e456:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e458:	687b      	ldr	r3, [r7, #4]
 800e45a:	685b      	ldr	r3, [r3, #4]
 800e45c:	4a04      	ldr	r2, [pc, #16]	; (800e470 <prvResetNextTaskUnblockTime+0x3c>)
 800e45e:	6013      	str	r3, [r2, #0]
}
 800e460:	bf00      	nop
 800e462:	370c      	adds	r7, #12
 800e464:	46bd      	mov	sp, r7
 800e466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e46a:	4770      	bx	lr
 800e46c:	200005c8 	.word	0x200005c8
 800e470:	20000630 	.word	0x20000630

0800e474 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e474:	b480      	push	{r7}
 800e476:	b083      	sub	sp, #12
 800e478:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e47a:	4b0b      	ldr	r3, [pc, #44]	; (800e4a8 <xTaskGetSchedulerState+0x34>)
 800e47c:	681b      	ldr	r3, [r3, #0]
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d102      	bne.n	800e488 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e482:	2301      	movs	r3, #1
 800e484:	607b      	str	r3, [r7, #4]
 800e486:	e008      	b.n	800e49a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e488:	4b08      	ldr	r3, [pc, #32]	; (800e4ac <xTaskGetSchedulerState+0x38>)
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	d102      	bne.n	800e496 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e490:	2302      	movs	r3, #2
 800e492:	607b      	str	r3, [r7, #4]
 800e494:	e001      	b.n	800e49a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e496:	2300      	movs	r3, #0
 800e498:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e49a:	687b      	ldr	r3, [r7, #4]
	}
 800e49c:	4618      	mov	r0, r3
 800e49e:	370c      	adds	r7, #12
 800e4a0:	46bd      	mov	sp, r7
 800e4a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4a6:	4770      	bx	lr
 800e4a8:	2000061c 	.word	0x2000061c
 800e4ac:	20000638 	.word	0x20000638

0800e4b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800e4b0:	b580      	push	{r7, lr}
 800e4b2:	b084      	sub	sp, #16
 800e4b4:	af00      	add	r7, sp, #0
 800e4b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800e4bc:	2300      	movs	r3, #0
 800e4be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800e4c0:	687b      	ldr	r3, [r7, #4]
 800e4c2:	2b00      	cmp	r3, #0
 800e4c4:	d069      	beq.n	800e59a <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e4c6:	68bb      	ldr	r3, [r7, #8]
 800e4c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4ca:	4b36      	ldr	r3, [pc, #216]	; (800e5a4 <xTaskPriorityInherit+0xf4>)
 800e4cc:	681b      	ldr	r3, [r3, #0]
 800e4ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4d0:	429a      	cmp	r2, r3
 800e4d2:	d259      	bcs.n	800e588 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e4d4:	68bb      	ldr	r3, [r7, #8]
 800e4d6:	699b      	ldr	r3, [r3, #24]
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	db06      	blt.n	800e4ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4dc:	4b31      	ldr	r3, [pc, #196]	; (800e5a4 <xTaskPriorityInherit+0xf4>)
 800e4de:	681b      	ldr	r3, [r3, #0]
 800e4e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e4e2:	f1c3 0207 	rsb	r2, r3, #7
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e4ea:	68bb      	ldr	r3, [r7, #8]
 800e4ec:	6959      	ldr	r1, [r3, #20]
 800e4ee:	68bb      	ldr	r3, [r7, #8]
 800e4f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e4f2:	4613      	mov	r3, r2
 800e4f4:	009b      	lsls	r3, r3, #2
 800e4f6:	4413      	add	r3, r2
 800e4f8:	009b      	lsls	r3, r3, #2
 800e4fa:	4a2b      	ldr	r2, [pc, #172]	; (800e5a8 <xTaskPriorityInherit+0xf8>)
 800e4fc:	4413      	add	r3, r2
 800e4fe:	4299      	cmp	r1, r3
 800e500:	d13a      	bne.n	800e578 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e502:	68bb      	ldr	r3, [r7, #8]
 800e504:	3304      	adds	r3, #4
 800e506:	4618      	mov	r0, r3
 800e508:	f7fe fb99 	bl	800cc3e <uxListRemove>
 800e50c:	4603      	mov	r3, r0
 800e50e:	2b00      	cmp	r3, #0
 800e510:	d115      	bne.n	800e53e <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800e512:	68bb      	ldr	r3, [r7, #8]
 800e514:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e516:	4924      	ldr	r1, [pc, #144]	; (800e5a8 <xTaskPriorityInherit+0xf8>)
 800e518:	4613      	mov	r3, r2
 800e51a:	009b      	lsls	r3, r3, #2
 800e51c:	4413      	add	r3, r2
 800e51e:	009b      	lsls	r3, r3, #2
 800e520:	440b      	add	r3, r1
 800e522:	681b      	ldr	r3, [r3, #0]
 800e524:	2b00      	cmp	r3, #0
 800e526:	d10a      	bne.n	800e53e <xTaskPriorityInherit+0x8e>
 800e528:	68bb      	ldr	r3, [r7, #8]
 800e52a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e52c:	2201      	movs	r2, #1
 800e52e:	fa02 f303 	lsl.w	r3, r2, r3
 800e532:	43da      	mvns	r2, r3
 800e534:	4b1d      	ldr	r3, [pc, #116]	; (800e5ac <xTaskPriorityInherit+0xfc>)
 800e536:	681b      	ldr	r3, [r3, #0]
 800e538:	4013      	ands	r3, r2
 800e53a:	4a1c      	ldr	r2, [pc, #112]	; (800e5ac <xTaskPriorityInherit+0xfc>)
 800e53c:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e53e:	4b19      	ldr	r3, [pc, #100]	; (800e5a4 <xTaskPriorityInherit+0xf4>)
 800e540:	681b      	ldr	r3, [r3, #0]
 800e542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e544:	68bb      	ldr	r3, [r7, #8]
 800e546:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e548:	68bb      	ldr	r3, [r7, #8]
 800e54a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54c:	2201      	movs	r2, #1
 800e54e:	409a      	lsls	r2, r3
 800e550:	4b16      	ldr	r3, [pc, #88]	; (800e5ac <xTaskPriorityInherit+0xfc>)
 800e552:	681b      	ldr	r3, [r3, #0]
 800e554:	4313      	orrs	r3, r2
 800e556:	4a15      	ldr	r2, [pc, #84]	; (800e5ac <xTaskPriorityInherit+0xfc>)
 800e558:	6013      	str	r3, [r2, #0]
 800e55a:	68bb      	ldr	r3, [r7, #8]
 800e55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e55e:	4613      	mov	r3, r2
 800e560:	009b      	lsls	r3, r3, #2
 800e562:	4413      	add	r3, r2
 800e564:	009b      	lsls	r3, r3, #2
 800e566:	4a10      	ldr	r2, [pc, #64]	; (800e5a8 <xTaskPriorityInherit+0xf8>)
 800e568:	441a      	add	r2, r3
 800e56a:	68bb      	ldr	r3, [r7, #8]
 800e56c:	3304      	adds	r3, #4
 800e56e:	4619      	mov	r1, r3
 800e570:	4610      	mov	r0, r2
 800e572:	f7fe fb07 	bl	800cb84 <vListInsertEnd>
 800e576:	e004      	b.n	800e582 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e578:	4b0a      	ldr	r3, [pc, #40]	; (800e5a4 <xTaskPriorityInherit+0xf4>)
 800e57a:	681b      	ldr	r3, [r3, #0]
 800e57c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e57e:	68bb      	ldr	r3, [r7, #8]
 800e580:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e582:	2301      	movs	r3, #1
 800e584:	60fb      	str	r3, [r7, #12]
 800e586:	e008      	b.n	800e59a <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e588:	68bb      	ldr	r3, [r7, #8]
 800e58a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e58c:	4b05      	ldr	r3, [pc, #20]	; (800e5a4 <xTaskPriorityInherit+0xf4>)
 800e58e:	681b      	ldr	r3, [r3, #0]
 800e590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e592:	429a      	cmp	r2, r3
 800e594:	d201      	bcs.n	800e59a <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e596:	2301      	movs	r3, #1
 800e598:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e59a:	68fb      	ldr	r3, [r7, #12]
	}
 800e59c:	4618      	mov	r0, r3
 800e59e:	3710      	adds	r7, #16
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	bd80      	pop	{r7, pc}
 800e5a4:	20000510 	.word	0x20000510
 800e5a8:	20000514 	.word	0x20000514
 800e5ac:	20000618 	.word	0x20000618

0800e5b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b086      	sub	sp, #24
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e5bc:	2300      	movs	r3, #0
 800e5be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e5c0:	687b      	ldr	r3, [r7, #4]
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	d072      	beq.n	800e6ac <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e5c6:	4b3c      	ldr	r3, [pc, #240]	; (800e6b8 <xTaskPriorityDisinherit+0x108>)
 800e5c8:	681b      	ldr	r3, [r3, #0]
 800e5ca:	693a      	ldr	r2, [r7, #16]
 800e5cc:	429a      	cmp	r2, r3
 800e5ce:	d00c      	beq.n	800e5ea <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5d4:	b672      	cpsid	i
 800e5d6:	f383 8811 	msr	BASEPRI, r3
 800e5da:	f3bf 8f6f 	isb	sy
 800e5de:	f3bf 8f4f 	dsb	sy
 800e5e2:	b662      	cpsie	i
 800e5e4:	60fb      	str	r3, [r7, #12]
}
 800e5e6:	bf00      	nop
 800e5e8:	e7fe      	b.n	800e5e8 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e5ee:	2b00      	cmp	r3, #0
 800e5f0:	d10c      	bne.n	800e60c <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e5f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5f6:	b672      	cpsid	i
 800e5f8:	f383 8811 	msr	BASEPRI, r3
 800e5fc:	f3bf 8f6f 	isb	sy
 800e600:	f3bf 8f4f 	dsb	sy
 800e604:	b662      	cpsie	i
 800e606:	60bb      	str	r3, [r7, #8]
}
 800e608:	bf00      	nop
 800e60a:	e7fe      	b.n	800e60a <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e60c:	693b      	ldr	r3, [r7, #16]
 800e60e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e610:	1e5a      	subs	r2, r3, #1
 800e612:	693b      	ldr	r3, [r7, #16]
 800e614:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e616:	693b      	ldr	r3, [r7, #16]
 800e618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61a:	693b      	ldr	r3, [r7, #16]
 800e61c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e61e:	429a      	cmp	r2, r3
 800e620:	d044      	beq.n	800e6ac <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e622:	693b      	ldr	r3, [r7, #16]
 800e624:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e626:	2b00      	cmp	r3, #0
 800e628:	d140      	bne.n	800e6ac <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e62a:	693b      	ldr	r3, [r7, #16]
 800e62c:	3304      	adds	r3, #4
 800e62e:	4618      	mov	r0, r3
 800e630:	f7fe fb05 	bl	800cc3e <uxListRemove>
 800e634:	4603      	mov	r3, r0
 800e636:	2b00      	cmp	r3, #0
 800e638:	d115      	bne.n	800e666 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e63a:	693b      	ldr	r3, [r7, #16]
 800e63c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e63e:	491f      	ldr	r1, [pc, #124]	; (800e6bc <xTaskPriorityDisinherit+0x10c>)
 800e640:	4613      	mov	r3, r2
 800e642:	009b      	lsls	r3, r3, #2
 800e644:	4413      	add	r3, r2
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	440b      	add	r3, r1
 800e64a:	681b      	ldr	r3, [r3, #0]
 800e64c:	2b00      	cmp	r3, #0
 800e64e:	d10a      	bne.n	800e666 <xTaskPriorityDisinherit+0xb6>
 800e650:	693b      	ldr	r3, [r7, #16]
 800e652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e654:	2201      	movs	r2, #1
 800e656:	fa02 f303 	lsl.w	r3, r2, r3
 800e65a:	43da      	mvns	r2, r3
 800e65c:	4b18      	ldr	r3, [pc, #96]	; (800e6c0 <xTaskPriorityDisinherit+0x110>)
 800e65e:	681b      	ldr	r3, [r3, #0]
 800e660:	4013      	ands	r3, r2
 800e662:	4a17      	ldr	r2, [pc, #92]	; (800e6c0 <xTaskPriorityDisinherit+0x110>)
 800e664:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e666:	693b      	ldr	r3, [r7, #16]
 800e668:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e66a:	693b      	ldr	r3, [r7, #16]
 800e66c:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e672:	f1c3 0207 	rsb	r2, r3, #7
 800e676:	693b      	ldr	r3, [r7, #16]
 800e678:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e67a:	693b      	ldr	r3, [r7, #16]
 800e67c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e67e:	2201      	movs	r2, #1
 800e680:	409a      	lsls	r2, r3
 800e682:	4b0f      	ldr	r3, [pc, #60]	; (800e6c0 <xTaskPriorityDisinherit+0x110>)
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	4313      	orrs	r3, r2
 800e688:	4a0d      	ldr	r2, [pc, #52]	; (800e6c0 <xTaskPriorityDisinherit+0x110>)
 800e68a:	6013      	str	r3, [r2, #0]
 800e68c:	693b      	ldr	r3, [r7, #16]
 800e68e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e690:	4613      	mov	r3, r2
 800e692:	009b      	lsls	r3, r3, #2
 800e694:	4413      	add	r3, r2
 800e696:	009b      	lsls	r3, r3, #2
 800e698:	4a08      	ldr	r2, [pc, #32]	; (800e6bc <xTaskPriorityDisinherit+0x10c>)
 800e69a:	441a      	add	r2, r3
 800e69c:	693b      	ldr	r3, [r7, #16]
 800e69e:	3304      	adds	r3, #4
 800e6a0:	4619      	mov	r1, r3
 800e6a2:	4610      	mov	r0, r2
 800e6a4:	f7fe fa6e 	bl	800cb84 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e6a8:	2301      	movs	r3, #1
 800e6aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e6ac:	697b      	ldr	r3, [r7, #20]
	}
 800e6ae:	4618      	mov	r0, r3
 800e6b0:	3718      	adds	r7, #24
 800e6b2:	46bd      	mov	sp, r7
 800e6b4:	bd80      	pop	{r7, pc}
 800e6b6:	bf00      	nop
 800e6b8:	20000510 	.word	0x20000510
 800e6bc:	20000514 	.word	0x20000514
 800e6c0:	20000618 	.word	0x20000618

0800e6c4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e6c4:	b580      	push	{r7, lr}
 800e6c6:	b088      	sub	sp, #32
 800e6c8:	af00      	add	r7, sp, #0
 800e6ca:	6078      	str	r0, [r7, #4]
 800e6cc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e6d2:	2301      	movs	r3, #1
 800e6d4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	2b00      	cmp	r3, #0
 800e6da:	f000 8087 	beq.w	800e7ec <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e6de:	69bb      	ldr	r3, [r7, #24]
 800e6e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e6e2:	2b00      	cmp	r3, #0
 800e6e4:	d10c      	bne.n	800e700 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e6e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6ea:	b672      	cpsid	i
 800e6ec:	f383 8811 	msr	BASEPRI, r3
 800e6f0:	f3bf 8f6f 	isb	sy
 800e6f4:	f3bf 8f4f 	dsb	sy
 800e6f8:	b662      	cpsie	i
 800e6fa:	60fb      	str	r3, [r7, #12]
}
 800e6fc:	bf00      	nop
 800e6fe:	e7fe      	b.n	800e6fe <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d902      	bls.n	800e710 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	61fb      	str	r3, [r7, #28]
 800e70e:	e002      	b.n	800e716 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e710:	69bb      	ldr	r3, [r7, #24]
 800e712:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e714:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e716:	69bb      	ldr	r3, [r7, #24]
 800e718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e71a:	69fa      	ldr	r2, [r7, #28]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	d065      	beq.n	800e7ec <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e720:	69bb      	ldr	r3, [r7, #24]
 800e722:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e724:	697a      	ldr	r2, [r7, #20]
 800e726:	429a      	cmp	r2, r3
 800e728:	d160      	bne.n	800e7ec <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e72a:	4b32      	ldr	r3, [pc, #200]	; (800e7f4 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	69ba      	ldr	r2, [r7, #24]
 800e730:	429a      	cmp	r2, r3
 800e732:	d10c      	bne.n	800e74e <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e734:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e738:	b672      	cpsid	i
 800e73a:	f383 8811 	msr	BASEPRI, r3
 800e73e:	f3bf 8f6f 	isb	sy
 800e742:	f3bf 8f4f 	dsb	sy
 800e746:	b662      	cpsie	i
 800e748:	60bb      	str	r3, [r7, #8]
}
 800e74a:	bf00      	nop
 800e74c:	e7fe      	b.n	800e74c <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e74e:	69bb      	ldr	r3, [r7, #24]
 800e750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e752:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e754:	69bb      	ldr	r3, [r7, #24]
 800e756:	69fa      	ldr	r2, [r7, #28]
 800e758:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e75a:	69bb      	ldr	r3, [r7, #24]
 800e75c:	699b      	ldr	r3, [r3, #24]
 800e75e:	2b00      	cmp	r3, #0
 800e760:	db04      	blt.n	800e76c <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e762:	69fb      	ldr	r3, [r7, #28]
 800e764:	f1c3 0207 	rsb	r2, r3, #7
 800e768:	69bb      	ldr	r3, [r7, #24]
 800e76a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e76c:	69bb      	ldr	r3, [r7, #24]
 800e76e:	6959      	ldr	r1, [r3, #20]
 800e770:	693a      	ldr	r2, [r7, #16]
 800e772:	4613      	mov	r3, r2
 800e774:	009b      	lsls	r3, r3, #2
 800e776:	4413      	add	r3, r2
 800e778:	009b      	lsls	r3, r3, #2
 800e77a:	4a1f      	ldr	r2, [pc, #124]	; (800e7f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e77c:	4413      	add	r3, r2
 800e77e:	4299      	cmp	r1, r3
 800e780:	d134      	bne.n	800e7ec <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e782:	69bb      	ldr	r3, [r7, #24]
 800e784:	3304      	adds	r3, #4
 800e786:	4618      	mov	r0, r3
 800e788:	f7fe fa59 	bl	800cc3e <uxListRemove>
 800e78c:	4603      	mov	r3, r0
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d115      	bne.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e792:	69bb      	ldr	r3, [r7, #24]
 800e794:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e796:	4918      	ldr	r1, [pc, #96]	; (800e7f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e798:	4613      	mov	r3, r2
 800e79a:	009b      	lsls	r3, r3, #2
 800e79c:	4413      	add	r3, r2
 800e79e:	009b      	lsls	r3, r3, #2
 800e7a0:	440b      	add	r3, r1
 800e7a2:	681b      	ldr	r3, [r3, #0]
 800e7a4:	2b00      	cmp	r3, #0
 800e7a6:	d10a      	bne.n	800e7be <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e7a8:	69bb      	ldr	r3, [r7, #24]
 800e7aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7ac:	2201      	movs	r2, #1
 800e7ae:	fa02 f303 	lsl.w	r3, r2, r3
 800e7b2:	43da      	mvns	r2, r3
 800e7b4:	4b11      	ldr	r3, [pc, #68]	; (800e7fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7b6:	681b      	ldr	r3, [r3, #0]
 800e7b8:	4013      	ands	r3, r2
 800e7ba:	4a10      	ldr	r2, [pc, #64]	; (800e7fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7bc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e7be:	69bb      	ldr	r3, [r7, #24]
 800e7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e7c2:	2201      	movs	r2, #1
 800e7c4:	409a      	lsls	r2, r3
 800e7c6:	4b0d      	ldr	r3, [pc, #52]	; (800e7fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7c8:	681b      	ldr	r3, [r3, #0]
 800e7ca:	4313      	orrs	r3, r2
 800e7cc:	4a0b      	ldr	r2, [pc, #44]	; (800e7fc <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e7ce:	6013      	str	r3, [r2, #0]
 800e7d0:	69bb      	ldr	r3, [r7, #24]
 800e7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e7d4:	4613      	mov	r3, r2
 800e7d6:	009b      	lsls	r3, r3, #2
 800e7d8:	4413      	add	r3, r2
 800e7da:	009b      	lsls	r3, r3, #2
 800e7dc:	4a06      	ldr	r2, [pc, #24]	; (800e7f8 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e7de:	441a      	add	r2, r3
 800e7e0:	69bb      	ldr	r3, [r7, #24]
 800e7e2:	3304      	adds	r3, #4
 800e7e4:	4619      	mov	r1, r3
 800e7e6:	4610      	mov	r0, r2
 800e7e8:	f7fe f9cc 	bl	800cb84 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e7ec:	bf00      	nop
 800e7ee:	3720      	adds	r7, #32
 800e7f0:	46bd      	mov	sp, r7
 800e7f2:	bd80      	pop	{r7, pc}
 800e7f4:	20000510 	.word	0x20000510
 800e7f8:	20000514 	.word	0x20000514
 800e7fc:	20000618 	.word	0x20000618

0800e800 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e800:	b480      	push	{r7}
 800e802:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e804:	4b07      	ldr	r3, [pc, #28]	; (800e824 <pvTaskIncrementMutexHeldCount+0x24>)
 800e806:	681b      	ldr	r3, [r3, #0]
 800e808:	2b00      	cmp	r3, #0
 800e80a:	d004      	beq.n	800e816 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e80c:	4b05      	ldr	r3, [pc, #20]	; (800e824 <pvTaskIncrementMutexHeldCount+0x24>)
 800e80e:	681b      	ldr	r3, [r3, #0]
 800e810:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e812:	3201      	adds	r2, #1
 800e814:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e816:	4b03      	ldr	r3, [pc, #12]	; (800e824 <pvTaskIncrementMutexHeldCount+0x24>)
 800e818:	681b      	ldr	r3, [r3, #0]
	}
 800e81a:	4618      	mov	r0, r3
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	20000510 	.word	0x20000510

0800e828 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e828:	b580      	push	{r7, lr}
 800e82a:	b084      	sub	sp, #16
 800e82c:	af00      	add	r7, sp, #0
 800e82e:	6078      	str	r0, [r7, #4]
 800e830:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e832:	4b29      	ldr	r3, [pc, #164]	; (800e8d8 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e838:	4b28      	ldr	r3, [pc, #160]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e83a:	681b      	ldr	r3, [r3, #0]
 800e83c:	3304      	adds	r3, #4
 800e83e:	4618      	mov	r0, r3
 800e840:	f7fe f9fd 	bl	800cc3e <uxListRemove>
 800e844:	4603      	mov	r3, r0
 800e846:	2b00      	cmp	r3, #0
 800e848:	d10b      	bne.n	800e862 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e84a:	4b24      	ldr	r3, [pc, #144]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e850:	2201      	movs	r2, #1
 800e852:	fa02 f303 	lsl.w	r3, r2, r3
 800e856:	43da      	mvns	r2, r3
 800e858:	4b21      	ldr	r3, [pc, #132]	; (800e8e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e85a:	681b      	ldr	r3, [r3, #0]
 800e85c:	4013      	ands	r3, r2
 800e85e:	4a20      	ldr	r2, [pc, #128]	; (800e8e0 <prvAddCurrentTaskToDelayedList+0xb8>)
 800e860:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e868:	d10a      	bne.n	800e880 <prvAddCurrentTaskToDelayedList+0x58>
 800e86a:	683b      	ldr	r3, [r7, #0]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d007      	beq.n	800e880 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e870:	4b1a      	ldr	r3, [pc, #104]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e872:	681b      	ldr	r3, [r3, #0]
 800e874:	3304      	adds	r3, #4
 800e876:	4619      	mov	r1, r3
 800e878:	481a      	ldr	r0, [pc, #104]	; (800e8e4 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e87a:	f7fe f983 	bl	800cb84 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e87e:	e026      	b.n	800e8ce <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e880:	68fa      	ldr	r2, [r7, #12]
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e888:	4b14      	ldr	r3, [pc, #80]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e88a:	681b      	ldr	r3, [r3, #0]
 800e88c:	68ba      	ldr	r2, [r7, #8]
 800e88e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e890:	68ba      	ldr	r2, [r7, #8]
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	429a      	cmp	r2, r3
 800e896:	d209      	bcs.n	800e8ac <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e898:	4b13      	ldr	r3, [pc, #76]	; (800e8e8 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e89a:	681a      	ldr	r2, [r3, #0]
 800e89c:	4b0f      	ldr	r3, [pc, #60]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	3304      	adds	r3, #4
 800e8a2:	4619      	mov	r1, r3
 800e8a4:	4610      	mov	r0, r2
 800e8a6:	f7fe f991 	bl	800cbcc <vListInsert>
}
 800e8aa:	e010      	b.n	800e8ce <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e8ac:	4b0f      	ldr	r3, [pc, #60]	; (800e8ec <prvAddCurrentTaskToDelayedList+0xc4>)
 800e8ae:	681a      	ldr	r2, [r3, #0]
 800e8b0:	4b0a      	ldr	r3, [pc, #40]	; (800e8dc <prvAddCurrentTaskToDelayedList+0xb4>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	3304      	adds	r3, #4
 800e8b6:	4619      	mov	r1, r3
 800e8b8:	4610      	mov	r0, r2
 800e8ba:	f7fe f987 	bl	800cbcc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e8be:	4b0c      	ldr	r3, [pc, #48]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e8c0:	681b      	ldr	r3, [r3, #0]
 800e8c2:	68ba      	ldr	r2, [r7, #8]
 800e8c4:	429a      	cmp	r2, r3
 800e8c6:	d202      	bcs.n	800e8ce <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e8c8:	4a09      	ldr	r2, [pc, #36]	; (800e8f0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	6013      	str	r3, [r2, #0]
}
 800e8ce:	bf00      	nop
 800e8d0:	3710      	adds	r7, #16
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20000614 	.word	0x20000614
 800e8dc:	20000510 	.word	0x20000510
 800e8e0:	20000618 	.word	0x20000618
 800e8e4:	200005fc 	.word	0x200005fc
 800e8e8:	200005cc 	.word	0x200005cc
 800e8ec:	200005c8 	.word	0x200005c8
 800e8f0:	20000630 	.word	0x20000630

0800e8f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e8f4:	b480      	push	{r7}
 800e8f6:	b085      	sub	sp, #20
 800e8f8:	af00      	add	r7, sp, #0
 800e8fa:	60f8      	str	r0, [r7, #12]
 800e8fc:	60b9      	str	r1, [r7, #8]
 800e8fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e900:	68fb      	ldr	r3, [r7, #12]
 800e902:	3b04      	subs	r3, #4
 800e904:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e906:	68fb      	ldr	r3, [r7, #12]
 800e908:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e90c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	3b04      	subs	r3, #4
 800e912:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e914:	68bb      	ldr	r3, [r7, #8]
 800e916:	f023 0201 	bic.w	r2, r3, #1
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e91e:	68fb      	ldr	r3, [r7, #12]
 800e920:	3b04      	subs	r3, #4
 800e922:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e924:	4a0c      	ldr	r2, [pc, #48]	; (800e958 <pxPortInitialiseStack+0x64>)
 800e926:	68fb      	ldr	r3, [r7, #12]
 800e928:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e92a:	68fb      	ldr	r3, [r7, #12]
 800e92c:	3b14      	subs	r3, #20
 800e92e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e930:	687a      	ldr	r2, [r7, #4]
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	3b04      	subs	r3, #4
 800e93a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e93c:	68fb      	ldr	r3, [r7, #12]
 800e93e:	f06f 0202 	mvn.w	r2, #2
 800e942:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e944:	68fb      	ldr	r3, [r7, #12]
 800e946:	3b20      	subs	r3, #32
 800e948:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e94a:	68fb      	ldr	r3, [r7, #12]
}
 800e94c:	4618      	mov	r0, r3
 800e94e:	3714      	adds	r7, #20
 800e950:	46bd      	mov	sp, r7
 800e952:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e956:	4770      	bx	lr
 800e958:	0800e95d 	.word	0x0800e95d

0800e95c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e95c:	b480      	push	{r7}
 800e95e:	b085      	sub	sp, #20
 800e960:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e962:	2300      	movs	r3, #0
 800e964:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e966:	4b14      	ldr	r3, [pc, #80]	; (800e9b8 <prvTaskExitError+0x5c>)
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e96e:	d00c      	beq.n	800e98a <prvTaskExitError+0x2e>
	__asm volatile
 800e970:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e974:	b672      	cpsid	i
 800e976:	f383 8811 	msr	BASEPRI, r3
 800e97a:	f3bf 8f6f 	isb	sy
 800e97e:	f3bf 8f4f 	dsb	sy
 800e982:	b662      	cpsie	i
 800e984:	60fb      	str	r3, [r7, #12]
}
 800e986:	bf00      	nop
 800e988:	e7fe      	b.n	800e988 <prvTaskExitError+0x2c>
	__asm volatile
 800e98a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e98e:	b672      	cpsid	i
 800e990:	f383 8811 	msr	BASEPRI, r3
 800e994:	f3bf 8f6f 	isb	sy
 800e998:	f3bf 8f4f 	dsb	sy
 800e99c:	b662      	cpsie	i
 800e99e:	60bb      	str	r3, [r7, #8]
}
 800e9a0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e9a2:	bf00      	nop
 800e9a4:	687b      	ldr	r3, [r7, #4]
 800e9a6:	2b00      	cmp	r3, #0
 800e9a8:	d0fc      	beq.n	800e9a4 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e9aa:	bf00      	nop
 800e9ac:	bf00      	nop
 800e9ae:	3714      	adds	r7, #20
 800e9b0:	46bd      	mov	sp, r7
 800e9b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9b6:	4770      	bx	lr
 800e9b8:	20000060 	.word	0x20000060
 800e9bc:	00000000 	.word	0x00000000

0800e9c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e9c0:	4b07      	ldr	r3, [pc, #28]	; (800e9e0 <pxCurrentTCBConst2>)
 800e9c2:	6819      	ldr	r1, [r3, #0]
 800e9c4:	6808      	ldr	r0, [r1, #0]
 800e9c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9ca:	f380 8809 	msr	PSP, r0
 800e9ce:	f3bf 8f6f 	isb	sy
 800e9d2:	f04f 0000 	mov.w	r0, #0
 800e9d6:	f380 8811 	msr	BASEPRI, r0
 800e9da:	4770      	bx	lr
 800e9dc:	f3af 8000 	nop.w

0800e9e0 <pxCurrentTCBConst2>:
 800e9e0:	20000510 	.word	0x20000510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e9e4:	bf00      	nop
 800e9e6:	bf00      	nop

0800e9e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e9e8:	4808      	ldr	r0, [pc, #32]	; (800ea0c <prvPortStartFirstTask+0x24>)
 800e9ea:	6800      	ldr	r0, [r0, #0]
 800e9ec:	6800      	ldr	r0, [r0, #0]
 800e9ee:	f380 8808 	msr	MSP, r0
 800e9f2:	f04f 0000 	mov.w	r0, #0
 800e9f6:	f380 8814 	msr	CONTROL, r0
 800e9fa:	b662      	cpsie	i
 800e9fc:	b661      	cpsie	f
 800e9fe:	f3bf 8f4f 	dsb	sy
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	df00      	svc	0
 800ea08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ea0a:	bf00      	nop
 800ea0c:	e000ed08 	.word	0xe000ed08

0800ea10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b084      	sub	sp, #16
 800ea14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800ea16:	4b37      	ldr	r3, [pc, #220]	; (800eaf4 <xPortStartScheduler+0xe4>)
 800ea18:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	781b      	ldrb	r3, [r3, #0]
 800ea1e:	b2db      	uxtb	r3, r3
 800ea20:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	22ff      	movs	r2, #255	; 0xff
 800ea26:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	781b      	ldrb	r3, [r3, #0]
 800ea2c:	b2db      	uxtb	r3, r3
 800ea2e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ea30:	78fb      	ldrb	r3, [r7, #3]
 800ea32:	b2db      	uxtb	r3, r3
 800ea34:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ea38:	b2da      	uxtb	r2, r3
 800ea3a:	4b2f      	ldr	r3, [pc, #188]	; (800eaf8 <xPortStartScheduler+0xe8>)
 800ea3c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ea3e:	4b2f      	ldr	r3, [pc, #188]	; (800eafc <xPortStartScheduler+0xec>)
 800ea40:	2207      	movs	r2, #7
 800ea42:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea44:	e009      	b.n	800ea5a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800ea46:	4b2d      	ldr	r3, [pc, #180]	; (800eafc <xPortStartScheduler+0xec>)
 800ea48:	681b      	ldr	r3, [r3, #0]
 800ea4a:	3b01      	subs	r3, #1
 800ea4c:	4a2b      	ldr	r2, [pc, #172]	; (800eafc <xPortStartScheduler+0xec>)
 800ea4e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ea50:	78fb      	ldrb	r3, [r7, #3]
 800ea52:	b2db      	uxtb	r3, r3
 800ea54:	005b      	lsls	r3, r3, #1
 800ea56:	b2db      	uxtb	r3, r3
 800ea58:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ea5a:	78fb      	ldrb	r3, [r7, #3]
 800ea5c:	b2db      	uxtb	r3, r3
 800ea5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ea62:	2b80      	cmp	r3, #128	; 0x80
 800ea64:	d0ef      	beq.n	800ea46 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ea66:	4b25      	ldr	r3, [pc, #148]	; (800eafc <xPortStartScheduler+0xec>)
 800ea68:	681b      	ldr	r3, [r3, #0]
 800ea6a:	f1c3 0307 	rsb	r3, r3, #7
 800ea6e:	2b04      	cmp	r3, #4
 800ea70:	d00c      	beq.n	800ea8c <xPortStartScheduler+0x7c>
	__asm volatile
 800ea72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea76:	b672      	cpsid	i
 800ea78:	f383 8811 	msr	BASEPRI, r3
 800ea7c:	f3bf 8f6f 	isb	sy
 800ea80:	f3bf 8f4f 	dsb	sy
 800ea84:	b662      	cpsie	i
 800ea86:	60bb      	str	r3, [r7, #8]
}
 800ea88:	bf00      	nop
 800ea8a:	e7fe      	b.n	800ea8a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ea8c:	4b1b      	ldr	r3, [pc, #108]	; (800eafc <xPortStartScheduler+0xec>)
 800ea8e:	681b      	ldr	r3, [r3, #0]
 800ea90:	021b      	lsls	r3, r3, #8
 800ea92:	4a1a      	ldr	r2, [pc, #104]	; (800eafc <xPortStartScheduler+0xec>)
 800ea94:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ea96:	4b19      	ldr	r3, [pc, #100]	; (800eafc <xPortStartScheduler+0xec>)
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ea9e:	4a17      	ldr	r2, [pc, #92]	; (800eafc <xPortStartScheduler+0xec>)
 800eaa0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800eaa2:	687b      	ldr	r3, [r7, #4]
 800eaa4:	b2da      	uxtb	r2, r3
 800eaa6:	68fb      	ldr	r3, [r7, #12]
 800eaa8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800eaaa:	4b15      	ldr	r3, [pc, #84]	; (800eb00 <xPortStartScheduler+0xf0>)
 800eaac:	681b      	ldr	r3, [r3, #0]
 800eaae:	4a14      	ldr	r2, [pc, #80]	; (800eb00 <xPortStartScheduler+0xf0>)
 800eab0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eab4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800eab6:	4b12      	ldr	r3, [pc, #72]	; (800eb00 <xPortStartScheduler+0xf0>)
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	4a11      	ldr	r2, [pc, #68]	; (800eb00 <xPortStartScheduler+0xf0>)
 800eabc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800eac0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800eac2:	f000 f8dd 	bl	800ec80 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800eac6:	4b0f      	ldr	r3, [pc, #60]	; (800eb04 <xPortStartScheduler+0xf4>)
 800eac8:	2200      	movs	r2, #0
 800eaca:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800eacc:	f000 f8fc 	bl	800ecc8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800ead0:	4b0d      	ldr	r3, [pc, #52]	; (800eb08 <xPortStartScheduler+0xf8>)
 800ead2:	681b      	ldr	r3, [r3, #0]
 800ead4:	4a0c      	ldr	r2, [pc, #48]	; (800eb08 <xPortStartScheduler+0xf8>)
 800ead6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800eada:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800eadc:	f7ff ff84 	bl	800e9e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800eae0:	f7ff fa5a 	bl	800df98 <vTaskSwitchContext>
	prvTaskExitError();
 800eae4:	f7ff ff3a 	bl	800e95c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800eae8:	2300      	movs	r3, #0
}
 800eaea:	4618      	mov	r0, r3
 800eaec:	3710      	adds	r7, #16
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}
 800eaf2:	bf00      	nop
 800eaf4:	e000e400 	.word	0xe000e400
 800eaf8:	2000063c 	.word	0x2000063c
 800eafc:	20000640 	.word	0x20000640
 800eb00:	e000ed20 	.word	0xe000ed20
 800eb04:	20000060 	.word	0x20000060
 800eb08:	e000ef34 	.word	0xe000ef34

0800eb0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800eb0c:	b480      	push	{r7}
 800eb0e:	b083      	sub	sp, #12
 800eb10:	af00      	add	r7, sp, #0
	__asm volatile
 800eb12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb16:	b672      	cpsid	i
 800eb18:	f383 8811 	msr	BASEPRI, r3
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	f3bf 8f4f 	dsb	sy
 800eb24:	b662      	cpsie	i
 800eb26:	607b      	str	r3, [r7, #4]
}
 800eb28:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800eb2a:	4b10      	ldr	r3, [pc, #64]	; (800eb6c <vPortEnterCritical+0x60>)
 800eb2c:	681b      	ldr	r3, [r3, #0]
 800eb2e:	3301      	adds	r3, #1
 800eb30:	4a0e      	ldr	r2, [pc, #56]	; (800eb6c <vPortEnterCritical+0x60>)
 800eb32:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800eb34:	4b0d      	ldr	r3, [pc, #52]	; (800eb6c <vPortEnterCritical+0x60>)
 800eb36:	681b      	ldr	r3, [r3, #0]
 800eb38:	2b01      	cmp	r3, #1
 800eb3a:	d111      	bne.n	800eb60 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800eb3c:	4b0c      	ldr	r3, [pc, #48]	; (800eb70 <vPortEnterCritical+0x64>)
 800eb3e:	681b      	ldr	r3, [r3, #0]
 800eb40:	b2db      	uxtb	r3, r3
 800eb42:	2b00      	cmp	r3, #0
 800eb44:	d00c      	beq.n	800eb60 <vPortEnterCritical+0x54>
	__asm volatile
 800eb46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb4a:	b672      	cpsid	i
 800eb4c:	f383 8811 	msr	BASEPRI, r3
 800eb50:	f3bf 8f6f 	isb	sy
 800eb54:	f3bf 8f4f 	dsb	sy
 800eb58:	b662      	cpsie	i
 800eb5a:	603b      	str	r3, [r7, #0]
}
 800eb5c:	bf00      	nop
 800eb5e:	e7fe      	b.n	800eb5e <vPortEnterCritical+0x52>
	}
}
 800eb60:	bf00      	nop
 800eb62:	370c      	adds	r7, #12
 800eb64:	46bd      	mov	sp, r7
 800eb66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb6a:	4770      	bx	lr
 800eb6c:	20000060 	.word	0x20000060
 800eb70:	e000ed04 	.word	0xe000ed04

0800eb74 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800eb74:	b480      	push	{r7}
 800eb76:	b083      	sub	sp, #12
 800eb78:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800eb7a:	4b13      	ldr	r3, [pc, #76]	; (800ebc8 <vPortExitCritical+0x54>)
 800eb7c:	681b      	ldr	r3, [r3, #0]
 800eb7e:	2b00      	cmp	r3, #0
 800eb80:	d10c      	bne.n	800eb9c <vPortExitCritical+0x28>
	__asm volatile
 800eb82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb86:	b672      	cpsid	i
 800eb88:	f383 8811 	msr	BASEPRI, r3
 800eb8c:	f3bf 8f6f 	isb	sy
 800eb90:	f3bf 8f4f 	dsb	sy
 800eb94:	b662      	cpsie	i
 800eb96:	607b      	str	r3, [r7, #4]
}
 800eb98:	bf00      	nop
 800eb9a:	e7fe      	b.n	800eb9a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800eb9c:	4b0a      	ldr	r3, [pc, #40]	; (800ebc8 <vPortExitCritical+0x54>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	3b01      	subs	r3, #1
 800eba2:	4a09      	ldr	r2, [pc, #36]	; (800ebc8 <vPortExitCritical+0x54>)
 800eba4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800eba6:	4b08      	ldr	r3, [pc, #32]	; (800ebc8 <vPortExitCritical+0x54>)
 800eba8:	681b      	ldr	r3, [r3, #0]
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d105      	bne.n	800ebba <vPortExitCritical+0x46>
 800ebae:	2300      	movs	r3, #0
 800ebb0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ebb2:	683b      	ldr	r3, [r7, #0]
 800ebb4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ebb8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800ebba:	bf00      	nop
 800ebbc:	370c      	adds	r7, #12
 800ebbe:	46bd      	mov	sp, r7
 800ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebc4:	4770      	bx	lr
 800ebc6:	bf00      	nop
 800ebc8:	20000060 	.word	0x20000060
 800ebcc:	00000000 	.word	0x00000000

0800ebd0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ebd0:	f3ef 8009 	mrs	r0, PSP
 800ebd4:	f3bf 8f6f 	isb	sy
 800ebd8:	4b15      	ldr	r3, [pc, #84]	; (800ec30 <pxCurrentTCBConst>)
 800ebda:	681a      	ldr	r2, [r3, #0]
 800ebdc:	f01e 0f10 	tst.w	lr, #16
 800ebe0:	bf08      	it	eq
 800ebe2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ebe6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebea:	6010      	str	r0, [r2, #0]
 800ebec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ebf0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800ebf4:	b672      	cpsid	i
 800ebf6:	f380 8811 	msr	BASEPRI, r0
 800ebfa:	f3bf 8f4f 	dsb	sy
 800ebfe:	f3bf 8f6f 	isb	sy
 800ec02:	b662      	cpsie	i
 800ec04:	f7ff f9c8 	bl	800df98 <vTaskSwitchContext>
 800ec08:	f04f 0000 	mov.w	r0, #0
 800ec0c:	f380 8811 	msr	BASEPRI, r0
 800ec10:	bc09      	pop	{r0, r3}
 800ec12:	6819      	ldr	r1, [r3, #0]
 800ec14:	6808      	ldr	r0, [r1, #0]
 800ec16:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec1a:	f01e 0f10 	tst.w	lr, #16
 800ec1e:	bf08      	it	eq
 800ec20:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800ec24:	f380 8809 	msr	PSP, r0
 800ec28:	f3bf 8f6f 	isb	sy
 800ec2c:	4770      	bx	lr
 800ec2e:	bf00      	nop

0800ec30 <pxCurrentTCBConst>:
 800ec30:	20000510 	.word	0x20000510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800ec34:	bf00      	nop
 800ec36:	bf00      	nop

0800ec38 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800ec38:	b580      	push	{r7, lr}
 800ec3a:	b082      	sub	sp, #8
 800ec3c:	af00      	add	r7, sp, #0
	__asm volatile
 800ec3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec42:	b672      	cpsid	i
 800ec44:	f383 8811 	msr	BASEPRI, r3
 800ec48:	f3bf 8f6f 	isb	sy
 800ec4c:	f3bf 8f4f 	dsb	sy
 800ec50:	b662      	cpsie	i
 800ec52:	607b      	str	r3, [r7, #4]
}
 800ec54:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ec56:	f7ff f8e5 	bl	800de24 <xTaskIncrementTick>
 800ec5a:	4603      	mov	r3, r0
 800ec5c:	2b00      	cmp	r3, #0
 800ec5e:	d003      	beq.n	800ec68 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ec60:	4b06      	ldr	r3, [pc, #24]	; (800ec7c <SysTick_Handler+0x44>)
 800ec62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec66:	601a      	str	r2, [r3, #0]
 800ec68:	2300      	movs	r3, #0
 800ec6a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ec6c:	683b      	ldr	r3, [r7, #0]
 800ec6e:	f383 8811 	msr	BASEPRI, r3
}
 800ec72:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ec74:	bf00      	nop
 800ec76:	3708      	adds	r7, #8
 800ec78:	46bd      	mov	sp, r7
 800ec7a:	bd80      	pop	{r7, pc}
 800ec7c:	e000ed04 	.word	0xe000ed04

0800ec80 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ec80:	b480      	push	{r7}
 800ec82:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ec84:	4b0b      	ldr	r3, [pc, #44]	; (800ecb4 <vPortSetupTimerInterrupt+0x34>)
 800ec86:	2200      	movs	r2, #0
 800ec88:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ec8a:	4b0b      	ldr	r3, [pc, #44]	; (800ecb8 <vPortSetupTimerInterrupt+0x38>)
 800ec8c:	2200      	movs	r2, #0
 800ec8e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ec90:	4b0a      	ldr	r3, [pc, #40]	; (800ecbc <vPortSetupTimerInterrupt+0x3c>)
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	4a0a      	ldr	r2, [pc, #40]	; (800ecc0 <vPortSetupTimerInterrupt+0x40>)
 800ec96:	fba2 2303 	umull	r2, r3, r2, r3
 800ec9a:	099b      	lsrs	r3, r3, #6
 800ec9c:	4a09      	ldr	r2, [pc, #36]	; (800ecc4 <vPortSetupTimerInterrupt+0x44>)
 800ec9e:	3b01      	subs	r3, #1
 800eca0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800eca2:	4b04      	ldr	r3, [pc, #16]	; (800ecb4 <vPortSetupTimerInterrupt+0x34>)
 800eca4:	2207      	movs	r2, #7
 800eca6:	601a      	str	r2, [r3, #0]
}
 800eca8:	bf00      	nop
 800ecaa:	46bd      	mov	sp, r7
 800ecac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecb0:	4770      	bx	lr
 800ecb2:	bf00      	nop
 800ecb4:	e000e010 	.word	0xe000e010
 800ecb8:	e000e018 	.word	0xe000e018
 800ecbc:	20000054 	.word	0x20000054
 800ecc0:	10624dd3 	.word	0x10624dd3
 800ecc4:	e000e014 	.word	0xe000e014

0800ecc8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ecc8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ecd8 <vPortEnableVFP+0x10>
 800eccc:	6801      	ldr	r1, [r0, #0]
 800ecce:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ecd2:	6001      	str	r1, [r0, #0]
 800ecd4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ecd6:	bf00      	nop
 800ecd8:	e000ed88 	.word	0xe000ed88

0800ecdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800ecdc:	b580      	push	{r7, lr}
 800ecde:	b08a      	sub	sp, #40	; 0x28
 800ece0:	af00      	add	r7, sp, #0
 800ece2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800ece4:	2300      	movs	r3, #0
 800ece6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800ece8:	f7fe ffe0 	bl	800dcac <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800ecec:	4b5e      	ldr	r3, [pc, #376]	; (800ee68 <pvPortMalloc+0x18c>)
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d101      	bne.n	800ecf8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800ecf4:	f000 f920 	bl	800ef38 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ecf8:	4b5c      	ldr	r3, [pc, #368]	; (800ee6c <pvPortMalloc+0x190>)
 800ecfa:	681a      	ldr	r2, [r3, #0]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	4013      	ands	r3, r2
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	f040 8092 	bne.w	800ee2a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2b00      	cmp	r3, #0
 800ed0a:	d01f      	beq.n	800ed4c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800ed0c:	2208      	movs	r2, #8
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	4413      	add	r3, r2
 800ed12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	f003 0307 	and.w	r3, r3, #7
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d016      	beq.n	800ed4c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800ed1e:	687b      	ldr	r3, [r7, #4]
 800ed20:	f023 0307 	bic.w	r3, r3, #7
 800ed24:	3308      	adds	r3, #8
 800ed26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	f003 0307 	and.w	r3, r3, #7
 800ed2e:	2b00      	cmp	r3, #0
 800ed30:	d00c      	beq.n	800ed4c <pvPortMalloc+0x70>
	__asm volatile
 800ed32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed36:	b672      	cpsid	i
 800ed38:	f383 8811 	msr	BASEPRI, r3
 800ed3c:	f3bf 8f6f 	isb	sy
 800ed40:	f3bf 8f4f 	dsb	sy
 800ed44:	b662      	cpsie	i
 800ed46:	617b      	str	r3, [r7, #20]
}
 800ed48:	bf00      	nop
 800ed4a:	e7fe      	b.n	800ed4a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ed4c:	687b      	ldr	r3, [r7, #4]
 800ed4e:	2b00      	cmp	r3, #0
 800ed50:	d06b      	beq.n	800ee2a <pvPortMalloc+0x14e>
 800ed52:	4b47      	ldr	r3, [pc, #284]	; (800ee70 <pvPortMalloc+0x194>)
 800ed54:	681b      	ldr	r3, [r3, #0]
 800ed56:	687a      	ldr	r2, [r7, #4]
 800ed58:	429a      	cmp	r2, r3
 800ed5a:	d866      	bhi.n	800ee2a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ed5c:	4b45      	ldr	r3, [pc, #276]	; (800ee74 <pvPortMalloc+0x198>)
 800ed5e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ed60:	4b44      	ldr	r3, [pc, #272]	; (800ee74 <pvPortMalloc+0x198>)
 800ed62:	681b      	ldr	r3, [r3, #0]
 800ed64:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed66:	e004      	b.n	800ed72 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800ed68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ed6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed6e:	681b      	ldr	r3, [r3, #0]
 800ed70:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ed72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed74:	685b      	ldr	r3, [r3, #4]
 800ed76:	687a      	ldr	r2, [r7, #4]
 800ed78:	429a      	cmp	r2, r3
 800ed7a:	d903      	bls.n	800ed84 <pvPortMalloc+0xa8>
 800ed7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed7e:	681b      	ldr	r3, [r3, #0]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1f1      	bne.n	800ed68 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ed84:	4b38      	ldr	r3, [pc, #224]	; (800ee68 <pvPortMalloc+0x18c>)
 800ed86:	681b      	ldr	r3, [r3, #0]
 800ed88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed8a:	429a      	cmp	r2, r3
 800ed8c:	d04d      	beq.n	800ee2a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ed8e:	6a3b      	ldr	r3, [r7, #32]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2208      	movs	r2, #8
 800ed94:	4413      	add	r3, r2
 800ed96:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ed98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ed9a:	681a      	ldr	r2, [r3, #0]
 800ed9c:	6a3b      	ldr	r3, [r7, #32]
 800ed9e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800eda0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eda2:	685a      	ldr	r2, [r3, #4]
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	1ad2      	subs	r2, r2, r3
 800eda8:	2308      	movs	r3, #8
 800edaa:	005b      	lsls	r3, r3, #1
 800edac:	429a      	cmp	r2, r3
 800edae:	d921      	bls.n	800edf4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800edb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	4413      	add	r3, r2
 800edb6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800edb8:	69bb      	ldr	r3, [r7, #24]
 800edba:	f003 0307 	and.w	r3, r3, #7
 800edbe:	2b00      	cmp	r3, #0
 800edc0:	d00c      	beq.n	800eddc <pvPortMalloc+0x100>
	__asm volatile
 800edc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edc6:	b672      	cpsid	i
 800edc8:	f383 8811 	msr	BASEPRI, r3
 800edcc:	f3bf 8f6f 	isb	sy
 800edd0:	f3bf 8f4f 	dsb	sy
 800edd4:	b662      	cpsie	i
 800edd6:	613b      	str	r3, [r7, #16]
}
 800edd8:	bf00      	nop
 800edda:	e7fe      	b.n	800edda <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800eddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edde:	685a      	ldr	r2, [r3, #4]
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	1ad2      	subs	r2, r2, r3
 800ede4:	69bb      	ldr	r3, [r7, #24]
 800ede6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ede8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edea:	687a      	ldr	r2, [r7, #4]
 800edec:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800edee:	69b8      	ldr	r0, [r7, #24]
 800edf0:	f000 f904 	bl	800effc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800edf4:	4b1e      	ldr	r3, [pc, #120]	; (800ee70 <pvPortMalloc+0x194>)
 800edf6:	681a      	ldr	r2, [r3, #0]
 800edf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800edfa:	685b      	ldr	r3, [r3, #4]
 800edfc:	1ad3      	subs	r3, r2, r3
 800edfe:	4a1c      	ldr	r2, [pc, #112]	; (800ee70 <pvPortMalloc+0x194>)
 800ee00:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ee02:	4b1b      	ldr	r3, [pc, #108]	; (800ee70 <pvPortMalloc+0x194>)
 800ee04:	681a      	ldr	r2, [r3, #0]
 800ee06:	4b1c      	ldr	r3, [pc, #112]	; (800ee78 <pvPortMalloc+0x19c>)
 800ee08:	681b      	ldr	r3, [r3, #0]
 800ee0a:	429a      	cmp	r2, r3
 800ee0c:	d203      	bcs.n	800ee16 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ee0e:	4b18      	ldr	r3, [pc, #96]	; (800ee70 <pvPortMalloc+0x194>)
 800ee10:	681b      	ldr	r3, [r3, #0]
 800ee12:	4a19      	ldr	r2, [pc, #100]	; (800ee78 <pvPortMalloc+0x19c>)
 800ee14:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ee16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee18:	685a      	ldr	r2, [r3, #4]
 800ee1a:	4b14      	ldr	r3, [pc, #80]	; (800ee6c <pvPortMalloc+0x190>)
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	431a      	orrs	r2, r3
 800ee20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee22:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800ee24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee26:	2200      	movs	r2, #0
 800ee28:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800ee2a:	f7fe ff4d 	bl	800dcc8 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	2b00      	cmp	r3, #0
 800ee32:	d101      	bne.n	800ee38 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800ee34:	f7f2 f898 	bl	8000f68 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ee38:	69fb      	ldr	r3, [r7, #28]
 800ee3a:	f003 0307 	and.w	r3, r3, #7
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d00c      	beq.n	800ee5c <pvPortMalloc+0x180>
	__asm volatile
 800ee42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee46:	b672      	cpsid	i
 800ee48:	f383 8811 	msr	BASEPRI, r3
 800ee4c:	f3bf 8f6f 	isb	sy
 800ee50:	f3bf 8f4f 	dsb	sy
 800ee54:	b662      	cpsie	i
 800ee56:	60fb      	str	r3, [r7, #12]
}
 800ee58:	bf00      	nop
 800ee5a:	e7fe      	b.n	800ee5a <pvPortMalloc+0x17e>
	return pvReturn;
 800ee5c:	69fb      	ldr	r3, [r7, #28]
}
 800ee5e:	4618      	mov	r0, r3
 800ee60:	3728      	adds	r7, #40	; 0x28
 800ee62:	46bd      	mov	sp, r7
 800ee64:	bd80      	pop	{r7, pc}
 800ee66:	bf00      	nop
 800ee68:	2000864c 	.word	0x2000864c
 800ee6c:	20008658 	.word	0x20008658
 800ee70:	20008650 	.word	0x20008650
 800ee74:	20008644 	.word	0x20008644
 800ee78:	20008654 	.word	0x20008654

0800ee7c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800ee7c:	b580      	push	{r7, lr}
 800ee7e:	b086      	sub	sp, #24
 800ee80:	af00      	add	r7, sp, #0
 800ee82:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d04c      	beq.n	800ef28 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800ee8e:	2308      	movs	r3, #8
 800ee90:	425b      	negs	r3, r3
 800ee92:	697a      	ldr	r2, [r7, #20]
 800ee94:	4413      	add	r3, r2
 800ee96:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800ee98:	697b      	ldr	r3, [r7, #20]
 800ee9a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800ee9c:	693b      	ldr	r3, [r7, #16]
 800ee9e:	685a      	ldr	r2, [r3, #4]
 800eea0:	4b23      	ldr	r3, [pc, #140]	; (800ef30 <vPortFree+0xb4>)
 800eea2:	681b      	ldr	r3, [r3, #0]
 800eea4:	4013      	ands	r3, r2
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d10c      	bne.n	800eec4 <vPortFree+0x48>
	__asm volatile
 800eeaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeae:	b672      	cpsid	i
 800eeb0:	f383 8811 	msr	BASEPRI, r3
 800eeb4:	f3bf 8f6f 	isb	sy
 800eeb8:	f3bf 8f4f 	dsb	sy
 800eebc:	b662      	cpsie	i
 800eebe:	60fb      	str	r3, [r7, #12]
}
 800eec0:	bf00      	nop
 800eec2:	e7fe      	b.n	800eec2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800eec4:	693b      	ldr	r3, [r7, #16]
 800eec6:	681b      	ldr	r3, [r3, #0]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d00c      	beq.n	800eee6 <vPortFree+0x6a>
	__asm volatile
 800eecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed0:	b672      	cpsid	i
 800eed2:	f383 8811 	msr	BASEPRI, r3
 800eed6:	f3bf 8f6f 	isb	sy
 800eeda:	f3bf 8f4f 	dsb	sy
 800eede:	b662      	cpsie	i
 800eee0:	60bb      	str	r3, [r7, #8]
}
 800eee2:	bf00      	nop
 800eee4:	e7fe      	b.n	800eee4 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800eee6:	693b      	ldr	r3, [r7, #16]
 800eee8:	685a      	ldr	r2, [r3, #4]
 800eeea:	4b11      	ldr	r3, [pc, #68]	; (800ef30 <vPortFree+0xb4>)
 800eeec:	681b      	ldr	r3, [r3, #0]
 800eeee:	4013      	ands	r3, r2
 800eef0:	2b00      	cmp	r3, #0
 800eef2:	d019      	beq.n	800ef28 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800eef4:	693b      	ldr	r3, [r7, #16]
 800eef6:	681b      	ldr	r3, [r3, #0]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d115      	bne.n	800ef28 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	685a      	ldr	r2, [r3, #4]
 800ef00:	4b0b      	ldr	r3, [pc, #44]	; (800ef30 <vPortFree+0xb4>)
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	43db      	mvns	r3, r3
 800ef06:	401a      	ands	r2, r3
 800ef08:	693b      	ldr	r3, [r7, #16]
 800ef0a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ef0c:	f7fe fece 	bl	800dcac <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ef10:	693b      	ldr	r3, [r7, #16]
 800ef12:	685a      	ldr	r2, [r3, #4]
 800ef14:	4b07      	ldr	r3, [pc, #28]	; (800ef34 <vPortFree+0xb8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4413      	add	r3, r2
 800ef1a:	4a06      	ldr	r2, [pc, #24]	; (800ef34 <vPortFree+0xb8>)
 800ef1c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ef1e:	6938      	ldr	r0, [r7, #16]
 800ef20:	f000 f86c 	bl	800effc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800ef24:	f7fe fed0 	bl	800dcc8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ef28:	bf00      	nop
 800ef2a:	3718      	adds	r7, #24
 800ef2c:	46bd      	mov	sp, r7
 800ef2e:	bd80      	pop	{r7, pc}
 800ef30:	20008658 	.word	0x20008658
 800ef34:	20008650 	.word	0x20008650

0800ef38 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ef38:	b480      	push	{r7}
 800ef3a:	b085      	sub	sp, #20
 800ef3c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ef3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ef42:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ef44:	4b27      	ldr	r3, [pc, #156]	; (800efe4 <prvHeapInit+0xac>)
 800ef46:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	f003 0307 	and.w	r3, r3, #7
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d00c      	beq.n	800ef6c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	3307      	adds	r3, #7
 800ef56:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef58:	68fb      	ldr	r3, [r7, #12]
 800ef5a:	f023 0307 	bic.w	r3, r3, #7
 800ef5e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ef60:	68ba      	ldr	r2, [r7, #8]
 800ef62:	68fb      	ldr	r3, [r7, #12]
 800ef64:	1ad3      	subs	r3, r2, r3
 800ef66:	4a1f      	ldr	r2, [pc, #124]	; (800efe4 <prvHeapInit+0xac>)
 800ef68:	4413      	add	r3, r2
 800ef6a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ef6c:	68fb      	ldr	r3, [r7, #12]
 800ef6e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ef70:	4a1d      	ldr	r2, [pc, #116]	; (800efe8 <prvHeapInit+0xb0>)
 800ef72:	687b      	ldr	r3, [r7, #4]
 800ef74:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ef76:	4b1c      	ldr	r3, [pc, #112]	; (800efe8 <prvHeapInit+0xb0>)
 800ef78:	2200      	movs	r2, #0
 800ef7a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	68ba      	ldr	r2, [r7, #8]
 800ef80:	4413      	add	r3, r2
 800ef82:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ef84:	2208      	movs	r2, #8
 800ef86:	68fb      	ldr	r3, [r7, #12]
 800ef88:	1a9b      	subs	r3, r3, r2
 800ef8a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ef8c:	68fb      	ldr	r3, [r7, #12]
 800ef8e:	f023 0307 	bic.w	r3, r3, #7
 800ef92:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	4a15      	ldr	r2, [pc, #84]	; (800efec <prvHeapInit+0xb4>)
 800ef98:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ef9a:	4b14      	ldr	r3, [pc, #80]	; (800efec <prvHeapInit+0xb4>)
 800ef9c:	681b      	ldr	r3, [r3, #0]
 800ef9e:	2200      	movs	r2, #0
 800efa0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800efa2:	4b12      	ldr	r3, [pc, #72]	; (800efec <prvHeapInit+0xb4>)
 800efa4:	681b      	ldr	r3, [r3, #0]
 800efa6:	2200      	movs	r2, #0
 800efa8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800efae:	683b      	ldr	r3, [r7, #0]
 800efb0:	68fa      	ldr	r2, [r7, #12]
 800efb2:	1ad2      	subs	r2, r2, r3
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800efb8:	4b0c      	ldr	r3, [pc, #48]	; (800efec <prvHeapInit+0xb4>)
 800efba:	681a      	ldr	r2, [r3, #0]
 800efbc:	683b      	ldr	r3, [r7, #0]
 800efbe:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	685b      	ldr	r3, [r3, #4]
 800efc4:	4a0a      	ldr	r2, [pc, #40]	; (800eff0 <prvHeapInit+0xb8>)
 800efc6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800efc8:	683b      	ldr	r3, [r7, #0]
 800efca:	685b      	ldr	r3, [r3, #4]
 800efcc:	4a09      	ldr	r2, [pc, #36]	; (800eff4 <prvHeapInit+0xbc>)
 800efce:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800efd0:	4b09      	ldr	r3, [pc, #36]	; (800eff8 <prvHeapInit+0xc0>)
 800efd2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800efd6:	601a      	str	r2, [r3, #0]
}
 800efd8:	bf00      	nop
 800efda:	3714      	adds	r7, #20
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	20000644 	.word	0x20000644
 800efe8:	20008644 	.word	0x20008644
 800efec:	2000864c 	.word	0x2000864c
 800eff0:	20008654 	.word	0x20008654
 800eff4:	20008650 	.word	0x20008650
 800eff8:	20008658 	.word	0x20008658

0800effc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800effc:	b480      	push	{r7}
 800effe:	b085      	sub	sp, #20
 800f000:	af00      	add	r7, sp, #0
 800f002:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f004:	4b28      	ldr	r3, [pc, #160]	; (800f0a8 <prvInsertBlockIntoFreeList+0xac>)
 800f006:	60fb      	str	r3, [r7, #12]
 800f008:	e002      	b.n	800f010 <prvInsertBlockIntoFreeList+0x14>
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	681b      	ldr	r3, [r3, #0]
 800f00e:	60fb      	str	r3, [r7, #12]
 800f010:	68fb      	ldr	r3, [r7, #12]
 800f012:	681b      	ldr	r3, [r3, #0]
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	429a      	cmp	r2, r3
 800f018:	d8f7      	bhi.n	800f00a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f01a:	68fb      	ldr	r3, [r7, #12]
 800f01c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f01e:	68fb      	ldr	r3, [r7, #12]
 800f020:	685b      	ldr	r3, [r3, #4]
 800f022:	68ba      	ldr	r2, [r7, #8]
 800f024:	4413      	add	r3, r2
 800f026:	687a      	ldr	r2, [r7, #4]
 800f028:	429a      	cmp	r2, r3
 800f02a:	d108      	bne.n	800f03e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	685a      	ldr	r2, [r3, #4]
 800f030:	687b      	ldr	r3, [r7, #4]
 800f032:	685b      	ldr	r3, [r3, #4]
 800f034:	441a      	add	r2, r3
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f03a:	68fb      	ldr	r3, [r7, #12]
 800f03c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f042:	687b      	ldr	r3, [r7, #4]
 800f044:	685b      	ldr	r3, [r3, #4]
 800f046:	68ba      	ldr	r2, [r7, #8]
 800f048:	441a      	add	r2, r3
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	681b      	ldr	r3, [r3, #0]
 800f04e:	429a      	cmp	r2, r3
 800f050:	d118      	bne.n	800f084 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f052:	68fb      	ldr	r3, [r7, #12]
 800f054:	681a      	ldr	r2, [r3, #0]
 800f056:	4b15      	ldr	r3, [pc, #84]	; (800f0ac <prvInsertBlockIntoFreeList+0xb0>)
 800f058:	681b      	ldr	r3, [r3, #0]
 800f05a:	429a      	cmp	r2, r3
 800f05c:	d00d      	beq.n	800f07a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f05e:	687b      	ldr	r3, [r7, #4]
 800f060:	685a      	ldr	r2, [r3, #4]
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	685b      	ldr	r3, [r3, #4]
 800f068:	441a      	add	r2, r3
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	681a      	ldr	r2, [r3, #0]
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	601a      	str	r2, [r3, #0]
 800f078:	e008      	b.n	800f08c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f07a:	4b0c      	ldr	r3, [pc, #48]	; (800f0ac <prvInsertBlockIntoFreeList+0xb0>)
 800f07c:	681a      	ldr	r2, [r3, #0]
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	601a      	str	r2, [r3, #0]
 800f082:	e003      	b.n	800f08c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	681a      	ldr	r2, [r3, #0]
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f08c:	68fa      	ldr	r2, [r7, #12]
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	429a      	cmp	r2, r3
 800f092:	d002      	beq.n	800f09a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f094:	68fb      	ldr	r3, [r7, #12]
 800f096:	687a      	ldr	r2, [r7, #4]
 800f098:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f09a:	bf00      	nop
 800f09c:	3714      	adds	r7, #20
 800f09e:	46bd      	mov	sp, r7
 800f0a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0a4:	4770      	bx	lr
 800f0a6:	bf00      	nop
 800f0a8:	20008644 	.word	0x20008644
 800f0ac:	2000864c 	.word	0x2000864c

0800f0b0 <__errno>:
 800f0b0:	4b01      	ldr	r3, [pc, #4]	; (800f0b8 <__errno+0x8>)
 800f0b2:	6818      	ldr	r0, [r3, #0]
 800f0b4:	4770      	bx	lr
 800f0b6:	bf00      	nop
 800f0b8:	20000064 	.word	0x20000064

0800f0bc <__libc_init_array>:
 800f0bc:	b570      	push	{r4, r5, r6, lr}
 800f0be:	4d0d      	ldr	r5, [pc, #52]	; (800f0f4 <__libc_init_array+0x38>)
 800f0c0:	4c0d      	ldr	r4, [pc, #52]	; (800f0f8 <__libc_init_array+0x3c>)
 800f0c2:	1b64      	subs	r4, r4, r5
 800f0c4:	10a4      	asrs	r4, r4, #2
 800f0c6:	2600      	movs	r6, #0
 800f0c8:	42a6      	cmp	r6, r4
 800f0ca:	d109      	bne.n	800f0e0 <__libc_init_array+0x24>
 800f0cc:	4d0b      	ldr	r5, [pc, #44]	; (800f0fc <__libc_init_array+0x40>)
 800f0ce:	4c0c      	ldr	r4, [pc, #48]	; (800f100 <__libc_init_array+0x44>)
 800f0d0:	f001 fcd4 	bl	8010a7c <_init>
 800f0d4:	1b64      	subs	r4, r4, r5
 800f0d6:	10a4      	asrs	r4, r4, #2
 800f0d8:	2600      	movs	r6, #0
 800f0da:	42a6      	cmp	r6, r4
 800f0dc:	d105      	bne.n	800f0ea <__libc_init_array+0x2e>
 800f0de:	bd70      	pop	{r4, r5, r6, pc}
 800f0e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0e4:	4798      	blx	r3
 800f0e6:	3601      	adds	r6, #1
 800f0e8:	e7ee      	b.n	800f0c8 <__libc_init_array+0xc>
 800f0ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800f0ee:	4798      	blx	r3
 800f0f0:	3601      	adds	r6, #1
 800f0f2:	e7f2      	b.n	800f0da <__libc_init_array+0x1e>
 800f0f4:	08012e20 	.word	0x08012e20
 800f0f8:	08012e20 	.word	0x08012e20
 800f0fc:	08012e20 	.word	0x08012e20
 800f100:	08012e24 	.word	0x08012e24

0800f104 <memcpy>:
 800f104:	440a      	add	r2, r1
 800f106:	4291      	cmp	r1, r2
 800f108:	f100 33ff 	add.w	r3, r0, #4294967295
 800f10c:	d100      	bne.n	800f110 <memcpy+0xc>
 800f10e:	4770      	bx	lr
 800f110:	b510      	push	{r4, lr}
 800f112:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f116:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f11a:	4291      	cmp	r1, r2
 800f11c:	d1f9      	bne.n	800f112 <memcpy+0xe>
 800f11e:	bd10      	pop	{r4, pc}

0800f120 <memset>:
 800f120:	4402      	add	r2, r0
 800f122:	4603      	mov	r3, r0
 800f124:	4293      	cmp	r3, r2
 800f126:	d100      	bne.n	800f12a <memset+0xa>
 800f128:	4770      	bx	lr
 800f12a:	f803 1b01 	strb.w	r1, [r3], #1
 800f12e:	e7f9      	b.n	800f124 <memset+0x4>

0800f130 <siprintf>:
 800f130:	b40e      	push	{r1, r2, r3}
 800f132:	b500      	push	{lr}
 800f134:	b09c      	sub	sp, #112	; 0x70
 800f136:	ab1d      	add	r3, sp, #116	; 0x74
 800f138:	9002      	str	r0, [sp, #8]
 800f13a:	9006      	str	r0, [sp, #24]
 800f13c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800f140:	4809      	ldr	r0, [pc, #36]	; (800f168 <siprintf+0x38>)
 800f142:	9107      	str	r1, [sp, #28]
 800f144:	9104      	str	r1, [sp, #16]
 800f146:	4909      	ldr	r1, [pc, #36]	; (800f16c <siprintf+0x3c>)
 800f148:	f853 2b04 	ldr.w	r2, [r3], #4
 800f14c:	9105      	str	r1, [sp, #20]
 800f14e:	6800      	ldr	r0, [r0, #0]
 800f150:	9301      	str	r3, [sp, #4]
 800f152:	a902      	add	r1, sp, #8
 800f154:	f000 f868 	bl	800f228 <_svfiprintf_r>
 800f158:	9b02      	ldr	r3, [sp, #8]
 800f15a:	2200      	movs	r2, #0
 800f15c:	701a      	strb	r2, [r3, #0]
 800f15e:	b01c      	add	sp, #112	; 0x70
 800f160:	f85d eb04 	ldr.w	lr, [sp], #4
 800f164:	b003      	add	sp, #12
 800f166:	4770      	bx	lr
 800f168:	20000064 	.word	0x20000064
 800f16c:	ffff0208 	.word	0xffff0208

0800f170 <__ssputs_r>:
 800f170:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f174:	688e      	ldr	r6, [r1, #8]
 800f176:	429e      	cmp	r6, r3
 800f178:	4682      	mov	sl, r0
 800f17a:	460c      	mov	r4, r1
 800f17c:	4690      	mov	r8, r2
 800f17e:	461f      	mov	r7, r3
 800f180:	d838      	bhi.n	800f1f4 <__ssputs_r+0x84>
 800f182:	898a      	ldrh	r2, [r1, #12]
 800f184:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800f188:	d032      	beq.n	800f1f0 <__ssputs_r+0x80>
 800f18a:	6825      	ldr	r5, [r4, #0]
 800f18c:	6909      	ldr	r1, [r1, #16]
 800f18e:	eba5 0901 	sub.w	r9, r5, r1
 800f192:	6965      	ldr	r5, [r4, #20]
 800f194:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f198:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f19c:	3301      	adds	r3, #1
 800f19e:	444b      	add	r3, r9
 800f1a0:	106d      	asrs	r5, r5, #1
 800f1a2:	429d      	cmp	r5, r3
 800f1a4:	bf38      	it	cc
 800f1a6:	461d      	movcc	r5, r3
 800f1a8:	0553      	lsls	r3, r2, #21
 800f1aa:	d531      	bpl.n	800f210 <__ssputs_r+0xa0>
 800f1ac:	4629      	mov	r1, r5
 800f1ae:	f000 fb39 	bl	800f824 <_malloc_r>
 800f1b2:	4606      	mov	r6, r0
 800f1b4:	b950      	cbnz	r0, 800f1cc <__ssputs_r+0x5c>
 800f1b6:	230c      	movs	r3, #12
 800f1b8:	f8ca 3000 	str.w	r3, [sl]
 800f1bc:	89a3      	ldrh	r3, [r4, #12]
 800f1be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f1c2:	81a3      	strh	r3, [r4, #12]
 800f1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f1c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f1cc:	6921      	ldr	r1, [r4, #16]
 800f1ce:	464a      	mov	r2, r9
 800f1d0:	f7ff ff98 	bl	800f104 <memcpy>
 800f1d4:	89a3      	ldrh	r3, [r4, #12]
 800f1d6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800f1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f1de:	81a3      	strh	r3, [r4, #12]
 800f1e0:	6126      	str	r6, [r4, #16]
 800f1e2:	6165      	str	r5, [r4, #20]
 800f1e4:	444e      	add	r6, r9
 800f1e6:	eba5 0509 	sub.w	r5, r5, r9
 800f1ea:	6026      	str	r6, [r4, #0]
 800f1ec:	60a5      	str	r5, [r4, #8]
 800f1ee:	463e      	mov	r6, r7
 800f1f0:	42be      	cmp	r6, r7
 800f1f2:	d900      	bls.n	800f1f6 <__ssputs_r+0x86>
 800f1f4:	463e      	mov	r6, r7
 800f1f6:	4632      	mov	r2, r6
 800f1f8:	6820      	ldr	r0, [r4, #0]
 800f1fa:	4641      	mov	r1, r8
 800f1fc:	f000 faa8 	bl	800f750 <memmove>
 800f200:	68a3      	ldr	r3, [r4, #8]
 800f202:	6822      	ldr	r2, [r4, #0]
 800f204:	1b9b      	subs	r3, r3, r6
 800f206:	4432      	add	r2, r6
 800f208:	60a3      	str	r3, [r4, #8]
 800f20a:	6022      	str	r2, [r4, #0]
 800f20c:	2000      	movs	r0, #0
 800f20e:	e7db      	b.n	800f1c8 <__ssputs_r+0x58>
 800f210:	462a      	mov	r2, r5
 800f212:	f000 fb61 	bl	800f8d8 <_realloc_r>
 800f216:	4606      	mov	r6, r0
 800f218:	2800      	cmp	r0, #0
 800f21a:	d1e1      	bne.n	800f1e0 <__ssputs_r+0x70>
 800f21c:	6921      	ldr	r1, [r4, #16]
 800f21e:	4650      	mov	r0, sl
 800f220:	f000 fab0 	bl	800f784 <_free_r>
 800f224:	e7c7      	b.n	800f1b6 <__ssputs_r+0x46>
	...

0800f228 <_svfiprintf_r>:
 800f228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f22c:	4698      	mov	r8, r3
 800f22e:	898b      	ldrh	r3, [r1, #12]
 800f230:	061b      	lsls	r3, r3, #24
 800f232:	b09d      	sub	sp, #116	; 0x74
 800f234:	4607      	mov	r7, r0
 800f236:	460d      	mov	r5, r1
 800f238:	4614      	mov	r4, r2
 800f23a:	d50e      	bpl.n	800f25a <_svfiprintf_r+0x32>
 800f23c:	690b      	ldr	r3, [r1, #16]
 800f23e:	b963      	cbnz	r3, 800f25a <_svfiprintf_r+0x32>
 800f240:	2140      	movs	r1, #64	; 0x40
 800f242:	f000 faef 	bl	800f824 <_malloc_r>
 800f246:	6028      	str	r0, [r5, #0]
 800f248:	6128      	str	r0, [r5, #16]
 800f24a:	b920      	cbnz	r0, 800f256 <_svfiprintf_r+0x2e>
 800f24c:	230c      	movs	r3, #12
 800f24e:	603b      	str	r3, [r7, #0]
 800f250:	f04f 30ff 	mov.w	r0, #4294967295
 800f254:	e0d1      	b.n	800f3fa <_svfiprintf_r+0x1d2>
 800f256:	2340      	movs	r3, #64	; 0x40
 800f258:	616b      	str	r3, [r5, #20]
 800f25a:	2300      	movs	r3, #0
 800f25c:	9309      	str	r3, [sp, #36]	; 0x24
 800f25e:	2320      	movs	r3, #32
 800f260:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800f264:	f8cd 800c 	str.w	r8, [sp, #12]
 800f268:	2330      	movs	r3, #48	; 0x30
 800f26a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f414 <_svfiprintf_r+0x1ec>
 800f26e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800f272:	f04f 0901 	mov.w	r9, #1
 800f276:	4623      	mov	r3, r4
 800f278:	469a      	mov	sl, r3
 800f27a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f27e:	b10a      	cbz	r2, 800f284 <_svfiprintf_r+0x5c>
 800f280:	2a25      	cmp	r2, #37	; 0x25
 800f282:	d1f9      	bne.n	800f278 <_svfiprintf_r+0x50>
 800f284:	ebba 0b04 	subs.w	fp, sl, r4
 800f288:	d00b      	beq.n	800f2a2 <_svfiprintf_r+0x7a>
 800f28a:	465b      	mov	r3, fp
 800f28c:	4622      	mov	r2, r4
 800f28e:	4629      	mov	r1, r5
 800f290:	4638      	mov	r0, r7
 800f292:	f7ff ff6d 	bl	800f170 <__ssputs_r>
 800f296:	3001      	adds	r0, #1
 800f298:	f000 80aa 	beq.w	800f3f0 <_svfiprintf_r+0x1c8>
 800f29c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f29e:	445a      	add	r2, fp
 800f2a0:	9209      	str	r2, [sp, #36]	; 0x24
 800f2a2:	f89a 3000 	ldrb.w	r3, [sl]
 800f2a6:	2b00      	cmp	r3, #0
 800f2a8:	f000 80a2 	beq.w	800f3f0 <_svfiprintf_r+0x1c8>
 800f2ac:	2300      	movs	r3, #0
 800f2ae:	f04f 32ff 	mov.w	r2, #4294967295
 800f2b2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f2b6:	f10a 0a01 	add.w	sl, sl, #1
 800f2ba:	9304      	str	r3, [sp, #16]
 800f2bc:	9307      	str	r3, [sp, #28]
 800f2be:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800f2c2:	931a      	str	r3, [sp, #104]	; 0x68
 800f2c4:	4654      	mov	r4, sl
 800f2c6:	2205      	movs	r2, #5
 800f2c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2cc:	4851      	ldr	r0, [pc, #324]	; (800f414 <_svfiprintf_r+0x1ec>)
 800f2ce:	f7f0 ff9f 	bl	8000210 <memchr>
 800f2d2:	9a04      	ldr	r2, [sp, #16]
 800f2d4:	b9d8      	cbnz	r0, 800f30e <_svfiprintf_r+0xe6>
 800f2d6:	06d0      	lsls	r0, r2, #27
 800f2d8:	bf44      	itt	mi
 800f2da:	2320      	movmi	r3, #32
 800f2dc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2e0:	0711      	lsls	r1, r2, #28
 800f2e2:	bf44      	itt	mi
 800f2e4:	232b      	movmi	r3, #43	; 0x2b
 800f2e6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800f2ea:	f89a 3000 	ldrb.w	r3, [sl]
 800f2ee:	2b2a      	cmp	r3, #42	; 0x2a
 800f2f0:	d015      	beq.n	800f31e <_svfiprintf_r+0xf6>
 800f2f2:	9a07      	ldr	r2, [sp, #28]
 800f2f4:	4654      	mov	r4, sl
 800f2f6:	2000      	movs	r0, #0
 800f2f8:	f04f 0c0a 	mov.w	ip, #10
 800f2fc:	4621      	mov	r1, r4
 800f2fe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f302:	3b30      	subs	r3, #48	; 0x30
 800f304:	2b09      	cmp	r3, #9
 800f306:	d94e      	bls.n	800f3a6 <_svfiprintf_r+0x17e>
 800f308:	b1b0      	cbz	r0, 800f338 <_svfiprintf_r+0x110>
 800f30a:	9207      	str	r2, [sp, #28]
 800f30c:	e014      	b.n	800f338 <_svfiprintf_r+0x110>
 800f30e:	eba0 0308 	sub.w	r3, r0, r8
 800f312:	fa09 f303 	lsl.w	r3, r9, r3
 800f316:	4313      	orrs	r3, r2
 800f318:	9304      	str	r3, [sp, #16]
 800f31a:	46a2      	mov	sl, r4
 800f31c:	e7d2      	b.n	800f2c4 <_svfiprintf_r+0x9c>
 800f31e:	9b03      	ldr	r3, [sp, #12]
 800f320:	1d19      	adds	r1, r3, #4
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	9103      	str	r1, [sp, #12]
 800f326:	2b00      	cmp	r3, #0
 800f328:	bfbb      	ittet	lt
 800f32a:	425b      	neglt	r3, r3
 800f32c:	f042 0202 	orrlt.w	r2, r2, #2
 800f330:	9307      	strge	r3, [sp, #28]
 800f332:	9307      	strlt	r3, [sp, #28]
 800f334:	bfb8      	it	lt
 800f336:	9204      	strlt	r2, [sp, #16]
 800f338:	7823      	ldrb	r3, [r4, #0]
 800f33a:	2b2e      	cmp	r3, #46	; 0x2e
 800f33c:	d10c      	bne.n	800f358 <_svfiprintf_r+0x130>
 800f33e:	7863      	ldrb	r3, [r4, #1]
 800f340:	2b2a      	cmp	r3, #42	; 0x2a
 800f342:	d135      	bne.n	800f3b0 <_svfiprintf_r+0x188>
 800f344:	9b03      	ldr	r3, [sp, #12]
 800f346:	1d1a      	adds	r2, r3, #4
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	9203      	str	r2, [sp, #12]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	bfb8      	it	lt
 800f350:	f04f 33ff 	movlt.w	r3, #4294967295
 800f354:	3402      	adds	r4, #2
 800f356:	9305      	str	r3, [sp, #20]
 800f358:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f424 <_svfiprintf_r+0x1fc>
 800f35c:	7821      	ldrb	r1, [r4, #0]
 800f35e:	2203      	movs	r2, #3
 800f360:	4650      	mov	r0, sl
 800f362:	f7f0 ff55 	bl	8000210 <memchr>
 800f366:	b140      	cbz	r0, 800f37a <_svfiprintf_r+0x152>
 800f368:	2340      	movs	r3, #64	; 0x40
 800f36a:	eba0 000a 	sub.w	r0, r0, sl
 800f36e:	fa03 f000 	lsl.w	r0, r3, r0
 800f372:	9b04      	ldr	r3, [sp, #16]
 800f374:	4303      	orrs	r3, r0
 800f376:	3401      	adds	r4, #1
 800f378:	9304      	str	r3, [sp, #16]
 800f37a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f37e:	4826      	ldr	r0, [pc, #152]	; (800f418 <_svfiprintf_r+0x1f0>)
 800f380:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f384:	2206      	movs	r2, #6
 800f386:	f7f0 ff43 	bl	8000210 <memchr>
 800f38a:	2800      	cmp	r0, #0
 800f38c:	d038      	beq.n	800f400 <_svfiprintf_r+0x1d8>
 800f38e:	4b23      	ldr	r3, [pc, #140]	; (800f41c <_svfiprintf_r+0x1f4>)
 800f390:	bb1b      	cbnz	r3, 800f3da <_svfiprintf_r+0x1b2>
 800f392:	9b03      	ldr	r3, [sp, #12]
 800f394:	3307      	adds	r3, #7
 800f396:	f023 0307 	bic.w	r3, r3, #7
 800f39a:	3308      	adds	r3, #8
 800f39c:	9303      	str	r3, [sp, #12]
 800f39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f3a0:	4433      	add	r3, r6
 800f3a2:	9309      	str	r3, [sp, #36]	; 0x24
 800f3a4:	e767      	b.n	800f276 <_svfiprintf_r+0x4e>
 800f3a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800f3aa:	460c      	mov	r4, r1
 800f3ac:	2001      	movs	r0, #1
 800f3ae:	e7a5      	b.n	800f2fc <_svfiprintf_r+0xd4>
 800f3b0:	2300      	movs	r3, #0
 800f3b2:	3401      	adds	r4, #1
 800f3b4:	9305      	str	r3, [sp, #20]
 800f3b6:	4619      	mov	r1, r3
 800f3b8:	f04f 0c0a 	mov.w	ip, #10
 800f3bc:	4620      	mov	r0, r4
 800f3be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f3c2:	3a30      	subs	r2, #48	; 0x30
 800f3c4:	2a09      	cmp	r2, #9
 800f3c6:	d903      	bls.n	800f3d0 <_svfiprintf_r+0x1a8>
 800f3c8:	2b00      	cmp	r3, #0
 800f3ca:	d0c5      	beq.n	800f358 <_svfiprintf_r+0x130>
 800f3cc:	9105      	str	r1, [sp, #20]
 800f3ce:	e7c3      	b.n	800f358 <_svfiprintf_r+0x130>
 800f3d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800f3d4:	4604      	mov	r4, r0
 800f3d6:	2301      	movs	r3, #1
 800f3d8:	e7f0      	b.n	800f3bc <_svfiprintf_r+0x194>
 800f3da:	ab03      	add	r3, sp, #12
 800f3dc:	9300      	str	r3, [sp, #0]
 800f3de:	462a      	mov	r2, r5
 800f3e0:	4b0f      	ldr	r3, [pc, #60]	; (800f420 <_svfiprintf_r+0x1f8>)
 800f3e2:	a904      	add	r1, sp, #16
 800f3e4:	4638      	mov	r0, r7
 800f3e6:	f3af 8000 	nop.w
 800f3ea:	1c42      	adds	r2, r0, #1
 800f3ec:	4606      	mov	r6, r0
 800f3ee:	d1d6      	bne.n	800f39e <_svfiprintf_r+0x176>
 800f3f0:	89ab      	ldrh	r3, [r5, #12]
 800f3f2:	065b      	lsls	r3, r3, #25
 800f3f4:	f53f af2c 	bmi.w	800f250 <_svfiprintf_r+0x28>
 800f3f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f3fa:	b01d      	add	sp, #116	; 0x74
 800f3fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f400:	ab03      	add	r3, sp, #12
 800f402:	9300      	str	r3, [sp, #0]
 800f404:	462a      	mov	r2, r5
 800f406:	4b06      	ldr	r3, [pc, #24]	; (800f420 <_svfiprintf_r+0x1f8>)
 800f408:	a904      	add	r1, sp, #16
 800f40a:	4638      	mov	r0, r7
 800f40c:	f000 f87a 	bl	800f504 <_printf_i>
 800f410:	e7eb      	b.n	800f3ea <_svfiprintf_r+0x1c2>
 800f412:	bf00      	nop
 800f414:	08012c0c 	.word	0x08012c0c
 800f418:	08012c16 	.word	0x08012c16
 800f41c:	00000000 	.word	0x00000000
 800f420:	0800f171 	.word	0x0800f171
 800f424:	08012c12 	.word	0x08012c12

0800f428 <_printf_common>:
 800f428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f42c:	4616      	mov	r6, r2
 800f42e:	4699      	mov	r9, r3
 800f430:	688a      	ldr	r2, [r1, #8]
 800f432:	690b      	ldr	r3, [r1, #16]
 800f434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f438:	4293      	cmp	r3, r2
 800f43a:	bfb8      	it	lt
 800f43c:	4613      	movlt	r3, r2
 800f43e:	6033      	str	r3, [r6, #0]
 800f440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f444:	4607      	mov	r7, r0
 800f446:	460c      	mov	r4, r1
 800f448:	b10a      	cbz	r2, 800f44e <_printf_common+0x26>
 800f44a:	3301      	adds	r3, #1
 800f44c:	6033      	str	r3, [r6, #0]
 800f44e:	6823      	ldr	r3, [r4, #0]
 800f450:	0699      	lsls	r1, r3, #26
 800f452:	bf42      	ittt	mi
 800f454:	6833      	ldrmi	r3, [r6, #0]
 800f456:	3302      	addmi	r3, #2
 800f458:	6033      	strmi	r3, [r6, #0]
 800f45a:	6825      	ldr	r5, [r4, #0]
 800f45c:	f015 0506 	ands.w	r5, r5, #6
 800f460:	d106      	bne.n	800f470 <_printf_common+0x48>
 800f462:	f104 0a19 	add.w	sl, r4, #25
 800f466:	68e3      	ldr	r3, [r4, #12]
 800f468:	6832      	ldr	r2, [r6, #0]
 800f46a:	1a9b      	subs	r3, r3, r2
 800f46c:	42ab      	cmp	r3, r5
 800f46e:	dc26      	bgt.n	800f4be <_printf_common+0x96>
 800f470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f474:	1e13      	subs	r3, r2, #0
 800f476:	6822      	ldr	r2, [r4, #0]
 800f478:	bf18      	it	ne
 800f47a:	2301      	movne	r3, #1
 800f47c:	0692      	lsls	r2, r2, #26
 800f47e:	d42b      	bmi.n	800f4d8 <_printf_common+0xb0>
 800f480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f484:	4649      	mov	r1, r9
 800f486:	4638      	mov	r0, r7
 800f488:	47c0      	blx	r8
 800f48a:	3001      	adds	r0, #1
 800f48c:	d01e      	beq.n	800f4cc <_printf_common+0xa4>
 800f48e:	6823      	ldr	r3, [r4, #0]
 800f490:	68e5      	ldr	r5, [r4, #12]
 800f492:	6832      	ldr	r2, [r6, #0]
 800f494:	f003 0306 	and.w	r3, r3, #6
 800f498:	2b04      	cmp	r3, #4
 800f49a:	bf08      	it	eq
 800f49c:	1aad      	subeq	r5, r5, r2
 800f49e:	68a3      	ldr	r3, [r4, #8]
 800f4a0:	6922      	ldr	r2, [r4, #16]
 800f4a2:	bf0c      	ite	eq
 800f4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f4a8:	2500      	movne	r5, #0
 800f4aa:	4293      	cmp	r3, r2
 800f4ac:	bfc4      	itt	gt
 800f4ae:	1a9b      	subgt	r3, r3, r2
 800f4b0:	18ed      	addgt	r5, r5, r3
 800f4b2:	2600      	movs	r6, #0
 800f4b4:	341a      	adds	r4, #26
 800f4b6:	42b5      	cmp	r5, r6
 800f4b8:	d11a      	bne.n	800f4f0 <_printf_common+0xc8>
 800f4ba:	2000      	movs	r0, #0
 800f4bc:	e008      	b.n	800f4d0 <_printf_common+0xa8>
 800f4be:	2301      	movs	r3, #1
 800f4c0:	4652      	mov	r2, sl
 800f4c2:	4649      	mov	r1, r9
 800f4c4:	4638      	mov	r0, r7
 800f4c6:	47c0      	blx	r8
 800f4c8:	3001      	adds	r0, #1
 800f4ca:	d103      	bne.n	800f4d4 <_printf_common+0xac>
 800f4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800f4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f4d4:	3501      	adds	r5, #1
 800f4d6:	e7c6      	b.n	800f466 <_printf_common+0x3e>
 800f4d8:	18e1      	adds	r1, r4, r3
 800f4da:	1c5a      	adds	r2, r3, #1
 800f4dc:	2030      	movs	r0, #48	; 0x30
 800f4de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f4e2:	4422      	add	r2, r4
 800f4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f4e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f4ec:	3302      	adds	r3, #2
 800f4ee:	e7c7      	b.n	800f480 <_printf_common+0x58>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	4622      	mov	r2, r4
 800f4f4:	4649      	mov	r1, r9
 800f4f6:	4638      	mov	r0, r7
 800f4f8:	47c0      	blx	r8
 800f4fa:	3001      	adds	r0, #1
 800f4fc:	d0e6      	beq.n	800f4cc <_printf_common+0xa4>
 800f4fe:	3601      	adds	r6, #1
 800f500:	e7d9      	b.n	800f4b6 <_printf_common+0x8e>
	...

0800f504 <_printf_i>:
 800f504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f508:	460c      	mov	r4, r1
 800f50a:	4691      	mov	r9, r2
 800f50c:	7e27      	ldrb	r7, [r4, #24]
 800f50e:	990c      	ldr	r1, [sp, #48]	; 0x30
 800f510:	2f78      	cmp	r7, #120	; 0x78
 800f512:	4680      	mov	r8, r0
 800f514:	469a      	mov	sl, r3
 800f516:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f51a:	d807      	bhi.n	800f52c <_printf_i+0x28>
 800f51c:	2f62      	cmp	r7, #98	; 0x62
 800f51e:	d80a      	bhi.n	800f536 <_printf_i+0x32>
 800f520:	2f00      	cmp	r7, #0
 800f522:	f000 80d8 	beq.w	800f6d6 <_printf_i+0x1d2>
 800f526:	2f58      	cmp	r7, #88	; 0x58
 800f528:	f000 80a3 	beq.w	800f672 <_printf_i+0x16e>
 800f52c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f534:	e03a      	b.n	800f5ac <_printf_i+0xa8>
 800f536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f53a:	2b15      	cmp	r3, #21
 800f53c:	d8f6      	bhi.n	800f52c <_printf_i+0x28>
 800f53e:	a001      	add	r0, pc, #4	; (adr r0, 800f544 <_printf_i+0x40>)
 800f540:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f544:	0800f59d 	.word	0x0800f59d
 800f548:	0800f5b1 	.word	0x0800f5b1
 800f54c:	0800f52d 	.word	0x0800f52d
 800f550:	0800f52d 	.word	0x0800f52d
 800f554:	0800f52d 	.word	0x0800f52d
 800f558:	0800f52d 	.word	0x0800f52d
 800f55c:	0800f5b1 	.word	0x0800f5b1
 800f560:	0800f52d 	.word	0x0800f52d
 800f564:	0800f52d 	.word	0x0800f52d
 800f568:	0800f52d 	.word	0x0800f52d
 800f56c:	0800f52d 	.word	0x0800f52d
 800f570:	0800f6bd 	.word	0x0800f6bd
 800f574:	0800f5e1 	.word	0x0800f5e1
 800f578:	0800f69f 	.word	0x0800f69f
 800f57c:	0800f52d 	.word	0x0800f52d
 800f580:	0800f52d 	.word	0x0800f52d
 800f584:	0800f6df 	.word	0x0800f6df
 800f588:	0800f52d 	.word	0x0800f52d
 800f58c:	0800f5e1 	.word	0x0800f5e1
 800f590:	0800f52d 	.word	0x0800f52d
 800f594:	0800f52d 	.word	0x0800f52d
 800f598:	0800f6a7 	.word	0x0800f6a7
 800f59c:	680b      	ldr	r3, [r1, #0]
 800f59e:	1d1a      	adds	r2, r3, #4
 800f5a0:	681b      	ldr	r3, [r3, #0]
 800f5a2:	600a      	str	r2, [r1, #0]
 800f5a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f5a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f5ac:	2301      	movs	r3, #1
 800f5ae:	e0a3      	b.n	800f6f8 <_printf_i+0x1f4>
 800f5b0:	6825      	ldr	r5, [r4, #0]
 800f5b2:	6808      	ldr	r0, [r1, #0]
 800f5b4:	062e      	lsls	r6, r5, #24
 800f5b6:	f100 0304 	add.w	r3, r0, #4
 800f5ba:	d50a      	bpl.n	800f5d2 <_printf_i+0xce>
 800f5bc:	6805      	ldr	r5, [r0, #0]
 800f5be:	600b      	str	r3, [r1, #0]
 800f5c0:	2d00      	cmp	r5, #0
 800f5c2:	da03      	bge.n	800f5cc <_printf_i+0xc8>
 800f5c4:	232d      	movs	r3, #45	; 0x2d
 800f5c6:	426d      	negs	r5, r5
 800f5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f5cc:	485e      	ldr	r0, [pc, #376]	; (800f748 <_printf_i+0x244>)
 800f5ce:	230a      	movs	r3, #10
 800f5d0:	e019      	b.n	800f606 <_printf_i+0x102>
 800f5d2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f5d6:	6805      	ldr	r5, [r0, #0]
 800f5d8:	600b      	str	r3, [r1, #0]
 800f5da:	bf18      	it	ne
 800f5dc:	b22d      	sxthne	r5, r5
 800f5de:	e7ef      	b.n	800f5c0 <_printf_i+0xbc>
 800f5e0:	680b      	ldr	r3, [r1, #0]
 800f5e2:	6825      	ldr	r5, [r4, #0]
 800f5e4:	1d18      	adds	r0, r3, #4
 800f5e6:	6008      	str	r0, [r1, #0]
 800f5e8:	0628      	lsls	r0, r5, #24
 800f5ea:	d501      	bpl.n	800f5f0 <_printf_i+0xec>
 800f5ec:	681d      	ldr	r5, [r3, #0]
 800f5ee:	e002      	b.n	800f5f6 <_printf_i+0xf2>
 800f5f0:	0669      	lsls	r1, r5, #25
 800f5f2:	d5fb      	bpl.n	800f5ec <_printf_i+0xe8>
 800f5f4:	881d      	ldrh	r5, [r3, #0]
 800f5f6:	4854      	ldr	r0, [pc, #336]	; (800f748 <_printf_i+0x244>)
 800f5f8:	2f6f      	cmp	r7, #111	; 0x6f
 800f5fa:	bf0c      	ite	eq
 800f5fc:	2308      	moveq	r3, #8
 800f5fe:	230a      	movne	r3, #10
 800f600:	2100      	movs	r1, #0
 800f602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f606:	6866      	ldr	r6, [r4, #4]
 800f608:	60a6      	str	r6, [r4, #8]
 800f60a:	2e00      	cmp	r6, #0
 800f60c:	bfa2      	ittt	ge
 800f60e:	6821      	ldrge	r1, [r4, #0]
 800f610:	f021 0104 	bicge.w	r1, r1, #4
 800f614:	6021      	strge	r1, [r4, #0]
 800f616:	b90d      	cbnz	r5, 800f61c <_printf_i+0x118>
 800f618:	2e00      	cmp	r6, #0
 800f61a:	d04d      	beq.n	800f6b8 <_printf_i+0x1b4>
 800f61c:	4616      	mov	r6, r2
 800f61e:	fbb5 f1f3 	udiv	r1, r5, r3
 800f622:	fb03 5711 	mls	r7, r3, r1, r5
 800f626:	5dc7      	ldrb	r7, [r0, r7]
 800f628:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f62c:	462f      	mov	r7, r5
 800f62e:	42bb      	cmp	r3, r7
 800f630:	460d      	mov	r5, r1
 800f632:	d9f4      	bls.n	800f61e <_printf_i+0x11a>
 800f634:	2b08      	cmp	r3, #8
 800f636:	d10b      	bne.n	800f650 <_printf_i+0x14c>
 800f638:	6823      	ldr	r3, [r4, #0]
 800f63a:	07df      	lsls	r7, r3, #31
 800f63c:	d508      	bpl.n	800f650 <_printf_i+0x14c>
 800f63e:	6923      	ldr	r3, [r4, #16]
 800f640:	6861      	ldr	r1, [r4, #4]
 800f642:	4299      	cmp	r1, r3
 800f644:	bfde      	ittt	le
 800f646:	2330      	movle	r3, #48	; 0x30
 800f648:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f64c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f650:	1b92      	subs	r2, r2, r6
 800f652:	6122      	str	r2, [r4, #16]
 800f654:	f8cd a000 	str.w	sl, [sp]
 800f658:	464b      	mov	r3, r9
 800f65a:	aa03      	add	r2, sp, #12
 800f65c:	4621      	mov	r1, r4
 800f65e:	4640      	mov	r0, r8
 800f660:	f7ff fee2 	bl	800f428 <_printf_common>
 800f664:	3001      	adds	r0, #1
 800f666:	d14c      	bne.n	800f702 <_printf_i+0x1fe>
 800f668:	f04f 30ff 	mov.w	r0, #4294967295
 800f66c:	b004      	add	sp, #16
 800f66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f672:	4835      	ldr	r0, [pc, #212]	; (800f748 <_printf_i+0x244>)
 800f674:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f678:	6823      	ldr	r3, [r4, #0]
 800f67a:	680e      	ldr	r6, [r1, #0]
 800f67c:	061f      	lsls	r7, r3, #24
 800f67e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f682:	600e      	str	r6, [r1, #0]
 800f684:	d514      	bpl.n	800f6b0 <_printf_i+0x1ac>
 800f686:	07d9      	lsls	r1, r3, #31
 800f688:	bf44      	itt	mi
 800f68a:	f043 0320 	orrmi.w	r3, r3, #32
 800f68e:	6023      	strmi	r3, [r4, #0]
 800f690:	b91d      	cbnz	r5, 800f69a <_printf_i+0x196>
 800f692:	6823      	ldr	r3, [r4, #0]
 800f694:	f023 0320 	bic.w	r3, r3, #32
 800f698:	6023      	str	r3, [r4, #0]
 800f69a:	2310      	movs	r3, #16
 800f69c:	e7b0      	b.n	800f600 <_printf_i+0xfc>
 800f69e:	6823      	ldr	r3, [r4, #0]
 800f6a0:	f043 0320 	orr.w	r3, r3, #32
 800f6a4:	6023      	str	r3, [r4, #0]
 800f6a6:	2378      	movs	r3, #120	; 0x78
 800f6a8:	4828      	ldr	r0, [pc, #160]	; (800f74c <_printf_i+0x248>)
 800f6aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f6ae:	e7e3      	b.n	800f678 <_printf_i+0x174>
 800f6b0:	065e      	lsls	r6, r3, #25
 800f6b2:	bf48      	it	mi
 800f6b4:	b2ad      	uxthmi	r5, r5
 800f6b6:	e7e6      	b.n	800f686 <_printf_i+0x182>
 800f6b8:	4616      	mov	r6, r2
 800f6ba:	e7bb      	b.n	800f634 <_printf_i+0x130>
 800f6bc:	680b      	ldr	r3, [r1, #0]
 800f6be:	6826      	ldr	r6, [r4, #0]
 800f6c0:	6960      	ldr	r0, [r4, #20]
 800f6c2:	1d1d      	adds	r5, r3, #4
 800f6c4:	600d      	str	r5, [r1, #0]
 800f6c6:	0635      	lsls	r5, r6, #24
 800f6c8:	681b      	ldr	r3, [r3, #0]
 800f6ca:	d501      	bpl.n	800f6d0 <_printf_i+0x1cc>
 800f6cc:	6018      	str	r0, [r3, #0]
 800f6ce:	e002      	b.n	800f6d6 <_printf_i+0x1d2>
 800f6d0:	0671      	lsls	r1, r6, #25
 800f6d2:	d5fb      	bpl.n	800f6cc <_printf_i+0x1c8>
 800f6d4:	8018      	strh	r0, [r3, #0]
 800f6d6:	2300      	movs	r3, #0
 800f6d8:	6123      	str	r3, [r4, #16]
 800f6da:	4616      	mov	r6, r2
 800f6dc:	e7ba      	b.n	800f654 <_printf_i+0x150>
 800f6de:	680b      	ldr	r3, [r1, #0]
 800f6e0:	1d1a      	adds	r2, r3, #4
 800f6e2:	600a      	str	r2, [r1, #0]
 800f6e4:	681e      	ldr	r6, [r3, #0]
 800f6e6:	6862      	ldr	r2, [r4, #4]
 800f6e8:	2100      	movs	r1, #0
 800f6ea:	4630      	mov	r0, r6
 800f6ec:	f7f0 fd90 	bl	8000210 <memchr>
 800f6f0:	b108      	cbz	r0, 800f6f6 <_printf_i+0x1f2>
 800f6f2:	1b80      	subs	r0, r0, r6
 800f6f4:	6060      	str	r0, [r4, #4]
 800f6f6:	6863      	ldr	r3, [r4, #4]
 800f6f8:	6123      	str	r3, [r4, #16]
 800f6fa:	2300      	movs	r3, #0
 800f6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f700:	e7a8      	b.n	800f654 <_printf_i+0x150>
 800f702:	6923      	ldr	r3, [r4, #16]
 800f704:	4632      	mov	r2, r6
 800f706:	4649      	mov	r1, r9
 800f708:	4640      	mov	r0, r8
 800f70a:	47d0      	blx	sl
 800f70c:	3001      	adds	r0, #1
 800f70e:	d0ab      	beq.n	800f668 <_printf_i+0x164>
 800f710:	6823      	ldr	r3, [r4, #0]
 800f712:	079b      	lsls	r3, r3, #30
 800f714:	d413      	bmi.n	800f73e <_printf_i+0x23a>
 800f716:	68e0      	ldr	r0, [r4, #12]
 800f718:	9b03      	ldr	r3, [sp, #12]
 800f71a:	4298      	cmp	r0, r3
 800f71c:	bfb8      	it	lt
 800f71e:	4618      	movlt	r0, r3
 800f720:	e7a4      	b.n	800f66c <_printf_i+0x168>
 800f722:	2301      	movs	r3, #1
 800f724:	4632      	mov	r2, r6
 800f726:	4649      	mov	r1, r9
 800f728:	4640      	mov	r0, r8
 800f72a:	47d0      	blx	sl
 800f72c:	3001      	adds	r0, #1
 800f72e:	d09b      	beq.n	800f668 <_printf_i+0x164>
 800f730:	3501      	adds	r5, #1
 800f732:	68e3      	ldr	r3, [r4, #12]
 800f734:	9903      	ldr	r1, [sp, #12]
 800f736:	1a5b      	subs	r3, r3, r1
 800f738:	42ab      	cmp	r3, r5
 800f73a:	dcf2      	bgt.n	800f722 <_printf_i+0x21e>
 800f73c:	e7eb      	b.n	800f716 <_printf_i+0x212>
 800f73e:	2500      	movs	r5, #0
 800f740:	f104 0619 	add.w	r6, r4, #25
 800f744:	e7f5      	b.n	800f732 <_printf_i+0x22e>
 800f746:	bf00      	nop
 800f748:	08012c1d 	.word	0x08012c1d
 800f74c:	08012c2e 	.word	0x08012c2e

0800f750 <memmove>:
 800f750:	4288      	cmp	r0, r1
 800f752:	b510      	push	{r4, lr}
 800f754:	eb01 0402 	add.w	r4, r1, r2
 800f758:	d902      	bls.n	800f760 <memmove+0x10>
 800f75a:	4284      	cmp	r4, r0
 800f75c:	4623      	mov	r3, r4
 800f75e:	d807      	bhi.n	800f770 <memmove+0x20>
 800f760:	1e43      	subs	r3, r0, #1
 800f762:	42a1      	cmp	r1, r4
 800f764:	d008      	beq.n	800f778 <memmove+0x28>
 800f766:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f76a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f76e:	e7f8      	b.n	800f762 <memmove+0x12>
 800f770:	4402      	add	r2, r0
 800f772:	4601      	mov	r1, r0
 800f774:	428a      	cmp	r2, r1
 800f776:	d100      	bne.n	800f77a <memmove+0x2a>
 800f778:	bd10      	pop	{r4, pc}
 800f77a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f77e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f782:	e7f7      	b.n	800f774 <memmove+0x24>

0800f784 <_free_r>:
 800f784:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f786:	2900      	cmp	r1, #0
 800f788:	d048      	beq.n	800f81c <_free_r+0x98>
 800f78a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f78e:	9001      	str	r0, [sp, #4]
 800f790:	2b00      	cmp	r3, #0
 800f792:	f1a1 0404 	sub.w	r4, r1, #4
 800f796:	bfb8      	it	lt
 800f798:	18e4      	addlt	r4, r4, r3
 800f79a:	f000 f8d3 	bl	800f944 <__malloc_lock>
 800f79e:	4a20      	ldr	r2, [pc, #128]	; (800f820 <_free_r+0x9c>)
 800f7a0:	9801      	ldr	r0, [sp, #4]
 800f7a2:	6813      	ldr	r3, [r2, #0]
 800f7a4:	4615      	mov	r5, r2
 800f7a6:	b933      	cbnz	r3, 800f7b6 <_free_r+0x32>
 800f7a8:	6063      	str	r3, [r4, #4]
 800f7aa:	6014      	str	r4, [r2, #0]
 800f7ac:	b003      	add	sp, #12
 800f7ae:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f7b2:	f000 b8cd 	b.w	800f950 <__malloc_unlock>
 800f7b6:	42a3      	cmp	r3, r4
 800f7b8:	d90b      	bls.n	800f7d2 <_free_r+0x4e>
 800f7ba:	6821      	ldr	r1, [r4, #0]
 800f7bc:	1862      	adds	r2, r4, r1
 800f7be:	4293      	cmp	r3, r2
 800f7c0:	bf04      	itt	eq
 800f7c2:	681a      	ldreq	r2, [r3, #0]
 800f7c4:	685b      	ldreq	r3, [r3, #4]
 800f7c6:	6063      	str	r3, [r4, #4]
 800f7c8:	bf04      	itt	eq
 800f7ca:	1852      	addeq	r2, r2, r1
 800f7cc:	6022      	streq	r2, [r4, #0]
 800f7ce:	602c      	str	r4, [r5, #0]
 800f7d0:	e7ec      	b.n	800f7ac <_free_r+0x28>
 800f7d2:	461a      	mov	r2, r3
 800f7d4:	685b      	ldr	r3, [r3, #4]
 800f7d6:	b10b      	cbz	r3, 800f7dc <_free_r+0x58>
 800f7d8:	42a3      	cmp	r3, r4
 800f7da:	d9fa      	bls.n	800f7d2 <_free_r+0x4e>
 800f7dc:	6811      	ldr	r1, [r2, #0]
 800f7de:	1855      	adds	r5, r2, r1
 800f7e0:	42a5      	cmp	r5, r4
 800f7e2:	d10b      	bne.n	800f7fc <_free_r+0x78>
 800f7e4:	6824      	ldr	r4, [r4, #0]
 800f7e6:	4421      	add	r1, r4
 800f7e8:	1854      	adds	r4, r2, r1
 800f7ea:	42a3      	cmp	r3, r4
 800f7ec:	6011      	str	r1, [r2, #0]
 800f7ee:	d1dd      	bne.n	800f7ac <_free_r+0x28>
 800f7f0:	681c      	ldr	r4, [r3, #0]
 800f7f2:	685b      	ldr	r3, [r3, #4]
 800f7f4:	6053      	str	r3, [r2, #4]
 800f7f6:	4421      	add	r1, r4
 800f7f8:	6011      	str	r1, [r2, #0]
 800f7fa:	e7d7      	b.n	800f7ac <_free_r+0x28>
 800f7fc:	d902      	bls.n	800f804 <_free_r+0x80>
 800f7fe:	230c      	movs	r3, #12
 800f800:	6003      	str	r3, [r0, #0]
 800f802:	e7d3      	b.n	800f7ac <_free_r+0x28>
 800f804:	6825      	ldr	r5, [r4, #0]
 800f806:	1961      	adds	r1, r4, r5
 800f808:	428b      	cmp	r3, r1
 800f80a:	bf04      	itt	eq
 800f80c:	6819      	ldreq	r1, [r3, #0]
 800f80e:	685b      	ldreq	r3, [r3, #4]
 800f810:	6063      	str	r3, [r4, #4]
 800f812:	bf04      	itt	eq
 800f814:	1949      	addeq	r1, r1, r5
 800f816:	6021      	streq	r1, [r4, #0]
 800f818:	6054      	str	r4, [r2, #4]
 800f81a:	e7c7      	b.n	800f7ac <_free_r+0x28>
 800f81c:	b003      	add	sp, #12
 800f81e:	bd30      	pop	{r4, r5, pc}
 800f820:	2000865c 	.word	0x2000865c

0800f824 <_malloc_r>:
 800f824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f826:	1ccd      	adds	r5, r1, #3
 800f828:	f025 0503 	bic.w	r5, r5, #3
 800f82c:	3508      	adds	r5, #8
 800f82e:	2d0c      	cmp	r5, #12
 800f830:	bf38      	it	cc
 800f832:	250c      	movcc	r5, #12
 800f834:	2d00      	cmp	r5, #0
 800f836:	4606      	mov	r6, r0
 800f838:	db01      	blt.n	800f83e <_malloc_r+0x1a>
 800f83a:	42a9      	cmp	r1, r5
 800f83c:	d903      	bls.n	800f846 <_malloc_r+0x22>
 800f83e:	230c      	movs	r3, #12
 800f840:	6033      	str	r3, [r6, #0]
 800f842:	2000      	movs	r0, #0
 800f844:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f846:	f000 f87d 	bl	800f944 <__malloc_lock>
 800f84a:	4921      	ldr	r1, [pc, #132]	; (800f8d0 <_malloc_r+0xac>)
 800f84c:	680a      	ldr	r2, [r1, #0]
 800f84e:	4614      	mov	r4, r2
 800f850:	b99c      	cbnz	r4, 800f87a <_malloc_r+0x56>
 800f852:	4f20      	ldr	r7, [pc, #128]	; (800f8d4 <_malloc_r+0xb0>)
 800f854:	683b      	ldr	r3, [r7, #0]
 800f856:	b923      	cbnz	r3, 800f862 <_malloc_r+0x3e>
 800f858:	4621      	mov	r1, r4
 800f85a:	4630      	mov	r0, r6
 800f85c:	f000 f862 	bl	800f924 <_sbrk_r>
 800f860:	6038      	str	r0, [r7, #0]
 800f862:	4629      	mov	r1, r5
 800f864:	4630      	mov	r0, r6
 800f866:	f000 f85d 	bl	800f924 <_sbrk_r>
 800f86a:	1c43      	adds	r3, r0, #1
 800f86c:	d123      	bne.n	800f8b6 <_malloc_r+0x92>
 800f86e:	230c      	movs	r3, #12
 800f870:	6033      	str	r3, [r6, #0]
 800f872:	4630      	mov	r0, r6
 800f874:	f000 f86c 	bl	800f950 <__malloc_unlock>
 800f878:	e7e3      	b.n	800f842 <_malloc_r+0x1e>
 800f87a:	6823      	ldr	r3, [r4, #0]
 800f87c:	1b5b      	subs	r3, r3, r5
 800f87e:	d417      	bmi.n	800f8b0 <_malloc_r+0x8c>
 800f880:	2b0b      	cmp	r3, #11
 800f882:	d903      	bls.n	800f88c <_malloc_r+0x68>
 800f884:	6023      	str	r3, [r4, #0]
 800f886:	441c      	add	r4, r3
 800f888:	6025      	str	r5, [r4, #0]
 800f88a:	e004      	b.n	800f896 <_malloc_r+0x72>
 800f88c:	6863      	ldr	r3, [r4, #4]
 800f88e:	42a2      	cmp	r2, r4
 800f890:	bf0c      	ite	eq
 800f892:	600b      	streq	r3, [r1, #0]
 800f894:	6053      	strne	r3, [r2, #4]
 800f896:	4630      	mov	r0, r6
 800f898:	f000 f85a 	bl	800f950 <__malloc_unlock>
 800f89c:	f104 000b 	add.w	r0, r4, #11
 800f8a0:	1d23      	adds	r3, r4, #4
 800f8a2:	f020 0007 	bic.w	r0, r0, #7
 800f8a6:	1ac2      	subs	r2, r0, r3
 800f8a8:	d0cc      	beq.n	800f844 <_malloc_r+0x20>
 800f8aa:	1a1b      	subs	r3, r3, r0
 800f8ac:	50a3      	str	r3, [r4, r2]
 800f8ae:	e7c9      	b.n	800f844 <_malloc_r+0x20>
 800f8b0:	4622      	mov	r2, r4
 800f8b2:	6864      	ldr	r4, [r4, #4]
 800f8b4:	e7cc      	b.n	800f850 <_malloc_r+0x2c>
 800f8b6:	1cc4      	adds	r4, r0, #3
 800f8b8:	f024 0403 	bic.w	r4, r4, #3
 800f8bc:	42a0      	cmp	r0, r4
 800f8be:	d0e3      	beq.n	800f888 <_malloc_r+0x64>
 800f8c0:	1a21      	subs	r1, r4, r0
 800f8c2:	4630      	mov	r0, r6
 800f8c4:	f000 f82e 	bl	800f924 <_sbrk_r>
 800f8c8:	3001      	adds	r0, #1
 800f8ca:	d1dd      	bne.n	800f888 <_malloc_r+0x64>
 800f8cc:	e7cf      	b.n	800f86e <_malloc_r+0x4a>
 800f8ce:	bf00      	nop
 800f8d0:	2000865c 	.word	0x2000865c
 800f8d4:	20008660 	.word	0x20008660

0800f8d8 <_realloc_r>:
 800f8d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f8da:	4607      	mov	r7, r0
 800f8dc:	4614      	mov	r4, r2
 800f8de:	460e      	mov	r6, r1
 800f8e0:	b921      	cbnz	r1, 800f8ec <_realloc_r+0x14>
 800f8e2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f8e6:	4611      	mov	r1, r2
 800f8e8:	f7ff bf9c 	b.w	800f824 <_malloc_r>
 800f8ec:	b922      	cbnz	r2, 800f8f8 <_realloc_r+0x20>
 800f8ee:	f7ff ff49 	bl	800f784 <_free_r>
 800f8f2:	4625      	mov	r5, r4
 800f8f4:	4628      	mov	r0, r5
 800f8f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f8f8:	f000 f830 	bl	800f95c <_malloc_usable_size_r>
 800f8fc:	42a0      	cmp	r0, r4
 800f8fe:	d20f      	bcs.n	800f920 <_realloc_r+0x48>
 800f900:	4621      	mov	r1, r4
 800f902:	4638      	mov	r0, r7
 800f904:	f7ff ff8e 	bl	800f824 <_malloc_r>
 800f908:	4605      	mov	r5, r0
 800f90a:	2800      	cmp	r0, #0
 800f90c:	d0f2      	beq.n	800f8f4 <_realloc_r+0x1c>
 800f90e:	4631      	mov	r1, r6
 800f910:	4622      	mov	r2, r4
 800f912:	f7ff fbf7 	bl	800f104 <memcpy>
 800f916:	4631      	mov	r1, r6
 800f918:	4638      	mov	r0, r7
 800f91a:	f7ff ff33 	bl	800f784 <_free_r>
 800f91e:	e7e9      	b.n	800f8f4 <_realloc_r+0x1c>
 800f920:	4635      	mov	r5, r6
 800f922:	e7e7      	b.n	800f8f4 <_realloc_r+0x1c>

0800f924 <_sbrk_r>:
 800f924:	b538      	push	{r3, r4, r5, lr}
 800f926:	4d06      	ldr	r5, [pc, #24]	; (800f940 <_sbrk_r+0x1c>)
 800f928:	2300      	movs	r3, #0
 800f92a:	4604      	mov	r4, r0
 800f92c:	4608      	mov	r0, r1
 800f92e:	602b      	str	r3, [r5, #0]
 800f930:	f7f6 f878 	bl	8005a24 <_sbrk>
 800f934:	1c43      	adds	r3, r0, #1
 800f936:	d102      	bne.n	800f93e <_sbrk_r+0x1a>
 800f938:	682b      	ldr	r3, [r5, #0]
 800f93a:	b103      	cbz	r3, 800f93e <_sbrk_r+0x1a>
 800f93c:	6023      	str	r3, [r4, #0]
 800f93e:	bd38      	pop	{r3, r4, r5, pc}
 800f940:	20008e3c 	.word	0x20008e3c

0800f944 <__malloc_lock>:
 800f944:	4801      	ldr	r0, [pc, #4]	; (800f94c <__malloc_lock+0x8>)
 800f946:	f000 b811 	b.w	800f96c <__retarget_lock_acquire_recursive>
 800f94a:	bf00      	nop
 800f94c:	20008e44 	.word	0x20008e44

0800f950 <__malloc_unlock>:
 800f950:	4801      	ldr	r0, [pc, #4]	; (800f958 <__malloc_unlock+0x8>)
 800f952:	f000 b80c 	b.w	800f96e <__retarget_lock_release_recursive>
 800f956:	bf00      	nop
 800f958:	20008e44 	.word	0x20008e44

0800f95c <_malloc_usable_size_r>:
 800f95c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f960:	1f18      	subs	r0, r3, #4
 800f962:	2b00      	cmp	r3, #0
 800f964:	bfbc      	itt	lt
 800f966:	580b      	ldrlt	r3, [r1, r0]
 800f968:	18c0      	addlt	r0, r0, r3
 800f96a:	4770      	bx	lr

0800f96c <__retarget_lock_acquire_recursive>:
 800f96c:	4770      	bx	lr

0800f96e <__retarget_lock_release_recursive>:
 800f96e:	4770      	bx	lr

0800f970 <cos>:
 800f970:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f972:	ec53 2b10 	vmov	r2, r3, d0
 800f976:	4824      	ldr	r0, [pc, #144]	; (800fa08 <cos+0x98>)
 800f978:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f97c:	4281      	cmp	r1, r0
 800f97e:	dc06      	bgt.n	800f98e <cos+0x1e>
 800f980:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800fa00 <cos+0x90>
 800f984:	f000 faa4 	bl	800fed0 <__kernel_cos>
 800f988:	ec51 0b10 	vmov	r0, r1, d0
 800f98c:	e007      	b.n	800f99e <cos+0x2e>
 800f98e:	481f      	ldr	r0, [pc, #124]	; (800fa0c <cos+0x9c>)
 800f990:	4281      	cmp	r1, r0
 800f992:	dd09      	ble.n	800f9a8 <cos+0x38>
 800f994:	ee10 0a10 	vmov	r0, s0
 800f998:	4619      	mov	r1, r3
 800f99a:	f7f0 fc8d 	bl	80002b8 <__aeabi_dsub>
 800f99e:	ec41 0b10 	vmov	d0, r0, r1
 800f9a2:	b005      	add	sp, #20
 800f9a4:	f85d fb04 	ldr.w	pc, [sp], #4
 800f9a8:	4668      	mov	r0, sp
 800f9aa:	f000 f885 	bl	800fab8 <__ieee754_rem_pio2>
 800f9ae:	f000 0003 	and.w	r0, r0, #3
 800f9b2:	2801      	cmp	r0, #1
 800f9b4:	d007      	beq.n	800f9c6 <cos+0x56>
 800f9b6:	2802      	cmp	r0, #2
 800f9b8:	d012      	beq.n	800f9e0 <cos+0x70>
 800f9ba:	b9c0      	cbnz	r0, 800f9ee <cos+0x7e>
 800f9bc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9c0:	ed9d 0b00 	vldr	d0, [sp]
 800f9c4:	e7de      	b.n	800f984 <cos+0x14>
 800f9c6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9ca:	ed9d 0b00 	vldr	d0, [sp]
 800f9ce:	f000 fe87 	bl	80106e0 <__kernel_sin>
 800f9d2:	ec53 2b10 	vmov	r2, r3, d0
 800f9d6:	ee10 0a10 	vmov	r0, s0
 800f9da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f9de:	e7de      	b.n	800f99e <cos+0x2e>
 800f9e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9e4:	ed9d 0b00 	vldr	d0, [sp]
 800f9e8:	f000 fa72 	bl	800fed0 <__kernel_cos>
 800f9ec:	e7f1      	b.n	800f9d2 <cos+0x62>
 800f9ee:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f9f2:	ed9d 0b00 	vldr	d0, [sp]
 800f9f6:	2001      	movs	r0, #1
 800f9f8:	f000 fe72 	bl	80106e0 <__kernel_sin>
 800f9fc:	e7c4      	b.n	800f988 <cos+0x18>
 800f9fe:	bf00      	nop
	...
 800fa08:	3fe921fb 	.word	0x3fe921fb
 800fa0c:	7fefffff 	.word	0x7fefffff

0800fa10 <sin>:
 800fa10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800fa12:	ec53 2b10 	vmov	r2, r3, d0
 800fa16:	4826      	ldr	r0, [pc, #152]	; (800fab0 <sin+0xa0>)
 800fa18:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800fa1c:	4281      	cmp	r1, r0
 800fa1e:	dc07      	bgt.n	800fa30 <sin+0x20>
 800fa20:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800faa8 <sin+0x98>
 800fa24:	2000      	movs	r0, #0
 800fa26:	f000 fe5b 	bl	80106e0 <__kernel_sin>
 800fa2a:	ec51 0b10 	vmov	r0, r1, d0
 800fa2e:	e007      	b.n	800fa40 <sin+0x30>
 800fa30:	4820      	ldr	r0, [pc, #128]	; (800fab4 <sin+0xa4>)
 800fa32:	4281      	cmp	r1, r0
 800fa34:	dd09      	ble.n	800fa4a <sin+0x3a>
 800fa36:	ee10 0a10 	vmov	r0, s0
 800fa3a:	4619      	mov	r1, r3
 800fa3c:	f7f0 fc3c 	bl	80002b8 <__aeabi_dsub>
 800fa40:	ec41 0b10 	vmov	d0, r0, r1
 800fa44:	b005      	add	sp, #20
 800fa46:	f85d fb04 	ldr.w	pc, [sp], #4
 800fa4a:	4668      	mov	r0, sp
 800fa4c:	f000 f834 	bl	800fab8 <__ieee754_rem_pio2>
 800fa50:	f000 0003 	and.w	r0, r0, #3
 800fa54:	2801      	cmp	r0, #1
 800fa56:	d008      	beq.n	800fa6a <sin+0x5a>
 800fa58:	2802      	cmp	r0, #2
 800fa5a:	d00d      	beq.n	800fa78 <sin+0x68>
 800fa5c:	b9d0      	cbnz	r0, 800fa94 <sin+0x84>
 800fa5e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa62:	ed9d 0b00 	vldr	d0, [sp]
 800fa66:	2001      	movs	r0, #1
 800fa68:	e7dd      	b.n	800fa26 <sin+0x16>
 800fa6a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa6e:	ed9d 0b00 	vldr	d0, [sp]
 800fa72:	f000 fa2d 	bl	800fed0 <__kernel_cos>
 800fa76:	e7d8      	b.n	800fa2a <sin+0x1a>
 800fa78:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa7c:	ed9d 0b00 	vldr	d0, [sp]
 800fa80:	2001      	movs	r0, #1
 800fa82:	f000 fe2d 	bl	80106e0 <__kernel_sin>
 800fa86:	ec53 2b10 	vmov	r2, r3, d0
 800fa8a:	ee10 0a10 	vmov	r0, s0
 800fa8e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800fa92:	e7d5      	b.n	800fa40 <sin+0x30>
 800fa94:	ed9d 1b02 	vldr	d1, [sp, #8]
 800fa98:	ed9d 0b00 	vldr	d0, [sp]
 800fa9c:	f000 fa18 	bl	800fed0 <__kernel_cos>
 800faa0:	e7f1      	b.n	800fa86 <sin+0x76>
 800faa2:	bf00      	nop
 800faa4:	f3af 8000 	nop.w
	...
 800fab0:	3fe921fb 	.word	0x3fe921fb
 800fab4:	7fefffff 	.word	0x7fefffff

0800fab8 <__ieee754_rem_pio2>:
 800fab8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fabc:	ed2d 8b02 	vpush	{d8}
 800fac0:	ec55 4b10 	vmov	r4, r5, d0
 800fac4:	4bca      	ldr	r3, [pc, #808]	; (800fdf0 <__ieee754_rem_pio2+0x338>)
 800fac6:	b08b      	sub	sp, #44	; 0x2c
 800fac8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800facc:	4598      	cmp	r8, r3
 800face:	4682      	mov	sl, r0
 800fad0:	9502      	str	r5, [sp, #8]
 800fad2:	dc08      	bgt.n	800fae6 <__ieee754_rem_pio2+0x2e>
 800fad4:	2200      	movs	r2, #0
 800fad6:	2300      	movs	r3, #0
 800fad8:	ed80 0b00 	vstr	d0, [r0]
 800fadc:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800fae0:	f04f 0b00 	mov.w	fp, #0
 800fae4:	e028      	b.n	800fb38 <__ieee754_rem_pio2+0x80>
 800fae6:	4bc3      	ldr	r3, [pc, #780]	; (800fdf4 <__ieee754_rem_pio2+0x33c>)
 800fae8:	4598      	cmp	r8, r3
 800faea:	dc78      	bgt.n	800fbde <__ieee754_rem_pio2+0x126>
 800faec:	9b02      	ldr	r3, [sp, #8]
 800faee:	4ec2      	ldr	r6, [pc, #776]	; (800fdf8 <__ieee754_rem_pio2+0x340>)
 800faf0:	2b00      	cmp	r3, #0
 800faf2:	ee10 0a10 	vmov	r0, s0
 800faf6:	a3b0      	add	r3, pc, #704	; (adr r3, 800fdb8 <__ieee754_rem_pio2+0x300>)
 800faf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fafc:	4629      	mov	r1, r5
 800fafe:	dd39      	ble.n	800fb74 <__ieee754_rem_pio2+0xbc>
 800fb00:	f7f0 fbda 	bl	80002b8 <__aeabi_dsub>
 800fb04:	45b0      	cmp	r8, r6
 800fb06:	4604      	mov	r4, r0
 800fb08:	460d      	mov	r5, r1
 800fb0a:	d01b      	beq.n	800fb44 <__ieee754_rem_pio2+0x8c>
 800fb0c:	a3ac      	add	r3, pc, #688	; (adr r3, 800fdc0 <__ieee754_rem_pio2+0x308>)
 800fb0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb12:	f7f0 fbd1 	bl	80002b8 <__aeabi_dsub>
 800fb16:	4602      	mov	r2, r0
 800fb18:	460b      	mov	r3, r1
 800fb1a:	e9ca 2300 	strd	r2, r3, [sl]
 800fb1e:	4620      	mov	r0, r4
 800fb20:	4629      	mov	r1, r5
 800fb22:	f7f0 fbc9 	bl	80002b8 <__aeabi_dsub>
 800fb26:	a3a6      	add	r3, pc, #664	; (adr r3, 800fdc0 <__ieee754_rem_pio2+0x308>)
 800fb28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb2c:	f7f0 fbc4 	bl	80002b8 <__aeabi_dsub>
 800fb30:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fb34:	f04f 0b01 	mov.w	fp, #1
 800fb38:	4658      	mov	r0, fp
 800fb3a:	b00b      	add	sp, #44	; 0x2c
 800fb3c:	ecbd 8b02 	vpop	{d8}
 800fb40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb44:	a3a0      	add	r3, pc, #640	; (adr r3, 800fdc8 <__ieee754_rem_pio2+0x310>)
 800fb46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb4a:	f7f0 fbb5 	bl	80002b8 <__aeabi_dsub>
 800fb4e:	a3a0      	add	r3, pc, #640	; (adr r3, 800fdd0 <__ieee754_rem_pio2+0x318>)
 800fb50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb54:	4604      	mov	r4, r0
 800fb56:	460d      	mov	r5, r1
 800fb58:	f7f0 fbae 	bl	80002b8 <__aeabi_dsub>
 800fb5c:	4602      	mov	r2, r0
 800fb5e:	460b      	mov	r3, r1
 800fb60:	e9ca 2300 	strd	r2, r3, [sl]
 800fb64:	4620      	mov	r0, r4
 800fb66:	4629      	mov	r1, r5
 800fb68:	f7f0 fba6 	bl	80002b8 <__aeabi_dsub>
 800fb6c:	a398      	add	r3, pc, #608	; (adr r3, 800fdd0 <__ieee754_rem_pio2+0x318>)
 800fb6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb72:	e7db      	b.n	800fb2c <__ieee754_rem_pio2+0x74>
 800fb74:	f7f0 fba2 	bl	80002bc <__adddf3>
 800fb78:	45b0      	cmp	r8, r6
 800fb7a:	4604      	mov	r4, r0
 800fb7c:	460d      	mov	r5, r1
 800fb7e:	d016      	beq.n	800fbae <__ieee754_rem_pio2+0xf6>
 800fb80:	a38f      	add	r3, pc, #572	; (adr r3, 800fdc0 <__ieee754_rem_pio2+0x308>)
 800fb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb86:	f7f0 fb99 	bl	80002bc <__adddf3>
 800fb8a:	4602      	mov	r2, r0
 800fb8c:	460b      	mov	r3, r1
 800fb8e:	e9ca 2300 	strd	r2, r3, [sl]
 800fb92:	4620      	mov	r0, r4
 800fb94:	4629      	mov	r1, r5
 800fb96:	f7f0 fb8f 	bl	80002b8 <__aeabi_dsub>
 800fb9a:	a389      	add	r3, pc, #548	; (adr r3, 800fdc0 <__ieee754_rem_pio2+0x308>)
 800fb9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba0:	f7f0 fb8c 	bl	80002bc <__adddf3>
 800fba4:	f04f 3bff 	mov.w	fp, #4294967295
 800fba8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fbac:	e7c4      	b.n	800fb38 <__ieee754_rem_pio2+0x80>
 800fbae:	a386      	add	r3, pc, #536	; (adr r3, 800fdc8 <__ieee754_rem_pio2+0x310>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 fb82 	bl	80002bc <__adddf3>
 800fbb8:	a385      	add	r3, pc, #532	; (adr r3, 800fdd0 <__ieee754_rem_pio2+0x318>)
 800fbba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbbe:	4604      	mov	r4, r0
 800fbc0:	460d      	mov	r5, r1
 800fbc2:	f7f0 fb7b 	bl	80002bc <__adddf3>
 800fbc6:	4602      	mov	r2, r0
 800fbc8:	460b      	mov	r3, r1
 800fbca:	e9ca 2300 	strd	r2, r3, [sl]
 800fbce:	4620      	mov	r0, r4
 800fbd0:	4629      	mov	r1, r5
 800fbd2:	f7f0 fb71 	bl	80002b8 <__aeabi_dsub>
 800fbd6:	a37e      	add	r3, pc, #504	; (adr r3, 800fdd0 <__ieee754_rem_pio2+0x318>)
 800fbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbdc:	e7e0      	b.n	800fba0 <__ieee754_rem_pio2+0xe8>
 800fbde:	4b87      	ldr	r3, [pc, #540]	; (800fdfc <__ieee754_rem_pio2+0x344>)
 800fbe0:	4598      	cmp	r8, r3
 800fbe2:	f300 80d9 	bgt.w	800fd98 <__ieee754_rem_pio2+0x2e0>
 800fbe6:	f000 fe39 	bl	801085c <fabs>
 800fbea:	ec55 4b10 	vmov	r4, r5, d0
 800fbee:	ee10 0a10 	vmov	r0, s0
 800fbf2:	a379      	add	r3, pc, #484	; (adr r3, 800fdd8 <__ieee754_rem_pio2+0x320>)
 800fbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbf8:	4629      	mov	r1, r5
 800fbfa:	f7f0 fd15 	bl	8000628 <__aeabi_dmul>
 800fbfe:	4b80      	ldr	r3, [pc, #512]	; (800fe00 <__ieee754_rem_pio2+0x348>)
 800fc00:	2200      	movs	r2, #0
 800fc02:	f7f0 fb5b 	bl	80002bc <__adddf3>
 800fc06:	f7f0 ffa9 	bl	8000b5c <__aeabi_d2iz>
 800fc0a:	4683      	mov	fp, r0
 800fc0c:	f7f0 fca2 	bl	8000554 <__aeabi_i2d>
 800fc10:	4602      	mov	r2, r0
 800fc12:	460b      	mov	r3, r1
 800fc14:	ec43 2b18 	vmov	d8, r2, r3
 800fc18:	a367      	add	r3, pc, #412	; (adr r3, 800fdb8 <__ieee754_rem_pio2+0x300>)
 800fc1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc1e:	f7f0 fd03 	bl	8000628 <__aeabi_dmul>
 800fc22:	4602      	mov	r2, r0
 800fc24:	460b      	mov	r3, r1
 800fc26:	4620      	mov	r0, r4
 800fc28:	4629      	mov	r1, r5
 800fc2a:	f7f0 fb45 	bl	80002b8 <__aeabi_dsub>
 800fc2e:	a364      	add	r3, pc, #400	; (adr r3, 800fdc0 <__ieee754_rem_pio2+0x308>)
 800fc30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc34:	4606      	mov	r6, r0
 800fc36:	460f      	mov	r7, r1
 800fc38:	ec51 0b18 	vmov	r0, r1, d8
 800fc3c:	f7f0 fcf4 	bl	8000628 <__aeabi_dmul>
 800fc40:	f1bb 0f1f 	cmp.w	fp, #31
 800fc44:	4604      	mov	r4, r0
 800fc46:	460d      	mov	r5, r1
 800fc48:	dc0d      	bgt.n	800fc66 <__ieee754_rem_pio2+0x1ae>
 800fc4a:	4b6e      	ldr	r3, [pc, #440]	; (800fe04 <__ieee754_rem_pio2+0x34c>)
 800fc4c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800fc50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fc54:	4543      	cmp	r3, r8
 800fc56:	d006      	beq.n	800fc66 <__ieee754_rem_pio2+0x1ae>
 800fc58:	4622      	mov	r2, r4
 800fc5a:	462b      	mov	r3, r5
 800fc5c:	4630      	mov	r0, r6
 800fc5e:	4639      	mov	r1, r7
 800fc60:	f7f0 fb2a 	bl	80002b8 <__aeabi_dsub>
 800fc64:	e00f      	b.n	800fc86 <__ieee754_rem_pio2+0x1ce>
 800fc66:	462b      	mov	r3, r5
 800fc68:	4622      	mov	r2, r4
 800fc6a:	4630      	mov	r0, r6
 800fc6c:	4639      	mov	r1, r7
 800fc6e:	f7f0 fb23 	bl	80002b8 <__aeabi_dsub>
 800fc72:	ea4f 5328 	mov.w	r3, r8, asr #20
 800fc76:	9303      	str	r3, [sp, #12]
 800fc78:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fc7c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800fc80:	f1b8 0f10 	cmp.w	r8, #16
 800fc84:	dc02      	bgt.n	800fc8c <__ieee754_rem_pio2+0x1d4>
 800fc86:	e9ca 0100 	strd	r0, r1, [sl]
 800fc8a:	e039      	b.n	800fd00 <__ieee754_rem_pio2+0x248>
 800fc8c:	a34e      	add	r3, pc, #312	; (adr r3, 800fdc8 <__ieee754_rem_pio2+0x310>)
 800fc8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc92:	ec51 0b18 	vmov	r0, r1, d8
 800fc96:	f7f0 fcc7 	bl	8000628 <__aeabi_dmul>
 800fc9a:	4604      	mov	r4, r0
 800fc9c:	460d      	mov	r5, r1
 800fc9e:	4602      	mov	r2, r0
 800fca0:	460b      	mov	r3, r1
 800fca2:	4630      	mov	r0, r6
 800fca4:	4639      	mov	r1, r7
 800fca6:	f7f0 fb07 	bl	80002b8 <__aeabi_dsub>
 800fcaa:	4602      	mov	r2, r0
 800fcac:	460b      	mov	r3, r1
 800fcae:	4680      	mov	r8, r0
 800fcb0:	4689      	mov	r9, r1
 800fcb2:	4630      	mov	r0, r6
 800fcb4:	4639      	mov	r1, r7
 800fcb6:	f7f0 faff 	bl	80002b8 <__aeabi_dsub>
 800fcba:	4622      	mov	r2, r4
 800fcbc:	462b      	mov	r3, r5
 800fcbe:	f7f0 fafb 	bl	80002b8 <__aeabi_dsub>
 800fcc2:	a343      	add	r3, pc, #268	; (adr r3, 800fdd0 <__ieee754_rem_pio2+0x318>)
 800fcc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fcc8:	4604      	mov	r4, r0
 800fcca:	460d      	mov	r5, r1
 800fccc:	ec51 0b18 	vmov	r0, r1, d8
 800fcd0:	f7f0 fcaa 	bl	8000628 <__aeabi_dmul>
 800fcd4:	4622      	mov	r2, r4
 800fcd6:	462b      	mov	r3, r5
 800fcd8:	f7f0 faee 	bl	80002b8 <__aeabi_dsub>
 800fcdc:	4602      	mov	r2, r0
 800fcde:	460b      	mov	r3, r1
 800fce0:	4604      	mov	r4, r0
 800fce2:	460d      	mov	r5, r1
 800fce4:	4640      	mov	r0, r8
 800fce6:	4649      	mov	r1, r9
 800fce8:	f7f0 fae6 	bl	80002b8 <__aeabi_dsub>
 800fcec:	9a03      	ldr	r2, [sp, #12]
 800fcee:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800fcf2:	1ad3      	subs	r3, r2, r3
 800fcf4:	2b31      	cmp	r3, #49	; 0x31
 800fcf6:	dc24      	bgt.n	800fd42 <__ieee754_rem_pio2+0x28a>
 800fcf8:	e9ca 0100 	strd	r0, r1, [sl]
 800fcfc:	4646      	mov	r6, r8
 800fcfe:	464f      	mov	r7, r9
 800fd00:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd04:	4630      	mov	r0, r6
 800fd06:	4642      	mov	r2, r8
 800fd08:	464b      	mov	r3, r9
 800fd0a:	4639      	mov	r1, r7
 800fd0c:	f7f0 fad4 	bl	80002b8 <__aeabi_dsub>
 800fd10:	462b      	mov	r3, r5
 800fd12:	4622      	mov	r2, r4
 800fd14:	f7f0 fad0 	bl	80002b8 <__aeabi_dsub>
 800fd18:	9b02      	ldr	r3, [sp, #8]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fd20:	f6bf af0a 	bge.w	800fb38 <__ieee754_rem_pio2+0x80>
 800fd24:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800fd28:	f8ca 3004 	str.w	r3, [sl, #4]
 800fd2c:	f8ca 8000 	str.w	r8, [sl]
 800fd30:	f8ca 0008 	str.w	r0, [sl, #8]
 800fd34:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800fd38:	f8ca 300c 	str.w	r3, [sl, #12]
 800fd3c:	f1cb 0b00 	rsb	fp, fp, #0
 800fd40:	e6fa      	b.n	800fb38 <__ieee754_rem_pio2+0x80>
 800fd42:	a327      	add	r3, pc, #156	; (adr r3, 800fde0 <__ieee754_rem_pio2+0x328>)
 800fd44:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd48:	ec51 0b18 	vmov	r0, r1, d8
 800fd4c:	f7f0 fc6c 	bl	8000628 <__aeabi_dmul>
 800fd50:	4604      	mov	r4, r0
 800fd52:	460d      	mov	r5, r1
 800fd54:	4602      	mov	r2, r0
 800fd56:	460b      	mov	r3, r1
 800fd58:	4640      	mov	r0, r8
 800fd5a:	4649      	mov	r1, r9
 800fd5c:	f7f0 faac 	bl	80002b8 <__aeabi_dsub>
 800fd60:	4602      	mov	r2, r0
 800fd62:	460b      	mov	r3, r1
 800fd64:	4606      	mov	r6, r0
 800fd66:	460f      	mov	r7, r1
 800fd68:	4640      	mov	r0, r8
 800fd6a:	4649      	mov	r1, r9
 800fd6c:	f7f0 faa4 	bl	80002b8 <__aeabi_dsub>
 800fd70:	4622      	mov	r2, r4
 800fd72:	462b      	mov	r3, r5
 800fd74:	f7f0 faa0 	bl	80002b8 <__aeabi_dsub>
 800fd78:	a31b      	add	r3, pc, #108	; (adr r3, 800fde8 <__ieee754_rem_pio2+0x330>)
 800fd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd7e:	4604      	mov	r4, r0
 800fd80:	460d      	mov	r5, r1
 800fd82:	ec51 0b18 	vmov	r0, r1, d8
 800fd86:	f7f0 fc4f 	bl	8000628 <__aeabi_dmul>
 800fd8a:	4622      	mov	r2, r4
 800fd8c:	462b      	mov	r3, r5
 800fd8e:	f7f0 fa93 	bl	80002b8 <__aeabi_dsub>
 800fd92:	4604      	mov	r4, r0
 800fd94:	460d      	mov	r5, r1
 800fd96:	e75f      	b.n	800fc58 <__ieee754_rem_pio2+0x1a0>
 800fd98:	4b1b      	ldr	r3, [pc, #108]	; (800fe08 <__ieee754_rem_pio2+0x350>)
 800fd9a:	4598      	cmp	r8, r3
 800fd9c:	dd36      	ble.n	800fe0c <__ieee754_rem_pio2+0x354>
 800fd9e:	ee10 2a10 	vmov	r2, s0
 800fda2:	462b      	mov	r3, r5
 800fda4:	4620      	mov	r0, r4
 800fda6:	4629      	mov	r1, r5
 800fda8:	f7f0 fa86 	bl	80002b8 <__aeabi_dsub>
 800fdac:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800fdb0:	e9ca 0100 	strd	r0, r1, [sl]
 800fdb4:	e694      	b.n	800fae0 <__ieee754_rem_pio2+0x28>
 800fdb6:	bf00      	nop
 800fdb8:	54400000 	.word	0x54400000
 800fdbc:	3ff921fb 	.word	0x3ff921fb
 800fdc0:	1a626331 	.word	0x1a626331
 800fdc4:	3dd0b461 	.word	0x3dd0b461
 800fdc8:	1a600000 	.word	0x1a600000
 800fdcc:	3dd0b461 	.word	0x3dd0b461
 800fdd0:	2e037073 	.word	0x2e037073
 800fdd4:	3ba3198a 	.word	0x3ba3198a
 800fdd8:	6dc9c883 	.word	0x6dc9c883
 800fddc:	3fe45f30 	.word	0x3fe45f30
 800fde0:	2e000000 	.word	0x2e000000
 800fde4:	3ba3198a 	.word	0x3ba3198a
 800fde8:	252049c1 	.word	0x252049c1
 800fdec:	397b839a 	.word	0x397b839a
 800fdf0:	3fe921fb 	.word	0x3fe921fb
 800fdf4:	4002d97b 	.word	0x4002d97b
 800fdf8:	3ff921fb 	.word	0x3ff921fb
 800fdfc:	413921fb 	.word	0x413921fb
 800fe00:	3fe00000 	.word	0x3fe00000
 800fe04:	08012c40 	.word	0x08012c40
 800fe08:	7fefffff 	.word	0x7fefffff
 800fe0c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800fe10:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800fe14:	ee10 0a10 	vmov	r0, s0
 800fe18:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800fe1c:	ee10 6a10 	vmov	r6, s0
 800fe20:	460f      	mov	r7, r1
 800fe22:	f7f0 fe9b 	bl	8000b5c <__aeabi_d2iz>
 800fe26:	f7f0 fb95 	bl	8000554 <__aeabi_i2d>
 800fe2a:	4602      	mov	r2, r0
 800fe2c:	460b      	mov	r3, r1
 800fe2e:	4630      	mov	r0, r6
 800fe30:	4639      	mov	r1, r7
 800fe32:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800fe36:	f7f0 fa3f 	bl	80002b8 <__aeabi_dsub>
 800fe3a:	4b22      	ldr	r3, [pc, #136]	; (800fec4 <__ieee754_rem_pio2+0x40c>)
 800fe3c:	2200      	movs	r2, #0
 800fe3e:	f7f0 fbf3 	bl	8000628 <__aeabi_dmul>
 800fe42:	460f      	mov	r7, r1
 800fe44:	4606      	mov	r6, r0
 800fe46:	f7f0 fe89 	bl	8000b5c <__aeabi_d2iz>
 800fe4a:	f7f0 fb83 	bl	8000554 <__aeabi_i2d>
 800fe4e:	4602      	mov	r2, r0
 800fe50:	460b      	mov	r3, r1
 800fe52:	4630      	mov	r0, r6
 800fe54:	4639      	mov	r1, r7
 800fe56:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800fe5a:	f7f0 fa2d 	bl	80002b8 <__aeabi_dsub>
 800fe5e:	4b19      	ldr	r3, [pc, #100]	; (800fec4 <__ieee754_rem_pio2+0x40c>)
 800fe60:	2200      	movs	r2, #0
 800fe62:	f7f0 fbe1 	bl	8000628 <__aeabi_dmul>
 800fe66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800fe6a:	ad04      	add	r5, sp, #16
 800fe6c:	f04f 0803 	mov.w	r8, #3
 800fe70:	46a9      	mov	r9, r5
 800fe72:	2600      	movs	r6, #0
 800fe74:	2700      	movs	r7, #0
 800fe76:	4632      	mov	r2, r6
 800fe78:	463b      	mov	r3, r7
 800fe7a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800fe7e:	46c3      	mov	fp, r8
 800fe80:	3d08      	subs	r5, #8
 800fe82:	f108 38ff 	add.w	r8, r8, #4294967295
 800fe86:	f7f0 fe37 	bl	8000af8 <__aeabi_dcmpeq>
 800fe8a:	2800      	cmp	r0, #0
 800fe8c:	d1f3      	bne.n	800fe76 <__ieee754_rem_pio2+0x3be>
 800fe8e:	4b0e      	ldr	r3, [pc, #56]	; (800fec8 <__ieee754_rem_pio2+0x410>)
 800fe90:	9301      	str	r3, [sp, #4]
 800fe92:	2302      	movs	r3, #2
 800fe94:	9300      	str	r3, [sp, #0]
 800fe96:	4622      	mov	r2, r4
 800fe98:	465b      	mov	r3, fp
 800fe9a:	4651      	mov	r1, sl
 800fe9c:	4648      	mov	r0, r9
 800fe9e:	f000 f8df 	bl	8010060 <__kernel_rem_pio2>
 800fea2:	9b02      	ldr	r3, [sp, #8]
 800fea4:	2b00      	cmp	r3, #0
 800fea6:	4683      	mov	fp, r0
 800fea8:	f6bf ae46 	bge.w	800fb38 <__ieee754_rem_pio2+0x80>
 800feac:	f8da 3004 	ldr.w	r3, [sl, #4]
 800feb0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800feb4:	f8ca 3004 	str.w	r3, [sl, #4]
 800feb8:	f8da 300c 	ldr.w	r3, [sl, #12]
 800febc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fec0:	e73a      	b.n	800fd38 <__ieee754_rem_pio2+0x280>
 800fec2:	bf00      	nop
 800fec4:	41700000 	.word	0x41700000
 800fec8:	08012cc0 	.word	0x08012cc0
 800fecc:	00000000 	.word	0x00000000

0800fed0 <__kernel_cos>:
 800fed0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fed4:	ec57 6b10 	vmov	r6, r7, d0
 800fed8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800fedc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800fee0:	ed8d 1b00 	vstr	d1, [sp]
 800fee4:	da07      	bge.n	800fef6 <__kernel_cos+0x26>
 800fee6:	ee10 0a10 	vmov	r0, s0
 800feea:	4639      	mov	r1, r7
 800feec:	f7f0 fe36 	bl	8000b5c <__aeabi_d2iz>
 800fef0:	2800      	cmp	r0, #0
 800fef2:	f000 8088 	beq.w	8010006 <__kernel_cos+0x136>
 800fef6:	4632      	mov	r2, r6
 800fef8:	463b      	mov	r3, r7
 800fefa:	4630      	mov	r0, r6
 800fefc:	4639      	mov	r1, r7
 800fefe:	f7f0 fb93 	bl	8000628 <__aeabi_dmul>
 800ff02:	4b51      	ldr	r3, [pc, #324]	; (8010048 <__kernel_cos+0x178>)
 800ff04:	2200      	movs	r2, #0
 800ff06:	4604      	mov	r4, r0
 800ff08:	460d      	mov	r5, r1
 800ff0a:	f7f0 fb8d 	bl	8000628 <__aeabi_dmul>
 800ff0e:	a340      	add	r3, pc, #256	; (adr r3, 8010010 <__kernel_cos+0x140>)
 800ff10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff14:	4682      	mov	sl, r0
 800ff16:	468b      	mov	fp, r1
 800ff18:	4620      	mov	r0, r4
 800ff1a:	4629      	mov	r1, r5
 800ff1c:	f7f0 fb84 	bl	8000628 <__aeabi_dmul>
 800ff20:	a33d      	add	r3, pc, #244	; (adr r3, 8010018 <__kernel_cos+0x148>)
 800ff22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff26:	f7f0 f9c9 	bl	80002bc <__adddf3>
 800ff2a:	4622      	mov	r2, r4
 800ff2c:	462b      	mov	r3, r5
 800ff2e:	f7f0 fb7b 	bl	8000628 <__aeabi_dmul>
 800ff32:	a33b      	add	r3, pc, #236	; (adr r3, 8010020 <__kernel_cos+0x150>)
 800ff34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff38:	f7f0 f9be 	bl	80002b8 <__aeabi_dsub>
 800ff3c:	4622      	mov	r2, r4
 800ff3e:	462b      	mov	r3, r5
 800ff40:	f7f0 fb72 	bl	8000628 <__aeabi_dmul>
 800ff44:	a338      	add	r3, pc, #224	; (adr r3, 8010028 <__kernel_cos+0x158>)
 800ff46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff4a:	f7f0 f9b7 	bl	80002bc <__adddf3>
 800ff4e:	4622      	mov	r2, r4
 800ff50:	462b      	mov	r3, r5
 800ff52:	f7f0 fb69 	bl	8000628 <__aeabi_dmul>
 800ff56:	a336      	add	r3, pc, #216	; (adr r3, 8010030 <__kernel_cos+0x160>)
 800ff58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff5c:	f7f0 f9ac 	bl	80002b8 <__aeabi_dsub>
 800ff60:	4622      	mov	r2, r4
 800ff62:	462b      	mov	r3, r5
 800ff64:	f7f0 fb60 	bl	8000628 <__aeabi_dmul>
 800ff68:	a333      	add	r3, pc, #204	; (adr r3, 8010038 <__kernel_cos+0x168>)
 800ff6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ff6e:	f7f0 f9a5 	bl	80002bc <__adddf3>
 800ff72:	4622      	mov	r2, r4
 800ff74:	462b      	mov	r3, r5
 800ff76:	f7f0 fb57 	bl	8000628 <__aeabi_dmul>
 800ff7a:	4622      	mov	r2, r4
 800ff7c:	462b      	mov	r3, r5
 800ff7e:	f7f0 fb53 	bl	8000628 <__aeabi_dmul>
 800ff82:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ff86:	4604      	mov	r4, r0
 800ff88:	460d      	mov	r5, r1
 800ff8a:	4630      	mov	r0, r6
 800ff8c:	4639      	mov	r1, r7
 800ff8e:	f7f0 fb4b 	bl	8000628 <__aeabi_dmul>
 800ff92:	460b      	mov	r3, r1
 800ff94:	4602      	mov	r2, r0
 800ff96:	4629      	mov	r1, r5
 800ff98:	4620      	mov	r0, r4
 800ff9a:	f7f0 f98d 	bl	80002b8 <__aeabi_dsub>
 800ff9e:	4b2b      	ldr	r3, [pc, #172]	; (801004c <__kernel_cos+0x17c>)
 800ffa0:	4598      	cmp	r8, r3
 800ffa2:	4606      	mov	r6, r0
 800ffa4:	460f      	mov	r7, r1
 800ffa6:	dc10      	bgt.n	800ffca <__kernel_cos+0xfa>
 800ffa8:	4602      	mov	r2, r0
 800ffaa:	460b      	mov	r3, r1
 800ffac:	4650      	mov	r0, sl
 800ffae:	4659      	mov	r1, fp
 800ffb0:	f7f0 f982 	bl	80002b8 <__aeabi_dsub>
 800ffb4:	460b      	mov	r3, r1
 800ffb6:	4926      	ldr	r1, [pc, #152]	; (8010050 <__kernel_cos+0x180>)
 800ffb8:	4602      	mov	r2, r0
 800ffba:	2000      	movs	r0, #0
 800ffbc:	f7f0 f97c 	bl	80002b8 <__aeabi_dsub>
 800ffc0:	ec41 0b10 	vmov	d0, r0, r1
 800ffc4:	b003      	add	sp, #12
 800ffc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffca:	4b22      	ldr	r3, [pc, #136]	; (8010054 <__kernel_cos+0x184>)
 800ffcc:	4920      	ldr	r1, [pc, #128]	; (8010050 <__kernel_cos+0x180>)
 800ffce:	4598      	cmp	r8, r3
 800ffd0:	bfcc      	ite	gt
 800ffd2:	4d21      	ldrgt	r5, [pc, #132]	; (8010058 <__kernel_cos+0x188>)
 800ffd4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800ffd8:	2400      	movs	r4, #0
 800ffda:	4622      	mov	r2, r4
 800ffdc:	462b      	mov	r3, r5
 800ffde:	2000      	movs	r0, #0
 800ffe0:	f7f0 f96a 	bl	80002b8 <__aeabi_dsub>
 800ffe4:	4622      	mov	r2, r4
 800ffe6:	4680      	mov	r8, r0
 800ffe8:	4689      	mov	r9, r1
 800ffea:	462b      	mov	r3, r5
 800ffec:	4650      	mov	r0, sl
 800ffee:	4659      	mov	r1, fp
 800fff0:	f7f0 f962 	bl	80002b8 <__aeabi_dsub>
 800fff4:	4632      	mov	r2, r6
 800fff6:	463b      	mov	r3, r7
 800fff8:	f7f0 f95e 	bl	80002b8 <__aeabi_dsub>
 800fffc:	4602      	mov	r2, r0
 800fffe:	460b      	mov	r3, r1
 8010000:	4640      	mov	r0, r8
 8010002:	4649      	mov	r1, r9
 8010004:	e7da      	b.n	800ffbc <__kernel_cos+0xec>
 8010006:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8010040 <__kernel_cos+0x170>
 801000a:	e7db      	b.n	800ffc4 <__kernel_cos+0xf4>
 801000c:	f3af 8000 	nop.w
 8010010:	be8838d4 	.word	0xbe8838d4
 8010014:	bda8fae9 	.word	0xbda8fae9
 8010018:	bdb4b1c4 	.word	0xbdb4b1c4
 801001c:	3e21ee9e 	.word	0x3e21ee9e
 8010020:	809c52ad 	.word	0x809c52ad
 8010024:	3e927e4f 	.word	0x3e927e4f
 8010028:	19cb1590 	.word	0x19cb1590
 801002c:	3efa01a0 	.word	0x3efa01a0
 8010030:	16c15177 	.word	0x16c15177
 8010034:	3f56c16c 	.word	0x3f56c16c
 8010038:	5555554c 	.word	0x5555554c
 801003c:	3fa55555 	.word	0x3fa55555
 8010040:	00000000 	.word	0x00000000
 8010044:	3ff00000 	.word	0x3ff00000
 8010048:	3fe00000 	.word	0x3fe00000
 801004c:	3fd33332 	.word	0x3fd33332
 8010050:	3ff00000 	.word	0x3ff00000
 8010054:	3fe90000 	.word	0x3fe90000
 8010058:	3fd20000 	.word	0x3fd20000
 801005c:	00000000 	.word	0x00000000

08010060 <__kernel_rem_pio2>:
 8010060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010064:	ed2d 8b02 	vpush	{d8}
 8010068:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 801006c:	f112 0f14 	cmn.w	r2, #20
 8010070:	9308      	str	r3, [sp, #32]
 8010072:	9101      	str	r1, [sp, #4]
 8010074:	4bc6      	ldr	r3, [pc, #792]	; (8010390 <__kernel_rem_pio2+0x330>)
 8010076:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8010078:	9009      	str	r0, [sp, #36]	; 0x24
 801007a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801007e:	9304      	str	r3, [sp, #16]
 8010080:	9b08      	ldr	r3, [sp, #32]
 8010082:	f103 33ff 	add.w	r3, r3, #4294967295
 8010086:	bfa8      	it	ge
 8010088:	1ed4      	subge	r4, r2, #3
 801008a:	9306      	str	r3, [sp, #24]
 801008c:	bfb2      	itee	lt
 801008e:	2400      	movlt	r4, #0
 8010090:	2318      	movge	r3, #24
 8010092:	fb94 f4f3 	sdivge	r4, r4, r3
 8010096:	f06f 0317 	mvn.w	r3, #23
 801009a:	fb04 3303 	mla	r3, r4, r3, r3
 801009e:	eb03 0a02 	add.w	sl, r3, r2
 80100a2:	9b04      	ldr	r3, [sp, #16]
 80100a4:	9a06      	ldr	r2, [sp, #24]
 80100a6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8010380 <__kernel_rem_pio2+0x320>
 80100aa:	eb03 0802 	add.w	r8, r3, r2
 80100ae:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80100b0:	1aa7      	subs	r7, r4, r2
 80100b2:	ae20      	add	r6, sp, #128	; 0x80
 80100b4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80100b8:	2500      	movs	r5, #0
 80100ba:	4545      	cmp	r5, r8
 80100bc:	dd18      	ble.n	80100f0 <__kernel_rem_pio2+0x90>
 80100be:	9b08      	ldr	r3, [sp, #32]
 80100c0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80100c4:	aa20      	add	r2, sp, #128	; 0x80
 80100c6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8010380 <__kernel_rem_pio2+0x320>
 80100ca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80100ce:	f1c3 0301 	rsb	r3, r3, #1
 80100d2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80100d6:	9307      	str	r3, [sp, #28]
 80100d8:	9b07      	ldr	r3, [sp, #28]
 80100da:	9a04      	ldr	r2, [sp, #16]
 80100dc:	4443      	add	r3, r8
 80100de:	429a      	cmp	r2, r3
 80100e0:	db2f      	blt.n	8010142 <__kernel_rem_pio2+0xe2>
 80100e2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80100e6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80100ea:	462f      	mov	r7, r5
 80100ec:	2600      	movs	r6, #0
 80100ee:	e01b      	b.n	8010128 <__kernel_rem_pio2+0xc8>
 80100f0:	42ef      	cmn	r7, r5
 80100f2:	d407      	bmi.n	8010104 <__kernel_rem_pio2+0xa4>
 80100f4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80100f8:	f7f0 fa2c 	bl	8000554 <__aeabi_i2d>
 80100fc:	e8e6 0102 	strd	r0, r1, [r6], #8
 8010100:	3501      	adds	r5, #1
 8010102:	e7da      	b.n	80100ba <__kernel_rem_pio2+0x5a>
 8010104:	ec51 0b18 	vmov	r0, r1, d8
 8010108:	e7f8      	b.n	80100fc <__kernel_rem_pio2+0x9c>
 801010a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801010e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8010112:	f7f0 fa89 	bl	8000628 <__aeabi_dmul>
 8010116:	4602      	mov	r2, r0
 8010118:	460b      	mov	r3, r1
 801011a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801011e:	f7f0 f8cd 	bl	80002bc <__adddf3>
 8010122:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8010126:	3601      	adds	r6, #1
 8010128:	9b06      	ldr	r3, [sp, #24]
 801012a:	429e      	cmp	r6, r3
 801012c:	f1a7 0708 	sub.w	r7, r7, #8
 8010130:	ddeb      	ble.n	801010a <__kernel_rem_pio2+0xaa>
 8010132:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010136:	3508      	adds	r5, #8
 8010138:	ecab 7b02 	vstmia	fp!, {d7}
 801013c:	f108 0801 	add.w	r8, r8, #1
 8010140:	e7ca      	b.n	80100d8 <__kernel_rem_pio2+0x78>
 8010142:	9b04      	ldr	r3, [sp, #16]
 8010144:	aa0c      	add	r2, sp, #48	; 0x30
 8010146:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801014a:	930b      	str	r3, [sp, #44]	; 0x2c
 801014c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801014e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010152:	9c04      	ldr	r4, [sp, #16]
 8010154:	930a      	str	r3, [sp, #40]	; 0x28
 8010156:	ab98      	add	r3, sp, #608	; 0x260
 8010158:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801015c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8010160:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8010164:	f8cd b008 	str.w	fp, [sp, #8]
 8010168:	4625      	mov	r5, r4
 801016a:	2d00      	cmp	r5, #0
 801016c:	dc78      	bgt.n	8010260 <__kernel_rem_pio2+0x200>
 801016e:	ec47 6b10 	vmov	d0, r6, r7
 8010172:	4650      	mov	r0, sl
 8010174:	f000 fbfc 	bl	8010970 <scalbn>
 8010178:	ec57 6b10 	vmov	r6, r7, d0
 801017c:	2200      	movs	r2, #0
 801017e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8010182:	ee10 0a10 	vmov	r0, s0
 8010186:	4639      	mov	r1, r7
 8010188:	f7f0 fa4e 	bl	8000628 <__aeabi_dmul>
 801018c:	ec41 0b10 	vmov	d0, r0, r1
 8010190:	f000 fb6e 	bl	8010870 <floor>
 8010194:	4b7f      	ldr	r3, [pc, #508]	; (8010394 <__kernel_rem_pio2+0x334>)
 8010196:	ec51 0b10 	vmov	r0, r1, d0
 801019a:	2200      	movs	r2, #0
 801019c:	f7f0 fa44 	bl	8000628 <__aeabi_dmul>
 80101a0:	4602      	mov	r2, r0
 80101a2:	460b      	mov	r3, r1
 80101a4:	4630      	mov	r0, r6
 80101a6:	4639      	mov	r1, r7
 80101a8:	f7f0 f886 	bl	80002b8 <__aeabi_dsub>
 80101ac:	460f      	mov	r7, r1
 80101ae:	4606      	mov	r6, r0
 80101b0:	f7f0 fcd4 	bl	8000b5c <__aeabi_d2iz>
 80101b4:	9007      	str	r0, [sp, #28]
 80101b6:	f7f0 f9cd 	bl	8000554 <__aeabi_i2d>
 80101ba:	4602      	mov	r2, r0
 80101bc:	460b      	mov	r3, r1
 80101be:	4630      	mov	r0, r6
 80101c0:	4639      	mov	r1, r7
 80101c2:	f7f0 f879 	bl	80002b8 <__aeabi_dsub>
 80101c6:	f1ba 0f00 	cmp.w	sl, #0
 80101ca:	4606      	mov	r6, r0
 80101cc:	460f      	mov	r7, r1
 80101ce:	dd70      	ble.n	80102b2 <__kernel_rem_pio2+0x252>
 80101d0:	1e62      	subs	r2, r4, #1
 80101d2:	ab0c      	add	r3, sp, #48	; 0x30
 80101d4:	9d07      	ldr	r5, [sp, #28]
 80101d6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80101da:	f1ca 0118 	rsb	r1, sl, #24
 80101de:	fa40 f301 	asr.w	r3, r0, r1
 80101e2:	441d      	add	r5, r3
 80101e4:	408b      	lsls	r3, r1
 80101e6:	1ac0      	subs	r0, r0, r3
 80101e8:	ab0c      	add	r3, sp, #48	; 0x30
 80101ea:	9507      	str	r5, [sp, #28]
 80101ec:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80101f0:	f1ca 0317 	rsb	r3, sl, #23
 80101f4:	fa40 f303 	asr.w	r3, r0, r3
 80101f8:	9302      	str	r3, [sp, #8]
 80101fa:	9b02      	ldr	r3, [sp, #8]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	dd66      	ble.n	80102ce <__kernel_rem_pio2+0x26e>
 8010200:	9b07      	ldr	r3, [sp, #28]
 8010202:	2200      	movs	r2, #0
 8010204:	3301      	adds	r3, #1
 8010206:	9307      	str	r3, [sp, #28]
 8010208:	4615      	mov	r5, r2
 801020a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 801020e:	4294      	cmp	r4, r2
 8010210:	f300 8099 	bgt.w	8010346 <__kernel_rem_pio2+0x2e6>
 8010214:	f1ba 0f00 	cmp.w	sl, #0
 8010218:	dd07      	ble.n	801022a <__kernel_rem_pio2+0x1ca>
 801021a:	f1ba 0f01 	cmp.w	sl, #1
 801021e:	f000 80a5 	beq.w	801036c <__kernel_rem_pio2+0x30c>
 8010222:	f1ba 0f02 	cmp.w	sl, #2
 8010226:	f000 80c1 	beq.w	80103ac <__kernel_rem_pio2+0x34c>
 801022a:	9b02      	ldr	r3, [sp, #8]
 801022c:	2b02      	cmp	r3, #2
 801022e:	d14e      	bne.n	80102ce <__kernel_rem_pio2+0x26e>
 8010230:	4632      	mov	r2, r6
 8010232:	463b      	mov	r3, r7
 8010234:	4958      	ldr	r1, [pc, #352]	; (8010398 <__kernel_rem_pio2+0x338>)
 8010236:	2000      	movs	r0, #0
 8010238:	f7f0 f83e 	bl	80002b8 <__aeabi_dsub>
 801023c:	4606      	mov	r6, r0
 801023e:	460f      	mov	r7, r1
 8010240:	2d00      	cmp	r5, #0
 8010242:	d044      	beq.n	80102ce <__kernel_rem_pio2+0x26e>
 8010244:	4650      	mov	r0, sl
 8010246:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8010388 <__kernel_rem_pio2+0x328>
 801024a:	f000 fb91 	bl	8010970 <scalbn>
 801024e:	4630      	mov	r0, r6
 8010250:	4639      	mov	r1, r7
 8010252:	ec53 2b10 	vmov	r2, r3, d0
 8010256:	f7f0 f82f 	bl	80002b8 <__aeabi_dsub>
 801025a:	4606      	mov	r6, r0
 801025c:	460f      	mov	r7, r1
 801025e:	e036      	b.n	80102ce <__kernel_rem_pio2+0x26e>
 8010260:	4b4e      	ldr	r3, [pc, #312]	; (801039c <__kernel_rem_pio2+0x33c>)
 8010262:	2200      	movs	r2, #0
 8010264:	4630      	mov	r0, r6
 8010266:	4639      	mov	r1, r7
 8010268:	f7f0 f9de 	bl	8000628 <__aeabi_dmul>
 801026c:	f7f0 fc76 	bl	8000b5c <__aeabi_d2iz>
 8010270:	f7f0 f970 	bl	8000554 <__aeabi_i2d>
 8010274:	4b4a      	ldr	r3, [pc, #296]	; (80103a0 <__kernel_rem_pio2+0x340>)
 8010276:	2200      	movs	r2, #0
 8010278:	4680      	mov	r8, r0
 801027a:	4689      	mov	r9, r1
 801027c:	f7f0 f9d4 	bl	8000628 <__aeabi_dmul>
 8010280:	4602      	mov	r2, r0
 8010282:	460b      	mov	r3, r1
 8010284:	4630      	mov	r0, r6
 8010286:	4639      	mov	r1, r7
 8010288:	f7f0 f816 	bl	80002b8 <__aeabi_dsub>
 801028c:	f7f0 fc66 	bl	8000b5c <__aeabi_d2iz>
 8010290:	9b02      	ldr	r3, [sp, #8]
 8010292:	f843 0b04 	str.w	r0, [r3], #4
 8010296:	3d01      	subs	r5, #1
 8010298:	9302      	str	r3, [sp, #8]
 801029a:	ab70      	add	r3, sp, #448	; 0x1c0
 801029c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80102a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102a4:	4640      	mov	r0, r8
 80102a6:	4649      	mov	r1, r9
 80102a8:	f7f0 f808 	bl	80002bc <__adddf3>
 80102ac:	4606      	mov	r6, r0
 80102ae:	460f      	mov	r7, r1
 80102b0:	e75b      	b.n	801016a <__kernel_rem_pio2+0x10a>
 80102b2:	d105      	bne.n	80102c0 <__kernel_rem_pio2+0x260>
 80102b4:	1e63      	subs	r3, r4, #1
 80102b6:	aa0c      	add	r2, sp, #48	; 0x30
 80102b8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80102bc:	15c3      	asrs	r3, r0, #23
 80102be:	e79b      	b.n	80101f8 <__kernel_rem_pio2+0x198>
 80102c0:	4b38      	ldr	r3, [pc, #224]	; (80103a4 <__kernel_rem_pio2+0x344>)
 80102c2:	2200      	movs	r2, #0
 80102c4:	f7f0 fc36 	bl	8000b34 <__aeabi_dcmpge>
 80102c8:	2800      	cmp	r0, #0
 80102ca:	d139      	bne.n	8010340 <__kernel_rem_pio2+0x2e0>
 80102cc:	9002      	str	r0, [sp, #8]
 80102ce:	2200      	movs	r2, #0
 80102d0:	2300      	movs	r3, #0
 80102d2:	4630      	mov	r0, r6
 80102d4:	4639      	mov	r1, r7
 80102d6:	f7f0 fc0f 	bl	8000af8 <__aeabi_dcmpeq>
 80102da:	2800      	cmp	r0, #0
 80102dc:	f000 80b4 	beq.w	8010448 <__kernel_rem_pio2+0x3e8>
 80102e0:	f104 3bff 	add.w	fp, r4, #4294967295
 80102e4:	465b      	mov	r3, fp
 80102e6:	2200      	movs	r2, #0
 80102e8:	9904      	ldr	r1, [sp, #16]
 80102ea:	428b      	cmp	r3, r1
 80102ec:	da65      	bge.n	80103ba <__kernel_rem_pio2+0x35a>
 80102ee:	2a00      	cmp	r2, #0
 80102f0:	d07b      	beq.n	80103ea <__kernel_rem_pio2+0x38a>
 80102f2:	ab0c      	add	r3, sp, #48	; 0x30
 80102f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80102f8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	f000 80a0 	beq.w	8010442 <__kernel_rem_pio2+0x3e2>
 8010302:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8010388 <__kernel_rem_pio2+0x328>
 8010306:	4650      	mov	r0, sl
 8010308:	f000 fb32 	bl	8010970 <scalbn>
 801030c:	4f23      	ldr	r7, [pc, #140]	; (801039c <__kernel_rem_pio2+0x33c>)
 801030e:	ec55 4b10 	vmov	r4, r5, d0
 8010312:	46d8      	mov	r8, fp
 8010314:	2600      	movs	r6, #0
 8010316:	f1b8 0f00 	cmp.w	r8, #0
 801031a:	f280 80cf 	bge.w	80104bc <__kernel_rem_pio2+0x45c>
 801031e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8010380 <__kernel_rem_pio2+0x320>
 8010322:	465f      	mov	r7, fp
 8010324:	f04f 0800 	mov.w	r8, #0
 8010328:	2f00      	cmp	r7, #0
 801032a:	f2c0 80fd 	blt.w	8010528 <__kernel_rem_pio2+0x4c8>
 801032e:	ab70      	add	r3, sp, #448	; 0x1c0
 8010330:	f8df a074 	ldr.w	sl, [pc, #116]	; 80103a8 <__kernel_rem_pio2+0x348>
 8010334:	ec55 4b18 	vmov	r4, r5, d8
 8010338:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801033c:	2600      	movs	r6, #0
 801033e:	e0e5      	b.n	801050c <__kernel_rem_pio2+0x4ac>
 8010340:	2302      	movs	r3, #2
 8010342:	9302      	str	r3, [sp, #8]
 8010344:	e75c      	b.n	8010200 <__kernel_rem_pio2+0x1a0>
 8010346:	f8db 3000 	ldr.w	r3, [fp]
 801034a:	b955      	cbnz	r5, 8010362 <__kernel_rem_pio2+0x302>
 801034c:	b123      	cbz	r3, 8010358 <__kernel_rem_pio2+0x2f8>
 801034e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8010352:	f8cb 3000 	str.w	r3, [fp]
 8010356:	2301      	movs	r3, #1
 8010358:	3201      	adds	r2, #1
 801035a:	f10b 0b04 	add.w	fp, fp, #4
 801035e:	461d      	mov	r5, r3
 8010360:	e755      	b.n	801020e <__kernel_rem_pio2+0x1ae>
 8010362:	1acb      	subs	r3, r1, r3
 8010364:	f8cb 3000 	str.w	r3, [fp]
 8010368:	462b      	mov	r3, r5
 801036a:	e7f5      	b.n	8010358 <__kernel_rem_pio2+0x2f8>
 801036c:	1e62      	subs	r2, r4, #1
 801036e:	ab0c      	add	r3, sp, #48	; 0x30
 8010370:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010374:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8010378:	a90c      	add	r1, sp, #48	; 0x30
 801037a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801037e:	e754      	b.n	801022a <__kernel_rem_pio2+0x1ca>
	...
 801038c:	3ff00000 	.word	0x3ff00000
 8010390:	08012e08 	.word	0x08012e08
 8010394:	40200000 	.word	0x40200000
 8010398:	3ff00000 	.word	0x3ff00000
 801039c:	3e700000 	.word	0x3e700000
 80103a0:	41700000 	.word	0x41700000
 80103a4:	3fe00000 	.word	0x3fe00000
 80103a8:	08012dc8 	.word	0x08012dc8
 80103ac:	1e62      	subs	r2, r4, #1
 80103ae:	ab0c      	add	r3, sp, #48	; 0x30
 80103b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80103b4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80103b8:	e7de      	b.n	8010378 <__kernel_rem_pio2+0x318>
 80103ba:	a90c      	add	r1, sp, #48	; 0x30
 80103bc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80103c0:	3b01      	subs	r3, #1
 80103c2:	430a      	orrs	r2, r1
 80103c4:	e790      	b.n	80102e8 <__kernel_rem_pio2+0x288>
 80103c6:	3301      	adds	r3, #1
 80103c8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80103cc:	2900      	cmp	r1, #0
 80103ce:	d0fa      	beq.n	80103c6 <__kernel_rem_pio2+0x366>
 80103d0:	9a08      	ldr	r2, [sp, #32]
 80103d2:	18e3      	adds	r3, r4, r3
 80103d4:	18a6      	adds	r6, r4, r2
 80103d6:	aa20      	add	r2, sp, #128	; 0x80
 80103d8:	1c65      	adds	r5, r4, #1
 80103da:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 80103de:	9302      	str	r3, [sp, #8]
 80103e0:	9b02      	ldr	r3, [sp, #8]
 80103e2:	42ab      	cmp	r3, r5
 80103e4:	da04      	bge.n	80103f0 <__kernel_rem_pio2+0x390>
 80103e6:	461c      	mov	r4, r3
 80103e8:	e6b5      	b.n	8010156 <__kernel_rem_pio2+0xf6>
 80103ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80103ec:	2301      	movs	r3, #1
 80103ee:	e7eb      	b.n	80103c8 <__kernel_rem_pio2+0x368>
 80103f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80103f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80103f6:	f7f0 f8ad 	bl	8000554 <__aeabi_i2d>
 80103fa:	e8e6 0102 	strd	r0, r1, [r6], #8
 80103fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010400:	46b3      	mov	fp, r6
 8010402:	461c      	mov	r4, r3
 8010404:	2700      	movs	r7, #0
 8010406:	f04f 0800 	mov.w	r8, #0
 801040a:	f04f 0900 	mov.w	r9, #0
 801040e:	9b06      	ldr	r3, [sp, #24]
 8010410:	429f      	cmp	r7, r3
 8010412:	dd06      	ble.n	8010422 <__kernel_rem_pio2+0x3c2>
 8010414:	ab70      	add	r3, sp, #448	; 0x1c0
 8010416:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801041a:	e9c3 8900 	strd	r8, r9, [r3]
 801041e:	3501      	adds	r5, #1
 8010420:	e7de      	b.n	80103e0 <__kernel_rem_pio2+0x380>
 8010422:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8010426:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801042a:	f7f0 f8fd 	bl	8000628 <__aeabi_dmul>
 801042e:	4602      	mov	r2, r0
 8010430:	460b      	mov	r3, r1
 8010432:	4640      	mov	r0, r8
 8010434:	4649      	mov	r1, r9
 8010436:	f7ef ff41 	bl	80002bc <__adddf3>
 801043a:	3701      	adds	r7, #1
 801043c:	4680      	mov	r8, r0
 801043e:	4689      	mov	r9, r1
 8010440:	e7e5      	b.n	801040e <__kernel_rem_pio2+0x3ae>
 8010442:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010446:	e754      	b.n	80102f2 <__kernel_rem_pio2+0x292>
 8010448:	ec47 6b10 	vmov	d0, r6, r7
 801044c:	f1ca 0000 	rsb	r0, sl, #0
 8010450:	f000 fa8e 	bl	8010970 <scalbn>
 8010454:	ec57 6b10 	vmov	r6, r7, d0
 8010458:	4b9f      	ldr	r3, [pc, #636]	; (80106d8 <__kernel_rem_pio2+0x678>)
 801045a:	ee10 0a10 	vmov	r0, s0
 801045e:	2200      	movs	r2, #0
 8010460:	4639      	mov	r1, r7
 8010462:	f7f0 fb67 	bl	8000b34 <__aeabi_dcmpge>
 8010466:	b300      	cbz	r0, 80104aa <__kernel_rem_pio2+0x44a>
 8010468:	4b9c      	ldr	r3, [pc, #624]	; (80106dc <__kernel_rem_pio2+0x67c>)
 801046a:	2200      	movs	r2, #0
 801046c:	4630      	mov	r0, r6
 801046e:	4639      	mov	r1, r7
 8010470:	f7f0 f8da 	bl	8000628 <__aeabi_dmul>
 8010474:	f7f0 fb72 	bl	8000b5c <__aeabi_d2iz>
 8010478:	4605      	mov	r5, r0
 801047a:	f7f0 f86b 	bl	8000554 <__aeabi_i2d>
 801047e:	4b96      	ldr	r3, [pc, #600]	; (80106d8 <__kernel_rem_pio2+0x678>)
 8010480:	2200      	movs	r2, #0
 8010482:	f7f0 f8d1 	bl	8000628 <__aeabi_dmul>
 8010486:	460b      	mov	r3, r1
 8010488:	4602      	mov	r2, r0
 801048a:	4639      	mov	r1, r7
 801048c:	4630      	mov	r0, r6
 801048e:	f7ef ff13 	bl	80002b8 <__aeabi_dsub>
 8010492:	f7f0 fb63 	bl	8000b5c <__aeabi_d2iz>
 8010496:	f104 0b01 	add.w	fp, r4, #1
 801049a:	ab0c      	add	r3, sp, #48	; 0x30
 801049c:	f10a 0a18 	add.w	sl, sl, #24
 80104a0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80104a4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 80104a8:	e72b      	b.n	8010302 <__kernel_rem_pio2+0x2a2>
 80104aa:	4630      	mov	r0, r6
 80104ac:	4639      	mov	r1, r7
 80104ae:	f7f0 fb55 	bl	8000b5c <__aeabi_d2iz>
 80104b2:	ab0c      	add	r3, sp, #48	; 0x30
 80104b4:	46a3      	mov	fp, r4
 80104b6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80104ba:	e722      	b.n	8010302 <__kernel_rem_pio2+0x2a2>
 80104bc:	ab70      	add	r3, sp, #448	; 0x1c0
 80104be:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 80104c2:	ab0c      	add	r3, sp, #48	; 0x30
 80104c4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80104c8:	f7f0 f844 	bl	8000554 <__aeabi_i2d>
 80104cc:	4622      	mov	r2, r4
 80104ce:	462b      	mov	r3, r5
 80104d0:	f7f0 f8aa 	bl	8000628 <__aeabi_dmul>
 80104d4:	4632      	mov	r2, r6
 80104d6:	e9c9 0100 	strd	r0, r1, [r9]
 80104da:	463b      	mov	r3, r7
 80104dc:	4620      	mov	r0, r4
 80104de:	4629      	mov	r1, r5
 80104e0:	f7f0 f8a2 	bl	8000628 <__aeabi_dmul>
 80104e4:	f108 38ff 	add.w	r8, r8, #4294967295
 80104e8:	4604      	mov	r4, r0
 80104ea:	460d      	mov	r5, r1
 80104ec:	e713      	b.n	8010316 <__kernel_rem_pio2+0x2b6>
 80104ee:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80104f2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80104f6:	f7f0 f897 	bl	8000628 <__aeabi_dmul>
 80104fa:	4602      	mov	r2, r0
 80104fc:	460b      	mov	r3, r1
 80104fe:	4620      	mov	r0, r4
 8010500:	4629      	mov	r1, r5
 8010502:	f7ef fedb 	bl	80002bc <__adddf3>
 8010506:	3601      	adds	r6, #1
 8010508:	4604      	mov	r4, r0
 801050a:	460d      	mov	r5, r1
 801050c:	9b04      	ldr	r3, [sp, #16]
 801050e:	429e      	cmp	r6, r3
 8010510:	dc01      	bgt.n	8010516 <__kernel_rem_pio2+0x4b6>
 8010512:	45b0      	cmp	r8, r6
 8010514:	daeb      	bge.n	80104ee <__kernel_rem_pio2+0x48e>
 8010516:	ab48      	add	r3, sp, #288	; 0x120
 8010518:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801051c:	e9c3 4500 	strd	r4, r5, [r3]
 8010520:	3f01      	subs	r7, #1
 8010522:	f108 0801 	add.w	r8, r8, #1
 8010526:	e6ff      	b.n	8010328 <__kernel_rem_pio2+0x2c8>
 8010528:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801052a:	2b02      	cmp	r3, #2
 801052c:	dc0b      	bgt.n	8010546 <__kernel_rem_pio2+0x4e6>
 801052e:	2b00      	cmp	r3, #0
 8010530:	dc6e      	bgt.n	8010610 <__kernel_rem_pio2+0x5b0>
 8010532:	d045      	beq.n	80105c0 <__kernel_rem_pio2+0x560>
 8010534:	9b07      	ldr	r3, [sp, #28]
 8010536:	f003 0007 	and.w	r0, r3, #7
 801053a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801053e:	ecbd 8b02 	vpop	{d8}
 8010542:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010546:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010548:	2b03      	cmp	r3, #3
 801054a:	d1f3      	bne.n	8010534 <__kernel_rem_pio2+0x4d4>
 801054c:	ab48      	add	r3, sp, #288	; 0x120
 801054e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010552:	46d0      	mov	r8, sl
 8010554:	46d9      	mov	r9, fp
 8010556:	f1b9 0f00 	cmp.w	r9, #0
 801055a:	f1a8 0808 	sub.w	r8, r8, #8
 801055e:	dc64      	bgt.n	801062a <__kernel_rem_pio2+0x5ca>
 8010560:	465c      	mov	r4, fp
 8010562:	2c01      	cmp	r4, #1
 8010564:	f1aa 0a08 	sub.w	sl, sl, #8
 8010568:	dc7e      	bgt.n	8010668 <__kernel_rem_pio2+0x608>
 801056a:	2000      	movs	r0, #0
 801056c:	2100      	movs	r1, #0
 801056e:	f1bb 0f01 	cmp.w	fp, #1
 8010572:	f300 8097 	bgt.w	80106a4 <__kernel_rem_pio2+0x644>
 8010576:	9b02      	ldr	r3, [sp, #8]
 8010578:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801057c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010580:	2b00      	cmp	r3, #0
 8010582:	f040 8099 	bne.w	80106b8 <__kernel_rem_pio2+0x658>
 8010586:	9b01      	ldr	r3, [sp, #4]
 8010588:	e9c3 5600 	strd	r5, r6, [r3]
 801058c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010590:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010594:	e7ce      	b.n	8010534 <__kernel_rem_pio2+0x4d4>
 8010596:	ab48      	add	r3, sp, #288	; 0x120
 8010598:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801059c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105a0:	f7ef fe8c 	bl	80002bc <__adddf3>
 80105a4:	f10b 3bff 	add.w	fp, fp, #4294967295
 80105a8:	f1bb 0f00 	cmp.w	fp, #0
 80105ac:	daf3      	bge.n	8010596 <__kernel_rem_pio2+0x536>
 80105ae:	9b02      	ldr	r3, [sp, #8]
 80105b0:	b113      	cbz	r3, 80105b8 <__kernel_rem_pio2+0x558>
 80105b2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105b6:	4619      	mov	r1, r3
 80105b8:	9b01      	ldr	r3, [sp, #4]
 80105ba:	e9c3 0100 	strd	r0, r1, [r3]
 80105be:	e7b9      	b.n	8010534 <__kernel_rem_pio2+0x4d4>
 80105c0:	2000      	movs	r0, #0
 80105c2:	2100      	movs	r1, #0
 80105c4:	e7f0      	b.n	80105a8 <__kernel_rem_pio2+0x548>
 80105c6:	ab48      	add	r3, sp, #288	; 0x120
 80105c8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80105cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80105d0:	f7ef fe74 	bl	80002bc <__adddf3>
 80105d4:	3c01      	subs	r4, #1
 80105d6:	2c00      	cmp	r4, #0
 80105d8:	daf5      	bge.n	80105c6 <__kernel_rem_pio2+0x566>
 80105da:	9b02      	ldr	r3, [sp, #8]
 80105dc:	b1e3      	cbz	r3, 8010618 <__kernel_rem_pio2+0x5b8>
 80105de:	4602      	mov	r2, r0
 80105e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80105e4:	9c01      	ldr	r4, [sp, #4]
 80105e6:	e9c4 2300 	strd	r2, r3, [r4]
 80105ea:	4602      	mov	r2, r0
 80105ec:	460b      	mov	r3, r1
 80105ee:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80105f2:	f7ef fe61 	bl	80002b8 <__aeabi_dsub>
 80105f6:	ad4a      	add	r5, sp, #296	; 0x128
 80105f8:	2401      	movs	r4, #1
 80105fa:	45a3      	cmp	fp, r4
 80105fc:	da0f      	bge.n	801061e <__kernel_rem_pio2+0x5be>
 80105fe:	9b02      	ldr	r3, [sp, #8]
 8010600:	b113      	cbz	r3, 8010608 <__kernel_rem_pio2+0x5a8>
 8010602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010606:	4619      	mov	r1, r3
 8010608:	9b01      	ldr	r3, [sp, #4]
 801060a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801060e:	e791      	b.n	8010534 <__kernel_rem_pio2+0x4d4>
 8010610:	465c      	mov	r4, fp
 8010612:	2000      	movs	r0, #0
 8010614:	2100      	movs	r1, #0
 8010616:	e7de      	b.n	80105d6 <__kernel_rem_pio2+0x576>
 8010618:	4602      	mov	r2, r0
 801061a:	460b      	mov	r3, r1
 801061c:	e7e2      	b.n	80105e4 <__kernel_rem_pio2+0x584>
 801061e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8010622:	f7ef fe4b 	bl	80002bc <__adddf3>
 8010626:	3401      	adds	r4, #1
 8010628:	e7e7      	b.n	80105fa <__kernel_rem_pio2+0x59a>
 801062a:	e9d8 4500 	ldrd	r4, r5, [r8]
 801062e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010632:	4620      	mov	r0, r4
 8010634:	4632      	mov	r2, r6
 8010636:	463b      	mov	r3, r7
 8010638:	4629      	mov	r1, r5
 801063a:	f7ef fe3f 	bl	80002bc <__adddf3>
 801063e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010642:	4602      	mov	r2, r0
 8010644:	460b      	mov	r3, r1
 8010646:	4620      	mov	r0, r4
 8010648:	4629      	mov	r1, r5
 801064a:	f7ef fe35 	bl	80002b8 <__aeabi_dsub>
 801064e:	4632      	mov	r2, r6
 8010650:	463b      	mov	r3, r7
 8010652:	f7ef fe33 	bl	80002bc <__adddf3>
 8010656:	ed9d 7b04 	vldr	d7, [sp, #16]
 801065a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801065e:	ed88 7b00 	vstr	d7, [r8]
 8010662:	f109 39ff 	add.w	r9, r9, #4294967295
 8010666:	e776      	b.n	8010556 <__kernel_rem_pio2+0x4f6>
 8010668:	e9da 8900 	ldrd	r8, r9, [sl]
 801066c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010670:	4640      	mov	r0, r8
 8010672:	4632      	mov	r2, r6
 8010674:	463b      	mov	r3, r7
 8010676:	4649      	mov	r1, r9
 8010678:	f7ef fe20 	bl	80002bc <__adddf3>
 801067c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010680:	4602      	mov	r2, r0
 8010682:	460b      	mov	r3, r1
 8010684:	4640      	mov	r0, r8
 8010686:	4649      	mov	r1, r9
 8010688:	f7ef fe16 	bl	80002b8 <__aeabi_dsub>
 801068c:	4632      	mov	r2, r6
 801068e:	463b      	mov	r3, r7
 8010690:	f7ef fe14 	bl	80002bc <__adddf3>
 8010694:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010698:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801069c:	ed8a 7b00 	vstr	d7, [sl]
 80106a0:	3c01      	subs	r4, #1
 80106a2:	e75e      	b.n	8010562 <__kernel_rem_pio2+0x502>
 80106a4:	ab48      	add	r3, sp, #288	; 0x120
 80106a6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80106aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106ae:	f7ef fe05 	bl	80002bc <__adddf3>
 80106b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80106b6:	e75a      	b.n	801056e <__kernel_rem_pio2+0x50e>
 80106b8:	9b01      	ldr	r3, [sp, #4]
 80106ba:	9a01      	ldr	r2, [sp, #4]
 80106bc:	601d      	str	r5, [r3, #0]
 80106be:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80106c2:	605c      	str	r4, [r3, #4]
 80106c4:	609f      	str	r7, [r3, #8]
 80106c6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80106ca:	60d3      	str	r3, [r2, #12]
 80106cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80106d0:	6110      	str	r0, [r2, #16]
 80106d2:	6153      	str	r3, [r2, #20]
 80106d4:	e72e      	b.n	8010534 <__kernel_rem_pio2+0x4d4>
 80106d6:	bf00      	nop
 80106d8:	41700000 	.word	0x41700000
 80106dc:	3e700000 	.word	0x3e700000

080106e0 <__kernel_sin>:
 80106e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80106e4:	ed2d 8b04 	vpush	{d8-d9}
 80106e8:	eeb0 8a41 	vmov.f32	s16, s2
 80106ec:	eef0 8a61 	vmov.f32	s17, s3
 80106f0:	ec55 4b10 	vmov	r4, r5, d0
 80106f4:	b083      	sub	sp, #12
 80106f6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80106fa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80106fe:	9001      	str	r0, [sp, #4]
 8010700:	da06      	bge.n	8010710 <__kernel_sin+0x30>
 8010702:	ee10 0a10 	vmov	r0, s0
 8010706:	4629      	mov	r1, r5
 8010708:	f7f0 fa28 	bl	8000b5c <__aeabi_d2iz>
 801070c:	2800      	cmp	r0, #0
 801070e:	d051      	beq.n	80107b4 <__kernel_sin+0xd4>
 8010710:	4622      	mov	r2, r4
 8010712:	462b      	mov	r3, r5
 8010714:	4620      	mov	r0, r4
 8010716:	4629      	mov	r1, r5
 8010718:	f7ef ff86 	bl	8000628 <__aeabi_dmul>
 801071c:	4682      	mov	sl, r0
 801071e:	468b      	mov	fp, r1
 8010720:	4602      	mov	r2, r0
 8010722:	460b      	mov	r3, r1
 8010724:	4620      	mov	r0, r4
 8010726:	4629      	mov	r1, r5
 8010728:	f7ef ff7e 	bl	8000628 <__aeabi_dmul>
 801072c:	a341      	add	r3, pc, #260	; (adr r3, 8010834 <__kernel_sin+0x154>)
 801072e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010732:	4680      	mov	r8, r0
 8010734:	4689      	mov	r9, r1
 8010736:	4650      	mov	r0, sl
 8010738:	4659      	mov	r1, fp
 801073a:	f7ef ff75 	bl	8000628 <__aeabi_dmul>
 801073e:	a33f      	add	r3, pc, #252	; (adr r3, 801083c <__kernel_sin+0x15c>)
 8010740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010744:	f7ef fdb8 	bl	80002b8 <__aeabi_dsub>
 8010748:	4652      	mov	r2, sl
 801074a:	465b      	mov	r3, fp
 801074c:	f7ef ff6c 	bl	8000628 <__aeabi_dmul>
 8010750:	a33c      	add	r3, pc, #240	; (adr r3, 8010844 <__kernel_sin+0x164>)
 8010752:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010756:	f7ef fdb1 	bl	80002bc <__adddf3>
 801075a:	4652      	mov	r2, sl
 801075c:	465b      	mov	r3, fp
 801075e:	f7ef ff63 	bl	8000628 <__aeabi_dmul>
 8010762:	a33a      	add	r3, pc, #232	; (adr r3, 801084c <__kernel_sin+0x16c>)
 8010764:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010768:	f7ef fda6 	bl	80002b8 <__aeabi_dsub>
 801076c:	4652      	mov	r2, sl
 801076e:	465b      	mov	r3, fp
 8010770:	f7ef ff5a 	bl	8000628 <__aeabi_dmul>
 8010774:	a337      	add	r3, pc, #220	; (adr r3, 8010854 <__kernel_sin+0x174>)
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	f7ef fd9f 	bl	80002bc <__adddf3>
 801077e:	9b01      	ldr	r3, [sp, #4]
 8010780:	4606      	mov	r6, r0
 8010782:	460f      	mov	r7, r1
 8010784:	b9eb      	cbnz	r3, 80107c2 <__kernel_sin+0xe2>
 8010786:	4602      	mov	r2, r0
 8010788:	460b      	mov	r3, r1
 801078a:	4650      	mov	r0, sl
 801078c:	4659      	mov	r1, fp
 801078e:	f7ef ff4b 	bl	8000628 <__aeabi_dmul>
 8010792:	a325      	add	r3, pc, #148	; (adr r3, 8010828 <__kernel_sin+0x148>)
 8010794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010798:	f7ef fd8e 	bl	80002b8 <__aeabi_dsub>
 801079c:	4642      	mov	r2, r8
 801079e:	464b      	mov	r3, r9
 80107a0:	f7ef ff42 	bl	8000628 <__aeabi_dmul>
 80107a4:	4602      	mov	r2, r0
 80107a6:	460b      	mov	r3, r1
 80107a8:	4620      	mov	r0, r4
 80107aa:	4629      	mov	r1, r5
 80107ac:	f7ef fd86 	bl	80002bc <__adddf3>
 80107b0:	4604      	mov	r4, r0
 80107b2:	460d      	mov	r5, r1
 80107b4:	ec45 4b10 	vmov	d0, r4, r5
 80107b8:	b003      	add	sp, #12
 80107ba:	ecbd 8b04 	vpop	{d8-d9}
 80107be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107c2:	4b1b      	ldr	r3, [pc, #108]	; (8010830 <__kernel_sin+0x150>)
 80107c4:	ec51 0b18 	vmov	r0, r1, d8
 80107c8:	2200      	movs	r2, #0
 80107ca:	f7ef ff2d 	bl	8000628 <__aeabi_dmul>
 80107ce:	4632      	mov	r2, r6
 80107d0:	ec41 0b19 	vmov	d9, r0, r1
 80107d4:	463b      	mov	r3, r7
 80107d6:	4640      	mov	r0, r8
 80107d8:	4649      	mov	r1, r9
 80107da:	f7ef ff25 	bl	8000628 <__aeabi_dmul>
 80107de:	4602      	mov	r2, r0
 80107e0:	460b      	mov	r3, r1
 80107e2:	ec51 0b19 	vmov	r0, r1, d9
 80107e6:	f7ef fd67 	bl	80002b8 <__aeabi_dsub>
 80107ea:	4652      	mov	r2, sl
 80107ec:	465b      	mov	r3, fp
 80107ee:	f7ef ff1b 	bl	8000628 <__aeabi_dmul>
 80107f2:	ec53 2b18 	vmov	r2, r3, d8
 80107f6:	f7ef fd5f 	bl	80002b8 <__aeabi_dsub>
 80107fa:	a30b      	add	r3, pc, #44	; (adr r3, 8010828 <__kernel_sin+0x148>)
 80107fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010800:	4606      	mov	r6, r0
 8010802:	460f      	mov	r7, r1
 8010804:	4640      	mov	r0, r8
 8010806:	4649      	mov	r1, r9
 8010808:	f7ef ff0e 	bl	8000628 <__aeabi_dmul>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4630      	mov	r0, r6
 8010812:	4639      	mov	r1, r7
 8010814:	f7ef fd52 	bl	80002bc <__adddf3>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
 801081c:	4620      	mov	r0, r4
 801081e:	4629      	mov	r1, r5
 8010820:	f7ef fd4a 	bl	80002b8 <__aeabi_dsub>
 8010824:	e7c4      	b.n	80107b0 <__kernel_sin+0xd0>
 8010826:	bf00      	nop
 8010828:	55555549 	.word	0x55555549
 801082c:	3fc55555 	.word	0x3fc55555
 8010830:	3fe00000 	.word	0x3fe00000
 8010834:	5acfd57c 	.word	0x5acfd57c
 8010838:	3de5d93a 	.word	0x3de5d93a
 801083c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010840:	3e5ae5e6 	.word	0x3e5ae5e6
 8010844:	57b1fe7d 	.word	0x57b1fe7d
 8010848:	3ec71de3 	.word	0x3ec71de3
 801084c:	19c161d5 	.word	0x19c161d5
 8010850:	3f2a01a0 	.word	0x3f2a01a0
 8010854:	1110f8a6 	.word	0x1110f8a6
 8010858:	3f811111 	.word	0x3f811111

0801085c <fabs>:
 801085c:	ec51 0b10 	vmov	r0, r1, d0
 8010860:	ee10 2a10 	vmov	r2, s0
 8010864:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010868:	ec43 2b10 	vmov	d0, r2, r3
 801086c:	4770      	bx	lr
	...

08010870 <floor>:
 8010870:	ec51 0b10 	vmov	r0, r1, d0
 8010874:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010878:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801087c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010880:	2e13      	cmp	r6, #19
 8010882:	ee10 5a10 	vmov	r5, s0
 8010886:	ee10 8a10 	vmov	r8, s0
 801088a:	460c      	mov	r4, r1
 801088c:	dc32      	bgt.n	80108f4 <floor+0x84>
 801088e:	2e00      	cmp	r6, #0
 8010890:	da14      	bge.n	80108bc <floor+0x4c>
 8010892:	a333      	add	r3, pc, #204	; (adr r3, 8010960 <floor+0xf0>)
 8010894:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010898:	f7ef fd10 	bl	80002bc <__adddf3>
 801089c:	2200      	movs	r2, #0
 801089e:	2300      	movs	r3, #0
 80108a0:	f7f0 f952 	bl	8000b48 <__aeabi_dcmpgt>
 80108a4:	b138      	cbz	r0, 80108b6 <floor+0x46>
 80108a6:	2c00      	cmp	r4, #0
 80108a8:	da57      	bge.n	801095a <floor+0xea>
 80108aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80108ae:	431d      	orrs	r5, r3
 80108b0:	d001      	beq.n	80108b6 <floor+0x46>
 80108b2:	4c2d      	ldr	r4, [pc, #180]	; (8010968 <floor+0xf8>)
 80108b4:	2500      	movs	r5, #0
 80108b6:	4621      	mov	r1, r4
 80108b8:	4628      	mov	r0, r5
 80108ba:	e025      	b.n	8010908 <floor+0x98>
 80108bc:	4f2b      	ldr	r7, [pc, #172]	; (801096c <floor+0xfc>)
 80108be:	4137      	asrs	r7, r6
 80108c0:	ea01 0307 	and.w	r3, r1, r7
 80108c4:	4303      	orrs	r3, r0
 80108c6:	d01f      	beq.n	8010908 <floor+0x98>
 80108c8:	a325      	add	r3, pc, #148	; (adr r3, 8010960 <floor+0xf0>)
 80108ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108ce:	f7ef fcf5 	bl	80002bc <__adddf3>
 80108d2:	2200      	movs	r2, #0
 80108d4:	2300      	movs	r3, #0
 80108d6:	f7f0 f937 	bl	8000b48 <__aeabi_dcmpgt>
 80108da:	2800      	cmp	r0, #0
 80108dc:	d0eb      	beq.n	80108b6 <floor+0x46>
 80108de:	2c00      	cmp	r4, #0
 80108e0:	bfbe      	ittt	lt
 80108e2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80108e6:	fa43 f606 	asrlt.w	r6, r3, r6
 80108ea:	19a4      	addlt	r4, r4, r6
 80108ec:	ea24 0407 	bic.w	r4, r4, r7
 80108f0:	2500      	movs	r5, #0
 80108f2:	e7e0      	b.n	80108b6 <floor+0x46>
 80108f4:	2e33      	cmp	r6, #51	; 0x33
 80108f6:	dd0b      	ble.n	8010910 <floor+0xa0>
 80108f8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80108fc:	d104      	bne.n	8010908 <floor+0x98>
 80108fe:	ee10 2a10 	vmov	r2, s0
 8010902:	460b      	mov	r3, r1
 8010904:	f7ef fcda 	bl	80002bc <__adddf3>
 8010908:	ec41 0b10 	vmov	d0, r0, r1
 801090c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010910:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8010914:	f04f 33ff 	mov.w	r3, #4294967295
 8010918:	fa23 f707 	lsr.w	r7, r3, r7
 801091c:	4207      	tst	r7, r0
 801091e:	d0f3      	beq.n	8010908 <floor+0x98>
 8010920:	a30f      	add	r3, pc, #60	; (adr r3, 8010960 <floor+0xf0>)
 8010922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010926:	f7ef fcc9 	bl	80002bc <__adddf3>
 801092a:	2200      	movs	r2, #0
 801092c:	2300      	movs	r3, #0
 801092e:	f7f0 f90b 	bl	8000b48 <__aeabi_dcmpgt>
 8010932:	2800      	cmp	r0, #0
 8010934:	d0bf      	beq.n	80108b6 <floor+0x46>
 8010936:	2c00      	cmp	r4, #0
 8010938:	da02      	bge.n	8010940 <floor+0xd0>
 801093a:	2e14      	cmp	r6, #20
 801093c:	d103      	bne.n	8010946 <floor+0xd6>
 801093e:	3401      	adds	r4, #1
 8010940:	ea25 0507 	bic.w	r5, r5, r7
 8010944:	e7b7      	b.n	80108b6 <floor+0x46>
 8010946:	2301      	movs	r3, #1
 8010948:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801094c:	fa03 f606 	lsl.w	r6, r3, r6
 8010950:	4435      	add	r5, r6
 8010952:	4545      	cmp	r5, r8
 8010954:	bf38      	it	cc
 8010956:	18e4      	addcc	r4, r4, r3
 8010958:	e7f2      	b.n	8010940 <floor+0xd0>
 801095a:	2500      	movs	r5, #0
 801095c:	462c      	mov	r4, r5
 801095e:	e7aa      	b.n	80108b6 <floor+0x46>
 8010960:	8800759c 	.word	0x8800759c
 8010964:	7e37e43c 	.word	0x7e37e43c
 8010968:	bff00000 	.word	0xbff00000
 801096c:	000fffff 	.word	0x000fffff

08010970 <scalbn>:
 8010970:	b570      	push	{r4, r5, r6, lr}
 8010972:	ec55 4b10 	vmov	r4, r5, d0
 8010976:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801097a:	4606      	mov	r6, r0
 801097c:	462b      	mov	r3, r5
 801097e:	b99a      	cbnz	r2, 80109a8 <scalbn+0x38>
 8010980:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010984:	4323      	orrs	r3, r4
 8010986:	d036      	beq.n	80109f6 <scalbn+0x86>
 8010988:	4b39      	ldr	r3, [pc, #228]	; (8010a70 <scalbn+0x100>)
 801098a:	4629      	mov	r1, r5
 801098c:	ee10 0a10 	vmov	r0, s0
 8010990:	2200      	movs	r2, #0
 8010992:	f7ef fe49 	bl	8000628 <__aeabi_dmul>
 8010996:	4b37      	ldr	r3, [pc, #220]	; (8010a74 <scalbn+0x104>)
 8010998:	429e      	cmp	r6, r3
 801099a:	4604      	mov	r4, r0
 801099c:	460d      	mov	r5, r1
 801099e:	da10      	bge.n	80109c2 <scalbn+0x52>
 80109a0:	a32b      	add	r3, pc, #172	; (adr r3, 8010a50 <scalbn+0xe0>)
 80109a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109a6:	e03a      	b.n	8010a1e <scalbn+0xae>
 80109a8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80109ac:	428a      	cmp	r2, r1
 80109ae:	d10c      	bne.n	80109ca <scalbn+0x5a>
 80109b0:	ee10 2a10 	vmov	r2, s0
 80109b4:	4620      	mov	r0, r4
 80109b6:	4629      	mov	r1, r5
 80109b8:	f7ef fc80 	bl	80002bc <__adddf3>
 80109bc:	4604      	mov	r4, r0
 80109be:	460d      	mov	r5, r1
 80109c0:	e019      	b.n	80109f6 <scalbn+0x86>
 80109c2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80109c6:	460b      	mov	r3, r1
 80109c8:	3a36      	subs	r2, #54	; 0x36
 80109ca:	4432      	add	r2, r6
 80109cc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80109d0:	428a      	cmp	r2, r1
 80109d2:	dd08      	ble.n	80109e6 <scalbn+0x76>
 80109d4:	2d00      	cmp	r5, #0
 80109d6:	a120      	add	r1, pc, #128	; (adr r1, 8010a58 <scalbn+0xe8>)
 80109d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109dc:	da1c      	bge.n	8010a18 <scalbn+0xa8>
 80109de:	a120      	add	r1, pc, #128	; (adr r1, 8010a60 <scalbn+0xf0>)
 80109e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80109e4:	e018      	b.n	8010a18 <scalbn+0xa8>
 80109e6:	2a00      	cmp	r2, #0
 80109e8:	dd08      	ble.n	80109fc <scalbn+0x8c>
 80109ea:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80109ee:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80109f2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80109f6:	ec45 4b10 	vmov	d0, r4, r5
 80109fa:	bd70      	pop	{r4, r5, r6, pc}
 80109fc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010a00:	da19      	bge.n	8010a36 <scalbn+0xc6>
 8010a02:	f24c 3350 	movw	r3, #50000	; 0xc350
 8010a06:	429e      	cmp	r6, r3
 8010a08:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010a0c:	dd0a      	ble.n	8010a24 <scalbn+0xb4>
 8010a0e:	a112      	add	r1, pc, #72	; (adr r1, 8010a58 <scalbn+0xe8>)
 8010a10:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	d1e2      	bne.n	80109de <scalbn+0x6e>
 8010a18:	a30f      	add	r3, pc, #60	; (adr r3, 8010a58 <scalbn+0xe8>)
 8010a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a1e:	f7ef fe03 	bl	8000628 <__aeabi_dmul>
 8010a22:	e7cb      	b.n	80109bc <scalbn+0x4c>
 8010a24:	a10a      	add	r1, pc, #40	; (adr r1, 8010a50 <scalbn+0xe0>)
 8010a26:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a2a:	2b00      	cmp	r3, #0
 8010a2c:	d0b8      	beq.n	80109a0 <scalbn+0x30>
 8010a2e:	a10e      	add	r1, pc, #56	; (adr r1, 8010a68 <scalbn+0xf8>)
 8010a30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010a34:	e7b4      	b.n	80109a0 <scalbn+0x30>
 8010a36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010a3a:	3236      	adds	r2, #54	; 0x36
 8010a3c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010a40:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010a44:	4620      	mov	r0, r4
 8010a46:	4b0c      	ldr	r3, [pc, #48]	; (8010a78 <scalbn+0x108>)
 8010a48:	2200      	movs	r2, #0
 8010a4a:	e7e8      	b.n	8010a1e <scalbn+0xae>
 8010a4c:	f3af 8000 	nop.w
 8010a50:	c2f8f359 	.word	0xc2f8f359
 8010a54:	01a56e1f 	.word	0x01a56e1f
 8010a58:	8800759c 	.word	0x8800759c
 8010a5c:	7e37e43c 	.word	0x7e37e43c
 8010a60:	8800759c 	.word	0x8800759c
 8010a64:	fe37e43c 	.word	0xfe37e43c
 8010a68:	c2f8f359 	.word	0xc2f8f359
 8010a6c:	81a56e1f 	.word	0x81a56e1f
 8010a70:	43500000 	.word	0x43500000
 8010a74:	ffff3cb0 	.word	0xffff3cb0
 8010a78:	3c900000 	.word	0x3c900000

08010a7c <_init>:
 8010a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a7e:	bf00      	nop
 8010a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a82:	bc08      	pop	{r3}
 8010a84:	469e      	mov	lr, r3
 8010a86:	4770      	bx	lr

08010a88 <_fini>:
 8010a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010a8a:	bf00      	nop
 8010a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010a8e:	bc08      	pop	{r3}
 8010a90:	469e      	mov	lr, r3
 8010a92:	4770      	bx	lr


prog_Mini-projMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e88c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000020a4  0800ea5c  0800ea5c  0001ea5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b00  08010b00  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08010b00  08010b00  00020b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b08  08010b08  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010b08  08010b08  00020b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b0c  08010b0c  00020b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08010b10  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c94  200000c0  08010bd0  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d54  08010bd0  00038d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c9fe  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005533  00000000  00000000  0005caee  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025f8  00000000  00000000  00062028  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002360  00000000  00000000  00064620  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e203  00000000  00000000  00066980  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f5be  00000000  00000000  00094b83  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b96  00000000  00000000  000b4141  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8cd7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3a4  00000000  00000000  001c8d54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ea44 	.word	0x0800ea44

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800ea44 	.word	0x0800ea44

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000dc 	.word	0x200000dc
 8000614:	20000134 	.word	0x20000134

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f002 f94e 	bl	80028c4 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 f9b4 	bl	8000994 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 f998 	bl	8000994 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f909 	bl	8002888 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f97e 	bl	80009b4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f8d3 	bl	8002888 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000334 	.word	0x20000334

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f002 f820 	bl	8002888 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f002 f812 	bl	8002888 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fff7 	bl	8002888 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 ffe9 	bl	8002888 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000334 	.word	0x20000334
 80008f8:	20000338 	.word	0x20000338

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 ff9c 	bl	8002854 <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 ff88 	bl	8002854 <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000334 	.word	0x20000334

08000994 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000998:	f7ff fff0 	bl	800097c <ft5336_Get_I2C_InitializedStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80009a2:	f001 ff4d 	bl	8002840 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80009a6:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000334 	.word	0x20000334

080009b4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b0b0      	sub	sp, #192	; 0xc0
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f004 f97a 	bl	8004cce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f915 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 ff87 	bl	80018f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 fa13 	bl	8000e0c <MX_ADC3_Init>
  MX_I2C1_Init();
 80009e6:	f000 fabf 	bl	8000f68 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009ea:	f000 fafd 	bl	8000fe8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009ee:	f000 fb3b 	bl	8001068 <MX_LTDC_Init>
  MX_RTC_Init();
 80009f2:	f000 fbbb 	bl	800116c <MX_RTC_Init>
  MX_SPI2_Init();
 80009f6:	f000 fc5f 	bl	80012b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009fa:	f000 fc9b 	bl	8001334 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009fe:	f000 fced 	bl	80013dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a02:	f000 fd39 	bl	8001478 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a06:	f000 fd9d 	bl	8001544 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a0a:	f000 fde9 	bl	80015e0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 fec1 	bl	8001794 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a12:	f000 feef 	bl	80017f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a16:	f000 f9a7 	bl	8000d68 <MX_ADC1_Init>
  MX_DAC_Init();
 8000a1a:	f000 fa49 	bl	8000eb0 <MX_DAC_Init>
  MX_UART7_Init();
 8000a1e:	f000 fe89 	bl	8001734 <MX_UART7_Init>
  MX_FMC_Init();
 8000a22:	f000 ff17 	bl	8001854 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000a26:	f000 fa6d 	bl	8000f04 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000a2a:	f001 ff57 	bl	80028dc <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 ffea 	bl	8002a0c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a38:	f001 ffc0 	bl	80029bc <BSP_LCD_GetXSize>
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	f001 ffd1 	bl	80029e4 <BSP_LCD_GetYSize>
 8000a42:	4603      	mov	r3, r0
 8000a44:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a48:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f001 ffdb 	bl	8002a0c <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a56:	f002 fe53 	bl	8003700 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f002 f836 	bl	8002acc <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a64:	f002 f8a4 	bl	8002bb0 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000a68:	4855      	ldr	r0, [pc, #340]	; (8000bc0 <main+0x1f0>)
 8000a6a:	f002 f871 	bl	8002b50 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	f002 f83b 	bl	8002aec <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000a76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a7a:	f002 f84f 	bl	8002b1c <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a7e:	f001 ff9d 	bl	80029bc <BSP_LCD_GetXSize>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29c      	uxth	r4, r3
 8000a86:	f001 ffad 	bl	80029e4 <BSP_LCD_GetYSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f003 fac3 	bl	800401c <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	494a      	ldr	r1, [pc, #296]	; (8000bc4 <main+0x1f4>)
 8000a9a:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <main+0x1f8>)
 8000a9c:	f009 ffd6 	bl	800aa4c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000aac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00b f8ba 	bl	800bc2a <osMutexCreate>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <main+0x1fc>)
 8000aba:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <main+0x200>)
 8000abe:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000ac8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00b f8c3 	bl	800bc5a <osMessageCreate>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <main+0x204>)
 8000ad8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <main+0x208>)
 8000adc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00b f838 	bl	800bb6a <osThreadCreate>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <main+0x20c>)
 8000afe:	601a      	str	r2, [r3, #0]

  /* definition and creation of horloge */
  osThreadDef(horloge, Starthorloge, osPriorityBelowNormal, 0, 1024);
 8000b00:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <main+0x210>)
 8000b02:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  horlogeHandle = osThreadCreate(osThread(horloge), NULL);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00b f825 	bl	800bb6a <osThreadCreate>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <main+0x214>)
 8000b24:	601a      	str	r2, [r3, #0]

  /* definition and creation of LRacket */
  osThreadDef(LRacket, StartLRacket, osPriorityAboveNormal, 0, 1024);
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <main+0x218>)
 8000b28:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LRacketHandle = osThreadCreate(osThread(LRacket), NULL);
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00b f812 	bl	800bb6a <osThreadCreate>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <main+0x21c>)
 8000b4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Ball */
  osThreadDef(Ball, StartBall, osPriorityHigh, 0, 1024);
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <main+0x220>)
 8000b4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallHandle = osThreadCreate(osThread(Ball), NULL);
 8000b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00a ffff 	bl	800bb6a <osThreadCreate>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <main+0x224>)
 8000b70:	601a      	str	r2, [r3, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <main+0x228>)
 8000b74:	f107 041c 	add.w	r4, r7, #28
 8000b78:	461d      	mov	r5, r3
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a ffec 	bl	800bb6a <osThreadCreate>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <main+0x22c>)
 8000b96:	601a      	str	r2, [r3, #0]

  /* definition and creation of Transmit */
  osThreadDef(Transmit, StartTransmit, osPriorityAboveNormal, 0, 128);
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <main+0x230>)
 8000b9a:	463c      	mov	r4, r7
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitHandle = osThreadCreate(osThread(Transmit), NULL);
 8000baa:	463b      	mov	r3, r7
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00a ffdb 	bl	800bb6a <osThreadCreate>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <main+0x234>)
 8000bb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bba:	f00a ffcf 	bl	800bb5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bbe:	e7fe      	b.n	8000bbe <main+0x1ee>
 8000bc0:	20000040 	.word	0x20000040
 8000bc4:	20008c1c 	.word	0x20008c1c
 8000bc8:	200089e4 	.word	0x200089e4
 8000bcc:	20008c18 	.word	0x20008c18
 8000bd0:	0800ea5c 	.word	0x0800ea5c
 8000bd4:	20008c2c 	.word	0x20008c2c
 8000bd8:	0800ea78 	.word	0x0800ea78
 8000bdc:	20008660 	.word	0x20008660
 8000be0:	0800ea9c 	.word	0x0800ea9c
 8000be4:	20008990 	.word	0x20008990
 8000be8:	0800eac0 	.word	0x0800eac0
 8000bec:	2000865c 	.word	0x2000865c
 8000bf0:	0800eae4 	.word	0x0800eae4
 8000bf4:	20008c28 	.word	0x20008c28
 8000bf8:	0800eb0c 	.word	0x0800eb0c
 8000bfc:	200089dc 	.word	0x200089dc
 8000c00:	0800eb34 	.word	0x0800eb34
 8000c04:	200089e0 	.word	0x200089e0

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0b4      	sub	sp, #208	; 0xd0
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c12:	2230      	movs	r2, #48	; 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00d fb0f 	bl	800e23a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	2284      	movs	r2, #132	; 0x84
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00d fb00 	bl	800e23a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c3a:	f006 fe99 	bl	8007970 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <SystemClock_Config+0x154>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a46      	ldr	r2, [pc, #280]	; (8000d5c <SystemClock_Config+0x154>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <SystemClock_Config+0x154>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <SystemClock_Config+0x158>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <SystemClock_Config+0x158>)
 8000c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <SystemClock_Config+0x158>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c6e:	2309      	movs	r3, #9
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c90:	2319      	movs	r3, #25
 8000c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 febe 	bl	8007a30 <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cba:	f001 fc67 	bl	800258c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cbe:	f006 fe67 	bl	8007990 <HAL_PWREx_EnableOverDrive>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cc8:	f001 fc60 	bl	800258c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f007 f93f 	bl	8007f78 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000d00:	f001 fc44 	bl	800258c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemClock_Config+0x15c>)
 8000d06:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d16:	2303      	movs	r3, #3
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f007 fb1c 	bl	8008380 <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d4e:	f001 fc1d 	bl	800258c <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	37d0      	adds	r7, #208	; 0xd0
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000
 8000d64:	00015868 	.word	0x00015868

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_ADC1_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dca:	f003 ffcf 	bl	8004d6c <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f001 fbda 	bl	800258c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dea:	f004 f955 	bl	8005098 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f001 fbca 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20008948 	.word	0x20008948
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_ADC3_Init+0x9c>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <MX_ADC3_Init+0xa0>)
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e6e:	f003 ff7d 	bl	8004d6c <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e78:	f001 fb88 	bl	800258c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e7c:	2306      	movs	r3, #6
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e8e:	f004 f903 	bl	8005098 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e98:	f001 fb78 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20008994 	.word	0x20008994
 8000ea8:	40012200 	.word	0x40012200
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_DAC_Init+0x50>)
 8000ec2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ec6:	f004 fc0d 	bl	80056e4 <HAL_DAC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ed0:	f001 fb5c 	bl	800258c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ee4:	f004 fc74 	bl	80057d0 <HAL_DAC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000eee:	f001 fb4d 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20008a64 	.word	0x20008a64
 8000f00:	40007400 	.word	0x40007400

08000f04 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <MX_DMA2D_Init+0x60>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f3a:	f004 fe7f 	bl	8005c3c <HAL_DMA2D_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f44:	f001 fb22 	bl	800258c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f4c:	f004 ffd4 	bl	8005ef8 <HAL_DMA2D_ConfigLayer>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f56:	f001 fb19 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20008b64 	.word	0x20008b64
 8000f64:	4002b000 	.word	0x4002b000

08000f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_I2C1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <MX_I2C1_Init+0x7c>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fa4:	f005 fbbc 	bl	8006720 <HAL_I2C_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fae:	f001 faed 	bl	800258c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fb6:	f006 f8cb 	bl	8007150 <HAL_I2CEx_ConfigAnalogFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f001 fae4 	bl	800258c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fc8:	f006 f90d 	bl	80071e6 <HAL_I2CEx_ConfigDigitalFilter>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f001 fadb 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200087d4 	.word	0x200087d4
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	00c0eaff 	.word	0x00c0eaff

08000fe8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C3_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C3_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C3_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C3_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C3_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C3_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C3_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_I2C3_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C3_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C3_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_I2C3_Init+0x74>)
 8001024:	f005 fb7c 	bl	8006720 <HAL_I2C_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800102e:	f001 faad 	bl	800258c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C3_Init+0x74>)
 8001036:	f006 f88b 	bl	8007150 <HAL_I2CEx_ConfigAnalogFilter>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001040:	f001 faa4 	bl	800258c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_I2C3_Init+0x74>)
 8001048:	f006 f8cd 	bl	80071e6 <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001052:	f001 fa9b 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20008664 	.word	0x20008664
 8001060:	40005c00 	.word	0x40005c00
 8001064:	00c0eaff 	.word	0x00c0eaff

08001068 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2234      	movs	r2, #52	; 0x34
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00d f8e0 	bl	800e23a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <MX_LTDC_Init+0xfc>)
 800107c:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <MX_LTDC_Init+0x100>)
 800107e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_LTDC_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <MX_LTDC_Init+0xfc>)
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010a0:	2209      	movs	r2, #9
 80010a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010a6:	2235      	movs	r2, #53	; 0x35
 80010a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ac:	220b      	movs	r2, #11
 80010ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010b2:	f240 2215 	movw	r2, #533	; 0x215
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ba:	f240 121b 	movw	r2, #283	; 0x11b
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010c2:	f240 2235 	movw	r2, #565	; 0x235
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ca:	f240 121d 	movw	r2, #285	; 0x11d
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010e8:	481e      	ldr	r0, [pc, #120]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ea:	f006 f8c9 	bl	8007280 <HAL_LTDC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010f4:	f001 fa4a 	bl	800258c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001100:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001106:	f44f 7388 	mov.w	r3, #272	; 0x110
 800110a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001110:	23ff      	movs	r3, #255	; 0xff
 8001112:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001118:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800111c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001122:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001128:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800112e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_LTDC_Init+0xfc>)
 800114e:	f006 fa29 	bl	80075a4 <HAL_LTDC_ConfigLayer>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001158:	f001 fa18 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200088a0 	.word	0x200088a0
 8001168:	40016800 	.word	0x40016800

0800116c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b092      	sub	sp, #72	; 0x48
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	222c      	movs	r2, #44	; 0x2c
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00d f853 	bl	800e23a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <MX_RTC_Init+0x144>)
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <MX_RTC_Init+0x148>)
 8001198:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <MX_RTC_Init+0x144>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011a0:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <MX_RTC_Init+0x144>)
 80011a2:	227f      	movs	r2, #127	; 0x7f
 80011a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <MX_RTC_Init+0x144>)
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <MX_RTC_Init+0x144>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <MX_RTC_Init+0x144>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MX_RTC_Init+0x144>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011be:	483c      	ldr	r0, [pc, #240]	; (80012b0 <MX_RTC_Init+0x144>)
 80011c0:	f007 fccc 	bl	8008b5c <HAL_RTC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80011ca:	f001 f9df 	bl	800258c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	482f      	ldr	r0, [pc, #188]	; (80012b0 <MX_RTC_Init+0x144>)
 80011f2:	f007 fd2f 	bl	8008c54 <HAL_RTC_SetTime>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011fc:	f001 f9c6 	bl	800258c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001200:	2301      	movs	r3, #1
 8001202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_RTC_Init+0x144>)
 8001222:	f007 fe33 	bl	8008e8c <HAL_RTC_SetDate>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800122c:	f001 f9ae 	bl	800258c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001230:	2300      	movs	r3, #0
 8001232:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001234:	2300      	movs	r3, #0
 8001236:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001238:	2300      	movs	r3, #0
 800123a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_RTC_Init+0x144>)
 8001268:	f007 ff08 	bl	800907c <HAL_RTC_SetAlarm>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001272:	f001 f98b 	bl	800258c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	2201      	movs	r2, #1
 8001280:	4619      	mov	r1, r3
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_RTC_Init+0x144>)
 8001284:	f007 fefa 	bl	800907c <HAL_RTC_SetAlarm>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800128e:	f001 f97d 	bl	800258c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001292:	2202      	movs	r2, #2
 8001294:	2100      	movs	r1, #0
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_RTC_Init+0x144>)
 8001298:	f008 f898 	bl	80093cc <HAL_RTCEx_SetTimeStamp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80012a2:	f001 f973 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3748      	adds	r7, #72	; 0x48
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20008a78 	.word	0x20008a78
 80012b4:	40002800 	.word	0x40002800

080012b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_SPI2_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MX_SPI2_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_SPI2_Init+0x74>)
 80012c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_SPI2_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI2_Init+0x74>)
 80012d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_SPI2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI2_Init+0x74>)
 80012e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_SPI2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI2_Init+0x74>)
 8001306:	2207      	movs	r2, #7
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_SPI2_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI2_Init+0x74>)
 8001312:	2208      	movs	r2, #8
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_SPI2_Init+0x74>)
 8001318:	f008 f92d 	bl	8009576 <HAL_SPI_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001322:	f001 f933 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200086b0 	.word	0x200086b0
 8001330:	40003800 	.word	0x40003800

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <MX_TIM1_Init+0xa4>)
 8001356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001380:	f008 f98b 	bl	800969a <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800138a:	f001 f8ff 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800139c:	f008 fc3e 	bl	8009c1c <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013a6:	f001 f8f1 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_TIM1_Init+0xa0>)
 80013bc:	f009 f972 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013c6:	f001 f8e1 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20008a98 	.word	0x20008a98
 80013d8:	40010000 	.word	0x40010000

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM2_Init+0x98>)
 80013fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM2_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM2_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM2_Init+0x98>)
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_TIM2_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_TIM2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <MX_TIM2_Init+0x98>)
 8001424:	f008 f939 	bl	800969a <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800142e:	f001 f8ad 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM2_Init+0x98>)
 8001440:	f008 fbec 	bl	8009c1c <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800144a:	f001 f89f 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_TIM2_Init+0x98>)
 800145c:	f009 f922 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001466:	f001 f891 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20008ba4 	.word	0x20008ba4

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_TIM3_Init+0xc4>)
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <MX_TIM3_Init+0xc8>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_TIM3_Init+0xc4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM3_Init+0xc4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM3_Init+0xc4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ce:	f008 f8e4 	bl	800969a <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014d8:	f001 f858 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ea:	f008 fb97 	bl	8009c1c <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80014f4:	f001 f84a 	bl	800258c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM3_Init+0xc4>)
 8001508:	f008 fc42 	bl	8009d90 <HAL_TIM_SlaveConfigSynchro>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001512:	f001 f83b 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM3_Init+0xc4>)
 8001524:	f009 f8be 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800152e:	f001 f82d 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20008860 	.word	0x20008860
 8001540:	40000400 	.word	0x40000400

08001544 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <MX_TIM5_Init+0x98>)
 8001566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM5_Init+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM5_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_TIM5_Init+0x94>)
 800158a:	f008 f886 	bl	800969a <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001594:	f000 fffa 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM5_Init+0x94>)
 80015a6:	f008 fb39 	bl	8009c1c <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 ffec 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM5_Init+0x94>)
 80015c2:	f009 f86f 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 ffde 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20008820 	.word	0x20008820
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09a      	sub	sp, #104	; 0x68
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	222c      	movs	r2, #44	; 0x2c
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00c fe0d 	bl	800e23a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <MX_TIM8_Init+0x14c>)
 8001622:	4a43      	ldr	r2, [pc, #268]	; (8001730 <MX_TIM8_Init+0x150>)
 8001624:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <MX_TIM8_Init+0x14c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <MX_TIM8_Init+0x14c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001632:	4b3e      	ldr	r3, [pc, #248]	; (800172c <MX_TIM8_Init+0x14c>)
 8001634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001638:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <MX_TIM8_Init+0x14c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <MX_TIM8_Init+0x14c>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <MX_TIM8_Init+0x14c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800164c:	4837      	ldr	r0, [pc, #220]	; (800172c <MX_TIM8_Init+0x14c>)
 800164e:	f008 f824 	bl	800969a <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 ff98 	bl	800258c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	4619      	mov	r1, r3
 8001668:	4830      	ldr	r0, [pc, #192]	; (800172c <MX_TIM8_Init+0x14c>)
 800166a:	f008 fad7 	bl	8009c1c <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 ff8a 	bl	800258c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001678:	482c      	ldr	r0, [pc, #176]	; (800172c <MX_TIM8_Init+0x14c>)
 800167a:	f008 f863 	bl	8009744 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001684:	f000 ff82 	bl	800258c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001698:	4619      	mov	r1, r3
 800169a:	4824      	ldr	r0, [pc, #144]	; (800172c <MX_TIM8_Init+0x14c>)
 800169c:	f009 f802 	bl	800a6a4 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016a6:	f000 ff71 	bl	800258c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c6:	220c      	movs	r2, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <MX_TIM8_Init+0x14c>)
 80016cc:	f008 f98e 	bl	80099ec <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80016d6:	f000 ff59 	bl	800258c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM8_Init+0x14c>)
 8001710:	f009 f856 	bl	800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800171a:	f000 ff37 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM8_Init+0x14c>)
 8001720:	f003 f830 	bl	8004784 <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3768      	adds	r7, #104	; 0x68
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20008794 	.word	0x20008794
 8001730:	40010400 	.word	0x40010400

08001734 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_UART7_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_UART7_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_UART7_Init+0x58>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_UART7_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_UART7_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_UART7_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_UART7_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_UART7_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_UART7_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_UART7_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_UART7_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART7_Init+0x58>)
 8001778:	f009 f8be 	bl	800a8f8 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001782:	f000 ff03 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20008714 	.word	0x20008714
 8001790:	40007800 	.word	0x40007800

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART1_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART1_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017d8:	f009 f88e 	bl	800a8f8 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 fed3 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200089e4 	.word	0x200089e4
 80017f0:	40011000 	.word	0x40011000

080017f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART6_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART6_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART6_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART6_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART6_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001838:	f009 f85e 	bl	800a8f8 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 fea3 	bl	800258c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20008ae4 	.word	0x20008ae4
 8001850:	40011400 	.word	0x40011400

08001854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_FMC_Init+0x94>)
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <MX_FMC_Init+0x98>)
 8001870:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_FMC_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_FMC_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_FMC_Init+0x94>)
 8001880:	2204      	movs	r2, #4
 8001882:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_FMC_Init+0x94>)
 8001886:	2210      	movs	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_FMC_Init+0x94>)
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_FMC_Init+0x94>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_FMC_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_FMC_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_FMC_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_FMC_Init+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80018ae:	2310      	movs	r3, #16
 80018b0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80018b2:	2310      	movs	r3, #16
 80018b4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80018b6:	2310      	movs	r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80018ba:	2310      	movs	r3, #16
 80018bc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80018be:	2310      	movs	r3, #16
 80018c0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80018c2:	2310      	movs	r3, #16
 80018c4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_FMC_Init+0x94>)
 80018d0:	f007 fdd2 	bl	8009478 <HAL_SDRAM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80018da:	f000 fe57 	bl	800258c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20008be4 	.word	0x20008be4
 80018ec:	a0000140 	.word	0xa0000140

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b090      	sub	sp, #64	; 0x40
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4bb0      	ldr	r3, [pc, #704]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4aaf      	ldr	r2, [pc, #700]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4bad      	ldr	r3, [pc, #692]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4baa      	ldr	r3, [pc, #680]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4aa9      	ldr	r2, [pc, #676]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4aa3      	ldr	r2, [pc, #652]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4ba1      	ldr	r3, [pc, #644]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a9d      	ldr	r2, [pc, #628]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001966:	4b98      	ldr	r3, [pc, #608]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a97      	ldr	r2, [pc, #604]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800196c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a8b      	ldr	r2, [pc, #556]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a73      	ldr	r2, [pc, #460]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2110      	movs	r1, #16
 8001a12:	486e      	ldr	r0, [pc, #440]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001a14:	f004 fe6a 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2160      	movs	r1, #96	; 0x60
 8001a1c:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a1e:	f004 fe65 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2120      	movs	r1, #32
 8001a26:	486b      	ldr	r0, [pc, #428]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a28:	f004 fe60 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4868      	ldr	r0, [pc, #416]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a32:	f004 fe5b 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4867      	ldr	r0, [pc, #412]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a3c:	f004 fe56 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2108      	movs	r1, #8
 8001a44:	4865      	ldr	r0, [pc, #404]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001a46:	f004 fe51 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a52:	f004 fe4b 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a56:	2200      	movs	r2, #0
 8001a58:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a5c:	4860      	ldr	r0, [pc, #384]	; (8001be0 <MX_GPIO_Init+0x2f0>)
 8001a5e:	f004 fe45 	bl	80066ec <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2108      	movs	r1, #8
 8001a66:	485f      	ldr	r0, [pc, #380]	; (8001be4 <MX_GPIO_Init+0x2f4>)
 8001a68:	f004 fe40 	bl	80066ec <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4854      	ldr	r0, [pc, #336]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a80:	f004 fb68 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001a84:	f643 0323 	movw	r3, #14371	; 0x3823
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a96:	230a      	movs	r3, #10
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	484a      	ldr	r0, [pc, #296]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001aa2:	f004 fb57 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4843      	ldr	r0, [pc, #268]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001abe:	f004 fb49 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001ac2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4844      	ldr	r0, [pc, #272]	; (8001be8 <MX_GPIO_Init+0x2f8>)
 8001ad8:	f004 fb3c 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001af4:	f004 fb2e 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4837      	ldr	r0, [pc, #220]	; (8001bec <MX_GPIO_Init+0x2fc>)
 8001b0e:	f004 fb21 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_GPIO_Init+0x300>)
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b22:	4619      	mov	r1, r3
 8001b24:	482b      	ldr	r0, [pc, #172]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001b26:	f004 fb15 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b2a:	2328      	movs	r3, #40	; 0x28
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001b42:	f004 fb07 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001b46:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001b60:	f004 faf8 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	481e      	ldr	r0, [pc, #120]	; (8001bf4 <MX_GPIO_Init+0x304>)
 8001b7a:	f004 faeb 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001b96:	f004 fadd 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001bae:	f004 fad1 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001bb2:	f248 0304 	movw	r3, #32772	; 0x8004
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	e017      	b.n	8001bf8 <MX_GPIO_Init+0x308>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022800 	.word	0x40022800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40022400 	.word	0x40022400
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	4836      	ldr	r0, [pc, #216]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001bfa:	f004 faab 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001bfe:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c14:	4619      	mov	r1, r3
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001c18:	f004 fa9c 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_GPIO_Init+0x3e8>)
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482a      	ldr	r0, [pc, #168]	; (8001cdc <MX_GPIO_Init+0x3ec>)
 8001c32:	f004 fa8f 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c36:	2310      	movs	r3, #16
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c46:	230a      	movs	r3, #10
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001c52:	f004 fa7f 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001c56:	2384      	movs	r3, #132	; 0x84
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c66:	4619      	mov	r1, r3
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0x3f0>)
 8001c6a:	f004 fa73 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c7e:	230a      	movs	r3, #10
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <MX_GPIO_Init+0x3f4>)
 8001c8a:	f004 fa63 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001c8e:	2308      	movs	r3, #8
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_GPIO_Init+0x3f0>)
 8001ca6:	f004 fa55 	bl	8006154 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001caa:	2328      	movs	r3, #40	; 0x28
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <MX_GPIO_Init+0x3f8>)
 8001cc6:	f004 fa45 	bl	8006154 <HAL_GPIO_Init>

}
 8001cca:	bf00      	nop
 8001ccc:	3740      	adds	r7, #64	; 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	10120000 	.word	0x10120000
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b0b4      	sub	sp, #208	; 0xd0
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_IT(&huart7,rxbuffer,4);
 8001cf4:	2204      	movs	r2, #4
 8001cf6:	4929      	ldr	r1, [pc, #164]	; (8001d9c <HAL_UART_RxCpltCallback+0xb0>)
 8001cf8:	4829      	ldr	r0, [pc, #164]	; (8001da0 <HAL_UART_RxCpltCallback+0xb4>)
 8001cfa:	f008 fea7 	bl	800aa4c <HAL_UART_Receive_IT>

	x_RRacket = (rxbuffer[0] << 8) | rxbuffer[1];
 8001cfe:	4b27      	ldr	r3, [pc, #156]	; (8001d9c <HAL_UART_RxCpltCallback+0xb0>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	021b      	lsls	r3, r3, #8
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	4b25      	ldr	r3, [pc, #148]	; (8001d9c <HAL_UART_RxCpltCallback+0xb0>)
 8001d08:	785b      	ldrb	r3, [r3, #1]
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	4313      	orrs	r3, r2
 8001d0e:	b21a      	sxth	r2, r3
 8001d10:	4b24      	ldr	r3, [pc, #144]	; (8001da4 <HAL_UART_RxCpltCallback+0xb8>)
 8001d12:	801a      	strh	r2, [r3, #0]
	y_RRacket = (rxbuffer[2] << 8) | rxbuffer[3];
 8001d14:	4b21      	ldr	r3, [pc, #132]	; (8001d9c <HAL_UART_RxCpltCallback+0xb0>)
 8001d16:	789b      	ldrb	r3, [r3, #2]
 8001d18:	021b      	lsls	r3, r3, #8
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	4b1f      	ldr	r3, [pc, #124]	; (8001d9c <HAL_UART_RxCpltCallback+0xb0>)
 8001d1e:	78db      	ldrb	r3, [r3, #3]
 8001d20:	b21b      	sxth	r3, r3
 8001d22:	4313      	orrs	r3, r2
 8001d24:	b21a      	sxth	r2, r3
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_UART_RxCpltCallback+0xbc>)
 8001d28:	801a      	strh	r2, [r3, #0]

	x_RRacket += 480;
 8001d2a:	4b1e      	ldr	r3, [pc, #120]	; (8001da4 <HAL_UART_RxCpltCallback+0xb8>)
 8001d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d30:	b29b      	uxth	r3, r3
 8001d32:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001d36:	b29b      	uxth	r3, r3
 8001d38:	b21a      	sxth	r2, r3
 8001d3a:	4b1a      	ldr	r3, [pc, #104]	; (8001da4 <HAL_UART_RxCpltCallback+0xb8>)
 8001d3c:	801a      	strh	r2, [r3, #0]
	y_RRacket += 480;
 8001d3e:	4b1a      	ldr	r3, [pc, #104]	; (8001da8 <HAL_UART_RxCpltCallback+0xbc>)
 8001d40:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001d4a:	b29b      	uxth	r3, r3
 8001d4c:	b21a      	sxth	r2, r3
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_UART_RxCpltCallback+0xbc>)
 8001d50:	801a      	strh	r2, [r3, #0]

	char textx[100];
	char texty[100];
	sprintf(textx, "xR = %d", x_RRacket);
 8001d52:	4b14      	ldr	r3, [pc, #80]	; (8001da4 <HAL_UART_RxCpltCallback+0xb8>)
 8001d54:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d58:	461a      	mov	r2, r3
 8001d5a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d5e:	4913      	ldr	r1, [pc, #76]	; (8001dac <HAL_UART_RxCpltCallback+0xc0>)
 8001d60:	4618      	mov	r0, r3
 8001d62:	f00c fa73 	bl	800e24c <siprintf>
	sprintf(texty, "yR = %d", y_RRacket);
 8001d66:	4b10      	ldr	r3, [pc, #64]	; (8001da8 <HAL_UART_RxCpltCallback+0xbc>)
 8001d68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6c:	461a      	mov	r2, r3
 8001d6e:	f107 0308 	add.w	r3, r7, #8
 8001d72:	490f      	ldr	r1, [pc, #60]	; (8001db0 <HAL_UART_RxCpltCallback+0xc4>)
 8001d74:	4618      	mov	r0, r3
 8001d76:	f00c fa69 	bl	800e24c <siprintf>
	BSP_LCD_DisplayStringAtLine(5, textx);
 8001d7a:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d7e:	4619      	mov	r1, r3
 8001d80:	2005      	movs	r0, #5
 8001d82:	f001 f845 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
	BSP_LCD_DisplayStringAtLine(6, texty);
 8001d86:	f107 0308 	add.w	r3, r7, #8
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	2006      	movs	r0, #6
 8001d8e:	f001 f83f 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
}
 8001d92:	bf00      	nop
 8001d94:	37d0      	adds	r7, #208	; 0xd0
 8001d96:	46bd      	mov	sp, r7
 8001d98:	bd80      	pop	{r7, pc}
 8001d9a:	bf00      	nop
 8001d9c:	20008c1c 	.word	0x20008c1c
 8001da0:	20008714 	.word	0x20008714
 8001da4:	2000002c 	.word	0x2000002c
 8001da8:	2000002e 	.word	0x2000002e
 8001dac:	0800eb50 	.word	0x0800eb50
 8001db0:	0800eb58 	.word	0x0800eb58

08001db4 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001dbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001dc0:	f009 ff1f 	bl	800bc02 <osDelay>
 8001dc4:	e7fa      	b.n	8001dbc <StartDefaultTask+0x8>
	...

08001dc8 <Starthorloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Starthorloge */
void Starthorloge(void const * argument)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b096      	sub	sp, #88	; 0x58
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthorloge */
	char text[50] = { };
 8001dd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dd4:	2232      	movs	r2, #50	; 0x32
 8001dd6:	2100      	movs	r1, #0
 8001dd8:	4618      	mov	r0, r3
 8001dda:	f00c fa2e 	bl	800e23a <memset>
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	/* Infinite loop */
	for (;;) {
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001dde:	f107 030c 	add.w	r3, r7, #12
 8001de2:	2200      	movs	r2, #0
 8001de4:	4619      	mov	r1, r3
 8001de6:	4815      	ldr	r0, [pc, #84]	; (8001e3c <Starthorloge+0x74>)
 8001de8:	f006 fff2 	bl	8008dd0 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001dec:	f107 0308 	add.w	r3, r7, #8
 8001df0:	2200      	movs	r2, #0
 8001df2:	4619      	mov	r1, r3
 8001df4:	4811      	ldr	r0, [pc, #68]	; (8001e3c <Starthorloge+0x74>)
 8001df6:	f007 f8f1 	bl	8008fdc <HAL_RTC_GetDate>

		sprintf(text, "%2u:%2u",
				time.Minutes, time.Seconds);
 8001dfa:	7b7b      	ldrb	r3, [r7, #13]
		sprintf(text, "%2u:%2u",
 8001dfc:	461a      	mov	r2, r3
				time.Minutes, time.Seconds);
 8001dfe:	7bbb      	ldrb	r3, [r7, #14]
		sprintf(text, "%2u:%2u",
 8001e00:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001e04:	490e      	ldr	r1, [pc, #56]	; (8001e40 <Starthorloge+0x78>)
 8001e06:	f00c fa21 	bl	800e24c <siprintf>
		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001e0a:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <Starthorloge+0x7c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f04f 31ff 	mov.w	r1, #4294967295
 8001e12:	4618      	mov	r0, r3
 8001e14:	f00a fa94 	bl	800c340 <xQueueSemaphoreTake>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8001e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	2001      	movs	r0, #1
 8001e20:	f000 fff6 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001e24:	4b07      	ldr	r3, [pc, #28]	; (8001e44 <Starthorloge+0x7c>)
 8001e26:	6818      	ldr	r0, [r3, #0]
 8001e28:	2300      	movs	r3, #0
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	2100      	movs	r1, #0
 8001e2e:	f00a f985 	bl	800c13c <xQueueGenericSend>
		osDelay(100);
 8001e32:	2064      	movs	r0, #100	; 0x64
 8001e34:	f009 fee5 	bl	800bc02 <osDelay>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001e38:	e7d1      	b.n	8001dde <Starthorloge+0x16>
 8001e3a:	bf00      	nop
 8001e3c:	20008a78 	.word	0x20008a78
 8001e40:	0800eb60 	.word	0x0800eb60
 8001e44:	20008c18 	.word	0x20008c18

08001e48 <StartLRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLRacket */
void StartLRacket(void const * argument)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b08a      	sub	sp, #40	; 0x28
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLRacket */
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001e50:	2300      	movs	r3, #0
 8001e52:	627b      	str	r3, [r7, #36]	; 0x24
	joystick_v = 0;
 8001e54:	2300      	movs	r3, #0
 8001e56:	623b      	str	r3, [r7, #32]
	int32_t x_LRacket_hold;
	int32_t y_LRacket_hold;

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001e58:	f107 0308 	add.w	r3, r7, #8
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	601a      	str	r2, [r3, #0]
 8001e60:	605a      	str	r2, [r3, #4]
 8001e62:	609a      	str	r2, [r3, #8]
 8001e64:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e66:	2301      	movs	r3, #1
 8001e68:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	613b      	str	r3, [r7, #16]


	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e6e:	f107 0308 	add.w	r3, r7, #8
 8001e72:	4619      	mov	r1, r3
 8001e74:	485c      	ldr	r0, [pc, #368]	; (8001fe8 <StartLRacket+0x1a0>)
 8001e76:	f003 f90f 	bl	8005098 <HAL_ADC_ConfigChannel>
	/* Infinite loop */
	for (;;) {
		x_LRacket_hold = x_LRacket;
 8001e7a:	4b5c      	ldr	r3, [pc, #368]	; (8001fec <StartLRacket+0x1a4>)
 8001e7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e80:	61fb      	str	r3, [r7, #28]
		y_LRacket_hold = y_LRacket;
 8001e82:	4b5b      	ldr	r3, [pc, #364]	; (8001ff0 <StartLRacket+0x1a8>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	61bb      	str	r3, [r7, #24]


		//Capture des valeurs des joysticks
		sConfig.Channel = ADC_CHANNEL_8;
 8001e8a:	2308      	movs	r3, #8
 8001e8c:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e8e:	f107 0308 	add.w	r3, r7, #8
 8001e92:	4619      	mov	r1, r3
 8001e94:	4854      	ldr	r0, [pc, #336]	; (8001fe8 <StartLRacket+0x1a0>)
 8001e96:	f003 f8ff 	bl	8005098 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001e9a:	4853      	ldr	r0, [pc, #332]	; (8001fe8 <StartLRacket+0x1a0>)
 8001e9c:	f002 ffaa 	bl	8004df4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001ea0:	bf00      	nop
 8001ea2:	2164      	movs	r1, #100	; 0x64
 8001ea4:	4850      	ldr	r0, [pc, #320]	; (8001fe8 <StartLRacket+0x1a0>)
 8001ea6:	f003 f865 	bl	8004f74 <HAL_ADC_PollForConversion>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d1f8      	bne.n	8001ea2 <StartLRacket+0x5a>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001eb0:	484d      	ldr	r0, [pc, #308]	; (8001fe8 <StartLRacket+0x1a0>)
 8001eb2:	f003 f8e3 	bl	800507c <HAL_ADC_GetValue>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	623b      	str	r3, [r7, #32]

		HAL_ADC_Start(&hadc1);
 8001eba:	484e      	ldr	r0, [pc, #312]	; (8001ff4 <StartLRacket+0x1ac>)
 8001ebc:	f002 ff9a 	bl	8004df4 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001ec0:	bf00      	nop
 8001ec2:	2164      	movs	r1, #100	; 0x64
 8001ec4:	484b      	ldr	r0, [pc, #300]	; (8001ff4 <StartLRacket+0x1ac>)
 8001ec6:	f003 f855 	bl	8004f74 <HAL_ADC_PollForConversion>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d1f8      	bne.n	8001ec2 <StartLRacket+0x7a>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001ed0:	4848      	ldr	r0, [pc, #288]	; (8001ff4 <StartLRacket+0x1ac>)
 8001ed2:	f003 f8d3 	bl	800507c <HAL_ADC_GetValue>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	627b      	str	r3, [r7, #36]	; 0x24

		//Actualisation des coordonnées
		x_LRacket -= (joystick_h - 2080)/100;
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001ee0:	4a45      	ldr	r2, [pc, #276]	; (8001ff8 <StartLRacket+0x1b0>)
 8001ee2:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee6:	1152      	asrs	r2, r2, #5
 8001ee8:	17db      	asrs	r3, r3, #31
 8001eea:	1a9b      	subs	r3, r3, r2
 8001eec:	b29a      	uxth	r2, r3
 8001eee:	4b3f      	ldr	r3, [pc, #252]	; (8001fec <StartLRacket+0x1a4>)
 8001ef0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef4:	b29b      	uxth	r3, r3
 8001ef6:	4413      	add	r3, r2
 8001ef8:	b29b      	uxth	r3, r3
 8001efa:	b21a      	sxth	r2, r3
 8001efc:	4b3b      	ldr	r3, [pc, #236]	; (8001fec <StartLRacket+0x1a4>)
 8001efe:	801a      	strh	r2, [r3, #0]
		y_LRacket -= (joystick_v - 2080)/150;
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001f06:	4a3d      	ldr	r2, [pc, #244]	; (8001ffc <StartLRacket+0x1b4>)
 8001f08:	fb82 1203 	smull	r1, r2, r2, r3
 8001f0c:	1112      	asrs	r2, r2, #4
 8001f0e:	17db      	asrs	r3, r3, #31
 8001f10:	1a9b      	subs	r3, r3, r2
 8001f12:	b29a      	uxth	r2, r3
 8001f14:	4b36      	ldr	r3, [pc, #216]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f1a:	b29b      	uxth	r3, r3
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b29b      	uxth	r3, r3
 8001f20:	b21a      	sxth	r2, r3
 8001f22:	4b33      	ldr	r3, [pc, #204]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f24:	801a      	strh	r2, [r3, #0]
//		char textx[100];
//		sprintf(textx, "x = %d", x_LRacket);
//		BSP_LCD_DisplayStringAtLine(9, textx);

		// Cadrage des coordonnées LRacket
		if (x_LRacket >= 239 - width_rackets) x_LRacket = 239-width_rackets;
 8001f26:	4b31      	ldr	r3, [pc, #196]	; (8001fec <StartLRacket+0x1a4>)
 8001f28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f2c:	2be6      	cmp	r3, #230	; 0xe6
 8001f2e:	dd02      	ble.n	8001f36 <StartLRacket+0xee>
 8001f30:	4b2e      	ldr	r3, [pc, #184]	; (8001fec <StartLRacket+0x1a4>)
 8001f32:	22e7      	movs	r2, #231	; 0xe7
 8001f34:	801a      	strh	r2, [r3, #0]

		if (x_LRacket <= 0) x_LRacket = 0;
 8001f36:	4b2d      	ldr	r3, [pc, #180]	; (8001fec <StartLRacket+0x1a4>)
 8001f38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	dc02      	bgt.n	8001f46 <StartLRacket+0xfe>
 8001f40:	4b2a      	ldr	r3, [pc, #168]	; (8001fec <StartLRacket+0x1a4>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	801a      	strh	r2, [r3, #0]

		if (y_LRacket <= 0) y_LRacket = 0;
 8001f46:	4b2a      	ldr	r3, [pc, #168]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	dc02      	bgt.n	8001f56 <StartLRacket+0x10e>
 8001f50:	4b27      	ldr	r3, [pc, #156]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	801a      	strh	r2, [r3, #0]

		if (y_LRacket + height_rackets >= 272) y_LRacket = 272 - height_rackets;
 8001f56:	4b26      	ldr	r3, [pc, #152]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5c:	3328      	adds	r3, #40	; 0x28
 8001f5e:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001f62:	db02      	blt.n	8001f6a <StartLRacket+0x122>
 8001f64:	4b22      	ldr	r3, [pc, #136]	; (8001ff0 <StartLRacket+0x1a8>)
 8001f66:	22e8      	movs	r2, #232	; 0xe8
 8001f68:	801a      	strh	r2, [r3, #0]

		//Tracé de LRacket
		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f6a:	4b25      	ldr	r3, [pc, #148]	; (8002000 <StartLRacket+0x1b8>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001f72:	4618      	mov	r0, r3
 8001f74:	f00a f9e4 	bl	800c340 <xQueueSemaphoreTake>

		// Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f78:	4b22      	ldr	r3, [pc, #136]	; (8002004 <StartLRacket+0x1bc>)
 8001f7a:	781b      	ldrb	r3, [r3, #0]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d102      	bne.n	8001f86 <StartLRacket+0x13e>
 8001f80:	f04f 33ff 	mov.w	r3, #4294967295
 8001f84:	e001      	b.n	8001f8a <StartLRacket+0x142>
 8001f86:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f000 fdae 	bl	8002aec <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket_hold, y_LRacket_hold, width_rackets,
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	b298      	uxth	r0, r3
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	b299      	uxth	r1, r3
 8001f98:	2328      	movs	r3, #40	; 0x28
 8001f9a:	2208      	movs	r2, #8
 8001f9c:	f001 f9b2 	bl	8003304 <BSP_LCD_FillRect>
				height_rackets);

		// Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001fa0:	4b18      	ldr	r3, [pc, #96]	; (8002004 <StartLRacket+0x1bc>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d102      	bne.n	8001fae <StartLRacket+0x166>
 8001fa8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fac:	e001      	b.n	8001fb2 <StartLRacket+0x16a>
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 fd9a 	bl	8002aec <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket, y_LRacket, width_rackets, height_rackets);
 8001fb8:	4b0c      	ldr	r3, [pc, #48]	; (8001fec <StartLRacket+0x1a4>)
 8001fba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fbe:	b298      	uxth	r0, r3
 8001fc0:	4b0b      	ldr	r3, [pc, #44]	; (8001ff0 <StartLRacket+0x1a8>)
 8001fc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fc6:	b299      	uxth	r1, r3
 8001fc8:	2328      	movs	r3, #40	; 0x28
 8001fca:	2208      	movs	r2, #8
 8001fcc:	f001 f99a 	bl	8003304 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <StartLRacket+0x1b8>)
 8001fd2:	6818      	ldr	r0, [r3, #0]
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	2100      	movs	r1, #0
 8001fda:	f00a f8af 	bl	800c13c <xQueueGenericSend>

		osDelay(40);
 8001fde:	2028      	movs	r0, #40	; 0x28
 8001fe0:	f009 fe0f 	bl	800bc02 <osDelay>
		x_LRacket_hold = x_LRacket;
 8001fe4:	e749      	b.n	8001e7a <StartLRacket+0x32>
 8001fe6:	bf00      	nop
 8001fe8:	20008994 	.word	0x20008994
 8001fec:	20000028 	.word	0x20000028
 8001ff0:	2000002a 	.word	0x2000002a
 8001ff4:	20008948 	.word	0x20008948
 8001ff8:	51eb851f 	.word	0x51eb851f
 8001ffc:	1b4e81b5 	.word	0x1b4e81b5
 8002000:	20008c18 	.word	0x20008c18
 8002004:	20000035 	.word	0x20000035

08002008 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	b092      	sub	sp, #72	; 0x48
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */
	TickType_t xFrequency=10;
 8002010:	230a      	movs	r3, #10
 8002012:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8002014:	f00a ffa0 	bl	800cf58 <xTaskGetTickCount>
 8002018:	4603      	mov	r3, r0
 800201a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint16_t x_balle_hold = 480;
 800201c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002020:	87fb      	strh	r3, [r7, #62]	; 0x3e
	uint16_t y_balle_hold = 136;
 8002022:	2388      	movs	r3, #136	; 0x88
 8002024:	87bb      	strh	r3, [r7, #60]	; 0x3c
	int8_t x_sens = -1;
 8002026:	23ff      	movs	r3, #255	; 0xff
 8002028:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	int8_t y_sens = 1;
 800202c:	2301      	movs	r3, #1
 800202e:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

  /* Infinite loop */
  for(;;)
  {

	  x_balle_hold = x_balle;
 8002032:	4ba6      	ldr	r3, [pc, #664]	; (80022cc <StartBall+0x2c4>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	87fb      	strh	r3, [r7, #62]	; 0x3e
	  y_balle_hold = y_balle;
 8002038:	4ba5      	ldr	r3, [pc, #660]	; (80022d0 <StartBall+0x2c8>)
 800203a:	881b      	ldrh	r3, [r3, #0]
 800203c:	87bb      	strh	r3, [r7, #60]	; 0x3c

	  //Mouvement de la balle
	  x_balle += x_sens;
 800203e:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002042:	b29a      	uxth	r2, r3
 8002044:	4ba1      	ldr	r3, [pc, #644]	; (80022cc <StartBall+0x2c4>)
 8002046:	881b      	ldrh	r3, [r3, #0]
 8002048:	4413      	add	r3, r2
 800204a:	b29a      	uxth	r2, r3
 800204c:	4b9f      	ldr	r3, [pc, #636]	; (80022cc <StartBall+0x2c4>)
 800204e:	801a      	strh	r2, [r3, #0]
	  y_balle += y_sens;
 8002050:	f997 3046 	ldrsb.w	r3, [r7, #70]	; 0x46
 8002054:	b29a      	uxth	r2, r3
 8002056:	4b9e      	ldr	r3, [pc, #632]	; (80022d0 <StartBall+0x2c8>)
 8002058:	881b      	ldrh	r3, [r3, #0]
 800205a:	4413      	add	r3, r2
 800205c:	b29a      	uxth	r2, r3
 800205e:	4b9c      	ldr	r3, [pc, #624]	; (80022d0 <StartBall+0x2c8>)
 8002060:	801a      	strh	r2, [r3, #0]

	  //Cadrage vertical des coordonnées de la balle
	  if((y_balle-radius_balle <= 0) || (y_balle+radius_balle >= 271)){
 8002062:	4b9b      	ldr	r3, [pc, #620]	; (80022d0 <StartBall+0x2c8>)
 8002064:	881b      	ldrh	r3, [r3, #0]
 8002066:	461a      	mov	r2, r3
 8002068:	4b9a      	ldr	r3, [pc, #616]	; (80022d4 <StartBall+0x2cc>)
 800206a:	781b      	ldrb	r3, [r3, #0]
 800206c:	1ad3      	subs	r3, r2, r3
 800206e:	2b00      	cmp	r3, #0
 8002070:	dd08      	ble.n	8002084 <StartBall+0x7c>
 8002072:	4b97      	ldr	r3, [pc, #604]	; (80022d0 <StartBall+0x2c8>)
 8002074:	881b      	ldrh	r3, [r3, #0]
 8002076:	461a      	mov	r2, r3
 8002078:	4b96      	ldr	r3, [pc, #600]	; (80022d4 <StartBall+0x2cc>)
 800207a:	781b      	ldrb	r3, [r3, #0]
 800207c:	4413      	add	r3, r2
 800207e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8002082:	dd05      	ble.n	8002090 <StartBall+0x88>
		  y_sens = -y_sens;
 8002084:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8002088:	425b      	negs	r3, r3
 800208a:	b2db      	uxtb	r3, r3
 800208c:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	  }
	  if(x_sens==-1){
 8002090:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 8002094:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002098:	d14e      	bne.n	8002138 <StartBall+0x130>
		  //Cadrage rebond sur LRacket
		  if((x_balle - radius_balle <= x_LRacket + width_rackets) && (x_balle - radius_balle >= x_LRacket))
 800209a:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <StartBall+0x2c4>)
 800209c:	881b      	ldrh	r3, [r3, #0]
 800209e:	461a      	mov	r2, r3
 80020a0:	4b8c      	ldr	r3, [pc, #560]	; (80022d4 <StartBall+0x2cc>)
 80020a2:	781b      	ldrb	r3, [r3, #0]
 80020a4:	1ad2      	subs	r2, r2, r3
 80020a6:	4b8c      	ldr	r3, [pc, #560]	; (80022d8 <StartBall+0x2d0>)
 80020a8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020ac:	3308      	adds	r3, #8
 80020ae:	429a      	cmp	r2, r3
 80020b0:	dc20      	bgt.n	80020f4 <StartBall+0xec>
 80020b2:	4b86      	ldr	r3, [pc, #536]	; (80022cc <StartBall+0x2c4>)
 80020b4:	881b      	ldrh	r3, [r3, #0]
 80020b6:	461a      	mov	r2, r3
 80020b8:	4b86      	ldr	r3, [pc, #536]	; (80022d4 <StartBall+0x2cc>)
 80020ba:	781b      	ldrb	r3, [r3, #0]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	4a86      	ldr	r2, [pc, #536]	; (80022d8 <StartBall+0x2d0>)
 80020c0:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020c4:	4293      	cmp	r3, r2
 80020c6:	db15      	blt.n	80020f4 <StartBall+0xec>
		  {
			  //Abscisse critique
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 80020c8:	4b81      	ldr	r3, [pc, #516]	; (80022d0 <StartBall+0x2c8>)
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	461a      	mov	r2, r3
 80020ce:	4b83      	ldr	r3, [pc, #524]	; (80022dc <StartBall+0x2d4>)
 80020d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020d4:	429a      	cmp	r2, r3
 80020d6:	f2c0 8085 	blt.w	80021e4 <StartBall+0x1dc>
 80020da:	4b7d      	ldr	r3, [pc, #500]	; (80022d0 <StartBall+0x2c8>)
 80020dc:	881b      	ldrh	r3, [r3, #0]
 80020de:	461a      	mov	r2, r3
 80020e0:	4b7e      	ldr	r3, [pc, #504]	; (80022dc <StartBall+0x2d4>)
 80020e2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020e6:	3328      	adds	r3, #40	; 0x28
 80020e8:	429a      	cmp	r2, r3
 80020ea:	dc7b      	bgt.n	80021e4 <StartBall+0x1dc>
			  {
				  //Rebond
				  x_sens = 1;
 80020ec:	2301      	movs	r3, #1
 80020ee:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 80020f2:	e077      	b.n	80021e4 <StartBall+0x1dc>
			  }
		  }
		  else if(x_balle==radius_balle)
 80020f4:	4b77      	ldr	r3, [pc, #476]	; (80022d4 <StartBall+0x2cc>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	b29a      	uxth	r2, r3
 80020fa:	4b74      	ldr	r3, [pc, #464]	; (80022cc <StartBall+0x2c4>)
 80020fc:	881b      	ldrh	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d173      	bne.n	80021ea <StartBall+0x1e2>
		  {
			  //Perdu
			  perdu = 1;
 8002102:	4b77      	ldr	r3, [pc, #476]	; (80022e0 <StartBall+0x2d8>)
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
			  // Accaparement de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002108:	4b76      	ldr	r3, [pc, #472]	; (80022e4 <StartBall+0x2dc>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f04f 31ff 	mov.w	r1, #4294967295
 8002110:	4618      	mov	r0, r3
 8002112:	f00a f915 	bl	800c340 <xQueueSemaphoreTake>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8002116:	4974      	ldr	r1, [pc, #464]	; (80022e8 <StartBall+0x2e0>)
 8002118:	2002      	movs	r0, #2
 800211a:	f000 fe79 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 800211e:	4b71      	ldr	r3, [pc, #452]	; (80022e4 <StartBall+0x2dc>)
 8002120:	6818      	ldr	r0, [r3, #0]
 8002122:	2300      	movs	r3, #0
 8002124:	2200      	movs	r2, #0
 8002126:	2100      	movs	r1, #0
 8002128:	f00a f808 	bl	800c13c <xQueueGenericSend>
			  vTaskSuspend(BallHandle);
 800212c:	4b6f      	ldr	r3, [pc, #444]	; (80022ec <StartBall+0x2e4>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f00a fd6f 	bl	800cc14 <vTaskSuspend>
 8002136:	e058      	b.n	80021ea <StartBall+0x1e2>
		  }
	  }
	  else if(x_sens==1)
 8002138:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 800213c:	2b01      	cmp	r3, #1
 800213e:	d154      	bne.n	80021ea <StartBall+0x1e2>
	  {
		  //Cadrage rebond sur RRacket
		  if((x_balle + radius_balle >= x_RRacket) && (x_balle + radius_balle <= x_RRacket + width_rackets))
 8002140:	4b62      	ldr	r3, [pc, #392]	; (80022cc <StartBall+0x2c4>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	461a      	mov	r2, r3
 8002146:	4b63      	ldr	r3, [pc, #396]	; (80022d4 <StartBall+0x2cc>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	4413      	add	r3, r2
 800214c:	4a68      	ldr	r2, [pc, #416]	; (80022f0 <StartBall+0x2e8>)
 800214e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002152:	4293      	cmp	r3, r2
 8002154:	db20      	blt.n	8002198 <StartBall+0x190>
 8002156:	4b5d      	ldr	r3, [pc, #372]	; (80022cc <StartBall+0x2c4>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	461a      	mov	r2, r3
 800215c:	4b5d      	ldr	r3, [pc, #372]	; (80022d4 <StartBall+0x2cc>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	441a      	add	r2, r3
 8002162:	4b63      	ldr	r3, [pc, #396]	; (80022f0 <StartBall+0x2e8>)
 8002164:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002168:	3308      	adds	r3, #8
 800216a:	429a      	cmp	r2, r3
 800216c:	dc14      	bgt.n	8002198 <StartBall+0x190>
		  {
			  //Abscisse critique
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 800216e:	4b58      	ldr	r3, [pc, #352]	; (80022d0 <StartBall+0x2c8>)
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	461a      	mov	r2, r3
 8002174:	4b5f      	ldr	r3, [pc, #380]	; (80022f4 <StartBall+0x2ec>)
 8002176:	f9b3 3000 	ldrsh.w	r3, [r3]
 800217a:	429a      	cmp	r2, r3
 800217c:	db34      	blt.n	80021e8 <StartBall+0x1e0>
 800217e:	4b54      	ldr	r3, [pc, #336]	; (80022d0 <StartBall+0x2c8>)
 8002180:	881b      	ldrh	r3, [r3, #0]
 8002182:	461a      	mov	r2, r3
 8002184:	4b5b      	ldr	r3, [pc, #364]	; (80022f4 <StartBall+0x2ec>)
 8002186:	f9b3 3000 	ldrsh.w	r3, [r3]
 800218a:	3328      	adds	r3, #40	; 0x28
 800218c:	429a      	cmp	r2, r3
 800218e:	dc2b      	bgt.n	80021e8 <StartBall+0x1e0>
			  {
				  //Rebond
				  x_sens = -1;
 8002190:	23ff      	movs	r3, #255	; 0xff
 8002192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 8002196:	e027      	b.n	80021e8 <StartBall+0x1e0>
			  }
		  }
		  else if(x_balle==959-radius_balle)
 8002198:	4b4c      	ldr	r3, [pc, #304]	; (80022cc <StartBall+0x2c4>)
 800219a:	881b      	ldrh	r3, [r3, #0]
 800219c:	461a      	mov	r2, r3
 800219e:	4b4d      	ldr	r3, [pc, #308]	; (80022d4 <StartBall+0x2cc>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4619      	mov	r1, r3
 80021a4:	f240 33bf 	movw	r3, #959	; 0x3bf
 80021a8:	1a5b      	subs	r3, r3, r1
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d11d      	bne.n	80021ea <StartBall+0x1e2>
		  {
			  //Perdu
			  perdu = 1;
 80021ae:	4b4c      	ldr	r3, [pc, #304]	; (80022e0 <StartBall+0x2d8>)
 80021b0:	2201      	movs	r2, #1
 80021b2:	701a      	strb	r2, [r3, #0]
			  // Accaparement de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80021b4:	4b4b      	ldr	r3, [pc, #300]	; (80022e4 <StartBall+0x2dc>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f04f 31ff 	mov.w	r1, #4294967295
 80021bc:	4618      	mov	r0, r3
 80021be:	f00a f8bf 	bl	800c340 <xQueueSemaphoreTake>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 80021c2:	4949      	ldr	r1, [pc, #292]	; (80022e8 <StartBall+0x2e0>)
 80021c4:	2002      	movs	r0, #2
 80021c6:	f000 fe23 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 80021ca:	4b46      	ldr	r3, [pc, #280]	; (80022e4 <StartBall+0x2dc>)
 80021cc:	6818      	ldr	r0, [r3, #0]
 80021ce:	2300      	movs	r3, #0
 80021d0:	2200      	movs	r2, #0
 80021d2:	2100      	movs	r1, #0
 80021d4:	f009 ffb2 	bl	800c13c <xQueueGenericSend>
			  vTaskSuspend(BallHandle);
 80021d8:	4b44      	ldr	r3, [pc, #272]	; (80022ec <StartBall+0x2e4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f00a fd19 	bl	800cc14 <vTaskSuspend>
 80021e2:	e002      	b.n	80021ea <StartBall+0x1e2>
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 80021e4:	bf00      	nop
 80021e6:	e000      	b.n	80021ea <StartBall+0x1e2>
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 80021e8:	bf00      	nop
		  }
	  }

	  // Accaparement de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80021ea:	4b3e      	ldr	r3, [pc, #248]	; (80022e4 <StartBall+0x2dc>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	f04f 31ff 	mov.w	r1, #4294967295
 80021f2:	4618      	mov	r0, r3
 80021f4:	f00a f8a4 	bl	800c340 <xQueueSemaphoreTake>

	  if(x_balle_hold <=479){
 80021f8:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80021fa:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021fe:	d214      	bcs.n	800222a <StartBall+0x222>
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002200:	4b3d      	ldr	r3, [pc, #244]	; (80022f8 <StartBall+0x2f0>)
 8002202:	781b      	ldrb	r3, [r3, #0]
 8002204:	2b00      	cmp	r3, #0
 8002206:	d102      	bne.n	800220e <StartBall+0x206>
 8002208:	f04f 33ff 	mov.w	r3, #4294967295
 800220c:	e001      	b.n	8002212 <StartBall+0x20a>
 800220e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002212:	4618      	mov	r0, r3
 8002214:	f000 fc6a 	bl	8002aec <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, radius_balle);
 8002218:	4b2e      	ldr	r3, [pc, #184]	; (80022d4 <StartBall+0x2cc>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	b29a      	uxth	r2, r3
 800221e:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 8002220:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8002222:	4618      	mov	r0, r3
 8002224:	f001 f8e8 	bl	80033f8 <BSP_LCD_FillCircle>
 8002228:	e02d      	b.n	8002286 <StartBall+0x27e>
	  }
	  else{
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 800222a:	4b33      	ldr	r3, [pc, #204]	; (80022f8 <StartBall+0x2f0>)
 800222c:	781b      	ldrb	r3, [r3, #0]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d102      	bne.n	8002238 <StartBall+0x230>
 8002232:	f04f 33ff 	mov.w	r3, #4294967295
 8002236:	e001      	b.n	800223c <StartBall+0x234>
 8002238:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800223c:	4618      	mov	r0, r3
 800223e:	f000 fc55 	bl	8002aec <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle_hold+3};
 8002242:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002246:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002248:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800224a:	3303      	adds	r3, #3
 800224c:	b29b      	uxth	r3, r3
 800224e:	b21b      	sxth	r3, r3
 8002250:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point2 = {479,y_balle_hold};
 8002252:	f240 13df 	movw	r3, #479	; 0x1df
 8002256:	863b      	strh	r3, [r7, #48]	; 0x30
 8002258:	f9b7 303c 	ldrsh.w	r3, [r7, #60]	; 0x3c
 800225c:	867b      	strh	r3, [r7, #50]	; 0x32
		  Point Point3 = {473,y_balle_hold-3};
 800225e:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002262:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002264:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8002266:	3b03      	subs	r3, #3
 8002268:	b29b      	uxth	r3, r3
 800226a:	b21b      	sxth	r3, r3
 800226c:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  Point Points[3] = {Point1, Point2, Point3};
 800226e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002270:	623b      	str	r3, [r7, #32]
 8002272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002274:	627b      	str	r3, [r7, #36]	; 0x24
 8002276:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002278:	62bb      	str	r3, [r7, #40]	; 0x28
		  BSP_LCD_FillPolygon(Points,3);
 800227a:	f107 0320 	add.w	r3, r7, #32
 800227e:	2103      	movs	r1, #3
 8002280:	4618      	mov	r0, r3
 8002282:	f001 f959 	bl	8003538 <BSP_LCD_FillPolygon>
	  }

	  if(x_balle <=479){
 8002286:	4b11      	ldr	r3, [pc, #68]	; (80022cc <StartBall+0x2c4>)
 8002288:	881b      	ldrh	r3, [r3, #0]
 800228a:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800228e:	d216      	bcs.n	80022be <StartBall+0x2b6>
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002290:	4b19      	ldr	r3, [pc, #100]	; (80022f8 <StartBall+0x2f0>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d102      	bne.n	800229e <StartBall+0x296>
 8002298:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800229c:	e001      	b.n	80022a2 <StartBall+0x29a>
 800229e:	f04f 33ff 	mov.w	r3, #4294967295
 80022a2:	4618      	mov	r0, r3
 80022a4:	f000 fc22 	bl	8002aec <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, radius_balle);
 80022a8:	4b08      	ldr	r3, [pc, #32]	; (80022cc <StartBall+0x2c4>)
 80022aa:	8818      	ldrh	r0, [r3, #0]
 80022ac:	4b08      	ldr	r3, [pc, #32]	; (80022d0 <StartBall+0x2c8>)
 80022ae:	8819      	ldrh	r1, [r3, #0]
 80022b0:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <StartBall+0x2cc>)
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	b29b      	uxth	r3, r3
 80022b6:	461a      	mov	r2, r3
 80022b8:	f001 f89e 	bl	80033f8 <BSP_LCD_FillCircle>
 80022bc:	e048      	b.n	8002350 <StartBall+0x348>
	  }
	  else{
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 80022be:	4b0e      	ldr	r3, [pc, #56]	; (80022f8 <StartBall+0x2f0>)
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d11a      	bne.n	80022fc <StartBall+0x2f4>
 80022c6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80022ca:	e019      	b.n	8002300 <StartBall+0x2f8>
 80022cc:	20000030 	.word	0x20000030
 80022d0:	20000032 	.word	0x20000032
 80022d4:	20000034 	.word	0x20000034
 80022d8:	20000028 	.word	0x20000028
 80022dc:	2000002a 	.word	0x2000002a
 80022e0:	2000033a 	.word	0x2000033a
 80022e4:	20008c18 	.word	0x20008c18
 80022e8:	0800eb68 	.word	0x0800eb68
 80022ec:	20008c28 	.word	0x20008c28
 80022f0:	2000002c 	.word	0x2000002c
 80022f4:	2000002e 	.word	0x2000002e
 80022f8:	20000035 	.word	0x20000035
 80022fc:	f04f 33ff 	mov.w	r3, #4294967295
 8002300:	4618      	mov	r0, r3
 8002302:	f000 fbf3 	bl	8002aec <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle+3};
 8002306:	f240 13d9 	movw	r3, #473	; 0x1d9
 800230a:	83bb      	strh	r3, [r7, #28]
 800230c:	4b17      	ldr	r3, [pc, #92]	; (800236c <StartBall+0x364>)
 800230e:	881b      	ldrh	r3, [r3, #0]
 8002310:	3303      	adds	r3, #3
 8002312:	b29b      	uxth	r3, r3
 8002314:	b21b      	sxth	r3, r3
 8002316:	83fb      	strh	r3, [r7, #30]
		  Point Point2 = {479,y_balle};
 8002318:	f240 13df 	movw	r3, #479	; 0x1df
 800231c:	833b      	strh	r3, [r7, #24]
 800231e:	4b13      	ldr	r3, [pc, #76]	; (800236c <StartBall+0x364>)
 8002320:	881b      	ldrh	r3, [r3, #0]
 8002322:	b21b      	sxth	r3, r3
 8002324:	837b      	strh	r3, [r7, #26]
		  Point Point3 = {473,y_balle-3};
 8002326:	f240 13d9 	movw	r3, #473	; 0x1d9
 800232a:	82bb      	strh	r3, [r7, #20]
 800232c:	4b0f      	ldr	r3, [pc, #60]	; (800236c <StartBall+0x364>)
 800232e:	881b      	ldrh	r3, [r3, #0]
 8002330:	3b03      	subs	r3, #3
 8002332:	b29b      	uxth	r3, r3
 8002334:	b21b      	sxth	r3, r3
 8002336:	82fb      	strh	r3, [r7, #22]

		  Point Points[3] = {Point1, Point2, Point3};
 8002338:	69fb      	ldr	r3, [r7, #28]
 800233a:	60bb      	str	r3, [r7, #8]
 800233c:	69bb      	ldr	r3, [r7, #24]
 800233e:	60fb      	str	r3, [r7, #12]
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	613b      	str	r3, [r7, #16]
		  BSP_LCD_FillPolygon(Points,3);
 8002344:	f107 0308 	add.w	r3, r7, #8
 8002348:	2103      	movs	r1, #3
 800234a:	4618      	mov	r0, r3
 800234c:	f001 f8f4 	bl	8003538 <BSP_LCD_FillPolygon>
	  }


	  //Libération de la ressource
	  xSemaphoreGive(myMutex_LCDHandle);
 8002350:	4b07      	ldr	r3, [pc, #28]	; (8002370 <StartBall+0x368>)
 8002352:	6818      	ldr	r0, [r3, #0]
 8002354:	2300      	movs	r3, #0
 8002356:	2200      	movs	r2, #0
 8002358:	2100      	movs	r1, #0
 800235a:	f009 feef 	bl	800c13c <xQueueGenericSend>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 800235e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8002362:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002364:	4618      	mov	r0, r3
 8002366:	f00a fb9f 	bl	800caa8 <vTaskDelayUntil>
	  x_balle_hold = x_balle;
 800236a:	e662      	b.n	8002032 <StartBall+0x2a>
 800236c:	20000032 	.word	0x20000032
 8002370:	20008c18 	.word	0x20008c18

08002374 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
//	uint8_t Message;
	uint8_t BP1=1;
 800237c:	2301      	movs	r3, #1
 800237e:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 8002380:	2300      	movs	r3, #0
 8002382:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
//	  xQueueReceive(myQueueU2HHandle, &Message, portMAX_DELAY);
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002384:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002388:	4832      	ldr	r0, [pc, #200]	; (8002454 <StartBgChanger+0xe0>)
 800238a:	f004 f997 	bl	80066bc <HAL_GPIO_ReadPin>
 800238e:	4603      	mov	r3, r0
 8002390:	73bb      	strb	r3, [r7, #14]
	  switch(state){
 8002392:	7bfb      	ldrb	r3, [r7, #15]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d009      	beq.n	80023ac <StartBgChanger+0x38>
 8002398:	2b02      	cmp	r3, #2
 800239a:	d04d      	beq.n	8002438 <StartBgChanger+0xc4>
 800239c:	2b00      	cmp	r3, #0
 800239e:	d154      	bne.n	800244a <StartBgChanger+0xd6>
	  case 0:
		  if(!BP1) state = 1;
 80023a0:	7bbb      	ldrb	r3, [r7, #14]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d14e      	bne.n	8002444 <StartBgChanger+0xd0>
 80023a6:	2301      	movs	r3, #1
 80023a8:	73fb      	strb	r3, [r7, #15]
		  break;
 80023aa:	e04b      	b.n	8002444 <StartBgChanger+0xd0>
	  case 1:
		  couleur = !couleur;
 80023ac:	4b2a      	ldr	r3, [pc, #168]	; (8002458 <StartBgChanger+0xe4>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	bf0c      	ite	eq
 80023b4:	2301      	moveq	r3, #1
 80023b6:	2300      	movne	r3, #0
 80023b8:	b2db      	uxtb	r3, r3
 80023ba:	461a      	mov	r2, r3
 80023bc:	4b26      	ldr	r3, [pc, #152]	; (8002458 <StartBgChanger+0xe4>)
 80023be:	701a      	strb	r2, [r3, #0]
		  if(couleur==0){
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <StartBgChanger+0xe4>)
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d11a      	bne.n	80023fe <StartBgChanger+0x8a>
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80023c8:	4b24      	ldr	r3, [pc, #144]	; (800245c <StartBgChanger+0xe8>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f04f 31ff 	mov.w	r1, #4294967295
 80023d0:	4618      	mov	r0, r3
 80023d2:	f009 ffb5 	bl	800c340 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80023d6:	f04f 30ff 	mov.w	r0, #4294967295
 80023da:	f000 fbe9 	bl	8002bb0 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80023de:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80023e2:	f000 fb83 	bl	8002aec <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80023e6:	f04f 30ff 	mov.w	r0, #4294967295
 80023ea:	f000 fb97 	bl	8002b1c <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 80023ee:	4b1b      	ldr	r3, [pc, #108]	; (800245c <StartBgChanger+0xe8>)
 80023f0:	6818      	ldr	r0, [r3, #0]
 80023f2:	2300      	movs	r3, #0
 80023f4:	2200      	movs	r2, #0
 80023f6:	2100      	movs	r1, #0
 80023f8:	f009 fea0 	bl	800c13c <xQueueGenericSend>
 80023fc:	e019      	b.n	8002432 <StartBgChanger+0xbe>
		  }
		  else{
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80023fe:	4b17      	ldr	r3, [pc, #92]	; (800245c <StartBgChanger+0xe8>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f04f 31ff 	mov.w	r1, #4294967295
 8002406:	4618      	mov	r0, r3
 8002408:	f009 ff9a 	bl	800c340 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800240c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002410:	f000 fbce 	bl	8002bb0 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002414:	f04f 30ff 	mov.w	r0, #4294967295
 8002418:	f000 fb68 	bl	8002aec <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800241c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002420:	f000 fb7c 	bl	8002b1c <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 8002424:	4b0d      	ldr	r3, [pc, #52]	; (800245c <StartBgChanger+0xe8>)
 8002426:	6818      	ldr	r0, [r3, #0]
 8002428:	2300      	movs	r3, #0
 800242a:	2200      	movs	r2, #0
 800242c:	2100      	movs	r1, #0
 800242e:	f009 fe85 	bl	800c13c <xQueueGenericSend>
		  }
		  state = 2;
 8002432:	2302      	movs	r3, #2
 8002434:	73fb      	strb	r3, [r7, #15]
		  break;
 8002436:	e008      	b.n	800244a <StartBgChanger+0xd6>
	  case 2:
		  if(BP1) state = 0;
 8002438:	7bbb      	ldrb	r3, [r7, #14]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d004      	beq.n	8002448 <StartBgChanger+0xd4>
 800243e:	2300      	movs	r3, #0
 8002440:	73fb      	strb	r3, [r7, #15]
		  break;
 8002442:	e001      	b.n	8002448 <StartBgChanger+0xd4>
		  break;
 8002444:	bf00      	nop
 8002446:	e000      	b.n	800244a <StartBgChanger+0xd6>
		  break;
 8002448:	bf00      	nop
//		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//		  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
//	  }
//	  xSemaphoreGive(myMutex_LCDHandle);
//	  FlagBgChanger = 1;
  osDelay(100);
 800244a:	2064      	movs	r0, #100	; 0x64
 800244c:	f009 fbd9 	bl	800bc02 <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002450:	e798      	b.n	8002384 <StartBgChanger+0x10>
 8002452:	bf00      	nop
 8002454:	40020000 	.word	0x40020000
 8002458:	20000035 	.word	0x20000035
 800245c:	20008c18 	.word	0x20008c18

08002460 <StartTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmit */
void StartTransmit(void const * argument)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b0e6      	sub	sp, #408	; 0x198
 8002464:	af00      	add	r7, sp, #0
 8002466:	1d3b      	adds	r3, r7, #4
 8002468:	6018      	str	r0, [r3, #0]
  {
	  char textr[100];
	  char textx2[100];
	  char texty2[100];
	  char textp[100];
	  sprintf(textr, "r = %d", x_RRacket);
 800246a:	4b34      	ldr	r3, [pc, #208]	; (800253c <StartTransmit+0xdc>)
 800246c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002470:	461a      	mov	r2, r3
 8002472:	f107 0308 	add.w	r3, r7, #8
 8002476:	4932      	ldr	r1, [pc, #200]	; (8002540 <StartTransmit+0xe0>)
 8002478:	4618      	mov	r0, r3
 800247a:	f00b fee7 	bl	800e24c <siprintf>
	  sprintf(textx2, "xR = %d", x_RRacket);
 800247e:	4b2f      	ldr	r3, [pc, #188]	; (800253c <StartTransmit+0xdc>)
 8002480:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002484:	461a      	mov	r2, r3
 8002486:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800248a:	492e      	ldr	r1, [pc, #184]	; (8002544 <StartTransmit+0xe4>)
 800248c:	4618      	mov	r0, r3
 800248e:	f00b fedd 	bl	800e24c <siprintf>
	  sprintf(texty2, "yR = %d", y_RRacket);
 8002492:	4b2d      	ldr	r3, [pc, #180]	; (8002548 <StartTransmit+0xe8>)
 8002494:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002498:	461a      	mov	r2, r3
 800249a:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800249e:	492b      	ldr	r1, [pc, #172]	; (800254c <StartTransmit+0xec>)
 80024a0:	4618      	mov	r0, r3
 80024a2:	f00b fed3 	bl	800e24c <siprintf>
	  sprintf(textp, "yR = %d", perdu);
 80024a6:	4b2a      	ldr	r3, [pc, #168]	; (8002550 <StartTransmit+0xf0>)
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	461a      	mov	r2, r3
 80024ac:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80024b0:	4926      	ldr	r1, [pc, #152]	; (800254c <StartTransmit+0xec>)
 80024b2:	4618      	mov	r0, r3
 80024b4:	f00b feca 	bl	800e24c <siprintf>
	  BSP_LCD_DisplayStringAtLine(8, textr);
 80024b8:	f107 0308 	add.w	r3, r7, #8
 80024bc:	4619      	mov	r1, r3
 80024be:	2008      	movs	r0, #8
 80024c0:	f000 fca6 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(9, textx2);
 80024c4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80024c8:	4619      	mov	r1, r3
 80024ca:	2009      	movs	r0, #9
 80024cc:	f000 fca0 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(10, texty2);
 80024d0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024d4:	4619      	mov	r1, r3
 80024d6:	200a      	movs	r0, #10
 80024d8:	f000 fc9a 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>
	  BSP_LCD_DisplayStringAtLine(11, textp);
 80024dc:	f507 739a 	add.w	r3, r7, #308	; 0x134
 80024e0:	4619      	mov	r1, r3
 80024e2:	200b      	movs	r0, #11
 80024e4:	f000 fc94 	bl	8002e10 <BSP_LCD_DisplayStringAtLine>

	  //Radius balle
	  txbuffer[0] = radius_balle;
 80024e8:	4b1a      	ldr	r3, [pc, #104]	; (8002554 <StartTransmit+0xf4>)
 80024ea:	781a      	ldrb	r2, [r3, #0]
 80024ec:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <StartTransmit+0xf8>)
 80024ee:	701a      	strb	r2, [r3, #0]
	  //xballe
	  txbuffer[1] = (x_balle & 0xFF00) >> 8;
 80024f0:	4b1a      	ldr	r3, [pc, #104]	; (800255c <StartTransmit+0xfc>)
 80024f2:	881b      	ldrh	r3, [r3, #0]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	b29b      	uxth	r3, r3
 80024f8:	b2da      	uxtb	r2, r3
 80024fa:	4b17      	ldr	r3, [pc, #92]	; (8002558 <StartTransmit+0xf8>)
 80024fc:	705a      	strb	r2, [r3, #1]
	  txbuffer[2] = (x_balle & 0x00FF);
 80024fe:	4b17      	ldr	r3, [pc, #92]	; (800255c <StartTransmit+0xfc>)
 8002500:	881b      	ldrh	r3, [r3, #0]
 8002502:	b2da      	uxtb	r2, r3
 8002504:	4b14      	ldr	r3, [pc, #80]	; (8002558 <StartTransmit+0xf8>)
 8002506:	709a      	strb	r2, [r3, #2]
	  //yballe
	  txbuffer[3] = (y_balle & 0xFF00) >> 8;
 8002508:	4b15      	ldr	r3, [pc, #84]	; (8002560 <StartTransmit+0x100>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	0a1b      	lsrs	r3, r3, #8
 800250e:	b29b      	uxth	r3, r3
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b11      	ldr	r3, [pc, #68]	; (8002558 <StartTransmit+0xf8>)
 8002514:	70da      	strb	r2, [r3, #3]
	  txbuffer[4] = (y_balle & 0x00FF);
 8002516:	4b12      	ldr	r3, [pc, #72]	; (8002560 <StartTransmit+0x100>)
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	b2da      	uxtb	r2, r3
 800251c:	4b0e      	ldr	r3, [pc, #56]	; (8002558 <StartTransmit+0xf8>)
 800251e:	711a      	strb	r2, [r3, #4]
	  //perdu
	  txbuffer[5] = perdu;
 8002520:	4b0b      	ldr	r3, [pc, #44]	; (8002550 <StartTransmit+0xf0>)
 8002522:	781a      	ldrb	r2, [r3, #0]
 8002524:	4b0c      	ldr	r3, [pc, #48]	; (8002558 <StartTransmit+0xf8>)
 8002526:	715a      	strb	r2, [r3, #5]


	  HAL_UART_Transmit_IT(&huart7,txbuffer,6);
 8002528:	2206      	movs	r2, #6
 800252a:	490b      	ldr	r1, [pc, #44]	; (8002558 <StartTransmit+0xf8>)
 800252c:	480d      	ldr	r0, [pc, #52]	; (8002564 <StartTransmit+0x104>)
 800252e:	f008 fa31 	bl	800a994 <HAL_UART_Transmit_IT>
	  osDelay(10);
 8002532:	200a      	movs	r0, #10
 8002534:	f009 fb65 	bl	800bc02 <osDelay>
  {
 8002538:	e797      	b.n	800246a <StartTransmit+0xa>
 800253a:	bf00      	nop
 800253c:	2000002c 	.word	0x2000002c
 8002540:	0800eb70 	.word	0x0800eb70
 8002544:	0800eb50 	.word	0x0800eb50
 8002548:	2000002e 	.word	0x2000002e
 800254c:	0800eb58 	.word	0x0800eb58
 8002550:	2000033a 	.word	0x2000033a
 8002554:	20000034 	.word	0x20000034
 8002558:	20008ad8 	.word	0x20008ad8
 800255c:	20000030 	.word	0x20000030
 8002560:	20000032 	.word	0x20000032
 8002564:	20008714 	.word	0x20008714

08002568 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a04      	ldr	r2, [pc, #16]	; (8002588 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d101      	bne.n	800257e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800257a:	f002 fbb5 	bl	8004ce8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800257e:	bf00      	nop
 8002580:	3708      	adds	r7, #8
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}
 8002586:	bf00      	nop
 8002588:	40001000 	.word	0x40001000

0800258c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002590:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8002592:	e7fe      	b.n	8002592 <Error_Handler+0x6>

08002594 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08c      	sub	sp, #48	; 0x30
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	4a51      	ldr	r2, [pc, #324]	; (80026e4 <I2Cx_MspInit+0x150>)
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d14d      	bne.n	8002640 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80025a4:	4b50      	ldr	r3, [pc, #320]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a8:	4a4f      	ldr	r2, [pc, #316]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025ae:	6313      	str	r3, [r2, #48]	; 0x30
 80025b0:	4b4d      	ldr	r3, [pc, #308]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b8:	61bb      	str	r3, [r7, #24]
 80025ba:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80025c0:	2312      	movs	r3, #18
 80025c2:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80025c4:	2300      	movs	r3, #0
 80025c6:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80025c8:	2302      	movs	r3, #2
 80025ca:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80025cc:	2304      	movs	r3, #4
 80025ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025d0:	f107 031c 	add.w	r3, r7, #28
 80025d4:	4619      	mov	r1, r3
 80025d6:	4845      	ldr	r0, [pc, #276]	; (80026ec <I2Cx_MspInit+0x158>)
 80025d8:	f003 fdbc 	bl	8006154 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80025dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80025e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025e2:	f107 031c 	add.w	r3, r7, #28
 80025e6:	4619      	mov	r1, r3
 80025e8:	4840      	ldr	r0, [pc, #256]	; (80026ec <I2Cx_MspInit+0x158>)
 80025ea:	f003 fdb3 	bl	8006154 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80025ee:	4b3e      	ldr	r3, [pc, #248]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f2:	4a3d      	ldr	r2, [pc, #244]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80025f8:	6413      	str	r3, [r2, #64]	; 0x40
 80025fa:	4b3b      	ldr	r3, [pc, #236]	; (80026e8 <I2Cx_MspInit+0x154>)
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002602:	617b      	str	r3, [r7, #20]
 8002604:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 8002606:	4b38      	ldr	r3, [pc, #224]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002608:	6a1b      	ldr	r3, [r3, #32]
 800260a:	4a37      	ldr	r2, [pc, #220]	; (80026e8 <I2Cx_MspInit+0x154>)
 800260c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002610:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002612:	4b35      	ldr	r3, [pc, #212]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002614:	6a1b      	ldr	r3, [r3, #32]
 8002616:	4a34      	ldr	r2, [pc, #208]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002618:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800261c:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 800261e:	2200      	movs	r2, #0
 8002620:	210f      	movs	r1, #15
 8002622:	2048      	movs	r0, #72	; 0x48
 8002624:	f003 f834 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002628:	2048      	movs	r0, #72	; 0x48
 800262a:	f003 f84d 	bl	80056c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 800262e:	2200      	movs	r2, #0
 8002630:	210f      	movs	r1, #15
 8002632:	2049      	movs	r0, #73	; 0x49
 8002634:	f003 f82c 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002638:	2049      	movs	r0, #73	; 0x49
 800263a:	f003 f845 	bl	80056c8 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 800263e:	e04d      	b.n	80026dc <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002640:	4b29      	ldr	r3, [pc, #164]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002644:	4a28      	ldr	r2, [pc, #160]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002646:	f043 0302 	orr.w	r3, r3, #2
 800264a:	6313      	str	r3, [r2, #48]	; 0x30
 800264c:	4b26      	ldr	r3, [pc, #152]	; (80026e8 <I2Cx_MspInit+0x154>)
 800264e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002650:	f003 0302 	and.w	r3, r3, #2
 8002654:	613b      	str	r3, [r7, #16]
 8002656:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002658:	f44f 7380 	mov.w	r3, #256	; 0x100
 800265c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 800265e:	2312      	movs	r3, #18
 8002660:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002662:	2300      	movs	r3, #0
 8002664:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 8002666:	2302      	movs	r3, #2
 8002668:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 800266a:	2304      	movs	r3, #4
 800266c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800266e:	f107 031c 	add.w	r3, r7, #28
 8002672:	4619      	mov	r1, r3
 8002674:	481e      	ldr	r0, [pc, #120]	; (80026f0 <I2Cx_MspInit+0x15c>)
 8002676:	f003 fd6d 	bl	8006154 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800267a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800267e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002680:	f107 031c 	add.w	r3, r7, #28
 8002684:	4619      	mov	r1, r3
 8002686:	481a      	ldr	r0, [pc, #104]	; (80026f0 <I2Cx_MspInit+0x15c>)
 8002688:	f003 fd64 	bl	8006154 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 800268c:	4b16      	ldr	r3, [pc, #88]	; (80026e8 <I2Cx_MspInit+0x154>)
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	4a15      	ldr	r2, [pc, #84]	; (80026e8 <I2Cx_MspInit+0x154>)
 8002692:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002696:	6413      	str	r3, [r2, #64]	; 0x40
 8002698:	4b13      	ldr	r3, [pc, #76]	; (80026e8 <I2Cx_MspInit+0x154>)
 800269a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800269c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80026a4:	4b10      	ldr	r3, [pc, #64]	; (80026e8 <I2Cx_MspInit+0x154>)
 80026a6:	6a1b      	ldr	r3, [r3, #32]
 80026a8:	4a0f      	ldr	r2, [pc, #60]	; (80026e8 <I2Cx_MspInit+0x154>)
 80026aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80026ae:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80026b0:	4b0d      	ldr	r3, [pc, #52]	; (80026e8 <I2Cx_MspInit+0x154>)
 80026b2:	6a1b      	ldr	r3, [r3, #32]
 80026b4:	4a0c      	ldr	r2, [pc, #48]	; (80026e8 <I2Cx_MspInit+0x154>)
 80026b6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80026ba:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80026bc:	2200      	movs	r2, #0
 80026be:	210f      	movs	r1, #15
 80026c0:	201f      	movs	r0, #31
 80026c2:	f002 ffe5 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80026c6:	201f      	movs	r0, #31
 80026c8:	f002 fffe 	bl	80056c8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	210f      	movs	r1, #15
 80026d0:	2020      	movs	r0, #32
 80026d2:	f002 ffdd 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80026d6:	2020      	movs	r0, #32
 80026d8:	f002 fff6 	bl	80056c8 <HAL_NVIC_EnableIRQ>
}
 80026dc:	bf00      	nop
 80026de:	3730      	adds	r7, #48	; 0x30
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	2000033c 	.word	0x2000033c
 80026e8:	40023800 	.word	0x40023800
 80026ec:	40021c00 	.word	0x40021c00
 80026f0:	40020400 	.word	0x40020400

080026f4 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b082      	sub	sp, #8
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 80026fc:	6878      	ldr	r0, [r7, #4]
 80026fe:	f004 fafd 	bl	8006cfc <HAL_I2C_GetState>
 8002702:	4603      	mov	r3, r0
 8002704:	2b00      	cmp	r3, #0
 8002706:	d125      	bne.n	8002754 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	4a14      	ldr	r2, [pc, #80]	; (800275c <I2Cx_Init+0x68>)
 800270c:	4293      	cmp	r3, r2
 800270e:	d103      	bne.n	8002718 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	4a13      	ldr	r2, [pc, #76]	; (8002760 <I2Cx_Init+0x6c>)
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e002      	b.n	800271e <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4a12      	ldr	r2, [pc, #72]	; (8002764 <I2Cx_Init+0x70>)
 800271c:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4a11      	ldr	r2, [pc, #68]	; (8002768 <I2Cx_Init+0x74>)
 8002722:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2201      	movs	r2, #1
 800272e:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2200      	movs	r2, #0
 8002734:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	2200      	movs	r2, #0
 800273a:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2200      	movs	r2, #0
 8002746:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	f7ff ff23 	bl	8002594 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 800274e:	6878      	ldr	r0, [r7, #4]
 8002750:	f003 ffe6 	bl	8006720 <HAL_I2C_Init>
  }
}
 8002754:	bf00      	nop
 8002756:	3708      	adds	r7, #8
 8002758:	46bd      	mov	sp, r7
 800275a:	bd80      	pop	{r7, pc}
 800275c:	2000033c 	.word	0x2000033c
 8002760:	40005c00 	.word	0x40005c00
 8002764:	40005400 	.word	0x40005400
 8002768:	40912732 	.word	0x40912732

0800276c <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b08a      	sub	sp, #40	; 0x28
 8002770:	af04      	add	r7, sp, #16
 8002772:	60f8      	str	r0, [r7, #12]
 8002774:	4608      	mov	r0, r1
 8002776:	4611      	mov	r1, r2
 8002778:	461a      	mov	r2, r3
 800277a:	4603      	mov	r3, r0
 800277c:	72fb      	strb	r3, [r7, #11]
 800277e:	460b      	mov	r3, r1
 8002780:	813b      	strh	r3, [r7, #8]
 8002782:	4613      	mov	r3, r2
 8002784:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002786:	2300      	movs	r3, #0
 8002788:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800278a:	7afb      	ldrb	r3, [r7, #11]
 800278c:	b299      	uxth	r1, r3
 800278e:	88f8      	ldrh	r0, [r7, #6]
 8002790:	893a      	ldrh	r2, [r7, #8]
 8002792:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002796:	9302      	str	r3, [sp, #8]
 8002798:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800279a:	9301      	str	r3, [sp, #4]
 800279c:	6a3b      	ldr	r3, [r7, #32]
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	4603      	mov	r3, r0
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f004 f990 	bl	8006ac8 <HAL_I2C_Mem_Read>
 80027a8:	4603      	mov	r3, r0
 80027aa:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80027ac:	7dfb      	ldrb	r3, [r7, #23]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d004      	beq.n	80027bc <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80027b2:	7afb      	ldrb	r3, [r7, #11]
 80027b4:	4619      	mov	r1, r3
 80027b6:	68f8      	ldr	r0, [r7, #12]
 80027b8:	f000 f832 	bl	8002820 <I2Cx_Error>
  }
  return status;    
 80027bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80027be:	4618      	mov	r0, r3
 80027c0:	3718      	adds	r7, #24
 80027c2:	46bd      	mov	sp, r7
 80027c4:	bd80      	pop	{r7, pc}

080027c6 <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80027c6:	b580      	push	{r7, lr}
 80027c8:	b08a      	sub	sp, #40	; 0x28
 80027ca:	af04      	add	r7, sp, #16
 80027cc:	60f8      	str	r0, [r7, #12]
 80027ce:	4608      	mov	r0, r1
 80027d0:	4611      	mov	r1, r2
 80027d2:	461a      	mov	r2, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	72fb      	strb	r3, [r7, #11]
 80027d8:	460b      	mov	r3, r1
 80027da:	813b      	strh	r3, [r7, #8]
 80027dc:	4613      	mov	r3, r2
 80027de:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80027e0:	2300      	movs	r3, #0
 80027e2:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80027e4:	7afb      	ldrb	r3, [r7, #11]
 80027e6:	b299      	uxth	r1, r3
 80027e8:	88f8      	ldrh	r0, [r7, #6]
 80027ea:	893a      	ldrh	r2, [r7, #8]
 80027ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80027f0:	9302      	str	r3, [sp, #8]
 80027f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80027f4:	9301      	str	r3, [sp, #4]
 80027f6:	6a3b      	ldr	r3, [r7, #32]
 80027f8:	9300      	str	r3, [sp, #0]
 80027fa:	4603      	mov	r3, r0
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f004 f84f 	bl	80068a0 <HAL_I2C_Mem_Write>
 8002802:	4603      	mov	r3, r0
 8002804:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 8002806:	7dfb      	ldrb	r3, [r7, #23]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d004      	beq.n	8002816 <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 800280c:	7afb      	ldrb	r3, [r7, #11]
 800280e:	4619      	mov	r1, r3
 8002810:	68f8      	ldr	r0, [r7, #12]
 8002812:	f000 f805 	bl	8002820 <I2Cx_Error>
  }
  return status;
 8002816:	7dfb      	ldrb	r3, [r7, #23]
}
 8002818:	4618      	mov	r0, r3
 800281a:	3718      	adds	r7, #24
 800281c:	46bd      	mov	sp, r7
 800281e:	bd80      	pop	{r7, pc}

08002820 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b082      	sub	sp, #8
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f004 f807 	bl	8006840 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f7ff ff5e 	bl	80026f4 <I2Cx_Init>
}
 8002838:	bf00      	nop
 800283a:	3708      	adds	r7, #8
 800283c:	46bd      	mov	sp, r7
 800283e:	bd80      	pop	{r7, pc}

08002840 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002844:	4802      	ldr	r0, [pc, #8]	; (8002850 <TS_IO_Init+0x10>)
 8002846:	f7ff ff55 	bl	80026f4 <I2Cx_Init>
}
 800284a:	bf00      	nop
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	2000033c 	.word	0x2000033c

08002854 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af02      	add	r7, sp, #8
 800285a:	4603      	mov	r3, r0
 800285c:	71fb      	strb	r3, [r7, #7]
 800285e:	460b      	mov	r3, r1
 8002860:	71bb      	strb	r3, [r7, #6]
 8002862:	4613      	mov	r3, r2
 8002864:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 8002866:	79bb      	ldrb	r3, [r7, #6]
 8002868:	b29a      	uxth	r2, r3
 800286a:	79f9      	ldrb	r1, [r7, #7]
 800286c:	2301      	movs	r3, #1
 800286e:	9301      	str	r3, [sp, #4]
 8002870:	1d7b      	adds	r3, r7, #5
 8002872:	9300      	str	r3, [sp, #0]
 8002874:	2301      	movs	r3, #1
 8002876:	4803      	ldr	r0, [pc, #12]	; (8002884 <TS_IO_Write+0x30>)
 8002878:	f7ff ffa5 	bl	80027c6 <I2Cx_WriteMultiple>
}
 800287c:	bf00      	nop
 800287e:	3708      	adds	r7, #8
 8002880:	46bd      	mov	sp, r7
 8002882:	bd80      	pop	{r7, pc}
 8002884:	2000033c 	.word	0x2000033c

08002888 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b086      	sub	sp, #24
 800288c:	af02      	add	r7, sp, #8
 800288e:	4603      	mov	r3, r0
 8002890:	460a      	mov	r2, r1
 8002892:	71fb      	strb	r3, [r7, #7]
 8002894:	4613      	mov	r3, r2
 8002896:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 8002898:	2300      	movs	r3, #0
 800289a:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 800289c:	79bb      	ldrb	r3, [r7, #6]
 800289e:	b29a      	uxth	r2, r3
 80028a0:	79f9      	ldrb	r1, [r7, #7]
 80028a2:	2301      	movs	r3, #1
 80028a4:	9301      	str	r3, [sp, #4]
 80028a6:	f107 030f 	add.w	r3, r7, #15
 80028aa:	9300      	str	r3, [sp, #0]
 80028ac:	2301      	movs	r3, #1
 80028ae:	4804      	ldr	r0, [pc, #16]	; (80028c0 <TS_IO_Read+0x38>)
 80028b0:	f7ff ff5c 	bl	800276c <I2Cx_ReadMultiple>

  return read_value;
 80028b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028b6:	4618      	mov	r0, r3
 80028b8:	3710      	adds	r7, #16
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	2000033c 	.word	0x2000033c

080028c4 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80028cc:	6878      	ldr	r0, [r7, #4]
 80028ce:	f002 fa2b 	bl	8004d28 <HAL_Delay>
}
 80028d2:	bf00      	nop
 80028d4:	3708      	adds	r7, #8
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80028e0:	4b31      	ldr	r3, [pc, #196]	; (80029a8 <BSP_LCD_Init+0xcc>)
 80028e2:	2228      	movs	r2, #40	; 0x28
 80028e4:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80028e6:	4b30      	ldr	r3, [pc, #192]	; (80029a8 <BSP_LCD_Init+0xcc>)
 80028e8:	2209      	movs	r2, #9
 80028ea:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80028ec:	4b2e      	ldr	r3, [pc, #184]	; (80029a8 <BSP_LCD_Init+0xcc>)
 80028ee:	2235      	movs	r2, #53	; 0x35
 80028f0:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028f2:	4b2d      	ldr	r3, [pc, #180]	; (80029a8 <BSP_LCD_Init+0xcc>)
 80028f4:	220b      	movs	r2, #11
 80028f6:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80028f8:	4b2b      	ldr	r3, [pc, #172]	; (80029a8 <BSP_LCD_Init+0xcc>)
 80028fa:	f240 121b 	movw	r2, #283	; 0x11b
 80028fe:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002900:	4b29      	ldr	r3, [pc, #164]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002902:	f240 2215 	movw	r2, #533	; 0x215
 8002906:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002908:	4b27      	ldr	r3, [pc, #156]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800290a:	f240 121d 	movw	r2, #285	; 0x11d
 800290e:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002910:	4b25      	ldr	r3, [pc, #148]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002912:	f240 2235 	movw	r2, #565	; 0x235
 8002916:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002918:	2100      	movs	r1, #0
 800291a:	4823      	ldr	r0, [pc, #140]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800291c:	f000 ffe8 	bl	80038f0 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002920:	4b21      	ldr	r3, [pc, #132]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002922:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8002926:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002928:	4b1f      	ldr	r3, [pc, #124]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800292a:	f44f 7288 	mov.w	r2, #272	; 0x110
 800292e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002930:	4b1d      	ldr	r3, [pc, #116]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002932:	2200      	movs	r2, #0
 8002934:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002938:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002940:	4b19      	ldr	r3, [pc, #100]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002942:	2200      	movs	r2, #0
 8002944:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002948:	4b17      	ldr	r3, [pc, #92]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800294a:	2200      	movs	r2, #0
 800294c:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 800294e:	4b16      	ldr	r3, [pc, #88]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002950:	2200      	movs	r2, #0
 8002952:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002954:	4b14      	ldr	r3, [pc, #80]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002956:	2200      	movs	r2, #0
 8002958:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800295a:	4b13      	ldr	r3, [pc, #76]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800295c:	2200      	movs	r2, #0
 800295e:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002960:	4b11      	ldr	r3, [pc, #68]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002962:	4a12      	ldr	r2, [pc, #72]	; (80029ac <BSP_LCD_Init+0xd0>)
 8002964:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 8002966:	4810      	ldr	r0, [pc, #64]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002968:	f004 fe5a 	bl	8007620 <HAL_LTDC_GetState>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d103      	bne.n	800297a <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8002972:	2100      	movs	r1, #0
 8002974:	480c      	ldr	r0, [pc, #48]	; (80029a8 <BSP_LCD_Init+0xcc>)
 8002976:	f000 fee1 	bl	800373c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800297a:	480b      	ldr	r0, [pc, #44]	; (80029a8 <BSP_LCD_Init+0xcc>)
 800297c:	f004 fc80 	bl	8007280 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002980:	2201      	movs	r2, #1
 8002982:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <BSP_LCD_Init+0xd4>)
 8002988:	f003 feb0 	bl	80066ec <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800298c:	2201      	movs	r2, #1
 800298e:	2108      	movs	r1, #8
 8002990:	4808      	ldr	r0, [pc, #32]	; (80029b4 <BSP_LCD_Init+0xd8>)
 8002992:	f003 feab 	bl	80066ec <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 8002996:	f001 f98b 	bl	8003cb0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800299a:	4807      	ldr	r0, [pc, #28]	; (80029b8 <BSP_LCD_Init+0xdc>)
 800299c:	f000 f8d8 	bl	8002b50 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80029a0:	2300      	movs	r3, #0
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	20008c30 	.word	0x20008c30
 80029ac:	40016800 	.word	0x40016800
 80029b0:	40022000 	.word	0x40022000
 80029b4:	40022800 	.word	0x40022800
 80029b8:	20000038 	.word	0x20000038

080029bc <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80029bc:	b480      	push	{r7}
 80029be:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80029c0:	4b06      	ldr	r3, [pc, #24]	; (80029dc <BSP_LCD_GetXSize+0x20>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a06      	ldr	r2, [pc, #24]	; (80029e0 <BSP_LCD_GetXSize+0x24>)
 80029c6:	2134      	movs	r1, #52	; 0x34
 80029c8:	fb01 f303 	mul.w	r3, r1, r3
 80029cc:	4413      	add	r3, r2
 80029ce:	3360      	adds	r3, #96	; 0x60
 80029d0:	681b      	ldr	r3, [r3, #0]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	46bd      	mov	sp, r7
 80029d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029da:	4770      	bx	lr
 80029dc:	200003c8 	.word	0x200003c8
 80029e0:	20008c30 	.word	0x20008c30

080029e4 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80029e4:	b480      	push	{r7}
 80029e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80029e8:	4b06      	ldr	r3, [pc, #24]	; (8002a04 <BSP_LCD_GetYSize+0x20>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a06      	ldr	r2, [pc, #24]	; (8002a08 <BSP_LCD_GetYSize+0x24>)
 80029ee:	2134      	movs	r1, #52	; 0x34
 80029f0:	fb01 f303 	mul.w	r3, r1, r3
 80029f4:	4413      	add	r3, r2
 80029f6:	3364      	adds	r3, #100	; 0x64
 80029f8:	681b      	ldr	r3, [r3, #0]
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	200003c8 	.word	0x200003c8
 8002a08:	20008c30 	.word	0x20008c30

08002a0c <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b090      	sub	sp, #64	; 0x40
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	6039      	str	r1, [r7, #0]
 8002a16:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002a1c:	f7ff ffce 	bl	80029bc <BSP_LCD_GetXSize>
 8002a20:	4603      	mov	r3, r0
 8002a22:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002a24:	2300      	movs	r3, #0
 8002a26:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002a28:	f7ff ffdc 	bl	80029e4 <BSP_LCD_GetYSize>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002a30:	2300      	movs	r3, #0
 8002a32:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002a38:	23ff      	movs	r3, #255	; 0xff
 8002a3a:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 8002a46:	2300      	movs	r3, #0
 8002a48:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002a52:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002a58:	2307      	movs	r3, #7
 8002a5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002a5c:	f7ff ffae 	bl	80029bc <BSP_LCD_GetXSize>
 8002a60:	4603      	mov	r3, r0
 8002a62:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 8002a64:	f7ff ffbe 	bl	80029e4 <BSP_LCD_GetYSize>
 8002a68:	4603      	mov	r3, r0
 8002a6a:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002a6c:	88fa      	ldrh	r2, [r7, #6]
 8002a6e:	f107 030c 	add.w	r3, r7, #12
 8002a72:	4619      	mov	r1, r3
 8002a74:	4812      	ldr	r0, [pc, #72]	; (8002ac0 <BSP_LCD_LayerDefaultInit+0xb4>)
 8002a76:	f004 fd95 	bl	80075a4 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002a7a:	88fa      	ldrh	r2, [r7, #6]
 8002a7c:	4911      	ldr	r1, [pc, #68]	; (8002ac4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a7e:	4613      	mov	r3, r2
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	4413      	add	r3, r2
 8002a84:	009b      	lsls	r3, r3, #2
 8002a86:	440b      	add	r3, r1
 8002a88:	3304      	adds	r3, #4
 8002a8a:	f04f 32ff 	mov.w	r2, #4294967295
 8002a8e:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002a94:	4613      	mov	r3, r2
 8002a96:	005b      	lsls	r3, r3, #1
 8002a98:	4413      	add	r3, r2
 8002a9a:	009b      	lsls	r3, r3, #2
 8002a9c:	440b      	add	r3, r1
 8002a9e:	3308      	adds	r3, #8
 8002aa0:	4a09      	ldr	r2, [pc, #36]	; (8002ac8 <BSP_LCD_LayerDefaultInit+0xbc>)
 8002aa2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8002aa4:	88fa      	ldrh	r2, [r7, #6]
 8002aa6:	4907      	ldr	r1, [pc, #28]	; (8002ac4 <BSP_LCD_LayerDefaultInit+0xb8>)
 8002aa8:	4613      	mov	r3, r2
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	4413      	add	r3, r2
 8002aae:	009b      	lsls	r3, r3, #2
 8002ab0:	440b      	add	r3, r1
 8002ab2:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8002ab6:	601a      	str	r2, [r3, #0]
}
 8002ab8:	bf00      	nop
 8002aba:	3740      	adds	r7, #64	; 0x40
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	20008c30 	.word	0x20008c30
 8002ac4:	200003cc 	.word	0x200003cc
 8002ac8:	20000038 	.word	0x20000038

08002acc <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002ad4:	4a04      	ldr	r2, [pc, #16]	; (8002ae8 <BSP_LCD_SelectLayer+0x1c>)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6013      	str	r3, [r2, #0]
} 
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	200003c8 	.word	0x200003c8

08002aec <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002aec:	b480      	push	{r7}
 8002aee:	b083      	sub	sp, #12
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002af4:	4b07      	ldr	r3, [pc, #28]	; (8002b14 <BSP_LCD_SetTextColor+0x28>)
 8002af6:	681a      	ldr	r2, [r3, #0]
 8002af8:	4907      	ldr	r1, [pc, #28]	; (8002b18 <BSP_LCD_SetTextColor+0x2c>)
 8002afa:	4613      	mov	r3, r2
 8002afc:	005b      	lsls	r3, r3, #1
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	440b      	add	r3, r1
 8002b04:	687a      	ldr	r2, [r7, #4]
 8002b06:	601a      	str	r2, [r3, #0]
}
 8002b08:	bf00      	nop
 8002b0a:	370c      	adds	r7, #12
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b12:	4770      	bx	lr
 8002b14:	200003c8 	.word	0x200003c8
 8002b18:	200003cc 	.word	0x200003cc

08002b1c <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002b1c:	b480      	push	{r7}
 8002b1e:	b083      	sub	sp, #12
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <BSP_LCD_SetBackColor+0x2c>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	4908      	ldr	r1, [pc, #32]	; (8002b4c <BSP_LCD_SetBackColor+0x30>)
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	005b      	lsls	r3, r3, #1
 8002b2e:	4413      	add	r3, r2
 8002b30:	009b      	lsls	r3, r3, #2
 8002b32:	440b      	add	r3, r1
 8002b34:	3304      	adds	r3, #4
 8002b36:	687a      	ldr	r2, [r7, #4]
 8002b38:	601a      	str	r2, [r3, #0]
}
 8002b3a:	bf00      	nop
 8002b3c:	370c      	adds	r7, #12
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b44:	4770      	bx	lr
 8002b46:	bf00      	nop
 8002b48:	200003c8 	.word	0x200003c8
 8002b4c:	200003cc 	.word	0x200003cc

08002b50 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002b58:	4b08      	ldr	r3, [pc, #32]	; (8002b7c <BSP_LCD_SetFont+0x2c>)
 8002b5a:	681a      	ldr	r2, [r3, #0]
 8002b5c:	4908      	ldr	r1, [pc, #32]	; (8002b80 <BSP_LCD_SetFont+0x30>)
 8002b5e:	4613      	mov	r3, r2
 8002b60:	005b      	lsls	r3, r3, #1
 8002b62:	4413      	add	r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	440b      	add	r3, r1
 8002b68:	3308      	adds	r3, #8
 8002b6a:	687a      	ldr	r2, [r7, #4]
 8002b6c:	601a      	str	r2, [r3, #0]
}
 8002b6e:	bf00      	nop
 8002b70:	370c      	adds	r7, #12
 8002b72:	46bd      	mov	sp, r7
 8002b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b78:	4770      	bx	lr
 8002b7a:	bf00      	nop
 8002b7c:	200003c8 	.word	0x200003c8
 8002b80:	200003cc 	.word	0x200003cc

08002b84 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002b84:	b480      	push	{r7}
 8002b86:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002b88:	4b07      	ldr	r3, [pc, #28]	; (8002ba8 <BSP_LCD_GetFont+0x24>)
 8002b8a:	681a      	ldr	r2, [r3, #0]
 8002b8c:	4907      	ldr	r1, [pc, #28]	; (8002bac <BSP_LCD_GetFont+0x28>)
 8002b8e:	4613      	mov	r3, r2
 8002b90:	005b      	lsls	r3, r3, #1
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	440b      	add	r3, r1
 8002b98:	3308      	adds	r3, #8
 8002b9a:	681b      	ldr	r3, [r3, #0]
}
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba4:	4770      	bx	lr
 8002ba6:	bf00      	nop
 8002ba8:	200003c8 	.word	0x200003c8
 8002bac:	200003cc 	.word	0x200003cc

08002bb0 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bb2:	b085      	sub	sp, #20
 8002bb4:	af02      	add	r7, sp, #8
 8002bb6:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002bb8:	4b0f      	ldr	r3, [pc, #60]	; (8002bf8 <BSP_LCD_Clear+0x48>)
 8002bba:	681c      	ldr	r4, [r3, #0]
 8002bbc:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <BSP_LCD_Clear+0x48>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a0e      	ldr	r2, [pc, #56]	; (8002bfc <BSP_LCD_Clear+0x4c>)
 8002bc2:	2134      	movs	r1, #52	; 0x34
 8002bc4:	fb01 f303 	mul.w	r3, r1, r3
 8002bc8:	4413      	add	r3, r2
 8002bca:	335c      	adds	r3, #92	; 0x5c
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	461d      	mov	r5, r3
 8002bd0:	f7ff fef4 	bl	80029bc <BSP_LCD_GetXSize>
 8002bd4:	4606      	mov	r6, r0
 8002bd6:	f7ff ff05 	bl	80029e4 <BSP_LCD_GetYSize>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	9301      	str	r3, [sp, #4]
 8002be0:	2300      	movs	r3, #0
 8002be2:	9300      	str	r3, [sp, #0]
 8002be4:	4613      	mov	r3, r2
 8002be6:	4632      	mov	r2, r6
 8002be8:	4629      	mov	r1, r5
 8002bea:	4620      	mov	r0, r4
 8002bec:	f001 f814 	bl	8003c18 <LL_FillBuffer>
}
 8002bf0:	bf00      	nop
 8002bf2:	370c      	adds	r7, #12
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002bf8:	200003c8 	.word	0x200003c8
 8002bfc:	20008c30 	.word	0x20008c30

08002c00 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	4603      	mov	r3, r0
 8002c08:	80fb      	strh	r3, [r7, #6]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	80bb      	strh	r3, [r7, #4]
 8002c0e:	4613      	mov	r3, r2
 8002c10:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c12:	4b1b      	ldr	r3, [pc, #108]	; (8002c80 <BSP_LCD_DisplayChar+0x80>)
 8002c14:	681a      	ldr	r2, [r3, #0]
 8002c16:	491b      	ldr	r1, [pc, #108]	; (8002c84 <BSP_LCD_DisplayChar+0x84>)
 8002c18:	4613      	mov	r3, r2
 8002c1a:	005b      	lsls	r3, r3, #1
 8002c1c:	4413      	add	r3, r2
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	440b      	add	r3, r1
 8002c22:	3308      	adds	r3, #8
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	6819      	ldr	r1, [r3, #0]
 8002c28:	78fb      	ldrb	r3, [r7, #3]
 8002c2a:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c2e:	4b14      	ldr	r3, [pc, #80]	; (8002c80 <BSP_LCD_DisplayChar+0x80>)
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	4c14      	ldr	r4, [pc, #80]	; (8002c84 <BSP_LCD_DisplayChar+0x84>)
 8002c34:	4613      	mov	r3, r2
 8002c36:	005b      	lsls	r3, r3, #1
 8002c38:	4413      	add	r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	4423      	add	r3, r4
 8002c3e:	3308      	adds	r3, #8
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c44:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002c48:	4b0d      	ldr	r3, [pc, #52]	; (8002c80 <BSP_LCD_DisplayChar+0x80>)
 8002c4a:	681a      	ldr	r2, [r3, #0]
 8002c4c:	4c0d      	ldr	r4, [pc, #52]	; (8002c84 <BSP_LCD_DisplayChar+0x84>)
 8002c4e:	4613      	mov	r3, r2
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	4413      	add	r3, r2
 8002c54:	009b      	lsls	r3, r3, #2
 8002c56:	4423      	add	r3, r4
 8002c58:	3308      	adds	r3, #8
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	889b      	ldrh	r3, [r3, #4]
 8002c5e:	3307      	adds	r3, #7
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	da00      	bge.n	8002c66 <BSP_LCD_DisplayChar+0x66>
 8002c64:	3307      	adds	r3, #7
 8002c66:	10db      	asrs	r3, r3, #3
 8002c68:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002c6c:	18ca      	adds	r2, r1, r3
 8002c6e:	88b9      	ldrh	r1, [r7, #4]
 8002c70:	88fb      	ldrh	r3, [r7, #6]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f000 fe58 	bl	8003928 <DrawChar>
}
 8002c78:	bf00      	nop
 8002c7a:	370c      	adds	r7, #12
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd90      	pop	{r4, r7, pc}
 8002c80:	200003c8 	.word	0x200003c8
 8002c84:	200003cc 	.word	0x200003cc

08002c88 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002c88:	b5b0      	push	{r4, r5, r7, lr}
 8002c8a:	b088      	sub	sp, #32
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	60ba      	str	r2, [r7, #8]
 8002c90:	461a      	mov	r2, r3
 8002c92:	4603      	mov	r3, r0
 8002c94:	81fb      	strh	r3, [r7, #14]
 8002c96:	460b      	mov	r3, r1
 8002c98:	81bb      	strh	r3, [r7, #12]
 8002c9a:	4613      	mov	r3, r2
 8002c9c:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	83fb      	strh	r3, [r7, #30]
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	61bb      	str	r3, [r7, #24]
 8002caa:	2300      	movs	r3, #0
 8002cac:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002cb2:	e002      	b.n	8002cba <BSP_LCD_DisplayStringAt+0x32>
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61bb      	str	r3, [r7, #24]
 8002cba:	697b      	ldr	r3, [r7, #20]
 8002cbc:	1c5a      	adds	r2, r3, #1
 8002cbe:	617a      	str	r2, [r7, #20]
 8002cc0:	781b      	ldrb	r3, [r3, #0]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f6      	bne.n	8002cb4 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002cc6:	f7ff fe79 	bl	80029bc <BSP_LCD_GetXSize>
 8002cca:	4b4f      	ldr	r3, [pc, #316]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	494f      	ldr	r1, [pc, #316]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002cd0:	4613      	mov	r3, r2
 8002cd2:	005b      	lsls	r3, r3, #1
 8002cd4:	4413      	add	r3, r2
 8002cd6:	009b      	lsls	r3, r3, #2
 8002cd8:	440b      	add	r3, r1
 8002cda:	3308      	adds	r3, #8
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	889b      	ldrh	r3, [r3, #4]
 8002ce0:	fbb0 f3f3 	udiv	r3, r0, r3
 8002ce4:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002ce6:	79fb      	ldrb	r3, [r7, #7]
 8002ce8:	2b02      	cmp	r3, #2
 8002cea:	d01c      	beq.n	8002d26 <BSP_LCD_DisplayStringAt+0x9e>
 8002cec:	2b03      	cmp	r3, #3
 8002cee:	d017      	beq.n	8002d20 <BSP_LCD_DisplayStringAt+0x98>
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d12e      	bne.n	8002d52 <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002cf4:	693a      	ldr	r2, [r7, #16]
 8002cf6:	69bb      	ldr	r3, [r7, #24]
 8002cf8:	1ad1      	subs	r1, r2, r3
 8002cfa:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	4843      	ldr	r0, [pc, #268]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002d00:	4613      	mov	r3, r2
 8002d02:	005b      	lsls	r3, r3, #1
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4403      	add	r3, r0
 8002d0a:	3308      	adds	r3, #8
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	889b      	ldrh	r3, [r3, #4]
 8002d10:	fb03 f301 	mul.w	r3, r3, r1
 8002d14:	085b      	lsrs	r3, r3, #1
 8002d16:	b29a      	uxth	r2, r3
 8002d18:	89fb      	ldrh	r3, [r7, #14]
 8002d1a:	4413      	add	r3, r2
 8002d1c:	83fb      	strh	r3, [r7, #30]
      break;
 8002d1e:	e01b      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002d20:	89fb      	ldrh	r3, [r7, #14]
 8002d22:	83fb      	strh	r3, [r7, #30]
      break;
 8002d24:	e018      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	69bb      	ldr	r3, [r7, #24]
 8002d2a:	1ad3      	subs	r3, r2, r3
 8002d2c:	b299      	uxth	r1, r3
 8002d2e:	4b36      	ldr	r3, [pc, #216]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	4836      	ldr	r0, [pc, #216]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002d34:	4613      	mov	r3, r2
 8002d36:	005b      	lsls	r3, r3, #1
 8002d38:	4413      	add	r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	4403      	add	r3, r0
 8002d3e:	3308      	adds	r3, #8
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	889b      	ldrh	r3, [r3, #4]
 8002d44:	fb11 f303 	smulbb	r3, r1, r3
 8002d48:	b29a      	uxth	r2, r3
 8002d4a:	89fb      	ldrh	r3, [r7, #14]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	83fb      	strh	r3, [r7, #30]
      break;
 8002d50:	e002      	b.n	8002d58 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002d52:	89fb      	ldrh	r3, [r7, #14]
 8002d54:	83fb      	strh	r3, [r7, #30]
      break;
 8002d56:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002d58:	8bfb      	ldrh	r3, [r7, #30]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d003      	beq.n	8002d66 <BSP_LCD_DisplayStringAt+0xde>
 8002d5e:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	da1d      	bge.n	8002da2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002d66:	2301      	movs	r3, #1
 8002d68:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002d6a:	e01a      	b.n	8002da2 <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	781a      	ldrb	r2, [r3, #0]
 8002d70:	89b9      	ldrh	r1, [r7, #12]
 8002d72:	8bfb      	ldrh	r3, [r7, #30]
 8002d74:	4618      	mov	r0, r3
 8002d76:	f7ff ff43 	bl	8002c00 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002d7a:	4b23      	ldr	r3, [pc, #140]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4923      	ldr	r1, [pc, #140]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002d80:	4613      	mov	r3, r2
 8002d82:	005b      	lsls	r3, r3, #1
 8002d84:	4413      	add	r3, r2
 8002d86:	009b      	lsls	r3, r3, #2
 8002d88:	440b      	add	r3, r1
 8002d8a:	3308      	adds	r3, #8
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	889a      	ldrh	r2, [r3, #4]
 8002d90:	8bfb      	ldrh	r3, [r7, #30]
 8002d92:	4413      	add	r3, r2
 8002d94:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	60bb      	str	r3, [r7, #8]
    i++;
 8002d9c:	8bbb      	ldrh	r3, [r7, #28]
 8002d9e:	3301      	adds	r3, #1
 8002da0:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002da2:	68bb      	ldr	r3, [r7, #8]
 8002da4:	781b      	ldrb	r3, [r3, #0]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf14      	ite	ne
 8002daa:	2301      	movne	r3, #1
 8002dac:	2300      	moveq	r3, #0
 8002dae:	b2dc      	uxtb	r4, r3
 8002db0:	f7ff fe04 	bl	80029bc <BSP_LCD_GetXSize>
 8002db4:	4605      	mov	r5, r0
 8002db6:	8bb9      	ldrh	r1, [r7, #28]
 8002db8:	4b13      	ldr	r3, [pc, #76]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002dba:	681a      	ldr	r2, [r3, #0]
 8002dbc:	4813      	ldr	r0, [pc, #76]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	005b      	lsls	r3, r3, #1
 8002dc2:	4413      	add	r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	4403      	add	r3, r0
 8002dc8:	3308      	adds	r3, #8
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	889b      	ldrh	r3, [r3, #4]
 8002dce:	fb03 f301 	mul.w	r3, r3, r1
 8002dd2:	1aeb      	subs	r3, r5, r3
 8002dd4:	b299      	uxth	r1, r3
 8002dd6:	4b0c      	ldr	r3, [pc, #48]	; (8002e08 <BSP_LCD_DisplayStringAt+0x180>)
 8002dd8:	681a      	ldr	r2, [r3, #0]
 8002dda:	480c      	ldr	r0, [pc, #48]	; (8002e0c <BSP_LCD_DisplayStringAt+0x184>)
 8002ddc:	4613      	mov	r3, r2
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	4413      	add	r3, r2
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	4403      	add	r3, r0
 8002de6:	3308      	adds	r3, #8
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	889b      	ldrh	r3, [r3, #4]
 8002dec:	4299      	cmp	r1, r3
 8002dee:	bf2c      	ite	cs
 8002df0:	2301      	movcs	r3, #1
 8002df2:	2300      	movcc	r3, #0
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4023      	ands	r3, r4
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d1b6      	bne.n	8002d6c <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002dfe:	bf00      	nop
 8002e00:	3720      	adds	r7, #32
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bdb0      	pop	{r4, r5, r7, pc}
 8002e06:	bf00      	nop
 8002e08:	200003c8 	.word	0x200003c8
 8002e0c:	200003cc 	.word	0x200003cc

08002e10 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b082      	sub	sp, #8
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	6039      	str	r1, [r7, #0]
 8002e1a:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002e1c:	f7ff feb2 	bl	8002b84 <BSP_LCD_GetFont>
 8002e20:	4603      	mov	r3, r0
 8002e22:	88db      	ldrh	r3, [r3, #6]
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	fb12 f303 	smulbb	r3, r2, r3
 8002e2a:	b299      	uxth	r1, r3
 8002e2c:	2303      	movs	r3, #3
 8002e2e:	683a      	ldr	r2, [r7, #0]
 8002e30:	2000      	movs	r0, #0
 8002e32:	f7ff ff29 	bl	8002c88 <BSP_LCD_DisplayStringAt>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}
	...

08002e40 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002e40:	b5b0      	push	{r4, r5, r7, lr}
 8002e42:	b086      	sub	sp, #24
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	4603      	mov	r3, r0
 8002e48:	80fb      	strh	r3, [r7, #6]
 8002e4a:	460b      	mov	r3, r1
 8002e4c:	80bb      	strh	r3, [r7, #4]
 8002e4e:	4613      	mov	r3, r2
 8002e50:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002e52:	2300      	movs	r3, #0
 8002e54:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002e56:	4b26      	ldr	r3, [pc, #152]	; (8002ef0 <BSP_LCD_DrawHLine+0xb0>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a26      	ldr	r2, [pc, #152]	; (8002ef4 <BSP_LCD_DrawHLine+0xb4>)
 8002e5c:	2134      	movs	r1, #52	; 0x34
 8002e5e:	fb01 f303 	mul.w	r3, r1, r3
 8002e62:	4413      	add	r3, r2
 8002e64:	3348      	adds	r3, #72	; 0x48
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b02      	cmp	r3, #2
 8002e6a:	d114      	bne.n	8002e96 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e6c:	4b20      	ldr	r3, [pc, #128]	; (8002ef0 <BSP_LCD_DrawHLine+0xb0>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a20      	ldr	r2, [pc, #128]	; (8002ef4 <BSP_LCD_DrawHLine+0xb4>)
 8002e72:	2134      	movs	r1, #52	; 0x34
 8002e74:	fb01 f303 	mul.w	r3, r1, r3
 8002e78:	4413      	add	r3, r2
 8002e7a:	335c      	adds	r3, #92	; 0x5c
 8002e7c:	681c      	ldr	r4, [r3, #0]
 8002e7e:	f7ff fd9d 	bl	80029bc <BSP_LCD_GetXSize>
 8002e82:	4602      	mov	r2, r0
 8002e84:	88bb      	ldrh	r3, [r7, #4]
 8002e86:	fb03 f202 	mul.w	r2, r3, r2
 8002e8a:	88fb      	ldrh	r3, [r7, #6]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4423      	add	r3, r4
 8002e92:	60fb      	str	r3, [r7, #12]
 8002e94:	e013      	b.n	8002ebe <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <BSP_LCD_DrawHLine+0xb0>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a16      	ldr	r2, [pc, #88]	; (8002ef4 <BSP_LCD_DrawHLine+0xb4>)
 8002e9c:	2134      	movs	r1, #52	; 0x34
 8002e9e:	fb01 f303 	mul.w	r3, r1, r3
 8002ea2:	4413      	add	r3, r2
 8002ea4:	335c      	adds	r3, #92	; 0x5c
 8002ea6:	681c      	ldr	r4, [r3, #0]
 8002ea8:	f7ff fd88 	bl	80029bc <BSP_LCD_GetXSize>
 8002eac:	4602      	mov	r2, r0
 8002eae:	88bb      	ldrh	r3, [r7, #4]
 8002eb0:	fb03 f202 	mul.w	r2, r3, r2
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	4413      	add	r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4423      	add	r3, r4
 8002ebc:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002ebe:	4b0c      	ldr	r3, [pc, #48]	; (8002ef0 <BSP_LCD_DrawHLine+0xb0>)
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	68fc      	ldr	r4, [r7, #12]
 8002ec4:	887d      	ldrh	r5, [r7, #2]
 8002ec6:	4b0a      	ldr	r3, [pc, #40]	; (8002ef0 <BSP_LCD_DrawHLine+0xb0>)
 8002ec8:	681a      	ldr	r2, [r3, #0]
 8002eca:	490b      	ldr	r1, [pc, #44]	; (8002ef8 <BSP_LCD_DrawHLine+0xb8>)
 8002ecc:	4613      	mov	r3, r2
 8002ece:	005b      	lsls	r3, r3, #1
 8002ed0:	4413      	add	r3, r2
 8002ed2:	009b      	lsls	r3, r3, #2
 8002ed4:	440b      	add	r3, r1
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	9301      	str	r3, [sp, #4]
 8002eda:	2300      	movs	r3, #0
 8002edc:	9300      	str	r3, [sp, #0]
 8002ede:	2301      	movs	r3, #1
 8002ee0:	462a      	mov	r2, r5
 8002ee2:	4621      	mov	r1, r4
 8002ee4:	f000 fe98 	bl	8003c18 <LL_FillBuffer>
}
 8002ee8:	bf00      	nop
 8002eea:	3710      	adds	r7, #16
 8002eec:	46bd      	mov	sp, r7
 8002eee:	bdb0      	pop	{r4, r5, r7, pc}
 8002ef0:	200003c8 	.word	0x200003c8
 8002ef4:	20008c30 	.word	0x20008c30
 8002ef8:	200003cc 	.word	0x200003cc

08002efc <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002efc:	b590      	push	{r4, r7, lr}
 8002efe:	b08b      	sub	sp, #44	; 0x2c
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	4604      	mov	r4, r0
 8002f04:	4608      	mov	r0, r1
 8002f06:	4611      	mov	r1, r2
 8002f08:	461a      	mov	r2, r3
 8002f0a:	4623      	mov	r3, r4
 8002f0c:	80fb      	strh	r3, [r7, #6]
 8002f0e:	4603      	mov	r3, r0
 8002f10:	80bb      	strh	r3, [r7, #4]
 8002f12:	460b      	mov	r3, r1
 8002f14:	807b      	strh	r3, [r7, #2]
 8002f16:	4613      	mov	r3, r2
 8002f18:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	823b      	strh	r3, [r7, #16]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	81fb      	strh	r3, [r7, #14]
 8002f22:	2300      	movs	r3, #0
 8002f24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002f26:	2300      	movs	r3, #0
 8002f28:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	847b      	strh	r3, [r7, #34]	; 0x22
 8002f2e:	2300      	movs	r3, #0
 8002f30:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002f32:	2300      	movs	r3, #0
 8002f34:	83fb      	strh	r3, [r7, #30]
 8002f36:	2300      	movs	r3, #0
 8002f38:	83bb      	strh	r3, [r7, #28]
 8002f3a:	2300      	movs	r3, #0
 8002f3c:	837b      	strh	r3, [r7, #26]
 8002f3e:	2300      	movs	r3, #0
 8002f40:	833b      	strh	r3, [r7, #24]
 8002f42:	2300      	movs	r3, #0
 8002f44:	82fb      	strh	r3, [r7, #22]
 8002f46:	2300      	movs	r3, #0
 8002f48:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002f4e:	887a      	ldrh	r2, [r7, #2]
 8002f50:	88fb      	ldrh	r3, [r7, #6]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	bfb8      	it	lt
 8002f58:	425b      	neglt	r3, r3
 8002f5a:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002f5c:	883a      	ldrh	r2, [r7, #0]
 8002f5e:	88bb      	ldrh	r3, [r7, #4]
 8002f60:	1ad3      	subs	r3, r2, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	bfb8      	it	lt
 8002f66:	425b      	neglt	r3, r3
 8002f68:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002f6e:	88bb      	ldrh	r3, [r7, #4]
 8002f70:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002f72:	887a      	ldrh	r2, [r7, #2]
 8002f74:	88fb      	ldrh	r3, [r7, #6]
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d304      	bcc.n	8002f84 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002f7a:	2301      	movs	r3, #1
 8002f7c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002f7e:	2301      	movs	r3, #1
 8002f80:	843b      	strh	r3, [r7, #32]
 8002f82:	e005      	b.n	8002f90 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002f84:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f88:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002f8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f8e:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002f90:	883a      	ldrh	r2, [r7, #0]
 8002f92:	88bb      	ldrh	r3, [r7, #4]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	d304      	bcc.n	8002fa2 <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002f98:	2301      	movs	r3, #1
 8002f9a:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	83bb      	strh	r3, [r7, #28]
 8002fa0:	e005      	b.n	8002fae <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002fa2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fa6:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002fac:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002fae:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002fb2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	db11      	blt.n	8002fde <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002fba:	2300      	movs	r3, #0
 8002fbc:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002fc2:	8a3b      	ldrh	r3, [r7, #16]
 8002fc4:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002fc6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	da00      	bge.n	8002fd0 <BSP_LCD_DrawLine+0xd4>
 8002fce:	3301      	adds	r3, #1
 8002fd0:	105b      	asrs	r3, r3, #1
 8002fd2:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002fd4:	89fb      	ldrh	r3, [r7, #14]
 8002fd6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002fd8:	8a3b      	ldrh	r3, [r7, #16]
 8002fda:	82bb      	strh	r3, [r7, #20]
 8002fdc:	e010      	b.n	8003000 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002fde:	2300      	movs	r3, #0
 8002fe0:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002fe6:	89fb      	ldrh	r3, [r7, #14]
 8002fe8:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002fea:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	da00      	bge.n	8002ff4 <BSP_LCD_DrawLine+0xf8>
 8002ff2:	3301      	adds	r3, #1
 8002ff4:	105b      	asrs	r3, r3, #1
 8002ff6:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002ff8:	8a3b      	ldrh	r3, [r7, #16]
 8002ffa:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002ffc:	89fb      	ldrh	r3, [r7, #14]
 8002ffe:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003000:	2300      	movs	r3, #0
 8003002:	827b      	strh	r3, [r7, #18]
 8003004:	e038      	b.n	8003078 <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003006:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003008:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 800300a:	4b20      	ldr	r3, [pc, #128]	; (800308c <BSP_LCD_DrawLine+0x190>)
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	4920      	ldr	r1, [pc, #128]	; (8003090 <BSP_LCD_DrawLine+0x194>)
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	009b      	lsls	r3, r3, #2
 8003018:	440b      	add	r3, r1
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	461a      	mov	r2, r3
 800301e:	4621      	mov	r1, r4
 8003020:	f000 f928 	bl	8003274 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003024:	8b3a      	ldrh	r2, [r7, #24]
 8003026:	8afb      	ldrh	r3, [r7, #22]
 8003028:	4413      	add	r3, r2
 800302a:	b29b      	uxth	r3, r3
 800302c:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 800302e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003032:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003036:	429a      	cmp	r2, r3
 8003038:	db0e      	blt.n	8003058 <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 800303a:	8b3a      	ldrh	r2, [r7, #24]
 800303c:	8b7b      	ldrh	r3, [r7, #26]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	b29b      	uxth	r3, r3
 8003042:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003044:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003046:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003048:	4413      	add	r3, r2
 800304a:	b29b      	uxth	r3, r3
 800304c:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 800304e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003050:	8bfb      	ldrh	r3, [r7, #30]
 8003052:	4413      	add	r3, r2
 8003054:	b29b      	uxth	r3, r3
 8003056:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003058:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800305a:	8c3b      	ldrh	r3, [r7, #32]
 800305c:	4413      	add	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003062:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003064:	8bbb      	ldrh	r3, [r7, #28]
 8003066:	4413      	add	r3, r2
 8003068:	b29b      	uxth	r3, r3
 800306a:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800306c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003070:	b29b      	uxth	r3, r3
 8003072:	3301      	adds	r3, #1
 8003074:	b29b      	uxth	r3, r3
 8003076:	827b      	strh	r3, [r7, #18]
 8003078:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 800307c:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	ddc0      	ble.n	8003006 <BSP_LCD_DrawLine+0x10a>
  }
}
 8003084:	bf00      	nop
 8003086:	372c      	adds	r7, #44	; 0x2c
 8003088:	46bd      	mov	sp, r7
 800308a:	bd90      	pop	{r4, r7, pc}
 800308c:	200003c8 	.word	0x200003c8
 8003090:	200003cc 	.word	0x200003cc

08003094 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003094:	b590      	push	{r4, r7, lr}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	4603      	mov	r3, r0
 800309c:	80fb      	strh	r3, [r7, #6]
 800309e:	460b      	mov	r3, r1
 80030a0:	80bb      	strh	r3, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 80030a6:	887b      	ldrh	r3, [r7, #2]
 80030a8:	005b      	lsls	r3, r3, #1
 80030aa:	f1c3 0303 	rsb	r3, r3, #3
 80030ae:	617b      	str	r3, [r7, #20]
  current_x = 0;
 80030b0:	2300      	movs	r3, #0
 80030b2:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80030b4:	887b      	ldrh	r3, [r7, #2]
 80030b6:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 80030b8:	e0cf      	b.n	800325a <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	b29a      	uxth	r2, r3
 80030be:	88fb      	ldrh	r3, [r7, #6]
 80030c0:	4413      	add	r3, r2
 80030c2:	b298      	uxth	r0, r3
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	88ba      	ldrh	r2, [r7, #4]
 80030ca:	1ad3      	subs	r3, r2, r3
 80030cc:	b29c      	uxth	r4, r3
 80030ce:	4b67      	ldr	r3, [pc, #412]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 80030d0:	681a      	ldr	r2, [r3, #0]
 80030d2:	4967      	ldr	r1, [pc, #412]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 80030d4:	4613      	mov	r3, r2
 80030d6:	005b      	lsls	r3, r3, #1
 80030d8:	4413      	add	r3, r2
 80030da:	009b      	lsls	r3, r3, #2
 80030dc:	440b      	add	r3, r1
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	461a      	mov	r2, r3
 80030e2:	4621      	mov	r1, r4
 80030e4:	f000 f8c6 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	b298      	uxth	r0, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b29b      	uxth	r3, r3
 80030f6:	88ba      	ldrh	r2, [r7, #4]
 80030f8:	1ad3      	subs	r3, r2, r3
 80030fa:	b29c      	uxth	r4, r3
 80030fc:	4b5b      	ldr	r3, [pc, #364]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 80030fe:	681a      	ldr	r2, [r3, #0]
 8003100:	495b      	ldr	r1, [pc, #364]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 8003102:	4613      	mov	r3, r2
 8003104:	005b      	lsls	r3, r3, #1
 8003106:	4413      	add	r3, r2
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	440b      	add	r3, r1
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	4621      	mov	r1, r4
 8003112:	f000 f8af 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	b29a      	uxth	r2, r3
 800311a:	88fb      	ldrh	r3, [r7, #6]
 800311c:	4413      	add	r3, r2
 800311e:	b298      	uxth	r0, r3
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	b29b      	uxth	r3, r3
 8003124:	88ba      	ldrh	r2, [r7, #4]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	b29c      	uxth	r4, r3
 800312a:	4b50      	ldr	r3, [pc, #320]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4950      	ldr	r1, [pc, #320]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 8003130:	4613      	mov	r3, r2
 8003132:	005b      	lsls	r3, r3, #1
 8003134:	4413      	add	r3, r2
 8003136:	009b      	lsls	r3, r3, #2
 8003138:	440b      	add	r3, r1
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	461a      	mov	r2, r3
 800313e:	4621      	mov	r1, r4
 8003140:	f000 f898 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	b29b      	uxth	r3, r3
 8003148:	88fa      	ldrh	r2, [r7, #6]
 800314a:	1ad3      	subs	r3, r2, r3
 800314c:	b298      	uxth	r0, r3
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	b29b      	uxth	r3, r3
 8003152:	88ba      	ldrh	r2, [r7, #4]
 8003154:	1ad3      	subs	r3, r2, r3
 8003156:	b29c      	uxth	r4, r3
 8003158:	4b44      	ldr	r3, [pc, #272]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	4944      	ldr	r1, [pc, #272]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 800315e:	4613      	mov	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	4413      	add	r3, r2
 8003164:	009b      	lsls	r3, r3, #2
 8003166:	440b      	add	r3, r1
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4621      	mov	r1, r4
 800316e:	f000 f881 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	b29a      	uxth	r2, r3
 8003176:	88fb      	ldrh	r3, [r7, #6]
 8003178:	4413      	add	r3, r2
 800317a:	b298      	uxth	r0, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	b29a      	uxth	r2, r3
 8003180:	88bb      	ldrh	r3, [r7, #4]
 8003182:	4413      	add	r3, r2
 8003184:	b29c      	uxth	r4, r3
 8003186:	4b39      	ldr	r3, [pc, #228]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4939      	ldr	r1, [pc, #228]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 800318c:	4613      	mov	r3, r2
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	4413      	add	r3, r2
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	440b      	add	r3, r1
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	461a      	mov	r2, r3
 800319a:	4621      	mov	r1, r4
 800319c:	f000 f86a 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	b29b      	uxth	r3, r3
 80031a4:	88fa      	ldrh	r2, [r7, #6]
 80031a6:	1ad3      	subs	r3, r2, r3
 80031a8:	b298      	uxth	r0, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	88bb      	ldrh	r3, [r7, #4]
 80031b0:	4413      	add	r3, r2
 80031b2:	b29c      	uxth	r4, r3
 80031b4:	4b2d      	ldr	r3, [pc, #180]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	492d      	ldr	r1, [pc, #180]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 80031ba:	4613      	mov	r3, r2
 80031bc:	005b      	lsls	r3, r3, #1
 80031be:	4413      	add	r3, r2
 80031c0:	009b      	lsls	r3, r3, #2
 80031c2:	440b      	add	r3, r1
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	461a      	mov	r2, r3
 80031c8:	4621      	mov	r1, r4
 80031ca:	f000 f853 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	b29a      	uxth	r2, r3
 80031d2:	88fb      	ldrh	r3, [r7, #6]
 80031d4:	4413      	add	r3, r2
 80031d6:	b298      	uxth	r0, r3
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	b29a      	uxth	r2, r3
 80031dc:	88bb      	ldrh	r3, [r7, #4]
 80031de:	4413      	add	r3, r2
 80031e0:	b29c      	uxth	r4, r3
 80031e2:	4b22      	ldr	r3, [pc, #136]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4922      	ldr	r1, [pc, #136]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 80031e8:	4613      	mov	r3, r2
 80031ea:	005b      	lsls	r3, r3, #1
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	461a      	mov	r2, r3
 80031f6:	4621      	mov	r1, r4
 80031f8:	f000 f83c 	bl	8003274 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	b29b      	uxth	r3, r3
 8003200:	88fa      	ldrh	r2, [r7, #6]
 8003202:	1ad3      	subs	r3, r2, r3
 8003204:	b298      	uxth	r0, r3
 8003206:	693b      	ldr	r3, [r7, #16]
 8003208:	b29a      	uxth	r2, r3
 800320a:	88bb      	ldrh	r3, [r7, #4]
 800320c:	4413      	add	r3, r2
 800320e:	b29c      	uxth	r4, r3
 8003210:	4b16      	ldr	r3, [pc, #88]	; (800326c <BSP_LCD_DrawCircle+0x1d8>)
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	4916      	ldr	r1, [pc, #88]	; (8003270 <BSP_LCD_DrawCircle+0x1dc>)
 8003216:	4613      	mov	r3, r2
 8003218:	005b      	lsls	r3, r3, #1
 800321a:	4413      	add	r3, r2
 800321c:	009b      	lsls	r3, r3, #2
 800321e:	440b      	add	r3, r1
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	461a      	mov	r2, r3
 8003224:	4621      	mov	r1, r4
 8003226:	f000 f825 	bl	8003274 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	2b00      	cmp	r3, #0
 800322e:	da06      	bge.n	800323e <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8003230:	693b      	ldr	r3, [r7, #16]
 8003232:	009a      	lsls	r2, r3, #2
 8003234:	697b      	ldr	r3, [r7, #20]
 8003236:	4413      	add	r3, r2
 8003238:	3306      	adds	r3, #6
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	e00a      	b.n	8003254 <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800323e:	693a      	ldr	r2, [r7, #16]
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	009a      	lsls	r2, r3, #2
 8003246:	697b      	ldr	r3, [r7, #20]
 8003248:	4413      	add	r3, r2
 800324a:	330a      	adds	r3, #10
 800324c:	617b      	str	r3, [r7, #20]
      current_y--;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	3b01      	subs	r3, #1
 8003252:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	3301      	adds	r3, #1
 8003258:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800325a:	693a      	ldr	r2, [r7, #16]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	429a      	cmp	r2, r3
 8003260:	f67f af2b 	bls.w	80030ba <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003264:	bf00      	nop
 8003266:	371c      	adds	r7, #28
 8003268:	46bd      	mov	sp, r7
 800326a:	bd90      	pop	{r4, r7, pc}
 800326c:	200003c8 	.word	0x200003c8
 8003270:	200003cc 	.word	0x200003cc

08003274 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003274:	b5b0      	push	{r4, r5, r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	603a      	str	r2, [r7, #0]
 800327e:	80fb      	strh	r3, [r7, #6]
 8003280:	460b      	mov	r3, r1
 8003282:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003284:	4b1d      	ldr	r3, [pc, #116]	; (80032fc <BSP_LCD_DrawPixel+0x88>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a1d      	ldr	r2, [pc, #116]	; (8003300 <BSP_LCD_DrawPixel+0x8c>)
 800328a:	2134      	movs	r1, #52	; 0x34
 800328c:	fb01 f303 	mul.w	r3, r1, r3
 8003290:	4413      	add	r3, r2
 8003292:	3348      	adds	r3, #72	; 0x48
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2b02      	cmp	r3, #2
 8003298:	d116      	bne.n	80032c8 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 800329a:	4b18      	ldr	r3, [pc, #96]	; (80032fc <BSP_LCD_DrawPixel+0x88>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a18      	ldr	r2, [pc, #96]	; (8003300 <BSP_LCD_DrawPixel+0x8c>)
 80032a0:	2134      	movs	r1, #52	; 0x34
 80032a2:	fb01 f303 	mul.w	r3, r1, r3
 80032a6:	4413      	add	r3, r2
 80032a8:	335c      	adds	r3, #92	; 0x5c
 80032aa:	681c      	ldr	r4, [r3, #0]
 80032ac:	88bd      	ldrh	r5, [r7, #4]
 80032ae:	f7ff fb85 	bl	80029bc <BSP_LCD_GetXSize>
 80032b2:	4603      	mov	r3, r0
 80032b4:	fb03 f205 	mul.w	r2, r3, r5
 80032b8:	88fb      	ldrh	r3, [r7, #6]
 80032ba:	4413      	add	r3, r2
 80032bc:	005b      	lsls	r3, r3, #1
 80032be:	4423      	add	r3, r4
 80032c0:	683a      	ldr	r2, [r7, #0]
 80032c2:	b292      	uxth	r2, r2
 80032c4:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80032c6:	e015      	b.n	80032f4 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80032c8:	4b0c      	ldr	r3, [pc, #48]	; (80032fc <BSP_LCD_DrawPixel+0x88>)
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	4a0c      	ldr	r2, [pc, #48]	; (8003300 <BSP_LCD_DrawPixel+0x8c>)
 80032ce:	2134      	movs	r1, #52	; 0x34
 80032d0:	fb01 f303 	mul.w	r3, r1, r3
 80032d4:	4413      	add	r3, r2
 80032d6:	335c      	adds	r3, #92	; 0x5c
 80032d8:	681c      	ldr	r4, [r3, #0]
 80032da:	88bd      	ldrh	r5, [r7, #4]
 80032dc:	f7ff fb6e 	bl	80029bc <BSP_LCD_GetXSize>
 80032e0:	4603      	mov	r3, r0
 80032e2:	fb03 f205 	mul.w	r2, r3, r5
 80032e6:	88fb      	ldrh	r3, [r7, #6]
 80032e8:	4413      	add	r3, r2
 80032ea:	009b      	lsls	r3, r3, #2
 80032ec:	4423      	add	r3, r4
 80032ee:	461a      	mov	r2, r3
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	6013      	str	r3, [r2, #0]
}
 80032f4:	bf00      	nop
 80032f6:	3708      	adds	r7, #8
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bdb0      	pop	{r4, r5, r7, pc}
 80032fc:	200003c8 	.word	0x200003c8
 8003300:	20008c30 	.word	0x20008c30

08003304 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003308:	b086      	sub	sp, #24
 800330a:	af02      	add	r7, sp, #8
 800330c:	4604      	mov	r4, r0
 800330e:	4608      	mov	r0, r1
 8003310:	4611      	mov	r1, r2
 8003312:	461a      	mov	r2, r3
 8003314:	4623      	mov	r3, r4
 8003316:	80fb      	strh	r3, [r7, #6]
 8003318:	4603      	mov	r3, r0
 800331a:	80bb      	strh	r3, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003324:	2300      	movs	r3, #0
 8003326:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003328:	4b30      	ldr	r3, [pc, #192]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 800332a:	681a      	ldr	r2, [r3, #0]
 800332c:	4930      	ldr	r1, [pc, #192]	; (80033f0 <BSP_LCD_FillRect+0xec>)
 800332e:	4613      	mov	r3, r2
 8003330:	005b      	lsls	r3, r3, #1
 8003332:	4413      	add	r3, r2
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	440b      	add	r3, r1
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4618      	mov	r0, r3
 800333c:	f7ff fbd6 	bl	8002aec <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003340:	4b2a      	ldr	r3, [pc, #168]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a2b      	ldr	r2, [pc, #172]	; (80033f4 <BSP_LCD_FillRect+0xf0>)
 8003346:	2134      	movs	r1, #52	; 0x34
 8003348:	fb01 f303 	mul.w	r3, r1, r3
 800334c:	4413      	add	r3, r2
 800334e:	3348      	adds	r3, #72	; 0x48
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	2b02      	cmp	r3, #2
 8003354:	d114      	bne.n	8003380 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003356:	4b25      	ldr	r3, [pc, #148]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4a26      	ldr	r2, [pc, #152]	; (80033f4 <BSP_LCD_FillRect+0xf0>)
 800335c:	2134      	movs	r1, #52	; 0x34
 800335e:	fb01 f303 	mul.w	r3, r1, r3
 8003362:	4413      	add	r3, r2
 8003364:	335c      	adds	r3, #92	; 0x5c
 8003366:	681c      	ldr	r4, [r3, #0]
 8003368:	f7ff fb28 	bl	80029bc <BSP_LCD_GetXSize>
 800336c:	4602      	mov	r2, r0
 800336e:	88bb      	ldrh	r3, [r7, #4]
 8003370:	fb03 f202 	mul.w	r2, r3, r2
 8003374:	88fb      	ldrh	r3, [r7, #6]
 8003376:	4413      	add	r3, r2
 8003378:	005b      	lsls	r3, r3, #1
 800337a:	4423      	add	r3, r4
 800337c:	60fb      	str	r3, [r7, #12]
 800337e:	e013      	b.n	80033a8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003380:	4b1a      	ldr	r3, [pc, #104]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <BSP_LCD_FillRect+0xf0>)
 8003386:	2134      	movs	r1, #52	; 0x34
 8003388:	fb01 f303 	mul.w	r3, r1, r3
 800338c:	4413      	add	r3, r2
 800338e:	335c      	adds	r3, #92	; 0x5c
 8003390:	681c      	ldr	r4, [r3, #0]
 8003392:	f7ff fb13 	bl	80029bc <BSP_LCD_GetXSize>
 8003396:	4602      	mov	r2, r0
 8003398:	88bb      	ldrh	r3, [r7, #4]
 800339a:	fb03 f202 	mul.w	r2, r3, r2
 800339e:	88fb      	ldrh	r3, [r7, #6]
 80033a0:	4413      	add	r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	4423      	add	r3, r4
 80033a6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80033a8:	4b10      	ldr	r3, [pc, #64]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 80033aa:	681c      	ldr	r4, [r3, #0]
 80033ac:	68fd      	ldr	r5, [r7, #12]
 80033ae:	887e      	ldrh	r6, [r7, #2]
 80033b0:	f8b7 8000 	ldrh.w	r8, [r7]
 80033b4:	f7ff fb02 	bl	80029bc <BSP_LCD_GetXSize>
 80033b8:	4602      	mov	r2, r0
 80033ba:	887b      	ldrh	r3, [r7, #2]
 80033bc:	1ad1      	subs	r1, r2, r3
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <BSP_LCD_FillRect+0xe8>)
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	480b      	ldr	r0, [pc, #44]	; (80033f0 <BSP_LCD_FillRect+0xec>)
 80033c4:	4613      	mov	r3, r2
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	4413      	add	r3, r2
 80033ca:	009b      	lsls	r3, r3, #2
 80033cc:	4403      	add	r3, r0
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	9301      	str	r3, [sp, #4]
 80033d2:	9100      	str	r1, [sp, #0]
 80033d4:	4643      	mov	r3, r8
 80033d6:	4632      	mov	r2, r6
 80033d8:	4629      	mov	r1, r5
 80033da:	4620      	mov	r0, r4
 80033dc:	f000 fc1c 	bl	8003c18 <LL_FillBuffer>
}
 80033e0:	bf00      	nop
 80033e2:	3710      	adds	r7, #16
 80033e4:	46bd      	mov	sp, r7
 80033e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80033ea:	bf00      	nop
 80033ec:	200003c8 	.word	0x200003c8
 80033f0:	200003cc 	.word	0x200003cc
 80033f4:	20008c30 	.word	0x20008c30

080033f8 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b086      	sub	sp, #24
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	4603      	mov	r3, r0
 8003400:	80fb      	strh	r3, [r7, #6]
 8003402:	460b      	mov	r3, r1
 8003404:	80bb      	strh	r3, [r7, #4]
 8003406:	4613      	mov	r3, r2
 8003408:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	005b      	lsls	r3, r3, #1
 800340e:	f1c3 0303 	rsb	r3, r3, #3
 8003412:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003414:	2300      	movs	r3, #0
 8003416:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003418:	887b      	ldrh	r3, [r7, #2]
 800341a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800341c:	4b44      	ldr	r3, [pc, #272]	; (8003530 <BSP_LCD_FillCircle+0x138>)
 800341e:	681a      	ldr	r2, [r3, #0]
 8003420:	4944      	ldr	r1, [pc, #272]	; (8003534 <BSP_LCD_FillCircle+0x13c>)
 8003422:	4613      	mov	r3, r2
 8003424:	005b      	lsls	r3, r3, #1
 8003426:	4413      	add	r3, r2
 8003428:	009b      	lsls	r3, r3, #2
 800342a:	440b      	add	r3, r1
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fb5c 	bl	8002aec <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003434:	e061      	b.n	80034fa <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	2b00      	cmp	r3, #0
 800343a:	d021      	beq.n	8003480 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	b29b      	uxth	r3, r3
 8003440:	88fa      	ldrh	r2, [r7, #6]
 8003442:	1ad3      	subs	r3, r2, r3
 8003444:	b298      	uxth	r0, r3
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	b29a      	uxth	r2, r3
 800344a:	88bb      	ldrh	r3, [r7, #4]
 800344c:	4413      	add	r3, r2
 800344e:	b299      	uxth	r1, r3
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	b29b      	uxth	r3, r3
 8003454:	005b      	lsls	r3, r3, #1
 8003456:	b29b      	uxth	r3, r3
 8003458:	461a      	mov	r2, r3
 800345a:	f7ff fcf1 	bl	8002e40 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	b29b      	uxth	r3, r3
 8003462:	88fa      	ldrh	r2, [r7, #6]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	b298      	uxth	r0, r3
 8003468:	693b      	ldr	r3, [r7, #16]
 800346a:	b29b      	uxth	r3, r3
 800346c:	88ba      	ldrh	r2, [r7, #4]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	b299      	uxth	r1, r3
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	b29b      	uxth	r3, r3
 8003476:	005b      	lsls	r3, r3, #1
 8003478:	b29b      	uxth	r3, r3
 800347a:	461a      	mov	r2, r3
 800347c:	f7ff fce0 	bl	8002e40 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d021      	beq.n	80034ca <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8003486:	693b      	ldr	r3, [r7, #16]
 8003488:	b29b      	uxth	r3, r3
 800348a:	88fa      	ldrh	r2, [r7, #6]
 800348c:	1ad3      	subs	r3, r2, r3
 800348e:	b298      	uxth	r0, r3
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	b29b      	uxth	r3, r3
 8003494:	88ba      	ldrh	r2, [r7, #4]
 8003496:	1ad3      	subs	r3, r2, r3
 8003498:	b299      	uxth	r1, r3
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	b29b      	uxth	r3, r3
 800349e:	005b      	lsls	r3, r3, #1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	461a      	mov	r2, r3
 80034a4:	f7ff fccc 	bl	8002e40 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	88fa      	ldrh	r2, [r7, #6]
 80034ae:	1ad3      	subs	r3, r2, r3
 80034b0:	b298      	uxth	r0, r3
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	b29a      	uxth	r2, r3
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	4413      	add	r3, r2
 80034ba:	b299      	uxth	r1, r3
 80034bc:	693b      	ldr	r3, [r7, #16]
 80034be:	b29b      	uxth	r3, r3
 80034c0:	005b      	lsls	r3, r3, #1
 80034c2:	b29b      	uxth	r3, r3
 80034c4:	461a      	mov	r2, r3
 80034c6:	f7ff fcbb 	bl	8002e40 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80034ca:	697b      	ldr	r3, [r7, #20]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	da06      	bge.n	80034de <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	009a      	lsls	r2, r3, #2
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	4413      	add	r3, r2
 80034d8:	3306      	adds	r3, #6
 80034da:	617b      	str	r3, [r7, #20]
 80034dc:	e00a      	b.n	80034f4 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80034de:	693a      	ldr	r2, [r7, #16]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	1ad3      	subs	r3, r2, r3
 80034e4:	009a      	lsls	r2, r3, #2
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	4413      	add	r3, r2
 80034ea:	330a      	adds	r3, #10
 80034ec:	617b      	str	r3, [r7, #20]
      current_y--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	3b01      	subs	r3, #1
 80034f2:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	3301      	adds	r3, #1
 80034f8:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 80034fa:	693a      	ldr	r2, [r7, #16]
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	429a      	cmp	r2, r3
 8003500:	d999      	bls.n	8003436 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003502:	4b0b      	ldr	r3, [pc, #44]	; (8003530 <BSP_LCD_FillCircle+0x138>)
 8003504:	681a      	ldr	r2, [r3, #0]
 8003506:	490b      	ldr	r1, [pc, #44]	; (8003534 <BSP_LCD_FillCircle+0x13c>)
 8003508:	4613      	mov	r3, r2
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	4413      	add	r3, r2
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4618      	mov	r0, r3
 8003516:	f7ff fae9 	bl	8002aec <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800351a:	887a      	ldrh	r2, [r7, #2]
 800351c:	88b9      	ldrh	r1, [r7, #4]
 800351e:	88fb      	ldrh	r3, [r7, #6]
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fdb7 	bl	8003094 <BSP_LCD_DrawCircle>
}
 8003526:	bf00      	nop
 8003528:	3718      	adds	r7, #24
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	200003c8 	.word	0x200003c8
 8003534:	200003cc 	.word	0x200003cc

08003538 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003538:	b5b0      	push	{r4, r5, r7, lr}
 800353a:	b08c      	sub	sp, #48	; 0x30
 800353c:	af02      	add	r7, sp, #8
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	460b      	mov	r3, r1
 8003542:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003544:	2300      	movs	r3, #0
 8003546:	833b      	strh	r3, [r7, #24]
 8003548:	2300      	movs	r3, #0
 800354a:	82fb      	strh	r3, [r7, #22]
 800354c:	2300      	movs	r3, #0
 800354e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003550:	2300      	movs	r3, #0
 8003552:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003554:	2300      	movs	r3, #0
 8003556:	82bb      	strh	r3, [r7, #20]
 8003558:	2300      	movs	r3, #0
 800355a:	827b      	strh	r3, [r7, #18]
 800355c:	2300      	movs	r3, #0
 800355e:	823b      	strh	r3, [r7, #16]
 8003560:	2300      	movs	r3, #0
 8003562:	81fb      	strh	r3, [r7, #14]
 8003564:	2300      	movs	r3, #0
 8003566:	81bb      	strh	r3, [r7, #12]
 8003568:	2300      	movs	r3, #0
 800356a:	817b      	strh	r3, [r7, #10]
 800356c:	2300      	movs	r3, #0
 800356e:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003570:	2300      	movs	r3, #0
 8003572:	843b      	strh	r3, [r7, #32]
 8003574:	2300      	movs	r3, #0
 8003576:	83fb      	strh	r3, [r7, #30]
 8003578:	2300      	movs	r3, #0
 800357a:	83bb      	strh	r3, [r7, #28]
 800357c:	2300      	movs	r3, #0
 800357e:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003586:	83fb      	strh	r3, [r7, #30]
 8003588:	8bfb      	ldrh	r3, [r7, #30]
 800358a:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8003592:	837b      	strh	r3, [r7, #26]
 8003594:	8b7b      	ldrh	r3, [r7, #26]
 8003596:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8003598:	2301      	movs	r3, #1
 800359a:	847b      	strh	r3, [r7, #34]	; 0x22
 800359c:	e02f      	b.n	80035fe <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 800359e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	687a      	ldr	r2, [r7, #4]
 80035a6:	4413      	add	r3, r2
 80035a8:	881b      	ldrh	r3, [r3, #0]
 80035aa:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80035ac:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035b0:	8c3b      	ldrh	r3, [r7, #32]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	da01      	bge.n	80035ba <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80035b6:	89bb      	ldrh	r3, [r7, #12]
 80035b8:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80035ba:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80035be:	8bfb      	ldrh	r3, [r7, #30]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	dd01      	ble.n	80035c8 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80035c4:	89bb      	ldrh	r3, [r7, #12]
 80035c6:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80035c8:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	4413      	add	r3, r2
 80035d2:	885b      	ldrh	r3, [r3, #2]
 80035d4:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80035d6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035da:	8bbb      	ldrh	r3, [r7, #28]
 80035dc:	429a      	cmp	r2, r3
 80035de:	da01      	bge.n	80035e4 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80035e0:	897b      	ldrh	r3, [r7, #10]
 80035e2:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80035e4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80035e8:	8b7b      	ldrh	r3, [r7, #26]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	dd01      	ble.n	80035f2 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80035ee:	897b      	ldrh	r3, [r7, #10]
 80035f0:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80035f2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80035f6:	b29b      	uxth	r3, r3
 80035f8:	3301      	adds	r3, #1
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	847b      	strh	r3, [r7, #34]	; 0x22
 80035fe:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003602:	887b      	ldrh	r3, [r7, #2]
 8003604:	429a      	cmp	r2, r3
 8003606:	dbca      	blt.n	800359e <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003608:	887b      	ldrh	r3, [r7, #2]
 800360a:	2b01      	cmp	r3, #1
 800360c:	d974      	bls.n	80036f8 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800360e:	8c3a      	ldrh	r2, [r7, #32]
 8003610:	8bfb      	ldrh	r3, [r7, #30]
 8003612:	4413      	add	r3, r2
 8003614:	2b00      	cmp	r3, #0
 8003616:	da00      	bge.n	800361a <BSP_LCD_FillPolygon+0xe2>
 8003618:	3301      	adds	r3, #1
 800361a:	105b      	asrs	r3, r3, #1
 800361c:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 800361e:	8b7a      	ldrh	r2, [r7, #26]
 8003620:	8bbb      	ldrh	r3, [r7, #28]
 8003622:	4413      	add	r3, r2
 8003624:	2b00      	cmp	r3, #0
 8003626:	da00      	bge.n	800362a <BSP_LCD_FillPolygon+0xf2>
 8003628:	3301      	adds	r3, #1
 800362a:	105b      	asrs	r3, r3, #1
 800362c:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	881b      	ldrh	r3, [r3, #0]
 8003632:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	885b      	ldrh	r3, [r3, #2]
 8003638:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800363a:	e032      	b.n	80036a2 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	881b      	ldrh	r3, [r3, #0]
 8003640:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	885b      	ldrh	r3, [r3, #2]
 8003646:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	3304      	adds	r3, #4
 800364c:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	881b      	ldrh	r3, [r3, #0]
 8003652:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	885b      	ldrh	r3, [r3, #2]
 8003658:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800365a:	8b38      	ldrh	r0, [r7, #24]
 800365c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800365e:	8abc      	ldrh	r4, [r7, #20]
 8003660:	8afd      	ldrh	r5, [r7, #22]
 8003662:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003664:	8a7a      	ldrh	r2, [r7, #18]
 8003666:	9201      	str	r2, [sp, #4]
 8003668:	9300      	str	r3, [sp, #0]
 800366a:	462b      	mov	r3, r5
 800366c:	4622      	mov	r2, r4
 800366e:	f000 fa13 	bl	8003a98 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8003672:	8b38      	ldrh	r0, [r7, #24]
 8003674:	8ab9      	ldrh	r1, [r7, #20]
 8003676:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003678:	8afd      	ldrh	r5, [r7, #22]
 800367a:	8a7b      	ldrh	r3, [r7, #18]
 800367c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800367e:	9201      	str	r2, [sp, #4]
 8003680:	9300      	str	r3, [sp, #0]
 8003682:	462b      	mov	r3, r5
 8003684:	4622      	mov	r2, r4
 8003686:	f000 fa07 	bl	8003a98 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800368a:	8ab8      	ldrh	r0, [r7, #20]
 800368c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800368e:	8b3c      	ldrh	r4, [r7, #24]
 8003690:	8a7d      	ldrh	r5, [r7, #18]
 8003692:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003694:	8afa      	ldrh	r2, [r7, #22]
 8003696:	9201      	str	r2, [sp, #4]
 8003698:	9300      	str	r3, [sp, #0]
 800369a:	462b      	mov	r3, r5
 800369c:	4622      	mov	r2, r4
 800369e:	f000 f9fb 	bl	8003a98 <FillTriangle>
  while(--PointCount)
 80036a2:	887b      	ldrh	r3, [r7, #2]
 80036a4:	3b01      	subs	r3, #1
 80036a6:	807b      	strh	r3, [r7, #2]
 80036a8:	887b      	ldrh	r3, [r7, #2]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1c6      	bne.n	800363c <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80036ae:	8a38      	ldrh	r0, [r7, #16]
 80036b0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80036b2:	8abc      	ldrh	r4, [r7, #20]
 80036b4:	89fd      	ldrh	r5, [r7, #14]
 80036b6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036b8:	8a7a      	ldrh	r2, [r7, #18]
 80036ba:	9201      	str	r2, [sp, #4]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	462b      	mov	r3, r5
 80036c0:	4622      	mov	r2, r4
 80036c2:	f000 f9e9 	bl	8003a98 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80036c6:	8a38      	ldrh	r0, [r7, #16]
 80036c8:	8ab9      	ldrh	r1, [r7, #20]
 80036ca:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80036cc:	89fd      	ldrh	r5, [r7, #14]
 80036ce:	8a7b      	ldrh	r3, [r7, #18]
 80036d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036d2:	9201      	str	r2, [sp, #4]
 80036d4:	9300      	str	r3, [sp, #0]
 80036d6:	462b      	mov	r3, r5
 80036d8:	4622      	mov	r2, r4
 80036da:	f000 f9dd 	bl	8003a98 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80036de:	8ab8      	ldrh	r0, [r7, #20]
 80036e0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80036e2:	8a3c      	ldrh	r4, [r7, #16]
 80036e4:	8a7d      	ldrh	r5, [r7, #18]
 80036e6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80036e8:	89fa      	ldrh	r2, [r7, #14]
 80036ea:	9201      	str	r2, [sp, #4]
 80036ec:	9300      	str	r3, [sp, #0]
 80036ee:	462b      	mov	r3, r5
 80036f0:	4622      	mov	r2, r4
 80036f2:	f000 f9d1 	bl	8003a98 <FillTriangle>
 80036f6:	e000      	b.n	80036fa <BSP_LCD_FillPolygon+0x1c2>
    return;
 80036f8:	bf00      	nop
}
 80036fa:	3728      	adds	r7, #40	; 0x28
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}

08003700 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003704:	4b0a      	ldr	r3, [pc, #40]	; (8003730 <BSP_LCD_DisplayOn+0x30>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	4b09      	ldr	r3, [pc, #36]	; (8003730 <BSP_LCD_DisplayOn+0x30>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0201 	orr.w	r2, r2, #1
 8003712:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003714:	2201      	movs	r2, #1
 8003716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800371a:	4806      	ldr	r0, [pc, #24]	; (8003734 <BSP_LCD_DisplayOn+0x34>)
 800371c:	f002 ffe6 	bl	80066ec <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003720:	2201      	movs	r2, #1
 8003722:	2108      	movs	r1, #8
 8003724:	4804      	ldr	r0, [pc, #16]	; (8003738 <BSP_LCD_DisplayOn+0x38>)
 8003726:	f002 ffe1 	bl	80066ec <HAL_GPIO_WritePin>
}
 800372a:	bf00      	nop
 800372c:	bd80      	pop	{r7, pc}
 800372e:	bf00      	nop
 8003730:	20008c30 	.word	0x20008c30
 8003734:	40022000 	.word	0x40022000
 8003738:	40022800 	.word	0x40022800

0800373c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800373c:	b580      	push	{r7, lr}
 800373e:	b090      	sub	sp, #64	; 0x40
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003746:	4b64      	ldr	r3, [pc, #400]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374a:	4a63      	ldr	r2, [pc, #396]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 800374c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003750:	6453      	str	r3, [r2, #68]	; 0x44
 8003752:	4b61      	ldr	r3, [pc, #388]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003754:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003756:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800375a:	62bb      	str	r3, [r7, #40]	; 0x28
 800375c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800375e:	4b5e      	ldr	r3, [pc, #376]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003762:	4a5d      	ldr	r2, [pc, #372]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003764:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003768:	6313      	str	r3, [r2, #48]	; 0x30
 800376a:	4b5b      	ldr	r3, [pc, #364]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 800376c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003772:	627b      	str	r3, [r7, #36]	; 0x24
 8003774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003776:	4b58      	ldr	r3, [pc, #352]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800377a:	4a57      	ldr	r2, [pc, #348]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 800377c:	f043 0310 	orr.w	r3, r3, #16
 8003780:	6313      	str	r3, [r2, #48]	; 0x30
 8003782:	4b55      	ldr	r3, [pc, #340]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f003 0310 	and.w	r3, r3, #16
 800378a:	623b      	str	r3, [r7, #32]
 800378c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800378e:	4b52      	ldr	r3, [pc, #328]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a51      	ldr	r2, [pc, #324]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003794:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b4f      	ldr	r3, [pc, #316]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037a2:	61fb      	str	r3, [r7, #28]
 80037a4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80037a6:	4b4c      	ldr	r3, [pc, #304]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037aa:	4a4b      	ldr	r2, [pc, #300]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037b0:	6313      	str	r3, [r2, #48]	; 0x30
 80037b2:	4b49      	ldr	r3, [pc, #292]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037ba:	61bb      	str	r3, [r7, #24]
 80037bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80037be:	4b46      	ldr	r3, [pc, #280]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c2:	4a45      	ldr	r2, [pc, #276]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80037c8:	6313      	str	r3, [r2, #48]	; 0x30
 80037ca:	4b43      	ldr	r3, [pc, #268]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80037d2:	617b      	str	r3, [r7, #20]
 80037d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80037d6:	4b40      	ldr	r3, [pc, #256]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037da:	4a3f      	ldr	r2, [pc, #252]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80037e0:	6313      	str	r3, [r2, #48]	; 0x30
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80037ea:	613b      	str	r3, [r7, #16]
 80037ec:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80037ee:	4b3a      	ldr	r3, [pc, #232]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f2:	4a39      	ldr	r2, [pc, #228]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037f8:	6313      	str	r3, [r2, #48]	; 0x30
 80037fa:	4b37      	ldr	r3, [pc, #220]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 80037fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003802:	60fb      	str	r3, [r7, #12]
 8003804:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003806:	4b34      	ldr	r3, [pc, #208]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800380a:	4a33      	ldr	r2, [pc, #204]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 800380c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003810:	6313      	str	r3, [r2, #48]	; 0x30
 8003812:	4b31      	ldr	r3, [pc, #196]	; (80038d8 <BSP_LCD_MspInit+0x19c>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800381e:	2310      	movs	r3, #16
 8003820:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003822:	2302      	movs	r3, #2
 8003824:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003826:	2300      	movs	r3, #0
 8003828:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800382a:	2302      	movs	r3, #2
 800382c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800382e:	230e      	movs	r3, #14
 8003830:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003832:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003836:	4619      	mov	r1, r3
 8003838:	4828      	ldr	r0, [pc, #160]	; (80038dc <BSP_LCD_MspInit+0x1a0>)
 800383a:	f002 fc8b 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800383e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003842:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003844:	2302      	movs	r3, #2
 8003846:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003848:	2309      	movs	r3, #9
 800384a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800384c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003850:	4619      	mov	r1, r3
 8003852:	4823      	ldr	r0, [pc, #140]	; (80038e0 <BSP_LCD_MspInit+0x1a4>)
 8003854:	f002 fc7e 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003858:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800385c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800385e:	2302      	movs	r3, #2
 8003860:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003862:	230e      	movs	r3, #14
 8003864:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8003866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800386a:	4619      	mov	r1, r3
 800386c:	481d      	ldr	r0, [pc, #116]	; (80038e4 <BSP_LCD_MspInit+0x1a8>)
 800386e:	f002 fc71 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8003872:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8003876:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003878:	2302      	movs	r3, #2
 800387a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800387c:	230e      	movs	r3, #14
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003880:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003884:	4619      	mov	r1, r3
 8003886:	4818      	ldr	r0, [pc, #96]	; (80038e8 <BSP_LCD_MspInit+0x1ac>)
 8003888:	f002 fc64 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800388c:	23f7      	movs	r3, #247	; 0xf7
 800388e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003890:	2302      	movs	r3, #2
 8003892:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003894:	230e      	movs	r3, #14
 8003896:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8003898:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800389c:	4619      	mov	r1, r3
 800389e:	4813      	ldr	r0, [pc, #76]	; (80038ec <BSP_LCD_MspInit+0x1b0>)
 80038a0:	f002 fc58 	bl	8006154 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80038a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80038a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038aa:	2301      	movs	r3, #1
 80038ac:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80038ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038b2:	4619      	mov	r1, r3
 80038b4:	480b      	ldr	r0, [pc, #44]	; (80038e4 <BSP_LCD_MspInit+0x1a8>)
 80038b6:	f002 fc4d 	bl	8006154 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80038ba:	2308      	movs	r3, #8
 80038bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80038be:	2301      	movs	r3, #1
 80038c0:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80038c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80038c6:	4619      	mov	r1, r3
 80038c8:	4808      	ldr	r0, [pc, #32]	; (80038ec <BSP_LCD_MspInit+0x1b0>)
 80038ca:	f002 fc43 	bl	8006154 <HAL_GPIO_Init>
}
 80038ce:	bf00      	nop
 80038d0:	3740      	adds	r7, #64	; 0x40
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40023800 	.word	0x40023800
 80038dc:	40021000 	.word	0x40021000
 80038e0:	40021800 	.word	0x40021800
 80038e4:	40022000 	.word	0x40022000
 80038e8:	40022400 	.word	0x40022400
 80038ec:	40022800 	.word	0x40022800

080038f0 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 80038fa:	4b0a      	ldr	r3, [pc, #40]	; (8003924 <BSP_LCD_ClockConfig+0x34>)
 80038fc:	2208      	movs	r2, #8
 80038fe:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003900:	4b08      	ldr	r3, [pc, #32]	; (8003924 <BSP_LCD_ClockConfig+0x34>)
 8003902:	22c0      	movs	r2, #192	; 0xc0
 8003904:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003906:	4b07      	ldr	r3, [pc, #28]	; (8003924 <BSP_LCD_ClockConfig+0x34>)
 8003908:	2205      	movs	r2, #5
 800390a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800390c:	4b05      	ldr	r3, [pc, #20]	; (8003924 <BSP_LCD_ClockConfig+0x34>)
 800390e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003912:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003914:	4803      	ldr	r0, [pc, #12]	; (8003924 <BSP_LCD_ClockConfig+0x34>)
 8003916:	f004 fd33 	bl	8008380 <HAL_RCCEx_PeriphCLKConfig>
}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	200003e4 	.word	0x200003e4

08003928 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
 800392e:	4603      	mov	r3, r0
 8003930:	603a      	str	r2, [r7, #0]
 8003932:	80fb      	strh	r3, [r7, #6]
 8003934:	460b      	mov	r3, r1
 8003936:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003938:	2300      	movs	r3, #0
 800393a:	61fb      	str	r3, [r7, #28]
 800393c:	2300      	movs	r3, #0
 800393e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003940:	4b53      	ldr	r3, [pc, #332]	; (8003a90 <DrawChar+0x168>)
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	4953      	ldr	r1, [pc, #332]	; (8003a94 <DrawChar+0x16c>)
 8003946:	4613      	mov	r3, r2
 8003948:	005b      	lsls	r3, r3, #1
 800394a:	4413      	add	r3, r2
 800394c:	009b      	lsls	r3, r3, #2
 800394e:	440b      	add	r3, r1
 8003950:	3308      	adds	r3, #8
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	88db      	ldrh	r3, [r3, #6]
 8003956:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003958:	4b4d      	ldr	r3, [pc, #308]	; (8003a90 <DrawChar+0x168>)
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	494d      	ldr	r1, [pc, #308]	; (8003a94 <DrawChar+0x16c>)
 800395e:	4613      	mov	r3, r2
 8003960:	005b      	lsls	r3, r3, #1
 8003962:	4413      	add	r3, r2
 8003964:	009b      	lsls	r3, r3, #2
 8003966:	440b      	add	r3, r1
 8003968:	3308      	adds	r3, #8
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	889b      	ldrh	r3, [r3, #4]
 800396e:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003970:	8a3b      	ldrh	r3, [r7, #16]
 8003972:	3307      	adds	r3, #7
 8003974:	2b00      	cmp	r3, #0
 8003976:	da00      	bge.n	800397a <DrawChar+0x52>
 8003978:	3307      	adds	r3, #7
 800397a:	10db      	asrs	r3, r3, #3
 800397c:	b2db      	uxtb	r3, r3
 800397e:	00db      	lsls	r3, r3, #3
 8003980:	b2da      	uxtb	r2, r3
 8003982:	8a3b      	ldrh	r3, [r7, #16]
 8003984:	b2db      	uxtb	r3, r3
 8003986:	1ad3      	subs	r3, r2, r3
 8003988:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800398a:	2300      	movs	r3, #0
 800398c:	61fb      	str	r3, [r7, #28]
 800398e:	e076      	b.n	8003a7e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003990:	8a3b      	ldrh	r3, [r7, #16]
 8003992:	3307      	adds	r3, #7
 8003994:	2b00      	cmp	r3, #0
 8003996:	da00      	bge.n	800399a <DrawChar+0x72>
 8003998:	3307      	adds	r3, #7
 800399a:	10db      	asrs	r3, r3, #3
 800399c:	461a      	mov	r2, r3
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	fb03 f302 	mul.w	r3, r3, r2
 80039a4:	683a      	ldr	r2, [r7, #0]
 80039a6:	4413      	add	r3, r2
 80039a8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80039aa:	8a3b      	ldrh	r3, [r7, #16]
 80039ac:	3307      	adds	r3, #7
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	da00      	bge.n	80039b4 <DrawChar+0x8c>
 80039b2:	3307      	adds	r3, #7
 80039b4:	10db      	asrs	r3, r3, #3
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d002      	beq.n	80039c0 <DrawChar+0x98>
 80039ba:	2b02      	cmp	r3, #2
 80039bc:	d004      	beq.n	80039c8 <DrawChar+0xa0>
 80039be:	e00c      	b.n	80039da <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80039c0:	68bb      	ldr	r3, [r7, #8]
 80039c2:	781b      	ldrb	r3, [r3, #0]
 80039c4:	617b      	str	r3, [r7, #20]
      break;
 80039c6:	e016      	b.n	80039f6 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	021b      	lsls	r3, r3, #8
 80039ce:	68ba      	ldr	r2, [r7, #8]
 80039d0:	3201      	adds	r2, #1
 80039d2:	7812      	ldrb	r2, [r2, #0]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	617b      	str	r3, [r7, #20]
      break;
 80039d8:	e00d      	b.n	80039f6 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	041a      	lsls	r2, r3, #16
 80039e0:	68bb      	ldr	r3, [r7, #8]
 80039e2:	3301      	adds	r3, #1
 80039e4:	781b      	ldrb	r3, [r3, #0]
 80039e6:	021b      	lsls	r3, r3, #8
 80039e8:	4313      	orrs	r3, r2
 80039ea:	68ba      	ldr	r2, [r7, #8]
 80039ec:	3202      	adds	r2, #2
 80039ee:	7812      	ldrb	r2, [r2, #0]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]
      break;
 80039f4:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e036      	b.n	8003a6a <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 80039fc:	8a3a      	ldrh	r2, [r7, #16]
 80039fe:	69bb      	ldr	r3, [r7, #24]
 8003a00:	1ad2      	subs	r2, r2, r3
 8003a02:	7bfb      	ldrb	r3, [r7, #15]
 8003a04:	4413      	add	r3, r2
 8003a06:	3b01      	subs	r3, #1
 8003a08:	2201      	movs	r2, #1
 8003a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0e:	461a      	mov	r2, r3
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	4013      	ands	r3, r2
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d012      	beq.n	8003a3e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	b29a      	uxth	r2, r3
 8003a1c:	88fb      	ldrh	r3, [r7, #6]
 8003a1e:	4413      	add	r3, r2
 8003a20:	b298      	uxth	r0, r3
 8003a22:	4b1b      	ldr	r3, [pc, #108]	; (8003a90 <DrawChar+0x168>)
 8003a24:	681a      	ldr	r2, [r3, #0]
 8003a26:	491b      	ldr	r1, [pc, #108]	; (8003a94 <DrawChar+0x16c>)
 8003a28:	4613      	mov	r3, r2
 8003a2a:	005b      	lsls	r3, r3, #1
 8003a2c:	4413      	add	r3, r2
 8003a2e:	009b      	lsls	r3, r3, #2
 8003a30:	440b      	add	r3, r1
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	88bb      	ldrh	r3, [r7, #4]
 8003a36:	4619      	mov	r1, r3
 8003a38:	f7ff fc1c 	bl	8003274 <BSP_LCD_DrawPixel>
 8003a3c:	e012      	b.n	8003a64 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	b29a      	uxth	r2, r3
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	4413      	add	r3, r2
 8003a46:	b298      	uxth	r0, r3
 8003a48:	4b11      	ldr	r3, [pc, #68]	; (8003a90 <DrawChar+0x168>)
 8003a4a:	681a      	ldr	r2, [r3, #0]
 8003a4c:	4911      	ldr	r1, [pc, #68]	; (8003a94 <DrawChar+0x16c>)
 8003a4e:	4613      	mov	r3, r2
 8003a50:	005b      	lsls	r3, r3, #1
 8003a52:	4413      	add	r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3304      	adds	r3, #4
 8003a5a:	681a      	ldr	r2, [r3, #0]
 8003a5c:	88bb      	ldrh	r3, [r7, #4]
 8003a5e:	4619      	mov	r1, r3
 8003a60:	f7ff fc08 	bl	8003274 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 8003a64:	69bb      	ldr	r3, [r7, #24]
 8003a66:	3301      	adds	r3, #1
 8003a68:	61bb      	str	r3, [r7, #24]
 8003a6a:	8a3b      	ldrh	r3, [r7, #16]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	d3c4      	bcc.n	80039fc <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8003a72:	88bb      	ldrh	r3, [r7, #4]
 8003a74:	3301      	adds	r3, #1
 8003a76:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003a78:	69fb      	ldr	r3, [r7, #28]
 8003a7a:	3301      	adds	r3, #1
 8003a7c:	61fb      	str	r3, [r7, #28]
 8003a7e:	8a7b      	ldrh	r3, [r7, #18]
 8003a80:	69fa      	ldr	r2, [r7, #28]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d384      	bcc.n	8003990 <DrawChar+0x68>
  }
}
 8003a86:	bf00      	nop
 8003a88:	3720      	adds	r7, #32
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	bd80      	pop	{r7, pc}
 8003a8e:	bf00      	nop
 8003a90:	200003c8 	.word	0x200003c8
 8003a94:	200003cc 	.word	0x200003cc

08003a98 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8003a98:	b590      	push	{r4, r7, lr}
 8003a9a:	b08b      	sub	sp, #44	; 0x2c
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	4604      	mov	r4, r0
 8003aa0:	4608      	mov	r0, r1
 8003aa2:	4611      	mov	r1, r2
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	4623      	mov	r3, r4
 8003aa8:	80fb      	strh	r3, [r7, #6]
 8003aaa:	4603      	mov	r3, r0
 8003aac:	80bb      	strh	r3, [r7, #4]
 8003aae:	460b      	mov	r3, r1
 8003ab0:	807b      	strh	r3, [r7, #2]
 8003ab2:	4613      	mov	r3, r2
 8003ab4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	823b      	strh	r3, [r7, #16]
 8003aba:	2300      	movs	r3, #0
 8003abc:	81fb      	strh	r3, [r7, #14]
 8003abe:	2300      	movs	r3, #0
 8003ac0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	847b      	strh	r3, [r7, #34]	; 0x22
 8003aca:	2300      	movs	r3, #0
 8003acc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 8003ace:	2300      	movs	r3, #0
 8003ad0:	83fb      	strh	r3, [r7, #30]
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	83bb      	strh	r3, [r7, #28]
 8003ad6:	2300      	movs	r3, #0
 8003ad8:	837b      	strh	r3, [r7, #26]
 8003ada:	2300      	movs	r3, #0
 8003adc:	833b      	strh	r3, [r7, #24]
 8003ade:	2300      	movs	r3, #0
 8003ae0:	82fb      	strh	r3, [r7, #22]
 8003ae2:	2300      	movs	r3, #0
 8003ae4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003aea:	88ba      	ldrh	r2, [r7, #4]
 8003aec:	88fb      	ldrh	r3, [r7, #6]
 8003aee:	1ad3      	subs	r3, r2, r3
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	bfb8      	it	lt
 8003af4:	425b      	neglt	r3, r3
 8003af6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003af8:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003afa:	883b      	ldrh	r3, [r7, #0]
 8003afc:	1ad3      	subs	r3, r2, r3
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	bfb8      	it	lt
 8003b02:	425b      	neglt	r3, r3
 8003b04:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003b06:	88fb      	ldrh	r3, [r7, #6]
 8003b08:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003b0a:	883b      	ldrh	r3, [r7, #0]
 8003b0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003b0e:	88ba      	ldrh	r2, [r7, #4]
 8003b10:	88fb      	ldrh	r3, [r7, #6]
 8003b12:	429a      	cmp	r2, r3
 8003b14:	d304      	bcc.n	8003b20 <FillTriangle+0x88>
  {
    xinc1 = 1;
 8003b16:	2301      	movs	r3, #1
 8003b18:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003b1a:	2301      	movs	r3, #1
 8003b1c:	843b      	strh	r3, [r7, #32]
 8003b1e:	e005      	b.n	8003b2c <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003b20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b24:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003b26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b2a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003b2c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003b2e:	883b      	ldrh	r3, [r7, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d304      	bcc.n	8003b3e <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003b34:	2301      	movs	r3, #1
 8003b36:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	83bb      	strh	r3, [r7, #28]
 8003b3c:	e005      	b.n	8003b4a <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b42:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b48:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003b4a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003b4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b52:	429a      	cmp	r2, r3
 8003b54:	db11      	blt.n	8003b7a <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003b56:	2300      	movs	r3, #0
 8003b58:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003b5e:	8a3b      	ldrh	r3, [r7, #16]
 8003b60:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003b62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	da00      	bge.n	8003b6c <FillTriangle+0xd4>
 8003b6a:	3301      	adds	r3, #1
 8003b6c:	105b      	asrs	r3, r3, #1
 8003b6e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003b70:	89fb      	ldrh	r3, [r7, #14]
 8003b72:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003b74:	8a3b      	ldrh	r3, [r7, #16]
 8003b76:	82bb      	strh	r3, [r7, #20]
 8003b78:	e010      	b.n	8003b9c <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003b7e:	2300      	movs	r3, #0
 8003b80:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003b82:	89fb      	ldrh	r3, [r7, #14]
 8003b84:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003b86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	da00      	bge.n	8003b90 <FillTriangle+0xf8>
 8003b8e:	3301      	adds	r3, #1
 8003b90:	105b      	asrs	r3, r3, #1
 8003b92:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003b94:	8a3b      	ldrh	r3, [r7, #16]
 8003b96:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003b98:	89fb      	ldrh	r3, [r7, #14]
 8003b9a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	827b      	strh	r3, [r7, #18]
 8003ba0:	e02f      	b.n	8003c02 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 8003ba2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003ba4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003ba6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ba8:	887a      	ldrh	r2, [r7, #2]
 8003baa:	f7ff f9a7 	bl	8002efc <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8003bae:	8b3a      	ldrh	r2, [r7, #24]
 8003bb0:	8afb      	ldrh	r3, [r7, #22]
 8003bb2:	4413      	add	r3, r2
 8003bb4:	b29b      	uxth	r3, r3
 8003bb6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8003bb8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003bbc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003bc0:	429a      	cmp	r2, r3
 8003bc2:	db0e      	blt.n	8003be2 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8003bc4:	8b3a      	ldrh	r2, [r7, #24]
 8003bc6:	8b7b      	ldrh	r3, [r7, #26]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8003bce:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003bd0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003bd2:	4413      	add	r3, r2
 8003bd4:	b29b      	uxth	r3, r3
 8003bd6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8003bd8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bda:	8bfb      	ldrh	r3, [r7, #30]
 8003bdc:	4413      	add	r3, r2
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8003be2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003be4:	8c3b      	ldrh	r3, [r7, #32]
 8003be6:	4413      	add	r3, r2
 8003be8:	b29b      	uxth	r3, r3
 8003bea:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8003bec:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003bee:	8bbb      	ldrh	r3, [r7, #28]
 8003bf0:	4413      	add	r3, r2
 8003bf2:	b29b      	uxth	r3, r3
 8003bf4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003bf6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3301      	adds	r3, #1
 8003bfe:	b29b      	uxth	r3, r3
 8003c00:	827b      	strh	r3, [r7, #18]
 8003c02:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003c06:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003c0a:	429a      	cmp	r2, r3
 8003c0c:	ddc9      	ble.n	8003ba2 <FillTriangle+0x10a>
  } 
}
 8003c0e:	bf00      	nop
 8003c10:	372c      	adds	r7, #44	; 0x2c
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd90      	pop	{r4, r7, pc}
	...

08003c18 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003c18:	b580      	push	{r7, lr}
 8003c1a:	b086      	sub	sp, #24
 8003c1c:	af02      	add	r7, sp, #8
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
 8003c24:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003c26:	4b1e      	ldr	r3, [pc, #120]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c28:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003c2c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003c2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ca4 <LL_FillBuffer+0x8c>)
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a1d      	ldr	r2, [pc, #116]	; (8003ca8 <LL_FillBuffer+0x90>)
 8003c34:	2134      	movs	r1, #52	; 0x34
 8003c36:	fb01 f303 	mul.w	r3, r1, r3
 8003c3a:	4413      	add	r3, r2
 8003c3c:	3348      	adds	r3, #72	; 0x48
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2b02      	cmp	r3, #2
 8003c42:	d103      	bne.n	8003c4c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003c44:	4b16      	ldr	r3, [pc, #88]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c46:	2202      	movs	r2, #2
 8003c48:	609a      	str	r2, [r3, #8]
 8003c4a:	e002      	b.n	8003c52 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003c4c:	4b14      	ldr	r3, [pc, #80]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c4e:	2200      	movs	r2, #0
 8003c50:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003c52:	4a13      	ldr	r2, [pc, #76]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c54:	69bb      	ldr	r3, [r7, #24]
 8003c56:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003c58:	4b11      	ldr	r3, [pc, #68]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c5a:	4a14      	ldr	r2, [pc, #80]	; (8003cac <LL_FillBuffer+0x94>)
 8003c5c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003c5e:	4810      	ldr	r0, [pc, #64]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c60:	f001 ffec 	bl	8005c3c <HAL_DMA2D_Init>
 8003c64:	4603      	mov	r3, r0
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d115      	bne.n	8003c96 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003c6a:	68f9      	ldr	r1, [r7, #12]
 8003c6c:	480c      	ldr	r0, [pc, #48]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c6e:	f002 f943 	bl	8005ef8 <HAL_DMA2D_ConfigLayer>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d10e      	bne.n	8003c96 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003c78:	68ba      	ldr	r2, [r7, #8]
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	9300      	str	r3, [sp, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69f9      	ldr	r1, [r7, #28]
 8003c82:	4807      	ldr	r0, [pc, #28]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c84:	f002 f824 	bl	8005cd0 <HAL_DMA2D_Start>
 8003c88:	4603      	mov	r3, r0
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d103      	bne.n	8003c96 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003c8e:	210a      	movs	r1, #10
 8003c90:	4803      	ldr	r0, [pc, #12]	; (8003ca0 <LL_FillBuffer+0x88>)
 8003c92:	f002 f848 	bl	8005d26 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003c96:	bf00      	nop
 8003c98:	3710      	adds	r7, #16
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	bd80      	pop	{r7, pc}
 8003c9e:	bf00      	nop
 8003ca0:	20000388 	.word	0x20000388
 8003ca4:	200003c8 	.word	0x200003c8
 8003ca8:	20008c30 	.word	0x20008c30
 8003cac:	4002b000 	.word	0x4002b000

08003cb0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003cb4:	4b29      	ldr	r3, [pc, #164]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	; (8003d60 <BSP_SDRAM_Init+0xb0>)
 8003cb8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003cba:	4b2a      	ldr	r3, [pc, #168]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cbc:	2202      	movs	r2, #2
 8003cbe:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003cc0:	4b28      	ldr	r3, [pc, #160]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cc2:	2207      	movs	r2, #7
 8003cc4:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003cc6:	4b27      	ldr	r3, [pc, #156]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cc8:	2204      	movs	r2, #4
 8003cca:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003ccc:	4b25      	ldr	r3, [pc, #148]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cce:	2207      	movs	r2, #7
 8003cd0:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003cd8:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003cda:	2202      	movs	r2, #2
 8003cdc:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003cde:	4b21      	ldr	r3, [pc, #132]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003ce0:	2202      	movs	r2, #2
 8003ce2:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003ce4:	4b1d      	ldr	r3, [pc, #116]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003cea:	4b1c      	ldr	r3, [pc, #112]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003cf0:	4b1a      	ldr	r3, [pc, #104]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003cf2:	2204      	movs	r2, #4
 8003cf4:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003cf6:	4b19      	ldr	r3, [pc, #100]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003cf8:	2210      	movs	r2, #16
 8003cfa:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003cfc:	4b17      	ldr	r3, [pc, #92]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003cfe:	2240      	movs	r2, #64	; 0x40
 8003d00:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003d02:	4b16      	ldr	r3, [pc, #88]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d04:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003d08:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003d0a:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003d10:	4b12      	ldr	r3, [pc, #72]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d12:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003d16:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003d18:	4b10      	ldr	r3, [pc, #64]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d1a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d1e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003d20:	4b0e      	ldr	r3, [pc, #56]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003d26:	2100      	movs	r1, #0
 8003d28:	480c      	ldr	r0, [pc, #48]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d2a:	f000 f87f 	bl	8003e2c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003d2e:	490d      	ldr	r1, [pc, #52]	; (8003d64 <BSP_SDRAM_Init+0xb4>)
 8003d30:	480a      	ldr	r0, [pc, #40]	; (8003d5c <BSP_SDRAM_Init+0xac>)
 8003d32:	f005 fba1 	bl	8009478 <HAL_SDRAM_Init>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d003      	beq.n	8003d44 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003d3c:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <BSP_SDRAM_Init+0xb8>)
 8003d3e:	2201      	movs	r2, #1
 8003d40:	701a      	strb	r2, [r3, #0]
 8003d42:	e002      	b.n	8003d4a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003d44:	4b08      	ldr	r3, [pc, #32]	; (8003d68 <BSP_SDRAM_Init+0xb8>)
 8003d46:	2200      	movs	r2, #0
 8003d48:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003d4a:	f240 6003 	movw	r0, #1539	; 0x603
 8003d4e:	f000 f80d 	bl	8003d6c <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003d52:	4b05      	ldr	r3, [pc, #20]	; (8003d68 <BSP_SDRAM_Init+0xb8>)
 8003d54:	781b      	ldrb	r3, [r3, #0]
}
 8003d56:	4618      	mov	r0, r3
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	20008cd8 	.word	0x20008cd8
 8003d60:	a0000140 	.word	0xa0000140
 8003d64:	20000468 	.word	0x20000468
 8003d68:	20000048 	.word	0x20000048

08003d6c <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003d74:	2300      	movs	r3, #0
 8003d76:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003d78:	4b2a      	ldr	r3, [pc, #168]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d7a:	2201      	movs	r2, #1
 8003d7c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d7e:	4b29      	ldr	r3, [pc, #164]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d80:	2210      	movs	r2, #16
 8003d82:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d84:	4b27      	ldr	r3, [pc, #156]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d8a:	4b26      	ldr	r3, [pc, #152]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d90:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d94:	4923      	ldr	r1, [pc, #140]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d96:	4824      	ldr	r0, [pc, #144]	; (8003e28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d98:	f005 fba2 	bl	80094e0 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003d9c:	2001      	movs	r0, #1
 8003d9e:	f000 ffc3 	bl	8004d28 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003da2:	4b20      	ldr	r3, [pc, #128]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003da4:	2202      	movs	r2, #2
 8003da6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003da8:	4b1e      	ldr	r3, [pc, #120]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003daa:	2210      	movs	r2, #16
 8003dac:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003dae:	4b1d      	ldr	r3, [pc, #116]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db0:	2201      	movs	r2, #1
 8003db2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003db4:	4b1b      	ldr	r3, [pc, #108]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003db6:	2200      	movs	r2, #0
 8003db8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003dba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003dbe:	4919      	ldr	r1, [pc, #100]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dc0:	4819      	ldr	r0, [pc, #100]	; (8003e28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003dc2:	f005 fb8d 	bl	80094e0 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003dc6:	4b17      	ldr	r3, [pc, #92]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dc8:	2203      	movs	r2, #3
 8003dca:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003dcc:	4b15      	ldr	r3, [pc, #84]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dce:	2210      	movs	r2, #16
 8003dd0:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003dd2:	4b14      	ldr	r3, [pc, #80]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dd4:	2208      	movs	r2, #8
 8003dd6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003dd8:	4b12      	ldr	r3, [pc, #72]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dda:	2200      	movs	r2, #0
 8003ddc:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003dde:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003de2:	4910      	ldr	r1, [pc, #64]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003de4:	4810      	ldr	r0, [pc, #64]	; (8003e28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003de6:	f005 fb7b 	bl	80094e0 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003dea:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003dee:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003df0:	4b0c      	ldr	r3, [pc, #48]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003df2:	2204      	movs	r2, #4
 8003df4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003df6:	4b0b      	ldr	r3, [pc, #44]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003df8:	2210      	movs	r2, #16
 8003dfa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003dfc:	4b09      	ldr	r3, [pc, #36]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	4a07      	ldr	r2, [pc, #28]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e06:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003e08:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003e0c:	4905      	ldr	r1, [pc, #20]	; (8003e24 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003e0e:	4806      	ldr	r0, [pc, #24]	; (8003e28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e10:	f005 fb66 	bl	80094e0 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003e14:	6879      	ldr	r1, [r7, #4]
 8003e16:	4804      	ldr	r0, [pc, #16]	; (8003e28 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003e18:	f005 fb8d 	bl	8009536 <HAL_SDRAM_ProgramRefreshRate>
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}
 8003e24:	20000484 	.word	0x20000484
 8003e28:	20008cd8 	.word	0x20008cd8

08003e2c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003e2c:	b580      	push	{r7, lr}
 8003e2e:	b090      	sub	sp, #64	; 0x40
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
 8003e34:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003e36:	4b70      	ldr	r3, [pc, #448]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e3a:	4a6f      	ldr	r2, [pc, #444]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6393      	str	r3, [r2, #56]	; 0x38
 8003e42:	4b6d      	ldr	r3, [pc, #436]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	f003 0301 	and.w	r3, r3, #1
 8003e4a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003e4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003e4e:	4b6a      	ldr	r3, [pc, #424]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	4a69      	ldr	r2, [pc, #420]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e54:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e58:	6313      	str	r3, [r2, #48]	; 0x30
 8003e5a:	4b67      	ldr	r3, [pc, #412]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e62:	627b      	str	r3, [r7, #36]	; 0x24
 8003e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003e66:	4b64      	ldr	r3, [pc, #400]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e6a:	4a63      	ldr	r2, [pc, #396]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e6c:	f043 0304 	orr.w	r3, r3, #4
 8003e70:	6313      	str	r3, [r2, #48]	; 0x30
 8003e72:	4b61      	ldr	r3, [pc, #388]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e76:	f003 0304 	and.w	r3, r3, #4
 8003e7a:	623b      	str	r3, [r7, #32]
 8003e7c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003e7e:	4b5e      	ldr	r3, [pc, #376]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e82:	4a5d      	ldr	r2, [pc, #372]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e84:	f043 0308 	orr.w	r3, r3, #8
 8003e88:	6313      	str	r3, [r2, #48]	; 0x30
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e8e:	f003 0308 	and.w	r3, r3, #8
 8003e92:	61fb      	str	r3, [r7, #28]
 8003e94:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003e96:	4b58      	ldr	r3, [pc, #352]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e9a:	4a57      	ldr	r2, [pc, #348]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003e9c:	f043 0310 	orr.w	r3, r3, #16
 8003ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ea2:	4b55      	ldr	r3, [pc, #340]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea6:	f003 0310 	and.w	r3, r3, #16
 8003eaa:	61bb      	str	r3, [r7, #24]
 8003eac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003eae:	4b52      	ldr	r3, [pc, #328]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003eb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eb2:	4a51      	ldr	r2, [pc, #324]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003eb4:	f043 0320 	orr.w	r3, r3, #32
 8003eb8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eba:	4b4f      	ldr	r3, [pc, #316]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ebe:	f003 0320 	and.w	r3, r3, #32
 8003ec2:	617b      	str	r3, [r7, #20]
 8003ec4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003ec6:	4b4c      	ldr	r3, [pc, #304]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eca:	4a4b      	ldr	r2, [pc, #300]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ecc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ed2:	4b49      	ldr	r3, [pc, #292]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003eda:	613b      	str	r3, [r7, #16]
 8003edc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ede:	4b46      	ldr	r3, [pc, #280]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ee2:	4a45      	ldr	r2, [pc, #276]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003ee4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8003eea:	4b43      	ldr	r3, [pc, #268]	; (8003ff8 <BSP_SDRAM_MspInit+0x1cc>)
 8003eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ef2:	60fb      	str	r3, [r7, #12]
 8003ef4:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003ef6:	2302      	movs	r3, #2
 8003ef8:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003efa:	2301      	movs	r3, #1
 8003efc:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003efe:	2302      	movs	r3, #2
 8003f00:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003f02:	230c      	movs	r3, #12
 8003f04:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003f06:	2308      	movs	r3, #8
 8003f08:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003f0a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f0e:	4619      	mov	r1, r3
 8003f10:	483a      	ldr	r0, [pc, #232]	; (8003ffc <BSP_SDRAM_MspInit+0x1d0>)
 8003f12:	f002 f91f 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003f16:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003f1a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003f1c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f20:	4619      	mov	r1, r3
 8003f22:	4837      	ldr	r0, [pc, #220]	; (8004000 <BSP_SDRAM_MspInit+0x1d4>)
 8003f24:	f002 f916 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003f28:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003f2c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003f2e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f32:	4619      	mov	r1, r3
 8003f34:	4833      	ldr	r0, [pc, #204]	; (8004004 <BSP_SDRAM_MspInit+0x1d8>)
 8003f36:	f002 f90d 	bl	8006154 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003f3a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003f3e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003f40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f44:	4619      	mov	r1, r3
 8003f46:	4830      	ldr	r0, [pc, #192]	; (8004008 <BSP_SDRAM_MspInit+0x1dc>)
 8003f48:	f002 f904 	bl	8006154 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003f4c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003f50:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003f52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f56:	4619      	mov	r1, r3
 8003f58:	482c      	ldr	r0, [pc, #176]	; (800400c <BSP_SDRAM_MspInit+0x1e0>)
 8003f5a:	f002 f8fb 	bl	8006154 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003f5e:	2328      	movs	r3, #40	; 0x28
 8003f60:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003f62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003f66:	4619      	mov	r1, r3
 8003f68:	4829      	ldr	r0, [pc, #164]	; (8004010 <BSP_SDRAM_MspInit+0x1e4>)
 8003f6a:	f002 f8f3 	bl	8006154 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003f6e:	4b29      	ldr	r3, [pc, #164]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003f74:	4b27      	ldr	r3, [pc, #156]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f76:	2280      	movs	r2, #128	; 0x80
 8003f78:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003f7a:	4b26      	ldr	r3, [pc, #152]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f7c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003f80:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003f82:	4b24      	ldr	r3, [pc, #144]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003f88:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003f8a:	4b22      	ldr	r3, [pc, #136]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f8c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f90:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003f92:	4b20      	ldr	r3, [pc, #128]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f94:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003f98:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003f9a:	4b1e      	ldr	r3, [pc, #120]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003f9c:	2200      	movs	r2, #0
 8003f9e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003fa0:	4b1c      	ldr	r3, [pc, #112]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fa2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003fa6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003fa8:	4b1a      	ldr	r3, [pc, #104]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003faa:	2200      	movs	r2, #0
 8003fac:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003fae:	4b19      	ldr	r3, [pc, #100]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fb0:	2203      	movs	r2, #3
 8003fb2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003fb4:	4b17      	ldr	r3, [pc, #92]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003fba:	4b16      	ldr	r3, [pc, #88]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003fc0:	4b14      	ldr	r3, [pc, #80]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fc2:	4a15      	ldr	r2, [pc, #84]	; (8004018 <BSP_SDRAM_MspInit+0x1ec>)
 8003fc4:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	4a12      	ldr	r2, [pc, #72]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fca:	631a      	str	r2, [r3, #48]	; 0x30
 8003fcc:	4a11      	ldr	r2, [pc, #68]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003fd2:	4810      	ldr	r0, [pc, #64]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fd4:	f001 fd02 	bl	80059dc <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003fd8:	480e      	ldr	r0, [pc, #56]	; (8004014 <BSP_SDRAM_MspInit+0x1e8>)
 8003fda:	f001 fc51 	bl	8005880 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003fde:	2200      	movs	r2, #0
 8003fe0:	210f      	movs	r1, #15
 8003fe2:	2038      	movs	r0, #56	; 0x38
 8003fe4:	f001 fb54 	bl	8005690 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003fe8:	2038      	movs	r0, #56	; 0x38
 8003fea:	f001 fb6d 	bl	80056c8 <HAL_NVIC_EnableIRQ>
}
 8003fee:	bf00      	nop
 8003ff0:	3740      	adds	r7, #64	; 0x40
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	bf00      	nop
 8003ff8:	40023800 	.word	0x40023800
 8003ffc:	40020800 	.word	0x40020800
 8004000:	40020c00 	.word	0x40020c00
 8004004:	40021000 	.word	0x40021000
 8004008:	40021400 	.word	0x40021400
 800400c:	40021800 	.word	0x40021800
 8004010:	40021c00 	.word	0x40021c00
 8004014:	20000494 	.word	0x20000494
 8004018:	40026410 	.word	0x40026410

0800401c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	460a      	mov	r2, r1
 8004026:	80fb      	strh	r3, [r7, #6]
 8004028:	4613      	mov	r3, r2
 800402a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 800402c:	2300      	movs	r3, #0
 800402e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004030:	4a14      	ldr	r2, [pc, #80]	; (8004084 <BSP_TS_Init+0x68>)
 8004032:	88fb      	ldrh	r3, [r7, #6]
 8004034:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004036:	4a14      	ldr	r2, [pc, #80]	; (8004088 <BSP_TS_Init+0x6c>)
 8004038:	88bb      	ldrh	r3, [r7, #4]
 800403a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 800403c:	4b13      	ldr	r3, [pc, #76]	; (800408c <BSP_TS_Init+0x70>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2070      	movs	r0, #112	; 0x70
 8004042:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004044:	4b11      	ldr	r3, [pc, #68]	; (800408c <BSP_TS_Init+0x70>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	2070      	movs	r0, #112	; 0x70
 800404a:	4798      	blx	r3
 800404c:	4603      	mov	r3, r0
 800404e:	2b51      	cmp	r3, #81	; 0x51
 8004050:	d111      	bne.n	8004076 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004052:	4b0f      	ldr	r3, [pc, #60]	; (8004090 <BSP_TS_Init+0x74>)
 8004054:	4a0d      	ldr	r2, [pc, #52]	; (800408c <BSP_TS_Init+0x70>)
 8004056:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004058:	4b0e      	ldr	r3, [pc, #56]	; (8004094 <BSP_TS_Init+0x78>)
 800405a:	2270      	movs	r2, #112	; 0x70
 800405c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 800405e:	4b0e      	ldr	r3, [pc, #56]	; (8004098 <BSP_TS_Init+0x7c>)
 8004060:	2208      	movs	r2, #8
 8004062:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004064:	4b0a      	ldr	r3, [pc, #40]	; (8004090 <BSP_TS_Init+0x74>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	68db      	ldr	r3, [r3, #12]
 800406a:	4a0a      	ldr	r2, [pc, #40]	; (8004094 <BSP_TS_Init+0x78>)
 800406c:	7812      	ldrb	r2, [r2, #0]
 800406e:	b292      	uxth	r2, r2
 8004070:	4610      	mov	r0, r2
 8004072:	4798      	blx	r3
 8004074:	e001      	b.n	800407a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004076:	2303      	movs	r3, #3
 8004078:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800407a:	7bfb      	ldrb	r3, [r7, #15]
}
 800407c:	4618      	mov	r0, r3
 800407e:	3710      	adds	r7, #16
 8004080:	46bd      	mov	sp, r7
 8004082:	bd80      	pop	{r7, pc}
 8004084:	200004f8 	.word	0x200004f8
 8004088:	200004fa 	.word	0x200004fa
 800408c:	20000000 	.word	0x20000000
 8004090:	200004f4 	.word	0x200004f4
 8004094:	200004fd 	.word	0x200004fd
 8004098:	200004fc 	.word	0x200004fc

0800409c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80040a2:	4b11      	ldr	r3, [pc, #68]	; (80040e8 <HAL_MspInit+0x4c>)
 80040a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a6:	4a10      	ldr	r2, [pc, #64]	; (80040e8 <HAL_MspInit+0x4c>)
 80040a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80040ac:	6413      	str	r3, [r2, #64]	; 0x40
 80040ae:	4b0e      	ldr	r3, [pc, #56]	; (80040e8 <HAL_MspInit+0x4c>)
 80040b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80040b6:	607b      	str	r3, [r7, #4]
 80040b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80040ba:	4b0b      	ldr	r3, [pc, #44]	; (80040e8 <HAL_MspInit+0x4c>)
 80040bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040be:	4a0a      	ldr	r2, [pc, #40]	; (80040e8 <HAL_MspInit+0x4c>)
 80040c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80040c4:	6453      	str	r3, [r2, #68]	; 0x44
 80040c6:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <HAL_MspInit+0x4c>)
 80040c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80040ce:	603b      	str	r3, [r7, #0]
 80040d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80040d2:	2200      	movs	r2, #0
 80040d4:	210f      	movs	r1, #15
 80040d6:	f06f 0001 	mvn.w	r0, #1
 80040da:	f001 fad9 	bl	8005690 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
 80040e6:	bf00      	nop
 80040e8:	40023800 	.word	0x40023800

080040ec <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b08c      	sub	sp, #48	; 0x30
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f4:	f107 031c 	add.w	r3, r7, #28
 80040f8:	2200      	movs	r2, #0
 80040fa:	601a      	str	r2, [r3, #0]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	609a      	str	r2, [r3, #8]
 8004100:	60da      	str	r2, [r3, #12]
 8004102:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	4a2a      	ldr	r2, [pc, #168]	; (80041b4 <HAL_ADC_MspInit+0xc8>)
 800410a:	4293      	cmp	r3, r2
 800410c:	d124      	bne.n	8004158 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800410e:	4b2a      	ldr	r3, [pc, #168]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004110:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004112:	4a29      	ldr	r2, [pc, #164]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004114:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004118:	6453      	str	r3, [r2, #68]	; 0x44
 800411a:	4b27      	ldr	r3, [pc, #156]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 800411c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800411e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004122:	61bb      	str	r3, [r7, #24]
 8004124:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 800412c:	f043 0301 	orr.w	r3, r3, #1
 8004130:	6313      	str	r3, [r2, #48]	; 0x30
 8004132:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f003 0301 	and.w	r3, r3, #1
 800413a:	617b      	str	r3, [r7, #20]
 800413c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800413e:	2301      	movs	r3, #1
 8004140:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004142:	2303      	movs	r3, #3
 8004144:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004146:	2300      	movs	r3, #0
 8004148:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414a:	f107 031c 	add.w	r3, r7, #28
 800414e:	4619      	mov	r1, r3
 8004150:	481a      	ldr	r0, [pc, #104]	; (80041bc <HAL_ADC_MspInit+0xd0>)
 8004152:	f001 ffff 	bl	8006154 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004156:	e029      	b.n	80041ac <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_ADC_MspInit+0xd4>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d124      	bne.n	80041ac <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004162:	4b15      	ldr	r3, [pc, #84]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004166:	4a14      	ldr	r2, [pc, #80]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004168:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800416c:	6453      	str	r3, [r2, #68]	; 0x44
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004172:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004176:	613b      	str	r3, [r7, #16]
 8004178:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800417a:	4b0f      	ldr	r3, [pc, #60]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 800417c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800417e:	4a0e      	ldr	r2, [pc, #56]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004180:	f043 0320 	orr.w	r3, r3, #32
 8004184:	6313      	str	r3, [r2, #48]	; 0x30
 8004186:	4b0c      	ldr	r3, [pc, #48]	; (80041b8 <HAL_ADC_MspInit+0xcc>)
 8004188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800418a:	f003 0320 	and.w	r3, r3, #32
 800418e:	60fb      	str	r3, [r7, #12]
 8004190:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004192:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004196:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004198:	2303      	movs	r3, #3
 800419a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800419c:	2300      	movs	r3, #0
 800419e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80041a0:	f107 031c 	add.w	r3, r7, #28
 80041a4:	4619      	mov	r1, r3
 80041a6:	4807      	ldr	r0, [pc, #28]	; (80041c4 <HAL_ADC_MspInit+0xd8>)
 80041a8:	f001 ffd4 	bl	8006154 <HAL_GPIO_Init>
}
 80041ac:	bf00      	nop
 80041ae:	3730      	adds	r7, #48	; 0x30
 80041b0:	46bd      	mov	sp, r7
 80041b2:	bd80      	pop	{r7, pc}
 80041b4:	40012000 	.word	0x40012000
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40020000 	.word	0x40020000
 80041c0:	40012200 	.word	0x40012200
 80041c4:	40021400 	.word	0x40021400

080041c8 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b08a      	sub	sp, #40	; 0x28
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041d0:	f107 0314 	add.w	r3, r7, #20
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]
 80041d8:	605a      	str	r2, [r3, #4]
 80041da:	609a      	str	r2, [r3, #8]
 80041dc:	60da      	str	r2, [r3, #12]
 80041de:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	4a19      	ldr	r2, [pc, #100]	; (800424c <HAL_DAC_MspInit+0x84>)
 80041e6:	4293      	cmp	r3, r2
 80041e8:	d12b      	bne.n	8004242 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80041ea:	4b19      	ldr	r3, [pc, #100]	; (8004250 <HAL_DAC_MspInit+0x88>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	4a18      	ldr	r2, [pc, #96]	; (8004250 <HAL_DAC_MspInit+0x88>)
 80041f0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80041f4:	6413      	str	r3, [r2, #64]	; 0x40
 80041f6:	4b16      	ldr	r3, [pc, #88]	; (8004250 <HAL_DAC_MspInit+0x88>)
 80041f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041fe:	613b      	str	r3, [r7, #16]
 8004200:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004202:	4b13      	ldr	r3, [pc, #76]	; (8004250 <HAL_DAC_MspInit+0x88>)
 8004204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004206:	4a12      	ldr	r2, [pc, #72]	; (8004250 <HAL_DAC_MspInit+0x88>)
 8004208:	f043 0301 	orr.w	r3, r3, #1
 800420c:	6313      	str	r3, [r2, #48]	; 0x30
 800420e:	4b10      	ldr	r3, [pc, #64]	; (8004250 <HAL_DAC_MspInit+0x88>)
 8004210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004212:	f003 0301 	and.w	r3, r3, #1
 8004216:	60fb      	str	r3, [r7, #12]
 8004218:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800421a:	2310      	movs	r3, #16
 800421c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800421e:	2303      	movs	r3, #3
 8004220:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004222:	2300      	movs	r3, #0
 8004224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004226:	f107 0314 	add.w	r3, r7, #20
 800422a:	4619      	mov	r1, r3
 800422c:	4809      	ldr	r0, [pc, #36]	; (8004254 <HAL_DAC_MspInit+0x8c>)
 800422e:	f001 ff91 	bl	8006154 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004232:	2200      	movs	r2, #0
 8004234:	2100      	movs	r1, #0
 8004236:	2036      	movs	r0, #54	; 0x36
 8004238:	f001 fa2a 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800423c:	2036      	movs	r0, #54	; 0x36
 800423e:	f001 fa43 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004242:	bf00      	nop
 8004244:	3728      	adds	r7, #40	; 0x28
 8004246:	46bd      	mov	sp, r7
 8004248:	bd80      	pop	{r7, pc}
 800424a:	bf00      	nop
 800424c:	40007400 	.word	0x40007400
 8004250:	40023800 	.word	0x40023800
 8004254:	40020000 	.word	0x40020000

08004258 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004258:	b480      	push	{r7}
 800425a:	b085      	sub	sp, #20
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	4a0a      	ldr	r2, [pc, #40]	; (8004290 <HAL_DMA2D_MspInit+0x38>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d10b      	bne.n	8004282 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800426a:	4b0a      	ldr	r3, [pc, #40]	; (8004294 <HAL_DMA2D_MspInit+0x3c>)
 800426c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426e:	4a09      	ldr	r2, [pc, #36]	; (8004294 <HAL_DMA2D_MspInit+0x3c>)
 8004270:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004274:	6313      	str	r3, [r2, #48]	; 0x30
 8004276:	4b07      	ldr	r3, [pc, #28]	; (8004294 <HAL_DMA2D_MspInit+0x3c>)
 8004278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800427a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800427e:	60fb      	str	r3, [r7, #12]
 8004280:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004282:	bf00      	nop
 8004284:	3714      	adds	r7, #20
 8004286:	46bd      	mov	sp, r7
 8004288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	4002b000 	.word	0x4002b000
 8004294:	40023800 	.word	0x40023800

08004298 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	; 0x30
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80042a0:	f107 031c 	add.w	r3, r7, #28
 80042a4:	2200      	movs	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
 80042a8:	605a      	str	r2, [r3, #4]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	60da      	str	r2, [r3, #12]
 80042ae:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	4a2f      	ldr	r2, [pc, #188]	; (8004374 <HAL_I2C_MspInit+0xdc>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d129      	bne.n	800430e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042ba:	4b2f      	ldr	r3, [pc, #188]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 80042bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042be:	4a2e      	ldr	r2, [pc, #184]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 80042c0:	f043 0302 	orr.w	r3, r3, #2
 80042c4:	6313      	str	r3, [r2, #48]	; 0x30
 80042c6:	4b2c      	ldr	r3, [pc, #176]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 80042c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042ca:	f003 0302 	and.w	r3, r3, #2
 80042ce:	61bb      	str	r3, [r7, #24]
 80042d0:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80042d2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80042d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80042d8:	2312      	movs	r3, #18
 80042da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80042dc:	2301      	movs	r3, #1
 80042de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042e0:	2300      	movs	r3, #0
 80042e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80042e4:	2304      	movs	r3, #4
 80042e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042e8:	f107 031c 	add.w	r3, r7, #28
 80042ec:	4619      	mov	r1, r3
 80042ee:	4823      	ldr	r0, [pc, #140]	; (800437c <HAL_I2C_MspInit+0xe4>)
 80042f0:	f001 ff30 	bl	8006154 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80042f4:	4b20      	ldr	r3, [pc, #128]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 80042f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f8:	4a1f      	ldr	r2, [pc, #124]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 80042fa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042fe:	6413      	str	r3, [r2, #64]	; 0x40
 8004300:	4b1d      	ldr	r3, [pc, #116]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004308:	617b      	str	r3, [r7, #20]
 800430a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800430c:	e02d      	b.n	800436a <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	4a1b      	ldr	r2, [pc, #108]	; (8004380 <HAL_I2C_MspInit+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d128      	bne.n	800436a <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004318:	4b17      	ldr	r3, [pc, #92]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 800431a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800431c:	4a16      	ldr	r2, [pc, #88]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 800431e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004322:	6313      	str	r3, [r2, #48]	; 0x30
 8004324:	4b14      	ldr	r3, [pc, #80]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 8004326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004328:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800432c:	613b      	str	r3, [r7, #16]
 800432e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004330:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004336:	2312      	movs	r3, #18
 8004338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800433a:	2301      	movs	r3, #1
 800433c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800433e:	2303      	movs	r3, #3
 8004340:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004342:	2304      	movs	r3, #4
 8004344:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004346:	f107 031c 	add.w	r3, r7, #28
 800434a:	4619      	mov	r1, r3
 800434c:	480d      	ldr	r0, [pc, #52]	; (8004384 <HAL_I2C_MspInit+0xec>)
 800434e:	f001 ff01 	bl	8006154 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004352:	4b09      	ldr	r3, [pc, #36]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 8004354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004356:	4a08      	ldr	r2, [pc, #32]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 8004358:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800435c:	6413      	str	r3, [r2, #64]	; 0x40
 800435e:	4b06      	ldr	r3, [pc, #24]	; (8004378 <HAL_I2C_MspInit+0xe0>)
 8004360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004362:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004366:	60fb      	str	r3, [r7, #12]
 8004368:	68fb      	ldr	r3, [r7, #12]
}
 800436a:	bf00      	nop
 800436c:	3730      	adds	r7, #48	; 0x30
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	40005400 	.word	0x40005400
 8004378:	40023800 	.word	0x40023800
 800437c:	40020400 	.word	0x40020400
 8004380:	40005c00 	.word	0x40005c00
 8004384:	40021c00 	.word	0x40021c00

08004388 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
 800438e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a15      	ldr	r2, [pc, #84]	; (80043ec <HAL_I2C_MspDeInit+0x64>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d110      	bne.n	80043bc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800439a:	4b15      	ldr	r3, [pc, #84]	; (80043f0 <HAL_I2C_MspDeInit+0x68>)
 800439c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439e:	4a14      	ldr	r2, [pc, #80]	; (80043f0 <HAL_I2C_MspDeInit+0x68>)
 80043a0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80043a4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80043a6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043aa:	4812      	ldr	r0, [pc, #72]	; (80043f4 <HAL_I2C_MspDeInit+0x6c>)
 80043ac:	f002 f87c 	bl	80064a8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80043b0:	f44f 7100 	mov.w	r1, #512	; 0x200
 80043b4:	480f      	ldr	r0, [pc, #60]	; (80043f4 <HAL_I2C_MspDeInit+0x6c>)
 80043b6:	f002 f877 	bl	80064a8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80043ba:	e013      	b.n	80043e4 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a0d      	ldr	r2, [pc, #52]	; (80043f8 <HAL_I2C_MspDeInit+0x70>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d10e      	bne.n	80043e4 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80043c6:	4b0a      	ldr	r3, [pc, #40]	; (80043f0 <HAL_I2C_MspDeInit+0x68>)
 80043c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ca:	4a09      	ldr	r2, [pc, #36]	; (80043f0 <HAL_I2C_MspDeInit+0x68>)
 80043cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80043d0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80043d2:	2180      	movs	r1, #128	; 0x80
 80043d4:	4809      	ldr	r0, [pc, #36]	; (80043fc <HAL_I2C_MspDeInit+0x74>)
 80043d6:	f002 f867 	bl	80064a8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80043da:	f44f 7180 	mov.w	r1, #256	; 0x100
 80043de:	4807      	ldr	r0, [pc, #28]	; (80043fc <HAL_I2C_MspDeInit+0x74>)
 80043e0:	f002 f862 	bl	80064a8 <HAL_GPIO_DeInit>
}
 80043e4:	bf00      	nop
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	40005400 	.word	0x40005400
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40020400 	.word	0x40020400
 80043f8:	40005c00 	.word	0x40005c00
 80043fc:	40021c00 	.word	0x40021c00

08004400 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	b08e      	sub	sp, #56	; 0x38
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004408:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800440c:	2200      	movs	r2, #0
 800440e:	601a      	str	r2, [r3, #0]
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	609a      	str	r2, [r3, #8]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a55      	ldr	r2, [pc, #340]	; (8004574 <HAL_LTDC_MspInit+0x174>)
 800441e:	4293      	cmp	r3, r2
 8004420:	f040 80a3 	bne.w	800456a <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004424:	4b54      	ldr	r3, [pc, #336]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004428:	4a53      	ldr	r2, [pc, #332]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800442a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800442e:	6453      	str	r3, [r2, #68]	; 0x44
 8004430:	4b51      	ldr	r3, [pc, #324]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004434:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004438:	623b      	str	r3, [r7, #32]
 800443a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800443c:	4b4e      	ldr	r3, [pc, #312]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800443e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004440:	4a4d      	ldr	r2, [pc, #308]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004442:	f043 0310 	orr.w	r3, r3, #16
 8004446:	6313      	str	r3, [r2, #48]	; 0x30
 8004448:	4b4b      	ldr	r3, [pc, #300]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800444a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800444c:	f003 0310 	and.w	r3, r3, #16
 8004450:	61fb      	str	r3, [r7, #28]
 8004452:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004454:	4b48      	ldr	r3, [pc, #288]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004458:	4a47      	ldr	r2, [pc, #284]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800445a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800445e:	6313      	str	r3, [r2, #48]	; 0x30
 8004460:	4b45      	ldr	r3, [pc, #276]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004464:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 800446c:	4b42      	ldr	r3, [pc, #264]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800446e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004470:	4a41      	ldr	r2, [pc, #260]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004472:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004476:	6313      	str	r3, [r2, #48]	; 0x30
 8004478:	4b3f      	ldr	r3, [pc, #252]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800447a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8004484:	4b3c      	ldr	r3, [pc, #240]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004488:	4a3b      	ldr	r2, [pc, #236]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800448a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800448e:	6313      	str	r3, [r2, #48]	; 0x30
 8004490:	4b39      	ldr	r3, [pc, #228]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 8004492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004494:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004498:	613b      	str	r3, [r7, #16]
 800449a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800449c:	4b36      	ldr	r3, [pc, #216]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 800449e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a0:	4a35      	ldr	r2, [pc, #212]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 80044a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80044a6:	6313      	str	r3, [r2, #48]	; 0x30
 80044a8:	4b33      	ldr	r3, [pc, #204]	; (8004578 <HAL_LTDC_MspInit+0x178>)
 80044aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044b0:	60fb      	str	r3, [r7, #12]
 80044b2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80044b4:	2310      	movs	r3, #16
 80044b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044b8:	2302      	movs	r3, #2
 80044ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044bc:	2300      	movs	r3, #0
 80044be:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044c0:	2300      	movs	r3, #0
 80044c2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044c4:	230e      	movs	r3, #14
 80044c6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80044c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044cc:	4619      	mov	r1, r3
 80044ce:	482b      	ldr	r0, [pc, #172]	; (800457c <HAL_LTDC_MspInit+0x17c>)
 80044d0:	f001 fe40 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80044d4:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80044e6:	230e      	movs	r3, #14
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80044ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ee:	4619      	mov	r1, r3
 80044f0:	4823      	ldr	r0, [pc, #140]	; (8004580 <HAL_LTDC_MspInit+0x180>)
 80044f2:	f001 fe2f 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80044f6:	23f7      	movs	r3, #247	; 0xf7
 80044f8:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044fa:	2302      	movs	r3, #2
 80044fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044fe:	2300      	movs	r3, #0
 8004500:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004502:	2300      	movs	r3, #0
 8004504:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004506:	230e      	movs	r3, #14
 8004508:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800450a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800450e:	4619      	mov	r1, r3
 8004510:	481c      	ldr	r0, [pc, #112]	; (8004584 <HAL_LTDC_MspInit+0x184>)
 8004512:	f001 fe1f 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004516:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800451a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451c:	2302      	movs	r3, #2
 800451e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004520:	2300      	movs	r3, #0
 8004522:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004524:	2300      	movs	r3, #0
 8004526:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004528:	2309      	movs	r3, #9
 800452a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800452c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004530:	4619      	mov	r1, r3
 8004532:	4815      	ldr	r0, [pc, #84]	; (8004588 <HAL_LTDC_MspInit+0x188>)
 8004534:	f001 fe0e 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004538:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800453c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800453e:	2302      	movs	r3, #2
 8004540:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004542:	2300      	movs	r3, #0
 8004544:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004546:	2300      	movs	r3, #0
 8004548:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800454a:	230e      	movs	r3, #14
 800454c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800454e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004552:	4619      	mov	r1, r3
 8004554:	480d      	ldr	r0, [pc, #52]	; (800458c <HAL_LTDC_MspInit+0x18c>)
 8004556:	f001 fdfd 	bl	8006154 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800455a:	2200      	movs	r2, #0
 800455c:	2105      	movs	r1, #5
 800455e:	2058      	movs	r0, #88	; 0x58
 8004560:	f001 f896 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8004564:	2058      	movs	r0, #88	; 0x58
 8004566:	f001 f8af 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 800456a:	bf00      	nop
 800456c:	3738      	adds	r7, #56	; 0x38
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}
 8004572:	bf00      	nop
 8004574:	40016800 	.word	0x40016800
 8004578:	40023800 	.word	0x40023800
 800457c:	40021000 	.word	0x40021000
 8004580:	40022400 	.word	0x40022400
 8004584:	40022800 	.word	0x40022800
 8004588:	40021800 	.word	0x40021800
 800458c:	40022000 	.word	0x40022000

08004590 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a07      	ldr	r2, [pc, #28]	; (80045bc <HAL_RTC_MspInit+0x2c>)
 800459e:	4293      	cmp	r3, r2
 80045a0:	d105      	bne.n	80045ae <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80045a2:	4b07      	ldr	r3, [pc, #28]	; (80045c0 <HAL_RTC_MspInit+0x30>)
 80045a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045a6:	4a06      	ldr	r2, [pc, #24]	; (80045c0 <HAL_RTC_MspInit+0x30>)
 80045a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ac:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80045ae:	bf00      	nop
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr
 80045ba:	bf00      	nop
 80045bc:	40002800 	.word	0x40002800
 80045c0:	40023800 	.word	0x40023800

080045c4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80045c4:	b580      	push	{r7, lr}
 80045c6:	b08a      	sub	sp, #40	; 0x28
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80045cc:	f107 0314 	add.w	r3, r7, #20
 80045d0:	2200      	movs	r2, #0
 80045d2:	601a      	str	r2, [r3, #0]
 80045d4:	605a      	str	r2, [r3, #4]
 80045d6:	609a      	str	r2, [r3, #8]
 80045d8:	60da      	str	r2, [r3, #12]
 80045da:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	4a2d      	ldr	r2, [pc, #180]	; (8004698 <HAL_SPI_MspInit+0xd4>)
 80045e2:	4293      	cmp	r3, r2
 80045e4:	d154      	bne.n	8004690 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80045e6:	4b2d      	ldr	r3, [pc, #180]	; (800469c <HAL_SPI_MspInit+0xd8>)
 80045e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ea:	4a2c      	ldr	r2, [pc, #176]	; (800469c <HAL_SPI_MspInit+0xd8>)
 80045ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80045f0:	6413      	str	r3, [r2, #64]	; 0x40
 80045f2:	4b2a      	ldr	r3, [pc, #168]	; (800469c <HAL_SPI_MspInit+0xd8>)
 80045f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80045fa:	613b      	str	r3, [r7, #16]
 80045fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80045fe:	4b27      	ldr	r3, [pc, #156]	; (800469c <HAL_SPI_MspInit+0xd8>)
 8004600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004602:	4a26      	ldr	r2, [pc, #152]	; (800469c <HAL_SPI_MspInit+0xd8>)
 8004604:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004608:	6313      	str	r3, [r2, #48]	; 0x30
 800460a:	4b24      	ldr	r3, [pc, #144]	; (800469c <HAL_SPI_MspInit+0xd8>)
 800460c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800460e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004616:	4b21      	ldr	r3, [pc, #132]	; (800469c <HAL_SPI_MspInit+0xd8>)
 8004618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800461a:	4a20      	ldr	r2, [pc, #128]	; (800469c <HAL_SPI_MspInit+0xd8>)
 800461c:	f043 0302 	orr.w	r3, r3, #2
 8004620:	6313      	str	r3, [r2, #48]	; 0x30
 8004622:	4b1e      	ldr	r3, [pc, #120]	; (800469c <HAL_SPI_MspInit+0xd8>)
 8004624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004626:	f003 0302 	and.w	r3, r3, #2
 800462a:	60bb      	str	r3, [r7, #8]
 800462c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800462e:	2302      	movs	r3, #2
 8004630:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004632:	2302      	movs	r3, #2
 8004634:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004636:	2300      	movs	r3, #0
 8004638:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800463a:	2300      	movs	r3, #0
 800463c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800463e:	2305      	movs	r3, #5
 8004640:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004642:	f107 0314 	add.w	r3, r7, #20
 8004646:	4619      	mov	r1, r3
 8004648:	4815      	ldr	r0, [pc, #84]	; (80046a0 <HAL_SPI_MspInit+0xdc>)
 800464a:	f001 fd83 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800464e:	2301      	movs	r3, #1
 8004650:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465a:	2303      	movs	r3, #3
 800465c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800465e:	2305      	movs	r3, #5
 8004660:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004662:	f107 0314 	add.w	r3, r7, #20
 8004666:	4619      	mov	r1, r3
 8004668:	480d      	ldr	r0, [pc, #52]	; (80046a0 <HAL_SPI_MspInit+0xdc>)
 800466a:	f001 fd73 	bl	8006154 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800466e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8004672:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004674:	2302      	movs	r3, #2
 8004676:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004678:	2300      	movs	r3, #0
 800467a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800467c:	2303      	movs	r3, #3
 800467e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004680:	2305      	movs	r3, #5
 8004682:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004684:	f107 0314 	add.w	r3, r7, #20
 8004688:	4619      	mov	r1, r3
 800468a:	4806      	ldr	r0, [pc, #24]	; (80046a4 <HAL_SPI_MspInit+0xe0>)
 800468c:	f001 fd62 	bl	8006154 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004690:	bf00      	nop
 8004692:	3728      	adds	r7, #40	; 0x28
 8004694:	46bd      	mov	sp, r7
 8004696:	bd80      	pop	{r7, pc}
 8004698:	40003800 	.word	0x40003800
 800469c:	40023800 	.word	0x40023800
 80046a0:	40022000 	.word	0x40022000
 80046a4:	40020400 	.word	0x40020400

080046a8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80046a8:	b480      	push	{r7}
 80046aa:	b089      	sub	sp, #36	; 0x24
 80046ac:	af00      	add	r7, sp, #0
 80046ae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <HAL_TIM_Base_MspInit+0xc8>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d10c      	bne.n	80046d4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80046ba:	4b2e      	ldr	r3, [pc, #184]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046be:	4a2d      	ldr	r2, [pc, #180]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046c0:	f043 0301 	orr.w	r3, r3, #1
 80046c4:	6453      	str	r3, [r2, #68]	; 0x44
 80046c6:	4b2b      	ldr	r3, [pc, #172]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ca:	f003 0301 	and.w	r3, r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80046d2:	e046      	b.n	8004762 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046dc:	d10c      	bne.n	80046f8 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80046de:	4b25      	ldr	r3, [pc, #148]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046e2:	4a24      	ldr	r2, [pc, #144]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046e4:	f043 0301 	orr.w	r3, r3, #1
 80046e8:	6413      	str	r3, [r2, #64]	; 0x40
 80046ea:	4b22      	ldr	r3, [pc, #136]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 80046ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ee:	f003 0301 	and.w	r3, r3, #1
 80046f2:	61bb      	str	r3, [r7, #24]
 80046f4:	69bb      	ldr	r3, [r7, #24]
}
 80046f6:	e034      	b.n	8004762 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a1e      	ldr	r2, [pc, #120]	; (8004778 <HAL_TIM_Base_MspInit+0xd0>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d10c      	bne.n	800471c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004702:	4b1c      	ldr	r3, [pc, #112]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004706:	4a1b      	ldr	r2, [pc, #108]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004708:	f043 0302 	orr.w	r3, r3, #2
 800470c:	6413      	str	r3, [r2, #64]	; 0x40
 800470e:	4b19      	ldr	r3, [pc, #100]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004712:	f003 0302 	and.w	r3, r3, #2
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	697b      	ldr	r3, [r7, #20]
}
 800471a:	e022      	b.n	8004762 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	4a16      	ldr	r2, [pc, #88]	; (800477c <HAL_TIM_Base_MspInit+0xd4>)
 8004722:	4293      	cmp	r3, r2
 8004724:	d10c      	bne.n	8004740 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004726:	4b13      	ldr	r3, [pc, #76]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004728:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472a:	4a12      	ldr	r2, [pc, #72]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 800472c:	f043 0308 	orr.w	r3, r3, #8
 8004730:	6413      	str	r3, [r2, #64]	; 0x40
 8004732:	4b10      	ldr	r3, [pc, #64]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	613b      	str	r3, [r7, #16]
 800473c:	693b      	ldr	r3, [r7, #16]
}
 800473e:	e010      	b.n	8004762 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a0e      	ldr	r2, [pc, #56]	; (8004780 <HAL_TIM_Base_MspInit+0xd8>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10b      	bne.n	8004762 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800474a:	4b0a      	ldr	r3, [pc, #40]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 800474c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800474e:	4a09      	ldr	r2, [pc, #36]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004750:	f043 0302 	orr.w	r3, r3, #2
 8004754:	6453      	str	r3, [r2, #68]	; 0x44
 8004756:	4b07      	ldr	r3, [pc, #28]	; (8004774 <HAL_TIM_Base_MspInit+0xcc>)
 8004758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475a:	f003 0302 	and.w	r3, r3, #2
 800475e:	60fb      	str	r3, [r7, #12]
 8004760:	68fb      	ldr	r3, [r7, #12]
}
 8004762:	bf00      	nop
 8004764:	3724      	adds	r7, #36	; 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40010000 	.word	0x40010000
 8004774:	40023800 	.word	0x40023800
 8004778:	40000400 	.word	0x40000400
 800477c:	40000c00 	.word	0x40000c00
 8004780:	40010400 	.word	0x40010400

08004784 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b088      	sub	sp, #32
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800478c:	f107 030c 	add.w	r3, r7, #12
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	60da      	str	r2, [r3, #12]
 800479a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a11      	ldr	r2, [pc, #68]	; (80047e8 <HAL_TIM_MspPostInit+0x64>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d11b      	bne.n	80047de <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80047a6:	4b11      	ldr	r3, [pc, #68]	; (80047ec <HAL_TIM_MspPostInit+0x68>)
 80047a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047aa:	4a10      	ldr	r2, [pc, #64]	; (80047ec <HAL_TIM_MspPostInit+0x68>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6313      	str	r3, [r2, #48]	; 0x30
 80047b2:	4b0e      	ldr	r3, [pc, #56]	; (80047ec <HAL_TIM_MspPostInit+0x68>)
 80047b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047ba:	60bb      	str	r3, [r7, #8]
 80047bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80047be:	2304      	movs	r3, #4
 80047c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047c2:	2302      	movs	r3, #2
 80047c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047c6:	2300      	movs	r3, #0
 80047c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80047ce:	2303      	movs	r3, #3
 80047d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80047d2:	f107 030c 	add.w	r3, r7, #12
 80047d6:	4619      	mov	r1, r3
 80047d8:	4805      	ldr	r0, [pc, #20]	; (80047f0 <HAL_TIM_MspPostInit+0x6c>)
 80047da:	f001 fcbb 	bl	8006154 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80047de:	bf00      	nop
 80047e0:	3720      	adds	r7, #32
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}
 80047e6:	bf00      	nop
 80047e8:	40010400 	.word	0x40010400
 80047ec:	40023800 	.word	0x40023800
 80047f0:	40022000 	.word	0x40022000

080047f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b08e      	sub	sp, #56	; 0x38
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	605a      	str	r2, [r3, #4]
 8004806:	609a      	str	r2, [r3, #8]
 8004808:	60da      	str	r2, [r3, #12]
 800480a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a57      	ldr	r2, [pc, #348]	; (8004970 <HAL_UART_MspInit+0x17c>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d128      	bne.n	8004868 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004816:	4b57      	ldr	r3, [pc, #348]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800481a:	4a56      	ldr	r2, [pc, #344]	; (8004974 <HAL_UART_MspInit+0x180>)
 800481c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004820:	6413      	str	r3, [r2, #64]	; 0x40
 8004822:	4b54      	ldr	r3, [pc, #336]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004826:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800482a:	623b      	str	r3, [r7, #32]
 800482c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800482e:	4b51      	ldr	r3, [pc, #324]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004832:	4a50      	ldr	r2, [pc, #320]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004834:	f043 0320 	orr.w	r3, r3, #32
 8004838:	6313      	str	r3, [r2, #48]	; 0x30
 800483a:	4b4e      	ldr	r3, [pc, #312]	; (8004974 <HAL_UART_MspInit+0x180>)
 800483c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800483e:	f003 0320 	and.w	r3, r3, #32
 8004842:	61fb      	str	r3, [r7, #28]
 8004844:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004846:	23c0      	movs	r3, #192	; 0xc0
 8004848:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800484a:	2302      	movs	r3, #2
 800484c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800484e:	2300      	movs	r3, #0
 8004850:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004852:	2303      	movs	r3, #3
 8004854:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004856:	2308      	movs	r3, #8
 8004858:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800485a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800485e:	4619      	mov	r1, r3
 8004860:	4845      	ldr	r0, [pc, #276]	; (8004978 <HAL_UART_MspInit+0x184>)
 8004862:	f001 fc77 	bl	8006154 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004866:	e07f      	b.n	8004968 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a43      	ldr	r2, [pc, #268]	; (800497c <HAL_UART_MspInit+0x188>)
 800486e:	4293      	cmp	r3, r2
 8004870:	d14d      	bne.n	800490e <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8004872:	4b40      	ldr	r3, [pc, #256]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004876:	4a3f      	ldr	r2, [pc, #252]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004878:	f043 0310 	orr.w	r3, r3, #16
 800487c:	6453      	str	r3, [r2, #68]	; 0x44
 800487e:	4b3d      	ldr	r3, [pc, #244]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004880:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004882:	f003 0310 	and.w	r3, r3, #16
 8004886:	61bb      	str	r3, [r7, #24]
 8004888:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800488a:	4b3a      	ldr	r3, [pc, #232]	; (8004974 <HAL_UART_MspInit+0x180>)
 800488c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800488e:	4a39      	ldr	r2, [pc, #228]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004890:	f043 0302 	orr.w	r3, r3, #2
 8004894:	6313      	str	r3, [r2, #48]	; 0x30
 8004896:	4b37      	ldr	r3, [pc, #220]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800489a:	f003 0302 	and.w	r3, r3, #2
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80048a2:	4b34      	ldr	r3, [pc, #208]	; (8004974 <HAL_UART_MspInit+0x180>)
 80048a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a6:	4a33      	ldr	r2, [pc, #204]	; (8004974 <HAL_UART_MspInit+0x180>)
 80048a8:	f043 0301 	orr.w	r3, r3, #1
 80048ac:	6313      	str	r3, [r2, #48]	; 0x30
 80048ae:	4b31      	ldr	r3, [pc, #196]	; (8004974 <HAL_UART_MspInit+0x180>)
 80048b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048b2:	f003 0301 	and.w	r3, r3, #1
 80048b6:	613b      	str	r3, [r7, #16]
 80048b8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80048ba:	2380      	movs	r3, #128	; 0x80
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048be:	2302      	movs	r3, #2
 80048c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048c2:	2300      	movs	r3, #0
 80048c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048c6:	2300      	movs	r3, #0
 80048c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048ca:	2307      	movs	r3, #7
 80048cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80048ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048d2:	4619      	mov	r1, r3
 80048d4:	482a      	ldr	r0, [pc, #168]	; (8004980 <HAL_UART_MspInit+0x18c>)
 80048d6:	f001 fc3d 	bl	8006154 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80048da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80048e0:	2302      	movs	r3, #2
 80048e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048e4:	2300      	movs	r3, #0
 80048e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80048e8:	2300      	movs	r3, #0
 80048ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80048ec:	2307      	movs	r3, #7
 80048ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80048f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80048f4:	4619      	mov	r1, r3
 80048f6:	4823      	ldr	r0, [pc, #140]	; (8004984 <HAL_UART_MspInit+0x190>)
 80048f8:	f001 fc2c 	bl	8006154 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 80048fc:	2200      	movs	r2, #0
 80048fe:	2107      	movs	r1, #7
 8004900:	2025      	movs	r0, #37	; 0x25
 8004902:	f000 fec5 	bl	8005690 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004906:	2025      	movs	r0, #37	; 0x25
 8004908:	f000 fede 	bl	80056c8 <HAL_NVIC_EnableIRQ>
}
 800490c:	e02c      	b.n	8004968 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1d      	ldr	r2, [pc, #116]	; (8004988 <HAL_UART_MspInit+0x194>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d127      	bne.n	8004968 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004918:	4b16      	ldr	r3, [pc, #88]	; (8004974 <HAL_UART_MspInit+0x180>)
 800491a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <HAL_UART_MspInit+0x180>)
 800491e:	f043 0320 	orr.w	r3, r3, #32
 8004922:	6453      	str	r3, [r2, #68]	; 0x44
 8004924:	4b13      	ldr	r3, [pc, #76]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004928:	f003 0320 	and.w	r3, r3, #32
 800492c:	60fb      	str	r3, [r7, #12]
 800492e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004930:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	4a0f      	ldr	r2, [pc, #60]	; (8004974 <HAL_UART_MspInit+0x180>)
 8004936:	f043 0304 	orr.w	r3, r3, #4
 800493a:	6313      	str	r3, [r2, #48]	; 0x30
 800493c:	4b0d      	ldr	r3, [pc, #52]	; (8004974 <HAL_UART_MspInit+0x180>)
 800493e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004940:	f003 0304 	and.w	r3, r3, #4
 8004944:	60bb      	str	r3, [r7, #8]
 8004946:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004948:	23c0      	movs	r3, #192	; 0xc0
 800494a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800494c:	2302      	movs	r3, #2
 800494e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004950:	2300      	movs	r3, #0
 8004952:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004954:	2303      	movs	r3, #3
 8004956:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004958:	2308      	movs	r3, #8
 800495a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800495c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004960:	4619      	mov	r1, r3
 8004962:	480a      	ldr	r0, [pc, #40]	; (800498c <HAL_UART_MspInit+0x198>)
 8004964:	f001 fbf6 	bl	8006154 <HAL_GPIO_Init>
}
 8004968:	bf00      	nop
 800496a:	3738      	adds	r7, #56	; 0x38
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	40007800 	.word	0x40007800
 8004974:	40023800 	.word	0x40023800
 8004978:	40021400 	.word	0x40021400
 800497c:	40011000 	.word	0x40011000
 8004980:	40020400 	.word	0x40020400
 8004984:	40020000 	.word	0x40020000
 8004988:	40011400 	.word	0x40011400
 800498c:	40020800 	.word	0x40020800

08004990 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	2200      	movs	r2, #0
 800499a:	601a      	str	r2, [r3, #0]
 800499c:	605a      	str	r2, [r3, #4]
 800499e:	609a      	str	r2, [r3, #8]
 80049a0:	60da      	str	r2, [r3, #12]
 80049a2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80049a4:	4b3a      	ldr	r3, [pc, #232]	; (8004a90 <HAL_FMC_MspInit+0x100>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d16d      	bne.n	8004a88 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80049ac:	4b38      	ldr	r3, [pc, #224]	; (8004a90 <HAL_FMC_MspInit+0x100>)
 80049ae:	2201      	movs	r2, #1
 80049b0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80049b2:	4b38      	ldr	r3, [pc, #224]	; (8004a94 <HAL_FMC_MspInit+0x104>)
 80049b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049b6:	4a37      	ldr	r2, [pc, #220]	; (8004a94 <HAL_FMC_MspInit+0x104>)
 80049b8:	f043 0301 	orr.w	r3, r3, #1
 80049bc:	6393      	str	r3, [r2, #56]	; 0x38
 80049be:	4b35      	ldr	r3, [pc, #212]	; (8004a94 <HAL_FMC_MspInit+0x104>)
 80049c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	603b      	str	r3, [r7, #0]
 80049c8:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80049ca:	f64f 7383 	movw	r3, #65411	; 0xff83
 80049ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049d0:	2302      	movs	r3, #2
 80049d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049d4:	2300      	movs	r3, #0
 80049d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049d8:	2303      	movs	r3, #3
 80049da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049dc:	230c      	movs	r3, #12
 80049de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80049e0:	1d3b      	adds	r3, r7, #4
 80049e2:	4619      	mov	r1, r3
 80049e4:	482c      	ldr	r0, [pc, #176]	; (8004a98 <HAL_FMC_MspInit+0x108>)
 80049e6:	f001 fbb5 	bl	8006154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80049ea:	f248 1333 	movw	r3, #33075	; 0x8133
 80049ee:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049f0:	2302      	movs	r3, #2
 80049f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049f4:	2300      	movs	r3, #0
 80049f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049f8:	2303      	movs	r3, #3
 80049fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049fc:	230c      	movs	r3, #12
 80049fe:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004a00:	1d3b      	adds	r3, r7, #4
 8004a02:	4619      	mov	r1, r3
 8004a04:	4825      	ldr	r0, [pc, #148]	; (8004a9c <HAL_FMC_MspInit+0x10c>)
 8004a06:	f001 fba5 	bl	8006154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004a0a:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004a0e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a10:	2302      	movs	r3, #2
 8004a12:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a14:	2300      	movs	r3, #0
 8004a16:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a18:	2303      	movs	r3, #3
 8004a1a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a1c:	230c      	movs	r3, #12
 8004a1e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004a20:	1d3b      	adds	r3, r7, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	481e      	ldr	r0, [pc, #120]	; (8004aa0 <HAL_FMC_MspInit+0x110>)
 8004a26:	f001 fb95 	bl	8006154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004a2a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004a2e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a30:	2302      	movs	r3, #2
 8004a32:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a34:	2300      	movs	r3, #0
 8004a36:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a38:	2303      	movs	r3, #3
 8004a3a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a3c:	230c      	movs	r3, #12
 8004a3e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004a40:	1d3b      	adds	r3, r7, #4
 8004a42:	4619      	mov	r1, r3
 8004a44:	4817      	ldr	r0, [pc, #92]	; (8004aa4 <HAL_FMC_MspInit+0x114>)
 8004a46:	f001 fb85 	bl	8006154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004a4a:	2328      	movs	r3, #40	; 0x28
 8004a4c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a4e:	2302      	movs	r3, #2
 8004a50:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a52:	2300      	movs	r3, #0
 8004a54:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a56:	2303      	movs	r3, #3
 8004a58:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a5a:	230c      	movs	r3, #12
 8004a5c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004a5e:	1d3b      	adds	r3, r7, #4
 8004a60:	4619      	mov	r1, r3
 8004a62:	4811      	ldr	r0, [pc, #68]	; (8004aa8 <HAL_FMC_MspInit+0x118>)
 8004a64:	f001 fb76 	bl	8006154 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004a68:	2308      	movs	r3, #8
 8004a6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004a70:	2300      	movs	r3, #0
 8004a72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004a74:	2303      	movs	r3, #3
 8004a76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004a78:	230c      	movs	r3, #12
 8004a7a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004a7c:	1d3b      	adds	r3, r7, #4
 8004a7e:	4619      	mov	r1, r3
 8004a80:	480a      	ldr	r0, [pc, #40]	; (8004aac <HAL_FMC_MspInit+0x11c>)
 8004a82:	f001 fb67 	bl	8006154 <HAL_GPIO_Init>
 8004a86:	e000      	b.n	8004a8a <HAL_FMC_MspInit+0xfa>
    return;
 8004a88:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004a8a:	3718      	adds	r7, #24
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}
 8004a90:	20000500 	.word	0x20000500
 8004a94:	40023800 	.word	0x40023800
 8004a98:	40021000 	.word	0x40021000
 8004a9c:	40021800 	.word	0x40021800
 8004aa0:	40020c00 	.word	0x40020c00
 8004aa4:	40021400 	.word	0x40021400
 8004aa8:	40021c00 	.word	0x40021c00
 8004aac:	40020800 	.word	0x40020800

08004ab0 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b082      	sub	sp, #8
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004ab8:	f7ff ff6a 	bl	8004990 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b08c      	sub	sp, #48	; 0x30
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004acc:	2300      	movs	r3, #0
 8004ace:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	6879      	ldr	r1, [r7, #4]
 8004ad8:	2036      	movs	r0, #54	; 0x36
 8004ada:	f000 fdd9 	bl	8005690 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ade:	2036      	movs	r0, #54	; 0x36
 8004ae0:	f000 fdf2 	bl	80056c8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004ae4:	4b1f      	ldr	r3, [pc, #124]	; (8004b64 <HAL_InitTick+0xa0>)
 8004ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae8:	4a1e      	ldr	r2, [pc, #120]	; (8004b64 <HAL_InitTick+0xa0>)
 8004aea:	f043 0310 	orr.w	r3, r3, #16
 8004aee:	6413      	str	r3, [r2, #64]	; 0x40
 8004af0:	4b1c      	ldr	r3, [pc, #112]	; (8004b64 <HAL_InitTick+0xa0>)
 8004af2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004af4:	f003 0310 	and.w	r3, r3, #16
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004afc:	f107 0210 	add.w	r2, r7, #16
 8004b00:	f107 0314 	add.w	r3, r7, #20
 8004b04:	4611      	mov	r1, r2
 8004b06:	4618      	mov	r0, r3
 8004b08:	f003 fc08 	bl	800831c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004b0c:	f003 fbde 	bl	80082cc <HAL_RCC_GetPCLK1Freq>
 8004b10:	4603      	mov	r3, r0
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004b16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b18:	4a13      	ldr	r2, [pc, #76]	; (8004b68 <HAL_InitTick+0xa4>)
 8004b1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1e:	0c9b      	lsrs	r3, r3, #18
 8004b20:	3b01      	subs	r3, #1
 8004b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004b24:	4b11      	ldr	r3, [pc, #68]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b26:	4a12      	ldr	r2, [pc, #72]	; (8004b70 <HAL_InitTick+0xac>)
 8004b28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004b2a:	4b10      	ldr	r3, [pc, #64]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b2c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004b30:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004b32:	4a0e      	ldr	r2, [pc, #56]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b36:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004b38:	4b0c      	ldr	r3, [pc, #48]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004b3e:	4b0b      	ldr	r3, [pc, #44]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b40:	2200      	movs	r2, #0
 8004b42:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004b44:	4809      	ldr	r0, [pc, #36]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b46:	f004 fda8 	bl	800969a <HAL_TIM_Base_Init>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d104      	bne.n	8004b5a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004b50:	4806      	ldr	r0, [pc, #24]	; (8004b6c <HAL_InitTick+0xa8>)
 8004b52:	f004 fdcd 	bl	80096f0 <HAL_TIM_Base_Start_IT>
 8004b56:	4603      	mov	r3, r0
 8004b58:	e000      	b.n	8004b5c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004b5a:	2301      	movs	r3, #1
}
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	3730      	adds	r7, #48	; 0x30
 8004b60:	46bd      	mov	sp, r7
 8004b62:	bd80      	pop	{r7, pc}
 8004b64:	40023800 	.word	0x40023800
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	20008d0c 	.word	0x20008d0c
 8004b70:	40001000 	.word	0x40001000

08004b74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004b74:	b480      	push	{r7}
 8004b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004b78:	e7fe      	b.n	8004b78 <NMI_Handler+0x4>

08004b7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004b7a:	b480      	push	{r7}
 8004b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004b7e:	e7fe      	b.n	8004b7e <HardFault_Handler+0x4>

08004b80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004b80:	b480      	push	{r7}
 8004b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004b84:	e7fe      	b.n	8004b84 <MemManage_Handler+0x4>

08004b86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004b86:	b480      	push	{r7}
 8004b88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004b8a:	e7fe      	b.n	8004b8a <BusFault_Handler+0x4>

08004b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004b90:	e7fe      	b.n	8004b90 <UsageFault_Handler+0x4>

08004b92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004b92:	b480      	push	{r7}
 8004b94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004b96:	bf00      	nop
 8004b98:	46bd      	mov	sp, r7
 8004b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b9e:	4770      	bx	lr

08004ba0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004ba4:	4802      	ldr	r0, [pc, #8]	; (8004bb0 <USART1_IRQHandler+0x10>)
 8004ba6:	f005 fff3 	bl	800ab90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004baa:	bf00      	nop
 8004bac:	bd80      	pop	{r7, pc}
 8004bae:	bf00      	nop
 8004bb0:	200089e4 	.word	0x200089e4

08004bb4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004bb4:	b580      	push	{r7, lr}
 8004bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004bb8:	4803      	ldr	r0, [pc, #12]	; (8004bc8 <TIM6_DAC_IRQHandler+0x14>)
 8004bba:	f000 fdb5 	bl	8005728 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004bbe:	4803      	ldr	r0, [pc, #12]	; (8004bcc <TIM6_DAC_IRQHandler+0x18>)
 8004bc0:	f004 fdf5 	bl	80097ae <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004bc4:	bf00      	nop
 8004bc6:	bd80      	pop	{r7, pc}
 8004bc8:	20008a64 	.word	0x20008a64
 8004bcc:	20008d0c 	.word	0x20008d0c

08004bd0 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004bd0:	b580      	push	{r7, lr}
 8004bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004bd4:	4802      	ldr	r0, [pc, #8]	; (8004be0 <LTDC_IRQHandler+0x10>)
 8004bd6:	f002 fc23 	bl	8007420 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004bda:	bf00      	nop
 8004bdc:	bd80      	pop	{r7, pc}
 8004bde:	bf00      	nop
 8004be0:	200088a0 	.word	0x200088a0

08004be4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004be4:	b580      	push	{r7, lr}
 8004be6:	b086      	sub	sp, #24
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004bec:	4a14      	ldr	r2, [pc, #80]	; (8004c40 <_sbrk+0x5c>)
 8004bee:	4b15      	ldr	r3, [pc, #84]	; (8004c44 <_sbrk+0x60>)
 8004bf0:	1ad3      	subs	r3, r2, r3
 8004bf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004bf8:	4b13      	ldr	r3, [pc, #76]	; (8004c48 <_sbrk+0x64>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d102      	bne.n	8004c06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004c00:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <_sbrk+0x64>)
 8004c02:	4a12      	ldr	r2, [pc, #72]	; (8004c4c <_sbrk+0x68>)
 8004c04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004c06:	4b10      	ldr	r3, [pc, #64]	; (8004c48 <_sbrk+0x64>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	693a      	ldr	r2, [r7, #16]
 8004c10:	429a      	cmp	r2, r3
 8004c12:	d207      	bcs.n	8004c24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004c14:	f009 fadc 	bl	800e1d0 <__errno>
 8004c18:	4602      	mov	r2, r0
 8004c1a:	230c      	movs	r3, #12
 8004c1c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004c1e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c22:	e009      	b.n	8004c38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004c24:	4b08      	ldr	r3, [pc, #32]	; (8004c48 <_sbrk+0x64>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004c2a:	4b07      	ldr	r3, [pc, #28]	; (8004c48 <_sbrk+0x64>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	4413      	add	r3, r2
 8004c32:	4a05      	ldr	r2, [pc, #20]	; (8004c48 <_sbrk+0x64>)
 8004c34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004c36:	68fb      	ldr	r3, [r7, #12]
}
 8004c38:	4618      	mov	r0, r3
 8004c3a:	3718      	adds	r7, #24
 8004c3c:	46bd      	mov	sp, r7
 8004c3e:	bd80      	pop	{r7, pc}
 8004c40:	20050000 	.word	0x20050000
 8004c44:	00000400 	.word	0x00000400
 8004c48:	20000504 	.word	0x20000504
 8004c4c:	20008d58 	.word	0x20008d58

08004c50 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004c50:	b480      	push	{r7}
 8004c52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004c54:	4b08      	ldr	r3, [pc, #32]	; (8004c78 <SystemInit+0x28>)
 8004c56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c5a:	4a07      	ldr	r2, [pc, #28]	; (8004c78 <SystemInit+0x28>)
 8004c5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004c60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004c64:	4b04      	ldr	r3, [pc, #16]	; (8004c78 <SystemInit+0x28>)
 8004c66:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004c6a:	609a      	str	r2, [r3, #8]
#endif
}
 8004c6c:	bf00      	nop
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c74:	4770      	bx	lr
 8004c76:	bf00      	nop
 8004c78:	e000ed00 	.word	0xe000ed00

08004c7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004c7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004cb4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004c80:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004c82:	e003      	b.n	8004c8c <LoopCopyDataInit>

08004c84 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004c84:	4b0c      	ldr	r3, [pc, #48]	; (8004cb8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004c86:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004c88:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004c8a:	3104      	adds	r1, #4

08004c8c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004c8c:	480b      	ldr	r0, [pc, #44]	; (8004cbc <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004c8e:	4b0c      	ldr	r3, [pc, #48]	; (8004cc0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004c90:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004c92:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004c94:	d3f6      	bcc.n	8004c84 <CopyDataInit>
  ldr  r2, =_sbss
 8004c96:	4a0b      	ldr	r2, [pc, #44]	; (8004cc4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004c98:	e002      	b.n	8004ca0 <LoopFillZerobss>

08004c9a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004c9a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004c9c:	f842 3b04 	str.w	r3, [r2], #4

08004ca0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004ca0:	4b09      	ldr	r3, [pc, #36]	; (8004cc8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004ca2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004ca4:	d3f9      	bcc.n	8004c9a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004ca6:	f7ff ffd3 	bl	8004c50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004caa:	f009 fa97 	bl	800e1dc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004cae:	f7fb fe8f 	bl	80009d0 <main>
  bx  lr    
 8004cb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004cb4:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004cb8:	08010b10 	.word	0x08010b10
  ldr  r0, =_sdata
 8004cbc:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004cc0:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8004cc4:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8004cc8:	20008d54 	.word	0x20008d54

08004ccc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ccc:	e7fe      	b.n	8004ccc <ADC_IRQHandler>

08004cce <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	f000 fcd1 	bl	800567a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004cd8:	2000      	movs	r0, #0
 8004cda:	f7ff fef3 	bl	8004ac4 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004cde:	f7ff f9dd 	bl	800409c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004ce2:	2300      	movs	r3, #0
}
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004cec:	4b06      	ldr	r3, [pc, #24]	; (8004d08 <HAL_IncTick+0x20>)
 8004cee:	781b      	ldrb	r3, [r3, #0]
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	4b06      	ldr	r3, [pc, #24]	; (8004d0c <HAL_IncTick+0x24>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	4a04      	ldr	r2, [pc, #16]	; (8004d0c <HAL_IncTick+0x24>)
 8004cfa:	6013      	str	r3, [r2, #0]
}
 8004cfc:	bf00      	nop
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000054 	.word	0x20000054
 8004d0c:	20008d4c 	.word	0x20008d4c

08004d10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004d10:	b480      	push	{r7}
 8004d12:	af00      	add	r7, sp, #0
  return uwTick;
 8004d14:	4b03      	ldr	r3, [pc, #12]	; (8004d24 <HAL_GetTick+0x14>)
 8004d16:	681b      	ldr	r3, [r3, #0]
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
 8004d22:	bf00      	nop
 8004d24:	20008d4c 	.word	0x20008d4c

08004d28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004d30:	f7ff ffee 	bl	8004d10 <HAL_GetTick>
 8004d34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d40:	d005      	beq.n	8004d4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004d42:	4b09      	ldr	r3, [pc, #36]	; (8004d68 <HAL_Delay+0x40>)
 8004d44:	781b      	ldrb	r3, [r3, #0]
 8004d46:	461a      	mov	r2, r3
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004d4e:	bf00      	nop
 8004d50:	f7ff ffde 	bl	8004d10 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68bb      	ldr	r3, [r7, #8]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	429a      	cmp	r2, r3
 8004d5e:	d8f7      	bhi.n	8004d50 <HAL_Delay+0x28>
  {
  }
}
 8004d60:	bf00      	nop
 8004d62:	3710      	adds	r7, #16
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}
 8004d68:	20000054 	.word	0x20000054

08004d6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	b084      	sub	sp, #16
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004d74:	2300      	movs	r3, #0
 8004d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e031      	b.n	8004de6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d109      	bne.n	8004d9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004d8a:	6878      	ldr	r0, [r7, #4]
 8004d8c:	f7ff f9ae 	bl	80040ec <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2200      	movs	r2, #0
 8004d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 0310 	and.w	r3, r3, #16
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d116      	bne.n	8004dd8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004dae:	4b10      	ldr	r3, [pc, #64]	; (8004df0 <HAL_ADC_Init+0x84>)
 8004db0:	4013      	ands	r3, r2
 8004db2:	f043 0202 	orr.w	r2, r3, #2
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004dba:	6878      	ldr	r0, [r7, #4]
 8004dbc:	f000 fab6 	bl	800532c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dca:	f023 0303 	bic.w	r3, r3, #3
 8004dce:	f043 0201 	orr.w	r2, r3, #1
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	641a      	str	r2, [r3, #64]	; 0x40
 8004dd6:	e001      	b.n	8004ddc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004dd8:	2301      	movs	r3, #1
 8004dda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004de4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004de6:	4618      	mov	r0, r3
 8004de8:	3710      	adds	r7, #16
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}
 8004dee:	bf00      	nop
 8004df0:	ffffeefd 	.word	0xffffeefd

08004df4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004df4:	b480      	push	{r7}
 8004df6:	b085      	sub	sp, #20
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004dfc:	2300      	movs	r3, #0
 8004dfe:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e06:	2b01      	cmp	r3, #1
 8004e08:	d101      	bne.n	8004e0e <HAL_ADC_Start+0x1a>
 8004e0a:	2302      	movs	r3, #2
 8004e0c:	e0a0      	b.n	8004f50 <HAL_ADC_Start+0x15c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	2201      	movs	r2, #1
 8004e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f003 0301 	and.w	r3, r3, #1
 8004e20:	2b01      	cmp	r3, #1
 8004e22:	d018      	beq.n	8004e56 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689a      	ldr	r2, [r3, #8]
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0201 	orr.w	r2, r2, #1
 8004e32:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004e34:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_ADC_Start+0x168>)
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	4a49      	ldr	r2, [pc, #292]	; (8004f60 <HAL_ADC_Start+0x16c>)
 8004e3a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3e:	0c9a      	lsrs	r2, r3, #18
 8004e40:	4613      	mov	r3, r2
 8004e42:	005b      	lsls	r3, r3, #1
 8004e44:	4413      	add	r3, r2
 8004e46:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004e48:	e002      	b.n	8004e50 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	3b01      	subs	r3, #1
 8004e4e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d1f9      	bne.n	8004e4a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689b      	ldr	r3, [r3, #8]
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b01      	cmp	r3, #1
 8004e62:	d174      	bne.n	8004f4e <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004e68:	4b3e      	ldr	r3, [pc, #248]	; (8004f64 <HAL_ADC_Start+0x170>)
 8004e6a:	4013      	ands	r3, r2
 8004e6c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d007      	beq.n	8004e92 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e86:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004e8a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e96:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e9e:	d106      	bne.n	8004eae <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea4:	f023 0206 	bic.w	r2, r3, #6
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	645a      	str	r2, [r3, #68]	; 0x44
 8004eac:	e002      	b.n	8004eb4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2200      	movs	r2, #0
 8004eb2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2200      	movs	r2, #0
 8004eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ec4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004ec6:	4b28      	ldr	r3, [pc, #160]	; (8004f68 <HAL_ADC_Start+0x174>)
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	f003 031f 	and.w	r3, r3, #31
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d10f      	bne.n	8004ef2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d136      	bne.n	8004f4e <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	689a      	ldr	r2, [r3, #8]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004eee:	609a      	str	r2, [r3, #8]
 8004ef0:	e02d      	b.n	8004f4e <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	4a1d      	ldr	r2, [pc, #116]	; (8004f6c <HAL_ADC_Start+0x178>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d10e      	bne.n	8004f1a <HAL_ADC_Start+0x126>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	689b      	ldr	r3, [r3, #8]
 8004f02:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d107      	bne.n	8004f1a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	689a      	ldr	r2, [r3, #8]
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f18:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_ADC_Start+0x174>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	f003 0310 	and.w	r3, r3, #16
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d113      	bne.n	8004f4e <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a11      	ldr	r2, [pc, #68]	; (8004f70 <HAL_ADC_Start+0x17c>)
 8004f2c:	4293      	cmp	r3, r2
 8004f2e:	d10e      	bne.n	8004f4e <HAL_ADC_Start+0x15a>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	689b      	ldr	r3, [r3, #8]
 8004f36:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d107      	bne.n	8004f4e <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	689a      	ldr	r2, [r3, #8]
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004f4c:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004f4e:	2300      	movs	r3, #0
}
 8004f50:	4618      	mov	r0, r3
 8004f52:	3714      	adds	r7, #20
 8004f54:	46bd      	mov	sp, r7
 8004f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f5a:	4770      	bx	lr
 8004f5c:	2000004c 	.word	0x2000004c
 8004f60:	431bde83 	.word	0x431bde83
 8004f64:	fffff8fe 	.word	0xfffff8fe
 8004f68:	40012300 	.word	0x40012300
 8004f6c:	40012000 	.word	0x40012000
 8004f70:	40012200 	.word	0x40012200

08004f74 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004f74:	b580      	push	{r7, lr}
 8004f76:	b084      	sub	sp, #16
 8004f78:	af00      	add	r7, sp, #0
 8004f7a:	6078      	str	r0, [r7, #4]
 8004f7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004f7e:	2300      	movs	r3, #0
 8004f80:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	689b      	ldr	r3, [r3, #8]
 8004f88:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f8c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f90:	d113      	bne.n	8004fba <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fa0:	d10b      	bne.n	8004fba <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa6:	f043 0220 	orr.w	r2, r3, #32
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e05c      	b.n	8005074 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004fba:	f7ff fea9 	bl	8004d10 <HAL_GetTick>
 8004fbe:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004fc0:	e01a      	b.n	8004ff8 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fc8:	d016      	beq.n	8004ff8 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004fca:	683b      	ldr	r3, [r7, #0]
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d007      	beq.n	8004fe0 <HAL_ADC_PollForConversion+0x6c>
 8004fd0:	f7ff fe9e 	bl	8004d10 <HAL_GetTick>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	1ad3      	subs	r3, r2, r3
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d20b      	bcs.n	8004ff8 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe4:	f043 0204 	orr.w	r2, r3, #4
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2200      	movs	r2, #0
 8004ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004ff4:	2303      	movs	r3, #3
 8004ff6:	e03d      	b.n	8005074 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f003 0302 	and.w	r3, r3, #2
 8005002:	2b02      	cmp	r3, #2
 8005004:	d1dd      	bne.n	8004fc2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	f06f 0212 	mvn.w	r2, #18
 800500e:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005014:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	689b      	ldr	r3, [r3, #8]
 8005022:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005026:	2b00      	cmp	r3, #0
 8005028:	d123      	bne.n	8005072 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800502e:	2b00      	cmp	r3, #0
 8005030:	d11f      	bne.n	8005072 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005038:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800503c:	2b00      	cmp	r3, #0
 800503e:	d006      	beq.n	800504e <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	689b      	ldr	r3, [r3, #8]
 8005046:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800504a:	2b00      	cmp	r3, #0
 800504c:	d111      	bne.n	8005072 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005062:	2b00      	cmp	r3, #0
 8005064:	d105      	bne.n	8005072 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800506a:	f043 0201 	orr.w	r2, r3, #1
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005072:	2300      	movs	r3, #0
}
 8005074:	4618      	mov	r0, r3
 8005076:	3710      	adds	r7, #16
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}

0800507c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800507c:	b480      	push	{r7}
 800507e:	b083      	sub	sp, #12
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800508a:	4618      	mov	r0, r3
 800508c:	370c      	adds	r7, #12
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
	...

08005098 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
 80050a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80050a2:	2300      	movs	r3, #0
 80050a4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050ac:	2b01      	cmp	r3, #1
 80050ae:	d101      	bne.n	80050b4 <HAL_ADC_ConfigChannel+0x1c>
 80050b0:	2302      	movs	r3, #2
 80050b2:	e12a      	b.n	800530a <HAL_ADC_ConfigChannel+0x272>
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2201      	movs	r2, #1
 80050b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	2b09      	cmp	r3, #9
 80050c2:	d93a      	bls.n	800513a <HAL_ADC_ConfigChannel+0xa2>
 80050c4:	683b      	ldr	r3, [r7, #0]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80050cc:	d035      	beq.n	800513a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68d9      	ldr	r1, [r3, #12]
 80050d4:	683b      	ldr	r3, [r7, #0]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	b29b      	uxth	r3, r3
 80050da:	461a      	mov	r2, r3
 80050dc:	4613      	mov	r3, r2
 80050de:	005b      	lsls	r3, r3, #1
 80050e0:	4413      	add	r3, r2
 80050e2:	3b1e      	subs	r3, #30
 80050e4:	2207      	movs	r2, #7
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	43da      	mvns	r2, r3
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	400a      	ands	r2, r1
 80050f2:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a87      	ldr	r2, [pc, #540]	; (8005318 <HAL_ADC_ConfigChannel+0x280>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d10a      	bne.n	8005114 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	68d9      	ldr	r1, [r3, #12]
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	061a      	lsls	r2, r3, #24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	430a      	orrs	r2, r1
 8005110:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005112:	e035      	b.n	8005180 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	68d9      	ldr	r1, [r3, #12]
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	689a      	ldr	r2, [r3, #8]
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	b29b      	uxth	r3, r3
 8005124:	4618      	mov	r0, r3
 8005126:	4603      	mov	r3, r0
 8005128:	005b      	lsls	r3, r3, #1
 800512a:	4403      	add	r3, r0
 800512c:	3b1e      	subs	r3, #30
 800512e:	409a      	lsls	r2, r3
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005138:	e022      	b.n	8005180 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6919      	ldr	r1, [r3, #16]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	b29b      	uxth	r3, r3
 8005146:	461a      	mov	r2, r3
 8005148:	4613      	mov	r3, r2
 800514a:	005b      	lsls	r3, r3, #1
 800514c:	4413      	add	r3, r2
 800514e:	2207      	movs	r2, #7
 8005150:	fa02 f303 	lsl.w	r3, r2, r3
 8005154:	43da      	mvns	r2, r3
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	400a      	ands	r2, r1
 800515c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	6919      	ldr	r1, [r3, #16]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	689a      	ldr	r2, [r3, #8]
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	b29b      	uxth	r3, r3
 800516e:	4618      	mov	r0, r3
 8005170:	4603      	mov	r3, r0
 8005172:	005b      	lsls	r3, r3, #1
 8005174:	4403      	add	r3, r0
 8005176:	409a      	lsls	r2, r3
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d824      	bhi.n	80051d2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	685a      	ldr	r2, [r3, #4]
 8005192:	4613      	mov	r3, r2
 8005194:	009b      	lsls	r3, r3, #2
 8005196:	4413      	add	r3, r2
 8005198:	3b05      	subs	r3, #5
 800519a:	221f      	movs	r2, #31
 800519c:	fa02 f303 	lsl.w	r3, r2, r3
 80051a0:	43da      	mvns	r2, r3
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	400a      	ands	r2, r1
 80051a8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80051b0:	683b      	ldr	r3, [r7, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	b29b      	uxth	r3, r3
 80051b6:	4618      	mov	r0, r3
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4613      	mov	r3, r2
 80051be:	009b      	lsls	r3, r3, #2
 80051c0:	4413      	add	r3, r2
 80051c2:	3b05      	subs	r3, #5
 80051c4:	fa00 f203 	lsl.w	r2, r0, r3
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	430a      	orrs	r2, r1
 80051ce:	635a      	str	r2, [r3, #52]	; 0x34
 80051d0:	e04c      	b.n	800526c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80051d2:	683b      	ldr	r3, [r7, #0]
 80051d4:	685b      	ldr	r3, [r3, #4]
 80051d6:	2b0c      	cmp	r3, #12
 80051d8:	d824      	bhi.n	8005224 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	685a      	ldr	r2, [r3, #4]
 80051e4:	4613      	mov	r3, r2
 80051e6:	009b      	lsls	r3, r3, #2
 80051e8:	4413      	add	r3, r2
 80051ea:	3b23      	subs	r3, #35	; 0x23
 80051ec:	221f      	movs	r2, #31
 80051ee:	fa02 f303 	lsl.w	r3, r2, r3
 80051f2:	43da      	mvns	r2, r3
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	400a      	ands	r2, r1
 80051fa:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	b29b      	uxth	r3, r3
 8005208:	4618      	mov	r0, r3
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	685a      	ldr	r2, [r3, #4]
 800520e:	4613      	mov	r3, r2
 8005210:	009b      	lsls	r3, r3, #2
 8005212:	4413      	add	r3, r2
 8005214:	3b23      	subs	r3, #35	; 0x23
 8005216:	fa00 f203 	lsl.w	r2, r0, r3
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	430a      	orrs	r2, r1
 8005220:	631a      	str	r2, [r3, #48]	; 0x30
 8005222:	e023      	b.n	800526c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	685a      	ldr	r2, [r3, #4]
 800522e:	4613      	mov	r3, r2
 8005230:	009b      	lsls	r3, r3, #2
 8005232:	4413      	add	r3, r2
 8005234:	3b41      	subs	r3, #65	; 0x41
 8005236:	221f      	movs	r2, #31
 8005238:	fa02 f303 	lsl.w	r3, r2, r3
 800523c:	43da      	mvns	r2, r3
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	400a      	ands	r2, r1
 8005244:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	b29b      	uxth	r3, r3
 8005252:	4618      	mov	r0, r3
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685a      	ldr	r2, [r3, #4]
 8005258:	4613      	mov	r3, r2
 800525a:	009b      	lsls	r3, r3, #2
 800525c:	4413      	add	r3, r2
 800525e:	3b41      	subs	r3, #65	; 0x41
 8005260:	fa00 f203 	lsl.w	r2, r0, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	430a      	orrs	r2, r1
 800526a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2a      	ldr	r2, [pc, #168]	; (800531c <HAL_ADC_ConfigChannel+0x284>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d10a      	bne.n	800528c <HAL_ADC_ConfigChannel+0x1f4>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800527e:	d105      	bne.n	800528c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005280:	4b27      	ldr	r3, [pc, #156]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a26      	ldr	r2, [pc, #152]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 8005286:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800528a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a22      	ldr	r2, [pc, #136]	; (800531c <HAL_ADC_ConfigChannel+0x284>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d109      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x212>
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	2b12      	cmp	r3, #18
 800529c:	d105      	bne.n	80052aa <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800529e:	4b20      	ldr	r3, [pc, #128]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a1f      	ldr	r2, [pc, #124]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 80052a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052a8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	4a1b      	ldr	r2, [pc, #108]	; (800531c <HAL_ADC_ConfigChannel+0x284>)
 80052b0:	4293      	cmp	r3, r2
 80052b2:	d125      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x268>
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a17      	ldr	r2, [pc, #92]	; (8005318 <HAL_ADC_ConfigChannel+0x280>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d003      	beq.n	80052c6 <HAL_ADC_ConfigChannel+0x22e>
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	2b11      	cmp	r3, #17
 80052c4:	d11c      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80052c6:	4b16      	ldr	r3, [pc, #88]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	4a15      	ldr	r2, [pc, #84]	; (8005320 <HAL_ADC_ConfigChannel+0x288>)
 80052cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80052d0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80052d2:	683b      	ldr	r3, [r7, #0]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a10      	ldr	r2, [pc, #64]	; (8005318 <HAL_ADC_ConfigChannel+0x280>)
 80052d8:	4293      	cmp	r3, r2
 80052da:	d111      	bne.n	8005300 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80052dc:	4b11      	ldr	r3, [pc, #68]	; (8005324 <HAL_ADC_ConfigChannel+0x28c>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	4a11      	ldr	r2, [pc, #68]	; (8005328 <HAL_ADC_ConfigChannel+0x290>)
 80052e2:	fba2 2303 	umull	r2, r3, r2, r3
 80052e6:	0c9a      	lsrs	r2, r3, #18
 80052e8:	4613      	mov	r3, r2
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	4413      	add	r3, r2
 80052ee:	005b      	lsls	r3, r3, #1
 80052f0:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052f2:	e002      	b.n	80052fa <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	3b01      	subs	r3, #1
 80052f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f9      	bne.n	80052f4 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005308:	2300      	movs	r3, #0
}
 800530a:	4618      	mov	r0, r3
 800530c:	3714      	adds	r7, #20
 800530e:	46bd      	mov	sp, r7
 8005310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005314:	4770      	bx	lr
 8005316:	bf00      	nop
 8005318:	10000012 	.word	0x10000012
 800531c:	40012000 	.word	0x40012000
 8005320:	40012300 	.word	0x40012300
 8005324:	2000004c 	.word	0x2000004c
 8005328:	431bde83 	.word	0x431bde83

0800532c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005334:	4b78      	ldr	r3, [pc, #480]	; (8005518 <ADC_Init+0x1ec>)
 8005336:	685b      	ldr	r3, [r3, #4]
 8005338:	4a77      	ldr	r2, [pc, #476]	; (8005518 <ADC_Init+0x1ec>)
 800533a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800533e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005340:	4b75      	ldr	r3, [pc, #468]	; (8005518 <ADC_Init+0x1ec>)
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	685b      	ldr	r3, [r3, #4]
 8005348:	4973      	ldr	r1, [pc, #460]	; (8005518 <ADC_Init+0x1ec>)
 800534a:	4313      	orrs	r3, r2
 800534c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	685a      	ldr	r2, [r3, #4]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800535c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	6859      	ldr	r1, [r3, #4]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	691b      	ldr	r3, [r3, #16]
 8005368:	021a      	lsls	r2, r3, #8
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	430a      	orrs	r2, r1
 8005370:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	685a      	ldr	r2, [r3, #4]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005380:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6859      	ldr	r1, [r3, #4]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689a      	ldr	r2, [r3, #8]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	430a      	orrs	r2, r1
 8005392:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	689a      	ldr	r2, [r3, #8]
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6899      	ldr	r1, [r3, #8]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	68da      	ldr	r2, [r3, #12]
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	430a      	orrs	r2, r1
 80053b4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053ba:	4a58      	ldr	r2, [pc, #352]	; (800551c <ADC_Init+0x1f0>)
 80053bc:	4293      	cmp	r3, r2
 80053be:	d022      	beq.n	8005406 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689a      	ldr	r2, [r3, #8]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80053ce:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6899      	ldr	r1, [r3, #8]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	689a      	ldr	r2, [r3, #8]
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80053f0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6899      	ldr	r1, [r3, #8]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	609a      	str	r2, [r3, #8]
 8005404:	e00f      	b.n	8005426 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	689a      	ldr	r2, [r3, #8]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005414:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	689a      	ldr	r2, [r3, #8]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005424:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	689a      	ldr	r2, [r3, #8]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0202 	bic.w	r2, r2, #2
 8005434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6899      	ldr	r1, [r3, #8]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	699b      	ldr	r3, [r3, #24]
 8005440:	005a      	lsls	r2, r3, #1
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	430a      	orrs	r2, r1
 8005448:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d01b      	beq.n	800548c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	685a      	ldr	r2, [r3, #4]
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005462:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	685a      	ldr	r2, [r3, #4]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8005472:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6859      	ldr	r1, [r3, #4]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800547e:	3b01      	subs	r3, #1
 8005480:	035a      	lsls	r2, r3, #13
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	430a      	orrs	r2, r1
 8005488:	605a      	str	r2, [r3, #4]
 800548a:	e007      	b.n	800549c <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800549a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80054aa:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	69db      	ldr	r3, [r3, #28]
 80054b6:	3b01      	subs	r3, #1
 80054b8:	051a      	lsls	r2, r3, #20
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	430a      	orrs	r2, r1
 80054c0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80054d0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	6899      	ldr	r1, [r3, #8]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80054de:	025a      	lsls	r2, r3, #9
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	430a      	orrs	r2, r1
 80054e6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	689a      	ldr	r2, [r3, #8]
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054f6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	6899      	ldr	r1, [r3, #8]
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	029a      	lsls	r2, r3, #10
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	430a      	orrs	r2, r1
 800550a:	609a      	str	r2, [r3, #8]
}
 800550c:	bf00      	nop
 800550e:	370c      	adds	r7, #12
 8005510:	46bd      	mov	sp, r7
 8005512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005516:	4770      	bx	lr
 8005518:	40012300 	.word	0x40012300
 800551c:	0f000001 	.word	0x0f000001

08005520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005520:	b480      	push	{r7}
 8005522:	b085      	sub	sp, #20
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f003 0307 	and.w	r3, r3, #7
 800552e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005530:	4b0b      	ldr	r3, [pc, #44]	; (8005560 <__NVIC_SetPriorityGrouping+0x40>)
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005536:	68ba      	ldr	r2, [r7, #8]
 8005538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800553c:	4013      	ands	r3, r2
 800553e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005544:	68bb      	ldr	r3, [r7, #8]
 8005546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005548:	4b06      	ldr	r3, [pc, #24]	; (8005564 <__NVIC_SetPriorityGrouping+0x44>)
 800554a:	4313      	orrs	r3, r2
 800554c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800554e:	4a04      	ldr	r2, [pc, #16]	; (8005560 <__NVIC_SetPriorityGrouping+0x40>)
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	60d3      	str	r3, [r2, #12]
}
 8005554:	bf00      	nop
 8005556:	3714      	adds	r7, #20
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr
 8005560:	e000ed00 	.word	0xe000ed00
 8005564:	05fa0000 	.word	0x05fa0000

08005568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005568:	b480      	push	{r7}
 800556a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800556c:	4b04      	ldr	r3, [pc, #16]	; (8005580 <__NVIC_GetPriorityGrouping+0x18>)
 800556e:	68db      	ldr	r3, [r3, #12]
 8005570:	0a1b      	lsrs	r3, r3, #8
 8005572:	f003 0307 	and.w	r3, r3, #7
}
 8005576:	4618      	mov	r0, r3
 8005578:	46bd      	mov	sp, r7
 800557a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557e:	4770      	bx	lr
 8005580:	e000ed00 	.word	0xe000ed00

08005584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005584:	b480      	push	{r7}
 8005586:	b083      	sub	sp, #12
 8005588:	af00      	add	r7, sp, #0
 800558a:	4603      	mov	r3, r0
 800558c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800558e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005592:	2b00      	cmp	r3, #0
 8005594:	db0b      	blt.n	80055ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005596:	79fb      	ldrb	r3, [r7, #7]
 8005598:	f003 021f 	and.w	r2, r3, #31
 800559c:	4907      	ldr	r1, [pc, #28]	; (80055bc <__NVIC_EnableIRQ+0x38>)
 800559e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055a2:	095b      	lsrs	r3, r3, #5
 80055a4:	2001      	movs	r0, #1
 80055a6:	fa00 f202 	lsl.w	r2, r0, r2
 80055aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80055ae:	bf00      	nop
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b8:	4770      	bx	lr
 80055ba:	bf00      	nop
 80055bc:	e000e100 	.word	0xe000e100

080055c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80055c0:	b480      	push	{r7}
 80055c2:	b083      	sub	sp, #12
 80055c4:	af00      	add	r7, sp, #0
 80055c6:	4603      	mov	r3, r0
 80055c8:	6039      	str	r1, [r7, #0]
 80055ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80055cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	db0a      	blt.n	80055ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055d4:	683b      	ldr	r3, [r7, #0]
 80055d6:	b2da      	uxtb	r2, r3
 80055d8:	490c      	ldr	r1, [pc, #48]	; (800560c <__NVIC_SetPriority+0x4c>)
 80055da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055de:	0112      	lsls	r2, r2, #4
 80055e0:	b2d2      	uxtb	r2, r2
 80055e2:	440b      	add	r3, r1
 80055e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80055e8:	e00a      	b.n	8005600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80055ea:	683b      	ldr	r3, [r7, #0]
 80055ec:	b2da      	uxtb	r2, r3
 80055ee:	4908      	ldr	r1, [pc, #32]	; (8005610 <__NVIC_SetPriority+0x50>)
 80055f0:	79fb      	ldrb	r3, [r7, #7]
 80055f2:	f003 030f 	and.w	r3, r3, #15
 80055f6:	3b04      	subs	r3, #4
 80055f8:	0112      	lsls	r2, r2, #4
 80055fa:	b2d2      	uxtb	r2, r2
 80055fc:	440b      	add	r3, r1
 80055fe:	761a      	strb	r2, [r3, #24]
}
 8005600:	bf00      	nop
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr
 800560c:	e000e100 	.word	0xe000e100
 8005610:	e000ed00 	.word	0xe000ed00

08005614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005614:	b480      	push	{r7}
 8005616:	b089      	sub	sp, #36	; 0x24
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 0307 	and.w	r3, r3, #7
 8005626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005628:	69fb      	ldr	r3, [r7, #28]
 800562a:	f1c3 0307 	rsb	r3, r3, #7
 800562e:	2b04      	cmp	r3, #4
 8005630:	bf28      	it	cs
 8005632:	2304      	movcs	r3, #4
 8005634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005636:	69fb      	ldr	r3, [r7, #28]
 8005638:	3304      	adds	r3, #4
 800563a:	2b06      	cmp	r3, #6
 800563c:	d902      	bls.n	8005644 <NVIC_EncodePriority+0x30>
 800563e:	69fb      	ldr	r3, [r7, #28]
 8005640:	3b03      	subs	r3, #3
 8005642:	e000      	b.n	8005646 <NVIC_EncodePriority+0x32>
 8005644:	2300      	movs	r3, #0
 8005646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005648:	f04f 32ff 	mov.w	r2, #4294967295
 800564c:	69bb      	ldr	r3, [r7, #24]
 800564e:	fa02 f303 	lsl.w	r3, r2, r3
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	401a      	ands	r2, r3
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800565c:	f04f 31ff 	mov.w	r1, #4294967295
 8005660:	697b      	ldr	r3, [r7, #20]
 8005662:	fa01 f303 	lsl.w	r3, r1, r3
 8005666:	43d9      	mvns	r1, r3
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800566c:	4313      	orrs	r3, r2
         );
}
 800566e:	4618      	mov	r0, r3
 8005670:	3724      	adds	r7, #36	; 0x24
 8005672:	46bd      	mov	sp, r7
 8005674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005678:	4770      	bx	lr

0800567a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800567a:	b580      	push	{r7, lr}
 800567c:	b082      	sub	sp, #8
 800567e:	af00      	add	r7, sp, #0
 8005680:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f7ff ff4c 	bl	8005520 <__NVIC_SetPriorityGrouping>
}
 8005688:	bf00      	nop
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bd80      	pop	{r7, pc}

08005690 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	4603      	mov	r3, r0
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80056a2:	f7ff ff61 	bl	8005568 <__NVIC_GetPriorityGrouping>
 80056a6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80056a8:	687a      	ldr	r2, [r7, #4]
 80056aa:	68b9      	ldr	r1, [r7, #8]
 80056ac:	6978      	ldr	r0, [r7, #20]
 80056ae:	f7ff ffb1 	bl	8005614 <NVIC_EncodePriority>
 80056b2:	4602      	mov	r2, r0
 80056b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f7ff ff80 	bl	80055c0 <__NVIC_SetPriority>
}
 80056c0:	bf00      	nop
 80056c2:	3718      	adds	r7, #24
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b082      	sub	sp, #8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	4603      	mov	r3, r0
 80056d0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80056d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80056d6:	4618      	mov	r0, r3
 80056d8:	f7ff ff54 	bl	8005584 <__NVIC_EnableIRQ>
}
 80056dc:	bf00      	nop
 80056de:	3708      	adds	r7, #8
 80056e0:	46bd      	mov	sp, r7
 80056e2:	bd80      	pop	{r7, pc}

080056e4 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e014      	b.n	8005720 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	791b      	ldrb	r3, [r3, #4]
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d105      	bne.n	800570c <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fe fd5e 	bl	80041c8 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2202      	movs	r2, #2
 8005710:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2200      	movs	r2, #0
 8005716:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2201      	movs	r2, #1
 800571c:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800571e:	2300      	movs	r3, #0
}
 8005720:	4618      	mov	r0, r3
 8005722:	3708      	adds	r7, #8
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b082      	sub	sp, #8
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005736:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800573a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800573e:	d118      	bne.n	8005772 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	2204      	movs	r2, #4
 8005744:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f043 0201 	orr.w	r2, r3, #1
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800575a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800576a:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f000 f825 	bl	80057bc <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005778:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800577c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005780:	d118      	bne.n	80057b4 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2204      	movs	r2, #4
 8005786:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	691b      	ldr	r3, [r3, #16]
 800578c:	f043 0202 	orr.w	r2, r3, #2
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800579c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	681b      	ldr	r3, [r3, #0]
 80057a2:	681a      	ldr	r2, [r3, #0]
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80057ac:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80057ae:	6878      	ldr	r0, [r7, #4]
 80057b0:	f000 f85b 	bl	800586a <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80057b4:	bf00      	nop
 80057b6:	3708      	adds	r7, #8
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}

080057bc <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80057bc:	b480      	push	{r7}
 80057be:	b083      	sub	sp, #12
 80057c0:	af00      	add	r7, sp, #0
 80057c2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ce:	4770      	bx	lr

080057d0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80057d0:	b480      	push	{r7}
 80057d2:	b087      	sub	sp, #28
 80057d4:	af00      	add	r7, sp, #0
 80057d6:	60f8      	str	r0, [r7, #12]
 80057d8:	60b9      	str	r1, [r7, #8]
 80057da:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80057dc:	2300      	movs	r3, #0
 80057de:	617b      	str	r3, [r7, #20]
 80057e0:	2300      	movs	r3, #0
 80057e2:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	795b      	ldrb	r3, [r3, #5]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d101      	bne.n	80057f0 <HAL_DAC_ConfigChannel+0x20>
 80057ec:	2302      	movs	r3, #2
 80057ee:	e036      	b.n	800585e <HAL_DAC_ConfigChannel+0x8e>
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	2202      	movs	r2, #2
 80057fa:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005804:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	fa02 f303 	lsl.w	r3, r2, r3
 800580e:	43db      	mvns	r3, r3
 8005810:	697a      	ldr	r2, [r7, #20]
 8005812:	4013      	ands	r3, r2
 8005814:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005816:	68bb      	ldr	r3, [r7, #8]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	68bb      	ldr	r3, [r7, #8]
 800581c:	685b      	ldr	r3, [r3, #4]
 800581e:	4313      	orrs	r3, r2
 8005820:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8005822:	693a      	ldr	r2, [r7, #16]
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	fa02 f303 	lsl.w	r3, r2, r3
 800582a:	697a      	ldr	r2, [r7, #20]
 800582c:	4313      	orrs	r3, r2
 800582e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6819      	ldr	r1, [r3, #0]
 800583e:	22c0      	movs	r2, #192	; 0xc0
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	fa02 f303 	lsl.w	r3, r2, r3
 8005846:	43da      	mvns	r2, r3
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	400a      	ands	r2, r1
 800584e:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	2201      	movs	r2, #1
 8005854:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	2200      	movs	r2, #0
 800585a:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 800585c:	2300      	movs	r3, #0
}
 800585e:	4618      	mov	r0, r3
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr

0800586a <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800586a:	b480      	push	{r7}
 800586c:	b083      	sub	sp, #12
 800586e:	af00      	add	r7, sp, #0
 8005870:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005872:	bf00      	nop
 8005874:	370c      	adds	r7, #12
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr
	...

08005880 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	b086      	sub	sp, #24
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005888:	2300      	movs	r3, #0
 800588a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800588c:	f7ff fa40 	bl	8004d10 <HAL_GetTick>
 8005890:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2b00      	cmp	r3, #0
 8005896:	d101      	bne.n	800589c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005898:	2301      	movs	r3, #1
 800589a:	e099      	b.n	80059d0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2202      	movs	r2, #2
 80058a8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	681a      	ldr	r2, [r3, #0]
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	f022 0201 	bic.w	r2, r2, #1
 80058ba:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058bc:	e00f      	b.n	80058de <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80058be:	f7ff fa27 	bl	8004d10 <HAL_GetTick>
 80058c2:	4602      	mov	r2, r0
 80058c4:	693b      	ldr	r3, [r7, #16]
 80058c6:	1ad3      	subs	r3, r2, r3
 80058c8:	2b05      	cmp	r3, #5
 80058ca:	d908      	bls.n	80058de <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2220      	movs	r2, #32
 80058d0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2203      	movs	r2, #3
 80058d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e078      	b.n	80059d0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f003 0301 	and.w	r3, r3, #1
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d1e8      	bne.n	80058be <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80058f4:	697a      	ldr	r2, [r7, #20]
 80058f6:	4b38      	ldr	r3, [pc, #224]	; (80059d8 <HAL_DMA_Init+0x158>)
 80058f8:	4013      	ands	r3, r2
 80058fa:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	685a      	ldr	r2, [r3, #4]
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800590a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	691b      	ldr	r3, [r3, #16]
 8005910:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005916:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	699b      	ldr	r3, [r3, #24]
 800591c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005922:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6a1b      	ldr	r3, [r3, #32]
 8005928:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	4313      	orrs	r3, r2
 800592e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	2b04      	cmp	r3, #4
 8005936:	d107      	bne.n	8005948 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005940:	4313      	orrs	r3, r2
 8005942:	697a      	ldr	r2, [r7, #20]
 8005944:	4313      	orrs	r3, r2
 8005946:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005958:	697b      	ldr	r3, [r7, #20]
 800595a:	f023 0307 	bic.w	r3, r3, #7
 800595e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	697a      	ldr	r2, [r7, #20]
 8005966:	4313      	orrs	r3, r2
 8005968:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596e:	2b04      	cmp	r3, #4
 8005970:	d117      	bne.n	80059a2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005976:	697a      	ldr	r2, [r7, #20]
 8005978:	4313      	orrs	r3, r2
 800597a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	2b00      	cmp	r3, #0
 8005982:	d00e      	beq.n	80059a2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005984:	6878      	ldr	r0, [r7, #4]
 8005986:	f000 f8df 	bl	8005b48 <DMA_CheckFifoParam>
 800598a:	4603      	mov	r3, r0
 800598c:	2b00      	cmp	r3, #0
 800598e:	d008      	beq.n	80059a2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2240      	movs	r2, #64	; 0x40
 8005994:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	2201      	movs	r2, #1
 800599a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800599e:	2301      	movs	r3, #1
 80059a0:	e016      	b.n	80059d0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	697a      	ldr	r2, [r7, #20]
 80059a8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f000 f896 	bl	8005adc <DMA_CalcBaseAndBitshift>
 80059b0:	4603      	mov	r3, r0
 80059b2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b8:	223f      	movs	r2, #63	; 0x3f
 80059ba:	409a      	lsls	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2201      	movs	r2, #1
 80059ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3718      	adds	r7, #24
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}
 80059d8:	f010803f 	.word	0xf010803f

080059dc <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e050      	b.n	8005a90 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f4:	b2db      	uxtb	r3, r3
 80059f6:	2b02      	cmp	r3, #2
 80059f8:	d101      	bne.n	80059fe <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
 80059fc:	e048      	b.n	8005a90 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	681a      	ldr	r2, [r3, #0]
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	f022 0201 	bic.w	r2, r2, #1
 8005a0c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	2200      	movs	r2, #0
 8005a14:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	2200      	movs	r2, #0
 8005a24:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	2200      	movs	r2, #0
 8005a34:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2221      	movs	r2, #33	; 0x21
 8005a3c:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f84c 	bl	8005adc <DMA_CalcBaseAndBitshift>
 8005a44:	4603      	mov	r3, r0
 8005a46:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005a4c:	223f      	movs	r2, #63	; 0x3f
 8005a4e:	409a      	lsls	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	2200      	movs	r2, #0
 8005a6a:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	2200      	movs	r2, #0
 8005a76:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	2200      	movs	r2, #0
 8005a82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2200      	movs	r2, #0
 8005a8a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3710      	adds	r7, #16
 8005a94:	46bd      	mov	sp, r7
 8005a96:	bd80      	pop	{r7, pc}

08005a98 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005a98:	b480      	push	{r7}
 8005a9a:	b083      	sub	sp, #12
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005aa6:	b2db      	uxtb	r3, r3
 8005aa8:	2b02      	cmp	r3, #2
 8005aaa:	d004      	beq.n	8005ab6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2280      	movs	r2, #128	; 0x80
 8005ab0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	e00c      	b.n	8005ad0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2205      	movs	r2, #5
 8005aba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f022 0201 	bic.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005ace:	2300      	movs	r3, #0
}
 8005ad0:	4618      	mov	r0, r3
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b085      	sub	sp, #20
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	3b10      	subs	r3, #16
 8005aec:	4a13      	ldr	r2, [pc, #76]	; (8005b3c <DMA_CalcBaseAndBitshift+0x60>)
 8005aee:	fba2 2303 	umull	r2, r3, r2, r3
 8005af2:	091b      	lsrs	r3, r3, #4
 8005af4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005af6:	4a12      	ldr	r2, [pc, #72]	; (8005b40 <DMA_CalcBaseAndBitshift+0x64>)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	461a      	mov	r2, r3
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b03      	cmp	r3, #3
 8005b08:	d908      	bls.n	8005b1c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	461a      	mov	r2, r3
 8005b10:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <DMA_CalcBaseAndBitshift+0x68>)
 8005b12:	4013      	ands	r3, r2
 8005b14:	1d1a      	adds	r2, r3, #4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	659a      	str	r2, [r3, #88]	; 0x58
 8005b1a:	e006      	b.n	8005b2a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	461a      	mov	r2, r3
 8005b22:	4b08      	ldr	r3, [pc, #32]	; (8005b44 <DMA_CalcBaseAndBitshift+0x68>)
 8005b24:	4013      	ands	r3, r2
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	aaaaaaab 	.word	0xaaaaaaab
 8005b40:	08010ac4 	.word	0x08010ac4
 8005b44:	fffffc00 	.word	0xfffffc00

08005b48 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005b48:	b480      	push	{r7}
 8005b4a:	b085      	sub	sp, #20
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005b50:	2300      	movs	r3, #0
 8005b52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b58:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	699b      	ldr	r3, [r3, #24]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d11f      	bne.n	8005ba2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005b62:	68bb      	ldr	r3, [r7, #8]
 8005b64:	2b03      	cmp	r3, #3
 8005b66:	d855      	bhi.n	8005c14 <DMA_CheckFifoParam+0xcc>
 8005b68:	a201      	add	r2, pc, #4	; (adr r2, 8005b70 <DMA_CheckFifoParam+0x28>)
 8005b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b6e:	bf00      	nop
 8005b70:	08005b81 	.word	0x08005b81
 8005b74:	08005b93 	.word	0x08005b93
 8005b78:	08005b81 	.word	0x08005b81
 8005b7c:	08005c15 	.word	0x08005c15
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b84:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d045      	beq.n	8005c18 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b90:	e042      	b.n	8005c18 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b96:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b9a:	d13f      	bne.n	8005c1c <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005b9c:	2301      	movs	r3, #1
 8005b9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005ba0:	e03c      	b.n	8005c1c <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005baa:	d121      	bne.n	8005bf0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	2b03      	cmp	r3, #3
 8005bb0:	d836      	bhi.n	8005c20 <DMA_CheckFifoParam+0xd8>
 8005bb2:	a201      	add	r2, pc, #4	; (adr r2, 8005bb8 <DMA_CheckFifoParam+0x70>)
 8005bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005bb8:	08005bc9 	.word	0x08005bc9
 8005bbc:	08005bcf 	.word	0x08005bcf
 8005bc0:	08005bc9 	.word	0x08005bc9
 8005bc4:	08005be1 	.word	0x08005be1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	73fb      	strb	r3, [r7, #15]
      break;
 8005bcc:	e02f      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d024      	beq.n	8005c24 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005bda:	2301      	movs	r3, #1
 8005bdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005bde:	e021      	b.n	8005c24 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005be8:	d11e      	bne.n	8005c28 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005bea:	2301      	movs	r3, #1
 8005bec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005bee:	e01b      	b.n	8005c28 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d902      	bls.n	8005bfc <DMA_CheckFifoParam+0xb4>
 8005bf6:	2b03      	cmp	r3, #3
 8005bf8:	d003      	beq.n	8005c02 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005bfa:	e018      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8005c00:	e015      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005c0e:	2301      	movs	r3, #1
 8005c10:	73fb      	strb	r3, [r7, #15]
      break;
 8005c12:	e00b      	b.n	8005c2c <DMA_CheckFifoParam+0xe4>
      break;
 8005c14:	bf00      	nop
 8005c16:	e00a      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c18:	bf00      	nop
 8005c1a:	e008      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c1c:	bf00      	nop
 8005c1e:	e006      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c20:	bf00      	nop
 8005c22:	e004      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c24:	bf00      	nop
 8005c26:	e002      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;   
 8005c28:	bf00      	nop
 8005c2a:	e000      	b.n	8005c2e <DMA_CheckFifoParam+0xe6>
      break;
 8005c2c:	bf00      	nop
    }
  } 
  
  return status; 
 8005c2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3714      	adds	r7, #20
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b082      	sub	sp, #8
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d101      	bne.n	8005c4e <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005c4a:	2301      	movs	r3, #1
 8005c4c:	e039      	b.n	8005cc2 <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d106      	bne.n	8005c68 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2200      	movs	r2, #0
 8005c5e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f7fe faf8 	bl	8004258 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2202      	movs	r2, #2
 8005c6c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	685a      	ldr	r2, [r3, #4]
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	430a      	orrs	r2, r1
 8005c84:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c8c:	f023 0107 	bic.w	r1, r3, #7
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689a      	ldr	r2, [r3, #8]
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	430a      	orrs	r2, r1
 8005c9a:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ca2:	4b0a      	ldr	r3, [pc, #40]	; (8005ccc <HAL_DMA2D_Init+0x90>)
 8005ca4:	4013      	ands	r3, r2
 8005ca6:	687a      	ldr	r2, [r7, #4]
 8005ca8:	68d1      	ldr	r1, [r2, #12]
 8005caa:	687a      	ldr	r2, [r7, #4]
 8005cac:	6812      	ldr	r2, [r2, #0]
 8005cae:	430b      	orrs	r3, r1
 8005cb0:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2201      	movs	r2, #1
 8005cbc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005cc0:	2300      	movs	r3, #0
}
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	3708      	adds	r7, #8
 8005cc6:	46bd      	mov	sp, r7
 8005cc8:	bd80      	pop	{r7, pc}
 8005cca:	bf00      	nop
 8005ccc:	ffffc000 	.word	0xffffc000

08005cd0 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005cd0:	b580      	push	{r7, lr}
 8005cd2:	b086      	sub	sp, #24
 8005cd4:	af02      	add	r7, sp, #8
 8005cd6:	60f8      	str	r0, [r7, #12]
 8005cd8:	60b9      	str	r1, [r7, #8]
 8005cda:	607a      	str	r2, [r7, #4]
 8005cdc:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d101      	bne.n	8005cec <HAL_DMA2D_Start+0x1c>
 8005ce8:	2302      	movs	r3, #2
 8005cea:	e018      	b.n	8005d1e <HAL_DMA2D_Start+0x4e>
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	2201      	movs	r2, #1
 8005cf0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	2202      	movs	r2, #2
 8005cf8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	9300      	str	r3, [sp, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	68b9      	ldr	r1, [r7, #8]
 8005d06:	68f8      	ldr	r0, [r7, #12]
 8005d08:	f000 f988 	bl	800601c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005d0c:	68fb      	ldr	r3, [r7, #12]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681a      	ldr	r2, [r3, #0]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f042 0201 	orr.w	r2, r2, #1
 8005d1a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3710      	adds	r7, #16
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}

08005d26 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b086      	sub	sp, #24
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
 8005d2e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005d30:	2300      	movs	r3, #0
 8005d32:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	f003 0301 	and.w	r3, r3, #1
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d056      	beq.n	8005df0 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005d42:	f7fe ffe5 	bl	8004d10 <HAL_GetTick>
 8005d46:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d48:	e04b      	b.n	8005de2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	685b      	ldr	r3, [r3, #4]
 8005d50:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d023      	beq.n	8005da4 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f003 0320 	and.w	r3, r3, #32
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d005      	beq.n	8005d72 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	f043 0202 	orr.w	r2, r3, #2
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	f003 0301 	and.w	r3, r3, #1
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d005      	beq.n	8005d88 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d80:	f043 0201 	orr.w	r2, r3, #1
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	2221      	movs	r2, #33	; 0x21
 8005d8e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	2204      	movs	r2, #4
 8005d94:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2200      	movs	r2, #0
 8005d9c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005da0:	2301      	movs	r3, #1
 8005da2:	e0a5      	b.n	8005ef0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005daa:	d01a      	beq.n	8005de2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005dac:	f7fe ffb0 	bl	8004d10 <HAL_GetTick>
 8005db0:	4602      	mov	r2, r0
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	1ad3      	subs	r3, r2, r3
 8005db6:	683a      	ldr	r2, [r7, #0]
 8005db8:	429a      	cmp	r2, r3
 8005dba:	d302      	bcc.n	8005dc2 <HAL_DMA2D_PollForTransfer+0x9c>
 8005dbc:	683b      	ldr	r3, [r7, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d10f      	bne.n	8005de2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	f043 0220 	orr.w	r2, r3, #32
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2203      	movs	r2, #3
 8005dd2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005dde:	2303      	movs	r3, #3
 8005de0:	e086      	b.n	8005ef0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	f003 0302 	and.w	r3, r3, #2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	d0ac      	beq.n	8005d4a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	69db      	ldr	r3, [r3, #28]
 8005df6:	f003 0320 	and.w	r3, r3, #32
 8005dfa:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	f003 0320 	and.w	r3, r3, #32
 8005e06:	693a      	ldr	r2, [r7, #16]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d061      	beq.n	8005ed6 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005e12:	f7fe ff7d 	bl	8004d10 <HAL_GetTick>
 8005e16:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e18:	e056      	b.n	8005ec8 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	685b      	ldr	r3, [r3, #4]
 8005e20:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d02e      	beq.n	8005e8a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	f003 0308 	and.w	r3, r3, #8
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d005      	beq.n	8005e42 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e3a:	f043 0204 	orr.w	r2, r3, #4
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f003 0320 	and.w	r3, r3, #32
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d005      	beq.n	8005e58 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e50:	f043 0202 	orr.w	r2, r3, #2
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	f003 0301 	and.w	r3, r3, #1
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d005      	beq.n	8005e6e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005e66:	f043 0201 	orr.w	r2, r3, #1
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	2229      	movs	r2, #41	; 0x29
 8005e74:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2204      	movs	r2, #4
 8005e7a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e032      	b.n	8005ef0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005e8a:	683b      	ldr	r3, [r7, #0]
 8005e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e90:	d01a      	beq.n	8005ec8 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005e92:	f7fe ff3d 	bl	8004d10 <HAL_GetTick>
 8005e96:	4602      	mov	r2, r0
 8005e98:	697b      	ldr	r3, [r7, #20]
 8005e9a:	1ad3      	subs	r3, r2, r3
 8005e9c:	683a      	ldr	r2, [r7, #0]
 8005e9e:	429a      	cmp	r2, r3
 8005ea0:	d302      	bcc.n	8005ea8 <HAL_DMA2D_PollForTransfer+0x182>
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d10f      	bne.n	8005ec8 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005eac:	f043 0220 	orr.w	r2, r3, #32
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2203      	movs	r2, #3
 8005eb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	e013      	b.n	8005ef0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	685b      	ldr	r3, [r3, #4]
 8005ece:	f003 0310 	and.w	r3, r3, #16
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d0a1      	beq.n	8005e1a <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	2212      	movs	r2, #18
 8005edc:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	2201      	movs	r2, #1
 8005ee2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2200      	movs	r2, #0
 8005eea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005eee:	2300      	movs	r3, #0
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	3718      	adds	r7, #24
 8005ef4:	46bd      	mov	sp, r7
 8005ef6:	bd80      	pop	{r7, pc}

08005ef8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	b087      	sub	sp, #28
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
 8005f00:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	685b      	ldr	r3, [r3, #4]
 8005f06:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d101      	bne.n	8005f18 <HAL_DMA2D_ConfigLayer+0x20>
 8005f14:	2302      	movs	r3, #2
 8005f16:	e079      	b.n	800600c <HAL_DMA2D_ConfigLayer+0x114>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005f28:	683b      	ldr	r3, [r7, #0]
 8005f2a:	011b      	lsls	r3, r3, #4
 8005f2c:	3318      	adds	r3, #24
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	4413      	add	r3, r2
 8005f32:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005f34:	693b      	ldr	r3, [r7, #16]
 8005f36:	685a      	ldr	r2, [r3, #4]
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	041b      	lsls	r3, r3, #16
 8005f3e:	4313      	orrs	r3, r2
 8005f40:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005f42:	4b35      	ldr	r3, [pc, #212]	; (8006018 <HAL_DMA2D_ConfigLayer+0x120>)
 8005f44:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f46:	693b      	ldr	r3, [r7, #16]
 8005f48:	685b      	ldr	r3, [r3, #4]
 8005f4a:	2b0a      	cmp	r3, #10
 8005f4c:	d003      	beq.n	8005f56 <HAL_DMA2D_ConfigLayer+0x5e>
 8005f4e:	693b      	ldr	r3, [r7, #16]
 8005f50:	685b      	ldr	r3, [r3, #4]
 8005f52:	2b09      	cmp	r3, #9
 8005f54:	d107      	bne.n	8005f66 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005f56:	693b      	ldr	r3, [r7, #16]
 8005f58:	68db      	ldr	r3, [r3, #12]
 8005f5a:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005f5e:	697a      	ldr	r2, [r7, #20]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	617b      	str	r3, [r7, #20]
 8005f64:	e005      	b.n	8005f72 <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	68db      	ldr	r3, [r3, #12]
 8005f6a:	061b      	lsls	r3, r3, #24
 8005f6c:	697a      	ldr	r2, [r7, #20]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005f72:	683b      	ldr	r3, [r7, #0]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d120      	bne.n	8005fba <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	43db      	mvns	r3, r3
 8005f82:	ea02 0103 	and.w	r1, r2, r3
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	693a      	ldr	r2, [r7, #16]
 8005f96:	6812      	ldr	r2, [r2, #0]
 8005f98:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b0a      	cmp	r3, #10
 8005fa0:	d003      	beq.n	8005faa <HAL_DMA2D_ConfigLayer+0xb2>
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b09      	cmp	r3, #9
 8005fa8:	d127      	bne.n	8005ffa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005faa:	693b      	ldr	r3, [r7, #16]
 8005fac:	68da      	ldr	r2, [r3, #12]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005fb6:	629a      	str	r2, [r3, #40]	; 0x28
 8005fb8:	e01f      	b.n	8005ffa <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	69da      	ldr	r2, [r3, #28]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	43db      	mvns	r3, r3
 8005fc4:	ea02 0103 	and.w	r1, r2, r3
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	697a      	ldr	r2, [r7, #20]
 8005fce:	430a      	orrs	r2, r1
 8005fd0:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	693a      	ldr	r2, [r7, #16]
 8005fd8:	6812      	ldr	r2, [r2, #0]
 8005fda:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	2b0a      	cmp	r3, #10
 8005fe2:	d003      	beq.n	8005fec <HAL_DMA2D_ConfigLayer+0xf4>
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2b09      	cmp	r3, #9
 8005fea:	d106      	bne.n	8005ffa <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005fec:	693b      	ldr	r3, [r7, #16]
 8005fee:	68da      	ldr	r2, [r3, #12]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005ff8:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800600a:	2300      	movs	r3, #0
}
 800600c:	4618      	mov	r0, r3
 800600e:	371c      	adds	r7, #28
 8006010:	46bd      	mov	sp, r7
 8006012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006016:	4770      	bx	lr
 8006018:	ff03000f 	.word	0xff03000f

0800601c <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 800601c:	b480      	push	{r7}
 800601e:	b08b      	sub	sp, #44	; 0x2c
 8006020:	af00      	add	r7, sp, #0
 8006022:	60f8      	str	r0, [r7, #12]
 8006024:	60b9      	str	r1, [r7, #8]
 8006026:	607a      	str	r2, [r7, #4]
 8006028:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006030:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	041a      	lsls	r2, r3, #16
 8006038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800603a:	431a      	orrs	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	430a      	orrs	r2, r1
 8006042:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	687a      	ldr	r2, [r7, #4]
 800604a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006054:	d174      	bne.n	8006140 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800605c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006064:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006066:	68bb      	ldr	r3, [r7, #8]
 8006068:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800606c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	b2db      	uxtb	r3, r3
 8006072:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	689b      	ldr	r3, [r3, #8]
 8006078:	2b00      	cmp	r3, #0
 800607a:	d108      	bne.n	800608e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 800607c:	69ba      	ldr	r2, [r7, #24]
 800607e:	69fb      	ldr	r3, [r7, #28]
 8006080:	431a      	orrs	r2, r3
 8006082:	6a3b      	ldr	r3, [r7, #32]
 8006084:	4313      	orrs	r3, r2
 8006086:	697a      	ldr	r2, [r7, #20]
 8006088:	4313      	orrs	r3, r2
 800608a:	627b      	str	r3, [r7, #36]	; 0x24
 800608c:	e053      	b.n	8006136 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	689b      	ldr	r3, [r3, #8]
 8006092:	2b01      	cmp	r3, #1
 8006094:	d106      	bne.n	80060a4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006096:	69ba      	ldr	r2, [r7, #24]
 8006098:	69fb      	ldr	r3, [r7, #28]
 800609a:	4313      	orrs	r3, r2
 800609c:	697a      	ldr	r2, [r7, #20]
 800609e:	4313      	orrs	r3, r2
 80060a0:	627b      	str	r3, [r7, #36]	; 0x24
 80060a2:	e048      	b.n	8006136 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	2b02      	cmp	r3, #2
 80060aa:	d111      	bne.n	80060d0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80060ac:	69fb      	ldr	r3, [r7, #28]
 80060ae:	0cdb      	lsrs	r3, r3, #19
 80060b0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80060b2:	69bb      	ldr	r3, [r7, #24]
 80060b4:	0a9b      	lsrs	r3, r3, #10
 80060b6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	08db      	lsrs	r3, r3, #3
 80060bc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80060be:	69bb      	ldr	r3, [r7, #24]
 80060c0:	015a      	lsls	r2, r3, #5
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	02db      	lsls	r3, r3, #11
 80060c6:	4313      	orrs	r3, r2
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	627b      	str	r3, [r7, #36]	; 0x24
 80060ce:	e032      	b.n	8006136 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b03      	cmp	r3, #3
 80060d6:	d117      	bne.n	8006108 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80060d8:	6a3b      	ldr	r3, [r7, #32]
 80060da:	0fdb      	lsrs	r3, r3, #31
 80060dc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80060de:	69fb      	ldr	r3, [r7, #28]
 80060e0:	0cdb      	lsrs	r3, r3, #19
 80060e2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80060e4:	69bb      	ldr	r3, [r7, #24]
 80060e6:	0adb      	lsrs	r3, r3, #11
 80060e8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 80060ea:	697b      	ldr	r3, [r7, #20]
 80060ec:	08db      	lsrs	r3, r3, #3
 80060ee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80060f0:	69bb      	ldr	r3, [r7, #24]
 80060f2:	015a      	lsls	r2, r3, #5
 80060f4:	69fb      	ldr	r3, [r7, #28]
 80060f6:	029b      	lsls	r3, r3, #10
 80060f8:	431a      	orrs	r2, r3
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	03db      	lsls	r3, r3, #15
 80060fe:	4313      	orrs	r3, r2
 8006100:	697a      	ldr	r2, [r7, #20]
 8006102:	4313      	orrs	r3, r2
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
 8006106:	e016      	b.n	8006136 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006108:	6a3b      	ldr	r3, [r7, #32]
 800610a:	0f1b      	lsrs	r3, r3, #28
 800610c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800610e:	69fb      	ldr	r3, [r7, #28]
 8006110:	0d1b      	lsrs	r3, r3, #20
 8006112:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	0b1b      	lsrs	r3, r3, #12
 8006118:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 800611a:	697b      	ldr	r3, [r7, #20]
 800611c:	091b      	lsrs	r3, r3, #4
 800611e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006120:	69bb      	ldr	r3, [r7, #24]
 8006122:	011a      	lsls	r2, r3, #4
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	021b      	lsls	r3, r3, #8
 8006128:	431a      	orrs	r2, r3
 800612a:	6a3b      	ldr	r3, [r7, #32]
 800612c:	031b      	lsls	r3, r3, #12
 800612e:	4313      	orrs	r3, r2
 8006130:	697a      	ldr	r2, [r7, #20]
 8006132:	4313      	orrs	r3, r2
 8006134:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613c:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800613e:	e003      	b.n	8006148 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	68ba      	ldr	r2, [r7, #8]
 8006146:	60da      	str	r2, [r3, #12]
}
 8006148:	bf00      	nop
 800614a:	372c      	adds	r7, #44	; 0x2c
 800614c:	46bd      	mov	sp, r7
 800614e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006152:	4770      	bx	lr

08006154 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006154:	b480      	push	{r7}
 8006156:	b089      	sub	sp, #36	; 0x24
 8006158:	af00      	add	r7, sp, #0
 800615a:	6078      	str	r0, [r7, #4]
 800615c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800615e:	2300      	movs	r3, #0
 8006160:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006162:	2300      	movs	r3, #0
 8006164:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006166:	2300      	movs	r3, #0
 8006168:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800616a:	2300      	movs	r3, #0
 800616c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800616e:	2300      	movs	r3, #0
 8006170:	61fb      	str	r3, [r7, #28]
 8006172:	e175      	b.n	8006460 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006174:	2201      	movs	r2, #1
 8006176:	69fb      	ldr	r3, [r7, #28]
 8006178:	fa02 f303 	lsl.w	r3, r2, r3
 800617c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800617e:	683b      	ldr	r3, [r7, #0]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	697a      	ldr	r2, [r7, #20]
 8006184:	4013      	ands	r3, r2
 8006186:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006188:	693a      	ldr	r2, [r7, #16]
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	429a      	cmp	r2, r3
 800618e:	f040 8164 	bne.w	800645a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	685b      	ldr	r3, [r3, #4]
 8006196:	2b01      	cmp	r3, #1
 8006198:	d00b      	beq.n	80061b2 <HAL_GPIO_Init+0x5e>
 800619a:	683b      	ldr	r3, [r7, #0]
 800619c:	685b      	ldr	r3, [r3, #4]
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d007      	beq.n	80061b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061a2:	683b      	ldr	r3, [r7, #0]
 80061a4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80061a6:	2b11      	cmp	r3, #17
 80061a8:	d003      	beq.n	80061b2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	685b      	ldr	r3, [r3, #4]
 80061ae:	2b12      	cmp	r3, #18
 80061b0:	d130      	bne.n	8006214 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	2203      	movs	r2, #3
 80061be:	fa02 f303 	lsl.w	r3, r2, r3
 80061c2:	43db      	mvns	r3, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68da      	ldr	r2, [r3, #12]
 80061ce:	69fb      	ldr	r3, [r7, #28]
 80061d0:	005b      	lsls	r3, r3, #1
 80061d2:	fa02 f303 	lsl.w	r3, r2, r3
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	4313      	orrs	r3, r2
 80061da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	69ba      	ldr	r2, [r7, #24]
 80061e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	685b      	ldr	r3, [r3, #4]
 80061e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80061e8:	2201      	movs	r2, #1
 80061ea:	69fb      	ldr	r3, [r7, #28]
 80061ec:	fa02 f303 	lsl.w	r3, r2, r3
 80061f0:	43db      	mvns	r3, r3
 80061f2:	69ba      	ldr	r2, [r7, #24]
 80061f4:	4013      	ands	r3, r2
 80061f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	685b      	ldr	r3, [r3, #4]
 80061fc:	091b      	lsrs	r3, r3, #4
 80061fe:	f003 0201 	and.w	r2, r3, #1
 8006202:	69fb      	ldr	r3, [r7, #28]
 8006204:	fa02 f303 	lsl.w	r3, r2, r3
 8006208:	69ba      	ldr	r2, [r7, #24]
 800620a:	4313      	orrs	r3, r2
 800620c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	68db      	ldr	r3, [r3, #12]
 8006218:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800621a:	69fb      	ldr	r3, [r7, #28]
 800621c:	005b      	lsls	r3, r3, #1
 800621e:	2203      	movs	r2, #3
 8006220:	fa02 f303 	lsl.w	r3, r2, r3
 8006224:	43db      	mvns	r3, r3
 8006226:	69ba      	ldr	r2, [r7, #24]
 8006228:	4013      	ands	r3, r2
 800622a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 800622c:	683b      	ldr	r3, [r7, #0]
 800622e:	689a      	ldr	r2, [r3, #8]
 8006230:	69fb      	ldr	r3, [r7, #28]
 8006232:	005b      	lsls	r3, r3, #1
 8006234:	fa02 f303 	lsl.w	r3, r2, r3
 8006238:	69ba      	ldr	r2, [r7, #24]
 800623a:	4313      	orrs	r3, r2
 800623c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	69ba      	ldr	r2, [r7, #24]
 8006242:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	2b02      	cmp	r3, #2
 800624a:	d003      	beq.n	8006254 <HAL_GPIO_Init+0x100>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	2b12      	cmp	r3, #18
 8006252:	d123      	bne.n	800629c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006254:	69fb      	ldr	r3, [r7, #28]
 8006256:	08da      	lsrs	r2, r3, #3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	3208      	adds	r2, #8
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	f003 0307 	and.w	r3, r3, #7
 8006268:	009b      	lsls	r3, r3, #2
 800626a:	220f      	movs	r2, #15
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	43db      	mvns	r3, r3
 8006272:	69ba      	ldr	r2, [r7, #24]
 8006274:	4013      	ands	r3, r2
 8006276:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	691a      	ldr	r2, [r3, #16]
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	f003 0307 	and.w	r3, r3, #7
 8006282:	009b      	lsls	r3, r3, #2
 8006284:	fa02 f303 	lsl.w	r3, r2, r3
 8006288:	69ba      	ldr	r2, [r7, #24]
 800628a:	4313      	orrs	r3, r2
 800628c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	08da      	lsrs	r2, r3, #3
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	3208      	adds	r2, #8
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80062a2:	69fb      	ldr	r3, [r7, #28]
 80062a4:	005b      	lsls	r3, r3, #1
 80062a6:	2203      	movs	r2, #3
 80062a8:	fa02 f303 	lsl.w	r3, r2, r3
 80062ac:	43db      	mvns	r3, r3
 80062ae:	69ba      	ldr	r2, [r7, #24]
 80062b0:	4013      	ands	r3, r2
 80062b2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	f003 0203 	and.w	r2, r3, #3
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	005b      	lsls	r3, r3, #1
 80062c0:	fa02 f303 	lsl.w	r3, r2, r3
 80062c4:	69ba      	ldr	r2, [r7, #24]
 80062c6:	4313      	orrs	r3, r2
 80062c8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	69ba      	ldr	r2, [r7, #24]
 80062ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80062d0:	683b      	ldr	r3, [r7, #0]
 80062d2:	685b      	ldr	r3, [r3, #4]
 80062d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80be 	beq.w	800645a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062de:	4b65      	ldr	r3, [pc, #404]	; (8006474 <HAL_GPIO_Init+0x320>)
 80062e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e2:	4a64      	ldr	r2, [pc, #400]	; (8006474 <HAL_GPIO_Init+0x320>)
 80062e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80062e8:	6453      	str	r3, [r2, #68]	; 0x44
 80062ea:	4b62      	ldr	r3, [pc, #392]	; (8006474 <HAL_GPIO_Init+0x320>)
 80062ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80062f6:	4a60      	ldr	r2, [pc, #384]	; (8006478 <HAL_GPIO_Init+0x324>)
 80062f8:	69fb      	ldr	r3, [r7, #28]
 80062fa:	089b      	lsrs	r3, r3, #2
 80062fc:	3302      	adds	r3, #2
 80062fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006304:	69fb      	ldr	r3, [r7, #28]
 8006306:	f003 0303 	and.w	r3, r3, #3
 800630a:	009b      	lsls	r3, r3, #2
 800630c:	220f      	movs	r2, #15
 800630e:	fa02 f303 	lsl.w	r3, r2, r3
 8006312:	43db      	mvns	r3, r3
 8006314:	69ba      	ldr	r2, [r7, #24]
 8006316:	4013      	ands	r3, r2
 8006318:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a57      	ldr	r2, [pc, #348]	; (800647c <HAL_GPIO_Init+0x328>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d037      	beq.n	8006392 <HAL_GPIO_Init+0x23e>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a56      	ldr	r2, [pc, #344]	; (8006480 <HAL_GPIO_Init+0x32c>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d031      	beq.n	800638e <HAL_GPIO_Init+0x23a>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a55      	ldr	r2, [pc, #340]	; (8006484 <HAL_GPIO_Init+0x330>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d02b      	beq.n	800638a <HAL_GPIO_Init+0x236>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a54      	ldr	r2, [pc, #336]	; (8006488 <HAL_GPIO_Init+0x334>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d025      	beq.n	8006386 <HAL_GPIO_Init+0x232>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a53      	ldr	r2, [pc, #332]	; (800648c <HAL_GPIO_Init+0x338>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d01f      	beq.n	8006382 <HAL_GPIO_Init+0x22e>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a52      	ldr	r2, [pc, #328]	; (8006490 <HAL_GPIO_Init+0x33c>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d019      	beq.n	800637e <HAL_GPIO_Init+0x22a>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a51      	ldr	r2, [pc, #324]	; (8006494 <HAL_GPIO_Init+0x340>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d013      	beq.n	800637a <HAL_GPIO_Init+0x226>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a50      	ldr	r2, [pc, #320]	; (8006498 <HAL_GPIO_Init+0x344>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d00d      	beq.n	8006376 <HAL_GPIO_Init+0x222>
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	4a4f      	ldr	r2, [pc, #316]	; (800649c <HAL_GPIO_Init+0x348>)
 800635e:	4293      	cmp	r3, r2
 8006360:	d007      	beq.n	8006372 <HAL_GPIO_Init+0x21e>
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	4a4e      	ldr	r2, [pc, #312]	; (80064a0 <HAL_GPIO_Init+0x34c>)
 8006366:	4293      	cmp	r3, r2
 8006368:	d101      	bne.n	800636e <HAL_GPIO_Init+0x21a>
 800636a:	2309      	movs	r3, #9
 800636c:	e012      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800636e:	230a      	movs	r3, #10
 8006370:	e010      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006372:	2308      	movs	r3, #8
 8006374:	e00e      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006376:	2307      	movs	r3, #7
 8006378:	e00c      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800637a:	2306      	movs	r3, #6
 800637c:	e00a      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800637e:	2305      	movs	r3, #5
 8006380:	e008      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006382:	2304      	movs	r3, #4
 8006384:	e006      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006386:	2303      	movs	r3, #3
 8006388:	e004      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800638a:	2302      	movs	r3, #2
 800638c:	e002      	b.n	8006394 <HAL_GPIO_Init+0x240>
 800638e:	2301      	movs	r3, #1
 8006390:	e000      	b.n	8006394 <HAL_GPIO_Init+0x240>
 8006392:	2300      	movs	r3, #0
 8006394:	69fa      	ldr	r2, [r7, #28]
 8006396:	f002 0203 	and.w	r2, r2, #3
 800639a:	0092      	lsls	r2, r2, #2
 800639c:	4093      	lsls	r3, r2
 800639e:	69ba      	ldr	r2, [r7, #24]
 80063a0:	4313      	orrs	r3, r2
 80063a2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80063a4:	4934      	ldr	r1, [pc, #208]	; (8006478 <HAL_GPIO_Init+0x324>)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	089b      	lsrs	r3, r3, #2
 80063aa:	3302      	adds	r3, #2
 80063ac:	69ba      	ldr	r2, [r7, #24]
 80063ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063b2:	4b3c      	ldr	r3, [pc, #240]	; (80064a4 <HAL_GPIO_Init+0x350>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063b8:	693b      	ldr	r3, [r7, #16]
 80063ba:	43db      	mvns	r3, r3
 80063bc:	69ba      	ldr	r2, [r7, #24]
 80063be:	4013      	ands	r3, r2
 80063c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d003      	beq.n	80063d6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80063ce:	69ba      	ldr	r2, [r7, #24]
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d6:	4a33      	ldr	r2, [pc, #204]	; (80064a4 <HAL_GPIO_Init+0x350>)
 80063d8:	69bb      	ldr	r3, [r7, #24]
 80063da:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80063dc:	4b31      	ldr	r3, [pc, #196]	; (80064a4 <HAL_GPIO_Init+0x350>)
 80063de:	685b      	ldr	r3, [r3, #4]
 80063e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	43db      	mvns	r3, r3
 80063e6:	69ba      	ldr	r2, [r7, #24]
 80063e8:	4013      	ands	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d003      	beq.n	8006400 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80063f8:	69ba      	ldr	r2, [r7, #24]
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006400:	4a28      	ldr	r2, [pc, #160]	; (80064a4 <HAL_GPIO_Init+0x350>)
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006406:	4b27      	ldr	r3, [pc, #156]	; (80064a4 <HAL_GPIO_Init+0x350>)
 8006408:	689b      	ldr	r3, [r3, #8]
 800640a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	43db      	mvns	r3, r3
 8006410:	69ba      	ldr	r2, [r7, #24]
 8006412:	4013      	ands	r3, r2
 8006414:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d003      	beq.n	800642a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006422:	69ba      	ldr	r2, [r7, #24]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	4313      	orrs	r3, r2
 8006428:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800642a:	4a1e      	ldr	r2, [pc, #120]	; (80064a4 <HAL_GPIO_Init+0x350>)
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006430:	4b1c      	ldr	r3, [pc, #112]	; (80064a4 <HAL_GPIO_Init+0x350>)
 8006432:	68db      	ldr	r3, [r3, #12]
 8006434:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006436:	693b      	ldr	r3, [r7, #16]
 8006438:	43db      	mvns	r3, r3
 800643a:	69ba      	ldr	r2, [r7, #24]
 800643c:	4013      	ands	r3, r2
 800643e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	685b      	ldr	r3, [r3, #4]
 8006444:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006448:	2b00      	cmp	r3, #0
 800644a:	d003      	beq.n	8006454 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	693b      	ldr	r3, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006454:	4a13      	ldr	r2, [pc, #76]	; (80064a4 <HAL_GPIO_Init+0x350>)
 8006456:	69bb      	ldr	r3, [r7, #24]
 8006458:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 800645a:	69fb      	ldr	r3, [r7, #28]
 800645c:	3301      	adds	r3, #1
 800645e:	61fb      	str	r3, [r7, #28]
 8006460:	69fb      	ldr	r3, [r7, #28]
 8006462:	2b0f      	cmp	r3, #15
 8006464:	f67f ae86 	bls.w	8006174 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006468:	bf00      	nop
 800646a:	3724      	adds	r7, #36	; 0x24
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr
 8006474:	40023800 	.word	0x40023800
 8006478:	40013800 	.word	0x40013800
 800647c:	40020000 	.word	0x40020000
 8006480:	40020400 	.word	0x40020400
 8006484:	40020800 	.word	0x40020800
 8006488:	40020c00 	.word	0x40020c00
 800648c:	40021000 	.word	0x40021000
 8006490:	40021400 	.word	0x40021400
 8006494:	40021800 	.word	0x40021800
 8006498:	40021c00 	.word	0x40021c00
 800649c:	40022000 	.word	0x40022000
 80064a0:	40022400 	.word	0x40022400
 80064a4:	40013c00 	.word	0x40013c00

080064a8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
 80064b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80064b2:	2300      	movs	r3, #0
 80064b4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80064b6:	2300      	movs	r3, #0
 80064b8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80064ba:	2300      	movs	r3, #0
 80064bc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80064be:	2300      	movs	r3, #0
 80064c0:	617b      	str	r3, [r7, #20]
 80064c2:	e0d9      	b.n	8006678 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80064c4:	2201      	movs	r2, #1
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	fa02 f303 	lsl.w	r3, r2, r3
 80064cc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80064ce:	683a      	ldr	r2, [r7, #0]
 80064d0:	693b      	ldr	r3, [r7, #16]
 80064d2:	4013      	ands	r3, r2
 80064d4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80064d6:	68fa      	ldr	r2, [r7, #12]
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	429a      	cmp	r2, r3
 80064dc:	f040 80c9 	bne.w	8006672 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80064e0:	4a6a      	ldr	r2, [pc, #424]	; (800668c <HAL_GPIO_DeInit+0x1e4>)
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	089b      	lsrs	r3, r3, #2
 80064e6:	3302      	adds	r3, #2
 80064e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80064ec:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	f003 0303 	and.w	r3, r3, #3
 80064f4:	009b      	lsls	r3, r3, #2
 80064f6:	220f      	movs	r2, #15
 80064f8:	fa02 f303 	lsl.w	r3, r2, r3
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	4013      	ands	r3, r2
 8006500:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	4a62      	ldr	r2, [pc, #392]	; (8006690 <HAL_GPIO_DeInit+0x1e8>)
 8006506:	4293      	cmp	r3, r2
 8006508:	d037      	beq.n	800657a <HAL_GPIO_DeInit+0xd2>
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4a61      	ldr	r2, [pc, #388]	; (8006694 <HAL_GPIO_DeInit+0x1ec>)
 800650e:	4293      	cmp	r3, r2
 8006510:	d031      	beq.n	8006576 <HAL_GPIO_DeInit+0xce>
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a60      	ldr	r2, [pc, #384]	; (8006698 <HAL_GPIO_DeInit+0x1f0>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <HAL_GPIO_DeInit+0xca>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	4a5f      	ldr	r2, [pc, #380]	; (800669c <HAL_GPIO_DeInit+0x1f4>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d025      	beq.n	800656e <HAL_GPIO_DeInit+0xc6>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a5e      	ldr	r2, [pc, #376]	; (80066a0 <HAL_GPIO_DeInit+0x1f8>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d01f      	beq.n	800656a <HAL_GPIO_DeInit+0xc2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a5d      	ldr	r2, [pc, #372]	; (80066a4 <HAL_GPIO_DeInit+0x1fc>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d019      	beq.n	8006566 <HAL_GPIO_DeInit+0xbe>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a5c      	ldr	r2, [pc, #368]	; (80066a8 <HAL_GPIO_DeInit+0x200>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d013      	beq.n	8006562 <HAL_GPIO_DeInit+0xba>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a5b      	ldr	r2, [pc, #364]	; (80066ac <HAL_GPIO_DeInit+0x204>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d00d      	beq.n	800655e <HAL_GPIO_DeInit+0xb6>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a5a      	ldr	r2, [pc, #360]	; (80066b0 <HAL_GPIO_DeInit+0x208>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d007      	beq.n	800655a <HAL_GPIO_DeInit+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a59      	ldr	r2, [pc, #356]	; (80066b4 <HAL_GPIO_DeInit+0x20c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d101      	bne.n	8006556 <HAL_GPIO_DeInit+0xae>
 8006552:	2309      	movs	r3, #9
 8006554:	e012      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 8006556:	230a      	movs	r3, #10
 8006558:	e010      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 800655a:	2308      	movs	r3, #8
 800655c:	e00e      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 800655e:	2307      	movs	r3, #7
 8006560:	e00c      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 8006562:	2306      	movs	r3, #6
 8006564:	e00a      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 8006566:	2305      	movs	r3, #5
 8006568:	e008      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 800656a:	2304      	movs	r3, #4
 800656c:	e006      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 800656e:	2303      	movs	r3, #3
 8006570:	e004      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 8006572:	2302      	movs	r3, #2
 8006574:	e002      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <HAL_GPIO_DeInit+0xd4>
 800657a:	2300      	movs	r3, #0
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	f002 0203 	and.w	r2, r2, #3
 8006582:	0092      	lsls	r2, r2, #2
 8006584:	4093      	lsls	r3, r2
 8006586:	68ba      	ldr	r2, [r7, #8]
 8006588:	429a      	cmp	r2, r3
 800658a:	d132      	bne.n	80065f2 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800658c:	4b4a      	ldr	r3, [pc, #296]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 800658e:	681a      	ldr	r2, [r3, #0]
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	43db      	mvns	r3, r3
 8006594:	4948      	ldr	r1, [pc, #288]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 8006596:	4013      	ands	r3, r2
 8006598:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800659a:	4b47      	ldr	r3, [pc, #284]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 800659c:	685a      	ldr	r2, [r3, #4]
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	43db      	mvns	r3, r3
 80065a2:	4945      	ldr	r1, [pc, #276]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 80065a4:	4013      	ands	r3, r2
 80065a6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80065a8:	4b43      	ldr	r3, [pc, #268]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	43db      	mvns	r3, r3
 80065b0:	4941      	ldr	r1, [pc, #260]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 80065b2:	4013      	ands	r3, r2
 80065b4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80065b6:	4b40      	ldr	r3, [pc, #256]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 80065b8:	68da      	ldr	r2, [r3, #12]
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	43db      	mvns	r3, r3
 80065be:	493e      	ldr	r1, [pc, #248]	; (80066b8 <HAL_GPIO_DeInit+0x210>)
 80065c0:	4013      	ands	r3, r2
 80065c2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f003 0303 	and.w	r3, r3, #3
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	220f      	movs	r2, #15
 80065ce:	fa02 f303 	lsl.w	r3, r2, r3
 80065d2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80065d4:	4a2d      	ldr	r2, [pc, #180]	; (800668c <HAL_GPIO_DeInit+0x1e4>)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	089b      	lsrs	r3, r3, #2
 80065da:	3302      	adds	r3, #2
 80065dc:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80065e0:	68bb      	ldr	r3, [r7, #8]
 80065e2:	43da      	mvns	r2, r3
 80065e4:	4829      	ldr	r0, [pc, #164]	; (800668c <HAL_GPIO_DeInit+0x1e4>)
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	089b      	lsrs	r3, r3, #2
 80065ea:	400a      	ands	r2, r1
 80065ec:	3302      	adds	r3, #2
 80065ee:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681a      	ldr	r2, [r3, #0]
 80065f6:	697b      	ldr	r3, [r7, #20]
 80065f8:	005b      	lsls	r3, r3, #1
 80065fa:	2103      	movs	r1, #3
 80065fc:	fa01 f303 	lsl.w	r3, r1, r3
 8006600:	43db      	mvns	r3, r3
 8006602:	401a      	ands	r2, r3
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	08da      	lsrs	r2, r3, #3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	3208      	adds	r2, #8
 8006610:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f003 0307 	and.w	r3, r3, #7
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	220f      	movs	r2, #15
 800661e:	fa02 f303 	lsl.w	r3, r2, r3
 8006622:	43db      	mvns	r3, r3
 8006624:	697a      	ldr	r2, [r7, #20]
 8006626:	08d2      	lsrs	r2, r2, #3
 8006628:	4019      	ands	r1, r3
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	3208      	adds	r2, #8
 800662e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	68da      	ldr	r2, [r3, #12]
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	005b      	lsls	r3, r3, #1
 800663a:	2103      	movs	r1, #3
 800663c:	fa01 f303 	lsl.w	r3, r1, r3
 8006640:	43db      	mvns	r3, r3
 8006642:	401a      	ands	r2, r3
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	2101      	movs	r1, #1
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	fa01 f303 	lsl.w	r3, r1, r3
 8006654:	43db      	mvns	r3, r3
 8006656:	401a      	ands	r2, r3
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	689a      	ldr	r2, [r3, #8]
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	005b      	lsls	r3, r3, #1
 8006664:	2103      	movs	r1, #3
 8006666:	fa01 f303 	lsl.w	r3, r1, r3
 800666a:	43db      	mvns	r3, r3
 800666c:	401a      	ands	r2, r3
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	3301      	adds	r3, #1
 8006676:	617b      	str	r3, [r7, #20]
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2b0f      	cmp	r3, #15
 800667c:	f67f af22 	bls.w	80064c4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006680:	bf00      	nop
 8006682:	371c      	adds	r7, #28
 8006684:	46bd      	mov	sp, r7
 8006686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800668a:	4770      	bx	lr
 800668c:	40013800 	.word	0x40013800
 8006690:	40020000 	.word	0x40020000
 8006694:	40020400 	.word	0x40020400
 8006698:	40020800 	.word	0x40020800
 800669c:	40020c00 	.word	0x40020c00
 80066a0:	40021000 	.word	0x40021000
 80066a4:	40021400 	.word	0x40021400
 80066a8:	40021800 	.word	0x40021800
 80066ac:	40021c00 	.word	0x40021c00
 80066b0:	40022000 	.word	0x40022000
 80066b4:	40022400 	.word	0x40022400
 80066b8:	40013c00 	.word	0x40013c00

080066bc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80066bc:	b480      	push	{r7}
 80066be:	b085      	sub	sp, #20
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
 80066c4:	460b      	mov	r3, r1
 80066c6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	887b      	ldrh	r3, [r7, #2]
 80066ce:	4013      	ands	r3, r2
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80066d4:	2301      	movs	r3, #1
 80066d6:	73fb      	strb	r3, [r7, #15]
 80066d8:	e001      	b.n	80066de <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80066da:	2300      	movs	r3, #0
 80066dc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80066de:	7bfb      	ldrb	r3, [r7, #15]
}
 80066e0:	4618      	mov	r0, r3
 80066e2:	3714      	adds	r7, #20
 80066e4:	46bd      	mov	sp, r7
 80066e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ea:	4770      	bx	lr

080066ec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b083      	sub	sp, #12
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]
 80066f4:	460b      	mov	r3, r1
 80066f6:	807b      	strh	r3, [r7, #2]
 80066f8:	4613      	mov	r3, r2
 80066fa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80066fc:	787b      	ldrb	r3, [r7, #1]
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d003      	beq.n	800670a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006702:	887a      	ldrh	r2, [r7, #2]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006708:	e003      	b.n	8006712 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800670a:	887b      	ldrh	r3, [r7, #2]
 800670c:	041a      	lsls	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	619a      	str	r2, [r3, #24]
}
 8006712:	bf00      	nop
 8006714:	370c      	adds	r7, #12
 8006716:	46bd      	mov	sp, r7
 8006718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671c:	4770      	bx	lr
	...

08006720 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b082      	sub	sp, #8
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d101      	bne.n	8006732 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800672e:	2301      	movs	r3, #1
 8006730:	e07f      	b.n	8006832 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006738:	b2db      	uxtb	r3, r3
 800673a:	2b00      	cmp	r3, #0
 800673c:	d106      	bne.n	800674c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f7fd fda6 	bl	8004298 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2224      	movs	r2, #36	; 0x24
 8006750:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	681a      	ldr	r2, [r3, #0]
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	f022 0201 	bic.w	r2, r2, #1
 8006762:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	685a      	ldr	r2, [r3, #4]
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006770:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	689a      	ldr	r2, [r3, #8]
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006780:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	68db      	ldr	r3, [r3, #12]
 8006786:	2b01      	cmp	r3, #1
 8006788:	d107      	bne.n	800679a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	689a      	ldr	r2, [r3, #8]
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006796:	609a      	str	r2, [r3, #8]
 8006798:	e006      	b.n	80067a8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689a      	ldr	r2, [r3, #8]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80067a6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	2b02      	cmp	r3, #2
 80067ae:	d104      	bne.n	80067ba <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80067b8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	6859      	ldr	r1, [r3, #4]
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681a      	ldr	r2, [r3, #0]
 80067c4:	4b1d      	ldr	r3, [pc, #116]	; (800683c <HAL_I2C_Init+0x11c>)
 80067c6:	430b      	orrs	r3, r1
 80067c8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	68da      	ldr	r2, [r3, #12]
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80067d8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	691a      	ldr	r2, [r3, #16]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	695b      	ldr	r3, [r3, #20]
 80067e2:	ea42 0103 	orr.w	r1, r2, r3
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	699b      	ldr	r3, [r3, #24]
 80067ea:	021a      	lsls	r2, r3, #8
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	430a      	orrs	r2, r1
 80067f2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	69d9      	ldr	r1, [r3, #28]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	6a1a      	ldr	r2, [r3, #32]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	430a      	orrs	r2, r1
 8006802:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681a      	ldr	r2, [r3, #0]
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	f042 0201 	orr.w	r2, r2, #1
 8006812:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2200      	movs	r2, #0
 8006818:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2220      	movs	r2, #32
 800681e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2200      	movs	r2, #0
 8006826:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2200      	movs	r2, #0
 800682c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	3708      	adds	r7, #8
 8006836:	46bd      	mov	sp, r7
 8006838:	bd80      	pop	{r7, pc}
 800683a:	bf00      	nop
 800683c:	02008000 	.word	0x02008000

08006840 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b082      	sub	sp, #8
 8006844:	af00      	add	r7, sp, #0
 8006846:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2b00      	cmp	r3, #0
 800684c:	d101      	bne.n	8006852 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	e021      	b.n	8006896 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	2224      	movs	r2, #36	; 0x24
 8006856:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681a      	ldr	r2, [r3, #0]
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f022 0201 	bic.w	r2, r2, #1
 8006868:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800686a:	6878      	ldr	r0, [r7, #4]
 800686c:	f7fd fd8c 	bl	8004388 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	2200      	movs	r2, #0
 8006874:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	2200      	movs	r2, #0
 8006882:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	2200      	movs	r2, #0
 8006888:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	2200      	movs	r2, #0
 8006890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006894:	2300      	movs	r3, #0
}
 8006896:	4618      	mov	r0, r3
 8006898:	3708      	adds	r7, #8
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}
	...

080068a0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068a0:	b580      	push	{r7, lr}
 80068a2:	b088      	sub	sp, #32
 80068a4:	af02      	add	r7, sp, #8
 80068a6:	60f8      	str	r0, [r7, #12]
 80068a8:	4608      	mov	r0, r1
 80068aa:	4611      	mov	r1, r2
 80068ac:	461a      	mov	r2, r3
 80068ae:	4603      	mov	r3, r0
 80068b0:	817b      	strh	r3, [r7, #10]
 80068b2:	460b      	mov	r3, r1
 80068b4:	813b      	strh	r3, [r7, #8]
 80068b6:	4613      	mov	r3, r2
 80068b8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c0:	b2db      	uxtb	r3, r3
 80068c2:	2b20      	cmp	r3, #32
 80068c4:	f040 80f9 	bne.w	8006aba <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80068c8:	6a3b      	ldr	r3, [r7, #32]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d002      	beq.n	80068d4 <HAL_I2C_Mem_Write+0x34>
 80068ce:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d105      	bne.n	80068e0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068da:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80068dc:	2301      	movs	r3, #1
 80068de:	e0ed      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068e6:	2b01      	cmp	r3, #1
 80068e8:	d101      	bne.n	80068ee <HAL_I2C_Mem_Write+0x4e>
 80068ea:	2302      	movs	r3, #2
 80068ec:	e0e6      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	2201      	movs	r2, #1
 80068f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80068f6:	f7fe fa0b 	bl	8004d10 <HAL_GetTick>
 80068fa:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80068fc:	697b      	ldr	r3, [r7, #20]
 80068fe:	9300      	str	r3, [sp, #0]
 8006900:	2319      	movs	r3, #25
 8006902:	2201      	movs	r2, #1
 8006904:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006908:	68f8      	ldr	r0, [r7, #12]
 800690a:	f000 fad1 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d001      	beq.n	8006918 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0d1      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2221      	movs	r2, #33	; 0x21
 800691c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	2240      	movs	r2, #64	; 0x40
 8006924:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2200      	movs	r2, #0
 800692c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	6a3a      	ldr	r2, [r7, #32]
 8006932:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006938:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	2200      	movs	r2, #0
 800693e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006940:	88f8      	ldrh	r0, [r7, #6]
 8006942:	893a      	ldrh	r2, [r7, #8]
 8006944:	8979      	ldrh	r1, [r7, #10]
 8006946:	697b      	ldr	r3, [r7, #20]
 8006948:	9301      	str	r3, [sp, #4]
 800694a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800694c:	9300      	str	r3, [sp, #0]
 800694e:	4603      	mov	r3, r0
 8006950:	68f8      	ldr	r0, [r7, #12]
 8006952:	f000 f9e1 	bl	8006d18 <I2C_RequestMemoryWrite>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d005      	beq.n	8006968 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006964:	2301      	movs	r3, #1
 8006966:	e0a9      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800696c:	b29b      	uxth	r3, r3
 800696e:	2bff      	cmp	r3, #255	; 0xff
 8006970:	d90e      	bls.n	8006990 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	22ff      	movs	r2, #255	; 0xff
 8006976:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800697c:	b2da      	uxtb	r2, r3
 800697e:	8979      	ldrh	r1, [r7, #10]
 8006980:	2300      	movs	r3, #0
 8006982:	9300      	str	r3, [sp, #0]
 8006984:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fbb3 	bl	80070f4 <I2C_TransferConfig>
 800698e:	e00f      	b.n	80069b0 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006994:	b29a      	uxth	r2, r3
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800699e:	b2da      	uxtb	r2, r3
 80069a0:	8979      	ldrh	r1, [r7, #10]
 80069a2:	2300      	movs	r3, #0
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069aa:	68f8      	ldr	r0, [r7, #12]
 80069ac:	f000 fba2 	bl	80070f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069b4:	68f8      	ldr	r0, [r7, #12]
 80069b6:	f000 fabb 	bl	8006f30 <I2C_WaitOnTXISFlagUntilTimeout>
 80069ba:	4603      	mov	r3, r0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d001      	beq.n	80069c4 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	e07b      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	781a      	ldrb	r2, [r3, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069d4:	1c5a      	adds	r2, r3, #1
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069de:	b29b      	uxth	r3, r3
 80069e0:	3b01      	subs	r3, #1
 80069e2:	b29a      	uxth	r2, r3
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ec:	3b01      	subs	r3, #1
 80069ee:	b29a      	uxth	r2, r3
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f8:	b29b      	uxth	r3, r3
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d034      	beq.n	8006a68 <HAL_I2C_Mem_Write+0x1c8>
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d130      	bne.n	8006a68 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a06:	697b      	ldr	r3, [r7, #20]
 8006a08:	9300      	str	r3, [sp, #0]
 8006a0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a0c:	2200      	movs	r2, #0
 8006a0e:	2180      	movs	r1, #128	; 0x80
 8006a10:	68f8      	ldr	r0, [r7, #12]
 8006a12:	f000 fa4d 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e04d      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2bff      	cmp	r3, #255	; 0xff
 8006a28:	d90e      	bls.n	8006a48 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	22ff      	movs	r2, #255	; 0xff
 8006a2e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a34:	b2da      	uxtb	r2, r3
 8006a36:	8979      	ldrh	r1, [r7, #10]
 8006a38:	2300      	movs	r3, #0
 8006a3a:	9300      	str	r3, [sp, #0]
 8006a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 fb57 	bl	80070f4 <I2C_TransferConfig>
 8006a46:	e00f      	b.n	8006a68 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a4c:	b29a      	uxth	r2, r3
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a56:	b2da      	uxtb	r2, r3
 8006a58:	8979      	ldrh	r1, [r7, #10]
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	9300      	str	r3, [sp, #0]
 8006a5e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 fb46 	bl	80070f4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d19e      	bne.n	80069b0 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006a76:	68f8      	ldr	r0, [r7, #12]
 8006a78:	f000 fa9a 	bl	8006fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006a7c:	4603      	mov	r3, r0
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d001      	beq.n	8006a86 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006a82:	2301      	movs	r3, #1
 8006a84:	e01a      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2220      	movs	r2, #32
 8006a8c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	6859      	ldr	r1, [r3, #4]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	4b0a      	ldr	r3, [pc, #40]	; (8006ac4 <HAL_I2C_Mem_Write+0x224>)
 8006a9a:	400b      	ands	r3, r1
 8006a9c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	2220      	movs	r2, #32
 8006aa2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ab6:	2300      	movs	r3, #0
 8006ab8:	e000      	b.n	8006abc <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006aba:	2302      	movs	r3, #2
  }
}
 8006abc:	4618      	mov	r0, r3
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	fe00e800 	.word	0xfe00e800

08006ac8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b088      	sub	sp, #32
 8006acc:	af02      	add	r7, sp, #8
 8006ace:	60f8      	str	r0, [r7, #12]
 8006ad0:	4608      	mov	r0, r1
 8006ad2:	4611      	mov	r1, r2
 8006ad4:	461a      	mov	r2, r3
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	817b      	strh	r3, [r7, #10]
 8006ada:	460b      	mov	r3, r1
 8006adc:	813b      	strh	r3, [r7, #8]
 8006ade:	4613      	mov	r3, r2
 8006ae0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b20      	cmp	r3, #32
 8006aec:	f040 80fd 	bne.w	8006cea <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006af0:	6a3b      	ldr	r3, [r7, #32]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d002      	beq.n	8006afc <HAL_I2C_Mem_Read+0x34>
 8006af6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d105      	bne.n	8006b08 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006b02:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006b04:	2301      	movs	r3, #1
 8006b06:	e0f1      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b0e:	2b01      	cmp	r3, #1
 8006b10:	d101      	bne.n	8006b16 <HAL_I2C_Mem_Read+0x4e>
 8006b12:	2302      	movs	r3, #2
 8006b14:	e0ea      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
 8006b16:	68fb      	ldr	r3, [r7, #12]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006b1e:	f7fe f8f7 	bl	8004d10 <HAL_GetTick>
 8006b22:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	2319      	movs	r3, #25
 8006b2a:	2201      	movs	r2, #1
 8006b2c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006b30:	68f8      	ldr	r0, [r7, #12]
 8006b32:	f000 f9bd 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006b36:	4603      	mov	r3, r0
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d001      	beq.n	8006b40 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	e0d5      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	2222      	movs	r2, #34	; 0x22
 8006b44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2240      	movs	r2, #64	; 0x40
 8006b4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	2200      	movs	r2, #0
 8006b54:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	6a3a      	ldr	r2, [r7, #32]
 8006b5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006b60:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	2200      	movs	r2, #0
 8006b66:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006b68:	88f8      	ldrh	r0, [r7, #6]
 8006b6a:	893a      	ldrh	r2, [r7, #8]
 8006b6c:	8979      	ldrh	r1, [r7, #10]
 8006b6e:	697b      	ldr	r3, [r7, #20]
 8006b70:	9301      	str	r3, [sp, #4]
 8006b72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b74:	9300      	str	r3, [sp, #0]
 8006b76:	4603      	mov	r3, r0
 8006b78:	68f8      	ldr	r0, [r7, #12]
 8006b7a:	f000 f921 	bl	8006dc0 <I2C_RequestMemoryRead>
 8006b7e:	4603      	mov	r3, r0
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d005      	beq.n	8006b90 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006b8c:	2301      	movs	r3, #1
 8006b8e:	e0ad      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	2bff      	cmp	r3, #255	; 0xff
 8006b98:	d90e      	bls.n	8006bb8 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ba4:	b2da      	uxtb	r2, r3
 8006ba6:	8979      	ldrh	r1, [r7, #10]
 8006ba8:	4b52      	ldr	r3, [pc, #328]	; (8006cf4 <HAL_I2C_Mem_Read+0x22c>)
 8006baa:	9300      	str	r3, [sp, #0]
 8006bac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bb0:	68f8      	ldr	r0, [r7, #12]
 8006bb2:	f000 fa9f 	bl	80070f4 <I2C_TransferConfig>
 8006bb6:	e00f      	b.n	8006bd8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bbc:	b29a      	uxth	r2, r3
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bc6:	b2da      	uxtb	r2, r3
 8006bc8:	8979      	ldrh	r1, [r7, #10]
 8006bca:	4b4a      	ldr	r3, [pc, #296]	; (8006cf4 <HAL_I2C_Mem_Read+0x22c>)
 8006bcc:	9300      	str	r3, [sp, #0]
 8006bce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bd2:	68f8      	ldr	r0, [r7, #12]
 8006bd4:	f000 fa8e 	bl	80070f4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006bd8:	697b      	ldr	r3, [r7, #20]
 8006bda:	9300      	str	r3, [sp, #0]
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	2200      	movs	r2, #0
 8006be0:	2104      	movs	r1, #4
 8006be2:	68f8      	ldr	r0, [r7, #12]
 8006be4:	f000 f964 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006be8:	4603      	mov	r3, r0
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d001      	beq.n	8006bf2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	e07c      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bfc:	b2d2      	uxtb	r2, r2
 8006bfe:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c04:	1c5a      	adds	r2, r3, #1
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c0e:	3b01      	subs	r3, #1
 8006c10:	b29a      	uxth	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1a:	b29b      	uxth	r3, r3
 8006c1c:	3b01      	subs	r3, #1
 8006c1e:	b29a      	uxth	r2, r3
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d034      	beq.n	8006c98 <HAL_I2C_Mem_Read+0x1d0>
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d130      	bne.n	8006c98 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006c36:	697b      	ldr	r3, [r7, #20]
 8006c38:	9300      	str	r3, [sp, #0]
 8006c3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	2180      	movs	r1, #128	; 0x80
 8006c40:	68f8      	ldr	r0, [r7, #12]
 8006c42:	f000 f935 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d001      	beq.n	8006c50 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	e04d      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	2bff      	cmp	r3, #255	; 0xff
 8006c58:	d90e      	bls.n	8006c78 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	22ff      	movs	r2, #255	; 0xff
 8006c5e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c64:	b2da      	uxtb	r2, r3
 8006c66:	8979      	ldrh	r1, [r7, #10]
 8006c68:	2300      	movs	r3, #0
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c70:	68f8      	ldr	r0, [r7, #12]
 8006c72:	f000 fa3f 	bl	80070f4 <I2C_TransferConfig>
 8006c76:	e00f      	b.n	8006c98 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c7c:	b29a      	uxth	r2, r3
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c86:	b2da      	uxtb	r2, r3
 8006c88:	8979      	ldrh	r1, [r7, #10]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	9300      	str	r3, [sp, #0]
 8006c8e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f000 fa2e 	bl	80070f4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d19a      	bne.n	8006bd8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006ca6:	68f8      	ldr	r0, [r7, #12]
 8006ca8:	f000 f982 	bl	8006fb0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d001      	beq.n	8006cb6 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006cb2:	2301      	movs	r3, #1
 8006cb4:	e01a      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	2220      	movs	r2, #32
 8006cbc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	6859      	ldr	r1, [r3, #4]
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	681a      	ldr	r2, [r3, #0]
 8006cc8:	4b0b      	ldr	r3, [pc, #44]	; (8006cf8 <HAL_I2C_Mem_Read+0x230>)
 8006cca:	400b      	ands	r3, r1
 8006ccc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	2220      	movs	r2, #32
 8006cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2200      	movs	r2, #0
 8006ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	e000      	b.n	8006cec <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006cea:	2302      	movs	r3, #2
  }
}
 8006cec:	4618      	mov	r0, r3
 8006cee:	3718      	adds	r7, #24
 8006cf0:	46bd      	mov	sp, r7
 8006cf2:	bd80      	pop	{r7, pc}
 8006cf4:	80002400 	.word	0x80002400
 8006cf8:	fe00e800 	.word	0xfe00e800

08006cfc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b083      	sub	sp, #12
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d0a:	b2db      	uxtb	r3, r3
}
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	370c      	adds	r7, #12
 8006d10:	46bd      	mov	sp, r7
 8006d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d16:	4770      	bx	lr

08006d18 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b086      	sub	sp, #24
 8006d1c:	af02      	add	r7, sp, #8
 8006d1e:	60f8      	str	r0, [r7, #12]
 8006d20:	4608      	mov	r0, r1
 8006d22:	4611      	mov	r1, r2
 8006d24:	461a      	mov	r2, r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	817b      	strh	r3, [r7, #10]
 8006d2a:	460b      	mov	r3, r1
 8006d2c:	813b      	strh	r3, [r7, #8]
 8006d2e:	4613      	mov	r3, r2
 8006d30:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006d32:	88fb      	ldrh	r3, [r7, #6]
 8006d34:	b2da      	uxtb	r2, r3
 8006d36:	8979      	ldrh	r1, [r7, #10]
 8006d38:	4b20      	ldr	r3, [pc, #128]	; (8006dbc <I2C_RequestMemoryWrite+0xa4>)
 8006d3a:	9300      	str	r3, [sp, #0]
 8006d3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006d40:	68f8      	ldr	r0, [r7, #12]
 8006d42:	f000 f9d7 	bl	80070f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d46:	69fa      	ldr	r2, [r7, #28]
 8006d48:	69b9      	ldr	r1, [r7, #24]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f8f0 	bl	8006f30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e02c      	b.n	8006db4 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d5a:	88fb      	ldrh	r3, [r7, #6]
 8006d5c:	2b01      	cmp	r3, #1
 8006d5e:	d105      	bne.n	8006d6c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d60:	893b      	ldrh	r3, [r7, #8]
 8006d62:	b2da      	uxtb	r2, r3
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	629a      	str	r2, [r3, #40]	; 0x28
 8006d6a:	e015      	b.n	8006d98 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d6c:	893b      	ldrh	r3, [r7, #8]
 8006d6e:	0a1b      	lsrs	r3, r3, #8
 8006d70:	b29b      	uxth	r3, r3
 8006d72:	b2da      	uxtb	r2, r3
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d7a:	69fa      	ldr	r2, [r7, #28]
 8006d7c:	69b9      	ldr	r1, [r7, #24]
 8006d7e:	68f8      	ldr	r0, [r7, #12]
 8006d80:	f000 f8d6 	bl	8006f30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006d84:	4603      	mov	r3, r0
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d001      	beq.n	8006d8e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006d8a:	2301      	movs	r3, #1
 8006d8c:	e012      	b.n	8006db4 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d8e:	893b      	ldrh	r3, [r7, #8]
 8006d90:	b2da      	uxtb	r2, r3
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006d98:	69fb      	ldr	r3, [r7, #28]
 8006d9a:	9300      	str	r3, [sp, #0]
 8006d9c:	69bb      	ldr	r3, [r7, #24]
 8006d9e:	2200      	movs	r2, #0
 8006da0:	2180      	movs	r1, #128	; 0x80
 8006da2:	68f8      	ldr	r0, [r7, #12]
 8006da4:	f000 f884 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006da8:	4603      	mov	r3, r0
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d001      	beq.n	8006db2 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e000      	b.n	8006db4 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006db2:	2300      	movs	r3, #0
}
 8006db4:	4618      	mov	r0, r3
 8006db6:	3710      	adds	r7, #16
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}
 8006dbc:	80002000 	.word	0x80002000

08006dc0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af02      	add	r7, sp, #8
 8006dc6:	60f8      	str	r0, [r7, #12]
 8006dc8:	4608      	mov	r0, r1
 8006dca:	4611      	mov	r1, r2
 8006dcc:	461a      	mov	r2, r3
 8006dce:	4603      	mov	r3, r0
 8006dd0:	817b      	strh	r3, [r7, #10]
 8006dd2:	460b      	mov	r3, r1
 8006dd4:	813b      	strh	r3, [r7, #8]
 8006dd6:	4613      	mov	r3, r2
 8006dd8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006dda:	88fb      	ldrh	r3, [r7, #6]
 8006ddc:	b2da      	uxtb	r2, r3
 8006dde:	8979      	ldrh	r1, [r7, #10]
 8006de0:	4b20      	ldr	r3, [pc, #128]	; (8006e64 <I2C_RequestMemoryRead+0xa4>)
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	68f8      	ldr	r0, [r7, #12]
 8006de8:	f000 f984 	bl	80070f4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dec:	69fa      	ldr	r2, [r7, #28]
 8006dee:	69b9      	ldr	r1, [r7, #24]
 8006df0:	68f8      	ldr	r0, [r7, #12]
 8006df2:	f000 f89d 	bl	8006f30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006df6:	4603      	mov	r3, r0
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d001      	beq.n	8006e00 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e02c      	b.n	8006e5a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e00:	88fb      	ldrh	r3, [r7, #6]
 8006e02:	2b01      	cmp	r3, #1
 8006e04:	d105      	bne.n	8006e12 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e06:	893b      	ldrh	r3, [r7, #8]
 8006e08:	b2da      	uxtb	r2, r3
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	629a      	str	r2, [r3, #40]	; 0x28
 8006e10:	e015      	b.n	8006e3e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006e12:	893b      	ldrh	r3, [r7, #8]
 8006e14:	0a1b      	lsrs	r3, r3, #8
 8006e16:	b29b      	uxth	r3, r3
 8006e18:	b2da      	uxtb	r2, r3
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e20:	69fa      	ldr	r2, [r7, #28]
 8006e22:	69b9      	ldr	r1, [r7, #24]
 8006e24:	68f8      	ldr	r0, [r7, #12]
 8006e26:	f000 f883 	bl	8006f30 <I2C_WaitOnTXISFlagUntilTimeout>
 8006e2a:	4603      	mov	r3, r0
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d001      	beq.n	8006e34 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006e30:	2301      	movs	r3, #1
 8006e32:	e012      	b.n	8006e5a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006e34:	893b      	ldrh	r3, [r7, #8]
 8006e36:	b2da      	uxtb	r2, r3
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	69bb      	ldr	r3, [r7, #24]
 8006e44:	2200      	movs	r2, #0
 8006e46:	2140      	movs	r1, #64	; 0x40
 8006e48:	68f8      	ldr	r0, [r7, #12]
 8006e4a:	f000 f831 	bl	8006eb0 <I2C_WaitOnFlagUntilTimeout>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d001      	beq.n	8006e58 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006e54:	2301      	movs	r3, #1
 8006e56:	e000      	b.n	8006e5a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006e58:	2300      	movs	r3, #0
}
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	3710      	adds	r7, #16
 8006e5e:	46bd      	mov	sp, r7
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	80002000 	.word	0x80002000

08006e68 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006e68:	b480      	push	{r7}
 8006e6a:	b083      	sub	sp, #12
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	699b      	ldr	r3, [r3, #24]
 8006e76:	f003 0302 	and.w	r3, r3, #2
 8006e7a:	2b02      	cmp	r3, #2
 8006e7c:	d103      	bne.n	8006e86 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	2200      	movs	r2, #0
 8006e84:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	699b      	ldr	r3, [r3, #24]
 8006e8c:	f003 0301 	and.w	r3, r3, #1
 8006e90:	2b01      	cmp	r3, #1
 8006e92:	d007      	beq.n	8006ea4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	699a      	ldr	r2, [r3, #24]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f042 0201 	orr.w	r2, r2, #1
 8006ea2:	619a      	str	r2, [r3, #24]
  }
}
 8006ea4:	bf00      	nop
 8006ea6:	370c      	adds	r7, #12
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr

08006eb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006eb0:	b580      	push	{r7, lr}
 8006eb2:	b084      	sub	sp, #16
 8006eb4:	af00      	add	r7, sp, #0
 8006eb6:	60f8      	str	r0, [r7, #12]
 8006eb8:	60b9      	str	r1, [r7, #8]
 8006eba:	603b      	str	r3, [r7, #0]
 8006ebc:	4613      	mov	r3, r2
 8006ebe:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ec0:	e022      	b.n	8006f08 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ec8:	d01e      	beq.n	8006f08 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006eca:	f7fd ff21 	bl	8004d10 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	69bb      	ldr	r3, [r7, #24]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	429a      	cmp	r2, r3
 8006ed8:	d302      	bcc.n	8006ee0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006eda:	683b      	ldr	r3, [r7, #0]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d113      	bne.n	8006f08 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ee4:	f043 0220 	orr.w	r2, r3, #32
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2220      	movs	r2, #32
 8006ef0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	2200      	movs	r2, #0
 8006f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006f04:	2301      	movs	r3, #1
 8006f06:	e00f      	b.n	8006f28 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	699a      	ldr	r2, [r3, #24]
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	4013      	ands	r3, r2
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	bf0c      	ite	eq
 8006f18:	2301      	moveq	r3, #1
 8006f1a:	2300      	movne	r3, #0
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	461a      	mov	r2, r3
 8006f20:	79fb      	ldrb	r3, [r7, #7]
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d0cd      	beq.n	8006ec2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3710      	adds	r7, #16
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f3c:	e02c      	b.n	8006f98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f3e:	687a      	ldr	r2, [r7, #4]
 8006f40:	68b9      	ldr	r1, [r7, #8]
 8006f42:	68f8      	ldr	r0, [r7, #12]
 8006f44:	f000 f870 	bl	8007028 <I2C_IsAcknowledgeFailed>
 8006f48:	4603      	mov	r3, r0
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d001      	beq.n	8006f52 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f4e:	2301      	movs	r3, #1
 8006f50:	e02a      	b.n	8006fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f58:	d01e      	beq.n	8006f98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f5a:	f7fd fed9 	bl	8004d10 <HAL_GetTick>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	1ad3      	subs	r3, r2, r3
 8006f64:	68ba      	ldr	r2, [r7, #8]
 8006f66:	429a      	cmp	r2, r3
 8006f68:	d302      	bcc.n	8006f70 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006f6a:	68bb      	ldr	r3, [r7, #8]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d113      	bne.n	8006f98 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f74:	f043 0220 	orr.w	r2, r3, #32
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	2220      	movs	r2, #32
 8006f80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2200      	movs	r2, #0
 8006f88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	2200      	movs	r2, #0
 8006f90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006f94:	2301      	movs	r3, #1
 8006f96:	e007      	b.n	8006fa8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	699b      	ldr	r3, [r3, #24]
 8006f9e:	f003 0302 	and.w	r3, r3, #2
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d1cb      	bne.n	8006f3e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006fa6:	2300      	movs	r3, #0
}
 8006fa8:	4618      	mov	r0, r3
 8006faa:	3710      	adds	r7, #16
 8006fac:	46bd      	mov	sp, r7
 8006fae:	bd80      	pop	{r7, pc}

08006fb0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fbc:	e028      	b.n	8007010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006fbe:	687a      	ldr	r2, [r7, #4]
 8006fc0:	68b9      	ldr	r1, [r7, #8]
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 f830 	bl	8007028 <I2C_IsAcknowledgeFailed>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d001      	beq.n	8006fd2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	e026      	b.n	8007020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006fd2:	f7fd fe9d 	bl	8004d10 <HAL_GetTick>
 8006fd6:	4602      	mov	r2, r0
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	1ad3      	subs	r3, r2, r3
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d302      	bcc.n	8006fe8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d113      	bne.n	8007010 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fec:	f043 0220 	orr.w	r2, r3, #32
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006ff4:	68fb      	ldr	r3, [r7, #12]
 8006ff6:	2220      	movs	r2, #32
 8006ff8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	2200      	movs	r2, #0
 8007000:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e007      	b.n	8007020 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	681b      	ldr	r3, [r3, #0]
 8007014:	699b      	ldr	r3, [r3, #24]
 8007016:	f003 0320 	and.w	r3, r3, #32
 800701a:	2b20      	cmp	r3, #32
 800701c:	d1cf      	bne.n	8006fbe <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800701e:	2300      	movs	r3, #0
}
 8007020:	4618      	mov	r0, r3
 8007022:	3710      	adds	r7, #16
 8007024:	46bd      	mov	sp, r7
 8007026:	bd80      	pop	{r7, pc}

08007028 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	b084      	sub	sp, #16
 800702c:	af00      	add	r7, sp, #0
 800702e:	60f8      	str	r0, [r7, #12]
 8007030:	60b9      	str	r1, [r7, #8]
 8007032:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	699b      	ldr	r3, [r3, #24]
 800703a:	f003 0310 	and.w	r3, r3, #16
 800703e:	2b10      	cmp	r3, #16
 8007040:	d151      	bne.n	80070e6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007042:	e022      	b.n	800708a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007044:	68bb      	ldr	r3, [r7, #8]
 8007046:	f1b3 3fff 	cmp.w	r3, #4294967295
 800704a:	d01e      	beq.n	800708a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704c:	f7fd fe60 	bl	8004d10 <HAL_GetTick>
 8007050:	4602      	mov	r2, r0
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	1ad3      	subs	r3, r2, r3
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	429a      	cmp	r2, r3
 800705a:	d302      	bcc.n	8007062 <I2C_IsAcknowledgeFailed+0x3a>
 800705c:	68bb      	ldr	r3, [r7, #8]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d113      	bne.n	800708a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007066:	f043 0220 	orr.w	r2, r3, #32
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2220      	movs	r2, #32
 8007072:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	2200      	movs	r2, #0
 800707a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	2200      	movs	r2, #0
 8007082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007086:	2301      	movs	r3, #1
 8007088:	e02e      	b.n	80070e8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	699b      	ldr	r3, [r3, #24]
 8007090:	f003 0320 	and.w	r3, r3, #32
 8007094:	2b20      	cmp	r3, #32
 8007096:	d1d5      	bne.n	8007044 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	2210      	movs	r2, #16
 800709e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	2220      	movs	r2, #32
 80070a6:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80070a8:	68f8      	ldr	r0, [r7, #12]
 80070aa:	f7ff fedd 	bl	8006e68 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	6859      	ldr	r1, [r3, #4]
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	4b0d      	ldr	r3, [pc, #52]	; (80070f0 <I2C_IsAcknowledgeFailed+0xc8>)
 80070ba:	400b      	ands	r3, r1
 80070bc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070c2:	f043 0204 	orr.w	r2, r3, #4
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	2220      	movs	r2, #32
 80070ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	2200      	movs	r2, #0
 80070d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	2200      	movs	r2, #0
 80070de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80070e2:	2301      	movs	r3, #1
 80070e4:	e000      	b.n	80070e8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80070e6:	2300      	movs	r3, #0
}
 80070e8:	4618      	mov	r0, r3
 80070ea:	3710      	adds	r7, #16
 80070ec:	46bd      	mov	sp, r7
 80070ee:	bd80      	pop	{r7, pc}
 80070f0:	fe00e800 	.word	0xfe00e800

080070f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	607b      	str	r3, [r7, #4]
 80070fe:	460b      	mov	r3, r1
 8007100:	817b      	strh	r3, [r7, #10]
 8007102:	4613      	mov	r3, r2
 8007104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	69bb      	ldr	r3, [r7, #24]
 800710e:	0d5b      	lsrs	r3, r3, #21
 8007110:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007114:	4b0d      	ldr	r3, [pc, #52]	; (800714c <I2C_TransferConfig+0x58>)
 8007116:	430b      	orrs	r3, r1
 8007118:	43db      	mvns	r3, r3
 800711a:	ea02 0103 	and.w	r1, r2, r3
 800711e:	897b      	ldrh	r3, [r7, #10]
 8007120:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007124:	7a7b      	ldrb	r3, [r7, #9]
 8007126:	041b      	lsls	r3, r3, #16
 8007128:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800712c:	431a      	orrs	r2, r3
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	431a      	orrs	r2, r3
 8007132:	69bb      	ldr	r3, [r7, #24]
 8007134:	431a      	orrs	r2, r3
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	430a      	orrs	r2, r1
 800713c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800713e:	bf00      	nop
 8007140:	3714      	adds	r7, #20
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	03ff63ff 	.word	0x03ff63ff

08007150 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	d138      	bne.n	80071d8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800716c:	2b01      	cmp	r3, #1
 800716e:	d101      	bne.n	8007174 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007170:	2302      	movs	r3, #2
 8007172:	e032      	b.n	80071da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2224      	movs	r2, #36	; 0x24
 8007180:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	681a      	ldr	r2, [r3, #0]
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	f022 0201 	bic.w	r2, r2, #1
 8007192:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80071a2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	6819      	ldr	r1, [r3, #0]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	430a      	orrs	r2, r1
 80071b2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	681a      	ldr	r2, [r3, #0]
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f042 0201 	orr.w	r2, r2, #1
 80071c2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2220      	movs	r2, #32
 80071c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2200      	movs	r2, #0
 80071d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071d4:	2300      	movs	r3, #0
 80071d6:	e000      	b.n	80071da <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80071d8:	2302      	movs	r3, #2
  }
}
 80071da:	4618      	mov	r0, r3
 80071dc:	370c      	adds	r7, #12
 80071de:	46bd      	mov	sp, r7
 80071e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e4:	4770      	bx	lr

080071e6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80071e6:	b480      	push	{r7}
 80071e8:	b085      	sub	sp, #20
 80071ea:	af00      	add	r7, sp, #0
 80071ec:	6078      	str	r0, [r7, #4]
 80071ee:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071f6:	b2db      	uxtb	r3, r3
 80071f8:	2b20      	cmp	r3, #32
 80071fa:	d139      	bne.n	8007270 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007202:	2b01      	cmp	r3, #1
 8007204:	d101      	bne.n	800720a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007206:	2302      	movs	r3, #2
 8007208:	e033      	b.n	8007272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	2201      	movs	r2, #1
 800720e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	2224      	movs	r2, #36	; 0x24
 8007216:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	681a      	ldr	r2, [r3, #0]
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	f022 0201 	bic.w	r2, r2, #1
 8007228:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007238:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	021b      	lsls	r3, r3, #8
 800723e:	68fa      	ldr	r2, [r7, #12]
 8007240:	4313      	orrs	r3, r2
 8007242:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	68fa      	ldr	r2, [r7, #12]
 800724a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	681a      	ldr	r2, [r3, #0]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	f042 0201 	orr.w	r2, r2, #1
 800725a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	2220      	movs	r2, #32
 8007260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	2200      	movs	r2, #0
 8007268:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800726c:	2300      	movs	r3, #0
 800726e:	e000      	b.n	8007272 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007270:	2302      	movs	r3, #2
  }
}
 8007272:	4618      	mov	r0, r3
 8007274:	3714      	adds	r7, #20
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
	...

08007280 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d101      	bne.n	8007292 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800728e:	2301      	movs	r3, #1
 8007290:	e0bf      	b.n	8007412 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007298:	b2db      	uxtb	r3, r3
 800729a:	2b00      	cmp	r3, #0
 800729c:	d106      	bne.n	80072ac <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	2200      	movs	r2, #0
 80072a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	f7fd f8aa 	bl	8004400 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2202      	movs	r2, #2
 80072b0:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	699a      	ldr	r2, [r3, #24]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80072c2:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	6999      	ldr	r1, [r3, #24]
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	685a      	ldr	r2, [r3, #4]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072d8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	691b      	ldr	r3, [r3, #16]
 80072de:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	430a      	orrs	r2, r1
 80072e6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	6899      	ldr	r1, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681a      	ldr	r2, [r3, #0]
 80072f2:	4b4a      	ldr	r3, [pc, #296]	; (800741c <HAL_LTDC_Init+0x19c>)
 80072f4:	400b      	ands	r3, r1
 80072f6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	695b      	ldr	r3, [r3, #20]
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6899      	ldr	r1, [r3, #8]
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	699a      	ldr	r2, [r3, #24]
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	431a      	orrs	r2, r3
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	430a      	orrs	r2, r1
 8007314:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	68d9      	ldr	r1, [r3, #12]
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	4b3e      	ldr	r3, [pc, #248]	; (800741c <HAL_LTDC_Init+0x19c>)
 8007322:	400b      	ands	r3, r1
 8007324:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	69db      	ldr	r3, [r3, #28]
 800732a:	041b      	lsls	r3, r3, #16
 800732c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	68d9      	ldr	r1, [r3, #12]
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	6a1a      	ldr	r2, [r3, #32]
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	431a      	orrs	r2, r3
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	430a      	orrs	r2, r1
 8007342:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	6919      	ldr	r1, [r3, #16]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681a      	ldr	r2, [r3, #0]
 800734e:	4b33      	ldr	r3, [pc, #204]	; (800741c <HAL_LTDC_Init+0x19c>)
 8007350:	400b      	ands	r3, r1
 8007352:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007358:	041b      	lsls	r3, r3, #16
 800735a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	6919      	ldr	r1, [r3, #16]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	431a      	orrs	r2, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	430a      	orrs	r2, r1
 8007370:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	6959      	ldr	r1, [r3, #20]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681a      	ldr	r2, [r3, #0]
 800737c:	4b27      	ldr	r3, [pc, #156]	; (800741c <HAL_LTDC_Init+0x19c>)
 800737e:	400b      	ands	r3, r1
 8007380:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007386:	041b      	lsls	r3, r3, #16
 8007388:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	6959      	ldr	r1, [r3, #20]
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	431a      	orrs	r2, r3
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	430a      	orrs	r2, r1
 800739e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80073a6:	021b      	lsls	r3, r3, #8
 80073a8:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80073b0:	041b      	lsls	r3, r3, #16
 80073b2:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80073c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	687a      	ldr	r2, [r7, #4]
 80073d2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	430a      	orrs	r2, r1
 80073de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f042 0206 	orr.w	r2, r2, #6
 80073ee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	699a      	ldr	r2, [r3, #24]
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f042 0201 	orr.w	r2, r2, #1
 80073fe:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	2200      	movs	r2, #0
 8007404:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	2201      	movs	r2, #1
 800740c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007410:	2300      	movs	r3, #0
}
 8007412:	4618      	mov	r0, r3
 8007414:	3710      	adds	r7, #16
 8007416:	46bd      	mov	sp, r7
 8007418:	bd80      	pop	{r7, pc}
 800741a:	bf00      	nop
 800741c:	f000f800 	.word	0xf000f800

08007420 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007420:	b580      	push	{r7, lr}
 8007422:	b084      	sub	sp, #16
 8007424:	af00      	add	r7, sp, #0
 8007426:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800742e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007436:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	f003 0304 	and.w	r3, r3, #4
 800743e:	2b00      	cmp	r3, #0
 8007440:	d023      	beq.n	800748a <HAL_LTDC_IRQHandler+0x6a>
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	f003 0304 	and.w	r3, r3, #4
 8007448:	2b00      	cmp	r3, #0
 800744a:	d01e      	beq.n	800748a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	f022 0204 	bic.w	r2, r2, #4
 800745a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	2204      	movs	r2, #4
 8007462:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800746a:	f043 0201 	orr.w	r2, r3, #1
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	2204      	movs	r2, #4
 8007478:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2200      	movs	r2, #0
 8007480:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007484:	6878      	ldr	r0, [r7, #4]
 8007486:	f000 f86f 	bl	8007568 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	f003 0302 	and.w	r3, r3, #2
 8007490:	2b00      	cmp	r3, #0
 8007492:	d023      	beq.n	80074dc <HAL_LTDC_IRQHandler+0xbc>
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	f003 0302 	and.w	r3, r3, #2
 800749a:	2b00      	cmp	r3, #0
 800749c:	d01e      	beq.n	80074dc <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f022 0202 	bic.w	r2, r2, #2
 80074ac:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	2202      	movs	r2, #2
 80074b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80074bc:	f043 0202 	orr.w	r2, r3, #2
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	2204      	movs	r2, #4
 80074ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2200      	movs	r2, #0
 80074d2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f000 f846 	bl	8007568 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f003 0301 	and.w	r3, r3, #1
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d01b      	beq.n	800751e <HAL_LTDC_IRQHandler+0xfe>
 80074e6:	68bb      	ldr	r3, [r7, #8]
 80074e8:	f003 0301 	and.w	r3, r3, #1
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d016      	beq.n	800751e <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f022 0201 	bic.w	r2, r2, #1
 80074fe:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	2201      	movs	r2, #1
 8007506:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	2201      	movs	r2, #1
 800750c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	2200      	movs	r2, #0
 8007514:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007518:	6878      	ldr	r0, [r7, #4]
 800751a:	f000 f82f 	bl	800757c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	f003 0308 	and.w	r3, r3, #8
 8007524:	2b00      	cmp	r3, #0
 8007526:	d01b      	beq.n	8007560 <HAL_LTDC_IRQHandler+0x140>
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	f003 0308 	and.w	r3, r3, #8
 800752e:	2b00      	cmp	r3, #0
 8007530:	d016      	beq.n	8007560 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 0208 	bic.w	r2, r2, #8
 8007540:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	2208      	movs	r2, #8
 8007548:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2201      	movs	r2, #1
 800754e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	2200      	movs	r2, #0
 8007556:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800755a:	6878      	ldr	r0, [r7, #4]
 800755c:	f000 f818 	bl	8007590 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007560:	bf00      	nop
 8007562:	3710      	adds	r7, #16
 8007564:	46bd      	mov	sp, r7
 8007566:	bd80      	pop	{r7, pc}

08007568 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007568:	b480      	push	{r7}
 800756a:	b083      	sub	sp, #12
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007570:	bf00      	nop
 8007572:	370c      	adds	r7, #12
 8007574:	46bd      	mov	sp, r7
 8007576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757a:	4770      	bx	lr

0800757c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800757c:	b480      	push	{r7}
 800757e:	b083      	sub	sp, #12
 8007580:	af00      	add	r7, sp, #0
 8007582:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007584:	bf00      	nop
 8007586:	370c      	adds	r7, #12
 8007588:	46bd      	mov	sp, r7
 800758a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758e:	4770      	bx	lr

08007590 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007590:	b480      	push	{r7}
 8007592:	b083      	sub	sp, #12
 8007594:	af00      	add	r7, sp, #0
 8007596:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8007598:	bf00      	nop
 800759a:	370c      	adds	r7, #12
 800759c:	46bd      	mov	sp, r7
 800759e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a2:	4770      	bx	lr

080075a4 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80075a4:	b5b0      	push	{r4, r5, r7, lr}
 80075a6:	b084      	sub	sp, #16
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_LTDC_ConfigLayer+0x1a>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e02c      	b.n	8007618 <HAL_LTDC_ConfigLayer+0x74>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	2202      	movs	r2, #2
 80075ca:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80075ce:	68fa      	ldr	r2, [r7, #12]
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	2134      	movs	r1, #52	; 0x34
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	4413      	add	r3, r2
 80075da:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	4614      	mov	r4, r2
 80075e2:	461d      	mov	r5, r3
 80075e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80075ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80075f0:	682b      	ldr	r3, [r5, #0]
 80075f2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80075f4:	687a      	ldr	r2, [r7, #4]
 80075f6:	68b9      	ldr	r1, [r7, #8]
 80075f8:	68f8      	ldr	r0, [r7, #12]
 80075fa:	f000 f81f 	bl	800763c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	2201      	movs	r2, #1
 8007604:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	2201      	movs	r2, #1
 800760a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	2200      	movs	r2, #0
 8007612:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007616:	2300      	movs	r3, #0
}
 8007618:	4618      	mov	r0, r3
 800761a:	3710      	adds	r7, #16
 800761c:	46bd      	mov	sp, r7
 800761e:	bdb0      	pop	{r4, r5, r7, pc}

08007620 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007620:	b480      	push	{r7}
 8007622:	b083      	sub	sp, #12
 8007624:	af00      	add	r7, sp, #0
 8007626:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800762e:	b2db      	uxtb	r3, r3
}
 8007630:	4618      	mov	r0, r3
 8007632:	370c      	adds	r7, #12
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr

0800763c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800763c:	b480      	push	{r7}
 800763e:	b089      	sub	sp, #36	; 0x24
 8007640:	af00      	add	r7, sp, #0
 8007642:	60f8      	str	r0, [r7, #12]
 8007644:	60b9      	str	r1, [r7, #8]
 8007646:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	685a      	ldr	r2, [r3, #4]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	68db      	ldr	r3, [r3, #12]
 8007652:	0c1b      	lsrs	r3, r3, #16
 8007654:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007658:	4413      	add	r3, r2
 800765a:	041b      	lsls	r3, r3, #16
 800765c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	461a      	mov	r2, r3
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	01db      	lsls	r3, r3, #7
 8007668:	4413      	add	r3, r2
 800766a:	3384      	adds	r3, #132	; 0x84
 800766c:	685b      	ldr	r3, [r3, #4]
 800766e:	68fa      	ldr	r2, [r7, #12]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	4611      	mov	r1, r2
 8007674:	687a      	ldr	r2, [r7, #4]
 8007676:	01d2      	lsls	r2, r2, #7
 8007678:	440a      	add	r2, r1
 800767a:	3284      	adds	r2, #132	; 0x84
 800767c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007680:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	681a      	ldr	r2, [r3, #0]
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	68db      	ldr	r3, [r3, #12]
 800768c:	0c1b      	lsrs	r3, r3, #16
 800768e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007692:	4413      	add	r3, r2
 8007694:	1c5a      	adds	r2, r3, #1
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	681b      	ldr	r3, [r3, #0]
 800769a:	4619      	mov	r1, r3
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	01db      	lsls	r3, r3, #7
 80076a0:	440b      	add	r3, r1
 80076a2:	3384      	adds	r3, #132	; 0x84
 80076a4:	4619      	mov	r1, r3
 80076a6:	69fb      	ldr	r3, [r7, #28]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	68da      	ldr	r2, [r3, #12]
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	68db      	ldr	r3, [r3, #12]
 80076b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076ba:	4413      	add	r3, r2
 80076bc:	041b      	lsls	r3, r3, #16
 80076be:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	461a      	mov	r2, r3
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	01db      	lsls	r3, r3, #7
 80076ca:	4413      	add	r3, r2
 80076cc:	3384      	adds	r3, #132	; 0x84
 80076ce:	689b      	ldr	r3, [r3, #8]
 80076d0:	68fa      	ldr	r2, [r7, #12]
 80076d2:	6812      	ldr	r2, [r2, #0]
 80076d4:	4611      	mov	r1, r2
 80076d6:	687a      	ldr	r2, [r7, #4]
 80076d8:	01d2      	lsls	r2, r2, #7
 80076da:	440a      	add	r2, r1
 80076dc:	3284      	adds	r2, #132	; 0x84
 80076de:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80076e2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	689a      	ldr	r2, [r3, #8]
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	68db      	ldr	r3, [r3, #12]
 80076ee:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80076f2:	4413      	add	r3, r2
 80076f4:	1c5a      	adds	r2, r3, #1
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4619      	mov	r1, r3
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	01db      	lsls	r3, r3, #7
 8007700:	440b      	add	r3, r1
 8007702:	3384      	adds	r3, #132	; 0x84
 8007704:	4619      	mov	r1, r3
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	4313      	orrs	r3, r2
 800770a:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800770c:	68fb      	ldr	r3, [r7, #12]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	461a      	mov	r2, r3
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	01db      	lsls	r3, r3, #7
 8007716:	4413      	add	r3, r2
 8007718:	3384      	adds	r3, #132	; 0x84
 800771a:	691b      	ldr	r3, [r3, #16]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	6812      	ldr	r2, [r2, #0]
 8007720:	4611      	mov	r1, r2
 8007722:	687a      	ldr	r2, [r7, #4]
 8007724:	01d2      	lsls	r2, r2, #7
 8007726:	440a      	add	r2, r1
 8007728:	3284      	adds	r2, #132	; 0x84
 800772a:	f023 0307 	bic.w	r3, r3, #7
 800772e:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007730:	68fb      	ldr	r3, [r7, #12]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	461a      	mov	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	01db      	lsls	r3, r3, #7
 800773a:	4413      	add	r3, r2
 800773c:	3384      	adds	r3, #132	; 0x84
 800773e:	461a      	mov	r2, r3
 8007740:	68bb      	ldr	r3, [r7, #8]
 8007742:	691b      	ldr	r3, [r3, #16]
 8007744:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800774c:	021b      	lsls	r3, r3, #8
 800774e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007750:	68bb      	ldr	r3, [r7, #8]
 8007752:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8007756:	041b      	lsls	r3, r3, #16
 8007758:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	699b      	ldr	r3, [r3, #24]
 800775e:	061b      	lsls	r3, r3, #24
 8007760:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	461a      	mov	r2, r3
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	01db      	lsls	r3, r3, #7
 800776c:	4413      	add	r3, r2
 800776e:	3384      	adds	r3, #132	; 0x84
 8007770:	699b      	ldr	r3, [r3, #24]
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	01db      	lsls	r3, r3, #7
 800777c:	4413      	add	r3, r2
 800777e:	3384      	adds	r3, #132	; 0x84
 8007780:	461a      	mov	r2, r3
 8007782:	2300      	movs	r3, #0
 8007784:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800778c:	461a      	mov	r2, r3
 800778e:	69fb      	ldr	r3, [r7, #28]
 8007790:	431a      	orrs	r2, r3
 8007792:	69bb      	ldr	r3, [r7, #24]
 8007794:	431a      	orrs	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4619      	mov	r1, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	01db      	lsls	r3, r3, #7
 80077a0:	440b      	add	r3, r1
 80077a2:	3384      	adds	r3, #132	; 0x84
 80077a4:	4619      	mov	r1, r3
 80077a6:	697b      	ldr	r3, [r7, #20]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	461a      	mov	r2, r3
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	01db      	lsls	r3, r3, #7
 80077b6:	4413      	add	r3, r2
 80077b8:	3384      	adds	r3, #132	; 0x84
 80077ba:	695b      	ldr	r3, [r3, #20]
 80077bc:	68fa      	ldr	r2, [r7, #12]
 80077be:	6812      	ldr	r2, [r2, #0]
 80077c0:	4611      	mov	r1, r2
 80077c2:	687a      	ldr	r2, [r7, #4]
 80077c4:	01d2      	lsls	r2, r2, #7
 80077c6:	440a      	add	r2, r1
 80077c8:	3284      	adds	r2, #132	; 0x84
 80077ca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80077ce:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	461a      	mov	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	01db      	lsls	r3, r3, #7
 80077da:	4413      	add	r3, r2
 80077dc:	3384      	adds	r3, #132	; 0x84
 80077de:	461a      	mov	r2, r3
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	695b      	ldr	r3, [r3, #20]
 80077e4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	01db      	lsls	r3, r3, #7
 80077f0:	4413      	add	r3, r2
 80077f2:	3384      	adds	r3, #132	; 0x84
 80077f4:	69da      	ldr	r2, [r3, #28]
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	4619      	mov	r1, r3
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	01db      	lsls	r3, r3, #7
 8007800:	440b      	add	r3, r1
 8007802:	3384      	adds	r3, #132	; 0x84
 8007804:	4619      	mov	r1, r3
 8007806:	4b58      	ldr	r3, [pc, #352]	; (8007968 <LTDC_SetConfig+0x32c>)
 8007808:	4013      	ands	r3, r2
 800780a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800780c:	68bb      	ldr	r3, [r7, #8]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	6a1b      	ldr	r3, [r3, #32]
 8007814:	68f9      	ldr	r1, [r7, #12]
 8007816:	6809      	ldr	r1, [r1, #0]
 8007818:	4608      	mov	r0, r1
 800781a:	6879      	ldr	r1, [r7, #4]
 800781c:	01c9      	lsls	r1, r1, #7
 800781e:	4401      	add	r1, r0
 8007820:	3184      	adds	r1, #132	; 0x84
 8007822:	4313      	orrs	r3, r2
 8007824:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	01db      	lsls	r3, r3, #7
 8007830:	4413      	add	r3, r2
 8007832:	3384      	adds	r3, #132	; 0x84
 8007834:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	461a      	mov	r2, r3
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	01db      	lsls	r3, r3, #7
 8007840:	4413      	add	r3, r2
 8007842:	3384      	adds	r3, #132	; 0x84
 8007844:	461a      	mov	r2, r3
 8007846:	2300      	movs	r3, #0
 8007848:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	461a      	mov	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	01db      	lsls	r3, r3, #7
 8007854:	4413      	add	r3, r2
 8007856:	3384      	adds	r3, #132	; 0x84
 8007858:	461a      	mov	r2, r3
 800785a:	68bb      	ldr	r3, [r7, #8]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d102      	bne.n	800786e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007868:	2304      	movs	r3, #4
 800786a:	61fb      	str	r3, [r7, #28]
 800786c:	e01b      	b.n	80078a6 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800786e:	68bb      	ldr	r3, [r7, #8]
 8007870:	691b      	ldr	r3, [r3, #16]
 8007872:	2b01      	cmp	r3, #1
 8007874:	d102      	bne.n	800787c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8007876:	2303      	movs	r3, #3
 8007878:	61fb      	str	r3, [r7, #28]
 800787a:	e014      	b.n	80078a6 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	691b      	ldr	r3, [r3, #16]
 8007880:	2b04      	cmp	r3, #4
 8007882:	d00b      	beq.n	800789c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007884:	68bb      	ldr	r3, [r7, #8]
 8007886:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007888:	2b02      	cmp	r3, #2
 800788a:	d007      	beq.n	800789c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800788c:	68bb      	ldr	r3, [r7, #8]
 800788e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007890:	2b03      	cmp	r3, #3
 8007892:	d003      	beq.n	800789c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8007894:	68bb      	ldr	r3, [r7, #8]
 8007896:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007898:	2b07      	cmp	r3, #7
 800789a:	d102      	bne.n	80078a2 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800789c:	2302      	movs	r3, #2
 800789e:	61fb      	str	r3, [r7, #28]
 80078a0:	e001      	b.n	80078a6 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80078a2:	2301      	movs	r3, #1
 80078a4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	461a      	mov	r2, r3
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	01db      	lsls	r3, r3, #7
 80078b0:	4413      	add	r3, r2
 80078b2:	3384      	adds	r3, #132	; 0x84
 80078b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b6:	68fa      	ldr	r2, [r7, #12]
 80078b8:	6812      	ldr	r2, [r2, #0]
 80078ba:	4611      	mov	r1, r2
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	01d2      	lsls	r2, r2, #7
 80078c0:	440a      	add	r2, r1
 80078c2:	3284      	adds	r2, #132	; 0x84
 80078c4:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80078c8:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078ce:	69fa      	ldr	r2, [r7, #28]
 80078d0:	fb02 f303 	mul.w	r3, r2, r3
 80078d4:	041a      	lsls	r2, r3, #16
 80078d6:	68bb      	ldr	r3, [r7, #8]
 80078d8:	6859      	ldr	r1, [r3, #4]
 80078da:	68bb      	ldr	r3, [r7, #8]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	1acb      	subs	r3, r1, r3
 80078e0:	69f9      	ldr	r1, [r7, #28]
 80078e2:	fb01 f303 	mul.w	r3, r1, r3
 80078e6:	3303      	adds	r3, #3
 80078e8:	68f9      	ldr	r1, [r7, #12]
 80078ea:	6809      	ldr	r1, [r1, #0]
 80078ec:	4608      	mov	r0, r1
 80078ee:	6879      	ldr	r1, [r7, #4]
 80078f0:	01c9      	lsls	r1, r1, #7
 80078f2:	4401      	add	r1, r0
 80078f4:	3184      	adds	r1, #132	; 0x84
 80078f6:	4313      	orrs	r3, r2
 80078f8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	461a      	mov	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	01db      	lsls	r3, r3, #7
 8007904:	4413      	add	r3, r2
 8007906:	3384      	adds	r3, #132	; 0x84
 8007908:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	4619      	mov	r1, r3
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	01db      	lsls	r3, r3, #7
 8007914:	440b      	add	r3, r1
 8007916:	3384      	adds	r3, #132	; 0x84
 8007918:	4619      	mov	r1, r3
 800791a:	4b14      	ldr	r3, [pc, #80]	; (800796c <LTDC_SetConfig+0x330>)
 800791c:	4013      	ands	r3, r2
 800791e:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	461a      	mov	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	01db      	lsls	r3, r3, #7
 800792a:	4413      	add	r3, r2
 800792c:	3384      	adds	r3, #132	; 0x84
 800792e:	461a      	mov	r2, r3
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007934:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	461a      	mov	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	01db      	lsls	r3, r3, #7
 8007940:	4413      	add	r3, r2
 8007942:	3384      	adds	r3, #132	; 0x84
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	68fa      	ldr	r2, [r7, #12]
 8007948:	6812      	ldr	r2, [r2, #0]
 800794a:	4611      	mov	r1, r2
 800794c:	687a      	ldr	r2, [r7, #4]
 800794e:	01d2      	lsls	r2, r2, #7
 8007950:	440a      	add	r2, r1
 8007952:	3284      	adds	r2, #132	; 0x84
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	6013      	str	r3, [r2, #0]
}
 800795a:	bf00      	nop
 800795c:	3724      	adds	r7, #36	; 0x24
 800795e:	46bd      	mov	sp, r7
 8007960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007964:	4770      	bx	lr
 8007966:	bf00      	nop
 8007968:	fffff8f8 	.word	0xfffff8f8
 800796c:	fffff800 	.word	0xfffff800

08007970 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007970:	b480      	push	{r7}
 8007972:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007974:	4b05      	ldr	r3, [pc, #20]	; (800798c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	4a04      	ldr	r2, [pc, #16]	; (800798c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800797a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800797e:	6013      	str	r3, [r2, #0]
}
 8007980:	bf00      	nop
 8007982:	46bd      	mov	sp, r7
 8007984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007988:	4770      	bx	lr
 800798a:	bf00      	nop
 800798c:	40007000 	.word	0x40007000

08007990 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007990:	b580      	push	{r7, lr}
 8007992:	b082      	sub	sp, #8
 8007994:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8007996:	2300      	movs	r3, #0
 8007998:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800799a:	4b23      	ldr	r3, [pc, #140]	; (8007a28 <HAL_PWREx_EnableOverDrive+0x98>)
 800799c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800799e:	4a22      	ldr	r2, [pc, #136]	; (8007a28 <HAL_PWREx_EnableOverDrive+0x98>)
 80079a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079a4:	6413      	str	r3, [r2, #64]	; 0x40
 80079a6:	4b20      	ldr	r3, [pc, #128]	; (8007a28 <HAL_PWREx_EnableOverDrive+0x98>)
 80079a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ae:	603b      	str	r3, [r7, #0]
 80079b0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80079b2:	4b1e      	ldr	r3, [pc, #120]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a1d      	ldr	r2, [pc, #116]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80079b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079bc:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079be:	f7fd f9a7 	bl	8004d10 <HAL_GetTick>
 80079c2:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079c4:	e009      	b.n	80079da <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079c6:	f7fd f9a3 	bl	8004d10 <HAL_GetTick>
 80079ca:	4602      	mov	r2, r0
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	1ad3      	subs	r3, r2, r3
 80079d0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079d4:	d901      	bls.n	80079da <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80079d6:	2303      	movs	r3, #3
 80079d8:	e022      	b.n	8007a20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80079da:	4b14      	ldr	r3, [pc, #80]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80079e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e6:	d1ee      	bne.n	80079c6 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80079e8:	4b10      	ldr	r3, [pc, #64]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a0f      	ldr	r2, [pc, #60]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 80079ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80079f2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80079f4:	f7fd f98c 	bl	8004d10 <HAL_GetTick>
 80079f8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80079fa:	e009      	b.n	8007a10 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80079fc:	f7fd f988 	bl	8004d10 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	687b      	ldr	r3, [r7, #4]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007a0a:	d901      	bls.n	8007a10 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e007      	b.n	8007a20 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007a10:	4b06      	ldr	r3, [pc, #24]	; (8007a2c <HAL_PWREx_EnableOverDrive+0x9c>)
 8007a12:	685b      	ldr	r3, [r3, #4]
 8007a14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a18:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007a1c:	d1ee      	bne.n	80079fc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007a1e:	2300      	movs	r3, #0
}
 8007a20:	4618      	mov	r0, r3
 8007a22:	3708      	adds	r7, #8
 8007a24:	46bd      	mov	sp, r7
 8007a26:	bd80      	pop	{r7, pc}
 8007a28:	40023800 	.word	0x40023800
 8007a2c:	40007000 	.word	0x40007000

08007a30 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007a30:	b580      	push	{r7, lr}
 8007a32:	b086      	sub	sp, #24
 8007a34:	af00      	add	r7, sp, #0
 8007a36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007a38:	2300      	movs	r3, #0
 8007a3a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d101      	bne.n	8007a46 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007a42:	2301      	movs	r3, #1
 8007a44:	e291      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f003 0301 	and.w	r3, r3, #1
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8087 	beq.w	8007b62 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007a54:	4b96      	ldr	r3, [pc, #600]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007a56:	689b      	ldr	r3, [r3, #8]
 8007a58:	f003 030c 	and.w	r3, r3, #12
 8007a5c:	2b04      	cmp	r3, #4
 8007a5e:	d00c      	beq.n	8007a7a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a60:	4b93      	ldr	r3, [pc, #588]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007a62:	689b      	ldr	r3, [r3, #8]
 8007a64:	f003 030c 	and.w	r3, r3, #12
 8007a68:	2b08      	cmp	r3, #8
 8007a6a:	d112      	bne.n	8007a92 <HAL_RCC_OscConfig+0x62>
 8007a6c:	4b90      	ldr	r3, [pc, #576]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007a74:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007a78:	d10b      	bne.n	8007a92 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a7a:	4b8d      	ldr	r3, [pc, #564]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d06c      	beq.n	8007b60 <HAL_RCC_OscConfig+0x130>
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	685b      	ldr	r3, [r3, #4]
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d168      	bne.n	8007b60 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007a8e:	2301      	movs	r3, #1
 8007a90:	e26b      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	685b      	ldr	r3, [r3, #4]
 8007a96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a9a:	d106      	bne.n	8007aaa <HAL_RCC_OscConfig+0x7a>
 8007a9c:	4b84      	ldr	r3, [pc, #528]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a83      	ldr	r2, [pc, #524]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007aa2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aa6:	6013      	str	r3, [r2, #0]
 8007aa8:	e02e      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	685b      	ldr	r3, [r3, #4]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d10c      	bne.n	8007acc <HAL_RCC_OscConfig+0x9c>
 8007ab2:	4b7f      	ldr	r3, [pc, #508]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	4a7e      	ldr	r2, [pc, #504]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ab8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007abc:	6013      	str	r3, [r2, #0]
 8007abe:	4b7c      	ldr	r3, [pc, #496]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	4a7b      	ldr	r2, [pc, #492]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ac4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007ac8:	6013      	str	r3, [r2, #0]
 8007aca:	e01d      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	685b      	ldr	r3, [r3, #4]
 8007ad0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007ad4:	d10c      	bne.n	8007af0 <HAL_RCC_OscConfig+0xc0>
 8007ad6:	4b76      	ldr	r3, [pc, #472]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	4a75      	ldr	r2, [pc, #468]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007adc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007ae0:	6013      	str	r3, [r2, #0]
 8007ae2:	4b73      	ldr	r3, [pc, #460]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4a72      	ldr	r2, [pc, #456]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007aec:	6013      	str	r3, [r2, #0]
 8007aee:	e00b      	b.n	8007b08 <HAL_RCC_OscConfig+0xd8>
 8007af0:	4b6f      	ldr	r3, [pc, #444]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a6e      	ldr	r2, [pc, #440]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007af6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007afa:	6013      	str	r3, [r2, #0]
 8007afc:	4b6c      	ldr	r3, [pc, #432]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	4a6b      	ldr	r2, [pc, #428]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b02:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b06:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	685b      	ldr	r3, [r3, #4]
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d013      	beq.n	8007b38 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b10:	f7fd f8fe 	bl	8004d10 <HAL_GetTick>
 8007b14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b16:	e008      	b.n	8007b2a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b18:	f7fd f8fa 	bl	8004d10 <HAL_GetTick>
 8007b1c:	4602      	mov	r2, r0
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	1ad3      	subs	r3, r2, r3
 8007b22:	2b64      	cmp	r3, #100	; 0x64
 8007b24:	d901      	bls.n	8007b2a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007b26:	2303      	movs	r3, #3
 8007b28:	e21f      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007b2a:	4b61      	ldr	r3, [pc, #388]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d0f0      	beq.n	8007b18 <HAL_RCC_OscConfig+0xe8>
 8007b36:	e014      	b.n	8007b62 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b38:	f7fd f8ea 	bl	8004d10 <HAL_GetTick>
 8007b3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b3e:	e008      	b.n	8007b52 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b40:	f7fd f8e6 	bl	8004d10 <HAL_GetTick>
 8007b44:	4602      	mov	r2, r0
 8007b46:	693b      	ldr	r3, [r7, #16]
 8007b48:	1ad3      	subs	r3, r2, r3
 8007b4a:	2b64      	cmp	r3, #100	; 0x64
 8007b4c:	d901      	bls.n	8007b52 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007b4e:	2303      	movs	r3, #3
 8007b50:	e20b      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007b52:	4b57      	ldr	r3, [pc, #348]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d1f0      	bne.n	8007b40 <HAL_RCC_OscConfig+0x110>
 8007b5e:	e000      	b.n	8007b62 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b60:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f003 0302 	and.w	r3, r3, #2
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d069      	beq.n	8007c42 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007b6e:	4b50      	ldr	r3, [pc, #320]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b7a:	4b4d      	ldr	r3, [pc, #308]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b7c:	689b      	ldr	r3, [r3, #8]
 8007b7e:	f003 030c 	and.w	r3, r3, #12
 8007b82:	2b08      	cmp	r3, #8
 8007b84:	d11c      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x190>
 8007b86:	4b4a      	ldr	r3, [pc, #296]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b88:	685b      	ldr	r3, [r3, #4]
 8007b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d116      	bne.n	8007bc0 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b92:	4b47      	ldr	r3, [pc, #284]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f003 0302 	and.w	r3, r3, #2
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d005      	beq.n	8007baa <HAL_RCC_OscConfig+0x17a>
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	68db      	ldr	r3, [r3, #12]
 8007ba2:	2b01      	cmp	r3, #1
 8007ba4:	d001      	beq.n	8007baa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e1df      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007baa:	4b41      	ldr	r3, [pc, #260]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	691b      	ldr	r3, [r3, #16]
 8007bb6:	00db      	lsls	r3, r3, #3
 8007bb8:	493d      	ldr	r1, [pc, #244]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007bbe:	e040      	b.n	8007c42 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	68db      	ldr	r3, [r3, #12]
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d023      	beq.n	8007c10 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bc8:	4b39      	ldr	r3, [pc, #228]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	4a38      	ldr	r2, [pc, #224]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bce:	f043 0301 	orr.w	r3, r3, #1
 8007bd2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bd4:	f7fd f89c 	bl	8004d10 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007bdc:	f7fd f898 	bl	8004d10 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e1bd      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007bee:	4b30      	ldr	r3, [pc, #192]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0f0      	beq.n	8007bdc <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bfa:	4b2d      	ldr	r3, [pc, #180]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	00db      	lsls	r3, r3, #3
 8007c08:	4929      	ldr	r1, [pc, #164]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c0a:	4313      	orrs	r3, r2
 8007c0c:	600b      	str	r3, [r1, #0]
 8007c0e:	e018      	b.n	8007c42 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c10:	4b27      	ldr	r3, [pc, #156]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	4a26      	ldr	r2, [pc, #152]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c16:	f023 0301 	bic.w	r3, r3, #1
 8007c1a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c1c:	f7fd f878 	bl	8004d10 <HAL_GetTick>
 8007c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c22:	e008      	b.n	8007c36 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c24:	f7fd f874 	bl	8004d10 <HAL_GetTick>
 8007c28:	4602      	mov	r2, r0
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	1ad3      	subs	r3, r2, r3
 8007c2e:	2b02      	cmp	r3, #2
 8007c30:	d901      	bls.n	8007c36 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007c32:	2303      	movs	r3, #3
 8007c34:	e199      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007c36:	4b1e      	ldr	r3, [pc, #120]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f003 0302 	and.w	r3, r3, #2
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d1f0      	bne.n	8007c24 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f003 0308 	and.w	r3, r3, #8
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d038      	beq.n	8007cc0 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d019      	beq.n	8007c8a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c56:	4b16      	ldr	r3, [pc, #88]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c5a:	4a15      	ldr	r2, [pc, #84]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c5c:	f043 0301 	orr.w	r3, r3, #1
 8007c60:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c62:	f7fd f855 	bl	8004d10 <HAL_GetTick>
 8007c66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c68:	e008      	b.n	8007c7c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c6a:	f7fd f851 	bl	8004d10 <HAL_GetTick>
 8007c6e:	4602      	mov	r2, r0
 8007c70:	693b      	ldr	r3, [r7, #16]
 8007c72:	1ad3      	subs	r3, r2, r3
 8007c74:	2b02      	cmp	r3, #2
 8007c76:	d901      	bls.n	8007c7c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c78:	2303      	movs	r3, #3
 8007c7a:	e176      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007c7c:	4b0c      	ldr	r3, [pc, #48]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c80:	f003 0302 	and.w	r3, r3, #2
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d0f0      	beq.n	8007c6a <HAL_RCC_OscConfig+0x23a>
 8007c88:	e01a      	b.n	8007cc0 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007c8a:	4b09      	ldr	r3, [pc, #36]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c8e:	4a08      	ldr	r2, [pc, #32]	; (8007cb0 <HAL_RCC_OscConfig+0x280>)
 8007c90:	f023 0301 	bic.w	r3, r3, #1
 8007c94:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c96:	f7fd f83b 	bl	8004d10 <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c9c:	e00a      	b.n	8007cb4 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c9e:	f7fd f837 	bl	8004d10 <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d903      	bls.n	8007cb4 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e15c      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
 8007cb0:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007cb4:	4b91      	ldr	r3, [pc, #580]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007cb6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cb8:	f003 0302 	and.w	r3, r3, #2
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d1ee      	bne.n	8007c9e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f003 0304 	and.w	r3, r3, #4
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	f000 80a4 	beq.w	8007e16 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007cce:	4b8b      	ldr	r3, [pc, #556]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10d      	bne.n	8007cf6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007cda:	4b88      	ldr	r3, [pc, #544]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	4a87      	ldr	r2, [pc, #540]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007ce0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ce4:	6413      	str	r3, [r2, #64]	; 0x40
 8007ce6:	4b85      	ldr	r3, [pc, #532]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007ce8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007cee:	60bb      	str	r3, [r7, #8]
 8007cf0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007cf6:	4b82      	ldr	r3, [pc, #520]	; (8007f00 <HAL_RCC_OscConfig+0x4d0>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d118      	bne.n	8007d34 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007d02:	4b7f      	ldr	r3, [pc, #508]	; (8007f00 <HAL_RCC_OscConfig+0x4d0>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4a7e      	ldr	r2, [pc, #504]	; (8007f00 <HAL_RCC_OscConfig+0x4d0>)
 8007d08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d0c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d0e:	f7fc ffff 	bl	8004d10 <HAL_GetTick>
 8007d12:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d14:	e008      	b.n	8007d28 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d16:	f7fc fffb 	bl	8004d10 <HAL_GetTick>
 8007d1a:	4602      	mov	r2, r0
 8007d1c:	693b      	ldr	r3, [r7, #16]
 8007d1e:	1ad3      	subs	r3, r2, r3
 8007d20:	2b64      	cmp	r3, #100	; 0x64
 8007d22:	d901      	bls.n	8007d28 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007d24:	2303      	movs	r3, #3
 8007d26:	e120      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d28:	4b75      	ldr	r3, [pc, #468]	; (8007f00 <HAL_RCC_OscConfig+0x4d0>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d0f0      	beq.n	8007d16 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	689b      	ldr	r3, [r3, #8]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	d106      	bne.n	8007d4a <HAL_RCC_OscConfig+0x31a>
 8007d3c:	4b6f      	ldr	r3, [pc, #444]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d40:	4a6e      	ldr	r2, [pc, #440]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d42:	f043 0301 	orr.w	r3, r3, #1
 8007d46:	6713      	str	r3, [r2, #112]	; 0x70
 8007d48:	e02d      	b.n	8007da6 <HAL_RCC_OscConfig+0x376>
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	689b      	ldr	r3, [r3, #8]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	d10c      	bne.n	8007d6c <HAL_RCC_OscConfig+0x33c>
 8007d52:	4b6a      	ldr	r3, [pc, #424]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d56:	4a69      	ldr	r2, [pc, #420]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	f023 0301 	bic.w	r3, r3, #1
 8007d5c:	6713      	str	r3, [r2, #112]	; 0x70
 8007d5e:	4b67      	ldr	r3, [pc, #412]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d62:	4a66      	ldr	r2, [pc, #408]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d64:	f023 0304 	bic.w	r3, r3, #4
 8007d68:	6713      	str	r3, [r2, #112]	; 0x70
 8007d6a:	e01c      	b.n	8007da6 <HAL_RCC_OscConfig+0x376>
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	2b05      	cmp	r3, #5
 8007d72:	d10c      	bne.n	8007d8e <HAL_RCC_OscConfig+0x35e>
 8007d74:	4b61      	ldr	r3, [pc, #388]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d78:	4a60      	ldr	r2, [pc, #384]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d7a:	f043 0304 	orr.w	r3, r3, #4
 8007d7e:	6713      	str	r3, [r2, #112]	; 0x70
 8007d80:	4b5e      	ldr	r3, [pc, #376]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d84:	4a5d      	ldr	r2, [pc, #372]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	f043 0301 	orr.w	r3, r3, #1
 8007d8a:	6713      	str	r3, [r2, #112]	; 0x70
 8007d8c:	e00b      	b.n	8007da6 <HAL_RCC_OscConfig+0x376>
 8007d8e:	4b5b      	ldr	r3, [pc, #364]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d92:	4a5a      	ldr	r2, [pc, #360]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d94:	f023 0301 	bic.w	r3, r3, #1
 8007d98:	6713      	str	r3, [r2, #112]	; 0x70
 8007d9a:	4b58      	ldr	r3, [pc, #352]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007d9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d9e:	4a57      	ldr	r2, [pc, #348]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007da0:	f023 0304 	bic.w	r3, r3, #4
 8007da4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	689b      	ldr	r3, [r3, #8]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d015      	beq.n	8007dda <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dae:	f7fc ffaf 	bl	8004d10 <HAL_GetTick>
 8007db2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007db4:	e00a      	b.n	8007dcc <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007db6:	f7fc ffab 	bl	8004d10 <HAL_GetTick>
 8007dba:	4602      	mov	r2, r0
 8007dbc:	693b      	ldr	r3, [r7, #16]
 8007dbe:	1ad3      	subs	r3, r2, r3
 8007dc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d901      	bls.n	8007dcc <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007dc8:	2303      	movs	r3, #3
 8007dca:	e0ce      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007dcc:	4b4b      	ldr	r3, [pc, #300]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007dce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dd0:	f003 0302 	and.w	r3, r3, #2
 8007dd4:	2b00      	cmp	r3, #0
 8007dd6:	d0ee      	beq.n	8007db6 <HAL_RCC_OscConfig+0x386>
 8007dd8:	e014      	b.n	8007e04 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007dda:	f7fc ff99 	bl	8004d10 <HAL_GetTick>
 8007dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007de0:	e00a      	b.n	8007df8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de2:	f7fc ff95 	bl	8004d10 <HAL_GetTick>
 8007de6:	4602      	mov	r2, r0
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	1ad3      	subs	r3, r2, r3
 8007dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df0:	4293      	cmp	r3, r2
 8007df2:	d901      	bls.n	8007df8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007df4:	2303      	movs	r3, #3
 8007df6:	e0b8      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007df8:	4b40      	ldr	r3, [pc, #256]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007dfc:	f003 0302 	and.w	r3, r3, #2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	d1ee      	bne.n	8007de2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007e04:	7dfb      	ldrb	r3, [r7, #23]
 8007e06:	2b01      	cmp	r3, #1
 8007e08:	d105      	bne.n	8007e16 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e0a:	4b3c      	ldr	r3, [pc, #240]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e0e:	4a3b      	ldr	r2, [pc, #236]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e10:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e14:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	699b      	ldr	r3, [r3, #24]
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	f000 80a4 	beq.w	8007f68 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007e20:	4b36      	ldr	r3, [pc, #216]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e22:	689b      	ldr	r3, [r3, #8]
 8007e24:	f003 030c 	and.w	r3, r3, #12
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	d06b      	beq.n	8007f04 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	699b      	ldr	r3, [r3, #24]
 8007e30:	2b02      	cmp	r3, #2
 8007e32:	d149      	bne.n	8007ec8 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e34:	4b31      	ldr	r3, [pc, #196]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	4a30      	ldr	r2, [pc, #192]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e40:	f7fc ff66 	bl	8004d10 <HAL_GetTick>
 8007e44:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e46:	e008      	b.n	8007e5a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e48:	f7fc ff62 	bl	8004d10 <HAL_GetTick>
 8007e4c:	4602      	mov	r2, r0
 8007e4e:	693b      	ldr	r3, [r7, #16]
 8007e50:	1ad3      	subs	r3, r2, r3
 8007e52:	2b02      	cmp	r3, #2
 8007e54:	d901      	bls.n	8007e5a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007e56:	2303      	movs	r3, #3
 8007e58:	e087      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e5a:	4b28      	ldr	r3, [pc, #160]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e62:	2b00      	cmp	r3, #0
 8007e64:	d1f0      	bne.n	8007e48 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	69da      	ldr	r2, [r3, #28]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	6a1b      	ldr	r3, [r3, #32]
 8007e6e:	431a      	orrs	r2, r3
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e74:	019b      	lsls	r3, r3, #6
 8007e76:	431a      	orrs	r2, r3
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e7c:	085b      	lsrs	r3, r3, #1
 8007e7e:	3b01      	subs	r3, #1
 8007e80:	041b      	lsls	r3, r3, #16
 8007e82:	431a      	orrs	r2, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e88:	061b      	lsls	r3, r3, #24
 8007e8a:	4313      	orrs	r3, r2
 8007e8c:	4a1b      	ldr	r2, [pc, #108]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007e92:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007e94:	4b19      	ldr	r3, [pc, #100]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4a18      	ldr	r2, [pc, #96]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007e9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ea0:	f7fc ff36 	bl	8004d10 <HAL_GetTick>
 8007ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ea6:	e008      	b.n	8007eba <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ea8:	f7fc ff32 	bl	8004d10 <HAL_GetTick>
 8007eac:	4602      	mov	r2, r0
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	2b02      	cmp	r3, #2
 8007eb4:	d901      	bls.n	8007eba <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007eb6:	2303      	movs	r3, #3
 8007eb8:	e057      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007eba:	4b10      	ldr	r3, [pc, #64]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007ebc:	681b      	ldr	r3, [r3, #0]
 8007ebe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ec2:	2b00      	cmp	r3, #0
 8007ec4:	d0f0      	beq.n	8007ea8 <HAL_RCC_OscConfig+0x478>
 8007ec6:	e04f      	b.n	8007f68 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ec8:	4b0c      	ldr	r3, [pc, #48]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	4a0b      	ldr	r2, [pc, #44]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007ece:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ed2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ed4:	f7fc ff1c 	bl	8004d10 <HAL_GetTick>
 8007ed8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eda:	e008      	b.n	8007eee <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007edc:	f7fc ff18 	bl	8004d10 <HAL_GetTick>
 8007ee0:	4602      	mov	r2, r0
 8007ee2:	693b      	ldr	r3, [r7, #16]
 8007ee4:	1ad3      	subs	r3, r2, r3
 8007ee6:	2b02      	cmp	r3, #2
 8007ee8:	d901      	bls.n	8007eee <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007eea:	2303      	movs	r3, #3
 8007eec:	e03d      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007eee:	4b03      	ldr	r3, [pc, #12]	; (8007efc <HAL_RCC_OscConfig+0x4cc>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1f0      	bne.n	8007edc <HAL_RCC_OscConfig+0x4ac>
 8007efa:	e035      	b.n	8007f68 <HAL_RCC_OscConfig+0x538>
 8007efc:	40023800 	.word	0x40023800
 8007f00:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007f04:	4b1b      	ldr	r3, [pc, #108]	; (8007f74 <HAL_RCC_OscConfig+0x544>)
 8007f06:	685b      	ldr	r3, [r3, #4]
 8007f08:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	699b      	ldr	r3, [r3, #24]
 8007f0e:	2b01      	cmp	r3, #1
 8007f10:	d028      	beq.n	8007f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f12:	68fb      	ldr	r3, [r7, #12]
 8007f14:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007f1c:	429a      	cmp	r2, r3
 8007f1e:	d121      	bne.n	8007f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d11a      	bne.n	8007f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f2e:	68fa      	ldr	r2, [r7, #12]
 8007f30:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007f34:	4013      	ands	r3, r2
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007f3a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007f3c:	4293      	cmp	r3, r2
 8007f3e:	d111      	bne.n	8007f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d107      	bne.n	8007f64 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007f54:	68fb      	ldr	r3, [r7, #12]
 8007f56:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f5e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007f60:	429a      	cmp	r2, r3
 8007f62:	d001      	beq.n	8007f68 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007f64:	2301      	movs	r3, #1
 8007f66:	e000      	b.n	8007f6a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007f68:	2300      	movs	r3, #0
}
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	3718      	adds	r7, #24
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	40023800 	.word	0x40023800

08007f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b084      	sub	sp, #16
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
 8007f80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007f82:	2300      	movs	r3, #0
 8007f84:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d101      	bne.n	8007f90 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e0d0      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007f90:	4b6a      	ldr	r3, [pc, #424]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 030f 	and.w	r3, r3, #15
 8007f98:	683a      	ldr	r2, [r7, #0]
 8007f9a:	429a      	cmp	r2, r3
 8007f9c:	d910      	bls.n	8007fc0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007f9e:	4b67      	ldr	r3, [pc, #412]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f023 020f 	bic.w	r2, r3, #15
 8007fa6:	4965      	ldr	r1, [pc, #404]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 8007fa8:	683b      	ldr	r3, [r7, #0]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007fae:	4b63      	ldr	r3, [pc, #396]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	f003 030f 	and.w	r3, r3, #15
 8007fb6:	683a      	ldr	r2, [r7, #0]
 8007fb8:	429a      	cmp	r2, r3
 8007fba:	d001      	beq.n	8007fc0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007fbc:	2301      	movs	r3, #1
 8007fbe:	e0b8      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	f003 0302 	and.w	r3, r3, #2
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d020      	beq.n	800800e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f003 0304 	and.w	r3, r3, #4
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	d005      	beq.n	8007fe4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007fd8:	4b59      	ldr	r3, [pc, #356]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8007fda:	689b      	ldr	r3, [r3, #8]
 8007fdc:	4a58      	ldr	r2, [pc, #352]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8007fde:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007fe2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	f003 0308 	and.w	r3, r3, #8
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d005      	beq.n	8007ffc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ff0:	4b53      	ldr	r3, [pc, #332]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff2:	689b      	ldr	r3, [r3, #8]
 8007ff4:	4a52      	ldr	r2, [pc, #328]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8007ff6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007ffa:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007ffc:	4b50      	ldr	r3, [pc, #320]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8007ffe:	689b      	ldr	r3, [r3, #8]
 8008000:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	689b      	ldr	r3, [r3, #8]
 8008008:	494d      	ldr	r1, [pc, #308]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 800800a:	4313      	orrs	r3, r2
 800800c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	f003 0301 	and.w	r3, r3, #1
 8008016:	2b00      	cmp	r3, #0
 8008018:	d040      	beq.n	800809c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2b01      	cmp	r3, #1
 8008020:	d107      	bne.n	8008032 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008022:	4b47      	ldr	r3, [pc, #284]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800802a:	2b00      	cmp	r3, #0
 800802c:	d115      	bne.n	800805a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800802e:	2301      	movs	r3, #1
 8008030:	e07f      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	685b      	ldr	r3, [r3, #4]
 8008036:	2b02      	cmp	r3, #2
 8008038:	d107      	bne.n	800804a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800803a:	4b41      	ldr	r3, [pc, #260]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008042:	2b00      	cmp	r3, #0
 8008044:	d109      	bne.n	800805a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008046:	2301      	movs	r3, #1
 8008048:	e073      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800804a:	4b3d      	ldr	r3, [pc, #244]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0302 	and.w	r3, r3, #2
 8008052:	2b00      	cmp	r3, #0
 8008054:	d101      	bne.n	800805a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008056:	2301      	movs	r3, #1
 8008058:	e06b      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800805a:	4b39      	ldr	r3, [pc, #228]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 800805c:	689b      	ldr	r3, [r3, #8]
 800805e:	f023 0203 	bic.w	r2, r3, #3
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	4936      	ldr	r1, [pc, #216]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8008068:	4313      	orrs	r3, r2
 800806a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800806c:	f7fc fe50 	bl	8004d10 <HAL_GetTick>
 8008070:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008072:	e00a      	b.n	800808a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008074:	f7fc fe4c 	bl	8004d10 <HAL_GetTick>
 8008078:	4602      	mov	r2, r0
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	1ad3      	subs	r3, r2, r3
 800807e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008082:	4293      	cmp	r3, r2
 8008084:	d901      	bls.n	800808a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008086:	2303      	movs	r3, #3
 8008088:	e053      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800808a:	4b2d      	ldr	r3, [pc, #180]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 800808c:	689b      	ldr	r3, [r3, #8]
 800808e:	f003 020c 	and.w	r2, r3, #12
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	009b      	lsls	r3, r3, #2
 8008098:	429a      	cmp	r2, r3
 800809a:	d1eb      	bne.n	8008074 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800809c:	4b27      	ldr	r3, [pc, #156]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 800809e:	681b      	ldr	r3, [r3, #0]
 80080a0:	f003 030f 	and.w	r3, r3, #15
 80080a4:	683a      	ldr	r2, [r7, #0]
 80080a6:	429a      	cmp	r2, r3
 80080a8:	d210      	bcs.n	80080cc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080aa:	4b24      	ldr	r3, [pc, #144]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f023 020f 	bic.w	r2, r3, #15
 80080b2:	4922      	ldr	r1, [pc, #136]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 80080b4:	683b      	ldr	r3, [r7, #0]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80080ba:	4b20      	ldr	r3, [pc, #128]	; (800813c <HAL_RCC_ClockConfig+0x1c4>)
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	f003 030f 	and.w	r3, r3, #15
 80080c2:	683a      	ldr	r2, [r7, #0]
 80080c4:	429a      	cmp	r2, r3
 80080c6:	d001      	beq.n	80080cc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80080c8:	2301      	movs	r3, #1
 80080ca:	e032      	b.n	8008132 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f003 0304 	and.w	r3, r3, #4
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d008      	beq.n	80080ea <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80080d8:	4b19      	ldr	r3, [pc, #100]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 80080da:	689b      	ldr	r3, [r3, #8]
 80080dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	68db      	ldr	r3, [r3, #12]
 80080e4:	4916      	ldr	r1, [pc, #88]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 80080e6:	4313      	orrs	r3, r2
 80080e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	f003 0308 	and.w	r3, r3, #8
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d009      	beq.n	800810a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80080f6:	4b12      	ldr	r3, [pc, #72]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 80080f8:	689b      	ldr	r3, [r3, #8]
 80080fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	00db      	lsls	r3, r3, #3
 8008104:	490e      	ldr	r1, [pc, #56]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8008106:	4313      	orrs	r3, r2
 8008108:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800810a:	f000 f821 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800810e:	4601      	mov	r1, r0
 8008110:	4b0b      	ldr	r3, [pc, #44]	; (8008140 <HAL_RCC_ClockConfig+0x1c8>)
 8008112:	689b      	ldr	r3, [r3, #8]
 8008114:	091b      	lsrs	r3, r3, #4
 8008116:	f003 030f 	and.w	r3, r3, #15
 800811a:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <HAL_RCC_ClockConfig+0x1cc>)
 800811c:	5cd3      	ldrb	r3, [r2, r3]
 800811e:	fa21 f303 	lsr.w	r3, r1, r3
 8008122:	4a09      	ldr	r2, [pc, #36]	; (8008148 <HAL_RCC_ClockConfig+0x1d0>)
 8008124:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008126:	4b09      	ldr	r3, [pc, #36]	; (800814c <HAL_RCC_ClockConfig+0x1d4>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fc fcca 	bl	8004ac4 <HAL_InitTick>

  return HAL_OK;
 8008130:	2300      	movs	r3, #0
}
 8008132:	4618      	mov	r0, r3
 8008134:	3710      	adds	r7, #16
 8008136:	46bd      	mov	sp, r7
 8008138:	bd80      	pop	{r7, pc}
 800813a:	bf00      	nop
 800813c:	40023c00 	.word	0x40023c00
 8008140:	40023800 	.word	0x40023800
 8008144:	08010aac 	.word	0x08010aac
 8008148:	2000004c 	.word	0x2000004c
 800814c:	20000050 	.word	0x20000050

08008150 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008150:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008152:	b085      	sub	sp, #20
 8008154:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008156:	2300      	movs	r3, #0
 8008158:	607b      	str	r3, [r7, #4]
 800815a:	2300      	movs	r3, #0
 800815c:	60fb      	str	r3, [r7, #12]
 800815e:	2300      	movs	r3, #0
 8008160:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008166:	4b50      	ldr	r3, [pc, #320]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	f003 030c 	and.w	r3, r3, #12
 800816e:	2b04      	cmp	r3, #4
 8008170:	d007      	beq.n	8008182 <HAL_RCC_GetSysClockFreq+0x32>
 8008172:	2b08      	cmp	r3, #8
 8008174:	d008      	beq.n	8008188 <HAL_RCC_GetSysClockFreq+0x38>
 8008176:	2b00      	cmp	r3, #0
 8008178:	f040 808d 	bne.w	8008296 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800817c:	4b4b      	ldr	r3, [pc, #300]	; (80082ac <HAL_RCC_GetSysClockFreq+0x15c>)
 800817e:	60bb      	str	r3, [r7, #8]
      break;
 8008180:	e08c      	b.n	800829c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008182:	4b4b      	ldr	r3, [pc, #300]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x160>)
 8008184:	60bb      	str	r3, [r7, #8]
      break;
 8008186:	e089      	b.n	800829c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008188:	4b47      	ldr	r3, [pc, #284]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800818a:	685b      	ldr	r3, [r3, #4]
 800818c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008190:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008192:	4b45      	ldr	r3, [pc, #276]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 8008194:	685b      	ldr	r3, [r3, #4]
 8008196:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800819a:	2b00      	cmp	r3, #0
 800819c:	d023      	beq.n	80081e6 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800819e:	4b42      	ldr	r3, [pc, #264]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081a0:	685b      	ldr	r3, [r3, #4]
 80081a2:	099b      	lsrs	r3, r3, #6
 80081a4:	f04f 0400 	mov.w	r4, #0
 80081a8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081ac:	f04f 0200 	mov.w	r2, #0
 80081b0:	ea03 0501 	and.w	r5, r3, r1
 80081b4:	ea04 0602 	and.w	r6, r4, r2
 80081b8:	4a3d      	ldr	r2, [pc, #244]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80081ba:	fb02 f106 	mul.w	r1, r2, r6
 80081be:	2200      	movs	r2, #0
 80081c0:	fb02 f205 	mul.w	r2, r2, r5
 80081c4:	440a      	add	r2, r1
 80081c6:	493a      	ldr	r1, [pc, #232]	; (80082b0 <HAL_RCC_GetSysClockFreq+0x160>)
 80081c8:	fba5 0101 	umull	r0, r1, r5, r1
 80081cc:	1853      	adds	r3, r2, r1
 80081ce:	4619      	mov	r1, r3
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	f04f 0400 	mov.w	r4, #0
 80081d6:	461a      	mov	r2, r3
 80081d8:	4623      	mov	r3, r4
 80081da:	f7f8 f869 	bl	80002b0 <__aeabi_uldivmod>
 80081de:	4603      	mov	r3, r0
 80081e0:	460c      	mov	r4, r1
 80081e2:	60fb      	str	r3, [r7, #12]
 80081e4:	e049      	b.n	800827a <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081e6:	4b30      	ldr	r3, [pc, #192]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 80081e8:	685b      	ldr	r3, [r3, #4]
 80081ea:	099b      	lsrs	r3, r3, #6
 80081ec:	f04f 0400 	mov.w	r4, #0
 80081f0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	ea03 0501 	and.w	r5, r3, r1
 80081fc:	ea04 0602 	and.w	r6, r4, r2
 8008200:	4629      	mov	r1, r5
 8008202:	4632      	mov	r2, r6
 8008204:	f04f 0300 	mov.w	r3, #0
 8008208:	f04f 0400 	mov.w	r4, #0
 800820c:	0154      	lsls	r4, r2, #5
 800820e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008212:	014b      	lsls	r3, r1, #5
 8008214:	4619      	mov	r1, r3
 8008216:	4622      	mov	r2, r4
 8008218:	1b49      	subs	r1, r1, r5
 800821a:	eb62 0206 	sbc.w	r2, r2, r6
 800821e:	f04f 0300 	mov.w	r3, #0
 8008222:	f04f 0400 	mov.w	r4, #0
 8008226:	0194      	lsls	r4, r2, #6
 8008228:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800822c:	018b      	lsls	r3, r1, #6
 800822e:	1a5b      	subs	r3, r3, r1
 8008230:	eb64 0402 	sbc.w	r4, r4, r2
 8008234:	f04f 0100 	mov.w	r1, #0
 8008238:	f04f 0200 	mov.w	r2, #0
 800823c:	00e2      	lsls	r2, r4, #3
 800823e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008242:	00d9      	lsls	r1, r3, #3
 8008244:	460b      	mov	r3, r1
 8008246:	4614      	mov	r4, r2
 8008248:	195b      	adds	r3, r3, r5
 800824a:	eb44 0406 	adc.w	r4, r4, r6
 800824e:	f04f 0100 	mov.w	r1, #0
 8008252:	f04f 0200 	mov.w	r2, #0
 8008256:	02a2      	lsls	r2, r4, #10
 8008258:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800825c:	0299      	lsls	r1, r3, #10
 800825e:	460b      	mov	r3, r1
 8008260:	4614      	mov	r4, r2
 8008262:	4618      	mov	r0, r3
 8008264:	4621      	mov	r1, r4
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f04f 0400 	mov.w	r4, #0
 800826c:	461a      	mov	r2, r3
 800826e:	4623      	mov	r3, r4
 8008270:	f7f8 f81e 	bl	80002b0 <__aeabi_uldivmod>
 8008274:	4603      	mov	r3, r0
 8008276:	460c      	mov	r4, r1
 8008278:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800827a:	4b0b      	ldr	r3, [pc, #44]	; (80082a8 <HAL_RCC_GetSysClockFreq+0x158>)
 800827c:	685b      	ldr	r3, [r3, #4]
 800827e:	0c1b      	lsrs	r3, r3, #16
 8008280:	f003 0303 	and.w	r3, r3, #3
 8008284:	3301      	adds	r3, #1
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 800828a:	68fa      	ldr	r2, [r7, #12]
 800828c:	683b      	ldr	r3, [r7, #0]
 800828e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008292:	60bb      	str	r3, [r7, #8]
      break;
 8008294:	e002      	b.n	800829c <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008296:	4b05      	ldr	r3, [pc, #20]	; (80082ac <HAL_RCC_GetSysClockFreq+0x15c>)
 8008298:	60bb      	str	r3, [r7, #8]
      break;
 800829a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800829c:	68bb      	ldr	r3, [r7, #8]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3714      	adds	r7, #20
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80082a6:	bf00      	nop
 80082a8:	40023800 	.word	0x40023800
 80082ac:	00f42400 	.word	0x00f42400
 80082b0:	017d7840 	.word	0x017d7840

080082b4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082b4:	b480      	push	{r7}
 80082b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082b8:	4b03      	ldr	r3, [pc, #12]	; (80082c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082ba:	681b      	ldr	r3, [r3, #0]
}
 80082bc:	4618      	mov	r0, r3
 80082be:	46bd      	mov	sp, r7
 80082c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c4:	4770      	bx	lr
 80082c6:	bf00      	nop
 80082c8:	2000004c 	.word	0x2000004c

080082cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082d0:	f7ff fff0 	bl	80082b4 <HAL_RCC_GetHCLKFreq>
 80082d4:	4601      	mov	r1, r0
 80082d6:	4b05      	ldr	r3, [pc, #20]	; (80082ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80082d8:	689b      	ldr	r3, [r3, #8]
 80082da:	0a9b      	lsrs	r3, r3, #10
 80082dc:	f003 0307 	and.w	r3, r3, #7
 80082e0:	4a03      	ldr	r2, [pc, #12]	; (80082f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082e2:	5cd3      	ldrb	r3, [r2, r3]
 80082e4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	bd80      	pop	{r7, pc}
 80082ec:	40023800 	.word	0x40023800
 80082f0:	08010abc 	.word	0x08010abc

080082f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082f4:	b580      	push	{r7, lr}
 80082f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082f8:	f7ff ffdc 	bl	80082b4 <HAL_RCC_GetHCLKFreq>
 80082fc:	4601      	mov	r1, r0
 80082fe:	4b05      	ldr	r3, [pc, #20]	; (8008314 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008300:	689b      	ldr	r3, [r3, #8]
 8008302:	0b5b      	lsrs	r3, r3, #13
 8008304:	f003 0307 	and.w	r3, r3, #7
 8008308:	4a03      	ldr	r2, [pc, #12]	; (8008318 <HAL_RCC_GetPCLK2Freq+0x24>)
 800830a:	5cd3      	ldrb	r3, [r2, r3]
 800830c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008310:	4618      	mov	r0, r3
 8008312:	bd80      	pop	{r7, pc}
 8008314:	40023800 	.word	0x40023800
 8008318:	08010abc 	.word	0x08010abc

0800831c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	220f      	movs	r2, #15
 800832a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800832c:	4b12      	ldr	r3, [pc, #72]	; (8008378 <HAL_RCC_GetClockConfig+0x5c>)
 800832e:	689b      	ldr	r3, [r3, #8]
 8008330:	f003 0203 	and.w	r2, r3, #3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008338:	4b0f      	ldr	r3, [pc, #60]	; (8008378 <HAL_RCC_GetClockConfig+0x5c>)
 800833a:	689b      	ldr	r3, [r3, #8]
 800833c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008344:	4b0c      	ldr	r3, [pc, #48]	; (8008378 <HAL_RCC_GetClockConfig+0x5c>)
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008350:	4b09      	ldr	r3, [pc, #36]	; (8008378 <HAL_RCC_GetClockConfig+0x5c>)
 8008352:	689b      	ldr	r3, [r3, #8]
 8008354:	08db      	lsrs	r3, r3, #3
 8008356:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800835e:	4b07      	ldr	r3, [pc, #28]	; (800837c <HAL_RCC_GetClockConfig+0x60>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	f003 020f 	and.w	r2, r3, #15
 8008366:	683b      	ldr	r3, [r7, #0]
 8008368:	601a      	str	r2, [r3, #0]
}
 800836a:	bf00      	nop
 800836c:	370c      	adds	r7, #12
 800836e:	46bd      	mov	sp, r7
 8008370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008374:	4770      	bx	lr
 8008376:	bf00      	nop
 8008378:	40023800 	.word	0x40023800
 800837c:	40023c00 	.word	0x40023c00

08008380 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008380:	b580      	push	{r7, lr}
 8008382:	b088      	sub	sp, #32
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008388:	2300      	movs	r3, #0
 800838a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800838c:	2300      	movs	r3, #0
 800838e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008394:	2300      	movs	r3, #0
 8008396:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008398:	2300      	movs	r3, #0
 800839a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f003 0301 	and.w	r3, r3, #1
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d012      	beq.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80083a8:	4b69      	ldr	r3, [pc, #420]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083aa:	689b      	ldr	r3, [r3, #8]
 80083ac:	4a68      	ldr	r2, [pc, #416]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ae:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80083b2:	6093      	str	r3, [r2, #8]
 80083b4:	4b66      	ldr	r3, [pc, #408]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083bc:	4964      	ldr	r1, [pc, #400]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083be:	4313      	orrs	r3, r2
 80083c0:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80083ca:	2301      	movs	r3, #1
 80083cc:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	d017      	beq.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80083da:	4b5d      	ldr	r3, [pc, #372]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80083e0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083e8:	4959      	ldr	r1, [pc, #356]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083ea:	4313      	orrs	r3, r2
 80083ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80083f8:	d101      	bne.n	80083fe <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80083fa:	2301      	movs	r3, #1
 80083fc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008402:	2b00      	cmp	r3, #0
 8008404:	d101      	bne.n	800840a <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008406:	2301      	movs	r3, #1
 8008408:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008412:	2b00      	cmp	r3, #0
 8008414:	d017      	beq.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008416:	4b4e      	ldr	r3, [pc, #312]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008418:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800841c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008424:	494a      	ldr	r1, [pc, #296]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008426:	4313      	orrs	r3, r2
 8008428:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008430:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008434:	d101      	bne.n	800843a <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008436:	2301      	movs	r3, #1
 8008438:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800843e:	2b00      	cmp	r3, #0
 8008440:	d101      	bne.n	8008446 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008442:	2301      	movs	r3, #1
 8008444:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800844e:	2b00      	cmp	r3, #0
 8008450:	d001      	beq.n	8008456 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008452:	2301      	movs	r3, #1
 8008454:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	f003 0320 	and.w	r3, r3, #32
 800845e:	2b00      	cmp	r3, #0
 8008460:	f000 808b 	beq.w	800857a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008464:	4b3a      	ldr	r3, [pc, #232]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008466:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008468:	4a39      	ldr	r2, [pc, #228]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800846e:	6413      	str	r3, [r2, #64]	; 0x40
 8008470:	4b37      	ldr	r3, [pc, #220]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008478:	60bb      	str	r3, [r7, #8]
 800847a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800847c:	4b35      	ldr	r3, [pc, #212]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4a34      	ldr	r2, [pc, #208]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008486:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008488:	f7fc fc42 	bl	8004d10 <HAL_GetTick>
 800848c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800848e:	e008      	b.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008490:	f7fc fc3e 	bl	8004d10 <HAL_GetTick>
 8008494:	4602      	mov	r2, r0
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	1ad3      	subs	r3, r2, r3
 800849a:	2b64      	cmp	r3, #100	; 0x64
 800849c:	d901      	bls.n	80084a2 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e355      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80084a2:	4b2c      	ldr	r3, [pc, #176]	; (8008554 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d0f0      	beq.n	8008490 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80084ae:	4b28      	ldr	r3, [pc, #160]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084b6:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80084b8:	693b      	ldr	r3, [r7, #16]
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d035      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80084c6:	693a      	ldr	r2, [r7, #16]
 80084c8:	429a      	cmp	r2, r3
 80084ca:	d02e      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80084cc:	4b20      	ldr	r3, [pc, #128]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80084d4:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80084d6:	4b1e      	ldr	r3, [pc, #120]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084da:	4a1d      	ldr	r2, [pc, #116]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80084e0:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80084e2:	4b1b      	ldr	r3, [pc, #108]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084e6:	4a1a      	ldr	r2, [pc, #104]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ec:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80084ee:	4a18      	ldr	r2, [pc, #96]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80084f4:	4b16      	ldr	r3, [pc, #88]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80084f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80084f8:	f003 0301 	and.w	r3, r3, #1
 80084fc:	2b01      	cmp	r3, #1
 80084fe:	d114      	bne.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008500:	f7fc fc06 	bl	8004d10 <HAL_GetTick>
 8008504:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008506:	e00a      	b.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008508:	f7fc fc02 	bl	8004d10 <HAL_GetTick>
 800850c:	4602      	mov	r2, r0
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	1ad3      	subs	r3, r2, r3
 8008512:	f241 3288 	movw	r2, #5000	; 0x1388
 8008516:	4293      	cmp	r3, r2
 8008518:	d901      	bls.n	800851e <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800851a:	2303      	movs	r3, #3
 800851c:	e317      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800851e:	4b0c      	ldr	r3, [pc, #48]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008522:	f003 0302 	and.w	r3, r3, #2
 8008526:	2b00      	cmp	r3, #0
 8008528:	d0ee      	beq.n	8008508 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800852e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008532:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008536:	d111      	bne.n	800855c <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008538:	4b05      	ldr	r3, [pc, #20]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800853a:	689b      	ldr	r3, [r3, #8]
 800853c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008544:	4b04      	ldr	r3, [pc, #16]	; (8008558 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008546:	400b      	ands	r3, r1
 8008548:	4901      	ldr	r1, [pc, #4]	; (8008550 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800854a:	4313      	orrs	r3, r2
 800854c:	608b      	str	r3, [r1, #8]
 800854e:	e00b      	b.n	8008568 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008550:	40023800 	.word	0x40023800
 8008554:	40007000 	.word	0x40007000
 8008558:	0ffffcff 	.word	0x0ffffcff
 800855c:	4bb0      	ldr	r3, [pc, #704]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	4aaf      	ldr	r2, [pc, #700]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008562:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008566:	6093      	str	r3, [r2, #8]
 8008568:	4bad      	ldr	r3, [pc, #692]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800856a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008570:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008574:	49aa      	ldr	r1, [pc, #680]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0310 	and.w	r3, r3, #16
 8008582:	2b00      	cmp	r3, #0
 8008584:	d010      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8008586:	4ba6      	ldr	r3, [pc, #664]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008588:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800858c:	4aa4      	ldr	r2, [pc, #656]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800858e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008592:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8008596:	4ba2      	ldr	r3, [pc, #648]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008598:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80085a0:	499f      	ldr	r1, [pc, #636]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d00a      	beq.n	80085ca <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80085b4:	4b9a      	ldr	r3, [pc, #616]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085ba:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80085c2:	4997      	ldr	r1, [pc, #604]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085c4:	4313      	orrs	r3, r2
 80085c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d00a      	beq.n	80085ec <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80085d6:	4b92      	ldr	r3, [pc, #584]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80085e4:	498e      	ldr	r1, [pc, #568]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085e6:	4313      	orrs	r3, r2
 80085e8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	681b      	ldr	r3, [r3, #0]
 80085f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d00a      	beq.n	800860e <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80085f8:	4b89      	ldr	r3, [pc, #548]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008606:	4986      	ldr	r1, [pc, #536]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008608:	4313      	orrs	r3, r2
 800860a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008616:	2b00      	cmp	r3, #0
 8008618:	d00a      	beq.n	8008630 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800861a:	4b81      	ldr	r3, [pc, #516]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800861c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008620:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008628:	497d      	ldr	r1, [pc, #500]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800862a:	4313      	orrs	r3, r2
 800862c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008638:	2b00      	cmp	r3, #0
 800863a:	d00a      	beq.n	8008652 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800863c:	4b78      	ldr	r3, [pc, #480]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800863e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008642:	f023 0203 	bic.w	r2, r3, #3
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800864a:	4975      	ldr	r1, [pc, #468]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800864c:	4313      	orrs	r3, r2
 800864e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800865a:	2b00      	cmp	r3, #0
 800865c:	d00a      	beq.n	8008674 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800865e:	4b70      	ldr	r3, [pc, #448]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008664:	f023 020c 	bic.w	r2, r3, #12
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800866c:	496c      	ldr	r1, [pc, #432]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800866e:	4313      	orrs	r3, r2
 8008670:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800867c:	2b00      	cmp	r3, #0
 800867e:	d00a      	beq.n	8008696 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008680:	4b67      	ldr	r3, [pc, #412]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008686:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800868e:	4964      	ldr	r1, [pc, #400]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008690:	4313      	orrs	r3, r2
 8008692:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	681b      	ldr	r3, [r3, #0]
 800869a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d00a      	beq.n	80086b8 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80086a2:	4b5f      	ldr	r3, [pc, #380]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086b0:	495b      	ldr	r1, [pc, #364]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086b2:	4313      	orrs	r3, r2
 80086b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d00a      	beq.n	80086da <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80086c4:	4b56      	ldr	r3, [pc, #344]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086d2:	4953      	ldr	r1, [pc, #332]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	d00a      	beq.n	80086fc <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80086e6:	4b4e      	ldr	r3, [pc, #312]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086f4:	494a      	ldr	r1, [pc, #296]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086f6:	4313      	orrs	r3, r2
 80086f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008704:	2b00      	cmp	r3, #0
 8008706:	d00a      	beq.n	800871e <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008708:	4b45      	ldr	r3, [pc, #276]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800870a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800870e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008716:	4942      	ldr	r1, [pc, #264]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008718:	4313      	orrs	r3, r2
 800871a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008726:	2b00      	cmp	r3, #0
 8008728:	d00a      	beq.n	8008740 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800872a:	4b3d      	ldr	r3, [pc, #244]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800872c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008730:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008738:	4939      	ldr	r1, [pc, #228]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800873a:	4313      	orrs	r3, r2
 800873c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008748:	2b00      	cmp	r3, #0
 800874a:	d00a      	beq.n	8008762 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800874c:	4b34      	ldr	r3, [pc, #208]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800874e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008752:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800875a:	4931      	ldr	r1, [pc, #196]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800875c:	4313      	orrs	r3, r2
 800875e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800876a:	2b00      	cmp	r3, #0
 800876c:	d011      	beq.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800876e:	4b2c      	ldr	r3, [pc, #176]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008770:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008774:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800877c:	4928      	ldr	r1, [pc, #160]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800877e:	4313      	orrs	r3, r2
 8008780:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008788:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800878c:	d101      	bne.n	8008792 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800878e:	2301      	movs	r3, #1
 8008790:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	f003 0308 	and.w	r3, r3, #8
 800879a:	2b00      	cmp	r3, #0
 800879c:	d001      	beq.n	80087a2 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800879e:	2301      	movs	r3, #1
 80087a0:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d00a      	beq.n	80087c4 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087ae:	4b1c      	ldr	r3, [pc, #112]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087b4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80087bc:	4918      	ldr	r1, [pc, #96]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087be:	4313      	orrs	r3, r2
 80087c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d00b      	beq.n	80087e8 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80087d0:	4b13      	ldr	r3, [pc, #76]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80087d6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80087e0:	490f      	ldr	r1, [pc, #60]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80087e8:	69fb      	ldr	r3, [r7, #28]
 80087ea:	2b01      	cmp	r3, #1
 80087ec:	d005      	beq.n	80087fa <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80087f6:	f040 80d8 	bne.w	80089aa <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80087fa:	4b09      	ldr	r3, [pc, #36]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a08      	ldr	r2, [pc, #32]	; (8008820 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008800:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008804:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008806:	f7fc fa83 	bl	8004d10 <HAL_GetTick>
 800880a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800880c:	e00a      	b.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800880e:	f7fc fa7f 	bl	8004d10 <HAL_GetTick>
 8008812:	4602      	mov	r2, r0
 8008814:	697b      	ldr	r3, [r7, #20]
 8008816:	1ad3      	subs	r3, r2, r3
 8008818:	2b64      	cmp	r3, #100	; 0x64
 800881a:	d903      	bls.n	8008824 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800881c:	2303      	movs	r3, #3
 800881e:	e196      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008820:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008824:	4b6c      	ldr	r3, [pc, #432]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800882c:	2b00      	cmp	r3, #0
 800882e:	d1ee      	bne.n	800880e <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	f003 0301 	and.w	r3, r3, #1
 8008838:	2b00      	cmp	r3, #0
 800883a:	d021      	beq.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x500>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008840:	2b00      	cmp	r3, #0
 8008842:	d11d      	bne.n	8008880 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008844:	4b64      	ldr	r3, [pc, #400]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008846:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800884a:	0c1b      	lsrs	r3, r3, #16
 800884c:	f003 0303 	and.w	r3, r3, #3
 8008850:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008852:	4b61      	ldr	r3, [pc, #388]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008854:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008858:	0e1b      	lsrs	r3, r3, #24
 800885a:	f003 030f 	and.w	r3, r3, #15
 800885e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	019a      	lsls	r2, r3, #6
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	041b      	lsls	r3, r3, #16
 800886a:	431a      	orrs	r2, r3
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	061b      	lsls	r3, r3, #24
 8008870:	431a      	orrs	r2, r3
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	689b      	ldr	r3, [r3, #8]
 8008876:	071b      	lsls	r3, r3, #28
 8008878:	4957      	ldr	r1, [pc, #348]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800887a:	4313      	orrs	r3, r2
 800887c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008888:	2b00      	cmp	r3, #0
 800888a:	d004      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x516>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008890:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008894:	d00a      	beq.n	80088ac <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d02e      	beq.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80088aa:	d129      	bne.n	8008900 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80088ac:	4b4a      	ldr	r3, [pc, #296]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088b2:	0c1b      	lsrs	r3, r3, #16
 80088b4:	f003 0303 	and.w	r3, r3, #3
 80088b8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80088ba:	4b47      	ldr	r3, [pc, #284]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80088c0:	0f1b      	lsrs	r3, r3, #28
 80088c2:	f003 0307 	and.w	r3, r3, #7
 80088c6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	685b      	ldr	r3, [r3, #4]
 80088cc:	019a      	lsls	r2, r3, #6
 80088ce:	693b      	ldr	r3, [r7, #16]
 80088d0:	041b      	lsls	r3, r3, #16
 80088d2:	431a      	orrs	r2, r3
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	061b      	lsls	r3, r3, #24
 80088da:	431a      	orrs	r2, r3
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	071b      	lsls	r3, r3, #28
 80088e0:	493d      	ldr	r1, [pc, #244]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088e2:	4313      	orrs	r3, r2
 80088e4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80088e8:	4b3b      	ldr	r3, [pc, #236]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ea:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80088ee:	f023 021f 	bic.w	r2, r3, #31
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088f6:	3b01      	subs	r3, #1
 80088f8:	4937      	ldr	r1, [pc, #220]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088fa:	4313      	orrs	r3, r2
 80088fc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008908:	2b00      	cmp	r3, #0
 800890a:	d01d      	beq.n	8008948 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800890c:	4b32      	ldr	r3, [pc, #200]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800890e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008912:	0e1b      	lsrs	r3, r3, #24
 8008914:	f003 030f 	and.w	r3, r3, #15
 8008918:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800891a:	4b2f      	ldr	r3, [pc, #188]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800891c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008920:	0f1b      	lsrs	r3, r3, #28
 8008922:	f003 0307 	and.w	r3, r3, #7
 8008926:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	685b      	ldr	r3, [r3, #4]
 800892c:	019a      	lsls	r2, r3, #6
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	691b      	ldr	r3, [r3, #16]
 8008932:	041b      	lsls	r3, r3, #16
 8008934:	431a      	orrs	r2, r3
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	061b      	lsls	r3, r3, #24
 800893a:	431a      	orrs	r2, r3
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	071b      	lsls	r3, r3, #28
 8008940:	4925      	ldr	r1, [pc, #148]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008942:	4313      	orrs	r3, r2
 8008944:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	681b      	ldr	r3, [r3, #0]
 800894c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008950:	2b00      	cmp	r3, #0
 8008952:	d011      	beq.n	8008978 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	019a      	lsls	r2, r3, #6
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	041b      	lsls	r3, r3, #16
 8008960:	431a      	orrs	r2, r3
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	68db      	ldr	r3, [r3, #12]
 8008966:	061b      	lsls	r3, r3, #24
 8008968:	431a      	orrs	r2, r3
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	689b      	ldr	r3, [r3, #8]
 800896e:	071b      	lsls	r3, r3, #28
 8008970:	4919      	ldr	r1, [pc, #100]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008972:	4313      	orrs	r3, r2
 8008974:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008978:	4b17      	ldr	r3, [pc, #92]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	4a16      	ldr	r2, [pc, #88]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800897e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008982:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008984:	f7fc f9c4 	bl	8004d10 <HAL_GetTick>
 8008988:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800898a:	e008      	b.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800898c:	f7fc f9c0 	bl	8004d10 <HAL_GetTick>
 8008990:	4602      	mov	r2, r0
 8008992:	697b      	ldr	r3, [r7, #20]
 8008994:	1ad3      	subs	r3, r2, r3
 8008996:	2b64      	cmp	r3, #100	; 0x64
 8008998:	d901      	bls.n	800899e <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800899a:	2303      	movs	r3, #3
 800899c:	e0d7      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800899e:	4b0e      	ldr	r3, [pc, #56]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d0f0      	beq.n	800898c <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80089aa:	69bb      	ldr	r3, [r7, #24]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	f040 80cd 	bne.w	8008b4c <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80089b2:	4b09      	ldr	r3, [pc, #36]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a08      	ldr	r2, [pc, #32]	; (80089d8 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80089b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80089bc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80089be:	f7fc f9a7 	bl	8004d10 <HAL_GetTick>
 80089c2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089c4:	e00a      	b.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80089c6:	f7fc f9a3 	bl	8004d10 <HAL_GetTick>
 80089ca:	4602      	mov	r2, r0
 80089cc:	697b      	ldr	r3, [r7, #20]
 80089ce:	1ad3      	subs	r3, r2, r3
 80089d0:	2b64      	cmp	r3, #100	; 0x64
 80089d2:	d903      	bls.n	80089dc <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80089d4:	2303      	movs	r3, #3
 80089d6:	e0ba      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80089d8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80089dc:	4b5e      	ldr	r3, [pc, #376]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80089e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80089e8:	d0ed      	beq.n	80089c6 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	681b      	ldr	r3, [r3, #0]
 80089ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d003      	beq.n	80089fe <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	d009      	beq.n	8008a12 <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008a06:	2b00      	cmp	r3, #0
 8008a08:	d02e      	beq.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d12a      	bne.n	8008a68 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a12:	4b51      	ldr	r3, [pc, #324]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a18:	0c1b      	lsrs	r3, r3, #16
 8008a1a:	f003 0303 	and.w	r3, r3, #3
 8008a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a20:	4b4d      	ldr	r3, [pc, #308]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a26:	0f1b      	lsrs	r3, r3, #28
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	019a      	lsls	r2, r3, #6
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	699b      	ldr	r3, [r3, #24]
 8008a3e:	061b      	lsls	r3, r3, #24
 8008a40:	431a      	orrs	r2, r3
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	071b      	lsls	r3, r3, #28
 8008a46:	4944      	ldr	r1, [pc, #272]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008a4e:	4b42      	ldr	r3, [pc, #264]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a54:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a5c:	3b01      	subs	r3, #1
 8008a5e:	021b      	lsls	r3, r3, #8
 8008a60:	493d      	ldr	r1, [pc, #244]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a62:	4313      	orrs	r3, r2
 8008a64:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d022      	beq.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008a78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008a7c:	d11d      	bne.n	8008aba <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a7e:	4b36      	ldr	r3, [pc, #216]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a84:	0e1b      	lsrs	r3, r3, #24
 8008a86:	f003 030f 	and.w	r3, r3, #15
 8008a8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008a8c:	4b32      	ldr	r3, [pc, #200]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a92:	0f1b      	lsrs	r3, r3, #28
 8008a94:	f003 0307 	and.w	r3, r3, #7
 8008a98:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	019a      	lsls	r2, r3, #6
 8008aa0:	687b      	ldr	r3, [r7, #4]
 8008aa2:	6a1b      	ldr	r3, [r3, #32]
 8008aa4:	041b      	lsls	r3, r3, #16
 8008aa6:	431a      	orrs	r2, r3
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	061b      	lsls	r3, r3, #24
 8008aac:	431a      	orrs	r2, r3
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	071b      	lsls	r3, r3, #28
 8008ab2:	4929      	ldr	r1, [pc, #164]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ab4:	4313      	orrs	r3, r2
 8008ab6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0308 	and.w	r3, r3, #8
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d028      	beq.n	8008b18 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008ac6:	4b24      	ldr	r3, [pc, #144]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ac8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008acc:	0e1b      	lsrs	r3, r3, #24
 8008ace:	f003 030f 	and.w	r3, r3, #15
 8008ad2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008ad4:	4b20      	ldr	r3, [pc, #128]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008ada:	0c1b      	lsrs	r3, r3, #16
 8008adc:	f003 0303 	and.w	r3, r3, #3
 8008ae0:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	695b      	ldr	r3, [r3, #20]
 8008ae6:	019a      	lsls	r2, r3, #6
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	041b      	lsls	r3, r3, #16
 8008aec:	431a      	orrs	r2, r3
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	061b      	lsls	r3, r3, #24
 8008af2:	431a      	orrs	r2, r3
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	69db      	ldr	r3, [r3, #28]
 8008af8:	071b      	lsls	r3, r3, #28
 8008afa:	4917      	ldr	r1, [pc, #92]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008afc:	4313      	orrs	r3, r2
 8008afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008b02:	4b15      	ldr	r3, [pc, #84]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b04:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008b08:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b10:	4911      	ldr	r1, [pc, #68]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b12:	4313      	orrs	r3, r2
 8008b14:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008b18:	4b0f      	ldr	r3, [pc, #60]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	4a0e      	ldr	r2, [pc, #56]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b1e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b22:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b24:	f7fc f8f4 	bl	8004d10 <HAL_GetTick>
 8008b28:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b2a:	e008      	b.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008b2c:	f7fc f8f0 	bl	8004d10 <HAL_GetTick>
 8008b30:	4602      	mov	r2, r0
 8008b32:	697b      	ldr	r3, [r7, #20]
 8008b34:	1ad3      	subs	r3, r2, r3
 8008b36:	2b64      	cmp	r3, #100	; 0x64
 8008b38:	d901      	bls.n	8008b3e <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e007      	b.n	8008b4e <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008b3e:	4b06      	ldr	r3, [pc, #24]	; (8008b58 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008b46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008b4a:	d1ef      	bne.n	8008b2c <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008b4c:	2300      	movs	r3, #0
}
 8008b4e:	4618      	mov	r0, r3
 8008b50:	3720      	adds	r7, #32
 8008b52:	46bd      	mov	sp, r7
 8008b54:	bd80      	pop	{r7, pc}
 8008b56:	bf00      	nop
 8008b58:	40023800 	.word	0x40023800

08008b5c <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b082      	sub	sp, #8
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d101      	bne.n	8008b6e <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008b6a:	2301      	movs	r3, #1
 8008b6c:	e06b      	b.n	8008c46 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	7f5b      	ldrb	r3, [r3, #29]
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b00      	cmp	r3, #0
 8008b76:	d105      	bne.n	8008b84 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f7fb fd06 	bl	8004590 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	2202      	movs	r2, #2
 8008b88:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	22ca      	movs	r2, #202	; 0xca
 8008b90:	625a      	str	r2, [r3, #36]	; 0x24
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2253      	movs	r2, #83	; 0x53
 8008b98:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b9a:	6878      	ldr	r0, [r7, #4]
 8008b9c:	f000 fbae 	bl	80092fc <RTC_EnterInitMode>
 8008ba0:	4603      	mov	r3, r0
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d008      	beq.n	8008bb8 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	22ff      	movs	r2, #255	; 0xff
 8008bac:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	2204      	movs	r2, #4
 8008bb2:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008bb4:	2301      	movs	r3, #1
 8008bb6:	e046      	b.n	8008c46 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	6899      	ldr	r1, [r3, #8]
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681a      	ldr	r2, [r3, #0]
 8008bc2:	4b23      	ldr	r3, [pc, #140]	; (8008c50 <HAL_RTC_Init+0xf4>)
 8008bc4:	400b      	ands	r3, r1
 8008bc6:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	6899      	ldr	r1, [r3, #8]
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	685a      	ldr	r2, [r3, #4]
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	431a      	orrs	r2, r3
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	431a      	orrs	r2, r3
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	430a      	orrs	r2, r1
 8008be4:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008be6:	687b      	ldr	r3, [r7, #4]
 8008be8:	681b      	ldr	r3, [r3, #0]
 8008bea:	687a      	ldr	r2, [r7, #4]
 8008bec:	68d2      	ldr	r2, [r2, #12]
 8008bee:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	6919      	ldr	r1, [r3, #16]
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	689b      	ldr	r3, [r3, #8]
 8008bfa:	041a      	lsls	r2, r3, #16
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	681b      	ldr	r3, [r3, #0]
 8008c08:	68da      	ldr	r2, [r3, #12]
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c12:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	f022 0208 	bic.w	r2, r2, #8
 8008c22:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	699a      	ldr	r2, [r3, #24]
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	430a      	orrs	r2, r1
 8008c34:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	22ff      	movs	r2, #255	; 0xff
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2201      	movs	r2, #1
 8008c42:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008c44:	2300      	movs	r3, #0
  }
}
 8008c46:	4618      	mov	r0, r3
 8008c48:	3708      	adds	r7, #8
 8008c4a:	46bd      	mov	sp, r7
 8008c4c:	bd80      	pop	{r7, pc}
 8008c4e:	bf00      	nop
 8008c50:	ff8fffbf 	.word	0xff8fffbf

08008c54 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008c54:	b590      	push	{r4, r7, lr}
 8008c56:	b087      	sub	sp, #28
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	60f8      	str	r0, [r7, #12]
 8008c5c:	60b9      	str	r1, [r7, #8]
 8008c5e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008c60:	2300      	movs	r3, #0
 8008c62:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	7f1b      	ldrb	r3, [r3, #28]
 8008c68:	2b01      	cmp	r3, #1
 8008c6a:	d101      	bne.n	8008c70 <HAL_RTC_SetTime+0x1c>
 8008c6c:	2302      	movs	r3, #2
 8008c6e:	e0a8      	b.n	8008dc2 <HAL_RTC_SetTime+0x16e>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	2201      	movs	r2, #1
 8008c74:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	2202      	movs	r2, #2
 8008c7a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d126      	bne.n	8008cd0 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	689b      	ldr	r3, [r3, #8]
 8008c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d102      	bne.n	8008c96 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2200      	movs	r2, #0
 8008c94:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c96:	68bb      	ldr	r3, [r7, #8]
 8008c98:	781b      	ldrb	r3, [r3, #0]
 8008c9a:	4618      	mov	r0, r3
 8008c9c:	f000 fb5a 	bl	8009354 <RTC_ByteToBcd2>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	785b      	ldrb	r3, [r3, #1]
 8008ca8:	4618      	mov	r0, r3
 8008caa:	f000 fb53 	bl	8009354 <RTC_ByteToBcd2>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cb2:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008cb4:	68bb      	ldr	r3, [r7, #8]
 8008cb6:	789b      	ldrb	r3, [r3, #2]
 8008cb8:	4618      	mov	r0, r3
 8008cba:	f000 fb4b 	bl	8009354 <RTC_ByteToBcd2>
 8008cbe:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008cc0:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008cc4:	68bb      	ldr	r3, [r7, #8]
 8008cc6:	7b1b      	ldrb	r3, [r3, #12]
 8008cc8:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008cca:	4313      	orrs	r3, r2
 8008ccc:	617b      	str	r3, [r7, #20]
 8008cce:	e018      	b.n	8008d02 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689b      	ldr	r3, [r3, #8]
 8008cd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	d102      	bne.n	8008ce4 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008cde:	68bb      	ldr	r3, [r7, #8]
 8008ce0:	2200      	movs	r2, #0
 8008ce2:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	781b      	ldrb	r3, [r3, #0]
 8008ce8:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008cea:	68bb      	ldr	r3, [r7, #8]
 8008cec:	785b      	ldrb	r3, [r3, #1]
 8008cee:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008cf0:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008cf2:	68ba      	ldr	r2, [r7, #8]
 8008cf4:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008cf6:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	7b1b      	ldrb	r3, [r3, #12]
 8008cfc:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008cfe:	4313      	orrs	r3, r2
 8008d00:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	22ca      	movs	r2, #202	; 0xca
 8008d08:	625a      	str	r2, [r3, #36]	; 0x24
 8008d0a:	68fb      	ldr	r3, [r7, #12]
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	2253      	movs	r2, #83	; 0x53
 8008d10:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d12:	68f8      	ldr	r0, [r7, #12]
 8008d14:	f000 faf2 	bl	80092fc <RTC_EnterInitMode>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d00b      	beq.n	8008d36 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	22ff      	movs	r2, #255	; 0xff
 8008d24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d26:	68fb      	ldr	r3, [r7, #12]
 8008d28:	2204      	movs	r2, #4
 8008d2a:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d32:	2301      	movs	r3, #1
 8008d34:	e045      	b.n	8008dc2 <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681a      	ldr	r2, [r3, #0]
 8008d3a:	6979      	ldr	r1, [r7, #20]
 8008d3c:	4b23      	ldr	r3, [pc, #140]	; (8008dcc <HAL_RTC_SetTime+0x178>)
 8008d3e:	400b      	ands	r3, r1
 8008d40:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689a      	ldr	r2, [r3, #8]
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008d50:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008d52:	68fb      	ldr	r3, [r7, #12]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	6899      	ldr	r1, [r3, #8]
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	691a      	ldr	r2, [r3, #16]
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	695b      	ldr	r3, [r3, #20]
 8008d60:	431a      	orrs	r2, r3
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	430a      	orrs	r2, r1
 8008d68:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68da      	ldr	r2, [r3, #12]
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d78:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d7a:	68fb      	ldr	r3, [r7, #12]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	f003 0320 	and.w	r3, r3, #32
 8008d84:	2b00      	cmp	r3, #0
 8008d86:	d111      	bne.n	8008dac <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d88:	68f8      	ldr	r0, [r7, #12]
 8008d8a:	f000 fa8f 	bl	80092ac <HAL_RTC_WaitForSynchro>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00b      	beq.n	8008dac <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d94:	68fb      	ldr	r3, [r7, #12]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	22ff      	movs	r2, #255	; 0xff
 8008d9a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008d9c:	68fb      	ldr	r3, [r7, #12]
 8008d9e:	2204      	movs	r2, #4
 8008da0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	2200      	movs	r2, #0
 8008da6:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008da8:	2301      	movs	r3, #1
 8008daa:	e00a      	b.n	8008dc2 <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	22ff      	movs	r2, #255	; 0xff
 8008db2:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	2201      	movs	r2, #1
 8008db8:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	2200      	movs	r2, #0
 8008dbe:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008dc0:	2300      	movs	r3, #0
  }
}
 8008dc2:	4618      	mov	r0, r3
 8008dc4:	371c      	adds	r7, #28
 8008dc6:	46bd      	mov	sp, r7
 8008dc8:	bd90      	pop	{r4, r7, pc}
 8008dca:	bf00      	nop
 8008dcc:	007f7f7f 	.word	0x007f7f7f

08008dd0 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008dd0:	b580      	push	{r7, lr}
 8008dd2:	b086      	sub	sp, #24
 8008dd4:	af00      	add	r7, sp, #0
 8008dd6:	60f8      	str	r0, [r7, #12]
 8008dd8:	60b9      	str	r1, [r7, #8]
 8008dda:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008ddc:	2300      	movs	r3, #0
 8008dde:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008de6:	68bb      	ldr	r3, [r7, #8]
 8008de8:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	691b      	ldr	r3, [r3, #16]
 8008df0:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008df4:	68bb      	ldr	r3, [r7, #8]
 8008df6:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008df8:	68fb      	ldr	r3, [r7, #12]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	681a      	ldr	r2, [r3, #0]
 8008dfe:	4b22      	ldr	r3, [pc, #136]	; (8008e88 <HAL_RTC_GetTime+0xb8>)
 8008e00:	4013      	ands	r3, r2
 8008e02:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008e04:	697b      	ldr	r3, [r7, #20]
 8008e06:	0c1b      	lsrs	r3, r3, #16
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e0e:	b2da      	uxtb	r2, r3
 8008e10:	68bb      	ldr	r3, [r7, #8]
 8008e12:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008e14:	697b      	ldr	r3, [r7, #20]
 8008e16:	0a1b      	lsrs	r3, r3, #8
 8008e18:	b2db      	uxtb	r3, r3
 8008e1a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008e24:	697b      	ldr	r3, [r7, #20]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	68bb      	ldr	r3, [r7, #8]
 8008e30:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8008e32:	697b      	ldr	r3, [r7, #20]
 8008e34:	0c1b      	lsrs	r3, r3, #16
 8008e36:	b2db      	uxtb	r3, r3
 8008e38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	2b00      	cmp	r3, #0
 8008e46:	d11a      	bne.n	8008e7e <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	781b      	ldrb	r3, [r3, #0]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fa9f 	bl	8009390 <RTC_Bcd2ToByte>
 8008e52:	4603      	mov	r3, r0
 8008e54:	461a      	mov	r2, r3
 8008e56:	68bb      	ldr	r3, [r7, #8]
 8008e58:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008e5a:	68bb      	ldr	r3, [r7, #8]
 8008e5c:	785b      	ldrb	r3, [r3, #1]
 8008e5e:	4618      	mov	r0, r3
 8008e60:	f000 fa96 	bl	8009390 <RTC_Bcd2ToByte>
 8008e64:	4603      	mov	r3, r0
 8008e66:	461a      	mov	r2, r3
 8008e68:	68bb      	ldr	r3, [r7, #8]
 8008e6a:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008e6c:	68bb      	ldr	r3, [r7, #8]
 8008e6e:	789b      	ldrb	r3, [r3, #2]
 8008e70:	4618      	mov	r0, r3
 8008e72:	f000 fa8d 	bl	8009390 <RTC_Bcd2ToByte>
 8008e76:	4603      	mov	r3, r0
 8008e78:	461a      	mov	r2, r3
 8008e7a:	68bb      	ldr	r3, [r7, #8]
 8008e7c:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008e7e:	2300      	movs	r3, #0
}
 8008e80:	4618      	mov	r0, r3
 8008e82:	3718      	adds	r7, #24
 8008e84:	46bd      	mov	sp, r7
 8008e86:	bd80      	pop	{r7, pc}
 8008e88:	007f7f7f 	.word	0x007f7f7f

08008e8c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008e8c:	b590      	push	{r4, r7, lr}
 8008e8e:	b087      	sub	sp, #28
 8008e90:	af00      	add	r7, sp, #0
 8008e92:	60f8      	str	r0, [r7, #12]
 8008e94:	60b9      	str	r1, [r7, #8]
 8008e96:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	7f1b      	ldrb	r3, [r3, #28]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RTC_SetDate+0x1c>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e092      	b.n	8008fce <HAL_RTC_SetDate+0x142>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d10e      	bne.n	8008ed8 <HAL_RTC_SetDate+0x4c>
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	785b      	ldrb	r3, [r3, #1]
 8008ebe:	f003 0310 	and.w	r3, r3, #16
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d008      	beq.n	8008ed8 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008ec6:	68bb      	ldr	r3, [r7, #8]
 8008ec8:	785b      	ldrb	r3, [r3, #1]
 8008eca:	f023 0310 	bic.w	r3, r3, #16
 8008ece:	b2db      	uxtb	r3, r3
 8008ed0:	330a      	adds	r3, #10
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008ed8:	687b      	ldr	r3, [r7, #4]
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d11c      	bne.n	8008f18 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008ede:	68bb      	ldr	r3, [r7, #8]
 8008ee0:	78db      	ldrb	r3, [r3, #3]
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fa36 	bl	8009354 <RTC_ByteToBcd2>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	785b      	ldrb	r3, [r3, #1]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 fa2f 	bl	8009354 <RTC_ByteToBcd2>
 8008ef6:	4603      	mov	r3, r0
 8008ef8:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008efa:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	789b      	ldrb	r3, [r3, #2]
 8008f00:	4618      	mov	r0, r3
 8008f02:	f000 fa27 	bl	8009354 <RTC_ByteToBcd2>
 8008f06:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008f08:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008f0c:	68bb      	ldr	r3, [r7, #8]
 8008f0e:	781b      	ldrb	r3, [r3, #0]
 8008f10:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008f12:	4313      	orrs	r3, r2
 8008f14:	617b      	str	r3, [r7, #20]
 8008f16:	e00e      	b.n	8008f36 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f18:	68bb      	ldr	r3, [r7, #8]
 8008f1a:	78db      	ldrb	r3, [r3, #3]
 8008f1c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008f1e:	68bb      	ldr	r3, [r7, #8]
 8008f20:	785b      	ldrb	r3, [r3, #1]
 8008f22:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f24:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008f26:	68ba      	ldr	r2, [r7, #8]
 8008f28:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008f2a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008f2c:	68bb      	ldr	r3, [r7, #8]
 8008f2e:	781b      	ldrb	r3, [r3, #0]
 8008f30:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008f32:	4313      	orrs	r3, r2
 8008f34:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f36:	68fb      	ldr	r3, [r7, #12]
 8008f38:	681b      	ldr	r3, [r3, #0]
 8008f3a:	22ca      	movs	r2, #202	; 0xca
 8008f3c:	625a      	str	r2, [r3, #36]	; 0x24
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	2253      	movs	r2, #83	; 0x53
 8008f44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008f46:	68f8      	ldr	r0, [r7, #12]
 8008f48:	f000 f9d8 	bl	80092fc <RTC_EnterInitMode>
 8008f4c:	4603      	mov	r3, r0
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d00b      	beq.n	8008f6a <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f52:	68fb      	ldr	r3, [r7, #12]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	22ff      	movs	r2, #255	; 0xff
 8008f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008f5a:	68fb      	ldr	r3, [r7, #12]
 8008f5c:	2204      	movs	r2, #4
 8008f5e:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	2200      	movs	r2, #0
 8008f64:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008f66:	2301      	movs	r3, #1
 8008f68:	e031      	b.n	8008fce <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	681a      	ldr	r2, [r3, #0]
 8008f6e:	6979      	ldr	r1, [r7, #20]
 8008f70:	4b19      	ldr	r3, [pc, #100]	; (8008fd8 <HAL_RTC_SetDate+0x14c>)
 8008f72:	400b      	ands	r3, r1
 8008f74:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	68da      	ldr	r2, [r3, #12]
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008f84:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	689b      	ldr	r3, [r3, #8]
 8008f8c:	f003 0320 	and.w	r3, r3, #32
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d111      	bne.n	8008fb8 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008f94:	68f8      	ldr	r0, [r7, #12]
 8008f96:	f000 f989 	bl	80092ac <HAL_RTC_WaitForSynchro>
 8008f9a:	4603      	mov	r3, r0
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d00b      	beq.n	8008fb8 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	22ff      	movs	r2, #255	; 0xff
 8008fa6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2204      	movs	r2, #4
 8008fac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	2200      	movs	r2, #0
 8008fb2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e00a      	b.n	8008fce <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fb8:	68fb      	ldr	r3, [r7, #12]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	22ff      	movs	r2, #255	; 0xff
 8008fbe:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008fc0:	68fb      	ldr	r3, [r7, #12]
 8008fc2:	2201      	movs	r2, #1
 8008fc4:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	2200      	movs	r2, #0
 8008fca:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008fcc:	2300      	movs	r3, #0
  }
}
 8008fce:	4618      	mov	r0, r3
 8008fd0:	371c      	adds	r7, #28
 8008fd2:	46bd      	mov	sp, r7
 8008fd4:	bd90      	pop	{r4, r7, pc}
 8008fd6:	bf00      	nop
 8008fd8:	00ffff3f 	.word	0x00ffff3f

08008fdc <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b086      	sub	sp, #24
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	685a      	ldr	r2, [r3, #4]
 8008ff2:	4b21      	ldr	r3, [pc, #132]	; (8009078 <HAL_RTC_GetDate+0x9c>)
 8008ff4:	4013      	ands	r3, r2
 8008ff6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008ff8:	697b      	ldr	r3, [r7, #20]
 8008ffa:	0c1b      	lsrs	r3, r3, #16
 8008ffc:	b2da      	uxtb	r2, r3
 8008ffe:	68bb      	ldr	r3, [r7, #8]
 8009000:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009002:	697b      	ldr	r3, [r7, #20]
 8009004:	0a1b      	lsrs	r3, r3, #8
 8009006:	b2db      	uxtb	r3, r3
 8009008:	f003 031f 	and.w	r3, r3, #31
 800900c:	b2da      	uxtb	r2, r3
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009012:	697b      	ldr	r3, [r7, #20]
 8009014:	b2db      	uxtb	r3, r3
 8009016:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800901a:	b2da      	uxtb	r2, r3
 800901c:	68bb      	ldr	r3, [r7, #8]
 800901e:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	0b5b      	lsrs	r3, r3, #13
 8009024:	b2db      	uxtb	r3, r3
 8009026:	f003 0307 	and.w	r3, r3, #7
 800902a:	b2da      	uxtb	r2, r3
 800902c:	68bb      	ldr	r3, [r7, #8]
 800902e:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	2b00      	cmp	r3, #0
 8009034:	d11a      	bne.n	800906c <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009036:	68bb      	ldr	r3, [r7, #8]
 8009038:	78db      	ldrb	r3, [r3, #3]
 800903a:	4618      	mov	r0, r3
 800903c:	f000 f9a8 	bl	8009390 <RTC_Bcd2ToByte>
 8009040:	4603      	mov	r3, r0
 8009042:	461a      	mov	r2, r3
 8009044:	68bb      	ldr	r3, [r7, #8]
 8009046:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009048:	68bb      	ldr	r3, [r7, #8]
 800904a:	785b      	ldrb	r3, [r3, #1]
 800904c:	4618      	mov	r0, r3
 800904e:	f000 f99f 	bl	8009390 <RTC_Bcd2ToByte>
 8009052:	4603      	mov	r3, r0
 8009054:	461a      	mov	r2, r3
 8009056:	68bb      	ldr	r3, [r7, #8]
 8009058:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800905a:	68bb      	ldr	r3, [r7, #8]
 800905c:	789b      	ldrb	r3, [r3, #2]
 800905e:	4618      	mov	r0, r3
 8009060:	f000 f996 	bl	8009390 <RTC_Bcd2ToByte>
 8009064:	4603      	mov	r3, r0
 8009066:	461a      	mov	r2, r3
 8009068:	68bb      	ldr	r3, [r7, #8]
 800906a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800906c:	2300      	movs	r3, #0
}
 800906e:	4618      	mov	r0, r3
 8009070:	3718      	adds	r7, #24
 8009072:	46bd      	mov	sp, r7
 8009074:	bd80      	pop	{r7, pc}
 8009076:	bf00      	nop
 8009078:	00ffff3f 	.word	0x00ffff3f

0800907c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 800907c:	b590      	push	{r4, r7, lr}
 800907e:	b089      	sub	sp, #36	; 0x24
 8009080:	af00      	add	r7, sp, #0
 8009082:	60f8      	str	r0, [r7, #12]
 8009084:	60b9      	str	r1, [r7, #8]
 8009086:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009088:	2300      	movs	r3, #0
 800908a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 800908c:	2300      	movs	r3, #0
 800908e:	61fb      	str	r3, [r7, #28]
 8009090:	2300      	movs	r3, #0
 8009092:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	7f1b      	ldrb	r3, [r3, #28]
 8009098:	2b01      	cmp	r3, #1
 800909a:	d101      	bne.n	80090a0 <HAL_RTC_SetAlarm+0x24>
 800909c:	2302      	movs	r3, #2
 800909e:	e101      	b.n	80092a4 <HAL_RTC_SetAlarm+0x228>
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	2201      	movs	r2, #1
 80090a4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	2202      	movs	r2, #2
 80090aa:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d137      	bne.n	8009122 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	689b      	ldr	r3, [r3, #8]
 80090b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d102      	bne.n	80090c6 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 80090c0:	68bb      	ldr	r3, [r7, #8]
 80090c2:	2200      	movs	r2, #0
 80090c4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80090c6:	68bb      	ldr	r3, [r7, #8]
 80090c8:	781b      	ldrb	r3, [r3, #0]
 80090ca:	4618      	mov	r0, r3
 80090cc:	f000 f942 	bl	8009354 <RTC_ByteToBcd2>
 80090d0:	4603      	mov	r3, r0
 80090d2:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80090d4:	68bb      	ldr	r3, [r7, #8]
 80090d6:	785b      	ldrb	r3, [r3, #1]
 80090d8:	4618      	mov	r0, r3
 80090da:	f000 f93b 	bl	8009354 <RTC_ByteToBcd2>
 80090de:	4603      	mov	r3, r0
 80090e0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 80090e2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80090e4:	68bb      	ldr	r3, [r7, #8]
 80090e6:	789b      	ldrb	r3, [r3, #2]
 80090e8:	4618      	mov	r0, r3
 80090ea:	f000 f933 	bl	8009354 <RTC_ByteToBcd2>
 80090ee:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 80090f0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	7b1b      	ldrb	r3, [r3, #12]
 80090f8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 80090fa:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 80090fe:	68bb      	ldr	r3, [r7, #8]
 8009100:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009104:	4618      	mov	r0, r3
 8009106:	f000 f925 	bl	8009354 <RTC_ByteToBcd2>
 800910a:	4603      	mov	r3, r0
 800910c:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800910e:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009116:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800911c:	4313      	orrs	r3, r2
 800911e:	61fb      	str	r3, [r7, #28]
 8009120:	e023      	b.n	800916a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	689b      	ldr	r3, [r3, #8]
 8009128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800912c:	2b00      	cmp	r3, #0
 800912e:	d102      	bne.n	8009136 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009130:	68bb      	ldr	r3, [r7, #8]
 8009132:	2200      	movs	r2, #0
 8009134:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009136:	68bb      	ldr	r3, [r7, #8]
 8009138:	781b      	ldrb	r3, [r3, #0]
 800913a:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 800913c:	68bb      	ldr	r3, [r7, #8]
 800913e:	785b      	ldrb	r3, [r3, #1]
 8009140:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009142:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009144:	68ba      	ldr	r2, [r7, #8]
 8009146:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009148:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800914a:	68bb      	ldr	r3, [r7, #8]
 800914c:	7b1b      	ldrb	r3, [r3, #12]
 800914e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009150:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009152:	68bb      	ldr	r3, [r7, #8]
 8009154:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009158:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800915a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800915c:	68bb      	ldr	r3, [r7, #8]
 800915e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009160:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009162:	68bb      	ldr	r3, [r7, #8]
 8009164:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009166:	4313      	orrs	r3, r2
 8009168:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 800916a:	68bb      	ldr	r3, [r7, #8]
 800916c:	685a      	ldr	r2, [r3, #4]
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	69db      	ldr	r3, [r3, #28]
 8009172:	4313      	orrs	r3, r2
 8009174:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009176:	68fb      	ldr	r3, [r7, #12]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	22ca      	movs	r2, #202	; 0xca
 800917c:	625a      	str	r2, [r3, #36]	; 0x24
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	681b      	ldr	r3, [r3, #0]
 8009182:	2253      	movs	r2, #83	; 0x53
 8009184:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009186:	68bb      	ldr	r3, [r7, #8]
 8009188:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800918a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800918e:	d13f      	bne.n	8009210 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	681b      	ldr	r3, [r3, #0]
 8009194:	689a      	ldr	r2, [r3, #8]
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	681b      	ldr	r3, [r3, #0]
 800919a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800919e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	689a      	ldr	r2, [r3, #8]
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80091ae:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80091b0:	f7fb fdae 	bl	8004d10 <HAL_GetTick>
 80091b4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80091b6:	e013      	b.n	80091e0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80091b8:	f7fb fdaa 	bl	8004d10 <HAL_GetTick>
 80091bc:	4602      	mov	r2, r0
 80091be:	69bb      	ldr	r3, [r7, #24]
 80091c0:	1ad3      	subs	r3, r2, r3
 80091c2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80091c6:	d90b      	bls.n	80091e0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091c8:	68fb      	ldr	r3, [r7, #12]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	22ff      	movs	r2, #255	; 0xff
 80091ce:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	2203      	movs	r2, #3
 80091d4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2200      	movs	r2, #0
 80091da:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091dc:	2303      	movs	r3, #3
 80091de:	e061      	b.n	80092a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	68db      	ldr	r3, [r3, #12]
 80091e6:	f003 0301 	and.w	r3, r3, #1
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d0e4      	beq.n	80091b8 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	69fa      	ldr	r2, [r7, #28]
 80091f4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	697a      	ldr	r2, [r7, #20]
 80091fc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800920c:	609a      	str	r2, [r3, #8]
 800920e:	e03e      	b.n	800928e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	689a      	ldr	r2, [r3, #8]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800921e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	689a      	ldr	r2, [r3, #8]
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800922e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009230:	f7fb fd6e 	bl	8004d10 <HAL_GetTick>
 8009234:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009236:	e013      	b.n	8009260 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009238:	f7fb fd6a 	bl	8004d10 <HAL_GetTick>
 800923c:	4602      	mov	r2, r0
 800923e:	69bb      	ldr	r3, [r7, #24]
 8009240:	1ad3      	subs	r3, r2, r3
 8009242:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009246:	d90b      	bls.n	8009260 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	22ff      	movs	r2, #255	; 0xff
 800924e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009250:	68fb      	ldr	r3, [r7, #12]
 8009252:	2203      	movs	r2, #3
 8009254:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009256:	68fb      	ldr	r3, [r7, #12]
 8009258:	2200      	movs	r2, #0
 800925a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 800925c:	2303      	movs	r3, #3
 800925e:	e021      	b.n	80092a4 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	68db      	ldr	r3, [r3, #12]
 8009266:	f003 0302 	and.w	r3, r3, #2
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0e4      	beq.n	8009238 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	681b      	ldr	r3, [r3, #0]
 8009272:	69fa      	ldr	r2, [r7, #28]
 8009274:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009276:	68fb      	ldr	r3, [r7, #12]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	697a      	ldr	r2, [r7, #20]
 800927c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	681b      	ldr	r3, [r3, #0]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800928c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	22ff      	movs	r2, #255	; 0xff
 8009294:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	2201      	movs	r2, #1
 800929a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800929c:	68fb      	ldr	r3, [r7, #12]
 800929e:	2200      	movs	r2, #0
 80092a0:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80092a2:	2300      	movs	r3, #0
}
 80092a4:	4618      	mov	r0, r3
 80092a6:	3724      	adds	r7, #36	; 0x24
 80092a8:	46bd      	mov	sp, r7
 80092aa:	bd90      	pop	{r4, r7, pc}

080092ac <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80092ac:	b580      	push	{r7, lr}
 80092ae:	b084      	sub	sp, #16
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80092b4:	2300      	movs	r3, #0
 80092b6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	68da      	ldr	r2, [r3, #12]
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80092c6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80092c8:	f7fb fd22 	bl	8004d10 <HAL_GetTick>
 80092cc:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80092ce:	e009      	b.n	80092e4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80092d0:	f7fb fd1e 	bl	8004d10 <HAL_GetTick>
 80092d4:	4602      	mov	r2, r0
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	1ad3      	subs	r3, r2, r3
 80092da:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80092de:	d901      	bls.n	80092e4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80092e0:	2303      	movs	r3, #3
 80092e2:	e007      	b.n	80092f4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68db      	ldr	r3, [r3, #12]
 80092ea:	f003 0320 	and.w	r3, r3, #32
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d0ee      	beq.n	80092d0 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80092f2:	2300      	movs	r3, #0
}
 80092f4:	4618      	mov	r0, r3
 80092f6:	3710      	adds	r7, #16
 80092f8:	46bd      	mov	sp, r7
 80092fa:	bd80      	pop	{r7, pc}

080092fc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80092fc:	b580      	push	{r7, lr}
 80092fe:	b084      	sub	sp, #16
 8009300:	af00      	add	r7, sp, #0
 8009302:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009304:	2300      	movs	r3, #0
 8009306:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	68db      	ldr	r3, [r3, #12]
 800930e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009312:	2b00      	cmp	r3, #0
 8009314:	d119      	bne.n	800934a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f04f 32ff 	mov.w	r2, #4294967295
 800931e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009320:	f7fb fcf6 	bl	8004d10 <HAL_GetTick>
 8009324:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009326:	e009      	b.n	800933c <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009328:	f7fb fcf2 	bl	8004d10 <HAL_GetTick>
 800932c:	4602      	mov	r2, r0
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	1ad3      	subs	r3, r2, r3
 8009332:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009336:	d901      	bls.n	800933c <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009338:	2303      	movs	r3, #3
 800933a:	e007      	b.n	800934c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	681b      	ldr	r3, [r3, #0]
 8009340:	68db      	ldr	r3, [r3, #12]
 8009342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009346:	2b00      	cmp	r3, #0
 8009348:	d0ee      	beq.n	8009328 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800934a:	2300      	movs	r3, #0
}
 800934c:	4618      	mov	r0, r3
 800934e:	3710      	adds	r7, #16
 8009350:	46bd      	mov	sp, r7
 8009352:	bd80      	pop	{r7, pc}

08009354 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8009354:	b480      	push	{r7}
 8009356:	b085      	sub	sp, #20
 8009358:	af00      	add	r7, sp, #0
 800935a:	4603      	mov	r3, r0
 800935c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800935e:	2300      	movs	r3, #0
 8009360:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8009362:	e005      	b.n	8009370 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	3301      	adds	r3, #1
 8009368:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800936a:	79fb      	ldrb	r3, [r7, #7]
 800936c:	3b0a      	subs	r3, #10
 800936e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009370:	79fb      	ldrb	r3, [r7, #7]
 8009372:	2b09      	cmp	r3, #9
 8009374:	d8f6      	bhi.n	8009364 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	b2db      	uxtb	r3, r3
 800937a:	011b      	lsls	r3, r3, #4
 800937c:	b2da      	uxtb	r2, r3
 800937e:	79fb      	ldrb	r3, [r7, #7]
 8009380:	4313      	orrs	r3, r2
 8009382:	b2db      	uxtb	r3, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	3714      	adds	r7, #20
 8009388:	46bd      	mov	sp, r7
 800938a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800938e:	4770      	bx	lr

08009390 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009390:	b480      	push	{r7}
 8009392:	b085      	sub	sp, #20
 8009394:	af00      	add	r7, sp, #0
 8009396:	4603      	mov	r3, r0
 8009398:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800939e:	79fb      	ldrb	r3, [r7, #7]
 80093a0:	091b      	lsrs	r3, r3, #4
 80093a2:	b2db      	uxtb	r3, r3
 80093a4:	461a      	mov	r2, r3
 80093a6:	4613      	mov	r3, r2
 80093a8:	009b      	lsls	r3, r3, #2
 80093aa:	4413      	add	r3, r2
 80093ac:	005b      	lsls	r3, r3, #1
 80093ae:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80093b0:	79fb      	ldrb	r3, [r7, #7]
 80093b2:	f003 030f 	and.w	r3, r3, #15
 80093b6:	b2da      	uxtb	r2, r3
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	b2db      	uxtb	r3, r3
 80093bc:	4413      	add	r3, r2
 80093be:	b2db      	uxtb	r3, r3
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3714      	adds	r7, #20
 80093c4:	46bd      	mov	sp, r7
 80093c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ca:	4770      	bx	lr

080093cc <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80093cc:	b480      	push	{r7}
 80093ce:	b087      	sub	sp, #28
 80093d0:	af00      	add	r7, sp, #0
 80093d2:	60f8      	str	r0, [r7, #12]
 80093d4:	60b9      	str	r1, [r7, #8]
 80093d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80093d8:	2300      	movs	r3, #0
 80093da:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	7f1b      	ldrb	r3, [r3, #28]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	d101      	bne.n	80093e8 <HAL_RTCEx_SetTimeStamp+0x1c>
 80093e4:	2302      	movs	r3, #2
 80093e6:	e03e      	b.n	8009466 <HAL_RTCEx_SetTimeStamp+0x9a>
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	2201      	movs	r2, #1
 80093ec:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	2202      	movs	r2, #2
 80093f2:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689a      	ldr	r2, [r3, #8]
 80093fa:	4b1e      	ldr	r3, [pc, #120]	; (8009474 <HAL_RTCEx_SetTimeStamp+0xa8>)
 80093fc:	4013      	ands	r3, r2
 80093fe:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009400:	697a      	ldr	r2, [r7, #20]
 8009402:	68bb      	ldr	r3, [r7, #8]
 8009404:	4313      	orrs	r3, r2
 8009406:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	22ca      	movs	r2, #202	; 0xca
 800940e:	625a      	str	r2, [r3, #36]	; 0x24
 8009410:	68fb      	ldr	r3, [r7, #12]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	2253      	movs	r2, #83	; 0x53
 8009416:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009418:	68fb      	ldr	r3, [r7, #12]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f022 0206 	bic.w	r2, r2, #6
 8009426:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	681b      	ldr	r3, [r3, #0]
 800942c:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	687a      	ldr	r2, [r7, #4]
 8009434:	430a      	orrs	r2, r1
 8009436:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	697a      	ldr	r2, [r7, #20]
 800943e:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	689a      	ldr	r2, [r3, #8]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800944e:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	22ff      	movs	r2, #255	; 0xff
 8009456:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	2201      	movs	r2, #1
 800945c:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	2200      	movs	r2, #0
 8009462:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009464:	2300      	movs	r3, #0
}
 8009466:	4618      	mov	r0, r3
 8009468:	371c      	adds	r7, #28
 800946a:	46bd      	mov	sp, r7
 800946c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009470:	4770      	bx	lr
 8009472:	bf00      	nop
 8009474:	fffff7f7 	.word	0xfffff7f7

08009478 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009478:	b580      	push	{r7, lr}
 800947a:	b082      	sub	sp, #8
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
 8009480:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b00      	cmp	r3, #0
 8009486:	d101      	bne.n	800948c <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009488:	2301      	movs	r3, #1
 800948a:	e025      	b.n	80094d8 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b00      	cmp	r3, #0
 8009496:	d106      	bne.n	80094a6 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	2200      	movs	r2, #0
 800949c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80094a0:	6878      	ldr	r0, [r7, #4]
 80094a2:	f7fb fb05 	bl	8004ab0 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2202      	movs	r2, #2
 80094aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	681a      	ldr	r2, [r3, #0]
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	3304      	adds	r3, #4
 80094b6:	4619      	mov	r1, r3
 80094b8:	4610      	mov	r0, r2
 80094ba:	f002 fa11 	bl	800b8e0 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6818      	ldr	r0, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	461a      	mov	r2, r3
 80094c8:	6839      	ldr	r1, [r7, #0]
 80094ca:	f002 fa7b 	bl	800b9c4 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2201      	movs	r2, #1
 80094d2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	3708      	adds	r7, #8
 80094dc:	46bd      	mov	sp, r7
 80094de:	bd80      	pop	{r7, pc}

080094e0 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b084      	sub	sp, #16
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	60f8      	str	r0, [r7, #12]
 80094e8:	60b9      	str	r1, [r7, #8]
 80094ea:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80094f2:	b2db      	uxtb	r3, r3
 80094f4:	2b02      	cmp	r3, #2
 80094f6:	d101      	bne.n	80094fc <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 80094f8:	2302      	movs	r3, #2
 80094fa:	e018      	b.n	800952e <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	2202      	movs	r2, #2
 8009500:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009504:	68fb      	ldr	r3, [r7, #12]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	687a      	ldr	r2, [r7, #4]
 800950a:	68b9      	ldr	r1, [r7, #8]
 800950c:	4618      	mov	r0, r3
 800950e:	f002 fad9 	bl	800bac4 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	2b02      	cmp	r3, #2
 8009518:	d104      	bne.n	8009524 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	2205      	movs	r2, #5
 800951e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8009522:	e003      	b.n	800952c <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	2201      	movs	r2, #1
 8009528:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}

08009536 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009536:	b580      	push	{r7, lr}
 8009538:	b082      	sub	sp, #8
 800953a:	af00      	add	r7, sp, #0
 800953c:	6078      	str	r0, [r7, #4]
 800953e:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009546:	b2db      	uxtb	r3, r3
 8009548:	2b02      	cmp	r3, #2
 800954a:	d101      	bne.n	8009550 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800954c:	2302      	movs	r3, #2
 800954e:	e00e      	b.n	800956e <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009550:	687b      	ldr	r3, [r7, #4]
 8009552:	2202      	movs	r2, #2
 8009554:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	6839      	ldr	r1, [r7, #0]
 800955e:	4618      	mov	r0, r3
 8009560:	f002 fad1 	bl	800bb06 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	2201      	movs	r2, #1
 8009568:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800956c:	2300      	movs	r3, #0
}
 800956e:	4618      	mov	r0, r3
 8009570:	3708      	adds	r7, #8
 8009572:	46bd      	mov	sp, r7
 8009574:	bd80      	pop	{r7, pc}

08009576 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009576:	b580      	push	{r7, lr}
 8009578:	b084      	sub	sp, #16
 800957a:	af00      	add	r7, sp, #0
 800957c:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d101      	bne.n	8009588 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009584:	2301      	movs	r3, #1
 8009586:	e084      	b.n	8009692 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	2200      	movs	r2, #0
 800958c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009594:	b2db      	uxtb	r3, r3
 8009596:	2b00      	cmp	r3, #0
 8009598:	d106      	bne.n	80095a8 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	2200      	movs	r2, #0
 800959e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7fb f80e 	bl	80045c4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2202      	movs	r2, #2
 80095ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	681a      	ldr	r2, [r3, #0]
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80095be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	68db      	ldr	r3, [r3, #12]
 80095c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095c8:	d902      	bls.n	80095d0 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80095ca:	2300      	movs	r3, #0
 80095cc:	60fb      	str	r3, [r7, #12]
 80095ce:	e002      	b.n	80095d6 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80095d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80095d4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80095d6:	687b      	ldr	r3, [r7, #4]
 80095d8:	68db      	ldr	r3, [r3, #12]
 80095da:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80095de:	d007      	beq.n	80095f0 <HAL_SPI_Init+0x7a>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	68db      	ldr	r3, [r3, #12]
 80095e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80095e8:	d002      	beq.n	80095f0 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2200      	movs	r2, #0
 80095ee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d10b      	bne.n	8009610 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	68db      	ldr	r3, [r3, #12]
 80095fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009600:	d903      	bls.n	800960a <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	2202      	movs	r2, #2
 8009606:	631a      	str	r2, [r3, #48]	; 0x30
 8009608:	e002      	b.n	8009610 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	2201      	movs	r2, #1
 800960e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	685a      	ldr	r2, [r3, #4]
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	689b      	ldr	r3, [r3, #8]
 8009618:	431a      	orrs	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	691b      	ldr	r3, [r3, #16]
 800961e:	431a      	orrs	r2, r3
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	695b      	ldr	r3, [r3, #20]
 8009624:	431a      	orrs	r2, r3
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	699b      	ldr	r3, [r3, #24]
 800962a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800962e:	431a      	orrs	r2, r3
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	69db      	ldr	r3, [r3, #28]
 8009634:	431a      	orrs	r2, r3
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	6a1b      	ldr	r3, [r3, #32]
 800963a:	ea42 0103 	orr.w	r1, r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	430a      	orrs	r2, r1
 8009648:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	699b      	ldr	r3, [r3, #24]
 800964e:	0c1b      	lsrs	r3, r3, #16
 8009650:	f003 0204 	and.w	r2, r3, #4
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009658:	431a      	orrs	r2, r3
 800965a:	687b      	ldr	r3, [r7, #4]
 800965c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800965e:	431a      	orrs	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	68db      	ldr	r3, [r3, #12]
 8009664:	ea42 0103 	orr.w	r1, r2, r3
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	68fa      	ldr	r2, [r7, #12]
 800966e:	430a      	orrs	r2, r1
 8009670:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009672:	687b      	ldr	r3, [r7, #4]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	69da      	ldr	r2, [r3, #28]
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009680:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	2200      	movs	r2, #0
 8009686:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2201      	movs	r2, #1
 800968c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009690:	2300      	movs	r3, #0
}
 8009692:	4618      	mov	r0, r3
 8009694:	3710      	adds	r7, #16
 8009696:	46bd      	mov	sp, r7
 8009698:	bd80      	pop	{r7, pc}

0800969a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b082      	sub	sp, #8
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d101      	bne.n	80096ac <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80096a8:	2301      	movs	r3, #1
 80096aa:	e01d      	b.n	80096e8 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096b2:	b2db      	uxtb	r3, r3
 80096b4:	2b00      	cmp	r3, #0
 80096b6:	d106      	bne.n	80096c6 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80096c0:	6878      	ldr	r0, [r7, #4]
 80096c2:	f7fa fff1 	bl	80046a8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2202      	movs	r2, #2
 80096ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681a      	ldr	r2, [r3, #0]
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	3304      	adds	r3, #4
 80096d6:	4619      	mov	r1, r3
 80096d8:	4610      	mov	r0, r2
 80096da:	f000 fbc3 	bl	8009e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	2201      	movs	r2, #1
 80096e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096e6:	2300      	movs	r3, #0
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3708      	adds	r7, #8
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80096f8:	687b      	ldr	r3, [r7, #4]
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	68da      	ldr	r2, [r3, #12]
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f042 0201 	orr.w	r2, r2, #1
 8009706:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	681b      	ldr	r3, [r3, #0]
 800970c:	689a      	ldr	r2, [r3, #8]
 800970e:	4b0c      	ldr	r3, [pc, #48]	; (8009740 <HAL_TIM_Base_Start_IT+0x50>)
 8009710:	4013      	ands	r3, r2
 8009712:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	2b06      	cmp	r3, #6
 8009718:	d00b      	beq.n	8009732 <HAL_TIM_Base_Start_IT+0x42>
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009720:	d007      	beq.n	8009732 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	681a      	ldr	r2, [r3, #0]
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	f042 0201 	orr.w	r2, r2, #1
 8009730:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009732:	2300      	movs	r3, #0
}
 8009734:	4618      	mov	r0, r3
 8009736:	3714      	adds	r7, #20
 8009738:	46bd      	mov	sp, r7
 800973a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973e:	4770      	bx	lr
 8009740:	00010007 	.word	0x00010007

08009744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009744:	b580      	push	{r7, lr}
 8009746:	b082      	sub	sp, #8
 8009748:	af00      	add	r7, sp, #0
 800974a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2b00      	cmp	r3, #0
 8009750:	d101      	bne.n	8009756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	e01d      	b.n	8009792 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800975c:	b2db      	uxtb	r3, r3
 800975e:	2b00      	cmp	r3, #0
 8009760:	d106      	bne.n	8009770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2200      	movs	r2, #0
 8009766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f815 	bl	800979a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	2202      	movs	r2, #2
 8009774:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681a      	ldr	r2, [r3, #0]
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	3304      	adds	r3, #4
 8009780:	4619      	mov	r1, r3
 8009782:	4610      	mov	r0, r2
 8009784:	f000 fb6e 	bl	8009e64 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	2201      	movs	r2, #1
 800978c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009790:	2300      	movs	r3, #0
}
 8009792:	4618      	mov	r0, r3
 8009794:	3708      	adds	r7, #8
 8009796:	46bd      	mov	sp, r7
 8009798:	bd80      	pop	{r7, pc}

0800979a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800979a:	b480      	push	{r7}
 800979c:	b083      	sub	sp, #12
 800979e:	af00      	add	r7, sp, #0
 80097a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80097a2:	bf00      	nop
 80097a4:	370c      	adds	r7, #12
 80097a6:	46bd      	mov	sp, r7
 80097a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ac:	4770      	bx	lr

080097ae <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80097ae:	b580      	push	{r7, lr}
 80097b0:	b082      	sub	sp, #8
 80097b2:	af00      	add	r7, sp, #0
 80097b4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	691b      	ldr	r3, [r3, #16]
 80097bc:	f003 0302 	and.w	r3, r3, #2
 80097c0:	2b02      	cmp	r3, #2
 80097c2:	d122      	bne.n	800980a <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80097c4:	687b      	ldr	r3, [r7, #4]
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	68db      	ldr	r3, [r3, #12]
 80097ca:	f003 0302 	and.w	r3, r3, #2
 80097ce:	2b02      	cmp	r3, #2
 80097d0:	d11b      	bne.n	800980a <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	f06f 0202 	mvn.w	r2, #2
 80097da:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	2201      	movs	r2, #1
 80097e0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	699b      	ldr	r3, [r3, #24]
 80097e8:	f003 0303 	and.w	r3, r3, #3
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d003      	beq.n	80097f8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80097f0:	6878      	ldr	r0, [r7, #4]
 80097f2:	f000 fb19 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 80097f6:	e005      	b.n	8009804 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80097f8:	6878      	ldr	r0, [r7, #4]
 80097fa:	f000 fb0b 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097fe:	6878      	ldr	r0, [r7, #4]
 8009800:	f000 fb1c 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2200      	movs	r2, #0
 8009808:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	691b      	ldr	r3, [r3, #16]
 8009810:	f003 0304 	and.w	r3, r3, #4
 8009814:	2b04      	cmp	r3, #4
 8009816:	d122      	bne.n	800985e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	68db      	ldr	r3, [r3, #12]
 800981e:	f003 0304 	and.w	r3, r3, #4
 8009822:	2b04      	cmp	r3, #4
 8009824:	d11b      	bne.n	800985e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	f06f 0204 	mvn.w	r2, #4
 800982e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	2202      	movs	r2, #2
 8009834:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	681b      	ldr	r3, [r3, #0]
 800983a:	699b      	ldr	r3, [r3, #24]
 800983c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009840:	2b00      	cmp	r3, #0
 8009842:	d003      	beq.n	800984c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009844:	6878      	ldr	r0, [r7, #4]
 8009846:	f000 faef 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 800984a:	e005      	b.n	8009858 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800984c:	6878      	ldr	r0, [r7, #4]
 800984e:	f000 fae1 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009852:	6878      	ldr	r0, [r7, #4]
 8009854:	f000 faf2 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2200      	movs	r2, #0
 800985c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	691b      	ldr	r3, [r3, #16]
 8009864:	f003 0308 	and.w	r3, r3, #8
 8009868:	2b08      	cmp	r3, #8
 800986a:	d122      	bne.n	80098b2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	681b      	ldr	r3, [r3, #0]
 8009870:	68db      	ldr	r3, [r3, #12]
 8009872:	f003 0308 	and.w	r3, r3, #8
 8009876:	2b08      	cmp	r3, #8
 8009878:	d11b      	bne.n	80098b2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800987a:	687b      	ldr	r3, [r7, #4]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	f06f 0208 	mvn.w	r2, #8
 8009882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	2204      	movs	r2, #4
 8009888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	69db      	ldr	r3, [r3, #28]
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	2b00      	cmp	r3, #0
 8009896:	d003      	beq.n	80098a0 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009898:	6878      	ldr	r0, [r7, #4]
 800989a:	f000 fac5 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 800989e:	e005      	b.n	80098ac <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098a0:	6878      	ldr	r0, [r7, #4]
 80098a2:	f000 fab7 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098a6:	6878      	ldr	r0, [r7, #4]
 80098a8:	f000 fac8 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	2200      	movs	r2, #0
 80098b0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	681b      	ldr	r3, [r3, #0]
 80098b6:	691b      	ldr	r3, [r3, #16]
 80098b8:	f003 0310 	and.w	r3, r3, #16
 80098bc:	2b10      	cmp	r3, #16
 80098be:	d122      	bne.n	8009906 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68db      	ldr	r3, [r3, #12]
 80098c6:	f003 0310 	and.w	r3, r3, #16
 80098ca:	2b10      	cmp	r3, #16
 80098cc:	d11b      	bne.n	8009906 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	f06f 0210 	mvn.w	r2, #16
 80098d6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	2208      	movs	r2, #8
 80098dc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	69db      	ldr	r3, [r3, #28]
 80098e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d003      	beq.n	80098f4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f000 fa9b 	bl	8009e28 <HAL_TIM_IC_CaptureCallback>
 80098f2:	e005      	b.n	8009900 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80098f4:	6878      	ldr	r0, [r7, #4]
 80098f6:	f000 fa8d 	bl	8009e14 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80098fa:	6878      	ldr	r0, [r7, #4]
 80098fc:	f000 fa9e 	bl	8009e3c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	2200      	movs	r2, #0
 8009904:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	691b      	ldr	r3, [r3, #16]
 800990c:	f003 0301 	and.w	r3, r3, #1
 8009910:	2b01      	cmp	r3, #1
 8009912:	d10e      	bne.n	8009932 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	68db      	ldr	r3, [r3, #12]
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b01      	cmp	r3, #1
 8009920:	d107      	bne.n	8009932 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f06f 0201 	mvn.w	r2, #1
 800992a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	f7f8 fe1b 	bl	8002568 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	691b      	ldr	r3, [r3, #16]
 8009938:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800993c:	2b80      	cmp	r3, #128	; 0x80
 800993e:	d10e      	bne.n	800995e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	68db      	ldr	r3, [r3, #12]
 8009946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800994a:	2b80      	cmp	r3, #128	; 0x80
 800994c:	d107      	bne.n	800995e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009956:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009958:	6878      	ldr	r0, [r7, #4]
 800995a:	f000 ffb9 	bl	800a8d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	691b      	ldr	r3, [r3, #16]
 8009964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009968:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800996c:	d10e      	bne.n	800998c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009978:	2b80      	cmp	r3, #128	; 0x80
 800997a:	d107      	bne.n	800998c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009984:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f000 ffac 	bl	800a8e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	691b      	ldr	r3, [r3, #16]
 8009992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009996:	2b40      	cmp	r3, #64	; 0x40
 8009998:	d10e      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	68db      	ldr	r3, [r3, #12]
 80099a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099a4:	2b40      	cmp	r3, #64	; 0x40
 80099a6:	d107      	bne.n	80099b8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80099b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80099b2:	6878      	ldr	r0, [r7, #4]
 80099b4:	f000 fa4c 	bl	8009e50 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	691b      	ldr	r3, [r3, #16]
 80099be:	f003 0320 	and.w	r3, r3, #32
 80099c2:	2b20      	cmp	r3, #32
 80099c4:	d10e      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80099c6:	687b      	ldr	r3, [r7, #4]
 80099c8:	681b      	ldr	r3, [r3, #0]
 80099ca:	68db      	ldr	r3, [r3, #12]
 80099cc:	f003 0320 	and.w	r3, r3, #32
 80099d0:	2b20      	cmp	r3, #32
 80099d2:	d107      	bne.n	80099e4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	f06f 0220 	mvn.w	r2, #32
 80099dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f000 ff6c 	bl	800a8bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80099e4:	bf00      	nop
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80099ec:	b580      	push	{r7, lr}
 80099ee:	b084      	sub	sp, #16
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	60f8      	str	r0, [r7, #12]
 80099f4:	60b9      	str	r1, [r7, #8]
 80099f6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80099fe:	2b01      	cmp	r3, #1
 8009a00:	d101      	bne.n	8009a06 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009a02:	2302      	movs	r3, #2
 8009a04:	e105      	b.n	8009c12 <HAL_TIM_PWM_ConfigChannel+0x226>
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	2201      	movs	r2, #1
 8009a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2202      	movs	r2, #2
 8009a12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2b14      	cmp	r3, #20
 8009a1a:	f200 80f0 	bhi.w	8009bfe <HAL_TIM_PWM_ConfigChannel+0x212>
 8009a1e:	a201      	add	r2, pc, #4	; (adr r2, 8009a24 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009a20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a24:	08009a79 	.word	0x08009a79
 8009a28:	08009bff 	.word	0x08009bff
 8009a2c:	08009bff 	.word	0x08009bff
 8009a30:	08009bff 	.word	0x08009bff
 8009a34:	08009ab9 	.word	0x08009ab9
 8009a38:	08009bff 	.word	0x08009bff
 8009a3c:	08009bff 	.word	0x08009bff
 8009a40:	08009bff 	.word	0x08009bff
 8009a44:	08009afb 	.word	0x08009afb
 8009a48:	08009bff 	.word	0x08009bff
 8009a4c:	08009bff 	.word	0x08009bff
 8009a50:	08009bff 	.word	0x08009bff
 8009a54:	08009b3b 	.word	0x08009b3b
 8009a58:	08009bff 	.word	0x08009bff
 8009a5c:	08009bff 	.word	0x08009bff
 8009a60:	08009bff 	.word	0x08009bff
 8009a64:	08009b7d 	.word	0x08009b7d
 8009a68:	08009bff 	.word	0x08009bff
 8009a6c:	08009bff 	.word	0x08009bff
 8009a70:	08009bff 	.word	0x08009bff
 8009a74:	08009bbd 	.word	0x08009bbd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68b9      	ldr	r1, [r7, #8]
 8009a7e:	4618      	mov	r0, r3
 8009a80:	f000 fa90 	bl	8009fa4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	699a      	ldr	r2, [r3, #24]
 8009a8a:	68fb      	ldr	r3, [r7, #12]
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	f042 0208 	orr.w	r2, r2, #8
 8009a92:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	699a      	ldr	r2, [r3, #24]
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f022 0204 	bic.w	r2, r2, #4
 8009aa2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	6999      	ldr	r1, [r3, #24]
 8009aaa:	68bb      	ldr	r3, [r7, #8]
 8009aac:	691a      	ldr	r2, [r3, #16]
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	430a      	orrs	r2, r1
 8009ab4:	619a      	str	r2, [r3, #24]
      break;
 8009ab6:	e0a3      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	68b9      	ldr	r1, [r7, #8]
 8009abe:	4618      	mov	r0, r3
 8009ac0:	f000 fae2 	bl	800a088 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	699a      	ldr	r2, [r3, #24]
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009ad2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	699a      	ldr	r2, [r3, #24]
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ae2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6999      	ldr	r1, [r3, #24]
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	691b      	ldr	r3, [r3, #16]
 8009aee:	021a      	lsls	r2, r3, #8
 8009af0:	68fb      	ldr	r3, [r7, #12]
 8009af2:	681b      	ldr	r3, [r3, #0]
 8009af4:	430a      	orrs	r2, r1
 8009af6:	619a      	str	r2, [r3, #24]
      break;
 8009af8:	e082      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009afa:	68fb      	ldr	r3, [r7, #12]
 8009afc:	681b      	ldr	r3, [r3, #0]
 8009afe:	68b9      	ldr	r1, [r7, #8]
 8009b00:	4618      	mov	r0, r3
 8009b02:	f000 fb39 	bl	800a178 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	69da      	ldr	r2, [r3, #28]
 8009b0c:	68fb      	ldr	r3, [r7, #12]
 8009b0e:	681b      	ldr	r3, [r3, #0]
 8009b10:	f042 0208 	orr.w	r2, r2, #8
 8009b14:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	69da      	ldr	r2, [r3, #28]
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	681b      	ldr	r3, [r3, #0]
 8009b20:	f022 0204 	bic.w	r2, r2, #4
 8009b24:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	681b      	ldr	r3, [r3, #0]
 8009b2a:	69d9      	ldr	r1, [r3, #28]
 8009b2c:	68bb      	ldr	r3, [r7, #8]
 8009b2e:	691a      	ldr	r2, [r3, #16]
 8009b30:	68fb      	ldr	r3, [r7, #12]
 8009b32:	681b      	ldr	r3, [r3, #0]
 8009b34:	430a      	orrs	r2, r1
 8009b36:	61da      	str	r2, [r3, #28]
      break;
 8009b38:	e062      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	681b      	ldr	r3, [r3, #0]
 8009b3e:	68b9      	ldr	r1, [r7, #8]
 8009b40:	4618      	mov	r0, r3
 8009b42:	f000 fb8f 	bl	800a264 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	681b      	ldr	r3, [r3, #0]
 8009b4a:	69da      	ldr	r2, [r3, #28]
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	681b      	ldr	r3, [r3, #0]
 8009b50:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b54:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009b56:	68fb      	ldr	r3, [r7, #12]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	69da      	ldr	r2, [r3, #28]
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b64:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	69d9      	ldr	r1, [r3, #28]
 8009b6c:	68bb      	ldr	r3, [r7, #8]
 8009b6e:	691b      	ldr	r3, [r3, #16]
 8009b70:	021a      	lsls	r2, r3, #8
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	681b      	ldr	r3, [r3, #0]
 8009b76:	430a      	orrs	r2, r1
 8009b78:	61da      	str	r2, [r3, #28]
      break;
 8009b7a:	e041      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009b7c:	68fb      	ldr	r3, [r7, #12]
 8009b7e:	681b      	ldr	r3, [r3, #0]
 8009b80:	68b9      	ldr	r1, [r7, #8]
 8009b82:	4618      	mov	r0, r3
 8009b84:	f000 fbc6 	bl	800a314 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f042 0208 	orr.w	r2, r2, #8
 8009b96:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b9e:	68fb      	ldr	r3, [r7, #12]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	f022 0204 	bic.w	r2, r2, #4
 8009ba6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	691a      	ldr	r2, [r3, #16]
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	430a      	orrs	r2, r1
 8009bb8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bba:	e021      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009bbc:	68fb      	ldr	r3, [r7, #12]
 8009bbe:	681b      	ldr	r3, [r3, #0]
 8009bc0:	68b9      	ldr	r1, [r7, #8]
 8009bc2:	4618      	mov	r0, r3
 8009bc4:	f000 fbf8 	bl	800a3b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009bc8:	68fb      	ldr	r3, [r7, #12]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bce:	68fb      	ldr	r3, [r7, #12]
 8009bd0:	681b      	ldr	r3, [r3, #0]
 8009bd2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009bd6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009be6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009bee:	68bb      	ldr	r3, [r7, #8]
 8009bf0:	691b      	ldr	r3, [r3, #16]
 8009bf2:	021a      	lsls	r2, r3, #8
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	430a      	orrs	r2, r1
 8009bfa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009bfc:	e000      	b.n	8009c00 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009bfe:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009c00:	68fb      	ldr	r3, [r7, #12]
 8009c02:	2201      	movs	r2, #1
 8009c04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c10:	2300      	movs	r3, #0
}
 8009c12:	4618      	mov	r0, r3
 8009c14:	3710      	adds	r7, #16
 8009c16:	46bd      	mov	sp, r7
 8009c18:	bd80      	pop	{r7, pc}
 8009c1a:	bf00      	nop

08009c1c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009c1c:	b580      	push	{r7, lr}
 8009c1e:	b084      	sub	sp, #16
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
 8009c24:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c2c:	2b01      	cmp	r3, #1
 8009c2e:	d101      	bne.n	8009c34 <HAL_TIM_ConfigClockSource+0x18>
 8009c30:	2302      	movs	r3, #2
 8009c32:	e0a6      	b.n	8009d82 <HAL_TIM_ConfigClockSource+0x166>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	2201      	movs	r2, #1
 8009c38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	2202      	movs	r2, #2
 8009c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	689b      	ldr	r3, [r3, #8]
 8009c4a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009c4c:	68fa      	ldr	r2, [r7, #12]
 8009c4e:	4b4f      	ldr	r3, [pc, #316]	; (8009d8c <HAL_TIM_ConfigClockSource+0x170>)
 8009c50:	4013      	ands	r3, r2
 8009c52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009c5a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	68fa      	ldr	r2, [r7, #12]
 8009c62:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	681b      	ldr	r3, [r3, #0]
 8009c68:	2b40      	cmp	r3, #64	; 0x40
 8009c6a:	d067      	beq.n	8009d3c <HAL_TIM_ConfigClockSource+0x120>
 8009c6c:	2b40      	cmp	r3, #64	; 0x40
 8009c6e:	d80b      	bhi.n	8009c88 <HAL_TIM_ConfigClockSource+0x6c>
 8009c70:	2b10      	cmp	r3, #16
 8009c72:	d073      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0x140>
 8009c74:	2b10      	cmp	r3, #16
 8009c76:	d802      	bhi.n	8009c7e <HAL_TIM_ConfigClockSource+0x62>
 8009c78:	2b00      	cmp	r3, #0
 8009c7a:	d06f      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009c7c:	e078      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c7e:	2b20      	cmp	r3, #32
 8009c80:	d06c      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0x140>
 8009c82:	2b30      	cmp	r3, #48	; 0x30
 8009c84:	d06a      	beq.n	8009d5c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009c86:	e073      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c88:	2b70      	cmp	r3, #112	; 0x70
 8009c8a:	d00d      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x8c>
 8009c8c:	2b70      	cmp	r3, #112	; 0x70
 8009c8e:	d804      	bhi.n	8009c9a <HAL_TIM_ConfigClockSource+0x7e>
 8009c90:	2b50      	cmp	r3, #80	; 0x50
 8009c92:	d033      	beq.n	8009cfc <HAL_TIM_ConfigClockSource+0xe0>
 8009c94:	2b60      	cmp	r3, #96	; 0x60
 8009c96:	d041      	beq.n	8009d1c <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009c98:	e06a      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009c9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c9e:	d066      	beq.n	8009d6e <HAL_TIM_ConfigClockSource+0x152>
 8009ca0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009ca4:	d017      	beq.n	8009cd6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009ca6:	e063      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6818      	ldr	r0, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	6899      	ldr	r1, [r3, #8]
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	685a      	ldr	r2, [r3, #4]
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	68db      	ldr	r3, [r3, #12]
 8009cb8:	f000 fcd4 	bl	800a664 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	689b      	ldr	r3, [r3, #8]
 8009cc2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009cca:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	68fa      	ldr	r2, [r7, #12]
 8009cd2:	609a      	str	r2, [r3, #8]
      break;
 8009cd4:	e04c      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	6818      	ldr	r0, [r3, #0]
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	6899      	ldr	r1, [r3, #8]
 8009cde:	683b      	ldr	r3, [r7, #0]
 8009ce0:	685a      	ldr	r2, [r3, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	68db      	ldr	r3, [r3, #12]
 8009ce6:	f000 fcbd 	bl	800a664 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	689a      	ldr	r2, [r3, #8]
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	681b      	ldr	r3, [r3, #0]
 8009cf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cf8:	609a      	str	r2, [r3, #8]
      break;
 8009cfa:	e039      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	6818      	ldr	r0, [r3, #0]
 8009d00:	683b      	ldr	r3, [r7, #0]
 8009d02:	6859      	ldr	r1, [r3, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	68db      	ldr	r3, [r3, #12]
 8009d08:	461a      	mov	r2, r3
 8009d0a:	f000 fc31 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	2150      	movs	r1, #80	; 0x50
 8009d14:	4618      	mov	r0, r3
 8009d16:	f000 fc8a 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009d1a:	e029      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	6818      	ldr	r0, [r3, #0]
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	6859      	ldr	r1, [r3, #4]
 8009d24:	683b      	ldr	r3, [r7, #0]
 8009d26:	68db      	ldr	r3, [r3, #12]
 8009d28:	461a      	mov	r2, r3
 8009d2a:	f000 fc50 	bl	800a5ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009d2e:	687b      	ldr	r3, [r7, #4]
 8009d30:	681b      	ldr	r3, [r3, #0]
 8009d32:	2160      	movs	r1, #96	; 0x60
 8009d34:	4618      	mov	r0, r3
 8009d36:	f000 fc7a 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009d3a:	e019      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	6818      	ldr	r0, [r3, #0]
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	6859      	ldr	r1, [r3, #4]
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	68db      	ldr	r3, [r3, #12]
 8009d48:	461a      	mov	r2, r3
 8009d4a:	f000 fc11 	bl	800a570 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	2140      	movs	r1, #64	; 0x40
 8009d54:	4618      	mov	r0, r3
 8009d56:	f000 fc6a 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009d5a:	e009      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	681a      	ldr	r2, [r3, #0]
 8009d60:	683b      	ldr	r3, [r7, #0]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	4619      	mov	r1, r3
 8009d66:	4610      	mov	r0, r2
 8009d68:	f000 fc61 	bl	800a62e <TIM_ITRx_SetConfig>
      break;
 8009d6c:	e000      	b.n	8009d70 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009d6e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	2201      	movs	r2, #1
 8009d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d80:	2300      	movs	r3, #0
}
 8009d82:	4618      	mov	r0, r3
 8009d84:	3710      	adds	r7, #16
 8009d86:	46bd      	mov	sp, r7
 8009d88:	bd80      	pop	{r7, pc}
 8009d8a:	bf00      	nop
 8009d8c:	fffeff88 	.word	0xfffeff88

08009d90 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009d90:	b580      	push	{r7, lr}
 8009d92:	b082      	sub	sp, #8
 8009d94:	af00      	add	r7, sp, #0
 8009d96:	6078      	str	r0, [r7, #4]
 8009d98:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009da0:	2b01      	cmp	r3, #1
 8009da2:	d101      	bne.n	8009da8 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009da4:	2302      	movs	r3, #2
 8009da6:	e031      	b.n	8009e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	2201      	movs	r2, #1
 8009dac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2202      	movs	r2, #2
 8009db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009db8:	6839      	ldr	r1, [r7, #0]
 8009dba:	6878      	ldr	r0, [r7, #4]
 8009dbc:	f000 fb50 	bl	800a460 <TIM_SlaveTimer_SetConfig>
 8009dc0:	4603      	mov	r3, r0
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d009      	beq.n	8009dda <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	2201      	movs	r2, #1
 8009dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009dd6:	2301      	movs	r3, #1
 8009dd8:	e018      	b.n	8009e0c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	68da      	ldr	r2, [r3, #12]
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009de8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	681b      	ldr	r3, [r3, #0]
 8009dee:	68da      	ldr	r2, [r3, #12]
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009df8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009dfa:	687b      	ldr	r3, [r7, #4]
 8009dfc:	2201      	movs	r2, #1
 8009dfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	2200      	movs	r2, #0
 8009e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009e0a:	2300      	movs	r3, #0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3708      	adds	r7, #8
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009e14:	b480      	push	{r7}
 8009e16:	b083      	sub	sp, #12
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009e1c:	bf00      	nop
 8009e1e:	370c      	adds	r7, #12
 8009e20:	46bd      	mov	sp, r7
 8009e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e26:	4770      	bx	lr

08009e28 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009e28:	b480      	push	{r7}
 8009e2a:	b083      	sub	sp, #12
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009e30:	bf00      	nop
 8009e32:	370c      	adds	r7, #12
 8009e34:	46bd      	mov	sp, r7
 8009e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e3a:	4770      	bx	lr

08009e3c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009e3c:	b480      	push	{r7}
 8009e3e:	b083      	sub	sp, #12
 8009e40:	af00      	add	r7, sp, #0
 8009e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009e44:	bf00      	nop
 8009e46:	370c      	adds	r7, #12
 8009e48:	46bd      	mov	sp, r7
 8009e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4e:	4770      	bx	lr

08009e50 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009e50:	b480      	push	{r7}
 8009e52:	b083      	sub	sp, #12
 8009e54:	af00      	add	r7, sp, #0
 8009e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009e58:	bf00      	nop
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009e64:	b480      	push	{r7}
 8009e66:	b085      	sub	sp, #20
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	4a40      	ldr	r2, [pc, #256]	; (8009f78 <TIM_Base_SetConfig+0x114>)
 8009e78:	4293      	cmp	r3, r2
 8009e7a:	d013      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e82:	d00f      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	4a3d      	ldr	r2, [pc, #244]	; (8009f7c <TIM_Base_SetConfig+0x118>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d00b      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	4a3c      	ldr	r2, [pc, #240]	; (8009f80 <TIM_Base_SetConfig+0x11c>)
 8009e90:	4293      	cmp	r3, r2
 8009e92:	d007      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	4a3b      	ldr	r2, [pc, #236]	; (8009f84 <TIM_Base_SetConfig+0x120>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d003      	beq.n	8009ea4 <TIM_Base_SetConfig+0x40>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	4a3a      	ldr	r2, [pc, #232]	; (8009f88 <TIM_Base_SetConfig+0x124>)
 8009ea0:	4293      	cmp	r3, r2
 8009ea2:	d108      	bne.n	8009eb6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009ea4:	68fb      	ldr	r3, [r7, #12]
 8009ea6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eaa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009eac:	683b      	ldr	r3, [r7, #0]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	68fa      	ldr	r2, [r7, #12]
 8009eb2:	4313      	orrs	r3, r2
 8009eb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	4a2f      	ldr	r2, [pc, #188]	; (8009f78 <TIM_Base_SetConfig+0x114>)
 8009eba:	4293      	cmp	r3, r2
 8009ebc:	d02b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ec4:	d027      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	4a2c      	ldr	r2, [pc, #176]	; (8009f7c <TIM_Base_SetConfig+0x118>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d023      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	4a2b      	ldr	r2, [pc, #172]	; (8009f80 <TIM_Base_SetConfig+0x11c>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d01f      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	4a2a      	ldr	r2, [pc, #168]	; (8009f84 <TIM_Base_SetConfig+0x120>)
 8009eda:	4293      	cmp	r3, r2
 8009edc:	d01b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ede:	687b      	ldr	r3, [r7, #4]
 8009ee0:	4a29      	ldr	r2, [pc, #164]	; (8009f88 <TIM_Base_SetConfig+0x124>)
 8009ee2:	4293      	cmp	r3, r2
 8009ee4:	d017      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	4a28      	ldr	r2, [pc, #160]	; (8009f8c <TIM_Base_SetConfig+0x128>)
 8009eea:	4293      	cmp	r3, r2
 8009eec:	d013      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	4a27      	ldr	r2, [pc, #156]	; (8009f90 <TIM_Base_SetConfig+0x12c>)
 8009ef2:	4293      	cmp	r3, r2
 8009ef4:	d00f      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	4a26      	ldr	r2, [pc, #152]	; (8009f94 <TIM_Base_SetConfig+0x130>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d00b      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	4a25      	ldr	r2, [pc, #148]	; (8009f98 <TIM_Base_SetConfig+0x134>)
 8009f02:	4293      	cmp	r3, r2
 8009f04:	d007      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	4a24      	ldr	r2, [pc, #144]	; (8009f9c <TIM_Base_SetConfig+0x138>)
 8009f0a:	4293      	cmp	r3, r2
 8009f0c:	d003      	beq.n	8009f16 <TIM_Base_SetConfig+0xb2>
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	4a23      	ldr	r2, [pc, #140]	; (8009fa0 <TIM_Base_SetConfig+0x13c>)
 8009f12:	4293      	cmp	r3, r2
 8009f14:	d108      	bne.n	8009f28 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f1c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009f1e:	683b      	ldr	r3, [r7, #0]
 8009f20:	68db      	ldr	r3, [r3, #12]
 8009f22:	68fa      	ldr	r2, [r7, #12]
 8009f24:	4313      	orrs	r3, r2
 8009f26:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009f2e:	683b      	ldr	r3, [r7, #0]
 8009f30:	695b      	ldr	r3, [r3, #20]
 8009f32:	4313      	orrs	r3, r2
 8009f34:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	68fa      	ldr	r2, [r7, #12]
 8009f3a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	689a      	ldr	r2, [r3, #8]
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009f44:	683b      	ldr	r3, [r7, #0]
 8009f46:	681a      	ldr	r2, [r3, #0]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a0a      	ldr	r2, [pc, #40]	; (8009f78 <TIM_Base_SetConfig+0x114>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d003      	beq.n	8009f5c <TIM_Base_SetConfig+0xf8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	4a0c      	ldr	r2, [pc, #48]	; (8009f88 <TIM_Base_SetConfig+0x124>)
 8009f58:	4293      	cmp	r3, r2
 8009f5a:	d103      	bne.n	8009f64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	691a      	ldr	r2, [r3, #16]
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2201      	movs	r2, #1
 8009f68:	615a      	str	r2, [r3, #20]
}
 8009f6a:	bf00      	nop
 8009f6c:	3714      	adds	r7, #20
 8009f6e:	46bd      	mov	sp, r7
 8009f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f74:	4770      	bx	lr
 8009f76:	bf00      	nop
 8009f78:	40010000 	.word	0x40010000
 8009f7c:	40000400 	.word	0x40000400
 8009f80:	40000800 	.word	0x40000800
 8009f84:	40000c00 	.word	0x40000c00
 8009f88:	40010400 	.word	0x40010400
 8009f8c:	40014000 	.word	0x40014000
 8009f90:	40014400 	.word	0x40014400
 8009f94:	40014800 	.word	0x40014800
 8009f98:	40001800 	.word	0x40001800
 8009f9c:	40001c00 	.word	0x40001c00
 8009fa0:	40002000 	.word	0x40002000

08009fa4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fa4:	b480      	push	{r7}
 8009fa6:	b087      	sub	sp, #28
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
 8009fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	6a1b      	ldr	r3, [r3, #32]
 8009fb2:	f023 0201 	bic.w	r2, r3, #1
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fba:	687b      	ldr	r3, [r7, #4]
 8009fbc:	6a1b      	ldr	r3, [r3, #32]
 8009fbe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	685b      	ldr	r3, [r3, #4]
 8009fc4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009fcc:	68fa      	ldr	r2, [r7, #12]
 8009fce:	4b2b      	ldr	r3, [pc, #172]	; (800a07c <TIM_OC1_SetConfig+0xd8>)
 8009fd0:	4013      	ands	r3, r2
 8009fd2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	f023 0303 	bic.w	r3, r3, #3
 8009fda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fdc:	683b      	ldr	r3, [r7, #0]
 8009fde:	681b      	ldr	r3, [r3, #0]
 8009fe0:	68fa      	ldr	r2, [r7, #12]
 8009fe2:	4313      	orrs	r3, r2
 8009fe4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f023 0302 	bic.w	r3, r3, #2
 8009fec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	689b      	ldr	r3, [r3, #8]
 8009ff2:	697a      	ldr	r2, [r7, #20]
 8009ff4:	4313      	orrs	r3, r2
 8009ff6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009ff8:	687b      	ldr	r3, [r7, #4]
 8009ffa:	4a21      	ldr	r2, [pc, #132]	; (800a080 <TIM_OC1_SetConfig+0xdc>)
 8009ffc:	4293      	cmp	r3, r2
 8009ffe:	d003      	beq.n	800a008 <TIM_OC1_SetConfig+0x64>
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	4a20      	ldr	r2, [pc, #128]	; (800a084 <TIM_OC1_SetConfig+0xe0>)
 800a004:	4293      	cmp	r3, r2
 800a006:	d10c      	bne.n	800a022 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f023 0308 	bic.w	r3, r3, #8
 800a00e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a010:	683b      	ldr	r3, [r7, #0]
 800a012:	68db      	ldr	r3, [r3, #12]
 800a014:	697a      	ldr	r2, [r7, #20]
 800a016:	4313      	orrs	r3, r2
 800a018:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a01a:	697b      	ldr	r3, [r7, #20]
 800a01c:	f023 0304 	bic.w	r3, r3, #4
 800a020:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	4a16      	ldr	r2, [pc, #88]	; (800a080 <TIM_OC1_SetConfig+0xdc>)
 800a026:	4293      	cmp	r3, r2
 800a028:	d003      	beq.n	800a032 <TIM_OC1_SetConfig+0x8e>
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	4a15      	ldr	r2, [pc, #84]	; (800a084 <TIM_OC1_SetConfig+0xe0>)
 800a02e:	4293      	cmp	r3, r2
 800a030:	d111      	bne.n	800a056 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a032:	693b      	ldr	r3, [r7, #16]
 800a034:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a038:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a03a:	693b      	ldr	r3, [r7, #16]
 800a03c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a040:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a042:	683b      	ldr	r3, [r7, #0]
 800a044:	695b      	ldr	r3, [r3, #20]
 800a046:	693a      	ldr	r2, [r7, #16]
 800a048:	4313      	orrs	r3, r2
 800a04a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a04c:	683b      	ldr	r3, [r7, #0]
 800a04e:	699b      	ldr	r3, [r3, #24]
 800a050:	693a      	ldr	r2, [r7, #16]
 800a052:	4313      	orrs	r3, r2
 800a054:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a056:	687b      	ldr	r3, [r7, #4]
 800a058:	693a      	ldr	r2, [r7, #16]
 800a05a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	68fa      	ldr	r2, [r7, #12]
 800a060:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a062:	683b      	ldr	r3, [r7, #0]
 800a064:	685a      	ldr	r2, [r3, #4]
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a06a:	687b      	ldr	r3, [r7, #4]
 800a06c:	697a      	ldr	r2, [r7, #20]
 800a06e:	621a      	str	r2, [r3, #32]
}
 800a070:	bf00      	nop
 800a072:	371c      	adds	r7, #28
 800a074:	46bd      	mov	sp, r7
 800a076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a07a:	4770      	bx	lr
 800a07c:	fffeff8f 	.word	0xfffeff8f
 800a080:	40010000 	.word	0x40010000
 800a084:	40010400 	.word	0x40010400

0800a088 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a088:	b480      	push	{r7}
 800a08a:	b087      	sub	sp, #28
 800a08c:	af00      	add	r7, sp, #0
 800a08e:	6078      	str	r0, [r7, #4]
 800a090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	6a1b      	ldr	r3, [r3, #32]
 800a096:	f023 0210 	bic.w	r2, r3, #16
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a09e:	687b      	ldr	r3, [r7, #4]
 800a0a0:	6a1b      	ldr	r3, [r3, #32]
 800a0a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	685b      	ldr	r3, [r3, #4]
 800a0a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a0aa:	687b      	ldr	r3, [r7, #4]
 800a0ac:	699b      	ldr	r3, [r3, #24]
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a0b0:	68fa      	ldr	r2, [r7, #12]
 800a0b2:	4b2e      	ldr	r3, [pc, #184]	; (800a16c <TIM_OC2_SetConfig+0xe4>)
 800a0b4:	4013      	ands	r3, r2
 800a0b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0c0:	683b      	ldr	r3, [r7, #0]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	021b      	lsls	r3, r3, #8
 800a0c6:	68fa      	ldr	r2, [r7, #12]
 800a0c8:	4313      	orrs	r3, r2
 800a0ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a0cc:	697b      	ldr	r3, [r7, #20]
 800a0ce:	f023 0320 	bic.w	r3, r3, #32
 800a0d2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	689b      	ldr	r3, [r3, #8]
 800a0d8:	011b      	lsls	r3, r3, #4
 800a0da:	697a      	ldr	r2, [r7, #20]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	4a23      	ldr	r2, [pc, #140]	; (800a170 <TIM_OC2_SetConfig+0xe8>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d003      	beq.n	800a0f0 <TIM_OC2_SetConfig+0x68>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	4a22      	ldr	r2, [pc, #136]	; (800a174 <TIM_OC2_SetConfig+0xec>)
 800a0ec:	4293      	cmp	r3, r2
 800a0ee:	d10d      	bne.n	800a10c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a0f0:	697b      	ldr	r3, [r7, #20]
 800a0f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a0f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a0f8:	683b      	ldr	r3, [r7, #0]
 800a0fa:	68db      	ldr	r3, [r3, #12]
 800a0fc:	011b      	lsls	r3, r3, #4
 800a0fe:	697a      	ldr	r2, [r7, #20]
 800a100:	4313      	orrs	r3, r2
 800a102:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a104:	697b      	ldr	r3, [r7, #20]
 800a106:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a10a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	4a18      	ldr	r2, [pc, #96]	; (800a170 <TIM_OC2_SetConfig+0xe8>)
 800a110:	4293      	cmp	r3, r2
 800a112:	d003      	beq.n	800a11c <TIM_OC2_SetConfig+0x94>
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	4a17      	ldr	r2, [pc, #92]	; (800a174 <TIM_OC2_SetConfig+0xec>)
 800a118:	4293      	cmp	r3, r2
 800a11a:	d113      	bne.n	800a144 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a11c:	693b      	ldr	r3, [r7, #16]
 800a11e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a122:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a12a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	695b      	ldr	r3, [r3, #20]
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	693a      	ldr	r2, [r7, #16]
 800a134:	4313      	orrs	r3, r2
 800a136:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	699b      	ldr	r3, [r3, #24]
 800a13c:	009b      	lsls	r3, r3, #2
 800a13e:	693a      	ldr	r2, [r7, #16]
 800a140:	4313      	orrs	r3, r2
 800a142:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	693a      	ldr	r2, [r7, #16]
 800a148:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	68fa      	ldr	r2, [r7, #12]
 800a14e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	685a      	ldr	r2, [r3, #4]
 800a154:	687b      	ldr	r3, [r7, #4]
 800a156:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	697a      	ldr	r2, [r7, #20]
 800a15c:	621a      	str	r2, [r3, #32]
}
 800a15e:	bf00      	nop
 800a160:	371c      	adds	r7, #28
 800a162:	46bd      	mov	sp, r7
 800a164:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a168:	4770      	bx	lr
 800a16a:	bf00      	nop
 800a16c:	feff8fff 	.word	0xfeff8fff
 800a170:	40010000 	.word	0x40010000
 800a174:	40010400 	.word	0x40010400

0800a178 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a178:	b480      	push	{r7}
 800a17a:	b087      	sub	sp, #28
 800a17c:	af00      	add	r7, sp, #0
 800a17e:	6078      	str	r0, [r7, #4]
 800a180:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	6a1b      	ldr	r3, [r3, #32]
 800a186:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	6a1b      	ldr	r3, [r3, #32]
 800a192:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	685b      	ldr	r3, [r3, #4]
 800a198:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	69db      	ldr	r3, [r3, #28]
 800a19e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a1a0:	68fa      	ldr	r2, [r7, #12]
 800a1a2:	4b2d      	ldr	r3, [pc, #180]	; (800a258 <TIM_OC3_SetConfig+0xe0>)
 800a1a4:	4013      	ands	r3, r2
 800a1a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a1a8:	68fb      	ldr	r3, [r7, #12]
 800a1aa:	f023 0303 	bic.w	r3, r3, #3
 800a1ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a1b0:	683b      	ldr	r3, [r7, #0]
 800a1b2:	681b      	ldr	r3, [r3, #0]
 800a1b4:	68fa      	ldr	r2, [r7, #12]
 800a1b6:	4313      	orrs	r3, r2
 800a1b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a1c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a1c2:	683b      	ldr	r3, [r7, #0]
 800a1c4:	689b      	ldr	r3, [r3, #8]
 800a1c6:	021b      	lsls	r3, r3, #8
 800a1c8:	697a      	ldr	r2, [r7, #20]
 800a1ca:	4313      	orrs	r3, r2
 800a1cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	4a22      	ldr	r2, [pc, #136]	; (800a25c <TIM_OC3_SetConfig+0xe4>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d003      	beq.n	800a1de <TIM_OC3_SetConfig+0x66>
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	4a21      	ldr	r2, [pc, #132]	; (800a260 <TIM_OC3_SetConfig+0xe8>)
 800a1da:	4293      	cmp	r3, r2
 800a1dc:	d10d      	bne.n	800a1fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a1e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a1e6:	683b      	ldr	r3, [r7, #0]
 800a1e8:	68db      	ldr	r3, [r3, #12]
 800a1ea:	021b      	lsls	r3, r3, #8
 800a1ec:	697a      	ldr	r2, [r7, #20]
 800a1ee:	4313      	orrs	r3, r2
 800a1f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a1f2:	697b      	ldr	r3, [r7, #20]
 800a1f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a1f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	4a17      	ldr	r2, [pc, #92]	; (800a25c <TIM_OC3_SetConfig+0xe4>)
 800a1fe:	4293      	cmp	r3, r2
 800a200:	d003      	beq.n	800a20a <TIM_OC3_SetConfig+0x92>
 800a202:	687b      	ldr	r3, [r7, #4]
 800a204:	4a16      	ldr	r2, [pc, #88]	; (800a260 <TIM_OC3_SetConfig+0xe8>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d113      	bne.n	800a232 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a20a:	693b      	ldr	r3, [r7, #16]
 800a20c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a210:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a212:	693b      	ldr	r3, [r7, #16]
 800a214:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a218:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a21a:	683b      	ldr	r3, [r7, #0]
 800a21c:	695b      	ldr	r3, [r3, #20]
 800a21e:	011b      	lsls	r3, r3, #4
 800a220:	693a      	ldr	r2, [r7, #16]
 800a222:	4313      	orrs	r3, r2
 800a224:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a226:	683b      	ldr	r3, [r7, #0]
 800a228:	699b      	ldr	r3, [r3, #24]
 800a22a:	011b      	lsls	r3, r3, #4
 800a22c:	693a      	ldr	r2, [r7, #16]
 800a22e:	4313      	orrs	r3, r2
 800a230:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	693a      	ldr	r2, [r7, #16]
 800a236:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	68fa      	ldr	r2, [r7, #12]
 800a23c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a23e:	683b      	ldr	r3, [r7, #0]
 800a240:	685a      	ldr	r2, [r3, #4]
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a246:	687b      	ldr	r3, [r7, #4]
 800a248:	697a      	ldr	r2, [r7, #20]
 800a24a:	621a      	str	r2, [r3, #32]
}
 800a24c:	bf00      	nop
 800a24e:	371c      	adds	r7, #28
 800a250:	46bd      	mov	sp, r7
 800a252:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a256:	4770      	bx	lr
 800a258:	fffeff8f 	.word	0xfffeff8f
 800a25c:	40010000 	.word	0x40010000
 800a260:	40010400 	.word	0x40010400

0800a264 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a264:	b480      	push	{r7}
 800a266:	b087      	sub	sp, #28
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	6a1b      	ldr	r3, [r3, #32]
 800a272:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a1b      	ldr	r3, [r3, #32]
 800a27e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	685b      	ldr	r3, [r3, #4]
 800a284:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a286:	687b      	ldr	r3, [r7, #4]
 800a288:	69db      	ldr	r3, [r3, #28]
 800a28a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	4b1e      	ldr	r3, [pc, #120]	; (800a308 <TIM_OC4_SetConfig+0xa4>)
 800a290:	4013      	ands	r3, r2
 800a292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a29a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a29c:	683b      	ldr	r3, [r7, #0]
 800a29e:	681b      	ldr	r3, [r3, #0]
 800a2a0:	021b      	lsls	r3, r3, #8
 800a2a2:	68fa      	ldr	r2, [r7, #12]
 800a2a4:	4313      	orrs	r3, r2
 800a2a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a2a8:	693b      	ldr	r3, [r7, #16]
 800a2aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a2ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a2b0:	683b      	ldr	r3, [r7, #0]
 800a2b2:	689b      	ldr	r3, [r3, #8]
 800a2b4:	031b      	lsls	r3, r3, #12
 800a2b6:	693a      	ldr	r2, [r7, #16]
 800a2b8:	4313      	orrs	r3, r2
 800a2ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	4a13      	ldr	r2, [pc, #76]	; (800a30c <TIM_OC4_SetConfig+0xa8>)
 800a2c0:	4293      	cmp	r3, r2
 800a2c2:	d003      	beq.n	800a2cc <TIM_OC4_SetConfig+0x68>
 800a2c4:	687b      	ldr	r3, [r7, #4]
 800a2c6:	4a12      	ldr	r2, [pc, #72]	; (800a310 <TIM_OC4_SetConfig+0xac>)
 800a2c8:	4293      	cmp	r3, r2
 800a2ca:	d109      	bne.n	800a2e0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a2cc:	697b      	ldr	r3, [r7, #20]
 800a2ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a2d2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	695b      	ldr	r3, [r3, #20]
 800a2d8:	019b      	lsls	r3, r3, #6
 800a2da:	697a      	ldr	r2, [r7, #20]
 800a2dc:	4313      	orrs	r3, r2
 800a2de:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	697a      	ldr	r2, [r7, #20]
 800a2e4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	68fa      	ldr	r2, [r7, #12]
 800a2ea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	685a      	ldr	r2, [r3, #4]
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	693a      	ldr	r2, [r7, #16]
 800a2f8:	621a      	str	r2, [r3, #32]
}
 800a2fa:	bf00      	nop
 800a2fc:	371c      	adds	r7, #28
 800a2fe:	46bd      	mov	sp, r7
 800a300:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a304:	4770      	bx	lr
 800a306:	bf00      	nop
 800a308:	feff8fff 	.word	0xfeff8fff
 800a30c:	40010000 	.word	0x40010000
 800a310:	40010400 	.word	0x40010400

0800a314 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a314:	b480      	push	{r7}
 800a316:	b087      	sub	sp, #28
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	6a1b      	ldr	r3, [r3, #32]
 800a322:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	6a1b      	ldr	r3, [r3, #32]
 800a32e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a33a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4b1b      	ldr	r3, [pc, #108]	; (800a3ac <TIM_OC5_SetConfig+0x98>)
 800a340:	4013      	ands	r3, r2
 800a342:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	68fa      	ldr	r2, [r7, #12]
 800a34a:	4313      	orrs	r3, r2
 800a34c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a34e:	693b      	ldr	r3, [r7, #16]
 800a350:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a354:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	689b      	ldr	r3, [r3, #8]
 800a35a:	041b      	lsls	r3, r3, #16
 800a35c:	693a      	ldr	r2, [r7, #16]
 800a35e:	4313      	orrs	r3, r2
 800a360:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	4a12      	ldr	r2, [pc, #72]	; (800a3b0 <TIM_OC5_SetConfig+0x9c>)
 800a366:	4293      	cmp	r3, r2
 800a368:	d003      	beq.n	800a372 <TIM_OC5_SetConfig+0x5e>
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	4a11      	ldr	r2, [pc, #68]	; (800a3b4 <TIM_OC5_SetConfig+0xa0>)
 800a36e:	4293      	cmp	r3, r2
 800a370:	d109      	bne.n	800a386 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a372:	697b      	ldr	r3, [r7, #20]
 800a374:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a378:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a37a:	683b      	ldr	r3, [r7, #0]
 800a37c:	695b      	ldr	r3, [r3, #20]
 800a37e:	021b      	lsls	r3, r3, #8
 800a380:	697a      	ldr	r2, [r7, #20]
 800a382:	4313      	orrs	r3, r2
 800a384:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	697a      	ldr	r2, [r7, #20]
 800a38a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	68fa      	ldr	r2, [r7, #12]
 800a390:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a392:	683b      	ldr	r3, [r7, #0]
 800a394:	685a      	ldr	r2, [r3, #4]
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	693a      	ldr	r2, [r7, #16]
 800a39e:	621a      	str	r2, [r3, #32]
}
 800a3a0:	bf00      	nop
 800a3a2:	371c      	adds	r7, #28
 800a3a4:	46bd      	mov	sp, r7
 800a3a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3aa:	4770      	bx	lr
 800a3ac:	fffeff8f 	.word	0xfffeff8f
 800a3b0:	40010000 	.word	0x40010000
 800a3b4:	40010400 	.word	0x40010400

0800a3b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a3b8:	b480      	push	{r7}
 800a3ba:	b087      	sub	sp, #28
 800a3bc:	af00      	add	r7, sp, #0
 800a3be:	6078      	str	r0, [r7, #4]
 800a3c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	6a1b      	ldr	r3, [r3, #32]
 800a3c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a3ce:	687b      	ldr	r3, [r7, #4]
 800a3d0:	6a1b      	ldr	r3, [r3, #32]
 800a3d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	685b      	ldr	r3, [r3, #4]
 800a3d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a3da:	687b      	ldr	r3, [r7, #4]
 800a3dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a3e0:	68fa      	ldr	r2, [r7, #12]
 800a3e2:	4b1c      	ldr	r3, [pc, #112]	; (800a454 <TIM_OC6_SetConfig+0x9c>)
 800a3e4:	4013      	ands	r3, r2
 800a3e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	021b      	lsls	r3, r3, #8
 800a3ee:	68fa      	ldr	r2, [r7, #12]
 800a3f0:	4313      	orrs	r3, r2
 800a3f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a3f4:	693b      	ldr	r3, [r7, #16]
 800a3f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a3fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	689b      	ldr	r3, [r3, #8]
 800a400:	051b      	lsls	r3, r3, #20
 800a402:	693a      	ldr	r2, [r7, #16]
 800a404:	4313      	orrs	r3, r2
 800a406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	4a13      	ldr	r2, [pc, #76]	; (800a458 <TIM_OC6_SetConfig+0xa0>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d003      	beq.n	800a418 <TIM_OC6_SetConfig+0x60>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	4a12      	ldr	r2, [pc, #72]	; (800a45c <TIM_OC6_SetConfig+0xa4>)
 800a414:	4293      	cmp	r3, r2
 800a416:	d109      	bne.n	800a42c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a418:	697b      	ldr	r3, [r7, #20]
 800a41a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a41e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	695b      	ldr	r3, [r3, #20]
 800a424:	029b      	lsls	r3, r3, #10
 800a426:	697a      	ldr	r2, [r7, #20]
 800a428:	4313      	orrs	r3, r2
 800a42a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a42c:	687b      	ldr	r3, [r7, #4]
 800a42e:	697a      	ldr	r2, [r7, #20]
 800a430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	68fa      	ldr	r2, [r7, #12]
 800a436:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a438:	683b      	ldr	r3, [r7, #0]
 800a43a:	685a      	ldr	r2, [r3, #4]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	693a      	ldr	r2, [r7, #16]
 800a444:	621a      	str	r2, [r3, #32]
}
 800a446:	bf00      	nop
 800a448:	371c      	adds	r7, #28
 800a44a:	46bd      	mov	sp, r7
 800a44c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a450:	4770      	bx	lr
 800a452:	bf00      	nop
 800a454:	feff8fff 	.word	0xfeff8fff
 800a458:	40010000 	.word	0x40010000
 800a45c:	40010400 	.word	0x40010400

0800a460 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	681b      	ldr	r3, [r3, #0]
 800a46e:	689b      	ldr	r3, [r3, #8]
 800a470:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a478:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a47a:	683b      	ldr	r3, [r7, #0]
 800a47c:	685b      	ldr	r3, [r3, #4]
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	4313      	orrs	r3, r2
 800a482:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a484:	697a      	ldr	r2, [r7, #20]
 800a486:	4b39      	ldr	r3, [pc, #228]	; (800a56c <TIM_SlaveTimer_SetConfig+0x10c>)
 800a488:	4013      	ands	r3, r2
 800a48a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	681b      	ldr	r3, [r3, #0]
 800a490:	697a      	ldr	r2, [r7, #20]
 800a492:	4313      	orrs	r3, r2
 800a494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a496:	687b      	ldr	r3, [r7, #4]
 800a498:	681b      	ldr	r3, [r3, #0]
 800a49a:	697a      	ldr	r2, [r7, #20]
 800a49c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a49e:	683b      	ldr	r3, [r7, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	2b30      	cmp	r3, #48	; 0x30
 800a4a4:	d05c      	beq.n	800a560 <TIM_SlaveTimer_SetConfig+0x100>
 800a4a6:	2b30      	cmp	r3, #48	; 0x30
 800a4a8:	d806      	bhi.n	800a4b8 <TIM_SlaveTimer_SetConfig+0x58>
 800a4aa:	2b10      	cmp	r3, #16
 800a4ac:	d058      	beq.n	800a560 <TIM_SlaveTimer_SetConfig+0x100>
 800a4ae:	2b20      	cmp	r3, #32
 800a4b0:	d056      	beq.n	800a560 <TIM_SlaveTimer_SetConfig+0x100>
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d054      	beq.n	800a560 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a4b6:	e054      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a4b8:	2b50      	cmp	r3, #80	; 0x50
 800a4ba:	d03d      	beq.n	800a538 <TIM_SlaveTimer_SetConfig+0xd8>
 800a4bc:	2b50      	cmp	r3, #80	; 0x50
 800a4be:	d802      	bhi.n	800a4c6 <TIM_SlaveTimer_SetConfig+0x66>
 800a4c0:	2b40      	cmp	r3, #64	; 0x40
 800a4c2:	d010      	beq.n	800a4e6 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a4c4:	e04d      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a4c6:	2b60      	cmp	r3, #96	; 0x60
 800a4c8:	d040      	beq.n	800a54c <TIM_SlaveTimer_SetConfig+0xec>
 800a4ca:	2b70      	cmp	r3, #112	; 0x70
 800a4cc:	d000      	beq.n	800a4d0 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a4ce:	e048      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	6818      	ldr	r0, [r3, #0]
 800a4d4:	683b      	ldr	r3, [r7, #0]
 800a4d6:	68d9      	ldr	r1, [r3, #12]
 800a4d8:	683b      	ldr	r3, [r7, #0]
 800a4da:	689a      	ldr	r2, [r3, #8]
 800a4dc:	683b      	ldr	r3, [r7, #0]
 800a4de:	691b      	ldr	r3, [r3, #16]
 800a4e0:	f000 f8c0 	bl	800a664 <TIM_ETR_SetConfig>
      break;
 800a4e4:	e03d      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a4e6:	683b      	ldr	r3, [r7, #0]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	2b05      	cmp	r3, #5
 800a4ec:	d101      	bne.n	800a4f2 <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	e038      	b.n	800a564 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	6a1b      	ldr	r3, [r3, #32]
 800a4f8:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	6a1a      	ldr	r2, [r3, #32]
 800a500:	687b      	ldr	r3, [r7, #4]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	f022 0201 	bic.w	r2, r2, #1
 800a508:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	699b      	ldr	r3, [r3, #24]
 800a510:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a512:	68fb      	ldr	r3, [r7, #12]
 800a514:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a518:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	691b      	ldr	r3, [r3, #16]
 800a51e:	011b      	lsls	r3, r3, #4
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	4313      	orrs	r3, r2
 800a524:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	68fa      	ldr	r2, [r7, #12]
 800a52c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	693a      	ldr	r2, [r7, #16]
 800a534:	621a      	str	r2, [r3, #32]
      break;
 800a536:	e014      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	6818      	ldr	r0, [r3, #0]
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	6899      	ldr	r1, [r3, #8]
 800a540:	683b      	ldr	r3, [r7, #0]
 800a542:	691b      	ldr	r3, [r3, #16]
 800a544:	461a      	mov	r2, r3
 800a546:	f000 f813 	bl	800a570 <TIM_TI1_ConfigInputStage>
      break;
 800a54a:	e00a      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6818      	ldr	r0, [r3, #0]
 800a550:	683b      	ldr	r3, [r7, #0]
 800a552:	6899      	ldr	r1, [r3, #8]
 800a554:	683b      	ldr	r3, [r7, #0]
 800a556:	691b      	ldr	r3, [r3, #16]
 800a558:	461a      	mov	r2, r3
 800a55a:	f000 f838 	bl	800a5ce <TIM_TI2_ConfigInputStage>
      break;
 800a55e:	e000      	b.n	800a562 <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a560:	bf00      	nop
  }
  return HAL_OK;
 800a562:	2300      	movs	r3, #0
}
 800a564:	4618      	mov	r0, r3
 800a566:	3718      	adds	r7, #24
 800a568:	46bd      	mov	sp, r7
 800a56a:	bd80      	pop	{r7, pc}
 800a56c:	fffefff8 	.word	0xfffefff8

0800a570 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a570:	b480      	push	{r7}
 800a572:	b087      	sub	sp, #28
 800a574:	af00      	add	r7, sp, #0
 800a576:	60f8      	str	r0, [r7, #12]
 800a578:	60b9      	str	r1, [r7, #8]
 800a57a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a57c:	68fb      	ldr	r3, [r7, #12]
 800a57e:	6a1b      	ldr	r3, [r3, #32]
 800a580:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	6a1b      	ldr	r3, [r3, #32]
 800a586:	f023 0201 	bic.w	r2, r3, #1
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a58e:	68fb      	ldr	r3, [r7, #12]
 800a590:	699b      	ldr	r3, [r3, #24]
 800a592:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a594:	693b      	ldr	r3, [r7, #16]
 800a596:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a59a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	011b      	lsls	r3, r3, #4
 800a5a0:	693a      	ldr	r2, [r7, #16]
 800a5a2:	4313      	orrs	r3, r2
 800a5a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a5a6:	697b      	ldr	r3, [r7, #20]
 800a5a8:	f023 030a 	bic.w	r3, r3, #10
 800a5ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a5ae:	697a      	ldr	r2, [r7, #20]
 800a5b0:	68bb      	ldr	r3, [r7, #8]
 800a5b2:	4313      	orrs	r3, r2
 800a5b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	693a      	ldr	r2, [r7, #16]
 800a5ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	697a      	ldr	r2, [r7, #20]
 800a5c0:	621a      	str	r2, [r3, #32]
}
 800a5c2:	bf00      	nop
 800a5c4:	371c      	adds	r7, #28
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr

0800a5ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a5ce:	b480      	push	{r7}
 800a5d0:	b087      	sub	sp, #28
 800a5d2:	af00      	add	r7, sp, #0
 800a5d4:	60f8      	str	r0, [r7, #12]
 800a5d6:	60b9      	str	r1, [r7, #8]
 800a5d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	6a1b      	ldr	r3, [r3, #32]
 800a5de:	f023 0210 	bic.w	r2, r3, #16
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a5e6:	68fb      	ldr	r3, [r7, #12]
 800a5e8:	699b      	ldr	r3, [r3, #24]
 800a5ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	6a1b      	ldr	r3, [r3, #32]
 800a5f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a5f2:	697b      	ldr	r3, [r7, #20]
 800a5f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a5f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	031b      	lsls	r3, r3, #12
 800a5fe:	697a      	ldr	r2, [r7, #20]
 800a600:	4313      	orrs	r3, r2
 800a602:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a604:	693b      	ldr	r3, [r7, #16]
 800a606:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a60a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	011b      	lsls	r3, r3, #4
 800a610:	693a      	ldr	r2, [r7, #16]
 800a612:	4313      	orrs	r3, r2
 800a614:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	697a      	ldr	r2, [r7, #20]
 800a61a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a61c:	68fb      	ldr	r3, [r7, #12]
 800a61e:	693a      	ldr	r2, [r7, #16]
 800a620:	621a      	str	r2, [r3, #32]
}
 800a622:	bf00      	nop
 800a624:	371c      	adds	r7, #28
 800a626:	46bd      	mov	sp, r7
 800a628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a62c:	4770      	bx	lr

0800a62e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a62e:	b480      	push	{r7}
 800a630:	b085      	sub	sp, #20
 800a632:	af00      	add	r7, sp, #0
 800a634:	6078      	str	r0, [r7, #4]
 800a636:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a644:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a646:	683a      	ldr	r2, [r7, #0]
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	f043 0307 	orr.w	r3, r3, #7
 800a650:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	68fa      	ldr	r2, [r7, #12]
 800a656:	609a      	str	r2, [r3, #8]
}
 800a658:	bf00      	nop
 800a65a:	3714      	adds	r7, #20
 800a65c:	46bd      	mov	sp, r7
 800a65e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a662:	4770      	bx	lr

0800a664 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a664:	b480      	push	{r7}
 800a666:	b087      	sub	sp, #28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	60f8      	str	r0, [r7, #12]
 800a66c:	60b9      	str	r1, [r7, #8]
 800a66e:	607a      	str	r2, [r7, #4]
 800a670:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	689b      	ldr	r3, [r3, #8]
 800a676:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a678:	697b      	ldr	r3, [r7, #20]
 800a67a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a67e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a680:	683b      	ldr	r3, [r7, #0]
 800a682:	021a      	lsls	r2, r3, #8
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	431a      	orrs	r2, r3
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4313      	orrs	r3, r2
 800a68c:	697a      	ldr	r2, [r7, #20]
 800a68e:	4313      	orrs	r3, r2
 800a690:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	697a      	ldr	r2, [r7, #20]
 800a696:	609a      	str	r2, [r3, #8]
}
 800a698:	bf00      	nop
 800a69a:	371c      	adds	r7, #28
 800a69c:	46bd      	mov	sp, r7
 800a69e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6a2:	4770      	bx	lr

0800a6a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a6a4:	b480      	push	{r7}
 800a6a6:	b085      	sub	sp, #20
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
 800a6ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6b4:	2b01      	cmp	r3, #1
 800a6b6:	d101      	bne.n	800a6bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a6b8:	2302      	movs	r3, #2
 800a6ba:	e06d      	b.n	800a798 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	2201      	movs	r2, #1
 800a6c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	2202      	movs	r2, #2
 800a6c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	685b      	ldr	r3, [r3, #4]
 800a6d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	689b      	ldr	r3, [r3, #8]
 800a6da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	4a30      	ldr	r2, [pc, #192]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a6e2:	4293      	cmp	r3, r2
 800a6e4:	d004      	beq.n	800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	4a2f      	ldr	r2, [pc, #188]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6ec:	4293      	cmp	r3, r2
 800a6ee:	d108      	bne.n	800a702 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a6f0:	68fb      	ldr	r3, [r7, #12]
 800a6f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a6f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a6f8:	683b      	ldr	r3, [r7, #0]
 800a6fa:	685b      	ldr	r3, [r3, #4]
 800a6fc:	68fa      	ldr	r2, [r7, #12]
 800a6fe:	4313      	orrs	r3, r2
 800a700:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a708:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a70a:	683b      	ldr	r3, [r7, #0]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	68fa      	ldr	r2, [r7, #12]
 800a710:	4313      	orrs	r3, r2
 800a712:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a20      	ldr	r2, [pc, #128]	; (800a7a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d022      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a72e:	d01d      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a1d      	ldr	r2, [pc, #116]	; (800a7ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d018      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a1c      	ldr	r2, [pc, #112]	; (800a7b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d013      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a1a      	ldr	r2, [pc, #104]	; (800a7b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d00e      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a15      	ldr	r2, [pc, #84]	; (800a7a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d009      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a16      	ldr	r2, [pc, #88]	; (800a7b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d004      	beq.n	800a76c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a15      	ldr	r2, [pc, #84]	; (800a7bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d10c      	bne.n	800a786 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a76c:	68bb      	ldr	r3, [r7, #8]
 800a76e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a772:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a774:	683b      	ldr	r3, [r7, #0]
 800a776:	689b      	ldr	r3, [r3, #8]
 800a778:	68ba      	ldr	r2, [r7, #8]
 800a77a:	4313      	orrs	r3, r2
 800a77c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	68ba      	ldr	r2, [r7, #8]
 800a784:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	2201      	movs	r2, #1
 800a78a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	2200      	movs	r2, #0
 800a792:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a796:	2300      	movs	r3, #0
}
 800a798:	4618      	mov	r0, r3
 800a79a:	3714      	adds	r7, #20
 800a79c:	46bd      	mov	sp, r7
 800a79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7a2:	4770      	bx	lr
 800a7a4:	40010000 	.word	0x40010000
 800a7a8:	40010400 	.word	0x40010400
 800a7ac:	40000400 	.word	0x40000400
 800a7b0:	40000800 	.word	0x40000800
 800a7b4:	40000c00 	.word	0x40000c00
 800a7b8:	40014000 	.word	0x40014000
 800a7bc:	40001800 	.word	0x40001800

0800a7c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a7c0:	b480      	push	{r7}
 800a7c2:	b085      	sub	sp, #20
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]
 800a7c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a7ca:	2300      	movs	r3, #0
 800a7cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a7d4:	2b01      	cmp	r3, #1
 800a7d6:	d101      	bne.n	800a7dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a7d8:	2302      	movs	r3, #2
 800a7da:	e065      	b.n	800a8a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2201      	movs	r2, #1
 800a7e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a7ea:	683b      	ldr	r3, [r7, #0]
 800a7ec:	68db      	ldr	r3, [r3, #12]
 800a7ee:	4313      	orrs	r3, r2
 800a7f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	689b      	ldr	r3, [r3, #8]
 800a7fc:	4313      	orrs	r3, r2
 800a7fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	685b      	ldr	r3, [r3, #4]
 800a80a:	4313      	orrs	r3, r2
 800a80c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a80e:	68fb      	ldr	r3, [r7, #12]
 800a810:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a814:	683b      	ldr	r3, [r7, #0]
 800a816:	681b      	ldr	r3, [r3, #0]
 800a818:	4313      	orrs	r3, r2
 800a81a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a81c:	68fb      	ldr	r3, [r7, #12]
 800a81e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a822:	683b      	ldr	r3, [r7, #0]
 800a824:	691b      	ldr	r3, [r3, #16]
 800a826:	4313      	orrs	r3, r2
 800a828:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a830:	683b      	ldr	r3, [r7, #0]
 800a832:	695b      	ldr	r3, [r3, #20]
 800a834:	4313      	orrs	r3, r2
 800a836:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a83e:	683b      	ldr	r3, [r7, #0]
 800a840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a842:	4313      	orrs	r3, r2
 800a844:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a846:	68fb      	ldr	r3, [r7, #12]
 800a848:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a84c:	683b      	ldr	r3, [r7, #0]
 800a84e:	699b      	ldr	r3, [r3, #24]
 800a850:	041b      	lsls	r3, r3, #16
 800a852:	4313      	orrs	r3, r2
 800a854:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a16      	ldr	r2, [pc, #88]	; (800a8b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d004      	beq.n	800a86a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a14      	ldr	r2, [pc, #80]	; (800a8b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d115      	bne.n	800a896 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a86a:	68fb      	ldr	r3, [r7, #12]
 800a86c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a870:	683b      	ldr	r3, [r7, #0]
 800a872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a874:	051b      	lsls	r3, r3, #20
 800a876:	4313      	orrs	r3, r2
 800a878:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a87a:	68fb      	ldr	r3, [r7, #12]
 800a87c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a880:	683b      	ldr	r3, [r7, #0]
 800a882:	69db      	ldr	r3, [r3, #28]
 800a884:	4313      	orrs	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a888:	68fb      	ldr	r3, [r7, #12]
 800a88a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a88e:	683b      	ldr	r3, [r7, #0]
 800a890:	6a1b      	ldr	r3, [r3, #32]
 800a892:	4313      	orrs	r3, r2
 800a894:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	681b      	ldr	r3, [r3, #0]
 800a89a:	68fa      	ldr	r2, [r7, #12]
 800a89c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a89e:	687b      	ldr	r3, [r7, #4]
 800a8a0:	2200      	movs	r2, #0
 800a8a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8a6:	2300      	movs	r3, #0
}
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	3714      	adds	r7, #20
 800a8ac:	46bd      	mov	sp, r7
 800a8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8b2:	4770      	bx	lr
 800a8b4:	40010000 	.word	0x40010000
 800a8b8:	40010400 	.word	0x40010400

0800a8bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a8bc:	b480      	push	{r7}
 800a8be:	b083      	sub	sp, #12
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a8c4:	bf00      	nop
 800a8c6:	370c      	adds	r7, #12
 800a8c8:	46bd      	mov	sp, r7
 800a8ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ce:	4770      	bx	lr

0800a8d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b083      	sub	sp, #12
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a8d8:	bf00      	nop
 800a8da:	370c      	adds	r7, #12
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8e2:	4770      	bx	lr

0800a8e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a8e4:	b480      	push	{r7}
 800a8e6:	b083      	sub	sp, #12
 800a8e8:	af00      	add	r7, sp, #0
 800a8ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a8ec:	bf00      	nop
 800a8ee:	370c      	adds	r7, #12
 800a8f0:	46bd      	mov	sp, r7
 800a8f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8f6:	4770      	bx	lr

0800a8f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b082      	sub	sp, #8
 800a8fc:	af00      	add	r7, sp, #0
 800a8fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	2b00      	cmp	r3, #0
 800a904:	d101      	bne.n	800a90a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a906:	2301      	movs	r3, #1
 800a908:	e040      	b.n	800a98c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d106      	bne.n	800a920 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a912:	687b      	ldr	r3, [r7, #4]
 800a914:	2200      	movs	r2, #0
 800a916:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a91a:	6878      	ldr	r0, [r7, #4]
 800a91c:	f7f9 ff6a 	bl	80047f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2224      	movs	r2, #36	; 0x24
 800a924:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	681a      	ldr	r2, [r3, #0]
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	f022 0201 	bic.w	r2, r2, #1
 800a934:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a936:	6878      	ldr	r0, [r7, #4]
 800a938:	f000 fa70 	bl	800ae1c <UART_SetConfig>
 800a93c:	4603      	mov	r3, r0
 800a93e:	2b01      	cmp	r3, #1
 800a940:	d101      	bne.n	800a946 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a942:	2301      	movs	r3, #1
 800a944:	e022      	b.n	800a98c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a946:	687b      	ldr	r3, [r7, #4]
 800a948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a94a:	2b00      	cmp	r3, #0
 800a94c:	d002      	beq.n	800a954 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f000 fd0e 	bl	800b370 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	685a      	ldr	r2, [r3, #4]
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a962:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	689a      	ldr	r2, [r3, #8]
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a972:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	f042 0201 	orr.w	r2, r2, #1
 800a982:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a984:	6878      	ldr	r0, [r7, #4]
 800a986:	f000 fd95 	bl	800b4b4 <UART_CheckIdleState>
 800a98a:	4603      	mov	r3, r0
}
 800a98c:	4618      	mov	r0, r3
 800a98e:	3708      	adds	r7, #8
 800a990:	46bd      	mov	sp, r7
 800a992:	bd80      	pop	{r7, pc}

0800a994 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a994:	b480      	push	{r7}
 800a996:	b085      	sub	sp, #20
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	4613      	mov	r3, r2
 800a9a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a9a6:	2b20      	cmp	r3, #32
 800a9a8:	d144      	bne.n	800aa34 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9aa:	68bb      	ldr	r3, [r7, #8]
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d002      	beq.n	800a9b6 <HAL_UART_Transmit_IT+0x22>
 800a9b0:	88fb      	ldrh	r3, [r7, #6]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d101      	bne.n	800a9ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e03d      	b.n	800aa36 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a9c0:	2b01      	cmp	r3, #1
 800a9c2:	d101      	bne.n	800a9c8 <HAL_UART_Transmit_IT+0x34>
 800a9c4:	2302      	movs	r3, #2
 800a9c6:	e036      	b.n	800aa36 <HAL_UART_Transmit_IT+0xa2>
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	2201      	movs	r2, #1
 800a9cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a9d0:	68fb      	ldr	r3, [r7, #12]
 800a9d2:	68ba      	ldr	r2, [r7, #8]
 800a9d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	88fa      	ldrh	r2, [r7, #6]
 800a9da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	88fa      	ldrh	r2, [r7, #6]
 800a9e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	2221      	movs	r2, #33	; 0x21
 800a9f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	689b      	ldr	r3, [r3, #8]
 800a9fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa00:	d107      	bne.n	800aa12 <HAL_UART_Transmit_IT+0x7e>
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	691b      	ldr	r3, [r3, #16]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d103      	bne.n	800aa12 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	4a0d      	ldr	r2, [pc, #52]	; (800aa44 <HAL_UART_Transmit_IT+0xb0>)
 800aa0e:	665a      	str	r2, [r3, #100]	; 0x64
 800aa10:	e002      	b.n	800aa18 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	4a0c      	ldr	r2, [pc, #48]	; (800aa48 <HAL_UART_Transmit_IT+0xb4>)
 800aa16:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	2200      	movs	r2, #0
 800aa1c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800aa2e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800aa30:	2300      	movs	r3, #0
 800aa32:	e000      	b.n	800aa36 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800aa34:	2302      	movs	r3, #2
  }
}
 800aa36:	4618      	mov	r0, r3
 800aa38:	3714      	adds	r7, #20
 800aa3a:	46bd      	mov	sp, r7
 800aa3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa40:	4770      	bx	lr
 800aa42:	bf00      	nop
 800aa44:	0800b6e7 	.word	0x0800b6e7
 800aa48:	0800b675 	.word	0x0800b675

0800aa4c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800aa4c:	b480      	push	{r7}
 800aa4e:	b085      	sub	sp, #20
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aa5e:	2b20      	cmp	r3, #32
 800aa60:	f040 808a 	bne.w	800ab78 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <HAL_UART_Receive_IT+0x24>
 800aa6a:	88fb      	ldrh	r3, [r7, #6]
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d101      	bne.n	800aa74 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800aa70:	2301      	movs	r3, #1
 800aa72:	e082      	b.n	800ab7a <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800aa7a:	2b01      	cmp	r3, #1
 800aa7c:	d101      	bne.n	800aa82 <HAL_UART_Receive_IT+0x36>
 800aa7e:	2302      	movs	r3, #2
 800aa80:	e07b      	b.n	800ab7a <HAL_UART_Receive_IT+0x12e>
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	2201      	movs	r2, #1
 800aa86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	68ba      	ldr	r2, [r7, #8]
 800aa8e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	88fa      	ldrh	r2, [r7, #6]
 800aa94:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800aa98:	68fb      	ldr	r3, [r7, #12]
 800aa9a:	88fa      	ldrh	r2, [r7, #6]
 800aa9c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	689b      	ldr	r3, [r3, #8]
 800aaaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aaae:	d10e      	bne.n	800aace <HAL_UART_Receive_IT+0x82>
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	691b      	ldr	r3, [r3, #16]
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d105      	bne.n	800aac4 <HAL_UART_Receive_IT+0x78>
 800aab8:	68fb      	ldr	r3, [r7, #12]
 800aaba:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aabe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aac2:	e02d      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800aac4:	68fb      	ldr	r3, [r7, #12]
 800aac6:	22ff      	movs	r2, #255	; 0xff
 800aac8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aacc:	e028      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	689b      	ldr	r3, [r3, #8]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d10d      	bne.n	800aaf2 <HAL_UART_Receive_IT+0xa6>
 800aad6:	68fb      	ldr	r3, [r7, #12]
 800aad8:	691b      	ldr	r3, [r3, #16]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d104      	bne.n	800aae8 <HAL_UART_Receive_IT+0x9c>
 800aade:	68fb      	ldr	r3, [r7, #12]
 800aae0:	22ff      	movs	r2, #255	; 0xff
 800aae2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aae6:	e01b      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	227f      	movs	r2, #127	; 0x7f
 800aaec:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aaf0:	e016      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800aaf2:	68fb      	ldr	r3, [r7, #12]
 800aaf4:	689b      	ldr	r3, [r3, #8]
 800aaf6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aafa:	d10d      	bne.n	800ab18 <HAL_UART_Receive_IT+0xcc>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	691b      	ldr	r3, [r3, #16]
 800ab00:	2b00      	cmp	r3, #0
 800ab02:	d104      	bne.n	800ab0e <HAL_UART_Receive_IT+0xc2>
 800ab04:	68fb      	ldr	r3, [r7, #12]
 800ab06:	227f      	movs	r2, #127	; 0x7f
 800ab08:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab0c:	e008      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	223f      	movs	r2, #63	; 0x3f
 800ab12:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800ab16:	e003      	b.n	800ab20 <HAL_UART_Receive_IT+0xd4>
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	2200      	movs	r2, #0
 800ab1c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	2200      	movs	r2, #0
 800ab24:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ab26:	68fb      	ldr	r3, [r7, #12]
 800ab28:	2222      	movs	r2, #34	; 0x22
 800ab2a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	689a      	ldr	r2, [r3, #8]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	f042 0201 	orr.w	r2, r2, #1
 800ab3a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800ab3c:	68fb      	ldr	r3, [r7, #12]
 800ab3e:	689b      	ldr	r3, [r3, #8]
 800ab40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab44:	d107      	bne.n	800ab56 <HAL_UART_Receive_IT+0x10a>
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	691b      	ldr	r3, [r3, #16]
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d103      	bne.n	800ab56 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	4a0d      	ldr	r2, [pc, #52]	; (800ab88 <HAL_UART_Receive_IT+0x13c>)
 800ab52:	661a      	str	r2, [r3, #96]	; 0x60
 800ab54:	e002      	b.n	800ab5c <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800ab56:	68fb      	ldr	r3, [r7, #12]
 800ab58:	4a0c      	ldr	r2, [pc, #48]	; (800ab8c <HAL_UART_Receive_IT+0x140>)
 800ab5a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	2200      	movs	r2, #0
 800ab60:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	681b      	ldr	r3, [r3, #0]
 800ab6e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800ab72:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800ab74:	2300      	movs	r3, #0
 800ab76:	e000      	b.n	800ab7a <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800ab78:	2302      	movs	r3, #2
  }
}
 800ab7a:	4618      	mov	r0, r3
 800ab7c:	3714      	adds	r7, #20
 800ab7e:	46bd      	mov	sp, r7
 800ab80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab84:	4770      	bx	lr
 800ab86:	bf00      	nop
 800ab88:	0800b83b 	.word	0x0800b83b
 800ab8c:	0800b795 	.word	0x0800b795

0800ab90 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b088      	sub	sp, #32
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	681b      	ldr	r3, [r3, #0]
 800ab9c:	69db      	ldr	r3, [r3, #28]
 800ab9e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	681b      	ldr	r3, [r3, #0]
 800aba6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	689b      	ldr	r3, [r3, #8]
 800abae:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800abb0:	69fa      	ldr	r2, [r7, #28]
 800abb2:	f640 030f 	movw	r3, #2063	; 0x80f
 800abb6:	4013      	ands	r3, r2
 800abb8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800abba:	693b      	ldr	r3, [r7, #16]
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d113      	bne.n	800abe8 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800abc0:	69fb      	ldr	r3, [r7, #28]
 800abc2:	f003 0320 	and.w	r3, r3, #32
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d00e      	beq.n	800abe8 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800abca:	69bb      	ldr	r3, [r7, #24]
 800abcc:	f003 0320 	and.w	r3, r3, #32
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d009      	beq.n	800abe8 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abd8:	2b00      	cmp	r3, #0
 800abda:	f000 8100 	beq.w	800adde <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe2:	6878      	ldr	r0, [r7, #4]
 800abe4:	4798      	blx	r3
      }
      return;
 800abe6:	e0fa      	b.n	800adde <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800abe8:	693b      	ldr	r3, [r7, #16]
 800abea:	2b00      	cmp	r3, #0
 800abec:	f000 80d5 	beq.w	800ad9a <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800abf0:	697b      	ldr	r3, [r7, #20]
 800abf2:	f003 0301 	and.w	r3, r3, #1
 800abf6:	2b00      	cmp	r3, #0
 800abf8:	d105      	bne.n	800ac06 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800abfa:	69bb      	ldr	r3, [r7, #24]
 800abfc:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ac00:	2b00      	cmp	r3, #0
 800ac02:	f000 80ca 	beq.w	800ad9a <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ac06:	69fb      	ldr	r3, [r7, #28]
 800ac08:	f003 0301 	and.w	r3, r3, #1
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00e      	beq.n	800ac2e <HAL_UART_IRQHandler+0x9e>
 800ac10:	69bb      	ldr	r3, [r7, #24]
 800ac12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ac16:	2b00      	cmp	r3, #0
 800ac18:	d009      	beq.n	800ac2e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	2201      	movs	r2, #1
 800ac20:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac26:	f043 0201 	orr.w	r2, r3, #1
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f003 0302 	and.w	r3, r3, #2
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00e      	beq.n	800ac56 <HAL_UART_IRQHandler+0xc6>
 800ac38:	697b      	ldr	r3, [r7, #20]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d009      	beq.n	800ac56 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	2202      	movs	r2, #2
 800ac48:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac4e:	f043 0204 	orr.w	r2, r3, #4
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ac56:	69fb      	ldr	r3, [r7, #28]
 800ac58:	f003 0304 	and.w	r3, r3, #4
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d00e      	beq.n	800ac7e <HAL_UART_IRQHandler+0xee>
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f003 0301 	and.w	r3, r3, #1
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d009      	beq.n	800ac7e <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	681b      	ldr	r3, [r3, #0]
 800ac6e:	2204      	movs	r2, #4
 800ac70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac76:	f043 0202 	orr.w	r2, r3, #2
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800ac7e:	69fb      	ldr	r3, [r7, #28]
 800ac80:	f003 0308 	and.w	r3, r3, #8
 800ac84:	2b00      	cmp	r3, #0
 800ac86:	d013      	beq.n	800acb0 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac88:	69bb      	ldr	r3, [r7, #24]
 800ac8a:	f003 0320 	and.w	r3, r3, #32
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d104      	bne.n	800ac9c <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800ac92:	697b      	ldr	r3, [r7, #20]
 800ac94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d009      	beq.n	800acb0 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	2208      	movs	r2, #8
 800aca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aca8:	f043 0208 	orr.w	r2, r3, #8
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800acb0:	69fb      	ldr	r3, [r7, #28]
 800acb2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800acb6:	2b00      	cmp	r3, #0
 800acb8:	d00f      	beq.n	800acda <HAL_UART_IRQHandler+0x14a>
 800acba:	69bb      	ldr	r3, [r7, #24]
 800acbc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d00a      	beq.n	800acda <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800acc4:	687b      	ldr	r3, [r7, #4]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800accc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acd2:	f043 0220 	orr.w	r2, r3, #32
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d07f      	beq.n	800ade2 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ace2:	69fb      	ldr	r3, [r7, #28]
 800ace4:	f003 0320 	and.w	r3, r3, #32
 800ace8:	2b00      	cmp	r3, #0
 800acea:	d00c      	beq.n	800ad06 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	f003 0320 	and.w	r3, r3, #32
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	d007      	beq.n	800ad06 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800acf6:	687b      	ldr	r3, [r7, #4]
 800acf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800acfa:	2b00      	cmp	r3, #0
 800acfc:	d003      	beq.n	800ad06 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800acfe:	687b      	ldr	r3, [r7, #4]
 800ad00:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ad02:	6878      	ldr	r0, [r7, #4]
 800ad04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ad06:	687b      	ldr	r3, [r7, #4]
 800ad08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ad0a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	689b      	ldr	r3, [r3, #8]
 800ad12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad16:	2b40      	cmp	r3, #64	; 0x40
 800ad18:	d004      	beq.n	800ad24 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ad20:	2b00      	cmp	r3, #0
 800ad22:	d031      	beq.n	800ad88 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f000 fc6f 	bl	800b608 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	689b      	ldr	r3, [r3, #8]
 800ad30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad34:	2b40      	cmp	r3, #64	; 0x40
 800ad36:	d123      	bne.n	800ad80 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ad38:	687b      	ldr	r3, [r7, #4]
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	689a      	ldr	r2, [r3, #8]
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad46:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d013      	beq.n	800ad78 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad54:	4a26      	ldr	r2, [pc, #152]	; (800adf0 <HAL_UART_IRQHandler+0x260>)
 800ad56:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad5c:	4618      	mov	r0, r3
 800ad5e:	f7fa fe9b 	bl	8005a98 <HAL_DMA_Abort_IT>
 800ad62:	4603      	mov	r3, r0
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	d016      	beq.n	800ad96 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ad6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad6e:	687a      	ldr	r2, [r7, #4]
 800ad70:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800ad72:	4610      	mov	r0, r2
 800ad74:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad76:	e00e      	b.n	800ad96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800ad78:	6878      	ldr	r0, [r7, #4]
 800ad7a:	f000 f845 	bl	800ae08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad7e:	e00a      	b.n	800ad96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800ad80:	6878      	ldr	r0, [r7, #4]
 800ad82:	f000 f841 	bl	800ae08 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad86:	e006      	b.n	800ad96 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800ad88:	6878      	ldr	r0, [r7, #4]
 800ad8a:	f000 f83d 	bl	800ae08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	2200      	movs	r2, #0
 800ad92:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ad94:	e025      	b.n	800ade2 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ad96:	bf00      	nop
    return;
 800ad98:	e023      	b.n	800ade2 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ad9a:	69fb      	ldr	r3, [r7, #28]
 800ad9c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ada0:	2b00      	cmp	r3, #0
 800ada2:	d00d      	beq.n	800adc0 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800ada4:	69bb      	ldr	r3, [r7, #24]
 800ada6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d008      	beq.n	800adc0 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d017      	beq.n	800ade6 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800adba:	6878      	ldr	r0, [r7, #4]
 800adbc:	4798      	blx	r3
    }
    return;
 800adbe:	e012      	b.n	800ade6 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800adc0:	69fb      	ldr	r3, [r7, #28]
 800adc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d00e      	beq.n	800ade8 <HAL_UART_IRQHandler+0x258>
 800adca:	69bb      	ldr	r3, [r7, #24]
 800adcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add0:	2b00      	cmp	r3, #0
 800add2:	d009      	beq.n	800ade8 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800add4:	6878      	ldr	r0, [r7, #4]
 800add6:	f000 fcc4 	bl	800b762 <UART_EndTransmit_IT>
    return;
 800adda:	bf00      	nop
 800addc:	e004      	b.n	800ade8 <HAL_UART_IRQHandler+0x258>
      return;
 800adde:	bf00      	nop
 800ade0:	e002      	b.n	800ade8 <HAL_UART_IRQHandler+0x258>
    return;
 800ade2:	bf00      	nop
 800ade4:	e000      	b.n	800ade8 <HAL_UART_IRQHandler+0x258>
    return;
 800ade6:	bf00      	nop
  }

}
 800ade8:	3720      	adds	r7, #32
 800adea:	46bd      	mov	sp, r7
 800adec:	bd80      	pop	{r7, pc}
 800adee:	bf00      	nop
 800adf0:	0800b649 	.word	0x0800b649

0800adf4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800adf4:	b480      	push	{r7}
 800adf6:	b083      	sub	sp, #12
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800adfc:	bf00      	nop
 800adfe:	370c      	adds	r7, #12
 800ae00:	46bd      	mov	sp, r7
 800ae02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae06:	4770      	bx	lr

0800ae08 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ae08:	b480      	push	{r7}
 800ae0a:	b083      	sub	sp, #12
 800ae0c:	af00      	add	r7, sp, #0
 800ae0e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ae10:	bf00      	nop
 800ae12:	370c      	adds	r7, #12
 800ae14:	46bd      	mov	sp, r7
 800ae16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae1a:	4770      	bx	lr

0800ae1c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ae1c:	b580      	push	{r7, lr}
 800ae1e:	b088      	sub	sp, #32
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ae24:	2300      	movs	r3, #0
 800ae26:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ae28:	2300      	movs	r3, #0
 800ae2a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	689a      	ldr	r2, [r3, #8]
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	431a      	orrs	r2, r3
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	695b      	ldr	r3, [r3, #20]
 800ae3a:	431a      	orrs	r2, r3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	69db      	ldr	r3, [r3, #28]
 800ae40:	4313      	orrs	r3, r2
 800ae42:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	681b      	ldr	r3, [r3, #0]
 800ae48:	681a      	ldr	r2, [r3, #0]
 800ae4a:	4bb1      	ldr	r3, [pc, #708]	; (800b110 <UART_SetConfig+0x2f4>)
 800ae4c:	4013      	ands	r3, r2
 800ae4e:	687a      	ldr	r2, [r7, #4]
 800ae50:	6812      	ldr	r2, [r2, #0]
 800ae52:	6939      	ldr	r1, [r7, #16]
 800ae54:	430b      	orrs	r3, r1
 800ae56:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ae58:	687b      	ldr	r3, [r7, #4]
 800ae5a:	681b      	ldr	r3, [r3, #0]
 800ae5c:	685b      	ldr	r3, [r3, #4]
 800ae5e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	430a      	orrs	r2, r1
 800ae6c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	699b      	ldr	r3, [r3, #24]
 800ae72:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	6a1b      	ldr	r3, [r3, #32]
 800ae78:	693a      	ldr	r2, [r7, #16]
 800ae7a:	4313      	orrs	r3, r2
 800ae7c:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	689b      	ldr	r3, [r3, #8]
 800ae84:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	681b      	ldr	r3, [r3, #0]
 800ae8c:	693a      	ldr	r2, [r7, #16]
 800ae8e:	430a      	orrs	r2, r1
 800ae90:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ae92:	687b      	ldr	r3, [r7, #4]
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a9f      	ldr	r2, [pc, #636]	; (800b114 <UART_SetConfig+0x2f8>)
 800ae98:	4293      	cmp	r3, r2
 800ae9a:	d121      	bne.n	800aee0 <UART_SetConfig+0xc4>
 800ae9c:	4b9e      	ldr	r3, [pc, #632]	; (800b118 <UART_SetConfig+0x2fc>)
 800ae9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aea2:	f003 0303 	and.w	r3, r3, #3
 800aea6:	2b03      	cmp	r3, #3
 800aea8:	d816      	bhi.n	800aed8 <UART_SetConfig+0xbc>
 800aeaa:	a201      	add	r2, pc, #4	; (adr r2, 800aeb0 <UART_SetConfig+0x94>)
 800aeac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aeb0:	0800aec1 	.word	0x0800aec1
 800aeb4:	0800aecd 	.word	0x0800aecd
 800aeb8:	0800aec7 	.word	0x0800aec7
 800aebc:	0800aed3 	.word	0x0800aed3
 800aec0:	2301      	movs	r3, #1
 800aec2:	77fb      	strb	r3, [r7, #31]
 800aec4:	e151      	b.n	800b16a <UART_SetConfig+0x34e>
 800aec6:	2302      	movs	r3, #2
 800aec8:	77fb      	strb	r3, [r7, #31]
 800aeca:	e14e      	b.n	800b16a <UART_SetConfig+0x34e>
 800aecc:	2304      	movs	r3, #4
 800aece:	77fb      	strb	r3, [r7, #31]
 800aed0:	e14b      	b.n	800b16a <UART_SetConfig+0x34e>
 800aed2:	2308      	movs	r3, #8
 800aed4:	77fb      	strb	r3, [r7, #31]
 800aed6:	e148      	b.n	800b16a <UART_SetConfig+0x34e>
 800aed8:	2310      	movs	r3, #16
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	bf00      	nop
 800aede:	e144      	b.n	800b16a <UART_SetConfig+0x34e>
 800aee0:	687b      	ldr	r3, [r7, #4]
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	4a8d      	ldr	r2, [pc, #564]	; (800b11c <UART_SetConfig+0x300>)
 800aee6:	4293      	cmp	r3, r2
 800aee8:	d134      	bne.n	800af54 <UART_SetConfig+0x138>
 800aeea:	4b8b      	ldr	r3, [pc, #556]	; (800b118 <UART_SetConfig+0x2fc>)
 800aeec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aef0:	f003 030c 	and.w	r3, r3, #12
 800aef4:	2b0c      	cmp	r3, #12
 800aef6:	d829      	bhi.n	800af4c <UART_SetConfig+0x130>
 800aef8:	a201      	add	r2, pc, #4	; (adr r2, 800af00 <UART_SetConfig+0xe4>)
 800aefa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aefe:	bf00      	nop
 800af00:	0800af35 	.word	0x0800af35
 800af04:	0800af4d 	.word	0x0800af4d
 800af08:	0800af4d 	.word	0x0800af4d
 800af0c:	0800af4d 	.word	0x0800af4d
 800af10:	0800af41 	.word	0x0800af41
 800af14:	0800af4d 	.word	0x0800af4d
 800af18:	0800af4d 	.word	0x0800af4d
 800af1c:	0800af4d 	.word	0x0800af4d
 800af20:	0800af3b 	.word	0x0800af3b
 800af24:	0800af4d 	.word	0x0800af4d
 800af28:	0800af4d 	.word	0x0800af4d
 800af2c:	0800af4d 	.word	0x0800af4d
 800af30:	0800af47 	.word	0x0800af47
 800af34:	2300      	movs	r3, #0
 800af36:	77fb      	strb	r3, [r7, #31]
 800af38:	e117      	b.n	800b16a <UART_SetConfig+0x34e>
 800af3a:	2302      	movs	r3, #2
 800af3c:	77fb      	strb	r3, [r7, #31]
 800af3e:	e114      	b.n	800b16a <UART_SetConfig+0x34e>
 800af40:	2304      	movs	r3, #4
 800af42:	77fb      	strb	r3, [r7, #31]
 800af44:	e111      	b.n	800b16a <UART_SetConfig+0x34e>
 800af46:	2308      	movs	r3, #8
 800af48:	77fb      	strb	r3, [r7, #31]
 800af4a:	e10e      	b.n	800b16a <UART_SetConfig+0x34e>
 800af4c:	2310      	movs	r3, #16
 800af4e:	77fb      	strb	r3, [r7, #31]
 800af50:	bf00      	nop
 800af52:	e10a      	b.n	800b16a <UART_SetConfig+0x34e>
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	4a71      	ldr	r2, [pc, #452]	; (800b120 <UART_SetConfig+0x304>)
 800af5a:	4293      	cmp	r3, r2
 800af5c:	d120      	bne.n	800afa0 <UART_SetConfig+0x184>
 800af5e:	4b6e      	ldr	r3, [pc, #440]	; (800b118 <UART_SetConfig+0x2fc>)
 800af60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af64:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800af68:	2b10      	cmp	r3, #16
 800af6a:	d00f      	beq.n	800af8c <UART_SetConfig+0x170>
 800af6c:	2b10      	cmp	r3, #16
 800af6e:	d802      	bhi.n	800af76 <UART_SetConfig+0x15a>
 800af70:	2b00      	cmp	r3, #0
 800af72:	d005      	beq.n	800af80 <UART_SetConfig+0x164>
 800af74:	e010      	b.n	800af98 <UART_SetConfig+0x17c>
 800af76:	2b20      	cmp	r3, #32
 800af78:	d005      	beq.n	800af86 <UART_SetConfig+0x16a>
 800af7a:	2b30      	cmp	r3, #48	; 0x30
 800af7c:	d009      	beq.n	800af92 <UART_SetConfig+0x176>
 800af7e:	e00b      	b.n	800af98 <UART_SetConfig+0x17c>
 800af80:	2300      	movs	r3, #0
 800af82:	77fb      	strb	r3, [r7, #31]
 800af84:	e0f1      	b.n	800b16a <UART_SetConfig+0x34e>
 800af86:	2302      	movs	r3, #2
 800af88:	77fb      	strb	r3, [r7, #31]
 800af8a:	e0ee      	b.n	800b16a <UART_SetConfig+0x34e>
 800af8c:	2304      	movs	r3, #4
 800af8e:	77fb      	strb	r3, [r7, #31]
 800af90:	e0eb      	b.n	800b16a <UART_SetConfig+0x34e>
 800af92:	2308      	movs	r3, #8
 800af94:	77fb      	strb	r3, [r7, #31]
 800af96:	e0e8      	b.n	800b16a <UART_SetConfig+0x34e>
 800af98:	2310      	movs	r3, #16
 800af9a:	77fb      	strb	r3, [r7, #31]
 800af9c:	bf00      	nop
 800af9e:	e0e4      	b.n	800b16a <UART_SetConfig+0x34e>
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	4a5f      	ldr	r2, [pc, #380]	; (800b124 <UART_SetConfig+0x308>)
 800afa6:	4293      	cmp	r3, r2
 800afa8:	d120      	bne.n	800afec <UART_SetConfig+0x1d0>
 800afaa:	4b5b      	ldr	r3, [pc, #364]	; (800b118 <UART_SetConfig+0x2fc>)
 800afac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800afb0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800afb4:	2b40      	cmp	r3, #64	; 0x40
 800afb6:	d00f      	beq.n	800afd8 <UART_SetConfig+0x1bc>
 800afb8:	2b40      	cmp	r3, #64	; 0x40
 800afba:	d802      	bhi.n	800afc2 <UART_SetConfig+0x1a6>
 800afbc:	2b00      	cmp	r3, #0
 800afbe:	d005      	beq.n	800afcc <UART_SetConfig+0x1b0>
 800afc0:	e010      	b.n	800afe4 <UART_SetConfig+0x1c8>
 800afc2:	2b80      	cmp	r3, #128	; 0x80
 800afc4:	d005      	beq.n	800afd2 <UART_SetConfig+0x1b6>
 800afc6:	2bc0      	cmp	r3, #192	; 0xc0
 800afc8:	d009      	beq.n	800afde <UART_SetConfig+0x1c2>
 800afca:	e00b      	b.n	800afe4 <UART_SetConfig+0x1c8>
 800afcc:	2300      	movs	r3, #0
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	e0cb      	b.n	800b16a <UART_SetConfig+0x34e>
 800afd2:	2302      	movs	r3, #2
 800afd4:	77fb      	strb	r3, [r7, #31]
 800afd6:	e0c8      	b.n	800b16a <UART_SetConfig+0x34e>
 800afd8:	2304      	movs	r3, #4
 800afda:	77fb      	strb	r3, [r7, #31]
 800afdc:	e0c5      	b.n	800b16a <UART_SetConfig+0x34e>
 800afde:	2308      	movs	r3, #8
 800afe0:	77fb      	strb	r3, [r7, #31]
 800afe2:	e0c2      	b.n	800b16a <UART_SetConfig+0x34e>
 800afe4:	2310      	movs	r3, #16
 800afe6:	77fb      	strb	r3, [r7, #31]
 800afe8:	bf00      	nop
 800afea:	e0be      	b.n	800b16a <UART_SetConfig+0x34e>
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	681b      	ldr	r3, [r3, #0]
 800aff0:	4a4d      	ldr	r2, [pc, #308]	; (800b128 <UART_SetConfig+0x30c>)
 800aff2:	4293      	cmp	r3, r2
 800aff4:	d124      	bne.n	800b040 <UART_SetConfig+0x224>
 800aff6:	4b48      	ldr	r3, [pc, #288]	; (800b118 <UART_SetConfig+0x2fc>)
 800aff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800affc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b004:	d012      	beq.n	800b02c <UART_SetConfig+0x210>
 800b006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b00a:	d802      	bhi.n	800b012 <UART_SetConfig+0x1f6>
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d007      	beq.n	800b020 <UART_SetConfig+0x204>
 800b010:	e012      	b.n	800b038 <UART_SetConfig+0x21c>
 800b012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b016:	d006      	beq.n	800b026 <UART_SetConfig+0x20a>
 800b018:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b01c:	d009      	beq.n	800b032 <UART_SetConfig+0x216>
 800b01e:	e00b      	b.n	800b038 <UART_SetConfig+0x21c>
 800b020:	2300      	movs	r3, #0
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	e0a1      	b.n	800b16a <UART_SetConfig+0x34e>
 800b026:	2302      	movs	r3, #2
 800b028:	77fb      	strb	r3, [r7, #31]
 800b02a:	e09e      	b.n	800b16a <UART_SetConfig+0x34e>
 800b02c:	2304      	movs	r3, #4
 800b02e:	77fb      	strb	r3, [r7, #31]
 800b030:	e09b      	b.n	800b16a <UART_SetConfig+0x34e>
 800b032:	2308      	movs	r3, #8
 800b034:	77fb      	strb	r3, [r7, #31]
 800b036:	e098      	b.n	800b16a <UART_SetConfig+0x34e>
 800b038:	2310      	movs	r3, #16
 800b03a:	77fb      	strb	r3, [r7, #31]
 800b03c:	bf00      	nop
 800b03e:	e094      	b.n	800b16a <UART_SetConfig+0x34e>
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	681b      	ldr	r3, [r3, #0]
 800b044:	4a39      	ldr	r2, [pc, #228]	; (800b12c <UART_SetConfig+0x310>)
 800b046:	4293      	cmp	r3, r2
 800b048:	d124      	bne.n	800b094 <UART_SetConfig+0x278>
 800b04a:	4b33      	ldr	r3, [pc, #204]	; (800b118 <UART_SetConfig+0x2fc>)
 800b04c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b050:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b054:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b058:	d012      	beq.n	800b080 <UART_SetConfig+0x264>
 800b05a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b05e:	d802      	bhi.n	800b066 <UART_SetConfig+0x24a>
 800b060:	2b00      	cmp	r3, #0
 800b062:	d007      	beq.n	800b074 <UART_SetConfig+0x258>
 800b064:	e012      	b.n	800b08c <UART_SetConfig+0x270>
 800b066:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b06a:	d006      	beq.n	800b07a <UART_SetConfig+0x25e>
 800b06c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b070:	d009      	beq.n	800b086 <UART_SetConfig+0x26a>
 800b072:	e00b      	b.n	800b08c <UART_SetConfig+0x270>
 800b074:	2301      	movs	r3, #1
 800b076:	77fb      	strb	r3, [r7, #31]
 800b078:	e077      	b.n	800b16a <UART_SetConfig+0x34e>
 800b07a:	2302      	movs	r3, #2
 800b07c:	77fb      	strb	r3, [r7, #31]
 800b07e:	e074      	b.n	800b16a <UART_SetConfig+0x34e>
 800b080:	2304      	movs	r3, #4
 800b082:	77fb      	strb	r3, [r7, #31]
 800b084:	e071      	b.n	800b16a <UART_SetConfig+0x34e>
 800b086:	2308      	movs	r3, #8
 800b088:	77fb      	strb	r3, [r7, #31]
 800b08a:	e06e      	b.n	800b16a <UART_SetConfig+0x34e>
 800b08c:	2310      	movs	r3, #16
 800b08e:	77fb      	strb	r3, [r7, #31]
 800b090:	bf00      	nop
 800b092:	e06a      	b.n	800b16a <UART_SetConfig+0x34e>
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	4a25      	ldr	r2, [pc, #148]	; (800b130 <UART_SetConfig+0x314>)
 800b09a:	4293      	cmp	r3, r2
 800b09c:	d124      	bne.n	800b0e8 <UART_SetConfig+0x2cc>
 800b09e:	4b1e      	ldr	r3, [pc, #120]	; (800b118 <UART_SetConfig+0x2fc>)
 800b0a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0a4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800b0a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0ac:	d012      	beq.n	800b0d4 <UART_SetConfig+0x2b8>
 800b0ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b0b2:	d802      	bhi.n	800b0ba <UART_SetConfig+0x29e>
 800b0b4:	2b00      	cmp	r3, #0
 800b0b6:	d007      	beq.n	800b0c8 <UART_SetConfig+0x2ac>
 800b0b8:	e012      	b.n	800b0e0 <UART_SetConfig+0x2c4>
 800b0ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0be:	d006      	beq.n	800b0ce <UART_SetConfig+0x2b2>
 800b0c0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b0c4:	d009      	beq.n	800b0da <UART_SetConfig+0x2be>
 800b0c6:	e00b      	b.n	800b0e0 <UART_SetConfig+0x2c4>
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	77fb      	strb	r3, [r7, #31]
 800b0cc:	e04d      	b.n	800b16a <UART_SetConfig+0x34e>
 800b0ce:	2302      	movs	r3, #2
 800b0d0:	77fb      	strb	r3, [r7, #31]
 800b0d2:	e04a      	b.n	800b16a <UART_SetConfig+0x34e>
 800b0d4:	2304      	movs	r3, #4
 800b0d6:	77fb      	strb	r3, [r7, #31]
 800b0d8:	e047      	b.n	800b16a <UART_SetConfig+0x34e>
 800b0da:	2308      	movs	r3, #8
 800b0dc:	77fb      	strb	r3, [r7, #31]
 800b0de:	e044      	b.n	800b16a <UART_SetConfig+0x34e>
 800b0e0:	2310      	movs	r3, #16
 800b0e2:	77fb      	strb	r3, [r7, #31]
 800b0e4:	bf00      	nop
 800b0e6:	e040      	b.n	800b16a <UART_SetConfig+0x34e>
 800b0e8:	687b      	ldr	r3, [r7, #4]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	4a11      	ldr	r2, [pc, #68]	; (800b134 <UART_SetConfig+0x318>)
 800b0ee:	4293      	cmp	r3, r2
 800b0f0:	d139      	bne.n	800b166 <UART_SetConfig+0x34a>
 800b0f2:	4b09      	ldr	r3, [pc, #36]	; (800b118 <UART_SetConfig+0x2fc>)
 800b0f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b0f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b0fc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b100:	d027      	beq.n	800b152 <UART_SetConfig+0x336>
 800b102:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b106:	d817      	bhi.n	800b138 <UART_SetConfig+0x31c>
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d01c      	beq.n	800b146 <UART_SetConfig+0x32a>
 800b10c:	e027      	b.n	800b15e <UART_SetConfig+0x342>
 800b10e:	bf00      	nop
 800b110:	efff69f3 	.word	0xefff69f3
 800b114:	40011000 	.word	0x40011000
 800b118:	40023800 	.word	0x40023800
 800b11c:	40004400 	.word	0x40004400
 800b120:	40004800 	.word	0x40004800
 800b124:	40004c00 	.word	0x40004c00
 800b128:	40005000 	.word	0x40005000
 800b12c:	40011400 	.word	0x40011400
 800b130:	40007800 	.word	0x40007800
 800b134:	40007c00 	.word	0x40007c00
 800b138:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b13c:	d006      	beq.n	800b14c <UART_SetConfig+0x330>
 800b13e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b142:	d009      	beq.n	800b158 <UART_SetConfig+0x33c>
 800b144:	e00b      	b.n	800b15e <UART_SetConfig+0x342>
 800b146:	2300      	movs	r3, #0
 800b148:	77fb      	strb	r3, [r7, #31]
 800b14a:	e00e      	b.n	800b16a <UART_SetConfig+0x34e>
 800b14c:	2302      	movs	r3, #2
 800b14e:	77fb      	strb	r3, [r7, #31]
 800b150:	e00b      	b.n	800b16a <UART_SetConfig+0x34e>
 800b152:	2304      	movs	r3, #4
 800b154:	77fb      	strb	r3, [r7, #31]
 800b156:	e008      	b.n	800b16a <UART_SetConfig+0x34e>
 800b158:	2308      	movs	r3, #8
 800b15a:	77fb      	strb	r3, [r7, #31]
 800b15c:	e005      	b.n	800b16a <UART_SetConfig+0x34e>
 800b15e:	2310      	movs	r3, #16
 800b160:	77fb      	strb	r3, [r7, #31]
 800b162:	bf00      	nop
 800b164:	e001      	b.n	800b16a <UART_SetConfig+0x34e>
 800b166:	2310      	movs	r3, #16
 800b168:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	69db      	ldr	r3, [r3, #28]
 800b16e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b172:	d17f      	bne.n	800b274 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b174:	7ffb      	ldrb	r3, [r7, #31]
 800b176:	2b08      	cmp	r3, #8
 800b178:	d85c      	bhi.n	800b234 <UART_SetConfig+0x418>
 800b17a:	a201      	add	r2, pc, #4	; (adr r2, 800b180 <UART_SetConfig+0x364>)
 800b17c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b180:	0800b1a5 	.word	0x0800b1a5
 800b184:	0800b1c5 	.word	0x0800b1c5
 800b188:	0800b1e5 	.word	0x0800b1e5
 800b18c:	0800b235 	.word	0x0800b235
 800b190:	0800b1fd 	.word	0x0800b1fd
 800b194:	0800b235 	.word	0x0800b235
 800b198:	0800b235 	.word	0x0800b235
 800b19c:	0800b235 	.word	0x0800b235
 800b1a0:	0800b21d 	.word	0x0800b21d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1a4:	f7fd f892 	bl	80082cc <HAL_RCC_GetPCLK1Freq>
 800b1a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	005a      	lsls	r2, r3, #1
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	685b      	ldr	r3, [r3, #4]
 800b1b2:	085b      	lsrs	r3, r3, #1
 800b1b4:	441a      	add	r2, r3
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1be:	b29b      	uxth	r3, r3
 800b1c0:	61bb      	str	r3, [r7, #24]
        break;
 800b1c2:	e03a      	b.n	800b23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b1c4:	f7fd f896 	bl	80082f4 <HAL_RCC_GetPCLK2Freq>
 800b1c8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	005a      	lsls	r2, r3, #1
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	085b      	lsrs	r3, r3, #1
 800b1d4:	441a      	add	r2, r3
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	685b      	ldr	r3, [r3, #4]
 800b1da:	fbb2 f3f3 	udiv	r3, r2, r3
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	61bb      	str	r3, [r7, #24]
        break;
 800b1e2:	e02a      	b.n	800b23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	085a      	lsrs	r2, r3, #1
 800b1ea:	4b5f      	ldr	r3, [pc, #380]	; (800b368 <UART_SetConfig+0x54c>)
 800b1ec:	4413      	add	r3, r2
 800b1ee:	687a      	ldr	r2, [r7, #4]
 800b1f0:	6852      	ldr	r2, [r2, #4]
 800b1f2:	fbb3 f3f2 	udiv	r3, r3, r2
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	61bb      	str	r3, [r7, #24]
        break;
 800b1fa:	e01e      	b.n	800b23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b1fc:	f7fc ffa8 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800b200:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	005a      	lsls	r2, r3, #1
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	685b      	ldr	r3, [r3, #4]
 800b20a:	085b      	lsrs	r3, r3, #1
 800b20c:	441a      	add	r2, r3
 800b20e:	687b      	ldr	r3, [r7, #4]
 800b210:	685b      	ldr	r3, [r3, #4]
 800b212:	fbb2 f3f3 	udiv	r3, r2, r3
 800b216:	b29b      	uxth	r3, r3
 800b218:	61bb      	str	r3, [r7, #24]
        break;
 800b21a:	e00e      	b.n	800b23a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	685b      	ldr	r3, [r3, #4]
 800b220:	085b      	lsrs	r3, r3, #1
 800b222:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	685b      	ldr	r3, [r3, #4]
 800b22a:	fbb2 f3f3 	udiv	r3, r2, r3
 800b22e:	b29b      	uxth	r3, r3
 800b230:	61bb      	str	r3, [r7, #24]
        break;
 800b232:	e002      	b.n	800b23a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b234:	2301      	movs	r3, #1
 800b236:	75fb      	strb	r3, [r7, #23]
        break;
 800b238:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b23a:	69bb      	ldr	r3, [r7, #24]
 800b23c:	2b0f      	cmp	r3, #15
 800b23e:	d916      	bls.n	800b26e <UART_SetConfig+0x452>
 800b240:	69bb      	ldr	r3, [r7, #24]
 800b242:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b246:	d212      	bcs.n	800b26e <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b248:	69bb      	ldr	r3, [r7, #24]
 800b24a:	b29b      	uxth	r3, r3
 800b24c:	f023 030f 	bic.w	r3, r3, #15
 800b250:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b252:	69bb      	ldr	r3, [r7, #24]
 800b254:	085b      	lsrs	r3, r3, #1
 800b256:	b29b      	uxth	r3, r3
 800b258:	f003 0307 	and.w	r3, r3, #7
 800b25c:	b29a      	uxth	r2, r3
 800b25e:	897b      	ldrh	r3, [r7, #10]
 800b260:	4313      	orrs	r3, r2
 800b262:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b264:	687b      	ldr	r3, [r7, #4]
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	897a      	ldrh	r2, [r7, #10]
 800b26a:	60da      	str	r2, [r3, #12]
 800b26c:	e070      	b.n	800b350 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b26e:	2301      	movs	r3, #1
 800b270:	75fb      	strb	r3, [r7, #23]
 800b272:	e06d      	b.n	800b350 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b274:	7ffb      	ldrb	r3, [r7, #31]
 800b276:	2b08      	cmp	r3, #8
 800b278:	d859      	bhi.n	800b32e <UART_SetConfig+0x512>
 800b27a:	a201      	add	r2, pc, #4	; (adr r2, 800b280 <UART_SetConfig+0x464>)
 800b27c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b280:	0800b2a5 	.word	0x0800b2a5
 800b284:	0800b2c3 	.word	0x0800b2c3
 800b288:	0800b2e1 	.word	0x0800b2e1
 800b28c:	0800b32f 	.word	0x0800b32f
 800b290:	0800b2f9 	.word	0x0800b2f9
 800b294:	0800b32f 	.word	0x0800b32f
 800b298:	0800b32f 	.word	0x0800b32f
 800b29c:	0800b32f 	.word	0x0800b32f
 800b2a0:	0800b317 	.word	0x0800b317
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b2a4:	f7fd f812 	bl	80082cc <HAL_RCC_GetPCLK1Freq>
 800b2a8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	685b      	ldr	r3, [r3, #4]
 800b2ae:	085a      	lsrs	r2, r3, #1
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	441a      	add	r2, r3
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	685b      	ldr	r3, [r3, #4]
 800b2b8:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2bc:	b29b      	uxth	r3, r3
 800b2be:	61bb      	str	r3, [r7, #24]
        break;
 800b2c0:	e038      	b.n	800b334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b2c2:	f7fd f817 	bl	80082f4 <HAL_RCC_GetPCLK2Freq>
 800b2c6:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	685b      	ldr	r3, [r3, #4]
 800b2cc:	085a      	lsrs	r2, r3, #1
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	441a      	add	r2, r3
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2da:	b29b      	uxth	r3, r3
 800b2dc:	61bb      	str	r3, [r7, #24]
        break;
 800b2de:	e029      	b.n	800b334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	685b      	ldr	r3, [r3, #4]
 800b2e4:	085a      	lsrs	r2, r3, #1
 800b2e6:	4b21      	ldr	r3, [pc, #132]	; (800b36c <UART_SetConfig+0x550>)
 800b2e8:	4413      	add	r3, r2
 800b2ea:	687a      	ldr	r2, [r7, #4]
 800b2ec:	6852      	ldr	r2, [r2, #4]
 800b2ee:	fbb3 f3f2 	udiv	r3, r3, r2
 800b2f2:	b29b      	uxth	r3, r3
 800b2f4:	61bb      	str	r3, [r7, #24]
        break;
 800b2f6:	e01d      	b.n	800b334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b2f8:	f7fc ff2a 	bl	8008150 <HAL_RCC_GetSysClockFreq>
 800b2fc:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	685b      	ldr	r3, [r3, #4]
 800b302:	085a      	lsrs	r2, r3, #1
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	441a      	add	r2, r3
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b310:	b29b      	uxth	r3, r3
 800b312:	61bb      	str	r3, [r7, #24]
        break;
 800b314:	e00e      	b.n	800b334 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	085b      	lsrs	r3, r3, #1
 800b31c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b320:	687b      	ldr	r3, [r7, #4]
 800b322:	685b      	ldr	r3, [r3, #4]
 800b324:	fbb2 f3f3 	udiv	r3, r2, r3
 800b328:	b29b      	uxth	r3, r3
 800b32a:	61bb      	str	r3, [r7, #24]
        break;
 800b32c:	e002      	b.n	800b334 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b32e:	2301      	movs	r3, #1
 800b330:	75fb      	strb	r3, [r7, #23]
        break;
 800b332:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b334:	69bb      	ldr	r3, [r7, #24]
 800b336:	2b0f      	cmp	r3, #15
 800b338:	d908      	bls.n	800b34c <UART_SetConfig+0x530>
 800b33a:	69bb      	ldr	r3, [r7, #24]
 800b33c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b340:	d204      	bcs.n	800b34c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	69ba      	ldr	r2, [r7, #24]
 800b348:	60da      	str	r2, [r3, #12]
 800b34a:	e001      	b.n	800b350 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	2200      	movs	r2, #0
 800b354:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2200      	movs	r2, #0
 800b35a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b35c:	7dfb      	ldrb	r3, [r7, #23]
}
 800b35e:	4618      	mov	r0, r3
 800b360:	3720      	adds	r7, #32
 800b362:	46bd      	mov	sp, r7
 800b364:	bd80      	pop	{r7, pc}
 800b366:	bf00      	nop
 800b368:	01e84800 	.word	0x01e84800
 800b36c:	00f42400 	.word	0x00f42400

0800b370 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b370:	b480      	push	{r7}
 800b372:	b083      	sub	sp, #12
 800b374:	af00      	add	r7, sp, #0
 800b376:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b37c:	f003 0301 	and.w	r3, r3, #1
 800b380:	2b00      	cmp	r3, #0
 800b382:	d00a      	beq.n	800b39a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	685b      	ldr	r3, [r3, #4]
 800b38a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b38e:	687b      	ldr	r3, [r7, #4]
 800b390:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	430a      	orrs	r2, r1
 800b398:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b39e:	f003 0302 	and.w	r3, r3, #2
 800b3a2:	2b00      	cmp	r3, #0
 800b3a4:	d00a      	beq.n	800b3bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	685b      	ldr	r3, [r3, #4]
 800b3ac:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	430a      	orrs	r2, r1
 800b3ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3c0:	f003 0304 	and.w	r3, r3, #4
 800b3c4:	2b00      	cmp	r3, #0
 800b3c6:	d00a      	beq.n	800b3de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	685b      	ldr	r3, [r3, #4]
 800b3ce:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	430a      	orrs	r2, r1
 800b3dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3e2:	f003 0308 	and.w	r3, r3, #8
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	685b      	ldr	r3, [r3, #4]
 800b3f0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	430a      	orrs	r2, r1
 800b3fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b404:	f003 0310 	and.w	r3, r3, #16
 800b408:	2b00      	cmp	r3, #0
 800b40a:	d00a      	beq.n	800b422 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	681b      	ldr	r3, [r3, #0]
 800b410:	689b      	ldr	r3, [r3, #8]
 800b412:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	430a      	orrs	r2, r1
 800b420:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b426:	f003 0320 	and.w	r3, r3, #32
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d00a      	beq.n	800b444 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	689b      	ldr	r3, [r3, #8]
 800b434:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b438:	687b      	ldr	r3, [r7, #4]
 800b43a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b43c:	687b      	ldr	r3, [r7, #4]
 800b43e:	681b      	ldr	r3, [r3, #0]
 800b440:	430a      	orrs	r2, r1
 800b442:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b448:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d01a      	beq.n	800b486 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	685b      	ldr	r3, [r3, #4]
 800b456:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b45a:	687b      	ldr	r3, [r7, #4]
 800b45c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	430a      	orrs	r2, r1
 800b464:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b46a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b46e:	d10a      	bne.n	800b486 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	685b      	ldr	r3, [r3, #4]
 800b476:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	430a      	orrs	r2, r1
 800b484:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b48a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b48e:	2b00      	cmp	r3, #0
 800b490:	d00a      	beq.n	800b4a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	681b      	ldr	r3, [r3, #0]
 800b496:	685b      	ldr	r3, [r3, #4]
 800b498:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	430a      	orrs	r2, r1
 800b4a6:	605a      	str	r2, [r3, #4]
  }
}
 800b4a8:	bf00      	nop
 800b4aa:	370c      	adds	r7, #12
 800b4ac:	46bd      	mov	sp, r7
 800b4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4b2:	4770      	bx	lr

0800b4b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b086      	sub	sp, #24
 800b4b8:	af02      	add	r7, sp, #8
 800b4ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b4c2:	f7f9 fc25 	bl	8004d10 <HAL_GetTick>
 800b4c6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	f003 0308 	and.w	r3, r3, #8
 800b4d2:	2b08      	cmp	r3, #8
 800b4d4:	d10e      	bne.n	800b4f4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b4d6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	68fb      	ldr	r3, [r7, #12]
 800b4de:	2200      	movs	r2, #0
 800b4e0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f814 	bl	800b512 <UART_WaitOnFlagUntilTimeout>
 800b4ea:	4603      	mov	r3, r0
 800b4ec:	2b00      	cmp	r3, #0
 800b4ee:	d001      	beq.n	800b4f4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b4f0:	2303      	movs	r3, #3
 800b4f2:	e00a      	b.n	800b50a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	2220      	movs	r2, #32
 800b4f8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2220      	movs	r2, #32
 800b4fe:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	2200      	movs	r2, #0
 800b504:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b508:	2300      	movs	r3, #0
}
 800b50a:	4618      	mov	r0, r3
 800b50c:	3710      	adds	r7, #16
 800b50e:	46bd      	mov	sp, r7
 800b510:	bd80      	pop	{r7, pc}

0800b512 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b512:	b580      	push	{r7, lr}
 800b514:	b084      	sub	sp, #16
 800b516:	af00      	add	r7, sp, #0
 800b518:	60f8      	str	r0, [r7, #12]
 800b51a:	60b9      	str	r1, [r7, #8]
 800b51c:	603b      	str	r3, [r7, #0]
 800b51e:	4613      	mov	r3, r2
 800b520:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b522:	e05d      	b.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b524:	69bb      	ldr	r3, [r7, #24]
 800b526:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b52a:	d059      	beq.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b52c:	f7f9 fbf0 	bl	8004d10 <HAL_GetTick>
 800b530:	4602      	mov	r2, r0
 800b532:	683b      	ldr	r3, [r7, #0]
 800b534:	1ad3      	subs	r3, r2, r3
 800b536:	69ba      	ldr	r2, [r7, #24]
 800b538:	429a      	cmp	r2, r3
 800b53a:	d302      	bcc.n	800b542 <UART_WaitOnFlagUntilTimeout+0x30>
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d11b      	bne.n	800b57a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b542:	68fb      	ldr	r3, [r7, #12]
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	681a      	ldr	r2, [r3, #0]
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b550:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b552:	68fb      	ldr	r3, [r7, #12]
 800b554:	681b      	ldr	r3, [r3, #0]
 800b556:	689a      	ldr	r2, [r3, #8]
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	f022 0201 	bic.w	r2, r2, #1
 800b560:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	2220      	movs	r2, #32
 800b566:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b568:	68fb      	ldr	r3, [r7, #12]
 800b56a:	2220      	movs	r2, #32
 800b56c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b56e:	68fb      	ldr	r3, [r7, #12]
 800b570:	2200      	movs	r2, #0
 800b572:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b576:	2303      	movs	r3, #3
 800b578:	e042      	b.n	800b600 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	681b      	ldr	r3, [r3, #0]
 800b57e:	681b      	ldr	r3, [r3, #0]
 800b580:	f003 0304 	and.w	r3, r3, #4
 800b584:	2b00      	cmp	r3, #0
 800b586:	d02b      	beq.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	69db      	ldr	r3, [r3, #28]
 800b58e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b592:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b596:	d123      	bne.n	800b5e0 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b5a0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	681a      	ldr	r2, [r3, #0]
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	681b      	ldr	r3, [r3, #0]
 800b5ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b5b0:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	681b      	ldr	r3, [r3, #0]
 800b5b6:	689a      	ldr	r2, [r3, #8]
 800b5b8:	68fb      	ldr	r3, [r7, #12]
 800b5ba:	681b      	ldr	r3, [r3, #0]
 800b5bc:	f022 0201 	bic.w	r2, r2, #1
 800b5c0:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b5c2:	68fb      	ldr	r3, [r7, #12]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2220      	movs	r2, #32
 800b5cc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	2220      	movs	r2, #32
 800b5d2:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	2200      	movs	r2, #0
 800b5d8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b5dc:	2303      	movs	r3, #3
 800b5de:	e00f      	b.n	800b600 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b5e0:	68fb      	ldr	r3, [r7, #12]
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	69da      	ldr	r2, [r3, #28]
 800b5e6:	68bb      	ldr	r3, [r7, #8]
 800b5e8:	4013      	ands	r3, r2
 800b5ea:	68ba      	ldr	r2, [r7, #8]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	bf0c      	ite	eq
 800b5f0:	2301      	moveq	r3, #1
 800b5f2:	2300      	movne	r3, #0
 800b5f4:	b2db      	uxtb	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	79fb      	ldrb	r3, [r7, #7]
 800b5fa:	429a      	cmp	r2, r3
 800b5fc:	d092      	beq.n	800b524 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b5fe:	2300      	movs	r3, #0
}
 800b600:	4618      	mov	r0, r3
 800b602:	3710      	adds	r7, #16
 800b604:	46bd      	mov	sp, r7
 800b606:	bd80      	pop	{r7, pc}

0800b608 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b608:	b480      	push	{r7}
 800b60a:	b083      	sub	sp, #12
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681a      	ldr	r2, [r3, #0]
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b61e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	689a      	ldr	r2, [r3, #8]
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	f022 0201 	bic.w	r2, r2, #1
 800b62e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	2220      	movs	r2, #32
 800b634:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b636:	687b      	ldr	r3, [r7, #4]
 800b638:	2200      	movs	r2, #0
 800b63a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b63c:	bf00      	nop
 800b63e:	370c      	adds	r7, #12
 800b640:	46bd      	mov	sp, r7
 800b642:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b646:	4770      	bx	lr

0800b648 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b084      	sub	sp, #16
 800b64c:	af00      	add	r7, sp, #0
 800b64e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b654:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	2200      	movs	r2, #0
 800b65a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	2200      	movs	r2, #0
 800b662:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b666:	68f8      	ldr	r0, [r7, #12]
 800b668:	f7ff fbce 	bl	800ae08 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b66c:	bf00      	nop
 800b66e:	3710      	adds	r7, #16
 800b670:	46bd      	mov	sp, r7
 800b672:	bd80      	pop	{r7, pc}

0800b674 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
 800b67a:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b680:	2b21      	cmp	r3, #33	; 0x21
 800b682:	d12a      	bne.n	800b6da <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d110      	bne.n	800b6b2 <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	681b      	ldr	r3, [r3, #0]
 800b694:	681a      	ldr	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	681b      	ldr	r3, [r3, #0]
 800b69a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b69e:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6a0:	687b      	ldr	r3, [r7, #4]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	681a      	ldr	r2, [r3, #0]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b6ae:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b6b0:	e013      	b.n	800b6da <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6b6:	781a      	ldrb	r2, [r3, #0]
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b6c2:	1c5a      	adds	r2, r3, #1
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b6c8:	687b      	ldr	r3, [r7, #4]
 800b6ca:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6ce:	b29b      	uxth	r3, r3
 800b6d0:	3b01      	subs	r3, #1
 800b6d2:	b29a      	uxth	r2, r3
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b6da:	bf00      	nop
 800b6dc:	370c      	adds	r7, #12
 800b6de:	46bd      	mov	sp, r7
 800b6e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6e4:	4770      	bx	lr

0800b6e6 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b6e6:	b480      	push	{r7}
 800b6e8:	b085      	sub	sp, #20
 800b6ea:	af00      	add	r7, sp, #0
 800b6ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6f2:	2b21      	cmp	r3, #33	; 0x21
 800b6f4:	d12f      	bne.n	800b756 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b6fc:	b29b      	uxth	r3, r3
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d110      	bne.n	800b724 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	681b      	ldr	r3, [r3, #0]
 800b706:	681a      	ldr	r2, [r3, #0]
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	681b      	ldr	r3, [r3, #0]
 800b70c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b710:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	681b      	ldr	r3, [r3, #0]
 800b716:	681a      	ldr	r2, [r3, #0]
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b720:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b722:	e018      	b.n	800b756 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b728:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b72a:	68fb      	ldr	r3, [r7, #12]
 800b72c:	881b      	ldrh	r3, [r3, #0]
 800b72e:	461a      	mov	r2, r3
 800b730:	687b      	ldr	r3, [r7, #4]
 800b732:	681b      	ldr	r3, [r3, #0]
 800b734:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b738:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b73e:	1c9a      	adds	r2, r3, #2
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b74a:	b29b      	uxth	r3, r3
 800b74c:	3b01      	subs	r3, #1
 800b74e:	b29a      	uxth	r2, r3
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b756:	bf00      	nop
 800b758:	3714      	adds	r7, #20
 800b75a:	46bd      	mov	sp, r7
 800b75c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b760:	4770      	bx	lr

0800b762 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b762:	b580      	push	{r7, lr}
 800b764:	b082      	sub	sp, #8
 800b766:	af00      	add	r7, sp, #0
 800b768:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	681a      	ldr	r2, [r3, #0]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	681b      	ldr	r3, [r3, #0]
 800b774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b778:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	2220      	movs	r2, #32
 800b77e:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	2200      	movs	r2, #0
 800b784:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b786:	6878      	ldr	r0, [r7, #4]
 800b788:	f7ff fb34 	bl	800adf4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b78c:	bf00      	nop
 800b78e:	3708      	adds	r7, #8
 800b790:	46bd      	mov	sp, r7
 800b792:	bd80      	pop	{r7, pc}

0800b794 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b794:	b580      	push	{r7, lr}
 800b796:	b084      	sub	sp, #16
 800b798:	af00      	add	r7, sp, #0
 800b79a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b7a2:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b7a4:	687b      	ldr	r3, [r7, #4]
 800b7a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b7a8:	2b22      	cmp	r3, #34	; 0x22
 800b7aa:	d13a      	bne.n	800b822 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7b2:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b7b4:	89bb      	ldrh	r3, [r7, #12]
 800b7b6:	b2d9      	uxtb	r1, r3
 800b7b8:	89fb      	ldrh	r3, [r7, #14]
 800b7ba:	b2da      	uxtb	r2, r3
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7c0:	400a      	ands	r2, r1
 800b7c2:	b2d2      	uxtb	r2, r2
 800b7c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7ca:	1c5a      	adds	r2, r3, #1
 800b7cc:	687b      	ldr	r3, [r7, #4]
 800b7ce:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7d0:	687b      	ldr	r3, [r7, #4]
 800b7d2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7d6:	b29b      	uxth	r3, r3
 800b7d8:	3b01      	subs	r3, #1
 800b7da:	b29a      	uxth	r2, r3
 800b7dc:	687b      	ldr	r3, [r7, #4]
 800b7de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7e8:	b29b      	uxth	r3, r3
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	d121      	bne.n	800b832 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	681b      	ldr	r3, [r3, #0]
 800b7f2:	681a      	ldr	r2, [r3, #0]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b7fc:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	687b      	ldr	r3, [r7, #4]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	f022 0201 	bic.w	r2, r2, #1
 800b80c:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	2220      	movs	r2, #32
 800b812:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	2200      	movs	r2, #0
 800b818:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b81a:	6878      	ldr	r0, [r7, #4]
 800b81c:	f7f6 fa66 	bl	8001cec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b820:	e007      	b.n	800b832 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	699a      	ldr	r2, [r3, #24]
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f042 0208 	orr.w	r2, r2, #8
 800b830:	619a      	str	r2, [r3, #24]
}
 800b832:	bf00      	nop
 800b834:	3710      	adds	r7, #16
 800b836:	46bd      	mov	sp, r7
 800b838:	bd80      	pop	{r7, pc}

0800b83a <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b83a:	b580      	push	{r7, lr}
 800b83c:	b084      	sub	sp, #16
 800b83e:	af00      	add	r7, sp, #0
 800b840:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b848:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b84a:	687b      	ldr	r3, [r7, #4]
 800b84c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b84e:	2b22      	cmp	r3, #34	; 0x22
 800b850:	d13a      	bne.n	800b8c8 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b858:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b85e:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b860:	89ba      	ldrh	r2, [r7, #12]
 800b862:	89fb      	ldrh	r3, [r7, #14]
 800b864:	4013      	ands	r3, r2
 800b866:	b29a      	uxth	r2, r3
 800b868:	68bb      	ldr	r3, [r7, #8]
 800b86a:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b86c:	687b      	ldr	r3, [r7, #4]
 800b86e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b870:	1c9a      	adds	r2, r3, #2
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b876:	687b      	ldr	r3, [r7, #4]
 800b878:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b87c:	b29b      	uxth	r3, r3
 800b87e:	3b01      	subs	r3, #1
 800b880:	b29a      	uxth	r2, r3
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b88e:	b29b      	uxth	r3, r3
 800b890:	2b00      	cmp	r3, #0
 800b892:	d121      	bne.n	800b8d8 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681a      	ldr	r2, [r3, #0]
 800b89a:	687b      	ldr	r3, [r7, #4]
 800b89c:	681b      	ldr	r3, [r3, #0]
 800b89e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b8a2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b8a4:	687b      	ldr	r3, [r7, #4]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	689a      	ldr	r2, [r3, #8]
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	681b      	ldr	r3, [r3, #0]
 800b8ae:	f022 0201 	bic.w	r2, r2, #1
 800b8b2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	2220      	movs	r2, #32
 800b8b8:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	2200      	movs	r2, #0
 800b8be:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b8c0:	6878      	ldr	r0, [r7, #4]
 800b8c2:	f7f6 fa13 	bl	8001cec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b8c6:	e007      	b.n	800b8d8 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	699a      	ldr	r2, [r3, #24]
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	681b      	ldr	r3, [r3, #0]
 800b8d2:	f042 0208 	orr.w	r2, r2, #8
 800b8d6:	619a      	str	r2, [r3, #24]
}
 800b8d8:	bf00      	nop
 800b8da:	3710      	adds	r7, #16
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}

0800b8e0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b085      	sub	sp, #20
 800b8e4:	af00      	add	r7, sp, #0
 800b8e6:	6078      	str	r0, [r7, #4]
 800b8e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b8ea:	2300      	movs	r3, #0
 800b8ec:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b8f2:	683b      	ldr	r3, [r7, #0]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	2b01      	cmp	r3, #1
 800b8f8:	d027      	beq.n	800b94a <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b900:	68fa      	ldr	r2, [r7, #12]
 800b902:	4b2f      	ldr	r3, [pc, #188]	; (800b9c0 <FMC_SDRAM_Init+0xe0>)
 800b904:	4013      	ands	r3, r2
 800b906:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b908:	683b      	ldr	r3, [r7, #0]
 800b90a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b90c:	683b      	ldr	r3, [r7, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b910:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b916:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b918:	683b      	ldr	r3, [r7, #0]
 800b91a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b91c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b91e:	683b      	ldr	r3, [r7, #0]
 800b920:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b922:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b924:	683b      	ldr	r3, [r7, #0]
 800b926:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b928:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b92a:	683b      	ldr	r3, [r7, #0]
 800b92c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b92e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b930:	683b      	ldr	r3, [r7, #0]
 800b932:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b934:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b936:	683b      	ldr	r3, [r7, #0]
 800b938:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b93a:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b93c:	68fa      	ldr	r2, [r7, #12]
 800b93e:	4313      	orrs	r3, r2
 800b940:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b942:	687b      	ldr	r3, [r7, #4]
 800b944:	68fa      	ldr	r2, [r7, #12]
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	e032      	b.n	800b9b0 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b950:	68fb      	ldr	r3, [r7, #12]
 800b952:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b956:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b958:	683b      	ldr	r3, [r7, #0]
 800b95a:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b95c:	683b      	ldr	r3, [r7, #0]
 800b95e:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b960:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b962:	683b      	ldr	r3, [r7, #0]
 800b964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b966:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b968:	68fa      	ldr	r2, [r7, #12]
 800b96a:	4313      	orrs	r3, r2
 800b96c:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	685b      	ldr	r3, [r3, #4]
 800b972:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b974:	68ba      	ldr	r2, [r7, #8]
 800b976:	4b12      	ldr	r3, [pc, #72]	; (800b9c0 <FMC_SDRAM_Init+0xe0>)
 800b978:	4013      	ands	r3, r2
 800b97a:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b980:	683b      	ldr	r3, [r7, #0]
 800b982:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b984:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b986:	683b      	ldr	r3, [r7, #0]
 800b988:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b98a:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b98c:	683b      	ldr	r3, [r7, #0]
 800b98e:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b990:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b992:	683b      	ldr	r3, [r7, #0]
 800b994:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b996:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b99c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b99e:	68ba      	ldr	r2, [r7, #8]
 800b9a0:	4313      	orrs	r3, r2
 800b9a2:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	68ba      	ldr	r2, [r7, #8]
 800b9ae:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b9b0:	2300      	movs	r3, #0
}
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	3714      	adds	r7, #20
 800b9b6:	46bd      	mov	sp, r7
 800b9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	ffff8000 	.word	0xffff8000

0800b9c4 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b9c4:	b480      	push	{r7}
 800b9c6:	b087      	sub	sp, #28
 800b9c8:	af00      	add	r7, sp, #0
 800b9ca:	60f8      	str	r0, [r7, #12]
 800b9cc:	60b9      	str	r1, [r7, #8]
 800b9ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b9d0:	2300      	movs	r3, #0
 800b9d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b9d4:	2300      	movs	r3, #0
 800b9d6:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	2b01      	cmp	r3, #1
 800b9dc:	d02e      	beq.n	800ba3c <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	689b      	ldr	r3, [r3, #8]
 800b9e2:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b9e4:	697b      	ldr	r3, [r7, #20]
 800b9e6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9ea:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9ec:	68bb      	ldr	r3, [r7, #8]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b9f2:	68bb      	ldr	r3, [r7, #8]
 800b9f4:	685b      	ldr	r3, [r3, #4]
 800b9f6:	3b01      	subs	r3, #1
 800b9f8:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9fa:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b9fc:	68bb      	ldr	r3, [r7, #8]
 800b9fe:	689b      	ldr	r3, [r3, #8]
 800ba00:	3b01      	subs	r3, #1
 800ba02:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800ba04:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	68db      	ldr	r3, [r3, #12]
 800ba0a:	3b01      	subs	r3, #1
 800ba0c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800ba0e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ba10:	68bb      	ldr	r3, [r7, #8]
 800ba12:	691b      	ldr	r3, [r3, #16]
 800ba14:	3b01      	subs	r3, #1
 800ba16:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800ba18:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800ba1a:	68bb      	ldr	r3, [r7, #8]
 800ba1c:	695b      	ldr	r3, [r3, #20]
 800ba1e:	3b01      	subs	r3, #1
 800ba20:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800ba22:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	699b      	ldr	r3, [r3, #24]
 800ba28:	3b01      	subs	r3, #1
 800ba2a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba2c:	4313      	orrs	r3, r2
 800ba2e:	697a      	ldr	r2, [r7, #20]
 800ba30:	4313      	orrs	r3, r2
 800ba32:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	697a      	ldr	r2, [r7, #20]
 800ba38:	609a      	str	r2, [r3, #8]
 800ba3a:	e039      	b.n	800bab0 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800ba42:	697a      	ldr	r2, [r7, #20]
 800ba44:	4b1e      	ldr	r3, [pc, #120]	; (800bac0 <FMC_SDRAM_Timing_Init+0xfc>)
 800ba46:	4013      	ands	r3, r2
 800ba48:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	68db      	ldr	r3, [r3, #12]
 800ba4e:	3b01      	subs	r3, #1
 800ba50:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800ba52:	68bb      	ldr	r3, [r7, #8]
 800ba54:	695b      	ldr	r3, [r3, #20]
 800ba56:	3b01      	subs	r3, #1
 800ba58:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800ba5a:	4313      	orrs	r3, r2
 800ba5c:	697a      	ldr	r2, [r7, #20]
 800ba5e:	4313      	orrs	r3, r2
 800ba60:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	68db      	ldr	r3, [r3, #12]
 800ba66:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800ba68:	693b      	ldr	r3, [r7, #16]
 800ba6a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ba6e:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba70:	68bb      	ldr	r3, [r7, #8]
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	3b01      	subs	r3, #1
 800ba7c:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba7e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ba80:	68bb      	ldr	r3, [r7, #8]
 800ba82:	689b      	ldr	r3, [r3, #8]
 800ba84:	3b01      	subs	r3, #1
 800ba86:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800ba88:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800ba8a:	68bb      	ldr	r3, [r7, #8]
 800ba8c:	691b      	ldr	r3, [r3, #16]
 800ba8e:	3b01      	subs	r3, #1
 800ba90:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800ba92:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800ba94:	68bb      	ldr	r3, [r7, #8]
 800ba96:	699b      	ldr	r3, [r3, #24]
 800ba98:	3b01      	subs	r3, #1
 800ba9a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800ba9c:	4313      	orrs	r3, r2
 800ba9e:	693a      	ldr	r2, [r7, #16]
 800baa0:	4313      	orrs	r3, r2
 800baa2:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800baa4:	68fb      	ldr	r3, [r7, #12]
 800baa6:	697a      	ldr	r2, [r7, #20]
 800baa8:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	693a      	ldr	r2, [r7, #16]
 800baae:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	371c      	adds	r7, #28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800babc:	4770      	bx	lr
 800babe:	bf00      	nop
 800bac0:	ff0f0fff 	.word	0xff0f0fff

0800bac4 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800bac4:	b480      	push	{r7}
 800bac6:	b087      	sub	sp, #28
 800bac8:	af00      	add	r7, sp, #0
 800baca:	60f8      	str	r0, [r7, #12]
 800bacc:	60b9      	str	r1, [r7, #8]
 800bace:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800bad0:	2300      	movs	r3, #0
 800bad2:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800bad4:	68bb      	ldr	r3, [r7, #8]
 800bad6:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800badc:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	689b      	ldr	r3, [r3, #8]
 800bae2:	3b01      	subs	r3, #1
 800bae4:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800bae6:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800bae8:	68bb      	ldr	r3, [r7, #8]
 800baea:	68db      	ldr	r3, [r3, #12]
 800baec:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800baee:	4313      	orrs	r3, r2
 800baf0:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800baf2:	697a      	ldr	r2, [r7, #20]
 800baf4:	68fb      	ldr	r3, [r7, #12]
 800baf6:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800baf8:	2300      	movs	r3, #0
}
 800bafa:	4618      	mov	r0, r3
 800bafc:	371c      	adds	r7, #28
 800bafe:	46bd      	mov	sp, r7
 800bb00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb04:	4770      	bx	lr

0800bb06 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800bb06:	b480      	push	{r7}
 800bb08:	b083      	sub	sp, #12
 800bb0a:	af00      	add	r7, sp, #0
 800bb0c:	6078      	str	r0, [r7, #4]
 800bb0e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	695a      	ldr	r2, [r3, #20]
 800bb14:	683b      	ldr	r3, [r7, #0]
 800bb16:	005b      	lsls	r3, r3, #1
 800bb18:	431a      	orrs	r2, r3
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	370c      	adds	r7, #12
 800bb24:	46bd      	mov	sp, r7
 800bb26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb2a:	4770      	bx	lr

0800bb2c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800bb2c:	b480      	push	{r7}
 800bb2e:	b085      	sub	sp, #20
 800bb30:	af00      	add	r7, sp, #0
 800bb32:	4603      	mov	r3, r0
 800bb34:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800bb36:	2300      	movs	r3, #0
 800bb38:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800bb3a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800bb3e:	2b84      	cmp	r3, #132	; 0x84
 800bb40:	d005      	beq.n	800bb4e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800bb42:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	4413      	add	r3, r2
 800bb4a:	3303      	adds	r3, #3
 800bb4c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800bb4e:	68fb      	ldr	r3, [r7, #12]
}
 800bb50:	4618      	mov	r0, r3
 800bb52:	3714      	adds	r7, #20
 800bb54:	46bd      	mov	sp, r7
 800bb56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb5a:	4770      	bx	lr

0800bb5c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800bb60:	f001 f8ec 	bl	800cd3c <vTaskStartScheduler>
  
  return osOK;
 800bb64:	2300      	movs	r3, #0
}
 800bb66:	4618      	mov	r0, r3
 800bb68:	bd80      	pop	{r7, pc}

0800bb6a <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bb6a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bb6c:	b089      	sub	sp, #36	; 0x24
 800bb6e:	af04      	add	r7, sp, #16
 800bb70:	6078      	str	r0, [r7, #4]
 800bb72:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	695b      	ldr	r3, [r3, #20]
 800bb78:	2b00      	cmp	r3, #0
 800bb7a:	d020      	beq.n	800bbbe <osThreadCreate+0x54>
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	699b      	ldr	r3, [r3, #24]
 800bb80:	2b00      	cmp	r3, #0
 800bb82:	d01c      	beq.n	800bbbe <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	685c      	ldr	r4, [r3, #4]
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681d      	ldr	r5, [r3, #0]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	691e      	ldr	r6, [r3, #16]
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb96:	4618      	mov	r0, r3
 800bb98:	f7ff ffc8 	bl	800bb2c <makeFreeRtosPriority>
 800bb9c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	695b      	ldr	r3, [r3, #20]
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bba6:	9202      	str	r2, [sp, #8]
 800bba8:	9301      	str	r3, [sp, #4]
 800bbaa:	9100      	str	r1, [sp, #0]
 800bbac:	683b      	ldr	r3, [r7, #0]
 800bbae:	4632      	mov	r2, r6
 800bbb0:	4629      	mov	r1, r5
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f000 fdd6 	bl	800c764 <xTaskCreateStatic>
 800bbb8:	4603      	mov	r3, r0
 800bbba:	60fb      	str	r3, [r7, #12]
 800bbbc:	e01c      	b.n	800bbf8 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	685c      	ldr	r4, [r3, #4]
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bbca:	b29e      	uxth	r6, r3
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bbd2:	4618      	mov	r0, r3
 800bbd4:	f7ff ffaa 	bl	800bb2c <makeFreeRtosPriority>
 800bbd8:	4602      	mov	r2, r0
 800bbda:	f107 030c 	add.w	r3, r7, #12
 800bbde:	9301      	str	r3, [sp, #4]
 800bbe0:	9200      	str	r2, [sp, #0]
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	4632      	mov	r2, r6
 800bbe6:	4629      	mov	r1, r5
 800bbe8:	4620      	mov	r0, r4
 800bbea:	f000 fe1b 	bl	800c824 <xTaskCreate>
 800bbee:	4603      	mov	r3, r0
 800bbf0:	2b01      	cmp	r3, #1
 800bbf2:	d001      	beq.n	800bbf8 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e000      	b.n	800bbfa <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bbf8:	68fb      	ldr	r3, [r7, #12]
}
 800bbfa:	4618      	mov	r0, r3
 800bbfc:	3714      	adds	r7, #20
 800bbfe:	46bd      	mov	sp, r7
 800bc00:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bc02 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bc02:	b580      	push	{r7, lr}
 800bc04:	b084      	sub	sp, #16
 800bc06:	af00      	add	r7, sp, #0
 800bc08:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <osDelay+0x16>
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	e000      	b.n	800bc1a <osDelay+0x18>
 800bc18:	2301      	movs	r3, #1
 800bc1a:	4618      	mov	r0, r3
 800bc1c:	f000 ffc4 	bl	800cba8 <vTaskDelay>
  
  return osOK;
 800bc20:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bc22:	4618      	mov	r0, r3
 800bc24:	3710      	adds	r7, #16
 800bc26:	46bd      	mov	sp, r7
 800bc28:	bd80      	pop	{r7, pc}

0800bc2a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bc2a:	b580      	push	{r7, lr}
 800bc2c:	b082      	sub	sp, #8
 800bc2e:	af00      	add	r7, sp, #0
 800bc30:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	685b      	ldr	r3, [r3, #4]
 800bc36:	2b00      	cmp	r3, #0
 800bc38:	d007      	beq.n	800bc4a <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bc3a:	687b      	ldr	r3, [r7, #4]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	4619      	mov	r1, r3
 800bc40:	2001      	movs	r0, #1
 800bc42:	f000 fa60 	bl	800c106 <xQueueCreateMutexStatic>
 800bc46:	4603      	mov	r3, r0
 800bc48:	e003      	b.n	800bc52 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bc4a:	2001      	movs	r0, #1
 800bc4c:	f000 fa43 	bl	800c0d6 <xQueueCreateMutex>
 800bc50:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bc52:	4618      	mov	r0, r3
 800bc54:	3708      	adds	r7, #8
 800bc56:	46bd      	mov	sp, r7
 800bc58:	bd80      	pop	{r7, pc}

0800bc5a <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bc5a:	b590      	push	{r4, r7, lr}
 800bc5c:	b085      	sub	sp, #20
 800bc5e:	af02      	add	r7, sp, #8
 800bc60:	6078      	str	r0, [r7, #4]
 800bc62:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	689b      	ldr	r3, [r3, #8]
 800bc68:	2b00      	cmp	r3, #0
 800bc6a:	d012      	beq.n	800bc92 <osMessageCreate+0x38>
 800bc6c:	687b      	ldr	r3, [r7, #4]
 800bc6e:	68db      	ldr	r3, [r3, #12]
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d00e      	beq.n	800bc92 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	6818      	ldr	r0, [r3, #0]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	6859      	ldr	r1, [r3, #4]
 800bc7c:	687b      	ldr	r3, [r7, #4]
 800bc7e:	689a      	ldr	r2, [r3, #8]
 800bc80:	687b      	ldr	r3, [r7, #4]
 800bc82:	68dc      	ldr	r4, [r3, #12]
 800bc84:	2300      	movs	r3, #0
 800bc86:	9300      	str	r3, [sp, #0]
 800bc88:	4623      	mov	r3, r4
 800bc8a:	f000 f92d 	bl	800bee8 <xQueueGenericCreateStatic>
 800bc8e:	4603      	mov	r3, r0
 800bc90:	e008      	b.n	800bca4 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	6818      	ldr	r0, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	685b      	ldr	r3, [r3, #4]
 800bc9a:	2200      	movs	r2, #0
 800bc9c:	4619      	mov	r1, r3
 800bc9e:	f000 f9a0 	bl	800bfe2 <xQueueGenericCreate>
 800bca2:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bca4:	4618      	mov	r0, r3
 800bca6:	370c      	adds	r7, #12
 800bca8:	46bd      	mov	sp, r7
 800bcaa:	bd90      	pop	{r4, r7, pc}

0800bcac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bcac:	b480      	push	{r7}
 800bcae:	b083      	sub	sp, #12
 800bcb0:	af00      	add	r7, sp, #0
 800bcb2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	f103 0208 	add.w	r2, r3, #8
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f04f 32ff 	mov.w	r2, #4294967295
 800bcc4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	f103 0208 	add.w	r2, r3, #8
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	f103 0208 	add.w	r2, r3, #8
 800bcd6:	687b      	ldr	r3, [r7, #4]
 800bcd8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bcda:	687b      	ldr	r3, [r7, #4]
 800bcdc:	2200      	movs	r2, #0
 800bcde:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bce0:	bf00      	nop
 800bce2:	370c      	adds	r7, #12
 800bce4:	46bd      	mov	sp, r7
 800bce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcea:	4770      	bx	lr

0800bcec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bcec:	b480      	push	{r7}
 800bcee:	b083      	sub	sp, #12
 800bcf0:	af00      	add	r7, sp, #0
 800bcf2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bcfa:	bf00      	nop
 800bcfc:	370c      	adds	r7, #12
 800bcfe:	46bd      	mov	sp, r7
 800bd00:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd04:	4770      	bx	lr

0800bd06 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd06:	b480      	push	{r7}
 800bd08:	b085      	sub	sp, #20
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
 800bd0e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bd10:	687b      	ldr	r3, [r7, #4]
 800bd12:	685b      	ldr	r3, [r3, #4]
 800bd14:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bd16:	683b      	ldr	r3, [r7, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bd1c:	68fb      	ldr	r3, [r7, #12]
 800bd1e:	689a      	ldr	r2, [r3, #8]
 800bd20:	683b      	ldr	r3, [r7, #0]
 800bd22:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	683a      	ldr	r2, [r7, #0]
 800bd2a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	683a      	ldr	r2, [r7, #0]
 800bd30:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bd32:	683b      	ldr	r3, [r7, #0]
 800bd34:	687a      	ldr	r2, [r7, #4]
 800bd36:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	1c5a      	adds	r2, r3, #1
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	601a      	str	r2, [r3, #0]
}
 800bd42:	bf00      	nop
 800bd44:	3714      	adds	r7, #20
 800bd46:	46bd      	mov	sp, r7
 800bd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd4c:	4770      	bx	lr

0800bd4e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bd4e:	b480      	push	{r7}
 800bd50:	b085      	sub	sp, #20
 800bd52:	af00      	add	r7, sp, #0
 800bd54:	6078      	str	r0, [r7, #4]
 800bd56:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bd58:	683b      	ldr	r3, [r7, #0]
 800bd5a:	681b      	ldr	r3, [r3, #0]
 800bd5c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bd5e:	68bb      	ldr	r3, [r7, #8]
 800bd60:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd64:	d103      	bne.n	800bd6e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	691b      	ldr	r3, [r3, #16]
 800bd6a:	60fb      	str	r3, [r7, #12]
 800bd6c:	e00c      	b.n	800bd88 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bd6e:	687b      	ldr	r3, [r7, #4]
 800bd70:	3308      	adds	r3, #8
 800bd72:	60fb      	str	r3, [r7, #12]
 800bd74:	e002      	b.n	800bd7c <vListInsert+0x2e>
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	685b      	ldr	r3, [r3, #4]
 800bd7a:	60fb      	str	r3, [r7, #12]
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	685b      	ldr	r3, [r3, #4]
 800bd80:	681b      	ldr	r3, [r3, #0]
 800bd82:	68ba      	ldr	r2, [r7, #8]
 800bd84:	429a      	cmp	r2, r3
 800bd86:	d2f6      	bcs.n	800bd76 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	685a      	ldr	r2, [r3, #4]
 800bd8c:	683b      	ldr	r3, [r7, #0]
 800bd8e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bd90:	683b      	ldr	r3, [r7, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	683a      	ldr	r2, [r7, #0]
 800bd96:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bd98:	683b      	ldr	r3, [r7, #0]
 800bd9a:	68fa      	ldr	r2, [r7, #12]
 800bd9c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	683a      	ldr	r2, [r7, #0]
 800bda2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	687a      	ldr	r2, [r7, #4]
 800bda8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bdaa:	687b      	ldr	r3, [r7, #4]
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	1c5a      	adds	r2, r3, #1
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	601a      	str	r2, [r3, #0]
}
 800bdb4:	bf00      	nop
 800bdb6:	3714      	adds	r7, #20
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbe:	4770      	bx	lr

0800bdc0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bdc0:	b480      	push	{r7}
 800bdc2:	b085      	sub	sp, #20
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	685b      	ldr	r3, [r3, #4]
 800bdd2:	687a      	ldr	r2, [r7, #4]
 800bdd4:	6892      	ldr	r2, [r2, #8]
 800bdd6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	689b      	ldr	r3, [r3, #8]
 800bddc:	687a      	ldr	r2, [r7, #4]
 800bdde:	6852      	ldr	r2, [r2, #4]
 800bde0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	685b      	ldr	r3, [r3, #4]
 800bde6:	687a      	ldr	r2, [r7, #4]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d103      	bne.n	800bdf4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bdec:	687b      	ldr	r3, [r7, #4]
 800bdee:	689a      	ldr	r2, [r3, #8]
 800bdf0:	68fb      	ldr	r3, [r7, #12]
 800bdf2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	2200      	movs	r2, #0
 800bdf8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	1e5a      	subs	r2, r3, #1
 800be00:	68fb      	ldr	r3, [r7, #12]
 800be02:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800be04:	68fb      	ldr	r3, [r7, #12]
 800be06:	681b      	ldr	r3, [r3, #0]
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3714      	adds	r7, #20
 800be0c:	46bd      	mov	sp, r7
 800be0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be12:	4770      	bx	lr

0800be14 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b084      	sub	sp, #16
 800be18:	af00      	add	r7, sp, #0
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800be1e:	687b      	ldr	r3, [r7, #4]
 800be20:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800be22:	68fb      	ldr	r3, [r7, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	d10b      	bne.n	800be40 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800be28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be2c:	b672      	cpsid	i
 800be2e:	f383 8811 	msr	BASEPRI, r3
 800be32:	f3bf 8f6f 	isb	sy
 800be36:	f3bf 8f4f 	dsb	sy
 800be3a:	b662      	cpsie	i
 800be3c:	60bb      	str	r3, [r7, #8]
 800be3e:	e7fe      	b.n	800be3e <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800be40:	f001 ff02 	bl	800dc48 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	681a      	ldr	r2, [r3, #0]
 800be48:	68fb      	ldr	r3, [r7, #12]
 800be4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be4c:	68f9      	ldr	r1, [r7, #12]
 800be4e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be50:	fb01 f303 	mul.w	r3, r1, r3
 800be54:	441a      	add	r2, r3
 800be56:	68fb      	ldr	r3, [r7, #12]
 800be58:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	2200      	movs	r2, #0
 800be5e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	681a      	ldr	r2, [r3, #0]
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800be68:	68fb      	ldr	r3, [r7, #12]
 800be6a:	681a      	ldr	r2, [r3, #0]
 800be6c:	68fb      	ldr	r3, [r7, #12]
 800be6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be70:	3b01      	subs	r3, #1
 800be72:	68f9      	ldr	r1, [r7, #12]
 800be74:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800be76:	fb01 f303 	mul.w	r3, r1, r3
 800be7a:	441a      	add	r2, r3
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800be80:	68fb      	ldr	r3, [r7, #12]
 800be82:	22ff      	movs	r2, #255	; 0xff
 800be84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	22ff      	movs	r2, #255	; 0xff
 800be8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800be90:	683b      	ldr	r3, [r7, #0]
 800be92:	2b00      	cmp	r3, #0
 800be94:	d114      	bne.n	800bec0 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800be96:	68fb      	ldr	r3, [r7, #12]
 800be98:	691b      	ldr	r3, [r3, #16]
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d01a      	beq.n	800bed4 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800be9e:	68fb      	ldr	r3, [r7, #12]
 800bea0:	3310      	adds	r3, #16
 800bea2:	4618      	mov	r0, r3
 800bea4:	f001 f9ca 	bl	800d23c <xTaskRemoveFromEventList>
 800bea8:	4603      	mov	r3, r0
 800beaa:	2b00      	cmp	r3, #0
 800beac:	d012      	beq.n	800bed4 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800beae:	4b0d      	ldr	r3, [pc, #52]	; (800bee4 <xQueueGenericReset+0xd0>)
 800beb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beb4:	601a      	str	r2, [r3, #0]
 800beb6:	f3bf 8f4f 	dsb	sy
 800beba:	f3bf 8f6f 	isb	sy
 800bebe:	e009      	b.n	800bed4 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bec0:	68fb      	ldr	r3, [r7, #12]
 800bec2:	3310      	adds	r3, #16
 800bec4:	4618      	mov	r0, r3
 800bec6:	f7ff fef1 	bl	800bcac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800beca:	68fb      	ldr	r3, [r7, #12]
 800becc:	3324      	adds	r3, #36	; 0x24
 800bece:	4618      	mov	r0, r3
 800bed0:	f7ff feec 	bl	800bcac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bed4:	f001 feea 	bl	800dcac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bed8:	2301      	movs	r3, #1
}
 800beda:	4618      	mov	r0, r3
 800bedc:	3710      	adds	r7, #16
 800bede:	46bd      	mov	sp, r7
 800bee0:	bd80      	pop	{r7, pc}
 800bee2:	bf00      	nop
 800bee4:	e000ed04 	.word	0xe000ed04

0800bee8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bee8:	b580      	push	{r7, lr}
 800beea:	b08e      	sub	sp, #56	; 0x38
 800beec:	af02      	add	r7, sp, #8
 800beee:	60f8      	str	r0, [r7, #12]
 800bef0:	60b9      	str	r1, [r7, #8]
 800bef2:	607a      	str	r2, [r7, #4]
 800bef4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bef6:	68fb      	ldr	r3, [r7, #12]
 800bef8:	2b00      	cmp	r3, #0
 800befa:	d10b      	bne.n	800bf14 <xQueueGenericCreateStatic+0x2c>
 800befc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf00:	b672      	cpsid	i
 800bf02:	f383 8811 	msr	BASEPRI, r3
 800bf06:	f3bf 8f6f 	isb	sy
 800bf0a:	f3bf 8f4f 	dsb	sy
 800bf0e:	b662      	cpsie	i
 800bf10:	62bb      	str	r3, [r7, #40]	; 0x28
 800bf12:	e7fe      	b.n	800bf12 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d10b      	bne.n	800bf32 <xQueueGenericCreateStatic+0x4a>
 800bf1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf1e:	b672      	cpsid	i
 800bf20:	f383 8811 	msr	BASEPRI, r3
 800bf24:	f3bf 8f6f 	isb	sy
 800bf28:	f3bf 8f4f 	dsb	sy
 800bf2c:	b662      	cpsie	i
 800bf2e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf30:	e7fe      	b.n	800bf30 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bf32:	687b      	ldr	r3, [r7, #4]
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d002      	beq.n	800bf3e <xQueueGenericCreateStatic+0x56>
 800bf38:	68bb      	ldr	r3, [r7, #8]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d001      	beq.n	800bf42 <xQueueGenericCreateStatic+0x5a>
 800bf3e:	2301      	movs	r3, #1
 800bf40:	e000      	b.n	800bf44 <xQueueGenericCreateStatic+0x5c>
 800bf42:	2300      	movs	r3, #0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10b      	bne.n	800bf60 <xQueueGenericCreateStatic+0x78>
 800bf48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf4c:	b672      	cpsid	i
 800bf4e:	f383 8811 	msr	BASEPRI, r3
 800bf52:	f3bf 8f6f 	isb	sy
 800bf56:	f3bf 8f4f 	dsb	sy
 800bf5a:	b662      	cpsie	i
 800bf5c:	623b      	str	r3, [r7, #32]
 800bf5e:	e7fe      	b.n	800bf5e <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d102      	bne.n	800bf6c <xQueueGenericCreateStatic+0x84>
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d101      	bne.n	800bf70 <xQueueGenericCreateStatic+0x88>
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	e000      	b.n	800bf72 <xQueueGenericCreateStatic+0x8a>
 800bf70:	2300      	movs	r3, #0
 800bf72:	2b00      	cmp	r3, #0
 800bf74:	d10b      	bne.n	800bf8e <xQueueGenericCreateStatic+0xa6>
 800bf76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf7a:	b672      	cpsid	i
 800bf7c:	f383 8811 	msr	BASEPRI, r3
 800bf80:	f3bf 8f6f 	isb	sy
 800bf84:	f3bf 8f4f 	dsb	sy
 800bf88:	b662      	cpsie	i
 800bf8a:	61fb      	str	r3, [r7, #28]
 800bf8c:	e7fe      	b.n	800bf8c <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bf8e:	2348      	movs	r3, #72	; 0x48
 800bf90:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bf92:	697b      	ldr	r3, [r7, #20]
 800bf94:	2b48      	cmp	r3, #72	; 0x48
 800bf96:	d00b      	beq.n	800bfb0 <xQueueGenericCreateStatic+0xc8>
 800bf98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9c:	b672      	cpsid	i
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	b662      	cpsie	i
 800bfac:	61bb      	str	r3, [r7, #24]
 800bfae:	e7fe      	b.n	800bfae <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bfb0:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bfb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d00d      	beq.n	800bfd8 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bfbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbe:	2201      	movs	r2, #1
 800bfc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bfc4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfca:	9300      	str	r3, [sp, #0]
 800bfcc:	4613      	mov	r3, r2
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	68b9      	ldr	r1, [r7, #8]
 800bfd2:	68f8      	ldr	r0, [r7, #12]
 800bfd4:	f000 f846 	bl	800c064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bfda:	4618      	mov	r0, r3
 800bfdc:	3730      	adds	r7, #48	; 0x30
 800bfde:	46bd      	mov	sp, r7
 800bfe0:	bd80      	pop	{r7, pc}

0800bfe2 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bfe2:	b580      	push	{r7, lr}
 800bfe4:	b08a      	sub	sp, #40	; 0x28
 800bfe6:	af02      	add	r7, sp, #8
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	4613      	mov	r3, r2
 800bfee:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bff0:	68fb      	ldr	r3, [r7, #12]
 800bff2:	2b00      	cmp	r3, #0
 800bff4:	d10b      	bne.n	800c00e <xQueueGenericCreate+0x2c>
 800bff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bffa:	b672      	cpsid	i
 800bffc:	f383 8811 	msr	BASEPRI, r3
 800c000:	f3bf 8f6f 	isb	sy
 800c004:	f3bf 8f4f 	dsb	sy
 800c008:	b662      	cpsie	i
 800c00a:	613b      	str	r3, [r7, #16]
 800c00c:	e7fe      	b.n	800c00c <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	2b00      	cmp	r3, #0
 800c012:	d102      	bne.n	800c01a <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800c014:	2300      	movs	r3, #0
 800c016:	61fb      	str	r3, [r7, #28]
 800c018:	e004      	b.n	800c024 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	68ba      	ldr	r2, [r7, #8]
 800c01e:	fb02 f303 	mul.w	r3, r2, r3
 800c022:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800c024:	69fb      	ldr	r3, [r7, #28]
 800c026:	3348      	adds	r3, #72	; 0x48
 800c028:	4618      	mov	r0, r3
 800c02a:	f001 feed 	bl	800de08 <pvPortMalloc>
 800c02e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800c030:	69bb      	ldr	r3, [r7, #24]
 800c032:	2b00      	cmp	r3, #0
 800c034:	d011      	beq.n	800c05a <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800c036:	69bb      	ldr	r3, [r7, #24]
 800c038:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	3348      	adds	r3, #72	; 0x48
 800c03e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800c040:	69bb      	ldr	r3, [r7, #24]
 800c042:	2200      	movs	r2, #0
 800c044:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800c048:	79fa      	ldrb	r2, [r7, #7]
 800c04a:	69bb      	ldr	r3, [r7, #24]
 800c04c:	9300      	str	r3, [sp, #0]
 800c04e:	4613      	mov	r3, r2
 800c050:	697a      	ldr	r2, [r7, #20]
 800c052:	68b9      	ldr	r1, [r7, #8]
 800c054:	68f8      	ldr	r0, [r7, #12]
 800c056:	f000 f805 	bl	800c064 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800c05a:	69bb      	ldr	r3, [r7, #24]
	}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3720      	adds	r7, #32
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b084      	sub	sp, #16
 800c068:	af00      	add	r7, sp, #0
 800c06a:	60f8      	str	r0, [r7, #12]
 800c06c:	60b9      	str	r1, [r7, #8]
 800c06e:	607a      	str	r2, [r7, #4]
 800c070:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800c072:	68bb      	ldr	r3, [r7, #8]
 800c074:	2b00      	cmp	r3, #0
 800c076:	d103      	bne.n	800c080 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800c078:	69bb      	ldr	r3, [r7, #24]
 800c07a:	69ba      	ldr	r2, [r7, #24]
 800c07c:	601a      	str	r2, [r3, #0]
 800c07e:	e002      	b.n	800c086 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800c080:	69bb      	ldr	r3, [r7, #24]
 800c082:	687a      	ldr	r2, [r7, #4]
 800c084:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800c086:	69bb      	ldr	r3, [r7, #24]
 800c088:	68fa      	ldr	r2, [r7, #12]
 800c08a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800c08c:	69bb      	ldr	r3, [r7, #24]
 800c08e:	68ba      	ldr	r2, [r7, #8]
 800c090:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800c092:	2101      	movs	r1, #1
 800c094:	69b8      	ldr	r0, [r7, #24]
 800c096:	f7ff febd 	bl	800be14 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800c09a:	bf00      	nop
 800c09c:	3710      	adds	r7, #16
 800c09e:	46bd      	mov	sp, r7
 800c0a0:	bd80      	pop	{r7, pc}

0800c0a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800c0a2:	b580      	push	{r7, lr}
 800c0a4:	b082      	sub	sp, #8
 800c0a6:	af00      	add	r7, sp, #0
 800c0a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800c0aa:	687b      	ldr	r3, [r7, #4]
 800c0ac:	2b00      	cmp	r3, #0
 800c0ae:	d00e      	beq.n	800c0ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2200      	movs	r2, #0
 800c0b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2200      	movs	r2, #0
 800c0ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	2200      	movs	r2, #0
 800c0c6:	2100      	movs	r1, #0
 800c0c8:	6878      	ldr	r0, [r7, #4]
 800c0ca:	f000 f837 	bl	800c13c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c0ce:	bf00      	nop
 800c0d0:	3708      	adds	r7, #8
 800c0d2:	46bd      	mov	sp, r7
 800c0d4:	bd80      	pop	{r7, pc}

0800c0d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c0d6:	b580      	push	{r7, lr}
 800c0d8:	b086      	sub	sp, #24
 800c0da:	af00      	add	r7, sp, #0
 800c0dc:	4603      	mov	r3, r0
 800c0de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c0e0:	2301      	movs	r3, #1
 800c0e2:	617b      	str	r3, [r7, #20]
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c0e8:	79fb      	ldrb	r3, [r7, #7]
 800c0ea:	461a      	mov	r2, r3
 800c0ec:	6939      	ldr	r1, [r7, #16]
 800c0ee:	6978      	ldr	r0, [r7, #20]
 800c0f0:	f7ff ff77 	bl	800bfe2 <xQueueGenericCreate>
 800c0f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c0f6:	68f8      	ldr	r0, [r7, #12]
 800c0f8:	f7ff ffd3 	bl	800c0a2 <prvInitialiseMutex>

		return xNewQueue;
 800c0fc:	68fb      	ldr	r3, [r7, #12]
	}
 800c0fe:	4618      	mov	r0, r3
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}

0800c106 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c106:	b580      	push	{r7, lr}
 800c108:	b088      	sub	sp, #32
 800c10a:	af02      	add	r7, sp, #8
 800c10c:	4603      	mov	r3, r0
 800c10e:	6039      	str	r1, [r7, #0]
 800c110:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c112:	2301      	movs	r3, #1
 800c114:	617b      	str	r3, [r7, #20]
 800c116:	2300      	movs	r3, #0
 800c118:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c11a:	79fb      	ldrb	r3, [r7, #7]
 800c11c:	9300      	str	r3, [sp, #0]
 800c11e:	683b      	ldr	r3, [r7, #0]
 800c120:	2200      	movs	r2, #0
 800c122:	6939      	ldr	r1, [r7, #16]
 800c124:	6978      	ldr	r0, [r7, #20]
 800c126:	f7ff fedf 	bl	800bee8 <xQueueGenericCreateStatic>
 800c12a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c12c:	68f8      	ldr	r0, [r7, #12]
 800c12e:	f7ff ffb8 	bl	800c0a2 <prvInitialiseMutex>

		return xNewQueue;
 800c132:	68fb      	ldr	r3, [r7, #12]
	}
 800c134:	4618      	mov	r0, r3
 800c136:	3718      	adds	r7, #24
 800c138:	46bd      	mov	sp, r7
 800c13a:	bd80      	pop	{r7, pc}

0800c13c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c13c:	b580      	push	{r7, lr}
 800c13e:	b08e      	sub	sp, #56	; 0x38
 800c140:	af00      	add	r7, sp, #0
 800c142:	60f8      	str	r0, [r7, #12]
 800c144:	60b9      	str	r1, [r7, #8]
 800c146:	607a      	str	r2, [r7, #4]
 800c148:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c14a:	2300      	movs	r3, #0
 800c14c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c14e:	68fb      	ldr	r3, [r7, #12]
 800c150:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	2b00      	cmp	r3, #0
 800c156:	d10b      	bne.n	800c170 <xQueueGenericSend+0x34>
 800c158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15c:	b672      	cpsid	i
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	b662      	cpsie	i
 800c16c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c16e:	e7fe      	b.n	800c16e <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c170:	68bb      	ldr	r3, [r7, #8]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d103      	bne.n	800c17e <xQueueGenericSend+0x42>
 800c176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c178:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d101      	bne.n	800c182 <xQueueGenericSend+0x46>
 800c17e:	2301      	movs	r3, #1
 800c180:	e000      	b.n	800c184 <xQueueGenericSend+0x48>
 800c182:	2300      	movs	r3, #0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d10b      	bne.n	800c1a0 <xQueueGenericSend+0x64>
 800c188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18c:	b672      	cpsid	i
 800c18e:	f383 8811 	msr	BASEPRI, r3
 800c192:	f3bf 8f6f 	isb	sy
 800c196:	f3bf 8f4f 	dsb	sy
 800c19a:	b662      	cpsie	i
 800c19c:	627b      	str	r3, [r7, #36]	; 0x24
 800c19e:	e7fe      	b.n	800c19e <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c1a0:	683b      	ldr	r3, [r7, #0]
 800c1a2:	2b02      	cmp	r3, #2
 800c1a4:	d103      	bne.n	800c1ae <xQueueGenericSend+0x72>
 800c1a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c1aa:	2b01      	cmp	r3, #1
 800c1ac:	d101      	bne.n	800c1b2 <xQueueGenericSend+0x76>
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	e000      	b.n	800c1b4 <xQueueGenericSend+0x78>
 800c1b2:	2300      	movs	r3, #0
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	d10b      	bne.n	800c1d0 <xQueueGenericSend+0x94>
 800c1b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1bc:	b672      	cpsid	i
 800c1be:	f383 8811 	msr	BASEPRI, r3
 800c1c2:	f3bf 8f6f 	isb	sy
 800c1c6:	f3bf 8f4f 	dsb	sy
 800c1ca:	b662      	cpsie	i
 800c1cc:	623b      	str	r3, [r7, #32]
 800c1ce:	e7fe      	b.n	800c1ce <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1d0:	f001 f9f4 	bl	800d5bc <xTaskGetSchedulerState>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d102      	bne.n	800c1e0 <xQueueGenericSend+0xa4>
 800c1da:	687b      	ldr	r3, [r7, #4]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d101      	bne.n	800c1e4 <xQueueGenericSend+0xa8>
 800c1e0:	2301      	movs	r3, #1
 800c1e2:	e000      	b.n	800c1e6 <xQueueGenericSend+0xaa>
 800c1e4:	2300      	movs	r3, #0
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	d10b      	bne.n	800c202 <xQueueGenericSend+0xc6>
 800c1ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1ee:	b672      	cpsid	i
 800c1f0:	f383 8811 	msr	BASEPRI, r3
 800c1f4:	f3bf 8f6f 	isb	sy
 800c1f8:	f3bf 8f4f 	dsb	sy
 800c1fc:	b662      	cpsie	i
 800c1fe:	61fb      	str	r3, [r7, #28]
 800c200:	e7fe      	b.n	800c200 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c202:	f001 fd21 	bl	800dc48 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c208:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c20e:	429a      	cmp	r2, r3
 800c210:	d302      	bcc.n	800c218 <xQueueGenericSend+0xdc>
 800c212:	683b      	ldr	r3, [r7, #0]
 800c214:	2b02      	cmp	r3, #2
 800c216:	d129      	bne.n	800c26c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c218:	683a      	ldr	r2, [r7, #0]
 800c21a:	68b9      	ldr	r1, [r7, #8]
 800c21c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c21e:	f000 f9b7 	bl	800c590 <prvCopyDataToQueue>
 800c222:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c226:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d010      	beq.n	800c24e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c22c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c22e:	3324      	adds	r3, #36	; 0x24
 800c230:	4618      	mov	r0, r3
 800c232:	f001 f803 	bl	800d23c <xTaskRemoveFromEventList>
 800c236:	4603      	mov	r3, r0
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d013      	beq.n	800c264 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c23c:	4b3f      	ldr	r3, [pc, #252]	; (800c33c <xQueueGenericSend+0x200>)
 800c23e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c242:	601a      	str	r2, [r3, #0]
 800c244:	f3bf 8f4f 	dsb	sy
 800c248:	f3bf 8f6f 	isb	sy
 800c24c:	e00a      	b.n	800c264 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c24e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c250:	2b00      	cmp	r3, #0
 800c252:	d007      	beq.n	800c264 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c254:	4b39      	ldr	r3, [pc, #228]	; (800c33c <xQueueGenericSend+0x200>)
 800c256:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25a:	601a      	str	r2, [r3, #0]
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c264:	f001 fd22 	bl	800dcac <vPortExitCritical>
				return pdPASS;
 800c268:	2301      	movs	r3, #1
 800c26a:	e063      	b.n	800c334 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c26c:	687b      	ldr	r3, [r7, #4]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d103      	bne.n	800c27a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c272:	f001 fd1b 	bl	800dcac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c276:	2300      	movs	r3, #0
 800c278:	e05c      	b.n	800c334 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c27a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c27c:	2b00      	cmp	r3, #0
 800c27e:	d106      	bne.n	800c28e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c280:	f107 0314 	add.w	r3, r7, #20
 800c284:	4618      	mov	r0, r3
 800c286:	f001 f83d 	bl	800d304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c28a:	2301      	movs	r3, #1
 800c28c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c28e:	f001 fd0d 	bl	800dcac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c292:	f000 fdb5 	bl	800ce00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c296:	f001 fcd7 	bl	800dc48 <vPortEnterCritical>
 800c29a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c29c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2a0:	b25b      	sxtb	r3, r3
 800c2a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2a6:	d103      	bne.n	800c2b0 <xQueueGenericSend+0x174>
 800c2a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2aa:	2200      	movs	r2, #0
 800c2ac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2b6:	b25b      	sxtb	r3, r3
 800c2b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c2bc:	d103      	bne.n	800c2c6 <xQueueGenericSend+0x18a>
 800c2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2c0:	2200      	movs	r2, #0
 800c2c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2c6:	f001 fcf1 	bl	800dcac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2ca:	1d3a      	adds	r2, r7, #4
 800c2cc:	f107 0314 	add.w	r3, r7, #20
 800c2d0:	4611      	mov	r1, r2
 800c2d2:	4618      	mov	r0, r3
 800c2d4:	f001 f82c 	bl	800d330 <xTaskCheckForTimeOut>
 800c2d8:	4603      	mov	r3, r0
 800c2da:	2b00      	cmp	r3, #0
 800c2dc:	d124      	bne.n	800c328 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c2de:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2e0:	f000 fa28 	bl	800c734 <prvIsQueueFull>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d018      	beq.n	800c31c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c2ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ec:	3310      	adds	r3, #16
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	4611      	mov	r1, r2
 800c2f2:	4618      	mov	r0, r3
 800c2f4:	f000 ff7c 	bl	800d1f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c2f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c2fa:	f000 f9b3 	bl	800c664 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c2fe:	f000 fd8d 	bl	800ce1c <xTaskResumeAll>
 800c302:	4603      	mov	r3, r0
 800c304:	2b00      	cmp	r3, #0
 800c306:	f47f af7c 	bne.w	800c202 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c30a:	4b0c      	ldr	r3, [pc, #48]	; (800c33c <xQueueGenericSend+0x200>)
 800c30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c310:	601a      	str	r2, [r3, #0]
 800c312:	f3bf 8f4f 	dsb	sy
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	e772      	b.n	800c202 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c31c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c31e:	f000 f9a1 	bl	800c664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c322:	f000 fd7b 	bl	800ce1c <xTaskResumeAll>
 800c326:	e76c      	b.n	800c202 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c328:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c32a:	f000 f99b 	bl	800c664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c32e:	f000 fd75 	bl	800ce1c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c332:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c334:	4618      	mov	r0, r3
 800c336:	3738      	adds	r7, #56	; 0x38
 800c338:	46bd      	mov	sp, r7
 800c33a:	bd80      	pop	{r7, pc}
 800c33c:	e000ed04 	.word	0xe000ed04

0800c340 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c340:	b580      	push	{r7, lr}
 800c342:	b08e      	sub	sp, #56	; 0x38
 800c344:	af00      	add	r7, sp, #0
 800c346:	6078      	str	r0, [r7, #4]
 800c348:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c34a:	2300      	movs	r3, #0
 800c34c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c352:	2300      	movs	r3, #0
 800c354:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c358:	2b00      	cmp	r3, #0
 800c35a:	d10b      	bne.n	800c374 <xQueueSemaphoreTake+0x34>
 800c35c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c360:	b672      	cpsid	i
 800c362:	f383 8811 	msr	BASEPRI, r3
 800c366:	f3bf 8f6f 	isb	sy
 800c36a:	f3bf 8f4f 	dsb	sy
 800c36e:	b662      	cpsie	i
 800c370:	623b      	str	r3, [r7, #32]
 800c372:	e7fe      	b.n	800c372 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c378:	2b00      	cmp	r3, #0
 800c37a:	d00b      	beq.n	800c394 <xQueueSemaphoreTake+0x54>
 800c37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c380:	b672      	cpsid	i
 800c382:	f383 8811 	msr	BASEPRI, r3
 800c386:	f3bf 8f6f 	isb	sy
 800c38a:	f3bf 8f4f 	dsb	sy
 800c38e:	b662      	cpsie	i
 800c390:	61fb      	str	r3, [r7, #28]
 800c392:	e7fe      	b.n	800c392 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c394:	f001 f912 	bl	800d5bc <xTaskGetSchedulerState>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d102      	bne.n	800c3a4 <xQueueSemaphoreTake+0x64>
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	2b00      	cmp	r3, #0
 800c3a2:	d101      	bne.n	800c3a8 <xQueueSemaphoreTake+0x68>
 800c3a4:	2301      	movs	r3, #1
 800c3a6:	e000      	b.n	800c3aa <xQueueSemaphoreTake+0x6a>
 800c3a8:	2300      	movs	r3, #0
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	d10b      	bne.n	800c3c6 <xQueueSemaphoreTake+0x86>
 800c3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3b2:	b672      	cpsid	i
 800c3b4:	f383 8811 	msr	BASEPRI, r3
 800c3b8:	f3bf 8f6f 	isb	sy
 800c3bc:	f3bf 8f4f 	dsb	sy
 800c3c0:	b662      	cpsie	i
 800c3c2:	61bb      	str	r3, [r7, #24]
 800c3c4:	e7fe      	b.n	800c3c4 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3c6:	f001 fc3f 	bl	800dc48 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3ce:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d024      	beq.n	800c420 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3d8:	1e5a      	subs	r2, r3, #1
 800c3da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3dc:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	681b      	ldr	r3, [r3, #0]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d104      	bne.n	800c3f0 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3e6:	f001 faab 	bl	800d940 <pvTaskIncrementMutexHeldCount>
 800c3ea:	4602      	mov	r2, r0
 800c3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ee:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3f2:	691b      	ldr	r3, [r3, #16]
 800c3f4:	2b00      	cmp	r3, #0
 800c3f6:	d00f      	beq.n	800c418 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3fa:	3310      	adds	r3, #16
 800c3fc:	4618      	mov	r0, r3
 800c3fe:	f000 ff1d 	bl	800d23c <xTaskRemoveFromEventList>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d007      	beq.n	800c418 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c408:	4b54      	ldr	r3, [pc, #336]	; (800c55c <xQueueSemaphoreTake+0x21c>)
 800c40a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c40e:	601a      	str	r2, [r3, #0]
 800c410:	f3bf 8f4f 	dsb	sy
 800c414:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c418:	f001 fc48 	bl	800dcac <vPortExitCritical>
				return pdPASS;
 800c41c:	2301      	movs	r3, #1
 800c41e:	e098      	b.n	800c552 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	2b00      	cmp	r3, #0
 800c424:	d112      	bne.n	800c44c <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d00b      	beq.n	800c444 <xQueueSemaphoreTake+0x104>
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	b672      	cpsid	i
 800c432:	f383 8811 	msr	BASEPRI, r3
 800c436:	f3bf 8f6f 	isb	sy
 800c43a:	f3bf 8f4f 	dsb	sy
 800c43e:	b662      	cpsie	i
 800c440:	617b      	str	r3, [r7, #20]
 800c442:	e7fe      	b.n	800c442 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c444:	f001 fc32 	bl	800dcac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c448:	2300      	movs	r3, #0
 800c44a:	e082      	b.n	800c552 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c44e:	2b00      	cmp	r3, #0
 800c450:	d106      	bne.n	800c460 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c452:	f107 030c 	add.w	r3, r7, #12
 800c456:	4618      	mov	r0, r3
 800c458:	f000 ff54 	bl	800d304 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c45c:	2301      	movs	r3, #1
 800c45e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c460:	f001 fc24 	bl	800dcac <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c464:	f000 fccc 	bl	800ce00 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c468:	f001 fbee 	bl	800dc48 <vPortEnterCritical>
 800c46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c46e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c472:	b25b      	sxtb	r3, r3
 800c474:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c478:	d103      	bne.n	800c482 <xQueueSemaphoreTake+0x142>
 800c47a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c47c:	2200      	movs	r2, #0
 800c47e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c484:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c488:	b25b      	sxtb	r3, r3
 800c48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c48e:	d103      	bne.n	800c498 <xQueueSemaphoreTake+0x158>
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c498:	f001 fc08 	bl	800dcac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c49c:	463a      	mov	r2, r7
 800c49e:	f107 030c 	add.w	r3, r7, #12
 800c4a2:	4611      	mov	r1, r2
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 ff43 	bl	800d330 <xTaskCheckForTimeOut>
 800c4aa:	4603      	mov	r3, r0
 800c4ac:	2b00      	cmp	r3, #0
 800c4ae:	d132      	bne.n	800c516 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c4b0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4b2:	f000 f929 	bl	800c708 <prvIsQueueEmpty>
 800c4b6:	4603      	mov	r3, r0
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d026      	beq.n	800c50a <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	681b      	ldr	r3, [r3, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d109      	bne.n	800c4d8 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c4c4:	f001 fbc0 	bl	800dc48 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ca:	689b      	ldr	r3, [r3, #8]
 800c4cc:	4618      	mov	r0, r3
 800c4ce:	f001 f893 	bl	800d5f8 <xTaskPriorityInherit>
 800c4d2:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4d4:	f001 fbea 	bl	800dcac <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4da:	3324      	adds	r3, #36	; 0x24
 800c4dc:	683a      	ldr	r2, [r7, #0]
 800c4de:	4611      	mov	r1, r2
 800c4e0:	4618      	mov	r0, r3
 800c4e2:	f000 fe85 	bl	800d1f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e8:	f000 f8bc 	bl	800c664 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4ec:	f000 fc96 	bl	800ce1c <xTaskResumeAll>
 800c4f0:	4603      	mov	r3, r0
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	f47f af67 	bne.w	800c3c6 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c4f8:	4b18      	ldr	r3, [pc, #96]	; (800c55c <xQueueSemaphoreTake+0x21c>)
 800c4fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4fe:	601a      	str	r2, [r3, #0]
 800c500:	f3bf 8f4f 	dsb	sy
 800c504:	f3bf 8f6f 	isb	sy
 800c508:	e75d      	b.n	800c3c6 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c50c:	f000 f8aa 	bl	800c664 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c510:	f000 fc84 	bl	800ce1c <xTaskResumeAll>
 800c514:	e757      	b.n	800c3c6 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c516:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c518:	f000 f8a4 	bl	800c664 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c51c:	f000 fc7e 	bl	800ce1c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c520:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c522:	f000 f8f1 	bl	800c708 <prvIsQueueEmpty>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f43f af4c 	beq.w	800c3c6 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00d      	beq.n	800c550 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c534:	f001 fb88 	bl	800dc48 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c538:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c53a:	f000 f811 	bl	800c560 <prvGetDisinheritPriorityAfterTimeout>
 800c53e:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c540:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c542:	689b      	ldr	r3, [r3, #8]
 800c544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c546:	4618      	mov	r0, r3
 800c548:	f001 f95e 	bl	800d808 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c54c:	f001 fbae 	bl	800dcac <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c550:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c552:	4618      	mov	r0, r3
 800c554:	3738      	adds	r7, #56	; 0x38
 800c556:	46bd      	mov	sp, r7
 800c558:	bd80      	pop	{r7, pc}
 800c55a:	bf00      	nop
 800c55c:	e000ed04 	.word	0xe000ed04

0800c560 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c560:	b480      	push	{r7}
 800c562:	b085      	sub	sp, #20
 800c564:	af00      	add	r7, sp, #0
 800c566:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c56c:	2b00      	cmp	r3, #0
 800c56e:	d006      	beq.n	800c57e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c574:	681b      	ldr	r3, [r3, #0]
 800c576:	f1c3 0307 	rsb	r3, r3, #7
 800c57a:	60fb      	str	r3, [r7, #12]
 800c57c:	e001      	b.n	800c582 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c57e:	2300      	movs	r3, #0
 800c580:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c582:	68fb      	ldr	r3, [r7, #12]
	}
 800c584:	4618      	mov	r0, r3
 800c586:	3714      	adds	r7, #20
 800c588:	46bd      	mov	sp, r7
 800c58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c58e:	4770      	bx	lr

0800c590 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b086      	sub	sp, #24
 800c594:	af00      	add	r7, sp, #0
 800c596:	60f8      	str	r0, [r7, #12]
 800c598:	60b9      	str	r1, [r7, #8]
 800c59a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c59c:	2300      	movs	r3, #0
 800c59e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5a0:	68fb      	ldr	r3, [r7, #12]
 800c5a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c5a6:	68fb      	ldr	r3, [r7, #12]
 800c5a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d10d      	bne.n	800c5ca <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c5ae:	68fb      	ldr	r3, [r7, #12]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d14d      	bne.n	800c652 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	689b      	ldr	r3, [r3, #8]
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	f001 f89c 	bl	800d6f8 <xTaskPriorityDisinherit>
 800c5c0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c5c2:	68fb      	ldr	r3, [r7, #12]
 800c5c4:	2200      	movs	r2, #0
 800c5c6:	609a      	str	r2, [r3, #8]
 800c5c8:	e043      	b.n	800c652 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d119      	bne.n	800c604 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c5d0:	68fb      	ldr	r3, [r7, #12]
 800c5d2:	6858      	ldr	r0, [r3, #4]
 800c5d4:	68fb      	ldr	r3, [r7, #12]
 800c5d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5d8:	461a      	mov	r2, r3
 800c5da:	68b9      	ldr	r1, [r7, #8]
 800c5dc:	f001 fe22 	bl	800e224 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c5e0:	68fb      	ldr	r3, [r7, #12]
 800c5e2:	685a      	ldr	r2, [r3, #4]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c5e8:	441a      	add	r2, r3
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	685a      	ldr	r2, [r3, #4]
 800c5f2:	68fb      	ldr	r3, [r7, #12]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	429a      	cmp	r2, r3
 800c5f8:	d32b      	bcc.n	800c652 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	681a      	ldr	r2, [r3, #0]
 800c5fe:	68fb      	ldr	r3, [r7, #12]
 800c600:	605a      	str	r2, [r3, #4]
 800c602:	e026      	b.n	800c652 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c604:	68fb      	ldr	r3, [r7, #12]
 800c606:	68d8      	ldr	r0, [r3, #12]
 800c608:	68fb      	ldr	r3, [r7, #12]
 800c60a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c60c:	461a      	mov	r2, r3
 800c60e:	68b9      	ldr	r1, [r7, #8]
 800c610:	f001 fe08 	bl	800e224 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	68da      	ldr	r2, [r3, #12]
 800c618:	68fb      	ldr	r3, [r7, #12]
 800c61a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c61c:	425b      	negs	r3, r3
 800c61e:	441a      	add	r2, r3
 800c620:	68fb      	ldr	r3, [r7, #12]
 800c622:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	68da      	ldr	r2, [r3, #12]
 800c628:	68fb      	ldr	r3, [r7, #12]
 800c62a:	681b      	ldr	r3, [r3, #0]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d207      	bcs.n	800c640 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c630:	68fb      	ldr	r3, [r7, #12]
 800c632:	689a      	ldr	r2, [r3, #8]
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c638:	425b      	negs	r3, r3
 800c63a:	441a      	add	r2, r3
 800c63c:	68fb      	ldr	r3, [r7, #12]
 800c63e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	2b02      	cmp	r3, #2
 800c644:	d105      	bne.n	800c652 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c646:	693b      	ldr	r3, [r7, #16]
 800c648:	2b00      	cmp	r3, #0
 800c64a:	d002      	beq.n	800c652 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c64c:	693b      	ldr	r3, [r7, #16]
 800c64e:	3b01      	subs	r3, #1
 800c650:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c652:	693b      	ldr	r3, [r7, #16]
 800c654:	1c5a      	adds	r2, r3, #1
 800c656:	68fb      	ldr	r3, [r7, #12]
 800c658:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c65a:	697b      	ldr	r3, [r7, #20]
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3718      	adds	r7, #24
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}

0800c664 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c664:	b580      	push	{r7, lr}
 800c666:	b084      	sub	sp, #16
 800c668:	af00      	add	r7, sp, #0
 800c66a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c66c:	f001 faec 	bl	800dc48 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c676:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c678:	e011      	b.n	800c69e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d012      	beq.n	800c6a8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	3324      	adds	r3, #36	; 0x24
 800c686:	4618      	mov	r0, r3
 800c688:	f000 fdd8 	bl	800d23c <xTaskRemoveFromEventList>
 800c68c:	4603      	mov	r3, r0
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d001      	beq.n	800c696 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c692:	f000 feb1 	bl	800d3f8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c696:	7bfb      	ldrb	r3, [r7, #15]
 800c698:	3b01      	subs	r3, #1
 800c69a:	b2db      	uxtb	r3, r3
 800c69c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c69e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c6a2:	2b00      	cmp	r3, #0
 800c6a4:	dce9      	bgt.n	800c67a <prvUnlockQueue+0x16>
 800c6a6:	e000      	b.n	800c6aa <prvUnlockQueue+0x46>
					break;
 800c6a8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	22ff      	movs	r2, #255	; 0xff
 800c6ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c6b2:	f001 fafb 	bl	800dcac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c6b6:	f001 fac7 	bl	800dc48 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c6ba:	687b      	ldr	r3, [r7, #4]
 800c6bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c6c0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6c2:	e011      	b.n	800c6e8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	691b      	ldr	r3, [r3, #16]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d012      	beq.n	800c6f2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c6cc:	687b      	ldr	r3, [r7, #4]
 800c6ce:	3310      	adds	r3, #16
 800c6d0:	4618      	mov	r0, r3
 800c6d2:	f000 fdb3 	bl	800d23c <xTaskRemoveFromEventList>
 800c6d6:	4603      	mov	r3, r0
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d001      	beq.n	800c6e0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c6dc:	f000 fe8c 	bl	800d3f8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c6e0:	7bbb      	ldrb	r3, [r7, #14]
 800c6e2:	3b01      	subs	r3, #1
 800c6e4:	b2db      	uxtb	r3, r3
 800c6e6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c6e8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	dce9      	bgt.n	800c6c4 <prvUnlockQueue+0x60>
 800c6f0:	e000      	b.n	800c6f4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c6f2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	22ff      	movs	r2, #255	; 0xff
 800c6f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c6fc:	f001 fad6 	bl	800dcac <vPortExitCritical>
}
 800c700:	bf00      	nop
 800c702:	3710      	adds	r7, #16
 800c704:	46bd      	mov	sp, r7
 800c706:	bd80      	pop	{r7, pc}

0800c708 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c710:	f001 fa9a 	bl	800dc48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c714:	687b      	ldr	r3, [r7, #4]
 800c716:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c718:	2b00      	cmp	r3, #0
 800c71a:	d102      	bne.n	800c722 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c71c:	2301      	movs	r3, #1
 800c71e:	60fb      	str	r3, [r7, #12]
 800c720:	e001      	b.n	800c726 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c722:	2300      	movs	r3, #0
 800c724:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c726:	f001 fac1 	bl	800dcac <vPortExitCritical>

	return xReturn;
 800c72a:	68fb      	ldr	r3, [r7, #12]
}
 800c72c:	4618      	mov	r0, r3
 800c72e:	3710      	adds	r7, #16
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b084      	sub	sp, #16
 800c738:	af00      	add	r7, sp, #0
 800c73a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c73c:	f001 fa84 	bl	800dc48 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c748:	429a      	cmp	r2, r3
 800c74a:	d102      	bne.n	800c752 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c74c:	2301      	movs	r3, #1
 800c74e:	60fb      	str	r3, [r7, #12]
 800c750:	e001      	b.n	800c756 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c752:	2300      	movs	r3, #0
 800c754:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c756:	f001 faa9 	bl	800dcac <vPortExitCritical>

	return xReturn;
 800c75a:	68fb      	ldr	r3, [r7, #12]
}
 800c75c:	4618      	mov	r0, r3
 800c75e:	3710      	adds	r7, #16
 800c760:	46bd      	mov	sp, r7
 800c762:	bd80      	pop	{r7, pc}

0800c764 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c764:	b580      	push	{r7, lr}
 800c766:	b08e      	sub	sp, #56	; 0x38
 800c768:	af04      	add	r7, sp, #16
 800c76a:	60f8      	str	r0, [r7, #12]
 800c76c:	60b9      	str	r1, [r7, #8]
 800c76e:	607a      	str	r2, [r7, #4]
 800c770:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c772:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c774:	2b00      	cmp	r3, #0
 800c776:	d10b      	bne.n	800c790 <xTaskCreateStatic+0x2c>
 800c778:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77c:	b672      	cpsid	i
 800c77e:	f383 8811 	msr	BASEPRI, r3
 800c782:	f3bf 8f6f 	isb	sy
 800c786:	f3bf 8f4f 	dsb	sy
 800c78a:	b662      	cpsie	i
 800c78c:	623b      	str	r3, [r7, #32]
 800c78e:	e7fe      	b.n	800c78e <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c792:	2b00      	cmp	r3, #0
 800c794:	d10b      	bne.n	800c7ae <xTaskCreateStatic+0x4a>
 800c796:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c79a:	b672      	cpsid	i
 800c79c:	f383 8811 	msr	BASEPRI, r3
 800c7a0:	f3bf 8f6f 	isb	sy
 800c7a4:	f3bf 8f4f 	dsb	sy
 800c7a8:	b662      	cpsie	i
 800c7aa:	61fb      	str	r3, [r7, #28]
 800c7ac:	e7fe      	b.n	800c7ac <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c7ae:	2358      	movs	r3, #88	; 0x58
 800c7b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c7b2:	693b      	ldr	r3, [r7, #16]
 800c7b4:	2b58      	cmp	r3, #88	; 0x58
 800c7b6:	d00b      	beq.n	800c7d0 <xTaskCreateStatic+0x6c>
 800c7b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7bc:	b672      	cpsid	i
 800c7be:	f383 8811 	msr	BASEPRI, r3
 800c7c2:	f3bf 8f6f 	isb	sy
 800c7c6:	f3bf 8f4f 	dsb	sy
 800c7ca:	b662      	cpsie	i
 800c7cc:	61bb      	str	r3, [r7, #24]
 800c7ce:	e7fe      	b.n	800c7ce <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c7d0:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c7d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d01e      	beq.n	800c816 <xTaskCreateStatic+0xb2>
 800c7d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d01b      	beq.n	800c816 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c7de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c7e0:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c7e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7e4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c7e6:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c7e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ea:	2202      	movs	r2, #2
 800c7ec:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c7f0:	2300      	movs	r3, #0
 800c7f2:	9303      	str	r3, [sp, #12]
 800c7f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7f6:	9302      	str	r3, [sp, #8]
 800c7f8:	f107 0314 	add.w	r3, r7, #20
 800c7fc:	9301      	str	r3, [sp, #4]
 800c7fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c800:	9300      	str	r3, [sp, #0]
 800c802:	683b      	ldr	r3, [r7, #0]
 800c804:	687a      	ldr	r2, [r7, #4]
 800c806:	68b9      	ldr	r1, [r7, #8]
 800c808:	68f8      	ldr	r0, [r7, #12]
 800c80a:	f000 f850 	bl	800c8ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c80e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c810:	f000 f8e0 	bl	800c9d4 <prvAddNewTaskToReadyList>
 800c814:	e001      	b.n	800c81a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c816:	2300      	movs	r3, #0
 800c818:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c81a:	697b      	ldr	r3, [r7, #20]
	}
 800c81c:	4618      	mov	r0, r3
 800c81e:	3728      	adds	r7, #40	; 0x28
 800c820:	46bd      	mov	sp, r7
 800c822:	bd80      	pop	{r7, pc}

0800c824 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c824:	b580      	push	{r7, lr}
 800c826:	b08c      	sub	sp, #48	; 0x30
 800c828:	af04      	add	r7, sp, #16
 800c82a:	60f8      	str	r0, [r7, #12]
 800c82c:	60b9      	str	r1, [r7, #8]
 800c82e:	603b      	str	r3, [r7, #0]
 800c830:	4613      	mov	r3, r2
 800c832:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c834:	88fb      	ldrh	r3, [r7, #6]
 800c836:	009b      	lsls	r3, r3, #2
 800c838:	4618      	mov	r0, r3
 800c83a:	f001 fae5 	bl	800de08 <pvPortMalloc>
 800c83e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	2b00      	cmp	r3, #0
 800c844:	d00e      	beq.n	800c864 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c846:	2058      	movs	r0, #88	; 0x58
 800c848:	f001 fade 	bl	800de08 <pvPortMalloc>
 800c84c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d003      	beq.n	800c85c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c854:	69fb      	ldr	r3, [r7, #28]
 800c856:	697a      	ldr	r2, [r7, #20]
 800c858:	631a      	str	r2, [r3, #48]	; 0x30
 800c85a:	e005      	b.n	800c868 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c85c:	6978      	ldr	r0, [r7, #20]
 800c85e:	f001 fb9f 	bl	800dfa0 <vPortFree>
 800c862:	e001      	b.n	800c868 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c864:	2300      	movs	r3, #0
 800c866:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c868:	69fb      	ldr	r3, [r7, #28]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d017      	beq.n	800c89e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c86e:	69fb      	ldr	r3, [r7, #28]
 800c870:	2200      	movs	r2, #0
 800c872:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c876:	88fa      	ldrh	r2, [r7, #6]
 800c878:	2300      	movs	r3, #0
 800c87a:	9303      	str	r3, [sp, #12]
 800c87c:	69fb      	ldr	r3, [r7, #28]
 800c87e:	9302      	str	r3, [sp, #8]
 800c880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c882:	9301      	str	r3, [sp, #4]
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	9300      	str	r3, [sp, #0]
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	68b9      	ldr	r1, [r7, #8]
 800c88c:	68f8      	ldr	r0, [r7, #12]
 800c88e:	f000 f80e 	bl	800c8ae <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c892:	69f8      	ldr	r0, [r7, #28]
 800c894:	f000 f89e 	bl	800c9d4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c898:	2301      	movs	r3, #1
 800c89a:	61bb      	str	r3, [r7, #24]
 800c89c:	e002      	b.n	800c8a4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c89e:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c8a4:	69bb      	ldr	r3, [r7, #24]
	}
 800c8a6:	4618      	mov	r0, r3
 800c8a8:	3720      	adds	r7, #32
 800c8aa:	46bd      	mov	sp, r7
 800c8ac:	bd80      	pop	{r7, pc}

0800c8ae <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c8ae:	b580      	push	{r7, lr}
 800c8b0:	b088      	sub	sp, #32
 800c8b2:	af00      	add	r7, sp, #0
 800c8b4:	60f8      	str	r0, [r7, #12]
 800c8b6:	60b9      	str	r1, [r7, #8]
 800c8b8:	607a      	str	r2, [r7, #4]
 800c8ba:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c8bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8be:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	009b      	lsls	r3, r3, #2
 800c8c4:	461a      	mov	r2, r3
 800c8c6:	21a5      	movs	r1, #165	; 0xa5
 800c8c8:	f001 fcb7 	bl	800e23a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c8cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c8d0:	6879      	ldr	r1, [r7, #4]
 800c8d2:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c8d6:	440b      	add	r3, r1
 800c8d8:	009b      	lsls	r3, r3, #2
 800c8da:	4413      	add	r3, r2
 800c8dc:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c8de:	69bb      	ldr	r3, [r7, #24]
 800c8e0:	f023 0307 	bic.w	r3, r3, #7
 800c8e4:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c8e6:	69bb      	ldr	r3, [r7, #24]
 800c8e8:	f003 0307 	and.w	r3, r3, #7
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d00b      	beq.n	800c908 <prvInitialiseNewTask+0x5a>
 800c8f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8f4:	b672      	cpsid	i
 800c8f6:	f383 8811 	msr	BASEPRI, r3
 800c8fa:	f3bf 8f6f 	isb	sy
 800c8fe:	f3bf 8f4f 	dsb	sy
 800c902:	b662      	cpsie	i
 800c904:	617b      	str	r3, [r7, #20]
 800c906:	e7fe      	b.n	800c906 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c908:	68bb      	ldr	r3, [r7, #8]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d01f      	beq.n	800c94e <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c90e:	2300      	movs	r3, #0
 800c910:	61fb      	str	r3, [r7, #28]
 800c912:	e012      	b.n	800c93a <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c914:	68ba      	ldr	r2, [r7, #8]
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	4413      	add	r3, r2
 800c91a:	7819      	ldrb	r1, [r3, #0]
 800c91c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c91e:	69fb      	ldr	r3, [r7, #28]
 800c920:	4413      	add	r3, r2
 800c922:	3334      	adds	r3, #52	; 0x34
 800c924:	460a      	mov	r2, r1
 800c926:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c928:	68ba      	ldr	r2, [r7, #8]
 800c92a:	69fb      	ldr	r3, [r7, #28]
 800c92c:	4413      	add	r3, r2
 800c92e:	781b      	ldrb	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d006      	beq.n	800c942 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c934:	69fb      	ldr	r3, [r7, #28]
 800c936:	3301      	adds	r3, #1
 800c938:	61fb      	str	r3, [r7, #28]
 800c93a:	69fb      	ldr	r3, [r7, #28]
 800c93c:	2b0f      	cmp	r3, #15
 800c93e:	d9e9      	bls.n	800c914 <prvInitialiseNewTask+0x66>
 800c940:	e000      	b.n	800c944 <prvInitialiseNewTask+0x96>
			{
				break;
 800c942:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c946:	2200      	movs	r2, #0
 800c948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c94c:	e003      	b.n	800c956 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c950:	2200      	movs	r2, #0
 800c952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c958:	2b06      	cmp	r3, #6
 800c95a:	d901      	bls.n	800c960 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c95c:	2306      	movs	r3, #6
 800c95e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c960:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c962:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c964:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c968:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c96a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c96c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c96e:	2200      	movs	r2, #0
 800c970:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c974:	3304      	adds	r3, #4
 800c976:	4618      	mov	r0, r3
 800c978:	f7ff f9b8 	bl	800bcec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c97c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c97e:	3318      	adds	r3, #24
 800c980:	4618      	mov	r0, r3
 800c982:	f7ff f9b3 	bl	800bcec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c98a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c98c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c98e:	f1c3 0207 	rsb	r2, r3, #7
 800c992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c994:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c998:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c99a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c99c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c99e:	2200      	movs	r2, #0
 800c9a0:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9a4:	2200      	movs	r2, #0
 800c9a6:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c9a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9aa:	2200      	movs	r2, #0
 800c9ac:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c9b0:	683a      	ldr	r2, [r7, #0]
 800c9b2:	68f9      	ldr	r1, [r7, #12]
 800c9b4:	69b8      	ldr	r0, [r7, #24]
 800c9b6:	f001 f83d 	bl	800da34 <pxPortInitialiseStack>
 800c9ba:	4602      	mov	r2, r0
 800c9bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c9be:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c9c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d002      	beq.n	800c9cc <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c9c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c9ca:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9cc:	bf00      	nop
 800c9ce:	3720      	adds	r7, #32
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	bd80      	pop	{r7, pc}

0800c9d4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c9d4:	b580      	push	{r7, lr}
 800c9d6:	b082      	sub	sp, #8
 800c9d8:	af00      	add	r7, sp, #0
 800c9da:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c9dc:	f001 f934 	bl	800dc48 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c9e0:	4b2a      	ldr	r3, [pc, #168]	; (800ca8c <prvAddNewTaskToReadyList+0xb8>)
 800c9e2:	681b      	ldr	r3, [r3, #0]
 800c9e4:	3301      	adds	r3, #1
 800c9e6:	4a29      	ldr	r2, [pc, #164]	; (800ca8c <prvAddNewTaskToReadyList+0xb8>)
 800c9e8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c9ea:	4b29      	ldr	r3, [pc, #164]	; (800ca90 <prvAddNewTaskToReadyList+0xbc>)
 800c9ec:	681b      	ldr	r3, [r3, #0]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d109      	bne.n	800ca06 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c9f2:	4a27      	ldr	r2, [pc, #156]	; (800ca90 <prvAddNewTaskToReadyList+0xbc>)
 800c9f4:	687b      	ldr	r3, [r7, #4]
 800c9f6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c9f8:	4b24      	ldr	r3, [pc, #144]	; (800ca8c <prvAddNewTaskToReadyList+0xb8>)
 800c9fa:	681b      	ldr	r3, [r3, #0]
 800c9fc:	2b01      	cmp	r3, #1
 800c9fe:	d110      	bne.n	800ca22 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800ca00:	f000 fd20 	bl	800d444 <prvInitialiseTaskLists>
 800ca04:	e00d      	b.n	800ca22 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ca06:	4b23      	ldr	r3, [pc, #140]	; (800ca94 <prvAddNewTaskToReadyList+0xc0>)
 800ca08:	681b      	ldr	r3, [r3, #0]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d109      	bne.n	800ca22 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ca0e:	4b20      	ldr	r3, [pc, #128]	; (800ca90 <prvAddNewTaskToReadyList+0xbc>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca18:	429a      	cmp	r2, r3
 800ca1a:	d802      	bhi.n	800ca22 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ca1c:	4a1c      	ldr	r2, [pc, #112]	; (800ca90 <prvAddNewTaskToReadyList+0xbc>)
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ca22:	4b1d      	ldr	r3, [pc, #116]	; (800ca98 <prvAddNewTaskToReadyList+0xc4>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	3301      	adds	r3, #1
 800ca28:	4a1b      	ldr	r2, [pc, #108]	; (800ca98 <prvAddNewTaskToReadyList+0xc4>)
 800ca2a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca30:	2201      	movs	r2, #1
 800ca32:	409a      	lsls	r2, r3
 800ca34:	4b19      	ldr	r3, [pc, #100]	; (800ca9c <prvAddNewTaskToReadyList+0xc8>)
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	4313      	orrs	r3, r2
 800ca3a:	4a18      	ldr	r2, [pc, #96]	; (800ca9c <prvAddNewTaskToReadyList+0xc8>)
 800ca3c:	6013      	str	r3, [r2, #0]
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca42:	4613      	mov	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	4413      	add	r3, r2
 800ca48:	009b      	lsls	r3, r3, #2
 800ca4a:	4a15      	ldr	r2, [pc, #84]	; (800caa0 <prvAddNewTaskToReadyList+0xcc>)
 800ca4c:	441a      	add	r2, r3
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	3304      	adds	r3, #4
 800ca52:	4619      	mov	r1, r3
 800ca54:	4610      	mov	r0, r2
 800ca56:	f7ff f956 	bl	800bd06 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ca5a:	f001 f927 	bl	800dcac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ca5e:	4b0d      	ldr	r3, [pc, #52]	; (800ca94 <prvAddNewTaskToReadyList+0xc0>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d00e      	beq.n	800ca84 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ca66:	4b0a      	ldr	r3, [pc, #40]	; (800ca90 <prvAddNewTaskToReadyList+0xbc>)
 800ca68:	681b      	ldr	r3, [r3, #0]
 800ca6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca6c:	687b      	ldr	r3, [r7, #4]
 800ca6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca70:	429a      	cmp	r2, r3
 800ca72:	d207      	bcs.n	800ca84 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ca74:	4b0b      	ldr	r3, [pc, #44]	; (800caa4 <prvAddNewTaskToReadyList+0xd0>)
 800ca76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ca7a:	601a      	str	r2, [r3, #0]
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ca84:	bf00      	nop
 800ca86:	3708      	adds	r7, #8
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}
 800ca8c:	20000608 	.word	0x20000608
 800ca90:	20000508 	.word	0x20000508
 800ca94:	20000614 	.word	0x20000614
 800ca98:	20000624 	.word	0x20000624
 800ca9c:	20000610 	.word	0x20000610
 800caa0:	2000050c 	.word	0x2000050c
 800caa4:	e000ed04 	.word	0xe000ed04

0800caa8 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800caa8:	b580      	push	{r7, lr}
 800caaa:	b08a      	sub	sp, #40	; 0x28
 800caac:	af00      	add	r7, sp, #0
 800caae:	6078      	str	r0, [r7, #4]
 800cab0:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cab2:	2300      	movs	r3, #0
 800cab4:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800cab6:	687b      	ldr	r3, [r7, #4]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d10b      	bne.n	800cad4 <vTaskDelayUntil+0x2c>
 800cabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cac0:	b672      	cpsid	i
 800cac2:	f383 8811 	msr	BASEPRI, r3
 800cac6:	f3bf 8f6f 	isb	sy
 800caca:	f3bf 8f4f 	dsb	sy
 800cace:	b662      	cpsie	i
 800cad0:	617b      	str	r3, [r7, #20]
 800cad2:	e7fe      	b.n	800cad2 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cad4:	683b      	ldr	r3, [r7, #0]
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d10b      	bne.n	800caf2 <vTaskDelayUntil+0x4a>
 800cada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cade:	b672      	cpsid	i
 800cae0:	f383 8811 	msr	BASEPRI, r3
 800cae4:	f3bf 8f6f 	isb	sy
 800cae8:	f3bf 8f4f 	dsb	sy
 800caec:	b662      	cpsie	i
 800caee:	613b      	str	r3, [r7, #16]
 800caf0:	e7fe      	b.n	800caf0 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800caf2:	4b2a      	ldr	r3, [pc, #168]	; (800cb9c <vTaskDelayUntil+0xf4>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d00b      	beq.n	800cb12 <vTaskDelayUntil+0x6a>
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	b672      	cpsid	i
 800cb00:	f383 8811 	msr	BASEPRI, r3
 800cb04:	f3bf 8f6f 	isb	sy
 800cb08:	f3bf 8f4f 	dsb	sy
 800cb0c:	b662      	cpsie	i
 800cb0e:	60fb      	str	r3, [r7, #12]
 800cb10:	e7fe      	b.n	800cb10 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800cb12:	f000 f975 	bl	800ce00 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cb16:	4b22      	ldr	r3, [pc, #136]	; (800cba0 <vTaskDelayUntil+0xf8>)
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	683a      	ldr	r2, [r7, #0]
 800cb22:	4413      	add	r3, r2
 800cb24:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	681b      	ldr	r3, [r3, #0]
 800cb2a:	6a3a      	ldr	r2, [r7, #32]
 800cb2c:	429a      	cmp	r2, r3
 800cb2e:	d20b      	bcs.n	800cb48 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	681b      	ldr	r3, [r3, #0]
 800cb34:	69fa      	ldr	r2, [r7, #28]
 800cb36:	429a      	cmp	r2, r3
 800cb38:	d211      	bcs.n	800cb5e <vTaskDelayUntil+0xb6>
 800cb3a:	69fa      	ldr	r2, [r7, #28]
 800cb3c:	6a3b      	ldr	r3, [r7, #32]
 800cb3e:	429a      	cmp	r2, r3
 800cb40:	d90d      	bls.n	800cb5e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800cb42:	2301      	movs	r3, #1
 800cb44:	627b      	str	r3, [r7, #36]	; 0x24
 800cb46:	e00a      	b.n	800cb5e <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	69fa      	ldr	r2, [r7, #28]
 800cb4e:	429a      	cmp	r2, r3
 800cb50:	d303      	bcc.n	800cb5a <vTaskDelayUntil+0xb2>
 800cb52:	69fa      	ldr	r2, [r7, #28]
 800cb54:	6a3b      	ldr	r3, [r7, #32]
 800cb56:	429a      	cmp	r2, r3
 800cb58:	d901      	bls.n	800cb5e <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800cb5a:	2301      	movs	r3, #1
 800cb5c:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800cb5e:	687b      	ldr	r3, [r7, #4]
 800cb60:	69fa      	ldr	r2, [r7, #28]
 800cb62:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cb64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d006      	beq.n	800cb78 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cb6a:	69fa      	ldr	r2, [r7, #28]
 800cb6c:	6a3b      	ldr	r3, [r7, #32]
 800cb6e:	1ad3      	subs	r3, r2, r3
 800cb70:	2100      	movs	r1, #0
 800cb72:	4618      	mov	r0, r3
 800cb74:	f000 fef8 	bl	800d968 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cb78:	f000 f950 	bl	800ce1c <xTaskResumeAll>
 800cb7c:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb7e:	69bb      	ldr	r3, [r7, #24]
 800cb80:	2b00      	cmp	r3, #0
 800cb82:	d107      	bne.n	800cb94 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800cb84:	4b07      	ldr	r3, [pc, #28]	; (800cba4 <vTaskDelayUntil+0xfc>)
 800cb86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb8a:	601a      	str	r2, [r3, #0]
 800cb8c:	f3bf 8f4f 	dsb	sy
 800cb90:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb94:	bf00      	nop
 800cb96:	3728      	adds	r7, #40	; 0x28
 800cb98:	46bd      	mov	sp, r7
 800cb9a:	bd80      	pop	{r7, pc}
 800cb9c:	20000630 	.word	0x20000630
 800cba0:	2000060c 	.word	0x2000060c
 800cba4:	e000ed04 	.word	0xe000ed04

0800cba8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800cba8:	b580      	push	{r7, lr}
 800cbaa:	b084      	sub	sp, #16
 800cbac:	af00      	add	r7, sp, #0
 800cbae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cbb0:	2300      	movs	r3, #0
 800cbb2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cbb4:	687b      	ldr	r3, [r7, #4]
 800cbb6:	2b00      	cmp	r3, #0
 800cbb8:	d018      	beq.n	800cbec <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cbba:	4b14      	ldr	r3, [pc, #80]	; (800cc0c <vTaskDelay+0x64>)
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d00b      	beq.n	800cbda <vTaskDelay+0x32>
 800cbc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbc6:	b672      	cpsid	i
 800cbc8:	f383 8811 	msr	BASEPRI, r3
 800cbcc:	f3bf 8f6f 	isb	sy
 800cbd0:	f3bf 8f4f 	dsb	sy
 800cbd4:	b662      	cpsie	i
 800cbd6:	60bb      	str	r3, [r7, #8]
 800cbd8:	e7fe      	b.n	800cbd8 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cbda:	f000 f911 	bl	800ce00 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cbde:	2100      	movs	r1, #0
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f000 fec1 	bl	800d968 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cbe6:	f000 f919 	bl	800ce1c <xTaskResumeAll>
 800cbea:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d107      	bne.n	800cc02 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cbf2:	4b07      	ldr	r3, [pc, #28]	; (800cc10 <vTaskDelay+0x68>)
 800cbf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf8:	601a      	str	r2, [r3, #0]
 800cbfa:	f3bf 8f4f 	dsb	sy
 800cbfe:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc02:	bf00      	nop
 800cc04:	3710      	adds	r7, #16
 800cc06:	46bd      	mov	sp, r7
 800cc08:	bd80      	pop	{r7, pc}
 800cc0a:	bf00      	nop
 800cc0c:	20000630 	.word	0x20000630
 800cc10:	e000ed04 	.word	0xe000ed04

0800cc14 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cc14:	b580      	push	{r7, lr}
 800cc16:	b084      	sub	sp, #16
 800cc18:	af00      	add	r7, sp, #0
 800cc1a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cc1c:	f001 f814 	bl	800dc48 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d102      	bne.n	800cc2c <vTaskSuspend+0x18>
 800cc26:	4b3d      	ldr	r3, [pc, #244]	; (800cd1c <vTaskSuspend+0x108>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	e000      	b.n	800cc2e <vTaskSuspend+0x1a>
 800cc2c:	687b      	ldr	r3, [r7, #4]
 800cc2e:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cc30:	68fb      	ldr	r3, [r7, #12]
 800cc32:	3304      	adds	r3, #4
 800cc34:	4618      	mov	r0, r3
 800cc36:	f7ff f8c3 	bl	800bdc0 <uxListRemove>
 800cc3a:	4603      	mov	r3, r0
 800cc3c:	2b00      	cmp	r3, #0
 800cc3e:	d115      	bne.n	800cc6c <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc44:	4936      	ldr	r1, [pc, #216]	; (800cd20 <vTaskSuspend+0x10c>)
 800cc46:	4613      	mov	r3, r2
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	4413      	add	r3, r2
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	440b      	add	r3, r1
 800cc50:	681b      	ldr	r3, [r3, #0]
 800cc52:	2b00      	cmp	r3, #0
 800cc54:	d10a      	bne.n	800cc6c <vTaskSuspend+0x58>
 800cc56:	68fb      	ldr	r3, [r7, #12]
 800cc58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc5a:	2201      	movs	r2, #1
 800cc5c:	fa02 f303 	lsl.w	r3, r2, r3
 800cc60:	43da      	mvns	r2, r3
 800cc62:	4b30      	ldr	r3, [pc, #192]	; (800cd24 <vTaskSuspend+0x110>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4013      	ands	r3, r2
 800cc68:	4a2e      	ldr	r2, [pc, #184]	; (800cd24 <vTaskSuspend+0x110>)
 800cc6a:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d004      	beq.n	800cc7e <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc74:	68fb      	ldr	r3, [r7, #12]
 800cc76:	3318      	adds	r3, #24
 800cc78:	4618      	mov	r0, r3
 800cc7a:	f7ff f8a1 	bl	800bdc0 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cc7e:	68fb      	ldr	r3, [r7, #12]
 800cc80:	3304      	adds	r3, #4
 800cc82:	4619      	mov	r1, r3
 800cc84:	4828      	ldr	r0, [pc, #160]	; (800cd28 <vTaskSuspend+0x114>)
 800cc86:	f7ff f83e 	bl	800bd06 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800cc90:	b2db      	uxtb	r3, r3
 800cc92:	2b01      	cmp	r3, #1
 800cc94:	d103      	bne.n	800cc9e <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cc9e:	f001 f805 	bl	800dcac <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cca2:	4b22      	ldr	r3, [pc, #136]	; (800cd2c <vTaskSuspend+0x118>)
 800cca4:	681b      	ldr	r3, [r3, #0]
 800cca6:	2b00      	cmp	r3, #0
 800cca8:	d005      	beq.n	800ccb6 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800ccaa:	f000 ffcd 	bl	800dc48 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800ccae:	f000 fc65 	bl	800d57c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800ccb2:	f000 fffb 	bl	800dcac <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800ccb6:	4b19      	ldr	r3, [pc, #100]	; (800cd1c <vTaskSuspend+0x108>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	68fa      	ldr	r2, [r7, #12]
 800ccbc:	429a      	cmp	r2, r3
 800ccbe:	d128      	bne.n	800cd12 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800ccc0:	4b1a      	ldr	r3, [pc, #104]	; (800cd2c <vTaskSuspend+0x118>)
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d018      	beq.n	800ccfa <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800ccc8:	4b19      	ldr	r3, [pc, #100]	; (800cd30 <vTaskSuspend+0x11c>)
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	2b00      	cmp	r3, #0
 800ccce:	d00b      	beq.n	800cce8 <vTaskSuspend+0xd4>
 800ccd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccd4:	b672      	cpsid	i
 800ccd6:	f383 8811 	msr	BASEPRI, r3
 800ccda:	f3bf 8f6f 	isb	sy
 800ccde:	f3bf 8f4f 	dsb	sy
 800cce2:	b662      	cpsie	i
 800cce4:	60bb      	str	r3, [r7, #8]
 800cce6:	e7fe      	b.n	800cce6 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800cce8:	4b12      	ldr	r3, [pc, #72]	; (800cd34 <vTaskSuspend+0x120>)
 800ccea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccee:	601a      	str	r2, [r3, #0]
 800ccf0:	f3bf 8f4f 	dsb	sy
 800ccf4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ccf8:	e00b      	b.n	800cd12 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800ccfa:	4b0b      	ldr	r3, [pc, #44]	; (800cd28 <vTaskSuspend+0x114>)
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b0e      	ldr	r3, [pc, #56]	; (800cd38 <vTaskSuspend+0x124>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d103      	bne.n	800cd0e <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800cd06:	4b05      	ldr	r3, [pc, #20]	; (800cd1c <vTaskSuspend+0x108>)
 800cd08:	2200      	movs	r2, #0
 800cd0a:	601a      	str	r2, [r3, #0]
	}
 800cd0c:	e001      	b.n	800cd12 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800cd0e:	f000 f9ed 	bl	800d0ec <vTaskSwitchContext>
	}
 800cd12:	bf00      	nop
 800cd14:	3710      	adds	r7, #16
 800cd16:	46bd      	mov	sp, r7
 800cd18:	bd80      	pop	{r7, pc}
 800cd1a:	bf00      	nop
 800cd1c:	20000508 	.word	0x20000508
 800cd20:	2000050c 	.word	0x2000050c
 800cd24:	20000610 	.word	0x20000610
 800cd28:	200005f4 	.word	0x200005f4
 800cd2c:	20000614 	.word	0x20000614
 800cd30:	20000630 	.word	0x20000630
 800cd34:	e000ed04 	.word	0xe000ed04
 800cd38:	20000608 	.word	0x20000608

0800cd3c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cd3c:	b580      	push	{r7, lr}
 800cd3e:	b08a      	sub	sp, #40	; 0x28
 800cd40:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cd42:	2300      	movs	r3, #0
 800cd44:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cd46:	2300      	movs	r3, #0
 800cd48:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cd4a:	463a      	mov	r2, r7
 800cd4c:	1d39      	adds	r1, r7, #4
 800cd4e:	f107 0308 	add.w	r3, r7, #8
 800cd52:	4618      	mov	r0, r3
 800cd54:	f7f3 fc46 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cd58:	6839      	ldr	r1, [r7, #0]
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	68ba      	ldr	r2, [r7, #8]
 800cd5e:	9202      	str	r2, [sp, #8]
 800cd60:	9301      	str	r3, [sp, #4]
 800cd62:	2300      	movs	r3, #0
 800cd64:	9300      	str	r3, [sp, #0]
 800cd66:	2300      	movs	r3, #0
 800cd68:	460a      	mov	r2, r1
 800cd6a:	491f      	ldr	r1, [pc, #124]	; (800cde8 <vTaskStartScheduler+0xac>)
 800cd6c:	481f      	ldr	r0, [pc, #124]	; (800cdec <vTaskStartScheduler+0xb0>)
 800cd6e:	f7ff fcf9 	bl	800c764 <xTaskCreateStatic>
 800cd72:	4602      	mov	r2, r0
 800cd74:	4b1e      	ldr	r3, [pc, #120]	; (800cdf0 <vTaskStartScheduler+0xb4>)
 800cd76:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cd78:	4b1d      	ldr	r3, [pc, #116]	; (800cdf0 <vTaskStartScheduler+0xb4>)
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	2b00      	cmp	r3, #0
 800cd7e:	d002      	beq.n	800cd86 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cd80:	2301      	movs	r3, #1
 800cd82:	617b      	str	r3, [r7, #20]
 800cd84:	e001      	b.n	800cd8a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cd86:	2300      	movs	r3, #0
 800cd88:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cd8a:	697b      	ldr	r3, [r7, #20]
 800cd8c:	2b01      	cmp	r3, #1
 800cd8e:	d117      	bne.n	800cdc0 <vTaskStartScheduler+0x84>
 800cd90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd94:	b672      	cpsid	i
 800cd96:	f383 8811 	msr	BASEPRI, r3
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	f3bf 8f4f 	dsb	sy
 800cda2:	b662      	cpsie	i
 800cda4:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cda6:	4b13      	ldr	r3, [pc, #76]	; (800cdf4 <vTaskStartScheduler+0xb8>)
 800cda8:	f04f 32ff 	mov.w	r2, #4294967295
 800cdac:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cdae:	4b12      	ldr	r3, [pc, #72]	; (800cdf8 <vTaskStartScheduler+0xbc>)
 800cdb0:	2201      	movs	r2, #1
 800cdb2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cdb4:	4b11      	ldr	r3, [pc, #68]	; (800cdfc <vTaskStartScheduler+0xc0>)
 800cdb6:	2200      	movs	r2, #0
 800cdb8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cdba:	f000 fec9 	bl	800db50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cdbe:	e00f      	b.n	800cde0 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cdc0:	697b      	ldr	r3, [r7, #20]
 800cdc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cdc6:	d10b      	bne.n	800cde0 <vTaskStartScheduler+0xa4>
 800cdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdcc:	b672      	cpsid	i
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	b662      	cpsie	i
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	e7fe      	b.n	800cdde <vTaskStartScheduler+0xa2>
}
 800cde0:	bf00      	nop
 800cde2:	3718      	adds	r7, #24
 800cde4:	46bd      	mov	sp, r7
 800cde6:	bd80      	pop	{r7, pc}
 800cde8:	0800eb78 	.word	0x0800eb78
 800cdec:	0800d411 	.word	0x0800d411
 800cdf0:	2000062c 	.word	0x2000062c
 800cdf4:	20000628 	.word	0x20000628
 800cdf8:	20000614 	.word	0x20000614
 800cdfc:	2000060c 	.word	0x2000060c

0800ce00 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ce00:	b480      	push	{r7}
 800ce02:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ce04:	4b04      	ldr	r3, [pc, #16]	; (800ce18 <vTaskSuspendAll+0x18>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	3301      	adds	r3, #1
 800ce0a:	4a03      	ldr	r2, [pc, #12]	; (800ce18 <vTaskSuspendAll+0x18>)
 800ce0c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ce0e:	bf00      	nop
 800ce10:	46bd      	mov	sp, r7
 800ce12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce16:	4770      	bx	lr
 800ce18:	20000630 	.word	0x20000630

0800ce1c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b084      	sub	sp, #16
 800ce20:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ce22:	2300      	movs	r3, #0
 800ce24:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ce26:	2300      	movs	r3, #0
 800ce28:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ce2a:	4b42      	ldr	r3, [pc, #264]	; (800cf34 <xTaskResumeAll+0x118>)
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d10b      	bne.n	800ce4a <xTaskResumeAll+0x2e>
 800ce32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce36:	b672      	cpsid	i
 800ce38:	f383 8811 	msr	BASEPRI, r3
 800ce3c:	f3bf 8f6f 	isb	sy
 800ce40:	f3bf 8f4f 	dsb	sy
 800ce44:	b662      	cpsie	i
 800ce46:	603b      	str	r3, [r7, #0]
 800ce48:	e7fe      	b.n	800ce48 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800ce4a:	f000 fefd 	bl	800dc48 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800ce4e:	4b39      	ldr	r3, [pc, #228]	; (800cf34 <xTaskResumeAll+0x118>)
 800ce50:	681b      	ldr	r3, [r3, #0]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	4a37      	ldr	r2, [pc, #220]	; (800cf34 <xTaskResumeAll+0x118>)
 800ce56:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ce58:	4b36      	ldr	r3, [pc, #216]	; (800cf34 <xTaskResumeAll+0x118>)
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d161      	bne.n	800cf24 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800ce60:	4b35      	ldr	r3, [pc, #212]	; (800cf38 <xTaskResumeAll+0x11c>)
 800ce62:	681b      	ldr	r3, [r3, #0]
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d05d      	beq.n	800cf24 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce68:	e02e      	b.n	800cec8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce6a:	4b34      	ldr	r3, [pc, #208]	; (800cf3c <xTaskResumeAll+0x120>)
 800ce6c:	68db      	ldr	r3, [r3, #12]
 800ce6e:	68db      	ldr	r3, [r3, #12]
 800ce70:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	3318      	adds	r3, #24
 800ce76:	4618      	mov	r0, r3
 800ce78:	f7fe ffa2 	bl	800bdc0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce7c:	68fb      	ldr	r3, [r7, #12]
 800ce7e:	3304      	adds	r3, #4
 800ce80:	4618      	mov	r0, r3
 800ce82:	f7fe ff9d 	bl	800bdc0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce8a:	2201      	movs	r2, #1
 800ce8c:	409a      	lsls	r2, r3
 800ce8e:	4b2c      	ldr	r3, [pc, #176]	; (800cf40 <xTaskResumeAll+0x124>)
 800ce90:	681b      	ldr	r3, [r3, #0]
 800ce92:	4313      	orrs	r3, r2
 800ce94:	4a2a      	ldr	r2, [pc, #168]	; (800cf40 <xTaskResumeAll+0x124>)
 800ce96:	6013      	str	r3, [r2, #0]
 800ce98:	68fb      	ldr	r3, [r7, #12]
 800ce9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce9c:	4613      	mov	r3, r2
 800ce9e:	009b      	lsls	r3, r3, #2
 800cea0:	4413      	add	r3, r2
 800cea2:	009b      	lsls	r3, r3, #2
 800cea4:	4a27      	ldr	r2, [pc, #156]	; (800cf44 <xTaskResumeAll+0x128>)
 800cea6:	441a      	add	r2, r3
 800cea8:	68fb      	ldr	r3, [r7, #12]
 800ceaa:	3304      	adds	r3, #4
 800ceac:	4619      	mov	r1, r3
 800ceae:	4610      	mov	r0, r2
 800ceb0:	f7fe ff29 	bl	800bd06 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ceb4:	68fb      	ldr	r3, [r7, #12]
 800ceb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ceb8:	4b23      	ldr	r3, [pc, #140]	; (800cf48 <xTaskResumeAll+0x12c>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cebe:	429a      	cmp	r2, r3
 800cec0:	d302      	bcc.n	800cec8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cec2:	4b22      	ldr	r3, [pc, #136]	; (800cf4c <xTaskResumeAll+0x130>)
 800cec4:	2201      	movs	r2, #1
 800cec6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cec8:	4b1c      	ldr	r3, [pc, #112]	; (800cf3c <xTaskResumeAll+0x120>)
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	2b00      	cmp	r3, #0
 800cece:	d1cc      	bne.n	800ce6a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ced0:	68fb      	ldr	r3, [r7, #12]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	d001      	beq.n	800ceda <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ced6:	f000 fb51 	bl	800d57c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ceda:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <xTaskResumeAll+0x134>)
 800cedc:	681b      	ldr	r3, [r3, #0]
 800cede:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2b00      	cmp	r3, #0
 800cee4:	d010      	beq.n	800cf08 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cee6:	f000 f847 	bl	800cf78 <xTaskIncrementTick>
 800ceea:	4603      	mov	r3, r0
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	d002      	beq.n	800cef6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cef0:	4b16      	ldr	r3, [pc, #88]	; (800cf4c <xTaskResumeAll+0x130>)
 800cef2:	2201      	movs	r2, #1
 800cef4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	3b01      	subs	r3, #1
 800cefa:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d1f1      	bne.n	800cee6 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cf02:	4b13      	ldr	r3, [pc, #76]	; (800cf50 <xTaskResumeAll+0x134>)
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cf08:	4b10      	ldr	r3, [pc, #64]	; (800cf4c <xTaskResumeAll+0x130>)
 800cf0a:	681b      	ldr	r3, [r3, #0]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d009      	beq.n	800cf24 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cf10:	2301      	movs	r3, #1
 800cf12:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cf14:	4b0f      	ldr	r3, [pc, #60]	; (800cf54 <xTaskResumeAll+0x138>)
 800cf16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf1a:	601a      	str	r2, [r3, #0]
 800cf1c:	f3bf 8f4f 	dsb	sy
 800cf20:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cf24:	f000 fec2 	bl	800dcac <vPortExitCritical>

	return xAlreadyYielded;
 800cf28:	68bb      	ldr	r3, [r7, #8]
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3710      	adds	r7, #16
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}
 800cf32:	bf00      	nop
 800cf34:	20000630 	.word	0x20000630
 800cf38:	20000608 	.word	0x20000608
 800cf3c:	200005c8 	.word	0x200005c8
 800cf40:	20000610 	.word	0x20000610
 800cf44:	2000050c 	.word	0x2000050c
 800cf48:	20000508 	.word	0x20000508
 800cf4c:	2000061c 	.word	0x2000061c
 800cf50:	20000618 	.word	0x20000618
 800cf54:	e000ed04 	.word	0xe000ed04

0800cf58 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cf58:	b480      	push	{r7}
 800cf5a:	b083      	sub	sp, #12
 800cf5c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cf5e:	4b05      	ldr	r3, [pc, #20]	; (800cf74 <xTaskGetTickCount+0x1c>)
 800cf60:	681b      	ldr	r3, [r3, #0]
 800cf62:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cf64:	687b      	ldr	r3, [r7, #4]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	370c      	adds	r7, #12
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf70:	4770      	bx	lr
 800cf72:	bf00      	nop
 800cf74:	2000060c 	.word	0x2000060c

0800cf78 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cf78:	b580      	push	{r7, lr}
 800cf7a:	b086      	sub	sp, #24
 800cf7c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cf7e:	2300      	movs	r3, #0
 800cf80:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf82:	4b4f      	ldr	r3, [pc, #316]	; (800d0c0 <xTaskIncrementTick+0x148>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	f040 8089 	bne.w	800d09e <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cf8c:	4b4d      	ldr	r3, [pc, #308]	; (800d0c4 <xTaskIncrementTick+0x14c>)
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	3301      	adds	r3, #1
 800cf92:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cf94:	4a4b      	ldr	r2, [pc, #300]	; (800d0c4 <xTaskIncrementTick+0x14c>)
 800cf96:	693b      	ldr	r3, [r7, #16]
 800cf98:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cf9a:	693b      	ldr	r3, [r7, #16]
 800cf9c:	2b00      	cmp	r3, #0
 800cf9e:	d121      	bne.n	800cfe4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cfa0:	4b49      	ldr	r3, [pc, #292]	; (800d0c8 <xTaskIncrementTick+0x150>)
 800cfa2:	681b      	ldr	r3, [r3, #0]
 800cfa4:	681b      	ldr	r3, [r3, #0]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d00b      	beq.n	800cfc2 <xTaskIncrementTick+0x4a>
 800cfaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfae:	b672      	cpsid	i
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	b662      	cpsie	i
 800cfbe:	603b      	str	r3, [r7, #0]
 800cfc0:	e7fe      	b.n	800cfc0 <xTaskIncrementTick+0x48>
 800cfc2:	4b41      	ldr	r3, [pc, #260]	; (800d0c8 <xTaskIncrementTick+0x150>)
 800cfc4:	681b      	ldr	r3, [r3, #0]
 800cfc6:	60fb      	str	r3, [r7, #12]
 800cfc8:	4b40      	ldr	r3, [pc, #256]	; (800d0cc <xTaskIncrementTick+0x154>)
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	4a3e      	ldr	r2, [pc, #248]	; (800d0c8 <xTaskIncrementTick+0x150>)
 800cfce:	6013      	str	r3, [r2, #0]
 800cfd0:	4a3e      	ldr	r2, [pc, #248]	; (800d0cc <xTaskIncrementTick+0x154>)
 800cfd2:	68fb      	ldr	r3, [r7, #12]
 800cfd4:	6013      	str	r3, [r2, #0]
 800cfd6:	4b3e      	ldr	r3, [pc, #248]	; (800d0d0 <xTaskIncrementTick+0x158>)
 800cfd8:	681b      	ldr	r3, [r3, #0]
 800cfda:	3301      	adds	r3, #1
 800cfdc:	4a3c      	ldr	r2, [pc, #240]	; (800d0d0 <xTaskIncrementTick+0x158>)
 800cfde:	6013      	str	r3, [r2, #0]
 800cfe0:	f000 facc 	bl	800d57c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cfe4:	4b3b      	ldr	r3, [pc, #236]	; (800d0d4 <xTaskIncrementTick+0x15c>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	693a      	ldr	r2, [r7, #16]
 800cfea:	429a      	cmp	r2, r3
 800cfec:	d348      	bcc.n	800d080 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfee:	4b36      	ldr	r3, [pc, #216]	; (800d0c8 <xTaskIncrementTick+0x150>)
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	681b      	ldr	r3, [r3, #0]
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d104      	bne.n	800d002 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cff8:	4b36      	ldr	r3, [pc, #216]	; (800d0d4 <xTaskIncrementTick+0x15c>)
 800cffa:	f04f 32ff 	mov.w	r2, #4294967295
 800cffe:	601a      	str	r2, [r3, #0]
					break;
 800d000:	e03e      	b.n	800d080 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d002:	4b31      	ldr	r3, [pc, #196]	; (800d0c8 <xTaskIncrementTick+0x150>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	68db      	ldr	r3, [r3, #12]
 800d008:	68db      	ldr	r3, [r3, #12]
 800d00a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d00c:	68bb      	ldr	r3, [r7, #8]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d012:	693a      	ldr	r2, [r7, #16]
 800d014:	687b      	ldr	r3, [r7, #4]
 800d016:	429a      	cmp	r2, r3
 800d018:	d203      	bcs.n	800d022 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d01a:	4a2e      	ldr	r2, [pc, #184]	; (800d0d4 <xTaskIncrementTick+0x15c>)
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d020:	e02e      	b.n	800d080 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d022:	68bb      	ldr	r3, [r7, #8]
 800d024:	3304      	adds	r3, #4
 800d026:	4618      	mov	r0, r3
 800d028:	f7fe feca 	bl	800bdc0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d02c:	68bb      	ldr	r3, [r7, #8]
 800d02e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d030:	2b00      	cmp	r3, #0
 800d032:	d004      	beq.n	800d03e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d034:	68bb      	ldr	r3, [r7, #8]
 800d036:	3318      	adds	r3, #24
 800d038:	4618      	mov	r0, r3
 800d03a:	f7fe fec1 	bl	800bdc0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d03e:	68bb      	ldr	r3, [r7, #8]
 800d040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d042:	2201      	movs	r2, #1
 800d044:	409a      	lsls	r2, r3
 800d046:	4b24      	ldr	r3, [pc, #144]	; (800d0d8 <xTaskIncrementTick+0x160>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	4a22      	ldr	r2, [pc, #136]	; (800d0d8 <xTaskIncrementTick+0x160>)
 800d04e:	6013      	str	r3, [r2, #0]
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d054:	4613      	mov	r3, r2
 800d056:	009b      	lsls	r3, r3, #2
 800d058:	4413      	add	r3, r2
 800d05a:	009b      	lsls	r3, r3, #2
 800d05c:	4a1f      	ldr	r2, [pc, #124]	; (800d0dc <xTaskIncrementTick+0x164>)
 800d05e:	441a      	add	r2, r3
 800d060:	68bb      	ldr	r3, [r7, #8]
 800d062:	3304      	adds	r3, #4
 800d064:	4619      	mov	r1, r3
 800d066:	4610      	mov	r0, r2
 800d068:	f7fe fe4d 	bl	800bd06 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d06c:	68bb      	ldr	r3, [r7, #8]
 800d06e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d070:	4b1b      	ldr	r3, [pc, #108]	; (800d0e0 <xTaskIncrementTick+0x168>)
 800d072:	681b      	ldr	r3, [r3, #0]
 800d074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d076:	429a      	cmp	r2, r3
 800d078:	d3b9      	bcc.n	800cfee <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800d07a:	2301      	movs	r3, #1
 800d07c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d07e:	e7b6      	b.n	800cfee <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d080:	4b17      	ldr	r3, [pc, #92]	; (800d0e0 <xTaskIncrementTick+0x168>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d086:	4915      	ldr	r1, [pc, #84]	; (800d0dc <xTaskIncrementTick+0x164>)
 800d088:	4613      	mov	r3, r2
 800d08a:	009b      	lsls	r3, r3, #2
 800d08c:	4413      	add	r3, r2
 800d08e:	009b      	lsls	r3, r3, #2
 800d090:	440b      	add	r3, r1
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	2b01      	cmp	r3, #1
 800d096:	d907      	bls.n	800d0a8 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800d098:	2301      	movs	r3, #1
 800d09a:	617b      	str	r3, [r7, #20]
 800d09c:	e004      	b.n	800d0a8 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800d09e:	4b11      	ldr	r3, [pc, #68]	; (800d0e4 <xTaskIncrementTick+0x16c>)
 800d0a0:	681b      	ldr	r3, [r3, #0]
 800d0a2:	3301      	adds	r3, #1
 800d0a4:	4a0f      	ldr	r2, [pc, #60]	; (800d0e4 <xTaskIncrementTick+0x16c>)
 800d0a6:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800d0a8:	4b0f      	ldr	r3, [pc, #60]	; (800d0e8 <xTaskIncrementTick+0x170>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d001      	beq.n	800d0b4 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d0b4:	697b      	ldr	r3, [r7, #20]
}
 800d0b6:	4618      	mov	r0, r3
 800d0b8:	3718      	adds	r7, #24
 800d0ba:	46bd      	mov	sp, r7
 800d0bc:	bd80      	pop	{r7, pc}
 800d0be:	bf00      	nop
 800d0c0:	20000630 	.word	0x20000630
 800d0c4:	2000060c 	.word	0x2000060c
 800d0c8:	200005c0 	.word	0x200005c0
 800d0cc:	200005c4 	.word	0x200005c4
 800d0d0:	20000620 	.word	0x20000620
 800d0d4:	20000628 	.word	0x20000628
 800d0d8:	20000610 	.word	0x20000610
 800d0dc:	2000050c 	.word	0x2000050c
 800d0e0:	20000508 	.word	0x20000508
 800d0e4:	20000618 	.word	0x20000618
 800d0e8:	2000061c 	.word	0x2000061c

0800d0ec <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d0ec:	b580      	push	{r7, lr}
 800d0ee:	b088      	sub	sp, #32
 800d0f0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d0f2:	4b3a      	ldr	r3, [pc, #232]	; (800d1dc <vTaskSwitchContext+0xf0>)
 800d0f4:	681b      	ldr	r3, [r3, #0]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d003      	beq.n	800d102 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d0fa:	4b39      	ldr	r3, [pc, #228]	; (800d1e0 <vTaskSwitchContext+0xf4>)
 800d0fc:	2201      	movs	r2, #1
 800d0fe:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d100:	e067      	b.n	800d1d2 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d102:	4b37      	ldr	r3, [pc, #220]	; (800d1e0 <vTaskSwitchContext+0xf4>)
 800d104:	2200      	movs	r2, #0
 800d106:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d108:	4b36      	ldr	r3, [pc, #216]	; (800d1e4 <vTaskSwitchContext+0xf8>)
 800d10a:	681b      	ldr	r3, [r3, #0]
 800d10c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d10e:	61fb      	str	r3, [r7, #28]
 800d110:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d114:	61bb      	str	r3, [r7, #24]
 800d116:	69fb      	ldr	r3, [r7, #28]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	69ba      	ldr	r2, [r7, #24]
 800d11c:	429a      	cmp	r2, r3
 800d11e:	d111      	bne.n	800d144 <vTaskSwitchContext+0x58>
 800d120:	69fb      	ldr	r3, [r7, #28]
 800d122:	3304      	adds	r3, #4
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	69ba      	ldr	r2, [r7, #24]
 800d128:	429a      	cmp	r2, r3
 800d12a:	d10b      	bne.n	800d144 <vTaskSwitchContext+0x58>
 800d12c:	69fb      	ldr	r3, [r7, #28]
 800d12e:	3308      	adds	r3, #8
 800d130:	681b      	ldr	r3, [r3, #0]
 800d132:	69ba      	ldr	r2, [r7, #24]
 800d134:	429a      	cmp	r2, r3
 800d136:	d105      	bne.n	800d144 <vTaskSwitchContext+0x58>
 800d138:	69fb      	ldr	r3, [r7, #28]
 800d13a:	330c      	adds	r3, #12
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	69ba      	ldr	r2, [r7, #24]
 800d140:	429a      	cmp	r2, r3
 800d142:	d008      	beq.n	800d156 <vTaskSwitchContext+0x6a>
 800d144:	4b27      	ldr	r3, [pc, #156]	; (800d1e4 <vTaskSwitchContext+0xf8>)
 800d146:	681a      	ldr	r2, [r3, #0]
 800d148:	4b26      	ldr	r3, [pc, #152]	; (800d1e4 <vTaskSwitchContext+0xf8>)
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	3334      	adds	r3, #52	; 0x34
 800d14e:	4619      	mov	r1, r3
 800d150:	4610      	mov	r0, r2
 800d152:	f7f3 fa34 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d156:	4b24      	ldr	r3, [pc, #144]	; (800d1e8 <vTaskSwitchContext+0xfc>)
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d15c:	68fb      	ldr	r3, [r7, #12]
 800d15e:	fab3 f383 	clz	r3, r3
 800d162:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d164:	7afb      	ldrb	r3, [r7, #11]
 800d166:	f1c3 031f 	rsb	r3, r3, #31
 800d16a:	617b      	str	r3, [r7, #20]
 800d16c:	491f      	ldr	r1, [pc, #124]	; (800d1ec <vTaskSwitchContext+0x100>)
 800d16e:	697a      	ldr	r2, [r7, #20]
 800d170:	4613      	mov	r3, r2
 800d172:	009b      	lsls	r3, r3, #2
 800d174:	4413      	add	r3, r2
 800d176:	009b      	lsls	r3, r3, #2
 800d178:	440b      	add	r3, r1
 800d17a:	681b      	ldr	r3, [r3, #0]
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d10b      	bne.n	800d198 <vTaskSwitchContext+0xac>
	__asm volatile
 800d180:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d184:	b672      	cpsid	i
 800d186:	f383 8811 	msr	BASEPRI, r3
 800d18a:	f3bf 8f6f 	isb	sy
 800d18e:	f3bf 8f4f 	dsb	sy
 800d192:	b662      	cpsie	i
 800d194:	607b      	str	r3, [r7, #4]
 800d196:	e7fe      	b.n	800d196 <vTaskSwitchContext+0xaa>
 800d198:	697a      	ldr	r2, [r7, #20]
 800d19a:	4613      	mov	r3, r2
 800d19c:	009b      	lsls	r3, r3, #2
 800d19e:	4413      	add	r3, r2
 800d1a0:	009b      	lsls	r3, r3, #2
 800d1a2:	4a12      	ldr	r2, [pc, #72]	; (800d1ec <vTaskSwitchContext+0x100>)
 800d1a4:	4413      	add	r3, r2
 800d1a6:	613b      	str	r3, [r7, #16]
 800d1a8:	693b      	ldr	r3, [r7, #16]
 800d1aa:	685b      	ldr	r3, [r3, #4]
 800d1ac:	685a      	ldr	r2, [r3, #4]
 800d1ae:	693b      	ldr	r3, [r7, #16]
 800d1b0:	605a      	str	r2, [r3, #4]
 800d1b2:	693b      	ldr	r3, [r7, #16]
 800d1b4:	685a      	ldr	r2, [r3, #4]
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	3308      	adds	r3, #8
 800d1ba:	429a      	cmp	r2, r3
 800d1bc:	d104      	bne.n	800d1c8 <vTaskSwitchContext+0xdc>
 800d1be:	693b      	ldr	r3, [r7, #16]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	685a      	ldr	r2, [r3, #4]
 800d1c4:	693b      	ldr	r3, [r7, #16]
 800d1c6:	605a      	str	r2, [r3, #4]
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	685b      	ldr	r3, [r3, #4]
 800d1cc:	68db      	ldr	r3, [r3, #12]
 800d1ce:	4a05      	ldr	r2, [pc, #20]	; (800d1e4 <vTaskSwitchContext+0xf8>)
 800d1d0:	6013      	str	r3, [r2, #0]
}
 800d1d2:	bf00      	nop
 800d1d4:	3720      	adds	r7, #32
 800d1d6:	46bd      	mov	sp, r7
 800d1d8:	bd80      	pop	{r7, pc}
 800d1da:	bf00      	nop
 800d1dc:	20000630 	.word	0x20000630
 800d1e0:	2000061c 	.word	0x2000061c
 800d1e4:	20000508 	.word	0x20000508
 800d1e8:	20000610 	.word	0x20000610
 800d1ec:	2000050c 	.word	0x2000050c

0800d1f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b084      	sub	sp, #16
 800d1f4:	af00      	add	r7, sp, #0
 800d1f6:	6078      	str	r0, [r7, #4]
 800d1f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d10b      	bne.n	800d218 <vTaskPlaceOnEventList+0x28>
 800d200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d204:	b672      	cpsid	i
 800d206:	f383 8811 	msr	BASEPRI, r3
 800d20a:	f3bf 8f6f 	isb	sy
 800d20e:	f3bf 8f4f 	dsb	sy
 800d212:	b662      	cpsie	i
 800d214:	60fb      	str	r3, [r7, #12]
 800d216:	e7fe      	b.n	800d216 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d218:	4b07      	ldr	r3, [pc, #28]	; (800d238 <vTaskPlaceOnEventList+0x48>)
 800d21a:	681b      	ldr	r3, [r3, #0]
 800d21c:	3318      	adds	r3, #24
 800d21e:	4619      	mov	r1, r3
 800d220:	6878      	ldr	r0, [r7, #4]
 800d222:	f7fe fd94 	bl	800bd4e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d226:	2101      	movs	r1, #1
 800d228:	6838      	ldr	r0, [r7, #0]
 800d22a:	f000 fb9d 	bl	800d968 <prvAddCurrentTaskToDelayedList>
}
 800d22e:	bf00      	nop
 800d230:	3710      	adds	r7, #16
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000508 	.word	0x20000508

0800d23c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d23c:	b580      	push	{r7, lr}
 800d23e:	b086      	sub	sp, #24
 800d240:	af00      	add	r7, sp, #0
 800d242:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d244:	687b      	ldr	r3, [r7, #4]
 800d246:	68db      	ldr	r3, [r3, #12]
 800d248:	68db      	ldr	r3, [r3, #12]
 800d24a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d24c:	693b      	ldr	r3, [r7, #16]
 800d24e:	2b00      	cmp	r3, #0
 800d250:	d10b      	bne.n	800d26a <xTaskRemoveFromEventList+0x2e>
 800d252:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d256:	b672      	cpsid	i
 800d258:	f383 8811 	msr	BASEPRI, r3
 800d25c:	f3bf 8f6f 	isb	sy
 800d260:	f3bf 8f4f 	dsb	sy
 800d264:	b662      	cpsie	i
 800d266:	60fb      	str	r3, [r7, #12]
 800d268:	e7fe      	b.n	800d268 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d26a:	693b      	ldr	r3, [r7, #16]
 800d26c:	3318      	adds	r3, #24
 800d26e:	4618      	mov	r0, r3
 800d270:	f7fe fda6 	bl	800bdc0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d274:	4b1d      	ldr	r3, [pc, #116]	; (800d2ec <xTaskRemoveFromEventList+0xb0>)
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d11c      	bne.n	800d2b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d27c:	693b      	ldr	r3, [r7, #16]
 800d27e:	3304      	adds	r3, #4
 800d280:	4618      	mov	r0, r3
 800d282:	f7fe fd9d 	bl	800bdc0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d286:	693b      	ldr	r3, [r7, #16]
 800d288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28a:	2201      	movs	r2, #1
 800d28c:	409a      	lsls	r2, r3
 800d28e:	4b18      	ldr	r3, [pc, #96]	; (800d2f0 <xTaskRemoveFromEventList+0xb4>)
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	4313      	orrs	r3, r2
 800d294:	4a16      	ldr	r2, [pc, #88]	; (800d2f0 <xTaskRemoveFromEventList+0xb4>)
 800d296:	6013      	str	r3, [r2, #0]
 800d298:	693b      	ldr	r3, [r7, #16]
 800d29a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29c:	4613      	mov	r3, r2
 800d29e:	009b      	lsls	r3, r3, #2
 800d2a0:	4413      	add	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4a13      	ldr	r2, [pc, #76]	; (800d2f4 <xTaskRemoveFromEventList+0xb8>)
 800d2a6:	441a      	add	r2, r3
 800d2a8:	693b      	ldr	r3, [r7, #16]
 800d2aa:	3304      	adds	r3, #4
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	4610      	mov	r0, r2
 800d2b0:	f7fe fd29 	bl	800bd06 <vListInsertEnd>
 800d2b4:	e005      	b.n	800d2c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d2b6:	693b      	ldr	r3, [r7, #16]
 800d2b8:	3318      	adds	r3, #24
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	480e      	ldr	r0, [pc, #56]	; (800d2f8 <xTaskRemoveFromEventList+0xbc>)
 800d2be:	f7fe fd22 	bl	800bd06 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d2c2:	693b      	ldr	r3, [r7, #16]
 800d2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c6:	4b0d      	ldr	r3, [pc, #52]	; (800d2fc <xTaskRemoveFromEventList+0xc0>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2cc:	429a      	cmp	r2, r3
 800d2ce:	d905      	bls.n	800d2dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d2d0:	2301      	movs	r3, #1
 800d2d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d2d4:	4b0a      	ldr	r3, [pc, #40]	; (800d300 <xTaskRemoveFromEventList+0xc4>)
 800d2d6:	2201      	movs	r2, #1
 800d2d8:	601a      	str	r2, [r3, #0]
 800d2da:	e001      	b.n	800d2e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d2e0:	697b      	ldr	r3, [r7, #20]
}
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	3718      	adds	r7, #24
 800d2e6:	46bd      	mov	sp, r7
 800d2e8:	bd80      	pop	{r7, pc}
 800d2ea:	bf00      	nop
 800d2ec:	20000630 	.word	0x20000630
 800d2f0:	20000610 	.word	0x20000610
 800d2f4:	2000050c 	.word	0x2000050c
 800d2f8:	200005c8 	.word	0x200005c8
 800d2fc:	20000508 	.word	0x20000508
 800d300:	2000061c 	.word	0x2000061c

0800d304 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d304:	b480      	push	{r7}
 800d306:	b083      	sub	sp, #12
 800d308:	af00      	add	r7, sp, #0
 800d30a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d30c:	4b06      	ldr	r3, [pc, #24]	; (800d328 <vTaskInternalSetTimeOutState+0x24>)
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d314:	4b05      	ldr	r3, [pc, #20]	; (800d32c <vTaskInternalSetTimeOutState+0x28>)
 800d316:	681a      	ldr	r2, [r3, #0]
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	605a      	str	r2, [r3, #4]
}
 800d31c:	bf00      	nop
 800d31e:	370c      	adds	r7, #12
 800d320:	46bd      	mov	sp, r7
 800d322:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d326:	4770      	bx	lr
 800d328:	20000620 	.word	0x20000620
 800d32c:	2000060c 	.word	0x2000060c

0800d330 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b088      	sub	sp, #32
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	2b00      	cmp	r3, #0
 800d33e:	d10b      	bne.n	800d358 <xTaskCheckForTimeOut+0x28>
 800d340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d344:	b672      	cpsid	i
 800d346:	f383 8811 	msr	BASEPRI, r3
 800d34a:	f3bf 8f6f 	isb	sy
 800d34e:	f3bf 8f4f 	dsb	sy
 800d352:	b662      	cpsie	i
 800d354:	613b      	str	r3, [r7, #16]
 800d356:	e7fe      	b.n	800d356 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d358:	683b      	ldr	r3, [r7, #0]
 800d35a:	2b00      	cmp	r3, #0
 800d35c:	d10b      	bne.n	800d376 <xTaskCheckForTimeOut+0x46>
 800d35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d362:	b672      	cpsid	i
 800d364:	f383 8811 	msr	BASEPRI, r3
 800d368:	f3bf 8f6f 	isb	sy
 800d36c:	f3bf 8f4f 	dsb	sy
 800d370:	b662      	cpsie	i
 800d372:	60fb      	str	r3, [r7, #12]
 800d374:	e7fe      	b.n	800d374 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d376:	f000 fc67 	bl	800dc48 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d37a:	4b1d      	ldr	r3, [pc, #116]	; (800d3f0 <xTaskCheckForTimeOut+0xc0>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	685b      	ldr	r3, [r3, #4]
 800d384:	69ba      	ldr	r2, [r7, #24]
 800d386:	1ad3      	subs	r3, r2, r3
 800d388:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d38a:	683b      	ldr	r3, [r7, #0]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d392:	d102      	bne.n	800d39a <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d394:	2300      	movs	r3, #0
 800d396:	61fb      	str	r3, [r7, #28]
 800d398:	e023      	b.n	800d3e2 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d39a:	687b      	ldr	r3, [r7, #4]
 800d39c:	681a      	ldr	r2, [r3, #0]
 800d39e:	4b15      	ldr	r3, [pc, #84]	; (800d3f4 <xTaskCheckForTimeOut+0xc4>)
 800d3a0:	681b      	ldr	r3, [r3, #0]
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d007      	beq.n	800d3b6 <xTaskCheckForTimeOut+0x86>
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	685b      	ldr	r3, [r3, #4]
 800d3aa:	69ba      	ldr	r2, [r7, #24]
 800d3ac:	429a      	cmp	r2, r3
 800d3ae:	d302      	bcc.n	800d3b6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d3b0:	2301      	movs	r3, #1
 800d3b2:	61fb      	str	r3, [r7, #28]
 800d3b4:	e015      	b.n	800d3e2 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d3b6:	683b      	ldr	r3, [r7, #0]
 800d3b8:	681b      	ldr	r3, [r3, #0]
 800d3ba:	697a      	ldr	r2, [r7, #20]
 800d3bc:	429a      	cmp	r2, r3
 800d3be:	d20b      	bcs.n	800d3d8 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d3c0:	683b      	ldr	r3, [r7, #0]
 800d3c2:	681a      	ldr	r2, [r3, #0]
 800d3c4:	697b      	ldr	r3, [r7, #20]
 800d3c6:	1ad2      	subs	r2, r2, r3
 800d3c8:	683b      	ldr	r3, [r7, #0]
 800d3ca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d3cc:	6878      	ldr	r0, [r7, #4]
 800d3ce:	f7ff ff99 	bl	800d304 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d3d2:	2300      	movs	r3, #0
 800d3d4:	61fb      	str	r3, [r7, #28]
 800d3d6:	e004      	b.n	800d3e2 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d3d8:	683b      	ldr	r3, [r7, #0]
 800d3da:	2200      	movs	r2, #0
 800d3dc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d3de:	2301      	movs	r3, #1
 800d3e0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d3e2:	f000 fc63 	bl	800dcac <vPortExitCritical>

	return xReturn;
 800d3e6:	69fb      	ldr	r3, [r7, #28]
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3720      	adds	r7, #32
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}
 800d3f0:	2000060c 	.word	0x2000060c
 800d3f4:	20000620 	.word	0x20000620

0800d3f8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d3f8:	b480      	push	{r7}
 800d3fa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d3fc:	4b03      	ldr	r3, [pc, #12]	; (800d40c <vTaskMissedYield+0x14>)
 800d3fe:	2201      	movs	r2, #1
 800d400:	601a      	str	r2, [r3, #0]
}
 800d402:	bf00      	nop
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr
 800d40c:	2000061c 	.word	0x2000061c

0800d410 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
 800d416:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d418:	f000 f854 	bl	800d4c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d41c:	4b07      	ldr	r3, [pc, #28]	; (800d43c <prvIdleTask+0x2c>)
 800d41e:	681b      	ldr	r3, [r3, #0]
 800d420:	2b01      	cmp	r3, #1
 800d422:	d907      	bls.n	800d434 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d424:	4b06      	ldr	r3, [pc, #24]	; (800d440 <prvIdleTask+0x30>)
 800d426:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d42a:	601a      	str	r2, [r3, #0]
 800d42c:	f3bf 8f4f 	dsb	sy
 800d430:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d434:	f7f3 f8bc 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d438:	e7ee      	b.n	800d418 <prvIdleTask+0x8>
 800d43a:	bf00      	nop
 800d43c:	2000050c 	.word	0x2000050c
 800d440:	e000ed04 	.word	0xe000ed04

0800d444 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d444:	b580      	push	{r7, lr}
 800d446:	b082      	sub	sp, #8
 800d448:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d44a:	2300      	movs	r3, #0
 800d44c:	607b      	str	r3, [r7, #4]
 800d44e:	e00c      	b.n	800d46a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d450:	687a      	ldr	r2, [r7, #4]
 800d452:	4613      	mov	r3, r2
 800d454:	009b      	lsls	r3, r3, #2
 800d456:	4413      	add	r3, r2
 800d458:	009b      	lsls	r3, r3, #2
 800d45a:	4a12      	ldr	r2, [pc, #72]	; (800d4a4 <prvInitialiseTaskLists+0x60>)
 800d45c:	4413      	add	r3, r2
 800d45e:	4618      	mov	r0, r3
 800d460:	f7fe fc24 	bl	800bcac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	3301      	adds	r3, #1
 800d468:	607b      	str	r3, [r7, #4]
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	2b06      	cmp	r3, #6
 800d46e:	d9ef      	bls.n	800d450 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d470:	480d      	ldr	r0, [pc, #52]	; (800d4a8 <prvInitialiseTaskLists+0x64>)
 800d472:	f7fe fc1b 	bl	800bcac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d476:	480d      	ldr	r0, [pc, #52]	; (800d4ac <prvInitialiseTaskLists+0x68>)
 800d478:	f7fe fc18 	bl	800bcac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d47c:	480c      	ldr	r0, [pc, #48]	; (800d4b0 <prvInitialiseTaskLists+0x6c>)
 800d47e:	f7fe fc15 	bl	800bcac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d482:	480c      	ldr	r0, [pc, #48]	; (800d4b4 <prvInitialiseTaskLists+0x70>)
 800d484:	f7fe fc12 	bl	800bcac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d488:	480b      	ldr	r0, [pc, #44]	; (800d4b8 <prvInitialiseTaskLists+0x74>)
 800d48a:	f7fe fc0f 	bl	800bcac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d48e:	4b0b      	ldr	r3, [pc, #44]	; (800d4bc <prvInitialiseTaskLists+0x78>)
 800d490:	4a05      	ldr	r2, [pc, #20]	; (800d4a8 <prvInitialiseTaskLists+0x64>)
 800d492:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d494:	4b0a      	ldr	r3, [pc, #40]	; (800d4c0 <prvInitialiseTaskLists+0x7c>)
 800d496:	4a05      	ldr	r2, [pc, #20]	; (800d4ac <prvInitialiseTaskLists+0x68>)
 800d498:	601a      	str	r2, [r3, #0]
}
 800d49a:	bf00      	nop
 800d49c:	3708      	adds	r7, #8
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	2000050c 	.word	0x2000050c
 800d4a8:	20000598 	.word	0x20000598
 800d4ac:	200005ac 	.word	0x200005ac
 800d4b0:	200005c8 	.word	0x200005c8
 800d4b4:	200005dc 	.word	0x200005dc
 800d4b8:	200005f4 	.word	0x200005f4
 800d4bc:	200005c0 	.word	0x200005c0
 800d4c0:	200005c4 	.word	0x200005c4

0800d4c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b082      	sub	sp, #8
 800d4c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d4ca:	e019      	b.n	800d500 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d4cc:	f000 fbbc 	bl	800dc48 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4d0:	4b0f      	ldr	r3, [pc, #60]	; (800d510 <prvCheckTasksWaitingTermination+0x4c>)
 800d4d2:	68db      	ldr	r3, [r3, #12]
 800d4d4:	68db      	ldr	r3, [r3, #12]
 800d4d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	3304      	adds	r3, #4
 800d4dc:	4618      	mov	r0, r3
 800d4de:	f7fe fc6f 	bl	800bdc0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d4e2:	4b0c      	ldr	r3, [pc, #48]	; (800d514 <prvCheckTasksWaitingTermination+0x50>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	3b01      	subs	r3, #1
 800d4e8:	4a0a      	ldr	r2, [pc, #40]	; (800d514 <prvCheckTasksWaitingTermination+0x50>)
 800d4ea:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d4ec:	4b0a      	ldr	r3, [pc, #40]	; (800d518 <prvCheckTasksWaitingTermination+0x54>)
 800d4ee:	681b      	ldr	r3, [r3, #0]
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	4a09      	ldr	r2, [pc, #36]	; (800d518 <prvCheckTasksWaitingTermination+0x54>)
 800d4f4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d4f6:	f000 fbd9 	bl	800dcac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d4fa:	6878      	ldr	r0, [r7, #4]
 800d4fc:	f000 f80e 	bl	800d51c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d500:	4b05      	ldr	r3, [pc, #20]	; (800d518 <prvCheckTasksWaitingTermination+0x54>)
 800d502:	681b      	ldr	r3, [r3, #0]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d1e1      	bne.n	800d4cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d508:	bf00      	nop
 800d50a:	3708      	adds	r7, #8
 800d50c:	46bd      	mov	sp, r7
 800d50e:	bd80      	pop	{r7, pc}
 800d510:	200005dc 	.word	0x200005dc
 800d514:	20000608 	.word	0x20000608
 800d518:	200005f0 	.word	0x200005f0

0800d51c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d51c:	b580      	push	{r7, lr}
 800d51e:	b084      	sub	sp, #16
 800d520:	af00      	add	r7, sp, #0
 800d522:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d52a:	2b00      	cmp	r3, #0
 800d52c:	d108      	bne.n	800d540 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d532:	4618      	mov	r0, r3
 800d534:	f000 fd34 	bl	800dfa0 <vPortFree>
				vPortFree( pxTCB );
 800d538:	6878      	ldr	r0, [r7, #4]
 800d53a:	f000 fd31 	bl	800dfa0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d53e:	e019      	b.n	800d574 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d546:	2b01      	cmp	r3, #1
 800d548:	d103      	bne.n	800d552 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d54a:	6878      	ldr	r0, [r7, #4]
 800d54c:	f000 fd28 	bl	800dfa0 <vPortFree>
	}
 800d550:	e010      	b.n	800d574 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d558:	2b02      	cmp	r3, #2
 800d55a:	d00b      	beq.n	800d574 <prvDeleteTCB+0x58>
 800d55c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d560:	b672      	cpsid	i
 800d562:	f383 8811 	msr	BASEPRI, r3
 800d566:	f3bf 8f6f 	isb	sy
 800d56a:	f3bf 8f4f 	dsb	sy
 800d56e:	b662      	cpsie	i
 800d570:	60fb      	str	r3, [r7, #12]
 800d572:	e7fe      	b.n	800d572 <prvDeleteTCB+0x56>
	}
 800d574:	bf00      	nop
 800d576:	3710      	adds	r7, #16
 800d578:	46bd      	mov	sp, r7
 800d57a:	bd80      	pop	{r7, pc}

0800d57c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d57c:	b480      	push	{r7}
 800d57e:	b083      	sub	sp, #12
 800d580:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d582:	4b0c      	ldr	r3, [pc, #48]	; (800d5b4 <prvResetNextTaskUnblockTime+0x38>)
 800d584:	681b      	ldr	r3, [r3, #0]
 800d586:	681b      	ldr	r3, [r3, #0]
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d104      	bne.n	800d596 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d58c:	4b0a      	ldr	r3, [pc, #40]	; (800d5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800d58e:	f04f 32ff 	mov.w	r2, #4294967295
 800d592:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d594:	e008      	b.n	800d5a8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d596:	4b07      	ldr	r3, [pc, #28]	; (800d5b4 <prvResetNextTaskUnblockTime+0x38>)
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	68db      	ldr	r3, [r3, #12]
 800d59c:	68db      	ldr	r3, [r3, #12]
 800d59e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	4a04      	ldr	r2, [pc, #16]	; (800d5b8 <prvResetNextTaskUnblockTime+0x3c>)
 800d5a6:	6013      	str	r3, [r2, #0]
}
 800d5a8:	bf00      	nop
 800d5aa:	370c      	adds	r7, #12
 800d5ac:	46bd      	mov	sp, r7
 800d5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5b2:	4770      	bx	lr
 800d5b4:	200005c0 	.word	0x200005c0
 800d5b8:	20000628 	.word	0x20000628

0800d5bc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d5bc:	b480      	push	{r7}
 800d5be:	b083      	sub	sp, #12
 800d5c0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d5c2:	4b0b      	ldr	r3, [pc, #44]	; (800d5f0 <xTaskGetSchedulerState+0x34>)
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	2b00      	cmp	r3, #0
 800d5c8:	d102      	bne.n	800d5d0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d5ca:	2301      	movs	r3, #1
 800d5cc:	607b      	str	r3, [r7, #4]
 800d5ce:	e008      	b.n	800d5e2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d5d0:	4b08      	ldr	r3, [pc, #32]	; (800d5f4 <xTaskGetSchedulerState+0x38>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b00      	cmp	r3, #0
 800d5d6:	d102      	bne.n	800d5de <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d5d8:	2302      	movs	r3, #2
 800d5da:	607b      	str	r3, [r7, #4]
 800d5dc:	e001      	b.n	800d5e2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d5de:	2300      	movs	r3, #0
 800d5e0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d5e2:	687b      	ldr	r3, [r7, #4]
	}
 800d5e4:	4618      	mov	r0, r3
 800d5e6:	370c      	adds	r7, #12
 800d5e8:	46bd      	mov	sp, r7
 800d5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5ee:	4770      	bx	lr
 800d5f0:	20000614 	.word	0x20000614
 800d5f4:	20000630 	.word	0x20000630

0800d5f8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d600:	687b      	ldr	r3, [r7, #4]
 800d602:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d604:	2300      	movs	r3, #0
 800d606:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d069      	beq.n	800d6e2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d60e:	68bb      	ldr	r3, [r7, #8]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	4b36      	ldr	r3, [pc, #216]	; (800d6ec <xTaskPriorityInherit+0xf4>)
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d618:	429a      	cmp	r2, r3
 800d61a:	d259      	bcs.n	800d6d0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	699b      	ldr	r3, [r3, #24]
 800d620:	2b00      	cmp	r3, #0
 800d622:	db06      	blt.n	800d632 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d624:	4b31      	ldr	r3, [pc, #196]	; (800d6ec <xTaskPriorityInherit+0xf4>)
 800d626:	681b      	ldr	r3, [r3, #0]
 800d628:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d62a:	f1c3 0207 	rsb	r2, r3, #7
 800d62e:	68bb      	ldr	r3, [r7, #8]
 800d630:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d632:	68bb      	ldr	r3, [r7, #8]
 800d634:	6959      	ldr	r1, [r3, #20]
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d63a:	4613      	mov	r3, r2
 800d63c:	009b      	lsls	r3, r3, #2
 800d63e:	4413      	add	r3, r2
 800d640:	009b      	lsls	r3, r3, #2
 800d642:	4a2b      	ldr	r2, [pc, #172]	; (800d6f0 <xTaskPriorityInherit+0xf8>)
 800d644:	4413      	add	r3, r2
 800d646:	4299      	cmp	r1, r3
 800d648:	d13a      	bne.n	800d6c0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d64a:	68bb      	ldr	r3, [r7, #8]
 800d64c:	3304      	adds	r3, #4
 800d64e:	4618      	mov	r0, r3
 800d650:	f7fe fbb6 	bl	800bdc0 <uxListRemove>
 800d654:	4603      	mov	r3, r0
 800d656:	2b00      	cmp	r3, #0
 800d658:	d115      	bne.n	800d686 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d65a:	68bb      	ldr	r3, [r7, #8]
 800d65c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d65e:	4924      	ldr	r1, [pc, #144]	; (800d6f0 <xTaskPriorityInherit+0xf8>)
 800d660:	4613      	mov	r3, r2
 800d662:	009b      	lsls	r3, r3, #2
 800d664:	4413      	add	r3, r2
 800d666:	009b      	lsls	r3, r3, #2
 800d668:	440b      	add	r3, r1
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d10a      	bne.n	800d686 <xTaskPriorityInherit+0x8e>
 800d670:	68bb      	ldr	r3, [r7, #8]
 800d672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d674:	2201      	movs	r2, #1
 800d676:	fa02 f303 	lsl.w	r3, r2, r3
 800d67a:	43da      	mvns	r2, r3
 800d67c:	4b1d      	ldr	r3, [pc, #116]	; (800d6f4 <xTaskPriorityInherit+0xfc>)
 800d67e:	681b      	ldr	r3, [r3, #0]
 800d680:	4013      	ands	r3, r2
 800d682:	4a1c      	ldr	r2, [pc, #112]	; (800d6f4 <xTaskPriorityInherit+0xfc>)
 800d684:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d686:	4b19      	ldr	r3, [pc, #100]	; (800d6ec <xTaskPriorityInherit+0xf4>)
 800d688:	681b      	ldr	r3, [r3, #0]
 800d68a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d68c:	68bb      	ldr	r3, [r7, #8]
 800d68e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d694:	2201      	movs	r2, #1
 800d696:	409a      	lsls	r2, r3
 800d698:	4b16      	ldr	r3, [pc, #88]	; (800d6f4 <xTaskPriorityInherit+0xfc>)
 800d69a:	681b      	ldr	r3, [r3, #0]
 800d69c:	4313      	orrs	r3, r2
 800d69e:	4a15      	ldr	r2, [pc, #84]	; (800d6f4 <xTaskPriorityInherit+0xfc>)
 800d6a0:	6013      	str	r3, [r2, #0]
 800d6a2:	68bb      	ldr	r3, [r7, #8]
 800d6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6a6:	4613      	mov	r3, r2
 800d6a8:	009b      	lsls	r3, r3, #2
 800d6aa:	4413      	add	r3, r2
 800d6ac:	009b      	lsls	r3, r3, #2
 800d6ae:	4a10      	ldr	r2, [pc, #64]	; (800d6f0 <xTaskPriorityInherit+0xf8>)
 800d6b0:	441a      	add	r2, r3
 800d6b2:	68bb      	ldr	r3, [r7, #8]
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	4619      	mov	r1, r3
 800d6b8:	4610      	mov	r0, r2
 800d6ba:	f7fe fb24 	bl	800bd06 <vListInsertEnd>
 800d6be:	e004      	b.n	800d6ca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d6c0:	4b0a      	ldr	r3, [pc, #40]	; (800d6ec <xTaskPriorityInherit+0xf4>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6c6:	68bb      	ldr	r3, [r7, #8]
 800d6c8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	60fb      	str	r3, [r7, #12]
 800d6ce:	e008      	b.n	800d6e2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d6d0:	68bb      	ldr	r3, [r7, #8]
 800d6d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6d4:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <xTaskPriorityInherit+0xf4>)
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d201      	bcs.n	800d6e2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d6de:	2301      	movs	r3, #1
 800d6e0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d6e2:	68fb      	ldr	r3, [r7, #12]
	}
 800d6e4:	4618      	mov	r0, r3
 800d6e6:	3710      	adds	r7, #16
 800d6e8:	46bd      	mov	sp, r7
 800d6ea:	bd80      	pop	{r7, pc}
 800d6ec:	20000508 	.word	0x20000508
 800d6f0:	2000050c 	.word	0x2000050c
 800d6f4:	20000610 	.word	0x20000610

0800d6f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d6f8:	b580      	push	{r7, lr}
 800d6fa:	b086      	sub	sp, #24
 800d6fc:	af00      	add	r7, sp, #0
 800d6fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d704:	2300      	movs	r3, #0
 800d706:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d708:	687b      	ldr	r3, [r7, #4]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d070      	beq.n	800d7f0 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d70e:	4b3b      	ldr	r3, [pc, #236]	; (800d7fc <xTaskPriorityDisinherit+0x104>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	693a      	ldr	r2, [r7, #16]
 800d714:	429a      	cmp	r2, r3
 800d716:	d00b      	beq.n	800d730 <xTaskPriorityDisinherit+0x38>
 800d718:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71c:	b672      	cpsid	i
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	b662      	cpsie	i
 800d72c:	60fb      	str	r3, [r7, #12]
 800d72e:	e7fe      	b.n	800d72e <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d730:	693b      	ldr	r3, [r7, #16]
 800d732:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d734:	2b00      	cmp	r3, #0
 800d736:	d10b      	bne.n	800d750 <xTaskPriorityDisinherit+0x58>
 800d738:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d73c:	b672      	cpsid	i
 800d73e:	f383 8811 	msr	BASEPRI, r3
 800d742:	f3bf 8f6f 	isb	sy
 800d746:	f3bf 8f4f 	dsb	sy
 800d74a:	b662      	cpsie	i
 800d74c:	60bb      	str	r3, [r7, #8]
 800d74e:	e7fe      	b.n	800d74e <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d750:	693b      	ldr	r3, [r7, #16]
 800d752:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d754:	1e5a      	subs	r2, r3, #1
 800d756:	693b      	ldr	r3, [r7, #16]
 800d758:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d75a:	693b      	ldr	r3, [r7, #16]
 800d75c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d75e:	693b      	ldr	r3, [r7, #16]
 800d760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d762:	429a      	cmp	r2, r3
 800d764:	d044      	beq.n	800d7f0 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d766:	693b      	ldr	r3, [r7, #16]
 800d768:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d76a:	2b00      	cmp	r3, #0
 800d76c:	d140      	bne.n	800d7f0 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d76e:	693b      	ldr	r3, [r7, #16]
 800d770:	3304      	adds	r3, #4
 800d772:	4618      	mov	r0, r3
 800d774:	f7fe fb24 	bl	800bdc0 <uxListRemove>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d115      	bne.n	800d7aa <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d77e:	693b      	ldr	r3, [r7, #16]
 800d780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d782:	491f      	ldr	r1, [pc, #124]	; (800d800 <xTaskPriorityDisinherit+0x108>)
 800d784:	4613      	mov	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	4413      	add	r3, r2
 800d78a:	009b      	lsls	r3, r3, #2
 800d78c:	440b      	add	r3, r1
 800d78e:	681b      	ldr	r3, [r3, #0]
 800d790:	2b00      	cmp	r3, #0
 800d792:	d10a      	bne.n	800d7aa <xTaskPriorityDisinherit+0xb2>
 800d794:	693b      	ldr	r3, [r7, #16]
 800d796:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d798:	2201      	movs	r2, #1
 800d79a:	fa02 f303 	lsl.w	r3, r2, r3
 800d79e:	43da      	mvns	r2, r3
 800d7a0:	4b18      	ldr	r3, [pc, #96]	; (800d804 <xTaskPriorityDisinherit+0x10c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4013      	ands	r3, r2
 800d7a6:	4a17      	ldr	r2, [pc, #92]	; (800d804 <xTaskPriorityDisinherit+0x10c>)
 800d7a8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d7aa:	693b      	ldr	r3, [r7, #16]
 800d7ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d7ae:	693b      	ldr	r3, [r7, #16]
 800d7b0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7b2:	693b      	ldr	r3, [r7, #16]
 800d7b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7b6:	f1c3 0207 	rsb	r2, r3, #7
 800d7ba:	693b      	ldr	r3, [r7, #16]
 800d7bc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d7be:	693b      	ldr	r3, [r7, #16]
 800d7c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7c2:	2201      	movs	r2, #1
 800d7c4:	409a      	lsls	r2, r3
 800d7c6:	4b0f      	ldr	r3, [pc, #60]	; (800d804 <xTaskPriorityDisinherit+0x10c>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	4313      	orrs	r3, r2
 800d7cc:	4a0d      	ldr	r2, [pc, #52]	; (800d804 <xTaskPriorityDisinherit+0x10c>)
 800d7ce:	6013      	str	r3, [r2, #0]
 800d7d0:	693b      	ldr	r3, [r7, #16]
 800d7d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7d4:	4613      	mov	r3, r2
 800d7d6:	009b      	lsls	r3, r3, #2
 800d7d8:	4413      	add	r3, r2
 800d7da:	009b      	lsls	r3, r3, #2
 800d7dc:	4a08      	ldr	r2, [pc, #32]	; (800d800 <xTaskPriorityDisinherit+0x108>)
 800d7de:	441a      	add	r2, r3
 800d7e0:	693b      	ldr	r3, [r7, #16]
 800d7e2:	3304      	adds	r3, #4
 800d7e4:	4619      	mov	r1, r3
 800d7e6:	4610      	mov	r0, r2
 800d7e8:	f7fe fa8d 	bl	800bd06 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d7ec:	2301      	movs	r3, #1
 800d7ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d7f0:	697b      	ldr	r3, [r7, #20]
	}
 800d7f2:	4618      	mov	r0, r3
 800d7f4:	3718      	adds	r7, #24
 800d7f6:	46bd      	mov	sp, r7
 800d7f8:	bd80      	pop	{r7, pc}
 800d7fa:	bf00      	nop
 800d7fc:	20000508 	.word	0x20000508
 800d800:	2000050c 	.word	0x2000050c
 800d804:	20000610 	.word	0x20000610

0800d808 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af00      	add	r7, sp, #0
 800d80e:	6078      	str	r0, [r7, #4]
 800d810:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d816:	2301      	movs	r3, #1
 800d818:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d81a:	687b      	ldr	r3, [r7, #4]
 800d81c:	2b00      	cmp	r3, #0
 800d81e:	f000 8085 	beq.w	800d92c <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d822:	69bb      	ldr	r3, [r7, #24]
 800d824:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d826:	2b00      	cmp	r3, #0
 800d828:	d10b      	bne.n	800d842 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d82a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d82e:	b672      	cpsid	i
 800d830:	f383 8811 	msr	BASEPRI, r3
 800d834:	f3bf 8f6f 	isb	sy
 800d838:	f3bf 8f4f 	dsb	sy
 800d83c:	b662      	cpsie	i
 800d83e:	60fb      	str	r3, [r7, #12]
 800d840:	e7fe      	b.n	800d840 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d842:	69bb      	ldr	r3, [r7, #24]
 800d844:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d846:	683a      	ldr	r2, [r7, #0]
 800d848:	429a      	cmp	r2, r3
 800d84a:	d902      	bls.n	800d852 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d84c:	683b      	ldr	r3, [r7, #0]
 800d84e:	61fb      	str	r3, [r7, #28]
 800d850:	e002      	b.n	800d858 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d852:	69bb      	ldr	r3, [r7, #24]
 800d854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d856:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d858:	69bb      	ldr	r3, [r7, #24]
 800d85a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d85c:	69fa      	ldr	r2, [r7, #28]
 800d85e:	429a      	cmp	r2, r3
 800d860:	d064      	beq.n	800d92c <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d862:	69bb      	ldr	r3, [r7, #24]
 800d864:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d866:	697a      	ldr	r2, [r7, #20]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d15f      	bne.n	800d92c <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d86c:	4b31      	ldr	r3, [pc, #196]	; (800d934 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	69ba      	ldr	r2, [r7, #24]
 800d872:	429a      	cmp	r2, r3
 800d874:	d10b      	bne.n	800d88e <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d876:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d87a:	b672      	cpsid	i
 800d87c:	f383 8811 	msr	BASEPRI, r3
 800d880:	f3bf 8f6f 	isb	sy
 800d884:	f3bf 8f4f 	dsb	sy
 800d888:	b662      	cpsie	i
 800d88a:	60bb      	str	r3, [r7, #8]
 800d88c:	e7fe      	b.n	800d88c <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d88e:	69bb      	ldr	r3, [r7, #24]
 800d890:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d892:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d894:	69bb      	ldr	r3, [r7, #24]
 800d896:	69fa      	ldr	r2, [r7, #28]
 800d898:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d89a:	69bb      	ldr	r3, [r7, #24]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	db04      	blt.n	800d8ac <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d8a2:	69fb      	ldr	r3, [r7, #28]
 800d8a4:	f1c3 0207 	rsb	r2, r3, #7
 800d8a8:	69bb      	ldr	r3, [r7, #24]
 800d8aa:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	6959      	ldr	r1, [r3, #20]
 800d8b0:	693a      	ldr	r2, [r7, #16]
 800d8b2:	4613      	mov	r3, r2
 800d8b4:	009b      	lsls	r3, r3, #2
 800d8b6:	4413      	add	r3, r2
 800d8b8:	009b      	lsls	r3, r3, #2
 800d8ba:	4a1f      	ldr	r2, [pc, #124]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d8bc:	4413      	add	r3, r2
 800d8be:	4299      	cmp	r1, r3
 800d8c0:	d134      	bne.n	800d92c <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c2:	69bb      	ldr	r3, [r7, #24]
 800d8c4:	3304      	adds	r3, #4
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f7fe fa7a 	bl	800bdc0 <uxListRemove>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d115      	bne.n	800d8fe <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d8d2:	69bb      	ldr	r3, [r7, #24]
 800d8d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d8d6:	4918      	ldr	r1, [pc, #96]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d8d8:	4613      	mov	r3, r2
 800d8da:	009b      	lsls	r3, r3, #2
 800d8dc:	4413      	add	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	440b      	add	r3, r1
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	2b00      	cmp	r3, #0
 800d8e6:	d10a      	bne.n	800d8fe <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d8e8:	69bb      	ldr	r3, [r7, #24]
 800d8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8ec:	2201      	movs	r2, #1
 800d8ee:	fa02 f303 	lsl.w	r3, r2, r3
 800d8f2:	43da      	mvns	r2, r3
 800d8f4:	4b11      	ldr	r3, [pc, #68]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d8f6:	681b      	ldr	r3, [r3, #0]
 800d8f8:	4013      	ands	r3, r2
 800d8fa:	4a10      	ldr	r2, [pc, #64]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d8fc:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d8fe:	69bb      	ldr	r3, [r7, #24]
 800d900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d902:	2201      	movs	r2, #1
 800d904:	409a      	lsls	r2, r3
 800d906:	4b0d      	ldr	r3, [pc, #52]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4313      	orrs	r3, r2
 800d90c:	4a0b      	ldr	r2, [pc, #44]	; (800d93c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d90e:	6013      	str	r3, [r2, #0]
 800d910:	69bb      	ldr	r3, [r7, #24]
 800d912:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d914:	4613      	mov	r3, r2
 800d916:	009b      	lsls	r3, r3, #2
 800d918:	4413      	add	r3, r2
 800d91a:	009b      	lsls	r3, r3, #2
 800d91c:	4a06      	ldr	r2, [pc, #24]	; (800d938 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d91e:	441a      	add	r2, r3
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	3304      	adds	r3, #4
 800d924:	4619      	mov	r1, r3
 800d926:	4610      	mov	r0, r2
 800d928:	f7fe f9ed 	bl	800bd06 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d92c:	bf00      	nop
 800d92e:	3720      	adds	r7, #32
 800d930:	46bd      	mov	sp, r7
 800d932:	bd80      	pop	{r7, pc}
 800d934:	20000508 	.word	0x20000508
 800d938:	2000050c 	.word	0x2000050c
 800d93c:	20000610 	.word	0x20000610

0800d940 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d940:	b480      	push	{r7}
 800d942:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d944:	4b07      	ldr	r3, [pc, #28]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b00      	cmp	r3, #0
 800d94a:	d004      	beq.n	800d956 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d94c:	4b05      	ldr	r3, [pc, #20]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d94e:	681b      	ldr	r3, [r3, #0]
 800d950:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d952:	3201      	adds	r2, #1
 800d954:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d956:	4b03      	ldr	r3, [pc, #12]	; (800d964 <pvTaskIncrementMutexHeldCount+0x24>)
 800d958:	681b      	ldr	r3, [r3, #0]
	}
 800d95a:	4618      	mov	r0, r3
 800d95c:	46bd      	mov	sp, r7
 800d95e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d962:	4770      	bx	lr
 800d964:	20000508 	.word	0x20000508

0800d968 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d968:	b580      	push	{r7, lr}
 800d96a:	b084      	sub	sp, #16
 800d96c:	af00      	add	r7, sp, #0
 800d96e:	6078      	str	r0, [r7, #4]
 800d970:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d972:	4b29      	ldr	r3, [pc, #164]	; (800da18 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d974:	681b      	ldr	r3, [r3, #0]
 800d976:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d978:	4b28      	ldr	r3, [pc, #160]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	3304      	adds	r3, #4
 800d97e:	4618      	mov	r0, r3
 800d980:	f7fe fa1e 	bl	800bdc0 <uxListRemove>
 800d984:	4603      	mov	r3, r0
 800d986:	2b00      	cmp	r3, #0
 800d988:	d10b      	bne.n	800d9a2 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d98a:	4b24      	ldr	r3, [pc, #144]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d98c:	681b      	ldr	r3, [r3, #0]
 800d98e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d990:	2201      	movs	r2, #1
 800d992:	fa02 f303 	lsl.w	r3, r2, r3
 800d996:	43da      	mvns	r2, r3
 800d998:	4b21      	ldr	r3, [pc, #132]	; (800da20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d99a:	681b      	ldr	r3, [r3, #0]
 800d99c:	4013      	ands	r3, r2
 800d99e:	4a20      	ldr	r2, [pc, #128]	; (800da20 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d9a0:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9a8:	d10a      	bne.n	800d9c0 <prvAddCurrentTaskToDelayedList+0x58>
 800d9aa:	683b      	ldr	r3, [r7, #0]
 800d9ac:	2b00      	cmp	r3, #0
 800d9ae:	d007      	beq.n	800d9c0 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9b0:	4b1a      	ldr	r3, [pc, #104]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	3304      	adds	r3, #4
 800d9b6:	4619      	mov	r1, r3
 800d9b8:	481a      	ldr	r0, [pc, #104]	; (800da24 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d9ba:	f7fe f9a4 	bl	800bd06 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d9be:	e026      	b.n	800da0e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d9c0:	68fa      	ldr	r2, [r7, #12]
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4413      	add	r3, r2
 800d9c6:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d9c8:	4b14      	ldr	r3, [pc, #80]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9ca:	681b      	ldr	r3, [r3, #0]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d9d0:	68ba      	ldr	r2, [r7, #8]
 800d9d2:	68fb      	ldr	r3, [r7, #12]
 800d9d4:	429a      	cmp	r2, r3
 800d9d6:	d209      	bcs.n	800d9ec <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9d8:	4b13      	ldr	r3, [pc, #76]	; (800da28 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d9da:	681a      	ldr	r2, [r3, #0]
 800d9dc:	4b0f      	ldr	r3, [pc, #60]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	3304      	adds	r3, #4
 800d9e2:	4619      	mov	r1, r3
 800d9e4:	4610      	mov	r0, r2
 800d9e6:	f7fe f9b2 	bl	800bd4e <vListInsert>
}
 800d9ea:	e010      	b.n	800da0e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d9ec:	4b0f      	ldr	r3, [pc, #60]	; (800da2c <prvAddCurrentTaskToDelayedList+0xc4>)
 800d9ee:	681a      	ldr	r2, [r3, #0]
 800d9f0:	4b0a      	ldr	r3, [pc, #40]	; (800da1c <prvAddCurrentTaskToDelayedList+0xb4>)
 800d9f2:	681b      	ldr	r3, [r3, #0]
 800d9f4:	3304      	adds	r3, #4
 800d9f6:	4619      	mov	r1, r3
 800d9f8:	4610      	mov	r0, r2
 800d9fa:	f7fe f9a8 	bl	800bd4e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d9fe:	4b0c      	ldr	r3, [pc, #48]	; (800da30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	68ba      	ldr	r2, [r7, #8]
 800da04:	429a      	cmp	r2, r3
 800da06:	d202      	bcs.n	800da0e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800da08:	4a09      	ldr	r2, [pc, #36]	; (800da30 <prvAddCurrentTaskToDelayedList+0xc8>)
 800da0a:	68bb      	ldr	r3, [r7, #8]
 800da0c:	6013      	str	r3, [r2, #0]
}
 800da0e:	bf00      	nop
 800da10:	3710      	adds	r7, #16
 800da12:	46bd      	mov	sp, r7
 800da14:	bd80      	pop	{r7, pc}
 800da16:	bf00      	nop
 800da18:	2000060c 	.word	0x2000060c
 800da1c:	20000508 	.word	0x20000508
 800da20:	20000610 	.word	0x20000610
 800da24:	200005f4 	.word	0x200005f4
 800da28:	200005c4 	.word	0x200005c4
 800da2c:	200005c0 	.word	0x200005c0
 800da30:	20000628 	.word	0x20000628

0800da34 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800da34:	b480      	push	{r7}
 800da36:	b085      	sub	sp, #20
 800da38:	af00      	add	r7, sp, #0
 800da3a:	60f8      	str	r0, [r7, #12]
 800da3c:	60b9      	str	r1, [r7, #8]
 800da3e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800da40:	68fb      	ldr	r3, [r7, #12]
 800da42:	3b04      	subs	r3, #4
 800da44:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800da4c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da4e:	68fb      	ldr	r3, [r7, #12]
 800da50:	3b04      	subs	r3, #4
 800da52:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800da54:	68bb      	ldr	r3, [r7, #8]
 800da56:	f023 0201 	bic.w	r2, r3, #1
 800da5a:	68fb      	ldr	r3, [r7, #12]
 800da5c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	3b04      	subs	r3, #4
 800da62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800da64:	4a0c      	ldr	r2, [pc, #48]	; (800da98 <pxPortInitialiseStack+0x64>)
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	3b14      	subs	r3, #20
 800da6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800da70:	687a      	ldr	r2, [r7, #4]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800da76:	68fb      	ldr	r3, [r7, #12]
 800da78:	3b04      	subs	r3, #4
 800da7a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	f06f 0202 	mvn.w	r2, #2
 800da82:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800da84:	68fb      	ldr	r3, [r7, #12]
 800da86:	3b20      	subs	r3, #32
 800da88:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800da8a:	68fb      	ldr	r3, [r7, #12]
}
 800da8c:	4618      	mov	r0, r3
 800da8e:	3714      	adds	r7, #20
 800da90:	46bd      	mov	sp, r7
 800da92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da96:	4770      	bx	lr
 800da98:	0800da9d 	.word	0x0800da9d

0800da9c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800da9c:	b480      	push	{r7}
 800da9e:	b085      	sub	sp, #20
 800daa0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800daa2:	2300      	movs	r3, #0
 800daa4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800daa6:	4b13      	ldr	r3, [pc, #76]	; (800daf4 <prvTaskExitError+0x58>)
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800daae:	d00b      	beq.n	800dac8 <prvTaskExitError+0x2c>
 800dab0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dab4:	b672      	cpsid	i
 800dab6:	f383 8811 	msr	BASEPRI, r3
 800daba:	f3bf 8f6f 	isb	sy
 800dabe:	f3bf 8f4f 	dsb	sy
 800dac2:	b662      	cpsie	i
 800dac4:	60fb      	str	r3, [r7, #12]
 800dac6:	e7fe      	b.n	800dac6 <prvTaskExitError+0x2a>
 800dac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dacc:	b672      	cpsid	i
 800dace:	f383 8811 	msr	BASEPRI, r3
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	f3bf 8f4f 	dsb	sy
 800dada:	b662      	cpsie	i
 800dadc:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800dade:	bf00      	nop
 800dae0:	687b      	ldr	r3, [r7, #4]
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d0fc      	beq.n	800dae0 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800dae6:	bf00      	nop
 800dae8:	3714      	adds	r7, #20
 800daea:	46bd      	mov	sp, r7
 800daec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf0:	4770      	bx	lr
 800daf2:	bf00      	nop
 800daf4:	20000058 	.word	0x20000058
	...

0800db00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db00:	4b07      	ldr	r3, [pc, #28]	; (800db20 <pxCurrentTCBConst2>)
 800db02:	6819      	ldr	r1, [r3, #0]
 800db04:	6808      	ldr	r0, [r1, #0]
 800db06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0a:	f380 8809 	msr	PSP, r0
 800db0e:	f3bf 8f6f 	isb	sy
 800db12:	f04f 0000 	mov.w	r0, #0
 800db16:	f380 8811 	msr	BASEPRI, r0
 800db1a:	4770      	bx	lr
 800db1c:	f3af 8000 	nop.w

0800db20 <pxCurrentTCBConst2>:
 800db20:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800db24:	bf00      	nop
 800db26:	bf00      	nop

0800db28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800db28:	4808      	ldr	r0, [pc, #32]	; (800db4c <prvPortStartFirstTask+0x24>)
 800db2a:	6800      	ldr	r0, [r0, #0]
 800db2c:	6800      	ldr	r0, [r0, #0]
 800db2e:	f380 8808 	msr	MSP, r0
 800db32:	f04f 0000 	mov.w	r0, #0
 800db36:	f380 8814 	msr	CONTROL, r0
 800db3a:	b662      	cpsie	i
 800db3c:	b661      	cpsie	f
 800db3e:	f3bf 8f4f 	dsb	sy
 800db42:	f3bf 8f6f 	isb	sy
 800db46:	df00      	svc	0
 800db48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800db4a:	bf00      	nop
 800db4c:	e000ed08 	.word	0xe000ed08

0800db50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800db50:	b580      	push	{r7, lr}
 800db52:	b084      	sub	sp, #16
 800db54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800db56:	4b36      	ldr	r3, [pc, #216]	; (800dc30 <xPortStartScheduler+0xe0>)
 800db58:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	22ff      	movs	r2, #255	; 0xff
 800db66:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800db68:	68fb      	ldr	r3, [r7, #12]
 800db6a:	781b      	ldrb	r3, [r3, #0]
 800db6c:	b2db      	uxtb	r3, r3
 800db6e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800db70:	78fb      	ldrb	r3, [r7, #3]
 800db72:	b2db      	uxtb	r3, r3
 800db74:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800db78:	b2da      	uxtb	r2, r3
 800db7a:	4b2e      	ldr	r3, [pc, #184]	; (800dc34 <xPortStartScheduler+0xe4>)
 800db7c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800db7e:	4b2e      	ldr	r3, [pc, #184]	; (800dc38 <xPortStartScheduler+0xe8>)
 800db80:	2207      	movs	r2, #7
 800db82:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db84:	e009      	b.n	800db9a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800db86:	4b2c      	ldr	r3, [pc, #176]	; (800dc38 <xPortStartScheduler+0xe8>)
 800db88:	681b      	ldr	r3, [r3, #0]
 800db8a:	3b01      	subs	r3, #1
 800db8c:	4a2a      	ldr	r2, [pc, #168]	; (800dc38 <xPortStartScheduler+0xe8>)
 800db8e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800db90:	78fb      	ldrb	r3, [r7, #3]
 800db92:	b2db      	uxtb	r3, r3
 800db94:	005b      	lsls	r3, r3, #1
 800db96:	b2db      	uxtb	r3, r3
 800db98:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800db9a:	78fb      	ldrb	r3, [r7, #3]
 800db9c:	b2db      	uxtb	r3, r3
 800db9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dba2:	2b80      	cmp	r3, #128	; 0x80
 800dba4:	d0ef      	beq.n	800db86 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dba6:	4b24      	ldr	r3, [pc, #144]	; (800dc38 <xPortStartScheduler+0xe8>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	f1c3 0307 	rsb	r3, r3, #7
 800dbae:	2b04      	cmp	r3, #4
 800dbb0:	d00b      	beq.n	800dbca <xPortStartScheduler+0x7a>
 800dbb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb6:	b672      	cpsid	i
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	b662      	cpsie	i
 800dbc6:	60bb      	str	r3, [r7, #8]
 800dbc8:	e7fe      	b.n	800dbc8 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dbca:	4b1b      	ldr	r3, [pc, #108]	; (800dc38 <xPortStartScheduler+0xe8>)
 800dbcc:	681b      	ldr	r3, [r3, #0]
 800dbce:	021b      	lsls	r3, r3, #8
 800dbd0:	4a19      	ldr	r2, [pc, #100]	; (800dc38 <xPortStartScheduler+0xe8>)
 800dbd2:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dbd4:	4b18      	ldr	r3, [pc, #96]	; (800dc38 <xPortStartScheduler+0xe8>)
 800dbd6:	681b      	ldr	r3, [r3, #0]
 800dbd8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dbdc:	4a16      	ldr	r2, [pc, #88]	; (800dc38 <xPortStartScheduler+0xe8>)
 800dbde:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dbe0:	687b      	ldr	r3, [r7, #4]
 800dbe2:	b2da      	uxtb	r2, r3
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dbe8:	4b14      	ldr	r3, [pc, #80]	; (800dc3c <xPortStartScheduler+0xec>)
 800dbea:	681b      	ldr	r3, [r3, #0]
 800dbec:	4a13      	ldr	r2, [pc, #76]	; (800dc3c <xPortStartScheduler+0xec>)
 800dbee:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dbf2:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dbf4:	4b11      	ldr	r3, [pc, #68]	; (800dc3c <xPortStartScheduler+0xec>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a10      	ldr	r2, [pc, #64]	; (800dc3c <xPortStartScheduler+0xec>)
 800dbfa:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dbfe:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dc00:	f000 f8d4 	bl	800ddac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dc04:	4b0e      	ldr	r3, [pc, #56]	; (800dc40 <xPortStartScheduler+0xf0>)
 800dc06:	2200      	movs	r2, #0
 800dc08:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dc0a:	f000 f8f3 	bl	800ddf4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dc0e:	4b0d      	ldr	r3, [pc, #52]	; (800dc44 <xPortStartScheduler+0xf4>)
 800dc10:	681b      	ldr	r3, [r3, #0]
 800dc12:	4a0c      	ldr	r2, [pc, #48]	; (800dc44 <xPortStartScheduler+0xf4>)
 800dc14:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dc18:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dc1a:	f7ff ff85 	bl	800db28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dc1e:	f7ff fa65 	bl	800d0ec <vTaskSwitchContext>
	prvTaskExitError();
 800dc22:	f7ff ff3b 	bl	800da9c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dc26:	2300      	movs	r3, #0
}
 800dc28:	4618      	mov	r0, r3
 800dc2a:	3710      	adds	r7, #16
 800dc2c:	46bd      	mov	sp, r7
 800dc2e:	bd80      	pop	{r7, pc}
 800dc30:	e000e400 	.word	0xe000e400
 800dc34:	20000634 	.word	0x20000634
 800dc38:	20000638 	.word	0x20000638
 800dc3c:	e000ed20 	.word	0xe000ed20
 800dc40:	20000058 	.word	0x20000058
 800dc44:	e000ef34 	.word	0xe000ef34

0800dc48 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dc48:	b480      	push	{r7}
 800dc4a:	b083      	sub	sp, #12
 800dc4c:	af00      	add	r7, sp, #0
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	b672      	cpsid	i
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	b662      	cpsie	i
 800dc62:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dc64:	4b0f      	ldr	r3, [pc, #60]	; (800dca4 <vPortEnterCritical+0x5c>)
 800dc66:	681b      	ldr	r3, [r3, #0]
 800dc68:	3301      	adds	r3, #1
 800dc6a:	4a0e      	ldr	r2, [pc, #56]	; (800dca4 <vPortEnterCritical+0x5c>)
 800dc6c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dc6e:	4b0d      	ldr	r3, [pc, #52]	; (800dca4 <vPortEnterCritical+0x5c>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	2b01      	cmp	r3, #1
 800dc74:	d110      	bne.n	800dc98 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dc76:	4b0c      	ldr	r3, [pc, #48]	; (800dca8 <vPortEnterCritical+0x60>)
 800dc78:	681b      	ldr	r3, [r3, #0]
 800dc7a:	b2db      	uxtb	r3, r3
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d00b      	beq.n	800dc98 <vPortEnterCritical+0x50>
 800dc80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc84:	b672      	cpsid	i
 800dc86:	f383 8811 	msr	BASEPRI, r3
 800dc8a:	f3bf 8f6f 	isb	sy
 800dc8e:	f3bf 8f4f 	dsb	sy
 800dc92:	b662      	cpsie	i
 800dc94:	603b      	str	r3, [r7, #0]
 800dc96:	e7fe      	b.n	800dc96 <vPortEnterCritical+0x4e>
	}
}
 800dc98:	bf00      	nop
 800dc9a:	370c      	adds	r7, #12
 800dc9c:	46bd      	mov	sp, r7
 800dc9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dca2:	4770      	bx	lr
 800dca4:	20000058 	.word	0x20000058
 800dca8:	e000ed04 	.word	0xe000ed04

0800dcac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dcac:	b480      	push	{r7}
 800dcae:	b083      	sub	sp, #12
 800dcb0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dcb2:	4b12      	ldr	r3, [pc, #72]	; (800dcfc <vPortExitCritical+0x50>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	2b00      	cmp	r3, #0
 800dcb8:	d10b      	bne.n	800dcd2 <vPortExitCritical+0x26>
 800dcba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbe:	b672      	cpsid	i
 800dcc0:	f383 8811 	msr	BASEPRI, r3
 800dcc4:	f3bf 8f6f 	isb	sy
 800dcc8:	f3bf 8f4f 	dsb	sy
 800dccc:	b662      	cpsie	i
 800dcce:	607b      	str	r3, [r7, #4]
 800dcd0:	e7fe      	b.n	800dcd0 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800dcd2:	4b0a      	ldr	r3, [pc, #40]	; (800dcfc <vPortExitCritical+0x50>)
 800dcd4:	681b      	ldr	r3, [r3, #0]
 800dcd6:	3b01      	subs	r3, #1
 800dcd8:	4a08      	ldr	r2, [pc, #32]	; (800dcfc <vPortExitCritical+0x50>)
 800dcda:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dcdc:	4b07      	ldr	r3, [pc, #28]	; (800dcfc <vPortExitCritical+0x50>)
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d104      	bne.n	800dcee <vPortExitCritical+0x42>
 800dce4:	2300      	movs	r3, #0
 800dce6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dce8:	683b      	ldr	r3, [r7, #0]
 800dcea:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dcee:	bf00      	nop
 800dcf0:	370c      	adds	r7, #12
 800dcf2:	46bd      	mov	sp, r7
 800dcf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcf8:	4770      	bx	lr
 800dcfa:	bf00      	nop
 800dcfc:	20000058 	.word	0x20000058

0800dd00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dd00:	f3ef 8009 	mrs	r0, PSP
 800dd04:	f3bf 8f6f 	isb	sy
 800dd08:	4b15      	ldr	r3, [pc, #84]	; (800dd60 <pxCurrentTCBConst>)
 800dd0a:	681a      	ldr	r2, [r3, #0]
 800dd0c:	f01e 0f10 	tst.w	lr, #16
 800dd10:	bf08      	it	eq
 800dd12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dd16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd1a:	6010      	str	r0, [r2, #0]
 800dd1c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dd20:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dd24:	b672      	cpsid	i
 800dd26:	f380 8811 	msr	BASEPRI, r0
 800dd2a:	f3bf 8f4f 	dsb	sy
 800dd2e:	f3bf 8f6f 	isb	sy
 800dd32:	b662      	cpsie	i
 800dd34:	f7ff f9da 	bl	800d0ec <vTaskSwitchContext>
 800dd38:	f04f 0000 	mov.w	r0, #0
 800dd3c:	f380 8811 	msr	BASEPRI, r0
 800dd40:	bc09      	pop	{r0, r3}
 800dd42:	6819      	ldr	r1, [r3, #0]
 800dd44:	6808      	ldr	r0, [r1, #0]
 800dd46:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4a:	f01e 0f10 	tst.w	lr, #16
 800dd4e:	bf08      	it	eq
 800dd50:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dd54:	f380 8809 	msr	PSP, r0
 800dd58:	f3bf 8f6f 	isb	sy
 800dd5c:	4770      	bx	lr
 800dd5e:	bf00      	nop

0800dd60 <pxCurrentTCBConst>:
 800dd60:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dd64:	bf00      	nop
 800dd66:	bf00      	nop

0800dd68 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dd68:	b580      	push	{r7, lr}
 800dd6a:	b082      	sub	sp, #8
 800dd6c:	af00      	add	r7, sp, #0
	__asm volatile
 800dd6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd72:	b672      	cpsid	i
 800dd74:	f383 8811 	msr	BASEPRI, r3
 800dd78:	f3bf 8f6f 	isb	sy
 800dd7c:	f3bf 8f4f 	dsb	sy
 800dd80:	b662      	cpsie	i
 800dd82:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dd84:	f7ff f8f8 	bl	800cf78 <xTaskIncrementTick>
 800dd88:	4603      	mov	r3, r0
 800dd8a:	2b00      	cmp	r3, #0
 800dd8c:	d003      	beq.n	800dd96 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dd8e:	4b06      	ldr	r3, [pc, #24]	; (800dda8 <SysTick_Handler+0x40>)
 800dd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dd94:	601a      	str	r2, [r3, #0]
 800dd96:	2300      	movs	r3, #0
 800dd98:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dda0:	bf00      	nop
 800dda2:	3708      	adds	r7, #8
 800dda4:	46bd      	mov	sp, r7
 800dda6:	bd80      	pop	{r7, pc}
 800dda8:	e000ed04 	.word	0xe000ed04

0800ddac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ddac:	b480      	push	{r7}
 800ddae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ddb0:	4b0b      	ldr	r3, [pc, #44]	; (800dde0 <vPortSetupTimerInterrupt+0x34>)
 800ddb2:	2200      	movs	r2, #0
 800ddb4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ddb6:	4b0b      	ldr	r3, [pc, #44]	; (800dde4 <vPortSetupTimerInterrupt+0x38>)
 800ddb8:	2200      	movs	r2, #0
 800ddba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ddbc:	4b0a      	ldr	r3, [pc, #40]	; (800dde8 <vPortSetupTimerInterrupt+0x3c>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a0a      	ldr	r2, [pc, #40]	; (800ddec <vPortSetupTimerInterrupt+0x40>)
 800ddc2:	fba2 2303 	umull	r2, r3, r2, r3
 800ddc6:	099b      	lsrs	r3, r3, #6
 800ddc8:	4a09      	ldr	r2, [pc, #36]	; (800ddf0 <vPortSetupTimerInterrupt+0x44>)
 800ddca:	3b01      	subs	r3, #1
 800ddcc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ddce:	4b04      	ldr	r3, [pc, #16]	; (800dde0 <vPortSetupTimerInterrupt+0x34>)
 800ddd0:	2207      	movs	r2, #7
 800ddd2:	601a      	str	r2, [r3, #0]
}
 800ddd4:	bf00      	nop
 800ddd6:	46bd      	mov	sp, r7
 800ddd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dddc:	4770      	bx	lr
 800ddde:	bf00      	nop
 800dde0:	e000e010 	.word	0xe000e010
 800dde4:	e000e018 	.word	0xe000e018
 800dde8:	2000004c 	.word	0x2000004c
 800ddec:	10624dd3 	.word	0x10624dd3
 800ddf0:	e000e014 	.word	0xe000e014

0800ddf4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ddf4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800de04 <vPortEnableVFP+0x10>
 800ddf8:	6801      	ldr	r1, [r0, #0]
 800ddfa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ddfe:	6001      	str	r1, [r0, #0]
 800de00:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800de02:	bf00      	nop
 800de04:	e000ed88 	.word	0xe000ed88

0800de08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800de08:	b580      	push	{r7, lr}
 800de0a:	b08a      	sub	sp, #40	; 0x28
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800de10:	2300      	movs	r3, #0
 800de12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800de14:	f7fe fff4 	bl	800ce00 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800de18:	4b5c      	ldr	r3, [pc, #368]	; (800df8c <pvPortMalloc+0x184>)
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	2b00      	cmp	r3, #0
 800de1e:	d101      	bne.n	800de24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800de20:	f000 f91a 	bl	800e058 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800de24:	4b5a      	ldr	r3, [pc, #360]	; (800df90 <pvPortMalloc+0x188>)
 800de26:	681a      	ldr	r2, [r3, #0]
 800de28:	687b      	ldr	r3, [r7, #4]
 800de2a:	4013      	ands	r3, r2
 800de2c:	2b00      	cmp	r3, #0
 800de2e:	f040 8090 	bne.w	800df52 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800de32:	687b      	ldr	r3, [r7, #4]
 800de34:	2b00      	cmp	r3, #0
 800de36:	d01e      	beq.n	800de76 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800de38:	2208      	movs	r2, #8
 800de3a:	687b      	ldr	r3, [r7, #4]
 800de3c:	4413      	add	r3, r2
 800de3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f003 0307 	and.w	r3, r3, #7
 800de46:	2b00      	cmp	r3, #0
 800de48:	d015      	beq.n	800de76 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800de4a:	687b      	ldr	r3, [r7, #4]
 800de4c:	f023 0307 	bic.w	r3, r3, #7
 800de50:	3308      	adds	r3, #8
 800de52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	f003 0307 	and.w	r3, r3, #7
 800de5a:	2b00      	cmp	r3, #0
 800de5c:	d00b      	beq.n	800de76 <pvPortMalloc+0x6e>
	__asm volatile
 800de5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de62:	b672      	cpsid	i
 800de64:	f383 8811 	msr	BASEPRI, r3
 800de68:	f3bf 8f6f 	isb	sy
 800de6c:	f3bf 8f4f 	dsb	sy
 800de70:	b662      	cpsie	i
 800de72:	617b      	str	r3, [r7, #20]
 800de74:	e7fe      	b.n	800de74 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d06a      	beq.n	800df52 <pvPortMalloc+0x14a>
 800de7c:	4b45      	ldr	r3, [pc, #276]	; (800df94 <pvPortMalloc+0x18c>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	687a      	ldr	r2, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d865      	bhi.n	800df52 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800de86:	4b44      	ldr	r3, [pc, #272]	; (800df98 <pvPortMalloc+0x190>)
 800de88:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800de8a:	4b43      	ldr	r3, [pc, #268]	; (800df98 <pvPortMalloc+0x190>)
 800de8c:	681b      	ldr	r3, [r3, #0]
 800de8e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de90:	e004      	b.n	800de9c <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800de92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de94:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800de96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de98:	681b      	ldr	r3, [r3, #0]
 800de9a:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	685b      	ldr	r3, [r3, #4]
 800dea0:	687a      	ldr	r2, [r7, #4]
 800dea2:	429a      	cmp	r2, r3
 800dea4:	d903      	bls.n	800deae <pvPortMalloc+0xa6>
 800dea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dea8:	681b      	ldr	r3, [r3, #0]
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d1f1      	bne.n	800de92 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800deae:	4b37      	ldr	r3, [pc, #220]	; (800df8c <pvPortMalloc+0x184>)
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800deb4:	429a      	cmp	r2, r3
 800deb6:	d04c      	beq.n	800df52 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800deb8:	6a3b      	ldr	r3, [r7, #32]
 800deba:	681b      	ldr	r3, [r3, #0]
 800debc:	2208      	movs	r2, #8
 800debe:	4413      	add	r3, r2
 800dec0:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	6a3b      	ldr	r3, [r7, #32]
 800dec8:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800deca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	1ad2      	subs	r2, r2, r3
 800ded2:	2308      	movs	r3, #8
 800ded4:	005b      	lsls	r3, r3, #1
 800ded6:	429a      	cmp	r2, r3
 800ded8:	d920      	bls.n	800df1c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800deda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dedc:	687b      	ldr	r3, [r7, #4]
 800dede:	4413      	add	r3, r2
 800dee0:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dee2:	69bb      	ldr	r3, [r7, #24]
 800dee4:	f003 0307 	and.w	r3, r3, #7
 800dee8:	2b00      	cmp	r3, #0
 800deea:	d00b      	beq.n	800df04 <pvPortMalloc+0xfc>
 800deec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800def0:	b672      	cpsid	i
 800def2:	f383 8811 	msr	BASEPRI, r3
 800def6:	f3bf 8f6f 	isb	sy
 800defa:	f3bf 8f4f 	dsb	sy
 800defe:	b662      	cpsie	i
 800df00:	613b      	str	r3, [r7, #16]
 800df02:	e7fe      	b.n	800df02 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800df04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df06:	685a      	ldr	r2, [r3, #4]
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	1ad2      	subs	r2, r2, r3
 800df0c:	69bb      	ldr	r3, [r7, #24]
 800df0e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800df10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df12:	687a      	ldr	r2, [r7, #4]
 800df14:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800df16:	69b8      	ldr	r0, [r7, #24]
 800df18:	f000 f900 	bl	800e11c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800df1c:	4b1d      	ldr	r3, [pc, #116]	; (800df94 <pvPortMalloc+0x18c>)
 800df1e:	681a      	ldr	r2, [r3, #0]
 800df20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df22:	685b      	ldr	r3, [r3, #4]
 800df24:	1ad3      	subs	r3, r2, r3
 800df26:	4a1b      	ldr	r2, [pc, #108]	; (800df94 <pvPortMalloc+0x18c>)
 800df28:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800df2a:	4b1a      	ldr	r3, [pc, #104]	; (800df94 <pvPortMalloc+0x18c>)
 800df2c:	681a      	ldr	r2, [r3, #0]
 800df2e:	4b1b      	ldr	r3, [pc, #108]	; (800df9c <pvPortMalloc+0x194>)
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	429a      	cmp	r2, r3
 800df34:	d203      	bcs.n	800df3e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800df36:	4b17      	ldr	r3, [pc, #92]	; (800df94 <pvPortMalloc+0x18c>)
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	4a18      	ldr	r2, [pc, #96]	; (800df9c <pvPortMalloc+0x194>)
 800df3c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	685a      	ldr	r2, [r3, #4]
 800df42:	4b13      	ldr	r3, [pc, #76]	; (800df90 <pvPortMalloc+0x188>)
 800df44:	681b      	ldr	r3, [r3, #0]
 800df46:	431a      	orrs	r2, r3
 800df48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800df4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df4e:	2200      	movs	r2, #0
 800df50:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800df52:	f7fe ff63 	bl	800ce1c <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800df56:	69fb      	ldr	r3, [r7, #28]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d101      	bne.n	800df60 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800df5c:	f7f2 fb3a 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800df60:	69fb      	ldr	r3, [r7, #28]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00b      	beq.n	800df82 <pvPortMalloc+0x17a>
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	b672      	cpsid	i
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
 800df7c:	b662      	cpsie	i
 800df7e:	60fb      	str	r3, [r7, #12]
 800df80:	e7fe      	b.n	800df80 <pvPortMalloc+0x178>
	return pvReturn;
 800df82:	69fb      	ldr	r3, [r7, #28]
}
 800df84:	4618      	mov	r0, r3
 800df86:	3728      	adds	r7, #40	; 0x28
 800df88:	46bd      	mov	sp, r7
 800df8a:	bd80      	pop	{r7, pc}
 800df8c:	20008644 	.word	0x20008644
 800df90:	20008650 	.word	0x20008650
 800df94:	20008648 	.word	0x20008648
 800df98:	2000863c 	.word	0x2000863c
 800df9c:	2000864c 	.word	0x2000864c

0800dfa0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dfa0:	b580      	push	{r7, lr}
 800dfa2:	b086      	sub	sp, #24
 800dfa4:	af00      	add	r7, sp, #0
 800dfa6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d04a      	beq.n	800e048 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dfb2:	2308      	movs	r3, #8
 800dfb4:	425b      	negs	r3, r3
 800dfb6:	697a      	ldr	r2, [r7, #20]
 800dfb8:	4413      	add	r3, r2
 800dfba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dfbc:	697b      	ldr	r3, [r7, #20]
 800dfbe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dfc0:	693b      	ldr	r3, [r7, #16]
 800dfc2:	685a      	ldr	r2, [r3, #4]
 800dfc4:	4b22      	ldr	r3, [pc, #136]	; (800e050 <vPortFree+0xb0>)
 800dfc6:	681b      	ldr	r3, [r3, #0]
 800dfc8:	4013      	ands	r3, r2
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d10b      	bne.n	800dfe6 <vPortFree+0x46>
 800dfce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfd2:	b672      	cpsid	i
 800dfd4:	f383 8811 	msr	BASEPRI, r3
 800dfd8:	f3bf 8f6f 	isb	sy
 800dfdc:	f3bf 8f4f 	dsb	sy
 800dfe0:	b662      	cpsie	i
 800dfe2:	60fb      	str	r3, [r7, #12]
 800dfe4:	e7fe      	b.n	800dfe4 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dfe6:	693b      	ldr	r3, [r7, #16]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	2b00      	cmp	r3, #0
 800dfec:	d00b      	beq.n	800e006 <vPortFree+0x66>
 800dfee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dff2:	b672      	cpsid	i
 800dff4:	f383 8811 	msr	BASEPRI, r3
 800dff8:	f3bf 8f6f 	isb	sy
 800dffc:	f3bf 8f4f 	dsb	sy
 800e000:	b662      	cpsie	i
 800e002:	60bb      	str	r3, [r7, #8]
 800e004:	e7fe      	b.n	800e004 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e006:	693b      	ldr	r3, [r7, #16]
 800e008:	685a      	ldr	r2, [r3, #4]
 800e00a:	4b11      	ldr	r3, [pc, #68]	; (800e050 <vPortFree+0xb0>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	4013      	ands	r3, r2
 800e010:	2b00      	cmp	r3, #0
 800e012:	d019      	beq.n	800e048 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e014:	693b      	ldr	r3, [r7, #16]
 800e016:	681b      	ldr	r3, [r3, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	d115      	bne.n	800e048 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e01c:	693b      	ldr	r3, [r7, #16]
 800e01e:	685a      	ldr	r2, [r3, #4]
 800e020:	4b0b      	ldr	r3, [pc, #44]	; (800e050 <vPortFree+0xb0>)
 800e022:	681b      	ldr	r3, [r3, #0]
 800e024:	43db      	mvns	r3, r3
 800e026:	401a      	ands	r2, r3
 800e028:	693b      	ldr	r3, [r7, #16]
 800e02a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e02c:	f7fe fee8 	bl	800ce00 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e030:	693b      	ldr	r3, [r7, #16]
 800e032:	685a      	ldr	r2, [r3, #4]
 800e034:	4b07      	ldr	r3, [pc, #28]	; (800e054 <vPortFree+0xb4>)
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	4413      	add	r3, r2
 800e03a:	4a06      	ldr	r2, [pc, #24]	; (800e054 <vPortFree+0xb4>)
 800e03c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e03e:	6938      	ldr	r0, [r7, #16]
 800e040:	f000 f86c 	bl	800e11c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e044:	f7fe feea 	bl	800ce1c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e048:	bf00      	nop
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	20008650 	.word	0x20008650
 800e054:	20008648 	.word	0x20008648

0800e058 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e058:	b480      	push	{r7}
 800e05a:	b085      	sub	sp, #20
 800e05c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e05e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800e062:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e064:	4b27      	ldr	r3, [pc, #156]	; (800e104 <prvHeapInit+0xac>)
 800e066:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e068:	68fb      	ldr	r3, [r7, #12]
 800e06a:	f003 0307 	and.w	r3, r3, #7
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d00c      	beq.n	800e08c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e072:	68fb      	ldr	r3, [r7, #12]
 800e074:	3307      	adds	r3, #7
 800e076:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e078:	68fb      	ldr	r3, [r7, #12]
 800e07a:	f023 0307 	bic.w	r3, r3, #7
 800e07e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e080:	68ba      	ldr	r2, [r7, #8]
 800e082:	68fb      	ldr	r3, [r7, #12]
 800e084:	1ad3      	subs	r3, r2, r3
 800e086:	4a1f      	ldr	r2, [pc, #124]	; (800e104 <prvHeapInit+0xac>)
 800e088:	4413      	add	r3, r2
 800e08a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e08c:	68fb      	ldr	r3, [r7, #12]
 800e08e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e090:	4a1d      	ldr	r2, [pc, #116]	; (800e108 <prvHeapInit+0xb0>)
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e096:	4b1c      	ldr	r3, [pc, #112]	; (800e108 <prvHeapInit+0xb0>)
 800e098:	2200      	movs	r2, #0
 800e09a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e09c:	687b      	ldr	r3, [r7, #4]
 800e09e:	68ba      	ldr	r2, [r7, #8]
 800e0a0:	4413      	add	r3, r2
 800e0a2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e0a4:	2208      	movs	r2, #8
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	1a9b      	subs	r3, r3, r2
 800e0aa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e0ac:	68fb      	ldr	r3, [r7, #12]
 800e0ae:	f023 0307 	bic.w	r3, r3, #7
 800e0b2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	4a15      	ldr	r2, [pc, #84]	; (800e10c <prvHeapInit+0xb4>)
 800e0b8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e0ba:	4b14      	ldr	r3, [pc, #80]	; (800e10c <prvHeapInit+0xb4>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	2200      	movs	r2, #0
 800e0c0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e0c2:	4b12      	ldr	r3, [pc, #72]	; (800e10c <prvHeapInit+0xb4>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e0ce:	683b      	ldr	r3, [r7, #0]
 800e0d0:	68fa      	ldr	r2, [r7, #12]
 800e0d2:	1ad2      	subs	r2, r2, r3
 800e0d4:	683b      	ldr	r3, [r7, #0]
 800e0d6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e0d8:	4b0c      	ldr	r3, [pc, #48]	; (800e10c <prvHeapInit+0xb4>)
 800e0da:	681a      	ldr	r2, [r3, #0]
 800e0dc:	683b      	ldr	r3, [r7, #0]
 800e0de:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0e0:	683b      	ldr	r3, [r7, #0]
 800e0e2:	685b      	ldr	r3, [r3, #4]
 800e0e4:	4a0a      	ldr	r2, [pc, #40]	; (800e110 <prvHeapInit+0xb8>)
 800e0e6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e0e8:	683b      	ldr	r3, [r7, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	4a09      	ldr	r2, [pc, #36]	; (800e114 <prvHeapInit+0xbc>)
 800e0ee:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e0f0:	4b09      	ldr	r3, [pc, #36]	; (800e118 <prvHeapInit+0xc0>)
 800e0f2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e0f6:	601a      	str	r2, [r3, #0]
}
 800e0f8:	bf00      	nop
 800e0fa:	3714      	adds	r7, #20
 800e0fc:	46bd      	mov	sp, r7
 800e0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e102:	4770      	bx	lr
 800e104:	2000063c 	.word	0x2000063c
 800e108:	2000863c 	.word	0x2000863c
 800e10c:	20008644 	.word	0x20008644
 800e110:	2000864c 	.word	0x2000864c
 800e114:	20008648 	.word	0x20008648
 800e118:	20008650 	.word	0x20008650

0800e11c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e11c:	b480      	push	{r7}
 800e11e:	b085      	sub	sp, #20
 800e120:	af00      	add	r7, sp, #0
 800e122:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e124:	4b28      	ldr	r3, [pc, #160]	; (800e1c8 <prvInsertBlockIntoFreeList+0xac>)
 800e126:	60fb      	str	r3, [r7, #12]
 800e128:	e002      	b.n	800e130 <prvInsertBlockIntoFreeList+0x14>
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	681b      	ldr	r3, [r3, #0]
 800e12e:	60fb      	str	r3, [r7, #12]
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	687a      	ldr	r2, [r7, #4]
 800e136:	429a      	cmp	r2, r3
 800e138:	d8f7      	bhi.n	800e12a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	685b      	ldr	r3, [r3, #4]
 800e142:	68ba      	ldr	r2, [r7, #8]
 800e144:	4413      	add	r3, r2
 800e146:	687a      	ldr	r2, [r7, #4]
 800e148:	429a      	cmp	r2, r3
 800e14a:	d108      	bne.n	800e15e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	685b      	ldr	r3, [r3, #4]
 800e154:	441a      	add	r2, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e15a:	68fb      	ldr	r3, [r7, #12]
 800e15c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e15e:	687b      	ldr	r3, [r7, #4]
 800e160:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	685b      	ldr	r3, [r3, #4]
 800e166:	68ba      	ldr	r2, [r7, #8]
 800e168:	441a      	add	r2, r3
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	681b      	ldr	r3, [r3, #0]
 800e16e:	429a      	cmp	r2, r3
 800e170:	d118      	bne.n	800e1a4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e172:	68fb      	ldr	r3, [r7, #12]
 800e174:	681a      	ldr	r2, [r3, #0]
 800e176:	4b15      	ldr	r3, [pc, #84]	; (800e1cc <prvInsertBlockIntoFreeList+0xb0>)
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	429a      	cmp	r2, r3
 800e17c:	d00d      	beq.n	800e19a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e17e:	687b      	ldr	r3, [r7, #4]
 800e180:	685a      	ldr	r2, [r3, #4]
 800e182:	68fb      	ldr	r3, [r7, #12]
 800e184:	681b      	ldr	r3, [r3, #0]
 800e186:	685b      	ldr	r3, [r3, #4]
 800e188:	441a      	add	r2, r3
 800e18a:	687b      	ldr	r3, [r7, #4]
 800e18c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	681a      	ldr	r2, [r3, #0]
 800e194:	687b      	ldr	r3, [r7, #4]
 800e196:	601a      	str	r2, [r3, #0]
 800e198:	e008      	b.n	800e1ac <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e19a:	4b0c      	ldr	r3, [pc, #48]	; (800e1cc <prvInsertBlockIntoFreeList+0xb0>)
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	687b      	ldr	r3, [r7, #4]
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	e003      	b.n	800e1ac <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	681a      	ldr	r2, [r3, #0]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e1ac:	68fa      	ldr	r2, [r7, #12]
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	429a      	cmp	r2, r3
 800e1b2:	d002      	beq.n	800e1ba <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	687a      	ldr	r2, [r7, #4]
 800e1b8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e1ba:	bf00      	nop
 800e1bc:	3714      	adds	r7, #20
 800e1be:	46bd      	mov	sp, r7
 800e1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1c4:	4770      	bx	lr
 800e1c6:	bf00      	nop
 800e1c8:	2000863c 	.word	0x2000863c
 800e1cc:	20008644 	.word	0x20008644

0800e1d0 <__errno>:
 800e1d0:	4b01      	ldr	r3, [pc, #4]	; (800e1d8 <__errno+0x8>)
 800e1d2:	6818      	ldr	r0, [r3, #0]
 800e1d4:	4770      	bx	lr
 800e1d6:	bf00      	nop
 800e1d8:	2000005c 	.word	0x2000005c

0800e1dc <__libc_init_array>:
 800e1dc:	b570      	push	{r4, r5, r6, lr}
 800e1de:	4e0d      	ldr	r6, [pc, #52]	; (800e214 <__libc_init_array+0x38>)
 800e1e0:	4c0d      	ldr	r4, [pc, #52]	; (800e218 <__libc_init_array+0x3c>)
 800e1e2:	1ba4      	subs	r4, r4, r6
 800e1e4:	10a4      	asrs	r4, r4, #2
 800e1e6:	2500      	movs	r5, #0
 800e1e8:	42a5      	cmp	r5, r4
 800e1ea:	d109      	bne.n	800e200 <__libc_init_array+0x24>
 800e1ec:	4e0b      	ldr	r6, [pc, #44]	; (800e21c <__libc_init_array+0x40>)
 800e1ee:	4c0c      	ldr	r4, [pc, #48]	; (800e220 <__libc_init_array+0x44>)
 800e1f0:	f000 fc28 	bl	800ea44 <_init>
 800e1f4:	1ba4      	subs	r4, r4, r6
 800e1f6:	10a4      	asrs	r4, r4, #2
 800e1f8:	2500      	movs	r5, #0
 800e1fa:	42a5      	cmp	r5, r4
 800e1fc:	d105      	bne.n	800e20a <__libc_init_array+0x2e>
 800e1fe:	bd70      	pop	{r4, r5, r6, pc}
 800e200:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e204:	4798      	blx	r3
 800e206:	3501      	adds	r5, #1
 800e208:	e7ee      	b.n	800e1e8 <__libc_init_array+0xc>
 800e20a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e20e:	4798      	blx	r3
 800e210:	3501      	adds	r5, #1
 800e212:	e7f2      	b.n	800e1fa <__libc_init_array+0x1e>
 800e214:	08010b08 	.word	0x08010b08
 800e218:	08010b08 	.word	0x08010b08
 800e21c:	08010b08 	.word	0x08010b08
 800e220:	08010b0c 	.word	0x08010b0c

0800e224 <memcpy>:
 800e224:	b510      	push	{r4, lr}
 800e226:	1e43      	subs	r3, r0, #1
 800e228:	440a      	add	r2, r1
 800e22a:	4291      	cmp	r1, r2
 800e22c:	d100      	bne.n	800e230 <memcpy+0xc>
 800e22e:	bd10      	pop	{r4, pc}
 800e230:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e234:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e238:	e7f7      	b.n	800e22a <memcpy+0x6>

0800e23a <memset>:
 800e23a:	4402      	add	r2, r0
 800e23c:	4603      	mov	r3, r0
 800e23e:	4293      	cmp	r3, r2
 800e240:	d100      	bne.n	800e244 <memset+0xa>
 800e242:	4770      	bx	lr
 800e244:	f803 1b01 	strb.w	r1, [r3], #1
 800e248:	e7f9      	b.n	800e23e <memset+0x4>
	...

0800e24c <siprintf>:
 800e24c:	b40e      	push	{r1, r2, r3}
 800e24e:	b500      	push	{lr}
 800e250:	b09c      	sub	sp, #112	; 0x70
 800e252:	ab1d      	add	r3, sp, #116	; 0x74
 800e254:	9002      	str	r0, [sp, #8]
 800e256:	9006      	str	r0, [sp, #24]
 800e258:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e25c:	4809      	ldr	r0, [pc, #36]	; (800e284 <siprintf+0x38>)
 800e25e:	9107      	str	r1, [sp, #28]
 800e260:	9104      	str	r1, [sp, #16]
 800e262:	4909      	ldr	r1, [pc, #36]	; (800e288 <siprintf+0x3c>)
 800e264:	f853 2b04 	ldr.w	r2, [r3], #4
 800e268:	9105      	str	r1, [sp, #20]
 800e26a:	6800      	ldr	r0, [r0, #0]
 800e26c:	9301      	str	r3, [sp, #4]
 800e26e:	a902      	add	r1, sp, #8
 800e270:	f000 f866 	bl	800e340 <_svfiprintf_r>
 800e274:	9b02      	ldr	r3, [sp, #8]
 800e276:	2200      	movs	r2, #0
 800e278:	701a      	strb	r2, [r3, #0]
 800e27a:	b01c      	add	sp, #112	; 0x70
 800e27c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e280:	b003      	add	sp, #12
 800e282:	4770      	bx	lr
 800e284:	2000005c 	.word	0x2000005c
 800e288:	ffff0208 	.word	0xffff0208

0800e28c <__ssputs_r>:
 800e28c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e290:	688e      	ldr	r6, [r1, #8]
 800e292:	429e      	cmp	r6, r3
 800e294:	4682      	mov	sl, r0
 800e296:	460c      	mov	r4, r1
 800e298:	4690      	mov	r8, r2
 800e29a:	4699      	mov	r9, r3
 800e29c:	d837      	bhi.n	800e30e <__ssputs_r+0x82>
 800e29e:	898a      	ldrh	r2, [r1, #12]
 800e2a0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e2a4:	d031      	beq.n	800e30a <__ssputs_r+0x7e>
 800e2a6:	6825      	ldr	r5, [r4, #0]
 800e2a8:	6909      	ldr	r1, [r1, #16]
 800e2aa:	1a6f      	subs	r7, r5, r1
 800e2ac:	6965      	ldr	r5, [r4, #20]
 800e2ae:	2302      	movs	r3, #2
 800e2b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e2b4:	fb95 f5f3 	sdiv	r5, r5, r3
 800e2b8:	f109 0301 	add.w	r3, r9, #1
 800e2bc:	443b      	add	r3, r7
 800e2be:	429d      	cmp	r5, r3
 800e2c0:	bf38      	it	cc
 800e2c2:	461d      	movcc	r5, r3
 800e2c4:	0553      	lsls	r3, r2, #21
 800e2c6:	d530      	bpl.n	800e32a <__ssputs_r+0x9e>
 800e2c8:	4629      	mov	r1, r5
 800e2ca:	f000 fb21 	bl	800e910 <_malloc_r>
 800e2ce:	4606      	mov	r6, r0
 800e2d0:	b950      	cbnz	r0, 800e2e8 <__ssputs_r+0x5c>
 800e2d2:	230c      	movs	r3, #12
 800e2d4:	f8ca 3000 	str.w	r3, [sl]
 800e2d8:	89a3      	ldrh	r3, [r4, #12]
 800e2da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2de:	81a3      	strh	r3, [r4, #12]
 800e2e0:	f04f 30ff 	mov.w	r0, #4294967295
 800e2e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e2e8:	463a      	mov	r2, r7
 800e2ea:	6921      	ldr	r1, [r4, #16]
 800e2ec:	f7ff ff9a 	bl	800e224 <memcpy>
 800e2f0:	89a3      	ldrh	r3, [r4, #12]
 800e2f2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e2f6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e2fa:	81a3      	strh	r3, [r4, #12]
 800e2fc:	6126      	str	r6, [r4, #16]
 800e2fe:	6165      	str	r5, [r4, #20]
 800e300:	443e      	add	r6, r7
 800e302:	1bed      	subs	r5, r5, r7
 800e304:	6026      	str	r6, [r4, #0]
 800e306:	60a5      	str	r5, [r4, #8]
 800e308:	464e      	mov	r6, r9
 800e30a:	454e      	cmp	r6, r9
 800e30c:	d900      	bls.n	800e310 <__ssputs_r+0x84>
 800e30e:	464e      	mov	r6, r9
 800e310:	4632      	mov	r2, r6
 800e312:	4641      	mov	r1, r8
 800e314:	6820      	ldr	r0, [r4, #0]
 800e316:	f000 fa93 	bl	800e840 <memmove>
 800e31a:	68a3      	ldr	r3, [r4, #8]
 800e31c:	1b9b      	subs	r3, r3, r6
 800e31e:	60a3      	str	r3, [r4, #8]
 800e320:	6823      	ldr	r3, [r4, #0]
 800e322:	441e      	add	r6, r3
 800e324:	6026      	str	r6, [r4, #0]
 800e326:	2000      	movs	r0, #0
 800e328:	e7dc      	b.n	800e2e4 <__ssputs_r+0x58>
 800e32a:	462a      	mov	r2, r5
 800e32c:	f000 fb4a 	bl	800e9c4 <_realloc_r>
 800e330:	4606      	mov	r6, r0
 800e332:	2800      	cmp	r0, #0
 800e334:	d1e2      	bne.n	800e2fc <__ssputs_r+0x70>
 800e336:	6921      	ldr	r1, [r4, #16]
 800e338:	4650      	mov	r0, sl
 800e33a:	f000 fa9b 	bl	800e874 <_free_r>
 800e33e:	e7c8      	b.n	800e2d2 <__ssputs_r+0x46>

0800e340 <_svfiprintf_r>:
 800e340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e344:	461d      	mov	r5, r3
 800e346:	898b      	ldrh	r3, [r1, #12]
 800e348:	061f      	lsls	r7, r3, #24
 800e34a:	b09d      	sub	sp, #116	; 0x74
 800e34c:	4680      	mov	r8, r0
 800e34e:	460c      	mov	r4, r1
 800e350:	4616      	mov	r6, r2
 800e352:	d50f      	bpl.n	800e374 <_svfiprintf_r+0x34>
 800e354:	690b      	ldr	r3, [r1, #16]
 800e356:	b96b      	cbnz	r3, 800e374 <_svfiprintf_r+0x34>
 800e358:	2140      	movs	r1, #64	; 0x40
 800e35a:	f000 fad9 	bl	800e910 <_malloc_r>
 800e35e:	6020      	str	r0, [r4, #0]
 800e360:	6120      	str	r0, [r4, #16]
 800e362:	b928      	cbnz	r0, 800e370 <_svfiprintf_r+0x30>
 800e364:	230c      	movs	r3, #12
 800e366:	f8c8 3000 	str.w	r3, [r8]
 800e36a:	f04f 30ff 	mov.w	r0, #4294967295
 800e36e:	e0c8      	b.n	800e502 <_svfiprintf_r+0x1c2>
 800e370:	2340      	movs	r3, #64	; 0x40
 800e372:	6163      	str	r3, [r4, #20]
 800e374:	2300      	movs	r3, #0
 800e376:	9309      	str	r3, [sp, #36]	; 0x24
 800e378:	2320      	movs	r3, #32
 800e37a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e37e:	2330      	movs	r3, #48	; 0x30
 800e380:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e384:	9503      	str	r5, [sp, #12]
 800e386:	f04f 0b01 	mov.w	fp, #1
 800e38a:	4637      	mov	r7, r6
 800e38c:	463d      	mov	r5, r7
 800e38e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e392:	b10b      	cbz	r3, 800e398 <_svfiprintf_r+0x58>
 800e394:	2b25      	cmp	r3, #37	; 0x25
 800e396:	d13e      	bne.n	800e416 <_svfiprintf_r+0xd6>
 800e398:	ebb7 0a06 	subs.w	sl, r7, r6
 800e39c:	d00b      	beq.n	800e3b6 <_svfiprintf_r+0x76>
 800e39e:	4653      	mov	r3, sl
 800e3a0:	4632      	mov	r2, r6
 800e3a2:	4621      	mov	r1, r4
 800e3a4:	4640      	mov	r0, r8
 800e3a6:	f7ff ff71 	bl	800e28c <__ssputs_r>
 800e3aa:	3001      	adds	r0, #1
 800e3ac:	f000 80a4 	beq.w	800e4f8 <_svfiprintf_r+0x1b8>
 800e3b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3b2:	4453      	add	r3, sl
 800e3b4:	9309      	str	r3, [sp, #36]	; 0x24
 800e3b6:	783b      	ldrb	r3, [r7, #0]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 809d 	beq.w	800e4f8 <_svfiprintf_r+0x1b8>
 800e3be:	2300      	movs	r3, #0
 800e3c0:	f04f 32ff 	mov.w	r2, #4294967295
 800e3c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e3c8:	9304      	str	r3, [sp, #16]
 800e3ca:	9307      	str	r3, [sp, #28]
 800e3cc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e3d0:	931a      	str	r3, [sp, #104]	; 0x68
 800e3d2:	462f      	mov	r7, r5
 800e3d4:	2205      	movs	r2, #5
 800e3d6:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e3da:	4850      	ldr	r0, [pc, #320]	; (800e51c <_svfiprintf_r+0x1dc>)
 800e3dc:	f7f1 ff18 	bl	8000210 <memchr>
 800e3e0:	9b04      	ldr	r3, [sp, #16]
 800e3e2:	b9d0      	cbnz	r0, 800e41a <_svfiprintf_r+0xda>
 800e3e4:	06d9      	lsls	r1, r3, #27
 800e3e6:	bf44      	itt	mi
 800e3e8:	2220      	movmi	r2, #32
 800e3ea:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3ee:	071a      	lsls	r2, r3, #28
 800e3f0:	bf44      	itt	mi
 800e3f2:	222b      	movmi	r2, #43	; 0x2b
 800e3f4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e3f8:	782a      	ldrb	r2, [r5, #0]
 800e3fa:	2a2a      	cmp	r2, #42	; 0x2a
 800e3fc:	d015      	beq.n	800e42a <_svfiprintf_r+0xea>
 800e3fe:	9a07      	ldr	r2, [sp, #28]
 800e400:	462f      	mov	r7, r5
 800e402:	2000      	movs	r0, #0
 800e404:	250a      	movs	r5, #10
 800e406:	4639      	mov	r1, r7
 800e408:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e40c:	3b30      	subs	r3, #48	; 0x30
 800e40e:	2b09      	cmp	r3, #9
 800e410:	d94d      	bls.n	800e4ae <_svfiprintf_r+0x16e>
 800e412:	b1b8      	cbz	r0, 800e444 <_svfiprintf_r+0x104>
 800e414:	e00f      	b.n	800e436 <_svfiprintf_r+0xf6>
 800e416:	462f      	mov	r7, r5
 800e418:	e7b8      	b.n	800e38c <_svfiprintf_r+0x4c>
 800e41a:	4a40      	ldr	r2, [pc, #256]	; (800e51c <_svfiprintf_r+0x1dc>)
 800e41c:	1a80      	subs	r0, r0, r2
 800e41e:	fa0b f000 	lsl.w	r0, fp, r0
 800e422:	4318      	orrs	r0, r3
 800e424:	9004      	str	r0, [sp, #16]
 800e426:	463d      	mov	r5, r7
 800e428:	e7d3      	b.n	800e3d2 <_svfiprintf_r+0x92>
 800e42a:	9a03      	ldr	r2, [sp, #12]
 800e42c:	1d11      	adds	r1, r2, #4
 800e42e:	6812      	ldr	r2, [r2, #0]
 800e430:	9103      	str	r1, [sp, #12]
 800e432:	2a00      	cmp	r2, #0
 800e434:	db01      	blt.n	800e43a <_svfiprintf_r+0xfa>
 800e436:	9207      	str	r2, [sp, #28]
 800e438:	e004      	b.n	800e444 <_svfiprintf_r+0x104>
 800e43a:	4252      	negs	r2, r2
 800e43c:	f043 0302 	orr.w	r3, r3, #2
 800e440:	9207      	str	r2, [sp, #28]
 800e442:	9304      	str	r3, [sp, #16]
 800e444:	783b      	ldrb	r3, [r7, #0]
 800e446:	2b2e      	cmp	r3, #46	; 0x2e
 800e448:	d10c      	bne.n	800e464 <_svfiprintf_r+0x124>
 800e44a:	787b      	ldrb	r3, [r7, #1]
 800e44c:	2b2a      	cmp	r3, #42	; 0x2a
 800e44e:	d133      	bne.n	800e4b8 <_svfiprintf_r+0x178>
 800e450:	9b03      	ldr	r3, [sp, #12]
 800e452:	1d1a      	adds	r2, r3, #4
 800e454:	681b      	ldr	r3, [r3, #0]
 800e456:	9203      	str	r2, [sp, #12]
 800e458:	2b00      	cmp	r3, #0
 800e45a:	bfb8      	it	lt
 800e45c:	f04f 33ff 	movlt.w	r3, #4294967295
 800e460:	3702      	adds	r7, #2
 800e462:	9305      	str	r3, [sp, #20]
 800e464:	4d2e      	ldr	r5, [pc, #184]	; (800e520 <_svfiprintf_r+0x1e0>)
 800e466:	7839      	ldrb	r1, [r7, #0]
 800e468:	2203      	movs	r2, #3
 800e46a:	4628      	mov	r0, r5
 800e46c:	f7f1 fed0 	bl	8000210 <memchr>
 800e470:	b138      	cbz	r0, 800e482 <_svfiprintf_r+0x142>
 800e472:	2340      	movs	r3, #64	; 0x40
 800e474:	1b40      	subs	r0, r0, r5
 800e476:	fa03 f000 	lsl.w	r0, r3, r0
 800e47a:	9b04      	ldr	r3, [sp, #16]
 800e47c:	4303      	orrs	r3, r0
 800e47e:	3701      	adds	r7, #1
 800e480:	9304      	str	r3, [sp, #16]
 800e482:	7839      	ldrb	r1, [r7, #0]
 800e484:	4827      	ldr	r0, [pc, #156]	; (800e524 <_svfiprintf_r+0x1e4>)
 800e486:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e48a:	2206      	movs	r2, #6
 800e48c:	1c7e      	adds	r6, r7, #1
 800e48e:	f7f1 febf 	bl	8000210 <memchr>
 800e492:	2800      	cmp	r0, #0
 800e494:	d038      	beq.n	800e508 <_svfiprintf_r+0x1c8>
 800e496:	4b24      	ldr	r3, [pc, #144]	; (800e528 <_svfiprintf_r+0x1e8>)
 800e498:	bb13      	cbnz	r3, 800e4e0 <_svfiprintf_r+0x1a0>
 800e49a:	9b03      	ldr	r3, [sp, #12]
 800e49c:	3307      	adds	r3, #7
 800e49e:	f023 0307 	bic.w	r3, r3, #7
 800e4a2:	3308      	adds	r3, #8
 800e4a4:	9303      	str	r3, [sp, #12]
 800e4a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e4a8:	444b      	add	r3, r9
 800e4aa:	9309      	str	r3, [sp, #36]	; 0x24
 800e4ac:	e76d      	b.n	800e38a <_svfiprintf_r+0x4a>
 800e4ae:	fb05 3202 	mla	r2, r5, r2, r3
 800e4b2:	2001      	movs	r0, #1
 800e4b4:	460f      	mov	r7, r1
 800e4b6:	e7a6      	b.n	800e406 <_svfiprintf_r+0xc6>
 800e4b8:	2300      	movs	r3, #0
 800e4ba:	3701      	adds	r7, #1
 800e4bc:	9305      	str	r3, [sp, #20]
 800e4be:	4619      	mov	r1, r3
 800e4c0:	250a      	movs	r5, #10
 800e4c2:	4638      	mov	r0, r7
 800e4c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4c8:	3a30      	subs	r2, #48	; 0x30
 800e4ca:	2a09      	cmp	r2, #9
 800e4cc:	d903      	bls.n	800e4d6 <_svfiprintf_r+0x196>
 800e4ce:	2b00      	cmp	r3, #0
 800e4d0:	d0c8      	beq.n	800e464 <_svfiprintf_r+0x124>
 800e4d2:	9105      	str	r1, [sp, #20]
 800e4d4:	e7c6      	b.n	800e464 <_svfiprintf_r+0x124>
 800e4d6:	fb05 2101 	mla	r1, r5, r1, r2
 800e4da:	2301      	movs	r3, #1
 800e4dc:	4607      	mov	r7, r0
 800e4de:	e7f0      	b.n	800e4c2 <_svfiprintf_r+0x182>
 800e4e0:	ab03      	add	r3, sp, #12
 800e4e2:	9300      	str	r3, [sp, #0]
 800e4e4:	4622      	mov	r2, r4
 800e4e6:	4b11      	ldr	r3, [pc, #68]	; (800e52c <_svfiprintf_r+0x1ec>)
 800e4e8:	a904      	add	r1, sp, #16
 800e4ea:	4640      	mov	r0, r8
 800e4ec:	f3af 8000 	nop.w
 800e4f0:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e4f4:	4681      	mov	r9, r0
 800e4f6:	d1d6      	bne.n	800e4a6 <_svfiprintf_r+0x166>
 800e4f8:	89a3      	ldrh	r3, [r4, #12]
 800e4fa:	065b      	lsls	r3, r3, #25
 800e4fc:	f53f af35 	bmi.w	800e36a <_svfiprintf_r+0x2a>
 800e500:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e502:	b01d      	add	sp, #116	; 0x74
 800e504:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e508:	ab03      	add	r3, sp, #12
 800e50a:	9300      	str	r3, [sp, #0]
 800e50c:	4622      	mov	r2, r4
 800e50e:	4b07      	ldr	r3, [pc, #28]	; (800e52c <_svfiprintf_r+0x1ec>)
 800e510:	a904      	add	r1, sp, #16
 800e512:	4640      	mov	r0, r8
 800e514:	f000 f882 	bl	800e61c <_printf_i>
 800e518:	e7ea      	b.n	800e4f0 <_svfiprintf_r+0x1b0>
 800e51a:	bf00      	nop
 800e51c:	08010acc 	.word	0x08010acc
 800e520:	08010ad2 	.word	0x08010ad2
 800e524:	08010ad6 	.word	0x08010ad6
 800e528:	00000000 	.word	0x00000000
 800e52c:	0800e28d 	.word	0x0800e28d

0800e530 <_printf_common>:
 800e530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e534:	4691      	mov	r9, r2
 800e536:	461f      	mov	r7, r3
 800e538:	688a      	ldr	r2, [r1, #8]
 800e53a:	690b      	ldr	r3, [r1, #16]
 800e53c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e540:	4293      	cmp	r3, r2
 800e542:	bfb8      	it	lt
 800e544:	4613      	movlt	r3, r2
 800e546:	f8c9 3000 	str.w	r3, [r9]
 800e54a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e54e:	4606      	mov	r6, r0
 800e550:	460c      	mov	r4, r1
 800e552:	b112      	cbz	r2, 800e55a <_printf_common+0x2a>
 800e554:	3301      	adds	r3, #1
 800e556:	f8c9 3000 	str.w	r3, [r9]
 800e55a:	6823      	ldr	r3, [r4, #0]
 800e55c:	0699      	lsls	r1, r3, #26
 800e55e:	bf42      	ittt	mi
 800e560:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e564:	3302      	addmi	r3, #2
 800e566:	f8c9 3000 	strmi.w	r3, [r9]
 800e56a:	6825      	ldr	r5, [r4, #0]
 800e56c:	f015 0506 	ands.w	r5, r5, #6
 800e570:	d107      	bne.n	800e582 <_printf_common+0x52>
 800e572:	f104 0a19 	add.w	sl, r4, #25
 800e576:	68e3      	ldr	r3, [r4, #12]
 800e578:	f8d9 2000 	ldr.w	r2, [r9]
 800e57c:	1a9b      	subs	r3, r3, r2
 800e57e:	42ab      	cmp	r3, r5
 800e580:	dc28      	bgt.n	800e5d4 <_printf_common+0xa4>
 800e582:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e586:	6822      	ldr	r2, [r4, #0]
 800e588:	3300      	adds	r3, #0
 800e58a:	bf18      	it	ne
 800e58c:	2301      	movne	r3, #1
 800e58e:	0692      	lsls	r2, r2, #26
 800e590:	d42d      	bmi.n	800e5ee <_printf_common+0xbe>
 800e592:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e596:	4639      	mov	r1, r7
 800e598:	4630      	mov	r0, r6
 800e59a:	47c0      	blx	r8
 800e59c:	3001      	adds	r0, #1
 800e59e:	d020      	beq.n	800e5e2 <_printf_common+0xb2>
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	68e5      	ldr	r5, [r4, #12]
 800e5a4:	f8d9 2000 	ldr.w	r2, [r9]
 800e5a8:	f003 0306 	and.w	r3, r3, #6
 800e5ac:	2b04      	cmp	r3, #4
 800e5ae:	bf08      	it	eq
 800e5b0:	1aad      	subeq	r5, r5, r2
 800e5b2:	68a3      	ldr	r3, [r4, #8]
 800e5b4:	6922      	ldr	r2, [r4, #16]
 800e5b6:	bf0c      	ite	eq
 800e5b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e5bc:	2500      	movne	r5, #0
 800e5be:	4293      	cmp	r3, r2
 800e5c0:	bfc4      	itt	gt
 800e5c2:	1a9b      	subgt	r3, r3, r2
 800e5c4:	18ed      	addgt	r5, r5, r3
 800e5c6:	f04f 0900 	mov.w	r9, #0
 800e5ca:	341a      	adds	r4, #26
 800e5cc:	454d      	cmp	r5, r9
 800e5ce:	d11a      	bne.n	800e606 <_printf_common+0xd6>
 800e5d0:	2000      	movs	r0, #0
 800e5d2:	e008      	b.n	800e5e6 <_printf_common+0xb6>
 800e5d4:	2301      	movs	r3, #1
 800e5d6:	4652      	mov	r2, sl
 800e5d8:	4639      	mov	r1, r7
 800e5da:	4630      	mov	r0, r6
 800e5dc:	47c0      	blx	r8
 800e5de:	3001      	adds	r0, #1
 800e5e0:	d103      	bne.n	800e5ea <_printf_common+0xba>
 800e5e2:	f04f 30ff 	mov.w	r0, #4294967295
 800e5e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e5ea:	3501      	adds	r5, #1
 800e5ec:	e7c3      	b.n	800e576 <_printf_common+0x46>
 800e5ee:	18e1      	adds	r1, r4, r3
 800e5f0:	1c5a      	adds	r2, r3, #1
 800e5f2:	2030      	movs	r0, #48	; 0x30
 800e5f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e5f8:	4422      	add	r2, r4
 800e5fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e5fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e602:	3302      	adds	r3, #2
 800e604:	e7c5      	b.n	800e592 <_printf_common+0x62>
 800e606:	2301      	movs	r3, #1
 800e608:	4622      	mov	r2, r4
 800e60a:	4639      	mov	r1, r7
 800e60c:	4630      	mov	r0, r6
 800e60e:	47c0      	blx	r8
 800e610:	3001      	adds	r0, #1
 800e612:	d0e6      	beq.n	800e5e2 <_printf_common+0xb2>
 800e614:	f109 0901 	add.w	r9, r9, #1
 800e618:	e7d8      	b.n	800e5cc <_printf_common+0x9c>
	...

0800e61c <_printf_i>:
 800e61c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e620:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e624:	460c      	mov	r4, r1
 800e626:	7e09      	ldrb	r1, [r1, #24]
 800e628:	b085      	sub	sp, #20
 800e62a:	296e      	cmp	r1, #110	; 0x6e
 800e62c:	4617      	mov	r7, r2
 800e62e:	4606      	mov	r6, r0
 800e630:	4698      	mov	r8, r3
 800e632:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e634:	f000 80b3 	beq.w	800e79e <_printf_i+0x182>
 800e638:	d822      	bhi.n	800e680 <_printf_i+0x64>
 800e63a:	2963      	cmp	r1, #99	; 0x63
 800e63c:	d036      	beq.n	800e6ac <_printf_i+0x90>
 800e63e:	d80a      	bhi.n	800e656 <_printf_i+0x3a>
 800e640:	2900      	cmp	r1, #0
 800e642:	f000 80b9 	beq.w	800e7b8 <_printf_i+0x19c>
 800e646:	2958      	cmp	r1, #88	; 0x58
 800e648:	f000 8083 	beq.w	800e752 <_printf_i+0x136>
 800e64c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e650:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e654:	e032      	b.n	800e6bc <_printf_i+0xa0>
 800e656:	2964      	cmp	r1, #100	; 0x64
 800e658:	d001      	beq.n	800e65e <_printf_i+0x42>
 800e65a:	2969      	cmp	r1, #105	; 0x69
 800e65c:	d1f6      	bne.n	800e64c <_printf_i+0x30>
 800e65e:	6820      	ldr	r0, [r4, #0]
 800e660:	6813      	ldr	r3, [r2, #0]
 800e662:	0605      	lsls	r5, r0, #24
 800e664:	f103 0104 	add.w	r1, r3, #4
 800e668:	d52a      	bpl.n	800e6c0 <_printf_i+0xa4>
 800e66a:	681b      	ldr	r3, [r3, #0]
 800e66c:	6011      	str	r1, [r2, #0]
 800e66e:	2b00      	cmp	r3, #0
 800e670:	da03      	bge.n	800e67a <_printf_i+0x5e>
 800e672:	222d      	movs	r2, #45	; 0x2d
 800e674:	425b      	negs	r3, r3
 800e676:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e67a:	486f      	ldr	r0, [pc, #444]	; (800e838 <_printf_i+0x21c>)
 800e67c:	220a      	movs	r2, #10
 800e67e:	e039      	b.n	800e6f4 <_printf_i+0xd8>
 800e680:	2973      	cmp	r1, #115	; 0x73
 800e682:	f000 809d 	beq.w	800e7c0 <_printf_i+0x1a4>
 800e686:	d808      	bhi.n	800e69a <_printf_i+0x7e>
 800e688:	296f      	cmp	r1, #111	; 0x6f
 800e68a:	d020      	beq.n	800e6ce <_printf_i+0xb2>
 800e68c:	2970      	cmp	r1, #112	; 0x70
 800e68e:	d1dd      	bne.n	800e64c <_printf_i+0x30>
 800e690:	6823      	ldr	r3, [r4, #0]
 800e692:	f043 0320 	orr.w	r3, r3, #32
 800e696:	6023      	str	r3, [r4, #0]
 800e698:	e003      	b.n	800e6a2 <_printf_i+0x86>
 800e69a:	2975      	cmp	r1, #117	; 0x75
 800e69c:	d017      	beq.n	800e6ce <_printf_i+0xb2>
 800e69e:	2978      	cmp	r1, #120	; 0x78
 800e6a0:	d1d4      	bne.n	800e64c <_printf_i+0x30>
 800e6a2:	2378      	movs	r3, #120	; 0x78
 800e6a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e6a8:	4864      	ldr	r0, [pc, #400]	; (800e83c <_printf_i+0x220>)
 800e6aa:	e055      	b.n	800e758 <_printf_i+0x13c>
 800e6ac:	6813      	ldr	r3, [r2, #0]
 800e6ae:	1d19      	adds	r1, r3, #4
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	6011      	str	r1, [r2, #0]
 800e6b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e6b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e6bc:	2301      	movs	r3, #1
 800e6be:	e08c      	b.n	800e7da <_printf_i+0x1be>
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	6011      	str	r1, [r2, #0]
 800e6c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e6c8:	bf18      	it	ne
 800e6ca:	b21b      	sxthne	r3, r3
 800e6cc:	e7cf      	b.n	800e66e <_printf_i+0x52>
 800e6ce:	6813      	ldr	r3, [r2, #0]
 800e6d0:	6825      	ldr	r5, [r4, #0]
 800e6d2:	1d18      	adds	r0, r3, #4
 800e6d4:	6010      	str	r0, [r2, #0]
 800e6d6:	0628      	lsls	r0, r5, #24
 800e6d8:	d501      	bpl.n	800e6de <_printf_i+0xc2>
 800e6da:	681b      	ldr	r3, [r3, #0]
 800e6dc:	e002      	b.n	800e6e4 <_printf_i+0xc8>
 800e6de:	0668      	lsls	r0, r5, #25
 800e6e0:	d5fb      	bpl.n	800e6da <_printf_i+0xbe>
 800e6e2:	881b      	ldrh	r3, [r3, #0]
 800e6e4:	4854      	ldr	r0, [pc, #336]	; (800e838 <_printf_i+0x21c>)
 800e6e6:	296f      	cmp	r1, #111	; 0x6f
 800e6e8:	bf14      	ite	ne
 800e6ea:	220a      	movne	r2, #10
 800e6ec:	2208      	moveq	r2, #8
 800e6ee:	2100      	movs	r1, #0
 800e6f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e6f4:	6865      	ldr	r5, [r4, #4]
 800e6f6:	60a5      	str	r5, [r4, #8]
 800e6f8:	2d00      	cmp	r5, #0
 800e6fa:	f2c0 8095 	blt.w	800e828 <_printf_i+0x20c>
 800e6fe:	6821      	ldr	r1, [r4, #0]
 800e700:	f021 0104 	bic.w	r1, r1, #4
 800e704:	6021      	str	r1, [r4, #0]
 800e706:	2b00      	cmp	r3, #0
 800e708:	d13d      	bne.n	800e786 <_printf_i+0x16a>
 800e70a:	2d00      	cmp	r5, #0
 800e70c:	f040 808e 	bne.w	800e82c <_printf_i+0x210>
 800e710:	4665      	mov	r5, ip
 800e712:	2a08      	cmp	r2, #8
 800e714:	d10b      	bne.n	800e72e <_printf_i+0x112>
 800e716:	6823      	ldr	r3, [r4, #0]
 800e718:	07db      	lsls	r3, r3, #31
 800e71a:	d508      	bpl.n	800e72e <_printf_i+0x112>
 800e71c:	6923      	ldr	r3, [r4, #16]
 800e71e:	6862      	ldr	r2, [r4, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	bfde      	ittt	le
 800e724:	2330      	movle	r3, #48	; 0x30
 800e726:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e72a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e72e:	ebac 0305 	sub.w	r3, ip, r5
 800e732:	6123      	str	r3, [r4, #16]
 800e734:	f8cd 8000 	str.w	r8, [sp]
 800e738:	463b      	mov	r3, r7
 800e73a:	aa03      	add	r2, sp, #12
 800e73c:	4621      	mov	r1, r4
 800e73e:	4630      	mov	r0, r6
 800e740:	f7ff fef6 	bl	800e530 <_printf_common>
 800e744:	3001      	adds	r0, #1
 800e746:	d14d      	bne.n	800e7e4 <_printf_i+0x1c8>
 800e748:	f04f 30ff 	mov.w	r0, #4294967295
 800e74c:	b005      	add	sp, #20
 800e74e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e752:	4839      	ldr	r0, [pc, #228]	; (800e838 <_printf_i+0x21c>)
 800e754:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e758:	6813      	ldr	r3, [r2, #0]
 800e75a:	6821      	ldr	r1, [r4, #0]
 800e75c:	1d1d      	adds	r5, r3, #4
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	6015      	str	r5, [r2, #0]
 800e762:	060a      	lsls	r2, r1, #24
 800e764:	d50b      	bpl.n	800e77e <_printf_i+0x162>
 800e766:	07ca      	lsls	r2, r1, #31
 800e768:	bf44      	itt	mi
 800e76a:	f041 0120 	orrmi.w	r1, r1, #32
 800e76e:	6021      	strmi	r1, [r4, #0]
 800e770:	b91b      	cbnz	r3, 800e77a <_printf_i+0x15e>
 800e772:	6822      	ldr	r2, [r4, #0]
 800e774:	f022 0220 	bic.w	r2, r2, #32
 800e778:	6022      	str	r2, [r4, #0]
 800e77a:	2210      	movs	r2, #16
 800e77c:	e7b7      	b.n	800e6ee <_printf_i+0xd2>
 800e77e:	064d      	lsls	r5, r1, #25
 800e780:	bf48      	it	mi
 800e782:	b29b      	uxthmi	r3, r3
 800e784:	e7ef      	b.n	800e766 <_printf_i+0x14a>
 800e786:	4665      	mov	r5, ip
 800e788:	fbb3 f1f2 	udiv	r1, r3, r2
 800e78c:	fb02 3311 	mls	r3, r2, r1, r3
 800e790:	5cc3      	ldrb	r3, [r0, r3]
 800e792:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e796:	460b      	mov	r3, r1
 800e798:	2900      	cmp	r1, #0
 800e79a:	d1f5      	bne.n	800e788 <_printf_i+0x16c>
 800e79c:	e7b9      	b.n	800e712 <_printf_i+0xf6>
 800e79e:	6813      	ldr	r3, [r2, #0]
 800e7a0:	6825      	ldr	r5, [r4, #0]
 800e7a2:	6961      	ldr	r1, [r4, #20]
 800e7a4:	1d18      	adds	r0, r3, #4
 800e7a6:	6010      	str	r0, [r2, #0]
 800e7a8:	0628      	lsls	r0, r5, #24
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	d501      	bpl.n	800e7b2 <_printf_i+0x196>
 800e7ae:	6019      	str	r1, [r3, #0]
 800e7b0:	e002      	b.n	800e7b8 <_printf_i+0x19c>
 800e7b2:	066a      	lsls	r2, r5, #25
 800e7b4:	d5fb      	bpl.n	800e7ae <_printf_i+0x192>
 800e7b6:	8019      	strh	r1, [r3, #0]
 800e7b8:	2300      	movs	r3, #0
 800e7ba:	6123      	str	r3, [r4, #16]
 800e7bc:	4665      	mov	r5, ip
 800e7be:	e7b9      	b.n	800e734 <_printf_i+0x118>
 800e7c0:	6813      	ldr	r3, [r2, #0]
 800e7c2:	1d19      	adds	r1, r3, #4
 800e7c4:	6011      	str	r1, [r2, #0]
 800e7c6:	681d      	ldr	r5, [r3, #0]
 800e7c8:	6862      	ldr	r2, [r4, #4]
 800e7ca:	2100      	movs	r1, #0
 800e7cc:	4628      	mov	r0, r5
 800e7ce:	f7f1 fd1f 	bl	8000210 <memchr>
 800e7d2:	b108      	cbz	r0, 800e7d8 <_printf_i+0x1bc>
 800e7d4:	1b40      	subs	r0, r0, r5
 800e7d6:	6060      	str	r0, [r4, #4]
 800e7d8:	6863      	ldr	r3, [r4, #4]
 800e7da:	6123      	str	r3, [r4, #16]
 800e7dc:	2300      	movs	r3, #0
 800e7de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e7e2:	e7a7      	b.n	800e734 <_printf_i+0x118>
 800e7e4:	6923      	ldr	r3, [r4, #16]
 800e7e6:	462a      	mov	r2, r5
 800e7e8:	4639      	mov	r1, r7
 800e7ea:	4630      	mov	r0, r6
 800e7ec:	47c0      	blx	r8
 800e7ee:	3001      	adds	r0, #1
 800e7f0:	d0aa      	beq.n	800e748 <_printf_i+0x12c>
 800e7f2:	6823      	ldr	r3, [r4, #0]
 800e7f4:	079b      	lsls	r3, r3, #30
 800e7f6:	d413      	bmi.n	800e820 <_printf_i+0x204>
 800e7f8:	68e0      	ldr	r0, [r4, #12]
 800e7fa:	9b03      	ldr	r3, [sp, #12]
 800e7fc:	4298      	cmp	r0, r3
 800e7fe:	bfb8      	it	lt
 800e800:	4618      	movlt	r0, r3
 800e802:	e7a3      	b.n	800e74c <_printf_i+0x130>
 800e804:	2301      	movs	r3, #1
 800e806:	464a      	mov	r2, r9
 800e808:	4639      	mov	r1, r7
 800e80a:	4630      	mov	r0, r6
 800e80c:	47c0      	blx	r8
 800e80e:	3001      	adds	r0, #1
 800e810:	d09a      	beq.n	800e748 <_printf_i+0x12c>
 800e812:	3501      	adds	r5, #1
 800e814:	68e3      	ldr	r3, [r4, #12]
 800e816:	9a03      	ldr	r2, [sp, #12]
 800e818:	1a9b      	subs	r3, r3, r2
 800e81a:	42ab      	cmp	r3, r5
 800e81c:	dcf2      	bgt.n	800e804 <_printf_i+0x1e8>
 800e81e:	e7eb      	b.n	800e7f8 <_printf_i+0x1dc>
 800e820:	2500      	movs	r5, #0
 800e822:	f104 0919 	add.w	r9, r4, #25
 800e826:	e7f5      	b.n	800e814 <_printf_i+0x1f8>
 800e828:	2b00      	cmp	r3, #0
 800e82a:	d1ac      	bne.n	800e786 <_printf_i+0x16a>
 800e82c:	7803      	ldrb	r3, [r0, #0]
 800e82e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e832:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e836:	e76c      	b.n	800e712 <_printf_i+0xf6>
 800e838:	08010add 	.word	0x08010add
 800e83c:	08010aee 	.word	0x08010aee

0800e840 <memmove>:
 800e840:	4288      	cmp	r0, r1
 800e842:	b510      	push	{r4, lr}
 800e844:	eb01 0302 	add.w	r3, r1, r2
 800e848:	d807      	bhi.n	800e85a <memmove+0x1a>
 800e84a:	1e42      	subs	r2, r0, #1
 800e84c:	4299      	cmp	r1, r3
 800e84e:	d00a      	beq.n	800e866 <memmove+0x26>
 800e850:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e854:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e858:	e7f8      	b.n	800e84c <memmove+0xc>
 800e85a:	4283      	cmp	r3, r0
 800e85c:	d9f5      	bls.n	800e84a <memmove+0xa>
 800e85e:	1881      	adds	r1, r0, r2
 800e860:	1ad2      	subs	r2, r2, r3
 800e862:	42d3      	cmn	r3, r2
 800e864:	d100      	bne.n	800e868 <memmove+0x28>
 800e866:	bd10      	pop	{r4, pc}
 800e868:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e86c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e870:	e7f7      	b.n	800e862 <memmove+0x22>
	...

0800e874 <_free_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4605      	mov	r5, r0
 800e878:	2900      	cmp	r1, #0
 800e87a:	d045      	beq.n	800e908 <_free_r+0x94>
 800e87c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e880:	1f0c      	subs	r4, r1, #4
 800e882:	2b00      	cmp	r3, #0
 800e884:	bfb8      	it	lt
 800e886:	18e4      	addlt	r4, r4, r3
 800e888:	f000 f8d2 	bl	800ea30 <__malloc_lock>
 800e88c:	4a1f      	ldr	r2, [pc, #124]	; (800e90c <_free_r+0x98>)
 800e88e:	6813      	ldr	r3, [r2, #0]
 800e890:	4610      	mov	r0, r2
 800e892:	b933      	cbnz	r3, 800e8a2 <_free_r+0x2e>
 800e894:	6063      	str	r3, [r4, #4]
 800e896:	6014      	str	r4, [r2, #0]
 800e898:	4628      	mov	r0, r5
 800e89a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e89e:	f000 b8c8 	b.w	800ea32 <__malloc_unlock>
 800e8a2:	42a3      	cmp	r3, r4
 800e8a4:	d90c      	bls.n	800e8c0 <_free_r+0x4c>
 800e8a6:	6821      	ldr	r1, [r4, #0]
 800e8a8:	1862      	adds	r2, r4, r1
 800e8aa:	4293      	cmp	r3, r2
 800e8ac:	bf04      	itt	eq
 800e8ae:	681a      	ldreq	r2, [r3, #0]
 800e8b0:	685b      	ldreq	r3, [r3, #4]
 800e8b2:	6063      	str	r3, [r4, #4]
 800e8b4:	bf04      	itt	eq
 800e8b6:	1852      	addeq	r2, r2, r1
 800e8b8:	6022      	streq	r2, [r4, #0]
 800e8ba:	6004      	str	r4, [r0, #0]
 800e8bc:	e7ec      	b.n	800e898 <_free_r+0x24>
 800e8be:	4613      	mov	r3, r2
 800e8c0:	685a      	ldr	r2, [r3, #4]
 800e8c2:	b10a      	cbz	r2, 800e8c8 <_free_r+0x54>
 800e8c4:	42a2      	cmp	r2, r4
 800e8c6:	d9fa      	bls.n	800e8be <_free_r+0x4a>
 800e8c8:	6819      	ldr	r1, [r3, #0]
 800e8ca:	1858      	adds	r0, r3, r1
 800e8cc:	42a0      	cmp	r0, r4
 800e8ce:	d10b      	bne.n	800e8e8 <_free_r+0x74>
 800e8d0:	6820      	ldr	r0, [r4, #0]
 800e8d2:	4401      	add	r1, r0
 800e8d4:	1858      	adds	r0, r3, r1
 800e8d6:	4282      	cmp	r2, r0
 800e8d8:	6019      	str	r1, [r3, #0]
 800e8da:	d1dd      	bne.n	800e898 <_free_r+0x24>
 800e8dc:	6810      	ldr	r0, [r2, #0]
 800e8de:	6852      	ldr	r2, [r2, #4]
 800e8e0:	605a      	str	r2, [r3, #4]
 800e8e2:	4401      	add	r1, r0
 800e8e4:	6019      	str	r1, [r3, #0]
 800e8e6:	e7d7      	b.n	800e898 <_free_r+0x24>
 800e8e8:	d902      	bls.n	800e8f0 <_free_r+0x7c>
 800e8ea:	230c      	movs	r3, #12
 800e8ec:	602b      	str	r3, [r5, #0]
 800e8ee:	e7d3      	b.n	800e898 <_free_r+0x24>
 800e8f0:	6820      	ldr	r0, [r4, #0]
 800e8f2:	1821      	adds	r1, r4, r0
 800e8f4:	428a      	cmp	r2, r1
 800e8f6:	bf04      	itt	eq
 800e8f8:	6811      	ldreq	r1, [r2, #0]
 800e8fa:	6852      	ldreq	r2, [r2, #4]
 800e8fc:	6062      	str	r2, [r4, #4]
 800e8fe:	bf04      	itt	eq
 800e900:	1809      	addeq	r1, r1, r0
 800e902:	6021      	streq	r1, [r4, #0]
 800e904:	605c      	str	r4, [r3, #4]
 800e906:	e7c7      	b.n	800e898 <_free_r+0x24>
 800e908:	bd38      	pop	{r3, r4, r5, pc}
 800e90a:	bf00      	nop
 800e90c:	20008654 	.word	0x20008654

0800e910 <_malloc_r>:
 800e910:	b570      	push	{r4, r5, r6, lr}
 800e912:	1ccd      	adds	r5, r1, #3
 800e914:	f025 0503 	bic.w	r5, r5, #3
 800e918:	3508      	adds	r5, #8
 800e91a:	2d0c      	cmp	r5, #12
 800e91c:	bf38      	it	cc
 800e91e:	250c      	movcc	r5, #12
 800e920:	2d00      	cmp	r5, #0
 800e922:	4606      	mov	r6, r0
 800e924:	db01      	blt.n	800e92a <_malloc_r+0x1a>
 800e926:	42a9      	cmp	r1, r5
 800e928:	d903      	bls.n	800e932 <_malloc_r+0x22>
 800e92a:	230c      	movs	r3, #12
 800e92c:	6033      	str	r3, [r6, #0]
 800e92e:	2000      	movs	r0, #0
 800e930:	bd70      	pop	{r4, r5, r6, pc}
 800e932:	f000 f87d 	bl	800ea30 <__malloc_lock>
 800e936:	4a21      	ldr	r2, [pc, #132]	; (800e9bc <_malloc_r+0xac>)
 800e938:	6814      	ldr	r4, [r2, #0]
 800e93a:	4621      	mov	r1, r4
 800e93c:	b991      	cbnz	r1, 800e964 <_malloc_r+0x54>
 800e93e:	4c20      	ldr	r4, [pc, #128]	; (800e9c0 <_malloc_r+0xb0>)
 800e940:	6823      	ldr	r3, [r4, #0]
 800e942:	b91b      	cbnz	r3, 800e94c <_malloc_r+0x3c>
 800e944:	4630      	mov	r0, r6
 800e946:	f000 f863 	bl	800ea10 <_sbrk_r>
 800e94a:	6020      	str	r0, [r4, #0]
 800e94c:	4629      	mov	r1, r5
 800e94e:	4630      	mov	r0, r6
 800e950:	f000 f85e 	bl	800ea10 <_sbrk_r>
 800e954:	1c43      	adds	r3, r0, #1
 800e956:	d124      	bne.n	800e9a2 <_malloc_r+0x92>
 800e958:	230c      	movs	r3, #12
 800e95a:	6033      	str	r3, [r6, #0]
 800e95c:	4630      	mov	r0, r6
 800e95e:	f000 f868 	bl	800ea32 <__malloc_unlock>
 800e962:	e7e4      	b.n	800e92e <_malloc_r+0x1e>
 800e964:	680b      	ldr	r3, [r1, #0]
 800e966:	1b5b      	subs	r3, r3, r5
 800e968:	d418      	bmi.n	800e99c <_malloc_r+0x8c>
 800e96a:	2b0b      	cmp	r3, #11
 800e96c:	d90f      	bls.n	800e98e <_malloc_r+0x7e>
 800e96e:	600b      	str	r3, [r1, #0]
 800e970:	50cd      	str	r5, [r1, r3]
 800e972:	18cc      	adds	r4, r1, r3
 800e974:	4630      	mov	r0, r6
 800e976:	f000 f85c 	bl	800ea32 <__malloc_unlock>
 800e97a:	f104 000b 	add.w	r0, r4, #11
 800e97e:	1d23      	adds	r3, r4, #4
 800e980:	f020 0007 	bic.w	r0, r0, #7
 800e984:	1ac3      	subs	r3, r0, r3
 800e986:	d0d3      	beq.n	800e930 <_malloc_r+0x20>
 800e988:	425a      	negs	r2, r3
 800e98a:	50e2      	str	r2, [r4, r3]
 800e98c:	e7d0      	b.n	800e930 <_malloc_r+0x20>
 800e98e:	428c      	cmp	r4, r1
 800e990:	684b      	ldr	r3, [r1, #4]
 800e992:	bf16      	itet	ne
 800e994:	6063      	strne	r3, [r4, #4]
 800e996:	6013      	streq	r3, [r2, #0]
 800e998:	460c      	movne	r4, r1
 800e99a:	e7eb      	b.n	800e974 <_malloc_r+0x64>
 800e99c:	460c      	mov	r4, r1
 800e99e:	6849      	ldr	r1, [r1, #4]
 800e9a0:	e7cc      	b.n	800e93c <_malloc_r+0x2c>
 800e9a2:	1cc4      	adds	r4, r0, #3
 800e9a4:	f024 0403 	bic.w	r4, r4, #3
 800e9a8:	42a0      	cmp	r0, r4
 800e9aa:	d005      	beq.n	800e9b8 <_malloc_r+0xa8>
 800e9ac:	1a21      	subs	r1, r4, r0
 800e9ae:	4630      	mov	r0, r6
 800e9b0:	f000 f82e 	bl	800ea10 <_sbrk_r>
 800e9b4:	3001      	adds	r0, #1
 800e9b6:	d0cf      	beq.n	800e958 <_malloc_r+0x48>
 800e9b8:	6025      	str	r5, [r4, #0]
 800e9ba:	e7db      	b.n	800e974 <_malloc_r+0x64>
 800e9bc:	20008654 	.word	0x20008654
 800e9c0:	20008658 	.word	0x20008658

0800e9c4 <_realloc_r>:
 800e9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9c6:	4607      	mov	r7, r0
 800e9c8:	4614      	mov	r4, r2
 800e9ca:	460e      	mov	r6, r1
 800e9cc:	b921      	cbnz	r1, 800e9d8 <_realloc_r+0x14>
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e9d4:	f7ff bf9c 	b.w	800e910 <_malloc_r>
 800e9d8:	b922      	cbnz	r2, 800e9e4 <_realloc_r+0x20>
 800e9da:	f7ff ff4b 	bl	800e874 <_free_r>
 800e9de:	4625      	mov	r5, r4
 800e9e0:	4628      	mov	r0, r5
 800e9e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9e4:	f000 f826 	bl	800ea34 <_malloc_usable_size_r>
 800e9e8:	42a0      	cmp	r0, r4
 800e9ea:	d20f      	bcs.n	800ea0c <_realloc_r+0x48>
 800e9ec:	4621      	mov	r1, r4
 800e9ee:	4638      	mov	r0, r7
 800e9f0:	f7ff ff8e 	bl	800e910 <_malloc_r>
 800e9f4:	4605      	mov	r5, r0
 800e9f6:	2800      	cmp	r0, #0
 800e9f8:	d0f2      	beq.n	800e9e0 <_realloc_r+0x1c>
 800e9fa:	4631      	mov	r1, r6
 800e9fc:	4622      	mov	r2, r4
 800e9fe:	f7ff fc11 	bl	800e224 <memcpy>
 800ea02:	4631      	mov	r1, r6
 800ea04:	4638      	mov	r0, r7
 800ea06:	f7ff ff35 	bl	800e874 <_free_r>
 800ea0a:	e7e9      	b.n	800e9e0 <_realloc_r+0x1c>
 800ea0c:	4635      	mov	r5, r6
 800ea0e:	e7e7      	b.n	800e9e0 <_realloc_r+0x1c>

0800ea10 <_sbrk_r>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	4c06      	ldr	r4, [pc, #24]	; (800ea2c <_sbrk_r+0x1c>)
 800ea14:	2300      	movs	r3, #0
 800ea16:	4605      	mov	r5, r0
 800ea18:	4608      	mov	r0, r1
 800ea1a:	6023      	str	r3, [r4, #0]
 800ea1c:	f7f6 f8e2 	bl	8004be4 <_sbrk>
 800ea20:	1c43      	adds	r3, r0, #1
 800ea22:	d102      	bne.n	800ea2a <_sbrk_r+0x1a>
 800ea24:	6823      	ldr	r3, [r4, #0]
 800ea26:	b103      	cbz	r3, 800ea2a <_sbrk_r+0x1a>
 800ea28:	602b      	str	r3, [r5, #0]
 800ea2a:	bd38      	pop	{r3, r4, r5, pc}
 800ea2c:	20008d50 	.word	0x20008d50

0800ea30 <__malloc_lock>:
 800ea30:	4770      	bx	lr

0800ea32 <__malloc_unlock>:
 800ea32:	4770      	bx	lr

0800ea34 <_malloc_usable_size_r>:
 800ea34:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ea38:	1f18      	subs	r0, r3, #4
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	bfbc      	itt	lt
 800ea3e:	580b      	ldrlt	r3, [r1, r0]
 800ea40:	18c0      	addlt	r0, r0, r3
 800ea42:	4770      	bx	lr

0800ea44 <_init>:
 800ea44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea46:	bf00      	nop
 800ea48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea4a:	bc08      	pop	{r3}
 800ea4c:	469e      	mov	lr, r3
 800ea4e:	4770      	bx	lr

0800ea50 <_fini>:
 800ea50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea52:	bf00      	nop
 800ea54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea56:	bc08      	pop	{r3}
 800ea58:	469e      	mov	lr, r3
 800ea5a:	4770      	bx	lr

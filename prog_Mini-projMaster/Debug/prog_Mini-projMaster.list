
prog_Mini-projMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e7dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000208c  0800e9ac  0800e9ac  0001e9ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010a38  08010a38  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  08010a38  08010a38  00020a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010a40  08010a40  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010a40  08010a40  00020a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010a44  08010a44  00020a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  08010a48  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c94  200000c0  08010b08  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008d54  08010b08  00038d54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c99e  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005533  00000000  00000000  0005ca8e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00002600  00000000  00000000  00061fc8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002368  00000000  00000000  000645c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e203  00000000  00000000  00066930  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f59c  00000000  00000000  00094b33  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b81  00000000  00000000  000b40cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8c50  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a3bc  00000000  00000000  001c8ccc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c0 	.word	0x200000c0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e994 	.word	0x0800e994

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c4 	.word	0x200000c4
 800020c:	0800e994 	.word	0x0800e994

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000dc 	.word	0x200000dc
 8000614:	20000134 	.word	0x20000134

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f002 f8e2 	bl	80027ec <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 f9b4 	bl	8000994 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 f998 	bl	8000994 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f89d 	bl	80027b0 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f97e 	bl	80009b4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f002 f867 	bl	80027b0 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000334 	.word	0x20000334

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 ffb4 	bl	80027b0 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 ffa6 	bl	80027b0 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 ff8b 	bl	80027b0 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 ff7d 	bl	80027b0 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000334 	.word	0x20000334
 80008f8:	20000338 	.word	0x20000338

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 ff30 	bl	800277c <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 ff1c 	bl	800277c <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000334 	.word	0x20000334

08000994 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000998:	f7ff fff0 	bl	800097c <ft5336_Get_I2C_InitializedStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80009a2:	f001 fee1 	bl	8002768 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80009a6:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000334 	.word	0x20000334

080009b4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b0b0      	sub	sp, #192	; 0xc0
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f004 f920 	bl	8004c1a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f915 	bl	8000c08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 ff87 	bl	80018f0 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 fa13 	bl	8000e0c <MX_ADC3_Init>
  MX_I2C1_Init();
 80009e6:	f000 fabf 	bl	8000f68 <MX_I2C1_Init>
  MX_I2C3_Init();
 80009ea:	f000 fafd 	bl	8000fe8 <MX_I2C3_Init>
  MX_LTDC_Init();
 80009ee:	f000 fb3b 	bl	8001068 <MX_LTDC_Init>
  MX_RTC_Init();
 80009f2:	f000 fbbb 	bl	800116c <MX_RTC_Init>
  MX_SPI2_Init();
 80009f6:	f000 fc5f 	bl	80012b8 <MX_SPI2_Init>
  MX_TIM1_Init();
 80009fa:	f000 fc9b 	bl	8001334 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009fe:	f000 fced 	bl	80013dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a02:	f000 fd39 	bl	8001478 <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a06:	f000 fd9d 	bl	8001544 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a0a:	f000 fde9 	bl	80015e0 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 fec1 	bl	8001794 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a12:	f000 feef 	bl	80017f4 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a16:	f000 f9a7 	bl	8000d68 <MX_ADC1_Init>
  MX_DAC_Init();
 8000a1a:	f000 fa49 	bl	8000eb0 <MX_DAC_Init>
  MX_UART7_Init();
 8000a1e:	f000 fe89 	bl	8001734 <MX_UART7_Init>
  MX_FMC_Init();
 8000a22:	f000 ff17 	bl	8001854 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000a26:	f000 fa6d 	bl	8000f04 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000a2a:	f001 feeb 	bl	8002804 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 ff7e 	bl	8002934 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a38:	f001 ff54 	bl	80028e4 <BSP_LCD_GetXSize>
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	f001 ff65 	bl	800290c <BSP_LCD_GetYSize>
 8000a42:	4603      	mov	r3, r0
 8000a44:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a48:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f001 ff6f 	bl	8002934 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a56:	f002 fde7 	bl	8003628 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f001 ffca 	bl	80029f4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a64:	f002 f838 	bl	8002ad8 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000a68:	4855      	ldr	r0, [pc, #340]	; (8000bc0 <main+0x1f0>)
 8000a6a:	f002 f805 	bl	8002a78 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	f001 ffcf 	bl	8002a14 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000a76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a7a:	f001 ffe3 	bl	8002a44 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a7e:	f001 ff31 	bl	80028e4 <BSP_LCD_GetXSize>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29c      	uxth	r4, r3
 8000a86:	f001 ff41 	bl	800290c <BSP_LCD_GetYSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f003 fa57 	bl	8003f44 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart7,rxbuffer,1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	494a      	ldr	r1, [pc, #296]	; (8000bc4 <main+0x1f4>)
 8000a9a:	484b      	ldr	r0, [pc, #300]	; (8000bc8 <main+0x1f8>)
 8000a9c:	f009 ff7c 	bl	800a998 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000aac:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00b f860 	bl	800bb76 <osMutexCreate>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b44      	ldr	r3, [pc, #272]	; (8000bcc <main+0x1fc>)
 8000aba:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000abc:	4b44      	ldr	r3, [pc, #272]	; (8000bd0 <main+0x200>)
 8000abe:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000ac8:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00b f869 	bl	800bba6 <osMessageCreate>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b3f      	ldr	r3, [pc, #252]	; (8000bd4 <main+0x204>)
 8000ad8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ada:	4b3f      	ldr	r3, [pc, #252]	; (8000bd8 <main+0x208>)
 8000adc:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00a ffde 	bl	800bab6 <osThreadCreate>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b37      	ldr	r3, [pc, #220]	; (8000bdc <main+0x20c>)
 8000afe:	601a      	str	r2, [r3, #0]

  /* definition and creation of horloge */
  osThreadDef(horloge, Starthorloge, osPriorityBelowNormal, 0, 1024);
 8000b00:	4b37      	ldr	r3, [pc, #220]	; (8000be0 <main+0x210>)
 8000b02:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  horlogeHandle = osThreadCreate(osThread(horloge), NULL);
 8000b14:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00a ffcb 	bl	800bab6 <osThreadCreate>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b30      	ldr	r3, [pc, #192]	; (8000be4 <main+0x214>)
 8000b24:	601a      	str	r2, [r3, #0]

  /* definition and creation of LRacket */
  osThreadDef(LRacket, StartLRacket, osPriorityAboveNormal, 0, 1024);
 8000b26:	4b30      	ldr	r3, [pc, #192]	; (8000be8 <main+0x218>)
 8000b28:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LRacketHandle = osThreadCreate(osThread(LRacket), NULL);
 8000b3a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00a ffb8 	bl	800bab6 <osThreadCreate>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b28      	ldr	r3, [pc, #160]	; (8000bec <main+0x21c>)
 8000b4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Ball */
  osThreadDef(Ball, StartBall, osPriorityHigh, 0, 1024);
 8000b4c:	4b28      	ldr	r3, [pc, #160]	; (8000bf0 <main+0x220>)
 8000b4e:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallHandle = osThreadCreate(osThread(Ball), NULL);
 8000b60:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00a ffa5 	bl	800bab6 <osThreadCreate>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <main+0x224>)
 8000b70:	601a      	str	r2, [r3, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <main+0x228>)
 8000b74:	f107 041c 	add.w	r4, r7, #28
 8000b78:	461d      	mov	r5, r3
 8000b7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b82:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000b86:	f107 031c 	add.w	r3, r7, #28
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a ff92 	bl	800bab6 <osThreadCreate>
 8000b92:	4602      	mov	r2, r0
 8000b94:	4b19      	ldr	r3, [pc, #100]	; (8000bfc <main+0x22c>)
 8000b96:	601a      	str	r2, [r3, #0]

  /* definition and creation of Transmit */
  osThreadDef(Transmit, StartTransmit, osPriorityAboveNormal, 0, 128);
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <main+0x230>)
 8000b9a:	463c      	mov	r4, r7
 8000b9c:	461d      	mov	r5, r3
 8000b9e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ba0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ba2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ba6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitHandle = osThreadCreate(osThread(Transmit), NULL);
 8000baa:	463b      	mov	r3, r7
 8000bac:	2100      	movs	r1, #0
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f00a ff81 	bl	800bab6 <osThreadCreate>
 8000bb4:	4602      	mov	r2, r0
 8000bb6:	4b13      	ldr	r3, [pc, #76]	; (8000c04 <main+0x234>)
 8000bb8:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000bba:	f00a ff75 	bl	800baa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000bbe:	e7fe      	b.n	8000bbe <main+0x1ee>
 8000bc0:	20000040 	.word	0x20000040
 8000bc4:	20008c1c 	.word	0x20008c1c
 8000bc8:	20008714 	.word	0x20008714
 8000bcc:	20008c18 	.word	0x20008c18
 8000bd0:	0800e9ac 	.word	0x0800e9ac
 8000bd4:	20008c2c 	.word	0x20008c2c
 8000bd8:	0800e9c8 	.word	0x0800e9c8
 8000bdc:	20008660 	.word	0x20008660
 8000be0:	0800e9ec 	.word	0x0800e9ec
 8000be4:	20008990 	.word	0x20008990
 8000be8:	0800ea10 	.word	0x0800ea10
 8000bec:	2000865c 	.word	0x2000865c
 8000bf0:	0800ea34 	.word	0x0800ea34
 8000bf4:	20008c28 	.word	0x20008c28
 8000bf8:	0800ea5c 	.word	0x0800ea5c
 8000bfc:	200089dc 	.word	0x200089dc
 8000c00:	0800ea84 	.word	0x0800ea84
 8000c04:	200089e0 	.word	0x200089e0

08000c08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b0b4      	sub	sp, #208	; 0xd0
 8000c0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c0e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c12:	2230      	movs	r2, #48	; 0x30
 8000c14:	2100      	movs	r1, #0
 8000c16:	4618      	mov	r0, r3
 8000c18:	f00d fab7 	bl	800e18a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c1c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000c20:	2200      	movs	r2, #0
 8000c22:	601a      	str	r2, [r3, #0]
 8000c24:	605a      	str	r2, [r3, #4]
 8000c26:	609a      	str	r2, [r3, #8]
 8000c28:	60da      	str	r2, [r3, #12]
 8000c2a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	2284      	movs	r2, #132	; 0x84
 8000c32:	2100      	movs	r1, #0
 8000c34:	4618      	mov	r0, r3
 8000c36:	f00d faa8 	bl	800e18a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c3a:	f006 fe3f 	bl	80078bc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c3e:	4b47      	ldr	r3, [pc, #284]	; (8000d5c <SystemClock_Config+0x154>)
 8000c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c42:	4a46      	ldr	r2, [pc, #280]	; (8000d5c <SystemClock_Config+0x154>)
 8000c44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c48:	6413      	str	r3, [r2, #64]	; 0x40
 8000c4a:	4b44      	ldr	r3, [pc, #272]	; (8000d5c <SystemClock_Config+0x154>)
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c52:	607b      	str	r3, [r7, #4]
 8000c54:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c56:	4b42      	ldr	r3, [pc, #264]	; (8000d60 <SystemClock_Config+0x158>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4a41      	ldr	r2, [pc, #260]	; (8000d60 <SystemClock_Config+0x158>)
 8000c5c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c60:	6013      	str	r3, [r2, #0]
 8000c62:	4b3f      	ldr	r3, [pc, #252]	; (8000d60 <SystemClock_Config+0x158>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c6a:	603b      	str	r3, [r7, #0]
 8000c6c:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c6e:	2309      	movs	r3, #9
 8000c70:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c78:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c7c:	2301      	movs	r3, #1
 8000c7e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c82:	2302      	movs	r3, #2
 8000c84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c88:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c90:	2319      	movs	r3, #25
 8000c92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c96:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c9a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ca4:	2309      	movs	r3, #9
 8000ca6:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000caa:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000cae:	4618      	mov	r0, r3
 8000cb0:	f006 fe64 	bl	800797c <HAL_RCC_OscConfig>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d001      	beq.n	8000cbe <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000cba:	f001 fbfb 	bl	80024b4 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000cbe:	f006 fe0d 	bl	80078dc <HAL_PWREx_EnableOverDrive>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d001      	beq.n	8000ccc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000cc8:	f001 fbf4 	bl	80024b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ccc:	230f      	movs	r3, #15
 8000cce:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000cd2:	2302      	movs	r3, #2
 8000cd4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cde:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000ce2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000ce6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cee:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cf2:	2106      	movs	r1, #6
 8000cf4:	4618      	mov	r0, r3
 8000cf6:	f007 f8e5 	bl	8007ec4 <HAL_RCC_ClockConfig>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000d00:	f001 fbd8 	bl	80024b4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000d04:	4b17      	ldr	r3, [pc, #92]	; (8000d64 <SystemClock_Config+0x15c>)
 8000d06:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000d08:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000d0c:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000d0e:	2305      	movs	r3, #5
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000d12:	2302      	movs	r3, #2
 8000d14:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000d16:	2303      	movs	r3, #3
 8000d18:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d22:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000d24:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d28:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d2e:	2300      	movs	r3, #0
 8000d30:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000d32:	2300      	movs	r3, #0
 8000d34:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d36:	2300      	movs	r3, #0
 8000d38:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d3e:	f107 0308 	add.w	r3, r7, #8
 8000d42:	4618      	mov	r0, r3
 8000d44:	f007 fac2 	bl	80082cc <HAL_RCCEx_PeriphCLKConfig>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d4e:	f001 fbb1 	bl	80024b4 <Error_Handler>
  }
}
 8000d52:	bf00      	nop
 8000d54:	37d0      	adds	r7, #208	; 0xd0
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40023800 	.word	0x40023800
 8000d60:	40007000 	.word	0x40007000
 8000d64:	00015868 	.word	0x00015868

08000d68 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b084      	sub	sp, #16
 8000d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	463b      	mov	r3, r7
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
 8000d76:	609a      	str	r2, [r3, #8]
 8000d78:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d7a:	4b21      	ldr	r3, [pc, #132]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d7c:	4a21      	ldr	r2, [pc, #132]	; (8000e04 <MX_ADC1_Init+0x9c>)
 8000d7e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d80:	4b1f      	ldr	r3, [pc, #124]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d86:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d88:	4b1d      	ldr	r3, [pc, #116]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d8e:	4b1c      	ldr	r3, [pc, #112]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d94:	4b1a      	ldr	r3, [pc, #104]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d9a:	4b19      	ldr	r3, [pc, #100]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000da2:	4b17      	ldr	r3, [pc, #92]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000da4:	2200      	movs	r2, #0
 8000da6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000da8:	4b15      	ldr	r3, [pc, #84]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000daa:	4a17      	ldr	r2, [pc, #92]	; (8000e08 <MX_ADC1_Init+0xa0>)
 8000dac:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dae:	4b14      	ldr	r3, [pc, #80]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000db4:	4b12      	ldr	r3, [pc, #72]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000db6:	2201      	movs	r2, #1
 8000db8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000dba:	4b11      	ldr	r3, [pc, #68]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000dc2:	4b0f      	ldr	r3, [pc, #60]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dc4:	2201      	movs	r2, #1
 8000dc6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000dc8:	480d      	ldr	r0, [pc, #52]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dca:	f003 ff75 	bl	8004cb8 <HAL_ADC_Init>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d001      	beq.n	8000dd8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000dd4:	f001 fb6e 	bl	80024b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000de0:	2300      	movs	r3, #0
 8000de2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000de4:	463b      	mov	r3, r7
 8000de6:	4619      	mov	r1, r3
 8000de8:	4805      	ldr	r0, [pc, #20]	; (8000e00 <MX_ADC1_Init+0x98>)
 8000dea:	f004 f8fb 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 8000dee:	4603      	mov	r3, r0
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d001      	beq.n	8000df8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000df4:	f001 fb5e 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000df8:	bf00      	nop
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}
 8000e00:	20008948 	.word	0x20008948
 8000e04:	40012000 	.word	0x40012000
 8000e08:	0f000001 	.word	0x0f000001

08000e0c <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b084      	sub	sp, #16
 8000e10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e20:	4a21      	ldr	r2, [pc, #132]	; (8000ea8 <MX_ADC3_Init+0x9c>)
 8000e22:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e24:	4b1f      	ldr	r3, [pc, #124]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e26:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e2a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e32:	4b1c      	ldr	r3, [pc, #112]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e40:	2200      	movs	r2, #0
 8000e42:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e46:	4b17      	ldr	r3, [pc, #92]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e4c:	4b15      	ldr	r3, [pc, #84]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e4e:	4a17      	ldr	r2, [pc, #92]	; (8000eac <MX_ADC3_Init+0xa0>)
 8000e50:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e52:	4b14      	ldr	r3, [pc, #80]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e58:	4b12      	ldr	r3, [pc, #72]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e5a:	2201      	movs	r2, #1
 8000e5c:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e5e:	4b11      	ldr	r3, [pc, #68]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e66:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e68:	2201      	movs	r2, #1
 8000e6a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e6c:	480d      	ldr	r0, [pc, #52]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e6e:	f003 ff23 	bl	8004cb8 <HAL_ADC_Init>
 8000e72:	4603      	mov	r3, r0
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d001      	beq.n	8000e7c <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e78:	f001 fb1c 	bl	80024b4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000e7c:	2308      	movs	r3, #8
 8000e7e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e80:	2301      	movs	r3, #1
 8000e82:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e84:	2300      	movs	r3, #0
 8000e86:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e88:	463b      	mov	r3, r7
 8000e8a:	4619      	mov	r1, r3
 8000e8c:	4805      	ldr	r0, [pc, #20]	; (8000ea4 <MX_ADC3_Init+0x98>)
 8000e8e:	f004 f8a9 	bl	8004fe4 <HAL_ADC_ConfigChannel>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e98:	f001 fb0c 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e9c:	bf00      	nop
 8000e9e:	3710      	adds	r7, #16
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	20008994 	.word	0x20008994
 8000ea8:	40012200 	.word	0x40012200
 8000eac:	0f000001 	.word	0x0f000001

08000eb0 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b082      	sub	sp, #8
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	463b      	mov	r3, r7
 8000eb8:	2200      	movs	r2, #0
 8000eba:	601a      	str	r2, [r3, #0]
 8000ebc:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000ebe:	4b0f      	ldr	r3, [pc, #60]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ec0:	4a0f      	ldr	r2, [pc, #60]	; (8000f00 <MX_DAC_Init+0x50>)
 8000ec2:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000ec4:	480d      	ldr	r0, [pc, #52]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ec6:	f004 fbb3 	bl	8005630 <HAL_DAC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ed0:	f001 faf0 	bl	80024b4 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	2200      	movs	r2, #0
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_DAC_Init+0x4c>)
 8000ee4:	f004 fc1a 	bl	800571c <HAL_DAC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000eee:	f001 fae1 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3708      	adds	r7, #8
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20008a64 	.word	0x20008a64
 8000f00:	40007400 	.word	0x40007400

08000f04 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000f08:	4b15      	ldr	r3, [pc, #84]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f0a:	4a16      	ldr	r2, [pc, #88]	; (8000f64 <MX_DMA2D_Init+0x60>)
 8000f0c:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000f0e:	4b14      	ldr	r3, [pc, #80]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000f14:	4b12      	ldr	r3, [pc, #72]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f16:	2200      	movs	r2, #0
 8000f18:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000f1a:	4b11      	ldr	r3, [pc, #68]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000f20:	4b0f      	ldr	r3, [pc, #60]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f22:	2200      	movs	r2, #0
 8000f24:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000f26:	4b0e      	ldr	r3, [pc, #56]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f2c:	4b0c      	ldr	r3, [pc, #48]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f2e:	2200      	movs	r2, #0
 8000f30:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f32:	4b0b      	ldr	r3, [pc, #44]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f38:	4809      	ldr	r0, [pc, #36]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f3a:	f004 fe25 	bl	8005b88 <HAL_DMA2D_Init>
 8000f3e:	4603      	mov	r3, r0
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f44:	f001 fab6 	bl	80024b4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f48:	2101      	movs	r1, #1
 8000f4a:	4805      	ldr	r0, [pc, #20]	; (8000f60 <MX_DMA2D_Init+0x5c>)
 8000f4c:	f004 ff7a 	bl	8005e44 <HAL_DMA2D_ConfigLayer>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f56:	f001 faad 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f5a:	bf00      	nop
 8000f5c:	bd80      	pop	{r7, pc}
 8000f5e:	bf00      	nop
 8000f60:	20008b64 	.word	0x20008b64
 8000f64:	4002b000 	.word	0x4002b000

08000f68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f6c:	4b1b      	ldr	r3, [pc, #108]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f6e:	4a1c      	ldr	r2, [pc, #112]	; (8000fe0 <MX_I2C1_Init+0x78>)
 8000f70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <MX_I2C1_Init+0x7c>)
 8000f76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f78:	4b18      	ldr	r3, [pc, #96]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f80:	2201      	movs	r2, #1
 8000f82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f84:	4b15      	ldr	r3, [pc, #84]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f90:	4b12      	ldr	r3, [pc, #72]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f9c:	4b0f      	ldr	r3, [pc, #60]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fa2:	480e      	ldr	r0, [pc, #56]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fa4:	f005 fb62 	bl	800666c <HAL_I2C_Init>
 8000fa8:	4603      	mov	r3, r0
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d001      	beq.n	8000fb2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000fae:	f001 fa81 	bl	80024b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fb6:	f006 f871 	bl	800709c <HAL_I2CEx_ConfigAnalogFilter>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000fc0:	f001 fa78 	bl	80024b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4805      	ldr	r0, [pc, #20]	; (8000fdc <MX_I2C1_Init+0x74>)
 8000fc8:	f006 f8b3 	bl	8007132 <HAL_I2CEx_ConfigDigitalFilter>
 8000fcc:	4603      	mov	r3, r0
 8000fce:	2b00      	cmp	r3, #0
 8000fd0:	d001      	beq.n	8000fd6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fd2:	f001 fa6f 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fd6:	bf00      	nop
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	200087d4 	.word	0x200087d4
 8000fe0:	40005400 	.word	0x40005400
 8000fe4:	00c0eaff 	.word	0x00c0eaff

08000fe8 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fec:	4b1b      	ldr	r3, [pc, #108]	; (800105c <MX_I2C3_Init+0x74>)
 8000fee:	4a1c      	ldr	r2, [pc, #112]	; (8001060 <MX_I2C3_Init+0x78>)
 8000ff0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000ff2:	4b1a      	ldr	r3, [pc, #104]	; (800105c <MX_I2C3_Init+0x74>)
 8000ff4:	4a1b      	ldr	r2, [pc, #108]	; (8001064 <MX_I2C3_Init+0x7c>)
 8000ff6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <MX_I2C3_Init+0x74>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ffe:	4b17      	ldr	r3, [pc, #92]	; (800105c <MX_I2C3_Init+0x74>)
 8001000:	2201      	movs	r2, #1
 8001002:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001004:	4b15      	ldr	r3, [pc, #84]	; (800105c <MX_I2C3_Init+0x74>)
 8001006:	2200      	movs	r2, #0
 8001008:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 800100a:	4b14      	ldr	r3, [pc, #80]	; (800105c <MX_I2C3_Init+0x74>)
 800100c:	2200      	movs	r2, #0
 800100e:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001010:	4b12      	ldr	r3, [pc, #72]	; (800105c <MX_I2C3_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001016:	4b11      	ldr	r3, [pc, #68]	; (800105c <MX_I2C3_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800101c:	4b0f      	ldr	r3, [pc, #60]	; (800105c <MX_I2C3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001022:	480e      	ldr	r0, [pc, #56]	; (800105c <MX_I2C3_Init+0x74>)
 8001024:	f005 fb22 	bl	800666c <HAL_I2C_Init>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 800102e:	f001 fa41 	bl	80024b4 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001032:	2100      	movs	r1, #0
 8001034:	4809      	ldr	r0, [pc, #36]	; (800105c <MX_I2C3_Init+0x74>)
 8001036:	f006 f831 	bl	800709c <HAL_I2CEx_ConfigAnalogFilter>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001040:	f001 fa38 	bl	80024b4 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001044:	2100      	movs	r1, #0
 8001046:	4805      	ldr	r0, [pc, #20]	; (800105c <MX_I2C3_Init+0x74>)
 8001048:	f006 f873 	bl	8007132 <HAL_I2CEx_ConfigDigitalFilter>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001052:	f001 fa2f 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20008664 	.word	0x20008664
 8001060:	40005c00 	.word	0x40005c00
 8001064:	00c0eaff 	.word	0x00c0eaff

08001068 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b08e      	sub	sp, #56	; 0x38
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 800106e:	1d3b      	adds	r3, r7, #4
 8001070:	2234      	movs	r2, #52	; 0x34
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00d f888 	bl	800e18a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800107a:	4b3a      	ldr	r3, [pc, #232]	; (8001164 <MX_LTDC_Init+0xfc>)
 800107c:	4a3a      	ldr	r2, [pc, #232]	; (8001168 <MX_LTDC_Init+0x100>)
 800107e:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001080:	4b38      	ldr	r3, [pc, #224]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001082:	2200      	movs	r2, #0
 8001084:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001086:	4b37      	ldr	r3, [pc, #220]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001088:	2200      	movs	r2, #0
 800108a:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800108c:	4b35      	ldr	r3, [pc, #212]	; (8001164 <MX_LTDC_Init+0xfc>)
 800108e:	2200      	movs	r2, #0
 8001090:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001092:	4b34      	ldr	r3, [pc, #208]	; (8001164 <MX_LTDC_Init+0xfc>)
 8001094:	2200      	movs	r2, #0
 8001096:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001098:	4b32      	ldr	r3, [pc, #200]	; (8001164 <MX_LTDC_Init+0xfc>)
 800109a:	2228      	movs	r2, #40	; 0x28
 800109c:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 800109e:	4b31      	ldr	r3, [pc, #196]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010a0:	2209      	movs	r2, #9
 80010a2:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 80010a4:	4b2f      	ldr	r3, [pc, #188]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010a6:	2235      	movs	r2, #53	; 0x35
 80010a8:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 80010aa:	4b2e      	ldr	r3, [pc, #184]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ac:	220b      	movs	r2, #11
 80010ae:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 80010b0:	4b2c      	ldr	r3, [pc, #176]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010b2:	f240 2215 	movw	r2, #533	; 0x215
 80010b6:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 80010b8:	4b2a      	ldr	r3, [pc, #168]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ba:	f240 121b 	movw	r2, #283	; 0x11b
 80010be:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 80010c0:	4b28      	ldr	r3, [pc, #160]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010c2:	f240 2235 	movw	r2, #565	; 0x235
 80010c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 80010c8:	4b26      	ldr	r3, [pc, #152]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ca:	f240 121d 	movw	r2, #285	; 0x11d
 80010ce:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010d0:	4b24      	ldr	r3, [pc, #144]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010d8:	4b22      	ldr	r3, [pc, #136]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010da:	2200      	movs	r2, #0
 80010dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010e0:	4b20      	ldr	r3, [pc, #128]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010e8:	481e      	ldr	r0, [pc, #120]	; (8001164 <MX_LTDC_Init+0xfc>)
 80010ea:	f006 f86f 	bl	80071cc <HAL_LTDC_Init>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010f4:	f001 f9de 	bl	80024b4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010f8:	2300      	movs	r3, #0
 80010fa:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001100:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001106:	f44f 7388 	mov.w	r3, #272	; 0x110
 800110a:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 800110c:	2302      	movs	r3, #2
 800110e:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001110:	23ff      	movs	r3, #255	; 0xff
 8001112:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001118:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800111c:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800111e:	2307      	movs	r3, #7
 8001120:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001122:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001126:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001128:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 800112c:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800112e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001132:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001134:	2300      	movs	r3, #0
 8001136:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001140:	2300      	movs	r3, #0
 8001142:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	4619      	mov	r1, r3
 800114c:	4805      	ldr	r0, [pc, #20]	; (8001164 <MX_LTDC_Init+0xfc>)
 800114e:	f006 f9cf 	bl	80074f0 <HAL_LTDC_ConfigLayer>
 8001152:	4603      	mov	r3, r0
 8001154:	2b00      	cmp	r3, #0
 8001156:	d001      	beq.n	800115c <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001158:	f001 f9ac 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 800115c:	bf00      	nop
 800115e:	3738      	adds	r7, #56	; 0x38
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}
 8001164:	200088a0 	.word	0x200088a0
 8001168:	40016800 	.word	0x40016800

0800116c <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b092      	sub	sp, #72	; 0x48
 8001170:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001172:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001176:	2200      	movs	r2, #0
 8001178:	601a      	str	r2, [r3, #0]
 800117a:	605a      	str	r2, [r3, #4]
 800117c:	609a      	str	r2, [r3, #8]
 800117e:	60da      	str	r2, [r3, #12]
 8001180:	611a      	str	r2, [r3, #16]
 8001182:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001184:	2300      	movs	r3, #0
 8001186:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001188:	463b      	mov	r3, r7
 800118a:	222c      	movs	r2, #44	; 0x2c
 800118c:	2100      	movs	r1, #0
 800118e:	4618      	mov	r0, r3
 8001190:	f00c fffb 	bl	800e18a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001194:	4b46      	ldr	r3, [pc, #280]	; (80012b0 <MX_RTC_Init+0x144>)
 8001196:	4a47      	ldr	r2, [pc, #284]	; (80012b4 <MX_RTC_Init+0x148>)
 8001198:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800119a:	4b45      	ldr	r3, [pc, #276]	; (80012b0 <MX_RTC_Init+0x144>)
 800119c:	2200      	movs	r2, #0
 800119e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011a0:	4b43      	ldr	r3, [pc, #268]	; (80012b0 <MX_RTC_Init+0x144>)
 80011a2:	227f      	movs	r2, #127	; 0x7f
 80011a4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011a6:	4b42      	ldr	r3, [pc, #264]	; (80012b0 <MX_RTC_Init+0x144>)
 80011a8:	22ff      	movs	r2, #255	; 0xff
 80011aa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011ac:	4b40      	ldr	r3, [pc, #256]	; (80012b0 <MX_RTC_Init+0x144>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011b2:	4b3f      	ldr	r3, [pc, #252]	; (80012b0 <MX_RTC_Init+0x144>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011b8:	4b3d      	ldr	r3, [pc, #244]	; (80012b0 <MX_RTC_Init+0x144>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011be:	483c      	ldr	r0, [pc, #240]	; (80012b0 <MX_RTC_Init+0x144>)
 80011c0:	f007 fc72 	bl	8008aa8 <HAL_RTC_Init>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80011ca:	f001 f973 	bl	80024b4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011ce:	2300      	movs	r3, #0
 80011d0:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011e0:	2300      	movs	r3, #0
 80011e2:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011e4:	2300      	movs	r3, #0
 80011e6:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011e8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011ec:	2201      	movs	r2, #1
 80011ee:	4619      	mov	r1, r3
 80011f0:	482f      	ldr	r0, [pc, #188]	; (80012b0 <MX_RTC_Init+0x144>)
 80011f2:	f007 fcd5 	bl	8008ba0 <HAL_RTC_SetTime>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011fc:	f001 f95a 	bl	80024b4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001200:	2301      	movs	r3, #1
 8001202:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001206:	2301      	movs	r3, #1
 8001208:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 800120c:	2301      	movs	r3, #1
 800120e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001218:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800121c:	2201      	movs	r2, #1
 800121e:	4619      	mov	r1, r3
 8001220:	4823      	ldr	r0, [pc, #140]	; (80012b0 <MX_RTC_Init+0x144>)
 8001222:	f007 fdd9 	bl	8008dd8 <HAL_RTC_SetDate>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 800122c:	f001 f942 	bl	80024b4 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001230:	2300      	movs	r3, #0
 8001232:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001234:	2300      	movs	r3, #0
 8001236:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001238:	2300      	movs	r3, #0
 800123a:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 800123c:	2300      	movs	r3, #0
 800123e:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001240:	2300      	movs	r3, #0
 8001242:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001244:	2300      	movs	r3, #0
 8001246:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001248:	2300      	movs	r3, #0
 800124a:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 800124c:	2300      	movs	r3, #0
 800124e:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001250:	2300      	movs	r3, #0
 8001252:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001254:	2301      	movs	r3, #1
 8001256:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800125a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800125e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001260:	463b      	mov	r3, r7
 8001262:	2201      	movs	r2, #1
 8001264:	4619      	mov	r1, r3
 8001266:	4812      	ldr	r0, [pc, #72]	; (80012b0 <MX_RTC_Init+0x144>)
 8001268:	f007 feae 	bl	8008fc8 <HAL_RTC_SetAlarm>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	d001      	beq.n	8001276 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001272:	f001 f91f 	bl	80024b4 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001276:	f44f 7300 	mov.w	r3, #512	; 0x200
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800127c:	463b      	mov	r3, r7
 800127e:	2201      	movs	r2, #1
 8001280:	4619      	mov	r1, r3
 8001282:	480b      	ldr	r0, [pc, #44]	; (80012b0 <MX_RTC_Init+0x144>)
 8001284:	f007 fea0 	bl	8008fc8 <HAL_RTC_SetAlarm>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800128e:	f001 f911 	bl	80024b4 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001292:	2202      	movs	r2, #2
 8001294:	2100      	movs	r1, #0
 8001296:	4806      	ldr	r0, [pc, #24]	; (80012b0 <MX_RTC_Init+0x144>)
 8001298:	f008 f83e 	bl	8009318 <HAL_RTCEx_SetTimeStamp>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 80012a2:	f001 f907 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80012a6:	bf00      	nop
 80012a8:	3748      	adds	r7, #72	; 0x48
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	20008a78 	.word	0x20008a78
 80012b4:	40002800 	.word	0x40002800

080012b8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012bc:	4b1b      	ldr	r3, [pc, #108]	; (800132c <MX_SPI2_Init+0x74>)
 80012be:	4a1c      	ldr	r2, [pc, #112]	; (8001330 <MX_SPI2_Init+0x78>)
 80012c0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012c2:	4b1a      	ldr	r3, [pc, #104]	; (800132c <MX_SPI2_Init+0x74>)
 80012c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012c8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012ca:	4b18      	ldr	r3, [pc, #96]	; (800132c <MX_SPI2_Init+0x74>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012d0:	4b16      	ldr	r3, [pc, #88]	; (800132c <MX_SPI2_Init+0x74>)
 80012d2:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012d6:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012d8:	4b14      	ldr	r3, [pc, #80]	; (800132c <MX_SPI2_Init+0x74>)
 80012da:	2200      	movs	r2, #0
 80012dc:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012de:	4b13      	ldr	r3, [pc, #76]	; (800132c <MX_SPI2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012e4:	4b11      	ldr	r3, [pc, #68]	; (800132c <MX_SPI2_Init+0x74>)
 80012e6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012ea:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012ec:	4b0f      	ldr	r3, [pc, #60]	; (800132c <MX_SPI2_Init+0x74>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012f2:	4b0e      	ldr	r3, [pc, #56]	; (800132c <MX_SPI2_Init+0x74>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012f8:	4b0c      	ldr	r3, [pc, #48]	; (800132c <MX_SPI2_Init+0x74>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <MX_SPI2_Init+0x74>)
 8001300:	2200      	movs	r2, #0
 8001302:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001304:	4b09      	ldr	r3, [pc, #36]	; (800132c <MX_SPI2_Init+0x74>)
 8001306:	2207      	movs	r2, #7
 8001308:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <MX_SPI2_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <MX_SPI2_Init+0x74>)
 8001312:	2208      	movs	r2, #8
 8001314:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001316:	4805      	ldr	r0, [pc, #20]	; (800132c <MX_SPI2_Init+0x74>)
 8001318:	f008 f8d3 	bl	80094c2 <HAL_SPI_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001322:	f001 f8c7 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001326:	bf00      	nop
 8001328:	bd80      	pop	{r7, pc}
 800132a:	bf00      	nop
 800132c:	200086b0 	.word	0x200086b0
 8001330:	40003800 	.word	0x40003800

08001334 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b088      	sub	sp, #32
 8001338:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800133a:	f107 0310 	add.w	r3, r7, #16
 800133e:	2200      	movs	r2, #0
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	605a      	str	r2, [r3, #4]
 8001344:	609a      	str	r2, [r3, #8]
 8001346:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001348:	1d3b      	adds	r3, r7, #4
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001352:	4b20      	ldr	r3, [pc, #128]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001354:	4a20      	ldr	r2, [pc, #128]	; (80013d8 <MX_TIM1_Init+0xa4>)
 8001356:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001358:	4b1e      	ldr	r3, [pc, #120]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800135a:	2200      	movs	r2, #0
 800135c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135e:	4b1d      	ldr	r3, [pc, #116]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001360:	2200      	movs	r2, #0
 8001362:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001364:	4b1b      	ldr	r3, [pc, #108]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001366:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800136a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800136c:	4b19      	ldr	r3, [pc, #100]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800136e:	2200      	movs	r2, #0
 8001370:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001372:	4b18      	ldr	r3, [pc, #96]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001374:	2200      	movs	r2, #0
 8001376:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001378:	4b16      	ldr	r3, [pc, #88]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800137a:	2200      	movs	r2, #0
 800137c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800137e:	4815      	ldr	r0, [pc, #84]	; (80013d4 <MX_TIM1_Init+0xa0>)
 8001380:	f008 f931 	bl	80095e6 <HAL_TIM_Base_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800138a:	f001 f893 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800138e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001392:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001394:	f107 0310 	add.w	r3, r7, #16
 8001398:	4619      	mov	r1, r3
 800139a:	480e      	ldr	r0, [pc, #56]	; (80013d4 <MX_TIM1_Init+0xa0>)
 800139c:	f008 fbe4 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013a6:	f001 f885 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80013ae:	2300      	movs	r3, #0
 80013b0:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	4619      	mov	r1, r3
 80013ba:	4806      	ldr	r0, [pc, #24]	; (80013d4 <MX_TIM1_Init+0xa0>)
 80013bc:	f009 f918 	bl	800a5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c0:	4603      	mov	r3, r0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d001      	beq.n	80013ca <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013c6:	f001 f875 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013ca:	bf00      	nop
 80013cc:	3720      	adds	r7, #32
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	20008a98 	.word	0x20008a98
 80013d8:	40010000 	.word	0x40010000

080013dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b088      	sub	sp, #32
 80013e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e2:	f107 0310 	add.w	r3, r7, #16
 80013e6:	2200      	movs	r2, #0
 80013e8:	601a      	str	r2, [r3, #0]
 80013ea:	605a      	str	r2, [r3, #4]
 80013ec:	609a      	str	r2, [r3, #8]
 80013ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f0:	1d3b      	adds	r3, r7, #4
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013fa:	4b1e      	ldr	r3, [pc, #120]	; (8001474 <MX_TIM2_Init+0x98>)
 80013fc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001400:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001402:	4b1c      	ldr	r3, [pc, #112]	; (8001474 <MX_TIM2_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001408:	4b1a      	ldr	r3, [pc, #104]	; (8001474 <MX_TIM2_Init+0x98>)
 800140a:	2200      	movs	r2, #0
 800140c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800140e:	4b19      	ldr	r3, [pc, #100]	; (8001474 <MX_TIM2_Init+0x98>)
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001416:	4b17      	ldr	r3, [pc, #92]	; (8001474 <MX_TIM2_Init+0x98>)
 8001418:	2200      	movs	r2, #0
 800141a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800141c:	4b15      	ldr	r3, [pc, #84]	; (8001474 <MX_TIM2_Init+0x98>)
 800141e:	2200      	movs	r2, #0
 8001420:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001422:	4814      	ldr	r0, [pc, #80]	; (8001474 <MX_TIM2_Init+0x98>)
 8001424:	f008 f8df 	bl	80095e6 <HAL_TIM_Base_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800142e:	f001 f841 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001432:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001436:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001438:	f107 0310 	add.w	r3, r7, #16
 800143c:	4619      	mov	r1, r3
 800143e:	480d      	ldr	r0, [pc, #52]	; (8001474 <MX_TIM2_Init+0x98>)
 8001440:	f008 fb92 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800144a:	f001 f833 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800144e:	2300      	movs	r3, #0
 8001450:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001452:	2300      	movs	r3, #0
 8001454:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	4619      	mov	r1, r3
 800145a:	4806      	ldr	r0, [pc, #24]	; (8001474 <MX_TIM2_Init+0x98>)
 800145c:	f009 f8c8 	bl	800a5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001466:	f001 f825 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20008ba4 	.word	0x20008ba4

08001478 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800147e:	f107 0320 	add.w	r3, r7, #32
 8001482:	2200      	movs	r2, #0
 8001484:	601a      	str	r2, [r3, #0]
 8001486:	605a      	str	r2, [r3, #4]
 8001488:	609a      	str	r2, [r3, #8]
 800148a:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800148c:	f107 030c 	add.w	r3, r7, #12
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800149c:	463b      	mov	r3, r7
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014a6:	4b25      	ldr	r3, [pc, #148]	; (800153c <MX_TIM3_Init+0xc4>)
 80014a8:	4a25      	ldr	r2, [pc, #148]	; (8001540 <MX_TIM3_Init+0xc8>)
 80014aa:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80014ac:	4b23      	ldr	r3, [pc, #140]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014b2:	4b22      	ldr	r3, [pc, #136]	; (800153c <MX_TIM3_Init+0xc4>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80014b8:	4b20      	ldr	r3, [pc, #128]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ba:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80014be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014c0:	4b1e      	ldr	r3, [pc, #120]	; (800153c <MX_TIM3_Init+0xc4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c6:	4b1d      	ldr	r3, [pc, #116]	; (800153c <MX_TIM3_Init+0xc4>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014cc:	481b      	ldr	r0, [pc, #108]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ce:	f008 f88a 	bl	80095e6 <HAL_TIM_Base_Init>
 80014d2:	4603      	mov	r3, r0
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d001      	beq.n	80014dc <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014d8:	f000 ffec 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014e0:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014e2:	f107 0320 	add.w	r3, r7, #32
 80014e6:	4619      	mov	r1, r3
 80014e8:	4814      	ldr	r0, [pc, #80]	; (800153c <MX_TIM3_Init+0xc4>)
 80014ea:	f008 fb3d 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80014f4:	f000 ffde 	bl	80024b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001500:	f107 030c 	add.w	r3, r7, #12
 8001504:	4619      	mov	r1, r3
 8001506:	480d      	ldr	r0, [pc, #52]	; (800153c <MX_TIM3_Init+0xc4>)
 8001508:	f008 fbe8 	bl	8009cdc <HAL_TIM_SlaveConfigSynchro>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001512:	f000 ffcf 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001516:	2300      	movs	r3, #0
 8001518:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800151a:	2300      	movs	r3, #0
 800151c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800151e:	463b      	mov	r3, r7
 8001520:	4619      	mov	r1, r3
 8001522:	4806      	ldr	r0, [pc, #24]	; (800153c <MX_TIM3_Init+0xc4>)
 8001524:	f009 f864 	bl	800a5f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d001      	beq.n	8001532 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800152e:	f000 ffc1 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001532:	bf00      	nop
 8001534:	3730      	adds	r7, #48	; 0x30
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}
 800153a:	bf00      	nop
 800153c:	20008860 	.word	0x20008860
 8001540:	40000400 	.word	0x40000400

08001544 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b088      	sub	sp, #32
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0310 	add.w	r3, r7, #16
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001564:	4a1d      	ldr	r2, [pc, #116]	; (80015dc <MX_TIM5_Init+0x98>)
 8001566:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001568:	4b1b      	ldr	r3, [pc, #108]	; (80015d8 <MX_TIM5_Init+0x94>)
 800156a:	2200      	movs	r2, #0
 800156c:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001570:	2200      	movs	r2, #0
 8001572:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001574:	4b18      	ldr	r3, [pc, #96]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001576:	f04f 32ff 	mov.w	r2, #4294967295
 800157a:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <MX_TIM5_Init+0x94>)
 800157e:	2200      	movs	r2, #0
 8001580:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <MX_TIM5_Init+0x94>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001588:	4813      	ldr	r0, [pc, #76]	; (80015d8 <MX_TIM5_Init+0x94>)
 800158a:	f008 f82c 	bl	80095e6 <HAL_TIM_Base_Init>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001594:	f000 ff8e 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001598:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800159c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800159e:	f107 0310 	add.w	r3, r7, #16
 80015a2:	4619      	mov	r1, r3
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <MX_TIM5_Init+0x94>)
 80015a6:	f008 fadf 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 80015aa:	4603      	mov	r3, r0
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d001      	beq.n	80015b4 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015b0:	f000 ff80 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015b4:	2300      	movs	r3, #0
 80015b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015b8:	2300      	movs	r3, #0
 80015ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015bc:	1d3b      	adds	r3, r7, #4
 80015be:	4619      	mov	r1, r3
 80015c0:	4805      	ldr	r0, [pc, #20]	; (80015d8 <MX_TIM5_Init+0x94>)
 80015c2:	f009 f815 	bl	800a5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80015c6:	4603      	mov	r3, r0
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d001      	beq.n	80015d0 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015cc:	f000 ff72 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015d0:	bf00      	nop
 80015d2:	3720      	adds	r7, #32
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}
 80015d8:	20008820 	.word	0x20008820
 80015dc:	40000c00 	.word	0x40000c00

080015e0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b09a      	sub	sp, #104	; 0x68
 80015e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015e6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015ea:	2200      	movs	r2, #0
 80015ec:	601a      	str	r2, [r3, #0]
 80015ee:	605a      	str	r2, [r3, #4]
 80015f0:	609a      	str	r2, [r3, #8]
 80015f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015f4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001600:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
 8001610:	615a      	str	r2, [r3, #20]
 8001612:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001614:	1d3b      	adds	r3, r7, #4
 8001616:	222c      	movs	r2, #44	; 0x2c
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f00c fdb5 	bl	800e18a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001620:	4b42      	ldr	r3, [pc, #264]	; (800172c <MX_TIM8_Init+0x14c>)
 8001622:	4a43      	ldr	r2, [pc, #268]	; (8001730 <MX_TIM8_Init+0x150>)
 8001624:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001626:	4b41      	ldr	r3, [pc, #260]	; (800172c <MX_TIM8_Init+0x14c>)
 8001628:	2200      	movs	r2, #0
 800162a:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800162c:	4b3f      	ldr	r3, [pc, #252]	; (800172c <MX_TIM8_Init+0x14c>)
 800162e:	2200      	movs	r2, #0
 8001630:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001632:	4b3e      	ldr	r3, [pc, #248]	; (800172c <MX_TIM8_Init+0x14c>)
 8001634:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001638:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163a:	4b3c      	ldr	r3, [pc, #240]	; (800172c <MX_TIM8_Init+0x14c>)
 800163c:	2200      	movs	r2, #0
 800163e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001640:	4b3a      	ldr	r3, [pc, #232]	; (800172c <MX_TIM8_Init+0x14c>)
 8001642:	2200      	movs	r2, #0
 8001644:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001646:	4b39      	ldr	r3, [pc, #228]	; (800172c <MX_TIM8_Init+0x14c>)
 8001648:	2200      	movs	r2, #0
 800164a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800164c:	4837      	ldr	r0, [pc, #220]	; (800172c <MX_TIM8_Init+0x14c>)
 800164e:	f007 ffca 	bl	80095e6 <HAL_TIM_Base_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001658:	f000 ff2c 	bl	80024b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001660:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001662:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001666:	4619      	mov	r1, r3
 8001668:	4830      	ldr	r0, [pc, #192]	; (800172c <MX_TIM8_Init+0x14c>)
 800166a:	f008 fa7d 	bl	8009b68 <HAL_TIM_ConfigClockSource>
 800166e:	4603      	mov	r3, r0
 8001670:	2b00      	cmp	r3, #0
 8001672:	d001      	beq.n	8001678 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001674:	f000 ff1e 	bl	80024b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001678:	482c      	ldr	r0, [pc, #176]	; (800172c <MX_TIM8_Init+0x14c>)
 800167a:	f008 f809 	bl	8009690 <HAL_TIM_PWM_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001684:	f000 ff16 	bl	80024b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 800168c:	2300      	movs	r3, #0
 800168e:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001690:	2300      	movs	r3, #0
 8001692:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001694:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001698:	4619      	mov	r1, r3
 800169a:	4824      	ldr	r0, [pc, #144]	; (800172c <MX_TIM8_Init+0x14c>)
 800169c:	f008 ffa8 	bl	800a5f0 <HAL_TIMEx_MasterConfigSynchronization>
 80016a0:	4603      	mov	r3, r0
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d001      	beq.n	80016aa <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80016a6:	f000 ff05 	bl	80024b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016aa:	2360      	movs	r3, #96	; 0x60
 80016ac:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016b2:	2300      	movs	r3, #0
 80016b4:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b6:	2300      	movs	r3, #0
 80016b8:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ba:	2300      	movs	r3, #0
 80016bc:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016be:	2300      	movs	r3, #0
 80016c0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80016c6:	220c      	movs	r2, #12
 80016c8:	4619      	mov	r1, r3
 80016ca:	4818      	ldr	r0, [pc, #96]	; (800172c <MX_TIM8_Init+0x14c>)
 80016cc:	f008 f934 	bl	8009938 <HAL_TIM_PWM_ConfigChannel>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80016d6:	f000 feed 	bl	80024b4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016e2:	2300      	movs	r3, #0
 80016e4:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016e6:	2300      	movs	r3, #0
 80016e8:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016ea:	2300      	movs	r3, #0
 80016ec:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016f2:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016f4:	2300      	movs	r3, #0
 80016f6:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016f8:	2300      	movs	r3, #0
 80016fa:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001700:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001706:	2300      	movs	r3, #0
 8001708:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	4619      	mov	r1, r3
 800170e:	4807      	ldr	r0, [pc, #28]	; (800172c <MX_TIM8_Init+0x14c>)
 8001710:	f008 fffc 	bl	800a70c <HAL_TIMEx_ConfigBreakDeadTime>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800171a:	f000 fecb 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800171e:	4803      	ldr	r0, [pc, #12]	; (800172c <MX_TIM8_Init+0x14c>)
 8001720:	f002 ffc4 	bl	80046ac <HAL_TIM_MspPostInit>

}
 8001724:	bf00      	nop
 8001726:	3768      	adds	r7, #104	; 0x68
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20008794 	.word	0x20008794
 8001730:	40010400 	.word	0x40010400

08001734 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <MX_UART7_Init+0x58>)
 800173a:	4a15      	ldr	r2, [pc, #84]	; (8001790 <MX_UART7_Init+0x5c>)
 800173c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800173e:	4b13      	ldr	r3, [pc, #76]	; (800178c <MX_UART7_Init+0x58>)
 8001740:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001744:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001746:	4b11      	ldr	r3, [pc, #68]	; (800178c <MX_UART7_Init+0x58>)
 8001748:	2200      	movs	r2, #0
 800174a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800174c:	4b0f      	ldr	r3, [pc, #60]	; (800178c <MX_UART7_Init+0x58>)
 800174e:	2200      	movs	r2, #0
 8001750:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001752:	4b0e      	ldr	r3, [pc, #56]	; (800178c <MX_UART7_Init+0x58>)
 8001754:	2200      	movs	r2, #0
 8001756:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001758:	4b0c      	ldr	r3, [pc, #48]	; (800178c <MX_UART7_Init+0x58>)
 800175a:	220c      	movs	r2, #12
 800175c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800175e:	4b0b      	ldr	r3, [pc, #44]	; (800178c <MX_UART7_Init+0x58>)
 8001760:	2200      	movs	r2, #0
 8001762:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <MX_UART7_Init+0x58>)
 8001766:	2200      	movs	r2, #0
 8001768:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800176a:	4b08      	ldr	r3, [pc, #32]	; (800178c <MX_UART7_Init+0x58>)
 800176c:	2200      	movs	r2, #0
 800176e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001770:	4b06      	ldr	r3, [pc, #24]	; (800178c <MX_UART7_Init+0x58>)
 8001772:	2200      	movs	r2, #0
 8001774:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001776:	4805      	ldr	r0, [pc, #20]	; (800178c <MX_UART7_Init+0x58>)
 8001778:	f009 f864 	bl	800a844 <HAL_UART_Init>
 800177c:	4603      	mov	r3, r0
 800177e:	2b00      	cmp	r3, #0
 8001780:	d001      	beq.n	8001786 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001782:	f000 fe97 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001786:	bf00      	nop
 8001788:	bd80      	pop	{r7, pc}
 800178a:	bf00      	nop
 800178c:	20008714 	.word	0x20008714
 8001790:	40007800 	.word	0x40007800

08001794 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001798:	4b14      	ldr	r3, [pc, #80]	; (80017ec <MX_USART1_UART_Init+0x58>)
 800179a:	4a15      	ldr	r2, [pc, #84]	; (80017f0 <MX_USART1_UART_Init+0x5c>)
 800179c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800179e:	4b13      	ldr	r3, [pc, #76]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80017a6:	4b11      	ldr	r3, [pc, #68]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80017b2:	4b0e      	ldr	r3, [pc, #56]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80017b8:	4b0c      	ldr	r3, [pc, #48]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017ba:	220c      	movs	r2, #12
 80017bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017be:	4b0b      	ldr	r3, [pc, #44]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017c0:	2200      	movs	r2, #0
 80017c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80017c4:	4b09      	ldr	r3, [pc, #36]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017c6:	2200      	movs	r2, #0
 80017c8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017ca:	4b08      	ldr	r3, [pc, #32]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017d0:	4b06      	ldr	r3, [pc, #24]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017d6:	4805      	ldr	r0, [pc, #20]	; (80017ec <MX_USART1_UART_Init+0x58>)
 80017d8:	f009 f834 	bl	800a844 <HAL_UART_Init>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017e2:	f000 fe67 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	200089e4 	.word	0x200089e4
 80017f0:	40011000 	.word	0x40011000

080017f4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017f8:	4b14      	ldr	r3, [pc, #80]	; (800184c <MX_USART6_UART_Init+0x58>)
 80017fa:	4a15      	ldr	r2, [pc, #84]	; (8001850 <MX_USART6_UART_Init+0x5c>)
 80017fc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017fe:	4b13      	ldr	r3, [pc, #76]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001800:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001804:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001806:	4b11      	ldr	r3, [pc, #68]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001808:	2200      	movs	r2, #0
 800180a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800180c:	4b0f      	ldr	r3, [pc, #60]	; (800184c <MX_USART6_UART_Init+0x58>)
 800180e:	2200      	movs	r2, #0
 8001810:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001812:	4b0e      	ldr	r3, [pc, #56]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001814:	2200      	movs	r2, #0
 8001816:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001818:	4b0c      	ldr	r3, [pc, #48]	; (800184c <MX_USART6_UART_Init+0x58>)
 800181a:	220c      	movs	r2, #12
 800181c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181e:	4b0b      	ldr	r3, [pc, #44]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001820:	2200      	movs	r2, #0
 8001822:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001824:	4b09      	ldr	r3, [pc, #36]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001826:	2200      	movs	r2, #0
 8001828:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800182a:	4b08      	ldr	r3, [pc, #32]	; (800184c <MX_USART6_UART_Init+0x58>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001830:	4b06      	ldr	r3, [pc, #24]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001836:	4805      	ldr	r0, [pc, #20]	; (800184c <MX_USART6_UART_Init+0x58>)
 8001838:	f009 f804 	bl	800a844 <HAL_UART_Init>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001842:	f000 fe37 	bl	80024b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001846:	bf00      	nop
 8001848:	bd80      	pop	{r7, pc}
 800184a:	bf00      	nop
 800184c:	20008ae4 	.word	0x20008ae4
 8001850:	40011400 	.word	0x40011400

08001854 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b088      	sub	sp, #32
 8001858:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800185a:	1d3b      	adds	r3, r7, #4
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
 8001868:	615a      	str	r2, [r3, #20]
 800186a:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800186c:	4b1e      	ldr	r3, [pc, #120]	; (80018e8 <MX_FMC_Init+0x94>)
 800186e:	4a1f      	ldr	r2, [pc, #124]	; (80018ec <MX_FMC_Init+0x98>)
 8001870:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001872:	4b1d      	ldr	r3, [pc, #116]	; (80018e8 <MX_FMC_Init+0x94>)
 8001874:	2200      	movs	r2, #0
 8001876:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001878:	4b1b      	ldr	r3, [pc, #108]	; (80018e8 <MX_FMC_Init+0x94>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800187e:	4b1a      	ldr	r3, [pc, #104]	; (80018e8 <MX_FMC_Init+0x94>)
 8001880:	2204      	movs	r2, #4
 8001882:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001884:	4b18      	ldr	r3, [pc, #96]	; (80018e8 <MX_FMC_Init+0x94>)
 8001886:	2210      	movs	r2, #16
 8001888:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800188a:	4b17      	ldr	r3, [pc, #92]	; (80018e8 <MX_FMC_Init+0x94>)
 800188c:	2240      	movs	r2, #64	; 0x40
 800188e:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001890:	4b15      	ldr	r3, [pc, #84]	; (80018e8 <MX_FMC_Init+0x94>)
 8001892:	2280      	movs	r2, #128	; 0x80
 8001894:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001896:	4b14      	ldr	r3, [pc, #80]	; (80018e8 <MX_FMC_Init+0x94>)
 8001898:	2200      	movs	r2, #0
 800189a:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 800189c:	4b12      	ldr	r3, [pc, #72]	; (80018e8 <MX_FMC_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80018a2:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <MX_FMC_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80018a8:	4b0f      	ldr	r3, [pc, #60]	; (80018e8 <MX_FMC_Init+0x94>)
 80018aa:	2200      	movs	r2, #0
 80018ac:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80018ae:	2310      	movs	r3, #16
 80018b0:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80018b2:	2310      	movs	r3, #16
 80018b4:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80018b6:	2310      	movs	r3, #16
 80018b8:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80018ba:	2310      	movs	r3, #16
 80018bc:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80018be:	2310      	movs	r3, #16
 80018c0:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80018c2:	2310      	movs	r3, #16
 80018c4:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80018c6:	2310      	movs	r3, #16
 80018c8:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	4619      	mov	r1, r3
 80018ce:	4806      	ldr	r0, [pc, #24]	; (80018e8 <MX_FMC_Init+0x94>)
 80018d0:	f007 fd78 	bl	80093c4 <HAL_SDRAM_Init>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80018da:	f000 fdeb 	bl	80024b4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018de:	bf00      	nop
 80018e0:	3720      	adds	r7, #32
 80018e2:	46bd      	mov	sp, r7
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	20008be4 	.word	0x20008be4
 80018ec:	a0000140 	.word	0xa0000140

080018f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b090      	sub	sp, #64	; 0x40
 80018f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018fa:	2200      	movs	r2, #0
 80018fc:	601a      	str	r2, [r3, #0]
 80018fe:	605a      	str	r2, [r3, #4]
 8001900:	609a      	str	r2, [r3, #8]
 8001902:	60da      	str	r2, [r3, #12]
 8001904:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001906:	4bb0      	ldr	r3, [pc, #704]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190a:	4aaf      	ldr	r2, [pc, #700]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800190c:	f043 0310 	orr.w	r3, r3, #16
 8001910:	6313      	str	r3, [r2, #48]	; 0x30
 8001912:	4bad      	ldr	r3, [pc, #692]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001916:	f003 0310 	and.w	r3, r3, #16
 800191a:	62bb      	str	r3, [r7, #40]	; 0x28
 800191c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800191e:	4baa      	ldr	r3, [pc, #680]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001922:	4aa9      	ldr	r2, [pc, #676]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001924:	f043 0302 	orr.w	r3, r3, #2
 8001928:	6313      	str	r3, [r2, #48]	; 0x30
 800192a:	4ba7      	ldr	r3, [pc, #668]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	f003 0302 	and.w	r3, r3, #2
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
 8001934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001936:	4ba4      	ldr	r3, [pc, #656]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	4aa3      	ldr	r2, [pc, #652]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800193c:	f043 0301 	orr.w	r3, r3, #1
 8001940:	6313      	str	r3, [r2, #48]	; 0x30
 8001942:	4ba1      	ldr	r3, [pc, #644]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001946:	f003 0301 	and.w	r3, r3, #1
 800194a:	623b      	str	r3, [r7, #32]
 800194c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800194e:	4b9e      	ldr	r3, [pc, #632]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a9d      	ldr	r2, [pc, #628]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001954:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b9b      	ldr	r3, [pc, #620]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001962:	61fb      	str	r3, [r7, #28]
 8001964:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001966:	4b98      	ldr	r3, [pc, #608]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196a:	4a97      	ldr	r2, [pc, #604]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800196c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001970:	6313      	str	r3, [r2, #48]	; 0x30
 8001972:	4b95      	ldr	r3, [pc, #596]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800197a:	61bb      	str	r3, [r7, #24]
 800197c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800197e:	4b92      	ldr	r3, [pc, #584]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	4a91      	ldr	r2, [pc, #580]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001984:	f043 0308 	orr.w	r3, r3, #8
 8001988:	6313      	str	r3, [r2, #48]	; 0x30
 800198a:	4b8f      	ldr	r3, [pc, #572]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800198c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198e:	f003 0308 	and.w	r3, r3, #8
 8001992:	617b      	str	r3, [r7, #20]
 8001994:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001996:	4b8c      	ldr	r3, [pc, #560]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199a:	4a8b      	ldr	r2, [pc, #556]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 800199c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019a0:	6313      	str	r3, [r2, #48]	; 0x30
 80019a2:	4b89      	ldr	r3, [pc, #548]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019aa:	613b      	str	r3, [r7, #16]
 80019ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80019ae:	4b86      	ldr	r3, [pc, #536]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b2:	4a85      	ldr	r2, [pc, #532]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80019b8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ba:	4b83      	ldr	r3, [pc, #524]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019c2:	60fb      	str	r3, [r7, #12]
 80019c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019c6:	4b80      	ldr	r3, [pc, #512]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ca:	4a7f      	ldr	r2, [pc, #508]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019cc:	f043 0304 	orr.w	r3, r3, #4
 80019d0:	6313      	str	r3, [r2, #48]	; 0x30
 80019d2:	4b7d      	ldr	r3, [pc, #500]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019d6:	f003 0304 	and.w	r3, r3, #4
 80019da:	60bb      	str	r3, [r7, #8]
 80019dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019de:	4b7a      	ldr	r3, [pc, #488]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e2:	4a79      	ldr	r2, [pc, #484]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019e4:	f043 0320 	orr.w	r3, r3, #32
 80019e8:	6313      	str	r3, [r2, #48]	; 0x30
 80019ea:	4b77      	ldr	r3, [pc, #476]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ee:	f003 0320 	and.w	r3, r3, #32
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019f6:	4b74      	ldr	r3, [pc, #464]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019fa:	4a73      	ldr	r2, [pc, #460]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 80019fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a00:	6313      	str	r3, [r2, #48]	; 0x30
 8001a02:	4b71      	ldr	r3, [pc, #452]	; (8001bc8 <MX_GPIO_Init+0x2d8>)
 8001a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001a0e:	2200      	movs	r2, #0
 8001a10:	2110      	movs	r1, #16
 8001a12:	486e      	ldr	r0, [pc, #440]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001a14:	f004 fe10 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2160      	movs	r1, #96	; 0x60
 8001a1c:	486c      	ldr	r0, [pc, #432]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a1e:	f004 fe0b 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8001a22:	2201      	movs	r2, #1
 8001a24:	2120      	movs	r1, #32
 8001a26:	486b      	ldr	r0, [pc, #428]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a28:	f004 fe06 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	2108      	movs	r1, #8
 8001a30:	4868      	ldr	r0, [pc, #416]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001a32:	f004 fe01 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2108      	movs	r1, #8
 8001a3a:	4867      	ldr	r0, [pc, #412]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a3c:	f004 fdfc 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a40:	2201      	movs	r2, #1
 8001a42:	2108      	movs	r1, #8
 8001a44:	4865      	ldr	r0, [pc, #404]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001a46:	f004 fdf7 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a50:	4861      	ldr	r0, [pc, #388]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001a52:	f004 fdf1 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a56:	2200      	movs	r2, #0
 8001a58:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a5c:	4860      	ldr	r0, [pc, #384]	; (8001be0 <MX_GPIO_Init+0x2f0>)
 8001a5e:	f004 fdeb 	bl	8006638 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001a62:	2200      	movs	r2, #0
 8001a64:	2108      	movs	r1, #8
 8001a66:	485f      	ldr	r0, [pc, #380]	; (8001be4 <MX_GPIO_Init+0x2f4>)
 8001a68:	f004 fde6 	bl	8006638 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a6c:	2308      	movs	r3, #8
 8001a6e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a70:	2300      	movs	r3, #0
 8001a72:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a74:	2300      	movs	r3, #0
 8001a76:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a78:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4854      	ldr	r0, [pc, #336]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001a80:	f004 fb0e 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001a84:	f643 0323 	movw	r3, #14371	; 0x3823
 8001a88:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a8a:	2302      	movs	r3, #2
 8001a8c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a92:	2303      	movs	r3, #3
 8001a94:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a96:	230a      	movs	r3, #10
 8001a98:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a9e:	4619      	mov	r1, r3
 8001aa0:	484a      	ldr	r0, [pc, #296]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001aa2:	f004 fafd 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001aa6:	2310      	movs	r3, #16
 8001aa8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aae:	2300      	movs	r3, #0
 8001ab0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001ab6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aba:	4619      	mov	r1, r3
 8001abc:	4843      	ldr	r0, [pc, #268]	; (8001bcc <MX_GPIO_Init+0x2dc>)
 8001abe:	f004 faef 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001ac2:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001ac6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001acc:	2300      	movs	r3, #0
 8001ace:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ad0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	4844      	ldr	r0, [pc, #272]	; (8001be8 <MX_GPIO_Init+0x2f8>)
 8001ad8:	f004 fae2 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ae0:	2301      	movs	r3, #1
 8001ae2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001aec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af0:	4619      	mov	r1, r3
 8001af2:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <MX_GPIO_Init+0x2e0>)
 8001af4:	f004 fad4 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001afe:	2300      	movs	r3, #0
 8001b00:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b02:	2300      	movs	r3, #0
 8001b04:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001b06:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	4837      	ldr	r0, [pc, #220]	; (8001bec <MX_GPIO_Init+0x2fc>)
 8001b0e:	f004 fac7 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001b12:	2340      	movs	r3, #64	; 0x40
 8001b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b16:	4b36      	ldr	r3, [pc, #216]	; (8001bf0 <MX_GPIO_Init+0x300>)
 8001b18:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001b1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b22:	4619      	mov	r1, r3
 8001b24:	482b      	ldr	r0, [pc, #172]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001b26:	f004 fabb 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001b2a:	2328      	movs	r3, #40	; 0x28
 8001b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b2e:	2301      	movs	r3, #1
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b32:	2300      	movs	r3, #0
 8001b34:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b36:	2300      	movs	r3, #0
 8001b38:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b3a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4824      	ldr	r0, [pc, #144]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001b42:	f004 faad 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001b46:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b50:	2300      	movs	r3, #0
 8001b52:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b54:	2300      	movs	r3, #0
 8001b56:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	481e      	ldr	r0, [pc, #120]	; (8001bd8 <MX_GPIO_Init+0x2e8>)
 8001b60:	f004 fa9e 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b68:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b6e:	2300      	movs	r3, #0
 8001b70:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b76:	4619      	mov	r1, r3
 8001b78:	481e      	ldr	r0, [pc, #120]	; (8001bf4 <MX_GPIO_Init+0x304>)
 8001b7a:	f004 fa91 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b7e:	2308      	movs	r3, #8
 8001b80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b82:	2301      	movs	r3, #1
 8001b84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b86:	2300      	movs	r3, #0
 8001b88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b92:	4619      	mov	r1, r3
 8001b94:	4811      	ldr	r0, [pc, #68]	; (8001bdc <MX_GPIO_Init+0x2ec>)
 8001b96:	f004 fa83 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b9a:	2310      	movs	r3, #16
 8001b9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001ba6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001baa:	4619      	mov	r1, r3
 8001bac:	4809      	ldr	r0, [pc, #36]	; (8001bd4 <MX_GPIO_Init+0x2e4>)
 8001bae:	f004 fa77 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001bb2:	f248 0304 	movw	r3, #32772	; 0x8004
 8001bb6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001bc0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	e017      	b.n	8001bf8 <MX_GPIO_Init+0x308>
 8001bc8:	40023800 	.word	0x40023800
 8001bcc:	40020400 	.word	0x40020400
 8001bd0:	40021000 	.word	0x40021000
 8001bd4:	40020c00 	.word	0x40020c00
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40022800 	.word	0x40022800
 8001be0:	40021c00 	.word	0x40021c00
 8001be4:	40021800 	.word	0x40021800
 8001be8:	40020000 	.word	0x40020000
 8001bec:	40022400 	.word	0x40022400
 8001bf0:	10120000 	.word	0x10120000
 8001bf4:	40020800 	.word	0x40020800
 8001bf8:	4836      	ldr	r0, [pc, #216]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001bfa:	f004 fa51 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001bfe:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001c02:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c04:	2301      	movs	r3, #1
 8001c06:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001c10:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c14:	4619      	mov	r1, r3
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001c18:	f004 fa42 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001c22:	4b2d      	ldr	r3, [pc, #180]	; (8001cd8 <MX_GPIO_Init+0x3e8>)
 8001c24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c26:	2300      	movs	r3, #0
 8001c28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001c2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c2e:	4619      	mov	r1, r3
 8001c30:	482a      	ldr	r0, [pc, #168]	; (8001cdc <MX_GPIO_Init+0x3ec>)
 8001c32:	f004 fa35 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c36:	2310      	movs	r3, #16
 8001c38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c42:	2303      	movs	r3, #3
 8001c44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c46:	230a      	movs	r3, #10
 8001c48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4820      	ldr	r0, [pc, #128]	; (8001cd4 <MX_GPIO_Init+0x3e4>)
 8001c52:	f004 fa25 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001c56:	2384      	movs	r3, #132	; 0x84
 8001c58:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c66:	4619      	mov	r1, r3
 8001c68:	481d      	ldr	r0, [pc, #116]	; (8001ce0 <MX_GPIO_Init+0x3f0>)
 8001c6a:	f004 fa19 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c6e:	2305      	movs	r3, #5
 8001c70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c72:	2302      	movs	r3, #2
 8001c74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c76:	2300      	movs	r3, #0
 8001c78:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c7a:	2303      	movs	r3, #3
 8001c7c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c7e:	230a      	movs	r3, #10
 8001c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c82:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c86:	4619      	mov	r1, r3
 8001c88:	4816      	ldr	r0, [pc, #88]	; (8001ce4 <MX_GPIO_Init+0x3f4>)
 8001c8a:	f004 fa09 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001c8e:	2308      	movs	r3, #8
 8001c90:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c92:	2301      	movs	r3, #1
 8001c94:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c96:	2300      	movs	r3, #0
 8001c98:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001c9e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	480e      	ldr	r0, [pc, #56]	; (8001ce0 <MX_GPIO_Init+0x3f0>)
 8001ca6:	f004 f9fb 	bl	80060a0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001caa:	2328      	movs	r3, #40	; 0x28
 8001cac:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cae:	2302      	movs	r3, #2
 8001cb0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001cba:	230a      	movs	r3, #10
 8001cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4808      	ldr	r0, [pc, #32]	; (8001ce8 <MX_GPIO_Init+0x3f8>)
 8001cc6:	f004 f9eb 	bl	80060a0 <HAL_GPIO_Init>

}
 8001cca:	bf00      	nop
 8001ccc:	3740      	adds	r7, #64	; 0x40
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}
 8001cd2:	bf00      	nop
 8001cd4:	40021c00 	.word	0x40021c00
 8001cd8:	10120000 	.word	0x10120000
 8001cdc:	40022000 	.word	0x40022000
 8001ce0:	40021800 	.word	0x40021800
 8001ce4:	40020800 	.word	0x40020800
 8001ce8:	40020000 	.word	0x40020000

08001cec <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
	//Réception des coordonnées de la raquette droite
	x_RRacket = (rxbuffer[0] << 8) | rxbuffer[1];
 8001cf4:	4b14      	ldr	r3, [pc, #80]	; (8001d48 <HAL_UART_RxCpltCallback+0x5c>)
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	4b12      	ldr	r3, [pc, #72]	; (8001d48 <HAL_UART_RxCpltCallback+0x5c>)
 8001cfe:	785b      	ldrb	r3, [r3, #1]
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b21a      	sxth	r2, r3
 8001d06:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <HAL_UART_RxCpltCallback+0x60>)
 8001d08:	801a      	strh	r2, [r3, #0]
	y_RRacket = (rxbuffer[2] << 8) | rxbuffer[3];
 8001d0a:	4b0f      	ldr	r3, [pc, #60]	; (8001d48 <HAL_UART_RxCpltCallback+0x5c>)
 8001d0c:	789b      	ldrb	r3, [r3, #2]
 8001d0e:	021b      	lsls	r3, r3, #8
 8001d10:	b21a      	sxth	r2, r3
 8001d12:	4b0d      	ldr	r3, [pc, #52]	; (8001d48 <HAL_UART_RxCpltCallback+0x5c>)
 8001d14:	78db      	ldrb	r3, [r3, #3]
 8001d16:	b21b      	sxth	r3, r3
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	b21a      	sxth	r2, r3
 8001d1c:	4b0c      	ldr	r3, [pc, #48]	; (8001d50 <HAL_UART_RxCpltCallback+0x64>)
 8001d1e:	801a      	strh	r2, [r3, #0]

	//Offset des coordonées de la raquette droite
	x_RRacket += 480;
 8001d20:	4b0a      	ldr	r3, [pc, #40]	; (8001d4c <HAL_UART_RxCpltCallback+0x60>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 8001d2c:	b29b      	uxth	r3, r3
 8001d2e:	b21a      	sxth	r2, r3
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <HAL_UART_RxCpltCallback+0x60>)
 8001d32:	801a      	strh	r2, [r3, #0]

	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7,rxbuffer,4);
 8001d34:	2204      	movs	r2, #4
 8001d36:	4904      	ldr	r1, [pc, #16]	; (8001d48 <HAL_UART_RxCpltCallback+0x5c>)
 8001d38:	4806      	ldr	r0, [pc, #24]	; (8001d54 <HAL_UART_RxCpltCallback+0x68>)
 8001d3a:	f008 fe2d 	bl	800a998 <HAL_UART_Receive_IT>
}
 8001d3e:	bf00      	nop
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	20008c1c 	.word	0x20008c1c
 8001d4c:	2000002c 	.word	0x2000002c
 8001d50:	2000002e 	.word	0x2000002e
 8001d54:	20008714 	.word	0x20008714

08001d58 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	b082      	sub	sp, #8
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001d60:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d64:	f009 fef3 	bl	800bb4e <osDelay>
 8001d68:	e7fa      	b.n	8001d60 <StartDefaultTask+0x8>
	...

08001d6c <Starthorloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Starthorloge */
void Starthorloge(void const * argument)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b096      	sub	sp, #88	; 0x58
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthorloge */
	//Initialisation du texte d'affichage
	char text[50] = { };
 8001d74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d78:	2232      	movs	r2, #50	; 0x32
 8001d7a:	2100      	movs	r1, #0
 8001d7c:	4618      	mov	r0, r3
 8001d7e:	f00c fa04 	bl	800e18a <memset>
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	/* Infinite loop */
	for (;;) {
		//Récupération des grandeurs temps et date (même si la date ne nous sert pas)
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d82:	f107 030c 	add.w	r3, r7, #12
 8001d86:	2200      	movs	r2, #0
 8001d88:	4619      	mov	r1, r3
 8001d8a:	4815      	ldr	r0, [pc, #84]	; (8001de0 <Starthorloge+0x74>)
 8001d8c:	f006 ffc6 	bl	8008d1c <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001d90:	f107 0308 	add.w	r3, r7, #8
 8001d94:	2200      	movs	r2, #0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4811      	ldr	r0, [pc, #68]	; (8001de0 <Starthorloge+0x74>)
 8001d9a:	f007 f8c5 	bl	8008f28 <HAL_RTC_GetDate>

		//Conversion en chaine de caractères et stockage dans le texte d'affichage
		sprintf(text, "%2u:%2u", time.Minutes, time.Seconds);
 8001d9e:	7b7b      	ldrb	r3, [r7, #13]
 8001da0:	461a      	mov	r2, r3
 8001da2:	7bbb      	ldrb	r3, [r7, #14]
 8001da4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001da8:	490e      	ldr	r1, [pc, #56]	; (8001de4 <Starthorloge+0x78>)
 8001daa:	f00c f9f7 	bl	800e19c <siprintf>

		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001dae:	4b0e      	ldr	r3, [pc, #56]	; (8001de8 <Starthorloge+0x7c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f04f 31ff 	mov.w	r1, #4294967295
 8001db6:	4618      	mov	r0, r3
 8001db8:	f00a fa68 	bl	800c28c <xQueueSemaphoreTake>

		//Affichage du chronomètre de jeu
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8001dbc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	2001      	movs	r0, #1
 8001dc4:	f000 ffb8 	bl	8002d38 <BSP_LCD_DisplayStringAtLine>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001dc8:	4b07      	ldr	r3, [pc, #28]	; (8001de8 <Starthorloge+0x7c>)
 8001dca:	6818      	ldr	r0, [r3, #0]
 8001dcc:	2300      	movs	r3, #0
 8001dce:	2200      	movs	r2, #0
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	f00a f959 	bl	800c088 <xQueueGenericSend>

		osDelay(500);
 8001dd6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001dda:	f009 feb8 	bl	800bb4e <osDelay>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001dde:	e7d0      	b.n	8001d82 <Starthorloge+0x16>
 8001de0:	20008a78 	.word	0x20008a78
 8001de4:	0800eaa0 	.word	0x0800eaa0
 8001de8:	20008c18 	.word	0x20008c18

08001dec <StartLRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLRacket */
void StartLRacket(void const * argument)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b08a      	sub	sp, #40	; 0x28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	61fb      	str	r3, [r7, #28]
	joystick_v = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	61bb      	str	r3, [r7, #24]
	//Initialisation du stockage des coordonnées de la raquette gauche
	int32_t x_LRacket_hold;
	int32_t y_LRacket_hold;

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001dfc:	f107 0308 	add.w	r3, r7, #8
 8001e00:	2200      	movs	r2, #0
 8001e02:	601a      	str	r2, [r3, #0]
 8001e04:	605a      	str	r2, [r3, #4]
 8001e06:	609a      	str	r2, [r3, #8]
 8001e08:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e12:	f107 0308 	add.w	r3, r7, #8
 8001e16:	4619      	mov	r1, r3
 8001e18:	485c      	ldr	r0, [pc, #368]	; (8001f8c <StartLRacket+0x1a0>)
 8001e1a:	f003 f8e3 	bl	8004fe4 <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for (;;) {
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8001e1e:	2308      	movs	r3, #8
 8001e20:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001e22:	f107 0308 	add.w	r3, r7, #8
 8001e26:	4619      	mov	r1, r3
 8001e28:	4858      	ldr	r0, [pc, #352]	; (8001f8c <StartLRacket+0x1a0>)
 8001e2a:	f003 f8db 	bl	8004fe4 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001e2e:	4857      	ldr	r0, [pc, #348]	; (8001f8c <StartLRacket+0x1a0>)
 8001e30:	f002 ff86 	bl	8004d40 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001e34:	bf00      	nop
 8001e36:	2164      	movs	r1, #100	; 0x64
 8001e38:	4854      	ldr	r0, [pc, #336]	; (8001f8c <StartLRacket+0x1a0>)
 8001e3a:	f003 f841 	bl	8004ec0 <HAL_ADC_PollForConversion>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d1f8      	bne.n	8001e36 <StartLRacket+0x4a>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e44:	4851      	ldr	r0, [pc, #324]	; (8001f8c <StartLRacket+0x1a0>)
 8001e46:	f003 f8bf 	bl	8004fc8 <HAL_ADC_GetValue>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	61bb      	str	r3, [r7, #24]

		HAL_ADC_Start(&hadc1);
 8001e4e:	4850      	ldr	r0, [pc, #320]	; (8001f90 <StartLRacket+0x1a4>)
 8001e50:	f002 ff76 	bl	8004d40 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001e54:	bf00      	nop
 8001e56:	2164      	movs	r1, #100	; 0x64
 8001e58:	484d      	ldr	r0, [pc, #308]	; (8001f90 <StartLRacket+0x1a4>)
 8001e5a:	f003 f831 	bl	8004ec0 <HAL_ADC_PollForConversion>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1f8      	bne.n	8001e56 <StartLRacket+0x6a>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e64:	484a      	ldr	r0, [pc, #296]	; (8001f90 <StartLRacket+0x1a4>)
 8001e66:	f003 f8af 	bl	8004fc8 <HAL_ADC_GetValue>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	61fb      	str	r3, [r7, #28]

		//Actualisation des coordonnées de la raquette gauche
		x_LRacket -= (joystick_h - 2080)/100;
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001e74:	4a47      	ldr	r2, [pc, #284]	; (8001f94 <StartLRacket+0x1a8>)
 8001e76:	fb82 1203 	smull	r1, r2, r2, r3
 8001e7a:	1152      	asrs	r2, r2, #5
 8001e7c:	17db      	asrs	r3, r3, #31
 8001e7e:	1a9b      	subs	r3, r3, r2
 8001e80:	b29a      	uxth	r2, r3
 8001e82:	4b45      	ldr	r3, [pc, #276]	; (8001f98 <StartLRacket+0x1ac>)
 8001e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b29b      	uxth	r3, r3
 8001e8e:	b21a      	sxth	r2, r3
 8001e90:	4b41      	ldr	r3, [pc, #260]	; (8001f98 <StartLRacket+0x1ac>)
 8001e92:	801a      	strh	r2, [r3, #0]
		y_LRacket -= (joystick_v - 2080)/150;
 8001e94:	69bb      	ldr	r3, [r7, #24]
 8001e96:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001e9a:	4a40      	ldr	r2, [pc, #256]	; (8001f9c <StartLRacket+0x1b0>)
 8001e9c:	fb82 1203 	smull	r1, r2, r2, r3
 8001ea0:	1112      	asrs	r2, r2, #4
 8001ea2:	17db      	asrs	r3, r3, #31
 8001ea4:	1a9b      	subs	r3, r3, r2
 8001ea6:	b29a      	uxth	r2, r3
 8001ea8:	4b3d      	ldr	r3, [pc, #244]	; (8001fa0 <StartLRacket+0x1b4>)
 8001eaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001eae:	b29b      	uxth	r3, r3
 8001eb0:	4413      	add	r3, r2
 8001eb2:	b29b      	uxth	r3, r3
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	4b3a      	ldr	r3, [pc, #232]	; (8001fa0 <StartLRacket+0x1b4>)
 8001eb8:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées LRacket
		if (x_LRacket >= 239 - width_rackets) x_LRacket = 239-width_rackets;
 8001eba:	4b37      	ldr	r3, [pc, #220]	; (8001f98 <StartLRacket+0x1ac>)
 8001ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ec0:	2be6      	cmp	r3, #230	; 0xe6
 8001ec2:	dd02      	ble.n	8001eca <StartLRacket+0xde>
 8001ec4:	4b34      	ldr	r3, [pc, #208]	; (8001f98 <StartLRacket+0x1ac>)
 8001ec6:	22e7      	movs	r2, #231	; 0xe7
 8001ec8:	801a      	strh	r2, [r3, #0]
		if (x_LRacket <= 0) x_LRacket = 0;
 8001eca:	4b33      	ldr	r3, [pc, #204]	; (8001f98 <StartLRacket+0x1ac>)
 8001ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	dc02      	bgt.n	8001eda <StartLRacket+0xee>
 8001ed4:	4b30      	ldr	r3, [pc, #192]	; (8001f98 <StartLRacket+0x1ac>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	801a      	strh	r2, [r3, #0]
		if (y_LRacket <= 0) y_LRacket = 0;
 8001eda:	4b31      	ldr	r3, [pc, #196]	; (8001fa0 <StartLRacket+0x1b4>)
 8001edc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	dc02      	bgt.n	8001eea <StartLRacket+0xfe>
 8001ee4:	4b2e      	ldr	r3, [pc, #184]	; (8001fa0 <StartLRacket+0x1b4>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	801a      	strh	r2, [r3, #0]
		if (y_LRacket + height_rackets >= 272) y_LRacket = 272 - height_rackets;
 8001eea:	4b2d      	ldr	r3, [pc, #180]	; (8001fa0 <StartLRacket+0x1b4>)
 8001eec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ef0:	3328      	adds	r3, #40	; 0x28
 8001ef2:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001ef6:	db02      	blt.n	8001efe <StartLRacket+0x112>
 8001ef8:	4b29      	ldr	r3, [pc, #164]	; (8001fa0 <StartLRacket+0x1b4>)
 8001efa:	22e8      	movs	r2, #232	; 0xe8
 8001efc:	801a      	strh	r2, [r3, #0]

		//Tracé de LRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001efe:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <StartLRacket+0x1b8>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	f04f 31ff 	mov.w	r1, #4294967295
 8001f06:	4618      	mov	r0, r3
 8001f08:	f00a f9c0 	bl	800c28c <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f0c:	4b26      	ldr	r3, [pc, #152]	; (8001fa8 <StartLRacket+0x1bc>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d102      	bne.n	8001f1a <StartLRacket+0x12e>
 8001f14:	f04f 33ff 	mov.w	r3, #4294967295
 8001f18:	e001      	b.n	8001f1e <StartLRacket+0x132>
 8001f1a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f000 fd78 	bl	8002a14 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket_hold, y_LRacket_hold, width_rackets,
 8001f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f26:	b298      	uxth	r0, r3
 8001f28:	6a3b      	ldr	r3, [r7, #32]
 8001f2a:	b299      	uxth	r1, r3
 8001f2c:	2328      	movs	r3, #40	; 0x28
 8001f2e:	2208      	movs	r2, #8
 8001f30:	f001 f97c 	bl	800322c <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <StartLRacket+0x1bc>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d102      	bne.n	8001f42 <StartLRacket+0x156>
 8001f3c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f40:	e001      	b.n	8001f46 <StartLRacket+0x15a>
 8001f42:	f04f 33ff 	mov.w	r3, #4294967295
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 fd64 	bl	8002a14 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket, y_LRacket, width_rackets, height_rackets);
 8001f4c:	4b12      	ldr	r3, [pc, #72]	; (8001f98 <StartLRacket+0x1ac>)
 8001f4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f52:	b298      	uxth	r0, r3
 8001f54:	4b12      	ldr	r3, [pc, #72]	; (8001fa0 <StartLRacket+0x1b4>)
 8001f56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	2328      	movs	r3, #40	; 0x28
 8001f5e:	2208      	movs	r2, #8
 8001f60:	f001 f964 	bl	800322c <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001f64:	4b0f      	ldr	r3, [pc, #60]	; (8001fa4 <StartLRacket+0x1b8>)
 8001f66:	6818      	ldr	r0, [r3, #0]
 8001f68:	2300      	movs	r3, #0
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	2100      	movs	r1, #0
 8001f6e:	f00a f88b 	bl	800c088 <xQueueGenericSend>

		//Stockage des dernières coordonnées de la raquette gauche
		x_LRacket_hold = x_LRacket;
 8001f72:	4b09      	ldr	r3, [pc, #36]	; (8001f98 <StartLRacket+0x1ac>)
 8001f74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f78:	627b      	str	r3, [r7, #36]	; 0x24
		y_LRacket_hold = y_LRacket;
 8001f7a:	4b09      	ldr	r3, [pc, #36]	; (8001fa0 <StartLRacket+0x1b4>)
 8001f7c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f80:	623b      	str	r3, [r7, #32]

		osDelay(100);
 8001f82:	2064      	movs	r0, #100	; 0x64
 8001f84:	f009 fde3 	bl	800bb4e <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8001f88:	e749      	b.n	8001e1e <StartLRacket+0x32>
 8001f8a:	bf00      	nop
 8001f8c:	20008994 	.word	0x20008994
 8001f90:	20008948 	.word	0x20008948
 8001f94:	51eb851f 	.word	0x51eb851f
 8001f98:	20000028 	.word	0x20000028
 8001f9c:	1b4e81b5 	.word	0x1b4e81b5
 8001fa0:	2000002a 	.word	0x2000002a
 8001fa4:	20008c18 	.word	0x20008c18
 8001fa8:	20000035 	.word	0x20000035

08001fac <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b092      	sub	sp, #72	; 0x48
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=10;
 8001fb4:	230a      	movs	r3, #10
 8001fb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001fb8:	f00a ff74 	bl	800cea4 <xTaskGetTickCount>
 8001fbc:	4603      	mov	r3, r0
 8001fbe:	63bb      	str	r3, [r7, #56]	; 0x38

	//Initialisation des anciennes coordonnées de la balle
	uint16_t x_balle_hold = 480;
 8001fc0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001fc4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint16_t y_balle_hold = 136;
 8001fc8:	2388      	movs	r3, #136	; 0x88
 8001fca:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	//Initialisation du sens de déplacement de la balle
	int8_t x_sens = -1; //On pourrait rajouter de l'aléatoire
 8001fce:	23ff      	movs	r3, #255	; 0xff
 8001fd0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	int8_t y_sens = 1; //On pourrait rajouter de l'aléatoire
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42

  /* Infinite loop */
  for(;;)
  {
	  //Mouvement de la balle
	  x_balle += x_sens;
 8001fda:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	4ba4      	ldr	r3, [pc, #656]	; (8002274 <StartBall+0x2c8>)
 8001fe2:	881b      	ldrh	r3, [r3, #0]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	b29a      	uxth	r2, r3
 8001fe8:	4ba2      	ldr	r3, [pc, #648]	; (8002274 <StartBall+0x2c8>)
 8001fea:	801a      	strh	r2, [r3, #0]
	  y_balle += y_sens;
 8001fec:	f997 3042 	ldrsb.w	r3, [r7, #66]	; 0x42
 8001ff0:	b29a      	uxth	r2, r3
 8001ff2:	4ba1      	ldr	r3, [pc, #644]	; (8002278 <StartBall+0x2cc>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	4413      	add	r3, r2
 8001ff8:	b29a      	uxth	r2, r3
 8001ffa:	4b9f      	ldr	r3, [pc, #636]	; (8002278 <StartBall+0x2cc>)
 8001ffc:	801a      	strh	r2, [r3, #0]

	  //Gestion des rebonds sur les bords horizontaux : cadrage vertical des coordonnées de la balle
	  if((y_balle-radius_balle <= 0) || (y_balle+radius_balle >= 271)){
 8001ffe:	4b9e      	ldr	r3, [pc, #632]	; (8002278 <StartBall+0x2cc>)
 8002000:	881b      	ldrh	r3, [r3, #0]
 8002002:	461a      	mov	r2, r3
 8002004:	4b9d      	ldr	r3, [pc, #628]	; (800227c <StartBall+0x2d0>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	1ad3      	subs	r3, r2, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	dd08      	ble.n	8002020 <StartBall+0x74>
 800200e:	4b9a      	ldr	r3, [pc, #616]	; (8002278 <StartBall+0x2cc>)
 8002010:	881b      	ldrh	r3, [r3, #0]
 8002012:	461a      	mov	r2, r3
 8002014:	4b99      	ldr	r3, [pc, #612]	; (800227c <StartBall+0x2d0>)
 8002016:	781b      	ldrb	r3, [r3, #0]
 8002018:	4413      	add	r3, r2
 800201a:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 800201e:	dd05      	ble.n	800202c <StartBall+0x80>
		  y_sens = -y_sens;
 8002020:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
 8002024:	425b      	negs	r3, r3
 8002026:	b2db      	uxtb	r3, r3
 8002028:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	  }

	  //Gestion des rebonds sur les raquettes ou de la perte de la balle : cadrage horizontal des coordonnées de la balle
	  if(x_sens==-1){
 800202c:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d14e      	bne.n	80020d4 <StartBall+0x128>
		  //Dans le sens droite vers gauche, le rebond doit avoir lieu, s'il existe, sur LRacket
		  if(((x_balle - radius_balle) <= (x_LRacket + width_rackets)) && ((x_balle - radius_balle) >= x_LRacket))
 8002036:	4b8f      	ldr	r3, [pc, #572]	; (8002274 <StartBall+0x2c8>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	461a      	mov	r2, r3
 800203c:	4b8f      	ldr	r3, [pc, #572]	; (800227c <StartBall+0x2d0>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	1ad2      	subs	r2, r2, r3
 8002042:	4b8f      	ldr	r3, [pc, #572]	; (8002280 <StartBall+0x2d4>)
 8002044:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002048:	3308      	adds	r3, #8
 800204a:	429a      	cmp	r2, r3
 800204c:	dc20      	bgt.n	8002090 <StartBall+0xe4>
 800204e:	4b89      	ldr	r3, [pc, #548]	; (8002274 <StartBall+0x2c8>)
 8002050:	881b      	ldrh	r3, [r3, #0]
 8002052:	461a      	mov	r2, r3
 8002054:	4b89      	ldr	r3, [pc, #548]	; (800227c <StartBall+0x2d0>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	1ad3      	subs	r3, r2, r3
 800205a:	4a89      	ldr	r2, [pc, #548]	; (8002280 <StartBall+0x2d4>)
 800205c:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002060:	4293      	cmp	r3, r2
 8002062:	db15      	blt.n	8002090 <StartBall+0xe4>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002064:	4b84      	ldr	r3, [pc, #528]	; (8002278 <StartBall+0x2cc>)
 8002066:	881b      	ldrh	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b86      	ldr	r3, [pc, #536]	; (8002284 <StartBall+0x2d8>)
 800206c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002070:	429a      	cmp	r2, r3
 8002072:	f2c0 8085 	blt.w	8002180 <StartBall+0x1d4>
 8002076:	4b80      	ldr	r3, [pc, #512]	; (8002278 <StartBall+0x2cc>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	461a      	mov	r2, r3
 800207c:	4b81      	ldr	r3, [pc, #516]	; (8002284 <StartBall+0x2d8>)
 800207e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002082:	3328      	adds	r3, #40	; 0x28
 8002084:	429a      	cmp	r2, r3
 8002086:	dc7b      	bgt.n	8002180 <StartBall+0x1d4>
			  {
				  //Et verticallement "dans" la raquette, il y a rebond, donc le sens horizontal passe à 1
				  x_sens = 1;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 800208e:	e077      	b.n	8002180 <StartBall+0x1d4>
			  }
		  }
		  else if(x_balle<=radius_balle)
 8002090:	4b7a      	ldr	r3, [pc, #488]	; (800227c <StartBall+0x2d0>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	b29a      	uxth	r2, r3
 8002096:	4b77      	ldr	r3, [pc, #476]	; (8002274 <StartBall+0x2c8>)
 8002098:	881b      	ldrh	r3, [r3, #0]
 800209a:	429a      	cmp	r2, r3
 800209c:	d373      	bcc.n	8002186 <StartBall+0x1da>
		  {
			  //Si la balle touche le bord gauche de l'écran, on a perdu
			  perdu = 1;
 800209e:	4b7a      	ldr	r3, [pc, #488]	; (8002288 <StartBall+0x2dc>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80020a4:	4b79      	ldr	r3, [pc, #484]	; (800228c <StartBall+0x2e0>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	4618      	mov	r0, r3
 80020ae:	f00a f8ed 	bl	800c28c <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 80020b2:	4977      	ldr	r1, [pc, #476]	; (8002290 <StartBall+0x2e4>)
 80020b4:	2002      	movs	r0, #2
 80020b6:	f000 fe3f 	bl	8002d38 <BSP_LCD_DisplayStringAtLine>

			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 80020ba:	4b74      	ldr	r3, [pc, #464]	; (800228c <StartBall+0x2e0>)
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	2300      	movs	r3, #0
 80020c0:	2200      	movs	r2, #0
 80020c2:	2100      	movs	r1, #0
 80020c4:	f009 ffe0 	bl	800c088 <xQueueGenericSend>

			  //Mise en pause du déplacement de la balle
			  vTaskSuspend(BallHandle);
 80020c8:	4b72      	ldr	r3, [pc, #456]	; (8002294 <StartBall+0x2e8>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f00a fd47 	bl	800cb60 <vTaskSuspend>
 80020d2:	e058      	b.n	8002186 <StartBall+0x1da>
		  }
	  }
	  else if(x_sens==1){
 80020d4:	f997 3043 	ldrsb.w	r3, [r7, #67]	; 0x43
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d154      	bne.n	8002186 <StartBall+0x1da>
		  //Dans le sens gauche vers droite, le rebond doit avoir lieu, s'il existe, sur RRacket
		  if(((x_balle + radius_balle) >= x_RRacket) && ((x_balle + radius_balle) <= (x_RRacket + width_rackets)))
 80020dc:	4b65      	ldr	r3, [pc, #404]	; (8002274 <StartBall+0x2c8>)
 80020de:	881b      	ldrh	r3, [r3, #0]
 80020e0:	461a      	mov	r2, r3
 80020e2:	4b66      	ldr	r3, [pc, #408]	; (800227c <StartBall+0x2d0>)
 80020e4:	781b      	ldrb	r3, [r3, #0]
 80020e6:	4413      	add	r3, r2
 80020e8:	4a6b      	ldr	r2, [pc, #428]	; (8002298 <StartBall+0x2ec>)
 80020ea:	f9b2 2000 	ldrsh.w	r2, [r2]
 80020ee:	4293      	cmp	r3, r2
 80020f0:	db20      	blt.n	8002134 <StartBall+0x188>
 80020f2:	4b60      	ldr	r3, [pc, #384]	; (8002274 <StartBall+0x2c8>)
 80020f4:	881b      	ldrh	r3, [r3, #0]
 80020f6:	461a      	mov	r2, r3
 80020f8:	4b60      	ldr	r3, [pc, #384]	; (800227c <StartBall+0x2d0>)
 80020fa:	781b      	ldrb	r3, [r3, #0]
 80020fc:	441a      	add	r2, r3
 80020fe:	4b66      	ldr	r3, [pc, #408]	; (8002298 <StartBall+0x2ec>)
 8002100:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002104:	3308      	adds	r3, #8
 8002106:	429a      	cmp	r2, r3
 8002108:	dc14      	bgt.n	8002134 <StartBall+0x188>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 800210a:	4b5b      	ldr	r3, [pc, #364]	; (8002278 <StartBall+0x2cc>)
 800210c:	881b      	ldrh	r3, [r3, #0]
 800210e:	461a      	mov	r2, r3
 8002110:	4b62      	ldr	r3, [pc, #392]	; (800229c <StartBall+0x2f0>)
 8002112:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002116:	429a      	cmp	r2, r3
 8002118:	db34      	blt.n	8002184 <StartBall+0x1d8>
 800211a:	4b57      	ldr	r3, [pc, #348]	; (8002278 <StartBall+0x2cc>)
 800211c:	881b      	ldrh	r3, [r3, #0]
 800211e:	461a      	mov	r2, r3
 8002120:	4b5e      	ldr	r3, [pc, #376]	; (800229c <StartBall+0x2f0>)
 8002122:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002126:	3328      	adds	r3, #40	; 0x28
 8002128:	429a      	cmp	r2, r3
 800212a:	dc2b      	bgt.n	8002184 <StartBall+0x1d8>
			  {
				  //Et verticallement "dans" la raquette, il y a rebond, donc le sens horizontal passe à -1
				  x_sens = -1;
 800212c:	23ff      	movs	r3, #255	; 0xff
 800212e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002132:	e027      	b.n	8002184 <StartBall+0x1d8>
			  }
		  }
		  else if(x_balle>=(959-radius_balle))
 8002134:	4b4f      	ldr	r3, [pc, #316]	; (8002274 <StartBall+0x2c8>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	461a      	mov	r2, r3
 800213a:	4b50      	ldr	r3, [pc, #320]	; (800227c <StartBall+0x2d0>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	4619      	mov	r1, r3
 8002140:	f240 33bf 	movw	r3, #959	; 0x3bf
 8002144:	1a5b      	subs	r3, r3, r1
 8002146:	429a      	cmp	r2, r3
 8002148:	db1d      	blt.n	8002186 <StartBall+0x1da>
		  {
			  //Si la balle touche le bord droit de l'écran, on a perdu
			  perdu = 1;
 800214a:	4b4f      	ldr	r3, [pc, #316]	; (8002288 <StartBall+0x2dc>)
 800214c:	2201      	movs	r2, #1
 800214e:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002150:	4b4e      	ldr	r3, [pc, #312]	; (800228c <StartBall+0x2e0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f04f 31ff 	mov.w	r1, #4294967295
 8002158:	4618      	mov	r0, r3
 800215a:	f00a f897 	bl	800c28c <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 800215e:	494c      	ldr	r1, [pc, #304]	; (8002290 <StartBall+0x2e4>)
 8002160:	2002      	movs	r0, #2
 8002162:	f000 fde9 	bl	8002d38 <BSP_LCD_DisplayStringAtLine>

			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 8002166:	4b49      	ldr	r3, [pc, #292]	; (800228c <StartBall+0x2e0>)
 8002168:	6818      	ldr	r0, [r3, #0]
 800216a:	2300      	movs	r3, #0
 800216c:	2200      	movs	r2, #0
 800216e:	2100      	movs	r1, #0
 8002170:	f009 ff8a 	bl	800c088 <xQueueGenericSend>

			  //Mise en pause de déplacement de la balle
			  vTaskSuspend(BallHandle);
 8002174:	4b47      	ldr	r3, [pc, #284]	; (8002294 <StartBall+0x2e8>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f00a fcf1 	bl	800cb60 <vTaskSuspend>
 800217e:	e002      	b.n	8002186 <StartBall+0x1da>
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002180:	bf00      	nop
 8002182:	e000      	b.n	8002186 <StartBall+0x1da>
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002184:	bf00      	nop
		  }
	  }

	  //Affichage de la balle
	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002186:	4b41      	ldr	r3, [pc, #260]	; (800228c <StartBall+0x2e0>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	f04f 31ff 	mov.w	r1, #4294967295
 800218e:	4618      	mov	r0, r3
 8002190:	f00a f87c 	bl	800c28c <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold <=479){
 8002194:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8002198:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 800219c:	d216      	bcs.n	80021cc <StartBall+0x220>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 800219e:	4b40      	ldr	r3, [pc, #256]	; (80022a0 <StartBall+0x2f4>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	2b00      	cmp	r3, #0
 80021a4:	d102      	bne.n	80021ac <StartBall+0x200>
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	e001      	b.n	80021b0 <StartBall+0x204>
 80021ac:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 fc2f 	bl	8002a14 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, radius_balle);
 80021b6:	4b31      	ldr	r3, [pc, #196]	; (800227c <StartBall+0x2d0>)
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 80021c0:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80021c4:	4618      	mov	r0, r3
 80021c6:	f001 f8ab 	bl	8003320 <BSP_LCD_FillCircle>
 80021ca:	e02f      	b.n	800222c <StartBall+0x280>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 80021cc:	4b34      	ldr	r3, [pc, #208]	; (80022a0 <StartBall+0x2f4>)
 80021ce:	781b      	ldrb	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <StartBall+0x22e>
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
 80021d8:	e001      	b.n	80021de <StartBall+0x232>
 80021da:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021de:	4618      	mov	r0, r3
 80021e0:	f000 fc18 	bl	8002a14 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle_hold+3};
 80021e4:	f240 13d9 	movw	r3, #473	; 0x1d9
 80021e8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80021ea:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80021ee:	3303      	adds	r3, #3
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point2 = {479,y_balle_hold};
 80021f6:	f240 13df 	movw	r3, #479	; 0x1df
 80021fa:	863b      	strh	r3, [r7, #48]	; 0x30
 80021fc:	f9b7 3044 	ldrsh.w	r3, [r7, #68]	; 0x44
 8002200:	867b      	strh	r3, [r7, #50]	; 0x32
		  Point Point3 = {473,y_balle_hold-3};
 8002202:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002206:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002208:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 800220c:	3b03      	subs	r3, #3
 800220e:	b29b      	uxth	r3, r3
 8002210:	b21b      	sxth	r3, r3
 8002212:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  Point Points[3] = {Point1, Point2, Point3};
 8002214:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002216:	623b      	str	r3, [r7, #32]
 8002218:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800221a:	627b      	str	r3, [r7, #36]	; 0x24
 800221c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221e:	62bb      	str	r3, [r7, #40]	; 0x28
		  BSP_LCD_FillPolygon(Points,3);
 8002220:	f107 0320 	add.w	r3, r7, #32
 8002224:	2103      	movs	r1, #3
 8002226:	4618      	mov	r0, r3
 8002228:	f001 f91a 	bl	8003460 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle <=479){
 800222c:	4b11      	ldr	r3, [pc, #68]	; (8002274 <StartBall+0x2c8>)
 800222e:	881b      	ldrh	r3, [r3, #0]
 8002230:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002234:	d216      	bcs.n	8002264 <StartBall+0x2b8>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002236:	4b1a      	ldr	r3, [pc, #104]	; (80022a0 <StartBall+0x2f4>)
 8002238:	781b      	ldrb	r3, [r3, #0]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d102      	bne.n	8002244 <StartBall+0x298>
 800223e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002242:	e001      	b.n	8002248 <StartBall+0x29c>
 8002244:	f04f 33ff 	mov.w	r3, #4294967295
 8002248:	4618      	mov	r0, r3
 800224a:	f000 fbe3 	bl	8002a14 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, radius_balle);
 800224e:	4b09      	ldr	r3, [pc, #36]	; (8002274 <StartBall+0x2c8>)
 8002250:	8818      	ldrh	r0, [r3, #0]
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <StartBall+0x2cc>)
 8002254:	8819      	ldrh	r1, [r3, #0]
 8002256:	4b09      	ldr	r3, [pc, #36]	; (800227c <StartBall+0x2d0>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	b29b      	uxth	r3, r3
 800225c:	461a      	mov	r2, r3
 800225e:	f001 f85f 	bl	8003320 <BSP_LCD_FillCircle>
 8002262:	e049      	b.n	80022f8 <StartBall+0x34c>
	  }
	  else{
		  //Afficage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002264:	4b0e      	ldr	r3, [pc, #56]	; (80022a0 <StartBall+0x2f4>)
 8002266:	781b      	ldrb	r3, [r3, #0]
 8002268:	2b00      	cmp	r3, #0
 800226a:	d11b      	bne.n	80022a4 <StartBall+0x2f8>
 800226c:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002270:	e01a      	b.n	80022a8 <StartBall+0x2fc>
 8002272:	bf00      	nop
 8002274:	20000030 	.word	0x20000030
 8002278:	20000032 	.word	0x20000032
 800227c:	20000034 	.word	0x20000034
 8002280:	20000028 	.word	0x20000028
 8002284:	2000002a 	.word	0x2000002a
 8002288:	2000033a 	.word	0x2000033a
 800228c:	20008c18 	.word	0x20008c18
 8002290:	0800eaa8 	.word	0x0800eaa8
 8002294:	20008c28 	.word	0x20008c28
 8002298:	2000002c 	.word	0x2000002c
 800229c:	2000002e 	.word	0x2000002e
 80022a0:	20000035 	.word	0x20000035
 80022a4:	f04f 33ff 	mov.w	r3, #4294967295
 80022a8:	4618      	mov	r0, r3
 80022aa:	f000 fbb3 	bl	8002a14 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle+3};
 80022ae:	f240 13d9 	movw	r3, #473	; 0x1d9
 80022b2:	83bb      	strh	r3, [r7, #28]
 80022b4:	4b1b      	ldr	r3, [pc, #108]	; (8002324 <StartBall+0x378>)
 80022b6:	881b      	ldrh	r3, [r3, #0]
 80022b8:	3303      	adds	r3, #3
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	b21b      	sxth	r3, r3
 80022be:	83fb      	strh	r3, [r7, #30]
		  Point Point2 = {479,y_balle};
 80022c0:	f240 13df 	movw	r3, #479	; 0x1df
 80022c4:	833b      	strh	r3, [r7, #24]
 80022c6:	4b17      	ldr	r3, [pc, #92]	; (8002324 <StartBall+0x378>)
 80022c8:	881b      	ldrh	r3, [r3, #0]
 80022ca:	b21b      	sxth	r3, r3
 80022cc:	837b      	strh	r3, [r7, #26]
		  Point Point3 = {473,y_balle-3};
 80022ce:	f240 13d9 	movw	r3, #473	; 0x1d9
 80022d2:	82bb      	strh	r3, [r7, #20]
 80022d4:	4b13      	ldr	r3, [pc, #76]	; (8002324 <StartBall+0x378>)
 80022d6:	881b      	ldrh	r3, [r3, #0]
 80022d8:	3b03      	subs	r3, #3
 80022da:	b29b      	uxth	r3, r3
 80022dc:	b21b      	sxth	r3, r3
 80022de:	82fb      	strh	r3, [r7, #22]

		  Point Points[3] = {Point1, Point2, Point3};
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	60bb      	str	r3, [r7, #8]
 80022e4:	69bb      	ldr	r3, [r7, #24]
 80022e6:	60fb      	str	r3, [r7, #12]
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	613b      	str	r3, [r7, #16]
		  BSP_LCD_FillPolygon(Points,3);
 80022ec:	f107 0308 	add.w	r3, r7, #8
 80022f0:	2103      	movs	r1, #3
 80022f2:	4618      	mov	r0, r3
 80022f4:	f001 f8b4 	bl	8003460 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	  xSemaphoreGive(myMutex_LCDHandle);
 80022f8:	4b0b      	ldr	r3, [pc, #44]	; (8002328 <StartBall+0x37c>)
 80022fa:	6818      	ldr	r0, [r3, #0]
 80022fc:	2300      	movs	r3, #0
 80022fe:	2200      	movs	r2, #0
 8002300:	2100      	movs	r1, #0
 8002302:	f009 fec1 	bl	800c088 <xQueueGenericSend>

	  //Stockage du dernier emplacement de dessin
	  x_balle_hold = x_balle;
 8002306:	4b09      	ldr	r3, [pc, #36]	; (800232c <StartBall+0x380>)
 8002308:	881b      	ldrh	r3, [r3, #0]
 800230a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	  y_balle_hold = y_balle;
 800230e:	4b05      	ldr	r3, [pc, #20]	; (8002324 <StartBall+0x378>)
 8002310:	881b      	ldrh	r3, [r3, #0]
 8002312:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002316:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800231a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800231c:	4618      	mov	r0, r3
 800231e:	f00a fb69 	bl	800c9f4 <vTaskDelayUntil>
	  x_balle += x_sens;
 8002322:	e65a      	b.n	8001fda <StartBall+0x2e>
 8002324:	20000032 	.word	0x20000032
 8002328:	20008c18 	.word	0x20008c18
 800232c:	20000030 	.word	0x20000030

08002330 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8002330:	b580      	push	{r7, lr}
 8002332:	b084      	sub	sp, #16
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN StartBgChanger */
	  //Initialisation de l'état de BP1 et de l'état
	  uint8_t BP1=1;
 8002338:	2301      	movs	r3, #1
 800233a:	73bb      	strb	r3, [r7, #14]
	  uint8_t state=0;
 800233c:	2300      	movs	r3, #0
 800233e:	73fb      	strb	r3, [r7, #15]
	  /* Infinite loop */
	  for(;;)
	  {
		  //Lecture de l'état du BP1
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002340:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002344:	4832      	ldr	r0, [pc, #200]	; (8002410 <StartBgChanger+0xe0>)
 8002346:	f004 f95f 	bl	8006608 <HAL_GPIO_ReadPin>
 800234a:	4603      	mov	r3, r0
 800234c:	73bb      	strb	r3, [r7, #14]

		  //Machine à états
		  switch(state){
 800234e:	7bfb      	ldrb	r3, [r7, #15]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d009      	beq.n	8002368 <StartBgChanger+0x38>
 8002354:	2b02      	cmp	r3, #2
 8002356:	d04d      	beq.n	80023f4 <StartBgChanger+0xc4>
 8002358:	2b00      	cmp	r3, #0
 800235a:	d154      	bne.n	8002406 <StartBgChanger+0xd6>
			  case 0:
				  //Attente d'un changement d'état (d'un appui sur BP1)
				  if(!BP1) state = 1;
 800235c:	7bbb      	ldrb	r3, [r7, #14]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d14e      	bne.n	8002400 <StartBgChanger+0xd0>
 8002362:	2301      	movs	r3, #1
 8002364:	73fb      	strb	r3, [r7, #15]
				  break;
 8002366:	e04b      	b.n	8002400 <StartBgChanger+0xd0>
			  case 1:
				  //Changement de la couleur
				  couleur = !couleur;
 8002368:	4b2a      	ldr	r3, [pc, #168]	; (8002414 <StartBgChanger+0xe4>)
 800236a:	781b      	ldrb	r3, [r3, #0]
 800236c:	2b00      	cmp	r3, #0
 800236e:	bf0c      	ite	eq
 8002370:	2301      	moveq	r3, #1
 8002372:	2300      	movne	r3, #0
 8002374:	b2db      	uxtb	r3, r3
 8002376:	461a      	mov	r2, r3
 8002378:	4b26      	ldr	r3, [pc, #152]	; (8002414 <StartBgChanger+0xe4>)
 800237a:	701a      	strb	r2, [r3, #0]
				  if(couleur==0){
 800237c:	4b25      	ldr	r3, [pc, #148]	; (8002414 <StartBgChanger+0xe4>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d11a      	bne.n	80023ba <StartBgChanger+0x8a>
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <StartBgChanger+0xe8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f04f 31ff 	mov.w	r1, #4294967295
 800238c:	4618      	mov	r0, r3
 800238e:	f009 ff7d 	bl	800c28c <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en noir sur fond blanc
					  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002392:	f04f 30ff 	mov.w	r0, #4294967295
 8002396:	f000 fb9f 	bl	8002ad8 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 800239a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800239e:	f000 fb39 	bl	8002a14 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80023a2:	f04f 30ff 	mov.w	r0, #4294967295
 80023a6:	f000 fb4d 	bl	8002a44 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 80023aa:	4b1b      	ldr	r3, [pc, #108]	; (8002418 <StartBgChanger+0xe8>)
 80023ac:	6818      	ldr	r0, [r3, #0]
 80023ae:	2300      	movs	r3, #0
 80023b0:	2200      	movs	r2, #0
 80023b2:	2100      	movs	r1, #0
 80023b4:	f009 fe68 	bl	800c088 <xQueueGenericSend>
 80023b8:	e019      	b.n	80023ee <StartBgChanger+0xbe>
				  }
				  else{
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80023ba:	4b17      	ldr	r3, [pc, #92]	; (8002418 <StartBgChanger+0xe8>)
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f04f 31ff 	mov.w	r1, #4294967295
 80023c2:	4618      	mov	r0, r3
 80023c4:	f009 ff62 	bl	800c28c <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en blanc sur fond noir
					  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80023c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80023cc:	f000 fb84 	bl	8002ad8 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80023d0:	f04f 30ff 	mov.w	r0, #4294967295
 80023d4:	f000 fb1e 	bl	8002a14 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80023d8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80023dc:	f000 fb32 	bl	8002a44 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 80023e0:	4b0d      	ldr	r3, [pc, #52]	; (8002418 <StartBgChanger+0xe8>)
 80023e2:	6818      	ldr	r0, [r3, #0]
 80023e4:	2300      	movs	r3, #0
 80023e6:	2200      	movs	r2, #0
 80023e8:	2100      	movs	r1, #0
 80023ea:	f009 fe4d 	bl	800c088 <xQueueGenericSend>
				  }

				  //Changement d'état
				  state = 2;
 80023ee:	2302      	movs	r3, #2
 80023f0:	73fb      	strb	r3, [r7, #15]
				  break;
 80023f2:	e008      	b.n	8002406 <StartBgChanger+0xd6>
			  case 2:
				  //Attente d'un changement d'état (relachement du bouton BP1)
				  if(BP1) state = 0;
 80023f4:	7bbb      	ldrb	r3, [r7, #14]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d004      	beq.n	8002404 <StartBgChanger+0xd4>
 80023fa:	2300      	movs	r3, #0
 80023fc:	73fb      	strb	r3, [r7, #15]
				  break;
 80023fe:	e001      	b.n	8002404 <StartBgChanger+0xd4>
				  break;
 8002400:	bf00      	nop
 8002402:	e000      	b.n	8002406 <StartBgChanger+0xd6>
				  break;
 8002404:	bf00      	nop
		  }
	  osDelay(400);
 8002406:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800240a:	f009 fba0 	bl	800bb4e <osDelay>
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800240e:	e797      	b.n	8002340 <StartBgChanger+0x10>
 8002410:	40020000 	.word	0x40020000
 8002414:	20000035 	.word	0x20000035
 8002418:	20008c18 	.word	0x20008c18

0800241c <StartTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmit */
void StartTransmit(void const * argument)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b082      	sub	sp, #8
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
  for(;;)
  {

	  //Transmission du rayon de la balle et des coordonnées de la balle et du drapeau de perte
	  txbuffer[0] = radius_balle;
 8002424:	4b14      	ldr	r3, [pc, #80]	; (8002478 <StartTransmit+0x5c>)
 8002426:	781a      	ldrb	r2, [r3, #0]
 8002428:	4b14      	ldr	r3, [pc, #80]	; (800247c <StartTransmit+0x60>)
 800242a:	701a      	strb	r2, [r3, #0]
	  txbuffer[1] = (x_balle & 0xFF00) >> 8;
 800242c:	4b14      	ldr	r3, [pc, #80]	; (8002480 <StartTransmit+0x64>)
 800242e:	881b      	ldrh	r3, [r3, #0]
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	b29b      	uxth	r3, r3
 8002434:	b2da      	uxtb	r2, r3
 8002436:	4b11      	ldr	r3, [pc, #68]	; (800247c <StartTransmit+0x60>)
 8002438:	705a      	strb	r2, [r3, #1]
	  txbuffer[2] = (x_balle & 0x00FF);
 800243a:	4b11      	ldr	r3, [pc, #68]	; (8002480 <StartTransmit+0x64>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	b2da      	uxtb	r2, r3
 8002440:	4b0e      	ldr	r3, [pc, #56]	; (800247c <StartTransmit+0x60>)
 8002442:	709a      	strb	r2, [r3, #2]
	  txbuffer[3] = (y_balle & 0xFF00) >> 8;
 8002444:	4b0f      	ldr	r3, [pc, #60]	; (8002484 <StartTransmit+0x68>)
 8002446:	881b      	ldrh	r3, [r3, #0]
 8002448:	0a1b      	lsrs	r3, r3, #8
 800244a:	b29b      	uxth	r3, r3
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b0b      	ldr	r3, [pc, #44]	; (800247c <StartTransmit+0x60>)
 8002450:	70da      	strb	r2, [r3, #3]
	  txbuffer[4] = (y_balle & 0x00FF);
 8002452:	4b0c      	ldr	r3, [pc, #48]	; (8002484 <StartTransmit+0x68>)
 8002454:	881b      	ldrh	r3, [r3, #0]
 8002456:	b2da      	uxtb	r2, r3
 8002458:	4b08      	ldr	r3, [pc, #32]	; (800247c <StartTransmit+0x60>)
 800245a:	711a      	strb	r2, [r3, #4]
	  txbuffer[5] = perdu;
 800245c:	4b0a      	ldr	r3, [pc, #40]	; (8002488 <StartTransmit+0x6c>)
 800245e:	781a      	ldrb	r2, [r3, #0]
 8002460:	4b06      	ldr	r3, [pc, #24]	; (800247c <StartTransmit+0x60>)
 8002462:	715a      	strb	r2, [r3, #5]

	  HAL_UART_Transmit_IT(&huart7,txbuffer,6);
 8002464:	2206      	movs	r2, #6
 8002466:	4905      	ldr	r1, [pc, #20]	; (800247c <StartTransmit+0x60>)
 8002468:	4808      	ldr	r0, [pc, #32]	; (800248c <StartTransmit+0x70>)
 800246a:	f008 fa39 	bl	800a8e0 <HAL_UART_Transmit_IT>
	  osDelay(100);
 800246e:	2064      	movs	r0, #100	; 0x64
 8002470:	f009 fb6d 	bl	800bb4e <osDelay>
	  txbuffer[0] = radius_balle;
 8002474:	e7d6      	b.n	8002424 <StartTransmit+0x8>
 8002476:	bf00      	nop
 8002478:	20000034 	.word	0x20000034
 800247c:	20008ad8 	.word	0x20008ad8
 8002480:	20000030 	.word	0x20000030
 8002484:	20000032 	.word	0x20000032
 8002488:	2000033a 	.word	0x2000033a
 800248c:	20008714 	.word	0x20008714

08002490 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002490:	b580      	push	{r7, lr}
 8002492:	b082      	sub	sp, #8
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	4a04      	ldr	r2, [pc, #16]	; (80024b0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800249e:	4293      	cmp	r3, r2
 80024a0:	d101      	bne.n	80024a6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80024a2:	f002 fbc7 	bl	8004c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80024a6:	bf00      	nop
 80024a8:	3708      	adds	r7, #8
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40001000 	.word	0x40001000

080024b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80024b8:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80024ba:	e7fe      	b.n	80024ba <Error_Handler+0x6>

080024bc <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80024bc:	b580      	push	{r7, lr}
 80024be:	b08c      	sub	sp, #48	; 0x30
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a51      	ldr	r2, [pc, #324]	; (800260c <I2Cx_MspInit+0x150>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d14d      	bne.n	8002568 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80024cc:	4b50      	ldr	r3, [pc, #320]	; (8002610 <I2Cx_MspInit+0x154>)
 80024ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d0:	4a4f      	ldr	r2, [pc, #316]	; (8002610 <I2Cx_MspInit+0x154>)
 80024d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80024d6:	6313      	str	r3, [r2, #48]	; 0x30
 80024d8:	4b4d      	ldr	r3, [pc, #308]	; (8002610 <I2Cx_MspInit+0x154>)
 80024da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024e0:	61bb      	str	r3, [r7, #24]
 80024e2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80024e4:	2380      	movs	r3, #128	; 0x80
 80024e6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80024e8:	2312      	movs	r3, #18
 80024ea:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80024ec:	2300      	movs	r3, #0
 80024ee:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80024f0:	2302      	movs	r3, #2
 80024f2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80024f4:	2304      	movs	r3, #4
 80024f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80024f8:	f107 031c 	add.w	r3, r7, #28
 80024fc:	4619      	mov	r1, r3
 80024fe:	4845      	ldr	r0, [pc, #276]	; (8002614 <I2Cx_MspInit+0x158>)
 8002500:	f003 fdce 	bl	80060a0 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002504:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002508:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	4619      	mov	r1, r3
 8002510:	4840      	ldr	r0, [pc, #256]	; (8002614 <I2Cx_MspInit+0x158>)
 8002512:	f003 fdc5 	bl	80060a0 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002516:	4b3e      	ldr	r3, [pc, #248]	; (8002610 <I2Cx_MspInit+0x154>)
 8002518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251a:	4a3d      	ldr	r2, [pc, #244]	; (8002610 <I2Cx_MspInit+0x154>)
 800251c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002520:	6413      	str	r3, [r2, #64]	; 0x40
 8002522:	4b3b      	ldr	r3, [pc, #236]	; (8002610 <I2Cx_MspInit+0x154>)
 8002524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002526:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800252e:	4b38      	ldr	r3, [pc, #224]	; (8002610 <I2Cx_MspInit+0x154>)
 8002530:	6a1b      	ldr	r3, [r3, #32]
 8002532:	4a37      	ldr	r2, [pc, #220]	; (8002610 <I2Cx_MspInit+0x154>)
 8002534:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002538:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800253a:	4b35      	ldr	r3, [pc, #212]	; (8002610 <I2Cx_MspInit+0x154>)
 800253c:	6a1b      	ldr	r3, [r3, #32]
 800253e:	4a34      	ldr	r2, [pc, #208]	; (8002610 <I2Cx_MspInit+0x154>)
 8002540:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002544:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002546:	2200      	movs	r2, #0
 8002548:	210f      	movs	r1, #15
 800254a:	2048      	movs	r0, #72	; 0x48
 800254c:	f003 f846 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002550:	2048      	movs	r0, #72	; 0x48
 8002552:	f003 f85f 	bl	8005614 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002556:	2200      	movs	r2, #0
 8002558:	210f      	movs	r1, #15
 800255a:	2049      	movs	r0, #73	; 0x49
 800255c:	f003 f83e 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002560:	2049      	movs	r0, #73	; 0x49
 8002562:	f003 f857 	bl	8005614 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002566:	e04d      	b.n	8002604 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002568:	4b29      	ldr	r3, [pc, #164]	; (8002610 <I2Cx_MspInit+0x154>)
 800256a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256c:	4a28      	ldr	r2, [pc, #160]	; (8002610 <I2Cx_MspInit+0x154>)
 800256e:	f043 0302 	orr.w	r3, r3, #2
 8002572:	6313      	str	r3, [r2, #48]	; 0x30
 8002574:	4b26      	ldr	r3, [pc, #152]	; (8002610 <I2Cx_MspInit+0x154>)
 8002576:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002578:	f003 0302 	and.w	r3, r3, #2
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002580:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002584:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002586:	2312      	movs	r3, #18
 8002588:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800258a:	2300      	movs	r3, #0
 800258c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800258e:	2302      	movs	r3, #2
 8002590:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002592:	2304      	movs	r3, #4
 8002594:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002596:	f107 031c 	add.w	r3, r7, #28
 800259a:	4619      	mov	r1, r3
 800259c:	481e      	ldr	r0, [pc, #120]	; (8002618 <I2Cx_MspInit+0x15c>)
 800259e:	f003 fd7f 	bl	80060a0 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80025a2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80025a8:	f107 031c 	add.w	r3, r7, #28
 80025ac:	4619      	mov	r1, r3
 80025ae:	481a      	ldr	r0, [pc, #104]	; (8002618 <I2Cx_MspInit+0x15c>)
 80025b0:	f003 fd76 	bl	80060a0 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80025b4:	4b16      	ldr	r3, [pc, #88]	; (8002610 <I2Cx_MspInit+0x154>)
 80025b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b8:	4a15      	ldr	r2, [pc, #84]	; (8002610 <I2Cx_MspInit+0x154>)
 80025ba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025be:	6413      	str	r3, [r2, #64]	; 0x40
 80025c0:	4b13      	ldr	r3, [pc, #76]	; (8002610 <I2Cx_MspInit+0x154>)
 80025c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c8:	60fb      	str	r3, [r7, #12]
 80025ca:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80025cc:	4b10      	ldr	r3, [pc, #64]	; (8002610 <I2Cx_MspInit+0x154>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	4a0f      	ldr	r2, [pc, #60]	; (8002610 <I2Cx_MspInit+0x154>)
 80025d2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80025d6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80025d8:	4b0d      	ldr	r3, [pc, #52]	; (8002610 <I2Cx_MspInit+0x154>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a0c      	ldr	r2, [pc, #48]	; (8002610 <I2Cx_MspInit+0x154>)
 80025de:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80025e2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80025e4:	2200      	movs	r2, #0
 80025e6:	210f      	movs	r1, #15
 80025e8:	201f      	movs	r0, #31
 80025ea:	f002 fff7 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80025ee:	201f      	movs	r0, #31
 80025f0:	f003 f810 	bl	8005614 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80025f4:	2200      	movs	r2, #0
 80025f6:	210f      	movs	r1, #15
 80025f8:	2020      	movs	r0, #32
 80025fa:	f002 ffef 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80025fe:	2020      	movs	r0, #32
 8002600:	f003 f808 	bl	8005614 <HAL_NVIC_EnableIRQ>
}
 8002604:	bf00      	nop
 8002606:	3730      	adds	r7, #48	; 0x30
 8002608:	46bd      	mov	sp, r7
 800260a:	bd80      	pop	{r7, pc}
 800260c:	2000033c 	.word	0x2000033c
 8002610:	40023800 	.word	0x40023800
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40020400 	.word	0x40020400

0800261c <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 800261c:	b580      	push	{r7, lr}
 800261e:	b082      	sub	sp, #8
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f004 fb0f 	bl	8006c48 <HAL_I2C_GetState>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d125      	bne.n	800267c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	4a14      	ldr	r2, [pc, #80]	; (8002684 <I2Cx_Init+0x68>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d103      	bne.n	8002640 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	4a13      	ldr	r2, [pc, #76]	; (8002688 <I2Cx_Init+0x6c>)
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	e002      	b.n	8002646 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	4a12      	ldr	r2, [pc, #72]	; (800268c <I2Cx_Init+0x70>)
 8002644:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a11      	ldr	r2, [pc, #68]	; (8002690 <I2Cx_Init+0x74>)
 800264a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2200      	movs	r2, #0
 8002650:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2200      	movs	r2, #0
 800265c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	2200      	movs	r2, #0
 8002662:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002670:	6878      	ldr	r0, [r7, #4]
 8002672:	f7ff ff23 	bl	80024bc <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f003 fff8 	bl	800666c <HAL_I2C_Init>
  }
}
 800267c:	bf00      	nop
 800267e:	3708      	adds	r7, #8
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	2000033c 	.word	0x2000033c
 8002688:	40005c00 	.word	0x40005c00
 800268c:	40005400 	.word	0x40005400
 8002690:	40912732 	.word	0x40912732

08002694 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b08a      	sub	sp, #40	; 0x28
 8002698:	af04      	add	r7, sp, #16
 800269a:	60f8      	str	r0, [r7, #12]
 800269c:	4608      	mov	r0, r1
 800269e:	4611      	mov	r1, r2
 80026a0:	461a      	mov	r2, r3
 80026a2:	4603      	mov	r3, r0
 80026a4:	72fb      	strb	r3, [r7, #11]
 80026a6:	460b      	mov	r3, r1
 80026a8:	813b      	strh	r3, [r7, #8]
 80026aa:	4613      	mov	r3, r2
 80026ac:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80026ae:	2300      	movs	r3, #0
 80026b0:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80026b2:	7afb      	ldrb	r3, [r7, #11]
 80026b4:	b299      	uxth	r1, r3
 80026b6:	88f8      	ldrh	r0, [r7, #6]
 80026b8:	893a      	ldrh	r2, [r7, #8]
 80026ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026be:	9302      	str	r3, [sp, #8]
 80026c0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80026c2:	9301      	str	r3, [sp, #4]
 80026c4:	6a3b      	ldr	r3, [r7, #32]
 80026c6:	9300      	str	r3, [sp, #0]
 80026c8:	4603      	mov	r3, r0
 80026ca:	68f8      	ldr	r0, [r7, #12]
 80026cc:	f004 f9a2 	bl	8006a14 <HAL_I2C_Mem_Read>
 80026d0:	4603      	mov	r3, r0
 80026d2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80026d4:	7dfb      	ldrb	r3, [r7, #23]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d004      	beq.n	80026e4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80026da:	7afb      	ldrb	r3, [r7, #11]
 80026dc:	4619      	mov	r1, r3
 80026de:	68f8      	ldr	r0, [r7, #12]
 80026e0:	f000 f832 	bl	8002748 <I2Cx_Error>
  }
  return status;    
 80026e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80026e6:	4618      	mov	r0, r3
 80026e8:	3718      	adds	r7, #24
 80026ea:	46bd      	mov	sp, r7
 80026ec:	bd80      	pop	{r7, pc}

080026ee <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80026ee:	b580      	push	{r7, lr}
 80026f0:	b08a      	sub	sp, #40	; 0x28
 80026f2:	af04      	add	r7, sp, #16
 80026f4:	60f8      	str	r0, [r7, #12]
 80026f6:	4608      	mov	r0, r1
 80026f8:	4611      	mov	r1, r2
 80026fa:	461a      	mov	r2, r3
 80026fc:	4603      	mov	r3, r0
 80026fe:	72fb      	strb	r3, [r7, #11]
 8002700:	460b      	mov	r3, r1
 8002702:	813b      	strh	r3, [r7, #8]
 8002704:	4613      	mov	r3, r2
 8002706:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002708:	2300      	movs	r3, #0
 800270a:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800270c:	7afb      	ldrb	r3, [r7, #11]
 800270e:	b299      	uxth	r1, r3
 8002710:	88f8      	ldrh	r0, [r7, #6]
 8002712:	893a      	ldrh	r2, [r7, #8]
 8002714:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002718:	9302      	str	r3, [sp, #8]
 800271a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800271c:	9301      	str	r3, [sp, #4]
 800271e:	6a3b      	ldr	r3, [r7, #32]
 8002720:	9300      	str	r3, [sp, #0]
 8002722:	4603      	mov	r3, r0
 8002724:	68f8      	ldr	r0, [r7, #12]
 8002726:	f004 f861 	bl	80067ec <HAL_I2C_Mem_Write>
 800272a:	4603      	mov	r3, r0
 800272c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800272e:	7dfb      	ldrb	r3, [r7, #23]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d004      	beq.n	800273e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002734:	7afb      	ldrb	r3, [r7, #11]
 8002736:	4619      	mov	r1, r3
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f000 f805 	bl	8002748 <I2Cx_Error>
  }
  return status;
 800273e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002740:	4618      	mov	r0, r3
 8002742:	3718      	adds	r7, #24
 8002744:	46bd      	mov	sp, r7
 8002746:	bd80      	pop	{r7, pc}

08002748 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
 8002750:	460b      	mov	r3, r1
 8002752:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f004 f819 	bl	800678c <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f7ff ff5e 	bl	800261c <I2Cx_Init>
}
 8002760:	bf00      	nop
 8002762:	3708      	adds	r7, #8
 8002764:	46bd      	mov	sp, r7
 8002766:	bd80      	pop	{r7, pc}

08002768 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800276c:	4802      	ldr	r0, [pc, #8]	; (8002778 <TS_IO_Init+0x10>)
 800276e:	f7ff ff55 	bl	800261c <I2Cx_Init>
}
 8002772:	bf00      	nop
 8002774:	bd80      	pop	{r7, pc}
 8002776:	bf00      	nop
 8002778:	2000033c 	.word	0x2000033c

0800277c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800277c:	b580      	push	{r7, lr}
 800277e:	b084      	sub	sp, #16
 8002780:	af02      	add	r7, sp, #8
 8002782:	4603      	mov	r3, r0
 8002784:	71fb      	strb	r3, [r7, #7]
 8002786:	460b      	mov	r3, r1
 8002788:	71bb      	strb	r3, [r7, #6]
 800278a:	4613      	mov	r3, r2
 800278c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	b29a      	uxth	r2, r3
 8002792:	79f9      	ldrb	r1, [r7, #7]
 8002794:	2301      	movs	r3, #1
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	1d7b      	adds	r3, r7, #5
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	4803      	ldr	r0, [pc, #12]	; (80027ac <TS_IO_Write+0x30>)
 80027a0:	f7ff ffa5 	bl	80026ee <I2Cx_WriteMultiple>
}
 80027a4:	bf00      	nop
 80027a6:	3708      	adds	r7, #8
 80027a8:	46bd      	mov	sp, r7
 80027aa:	bd80      	pop	{r7, pc}
 80027ac:	2000033c 	.word	0x2000033c

080027b0 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af02      	add	r7, sp, #8
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80027c0:	2300      	movs	r3, #0
 80027c2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	b29a      	uxth	r2, r3
 80027c8:	79f9      	ldrb	r1, [r7, #7]
 80027ca:	2301      	movs	r3, #1
 80027cc:	9301      	str	r3, [sp, #4]
 80027ce:	f107 030f 	add.w	r3, r7, #15
 80027d2:	9300      	str	r3, [sp, #0]
 80027d4:	2301      	movs	r3, #1
 80027d6:	4804      	ldr	r0, [pc, #16]	; (80027e8 <TS_IO_Read+0x38>)
 80027d8:	f7ff ff5c 	bl	8002694 <I2Cx_ReadMultiple>

  return read_value;
 80027dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}
 80027e6:	bf00      	nop
 80027e8:	2000033c 	.word	0x2000033c

080027ec <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f002 fa3d 	bl	8004c74 <HAL_Delay>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002804:	b580      	push	{r7, lr}
 8002806:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002808:	4b31      	ldr	r3, [pc, #196]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800280a:	2228      	movs	r2, #40	; 0x28
 800280c:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800280e:	4b30      	ldr	r3, [pc, #192]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002810:	2209      	movs	r2, #9
 8002812:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002814:	4b2e      	ldr	r3, [pc, #184]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002816:	2235      	movs	r2, #53	; 0x35
 8002818:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800281a:	4b2d      	ldr	r3, [pc, #180]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800281c:	220b      	movs	r2, #11
 800281e:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002820:	4b2b      	ldr	r3, [pc, #172]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002822:	f240 121b 	movw	r2, #283	; 0x11b
 8002826:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002828:	4b29      	ldr	r3, [pc, #164]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800282a:	f240 2215 	movw	r2, #533	; 0x215
 800282e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002830:	4b27      	ldr	r3, [pc, #156]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002832:	f240 121d 	movw	r2, #285	; 0x11d
 8002836:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002838:	4b25      	ldr	r3, [pc, #148]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800283a:	f240 2235 	movw	r2, #565	; 0x235
 800283e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002840:	2100      	movs	r1, #0
 8002842:	4823      	ldr	r0, [pc, #140]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002844:	f000 ffe8 	bl	8003818 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002848:	4b21      	ldr	r3, [pc, #132]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800284a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800284e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002850:	4b1f      	ldr	r3, [pc, #124]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002852:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002856:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002858:	4b1d      	ldr	r3, [pc, #116]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800285a:	2200      	movs	r2, #0
 800285c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002860:	4b1b      	ldr	r3, [pc, #108]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002862:	2200      	movs	r2, #0
 8002864:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002868:	4b19      	ldr	r3, [pc, #100]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800286a:	2200      	movs	r2, #0
 800286c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002870:	4b17      	ldr	r3, [pc, #92]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002872:	2200      	movs	r2, #0
 8002874:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002876:	4b16      	ldr	r3, [pc, #88]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002878:	2200      	movs	r2, #0
 800287a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800287c:	4b14      	ldr	r3, [pc, #80]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800287e:	2200      	movs	r2, #0
 8002880:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002882:	4b13      	ldr	r3, [pc, #76]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002884:	2200      	movs	r2, #0
 8002886:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002888:	4b11      	ldr	r3, [pc, #68]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800288a:	4a12      	ldr	r2, [pc, #72]	; (80028d4 <BSP_LCD_Init+0xd0>)
 800288c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800288e:	4810      	ldr	r0, [pc, #64]	; (80028d0 <BSP_LCD_Init+0xcc>)
 8002890:	f004 fe6c 	bl	800756c <HAL_LTDC_GetState>
 8002894:	4603      	mov	r3, r0
 8002896:	2b00      	cmp	r3, #0
 8002898:	d103      	bne.n	80028a2 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800289a:	2100      	movs	r1, #0
 800289c:	480c      	ldr	r0, [pc, #48]	; (80028d0 <BSP_LCD_Init+0xcc>)
 800289e:	f000 fee1 	bl	8003664 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80028a2:	480b      	ldr	r0, [pc, #44]	; (80028d0 <BSP_LCD_Init+0xcc>)
 80028a4:	f004 fc92 	bl	80071cc <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80028a8:	2201      	movs	r2, #1
 80028aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ae:	480a      	ldr	r0, [pc, #40]	; (80028d8 <BSP_LCD_Init+0xd4>)
 80028b0:	f003 fec2 	bl	8006638 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80028b4:	2201      	movs	r2, #1
 80028b6:	2108      	movs	r1, #8
 80028b8:	4808      	ldr	r0, [pc, #32]	; (80028dc <BSP_LCD_Init+0xd8>)
 80028ba:	f003 febd 	bl	8006638 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80028be:	f001 f98b 	bl	8003bd8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80028c2:	4807      	ldr	r0, [pc, #28]	; (80028e0 <BSP_LCD_Init+0xdc>)
 80028c4:	f000 f8d8 	bl	8002a78 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80028c8:	2300      	movs	r3, #0
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	bd80      	pop	{r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20008c30 	.word	0x20008c30
 80028d4:	40016800 	.word	0x40016800
 80028d8:	40022000 	.word	0x40022000
 80028dc:	40022800 	.word	0x40022800
 80028e0:	20000038 	.word	0x20000038

080028e4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80028e8:	4b06      	ldr	r3, [pc, #24]	; (8002904 <BSP_LCD_GetXSize+0x20>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4a06      	ldr	r2, [pc, #24]	; (8002908 <BSP_LCD_GetXSize+0x24>)
 80028ee:	2134      	movs	r1, #52	; 0x34
 80028f0:	fb01 f303 	mul.w	r3, r1, r3
 80028f4:	4413      	add	r3, r2
 80028f6:	3360      	adds	r3, #96	; 0x60
 80028f8:	681b      	ldr	r3, [r3, #0]
}
 80028fa:	4618      	mov	r0, r3
 80028fc:	46bd      	mov	sp, r7
 80028fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002902:	4770      	bx	lr
 8002904:	200003c8 	.word	0x200003c8
 8002908:	20008c30 	.word	0x20008c30

0800290c <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 8002910:	4b06      	ldr	r3, [pc, #24]	; (800292c <BSP_LCD_GetYSize+0x20>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a06      	ldr	r2, [pc, #24]	; (8002930 <BSP_LCD_GetYSize+0x24>)
 8002916:	2134      	movs	r1, #52	; 0x34
 8002918:	fb01 f303 	mul.w	r3, r1, r3
 800291c:	4413      	add	r3, r2
 800291e:	3364      	adds	r3, #100	; 0x64
 8002920:	681b      	ldr	r3, [r3, #0]
}
 8002922:	4618      	mov	r0, r3
 8002924:	46bd      	mov	sp, r7
 8002926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292a:	4770      	bx	lr
 800292c:	200003c8 	.word	0x200003c8
 8002930:	20008c30 	.word	0x20008c30

08002934 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002934:	b580      	push	{r7, lr}
 8002936:	b090      	sub	sp, #64	; 0x40
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	6039      	str	r1, [r7, #0]
 800293e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002940:	2300      	movs	r3, #0
 8002942:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002944:	f7ff ffce 	bl	80028e4 <BSP_LCD_GetXSize>
 8002948:	4603      	mov	r3, r0
 800294a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800294c:	2300      	movs	r3, #0
 800294e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002950:	f7ff ffdc 	bl	800290c <BSP_LCD_GetYSize>
 8002954:	4603      	mov	r3, r0
 8002956:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002958:	2300      	movs	r3, #0
 800295a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002960:	23ff      	movs	r3, #255	; 0xff
 8002962:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002964:	2300      	movs	r3, #0
 8002966:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002968:	2300      	movs	r3, #0
 800296a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800297a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800297e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002980:	2307      	movs	r3, #7
 8002982:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002984:	f7ff ffae 	bl	80028e4 <BSP_LCD_GetXSize>
 8002988:	4603      	mov	r3, r0
 800298a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800298c:	f7ff ffbe 	bl	800290c <BSP_LCD_GetYSize>
 8002990:	4603      	mov	r3, r0
 8002992:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	f107 030c 	add.w	r3, r7, #12
 800299a:	4619      	mov	r1, r3
 800299c:	4812      	ldr	r0, [pc, #72]	; (80029e8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800299e:	f004 fda7 	bl	80074f0 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80029a2:	88fa      	ldrh	r2, [r7, #6]
 80029a4:	4911      	ldr	r1, [pc, #68]	; (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029a6:	4613      	mov	r3, r2
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	4413      	add	r3, r2
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	440b      	add	r3, r1
 80029b0:	3304      	adds	r3, #4
 80029b2:	f04f 32ff 	mov.w	r2, #4294967295
 80029b6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80029b8:	88fa      	ldrh	r2, [r7, #6]
 80029ba:	490c      	ldr	r1, [pc, #48]	; (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029bc:	4613      	mov	r3, r2
 80029be:	005b      	lsls	r3, r3, #1
 80029c0:	4413      	add	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	440b      	add	r3, r1
 80029c6:	3308      	adds	r3, #8
 80029c8:	4a09      	ldr	r2, [pc, #36]	; (80029f0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80029ca:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80029cc:	88fa      	ldrh	r2, [r7, #6]
 80029ce:	4907      	ldr	r1, [pc, #28]	; (80029ec <BSP_LCD_LayerDefaultInit+0xb8>)
 80029d0:	4613      	mov	r3, r2
 80029d2:	005b      	lsls	r3, r3, #1
 80029d4:	4413      	add	r3, r2
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	440b      	add	r3, r1
 80029da:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80029de:	601a      	str	r2, [r3, #0]
}
 80029e0:	bf00      	nop
 80029e2:	3740      	adds	r7, #64	; 0x40
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd80      	pop	{r7, pc}
 80029e8:	20008c30 	.word	0x20008c30
 80029ec:	200003cc 	.word	0x200003cc
 80029f0:	20000038 	.word	0x20000038

080029f4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <BSP_LCD_SelectLayer+0x1c>)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6013      	str	r3, [r2, #0]
} 
 8002a02:	bf00      	nop
 8002a04:	370c      	adds	r7, #12
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	200003c8 	.word	0x200003c8

08002a14 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002a1c:	4b07      	ldr	r3, [pc, #28]	; (8002a3c <BSP_LCD_SetTextColor+0x28>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4907      	ldr	r1, [pc, #28]	; (8002a40 <BSP_LCD_SetTextColor+0x2c>)
 8002a22:	4613      	mov	r3, r2
 8002a24:	005b      	lsls	r3, r3, #1
 8002a26:	4413      	add	r3, r2
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	440b      	add	r3, r1
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	601a      	str	r2, [r3, #0]
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr
 8002a3c:	200003c8 	.word	0x200003c8
 8002a40:	200003cc 	.word	0x200003cc

08002a44 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002a4c:	4b08      	ldr	r3, [pc, #32]	; (8002a70 <BSP_LCD_SetBackColor+0x2c>)
 8002a4e:	681a      	ldr	r2, [r3, #0]
 8002a50:	4908      	ldr	r1, [pc, #32]	; (8002a74 <BSP_LCD_SetBackColor+0x30>)
 8002a52:	4613      	mov	r3, r2
 8002a54:	005b      	lsls	r3, r3, #1
 8002a56:	4413      	add	r3, r2
 8002a58:	009b      	lsls	r3, r3, #2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	3304      	adds	r3, #4
 8002a5e:	687a      	ldr	r2, [r7, #4]
 8002a60:	601a      	str	r2, [r3, #0]
}
 8002a62:	bf00      	nop
 8002a64:	370c      	adds	r7, #12
 8002a66:	46bd      	mov	sp, r7
 8002a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6c:	4770      	bx	lr
 8002a6e:	bf00      	nop
 8002a70:	200003c8 	.word	0x200003c8
 8002a74:	200003cc 	.word	0x200003cc

08002a78 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002a80:	4b08      	ldr	r3, [pc, #32]	; (8002aa4 <BSP_LCD_SetFont+0x2c>)
 8002a82:	681a      	ldr	r2, [r3, #0]
 8002a84:	4908      	ldr	r1, [pc, #32]	; (8002aa8 <BSP_LCD_SetFont+0x30>)
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	440b      	add	r3, r1
 8002a90:	3308      	adds	r3, #8
 8002a92:	687a      	ldr	r2, [r7, #4]
 8002a94:	601a      	str	r2, [r3, #0]
}
 8002a96:	bf00      	nop
 8002a98:	370c      	adds	r7, #12
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa0:	4770      	bx	lr
 8002aa2:	bf00      	nop
 8002aa4:	200003c8 	.word	0x200003c8
 8002aa8:	200003cc 	.word	0x200003cc

08002aac <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002ab0:	4b07      	ldr	r3, [pc, #28]	; (8002ad0 <BSP_LCD_GetFont+0x24>)
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	4907      	ldr	r1, [pc, #28]	; (8002ad4 <BSP_LCD_GetFont+0x28>)
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	005b      	lsls	r3, r3, #1
 8002aba:	4413      	add	r3, r2
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	440b      	add	r3, r1
 8002ac0:	3308      	adds	r3, #8
 8002ac2:	681b      	ldr	r3, [r3, #0]
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	200003c8 	.word	0x200003c8
 8002ad4:	200003cc 	.word	0x200003cc

08002ad8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8002ad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002ada:	b085      	sub	sp, #20
 8002adc:	af02      	add	r7, sp, #8
 8002ade:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8002ae0:	4b0f      	ldr	r3, [pc, #60]	; (8002b20 <BSP_LCD_Clear+0x48>)
 8002ae2:	681c      	ldr	r4, [r3, #0]
 8002ae4:	4b0e      	ldr	r3, [pc, #56]	; (8002b20 <BSP_LCD_Clear+0x48>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a0e      	ldr	r2, [pc, #56]	; (8002b24 <BSP_LCD_Clear+0x4c>)
 8002aea:	2134      	movs	r1, #52	; 0x34
 8002aec:	fb01 f303 	mul.w	r3, r1, r3
 8002af0:	4413      	add	r3, r2
 8002af2:	335c      	adds	r3, #92	; 0x5c
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	461d      	mov	r5, r3
 8002af8:	f7ff fef4 	bl	80028e4 <BSP_LCD_GetXSize>
 8002afc:	4606      	mov	r6, r0
 8002afe:	f7ff ff05 	bl	800290c <BSP_LCD_GetYSize>
 8002b02:	4602      	mov	r2, r0
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	9301      	str	r3, [sp, #4]
 8002b08:	2300      	movs	r3, #0
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	4613      	mov	r3, r2
 8002b0e:	4632      	mov	r2, r6
 8002b10:	4629      	mov	r1, r5
 8002b12:	4620      	mov	r0, r4
 8002b14:	f001 f814 	bl	8003b40 <LL_FillBuffer>
}
 8002b18:	bf00      	nop
 8002b1a:	370c      	adds	r7, #12
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b20:	200003c8 	.word	0x200003c8
 8002b24:	20008c30 	.word	0x20008c30

08002b28 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002b28:	b590      	push	{r4, r7, lr}
 8002b2a:	b083      	sub	sp, #12
 8002b2c:	af00      	add	r7, sp, #0
 8002b2e:	4603      	mov	r3, r0
 8002b30:	80fb      	strh	r3, [r7, #6]
 8002b32:	460b      	mov	r3, r1
 8002b34:	80bb      	strh	r3, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b3a:	4b1b      	ldr	r3, [pc, #108]	; (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b3c:	681a      	ldr	r2, [r3, #0]
 8002b3e:	491b      	ldr	r1, [pc, #108]	; (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b40:	4613      	mov	r3, r2
 8002b42:	005b      	lsls	r3, r3, #1
 8002b44:	4413      	add	r3, r2
 8002b46:	009b      	lsls	r3, r3, #2
 8002b48:	440b      	add	r3, r1
 8002b4a:	3308      	adds	r3, #8
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6819      	ldr	r1, [r3, #0]
 8002b50:	78fb      	ldrb	r3, [r7, #3]
 8002b52:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	4c14      	ldr	r4, [pc, #80]	; (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	4413      	add	r3, r2
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4423      	add	r3, r4
 8002b66:	3308      	adds	r3, #8
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b6c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002b70:	4b0d      	ldr	r3, [pc, #52]	; (8002ba8 <BSP_LCD_DisplayChar+0x80>)
 8002b72:	681a      	ldr	r2, [r3, #0]
 8002b74:	4c0d      	ldr	r4, [pc, #52]	; (8002bac <BSP_LCD_DisplayChar+0x84>)
 8002b76:	4613      	mov	r3, r2
 8002b78:	005b      	lsls	r3, r3, #1
 8002b7a:	4413      	add	r3, r2
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	4423      	add	r3, r4
 8002b80:	3308      	adds	r3, #8
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	889b      	ldrh	r3, [r3, #4]
 8002b86:	3307      	adds	r3, #7
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	da00      	bge.n	8002b8e <BSP_LCD_DisplayChar+0x66>
 8002b8c:	3307      	adds	r3, #7
 8002b8e:	10db      	asrs	r3, r3, #3
 8002b90:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002b94:	18ca      	adds	r2, r1, r3
 8002b96:	88b9      	ldrh	r1, [r7, #4]
 8002b98:	88fb      	ldrh	r3, [r7, #6]
 8002b9a:	4618      	mov	r0, r3
 8002b9c:	f000 fe58 	bl	8003850 <DrawChar>
}
 8002ba0:	bf00      	nop
 8002ba2:	370c      	adds	r7, #12
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd90      	pop	{r4, r7, pc}
 8002ba8:	200003c8 	.word	0x200003c8
 8002bac:	200003cc 	.word	0x200003cc

08002bb0 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002bb0:	b5b0      	push	{r4, r5, r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	60ba      	str	r2, [r7, #8]
 8002bb8:	461a      	mov	r2, r3
 8002bba:	4603      	mov	r3, r0
 8002bbc:	81fb      	strh	r3, [r7, #14]
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	81bb      	strh	r3, [r7, #12]
 8002bc2:	4613      	mov	r3, r2
 8002bc4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	83fb      	strh	r3, [r7, #30]
 8002bca:	2300      	movs	r3, #0
 8002bcc:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002bd6:	68bb      	ldr	r3, [r7, #8]
 8002bd8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002bda:	e002      	b.n	8002be2 <BSP_LCD_DisplayStringAt+0x32>
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	3301      	adds	r3, #1
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	697b      	ldr	r3, [r7, #20]
 8002be4:	1c5a      	adds	r2, r3, #1
 8002be6:	617a      	str	r2, [r7, #20]
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f6      	bne.n	8002bdc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002bee:	f7ff fe79 	bl	80028e4 <BSP_LCD_GetXSize>
 8002bf2:	4b4f      	ldr	r3, [pc, #316]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002bf4:	681a      	ldr	r2, [r3, #0]
 8002bf6:	494f      	ldr	r1, [pc, #316]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002bf8:	4613      	mov	r3, r2
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	4413      	add	r3, r2
 8002bfe:	009b      	lsls	r3, r3, #2
 8002c00:	440b      	add	r3, r1
 8002c02:	3308      	adds	r3, #8
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	889b      	ldrh	r3, [r3, #4]
 8002c08:	fbb0 f3f3 	udiv	r3, r0, r3
 8002c0c:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d01c      	beq.n	8002c4e <BSP_LCD_DisplayStringAt+0x9e>
 8002c14:	2b03      	cmp	r3, #3
 8002c16:	d017      	beq.n	8002c48 <BSP_LCD_DisplayStringAt+0x98>
 8002c18:	2b01      	cmp	r3, #1
 8002c1a:	d12e      	bne.n	8002c7a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002c1c:	693a      	ldr	r2, [r7, #16]
 8002c1e:	69bb      	ldr	r3, [r7, #24]
 8002c20:	1ad1      	subs	r1, r2, r3
 8002c22:	4b43      	ldr	r3, [pc, #268]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002c24:	681a      	ldr	r2, [r3, #0]
 8002c26:	4843      	ldr	r0, [pc, #268]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002c28:	4613      	mov	r3, r2
 8002c2a:	005b      	lsls	r3, r3, #1
 8002c2c:	4413      	add	r3, r2
 8002c2e:	009b      	lsls	r3, r3, #2
 8002c30:	4403      	add	r3, r0
 8002c32:	3308      	adds	r3, #8
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	889b      	ldrh	r3, [r3, #4]
 8002c38:	fb03 f301 	mul.w	r3, r3, r1
 8002c3c:	085b      	lsrs	r3, r3, #1
 8002c3e:	b29a      	uxth	r2, r3
 8002c40:	89fb      	ldrh	r3, [r7, #14]
 8002c42:	4413      	add	r3, r2
 8002c44:	83fb      	strh	r3, [r7, #30]
      break;
 8002c46:	e01b      	b.n	8002c80 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	83fb      	strh	r3, [r7, #30]
      break;
 8002c4c:	e018      	b.n	8002c80 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	69bb      	ldr	r3, [r7, #24]
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	b299      	uxth	r1, r3
 8002c56:	4b36      	ldr	r3, [pc, #216]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4836      	ldr	r0, [pc, #216]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4403      	add	r3, r0
 8002c66:	3308      	adds	r3, #8
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	889b      	ldrh	r3, [r3, #4]
 8002c6c:	fb11 f303 	smulbb	r3, r1, r3
 8002c70:	b29a      	uxth	r2, r3
 8002c72:	89fb      	ldrh	r3, [r7, #14]
 8002c74:	1ad3      	subs	r3, r2, r3
 8002c76:	83fb      	strh	r3, [r7, #30]
      break;
 8002c78:	e002      	b.n	8002c80 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002c7a:	89fb      	ldrh	r3, [r7, #14]
 8002c7c:	83fb      	strh	r3, [r7, #30]
      break;
 8002c7e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002c80:	8bfb      	ldrh	r3, [r7, #30]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d003      	beq.n	8002c8e <BSP_LCD_DisplayStringAt+0xde>
 8002c86:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	da1d      	bge.n	8002cca <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002c92:	e01a      	b.n	8002cca <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	781a      	ldrb	r2, [r3, #0]
 8002c98:	89b9      	ldrh	r1, [r7, #12]
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff ff43 	bl	8002b28 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002ca2:	4b23      	ldr	r3, [pc, #140]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4923      	ldr	r1, [pc, #140]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002ca8:	4613      	mov	r3, r2
 8002caa:	005b      	lsls	r3, r3, #1
 8002cac:	4413      	add	r3, r2
 8002cae:	009b      	lsls	r3, r3, #2
 8002cb0:	440b      	add	r3, r1
 8002cb2:	3308      	adds	r3, #8
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	889a      	ldrh	r2, [r3, #4]
 8002cb8:	8bfb      	ldrh	r3, [r7, #30]
 8002cba:	4413      	add	r3, r2
 8002cbc:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	60bb      	str	r3, [r7, #8]
    i++;
 8002cc4:	8bbb      	ldrh	r3, [r7, #28]
 8002cc6:	3301      	adds	r3, #1
 8002cc8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002cca:	68bb      	ldr	r3, [r7, #8]
 8002ccc:	781b      	ldrb	r3, [r3, #0]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	bf14      	ite	ne
 8002cd2:	2301      	movne	r3, #1
 8002cd4:	2300      	moveq	r3, #0
 8002cd6:	b2dc      	uxtb	r4, r3
 8002cd8:	f7ff fe04 	bl	80028e4 <BSP_LCD_GetXSize>
 8002cdc:	4605      	mov	r5, r0
 8002cde:	8bb9      	ldrh	r1, [r7, #28]
 8002ce0:	4b13      	ldr	r3, [pc, #76]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	4813      	ldr	r0, [pc, #76]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002ce6:	4613      	mov	r3, r2
 8002ce8:	005b      	lsls	r3, r3, #1
 8002cea:	4413      	add	r3, r2
 8002cec:	009b      	lsls	r3, r3, #2
 8002cee:	4403      	add	r3, r0
 8002cf0:	3308      	adds	r3, #8
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	889b      	ldrh	r3, [r3, #4]
 8002cf6:	fb03 f301 	mul.w	r3, r3, r1
 8002cfa:	1aeb      	subs	r3, r5, r3
 8002cfc:	b299      	uxth	r1, r3
 8002cfe:	4b0c      	ldr	r3, [pc, #48]	; (8002d30 <BSP_LCD_DisplayStringAt+0x180>)
 8002d00:	681a      	ldr	r2, [r3, #0]
 8002d02:	480c      	ldr	r0, [pc, #48]	; (8002d34 <BSP_LCD_DisplayStringAt+0x184>)
 8002d04:	4613      	mov	r3, r2
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	4413      	add	r3, r2
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	4403      	add	r3, r0
 8002d0e:	3308      	adds	r3, #8
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	889b      	ldrh	r3, [r3, #4]
 8002d14:	4299      	cmp	r1, r3
 8002d16:	bf2c      	ite	cs
 8002d18:	2301      	movcs	r3, #1
 8002d1a:	2300      	movcc	r3, #0
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	4023      	ands	r3, r4
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d1b6      	bne.n	8002c94 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002d26:	bf00      	nop
 8002d28:	3720      	adds	r7, #32
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bdb0      	pop	{r4, r5, r7, pc}
 8002d2e:	bf00      	nop
 8002d30:	200003c8 	.word	0x200003c8
 8002d34:	200003cc 	.word	0x200003cc

08002d38 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002d38:	b580      	push	{r7, lr}
 8002d3a:	b082      	sub	sp, #8
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	4603      	mov	r3, r0
 8002d40:	6039      	str	r1, [r7, #0]
 8002d42:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002d44:	f7ff feb2 	bl	8002aac <BSP_LCD_GetFont>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	88db      	ldrh	r3, [r3, #6]
 8002d4c:	88fa      	ldrh	r2, [r7, #6]
 8002d4e:	fb12 f303 	smulbb	r3, r2, r3
 8002d52:	b299      	uxth	r1, r3
 8002d54:	2303      	movs	r3, #3
 8002d56:	683a      	ldr	r2, [r7, #0]
 8002d58:	2000      	movs	r0, #0
 8002d5a:	f7ff ff29 	bl	8002bb0 <BSP_LCD_DisplayStringAt>
}
 8002d5e:	bf00      	nop
 8002d60:	3708      	adds	r7, #8
 8002d62:	46bd      	mov	sp, r7
 8002d64:	bd80      	pop	{r7, pc}
	...

08002d68 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002d68:	b5b0      	push	{r4, r5, r7, lr}
 8002d6a:	b086      	sub	sp, #24
 8002d6c:	af02      	add	r7, sp, #8
 8002d6e:	4603      	mov	r3, r0
 8002d70:	80fb      	strh	r3, [r7, #6]
 8002d72:	460b      	mov	r3, r1
 8002d74:	80bb      	strh	r3, [r7, #4]
 8002d76:	4613      	mov	r3, r2
 8002d78:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002d7e:	4b26      	ldr	r3, [pc, #152]	; (8002e18 <BSP_LCD_DrawHLine+0xb0>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4a26      	ldr	r2, [pc, #152]	; (8002e1c <BSP_LCD_DrawHLine+0xb4>)
 8002d84:	2134      	movs	r1, #52	; 0x34
 8002d86:	fb01 f303 	mul.w	r3, r1, r3
 8002d8a:	4413      	add	r3, r2
 8002d8c:	3348      	adds	r3, #72	; 0x48
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d114      	bne.n	8002dbe <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002d94:	4b20      	ldr	r3, [pc, #128]	; (8002e18 <BSP_LCD_DrawHLine+0xb0>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a20      	ldr	r2, [pc, #128]	; (8002e1c <BSP_LCD_DrawHLine+0xb4>)
 8002d9a:	2134      	movs	r1, #52	; 0x34
 8002d9c:	fb01 f303 	mul.w	r3, r1, r3
 8002da0:	4413      	add	r3, r2
 8002da2:	335c      	adds	r3, #92	; 0x5c
 8002da4:	681c      	ldr	r4, [r3, #0]
 8002da6:	f7ff fd9d 	bl	80028e4 <BSP_LCD_GetXSize>
 8002daa:	4602      	mov	r2, r0
 8002dac:	88bb      	ldrh	r3, [r7, #4]
 8002dae:	fb03 f202 	mul.w	r2, r3, r2
 8002db2:	88fb      	ldrh	r3, [r7, #6]
 8002db4:	4413      	add	r3, r2
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	4423      	add	r3, r4
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	e013      	b.n	8002de6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002dbe:	4b16      	ldr	r3, [pc, #88]	; (8002e18 <BSP_LCD_DrawHLine+0xb0>)
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	4a16      	ldr	r2, [pc, #88]	; (8002e1c <BSP_LCD_DrawHLine+0xb4>)
 8002dc4:	2134      	movs	r1, #52	; 0x34
 8002dc6:	fb01 f303 	mul.w	r3, r1, r3
 8002dca:	4413      	add	r3, r2
 8002dcc:	335c      	adds	r3, #92	; 0x5c
 8002dce:	681c      	ldr	r4, [r3, #0]
 8002dd0:	f7ff fd88 	bl	80028e4 <BSP_LCD_GetXSize>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	88bb      	ldrh	r3, [r7, #4]
 8002dd8:	fb03 f202 	mul.w	r2, r3, r2
 8002ddc:	88fb      	ldrh	r3, [r7, #6]
 8002dde:	4413      	add	r3, r2
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	4423      	add	r3, r4
 8002de4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002de6:	4b0c      	ldr	r3, [pc, #48]	; (8002e18 <BSP_LCD_DrawHLine+0xb0>)
 8002de8:	6818      	ldr	r0, [r3, #0]
 8002dea:	68fc      	ldr	r4, [r7, #12]
 8002dec:	887d      	ldrh	r5, [r7, #2]
 8002dee:	4b0a      	ldr	r3, [pc, #40]	; (8002e18 <BSP_LCD_DrawHLine+0xb0>)
 8002df0:	681a      	ldr	r2, [r3, #0]
 8002df2:	490b      	ldr	r1, [pc, #44]	; (8002e20 <BSP_LCD_DrawHLine+0xb8>)
 8002df4:	4613      	mov	r3, r2
 8002df6:	005b      	lsls	r3, r3, #1
 8002df8:	4413      	add	r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	9301      	str	r3, [sp, #4]
 8002e02:	2300      	movs	r3, #0
 8002e04:	9300      	str	r3, [sp, #0]
 8002e06:	2301      	movs	r3, #1
 8002e08:	462a      	mov	r2, r5
 8002e0a:	4621      	mov	r1, r4
 8002e0c:	f000 fe98 	bl	8003b40 <LL_FillBuffer>
}
 8002e10:	bf00      	nop
 8002e12:	3710      	adds	r7, #16
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bdb0      	pop	{r4, r5, r7, pc}
 8002e18:	200003c8 	.word	0x200003c8
 8002e1c:	20008c30 	.word	0x20008c30
 8002e20:	200003cc 	.word	0x200003cc

08002e24 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b08b      	sub	sp, #44	; 0x2c
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	4604      	mov	r4, r0
 8002e2c:	4608      	mov	r0, r1
 8002e2e:	4611      	mov	r1, r2
 8002e30:	461a      	mov	r2, r3
 8002e32:	4623      	mov	r3, r4
 8002e34:	80fb      	strh	r3, [r7, #6]
 8002e36:	4603      	mov	r3, r0
 8002e38:	80bb      	strh	r3, [r7, #4]
 8002e3a:	460b      	mov	r3, r1
 8002e3c:	807b      	strh	r3, [r7, #2]
 8002e3e:	4613      	mov	r3, r2
 8002e40:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002e42:	2300      	movs	r3, #0
 8002e44:	823b      	strh	r3, [r7, #16]
 8002e46:	2300      	movs	r3, #0
 8002e48:	81fb      	strh	r3, [r7, #14]
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002e4e:	2300      	movs	r3, #0
 8002e50:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002e52:	2300      	movs	r3, #0
 8002e54:	847b      	strh	r3, [r7, #34]	; 0x22
 8002e56:	2300      	movs	r3, #0
 8002e58:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	83fb      	strh	r3, [r7, #30]
 8002e5e:	2300      	movs	r3, #0
 8002e60:	83bb      	strh	r3, [r7, #28]
 8002e62:	2300      	movs	r3, #0
 8002e64:	837b      	strh	r3, [r7, #26]
 8002e66:	2300      	movs	r3, #0
 8002e68:	833b      	strh	r3, [r7, #24]
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	82fb      	strh	r3, [r7, #22]
 8002e6e:	2300      	movs	r3, #0
 8002e70:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002e72:	2300      	movs	r3, #0
 8002e74:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002e76:	887a      	ldrh	r2, [r7, #2]
 8002e78:	88fb      	ldrh	r3, [r7, #6]
 8002e7a:	1ad3      	subs	r3, r2, r3
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	bfb8      	it	lt
 8002e80:	425b      	neglt	r3, r3
 8002e82:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002e84:	883a      	ldrh	r2, [r7, #0]
 8002e86:	88bb      	ldrh	r3, [r7, #4]
 8002e88:	1ad3      	subs	r3, r2, r3
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	bfb8      	it	lt
 8002e8e:	425b      	neglt	r3, r3
 8002e90:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002e92:	88fb      	ldrh	r3, [r7, #6]
 8002e94:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002e96:	88bb      	ldrh	r3, [r7, #4]
 8002e98:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002e9a:	887a      	ldrh	r2, [r7, #2]
 8002e9c:	88fb      	ldrh	r3, [r7, #6]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d304      	bcc.n	8002eac <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	843b      	strh	r3, [r7, #32]
 8002eaa:	e005      	b.n	8002eb8 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002eac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb0:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002eb2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002eb6:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002eb8:	883a      	ldrh	r2, [r7, #0]
 8002eba:	88bb      	ldrh	r3, [r7, #4]
 8002ebc:	429a      	cmp	r2, r3
 8002ebe:	d304      	bcc.n	8002eca <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002ec0:	2301      	movs	r3, #1
 8002ec2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	83bb      	strh	r3, [r7, #28]
 8002ec8:	e005      	b.n	8002ed6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002eca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ece:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002ed0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002ed4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002ed6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002eda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	db11      	blt.n	8002f06 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002eea:	8a3b      	ldrh	r3, [r7, #16]
 8002eec:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002eee:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	da00      	bge.n	8002ef8 <BSP_LCD_DrawLine+0xd4>
 8002ef6:	3301      	adds	r3, #1
 8002ef8:	105b      	asrs	r3, r3, #1
 8002efa:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002efc:	89fb      	ldrh	r3, [r7, #14]
 8002efe:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002f00:	8a3b      	ldrh	r3, [r7, #16]
 8002f02:	82bb      	strh	r3, [r7, #20]
 8002f04:	e010      	b.n	8002f28 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002f06:	2300      	movs	r3, #0
 8002f08:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002f0e:	89fb      	ldrh	r3, [r7, #14]
 8002f10:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002f12:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	da00      	bge.n	8002f1c <BSP_LCD_DrawLine+0xf8>
 8002f1a:	3301      	adds	r3, #1
 8002f1c:	105b      	asrs	r3, r3, #1
 8002f1e:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002f20:	8a3b      	ldrh	r3, [r7, #16]
 8002f22:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002f24:	89fb      	ldrh	r3, [r7, #14]
 8002f26:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002f28:	2300      	movs	r3, #0
 8002f2a:	827b      	strh	r3, [r7, #18]
 8002f2c:	e038      	b.n	8002fa0 <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002f2e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002f30:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8002f32:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <BSP_LCD_DrawLine+0x190>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4920      	ldr	r1, [pc, #128]	; (8002fb8 <BSP_LCD_DrawLine+0x194>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4621      	mov	r1, r4
 8002f48:	f000 f928 	bl	800319c <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002f4c:	8b3a      	ldrh	r2, [r7, #24]
 8002f4e:	8afb      	ldrh	r3, [r7, #22]
 8002f50:	4413      	add	r3, r2
 8002f52:	b29b      	uxth	r3, r3
 8002f54:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002f56:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002f5a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	db0e      	blt.n	8002f80 <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002f62:	8b3a      	ldrh	r2, [r7, #24]
 8002f64:	8b7b      	ldrh	r3, [r7, #26]
 8002f66:	1ad3      	subs	r3, r2, r3
 8002f68:	b29b      	uxth	r3, r3
 8002f6a:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002f6c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f6e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002f70:	4413      	add	r3, r2
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002f76:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f78:	8bfb      	ldrh	r3, [r7, #30]
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002f80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f82:	8c3b      	ldrh	r3, [r7, #32]
 8002f84:	4413      	add	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002f8a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002f8c:	8bbb      	ldrh	r3, [r7, #28]
 8002f8e:	4413      	add	r3, r2
 8002f90:	b29b      	uxth	r3, r3
 8002f92:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002f94:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002f98:	b29b      	uxth	r3, r3
 8002f9a:	3301      	adds	r3, #1
 8002f9c:	b29b      	uxth	r3, r3
 8002f9e:	827b      	strh	r3, [r7, #18]
 8002fa0:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002fa4:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	ddc0      	ble.n	8002f2e <BSP_LCD_DrawLine+0x10a>
  }
}
 8002fac:	bf00      	nop
 8002fae:	372c      	adds	r7, #44	; 0x2c
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd90      	pop	{r4, r7, pc}
 8002fb4:	200003c8 	.word	0x200003c8
 8002fb8:	200003cc 	.word	0x200003cc

08002fbc <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002fbc:	b590      	push	{r4, r7, lr}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	4603      	mov	r3, r0
 8002fc4:	80fb      	strh	r3, [r7, #6]
 8002fc6:	460b      	mov	r3, r1
 8002fc8:	80bb      	strh	r3, [r7, #4]
 8002fca:	4613      	mov	r3, r2
 8002fcc:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002fce:	887b      	ldrh	r3, [r7, #2]
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	f1c3 0303 	rsb	r3, r3, #3
 8002fd6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002fe0:	e0cf      	b.n	8003182 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	b29a      	uxth	r2, r3
 8002fe6:	88fb      	ldrh	r3, [r7, #6]
 8002fe8:	4413      	add	r3, r2
 8002fea:	b298      	uxth	r0, r3
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	b29b      	uxth	r3, r3
 8002ff0:	88ba      	ldrh	r2, [r7, #4]
 8002ff2:	1ad3      	subs	r3, r2, r3
 8002ff4:	b29c      	uxth	r4, r3
 8002ff6:	4b67      	ldr	r3, [pc, #412]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	4967      	ldr	r1, [pc, #412]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 8002ffc:	4613      	mov	r3, r2
 8002ffe:	005b      	lsls	r3, r3, #1
 8003000:	4413      	add	r3, r2
 8003002:	009b      	lsls	r3, r3, #2
 8003004:	440b      	add	r3, r1
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	461a      	mov	r2, r3
 800300a:	4621      	mov	r1, r4
 800300c:	f000 f8c6 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003010:	693b      	ldr	r3, [r7, #16]
 8003012:	b29b      	uxth	r3, r3
 8003014:	88fa      	ldrh	r2, [r7, #6]
 8003016:	1ad3      	subs	r3, r2, r3
 8003018:	b298      	uxth	r0, r3
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	b29b      	uxth	r3, r3
 800301e:	88ba      	ldrh	r2, [r7, #4]
 8003020:	1ad3      	subs	r3, r2, r3
 8003022:	b29c      	uxth	r4, r3
 8003024:	4b5b      	ldr	r3, [pc, #364]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 8003026:	681a      	ldr	r2, [r3, #0]
 8003028:	495b      	ldr	r1, [pc, #364]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 800302a:	4613      	mov	r3, r2
 800302c:	005b      	lsls	r3, r3, #1
 800302e:	4413      	add	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	440b      	add	r3, r1
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	461a      	mov	r2, r3
 8003038:	4621      	mov	r1, r4
 800303a:	f000 f8af 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	b29a      	uxth	r2, r3
 8003042:	88fb      	ldrh	r3, [r7, #6]
 8003044:	4413      	add	r3, r2
 8003046:	b298      	uxth	r0, r3
 8003048:	693b      	ldr	r3, [r7, #16]
 800304a:	b29b      	uxth	r3, r3
 800304c:	88ba      	ldrh	r2, [r7, #4]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	b29c      	uxth	r4, r3
 8003052:	4b50      	ldr	r3, [pc, #320]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 8003054:	681a      	ldr	r2, [r3, #0]
 8003056:	4950      	ldr	r1, [pc, #320]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 8003058:	4613      	mov	r3, r2
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	4413      	add	r3, r2
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	440b      	add	r3, r1
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	461a      	mov	r2, r3
 8003066:	4621      	mov	r1, r4
 8003068:	f000 f898 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	b29b      	uxth	r3, r3
 8003070:	88fa      	ldrh	r2, [r7, #6]
 8003072:	1ad3      	subs	r3, r2, r3
 8003074:	b298      	uxth	r0, r3
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	b29b      	uxth	r3, r3
 800307a:	88ba      	ldrh	r2, [r7, #4]
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	b29c      	uxth	r4, r3
 8003080:	4b44      	ldr	r3, [pc, #272]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	4944      	ldr	r1, [pc, #272]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 8003086:	4613      	mov	r3, r2
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4413      	add	r3, r2
 800308c:	009b      	lsls	r3, r3, #2
 800308e:	440b      	add	r3, r1
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	461a      	mov	r2, r3
 8003094:	4621      	mov	r1, r4
 8003096:	f000 f881 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	b29a      	uxth	r2, r3
 800309e:	88fb      	ldrh	r3, [r7, #6]
 80030a0:	4413      	add	r3, r2
 80030a2:	b298      	uxth	r0, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	88bb      	ldrh	r3, [r7, #4]
 80030aa:	4413      	add	r3, r2
 80030ac:	b29c      	uxth	r4, r3
 80030ae:	4b39      	ldr	r3, [pc, #228]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	4939      	ldr	r1, [pc, #228]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 80030b4:	4613      	mov	r3, r2
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	4413      	add	r3, r2
 80030ba:	009b      	lsls	r3, r3, #2
 80030bc:	440b      	add	r3, r1
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	461a      	mov	r2, r3
 80030c2:	4621      	mov	r1, r4
 80030c4:	f000 f86a 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 80030c8:	693b      	ldr	r3, [r7, #16]
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	88fa      	ldrh	r2, [r7, #6]
 80030ce:	1ad3      	subs	r3, r2, r3
 80030d0:	b298      	uxth	r0, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	b29a      	uxth	r2, r3
 80030d6:	88bb      	ldrh	r3, [r7, #4]
 80030d8:	4413      	add	r3, r2
 80030da:	b29c      	uxth	r4, r3
 80030dc:	4b2d      	ldr	r3, [pc, #180]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	492d      	ldr	r1, [pc, #180]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 80030e2:	4613      	mov	r3, r2
 80030e4:	005b      	lsls	r3, r3, #1
 80030e6:	4413      	add	r3, r2
 80030e8:	009b      	lsls	r3, r3, #2
 80030ea:	440b      	add	r3, r1
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	461a      	mov	r2, r3
 80030f0:	4621      	mov	r1, r4
 80030f2:	f000 f853 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	b29a      	uxth	r2, r3
 80030fa:	88fb      	ldrh	r3, [r7, #6]
 80030fc:	4413      	add	r3, r2
 80030fe:	b298      	uxth	r0, r3
 8003100:	693b      	ldr	r3, [r7, #16]
 8003102:	b29a      	uxth	r2, r3
 8003104:	88bb      	ldrh	r3, [r7, #4]
 8003106:	4413      	add	r3, r2
 8003108:	b29c      	uxth	r4, r3
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	4922      	ldr	r1, [pc, #136]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 8003110:	4613      	mov	r3, r2
 8003112:	005b      	lsls	r3, r3, #1
 8003114:	4413      	add	r3, r2
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	440b      	add	r3, r1
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	461a      	mov	r2, r3
 800311e:	4621      	mov	r1, r4
 8003120:	f000 f83c 	bl	800319c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	b29b      	uxth	r3, r3
 8003128:	88fa      	ldrh	r2, [r7, #6]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	b298      	uxth	r0, r3
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	b29a      	uxth	r2, r3
 8003132:	88bb      	ldrh	r3, [r7, #4]
 8003134:	4413      	add	r3, r2
 8003136:	b29c      	uxth	r4, r3
 8003138:	4b16      	ldr	r3, [pc, #88]	; (8003194 <BSP_LCD_DrawCircle+0x1d8>)
 800313a:	681a      	ldr	r2, [r3, #0]
 800313c:	4916      	ldr	r1, [pc, #88]	; (8003198 <BSP_LCD_DrawCircle+0x1dc>)
 800313e:	4613      	mov	r3, r2
 8003140:	005b      	lsls	r3, r3, #1
 8003142:	4413      	add	r3, r2
 8003144:	009b      	lsls	r3, r3, #2
 8003146:	440b      	add	r3, r1
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	461a      	mov	r2, r3
 800314c:	4621      	mov	r1, r4
 800314e:	f000 f825 	bl	800319c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	2b00      	cmp	r3, #0
 8003156:	da06      	bge.n	8003166 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	009a      	lsls	r2, r3, #2
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	4413      	add	r3, r2
 8003160:	3306      	adds	r3, #6
 8003162:	617b      	str	r3, [r7, #20]
 8003164:	e00a      	b.n	800317c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003166:	693a      	ldr	r2, [r7, #16]
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	1ad3      	subs	r3, r2, r3
 800316c:	009a      	lsls	r2, r3, #2
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	4413      	add	r3, r2
 8003172:	330a      	adds	r3, #10
 8003174:	617b      	str	r3, [r7, #20]
      current_y--;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	3b01      	subs	r3, #1
 800317a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800317c:	693b      	ldr	r3, [r7, #16]
 800317e:	3301      	adds	r3, #1
 8003180:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003182:	693a      	ldr	r2, [r7, #16]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	429a      	cmp	r2, r3
 8003188:	f67f af2b 	bls.w	8002fe2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	bd90      	pop	{r4, r7, pc}
 8003194:	200003c8 	.word	0x200003c8
 8003198:	200003cc 	.word	0x200003cc

0800319c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800319c:	b5b0      	push	{r4, r5, r7, lr}
 800319e:	b082      	sub	sp, #8
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	4603      	mov	r3, r0
 80031a4:	603a      	str	r2, [r7, #0]
 80031a6:	80fb      	strh	r3, [r7, #6]
 80031a8:	460b      	mov	r3, r1
 80031aa:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <BSP_LCD_DrawPixel+0x88>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	4a1d      	ldr	r2, [pc, #116]	; (8003228 <BSP_LCD_DrawPixel+0x8c>)
 80031b2:	2134      	movs	r1, #52	; 0x34
 80031b4:	fb01 f303 	mul.w	r3, r1, r3
 80031b8:	4413      	add	r3, r2
 80031ba:	3348      	adds	r3, #72	; 0x48
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	2b02      	cmp	r3, #2
 80031c0:	d116      	bne.n	80031f0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80031c2:	4b18      	ldr	r3, [pc, #96]	; (8003224 <BSP_LCD_DrawPixel+0x88>)
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	4a18      	ldr	r2, [pc, #96]	; (8003228 <BSP_LCD_DrawPixel+0x8c>)
 80031c8:	2134      	movs	r1, #52	; 0x34
 80031ca:	fb01 f303 	mul.w	r3, r1, r3
 80031ce:	4413      	add	r3, r2
 80031d0:	335c      	adds	r3, #92	; 0x5c
 80031d2:	681c      	ldr	r4, [r3, #0]
 80031d4:	88bd      	ldrh	r5, [r7, #4]
 80031d6:	f7ff fb85 	bl	80028e4 <BSP_LCD_GetXSize>
 80031da:	4603      	mov	r3, r0
 80031dc:	fb03 f205 	mul.w	r2, r3, r5
 80031e0:	88fb      	ldrh	r3, [r7, #6]
 80031e2:	4413      	add	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4423      	add	r3, r4
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b292      	uxth	r2, r2
 80031ec:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80031ee:	e015      	b.n	800321c <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80031f0:	4b0c      	ldr	r3, [pc, #48]	; (8003224 <BSP_LCD_DrawPixel+0x88>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0c      	ldr	r2, [pc, #48]	; (8003228 <BSP_LCD_DrawPixel+0x8c>)
 80031f6:	2134      	movs	r1, #52	; 0x34
 80031f8:	fb01 f303 	mul.w	r3, r1, r3
 80031fc:	4413      	add	r3, r2
 80031fe:	335c      	adds	r3, #92	; 0x5c
 8003200:	681c      	ldr	r4, [r3, #0]
 8003202:	88bd      	ldrh	r5, [r7, #4]
 8003204:	f7ff fb6e 	bl	80028e4 <BSP_LCD_GetXSize>
 8003208:	4603      	mov	r3, r0
 800320a:	fb03 f205 	mul.w	r2, r3, r5
 800320e:	88fb      	ldrh	r3, [r7, #6]
 8003210:	4413      	add	r3, r2
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	4423      	add	r3, r4
 8003216:	461a      	mov	r2, r3
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	6013      	str	r3, [r2, #0]
}
 800321c:	bf00      	nop
 800321e:	3708      	adds	r7, #8
 8003220:	46bd      	mov	sp, r7
 8003222:	bdb0      	pop	{r4, r5, r7, pc}
 8003224:	200003c8 	.word	0x200003c8
 8003228:	20008c30 	.word	0x20008c30

0800322c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800322c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003230:	b086      	sub	sp, #24
 8003232:	af02      	add	r7, sp, #8
 8003234:	4604      	mov	r4, r0
 8003236:	4608      	mov	r0, r1
 8003238:	4611      	mov	r1, r2
 800323a:	461a      	mov	r2, r3
 800323c:	4623      	mov	r3, r4
 800323e:	80fb      	strh	r3, [r7, #6]
 8003240:	4603      	mov	r3, r0
 8003242:	80bb      	strh	r3, [r7, #4]
 8003244:	460b      	mov	r3, r1
 8003246:	807b      	strh	r3, [r7, #2]
 8003248:	4613      	mov	r3, r2
 800324a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003250:	4b30      	ldr	r3, [pc, #192]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	4930      	ldr	r1, [pc, #192]	; (8003318 <BSP_LCD_FillRect+0xec>)
 8003256:	4613      	mov	r3, r2
 8003258:	005b      	lsls	r3, r3, #1
 800325a:	4413      	add	r3, r2
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	440b      	add	r3, r1
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fbd6 	bl	8002a14 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003268:	4b2a      	ldr	r3, [pc, #168]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a2b      	ldr	r2, [pc, #172]	; (800331c <BSP_LCD_FillRect+0xf0>)
 800326e:	2134      	movs	r1, #52	; 0x34
 8003270:	fb01 f303 	mul.w	r3, r1, r3
 8003274:	4413      	add	r3, r2
 8003276:	3348      	adds	r3, #72	; 0x48
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	2b02      	cmp	r3, #2
 800327c:	d114      	bne.n	80032a8 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800327e:	4b25      	ldr	r3, [pc, #148]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4a26      	ldr	r2, [pc, #152]	; (800331c <BSP_LCD_FillRect+0xf0>)
 8003284:	2134      	movs	r1, #52	; 0x34
 8003286:	fb01 f303 	mul.w	r3, r1, r3
 800328a:	4413      	add	r3, r2
 800328c:	335c      	adds	r3, #92	; 0x5c
 800328e:	681c      	ldr	r4, [r3, #0]
 8003290:	f7ff fb28 	bl	80028e4 <BSP_LCD_GetXSize>
 8003294:	4602      	mov	r2, r0
 8003296:	88bb      	ldrh	r3, [r7, #4]
 8003298:	fb03 f202 	mul.w	r2, r3, r2
 800329c:	88fb      	ldrh	r3, [r7, #6]
 800329e:	4413      	add	r3, r2
 80032a0:	005b      	lsls	r3, r3, #1
 80032a2:	4423      	add	r3, r4
 80032a4:	60fb      	str	r3, [r7, #12]
 80032a6:	e013      	b.n	80032d0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a1b      	ldr	r2, [pc, #108]	; (800331c <BSP_LCD_FillRect+0xf0>)
 80032ae:	2134      	movs	r1, #52	; 0x34
 80032b0:	fb01 f303 	mul.w	r3, r1, r3
 80032b4:	4413      	add	r3, r2
 80032b6:	335c      	adds	r3, #92	; 0x5c
 80032b8:	681c      	ldr	r4, [r3, #0]
 80032ba:	f7ff fb13 	bl	80028e4 <BSP_LCD_GetXSize>
 80032be:	4602      	mov	r2, r0
 80032c0:	88bb      	ldrh	r3, [r7, #4]
 80032c2:	fb03 f202 	mul.w	r2, r3, r2
 80032c6:	88fb      	ldrh	r3, [r7, #6]
 80032c8:	4413      	add	r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	4423      	add	r3, r4
 80032ce:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80032d0:	4b10      	ldr	r3, [pc, #64]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 80032d2:	681c      	ldr	r4, [r3, #0]
 80032d4:	68fd      	ldr	r5, [r7, #12]
 80032d6:	887e      	ldrh	r6, [r7, #2]
 80032d8:	f8b7 8000 	ldrh.w	r8, [r7]
 80032dc:	f7ff fb02 	bl	80028e4 <BSP_LCD_GetXSize>
 80032e0:	4602      	mov	r2, r0
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	1ad1      	subs	r1, r2, r3
 80032e6:	4b0b      	ldr	r3, [pc, #44]	; (8003314 <BSP_LCD_FillRect+0xe8>)
 80032e8:	681a      	ldr	r2, [r3, #0]
 80032ea:	480b      	ldr	r0, [pc, #44]	; (8003318 <BSP_LCD_FillRect+0xec>)
 80032ec:	4613      	mov	r3, r2
 80032ee:	005b      	lsls	r3, r3, #1
 80032f0:	4413      	add	r3, r2
 80032f2:	009b      	lsls	r3, r3, #2
 80032f4:	4403      	add	r3, r0
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	9301      	str	r3, [sp, #4]
 80032fa:	9100      	str	r1, [sp, #0]
 80032fc:	4643      	mov	r3, r8
 80032fe:	4632      	mov	r2, r6
 8003300:	4629      	mov	r1, r5
 8003302:	4620      	mov	r0, r4
 8003304:	f000 fc1c 	bl	8003b40 <LL_FillBuffer>
}
 8003308:	bf00      	nop
 800330a:	3710      	adds	r7, #16
 800330c:	46bd      	mov	sp, r7
 800330e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003312:	bf00      	nop
 8003314:	200003c8 	.word	0x200003c8
 8003318:	200003cc 	.word	0x200003cc
 800331c:	20008c30 	.word	0x20008c30

08003320 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003320:	b580      	push	{r7, lr}
 8003322:	b086      	sub	sp, #24
 8003324:	af00      	add	r7, sp, #0
 8003326:	4603      	mov	r3, r0
 8003328:	80fb      	strh	r3, [r7, #6]
 800332a:	460b      	mov	r3, r1
 800332c:	80bb      	strh	r3, [r7, #4]
 800332e:	4613      	mov	r3, r2
 8003330:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	005b      	lsls	r3, r3, #1
 8003336:	f1c3 0303 	rsb	r3, r3, #3
 800333a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003340:	887b      	ldrh	r3, [r7, #2]
 8003342:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003344:	4b44      	ldr	r3, [pc, #272]	; (8003458 <BSP_LCD_FillCircle+0x138>)
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	4944      	ldr	r1, [pc, #272]	; (800345c <BSP_LCD_FillCircle+0x13c>)
 800334a:	4613      	mov	r3, r2
 800334c:	005b      	lsls	r3, r3, #1
 800334e:	4413      	add	r3, r2
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	440b      	add	r3, r1
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4618      	mov	r0, r3
 8003358:	f7ff fb5c 	bl	8002a14 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800335c:	e061      	b.n	8003422 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d021      	beq.n	80033a8 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	b29b      	uxth	r3, r3
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	b298      	uxth	r0, r3
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	b29a      	uxth	r2, r3
 8003372:	88bb      	ldrh	r3, [r7, #4]
 8003374:	4413      	add	r3, r2
 8003376:	b299      	uxth	r1, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	b29b      	uxth	r3, r3
 800337c:	005b      	lsls	r3, r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	461a      	mov	r2, r3
 8003382:	f7ff fcf1 	bl	8002d68 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	b29b      	uxth	r3, r3
 800338a:	88fa      	ldrh	r2, [r7, #6]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	b298      	uxth	r0, r3
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	b29b      	uxth	r3, r3
 8003394:	88ba      	ldrh	r2, [r7, #4]
 8003396:	1ad3      	subs	r3, r2, r3
 8003398:	b299      	uxth	r1, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	b29b      	uxth	r3, r3
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	b29b      	uxth	r3, r3
 80033a2:	461a      	mov	r2, r3
 80033a4:	f7ff fce0 	bl	8002d68 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d021      	beq.n	80033f2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	b29b      	uxth	r3, r3
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	1ad3      	subs	r3, r2, r3
 80033b6:	b298      	uxth	r0, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	88ba      	ldrh	r2, [r7, #4]
 80033be:	1ad3      	subs	r3, r2, r3
 80033c0:	b299      	uxth	r1, r3
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	005b      	lsls	r3, r3, #1
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	461a      	mov	r2, r3
 80033cc:	f7ff fccc 	bl	8002d68 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	b29b      	uxth	r3, r3
 80033d4:	88fa      	ldrh	r2, [r7, #6]
 80033d6:	1ad3      	subs	r3, r2, r3
 80033d8:	b298      	uxth	r0, r3
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	88bb      	ldrh	r3, [r7, #4]
 80033e0:	4413      	add	r3, r2
 80033e2:	b299      	uxth	r1, r3
 80033e4:	693b      	ldr	r3, [r7, #16]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	005b      	lsls	r3, r3, #1
 80033ea:	b29b      	uxth	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	f7ff fcbb 	bl	8002d68 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	da06      	bge.n	8003406 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	009a      	lsls	r2, r3, #2
 80033fc:	697b      	ldr	r3, [r7, #20]
 80033fe:	4413      	add	r3, r2
 8003400:	3306      	adds	r3, #6
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e00a      	b.n	800341c <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003406:	693a      	ldr	r2, [r7, #16]
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	1ad3      	subs	r3, r2, r3
 800340c:	009a      	lsls	r2, r3, #2
 800340e:	697b      	ldr	r3, [r7, #20]
 8003410:	4413      	add	r3, r2
 8003412:	330a      	adds	r3, #10
 8003414:	617b      	str	r3, [r7, #20]
      current_y--;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	3b01      	subs	r3, #1
 800341a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	3301      	adds	r3, #1
 8003420:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003422:	693a      	ldr	r2, [r7, #16]
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	429a      	cmp	r2, r3
 8003428:	d999      	bls.n	800335e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800342a:	4b0b      	ldr	r3, [pc, #44]	; (8003458 <BSP_LCD_FillCircle+0x138>)
 800342c:	681a      	ldr	r2, [r3, #0]
 800342e:	490b      	ldr	r1, [pc, #44]	; (800345c <BSP_LCD_FillCircle+0x13c>)
 8003430:	4613      	mov	r3, r2
 8003432:	005b      	lsls	r3, r3, #1
 8003434:	4413      	add	r3, r2
 8003436:	009b      	lsls	r3, r3, #2
 8003438:	440b      	add	r3, r1
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	4618      	mov	r0, r3
 800343e:	f7ff fae9 	bl	8002a14 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003442:	887a      	ldrh	r2, [r7, #2]
 8003444:	88b9      	ldrh	r1, [r7, #4]
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	4618      	mov	r0, r3
 800344a:	f7ff fdb7 	bl	8002fbc <BSP_LCD_DrawCircle>
}
 800344e:	bf00      	nop
 8003450:	3718      	adds	r7, #24
 8003452:	46bd      	mov	sp, r7
 8003454:	bd80      	pop	{r7, pc}
 8003456:	bf00      	nop
 8003458:	200003c8 	.word	0x200003c8
 800345c:	200003cc 	.word	0x200003cc

08003460 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003460:	b5b0      	push	{r4, r5, r7, lr}
 8003462:	b08c      	sub	sp, #48	; 0x30
 8003464:	af02      	add	r7, sp, #8
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 800346c:	2300      	movs	r3, #0
 800346e:	833b      	strh	r3, [r7, #24]
 8003470:	2300      	movs	r3, #0
 8003472:	82fb      	strh	r3, [r7, #22]
 8003474:	2300      	movs	r3, #0
 8003476:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003478:	2300      	movs	r3, #0
 800347a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800347c:	2300      	movs	r3, #0
 800347e:	82bb      	strh	r3, [r7, #20]
 8003480:	2300      	movs	r3, #0
 8003482:	827b      	strh	r3, [r7, #18]
 8003484:	2300      	movs	r3, #0
 8003486:	823b      	strh	r3, [r7, #16]
 8003488:	2300      	movs	r3, #0
 800348a:	81fb      	strh	r3, [r7, #14]
 800348c:	2300      	movs	r3, #0
 800348e:	81bb      	strh	r3, [r7, #12]
 8003490:	2300      	movs	r3, #0
 8003492:	817b      	strh	r3, [r7, #10]
 8003494:	2300      	movs	r3, #0
 8003496:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003498:	2300      	movs	r3, #0
 800349a:	843b      	strh	r3, [r7, #32]
 800349c:	2300      	movs	r3, #0
 800349e:	83fb      	strh	r3, [r7, #30]
 80034a0:	2300      	movs	r3, #0
 80034a2:	83bb      	strh	r3, [r7, #28]
 80034a4:	2300      	movs	r3, #0
 80034a6:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80034ae:	83fb      	strh	r3, [r7, #30]
 80034b0:	8bfb      	ldrh	r3, [r7, #30]
 80034b2:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034ba:	837b      	strh	r3, [r7, #26]
 80034bc:	8b7b      	ldrh	r3, [r7, #26]
 80034be:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80034c0:	2301      	movs	r3, #1
 80034c2:	847b      	strh	r3, [r7, #34]	; 0x22
 80034c4:	e02f      	b.n	8003526 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80034c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	4413      	add	r3, r2
 80034d0:	881b      	ldrh	r3, [r3, #0]
 80034d2:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80034d4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034d8:	8c3b      	ldrh	r3, [r7, #32]
 80034da:	429a      	cmp	r2, r3
 80034dc:	da01      	bge.n	80034e2 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80034de:	89bb      	ldrh	r3, [r7, #12]
 80034e0:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80034e2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80034e6:	8bfb      	ldrh	r3, [r7, #30]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	dd01      	ble.n	80034f0 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80034ec:	89bb      	ldrh	r3, [r7, #12]
 80034ee:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80034f0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80034f4:	009b      	lsls	r3, r3, #2
 80034f6:	687a      	ldr	r2, [r7, #4]
 80034f8:	4413      	add	r3, r2
 80034fa:	885b      	ldrh	r3, [r3, #2]
 80034fc:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80034fe:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003502:	8bbb      	ldrh	r3, [r7, #28]
 8003504:	429a      	cmp	r2, r3
 8003506:	da01      	bge.n	800350c <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8003508:	897b      	ldrh	r3, [r7, #10]
 800350a:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 800350c:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003510:	8b7b      	ldrh	r3, [r7, #26]
 8003512:	429a      	cmp	r2, r3
 8003514:	dd01      	ble.n	800351a <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 8003516:	897b      	ldrh	r3, [r7, #10]
 8003518:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 800351a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800351e:	b29b      	uxth	r3, r3
 8003520:	3301      	adds	r3, #1
 8003522:	b29b      	uxth	r3, r3
 8003524:	847b      	strh	r3, [r7, #34]	; 0x22
 8003526:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800352a:	887b      	ldrh	r3, [r7, #2]
 800352c:	429a      	cmp	r2, r3
 800352e:	dbca      	blt.n	80034c6 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003530:	887b      	ldrh	r3, [r7, #2]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d974      	bls.n	8003620 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8003536:	8c3a      	ldrh	r2, [r7, #32]
 8003538:	8bfb      	ldrh	r3, [r7, #30]
 800353a:	4413      	add	r3, r2
 800353c:	2b00      	cmp	r3, #0
 800353e:	da00      	bge.n	8003542 <BSP_LCD_FillPolygon+0xe2>
 8003540:	3301      	adds	r3, #1
 8003542:	105b      	asrs	r3, r3, #1
 8003544:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8003546:	8b7a      	ldrh	r2, [r7, #26]
 8003548:	8bbb      	ldrh	r3, [r7, #28]
 800354a:	4413      	add	r3, r2
 800354c:	2b00      	cmp	r3, #0
 800354e:	da00      	bge.n	8003552 <BSP_LCD_FillPolygon+0xf2>
 8003550:	3301      	adds	r3, #1
 8003552:	105b      	asrs	r3, r3, #1
 8003554:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	881b      	ldrh	r3, [r3, #0]
 800355a:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	885b      	ldrh	r3, [r3, #2]
 8003560:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8003562:	e032      	b.n	80035ca <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	881b      	ldrh	r3, [r3, #0]
 8003568:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	885b      	ldrh	r3, [r3, #2]
 800356e:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	3304      	adds	r3, #4
 8003574:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	881b      	ldrh	r3, [r3, #0]
 800357a:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	885b      	ldrh	r3, [r3, #2]
 8003580:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003582:	8b38      	ldrh	r0, [r7, #24]
 8003584:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003586:	8abc      	ldrh	r4, [r7, #20]
 8003588:	8afd      	ldrh	r5, [r7, #22]
 800358a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800358c:	8a7a      	ldrh	r2, [r7, #18]
 800358e:	9201      	str	r2, [sp, #4]
 8003590:	9300      	str	r3, [sp, #0]
 8003592:	462b      	mov	r3, r5
 8003594:	4622      	mov	r2, r4
 8003596:	f000 fa13 	bl	80039c0 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 800359a:	8b38      	ldrh	r0, [r7, #24]
 800359c:	8ab9      	ldrh	r1, [r7, #20]
 800359e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80035a0:	8afd      	ldrh	r5, [r7, #22]
 80035a2:	8a7b      	ldrh	r3, [r7, #18]
 80035a4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035a6:	9201      	str	r2, [sp, #4]
 80035a8:	9300      	str	r3, [sp, #0]
 80035aa:	462b      	mov	r3, r5
 80035ac:	4622      	mov	r2, r4
 80035ae:	f000 fa07 	bl	80039c0 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80035b2:	8ab8      	ldrh	r0, [r7, #20]
 80035b4:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80035b6:	8b3c      	ldrh	r4, [r7, #24]
 80035b8:	8a7d      	ldrh	r5, [r7, #18]
 80035ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035bc:	8afa      	ldrh	r2, [r7, #22]
 80035be:	9201      	str	r2, [sp, #4]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	462b      	mov	r3, r5
 80035c4:	4622      	mov	r2, r4
 80035c6:	f000 f9fb 	bl	80039c0 <FillTriangle>
  while(--PointCount)
 80035ca:	887b      	ldrh	r3, [r7, #2]
 80035cc:	3b01      	subs	r3, #1
 80035ce:	807b      	strh	r3, [r7, #2]
 80035d0:	887b      	ldrh	r3, [r7, #2]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1c6      	bne.n	8003564 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80035d6:	8a38      	ldrh	r0, [r7, #16]
 80035d8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80035da:	8abc      	ldrh	r4, [r7, #20]
 80035dc:	89fd      	ldrh	r5, [r7, #14]
 80035de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80035e0:	8a7a      	ldrh	r2, [r7, #18]
 80035e2:	9201      	str	r2, [sp, #4]
 80035e4:	9300      	str	r3, [sp, #0]
 80035e6:	462b      	mov	r3, r5
 80035e8:	4622      	mov	r2, r4
 80035ea:	f000 f9e9 	bl	80039c0 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80035ee:	8a38      	ldrh	r0, [r7, #16]
 80035f0:	8ab9      	ldrh	r1, [r7, #20]
 80035f2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80035f4:	89fd      	ldrh	r5, [r7, #14]
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80035fa:	9201      	str	r2, [sp, #4]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	462b      	mov	r3, r5
 8003600:	4622      	mov	r2, r4
 8003602:	f000 f9dd 	bl	80039c0 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 8003606:	8ab8      	ldrh	r0, [r7, #20]
 8003608:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800360a:	8a3c      	ldrh	r4, [r7, #16]
 800360c:	8a7d      	ldrh	r5, [r7, #18]
 800360e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003610:	89fa      	ldrh	r2, [r7, #14]
 8003612:	9201      	str	r2, [sp, #4]
 8003614:	9300      	str	r3, [sp, #0]
 8003616:	462b      	mov	r3, r5
 8003618:	4622      	mov	r2, r4
 800361a:	f000 f9d1 	bl	80039c0 <FillTriangle>
 800361e:	e000      	b.n	8003622 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003620:	bf00      	nop
}
 8003622:	3728      	adds	r7, #40	; 0x28
 8003624:	46bd      	mov	sp, r7
 8003626:	bdb0      	pop	{r4, r5, r7, pc}

08003628 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800362c:	4b0a      	ldr	r3, [pc, #40]	; (8003658 <BSP_LCD_DisplayOn+0x30>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	699a      	ldr	r2, [r3, #24]
 8003632:	4b09      	ldr	r3, [pc, #36]	; (8003658 <BSP_LCD_DisplayOn+0x30>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f042 0201 	orr.w	r2, r2, #1
 800363a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800363c:	2201      	movs	r2, #1
 800363e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003642:	4806      	ldr	r0, [pc, #24]	; (800365c <BSP_LCD_DisplayOn+0x34>)
 8003644:	f002 fff8 	bl	8006638 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003648:	2201      	movs	r2, #1
 800364a:	2108      	movs	r1, #8
 800364c:	4804      	ldr	r0, [pc, #16]	; (8003660 <BSP_LCD_DisplayOn+0x38>)
 800364e:	f002 fff3 	bl	8006638 <HAL_GPIO_WritePin>
}
 8003652:	bf00      	nop
 8003654:	bd80      	pop	{r7, pc}
 8003656:	bf00      	nop
 8003658:	20008c30 	.word	0x20008c30
 800365c:	40022000 	.word	0x40022000
 8003660:	40022800 	.word	0x40022800

08003664 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	b090      	sub	sp, #64	; 0x40
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800366e:	4b64      	ldr	r3, [pc, #400]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003672:	4a63      	ldr	r2, [pc, #396]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003674:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003678:	6453      	str	r3, [r2, #68]	; 0x44
 800367a:	4b61      	ldr	r3, [pc, #388]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 800367c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003682:	62bb      	str	r3, [r7, #40]	; 0x28
 8003684:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003686:	4b5e      	ldr	r3, [pc, #376]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800368a:	4a5d      	ldr	r2, [pc, #372]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 800368c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003690:	6313      	str	r3, [r2, #48]	; 0x30
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800369e:	4b58      	ldr	r3, [pc, #352]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	4a57      	ldr	r2, [pc, #348]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036a4:	f043 0310 	orr.w	r3, r3, #16
 80036a8:	6313      	str	r3, [r2, #48]	; 0x30
 80036aa:	4b55      	ldr	r3, [pc, #340]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	623b      	str	r3, [r7, #32]
 80036b4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80036b6:	4b52      	ldr	r3, [pc, #328]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ba:	4a51      	ldr	r2, [pc, #324]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80036c0:	6313      	str	r3, [r2, #48]	; 0x30
 80036c2:	4b4f      	ldr	r3, [pc, #316]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ca:	61fb      	str	r3, [r7, #28]
 80036cc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80036ce:	4b4c      	ldr	r3, [pc, #304]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036d2:	4a4b      	ldr	r2, [pc, #300]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036d8:	6313      	str	r3, [r2, #48]	; 0x30
 80036da:	4b49      	ldr	r3, [pc, #292]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e2:	61bb      	str	r3, [r7, #24]
 80036e4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80036e6:	4b46      	ldr	r3, [pc, #280]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ea:	4a45      	ldr	r2, [pc, #276]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80036f0:	6313      	str	r3, [r2, #48]	; 0x30
 80036f2:	4b43      	ldr	r3, [pc, #268]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 80036f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036fa:	617b      	str	r3, [r7, #20]
 80036fc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80036fe:	4b40      	ldr	r3, [pc, #256]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003702:	4a3f      	ldr	r2, [pc, #252]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003704:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003708:	6313      	str	r3, [r2, #48]	; 0x30
 800370a:	4b3d      	ldr	r3, [pc, #244]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 800370c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 8003716:	4b3a      	ldr	r3, [pc, #232]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371a:	4a39      	ldr	r2, [pc, #228]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 800371c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003720:	6313      	str	r3, [r2, #48]	; 0x30
 8003722:	4b37      	ldr	r3, [pc, #220]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003726:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800372a:	60fb      	str	r3, [r7, #12]
 800372c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800372e:	4b34      	ldr	r3, [pc, #208]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	4a33      	ldr	r2, [pc, #204]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 8003734:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003738:	6313      	str	r3, [r2, #48]	; 0x30
 800373a:	4b31      	ldr	r3, [pc, #196]	; (8003800 <BSP_LCD_MspInit+0x19c>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003746:	2310      	movs	r3, #16
 8003748:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800374a:	2302      	movs	r3, #2
 800374c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800374e:	2300      	movs	r3, #0
 8003750:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003752:	2302      	movs	r3, #2
 8003754:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003756:	230e      	movs	r3, #14
 8003758:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800375a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800375e:	4619      	mov	r1, r3
 8003760:	4828      	ldr	r0, [pc, #160]	; (8003804 <BSP_LCD_MspInit+0x1a0>)
 8003762:	f002 fc9d 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003766:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800376a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800376c:	2302      	movs	r3, #2
 800376e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003770:	2309      	movs	r3, #9
 8003772:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003774:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003778:	4619      	mov	r1, r3
 800377a:	4823      	ldr	r0, [pc, #140]	; (8003808 <BSP_LCD_MspInit+0x1a4>)
 800377c:	f002 fc90 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003780:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003784:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003786:	2302      	movs	r3, #2
 8003788:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800378a:	230e      	movs	r3, #14
 800378c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800378e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003792:	4619      	mov	r1, r3
 8003794:	481d      	ldr	r0, [pc, #116]	; (800380c <BSP_LCD_MspInit+0x1a8>)
 8003796:	f002 fc83 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800379a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800379e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037a0:	2302      	movs	r3, #2
 80037a2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80037a4:	230e      	movs	r3, #14
 80037a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80037a8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ac:	4619      	mov	r1, r3
 80037ae:	4818      	ldr	r0, [pc, #96]	; (8003810 <BSP_LCD_MspInit+0x1ac>)
 80037b0:	f002 fc76 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80037b4:	23f7      	movs	r3, #247	; 0xf7
 80037b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80037b8:	2302      	movs	r3, #2
 80037ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80037bc:	230e      	movs	r3, #14
 80037be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80037c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037c4:	4619      	mov	r1, r3
 80037c6:	4813      	ldr	r0, [pc, #76]	; (8003814 <BSP_LCD_MspInit+0x1b0>)
 80037c8:	f002 fc6a 	bl	80060a0 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80037cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80037d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80037d2:	2301      	movs	r3, #1
 80037d4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80037d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037da:	4619      	mov	r1, r3
 80037dc:	480b      	ldr	r0, [pc, #44]	; (800380c <BSP_LCD_MspInit+0x1a8>)
 80037de:	f002 fc5f 	bl	80060a0 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80037e2:	2308      	movs	r3, #8
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80037e6:	2301      	movs	r3, #1
 80037e8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80037ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80037ee:	4619      	mov	r1, r3
 80037f0:	4808      	ldr	r0, [pc, #32]	; (8003814 <BSP_LCD_MspInit+0x1b0>)
 80037f2:	f002 fc55 	bl	80060a0 <HAL_GPIO_Init>
}
 80037f6:	bf00      	nop
 80037f8:	3740      	adds	r7, #64	; 0x40
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}
 80037fe:	bf00      	nop
 8003800:	40023800 	.word	0x40023800
 8003804:	40021000 	.word	0x40021000
 8003808:	40021800 	.word	0x40021800
 800380c:	40022000 	.word	0x40022000
 8003810:	40022400 	.word	0x40022400
 8003814:	40022800 	.word	0x40022800

08003818 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b082      	sub	sp, #8
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
 8003820:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003822:	4b0a      	ldr	r3, [pc, #40]	; (800384c <BSP_LCD_ClockConfig+0x34>)
 8003824:	2208      	movs	r2, #8
 8003826:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003828:	4b08      	ldr	r3, [pc, #32]	; (800384c <BSP_LCD_ClockConfig+0x34>)
 800382a:	22c0      	movs	r2, #192	; 0xc0
 800382c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800382e:	4b07      	ldr	r3, [pc, #28]	; (800384c <BSP_LCD_ClockConfig+0x34>)
 8003830:	2205      	movs	r2, #5
 8003832:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003834:	4b05      	ldr	r3, [pc, #20]	; (800384c <BSP_LCD_ClockConfig+0x34>)
 8003836:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800383a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800383c:	4803      	ldr	r0, [pc, #12]	; (800384c <BSP_LCD_ClockConfig+0x34>)
 800383e:	f004 fd45 	bl	80082cc <HAL_RCCEx_PeriphCLKConfig>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	200003e4 	.word	0x200003e4

08003850 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b088      	sub	sp, #32
 8003854:	af00      	add	r7, sp, #0
 8003856:	4603      	mov	r3, r0
 8003858:	603a      	str	r2, [r7, #0]
 800385a:	80fb      	strh	r3, [r7, #6]
 800385c:	460b      	mov	r3, r1
 800385e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003860:	2300      	movs	r3, #0
 8003862:	61fb      	str	r3, [r7, #28]
 8003864:	2300      	movs	r3, #0
 8003866:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003868:	4b53      	ldr	r3, [pc, #332]	; (80039b8 <DrawChar+0x168>)
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	4953      	ldr	r1, [pc, #332]	; (80039bc <DrawChar+0x16c>)
 800386e:	4613      	mov	r3, r2
 8003870:	005b      	lsls	r3, r3, #1
 8003872:	4413      	add	r3, r2
 8003874:	009b      	lsls	r3, r3, #2
 8003876:	440b      	add	r3, r1
 8003878:	3308      	adds	r3, #8
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	88db      	ldrh	r3, [r3, #6]
 800387e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003880:	4b4d      	ldr	r3, [pc, #308]	; (80039b8 <DrawChar+0x168>)
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	494d      	ldr	r1, [pc, #308]	; (80039bc <DrawChar+0x16c>)
 8003886:	4613      	mov	r3, r2
 8003888:	005b      	lsls	r3, r3, #1
 800388a:	4413      	add	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	440b      	add	r3, r1
 8003890:	3308      	adds	r3, #8
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	889b      	ldrh	r3, [r3, #4]
 8003896:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003898:	8a3b      	ldrh	r3, [r7, #16]
 800389a:	3307      	adds	r3, #7
 800389c:	2b00      	cmp	r3, #0
 800389e:	da00      	bge.n	80038a2 <DrawChar+0x52>
 80038a0:	3307      	adds	r3, #7
 80038a2:	10db      	asrs	r3, r3, #3
 80038a4:	b2db      	uxtb	r3, r3
 80038a6:	00db      	lsls	r3, r3, #3
 80038a8:	b2da      	uxtb	r2, r3
 80038aa:	8a3b      	ldrh	r3, [r7, #16]
 80038ac:	b2db      	uxtb	r3, r3
 80038ae:	1ad3      	subs	r3, r2, r3
 80038b0:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80038b2:	2300      	movs	r3, #0
 80038b4:	61fb      	str	r3, [r7, #28]
 80038b6:	e076      	b.n	80039a6 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80038b8:	8a3b      	ldrh	r3, [r7, #16]
 80038ba:	3307      	adds	r3, #7
 80038bc:	2b00      	cmp	r3, #0
 80038be:	da00      	bge.n	80038c2 <DrawChar+0x72>
 80038c0:	3307      	adds	r3, #7
 80038c2:	10db      	asrs	r3, r3, #3
 80038c4:	461a      	mov	r2, r3
 80038c6:	69fb      	ldr	r3, [r7, #28]
 80038c8:	fb03 f302 	mul.w	r3, r3, r2
 80038cc:	683a      	ldr	r2, [r7, #0]
 80038ce:	4413      	add	r3, r2
 80038d0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80038d2:	8a3b      	ldrh	r3, [r7, #16]
 80038d4:	3307      	adds	r3, #7
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da00      	bge.n	80038dc <DrawChar+0x8c>
 80038da:	3307      	adds	r3, #7
 80038dc:	10db      	asrs	r3, r3, #3
 80038de:	2b01      	cmp	r3, #1
 80038e0:	d002      	beq.n	80038e8 <DrawChar+0x98>
 80038e2:	2b02      	cmp	r3, #2
 80038e4:	d004      	beq.n	80038f0 <DrawChar+0xa0>
 80038e6:	e00c      	b.n	8003902 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	781b      	ldrb	r3, [r3, #0]
 80038ec:	617b      	str	r3, [r7, #20]
      break;
 80038ee:	e016      	b.n	800391e <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80038f0:	68bb      	ldr	r3, [r7, #8]
 80038f2:	781b      	ldrb	r3, [r3, #0]
 80038f4:	021b      	lsls	r3, r3, #8
 80038f6:	68ba      	ldr	r2, [r7, #8]
 80038f8:	3201      	adds	r2, #1
 80038fa:	7812      	ldrb	r2, [r2, #0]
 80038fc:	4313      	orrs	r3, r2
 80038fe:	617b      	str	r3, [r7, #20]
      break;
 8003900:	e00d      	b.n	800391e <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	781b      	ldrb	r3, [r3, #0]
 8003906:	041a      	lsls	r2, r3, #16
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	3301      	adds	r3, #1
 800390c:	781b      	ldrb	r3, [r3, #0]
 800390e:	021b      	lsls	r3, r3, #8
 8003910:	4313      	orrs	r3, r2
 8003912:	68ba      	ldr	r2, [r7, #8]
 8003914:	3202      	adds	r2, #2
 8003916:	7812      	ldrb	r2, [r2, #0]
 8003918:	4313      	orrs	r3, r2
 800391a:	617b      	str	r3, [r7, #20]
      break;
 800391c:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 800391e:	2300      	movs	r3, #0
 8003920:	61bb      	str	r3, [r7, #24]
 8003922:	e036      	b.n	8003992 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003924:	8a3a      	ldrh	r2, [r7, #16]
 8003926:	69bb      	ldr	r3, [r7, #24]
 8003928:	1ad2      	subs	r2, r2, r3
 800392a:	7bfb      	ldrb	r3, [r7, #15]
 800392c:	4413      	add	r3, r2
 800392e:	3b01      	subs	r3, #1
 8003930:	2201      	movs	r2, #1
 8003932:	fa02 f303 	lsl.w	r3, r2, r3
 8003936:	461a      	mov	r2, r3
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	4013      	ands	r3, r2
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	b29a      	uxth	r2, r3
 8003944:	88fb      	ldrh	r3, [r7, #6]
 8003946:	4413      	add	r3, r2
 8003948:	b298      	uxth	r0, r3
 800394a:	4b1b      	ldr	r3, [pc, #108]	; (80039b8 <DrawChar+0x168>)
 800394c:	681a      	ldr	r2, [r3, #0]
 800394e:	491b      	ldr	r1, [pc, #108]	; (80039bc <DrawChar+0x16c>)
 8003950:	4613      	mov	r3, r2
 8003952:	005b      	lsls	r3, r3, #1
 8003954:	4413      	add	r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	88bb      	ldrh	r3, [r7, #4]
 800395e:	4619      	mov	r1, r3
 8003960:	f7ff fc1c 	bl	800319c <BSP_LCD_DrawPixel>
 8003964:	e012      	b.n	800398c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003966:	69bb      	ldr	r3, [r7, #24]
 8003968:	b29a      	uxth	r2, r3
 800396a:	88fb      	ldrh	r3, [r7, #6]
 800396c:	4413      	add	r3, r2
 800396e:	b298      	uxth	r0, r3
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <DrawChar+0x168>)
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	4911      	ldr	r1, [pc, #68]	; (80039bc <DrawChar+0x16c>)
 8003976:	4613      	mov	r3, r2
 8003978:	005b      	lsls	r3, r3, #1
 800397a:	4413      	add	r3, r2
 800397c:	009b      	lsls	r3, r3, #2
 800397e:	440b      	add	r3, r1
 8003980:	3304      	adds	r3, #4
 8003982:	681a      	ldr	r2, [r3, #0]
 8003984:	88bb      	ldrh	r3, [r7, #4]
 8003986:	4619      	mov	r1, r3
 8003988:	f7ff fc08 	bl	800319c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800398c:	69bb      	ldr	r3, [r7, #24]
 800398e:	3301      	adds	r3, #1
 8003990:	61bb      	str	r3, [r7, #24]
 8003992:	8a3b      	ldrh	r3, [r7, #16]
 8003994:	69ba      	ldr	r2, [r7, #24]
 8003996:	429a      	cmp	r2, r3
 8003998:	d3c4      	bcc.n	8003924 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800399a:	88bb      	ldrh	r3, [r7, #4]
 800399c:	3301      	adds	r3, #1
 800399e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80039a0:	69fb      	ldr	r3, [r7, #28]
 80039a2:	3301      	adds	r3, #1
 80039a4:	61fb      	str	r3, [r7, #28]
 80039a6:	8a7b      	ldrh	r3, [r7, #18]
 80039a8:	69fa      	ldr	r2, [r7, #28]
 80039aa:	429a      	cmp	r2, r3
 80039ac:	d384      	bcc.n	80038b8 <DrawChar+0x68>
  }
}
 80039ae:	bf00      	nop
 80039b0:	3720      	adds	r7, #32
 80039b2:	46bd      	mov	sp, r7
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	200003c8 	.word	0x200003c8
 80039bc:	200003cc 	.word	0x200003cc

080039c0 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80039c0:	b590      	push	{r4, r7, lr}
 80039c2:	b08b      	sub	sp, #44	; 0x2c
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	4604      	mov	r4, r0
 80039c8:	4608      	mov	r0, r1
 80039ca:	4611      	mov	r1, r2
 80039cc:	461a      	mov	r2, r3
 80039ce:	4623      	mov	r3, r4
 80039d0:	80fb      	strh	r3, [r7, #6]
 80039d2:	4603      	mov	r3, r0
 80039d4:	80bb      	strh	r3, [r7, #4]
 80039d6:	460b      	mov	r3, r1
 80039d8:	807b      	strh	r3, [r7, #2]
 80039da:	4613      	mov	r3, r2
 80039dc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80039de:	2300      	movs	r3, #0
 80039e0:	823b      	strh	r3, [r7, #16]
 80039e2:	2300      	movs	r3, #0
 80039e4:	81fb      	strh	r3, [r7, #14]
 80039e6:	2300      	movs	r3, #0
 80039e8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80039ea:	2300      	movs	r3, #0
 80039ec:	84bb      	strh	r3, [r7, #36]	; 0x24
 80039ee:	2300      	movs	r3, #0
 80039f0:	847b      	strh	r3, [r7, #34]	; 0x22
 80039f2:	2300      	movs	r3, #0
 80039f4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80039f6:	2300      	movs	r3, #0
 80039f8:	83fb      	strh	r3, [r7, #30]
 80039fa:	2300      	movs	r3, #0
 80039fc:	83bb      	strh	r3, [r7, #28]
 80039fe:	2300      	movs	r3, #0
 8003a00:	837b      	strh	r3, [r7, #26]
 8003a02:	2300      	movs	r3, #0
 8003a04:	833b      	strh	r3, [r7, #24]
 8003a06:	2300      	movs	r3, #0
 8003a08:	82fb      	strh	r3, [r7, #22]
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003a12:	88ba      	ldrh	r2, [r7, #4]
 8003a14:	88fb      	ldrh	r3, [r7, #6]
 8003a16:	1ad3      	subs	r3, r2, r3
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	bfb8      	it	lt
 8003a1c:	425b      	neglt	r3, r3
 8003a1e:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003a20:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003a22:	883b      	ldrh	r3, [r7, #0]
 8003a24:	1ad3      	subs	r3, r2, r3
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	bfb8      	it	lt
 8003a2a:	425b      	neglt	r3, r3
 8003a2c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003a2e:	88fb      	ldrh	r3, [r7, #6]
 8003a30:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003a32:	883b      	ldrh	r3, [r7, #0]
 8003a34:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003a36:	88ba      	ldrh	r2, [r7, #4]
 8003a38:	88fb      	ldrh	r3, [r7, #6]
 8003a3a:	429a      	cmp	r2, r3
 8003a3c:	d304      	bcc.n	8003a48 <FillTriangle+0x88>
  {
    xinc1 = 1;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003a42:	2301      	movs	r3, #1
 8003a44:	843b      	strh	r3, [r7, #32]
 8003a46:	e005      	b.n	8003a54 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003a48:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a4c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003a4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a52:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003a54:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003a56:	883b      	ldrh	r3, [r7, #0]
 8003a58:	429a      	cmp	r2, r3
 8003a5a:	d304      	bcc.n	8003a66 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003a60:	2301      	movs	r3, #1
 8003a62:	83bb      	strh	r3, [r7, #28]
 8003a64:	e005      	b.n	8003a72 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003a66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a6a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003a6c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003a70:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003a72:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003a76:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	db11      	blt.n	8003aa2 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003a7e:	2300      	movs	r3, #0
 8003a80:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003a82:	2300      	movs	r3, #0
 8003a84:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003a86:	8a3b      	ldrh	r3, [r7, #16]
 8003a88:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003a8a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	da00      	bge.n	8003a94 <FillTriangle+0xd4>
 8003a92:	3301      	adds	r3, #1
 8003a94:	105b      	asrs	r3, r3, #1
 8003a96:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003a98:	89fb      	ldrh	r3, [r7, #14]
 8003a9a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003a9c:	8a3b      	ldrh	r3, [r7, #16]
 8003a9e:	82bb      	strh	r3, [r7, #20]
 8003aa0:	e010      	b.n	8003ac4 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003aaa:	89fb      	ldrh	r3, [r7, #14]
 8003aac:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003aae:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	da00      	bge.n	8003ab8 <FillTriangle+0xf8>
 8003ab6:	3301      	adds	r3, #1
 8003ab8:	105b      	asrs	r3, r3, #1
 8003aba:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003abc:	8a3b      	ldrh	r3, [r7, #16]
 8003abe:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003ac0:	89fb      	ldrh	r3, [r7, #14]
 8003ac2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	827b      	strh	r3, [r7, #18]
 8003ac8:	e02f      	b.n	8003b2a <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 8003aca:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003acc:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003ace:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8003ad0:	887a      	ldrh	r2, [r7, #2]
 8003ad2:	f7ff f9a7 	bl	8002e24 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 8003ad6:	8b3a      	ldrh	r2, [r7, #24]
 8003ad8:	8afb      	ldrh	r3, [r7, #22]
 8003ada:	4413      	add	r3, r2
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8003ae0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ae4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	db0e      	blt.n	8003b0a <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8003aec:	8b3a      	ldrh	r2, [r7, #24]
 8003aee:	8b7b      	ldrh	r3, [r7, #26]
 8003af0:	1ad3      	subs	r3, r2, r3
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 8003af6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003af8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003afa:	4413      	add	r3, r2
 8003afc:	b29b      	uxth	r3, r3
 8003afe:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8003b00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b02:	8bfb      	ldrh	r3, [r7, #30]
 8003b04:	4413      	add	r3, r2
 8003b06:	b29b      	uxth	r3, r3
 8003b08:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8003b0a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003b0c:	8c3b      	ldrh	r3, [r7, #32]
 8003b0e:	4413      	add	r3, r2
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 8003b14:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003b16:	8bbb      	ldrh	r3, [r7, #28]
 8003b18:	4413      	add	r3, r2
 8003b1a:	b29b      	uxth	r3, r3
 8003b1c:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003b1e:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003b22:	b29b      	uxth	r3, r3
 8003b24:	3301      	adds	r3, #1
 8003b26:	b29b      	uxth	r3, r3
 8003b28:	827b      	strh	r3, [r7, #18]
 8003b2a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003b2e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	ddc9      	ble.n	8003aca <FillTriangle+0x10a>
  } 
}
 8003b36:	bf00      	nop
 8003b38:	372c      	adds	r7, #44	; 0x2c
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd90      	pop	{r4, r7, pc}
	...

08003b40 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b086      	sub	sp, #24
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	60b9      	str	r1, [r7, #8]
 8003b4a:	607a      	str	r2, [r7, #4]
 8003b4c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003b4e:	4b1e      	ldr	r3, [pc, #120]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b50:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003b54:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003b56:	4b1d      	ldr	r3, [pc, #116]	; (8003bcc <LL_FillBuffer+0x8c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	4a1d      	ldr	r2, [pc, #116]	; (8003bd0 <LL_FillBuffer+0x90>)
 8003b5c:	2134      	movs	r1, #52	; 0x34
 8003b5e:	fb01 f303 	mul.w	r3, r1, r3
 8003b62:	4413      	add	r3, r2
 8003b64:	3348      	adds	r3, #72	; 0x48
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d103      	bne.n	8003b74 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003b6c:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b6e:	2202      	movs	r2, #2
 8003b70:	609a      	str	r2, [r3, #8]
 8003b72:	e002      	b.n	8003b7a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003b74:	4b14      	ldr	r3, [pc, #80]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003b7a:	4a13      	ldr	r2, [pc, #76]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003b80:	4b11      	ldr	r3, [pc, #68]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b82:	4a14      	ldr	r2, [pc, #80]	; (8003bd4 <LL_FillBuffer+0x94>)
 8003b84:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003b86:	4810      	ldr	r0, [pc, #64]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b88:	f001 fffe 	bl	8005b88 <HAL_DMA2D_Init>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d115      	bne.n	8003bbe <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003b92:	68f9      	ldr	r1, [r7, #12]
 8003b94:	480c      	ldr	r0, [pc, #48]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003b96:	f002 f955 	bl	8005e44 <HAL_DMA2D_ConfigLayer>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d10e      	bne.n	8003bbe <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003ba0:	68ba      	ldr	r2, [r7, #8]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	9300      	str	r3, [sp, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	69f9      	ldr	r1, [r7, #28]
 8003baa:	4807      	ldr	r0, [pc, #28]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003bac:	f002 f836 	bl	8005c1c <HAL_DMA2D_Start>
 8003bb0:	4603      	mov	r3, r0
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d103      	bne.n	8003bbe <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003bb6:	210a      	movs	r1, #10
 8003bb8:	4803      	ldr	r0, [pc, #12]	; (8003bc8 <LL_FillBuffer+0x88>)
 8003bba:	f002 f85a 	bl	8005c72 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003bbe:	bf00      	nop
 8003bc0:	3710      	adds	r7, #16
 8003bc2:	46bd      	mov	sp, r7
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000388 	.word	0x20000388
 8003bcc:	200003c8 	.word	0x200003c8
 8003bd0:	20008c30 	.word	0x20008c30
 8003bd4:	4002b000 	.word	0x4002b000

08003bd8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003bdc:	4b29      	ldr	r3, [pc, #164]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003bde:	4a2a      	ldr	r2, [pc, #168]	; (8003c88 <BSP_SDRAM_Init+0xb0>)
 8003be0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003be2:	4b2a      	ldr	r3, [pc, #168]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003be4:	2202      	movs	r2, #2
 8003be6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003bea:	2207      	movs	r2, #7
 8003bec:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003bee:	4b27      	ldr	r3, [pc, #156]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003bf0:	2204      	movs	r2, #4
 8003bf2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003bf4:	4b25      	ldr	r3, [pc, #148]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003bf6:	2207      	movs	r2, #7
 8003bf8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003bfa:	4b24      	ldr	r3, [pc, #144]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003bfc:	2202      	movs	r2, #2
 8003bfe:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003c00:	4b22      	ldr	r3, [pc, #136]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003c02:	2202      	movs	r2, #2
 8003c04:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003c06:	4b21      	ldr	r3, [pc, #132]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003c08:	2202      	movs	r2, #2
 8003c0a:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c0e:	2200      	movs	r2, #0
 8003c10:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003c12:	4b1c      	ldr	r3, [pc, #112]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c14:	2200      	movs	r2, #0
 8003c16:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003c18:	4b1a      	ldr	r3, [pc, #104]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003c1e:	4b19      	ldr	r3, [pc, #100]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c20:	2210      	movs	r2, #16
 8003c22:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003c24:	4b17      	ldr	r3, [pc, #92]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c26:	2240      	movs	r2, #64	; 0x40
 8003c28:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003c2a:	4b16      	ldr	r3, [pc, #88]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c2c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003c30:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003c32:	4b14      	ldr	r3, [pc, #80]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c34:	2200      	movs	r2, #0
 8003c36:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003c38:	4b12      	ldr	r3, [pc, #72]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c3e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003c40:	4b10      	ldr	r3, [pc, #64]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c42:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003c46:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003c48:	4b0e      	ldr	r3, [pc, #56]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003c4e:	2100      	movs	r1, #0
 8003c50:	480c      	ldr	r0, [pc, #48]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c52:	f000 f87f 	bl	8003d54 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003c56:	490d      	ldr	r1, [pc, #52]	; (8003c8c <BSP_SDRAM_Init+0xb4>)
 8003c58:	480a      	ldr	r0, [pc, #40]	; (8003c84 <BSP_SDRAM_Init+0xac>)
 8003c5a:	f005 fbb3 	bl	80093c4 <HAL_SDRAM_Init>
 8003c5e:	4603      	mov	r3, r0
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d003      	beq.n	8003c6c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003c64:	4b0a      	ldr	r3, [pc, #40]	; (8003c90 <BSP_SDRAM_Init+0xb8>)
 8003c66:	2201      	movs	r2, #1
 8003c68:	701a      	strb	r2, [r3, #0]
 8003c6a:	e002      	b.n	8003c72 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003c6c:	4b08      	ldr	r3, [pc, #32]	; (8003c90 <BSP_SDRAM_Init+0xb8>)
 8003c6e:	2200      	movs	r2, #0
 8003c70:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003c72:	f240 6003 	movw	r0, #1539	; 0x603
 8003c76:	f000 f80d 	bl	8003c94 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <BSP_SDRAM_Init+0xb8>)
 8003c7c:	781b      	ldrb	r3, [r3, #0]
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	20008cd8 	.word	0x20008cd8
 8003c88:	a0000140 	.word	0xa0000140
 8003c8c:	20000468 	.word	0x20000468
 8003c90:	20000048 	.word	0x20000048

08003c94 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b084      	sub	sp, #16
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003ca0:	4b2a      	ldr	r3, [pc, #168]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca2:	2201      	movs	r2, #1
 8003ca4:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003ca6:	4b29      	ldr	r3, [pc, #164]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ca8:	2210      	movs	r2, #16
 8003caa:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cac:	4b27      	ldr	r3, [pc, #156]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cb2:	4b26      	ldr	r3, [pc, #152]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003cb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003cbc:	4923      	ldr	r1, [pc, #140]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cbe:	4824      	ldr	r0, [pc, #144]	; (8003d50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cc0:	f005 fbb4 	bl	800942c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003cc4:	2001      	movs	r0, #1
 8003cc6:	f000 ffd5 	bl	8004c74 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003cca:	4b20      	ldr	r3, [pc, #128]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ccc:	2202      	movs	r2, #2
 8003cce:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cd0:	4b1e      	ldr	r3, [pc, #120]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd2:	2210      	movs	r2, #16
 8003cd4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003cd6:	4b1d      	ldr	r3, [pc, #116]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cd8:	2201      	movs	r2, #1
 8003cda:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003cdc:	4b1b      	ldr	r3, [pc, #108]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cde:	2200      	movs	r2, #0
 8003ce0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003ce2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ce6:	4919      	ldr	r1, [pc, #100]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003ce8:	4819      	ldr	r0, [pc, #100]	; (8003d50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003cea:	f005 fb9f 	bl	800942c <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003cee:	4b17      	ldr	r3, [pc, #92]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf0:	2203      	movs	r2, #3
 8003cf2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003cf4:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cf6:	2210      	movs	r2, #16
 8003cf8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003cfa:	4b14      	ldr	r3, [pc, #80]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003cfc:	2208      	movs	r2, #8
 8003cfe:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003d00:	4b12      	ldr	r3, [pc, #72]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d02:	2200      	movs	r2, #0
 8003d04:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d0a:	4910      	ldr	r1, [pc, #64]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d0c:	4810      	ldr	r0, [pc, #64]	; (8003d50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d0e:	f005 fb8d 	bl	800942c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003d12:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003d16:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003d18:	4b0c      	ldr	r3, [pc, #48]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d1a:	2204      	movs	r2, #4
 8003d1c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003d1e:	4b0b      	ldr	r3, [pc, #44]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d20:	2210      	movs	r2, #16
 8003d22:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003d24:	4b09      	ldr	r3, [pc, #36]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d26:	2201      	movs	r2, #1
 8003d28:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	4a07      	ldr	r2, [pc, #28]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d2e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003d30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003d34:	4905      	ldr	r1, [pc, #20]	; (8003d4c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003d36:	4806      	ldr	r0, [pc, #24]	; (8003d50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d38:	f005 fb78 	bl	800942c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003d3c:	6879      	ldr	r1, [r7, #4]
 8003d3e:	4804      	ldr	r0, [pc, #16]	; (8003d50 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003d40:	f005 fb9f 	bl	8009482 <HAL_SDRAM_ProgramRefreshRate>
}
 8003d44:	bf00      	nop
 8003d46:	3710      	adds	r7, #16
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	20000484 	.word	0x20000484
 8003d50:	20008cd8 	.word	0x20008cd8

08003d54 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b090      	sub	sp, #64	; 0x40
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
 8003d5c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003d5e:	4b70      	ldr	r3, [pc, #448]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d62:	4a6f      	ldr	r2, [pc, #444]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d64:	f043 0301 	orr.w	r3, r3, #1
 8003d68:	6393      	str	r3, [r2, #56]	; 0x38
 8003d6a:	4b6d      	ldr	r3, [pc, #436]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6e:	f003 0301 	and.w	r3, r3, #1
 8003d72:	62bb      	str	r3, [r7, #40]	; 0x28
 8003d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003d76:	4b6a      	ldr	r3, [pc, #424]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7a:	4a69      	ldr	r2, [pc, #420]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003d80:	6313      	str	r3, [r2, #48]	; 0x30
 8003d82:	4b67      	ldr	r3, [pc, #412]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d8e:	4b64      	ldr	r3, [pc, #400]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d92:	4a63      	ldr	r2, [pc, #396]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d94:	f043 0304 	orr.w	r3, r3, #4
 8003d98:	6313      	str	r3, [r2, #48]	; 0x30
 8003d9a:	4b61      	ldr	r3, [pc, #388]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d9e:	f003 0304 	and.w	r3, r3, #4
 8003da2:	623b      	str	r3, [r7, #32]
 8003da4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003da6:	4b5e      	ldr	r3, [pc, #376]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003daa:	4a5d      	ldr	r2, [pc, #372]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dac:	f043 0308 	orr.w	r3, r3, #8
 8003db0:	6313      	str	r3, [r2, #48]	; 0x30
 8003db2:	4b5b      	ldr	r3, [pc, #364]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db6:	f003 0308 	and.w	r3, r3, #8
 8003dba:	61fb      	str	r3, [r7, #28]
 8003dbc:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003dbe:	4b58      	ldr	r3, [pc, #352]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc2:	4a57      	ldr	r2, [pc, #348]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dc4:	f043 0310 	orr.w	r3, r3, #16
 8003dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dca:	4b55      	ldr	r3, [pc, #340]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dce:	f003 0310 	and.w	r3, r3, #16
 8003dd2:	61bb      	str	r3, [r7, #24]
 8003dd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dd6:	4b52      	ldr	r3, [pc, #328]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dda:	4a51      	ldr	r2, [pc, #324]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003ddc:	f043 0320 	orr.w	r3, r3, #32
 8003de0:	6313      	str	r3, [r2, #48]	; 0x30
 8003de2:	4b4f      	ldr	r3, [pc, #316]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003de6:	f003 0320 	and.w	r3, r3, #32
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003dee:	4b4c      	ldr	r3, [pc, #304]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df2:	4a4b      	ldr	r2, [pc, #300]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003df4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003df8:	6313      	str	r3, [r2, #48]	; 0x30
 8003dfa:	4b49      	ldr	r3, [pc, #292]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003e06:	4b46      	ldr	r3, [pc, #280]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003e08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e0a:	4a45      	ldr	r2, [pc, #276]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003e0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003e10:	6313      	str	r3, [r2, #48]	; 0x30
 8003e12:	4b43      	ldr	r3, [pc, #268]	; (8003f20 <BSP_SDRAM_MspInit+0x1cc>)
 8003e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e1a:	60fb      	str	r3, [r7, #12]
 8003e1c:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003e1e:	2302      	movs	r3, #2
 8003e20:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003e22:	2301      	movs	r3, #1
 8003e24:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003e26:	2302      	movs	r3, #2
 8003e28:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003e2a:	230c      	movs	r3, #12
 8003e2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003e2e:	2308      	movs	r3, #8
 8003e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003e32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e36:	4619      	mov	r1, r3
 8003e38:	483a      	ldr	r0, [pc, #232]	; (8003f24 <BSP_SDRAM_MspInit+0x1d0>)
 8003e3a:	f002 f931 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003e3e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003e42:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003e44:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e48:	4619      	mov	r1, r3
 8003e4a:	4837      	ldr	r0, [pc, #220]	; (8003f28 <BSP_SDRAM_MspInit+0x1d4>)
 8003e4c:	f002 f928 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003e50:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003e56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4833      	ldr	r0, [pc, #204]	; (8003f2c <BSP_SDRAM_MspInit+0x1d8>)
 8003e5e:	f002 f91f 	bl	80060a0 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003e62:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003e66:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003e68:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e6c:	4619      	mov	r1, r3
 8003e6e:	4830      	ldr	r0, [pc, #192]	; (8003f30 <BSP_SDRAM_MspInit+0x1dc>)
 8003e70:	f002 f916 	bl	80060a0 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003e74:	f248 1333 	movw	r3, #33075	; 0x8133
 8003e78:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003e7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e7e:	4619      	mov	r1, r3
 8003e80:	482c      	ldr	r0, [pc, #176]	; (8003f34 <BSP_SDRAM_MspInit+0x1e0>)
 8003e82:	f002 f90d 	bl	80060a0 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003e86:	2328      	movs	r3, #40	; 0x28
 8003e88:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003e8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003e8e:	4619      	mov	r1, r3
 8003e90:	4829      	ldr	r0, [pc, #164]	; (8003f38 <BSP_SDRAM_MspInit+0x1e4>)
 8003e92:	f002 f905 	bl	80060a0 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003e96:	4b29      	ldr	r3, [pc, #164]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003e98:	2200      	movs	r2, #0
 8003e9a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003e9c:	4b27      	ldr	r3, [pc, #156]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003e9e:	2280      	movs	r2, #128	; 0x80
 8003ea0:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003ea2:	4b26      	ldr	r3, [pc, #152]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003ea8:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003eaa:	4b24      	ldr	r3, [pc, #144]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003eac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003eb0:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003eb2:	4b22      	ldr	r3, [pc, #136]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003eb4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003eb8:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003eba:	4b20      	ldr	r3, [pc, #128]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ebc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003ec0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003ec2:	4b1e      	ldr	r3, [pc, #120]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003ec8:	4b1c      	ldr	r3, [pc, #112]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003eca:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003ece:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003ed0:	4b1a      	ldr	r3, [pc, #104]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ed2:	2200      	movs	r2, #0
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003ed6:	4b19      	ldr	r3, [pc, #100]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ed8:	2203      	movs	r2, #3
 8003eda:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003edc:	4b17      	ldr	r3, [pc, #92]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ede:	2200      	movs	r2, #0
 8003ee0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003ee2:	4b16      	ldr	r3, [pc, #88]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003ee8:	4b14      	ldr	r3, [pc, #80]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003eea:	4a15      	ldr	r2, [pc, #84]	; (8003f40 <BSP_SDRAM_MspInit+0x1ec>)
 8003eec:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a12      	ldr	r2, [pc, #72]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ef2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ef4:	4a11      	ldr	r2, [pc, #68]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003efa:	4810      	ldr	r0, [pc, #64]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003efc:	f001 fd14 	bl	8005928 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003f00:	480e      	ldr	r0, [pc, #56]	; (8003f3c <BSP_SDRAM_MspInit+0x1e8>)
 8003f02:	f001 fc63 	bl	80057cc <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003f06:	2200      	movs	r2, #0
 8003f08:	210f      	movs	r1, #15
 8003f0a:	2038      	movs	r0, #56	; 0x38
 8003f0c:	f001 fb66 	bl	80055dc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003f10:	2038      	movs	r0, #56	; 0x38
 8003f12:	f001 fb7f 	bl	8005614 <HAL_NVIC_EnableIRQ>
}
 8003f16:	bf00      	nop
 8003f18:	3740      	adds	r7, #64	; 0x40
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	bd80      	pop	{r7, pc}
 8003f1e:	bf00      	nop
 8003f20:	40023800 	.word	0x40023800
 8003f24:	40020800 	.word	0x40020800
 8003f28:	40020c00 	.word	0x40020c00
 8003f2c:	40021000 	.word	0x40021000
 8003f30:	40021400 	.word	0x40021400
 8003f34:	40021800 	.word	0x40021800
 8003f38:	40021c00 	.word	0x40021c00
 8003f3c:	20000494 	.word	0x20000494
 8003f40:	40026410 	.word	0x40026410

08003f44 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b084      	sub	sp, #16
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	4603      	mov	r3, r0
 8003f4c:	460a      	mov	r2, r1
 8003f4e:	80fb      	strh	r3, [r7, #6]
 8003f50:	4613      	mov	r3, r2
 8003f52:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003f54:	2300      	movs	r3, #0
 8003f56:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003f58:	4a14      	ldr	r2, [pc, #80]	; (8003fac <BSP_TS_Init+0x68>)
 8003f5a:	88fb      	ldrh	r3, [r7, #6]
 8003f5c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003f5e:	4a14      	ldr	r2, [pc, #80]	; (8003fb0 <BSP_TS_Init+0x6c>)
 8003f60:	88bb      	ldrh	r3, [r7, #4]
 8003f62:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003f64:	4b13      	ldr	r3, [pc, #76]	; (8003fb4 <BSP_TS_Init+0x70>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	2070      	movs	r0, #112	; 0x70
 8003f6a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003f6c:	4b11      	ldr	r3, [pc, #68]	; (8003fb4 <BSP_TS_Init+0x70>)
 8003f6e:	685b      	ldr	r3, [r3, #4]
 8003f70:	2070      	movs	r0, #112	; 0x70
 8003f72:	4798      	blx	r3
 8003f74:	4603      	mov	r3, r0
 8003f76:	2b51      	cmp	r3, #81	; 0x51
 8003f78:	d111      	bne.n	8003f9e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003f7a:	4b0f      	ldr	r3, [pc, #60]	; (8003fb8 <BSP_TS_Init+0x74>)
 8003f7c:	4a0d      	ldr	r2, [pc, #52]	; (8003fb4 <BSP_TS_Init+0x70>)
 8003f7e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003f80:	4b0e      	ldr	r3, [pc, #56]	; (8003fbc <BSP_TS_Init+0x78>)
 8003f82:	2270      	movs	r2, #112	; 0x70
 8003f84:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003f86:	4b0e      	ldr	r3, [pc, #56]	; (8003fc0 <BSP_TS_Init+0x7c>)
 8003f88:	2208      	movs	r2, #8
 8003f8a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003f8c:	4b0a      	ldr	r3, [pc, #40]	; (8003fb8 <BSP_TS_Init+0x74>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	4a0a      	ldr	r2, [pc, #40]	; (8003fbc <BSP_TS_Init+0x78>)
 8003f94:	7812      	ldrb	r2, [r2, #0]
 8003f96:	b292      	uxth	r2, r2
 8003f98:	4610      	mov	r0, r2
 8003f9a:	4798      	blx	r3
 8003f9c:	e001      	b.n	8003fa2 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003fa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa4:	4618      	mov	r0, r3
 8003fa6:	3710      	adds	r7, #16
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	bd80      	pop	{r7, pc}
 8003fac:	200004f8 	.word	0x200004f8
 8003fb0:	200004fa 	.word	0x200004fa
 8003fb4:	20000000 	.word	0x20000000
 8003fb8:	200004f4 	.word	0x200004f4
 8003fbc:	200004fd 	.word	0x200004fd
 8003fc0:	200004fc 	.word	0x200004fc

08003fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003fca:	4b11      	ldr	r3, [pc, #68]	; (8004010 <HAL_MspInit+0x4c>)
 8003fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fce:	4a10      	ldr	r2, [pc, #64]	; (8004010 <HAL_MspInit+0x4c>)
 8003fd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003fd6:	4b0e      	ldr	r3, [pc, #56]	; (8004010 <HAL_MspInit+0x4c>)
 8003fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fde:	607b      	str	r3, [r7, #4]
 8003fe0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003fe2:	4b0b      	ldr	r3, [pc, #44]	; (8004010 <HAL_MspInit+0x4c>)
 8003fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003fe6:	4a0a      	ldr	r2, [pc, #40]	; (8004010 <HAL_MspInit+0x4c>)
 8003fe8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fec:	6453      	str	r3, [r2, #68]	; 0x44
 8003fee:	4b08      	ldr	r3, [pc, #32]	; (8004010 <HAL_MspInit+0x4c>)
 8003ff0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ff2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ff6:	603b      	str	r3, [r7, #0]
 8003ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	210f      	movs	r1, #15
 8003ffe:	f06f 0001 	mvn.w	r0, #1
 8004002:	f001 faeb 	bl	80055dc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004006:	bf00      	nop
 8004008:	3708      	adds	r7, #8
 800400a:	46bd      	mov	sp, r7
 800400c:	bd80      	pop	{r7, pc}
 800400e:	bf00      	nop
 8004010:	40023800 	.word	0x40023800

08004014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b08c      	sub	sp, #48	; 0x30
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800401c:	f107 031c 	add.w	r3, r7, #28
 8004020:	2200      	movs	r2, #0
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	605a      	str	r2, [r3, #4]
 8004026:	609a      	str	r2, [r3, #8]
 8004028:	60da      	str	r2, [r3, #12]
 800402a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a2a      	ldr	r2, [pc, #168]	; (80040dc <HAL_ADC_MspInit+0xc8>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d124      	bne.n	8004080 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004036:	4b2a      	ldr	r3, [pc, #168]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800403a:	4a29      	ldr	r2, [pc, #164]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 800403c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004040:	6453      	str	r3, [r2, #68]	; 0x44
 8004042:	4b27      	ldr	r3, [pc, #156]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004046:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800404a:	61bb      	str	r3, [r7, #24]
 800404c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800404e:	4b24      	ldr	r3, [pc, #144]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004052:	4a23      	ldr	r2, [pc, #140]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004054:	f043 0301 	orr.w	r3, r3, #1
 8004058:	6313      	str	r3, [r2, #48]	; 0x30
 800405a:	4b21      	ldr	r3, [pc, #132]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405e:	f003 0301 	and.w	r3, r3, #1
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004066:	2301      	movs	r3, #1
 8004068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800406a:	2303      	movs	r3, #3
 800406c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800406e:	2300      	movs	r3, #0
 8004070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004072:	f107 031c 	add.w	r3, r7, #28
 8004076:	4619      	mov	r1, r3
 8004078:	481a      	ldr	r0, [pc, #104]	; (80040e4 <HAL_ADC_MspInit+0xd0>)
 800407a:	f002 f811 	bl	80060a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 800407e:	e029      	b.n	80040d4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a18      	ldr	r2, [pc, #96]	; (80040e8 <HAL_ADC_MspInit+0xd4>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d124      	bne.n	80040d4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 800408a:	4b15      	ldr	r3, [pc, #84]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 800408c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800408e:	4a14      	ldr	r2, [pc, #80]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004090:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004094:	6453      	str	r3, [r2, #68]	; 0x44
 8004096:	4b12      	ldr	r3, [pc, #72]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 8004098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800409a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800409e:	613b      	str	r3, [r7, #16]
 80040a0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80040a2:	4b0f      	ldr	r3, [pc, #60]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 80040a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a6:	4a0e      	ldr	r2, [pc, #56]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 80040a8:	f043 0320 	orr.w	r3, r3, #32
 80040ac:	6313      	str	r3, [r2, #48]	; 0x30
 80040ae:	4b0c      	ldr	r3, [pc, #48]	; (80040e0 <HAL_ADC_MspInit+0xcc>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b2:	f003 0320 	and.w	r3, r3, #32
 80040b6:	60fb      	str	r3, [r7, #12]
 80040b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 80040ba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80040be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040c0:	2303      	movs	r3, #3
 80040c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040c4:	2300      	movs	r3, #0
 80040c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80040c8:	f107 031c 	add.w	r3, r7, #28
 80040cc:	4619      	mov	r1, r3
 80040ce:	4807      	ldr	r0, [pc, #28]	; (80040ec <HAL_ADC_MspInit+0xd8>)
 80040d0:	f001 ffe6 	bl	80060a0 <HAL_GPIO_Init>
}
 80040d4:	bf00      	nop
 80040d6:	3730      	adds	r7, #48	; 0x30
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}
 80040dc:	40012000 	.word	0x40012000
 80040e0:	40023800 	.word	0x40023800
 80040e4:	40020000 	.word	0x40020000
 80040e8:	40012200 	.word	0x40012200
 80040ec:	40021400 	.word	0x40021400

080040f0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80040f0:	b580      	push	{r7, lr}
 80040f2:	b08a      	sub	sp, #40	; 0x28
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040f8:	f107 0314 	add.w	r3, r7, #20
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]
 8004100:	605a      	str	r2, [r3, #4]
 8004102:	609a      	str	r2, [r3, #8]
 8004104:	60da      	str	r2, [r3, #12]
 8004106:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4a19      	ldr	r2, [pc, #100]	; (8004174 <HAL_DAC_MspInit+0x84>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d12b      	bne.n	800416a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <HAL_DAC_MspInit+0x88>)
 8004114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004116:	4a18      	ldr	r2, [pc, #96]	; (8004178 <HAL_DAC_MspInit+0x88>)
 8004118:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800411c:	6413      	str	r3, [r2, #64]	; 0x40
 800411e:	4b16      	ldr	r3, [pc, #88]	; (8004178 <HAL_DAC_MspInit+0x88>)
 8004120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004122:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004126:	613b      	str	r3, [r7, #16]
 8004128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800412a:	4b13      	ldr	r3, [pc, #76]	; (8004178 <HAL_DAC_MspInit+0x88>)
 800412c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412e:	4a12      	ldr	r2, [pc, #72]	; (8004178 <HAL_DAC_MspInit+0x88>)
 8004130:	f043 0301 	orr.w	r3, r3, #1
 8004134:	6313      	str	r3, [r2, #48]	; 0x30
 8004136:	4b10      	ldr	r3, [pc, #64]	; (8004178 <HAL_DAC_MspInit+0x88>)
 8004138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413a:	f003 0301 	and.w	r3, r3, #1
 800413e:	60fb      	str	r3, [r7, #12]
 8004140:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004142:	2310      	movs	r3, #16
 8004144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004146:	2303      	movs	r3, #3
 8004148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414a:	2300      	movs	r3, #0
 800414c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800414e:	f107 0314 	add.w	r3, r7, #20
 8004152:	4619      	mov	r1, r3
 8004154:	4809      	ldr	r0, [pc, #36]	; (800417c <HAL_DAC_MspInit+0x8c>)
 8004156:	f001 ffa3 	bl	80060a0 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800415a:	2200      	movs	r2, #0
 800415c:	2100      	movs	r1, #0
 800415e:	2036      	movs	r0, #54	; 0x36
 8004160:	f001 fa3c 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004164:	2036      	movs	r0, #54	; 0x36
 8004166:	f001 fa55 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800416a:	bf00      	nop
 800416c:	3728      	adds	r7, #40	; 0x28
 800416e:	46bd      	mov	sp, r7
 8004170:	bd80      	pop	{r7, pc}
 8004172:	bf00      	nop
 8004174:	40007400 	.word	0x40007400
 8004178:	40023800 	.word	0x40023800
 800417c:	40020000 	.word	0x40020000

08004180 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004180:	b480      	push	{r7}
 8004182:	b085      	sub	sp, #20
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a0a      	ldr	r2, [pc, #40]	; (80041b8 <HAL_DMA2D_MspInit+0x38>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10b      	bne.n	80041aa <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004192:	4b0a      	ldr	r3, [pc, #40]	; (80041bc <HAL_DMA2D_MspInit+0x3c>)
 8004194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004196:	4a09      	ldr	r2, [pc, #36]	; (80041bc <HAL_DMA2D_MspInit+0x3c>)
 8004198:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800419c:	6313      	str	r3, [r2, #48]	; 0x30
 800419e:	4b07      	ldr	r3, [pc, #28]	; (80041bc <HAL_DMA2D_MspInit+0x3c>)
 80041a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041a2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80041a6:	60fb      	str	r3, [r7, #12]
 80041a8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 80041aa:	bf00      	nop
 80041ac:	3714      	adds	r7, #20
 80041ae:	46bd      	mov	sp, r7
 80041b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b4:	4770      	bx	lr
 80041b6:	bf00      	nop
 80041b8:	4002b000 	.word	0x4002b000
 80041bc:	40023800 	.word	0x40023800

080041c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b08c      	sub	sp, #48	; 0x30
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041c8:	f107 031c 	add.w	r3, r7, #28
 80041cc:	2200      	movs	r2, #0
 80041ce:	601a      	str	r2, [r3, #0]
 80041d0:	605a      	str	r2, [r3, #4]
 80041d2:	609a      	str	r2, [r3, #8]
 80041d4:	60da      	str	r2, [r3, #12]
 80041d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a2f      	ldr	r2, [pc, #188]	; (800429c <HAL_I2C_MspInit+0xdc>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d129      	bne.n	8004236 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	4b2f      	ldr	r3, [pc, #188]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	4a2e      	ldr	r2, [pc, #184]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	6313      	str	r3, [r2, #48]	; 0x30
 80041ee:	4b2c      	ldr	r3, [pc, #176]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	61bb      	str	r3, [r7, #24]
 80041f8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80041fa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80041fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004200:	2312      	movs	r3, #18
 8004202:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004204:	2301      	movs	r3, #1
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004208:	2300      	movs	r3, #0
 800420a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800420c:	2304      	movs	r3, #4
 800420e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004210:	f107 031c 	add.w	r3, r7, #28
 8004214:	4619      	mov	r1, r3
 8004216:	4823      	ldr	r0, [pc, #140]	; (80042a4 <HAL_I2C_MspInit+0xe4>)
 8004218:	f001 ff42 	bl	80060a0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800421c:	4b20      	ldr	r3, [pc, #128]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 800421e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004220:	4a1f      	ldr	r2, [pc, #124]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 8004222:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004226:	6413      	str	r3, [r2, #64]	; 0x40
 8004228:	4b1d      	ldr	r3, [pc, #116]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 800422a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004230:	617b      	str	r3, [r7, #20]
 8004232:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004234:	e02d      	b.n	8004292 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	; (80042a8 <HAL_I2C_MspInit+0xe8>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d128      	bne.n	8004292 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004240:	4b17      	ldr	r3, [pc, #92]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 8004242:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004244:	4a16      	ldr	r2, [pc, #88]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 8004246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800424a:	6313      	str	r3, [r2, #48]	; 0x30
 800424c:	4b14      	ldr	r3, [pc, #80]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 800424e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004258:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800425c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800425e:	2312      	movs	r3, #18
 8004260:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004262:	2301      	movs	r3, #1
 8004264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004266:	2303      	movs	r3, #3
 8004268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800426a:	2304      	movs	r3, #4
 800426c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800426e:	f107 031c 	add.w	r3, r7, #28
 8004272:	4619      	mov	r1, r3
 8004274:	480d      	ldr	r0, [pc, #52]	; (80042ac <HAL_I2C_MspInit+0xec>)
 8004276:	f001 ff13 	bl	80060a0 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800427a:	4b09      	ldr	r3, [pc, #36]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 800427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800427e:	4a08      	ldr	r2, [pc, #32]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 8004280:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004284:	6413      	str	r3, [r2, #64]	; 0x40
 8004286:	4b06      	ldr	r3, [pc, #24]	; (80042a0 <HAL_I2C_MspInit+0xe0>)
 8004288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800428a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800428e:	60fb      	str	r3, [r7, #12]
 8004290:	68fb      	ldr	r3, [r7, #12]
}
 8004292:	bf00      	nop
 8004294:	3730      	adds	r7, #48	; 0x30
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}
 800429a:	bf00      	nop
 800429c:	40005400 	.word	0x40005400
 80042a0:	40023800 	.word	0x40023800
 80042a4:	40020400 	.word	0x40020400
 80042a8:	40005c00 	.word	0x40005c00
 80042ac:	40021c00 	.word	0x40021c00

080042b0 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	4a15      	ldr	r2, [pc, #84]	; (8004314 <HAL_I2C_MspDeInit+0x64>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d110      	bne.n	80042e4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80042c2:	4b15      	ldr	r3, [pc, #84]	; (8004318 <HAL_I2C_MspDeInit+0x68>)
 80042c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042c6:	4a14      	ldr	r2, [pc, #80]	; (8004318 <HAL_I2C_MspDeInit+0x68>)
 80042c8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80042cc:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80042ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80042d2:	4812      	ldr	r0, [pc, #72]	; (800431c <HAL_I2C_MspDeInit+0x6c>)
 80042d4:	f002 f88e 	bl	80063f4 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80042d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80042dc:	480f      	ldr	r0, [pc, #60]	; (800431c <HAL_I2C_MspDeInit+0x6c>)
 80042de:	f002 f889 	bl	80063f4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80042e2:	e013      	b.n	800430c <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	4a0d      	ldr	r2, [pc, #52]	; (8004320 <HAL_I2C_MspDeInit+0x70>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d10e      	bne.n	800430c <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80042ee:	4b0a      	ldr	r3, [pc, #40]	; (8004318 <HAL_I2C_MspDeInit+0x68>)
 80042f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042f2:	4a09      	ldr	r2, [pc, #36]	; (8004318 <HAL_I2C_MspDeInit+0x68>)
 80042f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80042f8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80042fa:	2180      	movs	r1, #128	; 0x80
 80042fc:	4809      	ldr	r0, [pc, #36]	; (8004324 <HAL_I2C_MspDeInit+0x74>)
 80042fe:	f002 f879 	bl	80063f4 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 8004302:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004306:	4807      	ldr	r0, [pc, #28]	; (8004324 <HAL_I2C_MspDeInit+0x74>)
 8004308:	f002 f874 	bl	80063f4 <HAL_GPIO_DeInit>
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}
 8004314:	40005400 	.word	0x40005400
 8004318:	40023800 	.word	0x40023800
 800431c:	40020400 	.word	0x40020400
 8004320:	40005c00 	.word	0x40005c00
 8004324:	40021c00 	.word	0x40021c00

08004328 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004330:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]
 8004338:	605a      	str	r2, [r3, #4]
 800433a:	609a      	str	r2, [r3, #8]
 800433c:	60da      	str	r2, [r3, #12]
 800433e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	4a55      	ldr	r2, [pc, #340]	; (800449c <HAL_LTDC_MspInit+0x174>)
 8004346:	4293      	cmp	r3, r2
 8004348:	f040 80a3 	bne.w	8004492 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800434c:	4b54      	ldr	r3, [pc, #336]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	4a53      	ldr	r2, [pc, #332]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 8004352:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004356:	6453      	str	r3, [r2, #68]	; 0x44
 8004358:	4b51      	ldr	r3, [pc, #324]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800435a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800435c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004360:	623b      	str	r3, [r7, #32]
 8004362:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004364:	4b4e      	ldr	r3, [pc, #312]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 8004366:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004368:	4a4d      	ldr	r2, [pc, #308]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800436a:	f043 0310 	orr.w	r3, r3, #16
 800436e:	6313      	str	r3, [r2, #48]	; 0x30
 8004370:	4b4b      	ldr	r3, [pc, #300]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 8004372:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004374:	f003 0310 	and.w	r3, r3, #16
 8004378:	61fb      	str	r3, [r7, #28]
 800437a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800437c:	4b48      	ldr	r3, [pc, #288]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800437e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004380:	4a47      	ldr	r2, [pc, #284]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 8004382:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004386:	6313      	str	r3, [r2, #48]	; 0x30
 8004388:	4b45      	ldr	r3, [pc, #276]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800438a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800438c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004390:	61bb      	str	r3, [r7, #24]
 8004392:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004394:	4b42      	ldr	r3, [pc, #264]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 8004396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004398:	4a41      	ldr	r2, [pc, #260]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 800439a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800439e:	6313      	str	r3, [r2, #48]	; 0x30
 80043a0:	4b3f      	ldr	r3, [pc, #252]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a8:	617b      	str	r3, [r7, #20]
 80043aa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80043ac:	4b3c      	ldr	r3, [pc, #240]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b0:	4a3b      	ldr	r2, [pc, #236]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80043b6:	6313      	str	r3, [r2, #48]	; 0x30
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80043c0:	613b      	str	r3, [r7, #16]
 80043c2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043c4:	4b36      	ldr	r3, [pc, #216]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043c8:	4a35      	ldr	r2, [pc, #212]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043ce:	6313      	str	r3, [r2, #48]	; 0x30
 80043d0:	4b33      	ldr	r3, [pc, #204]	; (80044a0 <HAL_LTDC_MspInit+0x178>)
 80043d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043d4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d8:	60fb      	str	r3, [r7, #12]
 80043da:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80043dc:	2310      	movs	r3, #16
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80043e0:	2302      	movs	r3, #2
 80043e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80043e4:	2300      	movs	r3, #0
 80043e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80043e8:	2300      	movs	r3, #0
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80043ec:	230e      	movs	r3, #14
 80043ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80043f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80043f4:	4619      	mov	r1, r3
 80043f6:	482b      	ldr	r0, [pc, #172]	; (80044a4 <HAL_LTDC_MspInit+0x17c>)
 80043f8:	f001 fe52 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80043fc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004400:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800440e:	230e      	movs	r3, #14
 8004410:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8004412:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004416:	4619      	mov	r1, r3
 8004418:	4823      	ldr	r0, [pc, #140]	; (80044a8 <HAL_LTDC_MspInit+0x180>)
 800441a:	f001 fe41 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 800441e:	23f7      	movs	r3, #247	; 0xf7
 8004420:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004422:	2302      	movs	r3, #2
 8004424:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004426:	2300      	movs	r3, #0
 8004428:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800442a:	2300      	movs	r3, #0
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800442e:	230e      	movs	r3, #14
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004432:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004436:	4619      	mov	r1, r3
 8004438:	481c      	ldr	r0, [pc, #112]	; (80044ac <HAL_LTDC_MspInit+0x184>)
 800443a:	f001 fe31 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800443e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004444:	2302      	movs	r3, #2
 8004446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004448:	2300      	movs	r3, #0
 800444a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800444c:	2300      	movs	r3, #0
 800444e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004450:	2309      	movs	r3, #9
 8004452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004458:	4619      	mov	r1, r3
 800445a:	4815      	ldr	r0, [pc, #84]	; (80044b0 <HAL_LTDC_MspInit+0x188>)
 800445c:	f001 fe20 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004460:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004464:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004466:	2302      	movs	r3, #2
 8004468:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800446a:	2300      	movs	r3, #0
 800446c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800446e:	2300      	movs	r3, #0
 8004470:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004472:	230e      	movs	r3, #14
 8004474:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004476:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800447a:	4619      	mov	r1, r3
 800447c:	480d      	ldr	r0, [pc, #52]	; (80044b4 <HAL_LTDC_MspInit+0x18c>)
 800447e:	f001 fe0f 	bl	80060a0 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004482:	2200      	movs	r2, #0
 8004484:	2105      	movs	r1, #5
 8004486:	2058      	movs	r0, #88	; 0x58
 8004488:	f001 f8a8 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800448c:	2058      	movs	r0, #88	; 0x58
 800448e:	f001 f8c1 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004492:	bf00      	nop
 8004494:	3738      	adds	r7, #56	; 0x38
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	40016800 	.word	0x40016800
 80044a0:	40023800 	.word	0x40023800
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40022400 	.word	0x40022400
 80044ac:	40022800 	.word	0x40022800
 80044b0:	40021800 	.word	0x40021800
 80044b4:	40022000 	.word	0x40022000

080044b8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b083      	sub	sp, #12
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a07      	ldr	r2, [pc, #28]	; (80044e4 <HAL_RTC_MspInit+0x2c>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d105      	bne.n	80044d6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80044ca:	4b07      	ldr	r3, [pc, #28]	; (80044e8 <HAL_RTC_MspInit+0x30>)
 80044cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044ce:	4a06      	ldr	r2, [pc, #24]	; (80044e8 <HAL_RTC_MspInit+0x30>)
 80044d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044d4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80044d6:	bf00      	nop
 80044d8:	370c      	adds	r7, #12
 80044da:	46bd      	mov	sp, r7
 80044dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e0:	4770      	bx	lr
 80044e2:	bf00      	nop
 80044e4:	40002800 	.word	0x40002800
 80044e8:	40023800 	.word	0x40023800

080044ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80044ec:	b580      	push	{r7, lr}
 80044ee:	b08a      	sub	sp, #40	; 0x28
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044f4:	f107 0314 	add.w	r3, r7, #20
 80044f8:	2200      	movs	r2, #0
 80044fa:	601a      	str	r2, [r3, #0]
 80044fc:	605a      	str	r2, [r3, #4]
 80044fe:	609a      	str	r2, [r3, #8]
 8004500:	60da      	str	r2, [r3, #12]
 8004502:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	4a2d      	ldr	r2, [pc, #180]	; (80045c0 <HAL_SPI_MspInit+0xd4>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d154      	bne.n	80045b8 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800450e:	4b2d      	ldr	r3, [pc, #180]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	4a2c      	ldr	r2, [pc, #176]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004514:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	4b2a      	ldr	r3, [pc, #168]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004522:	613b      	str	r3, [r7, #16]
 8004524:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004526:	4b27      	ldr	r3, [pc, #156]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800452a:	4a26      	ldr	r2, [pc, #152]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6313      	str	r3, [r2, #48]	; 0x30
 8004532:	4b24      	ldr	r3, [pc, #144]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004536:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800453a:	60fb      	str	r3, [r7, #12]
 800453c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800453e:	4b21      	ldr	r3, [pc, #132]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004542:	4a20      	ldr	r2, [pc, #128]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 8004544:	f043 0302 	orr.w	r3, r3, #2
 8004548:	6313      	str	r3, [r2, #48]	; 0x30
 800454a:	4b1e      	ldr	r3, [pc, #120]	; (80045c4 <HAL_SPI_MspInit+0xd8>)
 800454c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800454e:	f003 0302 	and.w	r3, r3, #2
 8004552:	60bb      	str	r3, [r7, #8]
 8004554:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004556:	2302      	movs	r3, #2
 8004558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800455a:	2302      	movs	r3, #2
 800455c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800455e:	2300      	movs	r3, #0
 8004560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004562:	2300      	movs	r3, #0
 8004564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004566:	2305      	movs	r3, #5
 8004568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800456a:	f107 0314 	add.w	r3, r7, #20
 800456e:	4619      	mov	r1, r3
 8004570:	4815      	ldr	r0, [pc, #84]	; (80045c8 <HAL_SPI_MspInit+0xdc>)
 8004572:	f001 fd95 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004576:	2301      	movs	r3, #1
 8004578:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800457a:	2302      	movs	r3, #2
 800457c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800457e:	2300      	movs	r3, #0
 8004580:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004582:	2303      	movs	r3, #3
 8004584:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004586:	2305      	movs	r3, #5
 8004588:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800458a:	f107 0314 	add.w	r3, r7, #20
 800458e:	4619      	mov	r1, r3
 8004590:	480d      	ldr	r0, [pc, #52]	; (80045c8 <HAL_SPI_MspInit+0xdc>)
 8004592:	f001 fd85 	bl	80060a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004596:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800459a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a4:	2303      	movs	r3, #3
 80045a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80045a8:	2305      	movs	r3, #5
 80045aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ac:	f107 0314 	add.w	r3, r7, #20
 80045b0:	4619      	mov	r1, r3
 80045b2:	4806      	ldr	r0, [pc, #24]	; (80045cc <HAL_SPI_MspInit+0xe0>)
 80045b4:	f001 fd74 	bl	80060a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80045b8:	bf00      	nop
 80045ba:	3728      	adds	r7, #40	; 0x28
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40003800 	.word	0x40003800
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40022000 	.word	0x40022000
 80045cc:	40020400 	.word	0x40020400

080045d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b089      	sub	sp, #36	; 0x24
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4a2e      	ldr	r2, [pc, #184]	; (8004698 <HAL_TIM_Base_MspInit+0xc8>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d10c      	bne.n	80045fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80045e2:	4b2e      	ldr	r3, [pc, #184]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 80045e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045e6:	4a2d      	ldr	r2, [pc, #180]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 80045e8:	f043 0301 	orr.w	r3, r3, #1
 80045ec:	6453      	str	r3, [r2, #68]	; 0x44
 80045ee:	4b2b      	ldr	r3, [pc, #172]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	61fb      	str	r3, [r7, #28]
 80045f8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80045fa:	e046      	b.n	800468a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004604:	d10c      	bne.n	8004620 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004606:	4b25      	ldr	r3, [pc, #148]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800460a:	4a24      	ldr	r2, [pc, #144]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 800460c:	f043 0301 	orr.w	r3, r3, #1
 8004610:	6413      	str	r3, [r2, #64]	; 0x40
 8004612:	4b22      	ldr	r3, [pc, #136]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004616:	f003 0301 	and.w	r3, r3, #1
 800461a:	61bb      	str	r3, [r7, #24]
 800461c:	69bb      	ldr	r3, [r7, #24]
}
 800461e:	e034      	b.n	800468a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	4a1e      	ldr	r2, [pc, #120]	; (80046a0 <HAL_TIM_Base_MspInit+0xd0>)
 8004626:	4293      	cmp	r3, r2
 8004628:	d10c      	bne.n	8004644 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800462a:	4b1c      	ldr	r3, [pc, #112]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	4a1b      	ldr	r2, [pc, #108]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004630:	f043 0302 	orr.w	r3, r3, #2
 8004634:	6413      	str	r3, [r2, #64]	; 0x40
 8004636:	4b19      	ldr	r3, [pc, #100]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800463a:	f003 0302 	and.w	r3, r3, #2
 800463e:	617b      	str	r3, [r7, #20]
 8004640:	697b      	ldr	r3, [r7, #20]
}
 8004642:	e022      	b.n	800468a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a16      	ldr	r2, [pc, #88]	; (80046a4 <HAL_TIM_Base_MspInit+0xd4>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d10c      	bne.n	8004668 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800464e:	4b13      	ldr	r3, [pc, #76]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004652:	4a12      	ldr	r2, [pc, #72]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004654:	f043 0308 	orr.w	r3, r3, #8
 8004658:	6413      	str	r3, [r2, #64]	; 0x40
 800465a:	4b10      	ldr	r3, [pc, #64]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 800465c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	613b      	str	r3, [r7, #16]
 8004664:	693b      	ldr	r3, [r7, #16]
}
 8004666:	e010      	b.n	800468a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a0e      	ldr	r2, [pc, #56]	; (80046a8 <HAL_TIM_Base_MspInit+0xd8>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d10b      	bne.n	800468a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004672:	4b0a      	ldr	r3, [pc, #40]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004674:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004676:	4a09      	ldr	r2, [pc, #36]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004678:	f043 0302 	orr.w	r3, r3, #2
 800467c:	6453      	str	r3, [r2, #68]	; 0x44
 800467e:	4b07      	ldr	r3, [pc, #28]	; (800469c <HAL_TIM_Base_MspInit+0xcc>)
 8004680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004682:	f003 0302 	and.w	r3, r3, #2
 8004686:	60fb      	str	r3, [r7, #12]
 8004688:	68fb      	ldr	r3, [r7, #12]
}
 800468a:	bf00      	nop
 800468c:	3724      	adds	r7, #36	; 0x24
 800468e:	46bd      	mov	sp, r7
 8004690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004694:	4770      	bx	lr
 8004696:	bf00      	nop
 8004698:	40010000 	.word	0x40010000
 800469c:	40023800 	.word	0x40023800
 80046a0:	40000400 	.word	0x40000400
 80046a4:	40000c00 	.word	0x40000c00
 80046a8:	40010400 	.word	0x40010400

080046ac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80046ac:	b580      	push	{r7, lr}
 80046ae:	b088      	sub	sp, #32
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046b4:	f107 030c 	add.w	r3, r7, #12
 80046b8:	2200      	movs	r2, #0
 80046ba:	601a      	str	r2, [r3, #0]
 80046bc:	605a      	str	r2, [r3, #4]
 80046be:	609a      	str	r2, [r3, #8]
 80046c0:	60da      	str	r2, [r3, #12]
 80046c2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a11      	ldr	r2, [pc, #68]	; (8004710 <HAL_TIM_MspPostInit+0x64>)
 80046ca:	4293      	cmp	r3, r2
 80046cc:	d11b      	bne.n	8004706 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80046ce:	4b11      	ldr	r3, [pc, #68]	; (8004714 <HAL_TIM_MspPostInit+0x68>)
 80046d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d2:	4a10      	ldr	r2, [pc, #64]	; (8004714 <HAL_TIM_MspPostInit+0x68>)
 80046d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80046d8:	6313      	str	r3, [r2, #48]	; 0x30
 80046da:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <HAL_TIM_MspPostInit+0x68>)
 80046dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80046e2:	60bb      	str	r3, [r7, #8]
 80046e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80046e6:	2304      	movs	r3, #4
 80046e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046ea:	2302      	movs	r3, #2
 80046ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ee:	2300      	movs	r3, #0
 80046f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f2:	2300      	movs	r3, #0
 80046f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80046f6:	2303      	movs	r3, #3
 80046f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80046fa:	f107 030c 	add.w	r3, r7, #12
 80046fe:	4619      	mov	r1, r3
 8004700:	4805      	ldr	r0, [pc, #20]	; (8004718 <HAL_TIM_MspPostInit+0x6c>)
 8004702:	f001 fccd 	bl	80060a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 8004706:	bf00      	nop
 8004708:	3720      	adds	r7, #32
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
 800470e:	bf00      	nop
 8004710:	40010400 	.word	0x40010400
 8004714:	40023800 	.word	0x40023800
 8004718:	40022000 	.word	0x40022000

0800471c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b08e      	sub	sp, #56	; 0x38
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004724:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]
 800472c:	605a      	str	r2, [r3, #4]
 800472e:	609a      	str	r2, [r3, #8]
 8004730:	60da      	str	r2, [r3, #12]
 8004732:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a5b      	ldr	r2, [pc, #364]	; (80048a8 <HAL_UART_MspInit+0x18c>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d130      	bne.n	80047a0 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800473e:	4b5b      	ldr	r3, [pc, #364]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a5a      	ldr	r2, [pc, #360]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004744:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b58      	ldr	r3, [pc, #352]	; (80048ac <HAL_UART_MspInit+0x190>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004752:	623b      	str	r3, [r7, #32]
 8004754:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004756:	4b55      	ldr	r3, [pc, #340]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800475a:	4a54      	ldr	r2, [pc, #336]	; (80048ac <HAL_UART_MspInit+0x190>)
 800475c:	f043 0320 	orr.w	r3, r3, #32
 8004760:	6313      	str	r3, [r2, #48]	; 0x30
 8004762:	4b52      	ldr	r3, [pc, #328]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004766:	f003 0320 	and.w	r3, r3, #32
 800476a:	61fb      	str	r3, [r7, #28]
 800476c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800476e:	23c0      	movs	r3, #192	; 0xc0
 8004770:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004772:	2302      	movs	r3, #2
 8004774:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004776:	2300      	movs	r3, #0
 8004778:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800477a:	2303      	movs	r3, #3
 800477c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800477e:	2308      	movs	r3, #8
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004786:	4619      	mov	r1, r3
 8004788:	4849      	ldr	r0, [pc, #292]	; (80048b0 <HAL_UART_MspInit+0x194>)
 800478a:	f001 fc89 	bl	80060a0 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800478e:	2200      	movs	r2, #0
 8004790:	2105      	movs	r1, #5
 8004792:	2052      	movs	r0, #82	; 0x52
 8004794:	f000 ff22 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8004798:	2052      	movs	r0, #82	; 0x52
 800479a:	f000 ff3b 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800479e:	e07f      	b.n	80048a0 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a43      	ldr	r2, [pc, #268]	; (80048b4 <HAL_UART_MspInit+0x198>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d14d      	bne.n	8004846 <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80047aa:	4b40      	ldr	r3, [pc, #256]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ae:	4a3f      	ldr	r2, [pc, #252]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047b0:	f043 0310 	orr.w	r3, r3, #16
 80047b4:	6453      	str	r3, [r2, #68]	; 0x44
 80047b6:	4b3d      	ldr	r3, [pc, #244]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047ba:	f003 0310 	and.w	r3, r3, #16
 80047be:	61bb      	str	r3, [r7, #24]
 80047c0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80047c2:	4b3a      	ldr	r3, [pc, #232]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c6:	4a39      	ldr	r2, [pc, #228]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047c8:	f043 0302 	orr.w	r3, r3, #2
 80047cc:	6313      	str	r3, [r2, #48]	; 0x30
 80047ce:	4b37      	ldr	r3, [pc, #220]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047d2:	f003 0302 	and.w	r3, r3, #2
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047da:	4b34      	ldr	r3, [pc, #208]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047de:	4a33      	ldr	r2, [pc, #204]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047e0:	f043 0301 	orr.w	r3, r3, #1
 80047e4:	6313      	str	r3, [r2, #48]	; 0x30
 80047e6:	4b31      	ldr	r3, [pc, #196]	; (80048ac <HAL_UART_MspInit+0x190>)
 80047e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	613b      	str	r3, [r7, #16]
 80047f0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80047f2:	2380      	movs	r3, #128	; 0x80
 80047f4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f6:	2302      	movs	r3, #2
 80047f8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fa:	2300      	movs	r3, #0
 80047fc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80047fe:	2300      	movs	r3, #0
 8004800:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004802:	2307      	movs	r3, #7
 8004804:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8004806:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800480a:	4619      	mov	r1, r3
 800480c:	482a      	ldr	r0, [pc, #168]	; (80048b8 <HAL_UART_MspInit+0x19c>)
 800480e:	f001 fc47 	bl	80060a0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8004812:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004816:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004820:	2300      	movs	r3, #0
 8004822:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004824:	2307      	movs	r3, #7
 8004826:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004828:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800482c:	4619      	mov	r1, r3
 800482e:	4823      	ldr	r0, [pc, #140]	; (80048bc <HAL_UART_MspInit+0x1a0>)
 8004830:	f001 fc36 	bl	80060a0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004834:	2200      	movs	r2, #0
 8004836:	2107      	movs	r1, #7
 8004838:	2025      	movs	r0, #37	; 0x25
 800483a:	f000 fecf 	bl	80055dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800483e:	2025      	movs	r0, #37	; 0x25
 8004840:	f000 fee8 	bl	8005614 <HAL_NVIC_EnableIRQ>
}
 8004844:	e02c      	b.n	80048a0 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	681b      	ldr	r3, [r3, #0]
 800484a:	4a1d      	ldr	r2, [pc, #116]	; (80048c0 <HAL_UART_MspInit+0x1a4>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d127      	bne.n	80048a0 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004850:	4b16      	ldr	r3, [pc, #88]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004854:	4a15      	ldr	r2, [pc, #84]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004856:	f043 0320 	orr.w	r3, r3, #32
 800485a:	6453      	str	r3, [r2, #68]	; 0x44
 800485c:	4b13      	ldr	r3, [pc, #76]	; (80048ac <HAL_UART_MspInit+0x190>)
 800485e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004860:	f003 0320 	and.w	r3, r3, #32
 8004864:	60fb      	str	r3, [r7, #12]
 8004866:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004868:	4b10      	ldr	r3, [pc, #64]	; (80048ac <HAL_UART_MspInit+0x190>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800486c:	4a0f      	ldr	r2, [pc, #60]	; (80048ac <HAL_UART_MspInit+0x190>)
 800486e:	f043 0304 	orr.w	r3, r3, #4
 8004872:	6313      	str	r3, [r2, #48]	; 0x30
 8004874:	4b0d      	ldr	r3, [pc, #52]	; (80048ac <HAL_UART_MspInit+0x190>)
 8004876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004878:	f003 0304 	and.w	r3, r3, #4
 800487c:	60bb      	str	r3, [r7, #8]
 800487e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004880:	23c0      	movs	r3, #192	; 0xc0
 8004882:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004884:	2302      	movs	r3, #2
 8004886:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004888:	2300      	movs	r3, #0
 800488a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800488c:	2303      	movs	r3, #3
 800488e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004890:	2308      	movs	r3, #8
 8004892:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004894:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004898:	4619      	mov	r1, r3
 800489a:	480a      	ldr	r0, [pc, #40]	; (80048c4 <HAL_UART_MspInit+0x1a8>)
 800489c:	f001 fc00 	bl	80060a0 <HAL_GPIO_Init>
}
 80048a0:	bf00      	nop
 80048a2:	3738      	adds	r7, #56	; 0x38
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40007800 	.word	0x40007800
 80048ac:	40023800 	.word	0x40023800
 80048b0:	40021400 	.word	0x40021400
 80048b4:	40011000 	.word	0x40011000
 80048b8:	40020400 	.word	0x40020400
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40011400 	.word	0x40011400
 80048c4:	40020800 	.word	0x40020800

080048c8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	2200      	movs	r2, #0
 80048d2:	601a      	str	r2, [r3, #0]
 80048d4:	605a      	str	r2, [r3, #4]
 80048d6:	609a      	str	r2, [r3, #8]
 80048d8:	60da      	str	r2, [r3, #12]
 80048da:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80048dc:	4b3a      	ldr	r3, [pc, #232]	; (80049c8 <HAL_FMC_MspInit+0x100>)
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d16d      	bne.n	80049c0 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80048e4:	4b38      	ldr	r3, [pc, #224]	; (80049c8 <HAL_FMC_MspInit+0x100>)
 80048e6:	2201      	movs	r2, #1
 80048e8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80048ea:	4b38      	ldr	r3, [pc, #224]	; (80049cc <HAL_FMC_MspInit+0x104>)
 80048ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ee:	4a37      	ldr	r2, [pc, #220]	; (80049cc <HAL_FMC_MspInit+0x104>)
 80048f0:	f043 0301 	orr.w	r3, r3, #1
 80048f4:	6393      	str	r3, [r2, #56]	; 0x38
 80048f6:	4b35      	ldr	r3, [pc, #212]	; (80049cc <HAL_FMC_MspInit+0x104>)
 80048f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048fa:	f003 0301 	and.w	r3, r3, #1
 80048fe:	603b      	str	r3, [r7, #0]
 8004900:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 8004902:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004906:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004908:	2302      	movs	r3, #2
 800490a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800490c:	2300      	movs	r3, #0
 800490e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004910:	2303      	movs	r3, #3
 8004912:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004914:	230c      	movs	r3, #12
 8004916:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004918:	1d3b      	adds	r3, r7, #4
 800491a:	4619      	mov	r1, r3
 800491c:	482c      	ldr	r0, [pc, #176]	; (80049d0 <HAL_FMC_MspInit+0x108>)
 800491e:	f001 fbbf 	bl	80060a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 8004922:	f248 1333 	movw	r3, #33075	; 0x8133
 8004926:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004928:	2302      	movs	r3, #2
 800492a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800492c:	2300      	movs	r3, #0
 800492e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004930:	2303      	movs	r3, #3
 8004932:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004934:	230c      	movs	r3, #12
 8004936:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004938:	1d3b      	adds	r3, r7, #4
 800493a:	4619      	mov	r1, r3
 800493c:	4825      	ldr	r0, [pc, #148]	; (80049d4 <HAL_FMC_MspInit+0x10c>)
 800493e:	f001 fbaf 	bl	80060a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004942:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004946:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004948:	2302      	movs	r3, #2
 800494a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800494c:	2300      	movs	r3, #0
 800494e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004950:	2303      	movs	r3, #3
 8004952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004954:	230c      	movs	r3, #12
 8004956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004958:	1d3b      	adds	r3, r7, #4
 800495a:	4619      	mov	r1, r3
 800495c:	481e      	ldr	r0, [pc, #120]	; (80049d8 <HAL_FMC_MspInit+0x110>)
 800495e:	f001 fb9f 	bl	80060a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004962:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004966:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004968:	2302      	movs	r3, #2
 800496a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800496c:	2300      	movs	r3, #0
 800496e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004970:	2303      	movs	r3, #3
 8004972:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004974:	230c      	movs	r3, #12
 8004976:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004978:	1d3b      	adds	r3, r7, #4
 800497a:	4619      	mov	r1, r3
 800497c:	4817      	ldr	r0, [pc, #92]	; (80049dc <HAL_FMC_MspInit+0x114>)
 800497e:	f001 fb8f 	bl	80060a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004982:	2328      	movs	r3, #40	; 0x28
 8004984:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004986:	2302      	movs	r3, #2
 8004988:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800498a:	2300      	movs	r3, #0
 800498c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800498e:	2303      	movs	r3, #3
 8004990:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004992:	230c      	movs	r3, #12
 8004994:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004996:	1d3b      	adds	r3, r7, #4
 8004998:	4619      	mov	r1, r3
 800499a:	4811      	ldr	r0, [pc, #68]	; (80049e0 <HAL_FMC_MspInit+0x118>)
 800499c:	f001 fb80 	bl	80060a0 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80049a0:	2308      	movs	r3, #8
 80049a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80049a4:	2302      	movs	r3, #2
 80049a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80049ac:	2303      	movs	r3, #3
 80049ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80049b0:	230c      	movs	r3, #12
 80049b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80049b4:	1d3b      	adds	r3, r7, #4
 80049b6:	4619      	mov	r1, r3
 80049b8:	480a      	ldr	r0, [pc, #40]	; (80049e4 <HAL_FMC_MspInit+0x11c>)
 80049ba:	f001 fb71 	bl	80060a0 <HAL_GPIO_Init>
 80049be:	e000      	b.n	80049c2 <HAL_FMC_MspInit+0xfa>
    return;
 80049c0:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80049c2:	3718      	adds	r7, #24
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	20000500 	.word	0x20000500
 80049cc:	40023800 	.word	0x40023800
 80049d0:	40021000 	.word	0x40021000
 80049d4:	40021800 	.word	0x40021800
 80049d8:	40020c00 	.word	0x40020c00
 80049dc:	40021400 	.word	0x40021400
 80049e0:	40021c00 	.word	0x40021c00
 80049e4:	40020800 	.word	0x40020800

080049e8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80049f0:	f7ff ff6a 	bl	80048c8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}

080049fc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b08c      	sub	sp, #48	; 0x30
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004a08:	2300      	movs	r3, #0
 8004a0a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	6879      	ldr	r1, [r7, #4]
 8004a10:	2036      	movs	r0, #54	; 0x36
 8004a12:	f000 fde3 	bl	80055dc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004a16:	2036      	movs	r0, #54	; 0x36
 8004a18:	f000 fdfc 	bl	8005614 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004a1c:	4b1f      	ldr	r3, [pc, #124]	; (8004a9c <HAL_InitTick+0xa0>)
 8004a1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a20:	4a1e      	ldr	r2, [pc, #120]	; (8004a9c <HAL_InitTick+0xa0>)
 8004a22:	f043 0310 	orr.w	r3, r3, #16
 8004a26:	6413      	str	r3, [r2, #64]	; 0x40
 8004a28:	4b1c      	ldr	r3, [pc, #112]	; (8004a9c <HAL_InitTick+0xa0>)
 8004a2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2c:	f003 0310 	and.w	r3, r3, #16
 8004a30:	60fb      	str	r3, [r7, #12]
 8004a32:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004a34:	f107 0210 	add.w	r2, r7, #16
 8004a38:	f107 0314 	add.w	r3, r7, #20
 8004a3c:	4611      	mov	r1, r2
 8004a3e:	4618      	mov	r0, r3
 8004a40:	f003 fc12 	bl	8008268 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004a44:	f003 fbe8 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a50:	4a13      	ldr	r2, [pc, #76]	; (8004aa0 <HAL_InitTick+0xa4>)
 8004a52:	fba2 2303 	umull	r2, r3, r2, r3
 8004a56:	0c9b      	lsrs	r3, r3, #18
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004a5c:	4b11      	ldr	r3, [pc, #68]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a5e:	4a12      	ldr	r2, [pc, #72]	; (8004aa8 <HAL_InitTick+0xac>)
 8004a60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004a62:	4b10      	ldr	r3, [pc, #64]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004a68:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004a6a:	4a0e      	ldr	r2, [pc, #56]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a6e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004a70:	4b0c      	ldr	r3, [pc, #48]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a72:	2200      	movs	r2, #0
 8004a74:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004a76:	4b0b      	ldr	r3, [pc, #44]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a78:	2200      	movs	r2, #0
 8004a7a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004a7c:	4809      	ldr	r0, [pc, #36]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a7e:	f004 fdb2 	bl	80095e6 <HAL_TIM_Base_Init>
 8004a82:	4603      	mov	r3, r0
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004a88:	4806      	ldr	r0, [pc, #24]	; (8004aa4 <HAL_InitTick+0xa8>)
 8004a8a:	f004 fdd7 	bl	800963c <HAL_TIM_Base_Start_IT>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	e000      	b.n	8004a94 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3730      	adds	r7, #48	; 0x30
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	40023800 	.word	0x40023800
 8004aa0:	431bde83 	.word	0x431bde83
 8004aa4:	20008d0c 	.word	0x20008d0c
 8004aa8:	40001000 	.word	0x40001000

08004aac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004aac:	b480      	push	{r7}
 8004aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004ab0:	e7fe      	b.n	8004ab0 <NMI_Handler+0x4>

08004ab2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004ab2:	b480      	push	{r7}
 8004ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004ab6:	e7fe      	b.n	8004ab6 <HardFault_Handler+0x4>

08004ab8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004ab8:	b480      	push	{r7}
 8004aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004abc:	e7fe      	b.n	8004abc <MemManage_Handler+0x4>

08004abe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004ac2:	e7fe      	b.n	8004ac2 <BusFault_Handler+0x4>

08004ac4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004ac8:	e7fe      	b.n	8004ac8 <UsageFault_Handler+0x4>

08004aca <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004aca:	b480      	push	{r7}
 8004acc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004ace:	bf00      	nop
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8004ad8:	b580      	push	{r7, lr}
 8004ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004adc:	4802      	ldr	r0, [pc, #8]	; (8004ae8 <USART1_IRQHandler+0x10>)
 8004ade:	f005 fffd 	bl	800aadc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8004ae2:	bf00      	nop
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	200089e4 	.word	0x200089e4

08004aec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 8004af0:	4803      	ldr	r0, [pc, #12]	; (8004b00 <TIM6_DAC_IRQHandler+0x14>)
 8004af2:	f000 fdbf 	bl	8005674 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 8004af6:	4803      	ldr	r0, [pc, #12]	; (8004b04 <TIM6_DAC_IRQHandler+0x18>)
 8004af8:	f004 fdff 	bl	80096fa <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8004afc:	bf00      	nop
 8004afe:	bd80      	pop	{r7, pc}
 8004b00:	20008a64 	.word	0x20008a64
 8004b04:	20008d0c 	.word	0x20008d0c

08004b08 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004b0c:	4802      	ldr	r0, [pc, #8]	; (8004b18 <UART7_IRQHandler+0x10>)
 8004b0e:	f005 ffe5 	bl	800aadc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004b12:	bf00      	nop
 8004b14:	bd80      	pop	{r7, pc}
 8004b16:	bf00      	nop
 8004b18:	20008714 	.word	0x20008714

08004b1c <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004b20:	4802      	ldr	r0, [pc, #8]	; (8004b2c <LTDC_IRQHandler+0x10>)
 8004b22:	f002 fc23 	bl	800736c <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 8004b26:	bf00      	nop
 8004b28:	bd80      	pop	{r7, pc}
 8004b2a:	bf00      	nop
 8004b2c:	200088a0 	.word	0x200088a0

08004b30 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b086      	sub	sp, #24
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004b38:	4a14      	ldr	r2, [pc, #80]	; (8004b8c <_sbrk+0x5c>)
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <_sbrk+0x60>)
 8004b3c:	1ad3      	subs	r3, r2, r3
 8004b3e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004b44:	4b13      	ldr	r3, [pc, #76]	; (8004b94 <_sbrk+0x64>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d102      	bne.n	8004b52 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004b4c:	4b11      	ldr	r3, [pc, #68]	; (8004b94 <_sbrk+0x64>)
 8004b4e:	4a12      	ldr	r2, [pc, #72]	; (8004b98 <_sbrk+0x68>)
 8004b50:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004b52:	4b10      	ldr	r3, [pc, #64]	; (8004b94 <_sbrk+0x64>)
 8004b54:	681a      	ldr	r2, [r3, #0]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	4413      	add	r3, r2
 8004b5a:	693a      	ldr	r2, [r7, #16]
 8004b5c:	429a      	cmp	r2, r3
 8004b5e:	d207      	bcs.n	8004b70 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004b60:	f009 fade 	bl	800e120 <__errno>
 8004b64:	4602      	mov	r2, r0
 8004b66:	230c      	movs	r3, #12
 8004b68:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004b6a:	f04f 33ff 	mov.w	r3, #4294967295
 8004b6e:	e009      	b.n	8004b84 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004b70:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <_sbrk+0x64>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004b76:	4b07      	ldr	r3, [pc, #28]	; (8004b94 <_sbrk+0x64>)
 8004b78:	681a      	ldr	r2, [r3, #0]
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	4a05      	ldr	r2, [pc, #20]	; (8004b94 <_sbrk+0x64>)
 8004b80:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	20050000 	.word	0x20050000
 8004b90:	00000400 	.word	0x00000400
 8004b94:	20000504 	.word	0x20000504
 8004b98:	20008d58 	.word	0x20008d58

08004b9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004ba0:	4b08      	ldr	r3, [pc, #32]	; (8004bc4 <SystemInit+0x28>)
 8004ba2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004ba6:	4a07      	ldr	r2, [pc, #28]	; (8004bc4 <SystemInit+0x28>)
 8004ba8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004bac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004bb0:	4b04      	ldr	r3, [pc, #16]	; (8004bc4 <SystemInit+0x28>)
 8004bb2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004bb6:	609a      	str	r2, [r3, #8]
#endif
}
 8004bb8:	bf00      	nop
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc0:	4770      	bx	lr
 8004bc2:	bf00      	nop
 8004bc4:	e000ed00 	.word	0xe000ed00

08004bc8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004bc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004c00 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004bcc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004bce:	e003      	b.n	8004bd8 <LoopCopyDataInit>

08004bd0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004bd0:	4b0c      	ldr	r3, [pc, #48]	; (8004c04 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004bd2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004bd4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004bd6:	3104      	adds	r1, #4

08004bd8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004bd8:	480b      	ldr	r0, [pc, #44]	; (8004c08 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004bda:	4b0c      	ldr	r3, [pc, #48]	; (8004c0c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004bdc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004bde:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004be0:	d3f6      	bcc.n	8004bd0 <CopyDataInit>
  ldr  r2, =_sbss
 8004be2:	4a0b      	ldr	r2, [pc, #44]	; (8004c10 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004be4:	e002      	b.n	8004bec <LoopFillZerobss>

08004be6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004be6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004be8:	f842 3b04 	str.w	r3, [r2], #4

08004bec <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004bec:	4b09      	ldr	r3, [pc, #36]	; (8004c14 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004bee:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004bf0:	d3f9      	bcc.n	8004be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004bf2:	f7ff ffd3 	bl	8004b9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004bf6:	f009 fa99 	bl	800e12c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004bfa:	f7fb fee9 	bl	80009d0 <main>
  bx  lr    
 8004bfe:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004c00:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004c04:	08010a48 	.word	0x08010a48
  ldr  r0, =_sdata
 8004c08:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004c0c:	200000c0 	.word	0x200000c0
  ldr  r2, =_sbss
 8004c10:	200000c0 	.word	0x200000c0
  ldr  r3, = _ebss
 8004c14:	20008d54 	.word	0x20008d54

08004c18 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004c18:	e7fe      	b.n	8004c18 <ADC_IRQHandler>

08004c1a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004c1a:	b580      	push	{r7, lr}
 8004c1c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004c1e:	2003      	movs	r0, #3
 8004c20:	f000 fcd1 	bl	80055c6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004c24:	2000      	movs	r0, #0
 8004c26:	f7ff fee9 	bl	80049fc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004c2a:	f7ff f9cb 	bl	8003fc4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
}
 8004c30:	4618      	mov	r0, r3
 8004c32:	bd80      	pop	{r7, pc}

08004c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c34:	b480      	push	{r7}
 8004c36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c38:	4b06      	ldr	r3, [pc, #24]	; (8004c54 <HAL_IncTick+0x20>)
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	461a      	mov	r2, r3
 8004c3e:	4b06      	ldr	r3, [pc, #24]	; (8004c58 <HAL_IncTick+0x24>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4413      	add	r3, r2
 8004c44:	4a04      	ldr	r2, [pc, #16]	; (8004c58 <HAL_IncTick+0x24>)
 8004c46:	6013      	str	r3, [r2, #0]
}
 8004c48:	bf00      	nop
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c50:	4770      	bx	lr
 8004c52:	bf00      	nop
 8004c54:	20000054 	.word	0x20000054
 8004c58:	20008d4c 	.word	0x20008d4c

08004c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8004c60:	4b03      	ldr	r3, [pc, #12]	; (8004c70 <HAL_GetTick+0x14>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6c:	4770      	bx	lr
 8004c6e:	bf00      	nop
 8004c70:	20008d4c 	.word	0x20008d4c

08004c74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c74:	b580      	push	{r7, lr}
 8004c76:	b084      	sub	sp, #16
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c7c:	f7ff ffee 	bl	8004c5c <HAL_GetTick>
 8004c80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c8c:	d005      	beq.n	8004c9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c8e:	4b09      	ldr	r3, [pc, #36]	; (8004cb4 <HAL_Delay+0x40>)
 8004c90:	781b      	ldrb	r3, [r3, #0]
 8004c92:	461a      	mov	r2, r3
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	4413      	add	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004c9a:	bf00      	nop
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_GetTick>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	1ad3      	subs	r3, r2, r3
 8004ca6:	68fa      	ldr	r2, [r7, #12]
 8004ca8:	429a      	cmp	r2, r3
 8004caa:	d8f7      	bhi.n	8004c9c <HAL_Delay+0x28>
  {
  }
}
 8004cac:	bf00      	nop
 8004cae:	3710      	adds	r7, #16
 8004cb0:	46bd      	mov	sp, r7
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	20000054 	.word	0x20000054

08004cb8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004cc0:	2300      	movs	r3, #0
 8004cc2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d101      	bne.n	8004cce <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	e031      	b.n	8004d32 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d109      	bne.n	8004cea <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f7ff f99c 	bl	8004014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2200      	movs	r2, #0
 8004ce0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cee:	f003 0310 	and.w	r3, r3, #16
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d116      	bne.n	8004d24 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cfa:	4b10      	ldr	r3, [pc, #64]	; (8004d3c <HAL_ADC_Init+0x84>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	f043 0202 	orr.w	r2, r3, #2
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 fab6 	bl	8005278 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d16:	f023 0303 	bic.w	r3, r3, #3
 8004d1a:	f043 0201 	orr.w	r2, r3, #1
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	641a      	str	r2, [r3, #64]	; 0x40
 8004d22:	e001      	b.n	8004d28 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004d30:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	ffffeefd 	.word	0xffffeefd

08004d40 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004d40:	b480      	push	{r7}
 8004d42:	b085      	sub	sp, #20
 8004d44:	af00      	add	r7, sp, #0
 8004d46:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004d48:	2300      	movs	r3, #0
 8004d4a:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_ADC_Start+0x1a>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e0a0      	b.n	8004e9c <HAL_ADC_Start+0x15c>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	689b      	ldr	r3, [r3, #8]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d018      	beq.n	8004da2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	689a      	ldr	r2, [r3, #8]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d80:	4b49      	ldr	r3, [pc, #292]	; (8004ea8 <HAL_ADC_Start+0x168>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4a49      	ldr	r2, [pc, #292]	; (8004eac <HAL_ADC_Start+0x16c>)
 8004d86:	fba2 2303 	umull	r2, r3, r2, r3
 8004d8a:	0c9a      	lsrs	r2, r3, #18
 8004d8c:	4613      	mov	r3, r2
 8004d8e:	005b      	lsls	r3, r3, #1
 8004d90:	4413      	add	r3, r2
 8004d92:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004d94:	e002      	b.n	8004d9c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	3b01      	subs	r3, #1
 8004d9a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d1f9      	bne.n	8004d96 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	f003 0301 	and.w	r3, r3, #1
 8004dac:	2b01      	cmp	r3, #1
 8004dae:	d174      	bne.n	8004e9a <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004db4:	4b3e      	ldr	r3, [pc, #248]	; (8004eb0 <HAL_ADC_Start+0x170>)
 8004db6:	4013      	ands	r3, r2
 8004db8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d007      	beq.n	8004dde <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dd2:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004dd6:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004de2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004dea:	d106      	bne.n	8004dfa <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df0:	f023 0206 	bic.w	r2, r3, #6
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	645a      	str	r2, [r3, #68]	; 0x44
 8004df8:	e002      	b.n	8004e00 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004e10:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004e12:	4b28      	ldr	r3, [pc, #160]	; (8004eb4 <HAL_ADC_Start+0x174>)
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	f003 031f 	and.w	r3, r3, #31
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d10f      	bne.n	8004e3e <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d136      	bne.n	8004e9a <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	689a      	ldr	r2, [r3, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e3a:	609a      	str	r2, [r3, #8]
 8004e3c:	e02d      	b.n	8004e9a <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a1d      	ldr	r2, [pc, #116]	; (8004eb8 <HAL_ADC_Start+0x178>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d10e      	bne.n	8004e66 <HAL_ADC_Start+0x126>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d107      	bne.n	8004e66 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	689a      	ldr	r2, [r3, #8]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e64:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004e66:	4b13      	ldr	r3, [pc, #76]	; (8004eb4 <HAL_ADC_Start+0x174>)
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0310 	and.w	r3, r3, #16
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d113      	bne.n	8004e9a <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <HAL_ADC_Start+0x17c>)
 8004e78:	4293      	cmp	r3, r2
 8004e7a:	d10e      	bne.n	8004e9a <HAL_ADC_Start+0x15a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	689b      	ldr	r3, [r3, #8]
 8004e82:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d107      	bne.n	8004e9a <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004e98:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004e9a:	2300      	movs	r3, #0
}
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	3714      	adds	r7, #20
 8004ea0:	46bd      	mov	sp, r7
 8004ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea6:	4770      	bx	lr
 8004ea8:	2000004c 	.word	0x2000004c
 8004eac:	431bde83 	.word	0x431bde83
 8004eb0:	fffff8fe 	.word	0xfffff8fe
 8004eb4:	40012300 	.word	0x40012300
 8004eb8:	40012000 	.word	0x40012000
 8004ebc:	40012200 	.word	0x40012200

08004ec0 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
 8004ec8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004eca:	2300      	movs	r3, #0
 8004ecc:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004edc:	d113      	bne.n	8004f06 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	689b      	ldr	r3, [r3, #8]
 8004ee4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ee8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eec:	d10b      	bne.n	8004f06 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ef2:	f043 0220 	orr.w	r2, r3, #32
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	2200      	movs	r2, #0
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e05c      	b.n	8004fc0 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004f06:	f7ff fea9 	bl	8004c5c <HAL_GetTick>
 8004f0a:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f0c:	e01a      	b.n	8004f44 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f14:	d016      	beq.n	8004f44 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d007      	beq.n	8004f2c <HAL_ADC_PollForConversion+0x6c>
 8004f1c:	f7ff fe9e 	bl	8004c5c <HAL_GetTick>
 8004f20:	4602      	mov	r2, r0
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	1ad3      	subs	r3, r2, r3
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	429a      	cmp	r2, r3
 8004f2a:	d20b      	bcs.n	8004f44 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f30:	f043 0204 	orr.w	r2, r3, #4
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2200      	movs	r2, #0
 8004f3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004f40:	2303      	movs	r3, #3
 8004f42:	e03d      	b.n	8004fc0 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f003 0302 	and.w	r3, r3, #2
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d1dd      	bne.n	8004f0e <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f06f 0212 	mvn.w	r2, #18
 8004f5a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f60:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	689b      	ldr	r3, [r3, #8]
 8004f6e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d123      	bne.n	8004fbe <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d11f      	bne.n	8004fbe <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f84:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d111      	bne.n	8004fbe <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004faa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d105      	bne.n	8004fbe <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fb6:	f043 0201 	orr.w	r2, r3, #1
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004fbe:	2300      	movs	r3, #0
}
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	3710      	adds	r7, #16
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bd80      	pop	{r7, pc}

08004fc8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
	...

08004fe4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004fe4:	b480      	push	{r7}
 8004fe6:	b085      	sub	sp, #20
 8004fe8:	af00      	add	r7, sp, #0
 8004fea:	6078      	str	r0, [r7, #4]
 8004fec:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004fee:	2300      	movs	r3, #0
 8004ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d101      	bne.n	8005000 <HAL_ADC_ConfigChannel+0x1c>
 8004ffc:	2302      	movs	r3, #2
 8004ffe:	e12a      	b.n	8005256 <HAL_ADC_ConfigChannel+0x272>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2201      	movs	r2, #1
 8005004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	2b09      	cmp	r3, #9
 800500e:	d93a      	bls.n	8005086 <HAL_ADC_ConfigChannel+0xa2>
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005018:	d035      	beq.n	8005086 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	68d9      	ldr	r1, [r3, #12]
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	b29b      	uxth	r3, r3
 8005026:	461a      	mov	r2, r3
 8005028:	4613      	mov	r3, r2
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	4413      	add	r3, r2
 800502e:	3b1e      	subs	r3, #30
 8005030:	2207      	movs	r2, #7
 8005032:	fa02 f303 	lsl.w	r3, r2, r3
 8005036:	43da      	mvns	r2, r3
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	400a      	ands	r2, r1
 800503e:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a87      	ldr	r2, [pc, #540]	; (8005264 <HAL_ADC_ConfigChannel+0x280>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d10a      	bne.n	8005060 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	68d9      	ldr	r1, [r3, #12]
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689b      	ldr	r3, [r3, #8]
 8005054:	061a      	lsls	r2, r3, #24
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	430a      	orrs	r2, r1
 800505c:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800505e:	e035      	b.n	80050cc <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	68d9      	ldr	r1, [r3, #12]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	689a      	ldr	r2, [r3, #8]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	b29b      	uxth	r3, r3
 8005070:	4618      	mov	r0, r3
 8005072:	4603      	mov	r3, r0
 8005074:	005b      	lsls	r3, r3, #1
 8005076:	4403      	add	r3, r0
 8005078:	3b1e      	subs	r3, #30
 800507a:	409a      	lsls	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	430a      	orrs	r2, r1
 8005082:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005084:	e022      	b.n	80050cc <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	6919      	ldr	r1, [r3, #16]
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	b29b      	uxth	r3, r3
 8005092:	461a      	mov	r2, r3
 8005094:	4613      	mov	r3, r2
 8005096:	005b      	lsls	r3, r3, #1
 8005098:	4413      	add	r3, r2
 800509a:	2207      	movs	r2, #7
 800509c:	fa02 f303 	lsl.w	r3, r2, r3
 80050a0:	43da      	mvns	r2, r3
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	400a      	ands	r2, r1
 80050a8:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	6919      	ldr	r1, [r3, #16]
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	689a      	ldr	r2, [r3, #8]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	4618      	mov	r0, r3
 80050bc:	4603      	mov	r3, r0
 80050be:	005b      	lsls	r3, r3, #1
 80050c0:	4403      	add	r3, r0
 80050c2:	409a      	lsls	r2, r3
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	430a      	orrs	r2, r1
 80050ca:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b06      	cmp	r3, #6
 80050d2:	d824      	bhi.n	800511e <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4613      	mov	r3, r2
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	4413      	add	r3, r2
 80050e4:	3b05      	subs	r3, #5
 80050e6:	221f      	movs	r2, #31
 80050e8:	fa02 f303 	lsl.w	r3, r2, r3
 80050ec:	43da      	mvns	r2, r3
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	400a      	ands	r2, r1
 80050f4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	b29b      	uxth	r3, r3
 8005102:	4618      	mov	r0, r3
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685a      	ldr	r2, [r3, #4]
 8005108:	4613      	mov	r3, r2
 800510a:	009b      	lsls	r3, r3, #2
 800510c:	4413      	add	r3, r2
 800510e:	3b05      	subs	r3, #5
 8005110:	fa00 f203 	lsl.w	r2, r0, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	430a      	orrs	r2, r1
 800511a:	635a      	str	r2, [r3, #52]	; 0x34
 800511c:	e04c      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 800511e:	683b      	ldr	r3, [r7, #0]
 8005120:	685b      	ldr	r3, [r3, #4]
 8005122:	2b0c      	cmp	r3, #12
 8005124:	d824      	bhi.n	8005170 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	685a      	ldr	r2, [r3, #4]
 8005130:	4613      	mov	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	4413      	add	r3, r2
 8005136:	3b23      	subs	r3, #35	; 0x23
 8005138:	221f      	movs	r2, #31
 800513a:	fa02 f303 	lsl.w	r3, r2, r3
 800513e:	43da      	mvns	r2, r3
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	400a      	ands	r2, r1
 8005146:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	b29b      	uxth	r3, r3
 8005154:	4618      	mov	r0, r3
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	685a      	ldr	r2, [r3, #4]
 800515a:	4613      	mov	r3, r2
 800515c:	009b      	lsls	r3, r3, #2
 800515e:	4413      	add	r3, r2
 8005160:	3b23      	subs	r3, #35	; 0x23
 8005162:	fa00 f203 	lsl.w	r2, r0, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	430a      	orrs	r2, r1
 800516c:	631a      	str	r2, [r3, #48]	; 0x30
 800516e:	e023      	b.n	80051b8 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	685a      	ldr	r2, [r3, #4]
 800517a:	4613      	mov	r3, r2
 800517c:	009b      	lsls	r3, r3, #2
 800517e:	4413      	add	r3, r2
 8005180:	3b41      	subs	r3, #65	; 0x41
 8005182:	221f      	movs	r2, #31
 8005184:	fa02 f303 	lsl.w	r3, r2, r3
 8005188:	43da      	mvns	r2, r3
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	400a      	ands	r2, r1
 8005190:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005198:	683b      	ldr	r3, [r7, #0]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	4618      	mov	r0, r3
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	685a      	ldr	r2, [r3, #4]
 80051a4:	4613      	mov	r3, r2
 80051a6:	009b      	lsls	r3, r3, #2
 80051a8:	4413      	add	r3, r2
 80051aa:	3b41      	subs	r3, #65	; 0x41
 80051ac:	fa00 f203 	lsl.w	r2, r0, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	430a      	orrs	r2, r1
 80051b6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	4a2a      	ldr	r2, [pc, #168]	; (8005268 <HAL_ADC_ConfigChannel+0x284>)
 80051be:	4293      	cmp	r3, r2
 80051c0:	d10a      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x1f4>
 80051c2:	683b      	ldr	r3, [r7, #0]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80051ca:	d105      	bne.n	80051d8 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80051cc:	4b27      	ldr	r3, [pc, #156]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 80051ce:	685b      	ldr	r3, [r3, #4]
 80051d0:	4a26      	ldr	r2, [pc, #152]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 80051d2:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80051d6:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a22      	ldr	r2, [pc, #136]	; (8005268 <HAL_ADC_ConfigChannel+0x284>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d109      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x212>
 80051e2:	683b      	ldr	r3, [r7, #0]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	2b12      	cmp	r3, #18
 80051e8:	d105      	bne.n	80051f6 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80051ea:	4b20      	ldr	r3, [pc, #128]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	4a1f      	ldr	r2, [pc, #124]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 80051f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80051f4:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a1b      	ldr	r2, [pc, #108]	; (8005268 <HAL_ADC_ConfigChannel+0x284>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d125      	bne.n	800524c <HAL_ADC_ConfigChannel+0x268>
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	4a17      	ldr	r2, [pc, #92]	; (8005264 <HAL_ADC_ConfigChannel+0x280>)
 8005206:	4293      	cmp	r3, r2
 8005208:	d003      	beq.n	8005212 <HAL_ADC_ConfigChannel+0x22e>
 800520a:	683b      	ldr	r3, [r7, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	2b11      	cmp	r3, #17
 8005210:	d11c      	bne.n	800524c <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005212:	4b16      	ldr	r3, [pc, #88]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	4a15      	ldr	r2, [pc, #84]	; (800526c <HAL_ADC_ConfigChannel+0x288>)
 8005218:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800521c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800521e:	683b      	ldr	r3, [r7, #0]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	4a10      	ldr	r2, [pc, #64]	; (8005264 <HAL_ADC_ConfigChannel+0x280>)
 8005224:	4293      	cmp	r3, r2
 8005226:	d111      	bne.n	800524c <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005228:	4b11      	ldr	r3, [pc, #68]	; (8005270 <HAL_ADC_ConfigChannel+0x28c>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a11      	ldr	r2, [pc, #68]	; (8005274 <HAL_ADC_ConfigChannel+0x290>)
 800522e:	fba2 2303 	umull	r2, r3, r2, r3
 8005232:	0c9a      	lsrs	r2, r3, #18
 8005234:	4613      	mov	r3, r2
 8005236:	009b      	lsls	r3, r3, #2
 8005238:	4413      	add	r3, r2
 800523a:	005b      	lsls	r3, r3, #1
 800523c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800523e:	e002      	b.n	8005246 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	3b01      	subs	r3, #1
 8005244:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1f9      	bne.n	8005240 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005254:	2300      	movs	r3, #0
}
 8005256:	4618      	mov	r0, r3
 8005258:	3714      	adds	r7, #20
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	10000012 	.word	0x10000012
 8005268:	40012000 	.word	0x40012000
 800526c:	40012300 	.word	0x40012300
 8005270:	2000004c 	.word	0x2000004c
 8005274:	431bde83 	.word	0x431bde83

08005278 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005278:	b480      	push	{r7}
 800527a:	b083      	sub	sp, #12
 800527c:	af00      	add	r7, sp, #0
 800527e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005280:	4b78      	ldr	r3, [pc, #480]	; (8005464 <ADC_Init+0x1ec>)
 8005282:	685b      	ldr	r3, [r3, #4]
 8005284:	4a77      	ldr	r2, [pc, #476]	; (8005464 <ADC_Init+0x1ec>)
 8005286:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800528a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800528c:	4b75      	ldr	r3, [pc, #468]	; (8005464 <ADC_Init+0x1ec>)
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	685b      	ldr	r3, [r3, #4]
 8005294:	4973      	ldr	r1, [pc, #460]	; (8005464 <ADC_Init+0x1ec>)
 8005296:	4313      	orrs	r3, r2
 8005298:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	685a      	ldr	r2, [r3, #4]
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80052a8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	6859      	ldr	r1, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	021a      	lsls	r2, r3, #8
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	430a      	orrs	r2, r1
 80052bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	685a      	ldr	r2, [r3, #4]
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80052cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	6859      	ldr	r1, [r3, #4]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	689a      	ldr	r2, [r3, #8]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	430a      	orrs	r2, r1
 80052de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	689a      	ldr	r2, [r3, #8]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6899      	ldr	r1, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	68da      	ldr	r2, [r3, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	430a      	orrs	r2, r1
 8005300:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005306:	4a58      	ldr	r2, [pc, #352]	; (8005468 <ADC_Init+0x1f0>)
 8005308:	4293      	cmp	r3, r2
 800530a:	d022      	beq.n	8005352 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	689a      	ldr	r2, [r3, #8]
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800531a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	6899      	ldr	r1, [r3, #8]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	430a      	orrs	r2, r1
 800532c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	689a      	ldr	r2, [r3, #8]
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800533c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6899      	ldr	r1, [r3, #8]
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	430a      	orrs	r2, r1
 800534e:	609a      	str	r2, [r3, #8]
 8005350:	e00f      	b.n	8005372 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	689a      	ldr	r2, [r3, #8]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005360:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	689a      	ldr	r2, [r3, #8]
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8005370:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	689a      	ldr	r2, [r3, #8]
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f022 0202 	bic.w	r2, r2, #2
 8005380:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	6899      	ldr	r1, [r3, #8]
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	699b      	ldr	r3, [r3, #24]
 800538c:	005a      	lsls	r2, r3, #1
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	430a      	orrs	r2, r1
 8005394:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 3020 	ldrb.w	r3, [r3, #32]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d01b      	beq.n	80053d8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	685a      	ldr	r2, [r3, #4]
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053ae:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	685a      	ldr	r2, [r3, #4]
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80053be:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	6859      	ldr	r1, [r3, #4]
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ca:	3b01      	subs	r3, #1
 80053cc:	035a      	lsls	r2, r3, #13
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	430a      	orrs	r2, r1
 80053d4:	605a      	str	r2, [r3, #4]
 80053d6:	e007      	b.n	80053e8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	685a      	ldr	r2, [r3, #4]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80053e6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80053f6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	69db      	ldr	r3, [r3, #28]
 8005402:	3b01      	subs	r3, #1
 8005404:	051a      	lsls	r2, r3, #20
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	430a      	orrs	r2, r1
 800540c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	689a      	ldr	r2, [r3, #8]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800541c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	6899      	ldr	r1, [r3, #8]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800542a:	025a      	lsls	r2, r3, #9
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689a      	ldr	r2, [r3, #8]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005442:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6899      	ldr	r1, [r3, #8]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	695b      	ldr	r3, [r3, #20]
 800544e:	029a      	lsls	r2, r3, #10
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	430a      	orrs	r2, r1
 8005456:	609a      	str	r2, [r3, #8]
}
 8005458:	bf00      	nop
 800545a:	370c      	adds	r7, #12
 800545c:	46bd      	mov	sp, r7
 800545e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005462:	4770      	bx	lr
 8005464:	40012300 	.word	0x40012300
 8005468:	0f000001 	.word	0x0f000001

0800546c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f003 0307 	and.w	r3, r3, #7
 800547a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800547c:	4b0b      	ldr	r3, [pc, #44]	; (80054ac <__NVIC_SetPriorityGrouping+0x40>)
 800547e:	68db      	ldr	r3, [r3, #12]
 8005480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005482:	68ba      	ldr	r2, [r7, #8]
 8005484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005488:	4013      	ands	r3, r2
 800548a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005494:	4b06      	ldr	r3, [pc, #24]	; (80054b0 <__NVIC_SetPriorityGrouping+0x44>)
 8005496:	4313      	orrs	r3, r2
 8005498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800549a:	4a04      	ldr	r2, [pc, #16]	; (80054ac <__NVIC_SetPriorityGrouping+0x40>)
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	60d3      	str	r3, [r2, #12]
}
 80054a0:	bf00      	nop
 80054a2:	3714      	adds	r7, #20
 80054a4:	46bd      	mov	sp, r7
 80054a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054aa:	4770      	bx	lr
 80054ac:	e000ed00 	.word	0xe000ed00
 80054b0:	05fa0000 	.word	0x05fa0000

080054b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80054b4:	b480      	push	{r7}
 80054b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80054b8:	4b04      	ldr	r3, [pc, #16]	; (80054cc <__NVIC_GetPriorityGrouping+0x18>)
 80054ba:	68db      	ldr	r3, [r3, #12]
 80054bc:	0a1b      	lsrs	r3, r3, #8
 80054be:	f003 0307 	and.w	r3, r3, #7
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	46bd      	mov	sp, r7
 80054c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ca:	4770      	bx	lr
 80054cc:	e000ed00 	.word	0xe000ed00

080054d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b083      	sub	sp, #12
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	db0b      	blt.n	80054fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054e2:	79fb      	ldrb	r3, [r7, #7]
 80054e4:	f003 021f 	and.w	r2, r3, #31
 80054e8:	4907      	ldr	r1, [pc, #28]	; (8005508 <__NVIC_EnableIRQ+0x38>)
 80054ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054ee:	095b      	lsrs	r3, r3, #5
 80054f0:	2001      	movs	r0, #1
 80054f2:	fa00 f202 	lsl.w	r2, r0, r2
 80054f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80054fa:	bf00      	nop
 80054fc:	370c      	adds	r7, #12
 80054fe:	46bd      	mov	sp, r7
 8005500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005504:	4770      	bx	lr
 8005506:	bf00      	nop
 8005508:	e000e100 	.word	0xe000e100

0800550c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800550c:	b480      	push	{r7}
 800550e:	b083      	sub	sp, #12
 8005510:	af00      	add	r7, sp, #0
 8005512:	4603      	mov	r3, r0
 8005514:	6039      	str	r1, [r7, #0]
 8005516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800551c:	2b00      	cmp	r3, #0
 800551e:	db0a      	blt.n	8005536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005520:	683b      	ldr	r3, [r7, #0]
 8005522:	b2da      	uxtb	r2, r3
 8005524:	490c      	ldr	r1, [pc, #48]	; (8005558 <__NVIC_SetPriority+0x4c>)
 8005526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800552a:	0112      	lsls	r2, r2, #4
 800552c:	b2d2      	uxtb	r2, r2
 800552e:	440b      	add	r3, r1
 8005530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005534:	e00a      	b.n	800554c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	b2da      	uxtb	r2, r3
 800553a:	4908      	ldr	r1, [pc, #32]	; (800555c <__NVIC_SetPriority+0x50>)
 800553c:	79fb      	ldrb	r3, [r7, #7]
 800553e:	f003 030f 	and.w	r3, r3, #15
 8005542:	3b04      	subs	r3, #4
 8005544:	0112      	lsls	r2, r2, #4
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	440b      	add	r3, r1
 800554a:	761a      	strb	r2, [r3, #24]
}
 800554c:	bf00      	nop
 800554e:	370c      	adds	r7, #12
 8005550:	46bd      	mov	sp, r7
 8005552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005556:	4770      	bx	lr
 8005558:	e000e100 	.word	0xe000e100
 800555c:	e000ed00 	.word	0xe000ed00

08005560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005560:	b480      	push	{r7}
 8005562:	b089      	sub	sp, #36	; 0x24
 8005564:	af00      	add	r7, sp, #0
 8005566:	60f8      	str	r0, [r7, #12]
 8005568:	60b9      	str	r1, [r7, #8]
 800556a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	f1c3 0307 	rsb	r3, r3, #7
 800557a:	2b04      	cmp	r3, #4
 800557c:	bf28      	it	cs
 800557e:	2304      	movcs	r3, #4
 8005580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005582:	69fb      	ldr	r3, [r7, #28]
 8005584:	3304      	adds	r3, #4
 8005586:	2b06      	cmp	r3, #6
 8005588:	d902      	bls.n	8005590 <NVIC_EncodePriority+0x30>
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	3b03      	subs	r3, #3
 800558e:	e000      	b.n	8005592 <NVIC_EncodePriority+0x32>
 8005590:	2300      	movs	r3, #0
 8005592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005594:	f04f 32ff 	mov.w	r2, #4294967295
 8005598:	69bb      	ldr	r3, [r7, #24]
 800559a:	fa02 f303 	lsl.w	r3, r2, r3
 800559e:	43da      	mvns	r2, r3
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	401a      	ands	r2, r3
 80055a4:	697b      	ldr	r3, [r7, #20]
 80055a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80055a8:	f04f 31ff 	mov.w	r1, #4294967295
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	fa01 f303 	lsl.w	r3, r1, r3
 80055b2:	43d9      	mvns	r1, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80055b8:	4313      	orrs	r3, r2
         );
}
 80055ba:	4618      	mov	r0, r3
 80055bc:	3724      	adds	r7, #36	; 0x24
 80055be:	46bd      	mov	sp, r7
 80055c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c4:	4770      	bx	lr

080055c6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055c6:	b580      	push	{r7, lr}
 80055c8:	b082      	sub	sp, #8
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80055ce:	6878      	ldr	r0, [r7, #4]
 80055d0:	f7ff ff4c 	bl	800546c <__NVIC_SetPriorityGrouping>
}
 80055d4:	bf00      	nop
 80055d6:	3708      	adds	r7, #8
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80055dc:	b580      	push	{r7, lr}
 80055de:	b086      	sub	sp, #24
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	60b9      	str	r1, [r7, #8]
 80055e6:	607a      	str	r2, [r7, #4]
 80055e8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055ea:	2300      	movs	r3, #0
 80055ec:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80055ee:	f7ff ff61 	bl	80054b4 <__NVIC_GetPriorityGrouping>
 80055f2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	6978      	ldr	r0, [r7, #20]
 80055fa:	f7ff ffb1 	bl	8005560 <NVIC_EncodePriority>
 80055fe:	4602      	mov	r2, r0
 8005600:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005604:	4611      	mov	r1, r2
 8005606:	4618      	mov	r0, r3
 8005608:	f7ff ff80 	bl	800550c <__NVIC_SetPriority>
}
 800560c:	bf00      	nop
 800560e:	3718      	adds	r7, #24
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b082      	sub	sp, #8
 8005618:	af00      	add	r7, sp, #0
 800561a:	4603      	mov	r3, r0
 800561c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	4618      	mov	r0, r3
 8005624:	f7ff ff54 	bl	80054d0 <__NVIC_EnableIRQ>
}
 8005628:	bf00      	nop
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8005630:	b580      	push	{r7, lr}
 8005632:	b082      	sub	sp, #8
 8005634:	af00      	add	r7, sp, #0
 8005636:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d101      	bne.n	8005642 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e014      	b.n	800566c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	791b      	ldrb	r3, [r3, #4]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b00      	cmp	r3, #0
 800564a:	d105      	bne.n	8005658 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	2200      	movs	r2, #0
 8005650:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005652:	6878      	ldr	r0, [r7, #4]
 8005654:	f7fe fd4c 	bl	80040f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2200      	movs	r2, #0
 8005662:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	2201      	movs	r2, #1
 8005668:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 800566a:	2300      	movs	r3, #0
}
 800566c:	4618      	mov	r0, r3
 800566e:	3708      	adds	r7, #8
 8005670:	46bd      	mov	sp, r7
 8005672:	bd80      	pop	{r7, pc}

08005674 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005674:	b580      	push	{r7, lr}
 8005676:	b082      	sub	sp, #8
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005682:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005686:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800568a:	d118      	bne.n	80056be <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2204      	movs	r2, #4
 8005690:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	691b      	ldr	r3, [r3, #16]
 8005696:	f043 0201 	orr.w	r2, r3, #1
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80056a6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80056b6:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 f825 	bl	8005708 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80056c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056cc:	d118      	bne.n	8005700 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2204      	movs	r2, #4
 80056d2:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	691b      	ldr	r3, [r3, #16]
 80056d8:	f043 0202 	orr.w	r2, r3, #2
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80056e8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	681a      	ldr	r2, [r3, #0]
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80056f8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80056fa:	6878      	ldr	r0, [r7, #4]
 80056fc:	f000 f85b 	bl	80057b6 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8005700:	bf00      	nop
 8005702:	3708      	adds	r7, #8
 8005704:	46bd      	mov	sp, r7
 8005706:	bd80      	pop	{r7, pc}

08005708 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005708:	b480      	push	{r7}
 800570a:	b083      	sub	sp, #12
 800570c:	af00      	add	r7, sp, #0
 800570e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005710:	bf00      	nop
 8005712:	370c      	adds	r7, #12
 8005714:	46bd      	mov	sp, r7
 8005716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800571a:	4770      	bx	lr

0800571c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 800571c:	b480      	push	{r7}
 800571e:	b087      	sub	sp, #28
 8005720:	af00      	add	r7, sp, #0
 8005722:	60f8      	str	r0, [r7, #12]
 8005724:	60b9      	str	r1, [r7, #8]
 8005726:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 8005728:	2300      	movs	r3, #0
 800572a:	617b      	str	r3, [r7, #20]
 800572c:	2300      	movs	r3, #0
 800572e:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	795b      	ldrb	r3, [r3, #5]
 8005734:	2b01      	cmp	r3, #1
 8005736:	d101      	bne.n	800573c <HAL_DAC_ConfigChannel+0x20>
 8005738:	2302      	movs	r3, #2
 800573a:	e036      	b.n	80057aa <HAL_DAC_ConfigChannel+0x8e>
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	2201      	movs	r2, #1
 8005740:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2202      	movs	r2, #2
 8005746:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8005750:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	697a      	ldr	r2, [r7, #20]
 800575e:	4013      	ands	r3, r2
 8005760:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8005762:	68bb      	ldr	r3, [r7, #8]
 8005764:	681a      	ldr	r2, [r3, #0]
 8005766:	68bb      	ldr	r3, [r7, #8]
 8005768:	685b      	ldr	r3, [r3, #4]
 800576a:	4313      	orrs	r3, r2
 800576c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	fa02 f303 	lsl.w	r3, r2, r3
 8005776:	697a      	ldr	r2, [r7, #20]
 8005778:	4313      	orrs	r3, r2
 800577a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	697a      	ldr	r2, [r7, #20]
 8005782:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	6819      	ldr	r1, [r3, #0]
 800578a:	22c0      	movs	r2, #192	; 0xc0
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	fa02 f303 	lsl.w	r3, r2, r3
 8005792:	43da      	mvns	r2, r3
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	400a      	ands	r2, r1
 800579a:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	2201      	movs	r2, #1
 80057a0:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	2200      	movs	r2, #0
 80057a6:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 80057a8:	2300      	movs	r3, #0
}
 80057aa:	4618      	mov	r0, r3
 80057ac:	371c      	adds	r7, #28
 80057ae:	46bd      	mov	sp, r7
 80057b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b4:	4770      	bx	lr

080057b6 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80057be:	bf00      	nop
 80057c0:	370c      	adds	r7, #12
 80057c2:	46bd      	mov	sp, r7
 80057c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c8:	4770      	bx	lr
	...

080057cc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057cc:	b580      	push	{r7, lr}
 80057ce:	b086      	sub	sp, #24
 80057d0:	af00      	add	r7, sp, #0
 80057d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80057d4:	2300      	movs	r3, #0
 80057d6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80057d8:	f7ff fa40 	bl	8004c5c <HAL_GetTick>
 80057dc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d101      	bne.n	80057e8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80057e4:	2301      	movs	r3, #1
 80057e6:	e099      	b.n	800591c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2202      	movs	r2, #2
 80057f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f022 0201 	bic.w	r2, r2, #1
 8005806:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005808:	e00f      	b.n	800582a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800580a:	f7ff fa27 	bl	8004c5c <HAL_GetTick>
 800580e:	4602      	mov	r2, r0
 8005810:	693b      	ldr	r3, [r7, #16]
 8005812:	1ad3      	subs	r3, r2, r3
 8005814:	2b05      	cmp	r3, #5
 8005816:	d908      	bls.n	800582a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2220      	movs	r2, #32
 800581c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2203      	movs	r2, #3
 8005822:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005826:	2303      	movs	r3, #3
 8005828:	e078      	b.n	800591c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f003 0301 	and.w	r3, r3, #1
 8005834:	2b00      	cmp	r3, #0
 8005836:	d1e8      	bne.n	800580a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	4b38      	ldr	r3, [pc, #224]	; (8005924 <HAL_DMA_Init+0x158>)
 8005844:	4013      	ands	r3, r2
 8005846:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	689b      	ldr	r3, [r3, #8]
 8005850:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005856:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	691b      	ldr	r3, [r3, #16]
 800585c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005862:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800586e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6a1b      	ldr	r3, [r3, #32]
 8005874:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005876:	697a      	ldr	r2, [r7, #20]
 8005878:	4313      	orrs	r3, r2
 800587a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	2b04      	cmp	r3, #4
 8005882:	d107      	bne.n	8005894 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800588c:	4313      	orrs	r3, r2
 800588e:	697a      	ldr	r2, [r7, #20]
 8005890:	4313      	orrs	r3, r2
 8005892:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	697a      	ldr	r2, [r7, #20]
 800589a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058a4:	697b      	ldr	r3, [r7, #20]
 80058a6:	f023 0307 	bic.w	r3, r3, #7
 80058aa:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	697a      	ldr	r2, [r7, #20]
 80058b2:	4313      	orrs	r3, r2
 80058b4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ba:	2b04      	cmp	r3, #4
 80058bc:	d117      	bne.n	80058ee <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058c2:	697a      	ldr	r2, [r7, #20]
 80058c4:	4313      	orrs	r3, r2
 80058c6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00e      	beq.n	80058ee <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f8df 	bl	8005a94 <DMA_CheckFifoParam>
 80058d6:	4603      	mov	r3, r0
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d008      	beq.n	80058ee <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2240      	movs	r2, #64	; 0x40
 80058e0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2201      	movs	r2, #1
 80058e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80058ea:	2301      	movs	r3, #1
 80058ec:	e016      	b.n	800591c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80058f6:	6878      	ldr	r0, [r7, #4]
 80058f8:	f000 f896 	bl	8005a28 <DMA_CalcBaseAndBitshift>
 80058fc:	4603      	mov	r3, r0
 80058fe:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005904:	223f      	movs	r2, #63	; 0x3f
 8005906:	409a      	lsls	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2200      	movs	r2, #0
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	f010803f 	.word	0xf010803f

08005928 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8005928:	b580      	push	{r7, lr}
 800592a:	b084      	sub	sp, #16
 800592c:	af00      	add	r7, sp, #0
 800592e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2b00      	cmp	r3, #0
 8005934:	d101      	bne.n	800593a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8005936:	2301      	movs	r3, #1
 8005938:	e050      	b.n	80059dc <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005940:	b2db      	uxtb	r3, r3
 8005942:	2b02      	cmp	r3, #2
 8005944:	d101      	bne.n	800594a <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005946:	2302      	movs	r3, #2
 8005948:	e048      	b.n	80059dc <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f022 0201 	bic.w	r2, r2, #1
 8005958:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2200      	movs	r2, #0
 8005960:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	2200      	movs	r2, #0
 8005968:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2200      	movs	r2, #0
 8005970:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	2200      	movs	r2, #0
 8005978:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	2200      	movs	r2, #0
 8005980:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	2221      	movs	r2, #33	; 0x21
 8005988:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800598a:	6878      	ldr	r0, [r7, #4]
 800598c:	f000 f84c 	bl	8005a28 <DMA_CalcBaseAndBitshift>
 8005990:	4603      	mov	r3, r0
 8005992:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005998:	223f      	movs	r2, #63	; 0x3f
 800599a:	409a      	lsls	r2, r3
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	2200      	movs	r2, #0
 80059a4:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	2200      	movs	r2, #0
 80059aa:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2200      	movs	r2, #0
 80059b0:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2200      	movs	r2, #0
 80059b6:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2200      	movs	r2, #0
 80059bc:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2200      	movs	r2, #0
 80059c8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	2200      	movs	r2, #0
 80059d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80059da:	2300      	movs	r3, #0
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3710      	adds	r7, #16
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}

080059e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80059e4:	b480      	push	{r7}
 80059e6:	b083      	sub	sp, #12
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80059f2:	b2db      	uxtb	r3, r3
 80059f4:	2b02      	cmp	r3, #2
 80059f6:	d004      	beq.n	8005a02 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	2280      	movs	r2, #128	; 0x80
 80059fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80059fe:	2301      	movs	r3, #1
 8005a00:	e00c      	b.n	8005a1c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	2205      	movs	r2, #5
 8005a06:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f022 0201 	bic.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005a1a:	2300      	movs	r3, #0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	370c      	adds	r7, #12
 8005a20:	46bd      	mov	sp, r7
 8005a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a26:	4770      	bx	lr

08005a28 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b085      	sub	sp, #20
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	b2db      	uxtb	r3, r3
 8005a36:	3b10      	subs	r3, #16
 8005a38:	4a13      	ldr	r2, [pc, #76]	; (8005a88 <DMA_CalcBaseAndBitshift+0x60>)
 8005a3a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3e:	091b      	lsrs	r3, r3, #4
 8005a40:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005a42:	4a12      	ldr	r2, [pc, #72]	; (8005a8c <DMA_CalcBaseAndBitshift+0x64>)
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	4413      	add	r3, r2
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	461a      	mov	r2, r3
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	2b03      	cmp	r3, #3
 8005a54:	d908      	bls.n	8005a68 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	461a      	mov	r2, r3
 8005a5c:	4b0c      	ldr	r3, [pc, #48]	; (8005a90 <DMA_CalcBaseAndBitshift+0x68>)
 8005a5e:	4013      	ands	r3, r2
 8005a60:	1d1a      	adds	r2, r3, #4
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	659a      	str	r2, [r3, #88]	; 0x58
 8005a66:	e006      	b.n	8005a76 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	461a      	mov	r2, r3
 8005a6e:	4b08      	ldr	r3, [pc, #32]	; (8005a90 <DMA_CalcBaseAndBitshift+0x68>)
 8005a70:	4013      	ands	r3, r2
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3714      	adds	r7, #20
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a84:	4770      	bx	lr
 8005a86:	bf00      	nop
 8005a88:	aaaaaaab 	.word	0xaaaaaaab
 8005a8c:	080109fc 	.word	0x080109fc
 8005a90:	fffffc00 	.word	0xfffffc00

08005a94 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005a94:	b480      	push	{r7}
 8005a96:	b085      	sub	sp, #20
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a9c:	2300      	movs	r3, #0
 8005a9e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aa4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	699b      	ldr	r3, [r3, #24]
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d11f      	bne.n	8005aee <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8005aae:	68bb      	ldr	r3, [r7, #8]
 8005ab0:	2b03      	cmp	r3, #3
 8005ab2:	d855      	bhi.n	8005b60 <DMA_CheckFifoParam+0xcc>
 8005ab4:	a201      	add	r2, pc, #4	; (adr r2, 8005abc <DMA_CheckFifoParam+0x28>)
 8005ab6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005aba:	bf00      	nop
 8005abc:	08005acd 	.word	0x08005acd
 8005ac0:	08005adf 	.word	0x08005adf
 8005ac4:	08005acd 	.word	0x08005acd
 8005ac8:	08005b61 	.word	0x08005b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	d045      	beq.n	8005b64 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005ad8:	2301      	movs	r3, #1
 8005ada:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005adc:	e042      	b.n	8005b64 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005ae6:	d13f      	bne.n	8005b68 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8005ae8:	2301      	movs	r3, #1
 8005aea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005aec:	e03c      	b.n	8005b68 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	699b      	ldr	r3, [r3, #24]
 8005af2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005af6:	d121      	bne.n	8005b3c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	2b03      	cmp	r3, #3
 8005afc:	d836      	bhi.n	8005b6c <DMA_CheckFifoParam+0xd8>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <DMA_CheckFifoParam+0x70>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b15 	.word	0x08005b15
 8005b08:	08005b1b 	.word	0x08005b1b
 8005b0c:	08005b15 	.word	0x08005b15
 8005b10:	08005b2d 	.word	0x08005b2d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	73fb      	strb	r3, [r7, #15]
      break;
 8005b18:	e02f      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d024      	beq.n	8005b70 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8005b26:	2301      	movs	r3, #1
 8005b28:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005b2a:	e021      	b.n	8005b70 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005b34:	d11e      	bne.n	8005b74 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8005b36:	2301      	movs	r3, #1
 8005b38:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005b3a:	e01b      	b.n	8005b74 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005b3c:	68bb      	ldr	r3, [r7, #8]
 8005b3e:	2b02      	cmp	r3, #2
 8005b40:	d902      	bls.n	8005b48 <DMA_CheckFifoParam+0xb4>
 8005b42:	2b03      	cmp	r3, #3
 8005b44:	d003      	beq.n	8005b4e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005b46:	e018      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005b48:	2301      	movs	r3, #1
 8005b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8005b4c:	e015      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b52:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00e      	beq.n	8005b78 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8005b5e:	e00b      	b.n	8005b78 <DMA_CheckFifoParam+0xe4>
      break;
 8005b60:	bf00      	nop
 8005b62:	e00a      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b64:	bf00      	nop
 8005b66:	e008      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b68:	bf00      	nop
 8005b6a:	e006      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b6c:	bf00      	nop
 8005b6e:	e004      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b70:	bf00      	nop
 8005b72:	e002      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;   
 8005b74:	bf00      	nop
 8005b76:	e000      	b.n	8005b7a <DMA_CheckFifoParam+0xe6>
      break;
 8005b78:	bf00      	nop
    }
  } 
  
  return status; 
 8005b7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3714      	adds	r7, #20
 8005b80:	46bd      	mov	sp, r7
 8005b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b86:	4770      	bx	lr

08005b88 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005b88:	b580      	push	{r7, lr}
 8005b8a:	b082      	sub	sp, #8
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d101      	bne.n	8005b9a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005b96:	2301      	movs	r3, #1
 8005b98:	e039      	b.n	8005c0e <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d106      	bne.n	8005bb4 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7fe fae6 	bl	8004180 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2202      	movs	r2, #2
 8005bb8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	685a      	ldr	r2, [r3, #4]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	430a      	orrs	r2, r1
 8005bd0:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd8:	f023 0107 	bic.w	r1, r3, #7
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689a      	ldr	r2, [r3, #8]
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	430a      	orrs	r2, r1
 8005be6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bee:	4b0a      	ldr	r3, [pc, #40]	; (8005c18 <HAL_DMA2D_Init+0x90>)
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	687a      	ldr	r2, [r7, #4]
 8005bf4:	68d1      	ldr	r1, [r2, #12]
 8005bf6:	687a      	ldr	r2, [r7, #4]
 8005bf8:	6812      	ldr	r2, [r2, #0]
 8005bfa:	430b      	orrs	r3, r1
 8005bfc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	3708      	adds	r7, #8
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bd80      	pop	{r7, pc}
 8005c16:	bf00      	nop
 8005c18:	ffffc000 	.word	0xffffc000

08005c1c <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b086      	sub	sp, #24
 8005c20:	af02      	add	r7, sp, #8
 8005c22:	60f8      	str	r0, [r7, #12]
 8005c24:	60b9      	str	r1, [r7, #8]
 8005c26:	607a      	str	r2, [r7, #4]
 8005c28:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d101      	bne.n	8005c38 <HAL_DMA2D_Start+0x1c>
 8005c34:	2302      	movs	r3, #2
 8005c36:	e018      	b.n	8005c6a <HAL_DMA2D_Start+0x4e>
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	2201      	movs	r2, #1
 8005c3c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005c48:	69bb      	ldr	r3, [r7, #24]
 8005c4a:	9300      	str	r3, [sp, #0]
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	687a      	ldr	r2, [r7, #4]
 8005c50:	68b9      	ldr	r1, [r7, #8]
 8005c52:	68f8      	ldr	r0, [r7, #12]
 8005c54:	f000 f988 	bl	8005f68 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	681a      	ldr	r2, [r3, #0]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0201 	orr.w	r2, r2, #1
 8005c66:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3710      	adds	r7, #16
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bd80      	pop	{r7, pc}

08005c72 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005c72:	b580      	push	{r7, lr}
 8005c74:	b086      	sub	sp, #24
 8005c76:	af00      	add	r7, sp, #0
 8005c78:	6078      	str	r0, [r7, #4]
 8005c7a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f003 0301 	and.w	r3, r3, #1
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d056      	beq.n	8005d3c <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005c8e:	f7fe ffe5 	bl	8004c5c <HAL_GetTick>
 8005c92:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005c94:	e04b      	b.n	8005d2e <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d023      	beq.n	8005cf0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f003 0320 	and.w	r3, r3, #32
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d005      	beq.n	8005cbe <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb6:	f043 0202 	orr.w	r2, r3, #2
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	f003 0301 	and.w	r3, r3, #1
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d005      	beq.n	8005cd4 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ccc:	f043 0201 	orr.w	r2, r3, #1
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	2221      	movs	r2, #33	; 0x21
 8005cda:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2204      	movs	r2, #4
 8005ce0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2200      	movs	r2, #0
 8005ce8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005cec:	2301      	movs	r3, #1
 8005cee:	e0a5      	b.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cf6:	d01a      	beq.n	8005d2e <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005cf8:	f7fe ffb0 	bl	8004c5c <HAL_GetTick>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	697b      	ldr	r3, [r7, #20]
 8005d00:	1ad3      	subs	r3, r2, r3
 8005d02:	683a      	ldr	r2, [r7, #0]
 8005d04:	429a      	cmp	r2, r3
 8005d06:	d302      	bcc.n	8005d0e <HAL_DMA2D_PollForTransfer+0x9c>
 8005d08:	683b      	ldr	r3, [r7, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10f      	bne.n	8005d2e <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d12:	f043 0220 	orr.w	r2, r3, #32
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2203      	movs	r2, #3
 8005d1e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005d2a:	2303      	movs	r3, #3
 8005d2c:	e086      	b.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	685b      	ldr	r3, [r3, #4]
 8005d34:	f003 0302 	and.w	r3, r3, #2
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d0ac      	beq.n	8005c96 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	69db      	ldr	r3, [r3, #28]
 8005d42:	f003 0320 	and.w	r3, r3, #32
 8005d46:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d4e:	f003 0320 	and.w	r3, r3, #32
 8005d52:	693a      	ldr	r2, [r7, #16]
 8005d54:	4313      	orrs	r3, r2
 8005d56:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005d58:	693b      	ldr	r3, [r7, #16]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d061      	beq.n	8005e22 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005d5e:	f7fe ff7d 	bl	8004c5c <HAL_GetTick>
 8005d62:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005d64:	e056      	b.n	8005e14 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	685b      	ldr	r3, [r3, #4]
 8005d6c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d02e      	beq.n	8005dd6 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f003 0308 	and.w	r3, r3, #8
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d005      	beq.n	8005d8e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d86:	f043 0204 	orr.w	r2, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	f003 0320 	and.w	r3, r3, #32
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d005      	beq.n	8005da4 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d9c:	f043 0202 	orr.w	r2, r3, #2
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d005      	beq.n	8005dba <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005db2:	f043 0201 	orr.w	r2, r3, #1
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	2229      	movs	r2, #41	; 0x29
 8005dc0:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2204      	movs	r2, #4
 8005dc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005dd2:	2301      	movs	r3, #1
 8005dd4:	e032      	b.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d01a      	beq.n	8005e14 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005dde:	f7fe ff3d 	bl	8004c5c <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	697b      	ldr	r3, [r7, #20]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	683a      	ldr	r2, [r7, #0]
 8005dea:	429a      	cmp	r2, r3
 8005dec:	d302      	bcc.n	8005df4 <HAL_DMA2D_PollForTransfer+0x182>
 8005dee:	683b      	ldr	r3, [r7, #0]
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d10f      	bne.n	8005e14 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005df8:	f043 0220 	orr.w	r2, r3, #32
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2203      	movs	r2, #3
 8005e04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005e10:	2303      	movs	r3, #3
 8005e12:	e013      	b.n	8005e3c <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f003 0310 	and.w	r3, r3, #16
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d0a1      	beq.n	8005d66 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2212      	movs	r2, #18
 8005e28:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2201      	movs	r2, #1
 8005e2e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2200      	movs	r2, #0
 8005e36:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e3a:	2300      	movs	r3, #0
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3718      	adds	r7, #24
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
 8005e4c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	685b      	ldr	r3, [r3, #4]
 8005e52:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d101      	bne.n	8005e64 <HAL_DMA2D_ConfigLayer+0x20>
 8005e60:	2302      	movs	r3, #2
 8005e62:	e079      	b.n	8005f58 <HAL_DMA2D_ConfigLayer+0x114>
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2201      	movs	r2, #1
 8005e68:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2202      	movs	r2, #2
 8005e70:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	011b      	lsls	r3, r3, #4
 8005e78:	3318      	adds	r3, #24
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	685a      	ldr	r2, [r3, #4]
 8005e84:	693b      	ldr	r3, [r7, #16]
 8005e86:	689b      	ldr	r3, [r3, #8]
 8005e88:	041b      	lsls	r3, r3, #16
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005e8e:	4b35      	ldr	r3, [pc, #212]	; (8005f64 <HAL_DMA2D_ConfigLayer+0x120>)
 8005e90:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	685b      	ldr	r3, [r3, #4]
 8005e96:	2b0a      	cmp	r3, #10
 8005e98:	d003      	beq.n	8005ea2 <HAL_DMA2D_ConfigLayer+0x5e>
 8005e9a:	693b      	ldr	r3, [r7, #16]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	2b09      	cmp	r3, #9
 8005ea0:	d107      	bne.n	8005eb2 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005ea2:	693b      	ldr	r3, [r7, #16]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005eaa:	697a      	ldr	r2, [r7, #20]
 8005eac:	4313      	orrs	r3, r2
 8005eae:	617b      	str	r3, [r7, #20]
 8005eb0:	e005      	b.n	8005ebe <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005eb2:	693b      	ldr	r3, [r7, #16]
 8005eb4:	68db      	ldr	r3, [r3, #12]
 8005eb6:	061b      	lsls	r3, r3, #24
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	4313      	orrs	r3, r2
 8005ebc:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d120      	bne.n	8005f06 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	43db      	mvns	r3, r3
 8005ece:	ea02 0103 	and.w	r1, r2, r3
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	430a      	orrs	r2, r1
 8005eda:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	6812      	ldr	r2, [r2, #0]
 8005ee4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ee6:	693b      	ldr	r3, [r7, #16]
 8005ee8:	685b      	ldr	r3, [r3, #4]
 8005eea:	2b0a      	cmp	r3, #10
 8005eec:	d003      	beq.n	8005ef6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	685b      	ldr	r3, [r3, #4]
 8005ef2:	2b09      	cmp	r3, #9
 8005ef4:	d127      	bne.n	8005f46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	68da      	ldr	r2, [r3, #12]
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005f02:	629a      	str	r2, [r3, #40]	; 0x28
 8005f04:	e01f      	b.n	8005f46 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	69da      	ldr	r2, [r3, #28]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	43db      	mvns	r3, r3
 8005f10:	ea02 0103 	and.w	r1, r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	697a      	ldr	r2, [r7, #20]
 8005f1a:	430a      	orrs	r2, r1
 8005f1c:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	6812      	ldr	r2, [r2, #0]
 8005f26:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005f28:	693b      	ldr	r3, [r7, #16]
 8005f2a:	685b      	ldr	r3, [r3, #4]
 8005f2c:	2b0a      	cmp	r3, #10
 8005f2e:	d003      	beq.n	8005f38 <HAL_DMA2D_ConfigLayer+0xf4>
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	685b      	ldr	r3, [r3, #4]
 8005f34:	2b09      	cmp	r3, #9
 8005f36:	d106      	bne.n	8005f46 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	68da      	ldr	r2, [r3, #12]
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005f44:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2201      	movs	r2, #1
 8005f4a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005f56:	2300      	movs	r3, #0
}
 8005f58:	4618      	mov	r0, r3
 8005f5a:	371c      	adds	r7, #28
 8005f5c:	46bd      	mov	sp, r7
 8005f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f62:	4770      	bx	lr
 8005f64:	ff03000f 	.word	0xff03000f

08005f68 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005f68:	b480      	push	{r7}
 8005f6a:	b08b      	sub	sp, #44	; 0x2c
 8005f6c:	af00      	add	r7, sp, #0
 8005f6e:	60f8      	str	r0, [r7, #12]
 8005f70:	60b9      	str	r1, [r7, #8]
 8005f72:	607a      	str	r2, [r7, #4]
 8005f74:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f7c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	041a      	lsls	r2, r3, #16
 8005f84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f86:	431a      	orrs	r2, r3
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	430a      	orrs	r2, r1
 8005f8e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	685b      	ldr	r3, [r3, #4]
 8005f9c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005fa0:	d174      	bne.n	800608c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005fa8:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005fb0:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005fb2:	68bb      	ldr	r3, [r7, #8]
 8005fb4:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005fb8:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005fba:	68bb      	ldr	r3, [r7, #8]
 8005fbc:	b2db      	uxtb	r3, r3
 8005fbe:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d108      	bne.n	8005fda <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	69fb      	ldr	r3, [r7, #28]
 8005fcc:	431a      	orrs	r2, r3
 8005fce:	6a3b      	ldr	r3, [r7, #32]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	697a      	ldr	r2, [r7, #20]
 8005fd4:	4313      	orrs	r3, r2
 8005fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8005fd8:	e053      	b.n	8006082 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b01      	cmp	r3, #1
 8005fe0:	d106      	bne.n	8005ff0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005fe2:	69ba      	ldr	r2, [r7, #24]
 8005fe4:	69fb      	ldr	r3, [r7, #28]
 8005fe6:	4313      	orrs	r3, r2
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	4313      	orrs	r3, r2
 8005fec:	627b      	str	r3, [r7, #36]	; 0x24
 8005fee:	e048      	b.n	8006082 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	689b      	ldr	r3, [r3, #8]
 8005ff4:	2b02      	cmp	r3, #2
 8005ff6:	d111      	bne.n	800601c <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	0cdb      	lsrs	r3, r3, #19
 8005ffc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	0a9b      	lsrs	r3, r3, #10
 8006002:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	08db      	lsrs	r3, r3, #3
 8006008:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800600a:	69bb      	ldr	r3, [r7, #24]
 800600c:	015a      	lsls	r2, r3, #5
 800600e:	69fb      	ldr	r3, [r7, #28]
 8006010:	02db      	lsls	r3, r3, #11
 8006012:	4313      	orrs	r3, r2
 8006014:	697a      	ldr	r2, [r7, #20]
 8006016:	4313      	orrs	r3, r2
 8006018:	627b      	str	r3, [r7, #36]	; 0x24
 800601a:	e032      	b.n	8006082 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	689b      	ldr	r3, [r3, #8]
 8006020:	2b03      	cmp	r3, #3
 8006022:	d117      	bne.n	8006054 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006024:	6a3b      	ldr	r3, [r7, #32]
 8006026:	0fdb      	lsrs	r3, r3, #31
 8006028:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800602a:	69fb      	ldr	r3, [r7, #28]
 800602c:	0cdb      	lsrs	r3, r3, #19
 800602e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006030:	69bb      	ldr	r3, [r7, #24]
 8006032:	0adb      	lsrs	r3, r3, #11
 8006034:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	08db      	lsrs	r3, r3, #3
 800603a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800603c:	69bb      	ldr	r3, [r7, #24]
 800603e:	015a      	lsls	r2, r3, #5
 8006040:	69fb      	ldr	r3, [r7, #28]
 8006042:	029b      	lsls	r3, r3, #10
 8006044:	431a      	orrs	r2, r3
 8006046:	6a3b      	ldr	r3, [r7, #32]
 8006048:	03db      	lsls	r3, r3, #15
 800604a:	4313      	orrs	r3, r2
 800604c:	697a      	ldr	r2, [r7, #20]
 800604e:	4313      	orrs	r3, r2
 8006050:	627b      	str	r3, [r7, #36]	; 0x24
 8006052:	e016      	b.n	8006082 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006054:	6a3b      	ldr	r3, [r7, #32]
 8006056:	0f1b      	lsrs	r3, r3, #28
 8006058:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800605a:	69fb      	ldr	r3, [r7, #28]
 800605c:	0d1b      	lsrs	r3, r3, #20
 800605e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006060:	69bb      	ldr	r3, [r7, #24]
 8006062:	0b1b      	lsrs	r3, r3, #12
 8006064:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	091b      	lsrs	r3, r3, #4
 800606a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800606c:	69bb      	ldr	r3, [r7, #24]
 800606e:	011a      	lsls	r2, r3, #4
 8006070:	69fb      	ldr	r3, [r7, #28]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	431a      	orrs	r2, r3
 8006076:	6a3b      	ldr	r3, [r7, #32]
 8006078:	031b      	lsls	r3, r3, #12
 800607a:	4313      	orrs	r3, r2
 800607c:	697a      	ldr	r2, [r7, #20]
 800607e:	4313      	orrs	r3, r2
 8006080:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006088:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800608a:	e003      	b.n	8006094 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68ba      	ldr	r2, [r7, #8]
 8006092:	60da      	str	r2, [r3, #12]
}
 8006094:	bf00      	nop
 8006096:	372c      	adds	r7, #44	; 0x2c
 8006098:	46bd      	mov	sp, r7
 800609a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800609e:	4770      	bx	lr

080060a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060a0:	b480      	push	{r7}
 80060a2:	b089      	sub	sp, #36	; 0x24
 80060a4:	af00      	add	r7, sp, #0
 80060a6:	6078      	str	r0, [r7, #4]
 80060a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80060aa:	2300      	movs	r3, #0
 80060ac:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80060b2:	2300      	movs	r3, #0
 80060b4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80060b6:	2300      	movs	r3, #0
 80060b8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80060ba:	2300      	movs	r3, #0
 80060bc:	61fb      	str	r3, [r7, #28]
 80060be:	e175      	b.n	80063ac <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060c0:	2201      	movs	r2, #1
 80060c2:	69fb      	ldr	r3, [r7, #28]
 80060c4:	fa02 f303 	lsl.w	r3, r2, r3
 80060c8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	697a      	ldr	r2, [r7, #20]
 80060d0:	4013      	ands	r3, r2
 80060d2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80060d4:	693a      	ldr	r2, [r7, #16]
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	429a      	cmp	r2, r3
 80060da:	f040 8164 	bne.w	80063a6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060de:	683b      	ldr	r3, [r7, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	2b01      	cmp	r3, #1
 80060e4:	d00b      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
 80060e6:	683b      	ldr	r3, [r7, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	2b02      	cmp	r3, #2
 80060ec:	d007      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060ee:	683b      	ldr	r3, [r7, #0]
 80060f0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80060f2:	2b11      	cmp	r3, #17
 80060f4:	d003      	beq.n	80060fe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	2b12      	cmp	r3, #18
 80060fc:	d130      	bne.n	8006160 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006104:	69fb      	ldr	r3, [r7, #28]
 8006106:	005b      	lsls	r3, r3, #1
 8006108:	2203      	movs	r2, #3
 800610a:	fa02 f303 	lsl.w	r3, r2, r3
 800610e:	43db      	mvns	r3, r3
 8006110:	69ba      	ldr	r2, [r7, #24]
 8006112:	4013      	ands	r3, r2
 8006114:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	68da      	ldr	r2, [r3, #12]
 800611a:	69fb      	ldr	r3, [r7, #28]
 800611c:	005b      	lsls	r3, r3, #1
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	69ba      	ldr	r2, [r7, #24]
 8006124:	4313      	orrs	r3, r2
 8006126:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	69ba      	ldr	r2, [r7, #24]
 800612c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006134:	2201      	movs	r2, #1
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	fa02 f303 	lsl.w	r3, r2, r3
 800613c:	43db      	mvns	r3, r3
 800613e:	69ba      	ldr	r2, [r7, #24]
 8006140:	4013      	ands	r3, r2
 8006142:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	091b      	lsrs	r3, r3, #4
 800614a:	f003 0201 	and.w	r2, r3, #1
 800614e:	69fb      	ldr	r3, [r7, #28]
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	69ba      	ldr	r2, [r7, #24]
 8006156:	4313      	orrs	r3, r2
 8006158:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	69ba      	ldr	r2, [r7, #24]
 800615e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	005b      	lsls	r3, r3, #1
 800616a:	2203      	movs	r2, #3
 800616c:	fa02 f303 	lsl.w	r3, r2, r3
 8006170:	43db      	mvns	r3, r3
 8006172:	69ba      	ldr	r2, [r7, #24]
 8006174:	4013      	ands	r3, r2
 8006176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	69fb      	ldr	r3, [r7, #28]
 800617e:	005b      	lsls	r3, r3, #1
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	2b02      	cmp	r3, #2
 8006196:	d003      	beq.n	80061a0 <HAL_GPIO_Init+0x100>
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	2b12      	cmp	r3, #18
 800619e:	d123      	bne.n	80061e8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061a0:	69fb      	ldr	r3, [r7, #28]
 80061a2:	08da      	lsrs	r2, r3, #3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	3208      	adds	r2, #8
 80061a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	f003 0307 	and.w	r3, r3, #7
 80061b4:	009b      	lsls	r3, r3, #2
 80061b6:	220f      	movs	r2, #15
 80061b8:	fa02 f303 	lsl.w	r3, r2, r3
 80061bc:	43db      	mvns	r3, r3
 80061be:	69ba      	ldr	r2, [r7, #24]
 80061c0:	4013      	ands	r3, r2
 80061c2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061c4:	683b      	ldr	r3, [r7, #0]
 80061c6:	691a      	ldr	r2, [r3, #16]
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f003 0307 	and.w	r3, r3, #7
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	fa02 f303 	lsl.w	r3, r2, r3
 80061d4:	69ba      	ldr	r2, [r7, #24]
 80061d6:	4313      	orrs	r3, r2
 80061d8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 80061da:	69fb      	ldr	r3, [r7, #28]
 80061dc:	08da      	lsrs	r2, r3, #3
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3208      	adds	r2, #8
 80061e2:	69b9      	ldr	r1, [r7, #24]
 80061e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80061ee:	69fb      	ldr	r3, [r7, #28]
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	2203      	movs	r2, #3
 80061f4:	fa02 f303 	lsl.w	r3, r2, r3
 80061f8:	43db      	mvns	r3, r3
 80061fa:	69ba      	ldr	r2, [r7, #24]
 80061fc:	4013      	ands	r3, r2
 80061fe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006200:	683b      	ldr	r3, [r7, #0]
 8006202:	685b      	ldr	r3, [r3, #4]
 8006204:	f003 0203 	and.w	r2, r3, #3
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	fa02 f303 	lsl.w	r3, r2, r3
 8006210:	69ba      	ldr	r2, [r7, #24]
 8006212:	4313      	orrs	r3, r2
 8006214:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	f000 80be 	beq.w	80063a6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800622a:	4b65      	ldr	r3, [pc, #404]	; (80063c0 <HAL_GPIO_Init+0x320>)
 800622c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800622e:	4a64      	ldr	r2, [pc, #400]	; (80063c0 <HAL_GPIO_Init+0x320>)
 8006230:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006234:	6453      	str	r3, [r2, #68]	; 0x44
 8006236:	4b62      	ldr	r3, [pc, #392]	; (80063c0 <HAL_GPIO_Init+0x320>)
 8006238:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800623a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006242:	4a60      	ldr	r2, [pc, #384]	; (80063c4 <HAL_GPIO_Init+0x324>)
 8006244:	69fb      	ldr	r3, [r7, #28]
 8006246:	089b      	lsrs	r3, r3, #2
 8006248:	3302      	adds	r3, #2
 800624a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800624e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006250:	69fb      	ldr	r3, [r7, #28]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	220f      	movs	r2, #15
 800625a:	fa02 f303 	lsl.w	r3, r2, r3
 800625e:	43db      	mvns	r3, r3
 8006260:	69ba      	ldr	r2, [r7, #24]
 8006262:	4013      	ands	r3, r2
 8006264:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	4a57      	ldr	r2, [pc, #348]	; (80063c8 <HAL_GPIO_Init+0x328>)
 800626a:	4293      	cmp	r3, r2
 800626c:	d037      	beq.n	80062de <HAL_GPIO_Init+0x23e>
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	4a56      	ldr	r2, [pc, #344]	; (80063cc <HAL_GPIO_Init+0x32c>)
 8006272:	4293      	cmp	r3, r2
 8006274:	d031      	beq.n	80062da <HAL_GPIO_Init+0x23a>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	4a55      	ldr	r2, [pc, #340]	; (80063d0 <HAL_GPIO_Init+0x330>)
 800627a:	4293      	cmp	r3, r2
 800627c:	d02b      	beq.n	80062d6 <HAL_GPIO_Init+0x236>
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	4a54      	ldr	r2, [pc, #336]	; (80063d4 <HAL_GPIO_Init+0x334>)
 8006282:	4293      	cmp	r3, r2
 8006284:	d025      	beq.n	80062d2 <HAL_GPIO_Init+0x232>
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	4a53      	ldr	r2, [pc, #332]	; (80063d8 <HAL_GPIO_Init+0x338>)
 800628a:	4293      	cmp	r3, r2
 800628c:	d01f      	beq.n	80062ce <HAL_GPIO_Init+0x22e>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4a52      	ldr	r2, [pc, #328]	; (80063dc <HAL_GPIO_Init+0x33c>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d019      	beq.n	80062ca <HAL_GPIO_Init+0x22a>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	4a51      	ldr	r2, [pc, #324]	; (80063e0 <HAL_GPIO_Init+0x340>)
 800629a:	4293      	cmp	r3, r2
 800629c:	d013      	beq.n	80062c6 <HAL_GPIO_Init+0x226>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a50      	ldr	r2, [pc, #320]	; (80063e4 <HAL_GPIO_Init+0x344>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d00d      	beq.n	80062c2 <HAL_GPIO_Init+0x222>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a4f      	ldr	r2, [pc, #316]	; (80063e8 <HAL_GPIO_Init+0x348>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d007      	beq.n	80062be <HAL_GPIO_Init+0x21e>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a4e      	ldr	r2, [pc, #312]	; (80063ec <HAL_GPIO_Init+0x34c>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d101      	bne.n	80062ba <HAL_GPIO_Init+0x21a>
 80062b6:	2309      	movs	r3, #9
 80062b8:	e012      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062ba:	230a      	movs	r3, #10
 80062bc:	e010      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062be:	2308      	movs	r3, #8
 80062c0:	e00e      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062c2:	2307      	movs	r3, #7
 80062c4:	e00c      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062c6:	2306      	movs	r3, #6
 80062c8:	e00a      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062ca:	2305      	movs	r3, #5
 80062cc:	e008      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062ce:	2304      	movs	r3, #4
 80062d0:	e006      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062d2:	2303      	movs	r3, #3
 80062d4:	e004      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062d6:	2302      	movs	r3, #2
 80062d8:	e002      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062da:	2301      	movs	r3, #1
 80062dc:	e000      	b.n	80062e0 <HAL_GPIO_Init+0x240>
 80062de:	2300      	movs	r3, #0
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	f002 0203 	and.w	r2, r2, #3
 80062e6:	0092      	lsls	r2, r2, #2
 80062e8:	4093      	lsls	r3, r2
 80062ea:	69ba      	ldr	r2, [r7, #24]
 80062ec:	4313      	orrs	r3, r2
 80062ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80062f0:	4934      	ldr	r1, [pc, #208]	; (80063c4 <HAL_GPIO_Init+0x324>)
 80062f2:	69fb      	ldr	r3, [r7, #28]
 80062f4:	089b      	lsrs	r3, r3, #2
 80062f6:	3302      	adds	r3, #2
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80062fe:	4b3c      	ldr	r3, [pc, #240]	; (80063f0 <HAL_GPIO_Init+0x350>)
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	43db      	mvns	r3, r3
 8006308:	69ba      	ldr	r2, [r7, #24]
 800630a:	4013      	ands	r3, r2
 800630c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	685b      	ldr	r3, [r3, #4]
 8006312:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006316:	2b00      	cmp	r3, #0
 8006318:	d003      	beq.n	8006322 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800631a:	69ba      	ldr	r2, [r7, #24]
 800631c:	693b      	ldr	r3, [r7, #16]
 800631e:	4313      	orrs	r3, r2
 8006320:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006322:	4a33      	ldr	r2, [pc, #204]	; (80063f0 <HAL_GPIO_Init+0x350>)
 8006324:	69bb      	ldr	r3, [r7, #24]
 8006326:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006328:	4b31      	ldr	r3, [pc, #196]	; (80063f0 <HAL_GPIO_Init+0x350>)
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	43db      	mvns	r3, r3
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	4013      	ands	r3, r2
 8006336:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006344:	69ba      	ldr	r2, [r7, #24]
 8006346:	693b      	ldr	r3, [r7, #16]
 8006348:	4313      	orrs	r3, r2
 800634a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800634c:	4a28      	ldr	r2, [pc, #160]	; (80063f0 <HAL_GPIO_Init+0x350>)
 800634e:	69bb      	ldr	r3, [r7, #24]
 8006350:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006352:	4b27      	ldr	r3, [pc, #156]	; (80063f0 <HAL_GPIO_Init+0x350>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006358:	693b      	ldr	r3, [r7, #16]
 800635a:	43db      	mvns	r3, r3
 800635c:	69ba      	ldr	r2, [r7, #24]
 800635e:	4013      	ands	r3, r2
 8006360:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800636e:	69ba      	ldr	r2, [r7, #24]
 8006370:	693b      	ldr	r3, [r7, #16]
 8006372:	4313      	orrs	r3, r2
 8006374:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006376:	4a1e      	ldr	r2, [pc, #120]	; (80063f0 <HAL_GPIO_Init+0x350>)
 8006378:	69bb      	ldr	r3, [r7, #24]
 800637a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800637c:	4b1c      	ldr	r3, [pc, #112]	; (80063f0 <HAL_GPIO_Init+0x350>)
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006382:	693b      	ldr	r3, [r7, #16]
 8006384:	43db      	mvns	r3, r3
 8006386:	69ba      	ldr	r2, [r7, #24]
 8006388:	4013      	ands	r3, r2
 800638a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006398:	69ba      	ldr	r2, [r7, #24]
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	4313      	orrs	r3, r2
 800639e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80063a0:	4a13      	ldr	r2, [pc, #76]	; (80063f0 <HAL_GPIO_Init+0x350>)
 80063a2:	69bb      	ldr	r3, [r7, #24]
 80063a4:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 80063a6:	69fb      	ldr	r3, [r7, #28]
 80063a8:	3301      	adds	r3, #1
 80063aa:	61fb      	str	r3, [r7, #28]
 80063ac:	69fb      	ldr	r3, [r7, #28]
 80063ae:	2b0f      	cmp	r3, #15
 80063b0:	f67f ae86 	bls.w	80060c0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063b4:	bf00      	nop
 80063b6:	3724      	adds	r7, #36	; 0x24
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	40023800 	.word	0x40023800
 80063c4:	40013800 	.word	0x40013800
 80063c8:	40020000 	.word	0x40020000
 80063cc:	40020400 	.word	0x40020400
 80063d0:	40020800 	.word	0x40020800
 80063d4:	40020c00 	.word	0x40020c00
 80063d8:	40021000 	.word	0x40021000
 80063dc:	40021400 	.word	0x40021400
 80063e0:	40021800 	.word	0x40021800
 80063e4:	40021c00 	.word	0x40021c00
 80063e8:	40022000 	.word	0x40022000
 80063ec:	40022400 	.word	0x40022400
 80063f0:	40013c00 	.word	0x40013c00

080063f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80063f4:	b480      	push	{r7}
 80063f6:	b087      	sub	sp, #28
 80063f8:	af00      	add	r7, sp, #0
 80063fa:	6078      	str	r0, [r7, #4]
 80063fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80063fe:	2300      	movs	r3, #0
 8006400:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8006402:	2300      	movs	r3, #0
 8006404:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8006406:	2300      	movs	r3, #0
 8006408:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800640a:	2300      	movs	r3, #0
 800640c:	617b      	str	r3, [r7, #20]
 800640e:	e0d9      	b.n	80065c4 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006410:	2201      	movs	r2, #1
 8006412:	697b      	ldr	r3, [r7, #20]
 8006414:	fa02 f303 	lsl.w	r3, r2, r3
 8006418:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800641a:	683a      	ldr	r2, [r7, #0]
 800641c:	693b      	ldr	r3, [r7, #16]
 800641e:	4013      	ands	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	693b      	ldr	r3, [r7, #16]
 8006426:	429a      	cmp	r2, r3
 8006428:	f040 80c9 	bne.w	80065be <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 800642c:	4a6a      	ldr	r2, [pc, #424]	; (80065d8 <HAL_GPIO_DeInit+0x1e4>)
 800642e:	697b      	ldr	r3, [r7, #20]
 8006430:	089b      	lsrs	r3, r3, #2
 8006432:	3302      	adds	r3, #2
 8006434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006438:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	f003 0303 	and.w	r3, r3, #3
 8006440:	009b      	lsls	r3, r3, #2
 8006442:	220f      	movs	r2, #15
 8006444:	fa02 f303 	lsl.w	r3, r2, r3
 8006448:	68ba      	ldr	r2, [r7, #8]
 800644a:	4013      	ands	r3, r2
 800644c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	4a62      	ldr	r2, [pc, #392]	; (80065dc <HAL_GPIO_DeInit+0x1e8>)
 8006452:	4293      	cmp	r3, r2
 8006454:	d037      	beq.n	80064c6 <HAL_GPIO_DeInit+0xd2>
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	4a61      	ldr	r2, [pc, #388]	; (80065e0 <HAL_GPIO_DeInit+0x1ec>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d031      	beq.n	80064c2 <HAL_GPIO_DeInit+0xce>
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	4a60      	ldr	r2, [pc, #384]	; (80065e4 <HAL_GPIO_DeInit+0x1f0>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d02b      	beq.n	80064be <HAL_GPIO_DeInit+0xca>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	4a5f      	ldr	r2, [pc, #380]	; (80065e8 <HAL_GPIO_DeInit+0x1f4>)
 800646a:	4293      	cmp	r3, r2
 800646c:	d025      	beq.n	80064ba <HAL_GPIO_DeInit+0xc6>
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	4a5e      	ldr	r2, [pc, #376]	; (80065ec <HAL_GPIO_DeInit+0x1f8>)
 8006472:	4293      	cmp	r3, r2
 8006474:	d01f      	beq.n	80064b6 <HAL_GPIO_DeInit+0xc2>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	4a5d      	ldr	r2, [pc, #372]	; (80065f0 <HAL_GPIO_DeInit+0x1fc>)
 800647a:	4293      	cmp	r3, r2
 800647c:	d019      	beq.n	80064b2 <HAL_GPIO_DeInit+0xbe>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	4a5c      	ldr	r2, [pc, #368]	; (80065f4 <HAL_GPIO_DeInit+0x200>)
 8006482:	4293      	cmp	r3, r2
 8006484:	d013      	beq.n	80064ae <HAL_GPIO_DeInit+0xba>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a5b      	ldr	r2, [pc, #364]	; (80065f8 <HAL_GPIO_DeInit+0x204>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00d      	beq.n	80064aa <HAL_GPIO_DeInit+0xb6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a5a      	ldr	r2, [pc, #360]	; (80065fc <HAL_GPIO_DeInit+0x208>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <HAL_GPIO_DeInit+0xb2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a59      	ldr	r2, [pc, #356]	; (8006600 <HAL_GPIO_DeInit+0x20c>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_GPIO_DeInit+0xae>
 800649e:	2309      	movs	r3, #9
 80064a0:	e012      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064a2:	230a      	movs	r3, #10
 80064a4:	e010      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064a6:	2308      	movs	r3, #8
 80064a8:	e00e      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064aa:	2307      	movs	r3, #7
 80064ac:	e00c      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064ae:	2306      	movs	r3, #6
 80064b0:	e00a      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064b2:	2305      	movs	r3, #5
 80064b4:	e008      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064b6:	2304      	movs	r3, #4
 80064b8:	e006      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064ba:	2303      	movs	r3, #3
 80064bc:	e004      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064be:	2302      	movs	r3, #2
 80064c0:	e002      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064c2:	2301      	movs	r3, #1
 80064c4:	e000      	b.n	80064c8 <HAL_GPIO_DeInit+0xd4>
 80064c6:	2300      	movs	r3, #0
 80064c8:	697a      	ldr	r2, [r7, #20]
 80064ca:	f002 0203 	and.w	r2, r2, #3
 80064ce:	0092      	lsls	r2, r2, #2
 80064d0:	4093      	lsls	r3, r2
 80064d2:	68ba      	ldr	r2, [r7, #8]
 80064d4:	429a      	cmp	r2, r3
 80064d6:	d132      	bne.n	800653e <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80064d8:	4b4a      	ldr	r3, [pc, #296]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064da:	681a      	ldr	r2, [r3, #0]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	43db      	mvns	r3, r3
 80064e0:	4948      	ldr	r1, [pc, #288]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064e2:	4013      	ands	r3, r2
 80064e4:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80064e6:	4b47      	ldr	r3, [pc, #284]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064e8:	685a      	ldr	r2, [r3, #4]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	43db      	mvns	r3, r3
 80064ee:	4945      	ldr	r1, [pc, #276]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064f0:	4013      	ands	r3, r2
 80064f2:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80064f4:	4b43      	ldr	r3, [pc, #268]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	43db      	mvns	r3, r3
 80064fc:	4941      	ldr	r1, [pc, #260]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 80064fe:	4013      	ands	r3, r2
 8006500:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8006502:	4b40      	ldr	r3, [pc, #256]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 8006504:	68da      	ldr	r2, [r3, #12]
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	43db      	mvns	r3, r3
 800650a:	493e      	ldr	r1, [pc, #248]	; (8006604 <HAL_GPIO_DeInit+0x210>)
 800650c:	4013      	ands	r3, r2
 800650e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	f003 0303 	and.w	r3, r3, #3
 8006516:	009b      	lsls	r3, r3, #2
 8006518:	220f      	movs	r2, #15
 800651a:	fa02 f303 	lsl.w	r3, r2, r3
 800651e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 8006520:	4a2d      	ldr	r2, [pc, #180]	; (80065d8 <HAL_GPIO_DeInit+0x1e4>)
 8006522:	697b      	ldr	r3, [r7, #20]
 8006524:	089b      	lsrs	r3, r3, #2
 8006526:	3302      	adds	r3, #2
 8006528:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	43da      	mvns	r2, r3
 8006530:	4829      	ldr	r0, [pc, #164]	; (80065d8 <HAL_GPIO_DeInit+0x1e4>)
 8006532:	697b      	ldr	r3, [r7, #20]
 8006534:	089b      	lsrs	r3, r3, #2
 8006536:	400a      	ands	r2, r1
 8006538:	3302      	adds	r3, #2
 800653a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681a      	ldr	r2, [r3, #0]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	005b      	lsls	r3, r3, #1
 8006546:	2103      	movs	r1, #3
 8006548:	fa01 f303 	lsl.w	r3, r1, r3
 800654c:	43db      	mvns	r3, r3
 800654e:	401a      	ands	r2, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	08da      	lsrs	r2, r3, #3
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	3208      	adds	r2, #8
 800655c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006560:	697b      	ldr	r3, [r7, #20]
 8006562:	f003 0307 	and.w	r3, r3, #7
 8006566:	009b      	lsls	r3, r3, #2
 8006568:	220f      	movs	r2, #15
 800656a:	fa02 f303 	lsl.w	r3, r2, r3
 800656e:	43db      	mvns	r3, r3
 8006570:	697a      	ldr	r2, [r7, #20]
 8006572:	08d2      	lsrs	r2, r2, #3
 8006574:	4019      	ands	r1, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	3208      	adds	r2, #8
 800657a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	68da      	ldr	r2, [r3, #12]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	2103      	movs	r1, #3
 8006588:	fa01 f303 	lsl.w	r3, r1, r3
 800658c:	43db      	mvns	r3, r3
 800658e:	401a      	ands	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	685a      	ldr	r2, [r3, #4]
 8006598:	2101      	movs	r1, #1
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	fa01 f303 	lsl.w	r3, r1, r3
 80065a0:	43db      	mvns	r3, r3
 80065a2:	401a      	ands	r2, r3
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	689a      	ldr	r2, [r3, #8]
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	005b      	lsls	r3, r3, #1
 80065b0:	2103      	movs	r1, #3
 80065b2:	fa01 f303 	lsl.w	r3, r1, r3
 80065b6:	43db      	mvns	r3, r3
 80065b8:	401a      	ands	r2, r3
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 80065be:	697b      	ldr	r3, [r7, #20]
 80065c0:	3301      	adds	r3, #1
 80065c2:	617b      	str	r3, [r7, #20]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b0f      	cmp	r3, #15
 80065c8:	f67f af22 	bls.w	8006410 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 80065cc:	bf00      	nop
 80065ce:	371c      	adds	r7, #28
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr
 80065d8:	40013800 	.word	0x40013800
 80065dc:	40020000 	.word	0x40020000
 80065e0:	40020400 	.word	0x40020400
 80065e4:	40020800 	.word	0x40020800
 80065e8:	40020c00 	.word	0x40020c00
 80065ec:	40021000 	.word	0x40021000
 80065f0:	40021400 	.word	0x40021400
 80065f4:	40021800 	.word	0x40021800
 80065f8:	40021c00 	.word	0x40021c00
 80065fc:	40022000 	.word	0x40022000
 8006600:	40022400 	.word	0x40022400
 8006604:	40013c00 	.word	0x40013c00

08006608 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006608:	b480      	push	{r7}
 800660a:	b085      	sub	sp, #20
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	460b      	mov	r3, r1
 8006612:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	691a      	ldr	r2, [r3, #16]
 8006618:	887b      	ldrh	r3, [r7, #2]
 800661a:	4013      	ands	r3, r2
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006620:	2301      	movs	r3, #1
 8006622:	73fb      	strb	r3, [r7, #15]
 8006624:	e001      	b.n	800662a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006626:	2300      	movs	r3, #0
 8006628:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800662a:	7bfb      	ldrb	r3, [r7, #15]
}
 800662c:	4618      	mov	r0, r3
 800662e:	3714      	adds	r7, #20
 8006630:	46bd      	mov	sp, r7
 8006632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006636:	4770      	bx	lr

08006638 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006638:	b480      	push	{r7}
 800663a:	b083      	sub	sp, #12
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	460b      	mov	r3, r1
 8006642:	807b      	strh	r3, [r7, #2]
 8006644:	4613      	mov	r3, r2
 8006646:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006648:	787b      	ldrb	r3, [r7, #1]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d003      	beq.n	8006656 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800664e:	887a      	ldrh	r2, [r7, #2]
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006654:	e003      	b.n	800665e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006656:	887b      	ldrh	r3, [r7, #2]
 8006658:	041a      	lsls	r2, r3, #16
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	619a      	str	r2, [r3, #24]
}
 800665e:	bf00      	nop
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr
	...

0800666c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b082      	sub	sp, #8
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	2b00      	cmp	r3, #0
 8006678:	d101      	bne.n	800667e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e07f      	b.n	800677e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006684:	b2db      	uxtb	r3, r3
 8006686:	2b00      	cmp	r3, #0
 8006688:	d106      	bne.n	8006698 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fd fd94 	bl	80041c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2224      	movs	r2, #36	; 0x24
 800669c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	681a      	ldr	r2, [r3, #0]
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	f022 0201 	bic.w	r2, r2, #1
 80066ae:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	685a      	ldr	r2, [r3, #4]
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80066bc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066cc:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	68db      	ldr	r3, [r3, #12]
 80066d2:	2b01      	cmp	r3, #1
 80066d4:	d107      	bne.n	80066e6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	689a      	ldr	r2, [r3, #8]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80066e2:	609a      	str	r2, [r3, #8]
 80066e4:	e006      	b.n	80066f4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	689a      	ldr	r2, [r3, #8]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80066f2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	68db      	ldr	r3, [r3, #12]
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d104      	bne.n	8006706 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006704:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	6859      	ldr	r1, [r3, #4]
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681a      	ldr	r2, [r3, #0]
 8006710:	4b1d      	ldr	r3, [pc, #116]	; (8006788 <HAL_I2C_Init+0x11c>)
 8006712:	430b      	orrs	r3, r1
 8006714:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	68da      	ldr	r2, [r3, #12]
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006724:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	691a      	ldr	r2, [r3, #16]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	ea42 0103 	orr.w	r1, r2, r3
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	699b      	ldr	r3, [r3, #24]
 8006736:	021a      	lsls	r2, r3, #8
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	430a      	orrs	r2, r1
 800673e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	69d9      	ldr	r1, [r3, #28]
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	6a1a      	ldr	r2, [r3, #32]
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	430a      	orrs	r2, r1
 800674e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	f042 0201 	orr.w	r2, r2, #1
 800675e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	2200      	movs	r2, #0
 8006764:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2220      	movs	r2, #32
 800676a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	2200      	movs	r2, #0
 8006772:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800677c:	2300      	movs	r3, #0
}
 800677e:	4618      	mov	r0, r3
 8006780:	3708      	adds	r7, #8
 8006782:	46bd      	mov	sp, r7
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	02008000 	.word	0x02008000

0800678c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b082      	sub	sp, #8
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e021      	b.n	80067e2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2224      	movs	r2, #36	; 0x24
 80067a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	681a      	ldr	r2, [r3, #0]
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	f022 0201 	bic.w	r2, r2, #1
 80067b4:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fd fd7a 	bl	80042b0 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	2200      	movs	r2, #0
 80067c0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	2200      	movs	r2, #0
 80067ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	2200      	movs	r2, #0
 80067dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80067e0:	2300      	movs	r3, #0
}
 80067e2:	4618      	mov	r0, r3
 80067e4:	3708      	adds	r7, #8
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
	...

080067ec <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067ec:	b580      	push	{r7, lr}
 80067ee:	b088      	sub	sp, #32
 80067f0:	af02      	add	r7, sp, #8
 80067f2:	60f8      	str	r0, [r7, #12]
 80067f4:	4608      	mov	r0, r1
 80067f6:	4611      	mov	r1, r2
 80067f8:	461a      	mov	r2, r3
 80067fa:	4603      	mov	r3, r0
 80067fc:	817b      	strh	r3, [r7, #10]
 80067fe:	460b      	mov	r3, r1
 8006800:	813b      	strh	r3, [r7, #8]
 8006802:	4613      	mov	r3, r2
 8006804:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800680c:	b2db      	uxtb	r3, r3
 800680e:	2b20      	cmp	r3, #32
 8006810:	f040 80f9 	bne.w	8006a06 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006814:	6a3b      	ldr	r3, [r7, #32]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d002      	beq.n	8006820 <HAL_I2C_Mem_Write+0x34>
 800681a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800681c:	2b00      	cmp	r3, #0
 800681e:	d105      	bne.n	800682c <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006826:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006828:	2301      	movs	r3, #1
 800682a:	e0ed      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006832:	2b01      	cmp	r3, #1
 8006834:	d101      	bne.n	800683a <HAL_I2C_Mem_Write+0x4e>
 8006836:	2302      	movs	r3, #2
 8006838:	e0e6      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	2201      	movs	r2, #1
 800683e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006842:	f7fe fa0b 	bl	8004c5c <HAL_GetTick>
 8006846:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006848:	697b      	ldr	r3, [r7, #20]
 800684a:	9300      	str	r3, [sp, #0]
 800684c:	2319      	movs	r3, #25
 800684e:	2201      	movs	r2, #1
 8006850:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 fad1 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e0d1      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	2221      	movs	r2, #33	; 0x21
 8006868:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	2240      	movs	r2, #64	; 0x40
 8006870:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	2200      	movs	r2, #0
 8006878:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a3a      	ldr	r2, [r7, #32]
 800687e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006884:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	2200      	movs	r2, #0
 800688a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800688c:	88f8      	ldrh	r0, [r7, #6]
 800688e:	893a      	ldrh	r2, [r7, #8]
 8006890:	8979      	ldrh	r1, [r7, #10]
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	9301      	str	r3, [sp, #4]
 8006896:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006898:	9300      	str	r3, [sp, #0]
 800689a:	4603      	mov	r3, r0
 800689c:	68f8      	ldr	r0, [r7, #12]
 800689e:	f000 f9e1 	bl	8006c64 <I2C_RequestMemoryWrite>
 80068a2:	4603      	mov	r3, r0
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d005      	beq.n	80068b4 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80068b0:	2301      	movs	r3, #1
 80068b2:	e0a9      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	2bff      	cmp	r3, #255	; 0xff
 80068bc:	d90e      	bls.n	80068dc <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	22ff      	movs	r2, #255	; 0xff
 80068c2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068c8:	b2da      	uxtb	r2, r3
 80068ca:	8979      	ldrh	r1, [r7, #10]
 80068cc:	2300      	movs	r3, #0
 80068ce:	9300      	str	r3, [sp, #0]
 80068d0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80068d4:	68f8      	ldr	r0, [r7, #12]
 80068d6:	f000 fbb3 	bl	8007040 <I2C_TransferConfig>
 80068da:	e00f      	b.n	80068fc <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068e0:	b29a      	uxth	r2, r3
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80068e6:	68fb      	ldr	r3, [r7, #12]
 80068e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ea:	b2da      	uxtb	r2, r3
 80068ec:	8979      	ldrh	r1, [r7, #10]
 80068ee:	2300      	movs	r3, #0
 80068f0:	9300      	str	r3, [sp, #0]
 80068f2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068f6:	68f8      	ldr	r0, [r7, #12]
 80068f8:	f000 fba2 	bl	8007040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068fc:	697a      	ldr	r2, [r7, #20]
 80068fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f000 fabb 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006906:	4603      	mov	r3, r0
 8006908:	2b00      	cmp	r3, #0
 800690a:	d001      	beq.n	8006910 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e07b      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006914:	781a      	ldrb	r2, [r3, #0]
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006920:	1c5a      	adds	r2, r3, #1
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800692a:	b29b      	uxth	r3, r3
 800692c:	3b01      	subs	r3, #1
 800692e:	b29a      	uxth	r2, r3
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006938:	3b01      	subs	r3, #1
 800693a:	b29a      	uxth	r2, r3
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006944:	b29b      	uxth	r3, r3
 8006946:	2b00      	cmp	r3, #0
 8006948:	d034      	beq.n	80069b4 <HAL_I2C_Mem_Write+0x1c8>
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800694e:	2b00      	cmp	r3, #0
 8006950:	d130      	bne.n	80069b4 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	9300      	str	r3, [sp, #0]
 8006956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006958:	2200      	movs	r2, #0
 800695a:	2180      	movs	r1, #128	; 0x80
 800695c:	68f8      	ldr	r0, [r7, #12]
 800695e:	f000 fa4d 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006962:	4603      	mov	r3, r0
 8006964:	2b00      	cmp	r3, #0
 8006966:	d001      	beq.n	800696c <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e04d      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006970:	b29b      	uxth	r3, r3
 8006972:	2bff      	cmp	r3, #255	; 0xff
 8006974:	d90e      	bls.n	8006994 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	22ff      	movs	r2, #255	; 0xff
 800697a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006980:	b2da      	uxtb	r2, r3
 8006982:	8979      	ldrh	r1, [r7, #10]
 8006984:	2300      	movs	r3, #0
 8006986:	9300      	str	r3, [sp, #0]
 8006988:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800698c:	68f8      	ldr	r0, [r7, #12]
 800698e:	f000 fb57 	bl	8007040 <I2C_TransferConfig>
 8006992:	e00f      	b.n	80069b4 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006998:	b29a      	uxth	r2, r3
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069a2:	b2da      	uxtb	r2, r3
 80069a4:	8979      	ldrh	r1, [r7, #10]
 80069a6:	2300      	movs	r3, #0
 80069a8:	9300      	str	r3, [sp, #0]
 80069aa:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069ae:	68f8      	ldr	r0, [r7, #12]
 80069b0:	f000 fb46 	bl	8007040 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069b8:	b29b      	uxth	r3, r3
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d19e      	bne.n	80068fc <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069be:	697a      	ldr	r2, [r7, #20]
 80069c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80069c2:	68f8      	ldr	r0, [r7, #12]
 80069c4:	f000 fa9a 	bl	8006efc <I2C_WaitOnSTOPFlagUntilTimeout>
 80069c8:	4603      	mov	r3, r0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d001      	beq.n	80069d2 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	e01a      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	2220      	movs	r2, #32
 80069d8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	6859      	ldr	r1, [r3, #4]
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	681a      	ldr	r2, [r3, #0]
 80069e4:	4b0a      	ldr	r3, [pc, #40]	; (8006a10 <HAL_I2C_Mem_Write+0x224>)
 80069e6:	400b      	ands	r3, r1
 80069e8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2220      	movs	r2, #32
 80069ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	2200      	movs	r2, #0
 80069f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	2200      	movs	r2, #0
 80069fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006a02:	2300      	movs	r3, #0
 8006a04:	e000      	b.n	8006a08 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8006a06:	2302      	movs	r3, #2
  }
}
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	fe00e800 	.word	0xfe00e800

08006a14 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b088      	sub	sp, #32
 8006a18:	af02      	add	r7, sp, #8
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	4608      	mov	r0, r1
 8006a1e:	4611      	mov	r1, r2
 8006a20:	461a      	mov	r2, r3
 8006a22:	4603      	mov	r3, r0
 8006a24:	817b      	strh	r3, [r7, #10]
 8006a26:	460b      	mov	r3, r1
 8006a28:	813b      	strh	r3, [r7, #8]
 8006a2a:	4613      	mov	r3, r2
 8006a2c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a34:	b2db      	uxtb	r3, r3
 8006a36:	2b20      	cmp	r3, #32
 8006a38:	f040 80fd 	bne.w	8006c36 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a3c:	6a3b      	ldr	r3, [r7, #32]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d002      	beq.n	8006a48 <HAL_I2C_Mem_Read+0x34>
 8006a42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d105      	bne.n	8006a54 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006a4e:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006a50:	2301      	movs	r3, #1
 8006a52:	e0f1      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a5a:	2b01      	cmp	r3, #1
 8006a5c:	d101      	bne.n	8006a62 <HAL_I2C_Mem_Read+0x4e>
 8006a5e:	2302      	movs	r3, #2
 8006a60:	e0ea      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	2201      	movs	r2, #1
 8006a66:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006a6a:	f7fe f8f7 	bl	8004c5c <HAL_GetTick>
 8006a6e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	2319      	movs	r3, #25
 8006a76:	2201      	movs	r2, #1
 8006a78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006a7c:	68f8      	ldr	r0, [r7, #12]
 8006a7e:	f000 f9bd 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006a82:	4603      	mov	r3, r0
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d001      	beq.n	8006a8c <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006a88:	2301      	movs	r3, #1
 8006a8a:	e0d5      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	2222      	movs	r2, #34	; 0x22
 8006a90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	2240      	movs	r2, #64	; 0x40
 8006a98:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	6a3a      	ldr	r2, [r7, #32]
 8006aa6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006aac:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006ab4:	88f8      	ldrh	r0, [r7, #6]
 8006ab6:	893a      	ldrh	r2, [r7, #8]
 8006ab8:	8979      	ldrh	r1, [r7, #10]
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	9301      	str	r3, [sp, #4]
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	9300      	str	r3, [sp, #0]
 8006ac2:	4603      	mov	r3, r0
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 f921 	bl	8006d0c <I2C_RequestMemoryRead>
 8006aca:	4603      	mov	r3, r0
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d005      	beq.n	8006adc <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006ad8:	2301      	movs	r3, #1
 8006ada:	e0ad      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ae0:	b29b      	uxth	r3, r3
 8006ae2:	2bff      	cmp	r3, #255	; 0xff
 8006ae4:	d90e      	bls.n	8006b04 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	22ff      	movs	r2, #255	; 0xff
 8006aea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006af0:	b2da      	uxtb	r2, r3
 8006af2:	8979      	ldrh	r1, [r7, #10]
 8006af4:	4b52      	ldr	r3, [pc, #328]	; (8006c40 <HAL_I2C_Mem_Read+0x22c>)
 8006af6:	9300      	str	r3, [sp, #0]
 8006af8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006afc:	68f8      	ldr	r0, [r7, #12]
 8006afe:	f000 fa9f 	bl	8007040 <I2C_TransferConfig>
 8006b02:	e00f      	b.n	8006b24 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29a      	uxth	r2, r3
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b12:	b2da      	uxtb	r2, r3
 8006b14:	8979      	ldrh	r1, [r7, #10]
 8006b16:	4b4a      	ldr	r3, [pc, #296]	; (8006c40 <HAL_I2C_Mem_Read+0x22c>)
 8006b18:	9300      	str	r3, [sp, #0]
 8006b1a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006b1e:	68f8      	ldr	r0, [r7, #12]
 8006b20:	f000 fa8e 	bl	8007040 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	9300      	str	r3, [sp, #0]
 8006b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	2104      	movs	r1, #4
 8006b2e:	68f8      	ldr	r0, [r7, #12]
 8006b30:	f000 f964 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d001      	beq.n	8006b3e <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006b3a:	2301      	movs	r3, #1
 8006b3c:	e07c      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b48:	b2d2      	uxtb	r2, r2
 8006b4a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b5a:	3b01      	subs	r3, #1
 8006b5c:	b29a      	uxth	r2, r3
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b66:	b29b      	uxth	r3, r3
 8006b68:	3b01      	subs	r3, #1
 8006b6a:	b29a      	uxth	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b74:	b29b      	uxth	r3, r3
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d034      	beq.n	8006be4 <HAL_I2C_Mem_Read+0x1d0>
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d130      	bne.n	8006be4 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006b82:	697b      	ldr	r3, [r7, #20]
 8006b84:	9300      	str	r3, [sp, #0]
 8006b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b88:	2200      	movs	r2, #0
 8006b8a:	2180      	movs	r1, #128	; 0x80
 8006b8c:	68f8      	ldr	r0, [r7, #12]
 8006b8e:	f000 f935 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006b92:	4603      	mov	r3, r0
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d001      	beq.n	8006b9c <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006b98:	2301      	movs	r3, #1
 8006b9a:	e04d      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ba0:	b29b      	uxth	r3, r3
 8006ba2:	2bff      	cmp	r3, #255	; 0xff
 8006ba4:	d90e      	bls.n	8006bc4 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006ba6:	68fb      	ldr	r3, [r7, #12]
 8006ba8:	22ff      	movs	r2, #255	; 0xff
 8006baa:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bb0:	b2da      	uxtb	r2, r3
 8006bb2:	8979      	ldrh	r1, [r7, #10]
 8006bb4:	2300      	movs	r3, #0
 8006bb6:	9300      	str	r3, [sp, #0]
 8006bb8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006bbc:	68f8      	ldr	r0, [r7, #12]
 8006bbe:	f000 fa3f 	bl	8007040 <I2C_TransferConfig>
 8006bc2:	e00f      	b.n	8006be4 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bc8:	b29a      	uxth	r2, r3
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	b2da      	uxtb	r2, r3
 8006bd4:	8979      	ldrh	r1, [r7, #10]
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	9300      	str	r3, [sp, #0]
 8006bda:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006bde:	68f8      	ldr	r0, [r7, #12]
 8006be0:	f000 fa2e 	bl	8007040 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006be8:	b29b      	uxth	r3, r3
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d19a      	bne.n	8006b24 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006bee:	697a      	ldr	r2, [r7, #20]
 8006bf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006bf2:	68f8      	ldr	r0, [r7, #12]
 8006bf4:	f000 f982 	bl	8006efc <I2C_WaitOnSTOPFlagUntilTimeout>
 8006bf8:	4603      	mov	r3, r0
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d001      	beq.n	8006c02 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e01a      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2220      	movs	r2, #32
 8006c08:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	6859      	ldr	r1, [r3, #4]
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	4b0b      	ldr	r3, [pc, #44]	; (8006c44 <HAL_I2C_Mem_Read+0x230>)
 8006c16:	400b      	ands	r3, r1
 8006c18:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	2200      	movs	r2, #0
 8006c26:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006c32:	2300      	movs	r3, #0
 8006c34:	e000      	b.n	8006c38 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006c36:	2302      	movs	r3, #2
  }
}
 8006c38:	4618      	mov	r0, r3
 8006c3a:	3718      	adds	r7, #24
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	80002400 	.word	0x80002400
 8006c44:	fe00e800 	.word	0xfe00e800

08006c48 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c56:	b2db      	uxtb	r3, r3
}
 8006c58:	4618      	mov	r0, r3
 8006c5a:	370c      	adds	r7, #12
 8006c5c:	46bd      	mov	sp, r7
 8006c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c62:	4770      	bx	lr

08006c64 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b086      	sub	sp, #24
 8006c68:	af02      	add	r7, sp, #8
 8006c6a:	60f8      	str	r0, [r7, #12]
 8006c6c:	4608      	mov	r0, r1
 8006c6e:	4611      	mov	r1, r2
 8006c70:	461a      	mov	r2, r3
 8006c72:	4603      	mov	r3, r0
 8006c74:	817b      	strh	r3, [r7, #10]
 8006c76:	460b      	mov	r3, r1
 8006c78:	813b      	strh	r3, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006c7e:	88fb      	ldrh	r3, [r7, #6]
 8006c80:	b2da      	uxtb	r2, r3
 8006c82:	8979      	ldrh	r1, [r7, #10]
 8006c84:	4b20      	ldr	r3, [pc, #128]	; (8006d08 <I2C_RequestMemoryWrite+0xa4>)
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006c8c:	68f8      	ldr	r0, [r7, #12]
 8006c8e:	f000 f9d7 	bl	8007040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	69b9      	ldr	r1, [r7, #24]
 8006c96:	68f8      	ldr	r0, [r7, #12]
 8006c98:	f000 f8f0 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006c9c:	4603      	mov	r3, r0
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d001      	beq.n	8006ca6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e02c      	b.n	8006d00 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006ca6:	88fb      	ldrh	r3, [r7, #6]
 8006ca8:	2b01      	cmp	r3, #1
 8006caa:	d105      	bne.n	8006cb8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cac:	893b      	ldrh	r3, [r7, #8]
 8006cae:	b2da      	uxtb	r2, r3
 8006cb0:	68fb      	ldr	r3, [r7, #12]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	629a      	str	r2, [r3, #40]	; 0x28
 8006cb6:	e015      	b.n	8006ce4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006cb8:	893b      	ldrh	r3, [r7, #8]
 8006cba:	0a1b      	lsrs	r3, r3, #8
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	b2da      	uxtb	r2, r3
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006cc6:	69fa      	ldr	r2, [r7, #28]
 8006cc8:	69b9      	ldr	r1, [r7, #24]
 8006cca:	68f8      	ldr	r0, [r7, #12]
 8006ccc:	f000 f8d6 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006cd0:	4603      	mov	r3, r0
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d001      	beq.n	8006cda <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006cd6:	2301      	movs	r3, #1
 8006cd8:	e012      	b.n	8006d00 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006cda:	893b      	ldrh	r3, [r7, #8]
 8006cdc:	b2da      	uxtb	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	9300      	str	r3, [sp, #0]
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2200      	movs	r2, #0
 8006cec:	2180      	movs	r1, #128	; 0x80
 8006cee:	68f8      	ldr	r0, [r7, #12]
 8006cf0:	f000 f884 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006cf4:	4603      	mov	r3, r0
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d001      	beq.n	8006cfe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	e000      	b.n	8006d00 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006cfe:	2300      	movs	r3, #0
}
 8006d00:	4618      	mov	r0, r3
 8006d02:	3710      	adds	r7, #16
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	80002000 	.word	0x80002000

08006d0c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b086      	sub	sp, #24
 8006d10:	af02      	add	r7, sp, #8
 8006d12:	60f8      	str	r0, [r7, #12]
 8006d14:	4608      	mov	r0, r1
 8006d16:	4611      	mov	r1, r2
 8006d18:	461a      	mov	r2, r3
 8006d1a:	4603      	mov	r3, r0
 8006d1c:	817b      	strh	r3, [r7, #10]
 8006d1e:	460b      	mov	r3, r1
 8006d20:	813b      	strh	r3, [r7, #8]
 8006d22:	4613      	mov	r3, r2
 8006d24:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006d26:	88fb      	ldrh	r3, [r7, #6]
 8006d28:	b2da      	uxtb	r2, r3
 8006d2a:	8979      	ldrh	r1, [r7, #10]
 8006d2c:	4b20      	ldr	r3, [pc, #128]	; (8006db0 <I2C_RequestMemoryRead+0xa4>)
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	68f8      	ldr	r0, [r7, #12]
 8006d34:	f000 f984 	bl	8007040 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	69b9      	ldr	r1, [r7, #24]
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f89d 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	e02c      	b.n	8006da6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006d4c:	88fb      	ldrh	r3, [r7, #6]
 8006d4e:	2b01      	cmp	r3, #1
 8006d50:	d105      	bne.n	8006d5e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d52:	893b      	ldrh	r3, [r7, #8]
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	629a      	str	r2, [r3, #40]	; 0x28
 8006d5c:	e015      	b.n	8006d8a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006d5e:	893b      	ldrh	r3, [r7, #8]
 8006d60:	0a1b      	lsrs	r3, r3, #8
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	b2da      	uxtb	r2, r3
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d6c:	69fa      	ldr	r2, [r7, #28]
 8006d6e:	69b9      	ldr	r1, [r7, #24]
 8006d70:	68f8      	ldr	r0, [r7, #12]
 8006d72:	f000 f883 	bl	8006e7c <I2C_WaitOnTXISFlagUntilTimeout>
 8006d76:	4603      	mov	r3, r0
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d001      	beq.n	8006d80 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e012      	b.n	8006da6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006d80:	893b      	ldrh	r3, [r7, #8]
 8006d82:	b2da      	uxtb	r2, r3
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	9300      	str	r3, [sp, #0]
 8006d8e:	69bb      	ldr	r3, [r7, #24]
 8006d90:	2200      	movs	r2, #0
 8006d92:	2140      	movs	r1, #64	; 0x40
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 f831 	bl	8006dfc <I2C_WaitOnFlagUntilTimeout>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d001      	beq.n	8006da4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006da0:	2301      	movs	r3, #1
 8006da2:	e000      	b.n	8006da6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006da4:	2300      	movs	r3, #0
}
 8006da6:	4618      	mov	r0, r3
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
 8006dae:	bf00      	nop
 8006db0:	80002000 	.word	0x80002000

08006db4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b083      	sub	sp, #12
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	699b      	ldr	r3, [r3, #24]
 8006dc2:	f003 0302 	and.w	r3, r3, #2
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d103      	bne.n	8006dd2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	699b      	ldr	r3, [r3, #24]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d007      	beq.n	8006df0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	699a      	ldr	r2, [r3, #24]
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	f042 0201 	orr.w	r2, r2, #1
 8006dee:	619a      	str	r2, [r3, #24]
  }
}
 8006df0:	bf00      	nop
 8006df2:	370c      	adds	r7, #12
 8006df4:	46bd      	mov	sp, r7
 8006df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfa:	4770      	bx	lr

08006dfc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006dfc:	b580      	push	{r7, lr}
 8006dfe:	b084      	sub	sp, #16
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	60f8      	str	r0, [r7, #12]
 8006e04:	60b9      	str	r1, [r7, #8]
 8006e06:	603b      	str	r3, [r7, #0]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e0c:	e022      	b.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e0e:	683b      	ldr	r3, [r7, #0]
 8006e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e14:	d01e      	beq.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e16:	f7fd ff21 	bl	8004c5c <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	69bb      	ldr	r3, [r7, #24]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d302      	bcc.n	8006e2c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d113      	bne.n	8006e54 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e30:	f043 0220 	orr.w	r2, r3, #32
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	2220      	movs	r2, #32
 8006e3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	2200      	movs	r2, #0
 8006e44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006e50:	2301      	movs	r3, #1
 8006e52:	e00f      	b.n	8006e74 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	699a      	ldr	r2, [r3, #24]
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	bf0c      	ite	eq
 8006e64:	2301      	moveq	r3, #1
 8006e66:	2300      	movne	r3, #0
 8006e68:	b2db      	uxtb	r3, r3
 8006e6a:	461a      	mov	r2, r3
 8006e6c:	79fb      	ldrb	r3, [r7, #7]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d0cd      	beq.n	8006e0e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e72:	2300      	movs	r3, #0
}
 8006e74:	4618      	mov	r0, r3
 8006e76:	3710      	adds	r7, #16
 8006e78:	46bd      	mov	sp, r7
 8006e7a:	bd80      	pop	{r7, pc}

08006e7c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e7c:	b580      	push	{r7, lr}
 8006e7e:	b084      	sub	sp, #16
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006e88:	e02c      	b.n	8006ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8a:	687a      	ldr	r2, [r7, #4]
 8006e8c:	68b9      	ldr	r1, [r7, #8]
 8006e8e:	68f8      	ldr	r0, [r7, #12]
 8006e90:	f000 f870 	bl	8006f74 <I2C_IsAcknowledgeFailed>
 8006e94:	4603      	mov	r3, r0
 8006e96:	2b00      	cmp	r3, #0
 8006e98:	d001      	beq.n	8006e9e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	e02a      	b.n	8006ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ea4:	d01e      	beq.n	8006ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ea6:	f7fd fed9 	bl	8004c5c <HAL_GetTick>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	1ad3      	subs	r3, r2, r3
 8006eb0:	68ba      	ldr	r2, [r7, #8]
 8006eb2:	429a      	cmp	r2, r3
 8006eb4:	d302      	bcc.n	8006ebc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006eb6:	68bb      	ldr	r3, [r7, #8]
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d113      	bne.n	8006ee4 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ec0:	f043 0220 	orr.w	r2, r3, #32
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2220      	movs	r2, #32
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e007      	b.n	8006ef4 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	f003 0302 	and.w	r3, r3, #2
 8006eee:	2b02      	cmp	r3, #2
 8006ef0:	d1cb      	bne.n	8006e8a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006ef2:	2300      	movs	r3, #0
}
 8006ef4:	4618      	mov	r0, r3
 8006ef6:	3710      	adds	r7, #16
 8006ef8:	46bd      	mov	sp, r7
 8006efa:	bd80      	pop	{r7, pc}

08006efc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006efc:	b580      	push	{r7, lr}
 8006efe:	b084      	sub	sp, #16
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	60b9      	str	r1, [r7, #8]
 8006f06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f08:	e028      	b.n	8006f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f0a:	687a      	ldr	r2, [r7, #4]
 8006f0c:	68b9      	ldr	r1, [r7, #8]
 8006f0e:	68f8      	ldr	r0, [r7, #12]
 8006f10:	f000 f830 	bl	8006f74 <I2C_IsAcknowledgeFailed>
 8006f14:	4603      	mov	r3, r0
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d001      	beq.n	8006f1e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	e026      	b.n	8006f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1e:	f7fd fe9d 	bl	8004c5c <HAL_GetTick>
 8006f22:	4602      	mov	r2, r0
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	1ad3      	subs	r3, r2, r3
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	429a      	cmp	r2, r3
 8006f2c:	d302      	bcc.n	8006f34 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d113      	bne.n	8006f5c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f38:	f043 0220 	orr.w	r2, r3, #32
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	2220      	movs	r2, #32
 8006f44:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	2200      	movs	r2, #0
 8006f4c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	2200      	movs	r2, #0
 8006f54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	e007      	b.n	8006f6c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	699b      	ldr	r3, [r3, #24]
 8006f62:	f003 0320 	and.w	r3, r3, #32
 8006f66:	2b20      	cmp	r3, #32
 8006f68:	d1cf      	bne.n	8006f0a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3710      	adds	r7, #16
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b084      	sub	sp, #16
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	f003 0310 	and.w	r3, r3, #16
 8006f8a:	2b10      	cmp	r3, #16
 8006f8c:	d151      	bne.n	8007032 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006f8e:	e022      	b.n	8006fd6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f96:	d01e      	beq.n	8006fd6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f98:	f7fd fe60 	bl	8004c5c <HAL_GetTick>
 8006f9c:	4602      	mov	r2, r0
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	1ad3      	subs	r3, r2, r3
 8006fa2:	68ba      	ldr	r2, [r7, #8]
 8006fa4:	429a      	cmp	r2, r3
 8006fa6:	d302      	bcc.n	8006fae <I2C_IsAcknowledgeFailed+0x3a>
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d113      	bne.n	8006fd6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb2:	f043 0220 	orr.w	r2, r3, #32
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	2220      	movs	r2, #32
 8006fbe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	e02e      	b.n	8007034 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	699b      	ldr	r3, [r3, #24]
 8006fdc:	f003 0320 	and.w	r3, r3, #32
 8006fe0:	2b20      	cmp	r3, #32
 8006fe2:	d1d5      	bne.n	8006f90 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006fe4:	68fb      	ldr	r3, [r7, #12]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	2210      	movs	r2, #16
 8006fea:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2220      	movs	r2, #32
 8006ff2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff fedd 	bl	8006db4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	6859      	ldr	r1, [r3, #4]
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	4b0d      	ldr	r3, [pc, #52]	; (800703c <I2C_IsAcknowledgeFailed+0xc8>)
 8007006:	400b      	ands	r3, r1
 8007008:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800700e:	f043 0204 	orr.w	r2, r3, #4
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	2220      	movs	r2, #32
 800701a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2200      	movs	r2, #0
 8007022:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800702e:	2301      	movs	r3, #1
 8007030:	e000      	b.n	8007034 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007032:	2300      	movs	r3, #0
}
 8007034:	4618      	mov	r0, r3
 8007036:	3710      	adds	r7, #16
 8007038:	46bd      	mov	sp, r7
 800703a:	bd80      	pop	{r7, pc}
 800703c:	fe00e800 	.word	0xfe00e800

08007040 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007040:	b480      	push	{r7}
 8007042:	b085      	sub	sp, #20
 8007044:	af00      	add	r7, sp, #0
 8007046:	60f8      	str	r0, [r7, #12]
 8007048:	607b      	str	r3, [r7, #4]
 800704a:	460b      	mov	r3, r1
 800704c:	817b      	strh	r3, [r7, #10]
 800704e:	4613      	mov	r3, r2
 8007050:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007052:	68fb      	ldr	r3, [r7, #12]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	685a      	ldr	r2, [r3, #4]
 8007058:	69bb      	ldr	r3, [r7, #24]
 800705a:	0d5b      	lsrs	r3, r3, #21
 800705c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007060:	4b0d      	ldr	r3, [pc, #52]	; (8007098 <I2C_TransferConfig+0x58>)
 8007062:	430b      	orrs	r3, r1
 8007064:	43db      	mvns	r3, r3
 8007066:	ea02 0103 	and.w	r1, r2, r3
 800706a:	897b      	ldrh	r3, [r7, #10]
 800706c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007070:	7a7b      	ldrb	r3, [r7, #9]
 8007072:	041b      	lsls	r3, r3, #16
 8007074:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007078:	431a      	orrs	r2, r3
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	431a      	orrs	r2, r3
 800707e:	69bb      	ldr	r3, [r7, #24]
 8007080:	431a      	orrs	r2, r3
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	430a      	orrs	r2, r1
 8007088:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 800708a:	bf00      	nop
 800708c:	3714      	adds	r7, #20
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	03ff63ff 	.word	0x03ff63ff

0800709c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070ac:	b2db      	uxtb	r3, r3
 80070ae:	2b20      	cmp	r3, #32
 80070b0:	d138      	bne.n	8007124 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d101      	bne.n	80070c0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80070bc:	2302      	movs	r3, #2
 80070be:	e032      	b.n	8007126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2224      	movs	r2, #36	; 0x24
 80070cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	681a      	ldr	r2, [r3, #0]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f022 0201 	bic.w	r2, r2, #1
 80070de:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	681a      	ldr	r2, [r3, #0]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80070ee:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6819      	ldr	r1, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	683a      	ldr	r2, [r7, #0]
 80070fc:	430a      	orrs	r2, r1
 80070fe:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	681a      	ldr	r2, [r3, #0]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0201 	orr.w	r2, r2, #1
 800710e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2220      	movs	r2, #32
 8007114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2200      	movs	r2, #0
 800711c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007120:	2300      	movs	r3, #0
 8007122:	e000      	b.n	8007126 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007124:	2302      	movs	r3, #2
  }
}
 8007126:	4618      	mov	r0, r3
 8007128:	370c      	adds	r7, #12
 800712a:	46bd      	mov	sp, r7
 800712c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007130:	4770      	bx	lr

08007132 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007132:	b480      	push	{r7}
 8007134:	b085      	sub	sp, #20
 8007136:	af00      	add	r7, sp, #0
 8007138:	6078      	str	r0, [r7, #4]
 800713a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007142:	b2db      	uxtb	r3, r3
 8007144:	2b20      	cmp	r3, #32
 8007146:	d139      	bne.n	80071bc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800714e:	2b01      	cmp	r3, #1
 8007150:	d101      	bne.n	8007156 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007152:	2302      	movs	r3, #2
 8007154:	e033      	b.n	80071be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	2201      	movs	r2, #1
 800715a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2224      	movs	r2, #36	; 0x24
 8007162:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	681a      	ldr	r2, [r3, #0]
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f022 0201 	bic.w	r2, r2, #1
 8007174:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007184:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	021b      	lsls	r3, r3, #8
 800718a:	68fa      	ldr	r2, [r7, #12]
 800718c:	4313      	orrs	r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	68fa      	ldr	r2, [r7, #12]
 8007196:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	681a      	ldr	r2, [r3, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	f042 0201 	orr.w	r2, r2, #1
 80071a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	2220      	movs	r2, #32
 80071ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2200      	movs	r2, #0
 80071b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80071b8:	2300      	movs	r3, #0
 80071ba:	e000      	b.n	80071be <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80071bc:	2302      	movs	r3, #2
  }
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
	...

080071cc <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d101      	bne.n	80071de <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 80071da:	2301      	movs	r3, #1
 80071dc:	e0bf      	b.n	800735e <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b00      	cmp	r3, #0
 80071e8:	d106      	bne.n	80071f8 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f7fd f898 	bl	8004328 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	2202      	movs	r2, #2
 80071fc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	699a      	ldr	r2, [r3, #24]
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 800720e:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	6999      	ldr	r1, [r3, #24]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	685a      	ldr	r2, [r3, #4]
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	689b      	ldr	r3, [r3, #8]
 800721e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007224:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	691b      	ldr	r3, [r3, #16]
 800722a:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	681b      	ldr	r3, [r3, #0]
 8007230:	430a      	orrs	r2, r1
 8007232:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	6899      	ldr	r1, [r3, #8]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681a      	ldr	r2, [r3, #0]
 800723e:	4b4a      	ldr	r3, [pc, #296]	; (8007368 <HAL_LTDC_Init+0x19c>)
 8007240:	400b      	ands	r3, r1
 8007242:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	695b      	ldr	r3, [r3, #20]
 8007248:	041b      	lsls	r3, r3, #16
 800724a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	6899      	ldr	r1, [r3, #8]
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	699a      	ldr	r2, [r3, #24]
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	431a      	orrs	r2, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	430a      	orrs	r2, r1
 8007260:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	681b      	ldr	r3, [r3, #0]
 8007266:	68d9      	ldr	r1, [r3, #12]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681a      	ldr	r2, [r3, #0]
 800726c:	4b3e      	ldr	r3, [pc, #248]	; (8007368 <HAL_LTDC_Init+0x19c>)
 800726e:	400b      	ands	r3, r1
 8007270:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	69db      	ldr	r3, [r3, #28]
 8007276:	041b      	lsls	r3, r3, #16
 8007278:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	68d9      	ldr	r1, [r3, #12]
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	6a1a      	ldr	r2, [r3, #32]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	431a      	orrs	r2, r3
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	430a      	orrs	r2, r1
 800728e:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	6919      	ldr	r1, [r3, #16]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	4b33      	ldr	r3, [pc, #204]	; (8007368 <HAL_LTDC_Init+0x19c>)
 800729c:	400b      	ands	r3, r1
 800729e:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072a4:	041b      	lsls	r3, r3, #16
 80072a6:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	6919      	ldr	r1, [r3, #16]
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	431a      	orrs	r2, r3
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	430a      	orrs	r2, r1
 80072bc:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	6959      	ldr	r1, [r3, #20]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681a      	ldr	r2, [r3, #0]
 80072c8:	4b27      	ldr	r3, [pc, #156]	; (8007368 <HAL_LTDC_Init+0x19c>)
 80072ca:	400b      	ands	r3, r1
 80072cc:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072d2:	041b      	lsls	r3, r3, #16
 80072d4:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	6959      	ldr	r1, [r3, #20]
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	431a      	orrs	r2, r3
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	430a      	orrs	r2, r1
 80072ea:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80072f2:	021b      	lsls	r3, r3, #8
 80072f4:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80072fc:	041b      	lsls	r3, r3, #16
 80072fe:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 800730e:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007316:	68ba      	ldr	r2, [r7, #8]
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	4313      	orrs	r3, r2
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8007322:	431a      	orrs	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	430a      	orrs	r2, r1
 800732a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f042 0206 	orr.w	r2, r2, #6
 800733a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	699a      	ldr	r2, [r3, #24]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f042 0201 	orr.w	r2, r2, #1
 800734a:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	2200      	movs	r2, #0
 8007350:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2201      	movs	r2, #1
 8007358:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 800735c:	2300      	movs	r3, #0
}
 800735e:	4618      	mov	r0, r3
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	f000f800 	.word	0xf000f800

0800736c <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 800736c:	b580      	push	{r7, lr}
 800736e:	b084      	sub	sp, #16
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800737a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007382:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f003 0304 	and.w	r3, r3, #4
 800738a:	2b00      	cmp	r3, #0
 800738c:	d023      	beq.n	80073d6 <HAL_LTDC_IRQHandler+0x6a>
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	f003 0304 	and.w	r3, r3, #4
 8007394:	2b00      	cmp	r3, #0
 8007396:	d01e      	beq.n	80073d6 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f022 0204 	bic.w	r2, r2, #4
 80073a6:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	2204      	movs	r2, #4
 80073ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80073b6:	f043 0201 	orr.w	r2, r3, #1
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2204      	movs	r2, #4
 80073c4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f000 f86f 	bl	80074b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	f003 0302 	and.w	r3, r3, #2
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d023      	beq.n	8007428 <HAL_LTDC_IRQHandler+0xbc>
 80073e0:	68bb      	ldr	r3, [r7, #8]
 80073e2:	f003 0302 	and.w	r3, r3, #2
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d01e      	beq.n	8007428 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 0202 	bic.w	r2, r2, #2
 80073f8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	2202      	movs	r2, #2
 8007400:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007408:	f043 0202 	orr.w	r2, r3, #2
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	2204      	movs	r2, #4
 8007416:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2200      	movs	r2, #0
 800741e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007422:	6878      	ldr	r0, [r7, #4]
 8007424:	f000 f846 	bl	80074b4 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	f003 0301 	and.w	r3, r3, #1
 800742e:	2b00      	cmp	r3, #0
 8007430:	d01b      	beq.n	800746a <HAL_LTDC_IRQHandler+0xfe>
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b00      	cmp	r3, #0
 800743a:	d016      	beq.n	800746a <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	f022 0201 	bic.w	r2, r2, #1
 800744a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	2201      	movs	r2, #1
 8007452:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2201      	movs	r2, #1
 8007458:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007464:	6878      	ldr	r0, [r7, #4]
 8007466:	f000 f82f 	bl	80074c8 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	f003 0308 	and.w	r3, r3, #8
 8007470:	2b00      	cmp	r3, #0
 8007472:	d01b      	beq.n	80074ac <HAL_LTDC_IRQHandler+0x140>
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	f003 0308 	and.w	r3, r3, #8
 800747a:	2b00      	cmp	r3, #0
 800747c:	d016      	beq.n	80074ac <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	f022 0208 	bic.w	r2, r2, #8
 800748c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	2208      	movs	r2, #8
 8007494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2201      	movs	r2, #1
 800749a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f000 f818 	bl	80074dc <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 80074ac:	bf00      	nop
 80074ae:	3710      	adds	r7, #16
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 80074b4:	b480      	push	{r7}
 80074b6:	b083      	sub	sp, #12
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 80074bc:	bf00      	nop
 80074be:	370c      	adds	r7, #12
 80074c0:	46bd      	mov	sp, r7
 80074c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074c6:	4770      	bx	lr

080074c8 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074c8:	b480      	push	{r7}
 80074ca:	b083      	sub	sp, #12
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 80074d0:	bf00      	nop
 80074d2:	370c      	adds	r7, #12
 80074d4:	46bd      	mov	sp, r7
 80074d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074da:	4770      	bx	lr

080074dc <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80074dc:	b480      	push	{r7}
 80074de:	b083      	sub	sp, #12
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80074e4:	bf00      	nop
 80074e6:	370c      	adds	r7, #12
 80074e8:	46bd      	mov	sp, r7
 80074ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ee:	4770      	bx	lr

080074f0 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80074f0:	b5b0      	push	{r4, r5, r7, lr}
 80074f2:	b084      	sub	sp, #16
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	60f8      	str	r0, [r7, #12]
 80074f8:	60b9      	str	r1, [r7, #8]
 80074fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8007502:	2b01      	cmp	r3, #1
 8007504:	d101      	bne.n	800750a <HAL_LTDC_ConfigLayer+0x1a>
 8007506:	2302      	movs	r3, #2
 8007508:	e02c      	b.n	8007564 <HAL_LTDC_ConfigLayer+0x74>
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	2202      	movs	r2, #2
 8007516:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800751a:	68fa      	ldr	r2, [r7, #12]
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	2134      	movs	r1, #52	; 0x34
 8007520:	fb01 f303 	mul.w	r3, r1, r3
 8007524:	4413      	add	r3, r2
 8007526:	f103 0238 	add.w	r2, r3, #56	; 0x38
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	4614      	mov	r4, r2
 800752e:	461d      	mov	r5, r3
 8007530:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007532:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007534:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007536:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007538:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800753a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800753c:	682b      	ldr	r3, [r5, #0]
 800753e:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007540:	687a      	ldr	r2, [r7, #4]
 8007542:	68b9      	ldr	r1, [r7, #8]
 8007544:	68f8      	ldr	r0, [r7, #12]
 8007546:	f000 f81f 	bl	8007588 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	2201      	movs	r2, #1
 8007550:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2201      	movs	r2, #1
 8007556:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	2200      	movs	r2, #0
 800755e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 8007562:	2300      	movs	r3, #0
}
 8007564:	4618      	mov	r0, r3
 8007566:	3710      	adds	r7, #16
 8007568:	46bd      	mov	sp, r7
 800756a:	bdb0      	pop	{r4, r5, r7, pc}

0800756c <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 800756c:	b480      	push	{r7}
 800756e:	b083      	sub	sp, #12
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 800757a:	b2db      	uxtb	r3, r3
}
 800757c:	4618      	mov	r0, r3
 800757e:	370c      	adds	r7, #12
 8007580:	46bd      	mov	sp, r7
 8007582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007586:	4770      	bx	lr

08007588 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007588:	b480      	push	{r7}
 800758a:	b089      	sub	sp, #36	; 0x24
 800758c:	af00      	add	r7, sp, #0
 800758e:	60f8      	str	r0, [r7, #12]
 8007590:	60b9      	str	r1, [r7, #8]
 8007592:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	685a      	ldr	r2, [r3, #4]
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	68db      	ldr	r3, [r3, #12]
 800759e:	0c1b      	lsrs	r3, r3, #16
 80075a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075a4:	4413      	add	r3, r2
 80075a6:	041b      	lsls	r3, r3, #16
 80075a8:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	461a      	mov	r2, r3
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	01db      	lsls	r3, r3, #7
 80075b4:	4413      	add	r3, r2
 80075b6:	3384      	adds	r3, #132	; 0x84
 80075b8:	685b      	ldr	r3, [r3, #4]
 80075ba:	68fa      	ldr	r2, [r7, #12]
 80075bc:	6812      	ldr	r2, [r2, #0]
 80075be:	4611      	mov	r1, r2
 80075c0:	687a      	ldr	r2, [r7, #4]
 80075c2:	01d2      	lsls	r2, r2, #7
 80075c4:	440a      	add	r2, r1
 80075c6:	3284      	adds	r2, #132	; 0x84
 80075c8:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80075cc:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80075ce:	68bb      	ldr	r3, [r7, #8]
 80075d0:	681a      	ldr	r2, [r3, #0]
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	68db      	ldr	r3, [r3, #12]
 80075d8:	0c1b      	lsrs	r3, r3, #16
 80075da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80075de:	4413      	add	r3, r2
 80075e0:	1c5a      	adds	r2, r3, #1
 80075e2:	68fb      	ldr	r3, [r7, #12]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	4619      	mov	r1, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	01db      	lsls	r3, r3, #7
 80075ec:	440b      	add	r3, r1
 80075ee:	3384      	adds	r3, #132	; 0x84
 80075f0:	4619      	mov	r1, r3
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	4313      	orrs	r3, r2
 80075f6:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68da      	ldr	r2, [r3, #12]
 80075fc:	68fb      	ldr	r3, [r7, #12]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	68db      	ldr	r3, [r3, #12]
 8007602:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007606:	4413      	add	r3, r2
 8007608:	041b      	lsls	r3, r3, #16
 800760a:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	461a      	mov	r2, r3
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	01db      	lsls	r3, r3, #7
 8007616:	4413      	add	r3, r2
 8007618:	3384      	adds	r3, #132	; 0x84
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	6812      	ldr	r2, [r2, #0]
 8007620:	4611      	mov	r1, r2
 8007622:	687a      	ldr	r2, [r7, #4]
 8007624:	01d2      	lsls	r2, r2, #7
 8007626:	440a      	add	r2, r1
 8007628:	3284      	adds	r2, #132	; 0x84
 800762a:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 800762e:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	689a      	ldr	r2, [r3, #8]
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	68db      	ldr	r3, [r3, #12]
 800763a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800763e:	4413      	add	r3, r2
 8007640:	1c5a      	adds	r2, r3, #1
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	4619      	mov	r1, r3
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	01db      	lsls	r3, r3, #7
 800764c:	440b      	add	r3, r1
 800764e:	3384      	adds	r3, #132	; 0x84
 8007650:	4619      	mov	r1, r3
 8007652:	69fb      	ldr	r3, [r7, #28]
 8007654:	4313      	orrs	r3, r2
 8007656:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	461a      	mov	r2, r3
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	01db      	lsls	r3, r3, #7
 8007662:	4413      	add	r3, r2
 8007664:	3384      	adds	r3, #132	; 0x84
 8007666:	691b      	ldr	r3, [r3, #16]
 8007668:	68fa      	ldr	r2, [r7, #12]
 800766a:	6812      	ldr	r2, [r2, #0]
 800766c:	4611      	mov	r1, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	01d2      	lsls	r2, r2, #7
 8007672:	440a      	add	r2, r1
 8007674:	3284      	adds	r2, #132	; 0x84
 8007676:	f023 0307 	bic.w	r3, r3, #7
 800767a:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	461a      	mov	r2, r3
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	01db      	lsls	r3, r3, #7
 8007686:	4413      	add	r3, r2
 8007688:	3384      	adds	r3, #132	; 0x84
 800768a:	461a      	mov	r2, r3
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007698:	021b      	lsls	r3, r3, #8
 800769a:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80076a2:	041b      	lsls	r3, r3, #16
 80076a4:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 80076a6:	68bb      	ldr	r3, [r7, #8]
 80076a8:	699b      	ldr	r3, [r3, #24]
 80076aa:	061b      	lsls	r3, r3, #24
 80076ac:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	01db      	lsls	r3, r3, #7
 80076b8:	4413      	add	r3, r2
 80076ba:	3384      	adds	r3, #132	; 0x84
 80076bc:	699b      	ldr	r3, [r3, #24]
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	461a      	mov	r2, r3
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	01db      	lsls	r3, r3, #7
 80076c8:	4413      	add	r3, r2
 80076ca:	3384      	adds	r3, #132	; 0x84
 80076cc:	461a      	mov	r2, r3
 80076ce:	2300      	movs	r3, #0
 80076d0:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80076d8:	461a      	mov	r2, r3
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	431a      	orrs	r2, r3
 80076de:	69bb      	ldr	r3, [r7, #24]
 80076e0:	431a      	orrs	r2, r3
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	4619      	mov	r1, r3
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	01db      	lsls	r3, r3, #7
 80076ec:	440b      	add	r3, r1
 80076ee:	3384      	adds	r3, #132	; 0x84
 80076f0:	4619      	mov	r1, r3
 80076f2:	697b      	ldr	r3, [r7, #20]
 80076f4:	4313      	orrs	r3, r2
 80076f6:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80076f8:	68fb      	ldr	r3, [r7, #12]
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	461a      	mov	r2, r3
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	01db      	lsls	r3, r3, #7
 8007702:	4413      	add	r3, r2
 8007704:	3384      	adds	r3, #132	; 0x84
 8007706:	695b      	ldr	r3, [r3, #20]
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	6812      	ldr	r2, [r2, #0]
 800770c:	4611      	mov	r1, r2
 800770e:	687a      	ldr	r2, [r7, #4]
 8007710:	01d2      	lsls	r2, r2, #7
 8007712:	440a      	add	r2, r1
 8007714:	3284      	adds	r2, #132	; 0x84
 8007716:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800771a:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	461a      	mov	r2, r3
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	01db      	lsls	r3, r3, #7
 8007726:	4413      	add	r3, r2
 8007728:	3384      	adds	r3, #132	; 0x84
 800772a:	461a      	mov	r2, r3
 800772c:	68bb      	ldr	r3, [r7, #8]
 800772e:	695b      	ldr	r3, [r3, #20]
 8007730:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	01db      	lsls	r3, r3, #7
 800773c:	4413      	add	r3, r2
 800773e:	3384      	adds	r3, #132	; 0x84
 8007740:	69da      	ldr	r2, [r3, #28]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	4619      	mov	r1, r3
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	01db      	lsls	r3, r3, #7
 800774c:	440b      	add	r3, r1
 800774e:	3384      	adds	r3, #132	; 0x84
 8007750:	4619      	mov	r1, r3
 8007752:	4b58      	ldr	r3, [pc, #352]	; (80078b4 <LTDC_SetConfig+0x32c>)
 8007754:	4013      	ands	r3, r2
 8007756:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007758:	68bb      	ldr	r3, [r7, #8]
 800775a:	69da      	ldr	r2, [r3, #28]
 800775c:	68bb      	ldr	r3, [r7, #8]
 800775e:	6a1b      	ldr	r3, [r3, #32]
 8007760:	68f9      	ldr	r1, [r7, #12]
 8007762:	6809      	ldr	r1, [r1, #0]
 8007764:	4608      	mov	r0, r1
 8007766:	6879      	ldr	r1, [r7, #4]
 8007768:	01c9      	lsls	r1, r1, #7
 800776a:	4401      	add	r1, r0
 800776c:	3184      	adds	r1, #132	; 0x84
 800776e:	4313      	orrs	r3, r2
 8007770:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	461a      	mov	r2, r3
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	01db      	lsls	r3, r3, #7
 800777c:	4413      	add	r3, r2
 800777e:	3384      	adds	r3, #132	; 0x84
 8007780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	461a      	mov	r2, r3
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	01db      	lsls	r3, r3, #7
 800778c:	4413      	add	r3, r2
 800778e:	3384      	adds	r3, #132	; 0x84
 8007790:	461a      	mov	r2, r3
 8007792:	2300      	movs	r3, #0
 8007794:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	461a      	mov	r2, r3
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	01db      	lsls	r3, r3, #7
 80077a0:	4413      	add	r3, r2
 80077a2:	3384      	adds	r3, #132	; 0x84
 80077a4:	461a      	mov	r2, r3
 80077a6:	68bb      	ldr	r3, [r7, #8]
 80077a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077aa:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80077ac:	68bb      	ldr	r3, [r7, #8]
 80077ae:	691b      	ldr	r3, [r3, #16]
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d102      	bne.n	80077ba <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 80077b4:	2304      	movs	r3, #4
 80077b6:	61fb      	str	r3, [r7, #28]
 80077b8:	e01b      	b.n	80077f2 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80077ba:	68bb      	ldr	r3, [r7, #8]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	2b01      	cmp	r3, #1
 80077c0:	d102      	bne.n	80077c8 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 80077c2:	2303      	movs	r3, #3
 80077c4:	61fb      	str	r3, [r7, #28]
 80077c6:	e014      	b.n	80077f2 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077c8:	68bb      	ldr	r3, [r7, #8]
 80077ca:	691b      	ldr	r3, [r3, #16]
 80077cc:	2b04      	cmp	r3, #4
 80077ce:	d00b      	beq.n	80077e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077d0:	68bb      	ldr	r3, [r7, #8]
 80077d2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80077d4:	2b02      	cmp	r3, #2
 80077d6:	d007      	beq.n	80077e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80077dc:	2b03      	cmp	r3, #3
 80077de:	d003      	beq.n	80077e8 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80077e0:	68bb      	ldr	r3, [r7, #8]
 80077e2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80077e4:	2b07      	cmp	r3, #7
 80077e6:	d102      	bne.n	80077ee <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80077e8:	2302      	movs	r3, #2
 80077ea:	61fb      	str	r3, [r7, #28]
 80077ec:	e001      	b.n	80077f2 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80077ee:	2301      	movs	r3, #1
 80077f0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	461a      	mov	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	01db      	lsls	r3, r3, #7
 80077fc:	4413      	add	r3, r2
 80077fe:	3384      	adds	r3, #132	; 0x84
 8007800:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007802:	68fa      	ldr	r2, [r7, #12]
 8007804:	6812      	ldr	r2, [r2, #0]
 8007806:	4611      	mov	r1, r2
 8007808:	687a      	ldr	r2, [r7, #4]
 800780a:	01d2      	lsls	r2, r2, #7
 800780c:	440a      	add	r2, r1
 800780e:	3284      	adds	r2, #132	; 0x84
 8007810:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8007814:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8007816:	68bb      	ldr	r3, [r7, #8]
 8007818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800781a:	69fa      	ldr	r2, [r7, #28]
 800781c:	fb02 f303 	mul.w	r3, r2, r3
 8007820:	041a      	lsls	r2, r3, #16
 8007822:	68bb      	ldr	r3, [r7, #8]
 8007824:	6859      	ldr	r1, [r3, #4]
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	1acb      	subs	r3, r1, r3
 800782c:	69f9      	ldr	r1, [r7, #28]
 800782e:	fb01 f303 	mul.w	r3, r1, r3
 8007832:	3303      	adds	r3, #3
 8007834:	68f9      	ldr	r1, [r7, #12]
 8007836:	6809      	ldr	r1, [r1, #0]
 8007838:	4608      	mov	r0, r1
 800783a:	6879      	ldr	r1, [r7, #4]
 800783c:	01c9      	lsls	r1, r1, #7
 800783e:	4401      	add	r1, r0
 8007840:	3184      	adds	r1, #132	; 0x84
 8007842:	4313      	orrs	r3, r2
 8007844:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	681b      	ldr	r3, [r3, #0]
 800784a:	461a      	mov	r2, r3
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	01db      	lsls	r3, r3, #7
 8007850:	4413      	add	r3, r2
 8007852:	3384      	adds	r3, #132	; 0x84
 8007854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4619      	mov	r1, r3
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	01db      	lsls	r3, r3, #7
 8007860:	440b      	add	r3, r1
 8007862:	3384      	adds	r3, #132	; 0x84
 8007864:	4619      	mov	r1, r3
 8007866:	4b14      	ldr	r3, [pc, #80]	; (80078b8 <LTDC_SetConfig+0x330>)
 8007868:	4013      	ands	r3, r2
 800786a:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	461a      	mov	r2, r3
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	01db      	lsls	r3, r3, #7
 8007876:	4413      	add	r3, r2
 8007878:	3384      	adds	r3, #132	; 0x84
 800787a:	461a      	mov	r2, r3
 800787c:	68bb      	ldr	r3, [r7, #8]
 800787e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007880:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	461a      	mov	r2, r3
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	01db      	lsls	r3, r3, #7
 800788c:	4413      	add	r3, r2
 800788e:	3384      	adds	r3, #132	; 0x84
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	68fa      	ldr	r2, [r7, #12]
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	4611      	mov	r1, r2
 8007898:	687a      	ldr	r2, [r7, #4]
 800789a:	01d2      	lsls	r2, r2, #7
 800789c:	440a      	add	r2, r1
 800789e:	3284      	adds	r2, #132	; 0x84
 80078a0:	f043 0301 	orr.w	r3, r3, #1
 80078a4:	6013      	str	r3, [r2, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3724      	adds	r7, #36	; 0x24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	fffff8f8 	.word	0xfffff8f8
 80078b8:	fffff800 	.word	0xfffff800

080078bc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80078bc:	b480      	push	{r7}
 80078be:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c0:	4b05      	ldr	r3, [pc, #20]	; (80078d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80078c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	46bd      	mov	sp, r7
 80078d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d4:	4770      	bx	lr
 80078d6:	bf00      	nop
 80078d8:	40007000 	.word	0x40007000

080078dc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80078e2:	2300      	movs	r3, #0
 80078e4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80078e6:	4b23      	ldr	r3, [pc, #140]	; (8007974 <HAL_PWREx_EnableOverDrive+0x98>)
 80078e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ea:	4a22      	ldr	r2, [pc, #136]	; (8007974 <HAL_PWREx_EnableOverDrive+0x98>)
 80078ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f0:	6413      	str	r3, [r2, #64]	; 0x40
 80078f2:	4b20      	ldr	r3, [pc, #128]	; (8007974 <HAL_PWREx_EnableOverDrive+0x98>)
 80078f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078fa:	603b      	str	r3, [r7, #0]
 80078fc:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80078fe:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	4a1d      	ldr	r2, [pc, #116]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007904:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007908:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800790a:	f7fd f9a7 	bl	8004c5c <HAL_GetTick>
 800790e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007910:	e009      	b.n	8007926 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007912:	f7fd f9a3 	bl	8004c5c <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007920:	d901      	bls.n	8007926 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8007922:	2303      	movs	r3, #3
 8007924:	e022      	b.n	800796c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8007926:	4b14      	ldr	r3, [pc, #80]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007928:	685b      	ldr	r3, [r3, #4]
 800792a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800792e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007932:	d1ee      	bne.n	8007912 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8007934:	4b10      	ldr	r3, [pc, #64]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	4a0f      	ldr	r2, [pc, #60]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 800793a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800793e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007940:	f7fd f98c 	bl	8004c5c <HAL_GetTick>
 8007944:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007946:	e009      	b.n	800795c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007948:	f7fd f988 	bl	8004c5c <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007956:	d901      	bls.n	800795c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007958:	2303      	movs	r3, #3
 800795a:	e007      	b.n	800796c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800795c:	4b06      	ldr	r3, [pc, #24]	; (8007978 <HAL_PWREx_EnableOverDrive+0x9c>)
 800795e:	685b      	ldr	r3, [r3, #4]
 8007960:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007964:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007968:	d1ee      	bne.n	8007948 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800796a:	2300      	movs	r3, #0
}
 800796c:	4618      	mov	r0, r3
 800796e:	3708      	adds	r7, #8
 8007970:	46bd      	mov	sp, r7
 8007972:	bd80      	pop	{r7, pc}
 8007974:	40023800 	.word	0x40023800
 8007978:	40007000 	.word	0x40007000

0800797c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b086      	sub	sp, #24
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007984:	2300      	movs	r3, #0
 8007986:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d101      	bne.n	8007992 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e291      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0301 	and.w	r3, r3, #1
 800799a:	2b00      	cmp	r3, #0
 800799c:	f000 8087 	beq.w	8007aae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80079a0:	4b96      	ldr	r3, [pc, #600]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079a2:	689b      	ldr	r3, [r3, #8]
 80079a4:	f003 030c 	and.w	r3, r3, #12
 80079a8:	2b04      	cmp	r3, #4
 80079aa:	d00c      	beq.n	80079c6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80079ac:	4b93      	ldr	r3, [pc, #588]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079ae:	689b      	ldr	r3, [r3, #8]
 80079b0:	f003 030c 	and.w	r3, r3, #12
 80079b4:	2b08      	cmp	r3, #8
 80079b6:	d112      	bne.n	80079de <HAL_RCC_OscConfig+0x62>
 80079b8:	4b90      	ldr	r3, [pc, #576]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80079c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80079c4:	d10b      	bne.n	80079de <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80079c6:	4b8d      	ldr	r3, [pc, #564]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d06c      	beq.n	8007aac <HAL_RCC_OscConfig+0x130>
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d168      	bne.n	8007aac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80079da:	2301      	movs	r3, #1
 80079dc:	e26b      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	685b      	ldr	r3, [r3, #4]
 80079e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80079e6:	d106      	bne.n	80079f6 <HAL_RCC_OscConfig+0x7a>
 80079e8:	4b84      	ldr	r3, [pc, #528]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a83      	ldr	r2, [pc, #524]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 80079ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079f2:	6013      	str	r3, [r2, #0]
 80079f4:	e02e      	b.n	8007a54 <HAL_RCC_OscConfig+0xd8>
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d10c      	bne.n	8007a18 <HAL_RCC_OscConfig+0x9c>
 80079fe:	4b7f      	ldr	r3, [pc, #508]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	4a7e      	ldr	r2, [pc, #504]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	4b7c      	ldr	r3, [pc, #496]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	4a7b      	ldr	r2, [pc, #492]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a14:	6013      	str	r3, [r2, #0]
 8007a16:	e01d      	b.n	8007a54 <HAL_RCC_OscConfig+0xd8>
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007a20:	d10c      	bne.n	8007a3c <HAL_RCC_OscConfig+0xc0>
 8007a22:	4b76      	ldr	r3, [pc, #472]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a24:	681b      	ldr	r3, [r3, #0]
 8007a26:	4a75      	ldr	r2, [pc, #468]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007a2c:	6013      	str	r3, [r2, #0]
 8007a2e:	4b73      	ldr	r3, [pc, #460]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	4a72      	ldr	r2, [pc, #456]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007a38:	6013      	str	r3, [r2, #0]
 8007a3a:	e00b      	b.n	8007a54 <HAL_RCC_OscConfig+0xd8>
 8007a3c:	4b6f      	ldr	r3, [pc, #444]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a6e      	ldr	r2, [pc, #440]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007a46:	6013      	str	r3, [r2, #0]
 8007a48:	4b6c      	ldr	r3, [pc, #432]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a6b      	ldr	r2, [pc, #428]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007a52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	685b      	ldr	r3, [r3, #4]
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d013      	beq.n	8007a84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a5c:	f7fd f8fe 	bl	8004c5c <HAL_GetTick>
 8007a60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a62:	e008      	b.n	8007a76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a64:	f7fd f8fa 	bl	8004c5c <HAL_GetTick>
 8007a68:	4602      	mov	r2, r0
 8007a6a:	693b      	ldr	r3, [r7, #16]
 8007a6c:	1ad3      	subs	r3, r2, r3
 8007a6e:	2b64      	cmp	r3, #100	; 0x64
 8007a70:	d901      	bls.n	8007a76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007a72:	2303      	movs	r3, #3
 8007a74:	e21f      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a76:	4b61      	ldr	r3, [pc, #388]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d0f0      	beq.n	8007a64 <HAL_RCC_OscConfig+0xe8>
 8007a82:	e014      	b.n	8007aae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a84:	f7fd f8ea 	bl	8004c5c <HAL_GetTick>
 8007a88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a8a:	e008      	b.n	8007a9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a8c:	f7fd f8e6 	bl	8004c5c <HAL_GetTick>
 8007a90:	4602      	mov	r2, r0
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	2b64      	cmp	r3, #100	; 0x64
 8007a98:	d901      	bls.n	8007a9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007a9a:	2303      	movs	r3, #3
 8007a9c:	e20b      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007a9e:	4b57      	ldr	r3, [pc, #348]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aa6:	2b00      	cmp	r3, #0
 8007aa8:	d1f0      	bne.n	8007a8c <HAL_RCC_OscConfig+0x110>
 8007aaa:	e000      	b.n	8007aae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007aac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d069      	beq.n	8007b8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007aba:	4b50      	ldr	r3, [pc, #320]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	f003 030c 	and.w	r3, r3, #12
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d00b      	beq.n	8007ade <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007ac6:	4b4d      	ldr	r3, [pc, #308]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007ac8:	689b      	ldr	r3, [r3, #8]
 8007aca:	f003 030c 	and.w	r3, r3, #12
 8007ace:	2b08      	cmp	r3, #8
 8007ad0:	d11c      	bne.n	8007b0c <HAL_RCC_OscConfig+0x190>
 8007ad2:	4b4a      	ldr	r3, [pc, #296]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007ad4:	685b      	ldr	r3, [r3, #4]
 8007ad6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	d116      	bne.n	8007b0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007ade:	4b47      	ldr	r3, [pc, #284]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	f003 0302 	and.w	r3, r3, #2
 8007ae6:	2b00      	cmp	r3, #0
 8007ae8:	d005      	beq.n	8007af6 <HAL_RCC_OscConfig+0x17a>
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	68db      	ldr	r3, [r3, #12]
 8007aee:	2b01      	cmp	r3, #1
 8007af0:	d001      	beq.n	8007af6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8007af2:	2301      	movs	r3, #1
 8007af4:	e1df      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007af6:	4b41      	ldr	r3, [pc, #260]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	691b      	ldr	r3, [r3, #16]
 8007b02:	00db      	lsls	r3, r3, #3
 8007b04:	493d      	ldr	r1, [pc, #244]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b06:	4313      	orrs	r3, r2
 8007b08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b0a:	e040      	b.n	8007b8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	68db      	ldr	r3, [r3, #12]
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d023      	beq.n	8007b5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b14:	4b39      	ldr	r3, [pc, #228]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	4a38      	ldr	r2, [pc, #224]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b1a:	f043 0301 	orr.w	r3, r3, #1
 8007b1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b20:	f7fd f89c 	bl	8004c5c <HAL_GetTick>
 8007b24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b26:	e008      	b.n	8007b3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b28:	f7fd f898 	bl	8004c5c <HAL_GetTick>
 8007b2c:	4602      	mov	r2, r0
 8007b2e:	693b      	ldr	r3, [r7, #16]
 8007b30:	1ad3      	subs	r3, r2, r3
 8007b32:	2b02      	cmp	r3, #2
 8007b34:	d901      	bls.n	8007b3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8007b36:	2303      	movs	r3, #3
 8007b38:	e1bd      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b3a:	4b30      	ldr	r3, [pc, #192]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	f003 0302 	and.w	r3, r3, #2
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d0f0      	beq.n	8007b28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b46:	4b2d      	ldr	r3, [pc, #180]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	691b      	ldr	r3, [r3, #16]
 8007b52:	00db      	lsls	r3, r3, #3
 8007b54:	4929      	ldr	r1, [pc, #164]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b56:	4313      	orrs	r3, r2
 8007b58:	600b      	str	r3, [r1, #0]
 8007b5a:	e018      	b.n	8007b8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b5c:	4b27      	ldr	r3, [pc, #156]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4a26      	ldr	r2, [pc, #152]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b62:	f023 0301 	bic.w	r3, r3, #1
 8007b66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b68:	f7fd f878 	bl	8004c5c <HAL_GetTick>
 8007b6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b6e:	e008      	b.n	8007b82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b70:	f7fd f874 	bl	8004c5c <HAL_GetTick>
 8007b74:	4602      	mov	r2, r0
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	1ad3      	subs	r3, r2, r3
 8007b7a:	2b02      	cmp	r3, #2
 8007b7c:	d901      	bls.n	8007b82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007b7e:	2303      	movs	r3, #3
 8007b80:	e199      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b82:	4b1e      	ldr	r3, [pc, #120]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f003 0302 	and.w	r3, r3, #2
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1f0      	bne.n	8007b70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0308 	and.w	r3, r3, #8
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d038      	beq.n	8007c0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	695b      	ldr	r3, [r3, #20]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d019      	beq.n	8007bd6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007ba2:	4b16      	ldr	r3, [pc, #88]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007ba4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ba6:	4a15      	ldr	r2, [pc, #84]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007ba8:	f043 0301 	orr.w	r3, r3, #1
 8007bac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bae:	f7fd f855 	bl	8004c5c <HAL_GetTick>
 8007bb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bb4:	e008      	b.n	8007bc8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bb6:	f7fd f851 	bl	8004c5c <HAL_GetTick>
 8007bba:	4602      	mov	r2, r0
 8007bbc:	693b      	ldr	r3, [r7, #16]
 8007bbe:	1ad3      	subs	r3, r2, r3
 8007bc0:	2b02      	cmp	r3, #2
 8007bc2:	d901      	bls.n	8007bc8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007bc4:	2303      	movs	r3, #3
 8007bc6:	e176      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bc8:	4b0c      	ldr	r3, [pc, #48]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007bca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bcc:	f003 0302 	and.w	r3, r3, #2
 8007bd0:	2b00      	cmp	r3, #0
 8007bd2:	d0f0      	beq.n	8007bb6 <HAL_RCC_OscConfig+0x23a>
 8007bd4:	e01a      	b.n	8007c0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bd6:	4b09      	ldr	r3, [pc, #36]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007bd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007bda:	4a08      	ldr	r2, [pc, #32]	; (8007bfc <HAL_RCC_OscConfig+0x280>)
 8007bdc:	f023 0301 	bic.w	r3, r3, #1
 8007be0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be2:	f7fd f83b 	bl	8004c5c <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007be8:	e00a      	b.n	8007c00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bea:	f7fd f837 	bl	8004c5c <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	2b02      	cmp	r3, #2
 8007bf6:	d903      	bls.n	8007c00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	e15c      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
 8007bfc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c00:	4b91      	ldr	r3, [pc, #580]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1ee      	bne.n	8007bea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f003 0304 	and.w	r3, r3, #4
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	f000 80a4 	beq.w	8007d62 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c1a:	4b8b      	ldr	r3, [pc, #556]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d10d      	bne.n	8007c42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c26:	4b88      	ldr	r3, [pc, #544]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c2a:	4a87      	ldr	r2, [pc, #540]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c30:	6413      	str	r3, [r2, #64]	; 0x40
 8007c32:	4b85      	ldr	r3, [pc, #532]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c3a:	60bb      	str	r3, [r7, #8]
 8007c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c42:	4b82      	ldr	r3, [pc, #520]	; (8007e4c <HAL_RCC_OscConfig+0x4d0>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d118      	bne.n	8007c80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007c4e:	4b7f      	ldr	r3, [pc, #508]	; (8007e4c <HAL_RCC_OscConfig+0x4d0>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	4a7e      	ldr	r2, [pc, #504]	; (8007e4c <HAL_RCC_OscConfig+0x4d0>)
 8007c54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c5a:	f7fc ffff 	bl	8004c5c <HAL_GetTick>
 8007c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c60:	e008      	b.n	8007c74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c62:	f7fc fffb 	bl	8004c5c <HAL_GetTick>
 8007c66:	4602      	mov	r2, r0
 8007c68:	693b      	ldr	r3, [r7, #16]
 8007c6a:	1ad3      	subs	r3, r2, r3
 8007c6c:	2b64      	cmp	r3, #100	; 0x64
 8007c6e:	d901      	bls.n	8007c74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007c70:	2303      	movs	r3, #3
 8007c72:	e120      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007c74:	4b75      	ldr	r3, [pc, #468]	; (8007e4c <HAL_RCC_OscConfig+0x4d0>)
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d0f0      	beq.n	8007c62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	2b01      	cmp	r3, #1
 8007c86:	d106      	bne.n	8007c96 <HAL_RCC_OscConfig+0x31a>
 8007c88:	4b6f      	ldr	r3, [pc, #444]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8c:	4a6e      	ldr	r2, [pc, #440]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007c8e:	f043 0301 	orr.w	r3, r3, #1
 8007c92:	6713      	str	r3, [r2, #112]	; 0x70
 8007c94:	e02d      	b.n	8007cf2 <HAL_RCC_OscConfig+0x376>
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	689b      	ldr	r3, [r3, #8]
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d10c      	bne.n	8007cb8 <HAL_RCC_OscConfig+0x33c>
 8007c9e:	4b6a      	ldr	r3, [pc, #424]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007ca0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ca2:	4a69      	ldr	r2, [pc, #420]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007ca4:	f023 0301 	bic.w	r3, r3, #1
 8007ca8:	6713      	str	r3, [r2, #112]	; 0x70
 8007caa:	4b67      	ldr	r3, [pc, #412]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cae:	4a66      	ldr	r2, [pc, #408]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cb0:	f023 0304 	bic.w	r3, r3, #4
 8007cb4:	6713      	str	r3, [r2, #112]	; 0x70
 8007cb6:	e01c      	b.n	8007cf2 <HAL_RCC_OscConfig+0x376>
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	2b05      	cmp	r3, #5
 8007cbe:	d10c      	bne.n	8007cda <HAL_RCC_OscConfig+0x35e>
 8007cc0:	4b61      	ldr	r3, [pc, #388]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cc4:	4a60      	ldr	r2, [pc, #384]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cc6:	f043 0304 	orr.w	r3, r3, #4
 8007cca:	6713      	str	r3, [r2, #112]	; 0x70
 8007ccc:	4b5e      	ldr	r3, [pc, #376]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd0:	4a5d      	ldr	r2, [pc, #372]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cd2:	f043 0301 	orr.w	r3, r3, #1
 8007cd6:	6713      	str	r3, [r2, #112]	; 0x70
 8007cd8:	e00b      	b.n	8007cf2 <HAL_RCC_OscConfig+0x376>
 8007cda:	4b5b      	ldr	r3, [pc, #364]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cde:	4a5a      	ldr	r2, [pc, #360]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007ce0:	f023 0301 	bic.w	r3, r3, #1
 8007ce4:	6713      	str	r3, [r2, #112]	; 0x70
 8007ce6:	4b58      	ldr	r3, [pc, #352]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007ce8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cea:	4a57      	ldr	r2, [pc, #348]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007cec:	f023 0304 	bic.w	r3, r3, #4
 8007cf0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d015      	beq.n	8007d26 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cfa:	f7fc ffaf 	bl	8004c5c <HAL_GetTick>
 8007cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d00:	e00a      	b.n	8007d18 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d02:	f7fc ffab 	bl	8004c5c <HAL_GetTick>
 8007d06:	4602      	mov	r2, r0
 8007d08:	693b      	ldr	r3, [r7, #16]
 8007d0a:	1ad3      	subs	r3, r2, r3
 8007d0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d901      	bls.n	8007d18 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007d14:	2303      	movs	r3, #3
 8007d16:	e0ce      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d18:	4b4b      	ldr	r3, [pc, #300]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d1c:	f003 0302 	and.w	r3, r3, #2
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d0ee      	beq.n	8007d02 <HAL_RCC_OscConfig+0x386>
 8007d24:	e014      	b.n	8007d50 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d26:	f7fc ff99 	bl	8004c5c <HAL_GetTick>
 8007d2a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d2c:	e00a      	b.n	8007d44 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d2e:	f7fc ff95 	bl	8004c5c <HAL_GetTick>
 8007d32:	4602      	mov	r2, r0
 8007d34:	693b      	ldr	r3, [r7, #16]
 8007d36:	1ad3      	subs	r3, r2, r3
 8007d38:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3c:	4293      	cmp	r3, r2
 8007d3e:	d901      	bls.n	8007d44 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007d40:	2303      	movs	r3, #3
 8007d42:	e0b8      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d44:	4b40      	ldr	r3, [pc, #256]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007d48:	f003 0302 	and.w	r3, r3, #2
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d1ee      	bne.n	8007d2e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d50:	7dfb      	ldrb	r3, [r7, #23]
 8007d52:	2b01      	cmp	r3, #1
 8007d54:	d105      	bne.n	8007d62 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d56:	4b3c      	ldr	r3, [pc, #240]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d5a:	4a3b      	ldr	r2, [pc, #236]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007d60:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	699b      	ldr	r3, [r3, #24]
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	f000 80a4 	beq.w	8007eb4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007d6c:	4b36      	ldr	r3, [pc, #216]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d6e:	689b      	ldr	r3, [r3, #8]
 8007d70:	f003 030c 	and.w	r3, r3, #12
 8007d74:	2b08      	cmp	r3, #8
 8007d76:	d06b      	beq.n	8007e50 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	699b      	ldr	r3, [r3, #24]
 8007d7c:	2b02      	cmp	r3, #2
 8007d7e:	d149      	bne.n	8007e14 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d80:	4b31      	ldr	r3, [pc, #196]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	4a30      	ldr	r2, [pc, #192]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007d86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007d8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007d8c:	f7fc ff66 	bl	8004c5c <HAL_GetTick>
 8007d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d92:	e008      	b.n	8007da6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d94:	f7fc ff62 	bl	8004c5c <HAL_GetTick>
 8007d98:	4602      	mov	r2, r0
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	1ad3      	subs	r3, r2, r3
 8007d9e:	2b02      	cmp	r3, #2
 8007da0:	d901      	bls.n	8007da6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007da2:	2303      	movs	r3, #3
 8007da4:	e087      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007da6:	4b28      	ldr	r3, [pc, #160]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d1f0      	bne.n	8007d94 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	69da      	ldr	r2, [r3, #28]
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	6a1b      	ldr	r3, [r3, #32]
 8007dba:	431a      	orrs	r2, r3
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dc0:	019b      	lsls	r3, r3, #6
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007dc8:	085b      	lsrs	r3, r3, #1
 8007dca:	3b01      	subs	r3, #1
 8007dcc:	041b      	lsls	r3, r3, #16
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dd4:	061b      	lsls	r3, r3, #24
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	4a1b      	ldr	r2, [pc, #108]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007dda:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007dde:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007de0:	4b19      	ldr	r3, [pc, #100]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	4a18      	ldr	r2, [pc, #96]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007dea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007dec:	f7fc ff36 	bl	8004c5c <HAL_GetTick>
 8007df0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df2:	e008      	b.n	8007e06 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df4:	f7fc ff32 	bl	8004c5c <HAL_GetTick>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	693b      	ldr	r3, [r7, #16]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	2b02      	cmp	r3, #2
 8007e00:	d901      	bls.n	8007e06 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007e02:	2303      	movs	r3, #3
 8007e04:	e057      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e06:	4b10      	ldr	r3, [pc, #64]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e0e:	2b00      	cmp	r3, #0
 8007e10:	d0f0      	beq.n	8007df4 <HAL_RCC_OscConfig+0x478>
 8007e12:	e04f      	b.n	8007eb4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e14:	4b0c      	ldr	r3, [pc, #48]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	4a0b      	ldr	r2, [pc, #44]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007e20:	f7fc ff1c 	bl	8004c5c <HAL_GetTick>
 8007e24:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e26:	e008      	b.n	8007e3a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e28:	f7fc ff18 	bl	8004c5c <HAL_GetTick>
 8007e2c:	4602      	mov	r2, r0
 8007e2e:	693b      	ldr	r3, [r7, #16]
 8007e30:	1ad3      	subs	r3, r2, r3
 8007e32:	2b02      	cmp	r3, #2
 8007e34:	d901      	bls.n	8007e3a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007e36:	2303      	movs	r3, #3
 8007e38:	e03d      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e3a:	4b03      	ldr	r3, [pc, #12]	; (8007e48 <HAL_RCC_OscConfig+0x4cc>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d1f0      	bne.n	8007e28 <HAL_RCC_OscConfig+0x4ac>
 8007e46:	e035      	b.n	8007eb4 <HAL_RCC_OscConfig+0x538>
 8007e48:	40023800 	.word	0x40023800
 8007e4c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007e50:	4b1b      	ldr	r3, [pc, #108]	; (8007ec0 <HAL_RCC_OscConfig+0x544>)
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	699b      	ldr	r3, [r3, #24]
 8007e5a:	2b01      	cmp	r3, #1
 8007e5c:	d028      	beq.n	8007eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e68:	429a      	cmp	r2, r3
 8007e6a:	d121      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e6c:	68fb      	ldr	r3, [r7, #12]
 8007e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d11a      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e7a:	68fa      	ldr	r2, [r7, #12]
 8007e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007e80:	4013      	ands	r3, r2
 8007e82:	687a      	ldr	r2, [r7, #4]
 8007e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007e86:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007e88:	4293      	cmp	r3, r2
 8007e8a:	d111      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007e8c:	68fb      	ldr	r3, [r7, #12]
 8007e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007e9c:	429a      	cmp	r2, r3
 8007e9e:	d107      	bne.n	8007eb0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eaa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007eac:	429a      	cmp	r2, r3
 8007eae:	d001      	beq.n	8007eb4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e000      	b.n	8007eb6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007eb4:	2300      	movs	r3, #0
}
 8007eb6:	4618      	mov	r0, r3
 8007eb8:	3718      	adds	r7, #24
 8007eba:	46bd      	mov	sp, r7
 8007ebc:	bd80      	pop	{r7, pc}
 8007ebe:	bf00      	nop
 8007ec0:	40023800 	.word	0x40023800

08007ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ec4:	b580      	push	{r7, lr}
 8007ec6:	b084      	sub	sp, #16
 8007ec8:	af00      	add	r7, sp, #0
 8007eca:	6078      	str	r0, [r7, #4]
 8007ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007ece:	2300      	movs	r3, #0
 8007ed0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d101      	bne.n	8007edc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ed8:	2301      	movs	r3, #1
 8007eda:	e0d0      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007edc:	4b6a      	ldr	r3, [pc, #424]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	f003 030f 	and.w	r3, r3, #15
 8007ee4:	683a      	ldr	r2, [r7, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d910      	bls.n	8007f0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eea:	4b67      	ldr	r3, [pc, #412]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f023 020f 	bic.w	r2, r3, #15
 8007ef2:	4965      	ldr	r1, [pc, #404]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007ef4:	683b      	ldr	r3, [r7, #0]
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007efa:	4b63      	ldr	r3, [pc, #396]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f003 030f 	and.w	r3, r3, #15
 8007f02:	683a      	ldr	r2, [r7, #0]
 8007f04:	429a      	cmp	r2, r3
 8007f06:	d001      	beq.n	8007f0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007f08:	2301      	movs	r3, #1
 8007f0a:	e0b8      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f003 0302 	and.w	r3, r3, #2
 8007f14:	2b00      	cmp	r3, #0
 8007f16:	d020      	beq.n	8007f5a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f003 0304 	and.w	r3, r3, #4
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d005      	beq.n	8007f30 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f24:	4b59      	ldr	r3, [pc, #356]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f26:	689b      	ldr	r3, [r3, #8]
 8007f28:	4a58      	ldr	r2, [pc, #352]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007f2e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	681b      	ldr	r3, [r3, #0]
 8007f34:	f003 0308 	and.w	r3, r3, #8
 8007f38:	2b00      	cmp	r3, #0
 8007f3a:	d005      	beq.n	8007f48 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f3c:	4b53      	ldr	r3, [pc, #332]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f3e:	689b      	ldr	r3, [r3, #8]
 8007f40:	4a52      	ldr	r2, [pc, #328]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007f46:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f48:	4b50      	ldr	r3, [pc, #320]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	689b      	ldr	r3, [r3, #8]
 8007f54:	494d      	ldr	r1, [pc, #308]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f56:	4313      	orrs	r3, r2
 8007f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 0301 	and.w	r3, r3, #1
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d040      	beq.n	8007fe8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	685b      	ldr	r3, [r3, #4]
 8007f6a:	2b01      	cmp	r3, #1
 8007f6c:	d107      	bne.n	8007f7e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f6e:	4b47      	ldr	r3, [pc, #284]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d115      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f7a:	2301      	movs	r3, #1
 8007f7c:	e07f      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	685b      	ldr	r3, [r3, #4]
 8007f82:	2b02      	cmp	r3, #2
 8007f84:	d107      	bne.n	8007f96 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f86:	4b41      	ldr	r3, [pc, #260]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d109      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e073      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f96:	4b3d      	ldr	r3, [pc, #244]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f003 0302 	and.w	r3, r3, #2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d101      	bne.n	8007fa6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e06b      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007fa6:	4b39      	ldr	r3, [pc, #228]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007fa8:	689b      	ldr	r3, [r3, #8]
 8007faa:	f023 0203 	bic.w	r2, r3, #3
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	685b      	ldr	r3, [r3, #4]
 8007fb2:	4936      	ldr	r1, [pc, #216]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007fb4:	4313      	orrs	r3, r2
 8007fb6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007fb8:	f7fc fe50 	bl	8004c5c <HAL_GetTick>
 8007fbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fbe:	e00a      	b.n	8007fd6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc0:	f7fc fe4c 	bl	8004c5c <HAL_GetTick>
 8007fc4:	4602      	mov	r2, r0
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	1ad3      	subs	r3, r2, r3
 8007fca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007fce:	4293      	cmp	r3, r2
 8007fd0:	d901      	bls.n	8007fd6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007fd2:	2303      	movs	r3, #3
 8007fd4:	e053      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fd6:	4b2d      	ldr	r3, [pc, #180]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8007fd8:	689b      	ldr	r3, [r3, #8]
 8007fda:	f003 020c 	and.w	r2, r3, #12
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	685b      	ldr	r3, [r3, #4]
 8007fe2:	009b      	lsls	r3, r3, #2
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	d1eb      	bne.n	8007fc0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fe8:	4b27      	ldr	r3, [pc, #156]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	f003 030f 	and.w	r3, r3, #15
 8007ff0:	683a      	ldr	r2, [r7, #0]
 8007ff2:	429a      	cmp	r2, r3
 8007ff4:	d210      	bcs.n	8008018 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ff6:	4b24      	ldr	r3, [pc, #144]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	f023 020f 	bic.w	r2, r3, #15
 8007ffe:	4922      	ldr	r1, [pc, #136]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	4313      	orrs	r3, r2
 8008004:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008006:	4b20      	ldr	r3, [pc, #128]	; (8008088 <HAL_RCC_ClockConfig+0x1c4>)
 8008008:	681b      	ldr	r3, [r3, #0]
 800800a:	f003 030f 	and.w	r3, r3, #15
 800800e:	683a      	ldr	r2, [r7, #0]
 8008010:	429a      	cmp	r2, r3
 8008012:	d001      	beq.n	8008018 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008014:	2301      	movs	r3, #1
 8008016:	e032      	b.n	800807e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	f003 0304 	and.w	r3, r3, #4
 8008020:	2b00      	cmp	r3, #0
 8008022:	d008      	beq.n	8008036 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008024:	4b19      	ldr	r3, [pc, #100]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8008026:	689b      	ldr	r3, [r3, #8]
 8008028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	4916      	ldr	r1, [pc, #88]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8008032:	4313      	orrs	r3, r2
 8008034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	f003 0308 	and.w	r3, r3, #8
 800803e:	2b00      	cmp	r3, #0
 8008040:	d009      	beq.n	8008056 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008042:	4b12      	ldr	r3, [pc, #72]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8008044:	689b      	ldr	r3, [r3, #8]
 8008046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	691b      	ldr	r3, [r3, #16]
 800804e:	00db      	lsls	r3, r3, #3
 8008050:	490e      	ldr	r1, [pc, #56]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 8008052:	4313      	orrs	r3, r2
 8008054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008056:	f000 f821 	bl	800809c <HAL_RCC_GetSysClockFreq>
 800805a:	4601      	mov	r1, r0
 800805c:	4b0b      	ldr	r3, [pc, #44]	; (800808c <HAL_RCC_ClockConfig+0x1c8>)
 800805e:	689b      	ldr	r3, [r3, #8]
 8008060:	091b      	lsrs	r3, r3, #4
 8008062:	f003 030f 	and.w	r3, r3, #15
 8008066:	4a0a      	ldr	r2, [pc, #40]	; (8008090 <HAL_RCC_ClockConfig+0x1cc>)
 8008068:	5cd3      	ldrb	r3, [r2, r3]
 800806a:	fa21 f303 	lsr.w	r3, r1, r3
 800806e:	4a09      	ldr	r2, [pc, #36]	; (8008094 <HAL_RCC_ClockConfig+0x1d0>)
 8008070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008072:	4b09      	ldr	r3, [pc, #36]	; (8008098 <HAL_RCC_ClockConfig+0x1d4>)
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	4618      	mov	r0, r3
 8008078:	f7fc fcc0 	bl	80049fc <HAL_InitTick>

  return HAL_OK;
 800807c:	2300      	movs	r3, #0
}
 800807e:	4618      	mov	r0, r3
 8008080:	3710      	adds	r7, #16
 8008082:	46bd      	mov	sp, r7
 8008084:	bd80      	pop	{r7, pc}
 8008086:	bf00      	nop
 8008088:	40023c00 	.word	0x40023c00
 800808c:	40023800 	.word	0x40023800
 8008090:	080109e4 	.word	0x080109e4
 8008094:	2000004c 	.word	0x2000004c
 8008098:	20000050 	.word	0x20000050

0800809c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800809c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
 80080a6:	2300      	movs	r3, #0
 80080a8:	60fb      	str	r3, [r7, #12]
 80080aa:	2300      	movs	r3, #0
 80080ac:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80080ae:	2300      	movs	r3, #0
 80080b0:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080b2:	4b50      	ldr	r3, [pc, #320]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080b4:	689b      	ldr	r3, [r3, #8]
 80080b6:	f003 030c 	and.w	r3, r3, #12
 80080ba:	2b04      	cmp	r3, #4
 80080bc:	d007      	beq.n	80080ce <HAL_RCC_GetSysClockFreq+0x32>
 80080be:	2b08      	cmp	r3, #8
 80080c0:	d008      	beq.n	80080d4 <HAL_RCC_GetSysClockFreq+0x38>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	f040 808d 	bne.w	80081e2 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080c8:	4b4b      	ldr	r3, [pc, #300]	; (80081f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80080ca:	60bb      	str	r3, [r7, #8]
      break;
 80080cc:	e08c      	b.n	80081e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080ce:	4b4b      	ldr	r3, [pc, #300]	; (80081fc <HAL_RCC_GetSysClockFreq+0x160>)
 80080d0:	60bb      	str	r3, [r7, #8]
      break;
 80080d2:	e089      	b.n	80081e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080d4:	4b47      	ldr	r3, [pc, #284]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080d6:	685b      	ldr	r3, [r3, #4]
 80080d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80080dc:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80080de:	4b45      	ldr	r3, [pc, #276]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080e0:	685b      	ldr	r3, [r3, #4]
 80080e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d023      	beq.n	8008132 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ea:	4b42      	ldr	r3, [pc, #264]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80080ec:	685b      	ldr	r3, [r3, #4]
 80080ee:	099b      	lsrs	r3, r3, #6
 80080f0:	f04f 0400 	mov.w	r4, #0
 80080f4:	f240 11ff 	movw	r1, #511	; 0x1ff
 80080f8:	f04f 0200 	mov.w	r2, #0
 80080fc:	ea03 0501 	and.w	r5, r3, r1
 8008100:	ea04 0602 	and.w	r6, r4, r2
 8008104:	4a3d      	ldr	r2, [pc, #244]	; (80081fc <HAL_RCC_GetSysClockFreq+0x160>)
 8008106:	fb02 f106 	mul.w	r1, r2, r6
 800810a:	2200      	movs	r2, #0
 800810c:	fb02 f205 	mul.w	r2, r2, r5
 8008110:	440a      	add	r2, r1
 8008112:	493a      	ldr	r1, [pc, #232]	; (80081fc <HAL_RCC_GetSysClockFreq+0x160>)
 8008114:	fba5 0101 	umull	r0, r1, r5, r1
 8008118:	1853      	adds	r3, r2, r1
 800811a:	4619      	mov	r1, r3
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	f04f 0400 	mov.w	r4, #0
 8008122:	461a      	mov	r2, r3
 8008124:	4623      	mov	r3, r4
 8008126:	f7f8 f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800812a:	4603      	mov	r3, r0
 800812c:	460c      	mov	r4, r1
 800812e:	60fb      	str	r3, [r7, #12]
 8008130:	e049      	b.n	80081c6 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008132:	4b30      	ldr	r3, [pc, #192]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 8008134:	685b      	ldr	r3, [r3, #4]
 8008136:	099b      	lsrs	r3, r3, #6
 8008138:	f04f 0400 	mov.w	r4, #0
 800813c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008140:	f04f 0200 	mov.w	r2, #0
 8008144:	ea03 0501 	and.w	r5, r3, r1
 8008148:	ea04 0602 	and.w	r6, r4, r2
 800814c:	4629      	mov	r1, r5
 800814e:	4632      	mov	r2, r6
 8008150:	f04f 0300 	mov.w	r3, #0
 8008154:	f04f 0400 	mov.w	r4, #0
 8008158:	0154      	lsls	r4, r2, #5
 800815a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800815e:	014b      	lsls	r3, r1, #5
 8008160:	4619      	mov	r1, r3
 8008162:	4622      	mov	r2, r4
 8008164:	1b49      	subs	r1, r1, r5
 8008166:	eb62 0206 	sbc.w	r2, r2, r6
 800816a:	f04f 0300 	mov.w	r3, #0
 800816e:	f04f 0400 	mov.w	r4, #0
 8008172:	0194      	lsls	r4, r2, #6
 8008174:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008178:	018b      	lsls	r3, r1, #6
 800817a:	1a5b      	subs	r3, r3, r1
 800817c:	eb64 0402 	sbc.w	r4, r4, r2
 8008180:	f04f 0100 	mov.w	r1, #0
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	00e2      	lsls	r2, r4, #3
 800818a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800818e:	00d9      	lsls	r1, r3, #3
 8008190:	460b      	mov	r3, r1
 8008192:	4614      	mov	r4, r2
 8008194:	195b      	adds	r3, r3, r5
 8008196:	eb44 0406 	adc.w	r4, r4, r6
 800819a:	f04f 0100 	mov.w	r1, #0
 800819e:	f04f 0200 	mov.w	r2, #0
 80081a2:	02a2      	lsls	r2, r4, #10
 80081a4:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80081a8:	0299      	lsls	r1, r3, #10
 80081aa:	460b      	mov	r3, r1
 80081ac:	4614      	mov	r4, r2
 80081ae:	4618      	mov	r0, r3
 80081b0:	4621      	mov	r1, r4
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	f04f 0400 	mov.w	r4, #0
 80081b8:	461a      	mov	r2, r3
 80081ba:	4623      	mov	r3, r4
 80081bc:	f7f8 f878 	bl	80002b0 <__aeabi_uldivmod>
 80081c0:	4603      	mov	r3, r0
 80081c2:	460c      	mov	r4, r1
 80081c4:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80081c6:	4b0b      	ldr	r3, [pc, #44]	; (80081f4 <HAL_RCC_GetSysClockFreq+0x158>)
 80081c8:	685b      	ldr	r3, [r3, #4]
 80081ca:	0c1b      	lsrs	r3, r3, #16
 80081cc:	f003 0303 	and.w	r3, r3, #3
 80081d0:	3301      	adds	r3, #1
 80081d2:	005b      	lsls	r3, r3, #1
 80081d4:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80081d6:	68fa      	ldr	r2, [r7, #12]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	fbb2 f3f3 	udiv	r3, r2, r3
 80081de:	60bb      	str	r3, [r7, #8]
      break;
 80081e0:	e002      	b.n	80081e8 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80081e2:	4b05      	ldr	r3, [pc, #20]	; (80081f8 <HAL_RCC_GetSysClockFreq+0x15c>)
 80081e4:	60bb      	str	r3, [r7, #8]
      break;
 80081e6:	bf00      	nop
    }
  }
  return sysclockfreq;
 80081e8:	68bb      	ldr	r3, [r7, #8]
}
 80081ea:	4618      	mov	r0, r3
 80081ec:	3714      	adds	r7, #20
 80081ee:	46bd      	mov	sp, r7
 80081f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80081f2:	bf00      	nop
 80081f4:	40023800 	.word	0x40023800
 80081f8:	00f42400 	.word	0x00f42400
 80081fc:	017d7840 	.word	0x017d7840

08008200 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008200:	b480      	push	{r7}
 8008202:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008204:	4b03      	ldr	r3, [pc, #12]	; (8008214 <HAL_RCC_GetHCLKFreq+0x14>)
 8008206:	681b      	ldr	r3, [r3, #0]
}
 8008208:	4618      	mov	r0, r3
 800820a:	46bd      	mov	sp, r7
 800820c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008210:	4770      	bx	lr
 8008212:	bf00      	nop
 8008214:	2000004c 	.word	0x2000004c

08008218 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008218:	b580      	push	{r7, lr}
 800821a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800821c:	f7ff fff0 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008220:	4601      	mov	r1, r0
 8008222:	4b05      	ldr	r3, [pc, #20]	; (8008238 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008224:	689b      	ldr	r3, [r3, #8]
 8008226:	0a9b      	lsrs	r3, r3, #10
 8008228:	f003 0307 	and.w	r3, r3, #7
 800822c:	4a03      	ldr	r2, [pc, #12]	; (800823c <HAL_RCC_GetPCLK1Freq+0x24>)
 800822e:	5cd3      	ldrb	r3, [r2, r3]
 8008230:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008234:	4618      	mov	r0, r3
 8008236:	bd80      	pop	{r7, pc}
 8008238:	40023800 	.word	0x40023800
 800823c:	080109f4 	.word	0x080109f4

08008240 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008240:	b580      	push	{r7, lr}
 8008242:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008244:	f7ff ffdc 	bl	8008200 <HAL_RCC_GetHCLKFreq>
 8008248:	4601      	mov	r1, r0
 800824a:	4b05      	ldr	r3, [pc, #20]	; (8008260 <HAL_RCC_GetPCLK2Freq+0x20>)
 800824c:	689b      	ldr	r3, [r3, #8]
 800824e:	0b5b      	lsrs	r3, r3, #13
 8008250:	f003 0307 	and.w	r3, r3, #7
 8008254:	4a03      	ldr	r2, [pc, #12]	; (8008264 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008256:	5cd3      	ldrb	r3, [r2, r3]
 8008258:	fa21 f303 	lsr.w	r3, r1, r3
}
 800825c:	4618      	mov	r0, r3
 800825e:	bd80      	pop	{r7, pc}
 8008260:	40023800 	.word	0x40023800
 8008264:	080109f4 	.word	0x080109f4

08008268 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008268:	b480      	push	{r7}
 800826a:	b083      	sub	sp, #12
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	220f      	movs	r2, #15
 8008276:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008278:	4b12      	ldr	r3, [pc, #72]	; (80082c4 <HAL_RCC_GetClockConfig+0x5c>)
 800827a:	689b      	ldr	r3, [r3, #8]
 800827c:	f003 0203 	and.w	r2, r3, #3
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008284:	4b0f      	ldr	r3, [pc, #60]	; (80082c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008286:	689b      	ldr	r3, [r3, #8]
 8008288:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008290:	4b0c      	ldr	r3, [pc, #48]	; (80082c4 <HAL_RCC_GetClockConfig+0x5c>)
 8008292:	689b      	ldr	r3, [r3, #8]
 8008294:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800829c:	4b09      	ldr	r3, [pc, #36]	; (80082c4 <HAL_RCC_GetClockConfig+0x5c>)
 800829e:	689b      	ldr	r3, [r3, #8]
 80082a0:	08db      	lsrs	r3, r3, #3
 80082a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80082aa:	4b07      	ldr	r3, [pc, #28]	; (80082c8 <HAL_RCC_GetClockConfig+0x60>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f003 020f 	and.w	r2, r3, #15
 80082b2:	683b      	ldr	r3, [r7, #0]
 80082b4:	601a      	str	r2, [r3, #0]
}
 80082b6:	bf00      	nop
 80082b8:	370c      	adds	r7, #12
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr
 80082c2:	bf00      	nop
 80082c4:	40023800 	.word	0x40023800
 80082c8:	40023c00 	.word	0x40023c00

080082cc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80082cc:	b580      	push	{r7, lr}
 80082ce:	b088      	sub	sp, #32
 80082d0:	af00      	add	r7, sp, #0
 80082d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80082d4:	2300      	movs	r3, #0
 80082d6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80082d8:	2300      	movs	r3, #0
 80082da:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80082dc:	2300      	movs	r3, #0
 80082de:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80082e0:	2300      	movs	r3, #0
 80082e2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80082e4:	2300      	movs	r3, #0
 80082e6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	f003 0301 	and.w	r3, r3, #1
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d012      	beq.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80082f4:	4b69      	ldr	r3, [pc, #420]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f6:	689b      	ldr	r3, [r3, #8]
 80082f8:	4a68      	ldr	r2, [pc, #416]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80082fe:	6093      	str	r3, [r2, #8]
 8008300:	4b66      	ldr	r3, [pc, #408]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008302:	689a      	ldr	r2, [r3, #8]
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008308:	4964      	ldr	r1, [pc, #400]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800830a:	4313      	orrs	r3, r2
 800830c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008316:	2301      	movs	r3, #1
 8008318:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	681b      	ldr	r3, [r3, #0]
 800831e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008322:	2b00      	cmp	r3, #0
 8008324:	d017      	beq.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008326:	4b5d      	ldr	r3, [pc, #372]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008328:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800832c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008334:	4959      	ldr	r1, [pc, #356]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008336:	4313      	orrs	r3, r2
 8008338:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008340:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008344:	d101      	bne.n	800834a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008346:	2301      	movs	r3, #1
 8008348:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800834e:	2b00      	cmp	r3, #0
 8008350:	d101      	bne.n	8008356 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008352:	2301      	movs	r3, #1
 8008354:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800835e:	2b00      	cmp	r3, #0
 8008360:	d017      	beq.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008362:	4b4e      	ldr	r3, [pc, #312]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008364:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008368:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008370:	494a      	ldr	r1, [pc, #296]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008372:	4313      	orrs	r3, r2
 8008374:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800837c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008380:	d101      	bne.n	8008386 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008382:	2301      	movs	r3, #1
 8008384:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800838a:	2b00      	cmp	r3, #0
 800838c:	d101      	bne.n	8008392 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800838e:	2301      	movs	r3, #1
 8008390:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	681b      	ldr	r3, [r3, #0]
 8008396:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800839a:	2b00      	cmp	r3, #0
 800839c:	d001      	beq.n	80083a2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800839e:	2301      	movs	r3, #1
 80083a0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	f003 0320 	and.w	r3, r3, #32
 80083aa:	2b00      	cmp	r3, #0
 80083ac:	f000 808b 	beq.w	80084c6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80083b0:	4b3a      	ldr	r3, [pc, #232]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083b4:	4a39      	ldr	r2, [pc, #228]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80083ba:	6413      	str	r3, [r2, #64]	; 0x40
 80083bc:	4b37      	ldr	r3, [pc, #220]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80083c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80083c4:	60bb      	str	r3, [r7, #8]
 80083c6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80083c8:	4b35      	ldr	r3, [pc, #212]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	4a34      	ldr	r2, [pc, #208]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80083d4:	f7fc fc42 	bl	8004c5c <HAL_GetTick>
 80083d8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083da:	e008      	b.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80083dc:	f7fc fc3e 	bl	8004c5c <HAL_GetTick>
 80083e0:	4602      	mov	r2, r0
 80083e2:	697b      	ldr	r3, [r7, #20]
 80083e4:	1ad3      	subs	r3, r2, r3
 80083e6:	2b64      	cmp	r3, #100	; 0x64
 80083e8:	d901      	bls.n	80083ee <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80083ea:	2303      	movs	r3, #3
 80083ec:	e355      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80083ee:	4b2c      	ldr	r3, [pc, #176]	; (80084a0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d0f0      	beq.n	80083dc <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80083fa:	4b28      	ldr	r3, [pc, #160]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80083fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80083fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008402:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	2b00      	cmp	r3, #0
 8008408:	d035      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800840e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008412:	693a      	ldr	r2, [r7, #16]
 8008414:	429a      	cmp	r2, r3
 8008416:	d02e      	beq.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8008418:	4b20      	ldr	r3, [pc, #128]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800841a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800841c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008420:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008422:	4b1e      	ldr	r3, [pc, #120]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008424:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008426:	4a1d      	ldr	r2, [pc, #116]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008428:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800842c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800842e:	4b1b      	ldr	r3, [pc, #108]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008432:	4a1a      	ldr	r2, [pc, #104]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008434:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008438:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800843a:	4a18      	ldr	r2, [pc, #96]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800843c:	693b      	ldr	r3, [r7, #16]
 800843e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008440:	4b16      	ldr	r3, [pc, #88]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008442:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008444:	f003 0301 	and.w	r3, r3, #1
 8008448:	2b01      	cmp	r3, #1
 800844a:	d114      	bne.n	8008476 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800844c:	f7fc fc06 	bl	8004c5c <HAL_GetTick>
 8008450:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008452:	e00a      	b.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008454:	f7fc fc02 	bl	8004c5c <HAL_GetTick>
 8008458:	4602      	mov	r2, r0
 800845a:	697b      	ldr	r3, [r7, #20]
 800845c:	1ad3      	subs	r3, r2, r3
 800845e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008462:	4293      	cmp	r3, r2
 8008464:	d901      	bls.n	800846a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008466:	2303      	movs	r3, #3
 8008468:	e317      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800846a:	4b0c      	ldr	r3, [pc, #48]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800846c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800846e:	f003 0302 	and.w	r3, r3, #2
 8008472:	2b00      	cmp	r3, #0
 8008474:	d0ee      	beq.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800847a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800847e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008482:	d111      	bne.n	80084a8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008484:	4b05      	ldr	r3, [pc, #20]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008490:	4b04      	ldr	r3, [pc, #16]	; (80084a4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008492:	400b      	ands	r3, r1
 8008494:	4901      	ldr	r1, [pc, #4]	; (800849c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008496:	4313      	orrs	r3, r2
 8008498:	608b      	str	r3, [r1, #8]
 800849a:	e00b      	b.n	80084b4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800849c:	40023800 	.word	0x40023800
 80084a0:	40007000 	.word	0x40007000
 80084a4:	0ffffcff 	.word	0x0ffffcff
 80084a8:	4bb0      	ldr	r3, [pc, #704]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084aa:	689b      	ldr	r3, [r3, #8]
 80084ac:	4aaf      	ldr	r2, [pc, #700]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ae:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80084b2:	6093      	str	r3, [r2, #8]
 80084b4:	4bad      	ldr	r3, [pc, #692]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80084bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80084c0:	49aa      	ldr	r1, [pc, #680]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084c2:	4313      	orrs	r3, r2
 80084c4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	f003 0310 	and.w	r3, r3, #16
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d010      	beq.n	80084f4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80084d2:	4ba6      	ldr	r3, [pc, #664]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084d8:	4aa4      	ldr	r2, [pc, #656]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80084de:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80084e2:	4ba2      	ldr	r3, [pc, #648]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084e4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084ec:	499f      	ldr	r1, [pc, #636]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ee:	4313      	orrs	r3, r2
 80084f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d00a      	beq.n	8008516 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008500:	4b9a      	ldr	r3, [pc, #616]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008502:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008506:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800850e:	4997      	ldr	r1, [pc, #604]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008510:	4313      	orrs	r3, r2
 8008512:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00a      	beq.n	8008538 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8008522:	4b92      	ldr	r3, [pc, #584]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008528:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008530:	498e      	ldr	r1, [pc, #568]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008532:	4313      	orrs	r3, r2
 8008534:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	681b      	ldr	r3, [r3, #0]
 800853c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008540:	2b00      	cmp	r3, #0
 8008542:	d00a      	beq.n	800855a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008544:	4b89      	ldr	r3, [pc, #548]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008546:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800854a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008552:	4986      	ldr	r1, [pc, #536]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008554:	4313      	orrs	r3, r2
 8008556:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00a      	beq.n	800857c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008566:	4b81      	ldr	r3, [pc, #516]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008568:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800856c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008574:	497d      	ldr	r1, [pc, #500]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008576:	4313      	orrs	r3, r2
 8008578:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008584:	2b00      	cmp	r3, #0
 8008586:	d00a      	beq.n	800859e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008588:	4b78      	ldr	r3, [pc, #480]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800858a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800858e:	f023 0203 	bic.w	r2, r3, #3
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008596:	4975      	ldr	r1, [pc, #468]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008598:	4313      	orrs	r3, r2
 800859a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00a      	beq.n	80085c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80085aa:	4b70      	ldr	r3, [pc, #448]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085b0:	f023 020c 	bic.w	r2, r3, #12
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80085b8:	496c      	ldr	r1, [pc, #432]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ba:	4313      	orrs	r3, r2
 80085bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085c8:	2b00      	cmp	r3, #0
 80085ca:	d00a      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80085cc:	4b67      	ldr	r3, [pc, #412]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085d2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80085da:	4964      	ldr	r1, [pc, #400]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085dc:	4313      	orrs	r3, r2
 80085de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80085ea:	2b00      	cmp	r3, #0
 80085ec:	d00a      	beq.n	8008604 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80085ee:	4b5f      	ldr	r3, [pc, #380]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085f4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80085fc:	495b      	ldr	r1, [pc, #364]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085fe:	4313      	orrs	r3, r2
 8008600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800860c:	2b00      	cmp	r3, #0
 800860e:	d00a      	beq.n	8008626 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8008610:	4b56      	ldr	r3, [pc, #344]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800861e:	4953      	ldr	r1, [pc, #332]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008620:	4313      	orrs	r3, r2
 8008622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800862e:	2b00      	cmp	r3, #0
 8008630:	d00a      	beq.n	8008648 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008632:	4b4e      	ldr	r3, [pc, #312]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008638:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008640:	494a      	ldr	r1, [pc, #296]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008642:	4313      	orrs	r3, r2
 8008644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008650:	2b00      	cmp	r3, #0
 8008652:	d00a      	beq.n	800866a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008654:	4b45      	ldr	r3, [pc, #276]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800865a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008662:	4942      	ldr	r1, [pc, #264]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008672:	2b00      	cmp	r3, #0
 8008674:	d00a      	beq.n	800868c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008676:	4b3d      	ldr	r3, [pc, #244]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800867c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008684:	4939      	ldr	r1, [pc, #228]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008686:	4313      	orrs	r3, r2
 8008688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008694:	2b00      	cmp	r3, #0
 8008696:	d00a      	beq.n	80086ae <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008698:	4b34      	ldr	r3, [pc, #208]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800869a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800869e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80086a6:	4931      	ldr	r1, [pc, #196]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086a8:	4313      	orrs	r3, r2
 80086aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d011      	beq.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80086ba:	4b2c      	ldr	r3, [pc, #176]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086c0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086c8:	4928      	ldr	r1, [pc, #160]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80086d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80086d8:	d101      	bne.n	80086de <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80086da:	2301      	movs	r3, #1
 80086dc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d001      	beq.n	80086ee <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80086ea:	2301      	movs	r3, #1
 80086ec:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	d00a      	beq.n	8008710 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80086fa:	4b1c      	ldr	r3, [pc, #112]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80086fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008700:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008708:	4918      	ldr	r1, [pc, #96]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800870a:	4313      	orrs	r3, r2
 800870c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8008718:	2b00      	cmp	r3, #0
 800871a:	d00b      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800871c:	4b13      	ldr	r3, [pc, #76]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800871e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008722:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800872c:	490f      	ldr	r1, [pc, #60]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008734:	69fb      	ldr	r3, [r7, #28]
 8008736:	2b01      	cmp	r3, #1
 8008738:	d005      	beq.n	8008746 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008742:	f040 80d8 	bne.w	80088f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008746:	4b09      	ldr	r3, [pc, #36]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	4a08      	ldr	r2, [pc, #32]	; (800876c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800874c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008750:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008752:	f7fc fa83 	bl	8004c5c <HAL_GetTick>
 8008756:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008758:	e00a      	b.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800875a:	f7fc fa7f 	bl	8004c5c <HAL_GetTick>
 800875e:	4602      	mov	r2, r0
 8008760:	697b      	ldr	r3, [r7, #20]
 8008762:	1ad3      	subs	r3, r2, r3
 8008764:	2b64      	cmp	r3, #100	; 0x64
 8008766:	d903      	bls.n	8008770 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008768:	2303      	movs	r3, #3
 800876a:	e196      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800876c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008770:	4b6c      	ldr	r3, [pc, #432]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008778:	2b00      	cmp	r3, #0
 800877a:	d1ee      	bne.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f003 0301 	and.w	r3, r3, #1
 8008784:	2b00      	cmp	r3, #0
 8008786:	d021      	beq.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800878c:	2b00      	cmp	r3, #0
 800878e:	d11d      	bne.n	80087cc <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008790:	4b64      	ldr	r3, [pc, #400]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008792:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008796:	0c1b      	lsrs	r3, r3, #16
 8008798:	f003 0303 	and.w	r3, r3, #3
 800879c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800879e:	4b61      	ldr	r3, [pc, #388]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087a4:	0e1b      	lsrs	r3, r3, #24
 80087a6:	f003 030f 	and.w	r3, r3, #15
 80087aa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	685b      	ldr	r3, [r3, #4]
 80087b0:	019a      	lsls	r2, r3, #6
 80087b2:	693b      	ldr	r3, [r7, #16]
 80087b4:	041b      	lsls	r3, r3, #16
 80087b6:	431a      	orrs	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	061b      	lsls	r3, r3, #24
 80087bc:	431a      	orrs	r2, r3
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	689b      	ldr	r3, [r3, #8]
 80087c2:	071b      	lsls	r3, r3, #28
 80087c4:	4957      	ldr	r1, [pc, #348]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087c6:	4313      	orrs	r3, r2
 80087c8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087d4:	2b00      	cmp	r3, #0
 80087d6:	d004      	beq.n	80087e2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80087dc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80087e0:	d00a      	beq.n	80087f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d02e      	beq.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80087f6:	d129      	bne.n	800884c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80087f8:	4b4a      	ldr	r3, [pc, #296]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	f003 0303 	and.w	r3, r3, #3
 8008804:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008806:	4b47      	ldr	r3, [pc, #284]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008808:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800880c:	0f1b      	lsrs	r3, r3, #28
 800880e:	f003 0307 	and.w	r3, r3, #7
 8008812:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	019a      	lsls	r2, r3, #6
 800881a:	693b      	ldr	r3, [r7, #16]
 800881c:	041b      	lsls	r3, r3, #16
 800881e:	431a      	orrs	r2, r3
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	68db      	ldr	r3, [r3, #12]
 8008824:	061b      	lsls	r3, r3, #24
 8008826:	431a      	orrs	r2, r3
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	071b      	lsls	r3, r3, #28
 800882c:	493d      	ldr	r1, [pc, #244]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800882e:	4313      	orrs	r3, r2
 8008830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008834:	4b3b      	ldr	r3, [pc, #236]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800883a:	f023 021f 	bic.w	r2, r3, #31
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008842:	3b01      	subs	r3, #1
 8008844:	4937      	ldr	r1, [pc, #220]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008846:	4313      	orrs	r3, r2
 8008848:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008854:	2b00      	cmp	r3, #0
 8008856:	d01d      	beq.n	8008894 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008858:	4b32      	ldr	r3, [pc, #200]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800885a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800885e:	0e1b      	lsrs	r3, r3, #24
 8008860:	f003 030f 	and.w	r3, r3, #15
 8008864:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008866:	4b2f      	ldr	r3, [pc, #188]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008868:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800886c:	0f1b      	lsrs	r3, r3, #28
 800886e:	f003 0307 	and.w	r3, r3, #7
 8008872:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	685b      	ldr	r3, [r3, #4]
 8008878:	019a      	lsls	r2, r3, #6
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	691b      	ldr	r3, [r3, #16]
 800887e:	041b      	lsls	r3, r3, #16
 8008880:	431a      	orrs	r2, r3
 8008882:	693b      	ldr	r3, [r7, #16]
 8008884:	061b      	lsls	r3, r3, #24
 8008886:	431a      	orrs	r2, r3
 8008888:	68fb      	ldr	r3, [r7, #12]
 800888a:	071b      	lsls	r3, r3, #28
 800888c:	4925      	ldr	r1, [pc, #148]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800888e:	4313      	orrs	r3, r2
 8008890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800889c:	2b00      	cmp	r3, #0
 800889e:	d011      	beq.n	80088c4 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	685b      	ldr	r3, [r3, #4]
 80088a4:	019a      	lsls	r2, r3, #6
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	691b      	ldr	r3, [r3, #16]
 80088aa:	041b      	lsls	r3, r3, #16
 80088ac:	431a      	orrs	r2, r3
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	68db      	ldr	r3, [r3, #12]
 80088b2:	061b      	lsls	r3, r3, #24
 80088b4:	431a      	orrs	r2, r3
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	071b      	lsls	r3, r3, #28
 80088bc:	4919      	ldr	r1, [pc, #100]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088be:	4313      	orrs	r3, r2
 80088c0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80088c4:	4b17      	ldr	r3, [pc, #92]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a16      	ldr	r2, [pc, #88]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80088ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80088d0:	f7fc f9c4 	bl	8004c5c <HAL_GetTick>
 80088d4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088d6:	e008      	b.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80088d8:	f7fc f9c0 	bl	8004c5c <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	697b      	ldr	r3, [r7, #20]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b64      	cmp	r3, #100	; 0x64
 80088e4:	d901      	bls.n	80088ea <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e0d7      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80088ea:	4b0e      	ldr	r3, [pc, #56]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d0f0      	beq.n	80088d8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80088f6:	69bb      	ldr	r3, [r7, #24]
 80088f8:	2b01      	cmp	r3, #1
 80088fa:	f040 80cd 	bne.w	8008a98 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80088fe:	4b09      	ldr	r3, [pc, #36]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	4a08      	ldr	r2, [pc, #32]	; (8008924 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008908:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800890a:	f7fc f9a7 	bl	8004c5c <HAL_GetTick>
 800890e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008910:	e00a      	b.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008912:	f7fc f9a3 	bl	8004c5c <HAL_GetTick>
 8008916:	4602      	mov	r2, r0
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	1ad3      	subs	r3, r2, r3
 800891c:	2b64      	cmp	r3, #100	; 0x64
 800891e:	d903      	bls.n	8008928 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008920:	2303      	movs	r3, #3
 8008922:	e0ba      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008924:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008928:	4b5e      	ldr	r3, [pc, #376]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008930:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008934:	d0ed      	beq.n	8008912 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d003      	beq.n	800894a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008946:	2b00      	cmp	r3, #0
 8008948:	d009      	beq.n	800895e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008952:	2b00      	cmp	r3, #0
 8008954:	d02e      	beq.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800895a:	2b00      	cmp	r3, #0
 800895c:	d12a      	bne.n	80089b4 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800895e:	4b51      	ldr	r3, [pc, #324]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008960:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008964:	0c1b      	lsrs	r3, r3, #16
 8008966:	f003 0303 	and.w	r3, r3, #3
 800896a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800896c:	4b4d      	ldr	r3, [pc, #308]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800896e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008972:	0f1b      	lsrs	r3, r3, #28
 8008974:	f003 0307 	and.w	r3, r3, #7
 8008978:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	019a      	lsls	r2, r3, #6
 8008980:	693b      	ldr	r3, [r7, #16]
 8008982:	041b      	lsls	r3, r3, #16
 8008984:	431a      	orrs	r2, r3
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	699b      	ldr	r3, [r3, #24]
 800898a:	061b      	lsls	r3, r3, #24
 800898c:	431a      	orrs	r2, r3
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	071b      	lsls	r3, r3, #28
 8008992:	4944      	ldr	r1, [pc, #272]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008994:	4313      	orrs	r3, r2
 8008996:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800899a:	4b42      	ldr	r3, [pc, #264]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800899c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80089a0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089a8:	3b01      	subs	r3, #1
 80089aa:	021b      	lsls	r3, r3, #8
 80089ac:	493d      	ldr	r1, [pc, #244]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089ae:	4313      	orrs	r3, r2
 80089b0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d022      	beq.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80089c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80089c8:	d11d      	bne.n	8008a06 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80089ca:	4b36      	ldr	r3, [pc, #216]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089d0:	0e1b      	lsrs	r3, r3, #24
 80089d2:	f003 030f 	and.w	r3, r3, #15
 80089d6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80089d8:	4b32      	ldr	r3, [pc, #200]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80089da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80089de:	0f1b      	lsrs	r3, r3, #28
 80089e0:	f003 0307 	and.w	r3, r3, #7
 80089e4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	695b      	ldr	r3, [r3, #20]
 80089ea:	019a      	lsls	r2, r3, #6
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6a1b      	ldr	r3, [r3, #32]
 80089f0:	041b      	lsls	r3, r3, #16
 80089f2:	431a      	orrs	r2, r3
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	061b      	lsls	r3, r3, #24
 80089f8:	431a      	orrs	r2, r3
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	071b      	lsls	r3, r3, #28
 80089fe:	4929      	ldr	r1, [pc, #164]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	f003 0308 	and.w	r3, r3, #8
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d028      	beq.n	8008a64 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008a12:	4b24      	ldr	r3, [pc, #144]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a18:	0e1b      	lsrs	r3, r3, #24
 8008a1a:	f003 030f 	and.w	r3, r3, #15
 8008a1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8008a20:	4b20      	ldr	r3, [pc, #128]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008a26:	0c1b      	lsrs	r3, r3, #16
 8008a28:	f003 0303 	and.w	r3, r3, #3
 8008a2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8008a2e:	687b      	ldr	r3, [r7, #4]
 8008a30:	695b      	ldr	r3, [r3, #20]
 8008a32:	019a      	lsls	r2, r3, #6
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	041b      	lsls	r3, r3, #16
 8008a38:	431a      	orrs	r2, r3
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	061b      	lsls	r3, r3, #24
 8008a3e:	431a      	orrs	r2, r3
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	69db      	ldr	r3, [r3, #28]
 8008a44:	071b      	lsls	r3, r3, #28
 8008a46:	4917      	ldr	r1, [pc, #92]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a48:	4313      	orrs	r3, r2
 8008a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8008a4e:	4b15      	ldr	r3, [pc, #84]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008a54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a5c:	4911      	ldr	r1, [pc, #68]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008a64:	4b0f      	ldr	r3, [pc, #60]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	4a0e      	ldr	r2, [pc, #56]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a70:	f7fc f8f4 	bl	8004c5c <HAL_GetTick>
 8008a74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a76:	e008      	b.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008a78:	f7fc f8f0 	bl	8004c5c <HAL_GetTick>
 8008a7c:	4602      	mov	r2, r0
 8008a7e:	697b      	ldr	r3, [r7, #20]
 8008a80:	1ad3      	subs	r3, r2, r3
 8008a82:	2b64      	cmp	r3, #100	; 0x64
 8008a84:	d901      	bls.n	8008a8a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e007      	b.n	8008a9a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008a8a:	4b06      	ldr	r3, [pc, #24]	; (8008aa4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a96:	d1ef      	bne.n	8008a78 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008a98:	2300      	movs	r3, #0
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3720      	adds	r7, #32
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	40023800 	.word	0x40023800

08008aa8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b082      	sub	sp, #8
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d101      	bne.n	8008aba <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	e06b      	b.n	8008b92 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	7f5b      	ldrb	r3, [r3, #29]
 8008abe:	b2db      	uxtb	r3, r3
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d105      	bne.n	8008ad0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2200      	movs	r2, #0
 8008ac8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008aca:	6878      	ldr	r0, [r7, #4]
 8008acc:	f7fb fcf4 	bl	80044b8 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2202      	movs	r2, #2
 8008ad4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	22ca      	movs	r2, #202	; 0xca
 8008adc:	625a      	str	r2, [r3, #36]	; 0x24
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2253      	movs	r2, #83	; 0x53
 8008ae4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008ae6:	6878      	ldr	r0, [r7, #4]
 8008ae8:	f000 fbae 	bl	8009248 <RTC_EnterInitMode>
 8008aec:	4603      	mov	r3, r0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d008      	beq.n	8008b04 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	22ff      	movs	r2, #255	; 0xff
 8008af8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	2204      	movs	r2, #4
 8008afe:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 8008b00:	2301      	movs	r3, #1
 8008b02:	e046      	b.n	8008b92 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	6899      	ldr	r1, [r3, #8]
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681a      	ldr	r2, [r3, #0]
 8008b0e:	4b23      	ldr	r3, [pc, #140]	; (8008b9c <HAL_RTC_Init+0xf4>)
 8008b10:	400b      	ands	r3, r1
 8008b12:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	6899      	ldr	r1, [r3, #8]
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	685a      	ldr	r2, [r3, #4]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	691b      	ldr	r3, [r3, #16]
 8008b22:	431a      	orrs	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	695b      	ldr	r3, [r3, #20]
 8008b28:	431a      	orrs	r2, r3
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	430a      	orrs	r2, r1
 8008b30:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	687a      	ldr	r2, [r7, #4]
 8008b38:	68d2      	ldr	r2, [r2, #12]
 8008b3a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	681b      	ldr	r3, [r3, #0]
 8008b40:	6919      	ldr	r1, [r3, #16]
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	689b      	ldr	r3, [r3, #8]
 8008b46:	041a      	lsls	r2, r3, #16
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	430a      	orrs	r2, r1
 8008b4e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b5e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f022 0208 	bic.w	r2, r2, #8
 8008b6e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	699a      	ldr	r2, [r3, #24]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	430a      	orrs	r2, r1
 8008b80:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	22ff      	movs	r2, #255	; 0xff
 8008b88:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008b8a:	687b      	ldr	r3, [r7, #4]
 8008b8c:	2201      	movs	r2, #1
 8008b8e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008b90:	2300      	movs	r3, #0
  }
}
 8008b92:	4618      	mov	r0, r3
 8008b94:	3708      	adds	r7, #8
 8008b96:	46bd      	mov	sp, r7
 8008b98:	bd80      	pop	{r7, pc}
 8008b9a:	bf00      	nop
 8008b9c:	ff8fffbf 	.word	0xff8fffbf

08008ba0 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008ba0:	b590      	push	{r4, r7, lr}
 8008ba2:	b087      	sub	sp, #28
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	60f8      	str	r0, [r7, #12]
 8008ba8:	60b9      	str	r1, [r7, #8]
 8008baa:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008bac:	2300      	movs	r3, #0
 8008bae:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008bb0:	68fb      	ldr	r3, [r7, #12]
 8008bb2:	7f1b      	ldrb	r3, [r3, #28]
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d101      	bne.n	8008bbc <HAL_RTC_SetTime+0x1c>
 8008bb8:	2302      	movs	r3, #2
 8008bba:	e0a8      	b.n	8008d0e <HAL_RTC_SetTime+0x16e>
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d126      	bne.n	8008c1c <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	689b      	ldr	r3, [r3, #8]
 8008bd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d102      	bne.n	8008be2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	2200      	movs	r2, #0
 8008be0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008be2:	68bb      	ldr	r3, [r7, #8]
 8008be4:	781b      	ldrb	r3, [r3, #0]
 8008be6:	4618      	mov	r0, r3
 8008be8:	f000 fb5a 	bl	80092a0 <RTC_ByteToBcd2>
 8008bec:	4603      	mov	r3, r0
 8008bee:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	785b      	ldrb	r3, [r3, #1]
 8008bf4:	4618      	mov	r0, r3
 8008bf6:	f000 fb53 	bl	80092a0 <RTC_ByteToBcd2>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008bfe:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008c00:	68bb      	ldr	r3, [r7, #8]
 8008c02:	789b      	ldrb	r3, [r3, #2]
 8008c04:	4618      	mov	r0, r3
 8008c06:	f000 fb4b 	bl	80092a0 <RTC_ByteToBcd2>
 8008c0a:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008c0c:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008c10:	68bb      	ldr	r3, [r7, #8]
 8008c12:	7b1b      	ldrb	r3, [r3, #12]
 8008c14:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008c16:	4313      	orrs	r3, r2
 8008c18:	617b      	str	r3, [r7, #20]
 8008c1a:	e018      	b.n	8008c4e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	689b      	ldr	r3, [r3, #8]
 8008c22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d102      	bne.n	8008c30 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	2200      	movs	r2, #0
 8008c2e:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c30:	68bb      	ldr	r3, [r7, #8]
 8008c32:	781b      	ldrb	r3, [r3, #0]
 8008c34:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	785b      	ldrb	r3, [r3, #1]
 8008c3a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c3c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008c3e:	68ba      	ldr	r2, [r7, #8]
 8008c40:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008c42:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	7b1b      	ldrb	r3, [r3, #12]
 8008c48:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008c4a:	4313      	orrs	r3, r2
 8008c4c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	22ca      	movs	r2, #202	; 0xca
 8008c54:	625a      	str	r2, [r3, #36]	; 0x24
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	2253      	movs	r2, #83	; 0x53
 8008c5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008c5e:	68f8      	ldr	r0, [r7, #12]
 8008c60:	f000 faf2 	bl	8009248 <RTC_EnterInitMode>
 8008c64:	4603      	mov	r3, r0
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d00b      	beq.n	8008c82 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	22ff      	movs	r2, #255	; 0xff
 8008c70:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	2204      	movs	r2, #4
 8008c76:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008c7e:	2301      	movs	r3, #1
 8008c80:	e045      	b.n	8008d0e <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681a      	ldr	r2, [r3, #0]
 8008c86:	6979      	ldr	r1, [r7, #20]
 8008c88:	4b23      	ldr	r3, [pc, #140]	; (8008d18 <HAL_RTC_SetTime+0x178>)
 8008c8a:	400b      	ands	r3, r1
 8008c8c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008c8e:	68fb      	ldr	r3, [r7, #12]
 8008c90:	681b      	ldr	r3, [r3, #0]
 8008c92:	689a      	ldr	r2, [r3, #8]
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	681b      	ldr	r3, [r3, #0]
 8008c98:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008c9c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008c9e:	68fb      	ldr	r3, [r7, #12]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	6899      	ldr	r1, [r3, #8]
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	691a      	ldr	r2, [r3, #16]
 8008ca8:	68bb      	ldr	r3, [r7, #8]
 8008caa:	695b      	ldr	r3, [r3, #20]
 8008cac:	431a      	orrs	r2, r3
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	430a      	orrs	r2, r1
 8008cb4:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	68da      	ldr	r2, [r3, #12]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008cc4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	689b      	ldr	r3, [r3, #8]
 8008ccc:	f003 0320 	and.w	r3, r3, #32
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d111      	bne.n	8008cf8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008cd4:	68f8      	ldr	r0, [r7, #12]
 8008cd6:	f000 fa8f 	bl	80091f8 <HAL_RTC_WaitForSynchro>
 8008cda:	4603      	mov	r3, r0
 8008cdc:	2b00      	cmp	r3, #0
 8008cde:	d00b      	beq.n	8008cf8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	22ff      	movs	r2, #255	; 0xff
 8008ce6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	2204      	movs	r2, #4
 8008cec:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	2200      	movs	r2, #0
 8008cf2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008cf4:	2301      	movs	r3, #1
 8008cf6:	e00a      	b.n	8008d0e <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	22ff      	movs	r2, #255	; 0xff
 8008cfe:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	2201      	movs	r2, #1
 8008d04:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	2200      	movs	r2, #0
 8008d0a:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008d0c:	2300      	movs	r3, #0
  }
}
 8008d0e:	4618      	mov	r0, r3
 8008d10:	371c      	adds	r7, #28
 8008d12:	46bd      	mov	sp, r7
 8008d14:	bd90      	pop	{r4, r7, pc}
 8008d16:	bf00      	nop
 8008d18:	007f7f7f 	.word	0x007f7f7f

08008d1c <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008d32:	68bb      	ldr	r3, [r7, #8]
 8008d34:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	691b      	ldr	r3, [r3, #16]
 8008d3c:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	681a      	ldr	r2, [r3, #0]
 8008d4a:	4b22      	ldr	r3, [pc, #136]	; (8008dd4 <HAL_RTC_GetTime+0xb8>)
 8008d4c:	4013      	ands	r3, r2
 8008d4e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008d50:	697b      	ldr	r3, [r7, #20]
 8008d52:	0c1b      	lsrs	r3, r3, #16
 8008d54:	b2db      	uxtb	r3, r3
 8008d56:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d5a:	b2da      	uxtb	r2, r3
 8008d5c:	68bb      	ldr	r3, [r7, #8]
 8008d5e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008d60:	697b      	ldr	r3, [r7, #20]
 8008d62:	0a1b      	lsrs	r3, r3, #8
 8008d64:	b2db      	uxtb	r3, r3
 8008d66:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d6a:	b2da      	uxtb	r2, r3
 8008d6c:	68bb      	ldr	r3, [r7, #8]
 8008d6e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008d70:	697b      	ldr	r3, [r7, #20]
 8008d72:	b2db      	uxtb	r3, r3
 8008d74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d78:	b2da      	uxtb	r2, r3
 8008d7a:	68bb      	ldr	r3, [r7, #8]
 8008d7c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8008d7e:	697b      	ldr	r3, [r7, #20]
 8008d80:	0c1b      	lsrs	r3, r3, #16
 8008d82:	b2db      	uxtb	r3, r3
 8008d84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d88:	b2da      	uxtb	r2, r3
 8008d8a:	68bb      	ldr	r3, [r7, #8]
 8008d8c:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d11a      	bne.n	8008dca <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008d94:	68bb      	ldr	r3, [r7, #8]
 8008d96:	781b      	ldrb	r3, [r3, #0]
 8008d98:	4618      	mov	r0, r3
 8008d9a:	f000 fa9f 	bl	80092dc <RTC_Bcd2ToByte>
 8008d9e:	4603      	mov	r3, r0
 8008da0:	461a      	mov	r2, r3
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008da6:	68bb      	ldr	r3, [r7, #8]
 8008da8:	785b      	ldrb	r3, [r3, #1]
 8008daa:	4618      	mov	r0, r3
 8008dac:	f000 fa96 	bl	80092dc <RTC_Bcd2ToByte>
 8008db0:	4603      	mov	r3, r0
 8008db2:	461a      	mov	r2, r3
 8008db4:	68bb      	ldr	r3, [r7, #8]
 8008db6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008db8:	68bb      	ldr	r3, [r7, #8]
 8008dba:	789b      	ldrb	r3, [r3, #2]
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	f000 fa8d 	bl	80092dc <RTC_Bcd2ToByte>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	68bb      	ldr	r3, [r7, #8]
 8008dc8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008dca:	2300      	movs	r3, #0
}
 8008dcc:	4618      	mov	r0, r3
 8008dce:	3718      	adds	r7, #24
 8008dd0:	46bd      	mov	sp, r7
 8008dd2:	bd80      	pop	{r7, pc}
 8008dd4:	007f7f7f 	.word	0x007f7f7f

08008dd8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008dd8:	b590      	push	{r4, r7, lr}
 8008dda:	b087      	sub	sp, #28
 8008ddc:	af00      	add	r7, sp, #0
 8008dde:	60f8      	str	r0, [r7, #12]
 8008de0:	60b9      	str	r1, [r7, #8]
 8008de2:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008de4:	2300      	movs	r3, #0
 8008de6:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	7f1b      	ldrb	r3, [r3, #28]
 8008dec:	2b01      	cmp	r3, #1
 8008dee:	d101      	bne.n	8008df4 <HAL_RTC_SetDate+0x1c>
 8008df0:	2302      	movs	r3, #2
 8008df2:	e092      	b.n	8008f1a <HAL_RTC_SetDate+0x142>
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	2201      	movs	r2, #1
 8008df8:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	2202      	movs	r2, #2
 8008dfe:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	d10e      	bne.n	8008e24 <HAL_RTC_SetDate+0x4c>
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	785b      	ldrb	r3, [r3, #1]
 8008e0a:	f003 0310 	and.w	r3, r3, #16
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d008      	beq.n	8008e24 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008e12:	68bb      	ldr	r3, [r7, #8]
 8008e14:	785b      	ldrb	r3, [r3, #1]
 8008e16:	f023 0310 	bic.w	r3, r3, #16
 8008e1a:	b2db      	uxtb	r3, r3
 8008e1c:	330a      	adds	r3, #10
 8008e1e:	b2da      	uxtb	r2, r3
 8008e20:	68bb      	ldr	r3, [r7, #8]
 8008e22:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d11c      	bne.n	8008e64 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e2a:	68bb      	ldr	r3, [r7, #8]
 8008e2c:	78db      	ldrb	r3, [r3, #3]
 8008e2e:	4618      	mov	r0, r3
 8008e30:	f000 fa36 	bl	80092a0 <RTC_ByteToBcd2>
 8008e34:	4603      	mov	r3, r0
 8008e36:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008e38:	68bb      	ldr	r3, [r7, #8]
 8008e3a:	785b      	ldrb	r3, [r3, #1]
 8008e3c:	4618      	mov	r0, r3
 8008e3e:	f000 fa2f 	bl	80092a0 <RTC_ByteToBcd2>
 8008e42:	4603      	mov	r3, r0
 8008e44:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e46:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	789b      	ldrb	r3, [r3, #2]
 8008e4c:	4618      	mov	r0, r3
 8008e4e:	f000 fa27 	bl	80092a0 <RTC_ByteToBcd2>
 8008e52:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008e54:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	781b      	ldrb	r3, [r3, #0]
 8008e5c:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008e5e:	4313      	orrs	r3, r2
 8008e60:	617b      	str	r3, [r7, #20]
 8008e62:	e00e      	b.n	8008e82 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e64:	68bb      	ldr	r3, [r7, #8]
 8008e66:	78db      	ldrb	r3, [r3, #3]
 8008e68:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008e6a:	68bb      	ldr	r3, [r7, #8]
 8008e6c:	785b      	ldrb	r3, [r3, #1]
 8008e6e:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e70:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008e76:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008e78:	68bb      	ldr	r3, [r7, #8]
 8008e7a:	781b      	ldrb	r3, [r3, #0]
 8008e7c:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008e7e:	4313      	orrs	r3, r2
 8008e80:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	22ca      	movs	r2, #202	; 0xca
 8008e88:	625a      	str	r2, [r3, #36]	; 0x24
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2253      	movs	r2, #83	; 0x53
 8008e90:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008e92:	68f8      	ldr	r0, [r7, #12]
 8008e94:	f000 f9d8 	bl	8009248 <RTC_EnterInitMode>
 8008e98:	4603      	mov	r3, r0
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00b      	beq.n	8008eb6 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	22ff      	movs	r2, #255	; 0xff
 8008ea4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	2204      	movs	r2, #4
 8008eaa:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	2200      	movs	r2, #0
 8008eb0:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008eb2:	2301      	movs	r3, #1
 8008eb4:	e031      	b.n	8008f1a <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	681a      	ldr	r2, [r3, #0]
 8008eba:	6979      	ldr	r1, [r7, #20]
 8008ebc:	4b19      	ldr	r3, [pc, #100]	; (8008f24 <HAL_RTC_SetDate+0x14c>)
 8008ebe:	400b      	ands	r3, r1
 8008ec0:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	68da      	ldr	r2, [r3, #12]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ed0:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	f003 0320 	and.w	r3, r3, #32
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d111      	bne.n	8008f04 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ee0:	68f8      	ldr	r0, [r7, #12]
 8008ee2:	f000 f989 	bl	80091f8 <HAL_RTC_WaitForSynchro>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	2b00      	cmp	r3, #0
 8008eea:	d00b      	beq.n	8008f04 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	22ff      	movs	r2, #255	; 0xff
 8008ef2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2204      	movs	r2, #4
 8008ef8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	2200      	movs	r2, #0
 8008efe:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008f00:	2301      	movs	r3, #1
 8008f02:	e00a      	b.n	8008f1a <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	681b      	ldr	r3, [r3, #0]
 8008f08:	22ff      	movs	r2, #255	; 0xff
 8008f0a:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2201      	movs	r2, #1
 8008f10:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008f18:	2300      	movs	r3, #0
  }
}
 8008f1a:	4618      	mov	r0, r3
 8008f1c:	371c      	adds	r7, #28
 8008f1e:	46bd      	mov	sp, r7
 8008f20:	bd90      	pop	{r4, r7, pc}
 8008f22:	bf00      	nop
 8008f24:	00ffff3f 	.word	0x00ffff3f

08008f28 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008f28:	b580      	push	{r7, lr}
 8008f2a:	b086      	sub	sp, #24
 8008f2c:	af00      	add	r7, sp, #0
 8008f2e:	60f8      	str	r0, [r7, #12]
 8008f30:	60b9      	str	r1, [r7, #8]
 8008f32:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008f34:	2300      	movs	r3, #0
 8008f36:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008f38:	68fb      	ldr	r3, [r7, #12]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685a      	ldr	r2, [r3, #4]
 8008f3e:	4b21      	ldr	r3, [pc, #132]	; (8008fc4 <HAL_RTC_GetDate+0x9c>)
 8008f40:	4013      	ands	r3, r2
 8008f42:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008f44:	697b      	ldr	r3, [r7, #20]
 8008f46:	0c1b      	lsrs	r3, r3, #16
 8008f48:	b2da      	uxtb	r2, r3
 8008f4a:	68bb      	ldr	r3, [r7, #8]
 8008f4c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8008f4e:	697b      	ldr	r3, [r7, #20]
 8008f50:	0a1b      	lsrs	r3, r3, #8
 8008f52:	b2db      	uxtb	r3, r3
 8008f54:	f003 031f 	and.w	r3, r3, #31
 8008f58:	b2da      	uxtb	r2, r3
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008f5e:	697b      	ldr	r3, [r7, #20]
 8008f60:	b2db      	uxtb	r3, r3
 8008f62:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008f66:	b2da      	uxtb	r2, r3
 8008f68:	68bb      	ldr	r3, [r7, #8]
 8008f6a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8008f6c:	697b      	ldr	r3, [r7, #20]
 8008f6e:	0b5b      	lsrs	r3, r3, #13
 8008f70:	b2db      	uxtb	r3, r3
 8008f72:	f003 0307 	and.w	r3, r3, #7
 8008f76:	b2da      	uxtb	r2, r3
 8008f78:	68bb      	ldr	r3, [r7, #8]
 8008f7a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d11a      	bne.n	8008fb8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008f82:	68bb      	ldr	r3, [r7, #8]
 8008f84:	78db      	ldrb	r3, [r3, #3]
 8008f86:	4618      	mov	r0, r3
 8008f88:	f000 f9a8 	bl	80092dc <RTC_Bcd2ToByte>
 8008f8c:	4603      	mov	r3, r0
 8008f8e:	461a      	mov	r2, r3
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	785b      	ldrb	r3, [r3, #1]
 8008f98:	4618      	mov	r0, r3
 8008f9a:	f000 f99f 	bl	80092dc <RTC_Bcd2ToByte>
 8008f9e:	4603      	mov	r3, r0
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	789b      	ldrb	r3, [r3, #2]
 8008faa:	4618      	mov	r0, r3
 8008fac:	f000 f996 	bl	80092dc <RTC_Bcd2ToByte>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	461a      	mov	r2, r3
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3718      	adds	r7, #24
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	bf00      	nop
 8008fc4:	00ffff3f 	.word	0x00ffff3f

08008fc8 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008fc8:	b590      	push	{r4, r7, lr}
 8008fca:	b089      	sub	sp, #36	; 0x24
 8008fcc:	af00      	add	r7, sp, #0
 8008fce:	60f8      	str	r0, [r7, #12]
 8008fd0:	60b9      	str	r1, [r7, #8]
 8008fd2:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008fd8:	2300      	movs	r3, #0
 8008fda:	61fb      	str	r3, [r7, #28]
 8008fdc:	2300      	movs	r3, #0
 8008fde:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008fe0:	68fb      	ldr	r3, [r7, #12]
 8008fe2:	7f1b      	ldrb	r3, [r3, #28]
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d101      	bne.n	8008fec <HAL_RTC_SetAlarm+0x24>
 8008fe8:	2302      	movs	r3, #2
 8008fea:	e101      	b.n	80091f0 <HAL_RTC_SetAlarm+0x228>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	2201      	movs	r2, #1
 8008ff0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2202      	movs	r2, #2
 8008ff6:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d137      	bne.n	800906e <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	689b      	ldr	r3, [r3, #8]
 8009004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009008:	2b00      	cmp	r3, #0
 800900a:	d102      	bne.n	8009012 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	2200      	movs	r2, #0
 8009010:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	781b      	ldrb	r3, [r3, #0]
 8009016:	4618      	mov	r0, r3
 8009018:	f000 f942 	bl	80092a0 <RTC_ByteToBcd2>
 800901c:	4603      	mov	r3, r0
 800901e:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009020:	68bb      	ldr	r3, [r7, #8]
 8009022:	785b      	ldrb	r3, [r3, #1]
 8009024:	4618      	mov	r0, r3
 8009026:	f000 f93b 	bl	80092a0 <RTC_ByteToBcd2>
 800902a:	4603      	mov	r3, r0
 800902c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 800902e:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	789b      	ldrb	r3, [r3, #2]
 8009034:	4618      	mov	r0, r3
 8009036:	f000 f933 	bl	80092a0 <RTC_ByteToBcd2>
 800903a:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 800903c:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009040:	68bb      	ldr	r3, [r7, #8]
 8009042:	7b1b      	ldrb	r3, [r3, #12]
 8009044:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009046:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 800904a:	68bb      	ldr	r3, [r7, #8]
 800904c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009050:	4618      	mov	r0, r3
 8009052:	f000 f925 	bl	80092a0 <RTC_ByteToBcd2>
 8009056:	4603      	mov	r3, r0
 8009058:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 800905a:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 800905e:	68bb      	ldr	r3, [r7, #8]
 8009060:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009062:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009068:	4313      	orrs	r3, r2
 800906a:	61fb      	str	r3, [r7, #28]
 800906c:	e023      	b.n	80090b6 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800906e:	68fb      	ldr	r3, [r7, #12]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	689b      	ldr	r3, [r3, #8]
 8009074:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d102      	bne.n	8009082 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 800907c:	68bb      	ldr	r3, [r7, #8]
 800907e:	2200      	movs	r2, #0
 8009080:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009082:	68bb      	ldr	r3, [r7, #8]
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009088:	68bb      	ldr	r3, [r7, #8]
 800908a:	785b      	ldrb	r3, [r3, #1]
 800908c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 800908e:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009090:	68ba      	ldr	r2, [r7, #8]
 8009092:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009094:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009096:	68bb      	ldr	r3, [r7, #8]
 8009098:	7b1b      	ldrb	r3, [r3, #12]
 800909a:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 800909c:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 800909e:	68bb      	ldr	r3, [r7, #8]
 80090a0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80090a4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 80090a6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 80090a8:	68bb      	ldr	r3, [r7, #8]
 80090aa:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 80090ac:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 80090ae:	68bb      	ldr	r3, [r7, #8]
 80090b0:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 80090b2:	4313      	orrs	r3, r2
 80090b4:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 80090b6:	68bb      	ldr	r3, [r7, #8]
 80090b8:	685a      	ldr	r2, [r3, #4]
 80090ba:	68bb      	ldr	r3, [r7, #8]
 80090bc:	69db      	ldr	r3, [r3, #28]
 80090be:	4313      	orrs	r3, r2
 80090c0:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	22ca      	movs	r2, #202	; 0xca
 80090c8:	625a      	str	r2, [r3, #36]	; 0x24
 80090ca:	68fb      	ldr	r3, [r7, #12]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	2253      	movs	r2, #83	; 0x53
 80090d0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 80090d2:	68bb      	ldr	r3, [r7, #8]
 80090d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80090da:	d13f      	bne.n	800915c <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 80090dc:	68fb      	ldr	r3, [r7, #12]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	689a      	ldr	r2, [r3, #8]
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80090ea:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	689a      	ldr	r2, [r3, #8]
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80090fa:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090fc:	f7fb fdae 	bl	8004c5c <HAL_GetTick>
 8009100:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009102:	e013      	b.n	800912c <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009104:	f7fb fdaa 	bl	8004c5c <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	69bb      	ldr	r3, [r7, #24]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009112:	d90b      	bls.n	800912c <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	22ff      	movs	r2, #255	; 0xff
 800911a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2203      	movs	r2, #3
 8009120:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009122:	68fb      	ldr	r3, [r7, #12]
 8009124:	2200      	movs	r2, #0
 8009126:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e061      	b.n	80091f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	68db      	ldr	r3, [r3, #12]
 8009132:	f003 0301 	and.w	r3, r3, #1
 8009136:	2b00      	cmp	r3, #0
 8009138:	d0e4      	beq.n	8009104 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 800913a:	68fb      	ldr	r3, [r7, #12]
 800913c:	681b      	ldr	r3, [r3, #0]
 800913e:	69fa      	ldr	r2, [r7, #28]
 8009140:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009142:	68fb      	ldr	r3, [r7, #12]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	697a      	ldr	r2, [r7, #20]
 8009148:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	689a      	ldr	r2, [r3, #8]
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009158:	609a      	str	r2, [r3, #8]
 800915a:	e03e      	b.n	80091da <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	689a      	ldr	r2, [r3, #8]
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800916a:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	689a      	ldr	r2, [r3, #8]
 8009172:	68fb      	ldr	r3, [r7, #12]
 8009174:	681b      	ldr	r3, [r3, #0]
 8009176:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800917a:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 800917c:	f7fb fd6e 	bl	8004c5c <HAL_GetTick>
 8009180:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009182:	e013      	b.n	80091ac <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009184:	f7fb fd6a 	bl	8004c5c <HAL_GetTick>
 8009188:	4602      	mov	r2, r0
 800918a:	69bb      	ldr	r3, [r7, #24]
 800918c:	1ad3      	subs	r3, r2, r3
 800918e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009192:	d90b      	bls.n	80091ac <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	22ff      	movs	r2, #255	; 0xff
 800919a:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2203      	movs	r2, #3
 80091a0:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80091a2:	68fb      	ldr	r3, [r7, #12]
 80091a4:	2200      	movs	r2, #0
 80091a6:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 80091a8:	2303      	movs	r3, #3
 80091aa:	e021      	b.n	80091f0 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 80091ac:	68fb      	ldr	r3, [r7, #12]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	68db      	ldr	r3, [r3, #12]
 80091b2:	f003 0302 	and.w	r3, r3, #2
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d0e4      	beq.n	8009184 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 80091ba:	68fb      	ldr	r3, [r7, #12]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	69fa      	ldr	r2, [r7, #28]
 80091c0:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	697a      	ldr	r2, [r7, #20]
 80091c8:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	689a      	ldr	r2, [r3, #8]
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	681b      	ldr	r3, [r3, #0]
 80091d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80091d8:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	22ff      	movs	r2, #255	; 0xff
 80091e0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	2201      	movs	r2, #1
 80091e6:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	2200      	movs	r2, #0
 80091ec:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80091ee:	2300      	movs	r3, #0
}
 80091f0:	4618      	mov	r0, r3
 80091f2:	3724      	adds	r7, #36	; 0x24
 80091f4:	46bd      	mov	sp, r7
 80091f6:	bd90      	pop	{r4, r7, pc}

080091f8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80091f8:	b580      	push	{r7, lr}
 80091fa:	b084      	sub	sp, #16
 80091fc:	af00      	add	r7, sp, #0
 80091fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009200:	2300      	movs	r3, #0
 8009202:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	68da      	ldr	r2, [r3, #12]
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009212:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009214:	f7fb fd22 	bl	8004c5c <HAL_GetTick>
 8009218:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 800921a:	e009      	b.n	8009230 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800921c:	f7fb fd1e 	bl	8004c5c <HAL_GetTick>
 8009220:	4602      	mov	r2, r0
 8009222:	68fb      	ldr	r3, [r7, #12]
 8009224:	1ad3      	subs	r3, r2, r3
 8009226:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800922a:	d901      	bls.n	8009230 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e007      	b.n	8009240 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	68db      	ldr	r3, [r3, #12]
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	d0ee      	beq.n	800921c <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800923e:	2300      	movs	r3, #0
}
 8009240:	4618      	mov	r0, r3
 8009242:	3710      	adds	r7, #16
 8009244:	46bd      	mov	sp, r7
 8009246:	bd80      	pop	{r7, pc}

08009248 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009248:	b580      	push	{r7, lr}
 800924a:	b084      	sub	sp, #16
 800924c:	af00      	add	r7, sp, #0
 800924e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009250:	2300      	movs	r3, #0
 8009252:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	68db      	ldr	r3, [r3, #12]
 800925a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800925e:	2b00      	cmp	r3, #0
 8009260:	d119      	bne.n	8009296 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	f04f 32ff 	mov.w	r2, #4294967295
 800926a:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800926c:	f7fb fcf6 	bl	8004c5c <HAL_GetTick>
 8009270:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009272:	e009      	b.n	8009288 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009274:	f7fb fcf2 	bl	8004c5c <HAL_GetTick>
 8009278:	4602      	mov	r2, r0
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	1ad3      	subs	r3, r2, r3
 800927e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009282:	d901      	bls.n	8009288 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009284:	2303      	movs	r3, #3
 8009286:	e007      	b.n	8009298 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	68db      	ldr	r3, [r3, #12]
 800928e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009292:	2b00      	cmp	r3, #0
 8009294:	d0ee      	beq.n	8009274 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009296:	2300      	movs	r3, #0
}
 8009298:	4618      	mov	r0, r3
 800929a:	3710      	adds	r7, #16
 800929c:	46bd      	mov	sp, r7
 800929e:	bd80      	pop	{r7, pc}

080092a0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80092a0:	b480      	push	{r7}
 80092a2:	b085      	sub	sp, #20
 80092a4:	af00      	add	r7, sp, #0
 80092a6:	4603      	mov	r3, r0
 80092a8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 80092aa:	2300      	movs	r3, #0
 80092ac:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 80092ae:	e005      	b.n	80092bc <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80092b0:	68fb      	ldr	r3, [r7, #12]
 80092b2:	3301      	adds	r3, #1
 80092b4:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 80092b6:	79fb      	ldrb	r3, [r7, #7]
 80092b8:	3b0a      	subs	r3, #10
 80092ba:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 80092bc:	79fb      	ldrb	r3, [r7, #7]
 80092be:	2b09      	cmp	r3, #9
 80092c0:	d8f6      	bhi.n	80092b0 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	b2db      	uxtb	r3, r3
 80092c6:	011b      	lsls	r3, r3, #4
 80092c8:	b2da      	uxtb	r2, r3
 80092ca:	79fb      	ldrb	r3, [r7, #7]
 80092cc:	4313      	orrs	r3, r2
 80092ce:	b2db      	uxtb	r3, r3
}
 80092d0:	4618      	mov	r0, r3
 80092d2:	3714      	adds	r7, #20
 80092d4:	46bd      	mov	sp, r7
 80092d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092da:	4770      	bx	lr

080092dc <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80092dc:	b480      	push	{r7}
 80092de:	b085      	sub	sp, #20
 80092e0:	af00      	add	r7, sp, #0
 80092e2:	4603      	mov	r3, r0
 80092e4:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80092e6:	2300      	movs	r3, #0
 80092e8:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80092ea:	79fb      	ldrb	r3, [r7, #7]
 80092ec:	091b      	lsrs	r3, r3, #4
 80092ee:	b2db      	uxtb	r3, r3
 80092f0:	461a      	mov	r2, r3
 80092f2:	4613      	mov	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	4413      	add	r3, r2
 80092f8:	005b      	lsls	r3, r3, #1
 80092fa:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80092fc:	79fb      	ldrb	r3, [r7, #7]
 80092fe:	f003 030f 	and.w	r3, r3, #15
 8009302:	b2da      	uxtb	r2, r3
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	b2db      	uxtb	r3, r3
 8009308:	4413      	add	r3, r2
 800930a:	b2db      	uxtb	r3, r3
}
 800930c:	4618      	mov	r0, r3
 800930e:	3714      	adds	r7, #20
 8009310:	46bd      	mov	sp, r7
 8009312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009316:	4770      	bx	lr

08009318 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8009318:	b480      	push	{r7}
 800931a:	b087      	sub	sp, #28
 800931c:	af00      	add	r7, sp, #0
 800931e:	60f8      	str	r0, [r7, #12]
 8009320:	60b9      	str	r1, [r7, #8]
 8009322:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009324:	2300      	movs	r3, #0
 8009326:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	7f1b      	ldrb	r3, [r3, #28]
 800932c:	2b01      	cmp	r3, #1
 800932e:	d101      	bne.n	8009334 <HAL_RTCEx_SetTimeStamp+0x1c>
 8009330:	2302      	movs	r3, #2
 8009332:	e03e      	b.n	80093b2 <HAL_RTCEx_SetTimeStamp+0x9a>
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	2201      	movs	r2, #1
 8009338:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	2202      	movs	r2, #2
 800933e:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	689a      	ldr	r2, [r3, #8]
 8009346:	4b1e      	ldr	r3, [pc, #120]	; (80093c0 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009348:	4013      	ands	r3, r2
 800934a:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800934c:	697a      	ldr	r2, [r7, #20]
 800934e:	68bb      	ldr	r3, [r7, #8]
 8009350:	4313      	orrs	r3, r2
 8009352:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	22ca      	movs	r2, #202	; 0xca
 800935a:	625a      	str	r2, [r3, #36]	; 0x24
 800935c:	68fb      	ldr	r3, [r7, #12]
 800935e:	681b      	ldr	r3, [r3, #0]
 8009360:	2253      	movs	r2, #83	; 0x53
 8009362:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f022 0206 	bic.w	r2, r2, #6
 8009372:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800937a:	68fb      	ldr	r3, [r7, #12]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	687a      	ldr	r2, [r7, #4]
 8009380:	430a      	orrs	r2, r1
 8009382:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	681b      	ldr	r3, [r3, #0]
 8009388:	697a      	ldr	r2, [r7, #20]
 800938a:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	689a      	ldr	r2, [r3, #8]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800939a:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	22ff      	movs	r2, #255	; 0xff
 80093a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	2201      	movs	r2, #1
 80093a8:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80093aa:	68fb      	ldr	r3, [r7, #12]
 80093ac:	2200      	movs	r2, #0
 80093ae:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80093b0:	2300      	movs	r3, #0
}
 80093b2:	4618      	mov	r0, r3
 80093b4:	371c      	adds	r7, #28
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
 80093be:	bf00      	nop
 80093c0:	fffff7f7 	.word	0xfffff7f7

080093c4 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b082      	sub	sp, #8
 80093c8:	af00      	add	r7, sp, #0
 80093ca:	6078      	str	r0, [r7, #4]
 80093cc:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2b00      	cmp	r3, #0
 80093d2:	d101      	bne.n	80093d8 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80093d4:	2301      	movs	r3, #1
 80093d6:	e025      	b.n	8009424 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80093de:	b2db      	uxtb	r3, r3
 80093e0:	2b00      	cmp	r3, #0
 80093e2:	d106      	bne.n	80093f2 <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80093ec:	6878      	ldr	r0, [r7, #4]
 80093ee:	f7fb fafb 	bl	80049e8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2202      	movs	r2, #2
 80093f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	681a      	ldr	r2, [r3, #0]
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	3304      	adds	r3, #4
 8009402:	4619      	mov	r1, r3
 8009404:	4610      	mov	r0, r2
 8009406:	f002 fa11 	bl	800b82c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6818      	ldr	r0, [r3, #0]
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	685b      	ldr	r3, [r3, #4]
 8009412:	461a      	mov	r2, r3
 8009414:	6839      	ldr	r1, [r7, #0]
 8009416:	f002 fa7b 	bl	800b910 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	2201      	movs	r2, #1
 800941e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8009422:	2300      	movs	r3, #0
}
 8009424:	4618      	mov	r0, r3
 8009426:	3708      	adds	r7, #8
 8009428:	46bd      	mov	sp, r7
 800942a:	bd80      	pop	{r7, pc}

0800942c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af00      	add	r7, sp, #0
 8009432:	60f8      	str	r0, [r7, #12]
 8009434:	60b9      	str	r1, [r7, #8]
 8009436:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009438:	68fb      	ldr	r3, [r7, #12]
 800943a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800943e:	b2db      	uxtb	r3, r3
 8009440:	2b02      	cmp	r3, #2
 8009442:	d101      	bne.n	8009448 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009444:	2302      	movs	r3, #2
 8009446:	e018      	b.n	800947a <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	2202      	movs	r2, #2
 800944c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8009450:	68fb      	ldr	r3, [r7, #12]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	687a      	ldr	r2, [r7, #4]
 8009456:	68b9      	ldr	r1, [r7, #8]
 8009458:	4618      	mov	r0, r3
 800945a:	f002 fad9 	bl	800ba10 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	2b02      	cmp	r3, #2
 8009464:	d104      	bne.n	8009470 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2205      	movs	r2, #5
 800946a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800946e:	e003      	b.n	8009478 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2201      	movs	r2, #1
 8009474:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009478:	2300      	movs	r3, #0
}
 800947a:	4618      	mov	r0, r3
 800947c:	3710      	adds	r7, #16
 800947e:	46bd      	mov	sp, r7
 8009480:	bd80      	pop	{r7, pc}

08009482 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8009482:	b580      	push	{r7, lr}
 8009484:	b082      	sub	sp, #8
 8009486:	af00      	add	r7, sp, #0
 8009488:	6078      	str	r0, [r7, #4]
 800948a:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8009492:	b2db      	uxtb	r3, r3
 8009494:	2b02      	cmp	r3, #2
 8009496:	d101      	bne.n	800949c <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009498:	2302      	movs	r3, #2
 800949a:	e00e      	b.n	80094ba <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	2202      	movs	r2, #2
 80094a0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80094a4:	687b      	ldr	r3, [r7, #4]
 80094a6:	681b      	ldr	r3, [r3, #0]
 80094a8:	6839      	ldr	r1, [r7, #0]
 80094aa:	4618      	mov	r0, r3
 80094ac:	f002 fad1 	bl	800ba52 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2201      	movs	r2, #1
 80094b4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 80094b8:	2300      	movs	r3, #0
}
 80094ba:	4618      	mov	r0, r3
 80094bc:	3708      	adds	r7, #8
 80094be:	46bd      	mov	sp, r7
 80094c0:	bd80      	pop	{r7, pc}

080094c2 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80094c2:	b580      	push	{r7, lr}
 80094c4:	b084      	sub	sp, #16
 80094c6:	af00      	add	r7, sp, #0
 80094c8:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	2b00      	cmp	r3, #0
 80094ce:	d101      	bne.n	80094d4 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80094d0:	2301      	movs	r3, #1
 80094d2:	e084      	b.n	80095de <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	2200      	movs	r2, #0
 80094d8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80094e0:	b2db      	uxtb	r3, r3
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d106      	bne.n	80094f4 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2200      	movs	r2, #0
 80094ea:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80094ee:	6878      	ldr	r0, [r7, #4]
 80094f0:	f7fa fffc 	bl	80044ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2202      	movs	r2, #2
 80094f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	681a      	ldr	r2, [r3, #0]
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800950a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009514:	d902      	bls.n	800951c <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009516:	2300      	movs	r3, #0
 8009518:	60fb      	str	r3, [r7, #12]
 800951a:	e002      	b.n	8009522 <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800951c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009520:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	68db      	ldr	r3, [r3, #12]
 8009526:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800952a:	d007      	beq.n	800953c <HAL_SPI_Init+0x7a>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	68db      	ldr	r3, [r3, #12]
 8009530:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009534:	d002      	beq.n	800953c <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10b      	bne.n	800955c <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	68db      	ldr	r3, [r3, #12]
 8009548:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800954c:	d903      	bls.n	8009556 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	2202      	movs	r2, #2
 8009552:	631a      	str	r2, [r3, #48]	; 0x30
 8009554:	e002      	b.n	800955c <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	2201      	movs	r2, #1
 800955a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	685a      	ldr	r2, [r3, #4]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	689b      	ldr	r3, [r3, #8]
 8009564:	431a      	orrs	r2, r3
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	691b      	ldr	r3, [r3, #16]
 800956a:	431a      	orrs	r2, r3
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	695b      	ldr	r3, [r3, #20]
 8009570:	431a      	orrs	r2, r3
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	699b      	ldr	r3, [r3, #24]
 8009576:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800957a:	431a      	orrs	r2, r3
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	69db      	ldr	r3, [r3, #28]
 8009580:	431a      	orrs	r2, r3
 8009582:	687b      	ldr	r3, [r7, #4]
 8009584:	6a1b      	ldr	r3, [r3, #32]
 8009586:	ea42 0103 	orr.w	r1, r2, r3
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	681b      	ldr	r3, [r3, #0]
 8009592:	430a      	orrs	r2, r1
 8009594:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	699b      	ldr	r3, [r3, #24]
 800959a:	0c1b      	lsrs	r3, r3, #16
 800959c:	f003 0204 	and.w	r2, r3, #4
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095a4:	431a      	orrs	r2, r3
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	ea42 0103 	orr.w	r1, r2, r3
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	68fa      	ldr	r2, [r7, #12]
 80095ba:	430a      	orrs	r2, r1
 80095bc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	69da      	ldr	r2, [r3, #28]
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80095cc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	2200      	movs	r2, #0
 80095d2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	2201      	movs	r2, #1
 80095d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80095dc:	2300      	movs	r3, #0
}
 80095de:	4618      	mov	r0, r3
 80095e0:	3710      	adds	r7, #16
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}

080095e6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80095e6:	b580      	push	{r7, lr}
 80095e8:	b082      	sub	sp, #8
 80095ea:	af00      	add	r7, sp, #0
 80095ec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	2b00      	cmp	r3, #0
 80095f2:	d101      	bne.n	80095f8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80095f4:	2301      	movs	r3, #1
 80095f6:	e01d      	b.n	8009634 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80095fe:	b2db      	uxtb	r3, r3
 8009600:	2b00      	cmp	r3, #0
 8009602:	d106      	bne.n	8009612 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	2200      	movs	r2, #0
 8009608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800960c:	6878      	ldr	r0, [r7, #4]
 800960e:	f7fa ffdf 	bl	80045d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	2202      	movs	r2, #2
 8009616:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	681a      	ldr	r2, [r3, #0]
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	3304      	adds	r3, #4
 8009622:	4619      	mov	r1, r3
 8009624:	4610      	mov	r0, r2
 8009626:	f000 fbc3 	bl	8009db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2201      	movs	r2, #1
 800962e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009632:	2300      	movs	r3, #0
}
 8009634:	4618      	mov	r0, r3
 8009636:	3708      	adds	r7, #8
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800963c:	b480      	push	{r7}
 800963e:	b085      	sub	sp, #20
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	681b      	ldr	r3, [r3, #0]
 8009648:	68da      	ldr	r2, [r3, #12]
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	f042 0201 	orr.w	r2, r2, #1
 8009652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	681b      	ldr	r3, [r3, #0]
 8009658:	689a      	ldr	r2, [r3, #8]
 800965a:	4b0c      	ldr	r3, [pc, #48]	; (800968c <HAL_TIM_Base_Start_IT+0x50>)
 800965c:	4013      	ands	r3, r2
 800965e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009660:	68fb      	ldr	r3, [r7, #12]
 8009662:	2b06      	cmp	r3, #6
 8009664:	d00b      	beq.n	800967e <HAL_TIM_Base_Start_IT+0x42>
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800966c:	d007      	beq.n	800967e <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f042 0201 	orr.w	r2, r2, #1
 800967c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800967e:	2300      	movs	r3, #0
}
 8009680:	4618      	mov	r0, r3
 8009682:	3714      	adds	r7, #20
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr
 800968c:	00010007 	.word	0x00010007

08009690 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009690:	b580      	push	{r7, lr}
 8009692:	b082      	sub	sp, #8
 8009694:	af00      	add	r7, sp, #0
 8009696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	2b00      	cmp	r3, #0
 800969c:	d101      	bne.n	80096a2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800969e:	2301      	movs	r3, #1
 80096a0:	e01d      	b.n	80096de <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80096a8:	b2db      	uxtb	r3, r3
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d106      	bne.n	80096bc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	2200      	movs	r2, #0
 80096b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80096b6:	6878      	ldr	r0, [r7, #4]
 80096b8:	f000 f815 	bl	80096e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	2202      	movs	r2, #2
 80096c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	3304      	adds	r3, #4
 80096cc:	4619      	mov	r1, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	f000 fb6e 	bl	8009db0 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	2201      	movs	r2, #1
 80096d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80096dc:	2300      	movs	r3, #0
}
 80096de:	4618      	mov	r0, r3
 80096e0:	3708      	adds	r7, #8
 80096e2:	46bd      	mov	sp, r7
 80096e4:	bd80      	pop	{r7, pc}

080096e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80096e6:	b480      	push	{r7}
 80096e8:	b083      	sub	sp, #12
 80096ea:	af00      	add	r7, sp, #0
 80096ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80096ee:	bf00      	nop
 80096f0:	370c      	adds	r7, #12
 80096f2:	46bd      	mov	sp, r7
 80096f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f8:	4770      	bx	lr

080096fa <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b082      	sub	sp, #8
 80096fe:	af00      	add	r7, sp, #0
 8009700:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	691b      	ldr	r3, [r3, #16]
 8009708:	f003 0302 	and.w	r3, r3, #2
 800970c:	2b02      	cmp	r3, #2
 800970e:	d122      	bne.n	8009756 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	68db      	ldr	r3, [r3, #12]
 8009716:	f003 0302 	and.w	r3, r3, #2
 800971a:	2b02      	cmp	r3, #2
 800971c:	d11b      	bne.n	8009756 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f06f 0202 	mvn.w	r2, #2
 8009726:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	2201      	movs	r2, #1
 800972c:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	699b      	ldr	r3, [r3, #24]
 8009734:	f003 0303 	and.w	r3, r3, #3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800973c:	6878      	ldr	r0, [r7, #4]
 800973e:	f000 fb19 	bl	8009d74 <HAL_TIM_IC_CaptureCallback>
 8009742:	e005      	b.n	8009750 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009744:	6878      	ldr	r0, [r7, #4]
 8009746:	f000 fb0b 	bl	8009d60 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800974a:	6878      	ldr	r0, [r7, #4]
 800974c:	f000 fb1c 	bl	8009d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	2200      	movs	r2, #0
 8009754:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	691b      	ldr	r3, [r3, #16]
 800975c:	f003 0304 	and.w	r3, r3, #4
 8009760:	2b04      	cmp	r3, #4
 8009762:	d122      	bne.n	80097aa <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	f003 0304 	and.w	r3, r3, #4
 800976e:	2b04      	cmp	r3, #4
 8009770:	d11b      	bne.n	80097aa <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	f06f 0204 	mvn.w	r2, #4
 800977a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	2202      	movs	r2, #2
 8009780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	681b      	ldr	r3, [r3, #0]
 8009786:	699b      	ldr	r3, [r3, #24]
 8009788:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009790:	6878      	ldr	r0, [r7, #4]
 8009792:	f000 faef 	bl	8009d74 <HAL_TIM_IC_CaptureCallback>
 8009796:	e005      	b.n	80097a4 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009798:	6878      	ldr	r0, [r7, #4]
 800979a:	f000 fae1 	bl	8009d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f000 faf2 	bl	8009d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2200      	movs	r2, #0
 80097a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	691b      	ldr	r3, [r3, #16]
 80097b0:	f003 0308 	and.w	r3, r3, #8
 80097b4:	2b08      	cmp	r3, #8
 80097b6:	d122      	bne.n	80097fe <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	68db      	ldr	r3, [r3, #12]
 80097be:	f003 0308 	and.w	r3, r3, #8
 80097c2:	2b08      	cmp	r3, #8
 80097c4:	d11b      	bne.n	80097fe <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f06f 0208 	mvn.w	r2, #8
 80097ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	2204      	movs	r2, #4
 80097d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	69db      	ldr	r3, [r3, #28]
 80097dc:	f003 0303 	and.w	r3, r3, #3
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d003      	beq.n	80097ec <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80097e4:	6878      	ldr	r0, [r7, #4]
 80097e6:	f000 fac5 	bl	8009d74 <HAL_TIM_IC_CaptureCallback>
 80097ea:	e005      	b.n	80097f8 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80097ec:	6878      	ldr	r0, [r7, #4]
 80097ee:	f000 fab7 	bl	8009d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80097f2:	6878      	ldr	r0, [r7, #4]
 80097f4:	f000 fac8 	bl	8009d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	2200      	movs	r2, #0
 80097fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	691b      	ldr	r3, [r3, #16]
 8009804:	f003 0310 	and.w	r3, r3, #16
 8009808:	2b10      	cmp	r3, #16
 800980a:	d122      	bne.n	8009852 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	68db      	ldr	r3, [r3, #12]
 8009812:	f003 0310 	and.w	r3, r3, #16
 8009816:	2b10      	cmp	r3, #16
 8009818:	d11b      	bne.n	8009852 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	f06f 0210 	mvn.w	r2, #16
 8009822:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2208      	movs	r2, #8
 8009828:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	69db      	ldr	r3, [r3, #28]
 8009830:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009834:	2b00      	cmp	r3, #0
 8009836:	d003      	beq.n	8009840 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009838:	6878      	ldr	r0, [r7, #4]
 800983a:	f000 fa9b 	bl	8009d74 <HAL_TIM_IC_CaptureCallback>
 800983e:	e005      	b.n	800984c <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009840:	6878      	ldr	r0, [r7, #4]
 8009842:	f000 fa8d 	bl	8009d60 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009846:	6878      	ldr	r0, [r7, #4]
 8009848:	f000 fa9e 	bl	8009d88 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2200      	movs	r2, #0
 8009850:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	691b      	ldr	r3, [r3, #16]
 8009858:	f003 0301 	and.w	r3, r3, #1
 800985c:	2b01      	cmp	r3, #1
 800985e:	d10e      	bne.n	800987e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	681b      	ldr	r3, [r3, #0]
 8009864:	68db      	ldr	r3, [r3, #12]
 8009866:	f003 0301 	and.w	r3, r3, #1
 800986a:	2b01      	cmp	r3, #1
 800986c:	d107      	bne.n	800987e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f06f 0201 	mvn.w	r2, #1
 8009876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f7f8 fe09 	bl	8002490 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691b      	ldr	r3, [r3, #16]
 8009884:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009888:	2b80      	cmp	r3, #128	; 0x80
 800988a:	d10e      	bne.n	80098aa <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	68db      	ldr	r3, [r3, #12]
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b80      	cmp	r3, #128	; 0x80
 8009898:	d107      	bne.n	80098aa <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80098a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80098a4:	6878      	ldr	r0, [r7, #4]
 80098a6:	f000 ffb9 	bl	800a81c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	691b      	ldr	r3, [r3, #16]
 80098b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80098b8:	d10e      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	68db      	ldr	r3, [r3, #12]
 80098c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80098c4:	2b80      	cmp	r3, #128	; 0x80
 80098c6:	d107      	bne.n	80098d8 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80098d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80098d2:	6878      	ldr	r0, [r7, #4]
 80098d4:	f000 ffac 	bl	800a830 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80098d8:	687b      	ldr	r3, [r7, #4]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	691b      	ldr	r3, [r3, #16]
 80098de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098e2:	2b40      	cmp	r3, #64	; 0x40
 80098e4:	d10e      	bne.n	8009904 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	68db      	ldr	r3, [r3, #12]
 80098ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098f0:	2b40      	cmp	r3, #64	; 0x40
 80098f2:	d107      	bne.n	8009904 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80098fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80098fe:	6878      	ldr	r0, [r7, #4]
 8009900:	f000 fa4c 	bl	8009d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	681b      	ldr	r3, [r3, #0]
 8009908:	691b      	ldr	r3, [r3, #16]
 800990a:	f003 0320 	and.w	r3, r3, #32
 800990e:	2b20      	cmp	r3, #32
 8009910:	d10e      	bne.n	8009930 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	68db      	ldr	r3, [r3, #12]
 8009918:	f003 0320 	and.w	r3, r3, #32
 800991c:	2b20      	cmp	r3, #32
 800991e:	d107      	bne.n	8009930 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f06f 0220 	mvn.w	r2, #32
 8009928:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800992a:	6878      	ldr	r0, [r7, #4]
 800992c:	f000 ff6c 	bl	800a808 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009930:	bf00      	nop
 8009932:	3708      	adds	r7, #8
 8009934:	46bd      	mov	sp, r7
 8009936:	bd80      	pop	{r7, pc}

08009938 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009938:	b580      	push	{r7, lr}
 800993a:	b084      	sub	sp, #16
 800993c:	af00      	add	r7, sp, #0
 800993e:	60f8      	str	r0, [r7, #12]
 8009940:	60b9      	str	r1, [r7, #8]
 8009942:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009944:	68fb      	ldr	r3, [r7, #12]
 8009946:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800994a:	2b01      	cmp	r3, #1
 800994c:	d101      	bne.n	8009952 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800994e:	2302      	movs	r3, #2
 8009950:	e105      	b.n	8009b5e <HAL_TIM_PWM_ConfigChannel+0x226>
 8009952:	68fb      	ldr	r3, [r7, #12]
 8009954:	2201      	movs	r2, #1
 8009956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	2202      	movs	r2, #2
 800995e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	2b14      	cmp	r3, #20
 8009966:	f200 80f0 	bhi.w	8009b4a <HAL_TIM_PWM_ConfigChannel+0x212>
 800996a:	a201      	add	r2, pc, #4	; (adr r2, 8009970 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800996c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009970:	080099c5 	.word	0x080099c5
 8009974:	08009b4b 	.word	0x08009b4b
 8009978:	08009b4b 	.word	0x08009b4b
 800997c:	08009b4b 	.word	0x08009b4b
 8009980:	08009a05 	.word	0x08009a05
 8009984:	08009b4b 	.word	0x08009b4b
 8009988:	08009b4b 	.word	0x08009b4b
 800998c:	08009b4b 	.word	0x08009b4b
 8009990:	08009a47 	.word	0x08009a47
 8009994:	08009b4b 	.word	0x08009b4b
 8009998:	08009b4b 	.word	0x08009b4b
 800999c:	08009b4b 	.word	0x08009b4b
 80099a0:	08009a87 	.word	0x08009a87
 80099a4:	08009b4b 	.word	0x08009b4b
 80099a8:	08009b4b 	.word	0x08009b4b
 80099ac:	08009b4b 	.word	0x08009b4b
 80099b0:	08009ac9 	.word	0x08009ac9
 80099b4:	08009b4b 	.word	0x08009b4b
 80099b8:	08009b4b 	.word	0x08009b4b
 80099bc:	08009b4b 	.word	0x08009b4b
 80099c0:	08009b09 	.word	0x08009b09
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fa90 	bl	8009ef0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	699a      	ldr	r2, [r3, #24]
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f042 0208 	orr.w	r2, r2, #8
 80099de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	699a      	ldr	r2, [r3, #24]
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f022 0204 	bic.w	r2, r2, #4
 80099ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6999      	ldr	r1, [r3, #24]
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691a      	ldr	r2, [r3, #16]
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	430a      	orrs	r2, r1
 8009a00:	619a      	str	r2, [r3, #24]
      break;
 8009a02:	e0a3      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	68b9      	ldr	r1, [r7, #8]
 8009a0a:	4618      	mov	r0, r3
 8009a0c:	f000 fae2 	bl	8009fd4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	699a      	ldr	r2, [r3, #24]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009a1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	699a      	ldr	r2, [r3, #24]
 8009a26:	68fb      	ldr	r3, [r7, #12]
 8009a28:	681b      	ldr	r3, [r3, #0]
 8009a2a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	681b      	ldr	r3, [r3, #0]
 8009a34:	6999      	ldr	r1, [r3, #24]
 8009a36:	68bb      	ldr	r3, [r7, #8]
 8009a38:	691b      	ldr	r3, [r3, #16]
 8009a3a:	021a      	lsls	r2, r3, #8
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	430a      	orrs	r2, r1
 8009a42:	619a      	str	r2, [r3, #24]
      break;
 8009a44:	e082      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	681b      	ldr	r3, [r3, #0]
 8009a4a:	68b9      	ldr	r1, [r7, #8]
 8009a4c:	4618      	mov	r0, r3
 8009a4e:	f000 fb39 	bl	800a0c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	69da      	ldr	r2, [r3, #28]
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f042 0208 	orr.w	r2, r2, #8
 8009a60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	681b      	ldr	r3, [r3, #0]
 8009a66:	69da      	ldr	r2, [r3, #28]
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	f022 0204 	bic.w	r2, r2, #4
 8009a70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	69d9      	ldr	r1, [r3, #28]
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	691a      	ldr	r2, [r3, #16]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	430a      	orrs	r2, r1
 8009a82:	61da      	str	r2, [r3, #28]
      break;
 8009a84:	e062      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	68b9      	ldr	r1, [r7, #8]
 8009a8c:	4618      	mov	r0, r3
 8009a8e:	f000 fb8f 	bl	800a1b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	69da      	ldr	r2, [r3, #28]
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009aa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8009aa2:	68fb      	ldr	r3, [r7, #12]
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	69da      	ldr	r2, [r3, #28]
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	681b      	ldr	r3, [r3, #0]
 8009aac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009ab0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8009ab2:	68fb      	ldr	r3, [r7, #12]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	69d9      	ldr	r1, [r3, #28]
 8009ab8:	68bb      	ldr	r3, [r7, #8]
 8009aba:	691b      	ldr	r3, [r3, #16]
 8009abc:	021a      	lsls	r2, r3, #8
 8009abe:	68fb      	ldr	r3, [r7, #12]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	430a      	orrs	r2, r1
 8009ac4:	61da      	str	r2, [r3, #28]
      break;
 8009ac6:	e041      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	68b9      	ldr	r1, [r7, #8]
 8009ace:	4618      	mov	r0, r3
 8009ad0:	f000 fbc6 	bl	800a260 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009ad4:	68fb      	ldr	r3, [r7, #12]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009ada:	68fb      	ldr	r3, [r7, #12]
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	f042 0208 	orr.w	r2, r2, #8
 8009ae2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8009ae4:	68fb      	ldr	r3, [r7, #12]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	f022 0204 	bic.w	r2, r2, #4
 8009af2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009afa:	68bb      	ldr	r3, [r7, #8]
 8009afc:	691a      	ldr	r2, [r3, #16]
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	430a      	orrs	r2, r1
 8009b04:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b06:	e021      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009b08:	68fb      	ldr	r3, [r7, #12]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	68b9      	ldr	r1, [r7, #8]
 8009b0e:	4618      	mov	r0, r3
 8009b10:	f000 fbf8 	bl	800a304 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009b22:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b32:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009b3a:	68bb      	ldr	r3, [r7, #8]
 8009b3c:	691b      	ldr	r3, [r3, #16]
 8009b3e:	021a      	lsls	r2, r3, #8
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	681b      	ldr	r3, [r3, #0]
 8009b44:	430a      	orrs	r2, r1
 8009b46:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009b48:	e000      	b.n	8009b4c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009b4a:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	2200      	movs	r2, #0
 8009b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b5c:	2300      	movs	r3, #0
}
 8009b5e:	4618      	mov	r0, r3
 8009b60:	3710      	adds	r7, #16
 8009b62:	46bd      	mov	sp, r7
 8009b64:	bd80      	pop	{r7, pc}
 8009b66:	bf00      	nop

08009b68 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b084      	sub	sp, #16
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
 8009b70:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_TIM_ConfigClockSource+0x18>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e0a6      	b.n	8009cce <HAL_TIM_ConfigClockSource+0x166>
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2201      	movs	r2, #1
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	2202      	movs	r2, #2
 8009b8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	689b      	ldr	r3, [r3, #8]
 8009b96:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	4b4f      	ldr	r3, [pc, #316]	; (8009cd8 <HAL_TIM_ConfigClockSource+0x170>)
 8009b9c:	4013      	ands	r3, r2
 8009b9e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009ba6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	68fa      	ldr	r2, [r7, #12]
 8009bae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009bb0:	683b      	ldr	r3, [r7, #0]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	2b40      	cmp	r3, #64	; 0x40
 8009bb6:	d067      	beq.n	8009c88 <HAL_TIM_ConfigClockSource+0x120>
 8009bb8:	2b40      	cmp	r3, #64	; 0x40
 8009bba:	d80b      	bhi.n	8009bd4 <HAL_TIM_ConfigClockSource+0x6c>
 8009bbc:	2b10      	cmp	r3, #16
 8009bbe:	d073      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x140>
 8009bc0:	2b10      	cmp	r3, #16
 8009bc2:	d802      	bhi.n	8009bca <HAL_TIM_ConfigClockSource+0x62>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d06f      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009bc8:	e078      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bca:	2b20      	cmp	r3, #32
 8009bcc:	d06c      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x140>
 8009bce:	2b30      	cmp	r3, #48	; 0x30
 8009bd0:	d06a      	beq.n	8009ca8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009bd2:	e073      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009bd4:	2b70      	cmp	r3, #112	; 0x70
 8009bd6:	d00d      	beq.n	8009bf4 <HAL_TIM_ConfigClockSource+0x8c>
 8009bd8:	2b70      	cmp	r3, #112	; 0x70
 8009bda:	d804      	bhi.n	8009be6 <HAL_TIM_ConfigClockSource+0x7e>
 8009bdc:	2b50      	cmp	r3, #80	; 0x50
 8009bde:	d033      	beq.n	8009c48 <HAL_TIM_ConfigClockSource+0xe0>
 8009be0:	2b60      	cmp	r3, #96	; 0x60
 8009be2:	d041      	beq.n	8009c68 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009be4:	e06a      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009bea:	d066      	beq.n	8009cba <HAL_TIM_ConfigClockSource+0x152>
 8009bec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009bf0:	d017      	beq.n	8009c22 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009bf2:	e063      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6818      	ldr	r0, [r3, #0]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	6899      	ldr	r1, [r3, #8]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	685a      	ldr	r2, [r3, #4]
 8009c00:	683b      	ldr	r3, [r7, #0]
 8009c02:	68db      	ldr	r3, [r3, #12]
 8009c04:	f000 fcd4 	bl	800a5b0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	681b      	ldr	r3, [r3, #0]
 8009c0c:	689b      	ldr	r3, [r3, #8]
 8009c0e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009c16:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68fa      	ldr	r2, [r7, #12]
 8009c1e:	609a      	str	r2, [r3, #8]
      break;
 8009c20:	e04c      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	6818      	ldr	r0, [r3, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	6899      	ldr	r1, [r3, #8]
 8009c2a:	683b      	ldr	r3, [r7, #0]
 8009c2c:	685a      	ldr	r2, [r3, #4]
 8009c2e:	683b      	ldr	r3, [r7, #0]
 8009c30:	68db      	ldr	r3, [r3, #12]
 8009c32:	f000 fcbd 	bl	800a5b0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	689a      	ldr	r2, [r3, #8]
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009c44:	609a      	str	r2, [r3, #8]
      break;
 8009c46:	e039      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	6818      	ldr	r0, [r3, #0]
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	6859      	ldr	r1, [r3, #4]
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	68db      	ldr	r3, [r3, #12]
 8009c54:	461a      	mov	r2, r3
 8009c56:	f000 fc31 	bl	800a4bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009c5a:	687b      	ldr	r3, [r7, #4]
 8009c5c:	681b      	ldr	r3, [r3, #0]
 8009c5e:	2150      	movs	r1, #80	; 0x50
 8009c60:	4618      	mov	r0, r3
 8009c62:	f000 fc8a 	bl	800a57a <TIM_ITRx_SetConfig>
      break;
 8009c66:	e029      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	6818      	ldr	r0, [r3, #0]
 8009c6c:	683b      	ldr	r3, [r7, #0]
 8009c6e:	6859      	ldr	r1, [r3, #4]
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	68db      	ldr	r3, [r3, #12]
 8009c74:	461a      	mov	r2, r3
 8009c76:	f000 fc50 	bl	800a51a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	2160      	movs	r1, #96	; 0x60
 8009c80:	4618      	mov	r0, r3
 8009c82:	f000 fc7a 	bl	800a57a <TIM_ITRx_SetConfig>
      break;
 8009c86:	e019      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009c88:	687b      	ldr	r3, [r7, #4]
 8009c8a:	6818      	ldr	r0, [r3, #0]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	6859      	ldr	r1, [r3, #4]
 8009c90:	683b      	ldr	r3, [r7, #0]
 8009c92:	68db      	ldr	r3, [r3, #12]
 8009c94:	461a      	mov	r2, r3
 8009c96:	f000 fc11 	bl	800a4bc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	2140      	movs	r1, #64	; 0x40
 8009ca0:	4618      	mov	r0, r3
 8009ca2:	f000 fc6a 	bl	800a57a <TIM_ITRx_SetConfig>
      break;
 8009ca6:	e009      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	681a      	ldr	r2, [r3, #0]
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4619      	mov	r1, r3
 8009cb2:	4610      	mov	r0, r2
 8009cb4:	f000 fc61 	bl	800a57a <TIM_ITRx_SetConfig>
      break;
 8009cb8:	e000      	b.n	8009cbc <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009cba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2201      	movs	r2, #1
 8009cc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	2200      	movs	r2, #0
 8009cc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009ccc:	2300      	movs	r3, #0
}
 8009cce:	4618      	mov	r0, r3
 8009cd0:	3710      	adds	r7, #16
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	bd80      	pop	{r7, pc}
 8009cd6:	bf00      	nop
 8009cd8:	fffeff88 	.word	0xfffeff88

08009cdc <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009cdc:	b580      	push	{r7, lr}
 8009cde:	b082      	sub	sp, #8
 8009ce0:	af00      	add	r7, sp, #0
 8009ce2:	6078      	str	r0, [r7, #4]
 8009ce4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009cec:	2b01      	cmp	r3, #1
 8009cee:	d101      	bne.n	8009cf4 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009cf0:	2302      	movs	r3, #2
 8009cf2:	e031      	b.n	8009d58 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2202      	movs	r2, #2
 8009d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009d04:	6839      	ldr	r1, [r7, #0]
 8009d06:	6878      	ldr	r0, [r7, #4]
 8009d08:	f000 fb50 	bl	800a3ac <TIM_SlaveTimer_SetConfig>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	2b00      	cmp	r3, #0
 8009d10:	d009      	beq.n	8009d26 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	2201      	movs	r2, #1
 8009d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009d1a:	687b      	ldr	r3, [r7, #4]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009d22:	2301      	movs	r3, #1
 8009d24:	e018      	b.n	8009d58 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	68da      	ldr	r2, [r3, #12]
 8009d2c:	687b      	ldr	r3, [r7, #4]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d34:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	681b      	ldr	r3, [r3, #0]
 8009d3a:	68da      	ldr	r2, [r3, #12]
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d44:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	2201      	movs	r2, #1
 8009d4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009d56:	2300      	movs	r3, #0
}
 8009d58:	4618      	mov	r0, r3
 8009d5a:	3708      	adds	r7, #8
 8009d5c:	46bd      	mov	sp, r7
 8009d5e:	bd80      	pop	{r7, pc}

08009d60 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009d60:	b480      	push	{r7}
 8009d62:	b083      	sub	sp, #12
 8009d64:	af00      	add	r7, sp, #0
 8009d66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009d68:	bf00      	nop
 8009d6a:	370c      	adds	r7, #12
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b083      	sub	sp, #12
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009d7c:	bf00      	nop
 8009d7e:	370c      	adds	r7, #12
 8009d80:	46bd      	mov	sp, r7
 8009d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d86:	4770      	bx	lr

08009d88 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009d90:	bf00      	nop
 8009d92:	370c      	adds	r7, #12
 8009d94:	46bd      	mov	sp, r7
 8009d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d9a:	4770      	bx	lr

08009d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009d9c:	b480      	push	{r7}
 8009d9e:	b083      	sub	sp, #12
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009da4:	bf00      	nop
 8009da6:	370c      	adds	r7, #12
 8009da8:	46bd      	mov	sp, r7
 8009daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dae:	4770      	bx	lr

08009db0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b085      	sub	sp, #20
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	4a40      	ldr	r2, [pc, #256]	; (8009ec4 <TIM_Base_SetConfig+0x114>)
 8009dc4:	4293      	cmp	r3, r2
 8009dc6:	d013      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009dce:	d00f      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	4a3d      	ldr	r2, [pc, #244]	; (8009ec8 <TIM_Base_SetConfig+0x118>)
 8009dd4:	4293      	cmp	r3, r2
 8009dd6:	d00b      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	4a3c      	ldr	r2, [pc, #240]	; (8009ecc <TIM_Base_SetConfig+0x11c>)
 8009ddc:	4293      	cmp	r3, r2
 8009dde:	d007      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	4a3b      	ldr	r2, [pc, #236]	; (8009ed0 <TIM_Base_SetConfig+0x120>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d003      	beq.n	8009df0 <TIM_Base_SetConfig+0x40>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	4a3a      	ldr	r2, [pc, #232]	; (8009ed4 <TIM_Base_SetConfig+0x124>)
 8009dec:	4293      	cmp	r3, r2
 8009dee:	d108      	bne.n	8009e02 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009df6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	685b      	ldr	r3, [r3, #4]
 8009dfc:	68fa      	ldr	r2, [r7, #12]
 8009dfe:	4313      	orrs	r3, r2
 8009e00:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	4a2f      	ldr	r2, [pc, #188]	; (8009ec4 <TIM_Base_SetConfig+0x114>)
 8009e06:	4293      	cmp	r3, r2
 8009e08:	d02b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e0a:	687b      	ldr	r3, [r7, #4]
 8009e0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009e10:	d027      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	4a2c      	ldr	r2, [pc, #176]	; (8009ec8 <TIM_Base_SetConfig+0x118>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d023      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	4a2b      	ldr	r2, [pc, #172]	; (8009ecc <TIM_Base_SetConfig+0x11c>)
 8009e1e:	4293      	cmp	r3, r2
 8009e20:	d01f      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	4a2a      	ldr	r2, [pc, #168]	; (8009ed0 <TIM_Base_SetConfig+0x120>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d01b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a29      	ldr	r2, [pc, #164]	; (8009ed4 <TIM_Base_SetConfig+0x124>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d017      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a28      	ldr	r2, [pc, #160]	; (8009ed8 <TIM_Base_SetConfig+0x128>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d013      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e3a:	687b      	ldr	r3, [r7, #4]
 8009e3c:	4a27      	ldr	r2, [pc, #156]	; (8009edc <TIM_Base_SetConfig+0x12c>)
 8009e3e:	4293      	cmp	r3, r2
 8009e40:	d00f      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	4a26      	ldr	r2, [pc, #152]	; (8009ee0 <TIM_Base_SetConfig+0x130>)
 8009e46:	4293      	cmp	r3, r2
 8009e48:	d00b      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e4a:	687b      	ldr	r3, [r7, #4]
 8009e4c:	4a25      	ldr	r2, [pc, #148]	; (8009ee4 <TIM_Base_SetConfig+0x134>)
 8009e4e:	4293      	cmp	r3, r2
 8009e50:	d007      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4a24      	ldr	r2, [pc, #144]	; (8009ee8 <TIM_Base_SetConfig+0x138>)
 8009e56:	4293      	cmp	r3, r2
 8009e58:	d003      	beq.n	8009e62 <TIM_Base_SetConfig+0xb2>
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	4a23      	ldr	r2, [pc, #140]	; (8009eec <TIM_Base_SetConfig+0x13c>)
 8009e5e:	4293      	cmp	r3, r2
 8009e60:	d108      	bne.n	8009e74 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	68db      	ldr	r3, [r3, #12]
 8009e6e:	68fa      	ldr	r2, [r7, #12]
 8009e70:	4313      	orrs	r3, r2
 8009e72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009e74:	68fb      	ldr	r3, [r7, #12]
 8009e76:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	695b      	ldr	r3, [r3, #20]
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	68fa      	ldr	r2, [r7, #12]
 8009e86:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009e88:	683b      	ldr	r3, [r7, #0]
 8009e8a:	689a      	ldr	r2, [r3, #8]
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009e90:	683b      	ldr	r3, [r7, #0]
 8009e92:	681a      	ldr	r2, [r3, #0]
 8009e94:	687b      	ldr	r3, [r7, #4]
 8009e96:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	4a0a      	ldr	r2, [pc, #40]	; (8009ec4 <TIM_Base_SetConfig+0x114>)
 8009e9c:	4293      	cmp	r3, r2
 8009e9e:	d003      	beq.n	8009ea8 <TIM_Base_SetConfig+0xf8>
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	4a0c      	ldr	r2, [pc, #48]	; (8009ed4 <TIM_Base_SetConfig+0x124>)
 8009ea4:	4293      	cmp	r3, r2
 8009ea6:	d103      	bne.n	8009eb0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	691a      	ldr	r2, [r3, #16]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	2201      	movs	r2, #1
 8009eb4:	615a      	str	r2, [r3, #20]
}
 8009eb6:	bf00      	nop
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr
 8009ec2:	bf00      	nop
 8009ec4:	40010000 	.word	0x40010000
 8009ec8:	40000400 	.word	0x40000400
 8009ecc:	40000800 	.word	0x40000800
 8009ed0:	40000c00 	.word	0x40000c00
 8009ed4:	40010400 	.word	0x40010400
 8009ed8:	40014000 	.word	0x40014000
 8009edc:	40014400 	.word	0x40014400
 8009ee0:	40014800 	.word	0x40014800
 8009ee4:	40001800 	.word	0x40001800
 8009ee8:	40001c00 	.word	0x40001c00
 8009eec:	40002000 	.word	0x40002000

08009ef0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009ef0:	b480      	push	{r7}
 8009ef2:	b087      	sub	sp, #28
 8009ef4:	af00      	add	r7, sp, #0
 8009ef6:	6078      	str	r0, [r7, #4]
 8009ef8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	6a1b      	ldr	r3, [r3, #32]
 8009efe:	f023 0201 	bic.w	r2, r3, #1
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	6a1b      	ldr	r3, [r3, #32]
 8009f0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	685b      	ldr	r3, [r3, #4]
 8009f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	699b      	ldr	r3, [r3, #24]
 8009f16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009f18:	68fa      	ldr	r2, [r7, #12]
 8009f1a:	4b2b      	ldr	r3, [pc, #172]	; (8009fc8 <TIM_OC1_SetConfig+0xd8>)
 8009f1c:	4013      	ands	r3, r2
 8009f1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f023 0303 	bic.w	r3, r3, #3
 8009f26:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	68fa      	ldr	r2, [r7, #12]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009f32:	697b      	ldr	r3, [r7, #20]
 8009f34:	f023 0302 	bic.w	r3, r3, #2
 8009f38:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	689b      	ldr	r3, [r3, #8]
 8009f3e:	697a      	ldr	r2, [r7, #20]
 8009f40:	4313      	orrs	r3, r2
 8009f42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	4a21      	ldr	r2, [pc, #132]	; (8009fcc <TIM_OC1_SetConfig+0xdc>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d003      	beq.n	8009f54 <TIM_OC1_SetConfig+0x64>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	4a20      	ldr	r2, [pc, #128]	; (8009fd0 <TIM_OC1_SetConfig+0xe0>)
 8009f50:	4293      	cmp	r3, r2
 8009f52:	d10c      	bne.n	8009f6e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009f54:	697b      	ldr	r3, [r7, #20]
 8009f56:	f023 0308 	bic.w	r3, r3, #8
 8009f5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	68db      	ldr	r3, [r3, #12]
 8009f60:	697a      	ldr	r2, [r7, #20]
 8009f62:	4313      	orrs	r3, r2
 8009f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009f66:	697b      	ldr	r3, [r7, #20]
 8009f68:	f023 0304 	bic.w	r3, r3, #4
 8009f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	4a16      	ldr	r2, [pc, #88]	; (8009fcc <TIM_OC1_SetConfig+0xdc>)
 8009f72:	4293      	cmp	r3, r2
 8009f74:	d003      	beq.n	8009f7e <TIM_OC1_SetConfig+0x8e>
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a15      	ldr	r2, [pc, #84]	; (8009fd0 <TIM_OC1_SetConfig+0xe0>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d111      	bne.n	8009fa2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009f86:	693b      	ldr	r3, [r7, #16]
 8009f88:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	693a      	ldr	r2, [r7, #16]
 8009f94:	4313      	orrs	r3, r2
 8009f96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	699b      	ldr	r3, [r3, #24]
 8009f9c:	693a      	ldr	r2, [r7, #16]
 8009f9e:	4313      	orrs	r3, r2
 8009fa0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	693a      	ldr	r2, [r7, #16]
 8009fa6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009fae:	683b      	ldr	r3, [r7, #0]
 8009fb0:	685a      	ldr	r2, [r3, #4]
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	697a      	ldr	r2, [r7, #20]
 8009fba:	621a      	str	r2, [r3, #32]
}
 8009fbc:	bf00      	nop
 8009fbe:	371c      	adds	r7, #28
 8009fc0:	46bd      	mov	sp, r7
 8009fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc6:	4770      	bx	lr
 8009fc8:	fffeff8f 	.word	0xfffeff8f
 8009fcc:	40010000 	.word	0x40010000
 8009fd0:	40010400 	.word	0x40010400

08009fd4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009fd4:	b480      	push	{r7}
 8009fd6:	b087      	sub	sp, #28
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
 8009fdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	6a1b      	ldr	r3, [r3, #32]
 8009fe2:	f023 0210 	bic.w	r2, r3, #16
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	6a1b      	ldr	r3, [r3, #32]
 8009fee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	685b      	ldr	r3, [r3, #4]
 8009ff4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009ffc:	68fa      	ldr	r2, [r7, #12]
 8009ffe:	4b2e      	ldr	r3, [pc, #184]	; (800a0b8 <TIM_OC2_SetConfig+0xe4>)
 800a000:	4013      	ands	r3, r2
 800a002:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a00a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a00c:	683b      	ldr	r3, [r7, #0]
 800a00e:	681b      	ldr	r3, [r3, #0]
 800a010:	021b      	lsls	r3, r3, #8
 800a012:	68fa      	ldr	r2, [r7, #12]
 800a014:	4313      	orrs	r3, r2
 800a016:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a018:	697b      	ldr	r3, [r7, #20]
 800a01a:	f023 0320 	bic.w	r3, r3, #32
 800a01e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	689b      	ldr	r3, [r3, #8]
 800a024:	011b      	lsls	r3, r3, #4
 800a026:	697a      	ldr	r2, [r7, #20]
 800a028:	4313      	orrs	r3, r2
 800a02a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	4a23      	ldr	r2, [pc, #140]	; (800a0bc <TIM_OC2_SetConfig+0xe8>)
 800a030:	4293      	cmp	r3, r2
 800a032:	d003      	beq.n	800a03c <TIM_OC2_SetConfig+0x68>
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	4a22      	ldr	r2, [pc, #136]	; (800a0c0 <TIM_OC2_SetConfig+0xec>)
 800a038:	4293      	cmp	r3, r2
 800a03a:	d10d      	bne.n	800a058 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a042:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	011b      	lsls	r3, r3, #4
 800a04a:	697a      	ldr	r2, [r7, #20]
 800a04c:	4313      	orrs	r3, r2
 800a04e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a050:	697b      	ldr	r3, [r7, #20]
 800a052:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a056:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a058:	687b      	ldr	r3, [r7, #4]
 800a05a:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <TIM_OC2_SetConfig+0xe8>)
 800a05c:	4293      	cmp	r3, r2
 800a05e:	d003      	beq.n	800a068 <TIM_OC2_SetConfig+0x94>
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	4a17      	ldr	r2, [pc, #92]	; (800a0c0 <TIM_OC2_SetConfig+0xec>)
 800a064:	4293      	cmp	r3, r2
 800a066:	d113      	bne.n	800a090 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a06e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a070:	693b      	ldr	r3, [r7, #16]
 800a072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a078:	683b      	ldr	r3, [r7, #0]
 800a07a:	695b      	ldr	r3, [r3, #20]
 800a07c:	009b      	lsls	r3, r3, #2
 800a07e:	693a      	ldr	r2, [r7, #16]
 800a080:	4313      	orrs	r3, r2
 800a082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a084:	683b      	ldr	r3, [r7, #0]
 800a086:	699b      	ldr	r3, [r3, #24]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	693a      	ldr	r2, [r7, #16]
 800a08c:	4313      	orrs	r3, r2
 800a08e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a090:	687b      	ldr	r3, [r7, #4]
 800a092:	693a      	ldr	r2, [r7, #16]
 800a094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	68fa      	ldr	r2, [r7, #12]
 800a09a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a09c:	683b      	ldr	r3, [r7, #0]
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0a4:	687b      	ldr	r3, [r7, #4]
 800a0a6:	697a      	ldr	r2, [r7, #20]
 800a0a8:	621a      	str	r2, [r3, #32]
}
 800a0aa:	bf00      	nop
 800a0ac:	371c      	adds	r7, #28
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b4:	4770      	bx	lr
 800a0b6:	bf00      	nop
 800a0b8:	feff8fff 	.word	0xfeff8fff
 800a0bc:	40010000 	.word	0x40010000
 800a0c0:	40010400 	.word	0x40010400

0800a0c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a0c4:	b480      	push	{r7}
 800a0c6:	b087      	sub	sp, #28
 800a0c8:	af00      	add	r7, sp, #0
 800a0ca:	6078      	str	r0, [r7, #4]
 800a0cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	6a1b      	ldr	r3, [r3, #32]
 800a0d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a0d6:	687b      	ldr	r3, [r7, #4]
 800a0d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	6a1b      	ldr	r3, [r3, #32]
 800a0de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	685b      	ldr	r3, [r3, #4]
 800a0e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a0e6:	687b      	ldr	r3, [r7, #4]
 800a0e8:	69db      	ldr	r3, [r3, #28]
 800a0ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a0ec:	68fa      	ldr	r2, [r7, #12]
 800a0ee:	4b2d      	ldr	r3, [pc, #180]	; (800a1a4 <TIM_OC3_SetConfig+0xe0>)
 800a0f0:	4013      	ands	r3, r2
 800a0f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f023 0303 	bic.w	r3, r3, #3
 800a0fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a0fc:	683b      	ldr	r3, [r7, #0]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	4313      	orrs	r3, r2
 800a104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a106:	697b      	ldr	r3, [r7, #20]
 800a108:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a10c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	689b      	ldr	r3, [r3, #8]
 800a112:	021b      	lsls	r3, r3, #8
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	4313      	orrs	r3, r2
 800a118:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	4a22      	ldr	r2, [pc, #136]	; (800a1a8 <TIM_OC3_SetConfig+0xe4>)
 800a11e:	4293      	cmp	r3, r2
 800a120:	d003      	beq.n	800a12a <TIM_OC3_SetConfig+0x66>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a21      	ldr	r2, [pc, #132]	; (800a1ac <TIM_OC3_SetConfig+0xe8>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d10d      	bne.n	800a146 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a130:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	68db      	ldr	r3, [r3, #12]
 800a136:	021b      	lsls	r3, r3, #8
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a13e:	697b      	ldr	r3, [r7, #20]
 800a140:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a144:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	4a17      	ldr	r2, [pc, #92]	; (800a1a8 <TIM_OC3_SetConfig+0xe4>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d003      	beq.n	800a156 <TIM_OC3_SetConfig+0x92>
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	4a16      	ldr	r2, [pc, #88]	; (800a1ac <TIM_OC3_SetConfig+0xe8>)
 800a152:	4293      	cmp	r3, r2
 800a154:	d113      	bne.n	800a17e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a15c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a15e:	693b      	ldr	r3, [r7, #16]
 800a160:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a164:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a166:	683b      	ldr	r3, [r7, #0]
 800a168:	695b      	ldr	r3, [r3, #20]
 800a16a:	011b      	lsls	r3, r3, #4
 800a16c:	693a      	ldr	r2, [r7, #16]
 800a16e:	4313      	orrs	r3, r2
 800a170:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a172:	683b      	ldr	r3, [r7, #0]
 800a174:	699b      	ldr	r3, [r3, #24]
 800a176:	011b      	lsls	r3, r3, #4
 800a178:	693a      	ldr	r2, [r7, #16]
 800a17a:	4313      	orrs	r3, r2
 800a17c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	693a      	ldr	r2, [r7, #16]
 800a182:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	68fa      	ldr	r2, [r7, #12]
 800a188:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a18a:	683b      	ldr	r3, [r7, #0]
 800a18c:	685a      	ldr	r2, [r3, #4]
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	697a      	ldr	r2, [r7, #20]
 800a196:	621a      	str	r2, [r3, #32]
}
 800a198:	bf00      	nop
 800a19a:	371c      	adds	r7, #28
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	fffeff8f 	.word	0xfffeff8f
 800a1a8:	40010000 	.word	0x40010000
 800a1ac:	40010400 	.word	0x40010400

0800a1b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a1b0:	b480      	push	{r7}
 800a1b2:	b087      	sub	sp, #28
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a1c2:	687b      	ldr	r3, [r7, #4]
 800a1c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	6a1b      	ldr	r3, [r3, #32]
 800a1ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	685b      	ldr	r3, [r3, #4]
 800a1d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	69db      	ldr	r3, [r3, #28]
 800a1d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a1d8:	68fa      	ldr	r2, [r7, #12]
 800a1da:	4b1e      	ldr	r3, [pc, #120]	; (800a254 <TIM_OC4_SetConfig+0xa4>)
 800a1dc:	4013      	ands	r3, r2
 800a1de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1e8:	683b      	ldr	r3, [r7, #0]
 800a1ea:	681b      	ldr	r3, [r3, #0]
 800a1ec:	021b      	lsls	r3, r3, #8
 800a1ee:	68fa      	ldr	r2, [r7, #12]
 800a1f0:	4313      	orrs	r3, r2
 800a1f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a1f4:	693b      	ldr	r3, [r7, #16]
 800a1f6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a1fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a1fc:	683b      	ldr	r3, [r7, #0]
 800a1fe:	689b      	ldr	r3, [r3, #8]
 800a200:	031b      	lsls	r3, r3, #12
 800a202:	693a      	ldr	r2, [r7, #16]
 800a204:	4313      	orrs	r3, r2
 800a206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	4a13      	ldr	r2, [pc, #76]	; (800a258 <TIM_OC4_SetConfig+0xa8>)
 800a20c:	4293      	cmp	r3, r2
 800a20e:	d003      	beq.n	800a218 <TIM_OC4_SetConfig+0x68>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a12      	ldr	r2, [pc, #72]	; (800a25c <TIM_OC4_SetConfig+0xac>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d109      	bne.n	800a22c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a218:	697b      	ldr	r3, [r7, #20]
 800a21a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a21e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	695b      	ldr	r3, [r3, #20]
 800a224:	019b      	lsls	r3, r3, #6
 800a226:	697a      	ldr	r2, [r7, #20]
 800a228:	4313      	orrs	r3, r2
 800a22a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a22c:	687b      	ldr	r3, [r7, #4]
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	68fa      	ldr	r2, [r7, #12]
 800a236:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	685a      	ldr	r2, [r3, #4]
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a240:	687b      	ldr	r3, [r7, #4]
 800a242:	693a      	ldr	r2, [r7, #16]
 800a244:	621a      	str	r2, [r3, #32]
}
 800a246:	bf00      	nop
 800a248:	371c      	adds	r7, #28
 800a24a:	46bd      	mov	sp, r7
 800a24c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a250:	4770      	bx	lr
 800a252:	bf00      	nop
 800a254:	feff8fff 	.word	0xfeff8fff
 800a258:	40010000 	.word	0x40010000
 800a25c:	40010400 	.word	0x40010400

0800a260 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a260:	b480      	push	{r7}
 800a262:	b087      	sub	sp, #28
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	6a1b      	ldr	r3, [r3, #32]
 800a26e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	6a1b      	ldr	r3, [r3, #32]
 800a27a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a27c:	687b      	ldr	r3, [r7, #4]
 800a27e:	685b      	ldr	r3, [r3, #4]
 800a280:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a288:	68fa      	ldr	r2, [r7, #12]
 800a28a:	4b1b      	ldr	r3, [pc, #108]	; (800a2f8 <TIM_OC5_SetConfig+0x98>)
 800a28c:	4013      	ands	r3, r2
 800a28e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a290:	683b      	ldr	r3, [r7, #0]
 800a292:	681b      	ldr	r3, [r3, #0]
 800a294:	68fa      	ldr	r2, [r7, #12]
 800a296:	4313      	orrs	r3, r2
 800a298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a29a:	693b      	ldr	r3, [r7, #16]
 800a29c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a2a0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a2a2:	683b      	ldr	r3, [r7, #0]
 800a2a4:	689b      	ldr	r3, [r3, #8]
 800a2a6:	041b      	lsls	r3, r3, #16
 800a2a8:	693a      	ldr	r2, [r7, #16]
 800a2aa:	4313      	orrs	r3, r2
 800a2ac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	4a12      	ldr	r2, [pc, #72]	; (800a2fc <TIM_OC5_SetConfig+0x9c>)
 800a2b2:	4293      	cmp	r3, r2
 800a2b4:	d003      	beq.n	800a2be <TIM_OC5_SetConfig+0x5e>
 800a2b6:	687b      	ldr	r3, [r7, #4]
 800a2b8:	4a11      	ldr	r2, [pc, #68]	; (800a300 <TIM_OC5_SetConfig+0xa0>)
 800a2ba:	4293      	cmp	r3, r2
 800a2bc:	d109      	bne.n	800a2d2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a2be:	697b      	ldr	r3, [r7, #20]
 800a2c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a2c4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a2c6:	683b      	ldr	r3, [r7, #0]
 800a2c8:	695b      	ldr	r3, [r3, #20]
 800a2ca:	021b      	lsls	r3, r3, #8
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	4313      	orrs	r3, r2
 800a2d0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	697a      	ldr	r2, [r7, #20]
 800a2d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	68fa      	ldr	r2, [r7, #12]
 800a2dc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a2de:	683b      	ldr	r3, [r7, #0]
 800a2e0:	685a      	ldr	r2, [r3, #4]
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	693a      	ldr	r2, [r7, #16]
 800a2ea:	621a      	str	r2, [r3, #32]
}
 800a2ec:	bf00      	nop
 800a2ee:	371c      	adds	r7, #28
 800a2f0:	46bd      	mov	sp, r7
 800a2f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f6:	4770      	bx	lr
 800a2f8:	fffeff8f 	.word	0xfffeff8f
 800a2fc:	40010000 	.word	0x40010000
 800a300:	40010400 	.word	0x40010400

0800a304 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a304:	b480      	push	{r7}
 800a306:	b087      	sub	sp, #28
 800a308:	af00      	add	r7, sp, #0
 800a30a:	6078      	str	r0, [r7, #4]
 800a30c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	6a1b      	ldr	r3, [r3, #32]
 800a31e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	685b      	ldr	r3, [r3, #4]
 800a324:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a32a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a32c:	68fa      	ldr	r2, [r7, #12]
 800a32e:	4b1c      	ldr	r3, [pc, #112]	; (800a3a0 <TIM_OC6_SetConfig+0x9c>)
 800a330:	4013      	ands	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a334:	683b      	ldr	r3, [r7, #0]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	021b      	lsls	r3, r3, #8
 800a33a:	68fa      	ldr	r2, [r7, #12]
 800a33c:	4313      	orrs	r3, r2
 800a33e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a346:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	689b      	ldr	r3, [r3, #8]
 800a34c:	051b      	lsls	r3, r3, #20
 800a34e:	693a      	ldr	r2, [r7, #16]
 800a350:	4313      	orrs	r3, r2
 800a352:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	4a13      	ldr	r2, [pc, #76]	; (800a3a4 <TIM_OC6_SetConfig+0xa0>)
 800a358:	4293      	cmp	r3, r2
 800a35a:	d003      	beq.n	800a364 <TIM_OC6_SetConfig+0x60>
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	4a12      	ldr	r2, [pc, #72]	; (800a3a8 <TIM_OC6_SetConfig+0xa4>)
 800a360:	4293      	cmp	r3, r2
 800a362:	d109      	bne.n	800a378 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a364:	697b      	ldr	r3, [r7, #20]
 800a366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a36a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a36c:	683b      	ldr	r3, [r7, #0]
 800a36e:	695b      	ldr	r3, [r3, #20]
 800a370:	029b      	lsls	r3, r3, #10
 800a372:	697a      	ldr	r2, [r7, #20]
 800a374:	4313      	orrs	r3, r2
 800a376:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	697a      	ldr	r2, [r7, #20]
 800a37c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a37e:	687b      	ldr	r3, [r7, #4]
 800a380:	68fa      	ldr	r2, [r7, #12]
 800a382:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	685a      	ldr	r2, [r3, #4]
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a38c:	687b      	ldr	r3, [r7, #4]
 800a38e:	693a      	ldr	r2, [r7, #16]
 800a390:	621a      	str	r2, [r3, #32]
}
 800a392:	bf00      	nop
 800a394:	371c      	adds	r7, #28
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr
 800a39e:	bf00      	nop
 800a3a0:	feff8fff 	.word	0xfeff8fff
 800a3a4:	40010000 	.word	0x40010000
 800a3a8:	40010400 	.word	0x40010400

0800a3ac <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a3ac:	b580      	push	{r7, lr}
 800a3ae:	b086      	sub	sp, #24
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
 800a3b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	689b      	ldr	r3, [r3, #8]
 800a3bc:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a3c4:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a3c6:	683b      	ldr	r3, [r7, #0]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	697a      	ldr	r2, [r7, #20]
 800a3cc:	4313      	orrs	r3, r2
 800a3ce:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a3d0:	697a      	ldr	r2, [r7, #20]
 800a3d2:	4b39      	ldr	r3, [pc, #228]	; (800a4b8 <TIM_SlaveTimer_SetConfig+0x10c>)
 800a3d4:	4013      	ands	r3, r2
 800a3d6:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a3d8:	683b      	ldr	r3, [r7, #0]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	697a      	ldr	r2, [r7, #20]
 800a3de:	4313      	orrs	r3, r2
 800a3e0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a3e2:	687b      	ldr	r3, [r7, #4]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	697a      	ldr	r2, [r7, #20]
 800a3e8:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	2b30      	cmp	r3, #48	; 0x30
 800a3f0:	d05c      	beq.n	800a4ac <TIM_SlaveTimer_SetConfig+0x100>
 800a3f2:	2b30      	cmp	r3, #48	; 0x30
 800a3f4:	d806      	bhi.n	800a404 <TIM_SlaveTimer_SetConfig+0x58>
 800a3f6:	2b10      	cmp	r3, #16
 800a3f8:	d058      	beq.n	800a4ac <TIM_SlaveTimer_SetConfig+0x100>
 800a3fa:	2b20      	cmp	r3, #32
 800a3fc:	d056      	beq.n	800a4ac <TIM_SlaveTimer_SetConfig+0x100>
 800a3fe:	2b00      	cmp	r3, #0
 800a400:	d054      	beq.n	800a4ac <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a402:	e054      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a404:	2b50      	cmp	r3, #80	; 0x50
 800a406:	d03d      	beq.n	800a484 <TIM_SlaveTimer_SetConfig+0xd8>
 800a408:	2b50      	cmp	r3, #80	; 0x50
 800a40a:	d802      	bhi.n	800a412 <TIM_SlaveTimer_SetConfig+0x66>
 800a40c:	2b40      	cmp	r3, #64	; 0x40
 800a40e:	d010      	beq.n	800a432 <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a410:	e04d      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a412:	2b60      	cmp	r3, #96	; 0x60
 800a414:	d040      	beq.n	800a498 <TIM_SlaveTimer_SetConfig+0xec>
 800a416:	2b70      	cmp	r3, #112	; 0x70
 800a418:	d000      	beq.n	800a41c <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a41a:	e048      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a41c:	687b      	ldr	r3, [r7, #4]
 800a41e:	6818      	ldr	r0, [r3, #0]
 800a420:	683b      	ldr	r3, [r7, #0]
 800a422:	68d9      	ldr	r1, [r3, #12]
 800a424:	683b      	ldr	r3, [r7, #0]
 800a426:	689a      	ldr	r2, [r3, #8]
 800a428:	683b      	ldr	r3, [r7, #0]
 800a42a:	691b      	ldr	r3, [r3, #16]
 800a42c:	f000 f8c0 	bl	800a5b0 <TIM_ETR_SetConfig>
      break;
 800a430:	e03d      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a432:	683b      	ldr	r3, [r7, #0]
 800a434:	681b      	ldr	r3, [r3, #0]
 800a436:	2b05      	cmp	r3, #5
 800a438:	d101      	bne.n	800a43e <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a43a:	2301      	movs	r3, #1
 800a43c:	e038      	b.n	800a4b0 <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a43e:	687b      	ldr	r3, [r7, #4]
 800a440:	681b      	ldr	r3, [r3, #0]
 800a442:	6a1b      	ldr	r3, [r3, #32]
 800a444:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6a1a      	ldr	r2, [r3, #32]
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f022 0201 	bic.w	r2, r2, #1
 800a454:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	699b      	ldr	r3, [r3, #24]
 800a45c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a464:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a466:	683b      	ldr	r3, [r7, #0]
 800a468:	691b      	ldr	r3, [r3, #16]
 800a46a:	011b      	lsls	r3, r3, #4
 800a46c:	68fa      	ldr	r2, [r7, #12]
 800a46e:	4313      	orrs	r3, r2
 800a470:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	68fa      	ldr	r2, [r7, #12]
 800a478:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	693a      	ldr	r2, [r7, #16]
 800a480:	621a      	str	r2, [r3, #32]
      break;
 800a482:	e014      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6818      	ldr	r0, [r3, #0]
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	6899      	ldr	r1, [r3, #8]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	691b      	ldr	r3, [r3, #16]
 800a490:	461a      	mov	r2, r3
 800a492:	f000 f813 	bl	800a4bc <TIM_TI1_ConfigInputStage>
      break;
 800a496:	e00a      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6818      	ldr	r0, [r3, #0]
 800a49c:	683b      	ldr	r3, [r7, #0]
 800a49e:	6899      	ldr	r1, [r3, #8]
 800a4a0:	683b      	ldr	r3, [r7, #0]
 800a4a2:	691b      	ldr	r3, [r3, #16]
 800a4a4:	461a      	mov	r2, r3
 800a4a6:	f000 f838 	bl	800a51a <TIM_TI2_ConfigInputStage>
      break;
 800a4aa:	e000      	b.n	800a4ae <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a4ac:	bf00      	nop
  }
  return HAL_OK;
 800a4ae:	2300      	movs	r3, #0
}
 800a4b0:	4618      	mov	r0, r3
 800a4b2:	3718      	adds	r7, #24
 800a4b4:	46bd      	mov	sp, r7
 800a4b6:	bd80      	pop	{r7, pc}
 800a4b8:	fffefff8 	.word	0xfffefff8

0800a4bc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a4bc:	b480      	push	{r7}
 800a4be:	b087      	sub	sp, #28
 800a4c0:	af00      	add	r7, sp, #0
 800a4c2:	60f8      	str	r0, [r7, #12]
 800a4c4:	60b9      	str	r1, [r7, #8]
 800a4c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	6a1b      	ldr	r3, [r3, #32]
 800a4cc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	6a1b      	ldr	r3, [r3, #32]
 800a4d2:	f023 0201 	bic.w	r2, r3, #1
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a4da:	68fb      	ldr	r3, [r7, #12]
 800a4dc:	699b      	ldr	r3, [r3, #24]
 800a4de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a4e0:	693b      	ldr	r3, [r7, #16]
 800a4e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a4e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	011b      	lsls	r3, r3, #4
 800a4ec:	693a      	ldr	r2, [r7, #16]
 800a4ee:	4313      	orrs	r3, r2
 800a4f0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a4f2:	697b      	ldr	r3, [r7, #20]
 800a4f4:	f023 030a 	bic.w	r3, r3, #10
 800a4f8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a4fa:	697a      	ldr	r2, [r7, #20]
 800a4fc:	68bb      	ldr	r3, [r7, #8]
 800a4fe:	4313      	orrs	r3, r2
 800a500:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	693a      	ldr	r2, [r7, #16]
 800a506:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	697a      	ldr	r2, [r7, #20]
 800a50c:	621a      	str	r2, [r3, #32]
}
 800a50e:	bf00      	nop
 800a510:	371c      	adds	r7, #28
 800a512:	46bd      	mov	sp, r7
 800a514:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a518:	4770      	bx	lr

0800a51a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a51a:	b480      	push	{r7}
 800a51c:	b087      	sub	sp, #28
 800a51e:	af00      	add	r7, sp, #0
 800a520:	60f8      	str	r0, [r7, #12]
 800a522:	60b9      	str	r1, [r7, #8]
 800a524:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	6a1b      	ldr	r3, [r3, #32]
 800a52a:	f023 0210 	bic.w	r2, r3, #16
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a532:	68fb      	ldr	r3, [r7, #12]
 800a534:	699b      	ldr	r3, [r3, #24]
 800a536:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	6a1b      	ldr	r3, [r3, #32]
 800a53c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a53e:	697b      	ldr	r3, [r7, #20]
 800a540:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a544:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	031b      	lsls	r3, r3, #12
 800a54a:	697a      	ldr	r2, [r7, #20]
 800a54c:	4313      	orrs	r3, r2
 800a54e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a550:	693b      	ldr	r3, [r7, #16]
 800a552:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a556:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a558:	68bb      	ldr	r3, [r7, #8]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	693a      	ldr	r2, [r7, #16]
 800a55e:	4313      	orrs	r3, r2
 800a560:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a562:	68fb      	ldr	r3, [r7, #12]
 800a564:	697a      	ldr	r2, [r7, #20]
 800a566:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	693a      	ldr	r2, [r7, #16]
 800a56c:	621a      	str	r2, [r3, #32]
}
 800a56e:	bf00      	nop
 800a570:	371c      	adds	r7, #28
 800a572:	46bd      	mov	sp, r7
 800a574:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a578:	4770      	bx	lr

0800a57a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a57a:	b480      	push	{r7}
 800a57c:	b085      	sub	sp, #20
 800a57e:	af00      	add	r7, sp, #0
 800a580:	6078      	str	r0, [r7, #4]
 800a582:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	689b      	ldr	r3, [r3, #8]
 800a588:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a590:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a592:	683a      	ldr	r2, [r7, #0]
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	4313      	orrs	r3, r2
 800a598:	f043 0307 	orr.w	r3, r3, #7
 800a59c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	68fa      	ldr	r2, [r7, #12]
 800a5a2:	609a      	str	r2, [r3, #8]
}
 800a5a4:	bf00      	nop
 800a5a6:	3714      	adds	r7, #20
 800a5a8:	46bd      	mov	sp, r7
 800a5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ae:	4770      	bx	lr

0800a5b0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a5b0:	b480      	push	{r7}
 800a5b2:	b087      	sub	sp, #28
 800a5b4:	af00      	add	r7, sp, #0
 800a5b6:	60f8      	str	r0, [r7, #12]
 800a5b8:	60b9      	str	r1, [r7, #8]
 800a5ba:	607a      	str	r2, [r7, #4]
 800a5bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	689b      	ldr	r3, [r3, #8]
 800a5c2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a5c4:	697b      	ldr	r3, [r7, #20]
 800a5c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a5ca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a5cc:	683b      	ldr	r3, [r7, #0]
 800a5ce:	021a      	lsls	r2, r3, #8
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	431a      	orrs	r2, r3
 800a5d4:	68bb      	ldr	r3, [r7, #8]
 800a5d6:	4313      	orrs	r3, r2
 800a5d8:	697a      	ldr	r2, [r7, #20]
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	697a      	ldr	r2, [r7, #20]
 800a5e2:	609a      	str	r2, [r3, #8]
}
 800a5e4:	bf00      	nop
 800a5e6:	371c      	adds	r7, #28
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ee:	4770      	bx	lr

0800a5f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a5f0:	b480      	push	{r7}
 800a5f2:	b085      	sub	sp, #20
 800a5f4:	af00      	add	r7, sp, #0
 800a5f6:	6078      	str	r0, [r7, #4]
 800a5f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a600:	2b01      	cmp	r3, #1
 800a602:	d101      	bne.n	800a608 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a604:	2302      	movs	r3, #2
 800a606:	e06d      	b.n	800a6e4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2201      	movs	r2, #1
 800a60c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	2202      	movs	r2, #2
 800a614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	685b      	ldr	r3, [r3, #4]
 800a61e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	689b      	ldr	r3, [r3, #8]
 800a626:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4a30      	ldr	r2, [pc, #192]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d004      	beq.n	800a63c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a632:	687b      	ldr	r3, [r7, #4]
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a2f      	ldr	r2, [pc, #188]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a638:	4293      	cmp	r3, r2
 800a63a:	d108      	bne.n	800a64e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a63c:	68fb      	ldr	r3, [r7, #12]
 800a63e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a642:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a644:	683b      	ldr	r3, [r7, #0]
 800a646:	685b      	ldr	r3, [r3, #4]
 800a648:	68fa      	ldr	r2, [r7, #12]
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a654:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a656:	683b      	ldr	r3, [r7, #0]
 800a658:	681b      	ldr	r3, [r3, #0]
 800a65a:	68fa      	ldr	r2, [r7, #12]
 800a65c:	4313      	orrs	r3, r2
 800a65e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	681b      	ldr	r3, [r3, #0]
 800a664:	68fa      	ldr	r2, [r7, #12]
 800a666:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a20      	ldr	r2, [pc, #128]	; (800a6f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d022      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a67a:	d01d      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1d      	ldr	r2, [pc, #116]	; (800a6f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d018      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	4a1c      	ldr	r2, [pc, #112]	; (800a6fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d013      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	4a1a      	ldr	r2, [pc, #104]	; (800a700 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a696:	4293      	cmp	r3, r2
 800a698:	d00e      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	4a15      	ldr	r2, [pc, #84]	; (800a6f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a6a0:	4293      	cmp	r3, r2
 800a6a2:	d009      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	4a16      	ldr	r2, [pc, #88]	; (800a704 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a6aa:	4293      	cmp	r3, r2
 800a6ac:	d004      	beq.n	800a6b8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	4a15      	ldr	r2, [pc, #84]	; (800a708 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d10c      	bne.n	800a6d2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a6b8:	68bb      	ldr	r3, [r7, #8]
 800a6ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a6be:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a6c0:	683b      	ldr	r3, [r7, #0]
 800a6c2:	689b      	ldr	r3, [r3, #8]
 800a6c4:	68ba      	ldr	r2, [r7, #8]
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a6ca:	687b      	ldr	r3, [r7, #4]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	68ba      	ldr	r2, [r7, #8]
 800a6d0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	2201      	movs	r2, #1
 800a6d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	2200      	movs	r2, #0
 800a6de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6e2:	2300      	movs	r3, #0
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3714      	adds	r7, #20
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ee:	4770      	bx	lr
 800a6f0:	40010000 	.word	0x40010000
 800a6f4:	40010400 	.word	0x40010400
 800a6f8:	40000400 	.word	0x40000400
 800a6fc:	40000800 	.word	0x40000800
 800a700:	40000c00 	.word	0x40000c00
 800a704:	40014000 	.word	0x40014000
 800a708:	40001800 	.word	0x40001800

0800a70c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
 800a714:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a716:	2300      	movs	r3, #0
 800a718:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a720:	2b01      	cmp	r3, #1
 800a722:	d101      	bne.n	800a728 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a724:	2302      	movs	r3, #2
 800a726:	e065      	b.n	800a7f4 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2201      	movs	r2, #1
 800a72c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a736:	683b      	ldr	r3, [r7, #0]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	4313      	orrs	r3, r2
 800a73c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a73e:	68fb      	ldr	r3, [r7, #12]
 800a740:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a744:	683b      	ldr	r3, [r7, #0]
 800a746:	689b      	ldr	r3, [r3, #8]
 800a748:	4313      	orrs	r3, r2
 800a74a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a752:	683b      	ldr	r3, [r7, #0]
 800a754:	685b      	ldr	r3, [r3, #4]
 800a756:	4313      	orrs	r3, r2
 800a758:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a75a:	68fb      	ldr	r3, [r7, #12]
 800a75c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a760:	683b      	ldr	r3, [r7, #0]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	4313      	orrs	r3, r2
 800a766:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a76e:	683b      	ldr	r3, [r7, #0]
 800a770:	691b      	ldr	r3, [r3, #16]
 800a772:	4313      	orrs	r3, r2
 800a774:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a77c:	683b      	ldr	r3, [r7, #0]
 800a77e:	695b      	ldr	r3, [r3, #20]
 800a780:	4313      	orrs	r3, r2
 800a782:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a78a:	683b      	ldr	r3, [r7, #0]
 800a78c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a78e:	4313      	orrs	r3, r2
 800a790:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a798:	683b      	ldr	r3, [r7, #0]
 800a79a:	699b      	ldr	r3, [r3, #24]
 800a79c:	041b      	lsls	r3, r3, #16
 800a79e:	4313      	orrs	r3, r2
 800a7a0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	4a16      	ldr	r2, [pc, #88]	; (800a800 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d004      	beq.n	800a7b6 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a7ac:	687b      	ldr	r3, [r7, #4]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a14      	ldr	r2, [pc, #80]	; (800a804 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a7b2:	4293      	cmp	r3, r2
 800a7b4:	d115      	bne.n	800a7e2 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a7bc:	683b      	ldr	r3, [r7, #0]
 800a7be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7c0:	051b      	lsls	r3, r3, #20
 800a7c2:	4313      	orrs	r3, r2
 800a7c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a7cc:	683b      	ldr	r3, [r7, #0]
 800a7ce:	69db      	ldr	r3, [r3, #28]
 800a7d0:	4313      	orrs	r3, r2
 800a7d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a7d4:	68fb      	ldr	r3, [r7, #12]
 800a7d6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	6a1b      	ldr	r3, [r3, #32]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	68fa      	ldr	r2, [r7, #12]
 800a7e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	2200      	movs	r2, #0
 800a7ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a7f2:	2300      	movs	r3, #0
}
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	3714      	adds	r7, #20
 800a7f8:	46bd      	mov	sp, r7
 800a7fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7fe:	4770      	bx	lr
 800a800:	40010000 	.word	0x40010000
 800a804:	40010400 	.word	0x40010400

0800a808 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a808:	b480      	push	{r7}
 800a80a:	b083      	sub	sp, #12
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a810:	bf00      	nop
 800a812:	370c      	adds	r7, #12
 800a814:	46bd      	mov	sp, r7
 800a816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a81a:	4770      	bx	lr

0800a81c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a81c:	b480      	push	{r7}
 800a81e:	b083      	sub	sp, #12
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a824:	bf00      	nop
 800a826:	370c      	adds	r7, #12
 800a828:	46bd      	mov	sp, r7
 800a82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a82e:	4770      	bx	lr

0800a830 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a830:	b480      	push	{r7}
 800a832:	b083      	sub	sp, #12
 800a834:	af00      	add	r7, sp, #0
 800a836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a838:	bf00      	nop
 800a83a:	370c      	adds	r7, #12
 800a83c:	46bd      	mov	sp, r7
 800a83e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a842:	4770      	bx	lr

0800a844 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a844:	b580      	push	{r7, lr}
 800a846:	b082      	sub	sp, #8
 800a848:	af00      	add	r7, sp, #0
 800a84a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	2b00      	cmp	r3, #0
 800a850:	d101      	bne.n	800a856 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a852:	2301      	movs	r3, #1
 800a854:	e040      	b.n	800a8d8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	d106      	bne.n	800a86c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	2200      	movs	r2, #0
 800a862:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	f7f9 ff58 	bl	800471c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	2224      	movs	r2, #36	; 0x24
 800a870:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	681a      	ldr	r2, [r3, #0]
 800a878:	687b      	ldr	r3, [r7, #4]
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	f022 0201 	bic.w	r2, r2, #1
 800a880:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a882:	6878      	ldr	r0, [r7, #4]
 800a884:	f000 fa70 	bl	800ad68 <UART_SetConfig>
 800a888:	4603      	mov	r3, r0
 800a88a:	2b01      	cmp	r3, #1
 800a88c:	d101      	bne.n	800a892 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a88e:	2301      	movs	r3, #1
 800a890:	e022      	b.n	800a8d8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a896:	2b00      	cmp	r3, #0
 800a898:	d002      	beq.n	800a8a0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a89a:	6878      	ldr	r0, [r7, #4]
 800a89c:	f000 fd0e 	bl	800b2bc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a8a0:	687b      	ldr	r3, [r7, #4]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	685a      	ldr	r2, [r3, #4]
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a8ae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	689a      	ldr	r2, [r3, #8]
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a8be:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f042 0201 	orr.w	r2, r2, #1
 800a8ce:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a8d0:	6878      	ldr	r0, [r7, #4]
 800a8d2:	f000 fd95 	bl	800b400 <UART_CheckIdleState>
 800a8d6:	4603      	mov	r3, r0
}
 800a8d8:	4618      	mov	r0, r3
 800a8da:	3708      	adds	r7, #8
 800a8dc:	46bd      	mov	sp, r7
 800a8de:	bd80      	pop	{r7, pc}

0800a8e0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b085      	sub	sp, #20
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a8f2:	2b20      	cmp	r3, #32
 800a8f4:	d144      	bne.n	800a980 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a8f6:	68bb      	ldr	r3, [r7, #8]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d002      	beq.n	800a902 <HAL_UART_Transmit_IT+0x22>
 800a8fc:	88fb      	ldrh	r3, [r7, #6]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a902:	2301      	movs	r3, #1
 800a904:	e03d      	b.n	800a982 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a90c:	2b01      	cmp	r3, #1
 800a90e:	d101      	bne.n	800a914 <HAL_UART_Transmit_IT+0x34>
 800a910:	2302      	movs	r3, #2
 800a912:	e036      	b.n	800a982 <HAL_UART_Transmit_IT+0xa2>
 800a914:	68fb      	ldr	r3, [r7, #12]
 800a916:	2201      	movs	r2, #1
 800a918:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a91c:	68fb      	ldr	r3, [r7, #12]
 800a91e:	68ba      	ldr	r2, [r7, #8]
 800a920:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a922:	68fb      	ldr	r3, [r7, #12]
 800a924:	88fa      	ldrh	r2, [r7, #6]
 800a926:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a92a:	68fb      	ldr	r3, [r7, #12]
 800a92c:	88fa      	ldrh	r2, [r7, #6]
 800a92e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	2200      	movs	r2, #0
 800a936:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	2200      	movs	r2, #0
 800a93c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2221      	movs	r2, #33	; 0x21
 800a942:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a94c:	d107      	bne.n	800a95e <HAL_UART_Transmit_IT+0x7e>
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	691b      	ldr	r3, [r3, #16]
 800a952:	2b00      	cmp	r3, #0
 800a954:	d103      	bne.n	800a95e <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	4a0d      	ldr	r2, [pc, #52]	; (800a990 <HAL_UART_Transmit_IT+0xb0>)
 800a95a:	665a      	str	r2, [r3, #100]	; 0x64
 800a95c:	e002      	b.n	800a964 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	4a0c      	ldr	r2, [pc, #48]	; (800a994 <HAL_UART_Transmit_IT+0xb4>)
 800a962:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2200      	movs	r2, #0
 800a968:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	681a      	ldr	r2, [r3, #0]
 800a972:	68fb      	ldr	r3, [r7, #12]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a97a:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a97c:	2300      	movs	r3, #0
 800a97e:	e000      	b.n	800a982 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a980:	2302      	movs	r3, #2
  }
}
 800a982:	4618      	mov	r0, r3
 800a984:	3714      	adds	r7, #20
 800a986:	46bd      	mov	sp, r7
 800a988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98c:	4770      	bx	lr
 800a98e:	bf00      	nop
 800a990:	0800b633 	.word	0x0800b633
 800a994:	0800b5c1 	.word	0x0800b5c1

0800a998 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a998:	b480      	push	{r7}
 800a99a:	b085      	sub	sp, #20
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	60f8      	str	r0, [r7, #12]
 800a9a0:	60b9      	str	r1, [r7, #8]
 800a9a2:	4613      	mov	r3, r2
 800a9a4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a9aa:	2b20      	cmp	r3, #32
 800a9ac:	f040 808a 	bne.w	800aac4 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a9b0:	68bb      	ldr	r3, [r7, #8]
 800a9b2:	2b00      	cmp	r3, #0
 800a9b4:	d002      	beq.n	800a9bc <HAL_UART_Receive_IT+0x24>
 800a9b6:	88fb      	ldrh	r3, [r7, #6]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d101      	bne.n	800a9c0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a9bc:	2301      	movs	r3, #1
 800a9be:	e082      	b.n	800aac6 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a9c0:	68fb      	ldr	r3, [r7, #12]
 800a9c2:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a9c6:	2b01      	cmp	r3, #1
 800a9c8:	d101      	bne.n	800a9ce <HAL_UART_Receive_IT+0x36>
 800a9ca:	2302      	movs	r3, #2
 800a9cc:	e07b      	b.n	800aac6 <HAL_UART_Receive_IT+0x12e>
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	2201      	movs	r2, #1
 800a9d2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	68ba      	ldr	r2, [r7, #8]
 800a9da:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a9dc:	68fb      	ldr	r3, [r7, #12]
 800a9de:	88fa      	ldrh	r2, [r7, #6]
 800a9e0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	88fa      	ldrh	r2, [r7, #6]
 800a9e8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	2200      	movs	r2, #0
 800a9f0:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	689b      	ldr	r3, [r3, #8]
 800a9f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a9fa:	d10e      	bne.n	800aa1a <HAL_UART_Receive_IT+0x82>
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	691b      	ldr	r3, [r3, #16]
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d105      	bne.n	800aa10 <HAL_UART_Receive_IT+0x78>
 800aa04:	68fb      	ldr	r3, [r7, #12]
 800aa06:	f240 12ff 	movw	r2, #511	; 0x1ff
 800aa0a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa0e:	e02d      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa10:	68fb      	ldr	r3, [r7, #12]
 800aa12:	22ff      	movs	r2, #255	; 0xff
 800aa14:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa18:	e028      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	689b      	ldr	r3, [r3, #8]
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	d10d      	bne.n	800aa3e <HAL_UART_Receive_IT+0xa6>
 800aa22:	68fb      	ldr	r3, [r7, #12]
 800aa24:	691b      	ldr	r3, [r3, #16]
 800aa26:	2b00      	cmp	r3, #0
 800aa28:	d104      	bne.n	800aa34 <HAL_UART_Receive_IT+0x9c>
 800aa2a:	68fb      	ldr	r3, [r7, #12]
 800aa2c:	22ff      	movs	r2, #255	; 0xff
 800aa2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa32:	e01b      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	227f      	movs	r2, #127	; 0x7f
 800aa38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa3c:	e016      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	689b      	ldr	r3, [r3, #8]
 800aa42:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800aa46:	d10d      	bne.n	800aa64 <HAL_UART_Receive_IT+0xcc>
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	691b      	ldr	r3, [r3, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <HAL_UART_Receive_IT+0xc2>
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	227f      	movs	r2, #127	; 0x7f
 800aa54:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa58:	e008      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	223f      	movs	r2, #63	; 0x3f
 800aa5e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800aa62:	e003      	b.n	800aa6c <HAL_UART_Receive_IT+0xd4>
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800aa72:	68fb      	ldr	r3, [r7, #12]
 800aa74:	2222      	movs	r2, #34	; 0x22
 800aa76:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aa78:	68fb      	ldr	r3, [r7, #12]
 800aa7a:	681b      	ldr	r3, [r3, #0]
 800aa7c:	689a      	ldr	r2, [r3, #8]
 800aa7e:	68fb      	ldr	r3, [r7, #12]
 800aa80:	681b      	ldr	r3, [r3, #0]
 800aa82:	f042 0201 	orr.w	r2, r2, #1
 800aa86:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800aa88:	68fb      	ldr	r3, [r7, #12]
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aa90:	d107      	bne.n	800aaa2 <HAL_UART_Receive_IT+0x10a>
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	691b      	ldr	r3, [r3, #16]
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d103      	bne.n	800aaa2 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800aa9a:	68fb      	ldr	r3, [r7, #12]
 800aa9c:	4a0d      	ldr	r2, [pc, #52]	; (800aad4 <HAL_UART_Receive_IT+0x13c>)
 800aa9e:	661a      	str	r2, [r3, #96]	; 0x60
 800aaa0:	e002      	b.n	800aaa8 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800aaa2:	68fb      	ldr	r3, [r7, #12]
 800aaa4:	4a0c      	ldr	r2, [pc, #48]	; (800aad8 <HAL_UART_Receive_IT+0x140>)
 800aaa6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800aaa8:	68fb      	ldr	r3, [r7, #12]
 800aaaa:	2200      	movs	r2, #0
 800aaac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800aab0:	68fb      	ldr	r3, [r7, #12]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	681a      	ldr	r2, [r3, #0]
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800aabe:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800aac0:	2300      	movs	r3, #0
 800aac2:	e000      	b.n	800aac6 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800aac4:	2302      	movs	r3, #2
  }
}
 800aac6:	4618      	mov	r0, r3
 800aac8:	3714      	adds	r7, #20
 800aaca:	46bd      	mov	sp, r7
 800aacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad0:	4770      	bx	lr
 800aad2:	bf00      	nop
 800aad4:	0800b787 	.word	0x0800b787
 800aad8:	0800b6e1 	.word	0x0800b6e1

0800aadc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800aadc:	b580      	push	{r7, lr}
 800aade:	b088      	sub	sp, #32
 800aae0:	af00      	add	r7, sp, #0
 800aae2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	69db      	ldr	r3, [r3, #28]
 800aaea:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800aaec:	687b      	ldr	r3, [r7, #4]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800aaf4:	687b      	ldr	r3, [r7, #4]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	689b      	ldr	r3, [r3, #8]
 800aafa:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800aafc:	69fa      	ldr	r2, [r7, #28]
 800aafe:	f640 030f 	movw	r3, #2063	; 0x80f
 800ab02:	4013      	ands	r3, r2
 800ab04:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800ab06:	693b      	ldr	r3, [r7, #16]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d113      	bne.n	800ab34 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	f003 0320 	and.w	r3, r3, #32
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d00e      	beq.n	800ab34 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ab16:	69bb      	ldr	r3, [r7, #24]
 800ab18:	f003 0320 	and.w	r3, r3, #32
 800ab1c:	2b00      	cmp	r3, #0
 800ab1e:	d009      	beq.n	800ab34 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab24:	2b00      	cmp	r3, #0
 800ab26:	f000 8100 	beq.w	800ad2a <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800ab2a:	687b      	ldr	r3, [r7, #4]
 800ab2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab2e:	6878      	ldr	r0, [r7, #4]
 800ab30:	4798      	blx	r3
      }
      return;
 800ab32:	e0fa      	b.n	800ad2a <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ab34:	693b      	ldr	r3, [r7, #16]
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	f000 80d5 	beq.w	800ace6 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ab3c:	697b      	ldr	r3, [r7, #20]
 800ab3e:	f003 0301 	and.w	r3, r3, #1
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d105      	bne.n	800ab52 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800ab46:	69bb      	ldr	r3, [r7, #24]
 800ab48:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 80ca 	beq.w	800ace6 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ab52:	69fb      	ldr	r3, [r7, #28]
 800ab54:	f003 0301 	and.w	r3, r3, #1
 800ab58:	2b00      	cmp	r3, #0
 800ab5a:	d00e      	beq.n	800ab7a <HAL_UART_IRQHandler+0x9e>
 800ab5c:	69bb      	ldr	r3, [r7, #24]
 800ab5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ab62:	2b00      	cmp	r3, #0
 800ab64:	d009      	beq.n	800ab7a <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ab66:	687b      	ldr	r3, [r7, #4]
 800ab68:	681b      	ldr	r3, [r3, #0]
 800ab6a:	2201      	movs	r2, #1
 800ab6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab72:	f043 0201 	orr.w	r2, r3, #1
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ab7a:	69fb      	ldr	r3, [r7, #28]
 800ab7c:	f003 0302 	and.w	r3, r3, #2
 800ab80:	2b00      	cmp	r3, #0
 800ab82:	d00e      	beq.n	800aba2 <HAL_UART_IRQHandler+0xc6>
 800ab84:	697b      	ldr	r3, [r7, #20]
 800ab86:	f003 0301 	and.w	r3, r3, #1
 800ab8a:	2b00      	cmp	r3, #0
 800ab8c:	d009      	beq.n	800aba2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	681b      	ldr	r3, [r3, #0]
 800ab92:	2202      	movs	r2, #2
 800ab94:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ab9a:	f043 0204 	orr.w	r2, r3, #4
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	f003 0304 	and.w	r3, r3, #4
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d00e      	beq.n	800abca <HAL_UART_IRQHandler+0xee>
 800abac:	697b      	ldr	r3, [r7, #20]
 800abae:	f003 0301 	and.w	r3, r3, #1
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d009      	beq.n	800abca <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	2204      	movs	r2, #4
 800abbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abc2:	f043 0202 	orr.w	r2, r3, #2
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800abca:	69fb      	ldr	r3, [r7, #28]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d013      	beq.n	800abfc <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800abd4:	69bb      	ldr	r3, [r7, #24]
 800abd6:	f003 0320 	and.w	r3, r3, #32
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d104      	bne.n	800abe8 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800abde:	697b      	ldr	r3, [r7, #20]
 800abe0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d009      	beq.n	800abfc <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	2208      	movs	r2, #8
 800abee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800abf0:	687b      	ldr	r3, [r7, #4]
 800abf2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800abf4:	f043 0208 	orr.w	r2, r3, #8
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d00f      	beq.n	800ac26 <HAL_UART_IRQHandler+0x14a>
 800ac06:	69bb      	ldr	r3, [r7, #24]
 800ac08:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d00a      	beq.n	800ac26 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ac18:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac1e:	f043 0220 	orr.w	r2, r3, #32
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d07f      	beq.n	800ad2e <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800ac2e:	69fb      	ldr	r3, [r7, #28]
 800ac30:	f003 0320 	and.w	r3, r3, #32
 800ac34:	2b00      	cmp	r3, #0
 800ac36:	d00c      	beq.n	800ac52 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ac38:	69bb      	ldr	r3, [r7, #24]
 800ac3a:	f003 0320 	and.w	r3, r3, #32
 800ac3e:	2b00      	cmp	r3, #0
 800ac40:	d007      	beq.n	800ac52 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d003      	beq.n	800ac52 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ac56:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	689b      	ldr	r3, [r3, #8]
 800ac5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac62:	2b40      	cmp	r3, #64	; 0x40
 800ac64:	d004      	beq.n	800ac70 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d031      	beq.n	800acd4 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800ac70:	6878      	ldr	r0, [r7, #4]
 800ac72:	f000 fc6f 	bl	800b554 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	689b      	ldr	r3, [r3, #8]
 800ac7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac80:	2b40      	cmp	r3, #64	; 0x40
 800ac82:	d123      	bne.n	800accc <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	681b      	ldr	r3, [r3, #0]
 800ac88:	689a      	ldr	r2, [r3, #8]
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ac92:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ac98:	2b00      	cmp	r3, #0
 800ac9a:	d013      	beq.n	800acc4 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca0:	4a26      	ldr	r2, [pc, #152]	; (800ad3c <HAL_UART_IRQHandler+0x260>)
 800aca2:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7fa fe9b 	bl	80059e4 <HAL_DMA_Abort_IT>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d016      	beq.n	800ace2 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800acb8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800acba:	687a      	ldr	r2, [r7, #4]
 800acbc:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800acbe:	4610      	mov	r0, r2
 800acc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acc2:	e00e      	b.n	800ace2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800acc4:	6878      	ldr	r0, [r7, #4]
 800acc6:	f000 f845 	bl	800ad54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acca:	e00a      	b.n	800ace2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800accc:	6878      	ldr	r0, [r7, #4]
 800acce:	f000 f841 	bl	800ad54 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800acd2:	e006      	b.n	800ace2 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800acd4:	6878      	ldr	r0, [r7, #4]
 800acd6:	f000 f83d 	bl	800ad54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	2200      	movs	r2, #0
 800acde:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800ace0:	e025      	b.n	800ad2e <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ace2:	bf00      	nop
    return;
 800ace4:	e023      	b.n	800ad2e <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800ace6:	69fb      	ldr	r3, [r7, #28]
 800ace8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acec:	2b00      	cmp	r3, #0
 800acee:	d00d      	beq.n	800ad0c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800acf0:	69bb      	ldr	r3, [r7, #24]
 800acf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d008      	beq.n	800ad0c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800acfa:	687b      	ldr	r3, [r7, #4]
 800acfc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d017      	beq.n	800ad32 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ad06:	6878      	ldr	r0, [r7, #4]
 800ad08:	4798      	blx	r3
    }
    return;
 800ad0a:	e012      	b.n	800ad32 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ad0c:	69fb      	ldr	r3, [r7, #28]
 800ad0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad12:	2b00      	cmp	r3, #0
 800ad14:	d00e      	beq.n	800ad34 <HAL_UART_IRQHandler+0x258>
 800ad16:	69bb      	ldr	r3, [r7, #24]
 800ad18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d009      	beq.n	800ad34 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800ad20:	6878      	ldr	r0, [r7, #4]
 800ad22:	f000 fcc4 	bl	800b6ae <UART_EndTransmit_IT>
    return;
 800ad26:	bf00      	nop
 800ad28:	e004      	b.n	800ad34 <HAL_UART_IRQHandler+0x258>
      return;
 800ad2a:	bf00      	nop
 800ad2c:	e002      	b.n	800ad34 <HAL_UART_IRQHandler+0x258>
    return;
 800ad2e:	bf00      	nop
 800ad30:	e000      	b.n	800ad34 <HAL_UART_IRQHandler+0x258>
    return;
 800ad32:	bf00      	nop
  }

}
 800ad34:	3720      	adds	r7, #32
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	0800b595 	.word	0x0800b595

0800ad40 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ad40:	b480      	push	{r7}
 800ad42:	b083      	sub	sp, #12
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ad48:	bf00      	nop
 800ad4a:	370c      	adds	r7, #12
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr

0800ad54 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ad54:	b480      	push	{r7}
 800ad56:	b083      	sub	sp, #12
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ad5c:	bf00      	nop
 800ad5e:	370c      	adds	r7, #12
 800ad60:	46bd      	mov	sp, r7
 800ad62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad66:	4770      	bx	lr

0800ad68 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b088      	sub	sp, #32
 800ad6c:	af00      	add	r7, sp, #0
 800ad6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ad74:	2300      	movs	r3, #0
 800ad76:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ad78:	687b      	ldr	r3, [r7, #4]
 800ad7a:	689a      	ldr	r2, [r3, #8]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	691b      	ldr	r3, [r3, #16]
 800ad80:	431a      	orrs	r2, r3
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	695b      	ldr	r3, [r3, #20]
 800ad86:	431a      	orrs	r2, r3
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	69db      	ldr	r3, [r3, #28]
 800ad8c:	4313      	orrs	r3, r2
 800ad8e:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	681a      	ldr	r2, [r3, #0]
 800ad96:	4bb1      	ldr	r3, [pc, #708]	; (800b05c <UART_SetConfig+0x2f4>)
 800ad98:	4013      	ands	r3, r2
 800ad9a:	687a      	ldr	r2, [r7, #4]
 800ad9c:	6812      	ldr	r2, [r2, #0]
 800ad9e:	6939      	ldr	r1, [r7, #16]
 800ada0:	430b      	orrs	r3, r1
 800ada2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	685b      	ldr	r3, [r3, #4]
 800adaa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	68da      	ldr	r2, [r3, #12]
 800adb2:	687b      	ldr	r3, [r7, #4]
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	430a      	orrs	r2, r1
 800adb8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	699b      	ldr	r3, [r3, #24]
 800adbe:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800adc0:	687b      	ldr	r3, [r7, #4]
 800adc2:	6a1b      	ldr	r3, [r3, #32]
 800adc4:	693a      	ldr	r2, [r7, #16]
 800adc6:	4313      	orrs	r3, r2
 800adc8:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800adca:	687b      	ldr	r3, [r7, #4]
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	689b      	ldr	r3, [r3, #8]
 800add0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	693a      	ldr	r2, [r7, #16]
 800adda:	430a      	orrs	r2, r1
 800addc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	4a9f      	ldr	r2, [pc, #636]	; (800b060 <UART_SetConfig+0x2f8>)
 800ade4:	4293      	cmp	r3, r2
 800ade6:	d121      	bne.n	800ae2c <UART_SetConfig+0xc4>
 800ade8:	4b9e      	ldr	r3, [pc, #632]	; (800b064 <UART_SetConfig+0x2fc>)
 800adea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adee:	f003 0303 	and.w	r3, r3, #3
 800adf2:	2b03      	cmp	r3, #3
 800adf4:	d816      	bhi.n	800ae24 <UART_SetConfig+0xbc>
 800adf6:	a201      	add	r2, pc, #4	; (adr r2, 800adfc <UART_SetConfig+0x94>)
 800adf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800adfc:	0800ae0d 	.word	0x0800ae0d
 800ae00:	0800ae19 	.word	0x0800ae19
 800ae04:	0800ae13 	.word	0x0800ae13
 800ae08:	0800ae1f 	.word	0x0800ae1f
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	77fb      	strb	r3, [r7, #31]
 800ae10:	e151      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae12:	2302      	movs	r3, #2
 800ae14:	77fb      	strb	r3, [r7, #31]
 800ae16:	e14e      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae18:	2304      	movs	r3, #4
 800ae1a:	77fb      	strb	r3, [r7, #31]
 800ae1c:	e14b      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae1e:	2308      	movs	r3, #8
 800ae20:	77fb      	strb	r3, [r7, #31]
 800ae22:	e148      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae24:	2310      	movs	r3, #16
 800ae26:	77fb      	strb	r3, [r7, #31]
 800ae28:	bf00      	nop
 800ae2a:	e144      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae2c:	687b      	ldr	r3, [r7, #4]
 800ae2e:	681b      	ldr	r3, [r3, #0]
 800ae30:	4a8d      	ldr	r2, [pc, #564]	; (800b068 <UART_SetConfig+0x300>)
 800ae32:	4293      	cmp	r3, r2
 800ae34:	d134      	bne.n	800aea0 <UART_SetConfig+0x138>
 800ae36:	4b8b      	ldr	r3, [pc, #556]	; (800b064 <UART_SetConfig+0x2fc>)
 800ae38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae3c:	f003 030c 	and.w	r3, r3, #12
 800ae40:	2b0c      	cmp	r3, #12
 800ae42:	d829      	bhi.n	800ae98 <UART_SetConfig+0x130>
 800ae44:	a201      	add	r2, pc, #4	; (adr r2, 800ae4c <UART_SetConfig+0xe4>)
 800ae46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ae4a:	bf00      	nop
 800ae4c:	0800ae81 	.word	0x0800ae81
 800ae50:	0800ae99 	.word	0x0800ae99
 800ae54:	0800ae99 	.word	0x0800ae99
 800ae58:	0800ae99 	.word	0x0800ae99
 800ae5c:	0800ae8d 	.word	0x0800ae8d
 800ae60:	0800ae99 	.word	0x0800ae99
 800ae64:	0800ae99 	.word	0x0800ae99
 800ae68:	0800ae99 	.word	0x0800ae99
 800ae6c:	0800ae87 	.word	0x0800ae87
 800ae70:	0800ae99 	.word	0x0800ae99
 800ae74:	0800ae99 	.word	0x0800ae99
 800ae78:	0800ae99 	.word	0x0800ae99
 800ae7c:	0800ae93 	.word	0x0800ae93
 800ae80:	2300      	movs	r3, #0
 800ae82:	77fb      	strb	r3, [r7, #31]
 800ae84:	e117      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae86:	2302      	movs	r3, #2
 800ae88:	77fb      	strb	r3, [r7, #31]
 800ae8a:	e114      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae8c:	2304      	movs	r3, #4
 800ae8e:	77fb      	strb	r3, [r7, #31]
 800ae90:	e111      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae92:	2308      	movs	r3, #8
 800ae94:	77fb      	strb	r3, [r7, #31]
 800ae96:	e10e      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800ae98:	2310      	movs	r3, #16
 800ae9a:	77fb      	strb	r3, [r7, #31]
 800ae9c:	bf00      	nop
 800ae9e:	e10a      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	4a71      	ldr	r2, [pc, #452]	; (800b06c <UART_SetConfig+0x304>)
 800aea6:	4293      	cmp	r3, r2
 800aea8:	d120      	bne.n	800aeec <UART_SetConfig+0x184>
 800aeaa:	4b6e      	ldr	r3, [pc, #440]	; (800b064 <UART_SetConfig+0x2fc>)
 800aeac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aeb0:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aeb4:	2b10      	cmp	r3, #16
 800aeb6:	d00f      	beq.n	800aed8 <UART_SetConfig+0x170>
 800aeb8:	2b10      	cmp	r3, #16
 800aeba:	d802      	bhi.n	800aec2 <UART_SetConfig+0x15a>
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d005      	beq.n	800aecc <UART_SetConfig+0x164>
 800aec0:	e010      	b.n	800aee4 <UART_SetConfig+0x17c>
 800aec2:	2b20      	cmp	r3, #32
 800aec4:	d005      	beq.n	800aed2 <UART_SetConfig+0x16a>
 800aec6:	2b30      	cmp	r3, #48	; 0x30
 800aec8:	d009      	beq.n	800aede <UART_SetConfig+0x176>
 800aeca:	e00b      	b.n	800aee4 <UART_SetConfig+0x17c>
 800aecc:	2300      	movs	r3, #0
 800aece:	77fb      	strb	r3, [r7, #31]
 800aed0:	e0f1      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aed2:	2302      	movs	r3, #2
 800aed4:	77fb      	strb	r3, [r7, #31]
 800aed6:	e0ee      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aed8:	2304      	movs	r3, #4
 800aeda:	77fb      	strb	r3, [r7, #31]
 800aedc:	e0eb      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aede:	2308      	movs	r3, #8
 800aee0:	77fb      	strb	r3, [r7, #31]
 800aee2:	e0e8      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aee4:	2310      	movs	r3, #16
 800aee6:	77fb      	strb	r3, [r7, #31]
 800aee8:	bf00      	nop
 800aeea:	e0e4      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a5f      	ldr	r2, [pc, #380]	; (800b070 <UART_SetConfig+0x308>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d120      	bne.n	800af38 <UART_SetConfig+0x1d0>
 800aef6:	4b5b      	ldr	r3, [pc, #364]	; (800b064 <UART_SetConfig+0x2fc>)
 800aef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aefc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800af00:	2b40      	cmp	r3, #64	; 0x40
 800af02:	d00f      	beq.n	800af24 <UART_SetConfig+0x1bc>
 800af04:	2b40      	cmp	r3, #64	; 0x40
 800af06:	d802      	bhi.n	800af0e <UART_SetConfig+0x1a6>
 800af08:	2b00      	cmp	r3, #0
 800af0a:	d005      	beq.n	800af18 <UART_SetConfig+0x1b0>
 800af0c:	e010      	b.n	800af30 <UART_SetConfig+0x1c8>
 800af0e:	2b80      	cmp	r3, #128	; 0x80
 800af10:	d005      	beq.n	800af1e <UART_SetConfig+0x1b6>
 800af12:	2bc0      	cmp	r3, #192	; 0xc0
 800af14:	d009      	beq.n	800af2a <UART_SetConfig+0x1c2>
 800af16:	e00b      	b.n	800af30 <UART_SetConfig+0x1c8>
 800af18:	2300      	movs	r3, #0
 800af1a:	77fb      	strb	r3, [r7, #31]
 800af1c:	e0cb      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af1e:	2302      	movs	r3, #2
 800af20:	77fb      	strb	r3, [r7, #31]
 800af22:	e0c8      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af24:	2304      	movs	r3, #4
 800af26:	77fb      	strb	r3, [r7, #31]
 800af28:	e0c5      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af2a:	2308      	movs	r3, #8
 800af2c:	77fb      	strb	r3, [r7, #31]
 800af2e:	e0c2      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af30:	2310      	movs	r3, #16
 800af32:	77fb      	strb	r3, [r7, #31]
 800af34:	bf00      	nop
 800af36:	e0be      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	681b      	ldr	r3, [r3, #0]
 800af3c:	4a4d      	ldr	r2, [pc, #308]	; (800b074 <UART_SetConfig+0x30c>)
 800af3e:	4293      	cmp	r3, r2
 800af40:	d124      	bne.n	800af8c <UART_SetConfig+0x224>
 800af42:	4b48      	ldr	r3, [pc, #288]	; (800b064 <UART_SetConfig+0x2fc>)
 800af44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800af4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af50:	d012      	beq.n	800af78 <UART_SetConfig+0x210>
 800af52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af56:	d802      	bhi.n	800af5e <UART_SetConfig+0x1f6>
 800af58:	2b00      	cmp	r3, #0
 800af5a:	d007      	beq.n	800af6c <UART_SetConfig+0x204>
 800af5c:	e012      	b.n	800af84 <UART_SetConfig+0x21c>
 800af5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800af62:	d006      	beq.n	800af72 <UART_SetConfig+0x20a>
 800af64:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800af68:	d009      	beq.n	800af7e <UART_SetConfig+0x216>
 800af6a:	e00b      	b.n	800af84 <UART_SetConfig+0x21c>
 800af6c:	2300      	movs	r3, #0
 800af6e:	77fb      	strb	r3, [r7, #31]
 800af70:	e0a1      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af72:	2302      	movs	r3, #2
 800af74:	77fb      	strb	r3, [r7, #31]
 800af76:	e09e      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af78:	2304      	movs	r3, #4
 800af7a:	77fb      	strb	r3, [r7, #31]
 800af7c:	e09b      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af7e:	2308      	movs	r3, #8
 800af80:	77fb      	strb	r3, [r7, #31]
 800af82:	e098      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af84:	2310      	movs	r3, #16
 800af86:	77fb      	strb	r3, [r7, #31]
 800af88:	bf00      	nop
 800af8a:	e094      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a39      	ldr	r2, [pc, #228]	; (800b078 <UART_SetConfig+0x310>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d124      	bne.n	800afe0 <UART_SetConfig+0x278>
 800af96:	4b33      	ldr	r3, [pc, #204]	; (800b064 <UART_SetConfig+0x2fc>)
 800af98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800af9c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800afa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afa4:	d012      	beq.n	800afcc <UART_SetConfig+0x264>
 800afa6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800afaa:	d802      	bhi.n	800afb2 <UART_SetConfig+0x24a>
 800afac:	2b00      	cmp	r3, #0
 800afae:	d007      	beq.n	800afc0 <UART_SetConfig+0x258>
 800afb0:	e012      	b.n	800afd8 <UART_SetConfig+0x270>
 800afb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800afb6:	d006      	beq.n	800afc6 <UART_SetConfig+0x25e>
 800afb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800afbc:	d009      	beq.n	800afd2 <UART_SetConfig+0x26a>
 800afbe:	e00b      	b.n	800afd8 <UART_SetConfig+0x270>
 800afc0:	2301      	movs	r3, #1
 800afc2:	77fb      	strb	r3, [r7, #31]
 800afc4:	e077      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800afc6:	2302      	movs	r3, #2
 800afc8:	77fb      	strb	r3, [r7, #31]
 800afca:	e074      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800afcc:	2304      	movs	r3, #4
 800afce:	77fb      	strb	r3, [r7, #31]
 800afd0:	e071      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800afd2:	2308      	movs	r3, #8
 800afd4:	77fb      	strb	r3, [r7, #31]
 800afd6:	e06e      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800afd8:	2310      	movs	r3, #16
 800afda:	77fb      	strb	r3, [r7, #31]
 800afdc:	bf00      	nop
 800afde:	e06a      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	4a25      	ldr	r2, [pc, #148]	; (800b07c <UART_SetConfig+0x314>)
 800afe6:	4293      	cmp	r3, r2
 800afe8:	d124      	bne.n	800b034 <UART_SetConfig+0x2cc>
 800afea:	4b1e      	ldr	r3, [pc, #120]	; (800b064 <UART_SetConfig+0x2fc>)
 800afec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aff0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800aff4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800aff8:	d012      	beq.n	800b020 <UART_SetConfig+0x2b8>
 800affa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800affe:	d802      	bhi.n	800b006 <UART_SetConfig+0x29e>
 800b000:	2b00      	cmp	r3, #0
 800b002:	d007      	beq.n	800b014 <UART_SetConfig+0x2ac>
 800b004:	e012      	b.n	800b02c <UART_SetConfig+0x2c4>
 800b006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b00a:	d006      	beq.n	800b01a <UART_SetConfig+0x2b2>
 800b00c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800b010:	d009      	beq.n	800b026 <UART_SetConfig+0x2be>
 800b012:	e00b      	b.n	800b02c <UART_SetConfig+0x2c4>
 800b014:	2300      	movs	r3, #0
 800b016:	77fb      	strb	r3, [r7, #31]
 800b018:	e04d      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b01a:	2302      	movs	r3, #2
 800b01c:	77fb      	strb	r3, [r7, #31]
 800b01e:	e04a      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b020:	2304      	movs	r3, #4
 800b022:	77fb      	strb	r3, [r7, #31]
 800b024:	e047      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b026:	2308      	movs	r3, #8
 800b028:	77fb      	strb	r3, [r7, #31]
 800b02a:	e044      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b02c:	2310      	movs	r3, #16
 800b02e:	77fb      	strb	r3, [r7, #31]
 800b030:	bf00      	nop
 800b032:	e040      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	4a11      	ldr	r2, [pc, #68]	; (800b080 <UART_SetConfig+0x318>)
 800b03a:	4293      	cmp	r3, r2
 800b03c:	d139      	bne.n	800b0b2 <UART_SetConfig+0x34a>
 800b03e:	4b09      	ldr	r3, [pc, #36]	; (800b064 <UART_SetConfig+0x2fc>)
 800b040:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b044:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800b048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b04c:	d027      	beq.n	800b09e <UART_SetConfig+0x336>
 800b04e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800b052:	d817      	bhi.n	800b084 <UART_SetConfig+0x31c>
 800b054:	2b00      	cmp	r3, #0
 800b056:	d01c      	beq.n	800b092 <UART_SetConfig+0x32a>
 800b058:	e027      	b.n	800b0aa <UART_SetConfig+0x342>
 800b05a:	bf00      	nop
 800b05c:	efff69f3 	.word	0xefff69f3
 800b060:	40011000 	.word	0x40011000
 800b064:	40023800 	.word	0x40023800
 800b068:	40004400 	.word	0x40004400
 800b06c:	40004800 	.word	0x40004800
 800b070:	40004c00 	.word	0x40004c00
 800b074:	40005000 	.word	0x40005000
 800b078:	40011400 	.word	0x40011400
 800b07c:	40007800 	.word	0x40007800
 800b080:	40007c00 	.word	0x40007c00
 800b084:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b088:	d006      	beq.n	800b098 <UART_SetConfig+0x330>
 800b08a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800b08e:	d009      	beq.n	800b0a4 <UART_SetConfig+0x33c>
 800b090:	e00b      	b.n	800b0aa <UART_SetConfig+0x342>
 800b092:	2300      	movs	r3, #0
 800b094:	77fb      	strb	r3, [r7, #31]
 800b096:	e00e      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b098:	2302      	movs	r3, #2
 800b09a:	77fb      	strb	r3, [r7, #31]
 800b09c:	e00b      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b09e:	2304      	movs	r3, #4
 800b0a0:	77fb      	strb	r3, [r7, #31]
 800b0a2:	e008      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b0a4:	2308      	movs	r3, #8
 800b0a6:	77fb      	strb	r3, [r7, #31]
 800b0a8:	e005      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b0aa:	2310      	movs	r3, #16
 800b0ac:	77fb      	strb	r3, [r7, #31]
 800b0ae:	bf00      	nop
 800b0b0:	e001      	b.n	800b0b6 <UART_SetConfig+0x34e>
 800b0b2:	2310      	movs	r3, #16
 800b0b4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	69db      	ldr	r3, [r3, #28]
 800b0ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0be:	d17f      	bne.n	800b1c0 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800b0c0:	7ffb      	ldrb	r3, [r7, #31]
 800b0c2:	2b08      	cmp	r3, #8
 800b0c4:	d85c      	bhi.n	800b180 <UART_SetConfig+0x418>
 800b0c6:	a201      	add	r2, pc, #4	; (adr r2, 800b0cc <UART_SetConfig+0x364>)
 800b0c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b0cc:	0800b0f1 	.word	0x0800b0f1
 800b0d0:	0800b111 	.word	0x0800b111
 800b0d4:	0800b131 	.word	0x0800b131
 800b0d8:	0800b181 	.word	0x0800b181
 800b0dc:	0800b149 	.word	0x0800b149
 800b0e0:	0800b181 	.word	0x0800b181
 800b0e4:	0800b181 	.word	0x0800b181
 800b0e8:	0800b181 	.word	0x0800b181
 800b0ec:	0800b169 	.word	0x0800b169
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b0f0:	f7fd f892 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 800b0f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b0f6:	68fb      	ldr	r3, [r7, #12]
 800b0f8:	005a      	lsls	r2, r3, #1
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685b      	ldr	r3, [r3, #4]
 800b0fe:	085b      	lsrs	r3, r3, #1
 800b100:	441a      	add	r2, r3
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	685b      	ldr	r3, [r3, #4]
 800b106:	fbb2 f3f3 	udiv	r3, r2, r3
 800b10a:	b29b      	uxth	r3, r3
 800b10c:	61bb      	str	r3, [r7, #24]
        break;
 800b10e:	e03a      	b.n	800b186 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b110:	f7fd f896 	bl	8008240 <HAL_RCC_GetPCLK2Freq>
 800b114:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b116:	68fb      	ldr	r3, [r7, #12]
 800b118:	005a      	lsls	r2, r3, #1
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	085b      	lsrs	r3, r3, #1
 800b120:	441a      	add	r2, r3
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	fbb2 f3f3 	udiv	r3, r2, r3
 800b12a:	b29b      	uxth	r3, r3
 800b12c:	61bb      	str	r3, [r7, #24]
        break;
 800b12e:	e02a      	b.n	800b186 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685b      	ldr	r3, [r3, #4]
 800b134:	085a      	lsrs	r2, r3, #1
 800b136:	4b5f      	ldr	r3, [pc, #380]	; (800b2b4 <UART_SetConfig+0x54c>)
 800b138:	4413      	add	r3, r2
 800b13a:	687a      	ldr	r2, [r7, #4]
 800b13c:	6852      	ldr	r2, [r2, #4]
 800b13e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b142:	b29b      	uxth	r3, r3
 800b144:	61bb      	str	r3, [r7, #24]
        break;
 800b146:	e01e      	b.n	800b186 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b148:	f7fc ffa8 	bl	800809c <HAL_RCC_GetSysClockFreq>
 800b14c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b14e:	68fb      	ldr	r3, [r7, #12]
 800b150:	005a      	lsls	r2, r3, #1
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	685b      	ldr	r3, [r3, #4]
 800b156:	085b      	lsrs	r3, r3, #1
 800b158:	441a      	add	r2, r3
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	fbb2 f3f3 	udiv	r3, r2, r3
 800b162:	b29b      	uxth	r3, r3
 800b164:	61bb      	str	r3, [r7, #24]
        break;
 800b166:	e00e      	b.n	800b186 <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685b      	ldr	r3, [r3, #4]
 800b16c:	085b      	lsrs	r3, r3, #1
 800b16e:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	685b      	ldr	r3, [r3, #4]
 800b176:	fbb2 f3f3 	udiv	r3, r2, r3
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	61bb      	str	r3, [r7, #24]
        break;
 800b17e:	e002      	b.n	800b186 <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800b180:	2301      	movs	r3, #1
 800b182:	75fb      	strb	r3, [r7, #23]
        break;
 800b184:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b186:	69bb      	ldr	r3, [r7, #24]
 800b188:	2b0f      	cmp	r3, #15
 800b18a:	d916      	bls.n	800b1ba <UART_SetConfig+0x452>
 800b18c:	69bb      	ldr	r3, [r7, #24]
 800b18e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b192:	d212      	bcs.n	800b1ba <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b194:	69bb      	ldr	r3, [r7, #24]
 800b196:	b29b      	uxth	r3, r3
 800b198:	f023 030f 	bic.w	r3, r3, #15
 800b19c:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b19e:	69bb      	ldr	r3, [r7, #24]
 800b1a0:	085b      	lsrs	r3, r3, #1
 800b1a2:	b29b      	uxth	r3, r3
 800b1a4:	f003 0307 	and.w	r3, r3, #7
 800b1a8:	b29a      	uxth	r2, r3
 800b1aa:	897b      	ldrh	r3, [r7, #10]
 800b1ac:	4313      	orrs	r3, r2
 800b1ae:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	897a      	ldrh	r2, [r7, #10]
 800b1b6:	60da      	str	r2, [r3, #12]
 800b1b8:	e070      	b.n	800b29c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	75fb      	strb	r3, [r7, #23]
 800b1be:	e06d      	b.n	800b29c <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800b1c0:	7ffb      	ldrb	r3, [r7, #31]
 800b1c2:	2b08      	cmp	r3, #8
 800b1c4:	d859      	bhi.n	800b27a <UART_SetConfig+0x512>
 800b1c6:	a201      	add	r2, pc, #4	; (adr r2, 800b1cc <UART_SetConfig+0x464>)
 800b1c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b1cc:	0800b1f1 	.word	0x0800b1f1
 800b1d0:	0800b20f 	.word	0x0800b20f
 800b1d4:	0800b22d 	.word	0x0800b22d
 800b1d8:	0800b27b 	.word	0x0800b27b
 800b1dc:	0800b245 	.word	0x0800b245
 800b1e0:	0800b27b 	.word	0x0800b27b
 800b1e4:	0800b27b 	.word	0x0800b27b
 800b1e8:	0800b27b 	.word	0x0800b27b
 800b1ec:	0800b263 	.word	0x0800b263
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b1f0:	f7fd f812 	bl	8008218 <HAL_RCC_GetPCLK1Freq>
 800b1f4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	685b      	ldr	r3, [r3, #4]
 800b1fa:	085a      	lsrs	r2, r3, #1
 800b1fc:	68fb      	ldr	r3, [r7, #12]
 800b1fe:	441a      	add	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	685b      	ldr	r3, [r3, #4]
 800b204:	fbb2 f3f3 	udiv	r3, r2, r3
 800b208:	b29b      	uxth	r3, r3
 800b20a:	61bb      	str	r3, [r7, #24]
        break;
 800b20c:	e038      	b.n	800b280 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b20e:	f7fd f817 	bl	8008240 <HAL_RCC_GetPCLK2Freq>
 800b212:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	685b      	ldr	r3, [r3, #4]
 800b218:	085a      	lsrs	r2, r3, #1
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	441a      	add	r2, r3
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	685b      	ldr	r3, [r3, #4]
 800b222:	fbb2 f3f3 	udiv	r3, r2, r3
 800b226:	b29b      	uxth	r3, r3
 800b228:	61bb      	str	r3, [r7, #24]
        break;
 800b22a:	e029      	b.n	800b280 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	685b      	ldr	r3, [r3, #4]
 800b230:	085a      	lsrs	r2, r3, #1
 800b232:	4b21      	ldr	r3, [pc, #132]	; (800b2b8 <UART_SetConfig+0x550>)
 800b234:	4413      	add	r3, r2
 800b236:	687a      	ldr	r2, [r7, #4]
 800b238:	6852      	ldr	r2, [r2, #4]
 800b23a:	fbb3 f3f2 	udiv	r3, r3, r2
 800b23e:	b29b      	uxth	r3, r3
 800b240:	61bb      	str	r3, [r7, #24]
        break;
 800b242:	e01d      	b.n	800b280 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b244:	f7fc ff2a 	bl	800809c <HAL_RCC_GetSysClockFreq>
 800b248:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	085a      	lsrs	r2, r3, #1
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	441a      	add	r2, r3
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	685b      	ldr	r3, [r3, #4]
 800b258:	fbb2 f3f3 	udiv	r3, r2, r3
 800b25c:	b29b      	uxth	r3, r3
 800b25e:	61bb      	str	r3, [r7, #24]
        break;
 800b260:	e00e      	b.n	800b280 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	685b      	ldr	r3, [r3, #4]
 800b266:	085b      	lsrs	r3, r3, #1
 800b268:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	685b      	ldr	r3, [r3, #4]
 800b270:	fbb2 f3f3 	udiv	r3, r2, r3
 800b274:	b29b      	uxth	r3, r3
 800b276:	61bb      	str	r3, [r7, #24]
        break;
 800b278:	e002      	b.n	800b280 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b27a:	2301      	movs	r3, #1
 800b27c:	75fb      	strb	r3, [r7, #23]
        break;
 800b27e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b280:	69bb      	ldr	r3, [r7, #24]
 800b282:	2b0f      	cmp	r3, #15
 800b284:	d908      	bls.n	800b298 <UART_SetConfig+0x530>
 800b286:	69bb      	ldr	r3, [r7, #24]
 800b288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b28c:	d204      	bcs.n	800b298 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	69ba      	ldr	r2, [r7, #24]
 800b294:	60da      	str	r2, [r3, #12]
 800b296:	e001      	b.n	800b29c <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b298:	2301      	movs	r3, #1
 800b29a:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	2200      	movs	r2, #0
 800b2a0:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	2200      	movs	r2, #0
 800b2a6:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b2a8:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2aa:	4618      	mov	r0, r3
 800b2ac:	3720      	adds	r7, #32
 800b2ae:	46bd      	mov	sp, r7
 800b2b0:	bd80      	pop	{r7, pc}
 800b2b2:	bf00      	nop
 800b2b4:	01e84800 	.word	0x01e84800
 800b2b8:	00f42400 	.word	0x00f42400

0800b2bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b2bc:	b480      	push	{r7}
 800b2be:	b083      	sub	sp, #12
 800b2c0:	af00      	add	r7, sp, #0
 800b2c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c8:	f003 0301 	and.w	r3, r3, #1
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d00a      	beq.n	800b2e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	685b      	ldr	r3, [r3, #4]
 800b2d6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b2de:	687b      	ldr	r3, [r7, #4]
 800b2e0:	681b      	ldr	r3, [r3, #0]
 800b2e2:	430a      	orrs	r2, r1
 800b2e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2ea:	f003 0302 	and.w	r3, r3, #2
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d00a      	beq.n	800b308 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b2f2:	687b      	ldr	r3, [r7, #4]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	685b      	ldr	r3, [r3, #4]
 800b2f8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b2fc:	687b      	ldr	r3, [r7, #4]
 800b2fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	430a      	orrs	r2, r1
 800b306:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	f003 0304 	and.w	r3, r3, #4
 800b310:	2b00      	cmp	r3, #0
 800b312:	d00a      	beq.n	800b32a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	685b      	ldr	r3, [r3, #4]
 800b31a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	430a      	orrs	r2, r1
 800b328:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b32e:	f003 0308 	and.w	r3, r3, #8
 800b332:	2b00      	cmp	r3, #0
 800b334:	d00a      	beq.n	800b34c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	685b      	ldr	r3, [r3, #4]
 800b33c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	430a      	orrs	r2, r1
 800b34a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b350:	f003 0310 	and.w	r3, r3, #16
 800b354:	2b00      	cmp	r3, #0
 800b356:	d00a      	beq.n	800b36e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	689b      	ldr	r3, [r3, #8]
 800b35e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	430a      	orrs	r2, r1
 800b36c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b372:	f003 0320 	and.w	r3, r3, #32
 800b376:	2b00      	cmp	r3, #0
 800b378:	d00a      	beq.n	800b390 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	689b      	ldr	r3, [r3, #8]
 800b380:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	681b      	ldr	r3, [r3, #0]
 800b38c:	430a      	orrs	r2, r1
 800b38e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b398:	2b00      	cmp	r3, #0
 800b39a:	d01a      	beq.n	800b3d2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	681b      	ldr	r3, [r3, #0]
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b3aa:	687b      	ldr	r3, [r7, #4]
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	430a      	orrs	r2, r1
 800b3b0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3b6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b3ba:	d10a      	bne.n	800b3d2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	685b      	ldr	r3, [r3, #4]
 800b3c2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	430a      	orrs	r2, r1
 800b3d0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b3d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d00a      	beq.n	800b3f4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b3de:	687b      	ldr	r3, [r7, #4]
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	685b      	ldr	r3, [r3, #4]
 800b3e4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	681b      	ldr	r3, [r3, #0]
 800b3f0:	430a      	orrs	r2, r1
 800b3f2:	605a      	str	r2, [r3, #4]
  }
}
 800b3f4:	bf00      	nop
 800b3f6:	370c      	adds	r7, #12
 800b3f8:	46bd      	mov	sp, r7
 800b3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3fe:	4770      	bx	lr

0800b400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b400:	b580      	push	{r7, lr}
 800b402:	b086      	sub	sp, #24
 800b404:	af02      	add	r7, sp, #8
 800b406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	2200      	movs	r2, #0
 800b40c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b40e:	f7f9 fc25 	bl	8004c5c <HAL_GetTick>
 800b412:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	f003 0308 	and.w	r3, r3, #8
 800b41e:	2b08      	cmp	r3, #8
 800b420:	d10e      	bne.n	800b440 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b422:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b426:	9300      	str	r3, [sp, #0]
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	2200      	movs	r2, #0
 800b42c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 f814 	bl	800b45e <UART_WaitOnFlagUntilTimeout>
 800b436:	4603      	mov	r3, r0
 800b438:	2b00      	cmp	r3, #0
 800b43a:	d001      	beq.n	800b440 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b43c:	2303      	movs	r3, #3
 800b43e:	e00a      	b.n	800b456 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	2220      	movs	r2, #32
 800b444:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b446:	687b      	ldr	r3, [r7, #4]
 800b448:	2220      	movs	r2, #32
 800b44a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	2200      	movs	r2, #0
 800b450:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b454:	2300      	movs	r3, #0
}
 800b456:	4618      	mov	r0, r3
 800b458:	3710      	adds	r7, #16
 800b45a:	46bd      	mov	sp, r7
 800b45c:	bd80      	pop	{r7, pc}

0800b45e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b45e:	b580      	push	{r7, lr}
 800b460:	b084      	sub	sp, #16
 800b462:	af00      	add	r7, sp, #0
 800b464:	60f8      	str	r0, [r7, #12]
 800b466:	60b9      	str	r1, [r7, #8]
 800b468:	603b      	str	r3, [r7, #0]
 800b46a:	4613      	mov	r3, r2
 800b46c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b46e:	e05d      	b.n	800b52c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b470:	69bb      	ldr	r3, [r7, #24]
 800b472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b476:	d059      	beq.n	800b52c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b478:	f7f9 fbf0 	bl	8004c5c <HAL_GetTick>
 800b47c:	4602      	mov	r2, r0
 800b47e:	683b      	ldr	r3, [r7, #0]
 800b480:	1ad3      	subs	r3, r2, r3
 800b482:	69ba      	ldr	r2, [r7, #24]
 800b484:	429a      	cmp	r2, r3
 800b486:	d302      	bcc.n	800b48e <UART_WaitOnFlagUntilTimeout+0x30>
 800b488:	69bb      	ldr	r3, [r7, #24]
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d11b      	bne.n	800b4c6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b48e:	68fb      	ldr	r3, [r7, #12]
 800b490:	681b      	ldr	r3, [r3, #0]
 800b492:	681a      	ldr	r2, [r3, #0]
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	681b      	ldr	r3, [r3, #0]
 800b498:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b49c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	689a      	ldr	r2, [r3, #8]
 800b4a4:	68fb      	ldr	r3, [r7, #12]
 800b4a6:	681b      	ldr	r3, [r3, #0]
 800b4a8:	f022 0201 	bic.w	r2, r2, #1
 800b4ac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	2220      	movs	r2, #32
 800b4b2:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b4b4:	68fb      	ldr	r3, [r7, #12]
 800b4b6:	2220      	movs	r2, #32
 800b4b8:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b4ba:	68fb      	ldr	r3, [r7, #12]
 800b4bc:	2200      	movs	r2, #0
 800b4be:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b4c2:	2303      	movs	r3, #3
 800b4c4:	e042      	b.n	800b54c <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	681b      	ldr	r3, [r3, #0]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f003 0304 	and.w	r3, r3, #4
 800b4d0:	2b00      	cmp	r3, #0
 800b4d2:	d02b      	beq.n	800b52c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	69db      	ldr	r3, [r3, #28]
 800b4da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b4de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b4e2:	d123      	bne.n	800b52c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	681b      	ldr	r3, [r3, #0]
 800b4e8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b4ec:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	681a      	ldr	r2, [r3, #0]
 800b4f4:	68fb      	ldr	r3, [r7, #12]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b4fc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	689a      	ldr	r2, [r3, #8]
 800b504:	68fb      	ldr	r3, [r7, #12]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	f022 0201 	bic.w	r2, r2, #1
 800b50c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	2220      	movs	r2, #32
 800b512:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b514:	68fb      	ldr	r3, [r7, #12]
 800b516:	2220      	movs	r2, #32
 800b518:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	2220      	movs	r2, #32
 800b51e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	2200      	movs	r2, #0
 800b524:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b528:	2303      	movs	r3, #3
 800b52a:	e00f      	b.n	800b54c <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b52c:	68fb      	ldr	r3, [r7, #12]
 800b52e:	681b      	ldr	r3, [r3, #0]
 800b530:	69da      	ldr	r2, [r3, #28]
 800b532:	68bb      	ldr	r3, [r7, #8]
 800b534:	4013      	ands	r3, r2
 800b536:	68ba      	ldr	r2, [r7, #8]
 800b538:	429a      	cmp	r2, r3
 800b53a:	bf0c      	ite	eq
 800b53c:	2301      	moveq	r3, #1
 800b53e:	2300      	movne	r3, #0
 800b540:	b2db      	uxtb	r3, r3
 800b542:	461a      	mov	r2, r3
 800b544:	79fb      	ldrb	r3, [r7, #7]
 800b546:	429a      	cmp	r2, r3
 800b548:	d092      	beq.n	800b470 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b54a:	2300      	movs	r3, #0
}
 800b54c:	4618      	mov	r0, r3
 800b54e:	3710      	adds	r7, #16
 800b550:	46bd      	mov	sp, r7
 800b552:	bd80      	pop	{r7, pc}

0800b554 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b554:	b480      	push	{r7}
 800b556:	b083      	sub	sp, #12
 800b558:	af00      	add	r7, sp, #0
 800b55a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b55c:	687b      	ldr	r3, [r7, #4]
 800b55e:	681b      	ldr	r3, [r3, #0]
 800b560:	681a      	ldr	r2, [r3, #0]
 800b562:	687b      	ldr	r3, [r7, #4]
 800b564:	681b      	ldr	r3, [r3, #0]
 800b566:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b56a:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	689a      	ldr	r2, [r3, #8]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0201 	bic.w	r2, r2, #1
 800b57a:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	2220      	movs	r2, #32
 800b580:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	2200      	movs	r2, #0
 800b586:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b588:	bf00      	nop
 800b58a:	370c      	adds	r7, #12
 800b58c:	46bd      	mov	sp, r7
 800b58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b592:	4770      	bx	lr

0800b594 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b084      	sub	sp, #16
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b5a2:	68fb      	ldr	r3, [r7, #12]
 800b5a4:	2200      	movs	r2, #0
 800b5a6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	2200      	movs	r2, #0
 800b5ae:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b5b2:	68f8      	ldr	r0, [r7, #12]
 800b5b4:	f7ff fbce 	bl	800ad54 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b5b8:	bf00      	nop
 800b5ba:	3710      	adds	r7, #16
 800b5bc:	46bd      	mov	sp, r7
 800b5be:	bd80      	pop	{r7, pc}

0800b5c0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b5c0:	b480      	push	{r7}
 800b5c2:	b083      	sub	sp, #12
 800b5c4:	af00      	add	r7, sp, #0
 800b5c6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b5cc:	2b21      	cmp	r3, #33	; 0x21
 800b5ce:	d12a      	bne.n	800b626 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b5d6:	b29b      	uxth	r3, r3
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d110      	bne.n	800b5fe <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	681a      	ldr	r2, [r3, #0]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5ea:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b5ec:	687b      	ldr	r3, [r7, #4]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	681a      	ldr	r2, [r3, #0]
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	681b      	ldr	r3, [r3, #0]
 800b5f6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b5fa:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b5fc:	e013      	b.n	800b626 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b5fe:	687b      	ldr	r3, [r7, #4]
 800b600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b602:	781a      	ldrb	r2, [r3, #0]
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b60e:	1c5a      	adds	r2, r3, #1
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b61a:	b29b      	uxth	r3, r3
 800b61c:	3b01      	subs	r3, #1
 800b61e:	b29a      	uxth	r2, r3
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b626:	bf00      	nop
 800b628:	370c      	adds	r7, #12
 800b62a:	46bd      	mov	sp, r7
 800b62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b630:	4770      	bx	lr

0800b632 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b632:	b480      	push	{r7}
 800b634:	b085      	sub	sp, #20
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b63e:	2b21      	cmp	r3, #33	; 0x21
 800b640:	d12f      	bne.n	800b6a2 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b648:	b29b      	uxth	r3, r3
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d110      	bne.n	800b670 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b64e:	687b      	ldr	r3, [r7, #4]
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	681a      	ldr	r2, [r3, #0]
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b65c:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b65e:	687b      	ldr	r3, [r7, #4]
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	681a      	ldr	r2, [r3, #0]
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b66c:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b66e:	e018      	b.n	800b6a2 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b674:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b676:	68fb      	ldr	r3, [r7, #12]
 800b678:	881b      	ldrh	r3, [r3, #0]
 800b67a:	461a      	mov	r2, r3
 800b67c:	687b      	ldr	r3, [r7, #4]
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b684:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b68a:	1c9a      	adds	r2, r3, #2
 800b68c:	687b      	ldr	r3, [r7, #4]
 800b68e:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b696:	b29b      	uxth	r3, r3
 800b698:	3b01      	subs	r3, #1
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b6a2:	bf00      	nop
 800b6a4:	3714      	adds	r7, #20
 800b6a6:	46bd      	mov	sp, r7
 800b6a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6ac:	4770      	bx	lr

0800b6ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b082      	sub	sp, #8
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	681b      	ldr	r3, [r3, #0]
 800b6ba:	681a      	ldr	r2, [r3, #0]
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b6c4:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	2220      	movs	r2, #32
 800b6ca:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2200      	movs	r2, #0
 800b6d0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b6d2:	6878      	ldr	r0, [r7, #4]
 800b6d4:	f7ff fb34 	bl	800ad40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b6d8:	bf00      	nop
 800b6da:	3708      	adds	r7, #8
 800b6dc:	46bd      	mov	sp, r7
 800b6de:	bd80      	pop	{r7, pc}

0800b6e0 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b6e0:	b580      	push	{r7, lr}
 800b6e2:	b084      	sub	sp, #16
 800b6e4:	af00      	add	r7, sp, #0
 800b6e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b6ee:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b6f4:	2b22      	cmp	r3, #34	; 0x22
 800b6f6:	d13a      	bne.n	800b76e <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6fe:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b700:	89bb      	ldrh	r3, [r7, #12]
 800b702:	b2d9      	uxtb	r1, r3
 800b704:	89fb      	ldrh	r3, [r7, #14]
 800b706:	b2da      	uxtb	r2, r3
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b70c:	400a      	ands	r2, r1
 800b70e:	b2d2      	uxtb	r2, r2
 800b710:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b716:	1c5a      	adds	r2, r3, #1
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b722:	b29b      	uxth	r3, r3
 800b724:	3b01      	subs	r3, #1
 800b726:	b29a      	uxth	r2, r3
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b72e:	687b      	ldr	r3, [r7, #4]
 800b730:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b734:	b29b      	uxth	r3, r3
 800b736:	2b00      	cmp	r3, #0
 800b738:	d121      	bne.n	800b77e <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b73a:	687b      	ldr	r3, [r7, #4]
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	681a      	ldr	r2, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	681b      	ldr	r3, [r3, #0]
 800b744:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b748:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	681b      	ldr	r3, [r3, #0]
 800b74e:	689a      	ldr	r2, [r3, #8]
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	f022 0201 	bic.w	r2, r2, #1
 800b758:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	2220      	movs	r2, #32
 800b75e:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	2200      	movs	r2, #0
 800b764:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b766:	6878      	ldr	r0, [r7, #4]
 800b768:	f7f6 fac0 	bl	8001cec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b76c:	e007      	b.n	800b77e <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	699a      	ldr	r2, [r3, #24]
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	f042 0208 	orr.w	r2, r2, #8
 800b77c:	619a      	str	r2, [r3, #24]
}
 800b77e:	bf00      	nop
 800b780:	3710      	adds	r7, #16
 800b782:	46bd      	mov	sp, r7
 800b784:	bd80      	pop	{r7, pc}

0800b786 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b786:	b580      	push	{r7, lr}
 800b788:	b084      	sub	sp, #16
 800b78a:	af00      	add	r7, sp, #0
 800b78c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b794:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b79a:	2b22      	cmp	r3, #34	; 0x22
 800b79c:	d13a      	bne.n	800b814 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b7a4:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7aa:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b7ac:	89ba      	ldrh	r2, [r7, #12]
 800b7ae:	89fb      	ldrh	r3, [r7, #14]
 800b7b0:	4013      	ands	r3, r2
 800b7b2:	b29a      	uxth	r2, r3
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7bc:	1c9a      	adds	r2, r3, #2
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7c8:	b29b      	uxth	r3, r3
 800b7ca:	3b01      	subs	r3, #1
 800b7cc:	b29a      	uxth	r2, r3
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b7da:	b29b      	uxth	r3, r3
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d121      	bne.n	800b824 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b7ee:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	689a      	ldr	r2, [r3, #8]
 800b7f6:	687b      	ldr	r3, [r7, #4]
 800b7f8:	681b      	ldr	r3, [r3, #0]
 800b7fa:	f022 0201 	bic.w	r2, r2, #1
 800b7fe:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	2220      	movs	r2, #32
 800b804:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	2200      	movs	r2, #0
 800b80a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b80c:	6878      	ldr	r0, [r7, #4]
 800b80e:	f7f6 fa6d 	bl	8001cec <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b812:	e007      	b.n	800b824 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b814:	687b      	ldr	r3, [r7, #4]
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	699a      	ldr	r2, [r3, #24]
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	f042 0208 	orr.w	r2, r2, #8
 800b822:	619a      	str	r2, [r3, #24]
}
 800b824:	bf00      	nop
 800b826:	3710      	adds	r7, #16
 800b828:	46bd      	mov	sp, r7
 800b82a:	bd80      	pop	{r7, pc}

0800b82c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b82c:	b480      	push	{r7}
 800b82e:	b085      	sub	sp, #20
 800b830:	af00      	add	r7, sp, #0
 800b832:	6078      	str	r0, [r7, #4]
 800b834:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b836:	2300      	movs	r3, #0
 800b838:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b83e:	683b      	ldr	r3, [r7, #0]
 800b840:	681b      	ldr	r3, [r3, #0]
 800b842:	2b01      	cmp	r3, #1
 800b844:	d027      	beq.n	800b896 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	681b      	ldr	r3, [r3, #0]
 800b84a:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b84c:	68fa      	ldr	r2, [r7, #12]
 800b84e:	4b2f      	ldr	r3, [pc, #188]	; (800b90c <FMC_SDRAM_Init+0xe0>)
 800b850:	4013      	ands	r3, r2
 800b852:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b854:	683b      	ldr	r3, [r7, #0]
 800b856:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b858:	683b      	ldr	r3, [r7, #0]
 800b85a:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b85c:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b85e:	683b      	ldr	r3, [r7, #0]
 800b860:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b862:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b868:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b86a:	683b      	ldr	r3, [r7, #0]
 800b86c:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b86e:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b870:	683b      	ldr	r3, [r7, #0]
 800b872:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b874:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b876:	683b      	ldr	r3, [r7, #0]
 800b878:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b87a:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b87c:	683b      	ldr	r3, [r7, #0]
 800b87e:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b880:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b882:	683b      	ldr	r3, [r7, #0]
 800b884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b886:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	4313      	orrs	r3, r2
 800b88c:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b88e:	687b      	ldr	r3, [r7, #4]
 800b890:	68fa      	ldr	r2, [r7, #12]
 800b892:	601a      	str	r2, [r3, #0]
 800b894:	e032      	b.n	800b8fc <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b8a2:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b8a4:	683b      	ldr	r3, [r7, #0]
 800b8a6:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b8a8:	683b      	ldr	r3, [r7, #0]
 800b8aa:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b8ac:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b8ae:	683b      	ldr	r3, [r7, #0]
 800b8b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b8b2:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b8b4:	68fa      	ldr	r2, [r7, #12]
 800b8b6:	4313      	orrs	r3, r2
 800b8b8:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	685b      	ldr	r3, [r3, #4]
 800b8be:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b8c0:	68ba      	ldr	r2, [r7, #8]
 800b8c2:	4b12      	ldr	r3, [pc, #72]	; (800b90c <FMC_SDRAM_Init+0xe0>)
 800b8c4:	4013      	ands	r3, r2
 800b8c6:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8c8:	683b      	ldr	r3, [r7, #0]
 800b8ca:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b8cc:	683b      	ldr	r3, [r7, #0]
 800b8ce:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8d0:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b8d2:	683b      	ldr	r3, [r7, #0]
 800b8d4:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b8d6:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b8d8:	683b      	ldr	r3, [r7, #0]
 800b8da:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b8dc:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b8e2:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b8e4:	683b      	ldr	r3, [r7, #0]
 800b8e6:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b8e8:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b8ea:	68ba      	ldr	r2, [r7, #8]
 800b8ec:	4313      	orrs	r3, r2
 800b8ee:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	68ba      	ldr	r2, [r7, #8]
 800b8fa:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b8fc:	2300      	movs	r3, #0
}
 800b8fe:	4618      	mov	r0, r3
 800b900:	3714      	adds	r7, #20
 800b902:	46bd      	mov	sp, r7
 800b904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b908:	4770      	bx	lr
 800b90a:	bf00      	nop
 800b90c:	ffff8000 	.word	0xffff8000

0800b910 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b910:	b480      	push	{r7}
 800b912:	b087      	sub	sp, #28
 800b914:	af00      	add	r7, sp, #0
 800b916:	60f8      	str	r0, [r7, #12]
 800b918:	60b9      	str	r1, [r7, #8]
 800b91a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b91c:	2300      	movs	r3, #0
 800b91e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b920:	2300      	movs	r3, #0
 800b922:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	2b01      	cmp	r3, #1
 800b928:	d02e      	beq.n	800b988 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	689b      	ldr	r3, [r3, #8]
 800b92e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b930:	697b      	ldr	r3, [r7, #20]
 800b932:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b936:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b938:	68bb      	ldr	r3, [r7, #8]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	685b      	ldr	r3, [r3, #4]
 800b942:	3b01      	subs	r3, #1
 800b944:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b946:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b948:	68bb      	ldr	r3, [r7, #8]
 800b94a:	689b      	ldr	r3, [r3, #8]
 800b94c:	3b01      	subs	r3, #1
 800b94e:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b950:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b952:	68bb      	ldr	r3, [r7, #8]
 800b954:	68db      	ldr	r3, [r3, #12]
 800b956:	3b01      	subs	r3, #1
 800b958:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b95a:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b95c:	68bb      	ldr	r3, [r7, #8]
 800b95e:	691b      	ldr	r3, [r3, #16]
 800b960:	3b01      	subs	r3, #1
 800b962:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b964:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b966:	68bb      	ldr	r3, [r7, #8]
 800b968:	695b      	ldr	r3, [r3, #20]
 800b96a:	3b01      	subs	r3, #1
 800b96c:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b96e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b970:	68bb      	ldr	r3, [r7, #8]
 800b972:	699b      	ldr	r3, [r3, #24]
 800b974:	3b01      	subs	r3, #1
 800b976:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b978:	4313      	orrs	r3, r2
 800b97a:	697a      	ldr	r2, [r7, #20]
 800b97c:	4313      	orrs	r3, r2
 800b97e:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	697a      	ldr	r2, [r7, #20]
 800b984:	609a      	str	r2, [r3, #8]
 800b986:	e039      	b.n	800b9fc <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b98e:	697a      	ldr	r2, [r7, #20]
 800b990:	4b1e      	ldr	r3, [pc, #120]	; (800ba0c <FMC_SDRAM_Timing_Init+0xfc>)
 800b992:	4013      	ands	r3, r2
 800b994:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	68db      	ldr	r3, [r3, #12]
 800b99a:	3b01      	subs	r3, #1
 800b99c:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b99e:	68bb      	ldr	r3, [r7, #8]
 800b9a0:	695b      	ldr	r3, [r3, #20]
 800b9a2:	3b01      	subs	r3, #1
 800b9a4:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b9a6:	4313      	orrs	r3, r2
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b9ae:	68fb      	ldr	r3, [r7, #12]
 800b9b0:	68db      	ldr	r3, [r3, #12]
 800b9b2:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b9b4:	693b      	ldr	r3, [r7, #16]
 800b9b6:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b9ba:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9bc:	68bb      	ldr	r3, [r7, #8]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	685b      	ldr	r3, [r3, #4]
 800b9c6:	3b01      	subs	r3, #1
 800b9c8:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9ca:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b9cc:	68bb      	ldr	r3, [r7, #8]
 800b9ce:	689b      	ldr	r3, [r3, #8]
 800b9d0:	3b01      	subs	r3, #1
 800b9d2:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b9d4:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	691b      	ldr	r3, [r3, #16]
 800b9da:	3b01      	subs	r3, #1
 800b9dc:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b9de:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b9e0:	68bb      	ldr	r3, [r7, #8]
 800b9e2:	699b      	ldr	r3, [r3, #24]
 800b9e4:	3b01      	subs	r3, #1
 800b9e6:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b9e8:	4313      	orrs	r3, r2
 800b9ea:	693a      	ldr	r2, [r7, #16]
 800b9ec:	4313      	orrs	r3, r2
 800b9ee:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b9f0:	68fb      	ldr	r3, [r7, #12]
 800b9f2:	697a      	ldr	r2, [r7, #20]
 800b9f4:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	693a      	ldr	r2, [r7, #16]
 800b9fa:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b9fc:	2300      	movs	r3, #0
}
 800b9fe:	4618      	mov	r0, r3
 800ba00:	371c      	adds	r7, #28
 800ba02:	46bd      	mov	sp, r7
 800ba04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba08:	4770      	bx	lr
 800ba0a:	bf00      	nop
 800ba0c:	ff0f0fff 	.word	0xff0f0fff

0800ba10 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800ba10:	b480      	push	{r7}
 800ba12:	b087      	sub	sp, #28
 800ba14:	af00      	add	r7, sp, #0
 800ba16:	60f8      	str	r0, [r7, #12]
 800ba18:	60b9      	str	r1, [r7, #8]
 800ba1a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba20:	68bb      	ldr	r3, [r7, #8]
 800ba22:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba28:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800ba2a:	68bb      	ldr	r3, [r7, #8]
 800ba2c:	689b      	ldr	r3, [r3, #8]
 800ba2e:	3b01      	subs	r3, #1
 800ba30:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800ba32:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800ba34:	68bb      	ldr	r3, [r7, #8]
 800ba36:	68db      	ldr	r3, [r3, #12]
 800ba38:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800ba3a:	4313      	orrs	r3, r2
 800ba3c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800ba3e:	697a      	ldr	r2, [r7, #20]
 800ba40:	68fb      	ldr	r3, [r7, #12]
 800ba42:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800ba44:	2300      	movs	r3, #0
}
 800ba46:	4618      	mov	r0, r3
 800ba48:	371c      	adds	r7, #28
 800ba4a:	46bd      	mov	sp, r7
 800ba4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba50:	4770      	bx	lr

0800ba52 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800ba52:	b480      	push	{r7}
 800ba54:	b083      	sub	sp, #12
 800ba56:	af00      	add	r7, sp, #0
 800ba58:	6078      	str	r0, [r7, #4]
 800ba5a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	695a      	ldr	r2, [r3, #20]
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	005b      	lsls	r3, r3, #1
 800ba64:	431a      	orrs	r2, r3
 800ba66:	687b      	ldr	r3, [r7, #4]
 800ba68:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800ba6a:	2300      	movs	r3, #0
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	370c      	adds	r7, #12
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800ba78:	b480      	push	{r7}
 800ba7a:	b085      	sub	sp, #20
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	4603      	mov	r3, r0
 800ba80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800ba82:	2300      	movs	r3, #0
 800ba84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800ba86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ba8a:	2b84      	cmp	r3, #132	; 0x84
 800ba8c:	d005      	beq.n	800ba9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800ba8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	4413      	add	r3, r2
 800ba96:	3303      	adds	r3, #3
 800ba98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800ba9a:	68fb      	ldr	r3, [r7, #12]
}
 800ba9c:	4618      	mov	r0, r3
 800ba9e:	3714      	adds	r7, #20
 800baa0:	46bd      	mov	sp, r7
 800baa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baa6:	4770      	bx	lr

0800baa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800baa8:	b580      	push	{r7, lr}
 800baaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800baac:	f001 f8ec 	bl	800cc88 <vTaskStartScheduler>
  
  return osOK;
 800bab0:	2300      	movs	r3, #0
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	bd80      	pop	{r7, pc}

0800bab6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800bab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bab8:	b089      	sub	sp, #36	; 0x24
 800baba:	af04      	add	r7, sp, #16
 800babc:	6078      	str	r0, [r7, #4]
 800babe:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800bac0:	687b      	ldr	r3, [r7, #4]
 800bac2:	695b      	ldr	r3, [r3, #20]
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	d020      	beq.n	800bb0a <osThreadCreate+0x54>
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	699b      	ldr	r3, [r3, #24]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d01c      	beq.n	800bb0a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	685c      	ldr	r4, [r3, #4]
 800bad4:	687b      	ldr	r3, [r7, #4]
 800bad6:	681d      	ldr	r5, [r3, #0]
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	691e      	ldr	r6, [r3, #16]
 800badc:	687b      	ldr	r3, [r7, #4]
 800bade:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bae2:	4618      	mov	r0, r3
 800bae4:	f7ff ffc8 	bl	800ba78 <makeFreeRtosPriority>
 800bae8:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800baea:	687b      	ldr	r3, [r7, #4]
 800baec:	695b      	ldr	r3, [r3, #20]
 800baee:	687a      	ldr	r2, [r7, #4]
 800baf0:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800baf2:	9202      	str	r2, [sp, #8]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	9100      	str	r1, [sp, #0]
 800baf8:	683b      	ldr	r3, [r7, #0]
 800bafa:	4632      	mov	r2, r6
 800bafc:	4629      	mov	r1, r5
 800bafe:	4620      	mov	r0, r4
 800bb00:	f000 fdd6 	bl	800c6b0 <xTaskCreateStatic>
 800bb04:	4603      	mov	r3, r0
 800bb06:	60fb      	str	r3, [r7, #12]
 800bb08:	e01c      	b.n	800bb44 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb0a:	687b      	ldr	r3, [r7, #4]
 800bb0c:	685c      	ldr	r4, [r3, #4]
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800bb12:	687b      	ldr	r3, [r7, #4]
 800bb14:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800bb16:	b29e      	uxth	r6, r3
 800bb18:	687b      	ldr	r3, [r7, #4]
 800bb1a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800bb1e:	4618      	mov	r0, r3
 800bb20:	f7ff ffaa 	bl	800ba78 <makeFreeRtosPriority>
 800bb24:	4602      	mov	r2, r0
 800bb26:	f107 030c 	add.w	r3, r7, #12
 800bb2a:	9301      	str	r3, [sp, #4]
 800bb2c:	9200      	str	r2, [sp, #0]
 800bb2e:	683b      	ldr	r3, [r7, #0]
 800bb30:	4632      	mov	r2, r6
 800bb32:	4629      	mov	r1, r5
 800bb34:	4620      	mov	r0, r4
 800bb36:	f000 fe1b 	bl	800c770 <xTaskCreate>
 800bb3a:	4603      	mov	r3, r0
 800bb3c:	2b01      	cmp	r3, #1
 800bb3e:	d001      	beq.n	800bb44 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800bb40:	2300      	movs	r3, #0
 800bb42:	e000      	b.n	800bb46 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800bb44:	68fb      	ldr	r3, [r7, #12]
}
 800bb46:	4618      	mov	r0, r3
 800bb48:	3714      	adds	r7, #20
 800bb4a:	46bd      	mov	sp, r7
 800bb4c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800bb4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800bb4e:	b580      	push	{r7, lr}
 800bb50:	b084      	sub	sp, #16
 800bb52:	af00      	add	r7, sp, #0
 800bb54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d001      	beq.n	800bb64 <osDelay+0x16>
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	e000      	b.n	800bb66 <osDelay+0x18>
 800bb64:	2301      	movs	r3, #1
 800bb66:	4618      	mov	r0, r3
 800bb68:	f000 ffc4 	bl	800caf4 <vTaskDelay>
  
  return osOK;
 800bb6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800bb6e:	4618      	mov	r0, r3
 800bb70:	3710      	adds	r7, #16
 800bb72:	46bd      	mov	sp, r7
 800bb74:	bd80      	pop	{r7, pc}

0800bb76 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800bb76:	b580      	push	{r7, lr}
 800bb78:	b082      	sub	sp, #8
 800bb7a:	af00      	add	r7, sp, #0
 800bb7c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	685b      	ldr	r3, [r3, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d007      	beq.n	800bb96 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	685b      	ldr	r3, [r3, #4]
 800bb8a:	4619      	mov	r1, r3
 800bb8c:	2001      	movs	r0, #1
 800bb8e:	f000 fa60 	bl	800c052 <xQueueCreateMutexStatic>
 800bb92:	4603      	mov	r3, r0
 800bb94:	e003      	b.n	800bb9e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800bb96:	2001      	movs	r0, #1
 800bb98:	f000 fa43 	bl	800c022 <xQueueCreateMutex>
 800bb9c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3708      	adds	r7, #8
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}

0800bba6 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800bba6:	b590      	push	{r4, r7, lr}
 800bba8:	b085      	sub	sp, #20
 800bbaa:	af02      	add	r7, sp, #8
 800bbac:	6078      	str	r0, [r7, #4]
 800bbae:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	689b      	ldr	r3, [r3, #8]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d012      	beq.n	800bbde <osMessageCreate+0x38>
 800bbb8:	687b      	ldr	r3, [r7, #4]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d00e      	beq.n	800bbde <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	6818      	ldr	r0, [r3, #0]
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	6859      	ldr	r1, [r3, #4]
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	689a      	ldr	r2, [r3, #8]
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	68dc      	ldr	r4, [r3, #12]
 800bbd0:	2300      	movs	r3, #0
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	4623      	mov	r3, r4
 800bbd6:	f000 f92d 	bl	800be34 <xQueueGenericCreateStatic>
 800bbda:	4603      	mov	r3, r0
 800bbdc:	e008      	b.n	800bbf0 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	6818      	ldr	r0, [r3, #0]
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	685b      	ldr	r3, [r3, #4]
 800bbe6:	2200      	movs	r2, #0
 800bbe8:	4619      	mov	r1, r3
 800bbea:	f000 f9a0 	bl	800bf2e <xQueueGenericCreate>
 800bbee:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800bbf0:	4618      	mov	r0, r3
 800bbf2:	370c      	adds	r7, #12
 800bbf4:	46bd      	mov	sp, r7
 800bbf6:	bd90      	pop	{r4, r7, pc}

0800bbf8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bbf8:	b480      	push	{r7}
 800bbfa:	b083      	sub	sp, #12
 800bbfc:	af00      	add	r7, sp, #0
 800bbfe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	f103 0208 	add.w	r2, r3, #8
 800bc06:	687b      	ldr	r3, [r7, #4]
 800bc08:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bc0a:	687b      	ldr	r3, [r7, #4]
 800bc0c:	f04f 32ff 	mov.w	r2, #4294967295
 800bc10:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc12:	687b      	ldr	r3, [r7, #4]
 800bc14:	f103 0208 	add.w	r2, r3, #8
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	f103 0208 	add.w	r2, r3, #8
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	2200      	movs	r2, #0
 800bc2a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bc2c:	bf00      	nop
 800bc2e:	370c      	adds	r7, #12
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr

0800bc38 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bc38:	b480      	push	{r7}
 800bc3a:	b083      	sub	sp, #12
 800bc3c:	af00      	add	r7, sp, #0
 800bc3e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2200      	movs	r2, #0
 800bc44:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bc46:	bf00      	nop
 800bc48:	370c      	adds	r7, #12
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr

0800bc52 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc52:	b480      	push	{r7}
 800bc54:	b085      	sub	sp, #20
 800bc56:	af00      	add	r7, sp, #0
 800bc58:	6078      	str	r0, [r7, #4]
 800bc5a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	685b      	ldr	r3, [r3, #4]
 800bc60:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bc62:	683b      	ldr	r3, [r7, #0]
 800bc64:	68fa      	ldr	r2, [r7, #12]
 800bc66:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bc68:	68fb      	ldr	r3, [r7, #12]
 800bc6a:	689a      	ldr	r2, [r3, #8]
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bc70:	68fb      	ldr	r3, [r7, #12]
 800bc72:	689b      	ldr	r3, [r3, #8]
 800bc74:	683a      	ldr	r2, [r7, #0]
 800bc76:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bc78:	68fb      	ldr	r3, [r7, #12]
 800bc7a:	683a      	ldr	r2, [r7, #0]
 800bc7c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bc7e:	683b      	ldr	r3, [r7, #0]
 800bc80:	687a      	ldr	r2, [r7, #4]
 800bc82:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	1c5a      	adds	r2, r3, #1
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	601a      	str	r2, [r3, #0]
}
 800bc8e:	bf00      	nop
 800bc90:	3714      	adds	r7, #20
 800bc92:	46bd      	mov	sp, r7
 800bc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc98:	4770      	bx	lr

0800bc9a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bc9a:	b480      	push	{r7}
 800bc9c:	b085      	sub	sp, #20
 800bc9e:	af00      	add	r7, sp, #0
 800bca0:	6078      	str	r0, [r7, #4]
 800bca2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bca4:	683b      	ldr	r3, [r7, #0]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bcaa:	68bb      	ldr	r3, [r7, #8]
 800bcac:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bcb0:	d103      	bne.n	800bcba <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bcb2:	687b      	ldr	r3, [r7, #4]
 800bcb4:	691b      	ldr	r3, [r3, #16]
 800bcb6:	60fb      	str	r3, [r7, #12]
 800bcb8:	e00c      	b.n	800bcd4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	3308      	adds	r3, #8
 800bcbe:	60fb      	str	r3, [r7, #12]
 800bcc0:	e002      	b.n	800bcc8 <vListInsert+0x2e>
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	685b      	ldr	r3, [r3, #4]
 800bcc6:	60fb      	str	r3, [r7, #12]
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	685b      	ldr	r3, [r3, #4]
 800bccc:	681b      	ldr	r3, [r3, #0]
 800bcce:	68ba      	ldr	r2, [r7, #8]
 800bcd0:	429a      	cmp	r2, r3
 800bcd2:	d2f6      	bcs.n	800bcc2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	685a      	ldr	r2, [r3, #4]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bcdc:	683b      	ldr	r3, [r7, #0]
 800bcde:	685b      	ldr	r3, [r3, #4]
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bce4:	683b      	ldr	r3, [r7, #0]
 800bce6:	68fa      	ldr	r2, [r7, #12]
 800bce8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bcea:	68fb      	ldr	r3, [r7, #12]
 800bcec:	683a      	ldr	r2, [r7, #0]
 800bcee:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bcf0:	683b      	ldr	r3, [r7, #0]
 800bcf2:	687a      	ldr	r2, [r7, #4]
 800bcf4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bcf6:	687b      	ldr	r3, [r7, #4]
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	1c5a      	adds	r2, r3, #1
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	601a      	str	r2, [r3, #0]
}
 800bd00:	bf00      	nop
 800bd02:	3714      	adds	r7, #20
 800bd04:	46bd      	mov	sp, r7
 800bd06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd0a:	4770      	bx	lr

0800bd0c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bd0c:	b480      	push	{r7}
 800bd0e:	b085      	sub	sp, #20
 800bd10:	af00      	add	r7, sp, #0
 800bd12:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	691b      	ldr	r3, [r3, #16]
 800bd18:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	685b      	ldr	r3, [r3, #4]
 800bd1e:	687a      	ldr	r2, [r7, #4]
 800bd20:	6892      	ldr	r2, [r2, #8]
 800bd22:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	689b      	ldr	r3, [r3, #8]
 800bd28:	687a      	ldr	r2, [r7, #4]
 800bd2a:	6852      	ldr	r2, [r2, #4]
 800bd2c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bd2e:	68fb      	ldr	r3, [r7, #12]
 800bd30:	685b      	ldr	r3, [r3, #4]
 800bd32:	687a      	ldr	r2, [r7, #4]
 800bd34:	429a      	cmp	r2, r3
 800bd36:	d103      	bne.n	800bd40 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	689a      	ldr	r2, [r3, #8]
 800bd3c:	68fb      	ldr	r3, [r7, #12]
 800bd3e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	2200      	movs	r2, #0
 800bd44:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bd46:	68fb      	ldr	r3, [r7, #12]
 800bd48:	681b      	ldr	r3, [r3, #0]
 800bd4a:	1e5a      	subs	r2, r3, #1
 800bd4c:	68fb      	ldr	r3, [r7, #12]
 800bd4e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	681b      	ldr	r3, [r3, #0]
}
 800bd54:	4618      	mov	r0, r3
 800bd56:	3714      	adds	r7, #20
 800bd58:	46bd      	mov	sp, r7
 800bd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd5e:	4770      	bx	lr

0800bd60 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b084      	sub	sp, #16
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bd6e:	68fb      	ldr	r3, [r7, #12]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10b      	bne.n	800bd8c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bd74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd78:	b672      	cpsid	i
 800bd7a:	f383 8811 	msr	BASEPRI, r3
 800bd7e:	f3bf 8f6f 	isb	sy
 800bd82:	f3bf 8f4f 	dsb	sy
 800bd86:	b662      	cpsie	i
 800bd88:	60bb      	str	r3, [r7, #8]
 800bd8a:	e7fe      	b.n	800bd8a <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800bd8c:	f001 ff04 	bl	800db98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	681a      	ldr	r2, [r3, #0]
 800bd94:	68fb      	ldr	r3, [r7, #12]
 800bd96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd98:	68f9      	ldr	r1, [r7, #12]
 800bd9a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd9c:	fb01 f303 	mul.w	r3, r1, r3
 800bda0:	441a      	add	r2, r3
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bda6:	68fb      	ldr	r3, [r7, #12]
 800bda8:	2200      	movs	r2, #0
 800bdaa:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681a      	ldr	r2, [r3, #0]
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bdb4:	68fb      	ldr	r3, [r7, #12]
 800bdb6:	681a      	ldr	r2, [r3, #0]
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	68f9      	ldr	r1, [r7, #12]
 800bdc0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bdc2:	fb01 f303 	mul.w	r3, r1, r3
 800bdc6:	441a      	add	r2, r3
 800bdc8:	68fb      	ldr	r3, [r7, #12]
 800bdca:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	22ff      	movs	r2, #255	; 0xff
 800bdd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bdd4:	68fb      	ldr	r3, [r7, #12]
 800bdd6:	22ff      	movs	r2, #255	; 0xff
 800bdd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d114      	bne.n	800be0c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bde2:	68fb      	ldr	r3, [r7, #12]
 800bde4:	691b      	ldr	r3, [r3, #16]
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d01a      	beq.n	800be20 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bdea:	68fb      	ldr	r3, [r7, #12]
 800bdec:	3310      	adds	r3, #16
 800bdee:	4618      	mov	r0, r3
 800bdf0:	f001 f9ca 	bl	800d188 <xTaskRemoveFromEventList>
 800bdf4:	4603      	mov	r3, r0
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d012      	beq.n	800be20 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bdfa:	4b0d      	ldr	r3, [pc, #52]	; (800be30 <xQueueGenericReset+0xd0>)
 800bdfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be00:	601a      	str	r2, [r3, #0]
 800be02:	f3bf 8f4f 	dsb	sy
 800be06:	f3bf 8f6f 	isb	sy
 800be0a:	e009      	b.n	800be20 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800be0c:	68fb      	ldr	r3, [r7, #12]
 800be0e:	3310      	adds	r3, #16
 800be10:	4618      	mov	r0, r3
 800be12:	f7ff fef1 	bl	800bbf8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800be16:	68fb      	ldr	r3, [r7, #12]
 800be18:	3324      	adds	r3, #36	; 0x24
 800be1a:	4618      	mov	r0, r3
 800be1c:	f7ff feec 	bl	800bbf8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800be20:	f001 feec 	bl	800dbfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800be24:	2301      	movs	r3, #1
}
 800be26:	4618      	mov	r0, r3
 800be28:	3710      	adds	r7, #16
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	e000ed04 	.word	0xe000ed04

0800be34 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800be34:	b580      	push	{r7, lr}
 800be36:	b08e      	sub	sp, #56	; 0x38
 800be38:	af02      	add	r7, sp, #8
 800be3a:	60f8      	str	r0, [r7, #12]
 800be3c:	60b9      	str	r1, [r7, #8]
 800be3e:	607a      	str	r2, [r7, #4]
 800be40:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	2b00      	cmp	r3, #0
 800be46:	d10b      	bne.n	800be60 <xQueueGenericCreateStatic+0x2c>
 800be48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be4c:	b672      	cpsid	i
 800be4e:	f383 8811 	msr	BASEPRI, r3
 800be52:	f3bf 8f6f 	isb	sy
 800be56:	f3bf 8f4f 	dsb	sy
 800be5a:	b662      	cpsie	i
 800be5c:	62bb      	str	r3, [r7, #40]	; 0x28
 800be5e:	e7fe      	b.n	800be5e <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800be60:	683b      	ldr	r3, [r7, #0]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d10b      	bne.n	800be7e <xQueueGenericCreateStatic+0x4a>
 800be66:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be6a:	b672      	cpsid	i
 800be6c:	f383 8811 	msr	BASEPRI, r3
 800be70:	f3bf 8f6f 	isb	sy
 800be74:	f3bf 8f4f 	dsb	sy
 800be78:	b662      	cpsie	i
 800be7a:	627b      	str	r3, [r7, #36]	; 0x24
 800be7c:	e7fe      	b.n	800be7c <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800be7e:	687b      	ldr	r3, [r7, #4]
 800be80:	2b00      	cmp	r3, #0
 800be82:	d002      	beq.n	800be8a <xQueueGenericCreateStatic+0x56>
 800be84:	68bb      	ldr	r3, [r7, #8]
 800be86:	2b00      	cmp	r3, #0
 800be88:	d001      	beq.n	800be8e <xQueueGenericCreateStatic+0x5a>
 800be8a:	2301      	movs	r3, #1
 800be8c:	e000      	b.n	800be90 <xQueueGenericCreateStatic+0x5c>
 800be8e:	2300      	movs	r3, #0
 800be90:	2b00      	cmp	r3, #0
 800be92:	d10b      	bne.n	800beac <xQueueGenericCreateStatic+0x78>
 800be94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be98:	b672      	cpsid	i
 800be9a:	f383 8811 	msr	BASEPRI, r3
 800be9e:	f3bf 8f6f 	isb	sy
 800bea2:	f3bf 8f4f 	dsb	sy
 800bea6:	b662      	cpsie	i
 800bea8:	623b      	str	r3, [r7, #32]
 800beaa:	e7fe      	b.n	800beaa <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	2b00      	cmp	r3, #0
 800beb0:	d102      	bne.n	800beb8 <xQueueGenericCreateStatic+0x84>
 800beb2:	68bb      	ldr	r3, [r7, #8]
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d101      	bne.n	800bebc <xQueueGenericCreateStatic+0x88>
 800beb8:	2301      	movs	r3, #1
 800beba:	e000      	b.n	800bebe <xQueueGenericCreateStatic+0x8a>
 800bebc:	2300      	movs	r3, #0
 800bebe:	2b00      	cmp	r3, #0
 800bec0:	d10b      	bne.n	800beda <xQueueGenericCreateStatic+0xa6>
 800bec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec6:	b672      	cpsid	i
 800bec8:	f383 8811 	msr	BASEPRI, r3
 800becc:	f3bf 8f6f 	isb	sy
 800bed0:	f3bf 8f4f 	dsb	sy
 800bed4:	b662      	cpsie	i
 800bed6:	61fb      	str	r3, [r7, #28]
 800bed8:	e7fe      	b.n	800bed8 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800beda:	2348      	movs	r3, #72	; 0x48
 800bedc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bede:	697b      	ldr	r3, [r7, #20]
 800bee0:	2b48      	cmp	r3, #72	; 0x48
 800bee2:	d00b      	beq.n	800befc <xQueueGenericCreateStatic+0xc8>
 800bee4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee8:	b672      	cpsid	i
 800beea:	f383 8811 	msr	BASEPRI, r3
 800beee:	f3bf 8f6f 	isb	sy
 800bef2:	f3bf 8f4f 	dsb	sy
 800bef6:	b662      	cpsie	i
 800bef8:	61bb      	str	r3, [r7, #24]
 800befa:	e7fe      	b.n	800befa <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800befc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800befe:	683b      	ldr	r3, [r7, #0]
 800bf00:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bf02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d00d      	beq.n	800bf24 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf10:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bf14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf16:	9300      	str	r3, [sp, #0]
 800bf18:	4613      	mov	r3, r2
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	68b9      	ldr	r1, [r7, #8]
 800bf1e:	68f8      	ldr	r0, [r7, #12]
 800bf20:	f000 f846 	bl	800bfb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bf24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bf26:	4618      	mov	r0, r3
 800bf28:	3730      	adds	r7, #48	; 0x30
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bf2e:	b580      	push	{r7, lr}
 800bf30:	b08a      	sub	sp, #40	; 0x28
 800bf32:	af02      	add	r7, sp, #8
 800bf34:	60f8      	str	r0, [r7, #12]
 800bf36:	60b9      	str	r1, [r7, #8]
 800bf38:	4613      	mov	r3, r2
 800bf3a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bf3c:	68fb      	ldr	r3, [r7, #12]
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d10b      	bne.n	800bf5a <xQueueGenericCreate+0x2c>
 800bf42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf46:	b672      	cpsid	i
 800bf48:	f383 8811 	msr	BASEPRI, r3
 800bf4c:	f3bf 8f6f 	isb	sy
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	b662      	cpsie	i
 800bf56:	613b      	str	r3, [r7, #16]
 800bf58:	e7fe      	b.n	800bf58 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bf5a:	68bb      	ldr	r3, [r7, #8]
 800bf5c:	2b00      	cmp	r3, #0
 800bf5e:	d102      	bne.n	800bf66 <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bf60:	2300      	movs	r3, #0
 800bf62:	61fb      	str	r3, [r7, #28]
 800bf64:	e004      	b.n	800bf70 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bf66:	68fb      	ldr	r3, [r7, #12]
 800bf68:	68ba      	ldr	r2, [r7, #8]
 800bf6a:	fb02 f303 	mul.w	r3, r2, r3
 800bf6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bf70:	69fb      	ldr	r3, [r7, #28]
 800bf72:	3348      	adds	r3, #72	; 0x48
 800bf74:	4618      	mov	r0, r3
 800bf76:	f001 feef 	bl	800dd58 <pvPortMalloc>
 800bf7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bf7c:	69bb      	ldr	r3, [r7, #24]
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d011      	beq.n	800bfa6 <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bf82:	69bb      	ldr	r3, [r7, #24]
 800bf84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bf86:	697b      	ldr	r3, [r7, #20]
 800bf88:	3348      	adds	r3, #72	; 0x48
 800bf8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bf8c:	69bb      	ldr	r3, [r7, #24]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bf94:	79fa      	ldrb	r2, [r7, #7]
 800bf96:	69bb      	ldr	r3, [r7, #24]
 800bf98:	9300      	str	r3, [sp, #0]
 800bf9a:	4613      	mov	r3, r2
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	68b9      	ldr	r1, [r7, #8]
 800bfa0:	68f8      	ldr	r0, [r7, #12]
 800bfa2:	f000 f805 	bl	800bfb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bfa6:	69bb      	ldr	r3, [r7, #24]
	}
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	3720      	adds	r7, #32
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	b084      	sub	sp, #16
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	60f8      	str	r0, [r7, #12]
 800bfb8:	60b9      	str	r1, [r7, #8]
 800bfba:	607a      	str	r2, [r7, #4]
 800bfbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bfbe:	68bb      	ldr	r3, [r7, #8]
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	d103      	bne.n	800bfcc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bfc4:	69bb      	ldr	r3, [r7, #24]
 800bfc6:	69ba      	ldr	r2, [r7, #24]
 800bfc8:	601a      	str	r2, [r3, #0]
 800bfca:	e002      	b.n	800bfd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bfcc:	69bb      	ldr	r3, [r7, #24]
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bfd2:	69bb      	ldr	r3, [r7, #24]
 800bfd4:	68fa      	ldr	r2, [r7, #12]
 800bfd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bfd8:	69bb      	ldr	r3, [r7, #24]
 800bfda:	68ba      	ldr	r2, [r7, #8]
 800bfdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bfde:	2101      	movs	r1, #1
 800bfe0:	69b8      	ldr	r0, [r7, #24]
 800bfe2:	f7ff febd 	bl	800bd60 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bfe6:	bf00      	nop
 800bfe8:	3710      	adds	r7, #16
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}

0800bfee <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bfee:	b580      	push	{r7, lr}
 800bff0:	b082      	sub	sp, #8
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bff6:	687b      	ldr	r3, [r7, #4]
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00e      	beq.n	800c01a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	2200      	movs	r2, #0
 800c000:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2200      	movs	r2, #0
 800c006:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2200      	movs	r2, #0
 800c00c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800c00e:	2300      	movs	r3, #0
 800c010:	2200      	movs	r2, #0
 800c012:	2100      	movs	r1, #0
 800c014:	6878      	ldr	r0, [r7, #4]
 800c016:	f000 f837 	bl	800c088 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800c01a:	bf00      	nop
 800c01c:	3708      	adds	r7, #8
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}

0800c022 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800c022:	b580      	push	{r7, lr}
 800c024:	b086      	sub	sp, #24
 800c026:	af00      	add	r7, sp, #0
 800c028:	4603      	mov	r3, r0
 800c02a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c02c:	2301      	movs	r3, #1
 800c02e:	617b      	str	r3, [r7, #20]
 800c030:	2300      	movs	r3, #0
 800c032:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800c034:	79fb      	ldrb	r3, [r7, #7]
 800c036:	461a      	mov	r2, r3
 800c038:	6939      	ldr	r1, [r7, #16]
 800c03a:	6978      	ldr	r0, [r7, #20]
 800c03c:	f7ff ff77 	bl	800bf2e <xQueueGenericCreate>
 800c040:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c042:	68f8      	ldr	r0, [r7, #12]
 800c044:	f7ff ffd3 	bl	800bfee <prvInitialiseMutex>

		return xNewQueue;
 800c048:	68fb      	ldr	r3, [r7, #12]
	}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3718      	adds	r7, #24
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800c052:	b580      	push	{r7, lr}
 800c054:	b088      	sub	sp, #32
 800c056:	af02      	add	r7, sp, #8
 800c058:	4603      	mov	r3, r0
 800c05a:	6039      	str	r1, [r7, #0]
 800c05c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800c05e:	2301      	movs	r3, #1
 800c060:	617b      	str	r3, [r7, #20]
 800c062:	2300      	movs	r3, #0
 800c064:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800c066:	79fb      	ldrb	r3, [r7, #7]
 800c068:	9300      	str	r3, [sp, #0]
 800c06a:	683b      	ldr	r3, [r7, #0]
 800c06c:	2200      	movs	r2, #0
 800c06e:	6939      	ldr	r1, [r7, #16]
 800c070:	6978      	ldr	r0, [r7, #20]
 800c072:	f7ff fedf 	bl	800be34 <xQueueGenericCreateStatic>
 800c076:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800c078:	68f8      	ldr	r0, [r7, #12]
 800c07a:	f7ff ffb8 	bl	800bfee <prvInitialiseMutex>

		return xNewQueue;
 800c07e:	68fb      	ldr	r3, [r7, #12]
	}
 800c080:	4618      	mov	r0, r3
 800c082:	3718      	adds	r7, #24
 800c084:	46bd      	mov	sp, r7
 800c086:	bd80      	pop	{r7, pc}

0800c088 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b08e      	sub	sp, #56	; 0x38
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800c096:	2300      	movs	r3, #0
 800c098:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c09a:	68fb      	ldr	r3, [r7, #12]
 800c09c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c09e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a0:	2b00      	cmp	r3, #0
 800c0a2:	d10b      	bne.n	800c0bc <xQueueGenericSend+0x34>
 800c0a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a8:	b672      	cpsid	i
 800c0aa:	f383 8811 	msr	BASEPRI, r3
 800c0ae:	f3bf 8f6f 	isb	sy
 800c0b2:	f3bf 8f4f 	dsb	sy
 800c0b6:	b662      	cpsie	i
 800c0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c0ba:	e7fe      	b.n	800c0ba <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0bc:	68bb      	ldr	r3, [r7, #8]
 800c0be:	2b00      	cmp	r3, #0
 800c0c0:	d103      	bne.n	800c0ca <xQueueGenericSend+0x42>
 800c0c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <xQueueGenericSend+0x46>
 800c0ca:	2301      	movs	r3, #1
 800c0cc:	e000      	b.n	800c0d0 <xQueueGenericSend+0x48>
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d10b      	bne.n	800c0ec <xQueueGenericSend+0x64>
 800c0d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d8:	b672      	cpsid	i
 800c0da:	f383 8811 	msr	BASEPRI, r3
 800c0de:	f3bf 8f6f 	isb	sy
 800c0e2:	f3bf 8f4f 	dsb	sy
 800c0e6:	b662      	cpsie	i
 800c0e8:	627b      	str	r3, [r7, #36]	; 0x24
 800c0ea:	e7fe      	b.n	800c0ea <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c0ec:	683b      	ldr	r3, [r7, #0]
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d103      	bne.n	800c0fa <xQueueGenericSend+0x72>
 800c0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f6:	2b01      	cmp	r3, #1
 800c0f8:	d101      	bne.n	800c0fe <xQueueGenericSend+0x76>
 800c0fa:	2301      	movs	r3, #1
 800c0fc:	e000      	b.n	800c100 <xQueueGenericSend+0x78>
 800c0fe:	2300      	movs	r3, #0
 800c100:	2b00      	cmp	r3, #0
 800c102:	d10b      	bne.n	800c11c <xQueueGenericSend+0x94>
 800c104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c108:	b672      	cpsid	i
 800c10a:	f383 8811 	msr	BASEPRI, r3
 800c10e:	f3bf 8f6f 	isb	sy
 800c112:	f3bf 8f4f 	dsb	sy
 800c116:	b662      	cpsie	i
 800c118:	623b      	str	r3, [r7, #32]
 800c11a:	e7fe      	b.n	800c11a <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c11c:	f001 f9f4 	bl	800d508 <xTaskGetSchedulerState>
 800c120:	4603      	mov	r3, r0
 800c122:	2b00      	cmp	r3, #0
 800c124:	d102      	bne.n	800c12c <xQueueGenericSend+0xa4>
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	2b00      	cmp	r3, #0
 800c12a:	d101      	bne.n	800c130 <xQueueGenericSend+0xa8>
 800c12c:	2301      	movs	r3, #1
 800c12e:	e000      	b.n	800c132 <xQueueGenericSend+0xaa>
 800c130:	2300      	movs	r3, #0
 800c132:	2b00      	cmp	r3, #0
 800c134:	d10b      	bne.n	800c14e <xQueueGenericSend+0xc6>
 800c136:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c13a:	b672      	cpsid	i
 800c13c:	f383 8811 	msr	BASEPRI, r3
 800c140:	f3bf 8f6f 	isb	sy
 800c144:	f3bf 8f4f 	dsb	sy
 800c148:	b662      	cpsie	i
 800c14a:	61fb      	str	r3, [r7, #28]
 800c14c:	e7fe      	b.n	800c14c <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c14e:	f001 fd23 	bl	800db98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c154:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c15a:	429a      	cmp	r2, r3
 800c15c:	d302      	bcc.n	800c164 <xQueueGenericSend+0xdc>
 800c15e:	683b      	ldr	r3, [r7, #0]
 800c160:	2b02      	cmp	r3, #2
 800c162:	d129      	bne.n	800c1b8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c164:	683a      	ldr	r2, [r7, #0]
 800c166:	68b9      	ldr	r1, [r7, #8]
 800c168:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c16a:	f000 f9b7 	bl	800c4dc <prvCopyDataToQueue>
 800c16e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c172:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c174:	2b00      	cmp	r3, #0
 800c176:	d010      	beq.n	800c19a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c17a:	3324      	adds	r3, #36	; 0x24
 800c17c:	4618      	mov	r0, r3
 800c17e:	f001 f803 	bl	800d188 <xTaskRemoveFromEventList>
 800c182:	4603      	mov	r3, r0
 800c184:	2b00      	cmp	r3, #0
 800c186:	d013      	beq.n	800c1b0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800c188:	4b3f      	ldr	r3, [pc, #252]	; (800c288 <xQueueGenericSend+0x200>)
 800c18a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c18e:	601a      	str	r2, [r3, #0]
 800c190:	f3bf 8f4f 	dsb	sy
 800c194:	f3bf 8f6f 	isb	sy
 800c198:	e00a      	b.n	800c1b0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800c19a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d007      	beq.n	800c1b0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800c1a0:	4b39      	ldr	r3, [pc, #228]	; (800c288 <xQueueGenericSend+0x200>)
 800c1a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c1a6:	601a      	str	r2, [r3, #0]
 800c1a8:	f3bf 8f4f 	dsb	sy
 800c1ac:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800c1b0:	f001 fd24 	bl	800dbfc <vPortExitCritical>
				return pdPASS;
 800c1b4:	2301      	movs	r3, #1
 800c1b6:	e063      	b.n	800c280 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	2b00      	cmp	r3, #0
 800c1bc:	d103      	bne.n	800c1c6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c1be:	f001 fd1d 	bl	800dbfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	e05c      	b.n	800c280 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c1c8:	2b00      	cmp	r3, #0
 800c1ca:	d106      	bne.n	800c1da <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c1cc:	f107 0314 	add.w	r3, r7, #20
 800c1d0:	4618      	mov	r0, r3
 800c1d2:	f001 f83d 	bl	800d250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c1d6:	2301      	movs	r3, #1
 800c1d8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c1da:	f001 fd0f 	bl	800dbfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c1de:	f000 fdb5 	bl	800cd4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c1e2:	f001 fcd9 	bl	800db98 <vPortEnterCritical>
 800c1e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1e8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c1ec:	b25b      	sxtb	r3, r3
 800c1ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c1f2:	d103      	bne.n	800c1fc <xQueueGenericSend+0x174>
 800c1f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1f6:	2200      	movs	r2, #0
 800c1f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c202:	b25b      	sxtb	r3, r3
 800c204:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c208:	d103      	bne.n	800c212 <xQueueGenericSend+0x18a>
 800c20a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c20c:	2200      	movs	r2, #0
 800c20e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c212:	f001 fcf3 	bl	800dbfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c216:	1d3a      	adds	r2, r7, #4
 800c218:	f107 0314 	add.w	r3, r7, #20
 800c21c:	4611      	mov	r1, r2
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 f82c 	bl	800d27c <xTaskCheckForTimeOut>
 800c224:	4603      	mov	r3, r0
 800c226:	2b00      	cmp	r3, #0
 800c228:	d124      	bne.n	800c274 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c22a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c22c:	f000 fa28 	bl	800c680 <prvIsQueueFull>
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d018      	beq.n	800c268 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c236:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c238:	3310      	adds	r3, #16
 800c23a:	687a      	ldr	r2, [r7, #4]
 800c23c:	4611      	mov	r1, r2
 800c23e:	4618      	mov	r0, r3
 800c240:	f000 ff7c 	bl	800d13c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c244:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c246:	f000 f9b3 	bl	800c5b0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c24a:	f000 fd8d 	bl	800cd68 <xTaskResumeAll>
 800c24e:	4603      	mov	r3, r0
 800c250:	2b00      	cmp	r3, #0
 800c252:	f47f af7c 	bne.w	800c14e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <xQueueGenericSend+0x200>)
 800c258:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	f3bf 8f4f 	dsb	sy
 800c262:	f3bf 8f6f 	isb	sy
 800c266:	e772      	b.n	800c14e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c268:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c26a:	f000 f9a1 	bl	800c5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c26e:	f000 fd7b 	bl	800cd68 <xTaskResumeAll>
 800c272:	e76c      	b.n	800c14e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c274:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c276:	f000 f99b 	bl	800c5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c27a:	f000 fd75 	bl	800cd68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c27e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c280:	4618      	mov	r0, r3
 800c282:	3738      	adds	r7, #56	; 0x38
 800c284:	46bd      	mov	sp, r7
 800c286:	bd80      	pop	{r7, pc}
 800c288:	e000ed04 	.word	0xe000ed04

0800c28c <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c28c:	b580      	push	{r7, lr}
 800c28e:	b08e      	sub	sp, #56	; 0x38
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
 800c294:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c296:	2300      	movs	r3, #0
 800c298:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c29e:	2300      	movs	r3, #0
 800c2a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c2a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2a4:	2b00      	cmp	r3, #0
 800c2a6:	d10b      	bne.n	800c2c0 <xQueueSemaphoreTake+0x34>
 800c2a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2ac:	b672      	cpsid	i
 800c2ae:	f383 8811 	msr	BASEPRI, r3
 800c2b2:	f3bf 8f6f 	isb	sy
 800c2b6:	f3bf 8f4f 	dsb	sy
 800c2ba:	b662      	cpsie	i
 800c2bc:	623b      	str	r3, [r7, #32]
 800c2be:	e7fe      	b.n	800c2be <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00b      	beq.n	800c2e0 <xQueueSemaphoreTake+0x54>
 800c2c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2cc:	b672      	cpsid	i
 800c2ce:	f383 8811 	msr	BASEPRI, r3
 800c2d2:	f3bf 8f6f 	isb	sy
 800c2d6:	f3bf 8f4f 	dsb	sy
 800c2da:	b662      	cpsie	i
 800c2dc:	61fb      	str	r3, [r7, #28]
 800c2de:	e7fe      	b.n	800c2de <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c2e0:	f001 f912 	bl	800d508 <xTaskGetSchedulerState>
 800c2e4:	4603      	mov	r3, r0
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d102      	bne.n	800c2f0 <xQueueSemaphoreTake+0x64>
 800c2ea:	683b      	ldr	r3, [r7, #0]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	d101      	bne.n	800c2f4 <xQueueSemaphoreTake+0x68>
 800c2f0:	2301      	movs	r3, #1
 800c2f2:	e000      	b.n	800c2f6 <xQueueSemaphoreTake+0x6a>
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d10b      	bne.n	800c312 <xQueueSemaphoreTake+0x86>
 800c2fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c2fe:	b672      	cpsid	i
 800c300:	f383 8811 	msr	BASEPRI, r3
 800c304:	f3bf 8f6f 	isb	sy
 800c308:	f3bf 8f4f 	dsb	sy
 800c30c:	b662      	cpsie	i
 800c30e:	61bb      	str	r3, [r7, #24]
 800c310:	e7fe      	b.n	800c310 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c312:	f001 fc41 	bl	800db98 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c316:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c318:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c31a:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d024      	beq.n	800c36c <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c324:	1e5a      	subs	r2, r3, #1
 800c326:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c328:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c32a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d104      	bne.n	800c33c <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c332:	f001 faab 	bl	800d88c <pvTaskIncrementMutexHeldCount>
 800c336:	4602      	mov	r2, r0
 800c338:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33a:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c33c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c33e:	691b      	ldr	r3, [r3, #16]
 800c340:	2b00      	cmp	r3, #0
 800c342:	d00f      	beq.n	800c364 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c346:	3310      	adds	r3, #16
 800c348:	4618      	mov	r0, r3
 800c34a:	f000 ff1d 	bl	800d188 <xTaskRemoveFromEventList>
 800c34e:	4603      	mov	r3, r0
 800c350:	2b00      	cmp	r3, #0
 800c352:	d007      	beq.n	800c364 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c354:	4b54      	ldr	r3, [pc, #336]	; (800c4a8 <xQueueSemaphoreTake+0x21c>)
 800c356:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c35a:	601a      	str	r2, [r3, #0]
 800c35c:	f3bf 8f4f 	dsb	sy
 800c360:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c364:	f001 fc4a 	bl	800dbfc <vPortExitCritical>
				return pdPASS;
 800c368:	2301      	movs	r3, #1
 800c36a:	e098      	b.n	800c49e <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c36c:	683b      	ldr	r3, [r7, #0]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d112      	bne.n	800c398 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c372:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c374:	2b00      	cmp	r3, #0
 800c376:	d00b      	beq.n	800c390 <xQueueSemaphoreTake+0x104>
 800c378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c37c:	b672      	cpsid	i
 800c37e:	f383 8811 	msr	BASEPRI, r3
 800c382:	f3bf 8f6f 	isb	sy
 800c386:	f3bf 8f4f 	dsb	sy
 800c38a:	b662      	cpsie	i
 800c38c:	617b      	str	r3, [r7, #20]
 800c38e:	e7fe      	b.n	800c38e <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c390:	f001 fc34 	bl	800dbfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c394:	2300      	movs	r3, #0
 800c396:	e082      	b.n	800c49e <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d106      	bne.n	800c3ac <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c39e:	f107 030c 	add.w	r3, r7, #12
 800c3a2:	4618      	mov	r0, r3
 800c3a4:	f000 ff54 	bl	800d250 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c3a8:	2301      	movs	r3, #1
 800c3aa:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c3ac:	f001 fc26 	bl	800dbfc <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c3b0:	f000 fccc 	bl	800cd4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c3b4:	f001 fbf0 	bl	800db98 <vPortEnterCritical>
 800c3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3ba:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c3be:	b25b      	sxtb	r3, r3
 800c3c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3c4:	d103      	bne.n	800c3ce <xQueueSemaphoreTake+0x142>
 800c3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c3d4:	b25b      	sxtb	r3, r3
 800c3d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c3da:	d103      	bne.n	800c3e4 <xQueueSemaphoreTake+0x158>
 800c3dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3de:	2200      	movs	r2, #0
 800c3e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c3e4:	f001 fc0a 	bl	800dbfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c3e8:	463a      	mov	r2, r7
 800c3ea:	f107 030c 	add.w	r3, r7, #12
 800c3ee:	4611      	mov	r1, r2
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	f000 ff43 	bl	800d27c <xTaskCheckForTimeOut>
 800c3f6:	4603      	mov	r3, r0
 800c3f8:	2b00      	cmp	r3, #0
 800c3fa:	d132      	bne.n	800c462 <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c3fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c3fe:	f000 f929 	bl	800c654 <prvIsQueueEmpty>
 800c402:	4603      	mov	r3, r0
 800c404:	2b00      	cmp	r3, #0
 800c406:	d026      	beq.n	800c456 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c408:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c40a:	681b      	ldr	r3, [r3, #0]
 800c40c:	2b00      	cmp	r3, #0
 800c40e:	d109      	bne.n	800c424 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c410:	f001 fbc2 	bl	800db98 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c416:	689b      	ldr	r3, [r3, #8]
 800c418:	4618      	mov	r0, r3
 800c41a:	f001 f893 	bl	800d544 <xTaskPriorityInherit>
 800c41e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c420:	f001 fbec 	bl	800dbfc <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c426:	3324      	adds	r3, #36	; 0x24
 800c428:	683a      	ldr	r2, [r7, #0]
 800c42a:	4611      	mov	r1, r2
 800c42c:	4618      	mov	r0, r3
 800c42e:	f000 fe85 	bl	800d13c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c432:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c434:	f000 f8bc 	bl	800c5b0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c438:	f000 fc96 	bl	800cd68 <xTaskResumeAll>
 800c43c:	4603      	mov	r3, r0
 800c43e:	2b00      	cmp	r3, #0
 800c440:	f47f af67 	bne.w	800c312 <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c444:	4b18      	ldr	r3, [pc, #96]	; (800c4a8 <xQueueSemaphoreTake+0x21c>)
 800c446:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c44a:	601a      	str	r2, [r3, #0]
 800c44c:	f3bf 8f4f 	dsb	sy
 800c450:	f3bf 8f6f 	isb	sy
 800c454:	e75d      	b.n	800c312 <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c456:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c458:	f000 f8aa 	bl	800c5b0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c45c:	f000 fc84 	bl	800cd68 <xTaskResumeAll>
 800c460:	e757      	b.n	800c312 <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c462:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c464:	f000 f8a4 	bl	800c5b0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c468:	f000 fc7e 	bl	800cd68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c46c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c46e:	f000 f8f1 	bl	800c654 <prvIsQueueEmpty>
 800c472:	4603      	mov	r3, r0
 800c474:	2b00      	cmp	r3, #0
 800c476:	f43f af4c 	beq.w	800c312 <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c47a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d00d      	beq.n	800c49c <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c480:	f001 fb8a 	bl	800db98 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c484:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c486:	f000 f811 	bl	800c4ac <prvGetDisinheritPriorityAfterTimeout>
 800c48a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c492:	4618      	mov	r0, r3
 800c494:	f001 f95e 	bl	800d754 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c498:	f001 fbb0 	bl	800dbfc <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c49c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c49e:	4618      	mov	r0, r3
 800c4a0:	3738      	adds	r7, #56	; 0x38
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	e000ed04 	.word	0xe000ed04

0800c4ac <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c4ac:	b480      	push	{r7}
 800c4ae:	b085      	sub	sp, #20
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4b8:	2b00      	cmp	r3, #0
 800c4ba:	d006      	beq.n	800c4ca <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c4bc:	687b      	ldr	r3, [r7, #4]
 800c4be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f1c3 0307 	rsb	r3, r3, #7
 800c4c6:	60fb      	str	r3, [r7, #12]
 800c4c8:	e001      	b.n	800c4ce <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c4ce:	68fb      	ldr	r3, [r7, #12]
	}
 800c4d0:	4618      	mov	r0, r3
 800c4d2:	3714      	adds	r7, #20
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4da:	4770      	bx	lr

0800c4dc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c4dc:	b580      	push	{r7, lr}
 800c4de:	b086      	sub	sp, #24
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c4e8:	2300      	movs	r3, #0
 800c4ea:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c4ec:	68fb      	ldr	r3, [r7, #12]
 800c4ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c4f0:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c4f2:	68fb      	ldr	r3, [r7, #12]
 800c4f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4f6:	2b00      	cmp	r3, #0
 800c4f8:	d10d      	bne.n	800c516 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4fa:	68fb      	ldr	r3, [r7, #12]
 800c4fc:	681b      	ldr	r3, [r3, #0]
 800c4fe:	2b00      	cmp	r3, #0
 800c500:	d14d      	bne.n	800c59e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	689b      	ldr	r3, [r3, #8]
 800c506:	4618      	mov	r0, r3
 800c508:	f001 f89c 	bl	800d644 <xTaskPriorityDisinherit>
 800c50c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	2200      	movs	r2, #0
 800c512:	609a      	str	r2, [r3, #8]
 800c514:	e043      	b.n	800c59e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d119      	bne.n	800c550 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c51c:	68fb      	ldr	r3, [r7, #12]
 800c51e:	6858      	ldr	r0, [r3, #4]
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c524:	461a      	mov	r2, r3
 800c526:	68b9      	ldr	r1, [r7, #8]
 800c528:	f001 fe24 	bl	800e174 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	685a      	ldr	r2, [r3, #4]
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c534:	441a      	add	r2, r3
 800c536:	68fb      	ldr	r3, [r7, #12]
 800c538:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	685a      	ldr	r2, [r3, #4]
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	689b      	ldr	r3, [r3, #8]
 800c542:	429a      	cmp	r2, r3
 800c544:	d32b      	bcc.n	800c59e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c546:	68fb      	ldr	r3, [r7, #12]
 800c548:	681a      	ldr	r2, [r3, #0]
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	605a      	str	r2, [r3, #4]
 800c54e:	e026      	b.n	800c59e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	68d8      	ldr	r0, [r3, #12]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c558:	461a      	mov	r2, r3
 800c55a:	68b9      	ldr	r1, [r7, #8]
 800c55c:	f001 fe0a 	bl	800e174 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	68da      	ldr	r2, [r3, #12]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c568:	425b      	negs	r3, r3
 800c56a:	441a      	add	r2, r3
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c570:	68fb      	ldr	r3, [r7, #12]
 800c572:	68da      	ldr	r2, [r3, #12]
 800c574:	68fb      	ldr	r3, [r7, #12]
 800c576:	681b      	ldr	r3, [r3, #0]
 800c578:	429a      	cmp	r2, r3
 800c57a:	d207      	bcs.n	800c58c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c57c:	68fb      	ldr	r3, [r7, #12]
 800c57e:	689a      	ldr	r2, [r3, #8]
 800c580:	68fb      	ldr	r3, [r7, #12]
 800c582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c584:	425b      	negs	r3, r3
 800c586:	441a      	add	r2, r3
 800c588:	68fb      	ldr	r3, [r7, #12]
 800c58a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c58c:	687b      	ldr	r3, [r7, #4]
 800c58e:	2b02      	cmp	r3, #2
 800c590:	d105      	bne.n	800c59e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d002      	beq.n	800c59e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c598:	693b      	ldr	r3, [r7, #16]
 800c59a:	3b01      	subs	r3, #1
 800c59c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c59e:	693b      	ldr	r3, [r7, #16]
 800c5a0:	1c5a      	adds	r2, r3, #1
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c5a6:	697b      	ldr	r3, [r7, #20]
}
 800c5a8:	4618      	mov	r0, r3
 800c5aa:	3718      	adds	r7, #24
 800c5ac:	46bd      	mov	sp, r7
 800c5ae:	bd80      	pop	{r7, pc}

0800c5b0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c5b0:	b580      	push	{r7, lr}
 800c5b2:	b084      	sub	sp, #16
 800c5b4:	af00      	add	r7, sp, #0
 800c5b6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c5b8:	f001 faee 	bl	800db98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c5bc:	687b      	ldr	r3, [r7, #4]
 800c5be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c5c2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5c4:	e011      	b.n	800c5ea <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c5c6:	687b      	ldr	r3, [r7, #4]
 800c5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d012      	beq.n	800c5f4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c5ce:	687b      	ldr	r3, [r7, #4]
 800c5d0:	3324      	adds	r3, #36	; 0x24
 800c5d2:	4618      	mov	r0, r3
 800c5d4:	f000 fdd8 	bl	800d188 <xTaskRemoveFromEventList>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d001      	beq.n	800c5e2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c5de:	f000 feb1 	bl	800d344 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c5e2:	7bfb      	ldrb	r3, [r7, #15]
 800c5e4:	3b01      	subs	r3, #1
 800c5e6:	b2db      	uxtb	r3, r3
 800c5e8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c5ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	dce9      	bgt.n	800c5c6 <prvUnlockQueue+0x16>
 800c5f2:	e000      	b.n	800c5f6 <prvUnlockQueue+0x46>
					break;
 800c5f4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	22ff      	movs	r2, #255	; 0xff
 800c5fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c5fe:	f001 fafd 	bl	800dbfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c602:	f001 fac9 	bl	800db98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c60c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c60e:	e011      	b.n	800c634 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	691b      	ldr	r3, [r3, #16]
 800c614:	2b00      	cmp	r3, #0
 800c616:	d012      	beq.n	800c63e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	3310      	adds	r3, #16
 800c61c:	4618      	mov	r0, r3
 800c61e:	f000 fdb3 	bl	800d188 <xTaskRemoveFromEventList>
 800c622:	4603      	mov	r3, r0
 800c624:	2b00      	cmp	r3, #0
 800c626:	d001      	beq.n	800c62c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c628:	f000 fe8c 	bl	800d344 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c62c:	7bbb      	ldrb	r3, [r7, #14]
 800c62e:	3b01      	subs	r3, #1
 800c630:	b2db      	uxtb	r3, r3
 800c632:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c634:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	dce9      	bgt.n	800c610 <prvUnlockQueue+0x60>
 800c63c:	e000      	b.n	800c640 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c63e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c640:	687b      	ldr	r3, [r7, #4]
 800c642:	22ff      	movs	r2, #255	; 0xff
 800c644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c648:	f001 fad8 	bl	800dbfc <vPortExitCritical>
}
 800c64c:	bf00      	nop
 800c64e:	3710      	adds	r7, #16
 800c650:	46bd      	mov	sp, r7
 800c652:	bd80      	pop	{r7, pc}

0800c654 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c654:	b580      	push	{r7, lr}
 800c656:	b084      	sub	sp, #16
 800c658:	af00      	add	r7, sp, #0
 800c65a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c65c:	f001 fa9c 	bl	800db98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c660:	687b      	ldr	r3, [r7, #4]
 800c662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c664:	2b00      	cmp	r3, #0
 800c666:	d102      	bne.n	800c66e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c668:	2301      	movs	r3, #1
 800c66a:	60fb      	str	r3, [r7, #12]
 800c66c:	e001      	b.n	800c672 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c66e:	2300      	movs	r3, #0
 800c670:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c672:	f001 fac3 	bl	800dbfc <vPortExitCritical>

	return xReturn;
 800c676:	68fb      	ldr	r3, [r7, #12]
}
 800c678:	4618      	mov	r0, r3
 800c67a:	3710      	adds	r7, #16
 800c67c:	46bd      	mov	sp, r7
 800c67e:	bd80      	pop	{r7, pc}

0800c680 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c688:	f001 fa86 	bl	800db98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c694:	429a      	cmp	r2, r3
 800c696:	d102      	bne.n	800c69e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c698:	2301      	movs	r3, #1
 800c69a:	60fb      	str	r3, [r7, #12]
 800c69c:	e001      	b.n	800c6a2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c69e:	2300      	movs	r3, #0
 800c6a0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c6a2:	f001 faab 	bl	800dbfc <vPortExitCritical>

	return xReturn;
 800c6a6:	68fb      	ldr	r3, [r7, #12]
}
 800c6a8:	4618      	mov	r0, r3
 800c6aa:	3710      	adds	r7, #16
 800c6ac:	46bd      	mov	sp, r7
 800c6ae:	bd80      	pop	{r7, pc}

0800c6b0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c6b0:	b580      	push	{r7, lr}
 800c6b2:	b08e      	sub	sp, #56	; 0x38
 800c6b4:	af04      	add	r7, sp, #16
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
 800c6bc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c6be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6c0:	2b00      	cmp	r3, #0
 800c6c2:	d10b      	bne.n	800c6dc <xTaskCreateStatic+0x2c>
 800c6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6c8:	b672      	cpsid	i
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	b662      	cpsie	i
 800c6d8:	623b      	str	r3, [r7, #32]
 800c6da:	e7fe      	b.n	800c6da <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c6dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d10b      	bne.n	800c6fa <xTaskCreateStatic+0x4a>
 800c6e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6e6:	b672      	cpsid	i
 800c6e8:	f383 8811 	msr	BASEPRI, r3
 800c6ec:	f3bf 8f6f 	isb	sy
 800c6f0:	f3bf 8f4f 	dsb	sy
 800c6f4:	b662      	cpsie	i
 800c6f6:	61fb      	str	r3, [r7, #28]
 800c6f8:	e7fe      	b.n	800c6f8 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c6fa:	2358      	movs	r3, #88	; 0x58
 800c6fc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6fe:	693b      	ldr	r3, [r7, #16]
 800c700:	2b58      	cmp	r3, #88	; 0x58
 800c702:	d00b      	beq.n	800c71c <xTaskCreateStatic+0x6c>
 800c704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c708:	b672      	cpsid	i
 800c70a:	f383 8811 	msr	BASEPRI, r3
 800c70e:	f3bf 8f6f 	isb	sy
 800c712:	f3bf 8f4f 	dsb	sy
 800c716:	b662      	cpsie	i
 800c718:	61bb      	str	r3, [r7, #24]
 800c71a:	e7fe      	b.n	800c71a <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c71c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c71e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c720:	2b00      	cmp	r3, #0
 800c722:	d01e      	beq.n	800c762 <xTaskCreateStatic+0xb2>
 800c724:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c726:	2b00      	cmp	r3, #0
 800c728:	d01b      	beq.n	800c762 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c72a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c72c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c72e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c730:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c732:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c736:	2202      	movs	r2, #2
 800c738:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c73c:	2300      	movs	r3, #0
 800c73e:	9303      	str	r3, [sp, #12]
 800c740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c742:	9302      	str	r3, [sp, #8]
 800c744:	f107 0314 	add.w	r3, r7, #20
 800c748:	9301      	str	r3, [sp, #4]
 800c74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c74c:	9300      	str	r3, [sp, #0]
 800c74e:	683b      	ldr	r3, [r7, #0]
 800c750:	687a      	ldr	r2, [r7, #4]
 800c752:	68b9      	ldr	r1, [r7, #8]
 800c754:	68f8      	ldr	r0, [r7, #12]
 800c756:	f000 f850 	bl	800c7fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c75a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c75c:	f000 f8e0 	bl	800c920 <prvAddNewTaskToReadyList>
 800c760:	e001      	b.n	800c766 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c762:	2300      	movs	r3, #0
 800c764:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c766:	697b      	ldr	r3, [r7, #20]
	}
 800c768:	4618      	mov	r0, r3
 800c76a:	3728      	adds	r7, #40	; 0x28
 800c76c:	46bd      	mov	sp, r7
 800c76e:	bd80      	pop	{r7, pc}

0800c770 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c770:	b580      	push	{r7, lr}
 800c772:	b08c      	sub	sp, #48	; 0x30
 800c774:	af04      	add	r7, sp, #16
 800c776:	60f8      	str	r0, [r7, #12]
 800c778:	60b9      	str	r1, [r7, #8]
 800c77a:	603b      	str	r3, [r7, #0]
 800c77c:	4613      	mov	r3, r2
 800c77e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c780:	88fb      	ldrh	r3, [r7, #6]
 800c782:	009b      	lsls	r3, r3, #2
 800c784:	4618      	mov	r0, r3
 800c786:	f001 fae7 	bl	800dd58 <pvPortMalloc>
 800c78a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c78c:	697b      	ldr	r3, [r7, #20]
 800c78e:	2b00      	cmp	r3, #0
 800c790:	d00e      	beq.n	800c7b0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c792:	2058      	movs	r0, #88	; 0x58
 800c794:	f001 fae0 	bl	800dd58 <pvPortMalloc>
 800c798:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c79a:	69fb      	ldr	r3, [r7, #28]
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d003      	beq.n	800c7a8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c7a0:	69fb      	ldr	r3, [r7, #28]
 800c7a2:	697a      	ldr	r2, [r7, #20]
 800c7a4:	631a      	str	r2, [r3, #48]	; 0x30
 800c7a6:	e005      	b.n	800c7b4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c7a8:	6978      	ldr	r0, [r7, #20]
 800c7aa:	f001 fba1 	bl	800def0 <vPortFree>
 800c7ae:	e001      	b.n	800c7b4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c7b4:	69fb      	ldr	r3, [r7, #28]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	d017      	beq.n	800c7ea <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c7ba:	69fb      	ldr	r3, [r7, #28]
 800c7bc:	2200      	movs	r2, #0
 800c7be:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	9303      	str	r3, [sp, #12]
 800c7c8:	69fb      	ldr	r3, [r7, #28]
 800c7ca:	9302      	str	r3, [sp, #8]
 800c7cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c7ce:	9301      	str	r3, [sp, #4]
 800c7d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7d2:	9300      	str	r3, [sp, #0]
 800c7d4:	683b      	ldr	r3, [r7, #0]
 800c7d6:	68b9      	ldr	r1, [r7, #8]
 800c7d8:	68f8      	ldr	r0, [r7, #12]
 800c7da:	f000 f80e 	bl	800c7fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c7de:	69f8      	ldr	r0, [r7, #28]
 800c7e0:	f000 f89e 	bl	800c920 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c7e4:	2301      	movs	r3, #1
 800c7e6:	61bb      	str	r3, [r7, #24]
 800c7e8:	e002      	b.n	800c7f0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c7ea:	f04f 33ff 	mov.w	r3, #4294967295
 800c7ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c7f0:	69bb      	ldr	r3, [r7, #24]
	}
 800c7f2:	4618      	mov	r0, r3
 800c7f4:	3720      	adds	r7, #32
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}

0800c7fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c7fa:	b580      	push	{r7, lr}
 800c7fc:	b088      	sub	sp, #32
 800c7fe:	af00      	add	r7, sp, #0
 800c800:	60f8      	str	r0, [r7, #12]
 800c802:	60b9      	str	r1, [r7, #8]
 800c804:	607a      	str	r2, [r7, #4]
 800c806:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c808:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c80a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	009b      	lsls	r3, r3, #2
 800c810:	461a      	mov	r2, r3
 800c812:	21a5      	movs	r1, #165	; 0xa5
 800c814:	f001 fcb9 	bl	800e18a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c81a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c81c:	6879      	ldr	r1, [r7, #4]
 800c81e:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c822:	440b      	add	r3, r1
 800c824:	009b      	lsls	r3, r3, #2
 800c826:	4413      	add	r3, r2
 800c828:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c82a:	69bb      	ldr	r3, [r7, #24]
 800c82c:	f023 0307 	bic.w	r3, r3, #7
 800c830:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c832:	69bb      	ldr	r3, [r7, #24]
 800c834:	f003 0307 	and.w	r3, r3, #7
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d00b      	beq.n	800c854 <prvInitialiseNewTask+0x5a>
 800c83c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c840:	b672      	cpsid	i
 800c842:	f383 8811 	msr	BASEPRI, r3
 800c846:	f3bf 8f6f 	isb	sy
 800c84a:	f3bf 8f4f 	dsb	sy
 800c84e:	b662      	cpsie	i
 800c850:	617b      	str	r3, [r7, #20]
 800c852:	e7fe      	b.n	800c852 <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c854:	68bb      	ldr	r3, [r7, #8]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d01f      	beq.n	800c89a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c85a:	2300      	movs	r3, #0
 800c85c:	61fb      	str	r3, [r7, #28]
 800c85e:	e012      	b.n	800c886 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c860:	68ba      	ldr	r2, [r7, #8]
 800c862:	69fb      	ldr	r3, [r7, #28]
 800c864:	4413      	add	r3, r2
 800c866:	7819      	ldrb	r1, [r3, #0]
 800c868:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c86a:	69fb      	ldr	r3, [r7, #28]
 800c86c:	4413      	add	r3, r2
 800c86e:	3334      	adds	r3, #52	; 0x34
 800c870:	460a      	mov	r2, r1
 800c872:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c874:	68ba      	ldr	r2, [r7, #8]
 800c876:	69fb      	ldr	r3, [r7, #28]
 800c878:	4413      	add	r3, r2
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	2b00      	cmp	r3, #0
 800c87e:	d006      	beq.n	800c88e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c880:	69fb      	ldr	r3, [r7, #28]
 800c882:	3301      	adds	r3, #1
 800c884:	61fb      	str	r3, [r7, #28]
 800c886:	69fb      	ldr	r3, [r7, #28]
 800c888:	2b0f      	cmp	r3, #15
 800c88a:	d9e9      	bls.n	800c860 <prvInitialiseNewTask+0x66>
 800c88c:	e000      	b.n	800c890 <prvInitialiseNewTask+0x96>
			{
				break;
 800c88e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c890:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c892:	2200      	movs	r2, #0
 800c894:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c898:	e003      	b.n	800c8a2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8a4:	2b06      	cmp	r3, #6
 800c8a6:	d901      	bls.n	800c8ac <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c8a8:	2306      	movs	r3, #6
 800c8aa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c8ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c8b6:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c8b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8c0:	3304      	adds	r3, #4
 800c8c2:	4618      	mov	r0, r3
 800c8c4:	f7ff f9b8 	bl	800bc38 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c8c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ca:	3318      	adds	r3, #24
 800c8cc:	4618      	mov	r0, r3
 800c8ce:	f7ff f9b3 	bl	800bc38 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c8d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c8d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8da:	f1c3 0207 	rsb	r2, r3, #7
 800c8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c8e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8e6:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c8e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8ea:	2200      	movs	r2, #0
 800c8ec:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c8ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8f6:	2200      	movs	r2, #0
 800c8f8:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	68f9      	ldr	r1, [r7, #12]
 800c900:	69b8      	ldr	r0, [r7, #24]
 800c902:	f001 f83d 	bl	800d980 <pxPortInitialiseStack>
 800c906:	4602      	mov	r2, r0
 800c908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c90a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d002      	beq.n	800c918 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c912:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c914:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c916:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c918:	bf00      	nop
 800c91a:	3720      	adds	r7, #32
 800c91c:	46bd      	mov	sp, r7
 800c91e:	bd80      	pop	{r7, pc}

0800c920 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b082      	sub	sp, #8
 800c924:	af00      	add	r7, sp, #0
 800c926:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c928:	f001 f936 	bl	800db98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c92c:	4b2a      	ldr	r3, [pc, #168]	; (800c9d8 <prvAddNewTaskToReadyList+0xb8>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	3301      	adds	r3, #1
 800c932:	4a29      	ldr	r2, [pc, #164]	; (800c9d8 <prvAddNewTaskToReadyList+0xb8>)
 800c934:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c936:	4b29      	ldr	r3, [pc, #164]	; (800c9dc <prvAddNewTaskToReadyList+0xbc>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d109      	bne.n	800c952 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c93e:	4a27      	ldr	r2, [pc, #156]	; (800c9dc <prvAddNewTaskToReadyList+0xbc>)
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c944:	4b24      	ldr	r3, [pc, #144]	; (800c9d8 <prvAddNewTaskToReadyList+0xb8>)
 800c946:	681b      	ldr	r3, [r3, #0]
 800c948:	2b01      	cmp	r3, #1
 800c94a:	d110      	bne.n	800c96e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c94c:	f000 fd20 	bl	800d390 <prvInitialiseTaskLists>
 800c950:	e00d      	b.n	800c96e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c952:	4b23      	ldr	r3, [pc, #140]	; (800c9e0 <prvAddNewTaskToReadyList+0xc0>)
 800c954:	681b      	ldr	r3, [r3, #0]
 800c956:	2b00      	cmp	r3, #0
 800c958:	d109      	bne.n	800c96e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c95a:	4b20      	ldr	r3, [pc, #128]	; (800c9dc <prvAddNewTaskToReadyList+0xbc>)
 800c95c:	681b      	ldr	r3, [r3, #0]
 800c95e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c964:	429a      	cmp	r2, r3
 800c966:	d802      	bhi.n	800c96e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c968:	4a1c      	ldr	r2, [pc, #112]	; (800c9dc <prvAddNewTaskToReadyList+0xbc>)
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c96e:	4b1d      	ldr	r3, [pc, #116]	; (800c9e4 <prvAddNewTaskToReadyList+0xc4>)
 800c970:	681b      	ldr	r3, [r3, #0]
 800c972:	3301      	adds	r3, #1
 800c974:	4a1b      	ldr	r2, [pc, #108]	; (800c9e4 <prvAddNewTaskToReadyList+0xc4>)
 800c976:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c97c:	2201      	movs	r2, #1
 800c97e:	409a      	lsls	r2, r3
 800c980:	4b19      	ldr	r3, [pc, #100]	; (800c9e8 <prvAddNewTaskToReadyList+0xc8>)
 800c982:	681b      	ldr	r3, [r3, #0]
 800c984:	4313      	orrs	r3, r2
 800c986:	4a18      	ldr	r2, [pc, #96]	; (800c9e8 <prvAddNewTaskToReadyList+0xc8>)
 800c988:	6013      	str	r3, [r2, #0]
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c98e:	4613      	mov	r3, r2
 800c990:	009b      	lsls	r3, r3, #2
 800c992:	4413      	add	r3, r2
 800c994:	009b      	lsls	r3, r3, #2
 800c996:	4a15      	ldr	r2, [pc, #84]	; (800c9ec <prvAddNewTaskToReadyList+0xcc>)
 800c998:	441a      	add	r2, r3
 800c99a:	687b      	ldr	r3, [r7, #4]
 800c99c:	3304      	adds	r3, #4
 800c99e:	4619      	mov	r1, r3
 800c9a0:	4610      	mov	r0, r2
 800c9a2:	f7ff f956 	bl	800bc52 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c9a6:	f001 f929 	bl	800dbfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c9aa:	4b0d      	ldr	r3, [pc, #52]	; (800c9e0 <prvAddNewTaskToReadyList+0xc0>)
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d00e      	beq.n	800c9d0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c9b2:	4b0a      	ldr	r3, [pc, #40]	; (800c9dc <prvAddNewTaskToReadyList+0xbc>)
 800c9b4:	681b      	ldr	r3, [r3, #0]
 800c9b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9bc:	429a      	cmp	r2, r3
 800c9be:	d207      	bcs.n	800c9d0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c9c0:	4b0b      	ldr	r3, [pc, #44]	; (800c9f0 <prvAddNewTaskToReadyList+0xd0>)
 800c9c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9c6:	601a      	str	r2, [r3, #0]
 800c9c8:	f3bf 8f4f 	dsb	sy
 800c9cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c9d0:	bf00      	nop
 800c9d2:	3708      	adds	r7, #8
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	20000608 	.word	0x20000608
 800c9dc:	20000508 	.word	0x20000508
 800c9e0:	20000614 	.word	0x20000614
 800c9e4:	20000624 	.word	0x20000624
 800c9e8:	20000610 	.word	0x20000610
 800c9ec:	2000050c 	.word	0x2000050c
 800c9f0:	e000ed04 	.word	0xe000ed04

0800c9f4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c9f4:	b580      	push	{r7, lr}
 800c9f6:	b08a      	sub	sp, #40	; 0x28
 800c9f8:	af00      	add	r7, sp, #0
 800c9fa:	6078      	str	r0, [r7, #4]
 800c9fc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800ca02:	687b      	ldr	r3, [r7, #4]
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d10b      	bne.n	800ca20 <vTaskDelayUntil+0x2c>
 800ca08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca0c:	b672      	cpsid	i
 800ca0e:	f383 8811 	msr	BASEPRI, r3
 800ca12:	f3bf 8f6f 	isb	sy
 800ca16:	f3bf 8f4f 	dsb	sy
 800ca1a:	b662      	cpsie	i
 800ca1c:	617b      	str	r3, [r7, #20]
 800ca1e:	e7fe      	b.n	800ca1e <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d10b      	bne.n	800ca3e <vTaskDelayUntil+0x4a>
 800ca26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca2a:	b672      	cpsid	i
 800ca2c:	f383 8811 	msr	BASEPRI, r3
 800ca30:	f3bf 8f6f 	isb	sy
 800ca34:	f3bf 8f4f 	dsb	sy
 800ca38:	b662      	cpsie	i
 800ca3a:	613b      	str	r3, [r7, #16]
 800ca3c:	e7fe      	b.n	800ca3c <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800ca3e:	4b2a      	ldr	r3, [pc, #168]	; (800cae8 <vTaskDelayUntil+0xf4>)
 800ca40:	681b      	ldr	r3, [r3, #0]
 800ca42:	2b00      	cmp	r3, #0
 800ca44:	d00b      	beq.n	800ca5e <vTaskDelayUntil+0x6a>
 800ca46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca4a:	b672      	cpsid	i
 800ca4c:	f383 8811 	msr	BASEPRI, r3
 800ca50:	f3bf 8f6f 	isb	sy
 800ca54:	f3bf 8f4f 	dsb	sy
 800ca58:	b662      	cpsie	i
 800ca5a:	60fb      	str	r3, [r7, #12]
 800ca5c:	e7fe      	b.n	800ca5c <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800ca5e:	f000 f975 	bl	800cd4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800ca62:	4b22      	ldr	r3, [pc, #136]	; (800caec <vTaskDelayUntil+0xf8>)
 800ca64:	681b      	ldr	r3, [r3, #0]
 800ca66:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	683a      	ldr	r2, [r7, #0]
 800ca6e:	4413      	add	r3, r2
 800ca70:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	6a3a      	ldr	r2, [r7, #32]
 800ca78:	429a      	cmp	r2, r3
 800ca7a:	d20b      	bcs.n	800ca94 <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	69fa      	ldr	r2, [r7, #28]
 800ca82:	429a      	cmp	r2, r3
 800ca84:	d211      	bcs.n	800caaa <vTaskDelayUntil+0xb6>
 800ca86:	69fa      	ldr	r2, [r7, #28]
 800ca88:	6a3b      	ldr	r3, [r7, #32]
 800ca8a:	429a      	cmp	r2, r3
 800ca8c:	d90d      	bls.n	800caaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800ca8e:	2301      	movs	r3, #1
 800ca90:	627b      	str	r3, [r7, #36]	; 0x24
 800ca92:	e00a      	b.n	800caaa <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	681b      	ldr	r3, [r3, #0]
 800ca98:	69fa      	ldr	r2, [r7, #28]
 800ca9a:	429a      	cmp	r2, r3
 800ca9c:	d303      	bcc.n	800caa6 <vTaskDelayUntil+0xb2>
 800ca9e:	69fa      	ldr	r2, [r7, #28]
 800caa0:	6a3b      	ldr	r3, [r7, #32]
 800caa2:	429a      	cmp	r2, r3
 800caa4:	d901      	bls.n	800caaa <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800caa6:	2301      	movs	r3, #1
 800caa8:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	69fa      	ldr	r2, [r7, #28]
 800caae:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800cab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cab2:	2b00      	cmp	r3, #0
 800cab4:	d006      	beq.n	800cac4 <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800cab6:	69fa      	ldr	r2, [r7, #28]
 800cab8:	6a3b      	ldr	r3, [r7, #32]
 800caba:	1ad3      	subs	r3, r2, r3
 800cabc:	2100      	movs	r1, #0
 800cabe:	4618      	mov	r0, r3
 800cac0:	f000 fef8 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800cac4:	f000 f950 	bl	800cd68 <xTaskResumeAll>
 800cac8:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800caca:	69bb      	ldr	r3, [r7, #24]
 800cacc:	2b00      	cmp	r3, #0
 800cace:	d107      	bne.n	800cae0 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800cad0:	4b07      	ldr	r3, [pc, #28]	; (800caf0 <vTaskDelayUntil+0xfc>)
 800cad2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cad6:	601a      	str	r2, [r3, #0]
 800cad8:	f3bf 8f4f 	dsb	sy
 800cadc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cae0:	bf00      	nop
 800cae2:	3728      	adds	r7, #40	; 0x28
 800cae4:	46bd      	mov	sp, r7
 800cae6:	bd80      	pop	{r7, pc}
 800cae8:	20000630 	.word	0x20000630
 800caec:	2000060c 	.word	0x2000060c
 800caf0:	e000ed04 	.word	0xe000ed04

0800caf4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800cafc:	2300      	movs	r3, #0
 800cafe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2b00      	cmp	r3, #0
 800cb04:	d018      	beq.n	800cb38 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800cb06:	4b14      	ldr	r3, [pc, #80]	; (800cb58 <vTaskDelay+0x64>)
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2b00      	cmp	r3, #0
 800cb0c:	d00b      	beq.n	800cb26 <vTaskDelay+0x32>
 800cb0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb12:	b672      	cpsid	i
 800cb14:	f383 8811 	msr	BASEPRI, r3
 800cb18:	f3bf 8f6f 	isb	sy
 800cb1c:	f3bf 8f4f 	dsb	sy
 800cb20:	b662      	cpsie	i
 800cb22:	60bb      	str	r3, [r7, #8]
 800cb24:	e7fe      	b.n	800cb24 <vTaskDelay+0x30>
			vTaskSuspendAll();
 800cb26:	f000 f911 	bl	800cd4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800cb2a:	2100      	movs	r1, #0
 800cb2c:	6878      	ldr	r0, [r7, #4]
 800cb2e:	f000 fec1 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800cb32:	f000 f919 	bl	800cd68 <xTaskResumeAll>
 800cb36:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800cb38:	68fb      	ldr	r3, [r7, #12]
 800cb3a:	2b00      	cmp	r3, #0
 800cb3c:	d107      	bne.n	800cb4e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800cb3e:	4b07      	ldr	r3, [pc, #28]	; (800cb5c <vTaskDelay+0x68>)
 800cb40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb44:	601a      	str	r2, [r3, #0]
 800cb46:	f3bf 8f4f 	dsb	sy
 800cb4a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cb4e:	bf00      	nop
 800cb50:	3710      	adds	r7, #16
 800cb52:	46bd      	mov	sp, r7
 800cb54:	bd80      	pop	{r7, pc}
 800cb56:	bf00      	nop
 800cb58:	20000630 	.word	0x20000630
 800cb5c:	e000ed04 	.word	0xe000ed04

0800cb60 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b084      	sub	sp, #16
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800cb68:	f001 f816 	bl	800db98 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d102      	bne.n	800cb78 <vTaskSuspend+0x18>
 800cb72:	4b3d      	ldr	r3, [pc, #244]	; (800cc68 <vTaskSuspend+0x108>)
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	e000      	b.n	800cb7a <vTaskSuspend+0x1a>
 800cb78:	687b      	ldr	r3, [r7, #4]
 800cb7a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	3304      	adds	r3, #4
 800cb80:	4618      	mov	r0, r3
 800cb82:	f7ff f8c3 	bl	800bd0c <uxListRemove>
 800cb86:	4603      	mov	r3, r0
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d115      	bne.n	800cbb8 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800cb8c:	68fb      	ldr	r3, [r7, #12]
 800cb8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb90:	4936      	ldr	r1, [pc, #216]	; (800cc6c <vTaskSuspend+0x10c>)
 800cb92:	4613      	mov	r3, r2
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	4413      	add	r3, r2
 800cb98:	009b      	lsls	r3, r3, #2
 800cb9a:	440b      	add	r3, r1
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	d10a      	bne.n	800cbb8 <vTaskSuspend+0x58>
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cba6:	2201      	movs	r2, #1
 800cba8:	fa02 f303 	lsl.w	r3, r2, r3
 800cbac:	43da      	mvns	r2, r3
 800cbae:	4b30      	ldr	r3, [pc, #192]	; (800cc70 <vTaskSuspend+0x110>)
 800cbb0:	681b      	ldr	r3, [r3, #0]
 800cbb2:	4013      	ands	r3, r2
 800cbb4:	4a2e      	ldr	r2, [pc, #184]	; (800cc70 <vTaskSuspend+0x110>)
 800cbb6:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cbb8:	68fb      	ldr	r3, [r7, #12]
 800cbba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbbc:	2b00      	cmp	r3, #0
 800cbbe:	d004      	beq.n	800cbca <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cbc0:	68fb      	ldr	r3, [r7, #12]
 800cbc2:	3318      	adds	r3, #24
 800cbc4:	4618      	mov	r0, r3
 800cbc6:	f7ff f8a1 	bl	800bd0c <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	3304      	adds	r3, #4
 800cbce:	4619      	mov	r1, r3
 800cbd0:	4828      	ldr	r0, [pc, #160]	; (800cc74 <vTaskSuspend+0x114>)
 800cbd2:	f7ff f83e 	bl	800bc52 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	2b01      	cmp	r3, #1
 800cbe0:	d103      	bne.n	800cbea <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cbe2:	68fb      	ldr	r3, [r7, #12]
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800cbea:	f001 f807 	bl	800dbfc <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800cbee:	4b22      	ldr	r3, [pc, #136]	; (800cc78 <vTaskSuspend+0x118>)
 800cbf0:	681b      	ldr	r3, [r3, #0]
 800cbf2:	2b00      	cmp	r3, #0
 800cbf4:	d005      	beq.n	800cc02 <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800cbf6:	f000 ffcf 	bl	800db98 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800cbfa:	f000 fc65 	bl	800d4c8 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800cbfe:	f000 fffd 	bl	800dbfc <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800cc02:	4b19      	ldr	r3, [pc, #100]	; (800cc68 <vTaskSuspend+0x108>)
 800cc04:	681b      	ldr	r3, [r3, #0]
 800cc06:	68fa      	ldr	r2, [r7, #12]
 800cc08:	429a      	cmp	r2, r3
 800cc0a:	d128      	bne.n	800cc5e <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800cc0c:	4b1a      	ldr	r3, [pc, #104]	; (800cc78 <vTaskSuspend+0x118>)
 800cc0e:	681b      	ldr	r3, [r3, #0]
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	d018      	beq.n	800cc46 <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800cc14:	4b19      	ldr	r3, [pc, #100]	; (800cc7c <vTaskSuspend+0x11c>)
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d00b      	beq.n	800cc34 <vTaskSuspend+0xd4>
 800cc1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc20:	b672      	cpsid	i
 800cc22:	f383 8811 	msr	BASEPRI, r3
 800cc26:	f3bf 8f6f 	isb	sy
 800cc2a:	f3bf 8f4f 	dsb	sy
 800cc2e:	b662      	cpsie	i
 800cc30:	60bb      	str	r3, [r7, #8]
 800cc32:	e7fe      	b.n	800cc32 <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800cc34:	4b12      	ldr	r3, [pc, #72]	; (800cc80 <vTaskSuspend+0x120>)
 800cc36:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cc3a:	601a      	str	r2, [r3, #0]
 800cc3c:	f3bf 8f4f 	dsb	sy
 800cc40:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800cc44:	e00b      	b.n	800cc5e <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800cc46:	4b0b      	ldr	r3, [pc, #44]	; (800cc74 <vTaskSuspend+0x114>)
 800cc48:	681a      	ldr	r2, [r3, #0]
 800cc4a:	4b0e      	ldr	r3, [pc, #56]	; (800cc84 <vTaskSuspend+0x124>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d103      	bne.n	800cc5a <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800cc52:	4b05      	ldr	r3, [pc, #20]	; (800cc68 <vTaskSuspend+0x108>)
 800cc54:	2200      	movs	r2, #0
 800cc56:	601a      	str	r2, [r3, #0]
	}
 800cc58:	e001      	b.n	800cc5e <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800cc5a:	f000 f9ed 	bl	800d038 <vTaskSwitchContext>
	}
 800cc5e:	bf00      	nop
 800cc60:	3710      	adds	r7, #16
 800cc62:	46bd      	mov	sp, r7
 800cc64:	bd80      	pop	{r7, pc}
 800cc66:	bf00      	nop
 800cc68:	20000508 	.word	0x20000508
 800cc6c:	2000050c 	.word	0x2000050c
 800cc70:	20000610 	.word	0x20000610
 800cc74:	200005f4 	.word	0x200005f4
 800cc78:	20000614 	.word	0x20000614
 800cc7c:	20000630 	.word	0x20000630
 800cc80:	e000ed04 	.word	0xe000ed04
 800cc84:	20000608 	.word	0x20000608

0800cc88 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b08a      	sub	sp, #40	; 0x28
 800cc8c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cc8e:	2300      	movs	r3, #0
 800cc90:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800cc92:	2300      	movs	r3, #0
 800cc94:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cc96:	463a      	mov	r2, r7
 800cc98:	1d39      	adds	r1, r7, #4
 800cc9a:	f107 0308 	add.w	r3, r7, #8
 800cc9e:	4618      	mov	r0, r3
 800cca0:	f7f3 fca0 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cca4:	6839      	ldr	r1, [r7, #0]
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	68ba      	ldr	r2, [r7, #8]
 800ccaa:	9202      	str	r2, [sp, #8]
 800ccac:	9301      	str	r3, [sp, #4]
 800ccae:	2300      	movs	r3, #0
 800ccb0:	9300      	str	r3, [sp, #0]
 800ccb2:	2300      	movs	r3, #0
 800ccb4:	460a      	mov	r2, r1
 800ccb6:	491f      	ldr	r1, [pc, #124]	; (800cd34 <vTaskStartScheduler+0xac>)
 800ccb8:	481f      	ldr	r0, [pc, #124]	; (800cd38 <vTaskStartScheduler+0xb0>)
 800ccba:	f7ff fcf9 	bl	800c6b0 <xTaskCreateStatic>
 800ccbe:	4602      	mov	r2, r0
 800ccc0:	4b1e      	ldr	r3, [pc, #120]	; (800cd3c <vTaskStartScheduler+0xb4>)
 800ccc2:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ccc4:	4b1d      	ldr	r3, [pc, #116]	; (800cd3c <vTaskStartScheduler+0xb4>)
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	d002      	beq.n	800ccd2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cccc:	2301      	movs	r3, #1
 800ccce:	617b      	str	r3, [r7, #20]
 800ccd0:	e001      	b.n	800ccd6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ccd2:	2300      	movs	r3, #0
 800ccd4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ccd6:	697b      	ldr	r3, [r7, #20]
 800ccd8:	2b01      	cmp	r3, #1
 800ccda:	d117      	bne.n	800cd0c <vTaskStartScheduler+0x84>
 800ccdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cce0:	b672      	cpsid	i
 800cce2:	f383 8811 	msr	BASEPRI, r3
 800cce6:	f3bf 8f6f 	isb	sy
 800ccea:	f3bf 8f4f 	dsb	sy
 800ccee:	b662      	cpsie	i
 800ccf0:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ccf2:	4b13      	ldr	r3, [pc, #76]	; (800cd40 <vTaskStartScheduler+0xb8>)
 800ccf4:	f04f 32ff 	mov.w	r2, #4294967295
 800ccf8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ccfa:	4b12      	ldr	r3, [pc, #72]	; (800cd44 <vTaskStartScheduler+0xbc>)
 800ccfc:	2201      	movs	r2, #1
 800ccfe:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cd00:	4b11      	ldr	r3, [pc, #68]	; (800cd48 <vTaskStartScheduler+0xc0>)
 800cd02:	2200      	movs	r2, #0
 800cd04:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cd06:	f000 fecb 	bl	800daa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cd0a:	e00f      	b.n	800cd2c <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cd0c:	697b      	ldr	r3, [r7, #20]
 800cd0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd12:	d10b      	bne.n	800cd2c <vTaskStartScheduler+0xa4>
 800cd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd18:	b672      	cpsid	i
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	b662      	cpsie	i
 800cd28:	60fb      	str	r3, [r7, #12]
 800cd2a:	e7fe      	b.n	800cd2a <vTaskStartScheduler+0xa2>
}
 800cd2c:	bf00      	nop
 800cd2e:	3718      	adds	r7, #24
 800cd30:	46bd      	mov	sp, r7
 800cd32:	bd80      	pop	{r7, pc}
 800cd34:	0800eab0 	.word	0x0800eab0
 800cd38:	0800d35d 	.word	0x0800d35d
 800cd3c:	2000062c 	.word	0x2000062c
 800cd40:	20000628 	.word	0x20000628
 800cd44:	20000614 	.word	0x20000614
 800cd48:	2000060c 	.word	0x2000060c

0800cd4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cd50:	4b04      	ldr	r3, [pc, #16]	; (800cd64 <vTaskSuspendAll+0x18>)
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	3301      	adds	r3, #1
 800cd56:	4a03      	ldr	r2, [pc, #12]	; (800cd64 <vTaskSuspendAll+0x18>)
 800cd58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cd5a:	bf00      	nop
 800cd5c:	46bd      	mov	sp, r7
 800cd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd62:	4770      	bx	lr
 800cd64:	20000630 	.word	0x20000630

0800cd68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cd68:	b580      	push	{r7, lr}
 800cd6a:	b084      	sub	sp, #16
 800cd6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cd6e:	2300      	movs	r3, #0
 800cd70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cd72:	2300      	movs	r3, #0
 800cd74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cd76:	4b42      	ldr	r3, [pc, #264]	; (800ce80 <xTaskResumeAll+0x118>)
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d10b      	bne.n	800cd96 <xTaskResumeAll+0x2e>
 800cd7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd82:	b672      	cpsid	i
 800cd84:	f383 8811 	msr	BASEPRI, r3
 800cd88:	f3bf 8f6f 	isb	sy
 800cd8c:	f3bf 8f4f 	dsb	sy
 800cd90:	b662      	cpsie	i
 800cd92:	603b      	str	r3, [r7, #0]
 800cd94:	e7fe      	b.n	800cd94 <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cd96:	f000 feff 	bl	800db98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cd9a:	4b39      	ldr	r3, [pc, #228]	; (800ce80 <xTaskResumeAll+0x118>)
 800cd9c:	681b      	ldr	r3, [r3, #0]
 800cd9e:	3b01      	subs	r3, #1
 800cda0:	4a37      	ldr	r2, [pc, #220]	; (800ce80 <xTaskResumeAll+0x118>)
 800cda2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cda4:	4b36      	ldr	r3, [pc, #216]	; (800ce80 <xTaskResumeAll+0x118>)
 800cda6:	681b      	ldr	r3, [r3, #0]
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d161      	bne.n	800ce70 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cdac:	4b35      	ldr	r3, [pc, #212]	; (800ce84 <xTaskResumeAll+0x11c>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d05d      	beq.n	800ce70 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cdb4:	e02e      	b.n	800ce14 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdb6:	4b34      	ldr	r3, [pc, #208]	; (800ce88 <xTaskResumeAll+0x120>)
 800cdb8:	68db      	ldr	r3, [r3, #12]
 800cdba:	68db      	ldr	r3, [r3, #12]
 800cdbc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cdbe:	68fb      	ldr	r3, [r7, #12]
 800cdc0:	3318      	adds	r3, #24
 800cdc2:	4618      	mov	r0, r3
 800cdc4:	f7fe ffa2 	bl	800bd0c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cdc8:	68fb      	ldr	r3, [r7, #12]
 800cdca:	3304      	adds	r3, #4
 800cdcc:	4618      	mov	r0, r3
 800cdce:	f7fe ff9d 	bl	800bd0c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cdd2:	68fb      	ldr	r3, [r7, #12]
 800cdd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cdd6:	2201      	movs	r2, #1
 800cdd8:	409a      	lsls	r2, r3
 800cdda:	4b2c      	ldr	r3, [pc, #176]	; (800ce8c <xTaskResumeAll+0x124>)
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	4313      	orrs	r3, r2
 800cde0:	4a2a      	ldr	r2, [pc, #168]	; (800ce8c <xTaskResumeAll+0x124>)
 800cde2:	6013      	str	r3, [r2, #0]
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cde8:	4613      	mov	r3, r2
 800cdea:	009b      	lsls	r3, r3, #2
 800cdec:	4413      	add	r3, r2
 800cdee:	009b      	lsls	r3, r3, #2
 800cdf0:	4a27      	ldr	r2, [pc, #156]	; (800ce90 <xTaskResumeAll+0x128>)
 800cdf2:	441a      	add	r2, r3
 800cdf4:	68fb      	ldr	r3, [r7, #12]
 800cdf6:	3304      	adds	r3, #4
 800cdf8:	4619      	mov	r1, r3
 800cdfa:	4610      	mov	r0, r2
 800cdfc:	f7fe ff29 	bl	800bc52 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ce00:	68fb      	ldr	r3, [r7, #12]
 800ce02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ce04:	4b23      	ldr	r3, [pc, #140]	; (800ce94 <xTaskResumeAll+0x12c>)
 800ce06:	681b      	ldr	r3, [r3, #0]
 800ce08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ce0a:	429a      	cmp	r2, r3
 800ce0c:	d302      	bcc.n	800ce14 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800ce0e:	4b22      	ldr	r3, [pc, #136]	; (800ce98 <xTaskResumeAll+0x130>)
 800ce10:	2201      	movs	r2, #1
 800ce12:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ce14:	4b1c      	ldr	r3, [pc, #112]	; (800ce88 <xTaskResumeAll+0x120>)
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	2b00      	cmp	r3, #0
 800ce1a:	d1cc      	bne.n	800cdb6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	d001      	beq.n	800ce26 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ce22:	f000 fb51 	bl	800d4c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800ce26:	4b1d      	ldr	r3, [pc, #116]	; (800ce9c <xTaskResumeAll+0x134>)
 800ce28:	681b      	ldr	r3, [r3, #0]
 800ce2a:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800ce2c:	687b      	ldr	r3, [r7, #4]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d010      	beq.n	800ce54 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ce32:	f000 f847 	bl	800cec4 <xTaskIncrementTick>
 800ce36:	4603      	mov	r3, r0
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	d002      	beq.n	800ce42 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800ce3c:	4b16      	ldr	r3, [pc, #88]	; (800ce98 <xTaskResumeAll+0x130>)
 800ce3e:	2201      	movs	r2, #1
 800ce40:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800ce42:	687b      	ldr	r3, [r7, #4]
 800ce44:	3b01      	subs	r3, #1
 800ce46:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d1f1      	bne.n	800ce32 <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800ce4e:	4b13      	ldr	r3, [pc, #76]	; (800ce9c <xTaskResumeAll+0x134>)
 800ce50:	2200      	movs	r2, #0
 800ce52:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800ce54:	4b10      	ldr	r3, [pc, #64]	; (800ce98 <xTaskResumeAll+0x130>)
 800ce56:	681b      	ldr	r3, [r3, #0]
 800ce58:	2b00      	cmp	r3, #0
 800ce5a:	d009      	beq.n	800ce70 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800ce5c:	2301      	movs	r3, #1
 800ce5e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800ce60:	4b0f      	ldr	r3, [pc, #60]	; (800cea0 <xTaskResumeAll+0x138>)
 800ce62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce66:	601a      	str	r2, [r3, #0]
 800ce68:	f3bf 8f4f 	dsb	sy
 800ce6c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ce70:	f000 fec4 	bl	800dbfc <vPortExitCritical>

	return xAlreadyYielded;
 800ce74:	68bb      	ldr	r3, [r7, #8]
}
 800ce76:	4618      	mov	r0, r3
 800ce78:	3710      	adds	r7, #16
 800ce7a:	46bd      	mov	sp, r7
 800ce7c:	bd80      	pop	{r7, pc}
 800ce7e:	bf00      	nop
 800ce80:	20000630 	.word	0x20000630
 800ce84:	20000608 	.word	0x20000608
 800ce88:	200005c8 	.word	0x200005c8
 800ce8c:	20000610 	.word	0x20000610
 800ce90:	2000050c 	.word	0x2000050c
 800ce94:	20000508 	.word	0x20000508
 800ce98:	2000061c 	.word	0x2000061c
 800ce9c:	20000618 	.word	0x20000618
 800cea0:	e000ed04 	.word	0xe000ed04

0800cea4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cea4:	b480      	push	{r7}
 800cea6:	b083      	sub	sp, #12
 800cea8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800ceaa:	4b05      	ldr	r3, [pc, #20]	; (800cec0 <xTaskGetTickCount+0x1c>)
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800ceb0:	687b      	ldr	r3, [r7, #4]
}
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	370c      	adds	r7, #12
 800ceb6:	46bd      	mov	sp, r7
 800ceb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cebc:	4770      	bx	lr
 800cebe:	bf00      	nop
 800cec0:	2000060c 	.word	0x2000060c

0800cec4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cec4:	b580      	push	{r7, lr}
 800cec6:	b086      	sub	sp, #24
 800cec8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ceca:	2300      	movs	r3, #0
 800cecc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cece:	4b4f      	ldr	r3, [pc, #316]	; (800d00c <xTaskIncrementTick+0x148>)
 800ced0:	681b      	ldr	r3, [r3, #0]
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f040 8089 	bne.w	800cfea <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ced8:	4b4d      	ldr	r3, [pc, #308]	; (800d010 <xTaskIncrementTick+0x14c>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	3301      	adds	r3, #1
 800cede:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cee0:	4a4b      	ldr	r2, [pc, #300]	; (800d010 <xTaskIncrementTick+0x14c>)
 800cee2:	693b      	ldr	r3, [r7, #16]
 800cee4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cee6:	693b      	ldr	r3, [r7, #16]
 800cee8:	2b00      	cmp	r3, #0
 800ceea:	d121      	bne.n	800cf30 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800ceec:	4b49      	ldr	r3, [pc, #292]	; (800d014 <xTaskIncrementTick+0x150>)
 800ceee:	681b      	ldr	r3, [r3, #0]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d00b      	beq.n	800cf0e <xTaskIncrementTick+0x4a>
 800cef6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cefa:	b672      	cpsid	i
 800cefc:	f383 8811 	msr	BASEPRI, r3
 800cf00:	f3bf 8f6f 	isb	sy
 800cf04:	f3bf 8f4f 	dsb	sy
 800cf08:	b662      	cpsie	i
 800cf0a:	603b      	str	r3, [r7, #0]
 800cf0c:	e7fe      	b.n	800cf0c <xTaskIncrementTick+0x48>
 800cf0e:	4b41      	ldr	r3, [pc, #260]	; (800d014 <xTaskIncrementTick+0x150>)
 800cf10:	681b      	ldr	r3, [r3, #0]
 800cf12:	60fb      	str	r3, [r7, #12]
 800cf14:	4b40      	ldr	r3, [pc, #256]	; (800d018 <xTaskIncrementTick+0x154>)
 800cf16:	681b      	ldr	r3, [r3, #0]
 800cf18:	4a3e      	ldr	r2, [pc, #248]	; (800d014 <xTaskIncrementTick+0x150>)
 800cf1a:	6013      	str	r3, [r2, #0]
 800cf1c:	4a3e      	ldr	r2, [pc, #248]	; (800d018 <xTaskIncrementTick+0x154>)
 800cf1e:	68fb      	ldr	r3, [r7, #12]
 800cf20:	6013      	str	r3, [r2, #0]
 800cf22:	4b3e      	ldr	r3, [pc, #248]	; (800d01c <xTaskIncrementTick+0x158>)
 800cf24:	681b      	ldr	r3, [r3, #0]
 800cf26:	3301      	adds	r3, #1
 800cf28:	4a3c      	ldr	r2, [pc, #240]	; (800d01c <xTaskIncrementTick+0x158>)
 800cf2a:	6013      	str	r3, [r2, #0]
 800cf2c:	f000 facc 	bl	800d4c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cf30:	4b3b      	ldr	r3, [pc, #236]	; (800d020 <xTaskIncrementTick+0x15c>)
 800cf32:	681b      	ldr	r3, [r3, #0]
 800cf34:	693a      	ldr	r2, [r7, #16]
 800cf36:	429a      	cmp	r2, r3
 800cf38:	d348      	bcc.n	800cfcc <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf3a:	4b36      	ldr	r3, [pc, #216]	; (800d014 <xTaskIncrementTick+0x150>)
 800cf3c:	681b      	ldr	r3, [r3, #0]
 800cf3e:	681b      	ldr	r3, [r3, #0]
 800cf40:	2b00      	cmp	r3, #0
 800cf42:	d104      	bne.n	800cf4e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cf44:	4b36      	ldr	r3, [pc, #216]	; (800d020 <xTaskIncrementTick+0x15c>)
 800cf46:	f04f 32ff 	mov.w	r2, #4294967295
 800cf4a:	601a      	str	r2, [r3, #0]
					break;
 800cf4c:	e03e      	b.n	800cfcc <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf4e:	4b31      	ldr	r3, [pc, #196]	; (800d014 <xTaskIncrementTick+0x150>)
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	68db      	ldr	r3, [r3, #12]
 800cf54:	68db      	ldr	r3, [r3, #12]
 800cf56:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cf58:	68bb      	ldr	r3, [r7, #8]
 800cf5a:	685b      	ldr	r3, [r3, #4]
 800cf5c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cf5e:	693a      	ldr	r2, [r7, #16]
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	429a      	cmp	r2, r3
 800cf64:	d203      	bcs.n	800cf6e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cf66:	4a2e      	ldr	r2, [pc, #184]	; (800d020 <xTaskIncrementTick+0x15c>)
 800cf68:	687b      	ldr	r3, [r7, #4]
 800cf6a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cf6c:	e02e      	b.n	800cfcc <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cf6e:	68bb      	ldr	r3, [r7, #8]
 800cf70:	3304      	adds	r3, #4
 800cf72:	4618      	mov	r0, r3
 800cf74:	f7fe feca 	bl	800bd0c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cf78:	68bb      	ldr	r3, [r7, #8]
 800cf7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d004      	beq.n	800cf8a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cf80:	68bb      	ldr	r3, [r7, #8]
 800cf82:	3318      	adds	r3, #24
 800cf84:	4618      	mov	r0, r3
 800cf86:	f7fe fec1 	bl	800bd0c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cf8a:	68bb      	ldr	r3, [r7, #8]
 800cf8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf8e:	2201      	movs	r2, #1
 800cf90:	409a      	lsls	r2, r3
 800cf92:	4b24      	ldr	r3, [pc, #144]	; (800d024 <xTaskIncrementTick+0x160>)
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	4313      	orrs	r3, r2
 800cf98:	4a22      	ldr	r2, [pc, #136]	; (800d024 <xTaskIncrementTick+0x160>)
 800cf9a:	6013      	str	r3, [r2, #0]
 800cf9c:	68bb      	ldr	r3, [r7, #8]
 800cf9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfa0:	4613      	mov	r3, r2
 800cfa2:	009b      	lsls	r3, r3, #2
 800cfa4:	4413      	add	r3, r2
 800cfa6:	009b      	lsls	r3, r3, #2
 800cfa8:	4a1f      	ldr	r2, [pc, #124]	; (800d028 <xTaskIncrementTick+0x164>)
 800cfaa:	441a      	add	r2, r3
 800cfac:	68bb      	ldr	r3, [r7, #8]
 800cfae:	3304      	adds	r3, #4
 800cfb0:	4619      	mov	r1, r3
 800cfb2:	4610      	mov	r0, r2
 800cfb4:	f7fe fe4d 	bl	800bc52 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cfb8:	68bb      	ldr	r3, [r7, #8]
 800cfba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfbc:	4b1b      	ldr	r3, [pc, #108]	; (800d02c <xTaskIncrementTick+0x168>)
 800cfbe:	681b      	ldr	r3, [r3, #0]
 800cfc0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfc2:	429a      	cmp	r2, r3
 800cfc4:	d3b9      	bcc.n	800cf3a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cfca:	e7b6      	b.n	800cf3a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cfcc:	4b17      	ldr	r3, [pc, #92]	; (800d02c <xTaskIncrementTick+0x168>)
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	4915      	ldr	r1, [pc, #84]	; (800d028 <xTaskIncrementTick+0x164>)
 800cfd4:	4613      	mov	r3, r2
 800cfd6:	009b      	lsls	r3, r3, #2
 800cfd8:	4413      	add	r3, r2
 800cfda:	009b      	lsls	r3, r3, #2
 800cfdc:	440b      	add	r3, r1
 800cfde:	681b      	ldr	r3, [r3, #0]
 800cfe0:	2b01      	cmp	r3, #1
 800cfe2:	d907      	bls.n	800cff4 <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800cfe4:	2301      	movs	r3, #1
 800cfe6:	617b      	str	r3, [r7, #20]
 800cfe8:	e004      	b.n	800cff4 <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cfea:	4b11      	ldr	r3, [pc, #68]	; (800d030 <xTaskIncrementTick+0x16c>)
 800cfec:	681b      	ldr	r3, [r3, #0]
 800cfee:	3301      	adds	r3, #1
 800cff0:	4a0f      	ldr	r2, [pc, #60]	; (800d030 <xTaskIncrementTick+0x16c>)
 800cff2:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cff4:	4b0f      	ldr	r3, [pc, #60]	; (800d034 <xTaskIncrementTick+0x170>)
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d001      	beq.n	800d000 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800cffc:	2301      	movs	r3, #1
 800cffe:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800d000:	697b      	ldr	r3, [r7, #20]
}
 800d002:	4618      	mov	r0, r3
 800d004:	3718      	adds	r7, #24
 800d006:	46bd      	mov	sp, r7
 800d008:	bd80      	pop	{r7, pc}
 800d00a:	bf00      	nop
 800d00c:	20000630 	.word	0x20000630
 800d010:	2000060c 	.word	0x2000060c
 800d014:	200005c0 	.word	0x200005c0
 800d018:	200005c4 	.word	0x200005c4
 800d01c:	20000620 	.word	0x20000620
 800d020:	20000628 	.word	0x20000628
 800d024:	20000610 	.word	0x20000610
 800d028:	2000050c 	.word	0x2000050c
 800d02c:	20000508 	.word	0x20000508
 800d030:	20000618 	.word	0x20000618
 800d034:	2000061c 	.word	0x2000061c

0800d038 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d038:	b580      	push	{r7, lr}
 800d03a:	b088      	sub	sp, #32
 800d03c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d03e:	4b3a      	ldr	r3, [pc, #232]	; (800d128 <vTaskSwitchContext+0xf0>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	2b00      	cmp	r3, #0
 800d044:	d003      	beq.n	800d04e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d046:	4b39      	ldr	r3, [pc, #228]	; (800d12c <vTaskSwitchContext+0xf4>)
 800d048:	2201      	movs	r2, #1
 800d04a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d04c:	e067      	b.n	800d11e <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800d04e:	4b37      	ldr	r3, [pc, #220]	; (800d12c <vTaskSwitchContext+0xf4>)
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800d054:	4b36      	ldr	r3, [pc, #216]	; (800d130 <vTaskSwitchContext+0xf8>)
 800d056:	681b      	ldr	r3, [r3, #0]
 800d058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d05a:	61fb      	str	r3, [r7, #28]
 800d05c:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800d060:	61bb      	str	r3, [r7, #24]
 800d062:	69fb      	ldr	r3, [r7, #28]
 800d064:	681b      	ldr	r3, [r3, #0]
 800d066:	69ba      	ldr	r2, [r7, #24]
 800d068:	429a      	cmp	r2, r3
 800d06a:	d111      	bne.n	800d090 <vTaskSwitchContext+0x58>
 800d06c:	69fb      	ldr	r3, [r7, #28]
 800d06e:	3304      	adds	r3, #4
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	429a      	cmp	r2, r3
 800d076:	d10b      	bne.n	800d090 <vTaskSwitchContext+0x58>
 800d078:	69fb      	ldr	r3, [r7, #28]
 800d07a:	3308      	adds	r3, #8
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	69ba      	ldr	r2, [r7, #24]
 800d080:	429a      	cmp	r2, r3
 800d082:	d105      	bne.n	800d090 <vTaskSwitchContext+0x58>
 800d084:	69fb      	ldr	r3, [r7, #28]
 800d086:	330c      	adds	r3, #12
 800d088:	681b      	ldr	r3, [r3, #0]
 800d08a:	69ba      	ldr	r2, [r7, #24]
 800d08c:	429a      	cmp	r2, r3
 800d08e:	d008      	beq.n	800d0a2 <vTaskSwitchContext+0x6a>
 800d090:	4b27      	ldr	r3, [pc, #156]	; (800d130 <vTaskSwitchContext+0xf8>)
 800d092:	681a      	ldr	r2, [r3, #0]
 800d094:	4b26      	ldr	r3, [pc, #152]	; (800d130 <vTaskSwitchContext+0xf8>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	3334      	adds	r3, #52	; 0x34
 800d09a:	4619      	mov	r1, r3
 800d09c:	4610      	mov	r0, r2
 800d09e:	f7f3 fa8e 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d0a2:	4b24      	ldr	r3, [pc, #144]	; (800d134 <vTaskSwitchContext+0xfc>)
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800d0a8:	68fb      	ldr	r3, [r7, #12]
 800d0aa:	fab3 f383 	clz	r3, r3
 800d0ae:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800d0b0:	7afb      	ldrb	r3, [r7, #11]
 800d0b2:	f1c3 031f 	rsb	r3, r3, #31
 800d0b6:	617b      	str	r3, [r7, #20]
 800d0b8:	491f      	ldr	r1, [pc, #124]	; (800d138 <vTaskSwitchContext+0x100>)
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	4613      	mov	r3, r2
 800d0be:	009b      	lsls	r3, r3, #2
 800d0c0:	4413      	add	r3, r2
 800d0c2:	009b      	lsls	r3, r3, #2
 800d0c4:	440b      	add	r3, r1
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d10b      	bne.n	800d0e4 <vTaskSwitchContext+0xac>
	__asm volatile
 800d0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d0:	b672      	cpsid	i
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	b662      	cpsie	i
 800d0e0:	607b      	str	r3, [r7, #4]
 800d0e2:	e7fe      	b.n	800d0e2 <vTaskSwitchContext+0xaa>
 800d0e4:	697a      	ldr	r2, [r7, #20]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	009b      	lsls	r3, r3, #2
 800d0ea:	4413      	add	r3, r2
 800d0ec:	009b      	lsls	r3, r3, #2
 800d0ee:	4a12      	ldr	r2, [pc, #72]	; (800d138 <vTaskSwitchContext+0x100>)
 800d0f0:	4413      	add	r3, r2
 800d0f2:	613b      	str	r3, [r7, #16]
 800d0f4:	693b      	ldr	r3, [r7, #16]
 800d0f6:	685b      	ldr	r3, [r3, #4]
 800d0f8:	685a      	ldr	r2, [r3, #4]
 800d0fa:	693b      	ldr	r3, [r7, #16]
 800d0fc:	605a      	str	r2, [r3, #4]
 800d0fe:	693b      	ldr	r3, [r7, #16]
 800d100:	685a      	ldr	r2, [r3, #4]
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	3308      	adds	r3, #8
 800d106:	429a      	cmp	r2, r3
 800d108:	d104      	bne.n	800d114 <vTaskSwitchContext+0xdc>
 800d10a:	693b      	ldr	r3, [r7, #16]
 800d10c:	685b      	ldr	r3, [r3, #4]
 800d10e:	685a      	ldr	r2, [r3, #4]
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	605a      	str	r2, [r3, #4]
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	685b      	ldr	r3, [r3, #4]
 800d118:	68db      	ldr	r3, [r3, #12]
 800d11a:	4a05      	ldr	r2, [pc, #20]	; (800d130 <vTaskSwitchContext+0xf8>)
 800d11c:	6013      	str	r3, [r2, #0]
}
 800d11e:	bf00      	nop
 800d120:	3720      	adds	r7, #32
 800d122:	46bd      	mov	sp, r7
 800d124:	bd80      	pop	{r7, pc}
 800d126:	bf00      	nop
 800d128:	20000630 	.word	0x20000630
 800d12c:	2000061c 	.word	0x2000061c
 800d130:	20000508 	.word	0x20000508
 800d134:	20000610 	.word	0x20000610
 800d138:	2000050c 	.word	0x2000050c

0800d13c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d13c:	b580      	push	{r7, lr}
 800d13e:	b084      	sub	sp, #16
 800d140:	af00      	add	r7, sp, #0
 800d142:	6078      	str	r0, [r7, #4]
 800d144:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	2b00      	cmp	r3, #0
 800d14a:	d10b      	bne.n	800d164 <vTaskPlaceOnEventList+0x28>
 800d14c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d150:	b672      	cpsid	i
 800d152:	f383 8811 	msr	BASEPRI, r3
 800d156:	f3bf 8f6f 	isb	sy
 800d15a:	f3bf 8f4f 	dsb	sy
 800d15e:	b662      	cpsie	i
 800d160:	60fb      	str	r3, [r7, #12]
 800d162:	e7fe      	b.n	800d162 <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d164:	4b07      	ldr	r3, [pc, #28]	; (800d184 <vTaskPlaceOnEventList+0x48>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	3318      	adds	r3, #24
 800d16a:	4619      	mov	r1, r3
 800d16c:	6878      	ldr	r0, [r7, #4]
 800d16e:	f7fe fd94 	bl	800bc9a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d172:	2101      	movs	r1, #1
 800d174:	6838      	ldr	r0, [r7, #0]
 800d176:	f000 fb9d 	bl	800d8b4 <prvAddCurrentTaskToDelayedList>
}
 800d17a:	bf00      	nop
 800d17c:	3710      	adds	r7, #16
 800d17e:	46bd      	mov	sp, r7
 800d180:	bd80      	pop	{r7, pc}
 800d182:	bf00      	nop
 800d184:	20000508 	.word	0x20000508

0800d188 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b086      	sub	sp, #24
 800d18c:	af00      	add	r7, sp, #0
 800d18e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d190:	687b      	ldr	r3, [r7, #4]
 800d192:	68db      	ldr	r3, [r3, #12]
 800d194:	68db      	ldr	r3, [r3, #12]
 800d196:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d198:	693b      	ldr	r3, [r7, #16]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d10b      	bne.n	800d1b6 <xTaskRemoveFromEventList+0x2e>
 800d19e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1a2:	b672      	cpsid	i
 800d1a4:	f383 8811 	msr	BASEPRI, r3
 800d1a8:	f3bf 8f6f 	isb	sy
 800d1ac:	f3bf 8f4f 	dsb	sy
 800d1b0:	b662      	cpsie	i
 800d1b2:	60fb      	str	r3, [r7, #12]
 800d1b4:	e7fe      	b.n	800d1b4 <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d1b6:	693b      	ldr	r3, [r7, #16]
 800d1b8:	3318      	adds	r3, #24
 800d1ba:	4618      	mov	r0, r3
 800d1bc:	f7fe fda6 	bl	800bd0c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d1c0:	4b1d      	ldr	r3, [pc, #116]	; (800d238 <xTaskRemoveFromEventList+0xb0>)
 800d1c2:	681b      	ldr	r3, [r3, #0]
 800d1c4:	2b00      	cmp	r3, #0
 800d1c6:	d11c      	bne.n	800d202 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d1c8:	693b      	ldr	r3, [r7, #16]
 800d1ca:	3304      	adds	r3, #4
 800d1cc:	4618      	mov	r0, r3
 800d1ce:	f7fe fd9d 	bl	800bd0c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d1d2:	693b      	ldr	r3, [r7, #16]
 800d1d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1d6:	2201      	movs	r2, #1
 800d1d8:	409a      	lsls	r2, r3
 800d1da:	4b18      	ldr	r3, [pc, #96]	; (800d23c <xTaskRemoveFromEventList+0xb4>)
 800d1dc:	681b      	ldr	r3, [r3, #0]
 800d1de:	4313      	orrs	r3, r2
 800d1e0:	4a16      	ldr	r2, [pc, #88]	; (800d23c <xTaskRemoveFromEventList+0xb4>)
 800d1e2:	6013      	str	r3, [r2, #0]
 800d1e4:	693b      	ldr	r3, [r7, #16]
 800d1e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e8:	4613      	mov	r3, r2
 800d1ea:	009b      	lsls	r3, r3, #2
 800d1ec:	4413      	add	r3, r2
 800d1ee:	009b      	lsls	r3, r3, #2
 800d1f0:	4a13      	ldr	r2, [pc, #76]	; (800d240 <xTaskRemoveFromEventList+0xb8>)
 800d1f2:	441a      	add	r2, r3
 800d1f4:	693b      	ldr	r3, [r7, #16]
 800d1f6:	3304      	adds	r3, #4
 800d1f8:	4619      	mov	r1, r3
 800d1fa:	4610      	mov	r0, r2
 800d1fc:	f7fe fd29 	bl	800bc52 <vListInsertEnd>
 800d200:	e005      	b.n	800d20e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d202:	693b      	ldr	r3, [r7, #16]
 800d204:	3318      	adds	r3, #24
 800d206:	4619      	mov	r1, r3
 800d208:	480e      	ldr	r0, [pc, #56]	; (800d244 <xTaskRemoveFromEventList+0xbc>)
 800d20a:	f7fe fd22 	bl	800bc52 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d20e:	693b      	ldr	r3, [r7, #16]
 800d210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d212:	4b0d      	ldr	r3, [pc, #52]	; (800d248 <xTaskRemoveFromEventList+0xc0>)
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d218:	429a      	cmp	r2, r3
 800d21a:	d905      	bls.n	800d228 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d21c:	2301      	movs	r3, #1
 800d21e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d220:	4b0a      	ldr	r3, [pc, #40]	; (800d24c <xTaskRemoveFromEventList+0xc4>)
 800d222:	2201      	movs	r2, #1
 800d224:	601a      	str	r2, [r3, #0]
 800d226:	e001      	b.n	800d22c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d228:	2300      	movs	r3, #0
 800d22a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d22c:	697b      	ldr	r3, [r7, #20]
}
 800d22e:	4618      	mov	r0, r3
 800d230:	3718      	adds	r7, #24
 800d232:	46bd      	mov	sp, r7
 800d234:	bd80      	pop	{r7, pc}
 800d236:	bf00      	nop
 800d238:	20000630 	.word	0x20000630
 800d23c:	20000610 	.word	0x20000610
 800d240:	2000050c 	.word	0x2000050c
 800d244:	200005c8 	.word	0x200005c8
 800d248:	20000508 	.word	0x20000508
 800d24c:	2000061c 	.word	0x2000061c

0800d250 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d250:	b480      	push	{r7}
 800d252:	b083      	sub	sp, #12
 800d254:	af00      	add	r7, sp, #0
 800d256:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d258:	4b06      	ldr	r3, [pc, #24]	; (800d274 <vTaskInternalSetTimeOutState+0x24>)
 800d25a:	681a      	ldr	r2, [r3, #0]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d260:	4b05      	ldr	r3, [pc, #20]	; (800d278 <vTaskInternalSetTimeOutState+0x28>)
 800d262:	681a      	ldr	r2, [r3, #0]
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	605a      	str	r2, [r3, #4]
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	20000620 	.word	0x20000620
 800d278:	2000060c 	.word	0x2000060c

0800d27c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d27c:	b580      	push	{r7, lr}
 800d27e:	b088      	sub	sp, #32
 800d280:	af00      	add	r7, sp, #0
 800d282:	6078      	str	r0, [r7, #4]
 800d284:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2b00      	cmp	r3, #0
 800d28a:	d10b      	bne.n	800d2a4 <xTaskCheckForTimeOut+0x28>
 800d28c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d290:	b672      	cpsid	i
 800d292:	f383 8811 	msr	BASEPRI, r3
 800d296:	f3bf 8f6f 	isb	sy
 800d29a:	f3bf 8f4f 	dsb	sy
 800d29e:	b662      	cpsie	i
 800d2a0:	613b      	str	r3, [r7, #16]
 800d2a2:	e7fe      	b.n	800d2a2 <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800d2a4:	683b      	ldr	r3, [r7, #0]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d10b      	bne.n	800d2c2 <xTaskCheckForTimeOut+0x46>
 800d2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ae:	b672      	cpsid	i
 800d2b0:	f383 8811 	msr	BASEPRI, r3
 800d2b4:	f3bf 8f6f 	isb	sy
 800d2b8:	f3bf 8f4f 	dsb	sy
 800d2bc:	b662      	cpsie	i
 800d2be:	60fb      	str	r3, [r7, #12]
 800d2c0:	e7fe      	b.n	800d2c0 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800d2c2:	f000 fc69 	bl	800db98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d2c6:	4b1d      	ldr	r3, [pc, #116]	; (800d33c <xTaskCheckForTimeOut+0xc0>)
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	685b      	ldr	r3, [r3, #4]
 800d2d0:	69ba      	ldr	r2, [r7, #24]
 800d2d2:	1ad3      	subs	r3, r2, r3
 800d2d4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d2d6:	683b      	ldr	r3, [r7, #0]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d2de:	d102      	bne.n	800d2e6 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	61fb      	str	r3, [r7, #28]
 800d2e4:	e023      	b.n	800d32e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	681a      	ldr	r2, [r3, #0]
 800d2ea:	4b15      	ldr	r3, [pc, #84]	; (800d340 <xTaskCheckForTimeOut+0xc4>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	429a      	cmp	r2, r3
 800d2f0:	d007      	beq.n	800d302 <xTaskCheckForTimeOut+0x86>
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	685b      	ldr	r3, [r3, #4]
 800d2f6:	69ba      	ldr	r2, [r7, #24]
 800d2f8:	429a      	cmp	r2, r3
 800d2fa:	d302      	bcc.n	800d302 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d2fc:	2301      	movs	r3, #1
 800d2fe:	61fb      	str	r3, [r7, #28]
 800d300:	e015      	b.n	800d32e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d302:	683b      	ldr	r3, [r7, #0]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	697a      	ldr	r2, [r7, #20]
 800d308:	429a      	cmp	r2, r3
 800d30a:	d20b      	bcs.n	800d324 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d30c:	683b      	ldr	r3, [r7, #0]
 800d30e:	681a      	ldr	r2, [r3, #0]
 800d310:	697b      	ldr	r3, [r7, #20]
 800d312:	1ad2      	subs	r2, r2, r3
 800d314:	683b      	ldr	r3, [r7, #0]
 800d316:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff ff99 	bl	800d250 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d31e:	2300      	movs	r3, #0
 800d320:	61fb      	str	r3, [r7, #28]
 800d322:	e004      	b.n	800d32e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d324:	683b      	ldr	r3, [r7, #0]
 800d326:	2200      	movs	r2, #0
 800d328:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d32a:	2301      	movs	r3, #1
 800d32c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d32e:	f000 fc65 	bl	800dbfc <vPortExitCritical>

	return xReturn;
 800d332:	69fb      	ldr	r3, [r7, #28]
}
 800d334:	4618      	mov	r0, r3
 800d336:	3720      	adds	r7, #32
 800d338:	46bd      	mov	sp, r7
 800d33a:	bd80      	pop	{r7, pc}
 800d33c:	2000060c 	.word	0x2000060c
 800d340:	20000620 	.word	0x20000620

0800d344 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d344:	b480      	push	{r7}
 800d346:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d348:	4b03      	ldr	r3, [pc, #12]	; (800d358 <vTaskMissedYield+0x14>)
 800d34a:	2201      	movs	r2, #1
 800d34c:	601a      	str	r2, [r3, #0]
}
 800d34e:	bf00      	nop
 800d350:	46bd      	mov	sp, r7
 800d352:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d356:	4770      	bx	lr
 800d358:	2000061c 	.word	0x2000061c

0800d35c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b082      	sub	sp, #8
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d364:	f000 f854 	bl	800d410 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d368:	4b07      	ldr	r3, [pc, #28]	; (800d388 <prvIdleTask+0x2c>)
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	2b01      	cmp	r3, #1
 800d36e:	d907      	bls.n	800d380 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d370:	4b06      	ldr	r3, [pc, #24]	; (800d38c <prvIdleTask+0x30>)
 800d372:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d376:	601a      	str	r2, [r3, #0]
 800d378:	f3bf 8f4f 	dsb	sy
 800d37c:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d380:	f7f3 f916 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d384:	e7ee      	b.n	800d364 <prvIdleTask+0x8>
 800d386:	bf00      	nop
 800d388:	2000050c 	.word	0x2000050c
 800d38c:	e000ed04 	.word	0xe000ed04

0800d390 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b082      	sub	sp, #8
 800d394:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d396:	2300      	movs	r3, #0
 800d398:	607b      	str	r3, [r7, #4]
 800d39a:	e00c      	b.n	800d3b6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d39c:	687a      	ldr	r2, [r7, #4]
 800d39e:	4613      	mov	r3, r2
 800d3a0:	009b      	lsls	r3, r3, #2
 800d3a2:	4413      	add	r3, r2
 800d3a4:	009b      	lsls	r3, r3, #2
 800d3a6:	4a12      	ldr	r2, [pc, #72]	; (800d3f0 <prvInitialiseTaskLists+0x60>)
 800d3a8:	4413      	add	r3, r2
 800d3aa:	4618      	mov	r0, r3
 800d3ac:	f7fe fc24 	bl	800bbf8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	3301      	adds	r3, #1
 800d3b4:	607b      	str	r3, [r7, #4]
 800d3b6:	687b      	ldr	r3, [r7, #4]
 800d3b8:	2b06      	cmp	r3, #6
 800d3ba:	d9ef      	bls.n	800d39c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d3bc:	480d      	ldr	r0, [pc, #52]	; (800d3f4 <prvInitialiseTaskLists+0x64>)
 800d3be:	f7fe fc1b 	bl	800bbf8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d3c2:	480d      	ldr	r0, [pc, #52]	; (800d3f8 <prvInitialiseTaskLists+0x68>)
 800d3c4:	f7fe fc18 	bl	800bbf8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d3c8:	480c      	ldr	r0, [pc, #48]	; (800d3fc <prvInitialiseTaskLists+0x6c>)
 800d3ca:	f7fe fc15 	bl	800bbf8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d3ce:	480c      	ldr	r0, [pc, #48]	; (800d400 <prvInitialiseTaskLists+0x70>)
 800d3d0:	f7fe fc12 	bl	800bbf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d3d4:	480b      	ldr	r0, [pc, #44]	; (800d404 <prvInitialiseTaskLists+0x74>)
 800d3d6:	f7fe fc0f 	bl	800bbf8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d3da:	4b0b      	ldr	r3, [pc, #44]	; (800d408 <prvInitialiseTaskLists+0x78>)
 800d3dc:	4a05      	ldr	r2, [pc, #20]	; (800d3f4 <prvInitialiseTaskLists+0x64>)
 800d3de:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d3e0:	4b0a      	ldr	r3, [pc, #40]	; (800d40c <prvInitialiseTaskLists+0x7c>)
 800d3e2:	4a05      	ldr	r2, [pc, #20]	; (800d3f8 <prvInitialiseTaskLists+0x68>)
 800d3e4:	601a      	str	r2, [r3, #0]
}
 800d3e6:	bf00      	nop
 800d3e8:	3708      	adds	r7, #8
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	2000050c 	.word	0x2000050c
 800d3f4:	20000598 	.word	0x20000598
 800d3f8:	200005ac 	.word	0x200005ac
 800d3fc:	200005c8 	.word	0x200005c8
 800d400:	200005dc 	.word	0x200005dc
 800d404:	200005f4 	.word	0x200005f4
 800d408:	200005c0 	.word	0x200005c0
 800d40c:	200005c4 	.word	0x200005c4

0800d410 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d410:	b580      	push	{r7, lr}
 800d412:	b082      	sub	sp, #8
 800d414:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d416:	e019      	b.n	800d44c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d418:	f000 fbbe 	bl	800db98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d41c:	4b0f      	ldr	r3, [pc, #60]	; (800d45c <prvCheckTasksWaitingTermination+0x4c>)
 800d41e:	68db      	ldr	r3, [r3, #12]
 800d420:	68db      	ldr	r3, [r3, #12]
 800d422:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d424:	687b      	ldr	r3, [r7, #4]
 800d426:	3304      	adds	r3, #4
 800d428:	4618      	mov	r0, r3
 800d42a:	f7fe fc6f 	bl	800bd0c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d42e:	4b0c      	ldr	r3, [pc, #48]	; (800d460 <prvCheckTasksWaitingTermination+0x50>)
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	3b01      	subs	r3, #1
 800d434:	4a0a      	ldr	r2, [pc, #40]	; (800d460 <prvCheckTasksWaitingTermination+0x50>)
 800d436:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d438:	4b0a      	ldr	r3, [pc, #40]	; (800d464 <prvCheckTasksWaitingTermination+0x54>)
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	3b01      	subs	r3, #1
 800d43e:	4a09      	ldr	r2, [pc, #36]	; (800d464 <prvCheckTasksWaitingTermination+0x54>)
 800d440:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d442:	f000 fbdb 	bl	800dbfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d446:	6878      	ldr	r0, [r7, #4]
 800d448:	f000 f80e 	bl	800d468 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d44c:	4b05      	ldr	r3, [pc, #20]	; (800d464 <prvCheckTasksWaitingTermination+0x54>)
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d1e1      	bne.n	800d418 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d454:	bf00      	nop
 800d456:	3708      	adds	r7, #8
 800d458:	46bd      	mov	sp, r7
 800d45a:	bd80      	pop	{r7, pc}
 800d45c:	200005dc 	.word	0x200005dc
 800d460:	20000608 	.word	0x20000608
 800d464:	200005f0 	.word	0x200005f0

0800d468 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b084      	sub	sp, #16
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d476:	2b00      	cmp	r3, #0
 800d478:	d108      	bne.n	800d48c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d47e:	4618      	mov	r0, r3
 800d480:	f000 fd36 	bl	800def0 <vPortFree>
				vPortFree( pxTCB );
 800d484:	6878      	ldr	r0, [r7, #4]
 800d486:	f000 fd33 	bl	800def0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d48a:	e019      	b.n	800d4c0 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d48c:	687b      	ldr	r3, [r7, #4]
 800d48e:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d492:	2b01      	cmp	r3, #1
 800d494:	d103      	bne.n	800d49e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d496:	6878      	ldr	r0, [r7, #4]
 800d498:	f000 fd2a 	bl	800def0 <vPortFree>
	}
 800d49c:	e010      	b.n	800d4c0 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d49e:	687b      	ldr	r3, [r7, #4]
 800d4a0:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d4a4:	2b02      	cmp	r3, #2
 800d4a6:	d00b      	beq.n	800d4c0 <prvDeleteTCB+0x58>
 800d4a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ac:	b672      	cpsid	i
 800d4ae:	f383 8811 	msr	BASEPRI, r3
 800d4b2:	f3bf 8f6f 	isb	sy
 800d4b6:	f3bf 8f4f 	dsb	sy
 800d4ba:	b662      	cpsie	i
 800d4bc:	60fb      	str	r3, [r7, #12]
 800d4be:	e7fe      	b.n	800d4be <prvDeleteTCB+0x56>
	}
 800d4c0:	bf00      	nop
 800d4c2:	3710      	adds	r7, #16
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}

0800d4c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d4c8:	b480      	push	{r7}
 800d4ca:	b083      	sub	sp, #12
 800d4cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d4ce:	4b0c      	ldr	r3, [pc, #48]	; (800d500 <prvResetNextTaskUnblockTime+0x38>)
 800d4d0:	681b      	ldr	r3, [r3, #0]
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	2b00      	cmp	r3, #0
 800d4d6:	d104      	bne.n	800d4e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d4d8:	4b0a      	ldr	r3, [pc, #40]	; (800d504 <prvResetNextTaskUnblockTime+0x3c>)
 800d4da:	f04f 32ff 	mov.w	r2, #4294967295
 800d4de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d4e0:	e008      	b.n	800d4f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d4e2:	4b07      	ldr	r3, [pc, #28]	; (800d500 <prvResetNextTaskUnblockTime+0x38>)
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	68db      	ldr	r3, [r3, #12]
 800d4e8:	68db      	ldr	r3, [r3, #12]
 800d4ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	685b      	ldr	r3, [r3, #4]
 800d4f0:	4a04      	ldr	r2, [pc, #16]	; (800d504 <prvResetNextTaskUnblockTime+0x3c>)
 800d4f2:	6013      	str	r3, [r2, #0]
}
 800d4f4:	bf00      	nop
 800d4f6:	370c      	adds	r7, #12
 800d4f8:	46bd      	mov	sp, r7
 800d4fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4fe:	4770      	bx	lr
 800d500:	200005c0 	.word	0x200005c0
 800d504:	20000628 	.word	0x20000628

0800d508 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d508:	b480      	push	{r7}
 800d50a:	b083      	sub	sp, #12
 800d50c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d50e:	4b0b      	ldr	r3, [pc, #44]	; (800d53c <xTaskGetSchedulerState+0x34>)
 800d510:	681b      	ldr	r3, [r3, #0]
 800d512:	2b00      	cmp	r3, #0
 800d514:	d102      	bne.n	800d51c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d516:	2301      	movs	r3, #1
 800d518:	607b      	str	r3, [r7, #4]
 800d51a:	e008      	b.n	800d52e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d51c:	4b08      	ldr	r3, [pc, #32]	; (800d540 <xTaskGetSchedulerState+0x38>)
 800d51e:	681b      	ldr	r3, [r3, #0]
 800d520:	2b00      	cmp	r3, #0
 800d522:	d102      	bne.n	800d52a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d524:	2302      	movs	r3, #2
 800d526:	607b      	str	r3, [r7, #4]
 800d528:	e001      	b.n	800d52e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d52a:	2300      	movs	r3, #0
 800d52c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d52e:	687b      	ldr	r3, [r7, #4]
	}
 800d530:	4618      	mov	r0, r3
 800d532:	370c      	adds	r7, #12
 800d534:	46bd      	mov	sp, r7
 800d536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d53a:	4770      	bx	lr
 800d53c:	20000614 	.word	0x20000614
 800d540:	20000630 	.word	0x20000630

0800d544 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d544:	b580      	push	{r7, lr}
 800d546:	b084      	sub	sp, #16
 800d548:	af00      	add	r7, sp, #0
 800d54a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d550:	2300      	movs	r3, #0
 800d552:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d554:	687b      	ldr	r3, [r7, #4]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d069      	beq.n	800d62e <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d55a:	68bb      	ldr	r3, [r7, #8]
 800d55c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d55e:	4b36      	ldr	r3, [pc, #216]	; (800d638 <xTaskPriorityInherit+0xf4>)
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d564:	429a      	cmp	r2, r3
 800d566:	d259      	bcs.n	800d61c <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d568:	68bb      	ldr	r3, [r7, #8]
 800d56a:	699b      	ldr	r3, [r3, #24]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	db06      	blt.n	800d57e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d570:	4b31      	ldr	r3, [pc, #196]	; (800d638 <xTaskPriorityInherit+0xf4>)
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d576:	f1c3 0207 	rsb	r2, r3, #7
 800d57a:	68bb      	ldr	r3, [r7, #8]
 800d57c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d57e:	68bb      	ldr	r3, [r7, #8]
 800d580:	6959      	ldr	r1, [r3, #20]
 800d582:	68bb      	ldr	r3, [r7, #8]
 800d584:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d586:	4613      	mov	r3, r2
 800d588:	009b      	lsls	r3, r3, #2
 800d58a:	4413      	add	r3, r2
 800d58c:	009b      	lsls	r3, r3, #2
 800d58e:	4a2b      	ldr	r2, [pc, #172]	; (800d63c <xTaskPriorityInherit+0xf8>)
 800d590:	4413      	add	r3, r2
 800d592:	4299      	cmp	r1, r3
 800d594:	d13a      	bne.n	800d60c <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d596:	68bb      	ldr	r3, [r7, #8]
 800d598:	3304      	adds	r3, #4
 800d59a:	4618      	mov	r0, r3
 800d59c:	f7fe fbb6 	bl	800bd0c <uxListRemove>
 800d5a0:	4603      	mov	r3, r0
 800d5a2:	2b00      	cmp	r3, #0
 800d5a4:	d115      	bne.n	800d5d2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d5a6:	68bb      	ldr	r3, [r7, #8]
 800d5a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5aa:	4924      	ldr	r1, [pc, #144]	; (800d63c <xTaskPriorityInherit+0xf8>)
 800d5ac:	4613      	mov	r3, r2
 800d5ae:	009b      	lsls	r3, r3, #2
 800d5b0:	4413      	add	r3, r2
 800d5b2:	009b      	lsls	r3, r3, #2
 800d5b4:	440b      	add	r3, r1
 800d5b6:	681b      	ldr	r3, [r3, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d10a      	bne.n	800d5d2 <xTaskPriorityInherit+0x8e>
 800d5bc:	68bb      	ldr	r3, [r7, #8]
 800d5be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5c0:	2201      	movs	r2, #1
 800d5c2:	fa02 f303 	lsl.w	r3, r2, r3
 800d5c6:	43da      	mvns	r2, r3
 800d5c8:	4b1d      	ldr	r3, [pc, #116]	; (800d640 <xTaskPriorityInherit+0xfc>)
 800d5ca:	681b      	ldr	r3, [r3, #0]
 800d5cc:	4013      	ands	r3, r2
 800d5ce:	4a1c      	ldr	r2, [pc, #112]	; (800d640 <xTaskPriorityInherit+0xfc>)
 800d5d0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d5d2:	4b19      	ldr	r3, [pc, #100]	; (800d638 <xTaskPriorityInherit+0xf4>)
 800d5d4:	681b      	ldr	r3, [r3, #0]
 800d5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5d8:	68bb      	ldr	r3, [r7, #8]
 800d5da:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d5dc:	68bb      	ldr	r3, [r7, #8]
 800d5de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5e0:	2201      	movs	r2, #1
 800d5e2:	409a      	lsls	r2, r3
 800d5e4:	4b16      	ldr	r3, [pc, #88]	; (800d640 <xTaskPriorityInherit+0xfc>)
 800d5e6:	681b      	ldr	r3, [r3, #0]
 800d5e8:	4313      	orrs	r3, r2
 800d5ea:	4a15      	ldr	r2, [pc, #84]	; (800d640 <xTaskPriorityInherit+0xfc>)
 800d5ec:	6013      	str	r3, [r2, #0]
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d5f2:	4613      	mov	r3, r2
 800d5f4:	009b      	lsls	r3, r3, #2
 800d5f6:	4413      	add	r3, r2
 800d5f8:	009b      	lsls	r3, r3, #2
 800d5fa:	4a10      	ldr	r2, [pc, #64]	; (800d63c <xTaskPriorityInherit+0xf8>)
 800d5fc:	441a      	add	r2, r3
 800d5fe:	68bb      	ldr	r3, [r7, #8]
 800d600:	3304      	adds	r3, #4
 800d602:	4619      	mov	r1, r3
 800d604:	4610      	mov	r0, r2
 800d606:	f7fe fb24 	bl	800bc52 <vListInsertEnd>
 800d60a:	e004      	b.n	800d616 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d60c:	4b0a      	ldr	r3, [pc, #40]	; (800d638 <xTaskPriorityInherit+0xf4>)
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d612:	68bb      	ldr	r3, [r7, #8]
 800d614:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d616:	2301      	movs	r3, #1
 800d618:	60fb      	str	r3, [r7, #12]
 800d61a:	e008      	b.n	800d62e <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d61c:	68bb      	ldr	r3, [r7, #8]
 800d61e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d620:	4b05      	ldr	r3, [pc, #20]	; (800d638 <xTaskPriorityInherit+0xf4>)
 800d622:	681b      	ldr	r3, [r3, #0]
 800d624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d626:	429a      	cmp	r2, r3
 800d628:	d201      	bcs.n	800d62e <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d62a:	2301      	movs	r3, #1
 800d62c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d62e:	68fb      	ldr	r3, [r7, #12]
	}
 800d630:	4618      	mov	r0, r3
 800d632:	3710      	adds	r7, #16
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}
 800d638:	20000508 	.word	0x20000508
 800d63c:	2000050c 	.word	0x2000050c
 800d640:	20000610 	.word	0x20000610

0800d644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b086      	sub	sp, #24
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d650:	2300      	movs	r3, #0
 800d652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d070      	beq.n	800d73c <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d65a:	4b3b      	ldr	r3, [pc, #236]	; (800d748 <xTaskPriorityDisinherit+0x104>)
 800d65c:	681b      	ldr	r3, [r3, #0]
 800d65e:	693a      	ldr	r2, [r7, #16]
 800d660:	429a      	cmp	r2, r3
 800d662:	d00b      	beq.n	800d67c <xTaskPriorityDisinherit+0x38>
 800d664:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d668:	b672      	cpsid	i
 800d66a:	f383 8811 	msr	BASEPRI, r3
 800d66e:	f3bf 8f6f 	isb	sy
 800d672:	f3bf 8f4f 	dsb	sy
 800d676:	b662      	cpsie	i
 800d678:	60fb      	str	r3, [r7, #12]
 800d67a:	e7fe      	b.n	800d67a <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d67c:	693b      	ldr	r3, [r7, #16]
 800d67e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d680:	2b00      	cmp	r3, #0
 800d682:	d10b      	bne.n	800d69c <xTaskPriorityDisinherit+0x58>
 800d684:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d688:	b672      	cpsid	i
 800d68a:	f383 8811 	msr	BASEPRI, r3
 800d68e:	f3bf 8f6f 	isb	sy
 800d692:	f3bf 8f4f 	dsb	sy
 800d696:	b662      	cpsie	i
 800d698:	60bb      	str	r3, [r7, #8]
 800d69a:	e7fe      	b.n	800d69a <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d69c:	693b      	ldr	r3, [r7, #16]
 800d69e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6a0:	1e5a      	subs	r2, r3, #1
 800d6a2:	693b      	ldr	r3, [r7, #16]
 800d6a4:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d6a6:	693b      	ldr	r3, [r7, #16]
 800d6a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6aa:	693b      	ldr	r3, [r7, #16]
 800d6ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6ae:	429a      	cmp	r2, r3
 800d6b0:	d044      	beq.n	800d73c <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d6b2:	693b      	ldr	r3, [r7, #16]
 800d6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d140      	bne.n	800d73c <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d6ba:	693b      	ldr	r3, [r7, #16]
 800d6bc:	3304      	adds	r3, #4
 800d6be:	4618      	mov	r0, r3
 800d6c0:	f7fe fb24 	bl	800bd0c <uxListRemove>
 800d6c4:	4603      	mov	r3, r0
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d115      	bne.n	800d6f6 <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d6ca:	693b      	ldr	r3, [r7, #16]
 800d6cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d6ce:	491f      	ldr	r1, [pc, #124]	; (800d74c <xTaskPriorityDisinherit+0x108>)
 800d6d0:	4613      	mov	r3, r2
 800d6d2:	009b      	lsls	r3, r3, #2
 800d6d4:	4413      	add	r3, r2
 800d6d6:	009b      	lsls	r3, r3, #2
 800d6d8:	440b      	add	r3, r1
 800d6da:	681b      	ldr	r3, [r3, #0]
 800d6dc:	2b00      	cmp	r3, #0
 800d6de:	d10a      	bne.n	800d6f6 <xTaskPriorityDisinherit+0xb2>
 800d6e0:	693b      	ldr	r3, [r7, #16]
 800d6e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d6ea:	43da      	mvns	r2, r3
 800d6ec:	4b18      	ldr	r3, [pc, #96]	; (800d750 <xTaskPriorityDisinherit+0x10c>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	4013      	ands	r3, r2
 800d6f2:	4a17      	ldr	r2, [pc, #92]	; (800d750 <xTaskPriorityDisinherit+0x10c>)
 800d6f4:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d6f6:	693b      	ldr	r3, [r7, #16]
 800d6f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d6fa:	693b      	ldr	r3, [r7, #16]
 800d6fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6fe:	693b      	ldr	r3, [r7, #16]
 800d700:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d702:	f1c3 0207 	rsb	r2, r3, #7
 800d706:	693b      	ldr	r3, [r7, #16]
 800d708:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d70a:	693b      	ldr	r3, [r7, #16]
 800d70c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d70e:	2201      	movs	r2, #1
 800d710:	409a      	lsls	r2, r3
 800d712:	4b0f      	ldr	r3, [pc, #60]	; (800d750 <xTaskPriorityDisinherit+0x10c>)
 800d714:	681b      	ldr	r3, [r3, #0]
 800d716:	4313      	orrs	r3, r2
 800d718:	4a0d      	ldr	r2, [pc, #52]	; (800d750 <xTaskPriorityDisinherit+0x10c>)
 800d71a:	6013      	str	r3, [r2, #0]
 800d71c:	693b      	ldr	r3, [r7, #16]
 800d71e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d720:	4613      	mov	r3, r2
 800d722:	009b      	lsls	r3, r3, #2
 800d724:	4413      	add	r3, r2
 800d726:	009b      	lsls	r3, r3, #2
 800d728:	4a08      	ldr	r2, [pc, #32]	; (800d74c <xTaskPriorityDisinherit+0x108>)
 800d72a:	441a      	add	r2, r3
 800d72c:	693b      	ldr	r3, [r7, #16]
 800d72e:	3304      	adds	r3, #4
 800d730:	4619      	mov	r1, r3
 800d732:	4610      	mov	r0, r2
 800d734:	f7fe fa8d 	bl	800bc52 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d738:	2301      	movs	r3, #1
 800d73a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d73c:	697b      	ldr	r3, [r7, #20]
	}
 800d73e:	4618      	mov	r0, r3
 800d740:	3718      	adds	r7, #24
 800d742:	46bd      	mov	sp, r7
 800d744:	bd80      	pop	{r7, pc}
 800d746:	bf00      	nop
 800d748:	20000508 	.word	0x20000508
 800d74c:	2000050c 	.word	0x2000050c
 800d750:	20000610 	.word	0x20000610

0800d754 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d754:	b580      	push	{r7, lr}
 800d756:	b088      	sub	sp, #32
 800d758:	af00      	add	r7, sp, #0
 800d75a:	6078      	str	r0, [r7, #4]
 800d75c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d762:	2301      	movs	r3, #1
 800d764:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	2b00      	cmp	r3, #0
 800d76a:	f000 8085 	beq.w	800d878 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d76e:	69bb      	ldr	r3, [r7, #24]
 800d770:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d772:	2b00      	cmp	r3, #0
 800d774:	d10b      	bne.n	800d78e <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d77a:	b672      	cpsid	i
 800d77c:	f383 8811 	msr	BASEPRI, r3
 800d780:	f3bf 8f6f 	isb	sy
 800d784:	f3bf 8f4f 	dsb	sy
 800d788:	b662      	cpsie	i
 800d78a:	60fb      	str	r3, [r7, #12]
 800d78c:	e7fe      	b.n	800d78c <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d78e:	69bb      	ldr	r3, [r7, #24]
 800d790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d792:	683a      	ldr	r2, [r7, #0]
 800d794:	429a      	cmp	r2, r3
 800d796:	d902      	bls.n	800d79e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d798:	683b      	ldr	r3, [r7, #0]
 800d79a:	61fb      	str	r3, [r7, #28]
 800d79c:	e002      	b.n	800d7a4 <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d79e:	69bb      	ldr	r3, [r7, #24]
 800d7a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d7a2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d7a4:	69bb      	ldr	r3, [r7, #24]
 800d7a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7a8:	69fa      	ldr	r2, [r7, #28]
 800d7aa:	429a      	cmp	r2, r3
 800d7ac:	d064      	beq.n	800d878 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d7ae:	69bb      	ldr	r3, [r7, #24]
 800d7b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d7b2:	697a      	ldr	r2, [r7, #20]
 800d7b4:	429a      	cmp	r2, r3
 800d7b6:	d15f      	bne.n	800d878 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d7b8:	4b31      	ldr	r3, [pc, #196]	; (800d880 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d7ba:	681b      	ldr	r3, [r3, #0]
 800d7bc:	69ba      	ldr	r2, [r7, #24]
 800d7be:	429a      	cmp	r2, r3
 800d7c0:	d10b      	bne.n	800d7da <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d7c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7c6:	b672      	cpsid	i
 800d7c8:	f383 8811 	msr	BASEPRI, r3
 800d7cc:	f3bf 8f6f 	isb	sy
 800d7d0:	f3bf 8f4f 	dsb	sy
 800d7d4:	b662      	cpsie	i
 800d7d6:	60bb      	str	r3, [r7, #8]
 800d7d8:	e7fe      	b.n	800d7d8 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d7da:	69bb      	ldr	r3, [r7, #24]
 800d7dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d7e0:	69bb      	ldr	r3, [r7, #24]
 800d7e2:	69fa      	ldr	r2, [r7, #28]
 800d7e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7e6:	69bb      	ldr	r3, [r7, #24]
 800d7e8:	699b      	ldr	r3, [r3, #24]
 800d7ea:	2b00      	cmp	r3, #0
 800d7ec:	db04      	blt.n	800d7f8 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d7ee:	69fb      	ldr	r3, [r7, #28]
 800d7f0:	f1c3 0207 	rsb	r2, r3, #7
 800d7f4:	69bb      	ldr	r3, [r7, #24]
 800d7f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d7f8:	69bb      	ldr	r3, [r7, #24]
 800d7fa:	6959      	ldr	r1, [r3, #20]
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	4613      	mov	r3, r2
 800d800:	009b      	lsls	r3, r3, #2
 800d802:	4413      	add	r3, r2
 800d804:	009b      	lsls	r3, r3, #2
 800d806:	4a1f      	ldr	r2, [pc, #124]	; (800d884 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d808:	4413      	add	r3, r2
 800d80a:	4299      	cmp	r1, r3
 800d80c:	d134      	bne.n	800d878 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d80e:	69bb      	ldr	r3, [r7, #24]
 800d810:	3304      	adds	r3, #4
 800d812:	4618      	mov	r0, r3
 800d814:	f7fe fa7a 	bl	800bd0c <uxListRemove>
 800d818:	4603      	mov	r3, r0
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d115      	bne.n	800d84a <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d81e:	69bb      	ldr	r3, [r7, #24]
 800d820:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d822:	4918      	ldr	r1, [pc, #96]	; (800d884 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d824:	4613      	mov	r3, r2
 800d826:	009b      	lsls	r3, r3, #2
 800d828:	4413      	add	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	440b      	add	r3, r1
 800d82e:	681b      	ldr	r3, [r3, #0]
 800d830:	2b00      	cmp	r3, #0
 800d832:	d10a      	bne.n	800d84a <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d834:	69bb      	ldr	r3, [r7, #24]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	2201      	movs	r2, #1
 800d83a:	fa02 f303 	lsl.w	r3, r2, r3
 800d83e:	43da      	mvns	r2, r3
 800d840:	4b11      	ldr	r3, [pc, #68]	; (800d888 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	4013      	ands	r3, r2
 800d846:	4a10      	ldr	r2, [pc, #64]	; (800d888 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d848:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d84a:	69bb      	ldr	r3, [r7, #24]
 800d84c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84e:	2201      	movs	r2, #1
 800d850:	409a      	lsls	r2, r3
 800d852:	4b0d      	ldr	r3, [pc, #52]	; (800d888 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d854:	681b      	ldr	r3, [r3, #0]
 800d856:	4313      	orrs	r3, r2
 800d858:	4a0b      	ldr	r2, [pc, #44]	; (800d888 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d85a:	6013      	str	r3, [r2, #0]
 800d85c:	69bb      	ldr	r3, [r7, #24]
 800d85e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d860:	4613      	mov	r3, r2
 800d862:	009b      	lsls	r3, r3, #2
 800d864:	4413      	add	r3, r2
 800d866:	009b      	lsls	r3, r3, #2
 800d868:	4a06      	ldr	r2, [pc, #24]	; (800d884 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d86a:	441a      	add	r2, r3
 800d86c:	69bb      	ldr	r3, [r7, #24]
 800d86e:	3304      	adds	r3, #4
 800d870:	4619      	mov	r1, r3
 800d872:	4610      	mov	r0, r2
 800d874:	f7fe f9ed 	bl	800bc52 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d878:	bf00      	nop
 800d87a:	3720      	adds	r7, #32
 800d87c:	46bd      	mov	sp, r7
 800d87e:	bd80      	pop	{r7, pc}
 800d880:	20000508 	.word	0x20000508
 800d884:	2000050c 	.word	0x2000050c
 800d888:	20000610 	.word	0x20000610

0800d88c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d88c:	b480      	push	{r7}
 800d88e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d890:	4b07      	ldr	r3, [pc, #28]	; (800d8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d892:	681b      	ldr	r3, [r3, #0]
 800d894:	2b00      	cmp	r3, #0
 800d896:	d004      	beq.n	800d8a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d898:	4b05      	ldr	r3, [pc, #20]	; (800d8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d89e:	3201      	adds	r2, #1
 800d8a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d8a2:	4b03      	ldr	r3, [pc, #12]	; (800d8b0 <pvTaskIncrementMutexHeldCount+0x24>)
 800d8a4:	681b      	ldr	r3, [r3, #0]
	}
 800d8a6:	4618      	mov	r0, r3
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ae:	4770      	bx	lr
 800d8b0:	20000508 	.word	0x20000508

0800d8b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d8b4:	b580      	push	{r7, lr}
 800d8b6:	b084      	sub	sp, #16
 800d8b8:	af00      	add	r7, sp, #0
 800d8ba:	6078      	str	r0, [r7, #4]
 800d8bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d8be:	4b29      	ldr	r3, [pc, #164]	; (800d964 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d8c0:	681b      	ldr	r3, [r3, #0]
 800d8c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d8c4:	4b28      	ldr	r3, [pc, #160]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3304      	adds	r3, #4
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f7fe fa1e 	bl	800bd0c <uxListRemove>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d10b      	bne.n	800d8ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d8d6:	4b24      	ldr	r3, [pc, #144]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d8dc:	2201      	movs	r2, #1
 800d8de:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e2:	43da      	mvns	r2, r3
 800d8e4:	4b21      	ldr	r3, [pc, #132]	; (800d96c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	4a20      	ldr	r2, [pc, #128]	; (800d96c <prvAddCurrentTaskToDelayedList+0xb8>)
 800d8ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d8f4:	d10a      	bne.n	800d90c <prvAddCurrentTaskToDelayedList+0x58>
 800d8f6:	683b      	ldr	r3, [r7, #0]
 800d8f8:	2b00      	cmp	r3, #0
 800d8fa:	d007      	beq.n	800d90c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d8fc:	4b1a      	ldr	r3, [pc, #104]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d8fe:	681b      	ldr	r3, [r3, #0]
 800d900:	3304      	adds	r3, #4
 800d902:	4619      	mov	r1, r3
 800d904:	481a      	ldr	r0, [pc, #104]	; (800d970 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d906:	f7fe f9a4 	bl	800bc52 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d90a:	e026      	b.n	800d95a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d90c:	68fa      	ldr	r2, [r7, #12]
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	4413      	add	r3, r2
 800d912:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d914:	4b14      	ldr	r3, [pc, #80]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d916:	681b      	ldr	r3, [r3, #0]
 800d918:	68ba      	ldr	r2, [r7, #8]
 800d91a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d91c:	68ba      	ldr	r2, [r7, #8]
 800d91e:	68fb      	ldr	r3, [r7, #12]
 800d920:	429a      	cmp	r2, r3
 800d922:	d209      	bcs.n	800d938 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d924:	4b13      	ldr	r3, [pc, #76]	; (800d974 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d926:	681a      	ldr	r2, [r3, #0]
 800d928:	4b0f      	ldr	r3, [pc, #60]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d92a:	681b      	ldr	r3, [r3, #0]
 800d92c:	3304      	adds	r3, #4
 800d92e:	4619      	mov	r1, r3
 800d930:	4610      	mov	r0, r2
 800d932:	f7fe f9b2 	bl	800bc9a <vListInsert>
}
 800d936:	e010      	b.n	800d95a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d938:	4b0f      	ldr	r3, [pc, #60]	; (800d978 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d93a:	681a      	ldr	r2, [r3, #0]
 800d93c:	4b0a      	ldr	r3, [pc, #40]	; (800d968 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	3304      	adds	r3, #4
 800d942:	4619      	mov	r1, r3
 800d944:	4610      	mov	r0, r2
 800d946:	f7fe f9a8 	bl	800bc9a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d94a:	4b0c      	ldr	r3, [pc, #48]	; (800d97c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	68ba      	ldr	r2, [r7, #8]
 800d950:	429a      	cmp	r2, r3
 800d952:	d202      	bcs.n	800d95a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d954:	4a09      	ldr	r2, [pc, #36]	; (800d97c <prvAddCurrentTaskToDelayedList+0xc8>)
 800d956:	68bb      	ldr	r3, [r7, #8]
 800d958:	6013      	str	r3, [r2, #0]
}
 800d95a:	bf00      	nop
 800d95c:	3710      	adds	r7, #16
 800d95e:	46bd      	mov	sp, r7
 800d960:	bd80      	pop	{r7, pc}
 800d962:	bf00      	nop
 800d964:	2000060c 	.word	0x2000060c
 800d968:	20000508 	.word	0x20000508
 800d96c:	20000610 	.word	0x20000610
 800d970:	200005f4 	.word	0x200005f4
 800d974:	200005c4 	.word	0x200005c4
 800d978:	200005c0 	.word	0x200005c0
 800d97c:	20000628 	.word	0x20000628

0800d980 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d980:	b480      	push	{r7}
 800d982:	b085      	sub	sp, #20
 800d984:	af00      	add	r7, sp, #0
 800d986:	60f8      	str	r0, [r7, #12]
 800d988:	60b9      	str	r1, [r7, #8]
 800d98a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d98c:	68fb      	ldr	r3, [r7, #12]
 800d98e:	3b04      	subs	r3, #4
 800d990:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d992:	68fb      	ldr	r3, [r7, #12]
 800d994:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d998:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d99a:	68fb      	ldr	r3, [r7, #12]
 800d99c:	3b04      	subs	r3, #4
 800d99e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d9a0:	68bb      	ldr	r3, [r7, #8]
 800d9a2:	f023 0201 	bic.w	r2, r3, #1
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	3b04      	subs	r3, #4
 800d9ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d9b0:	4a0c      	ldr	r2, [pc, #48]	; (800d9e4 <pxPortInitialiseStack+0x64>)
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d9b6:	68fb      	ldr	r3, [r7, #12]
 800d9b8:	3b14      	subs	r3, #20
 800d9ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d9bc:	687a      	ldr	r2, [r7, #4]
 800d9be:	68fb      	ldr	r3, [r7, #12]
 800d9c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d9c2:	68fb      	ldr	r3, [r7, #12]
 800d9c4:	3b04      	subs	r3, #4
 800d9c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	f06f 0202 	mvn.w	r2, #2
 800d9ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	3b20      	subs	r3, #32
 800d9d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d9d6:	68fb      	ldr	r3, [r7, #12]
}
 800d9d8:	4618      	mov	r0, r3
 800d9da:	3714      	adds	r7, #20
 800d9dc:	46bd      	mov	sp, r7
 800d9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9e2:	4770      	bx	lr
 800d9e4:	0800d9e9 	.word	0x0800d9e9

0800d9e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d9e8:	b480      	push	{r7}
 800d9ea:	b085      	sub	sp, #20
 800d9ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d9ee:	2300      	movs	r3, #0
 800d9f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d9f2:	4b13      	ldr	r3, [pc, #76]	; (800da40 <prvTaskExitError+0x58>)
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d9fa:	d00b      	beq.n	800da14 <prvTaskExitError+0x2c>
 800d9fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da00:	b672      	cpsid	i
 800da02:	f383 8811 	msr	BASEPRI, r3
 800da06:	f3bf 8f6f 	isb	sy
 800da0a:	f3bf 8f4f 	dsb	sy
 800da0e:	b662      	cpsie	i
 800da10:	60fb      	str	r3, [r7, #12]
 800da12:	e7fe      	b.n	800da12 <prvTaskExitError+0x2a>
 800da14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da18:	b672      	cpsid	i
 800da1a:	f383 8811 	msr	BASEPRI, r3
 800da1e:	f3bf 8f6f 	isb	sy
 800da22:	f3bf 8f4f 	dsb	sy
 800da26:	b662      	cpsie	i
 800da28:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800da2a:	bf00      	nop
 800da2c:	687b      	ldr	r3, [r7, #4]
 800da2e:	2b00      	cmp	r3, #0
 800da30:	d0fc      	beq.n	800da2c <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800da32:	bf00      	nop
 800da34:	3714      	adds	r7, #20
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	20000058 	.word	0x20000058
	...

0800da50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800da50:	4b07      	ldr	r3, [pc, #28]	; (800da70 <pxCurrentTCBConst2>)
 800da52:	6819      	ldr	r1, [r3, #0]
 800da54:	6808      	ldr	r0, [r1, #0]
 800da56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da5a:	f380 8809 	msr	PSP, r0
 800da5e:	f3bf 8f6f 	isb	sy
 800da62:	f04f 0000 	mov.w	r0, #0
 800da66:	f380 8811 	msr	BASEPRI, r0
 800da6a:	4770      	bx	lr
 800da6c:	f3af 8000 	nop.w

0800da70 <pxCurrentTCBConst2>:
 800da70:	20000508 	.word	0x20000508
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800da74:	bf00      	nop
 800da76:	bf00      	nop

0800da78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800da78:	4808      	ldr	r0, [pc, #32]	; (800da9c <prvPortStartFirstTask+0x24>)
 800da7a:	6800      	ldr	r0, [r0, #0]
 800da7c:	6800      	ldr	r0, [r0, #0]
 800da7e:	f380 8808 	msr	MSP, r0
 800da82:	f04f 0000 	mov.w	r0, #0
 800da86:	f380 8814 	msr	CONTROL, r0
 800da8a:	b662      	cpsie	i
 800da8c:	b661      	cpsie	f
 800da8e:	f3bf 8f4f 	dsb	sy
 800da92:	f3bf 8f6f 	isb	sy
 800da96:	df00      	svc	0
 800da98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800da9a:	bf00      	nop
 800da9c:	e000ed08 	.word	0xe000ed08

0800daa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800daa0:	b580      	push	{r7, lr}
 800daa2:	b084      	sub	sp, #16
 800daa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800daa6:	4b36      	ldr	r3, [pc, #216]	; (800db80 <xPortStartScheduler+0xe0>)
 800daa8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800daaa:	68fb      	ldr	r3, [r7, #12]
 800daac:	781b      	ldrb	r3, [r3, #0]
 800daae:	b2db      	uxtb	r3, r3
 800dab0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dab2:	68fb      	ldr	r3, [r7, #12]
 800dab4:	22ff      	movs	r2, #255	; 0xff
 800dab6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	781b      	ldrb	r3, [r3, #0]
 800dabc:	b2db      	uxtb	r3, r3
 800dabe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dac0:	78fb      	ldrb	r3, [r7, #3]
 800dac2:	b2db      	uxtb	r3, r3
 800dac4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dac8:	b2da      	uxtb	r2, r3
 800daca:	4b2e      	ldr	r3, [pc, #184]	; (800db84 <xPortStartScheduler+0xe4>)
 800dacc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dace:	4b2e      	ldr	r3, [pc, #184]	; (800db88 <xPortStartScheduler+0xe8>)
 800dad0:	2207      	movs	r2, #7
 800dad2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dad4:	e009      	b.n	800daea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800dad6:	4b2c      	ldr	r3, [pc, #176]	; (800db88 <xPortStartScheduler+0xe8>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3b01      	subs	r3, #1
 800dadc:	4a2a      	ldr	r2, [pc, #168]	; (800db88 <xPortStartScheduler+0xe8>)
 800dade:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dae0:	78fb      	ldrb	r3, [r7, #3]
 800dae2:	b2db      	uxtb	r3, r3
 800dae4:	005b      	lsls	r3, r3, #1
 800dae6:	b2db      	uxtb	r3, r3
 800dae8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800daea:	78fb      	ldrb	r3, [r7, #3]
 800daec:	b2db      	uxtb	r3, r3
 800daee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800daf2:	2b80      	cmp	r3, #128	; 0x80
 800daf4:	d0ef      	beq.n	800dad6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800daf6:	4b24      	ldr	r3, [pc, #144]	; (800db88 <xPortStartScheduler+0xe8>)
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	f1c3 0307 	rsb	r3, r3, #7
 800dafe:	2b04      	cmp	r3, #4
 800db00:	d00b      	beq.n	800db1a <xPortStartScheduler+0x7a>
 800db02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db06:	b672      	cpsid	i
 800db08:	f383 8811 	msr	BASEPRI, r3
 800db0c:	f3bf 8f6f 	isb	sy
 800db10:	f3bf 8f4f 	dsb	sy
 800db14:	b662      	cpsie	i
 800db16:	60bb      	str	r3, [r7, #8]
 800db18:	e7fe      	b.n	800db18 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800db1a:	4b1b      	ldr	r3, [pc, #108]	; (800db88 <xPortStartScheduler+0xe8>)
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	021b      	lsls	r3, r3, #8
 800db20:	4a19      	ldr	r2, [pc, #100]	; (800db88 <xPortStartScheduler+0xe8>)
 800db22:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800db24:	4b18      	ldr	r3, [pc, #96]	; (800db88 <xPortStartScheduler+0xe8>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800db2c:	4a16      	ldr	r2, [pc, #88]	; (800db88 <xPortStartScheduler+0xe8>)
 800db2e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	b2da      	uxtb	r2, r3
 800db34:	68fb      	ldr	r3, [r7, #12]
 800db36:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800db38:	4b14      	ldr	r3, [pc, #80]	; (800db8c <xPortStartScheduler+0xec>)
 800db3a:	681b      	ldr	r3, [r3, #0]
 800db3c:	4a13      	ldr	r2, [pc, #76]	; (800db8c <xPortStartScheduler+0xec>)
 800db3e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800db42:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800db44:	4b11      	ldr	r3, [pc, #68]	; (800db8c <xPortStartScheduler+0xec>)
 800db46:	681b      	ldr	r3, [r3, #0]
 800db48:	4a10      	ldr	r2, [pc, #64]	; (800db8c <xPortStartScheduler+0xec>)
 800db4a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800db4e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800db50:	f000 f8d4 	bl	800dcfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800db54:	4b0e      	ldr	r3, [pc, #56]	; (800db90 <xPortStartScheduler+0xf0>)
 800db56:	2200      	movs	r2, #0
 800db58:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800db5a:	f000 f8f3 	bl	800dd44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800db5e:	4b0d      	ldr	r3, [pc, #52]	; (800db94 <xPortStartScheduler+0xf4>)
 800db60:	681b      	ldr	r3, [r3, #0]
 800db62:	4a0c      	ldr	r2, [pc, #48]	; (800db94 <xPortStartScheduler+0xf4>)
 800db64:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800db68:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800db6a:	f7ff ff85 	bl	800da78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800db6e:	f7ff fa63 	bl	800d038 <vTaskSwitchContext>
	prvTaskExitError();
 800db72:	f7ff ff39 	bl	800d9e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800db76:	2300      	movs	r3, #0
}
 800db78:	4618      	mov	r0, r3
 800db7a:	3710      	adds	r7, #16
 800db7c:	46bd      	mov	sp, r7
 800db7e:	bd80      	pop	{r7, pc}
 800db80:	e000e400 	.word	0xe000e400
 800db84:	20000634 	.word	0x20000634
 800db88:	20000638 	.word	0x20000638
 800db8c:	e000ed20 	.word	0xe000ed20
 800db90:	20000058 	.word	0x20000058
 800db94:	e000ef34 	.word	0xe000ef34

0800db98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800db98:	b480      	push	{r7}
 800db9a:	b083      	sub	sp, #12
 800db9c:	af00      	add	r7, sp, #0
 800db9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dba2:	b672      	cpsid	i
 800dba4:	f383 8811 	msr	BASEPRI, r3
 800dba8:	f3bf 8f6f 	isb	sy
 800dbac:	f3bf 8f4f 	dsb	sy
 800dbb0:	b662      	cpsie	i
 800dbb2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dbb4:	4b0f      	ldr	r3, [pc, #60]	; (800dbf4 <vPortEnterCritical+0x5c>)
 800dbb6:	681b      	ldr	r3, [r3, #0]
 800dbb8:	3301      	adds	r3, #1
 800dbba:	4a0e      	ldr	r2, [pc, #56]	; (800dbf4 <vPortEnterCritical+0x5c>)
 800dbbc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dbbe:	4b0d      	ldr	r3, [pc, #52]	; (800dbf4 <vPortEnterCritical+0x5c>)
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	d110      	bne.n	800dbe8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dbc6:	4b0c      	ldr	r3, [pc, #48]	; (800dbf8 <vPortEnterCritical+0x60>)
 800dbc8:	681b      	ldr	r3, [r3, #0]
 800dbca:	b2db      	uxtb	r3, r3
 800dbcc:	2b00      	cmp	r3, #0
 800dbce:	d00b      	beq.n	800dbe8 <vPortEnterCritical+0x50>
 800dbd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbd4:	b672      	cpsid	i
 800dbd6:	f383 8811 	msr	BASEPRI, r3
 800dbda:	f3bf 8f6f 	isb	sy
 800dbde:	f3bf 8f4f 	dsb	sy
 800dbe2:	b662      	cpsie	i
 800dbe4:	603b      	str	r3, [r7, #0]
 800dbe6:	e7fe      	b.n	800dbe6 <vPortEnterCritical+0x4e>
	}
}
 800dbe8:	bf00      	nop
 800dbea:	370c      	adds	r7, #12
 800dbec:	46bd      	mov	sp, r7
 800dbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbf2:	4770      	bx	lr
 800dbf4:	20000058 	.word	0x20000058
 800dbf8:	e000ed04 	.word	0xe000ed04

0800dbfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dbfc:	b480      	push	{r7}
 800dbfe:	b083      	sub	sp, #12
 800dc00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dc02:	4b12      	ldr	r3, [pc, #72]	; (800dc4c <vPortExitCritical+0x50>)
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	2b00      	cmp	r3, #0
 800dc08:	d10b      	bne.n	800dc22 <vPortExitCritical+0x26>
 800dc0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc0e:	b672      	cpsid	i
 800dc10:	f383 8811 	msr	BASEPRI, r3
 800dc14:	f3bf 8f6f 	isb	sy
 800dc18:	f3bf 8f4f 	dsb	sy
 800dc1c:	b662      	cpsie	i
 800dc1e:	607b      	str	r3, [r7, #4]
 800dc20:	e7fe      	b.n	800dc20 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800dc22:	4b0a      	ldr	r3, [pc, #40]	; (800dc4c <vPortExitCritical+0x50>)
 800dc24:	681b      	ldr	r3, [r3, #0]
 800dc26:	3b01      	subs	r3, #1
 800dc28:	4a08      	ldr	r2, [pc, #32]	; (800dc4c <vPortExitCritical+0x50>)
 800dc2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dc2c:	4b07      	ldr	r3, [pc, #28]	; (800dc4c <vPortExitCritical+0x50>)
 800dc2e:	681b      	ldr	r3, [r3, #0]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d104      	bne.n	800dc3e <vPortExitCritical+0x42>
 800dc34:	2300      	movs	r3, #0
 800dc36:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800dc38:	683b      	ldr	r3, [r7, #0]
 800dc3a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dc3e:	bf00      	nop
 800dc40:	370c      	adds	r7, #12
 800dc42:	46bd      	mov	sp, r7
 800dc44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc48:	4770      	bx	lr
 800dc4a:	bf00      	nop
 800dc4c:	20000058 	.word	0x20000058

0800dc50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800dc50:	f3ef 8009 	mrs	r0, PSP
 800dc54:	f3bf 8f6f 	isb	sy
 800dc58:	4b15      	ldr	r3, [pc, #84]	; (800dcb0 <pxCurrentTCBConst>)
 800dc5a:	681a      	ldr	r2, [r3, #0]
 800dc5c:	f01e 0f10 	tst.w	lr, #16
 800dc60:	bf08      	it	eq
 800dc62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800dc66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc6a:	6010      	str	r0, [r2, #0]
 800dc6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dc70:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dc74:	b672      	cpsid	i
 800dc76:	f380 8811 	msr	BASEPRI, r0
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	f3bf 8f6f 	isb	sy
 800dc82:	b662      	cpsie	i
 800dc84:	f7ff f9d8 	bl	800d038 <vTaskSwitchContext>
 800dc88:	f04f 0000 	mov.w	r0, #0
 800dc8c:	f380 8811 	msr	BASEPRI, r0
 800dc90:	bc09      	pop	{r0, r3}
 800dc92:	6819      	ldr	r1, [r3, #0]
 800dc94:	6808      	ldr	r0, [r1, #0]
 800dc96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc9a:	f01e 0f10 	tst.w	lr, #16
 800dc9e:	bf08      	it	eq
 800dca0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800dca4:	f380 8809 	msr	PSP, r0
 800dca8:	f3bf 8f6f 	isb	sy
 800dcac:	4770      	bx	lr
 800dcae:	bf00      	nop

0800dcb0 <pxCurrentTCBConst>:
 800dcb0:	20000508 	.word	0x20000508
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800dcb4:	bf00      	nop
 800dcb6:	bf00      	nop

0800dcb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800dcb8:	b580      	push	{r7, lr}
 800dcba:	b082      	sub	sp, #8
 800dcbc:	af00      	add	r7, sp, #0
	__asm volatile
 800dcbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcc2:	b672      	cpsid	i
 800dcc4:	f383 8811 	msr	BASEPRI, r3
 800dcc8:	f3bf 8f6f 	isb	sy
 800dccc:	f3bf 8f4f 	dsb	sy
 800dcd0:	b662      	cpsie	i
 800dcd2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800dcd4:	f7ff f8f6 	bl	800cec4 <xTaskIncrementTick>
 800dcd8:	4603      	mov	r3, r0
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d003      	beq.n	800dce6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800dcde:	4b06      	ldr	r3, [pc, #24]	; (800dcf8 <SysTick_Handler+0x40>)
 800dce0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dce4:	601a      	str	r2, [r3, #0]
 800dce6:	2300      	movs	r3, #0
 800dce8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dcea:	683b      	ldr	r3, [r7, #0]
 800dcec:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800dcf0:	bf00      	nop
 800dcf2:	3708      	adds	r7, #8
 800dcf4:	46bd      	mov	sp, r7
 800dcf6:	bd80      	pop	{r7, pc}
 800dcf8:	e000ed04 	.word	0xe000ed04

0800dcfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800dcfc:	b480      	push	{r7}
 800dcfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800dd00:	4b0b      	ldr	r3, [pc, #44]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd02:	2200      	movs	r2, #0
 800dd04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800dd06:	4b0b      	ldr	r3, [pc, #44]	; (800dd34 <vPortSetupTimerInterrupt+0x38>)
 800dd08:	2200      	movs	r2, #0
 800dd0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800dd0c:	4b0a      	ldr	r3, [pc, #40]	; (800dd38 <vPortSetupTimerInterrupt+0x3c>)
 800dd0e:	681b      	ldr	r3, [r3, #0]
 800dd10:	4a0a      	ldr	r2, [pc, #40]	; (800dd3c <vPortSetupTimerInterrupt+0x40>)
 800dd12:	fba2 2303 	umull	r2, r3, r2, r3
 800dd16:	099b      	lsrs	r3, r3, #6
 800dd18:	4a09      	ldr	r2, [pc, #36]	; (800dd40 <vPortSetupTimerInterrupt+0x44>)
 800dd1a:	3b01      	subs	r3, #1
 800dd1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800dd1e:	4b04      	ldr	r3, [pc, #16]	; (800dd30 <vPortSetupTimerInterrupt+0x34>)
 800dd20:	2207      	movs	r2, #7
 800dd22:	601a      	str	r2, [r3, #0]
}
 800dd24:	bf00      	nop
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	e000e010 	.word	0xe000e010
 800dd34:	e000e018 	.word	0xe000e018
 800dd38:	2000004c 	.word	0x2000004c
 800dd3c:	10624dd3 	.word	0x10624dd3
 800dd40:	e000e014 	.word	0xe000e014

0800dd44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800dd44:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dd54 <vPortEnableVFP+0x10>
 800dd48:	6801      	ldr	r1, [r0, #0]
 800dd4a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800dd4e:	6001      	str	r1, [r0, #0]
 800dd50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800dd52:	bf00      	nop
 800dd54:	e000ed88 	.word	0xe000ed88

0800dd58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b08a      	sub	sp, #40	; 0x28
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800dd60:	2300      	movs	r3, #0
 800dd62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800dd64:	f7fe fff2 	bl	800cd4c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800dd68:	4b5c      	ldr	r3, [pc, #368]	; (800dedc <pvPortMalloc+0x184>)
 800dd6a:	681b      	ldr	r3, [r3, #0]
 800dd6c:	2b00      	cmp	r3, #0
 800dd6e:	d101      	bne.n	800dd74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800dd70:	f000 f91a 	bl	800dfa8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd74:	4b5a      	ldr	r3, [pc, #360]	; (800dee0 <pvPortMalloc+0x188>)
 800dd76:	681a      	ldr	r2, [r3, #0]
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	4013      	ands	r3, r2
 800dd7c:	2b00      	cmp	r3, #0
 800dd7e:	f040 8090 	bne.w	800dea2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800dd82:	687b      	ldr	r3, [r7, #4]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d01e      	beq.n	800ddc6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800dd88:	2208      	movs	r2, #8
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	4413      	add	r3, r2
 800dd8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd90:	687b      	ldr	r3, [r7, #4]
 800dd92:	f003 0307 	and.w	r3, r3, #7
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d015      	beq.n	800ddc6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd9a:	687b      	ldr	r3, [r7, #4]
 800dd9c:	f023 0307 	bic.w	r3, r3, #7
 800dda0:	3308      	adds	r3, #8
 800dda2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	f003 0307 	and.w	r3, r3, #7
 800ddaa:	2b00      	cmp	r3, #0
 800ddac:	d00b      	beq.n	800ddc6 <pvPortMalloc+0x6e>
	__asm volatile
 800ddae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddb2:	b672      	cpsid	i
 800ddb4:	f383 8811 	msr	BASEPRI, r3
 800ddb8:	f3bf 8f6f 	isb	sy
 800ddbc:	f3bf 8f4f 	dsb	sy
 800ddc0:	b662      	cpsie	i
 800ddc2:	617b      	str	r3, [r7, #20]
 800ddc4:	e7fe      	b.n	800ddc4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ddc6:	687b      	ldr	r3, [r7, #4]
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d06a      	beq.n	800dea2 <pvPortMalloc+0x14a>
 800ddcc:	4b45      	ldr	r3, [pc, #276]	; (800dee4 <pvPortMalloc+0x18c>)
 800ddce:	681b      	ldr	r3, [r3, #0]
 800ddd0:	687a      	ldr	r2, [r7, #4]
 800ddd2:	429a      	cmp	r2, r3
 800ddd4:	d865      	bhi.n	800dea2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800ddd6:	4b44      	ldr	r3, [pc, #272]	; (800dee8 <pvPortMalloc+0x190>)
 800ddd8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800ddda:	4b43      	ldr	r3, [pc, #268]	; (800dee8 <pvPortMalloc+0x190>)
 800dddc:	681b      	ldr	r3, [r3, #0]
 800ddde:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dde0:	e004      	b.n	800ddec <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800dde2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dde6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dde8:	681b      	ldr	r3, [r3, #0]
 800ddea:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ddec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddee:	685b      	ldr	r3, [r3, #4]
 800ddf0:	687a      	ldr	r2, [r7, #4]
 800ddf2:	429a      	cmp	r2, r3
 800ddf4:	d903      	bls.n	800ddfe <pvPortMalloc+0xa6>
 800ddf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddf8:	681b      	ldr	r3, [r3, #0]
 800ddfa:	2b00      	cmp	r3, #0
 800ddfc:	d1f1      	bne.n	800dde2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ddfe:	4b37      	ldr	r3, [pc, #220]	; (800dedc <pvPortMalloc+0x184>)
 800de00:	681b      	ldr	r3, [r3, #0]
 800de02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de04:	429a      	cmp	r2, r3
 800de06:	d04c      	beq.n	800dea2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800de08:	6a3b      	ldr	r3, [r7, #32]
 800de0a:	681b      	ldr	r3, [r3, #0]
 800de0c:	2208      	movs	r2, #8
 800de0e:	4413      	add	r3, r2
 800de10:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800de12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de14:	681a      	ldr	r2, [r3, #0]
 800de16:	6a3b      	ldr	r3, [r7, #32]
 800de18:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800de1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de1c:	685a      	ldr	r2, [r3, #4]
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	1ad2      	subs	r2, r2, r3
 800de22:	2308      	movs	r3, #8
 800de24:	005b      	lsls	r3, r3, #1
 800de26:	429a      	cmp	r2, r3
 800de28:	d920      	bls.n	800de6c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800de2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	4413      	add	r3, r2
 800de30:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800de32:	69bb      	ldr	r3, [r7, #24]
 800de34:	f003 0307 	and.w	r3, r3, #7
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d00b      	beq.n	800de54 <pvPortMalloc+0xfc>
 800de3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de40:	b672      	cpsid	i
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	b662      	cpsie	i
 800de50:	613b      	str	r3, [r7, #16]
 800de52:	e7fe      	b.n	800de52 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800de54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de56:	685a      	ldr	r2, [r3, #4]
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	1ad2      	subs	r2, r2, r3
 800de5c:	69bb      	ldr	r3, [r7, #24]
 800de5e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800de60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de62:	687a      	ldr	r2, [r7, #4]
 800de64:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800de66:	69b8      	ldr	r0, [r7, #24]
 800de68:	f000 f900 	bl	800e06c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800de6c:	4b1d      	ldr	r3, [pc, #116]	; (800dee4 <pvPortMalloc+0x18c>)
 800de6e:	681a      	ldr	r2, [r3, #0]
 800de70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de72:	685b      	ldr	r3, [r3, #4]
 800de74:	1ad3      	subs	r3, r2, r3
 800de76:	4a1b      	ldr	r2, [pc, #108]	; (800dee4 <pvPortMalloc+0x18c>)
 800de78:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800de7a:	4b1a      	ldr	r3, [pc, #104]	; (800dee4 <pvPortMalloc+0x18c>)
 800de7c:	681a      	ldr	r2, [r3, #0]
 800de7e:	4b1b      	ldr	r3, [pc, #108]	; (800deec <pvPortMalloc+0x194>)
 800de80:	681b      	ldr	r3, [r3, #0]
 800de82:	429a      	cmp	r2, r3
 800de84:	d203      	bcs.n	800de8e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800de86:	4b17      	ldr	r3, [pc, #92]	; (800dee4 <pvPortMalloc+0x18c>)
 800de88:	681b      	ldr	r3, [r3, #0]
 800de8a:	4a18      	ldr	r2, [pc, #96]	; (800deec <pvPortMalloc+0x194>)
 800de8c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800de8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de90:	685a      	ldr	r2, [r3, #4]
 800de92:	4b13      	ldr	r3, [pc, #76]	; (800dee0 <pvPortMalloc+0x188>)
 800de94:	681b      	ldr	r3, [r3, #0]
 800de96:	431a      	orrs	r2, r3
 800de98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800de9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de9e:	2200      	movs	r2, #0
 800dea0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dea2:	f7fe ff61 	bl	800cd68 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800dea6:	69fb      	ldr	r3, [r7, #28]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	d101      	bne.n	800deb0 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800deac:	f7f2 fb92 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800deb0:	69fb      	ldr	r3, [r7, #28]
 800deb2:	f003 0307 	and.w	r3, r3, #7
 800deb6:	2b00      	cmp	r3, #0
 800deb8:	d00b      	beq.n	800ded2 <pvPortMalloc+0x17a>
 800deba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800debe:	b672      	cpsid	i
 800dec0:	f383 8811 	msr	BASEPRI, r3
 800dec4:	f3bf 8f6f 	isb	sy
 800dec8:	f3bf 8f4f 	dsb	sy
 800decc:	b662      	cpsie	i
 800dece:	60fb      	str	r3, [r7, #12]
 800ded0:	e7fe      	b.n	800ded0 <pvPortMalloc+0x178>
	return pvReturn;
 800ded2:	69fb      	ldr	r3, [r7, #28]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3728      	adds	r7, #40	; 0x28
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20008644 	.word	0x20008644
 800dee0:	20008650 	.word	0x20008650
 800dee4:	20008648 	.word	0x20008648
 800dee8:	2000863c 	.word	0x2000863c
 800deec:	2000864c 	.word	0x2000864c

0800def0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b086      	sub	sp, #24
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800def8:	687b      	ldr	r3, [r7, #4]
 800defa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	2b00      	cmp	r3, #0
 800df00:	d04a      	beq.n	800df98 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800df02:	2308      	movs	r3, #8
 800df04:	425b      	negs	r3, r3
 800df06:	697a      	ldr	r2, [r7, #20]
 800df08:	4413      	add	r3, r2
 800df0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800df0c:	697b      	ldr	r3, [r7, #20]
 800df0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	685a      	ldr	r2, [r3, #4]
 800df14:	4b22      	ldr	r3, [pc, #136]	; (800dfa0 <vPortFree+0xb0>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	4013      	ands	r3, r2
 800df1a:	2b00      	cmp	r3, #0
 800df1c:	d10b      	bne.n	800df36 <vPortFree+0x46>
 800df1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df22:	b672      	cpsid	i
 800df24:	f383 8811 	msr	BASEPRI, r3
 800df28:	f3bf 8f6f 	isb	sy
 800df2c:	f3bf 8f4f 	dsb	sy
 800df30:	b662      	cpsie	i
 800df32:	60fb      	str	r3, [r7, #12]
 800df34:	e7fe      	b.n	800df34 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800df36:	693b      	ldr	r3, [r7, #16]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d00b      	beq.n	800df56 <vPortFree+0x66>
 800df3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df42:	b672      	cpsid	i
 800df44:	f383 8811 	msr	BASEPRI, r3
 800df48:	f3bf 8f6f 	isb	sy
 800df4c:	f3bf 8f4f 	dsb	sy
 800df50:	b662      	cpsie	i
 800df52:	60bb      	str	r3, [r7, #8]
 800df54:	e7fe      	b.n	800df54 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800df56:	693b      	ldr	r3, [r7, #16]
 800df58:	685a      	ldr	r2, [r3, #4]
 800df5a:	4b11      	ldr	r3, [pc, #68]	; (800dfa0 <vPortFree+0xb0>)
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	4013      	ands	r3, r2
 800df60:	2b00      	cmp	r3, #0
 800df62:	d019      	beq.n	800df98 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	681b      	ldr	r3, [r3, #0]
 800df68:	2b00      	cmp	r3, #0
 800df6a:	d115      	bne.n	800df98 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800df6c:	693b      	ldr	r3, [r7, #16]
 800df6e:	685a      	ldr	r2, [r3, #4]
 800df70:	4b0b      	ldr	r3, [pc, #44]	; (800dfa0 <vPortFree+0xb0>)
 800df72:	681b      	ldr	r3, [r3, #0]
 800df74:	43db      	mvns	r3, r3
 800df76:	401a      	ands	r2, r3
 800df78:	693b      	ldr	r3, [r7, #16]
 800df7a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800df7c:	f7fe fee6 	bl	800cd4c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800df80:	693b      	ldr	r3, [r7, #16]
 800df82:	685a      	ldr	r2, [r3, #4]
 800df84:	4b07      	ldr	r3, [pc, #28]	; (800dfa4 <vPortFree+0xb4>)
 800df86:	681b      	ldr	r3, [r3, #0]
 800df88:	4413      	add	r3, r2
 800df8a:	4a06      	ldr	r2, [pc, #24]	; (800dfa4 <vPortFree+0xb4>)
 800df8c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800df8e:	6938      	ldr	r0, [r7, #16]
 800df90:	f000 f86c 	bl	800e06c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800df94:	f7fe fee8 	bl	800cd68 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800df98:	bf00      	nop
 800df9a:	3718      	adds	r7, #24
 800df9c:	46bd      	mov	sp, r7
 800df9e:	bd80      	pop	{r7, pc}
 800dfa0:	20008650 	.word	0x20008650
 800dfa4:	20008648 	.word	0x20008648

0800dfa8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dfa8:	b480      	push	{r7}
 800dfaa:	b085      	sub	sp, #20
 800dfac:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dfae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dfb2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dfb4:	4b27      	ldr	r3, [pc, #156]	; (800e054 <prvHeapInit+0xac>)
 800dfb6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dfb8:	68fb      	ldr	r3, [r7, #12]
 800dfba:	f003 0307 	and.w	r3, r3, #7
 800dfbe:	2b00      	cmp	r3, #0
 800dfc0:	d00c      	beq.n	800dfdc <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dfc2:	68fb      	ldr	r3, [r7, #12]
 800dfc4:	3307      	adds	r3, #7
 800dfc6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dfc8:	68fb      	ldr	r3, [r7, #12]
 800dfca:	f023 0307 	bic.w	r3, r3, #7
 800dfce:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dfd0:	68ba      	ldr	r2, [r7, #8]
 800dfd2:	68fb      	ldr	r3, [r7, #12]
 800dfd4:	1ad3      	subs	r3, r2, r3
 800dfd6:	4a1f      	ldr	r2, [pc, #124]	; (800e054 <prvHeapInit+0xac>)
 800dfd8:	4413      	add	r3, r2
 800dfda:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dfdc:	68fb      	ldr	r3, [r7, #12]
 800dfde:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dfe0:	4a1d      	ldr	r2, [pc, #116]	; (800e058 <prvHeapInit+0xb0>)
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dfe6:	4b1c      	ldr	r3, [pc, #112]	; (800e058 <prvHeapInit+0xb0>)
 800dfe8:	2200      	movs	r2, #0
 800dfea:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dfec:	687b      	ldr	r3, [r7, #4]
 800dfee:	68ba      	ldr	r2, [r7, #8]
 800dff0:	4413      	add	r3, r2
 800dff2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dff4:	2208      	movs	r2, #8
 800dff6:	68fb      	ldr	r3, [r7, #12]
 800dff8:	1a9b      	subs	r3, r3, r2
 800dffa:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dffc:	68fb      	ldr	r3, [r7, #12]
 800dffe:	f023 0307 	bic.w	r3, r3, #7
 800e002:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e004:	68fb      	ldr	r3, [r7, #12]
 800e006:	4a15      	ldr	r2, [pc, #84]	; (800e05c <prvHeapInit+0xb4>)
 800e008:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e00a:	4b14      	ldr	r3, [pc, #80]	; (800e05c <prvHeapInit+0xb4>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	2200      	movs	r2, #0
 800e010:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e012:	4b12      	ldr	r3, [pc, #72]	; (800e05c <prvHeapInit+0xb4>)
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	2200      	movs	r2, #0
 800e018:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e01a:	687b      	ldr	r3, [r7, #4]
 800e01c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e01e:	683b      	ldr	r3, [r7, #0]
 800e020:	68fa      	ldr	r2, [r7, #12]
 800e022:	1ad2      	subs	r2, r2, r3
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e028:	4b0c      	ldr	r3, [pc, #48]	; (800e05c <prvHeapInit+0xb4>)
 800e02a:	681a      	ldr	r2, [r3, #0]
 800e02c:	683b      	ldr	r3, [r7, #0]
 800e02e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e030:	683b      	ldr	r3, [r7, #0]
 800e032:	685b      	ldr	r3, [r3, #4]
 800e034:	4a0a      	ldr	r2, [pc, #40]	; (800e060 <prvHeapInit+0xb8>)
 800e036:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e038:	683b      	ldr	r3, [r7, #0]
 800e03a:	685b      	ldr	r3, [r3, #4]
 800e03c:	4a09      	ldr	r2, [pc, #36]	; (800e064 <prvHeapInit+0xbc>)
 800e03e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e040:	4b09      	ldr	r3, [pc, #36]	; (800e068 <prvHeapInit+0xc0>)
 800e042:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e046:	601a      	str	r2, [r3, #0]
}
 800e048:	bf00      	nop
 800e04a:	3714      	adds	r7, #20
 800e04c:	46bd      	mov	sp, r7
 800e04e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e052:	4770      	bx	lr
 800e054:	2000063c 	.word	0x2000063c
 800e058:	2000863c 	.word	0x2000863c
 800e05c:	20008644 	.word	0x20008644
 800e060:	2000864c 	.word	0x2000864c
 800e064:	20008648 	.word	0x20008648
 800e068:	20008650 	.word	0x20008650

0800e06c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e06c:	b480      	push	{r7}
 800e06e:	b085      	sub	sp, #20
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e074:	4b28      	ldr	r3, [pc, #160]	; (800e118 <prvInsertBlockIntoFreeList+0xac>)
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	e002      	b.n	800e080 <prvInsertBlockIntoFreeList+0x14>
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	681b      	ldr	r3, [r3, #0]
 800e07e:	60fb      	str	r3, [r7, #12]
 800e080:	68fb      	ldr	r3, [r7, #12]
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d8f7      	bhi.n	800e07a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	685b      	ldr	r3, [r3, #4]
 800e092:	68ba      	ldr	r2, [r7, #8]
 800e094:	4413      	add	r3, r2
 800e096:	687a      	ldr	r2, [r7, #4]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d108      	bne.n	800e0ae <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	685a      	ldr	r2, [r3, #4]
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	685b      	ldr	r3, [r3, #4]
 800e0a4:	441a      	add	r2, r3
 800e0a6:	68fb      	ldr	r3, [r7, #12]
 800e0a8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e0ae:	687b      	ldr	r3, [r7, #4]
 800e0b0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	685b      	ldr	r3, [r3, #4]
 800e0b6:	68ba      	ldr	r2, [r7, #8]
 800e0b8:	441a      	add	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	429a      	cmp	r2, r3
 800e0c0:	d118      	bne.n	800e0f4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e0c2:	68fb      	ldr	r3, [r7, #12]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	4b15      	ldr	r3, [pc, #84]	; (800e11c <prvInsertBlockIntoFreeList+0xb0>)
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	429a      	cmp	r2, r3
 800e0cc:	d00d      	beq.n	800e0ea <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e0ce:	687b      	ldr	r3, [r7, #4]
 800e0d0:	685a      	ldr	r2, [r3, #4]
 800e0d2:	68fb      	ldr	r3, [r7, #12]
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	685b      	ldr	r3, [r3, #4]
 800e0d8:	441a      	add	r2, r3
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e0de:	68fb      	ldr	r3, [r7, #12]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	681a      	ldr	r2, [r3, #0]
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	601a      	str	r2, [r3, #0]
 800e0e8:	e008      	b.n	800e0fc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e0ea:	4b0c      	ldr	r3, [pc, #48]	; (800e11c <prvInsertBlockIntoFreeList+0xb0>)
 800e0ec:	681a      	ldr	r2, [r3, #0]
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	601a      	str	r2, [r3, #0]
 800e0f2:	e003      	b.n	800e0fc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681a      	ldr	r2, [r3, #0]
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e0fc:	68fa      	ldr	r2, [r7, #12]
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	429a      	cmp	r2, r3
 800e102:	d002      	beq.n	800e10a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e104:	68fb      	ldr	r3, [r7, #12]
 800e106:	687a      	ldr	r2, [r7, #4]
 800e108:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e10a:	bf00      	nop
 800e10c:	3714      	adds	r7, #20
 800e10e:	46bd      	mov	sp, r7
 800e110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e114:	4770      	bx	lr
 800e116:	bf00      	nop
 800e118:	2000863c 	.word	0x2000863c
 800e11c:	20008644 	.word	0x20008644

0800e120 <__errno>:
 800e120:	4b01      	ldr	r3, [pc, #4]	; (800e128 <__errno+0x8>)
 800e122:	6818      	ldr	r0, [r3, #0]
 800e124:	4770      	bx	lr
 800e126:	bf00      	nop
 800e128:	2000005c 	.word	0x2000005c

0800e12c <__libc_init_array>:
 800e12c:	b570      	push	{r4, r5, r6, lr}
 800e12e:	4e0d      	ldr	r6, [pc, #52]	; (800e164 <__libc_init_array+0x38>)
 800e130:	4c0d      	ldr	r4, [pc, #52]	; (800e168 <__libc_init_array+0x3c>)
 800e132:	1ba4      	subs	r4, r4, r6
 800e134:	10a4      	asrs	r4, r4, #2
 800e136:	2500      	movs	r5, #0
 800e138:	42a5      	cmp	r5, r4
 800e13a:	d109      	bne.n	800e150 <__libc_init_array+0x24>
 800e13c:	4e0b      	ldr	r6, [pc, #44]	; (800e16c <__libc_init_array+0x40>)
 800e13e:	4c0c      	ldr	r4, [pc, #48]	; (800e170 <__libc_init_array+0x44>)
 800e140:	f000 fc28 	bl	800e994 <_init>
 800e144:	1ba4      	subs	r4, r4, r6
 800e146:	10a4      	asrs	r4, r4, #2
 800e148:	2500      	movs	r5, #0
 800e14a:	42a5      	cmp	r5, r4
 800e14c:	d105      	bne.n	800e15a <__libc_init_array+0x2e>
 800e14e:	bd70      	pop	{r4, r5, r6, pc}
 800e150:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e154:	4798      	blx	r3
 800e156:	3501      	adds	r5, #1
 800e158:	e7ee      	b.n	800e138 <__libc_init_array+0xc>
 800e15a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e15e:	4798      	blx	r3
 800e160:	3501      	adds	r5, #1
 800e162:	e7f2      	b.n	800e14a <__libc_init_array+0x1e>
 800e164:	08010a40 	.word	0x08010a40
 800e168:	08010a40 	.word	0x08010a40
 800e16c:	08010a40 	.word	0x08010a40
 800e170:	08010a44 	.word	0x08010a44

0800e174 <memcpy>:
 800e174:	b510      	push	{r4, lr}
 800e176:	1e43      	subs	r3, r0, #1
 800e178:	440a      	add	r2, r1
 800e17a:	4291      	cmp	r1, r2
 800e17c:	d100      	bne.n	800e180 <memcpy+0xc>
 800e17e:	bd10      	pop	{r4, pc}
 800e180:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e184:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e188:	e7f7      	b.n	800e17a <memcpy+0x6>

0800e18a <memset>:
 800e18a:	4402      	add	r2, r0
 800e18c:	4603      	mov	r3, r0
 800e18e:	4293      	cmp	r3, r2
 800e190:	d100      	bne.n	800e194 <memset+0xa>
 800e192:	4770      	bx	lr
 800e194:	f803 1b01 	strb.w	r1, [r3], #1
 800e198:	e7f9      	b.n	800e18e <memset+0x4>
	...

0800e19c <siprintf>:
 800e19c:	b40e      	push	{r1, r2, r3}
 800e19e:	b500      	push	{lr}
 800e1a0:	b09c      	sub	sp, #112	; 0x70
 800e1a2:	ab1d      	add	r3, sp, #116	; 0x74
 800e1a4:	9002      	str	r0, [sp, #8]
 800e1a6:	9006      	str	r0, [sp, #24]
 800e1a8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800e1ac:	4809      	ldr	r0, [pc, #36]	; (800e1d4 <siprintf+0x38>)
 800e1ae:	9107      	str	r1, [sp, #28]
 800e1b0:	9104      	str	r1, [sp, #16]
 800e1b2:	4909      	ldr	r1, [pc, #36]	; (800e1d8 <siprintf+0x3c>)
 800e1b4:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1b8:	9105      	str	r1, [sp, #20]
 800e1ba:	6800      	ldr	r0, [r0, #0]
 800e1bc:	9301      	str	r3, [sp, #4]
 800e1be:	a902      	add	r1, sp, #8
 800e1c0:	f000 f866 	bl	800e290 <_svfiprintf_r>
 800e1c4:	9b02      	ldr	r3, [sp, #8]
 800e1c6:	2200      	movs	r2, #0
 800e1c8:	701a      	strb	r2, [r3, #0]
 800e1ca:	b01c      	add	sp, #112	; 0x70
 800e1cc:	f85d eb04 	ldr.w	lr, [sp], #4
 800e1d0:	b003      	add	sp, #12
 800e1d2:	4770      	bx	lr
 800e1d4:	2000005c 	.word	0x2000005c
 800e1d8:	ffff0208 	.word	0xffff0208

0800e1dc <__ssputs_r>:
 800e1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1e0:	688e      	ldr	r6, [r1, #8]
 800e1e2:	429e      	cmp	r6, r3
 800e1e4:	4682      	mov	sl, r0
 800e1e6:	460c      	mov	r4, r1
 800e1e8:	4690      	mov	r8, r2
 800e1ea:	4699      	mov	r9, r3
 800e1ec:	d837      	bhi.n	800e25e <__ssputs_r+0x82>
 800e1ee:	898a      	ldrh	r2, [r1, #12]
 800e1f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e1f4:	d031      	beq.n	800e25a <__ssputs_r+0x7e>
 800e1f6:	6825      	ldr	r5, [r4, #0]
 800e1f8:	6909      	ldr	r1, [r1, #16]
 800e1fa:	1a6f      	subs	r7, r5, r1
 800e1fc:	6965      	ldr	r5, [r4, #20]
 800e1fe:	2302      	movs	r3, #2
 800e200:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e204:	fb95 f5f3 	sdiv	r5, r5, r3
 800e208:	f109 0301 	add.w	r3, r9, #1
 800e20c:	443b      	add	r3, r7
 800e20e:	429d      	cmp	r5, r3
 800e210:	bf38      	it	cc
 800e212:	461d      	movcc	r5, r3
 800e214:	0553      	lsls	r3, r2, #21
 800e216:	d530      	bpl.n	800e27a <__ssputs_r+0x9e>
 800e218:	4629      	mov	r1, r5
 800e21a:	f000 fb21 	bl	800e860 <_malloc_r>
 800e21e:	4606      	mov	r6, r0
 800e220:	b950      	cbnz	r0, 800e238 <__ssputs_r+0x5c>
 800e222:	230c      	movs	r3, #12
 800e224:	f8ca 3000 	str.w	r3, [sl]
 800e228:	89a3      	ldrh	r3, [r4, #12]
 800e22a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e22e:	81a3      	strh	r3, [r4, #12]
 800e230:	f04f 30ff 	mov.w	r0, #4294967295
 800e234:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e238:	463a      	mov	r2, r7
 800e23a:	6921      	ldr	r1, [r4, #16]
 800e23c:	f7ff ff9a 	bl	800e174 <memcpy>
 800e240:	89a3      	ldrh	r3, [r4, #12]
 800e242:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e246:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e24a:	81a3      	strh	r3, [r4, #12]
 800e24c:	6126      	str	r6, [r4, #16]
 800e24e:	6165      	str	r5, [r4, #20]
 800e250:	443e      	add	r6, r7
 800e252:	1bed      	subs	r5, r5, r7
 800e254:	6026      	str	r6, [r4, #0]
 800e256:	60a5      	str	r5, [r4, #8]
 800e258:	464e      	mov	r6, r9
 800e25a:	454e      	cmp	r6, r9
 800e25c:	d900      	bls.n	800e260 <__ssputs_r+0x84>
 800e25e:	464e      	mov	r6, r9
 800e260:	4632      	mov	r2, r6
 800e262:	4641      	mov	r1, r8
 800e264:	6820      	ldr	r0, [r4, #0]
 800e266:	f000 fa93 	bl	800e790 <memmove>
 800e26a:	68a3      	ldr	r3, [r4, #8]
 800e26c:	1b9b      	subs	r3, r3, r6
 800e26e:	60a3      	str	r3, [r4, #8]
 800e270:	6823      	ldr	r3, [r4, #0]
 800e272:	441e      	add	r6, r3
 800e274:	6026      	str	r6, [r4, #0]
 800e276:	2000      	movs	r0, #0
 800e278:	e7dc      	b.n	800e234 <__ssputs_r+0x58>
 800e27a:	462a      	mov	r2, r5
 800e27c:	f000 fb4a 	bl	800e914 <_realloc_r>
 800e280:	4606      	mov	r6, r0
 800e282:	2800      	cmp	r0, #0
 800e284:	d1e2      	bne.n	800e24c <__ssputs_r+0x70>
 800e286:	6921      	ldr	r1, [r4, #16]
 800e288:	4650      	mov	r0, sl
 800e28a:	f000 fa9b 	bl	800e7c4 <_free_r>
 800e28e:	e7c8      	b.n	800e222 <__ssputs_r+0x46>

0800e290 <_svfiprintf_r>:
 800e290:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	461d      	mov	r5, r3
 800e296:	898b      	ldrh	r3, [r1, #12]
 800e298:	061f      	lsls	r7, r3, #24
 800e29a:	b09d      	sub	sp, #116	; 0x74
 800e29c:	4680      	mov	r8, r0
 800e29e:	460c      	mov	r4, r1
 800e2a0:	4616      	mov	r6, r2
 800e2a2:	d50f      	bpl.n	800e2c4 <_svfiprintf_r+0x34>
 800e2a4:	690b      	ldr	r3, [r1, #16]
 800e2a6:	b96b      	cbnz	r3, 800e2c4 <_svfiprintf_r+0x34>
 800e2a8:	2140      	movs	r1, #64	; 0x40
 800e2aa:	f000 fad9 	bl	800e860 <_malloc_r>
 800e2ae:	6020      	str	r0, [r4, #0]
 800e2b0:	6120      	str	r0, [r4, #16]
 800e2b2:	b928      	cbnz	r0, 800e2c0 <_svfiprintf_r+0x30>
 800e2b4:	230c      	movs	r3, #12
 800e2b6:	f8c8 3000 	str.w	r3, [r8]
 800e2ba:	f04f 30ff 	mov.w	r0, #4294967295
 800e2be:	e0c8      	b.n	800e452 <_svfiprintf_r+0x1c2>
 800e2c0:	2340      	movs	r3, #64	; 0x40
 800e2c2:	6163      	str	r3, [r4, #20]
 800e2c4:	2300      	movs	r3, #0
 800e2c6:	9309      	str	r3, [sp, #36]	; 0x24
 800e2c8:	2320      	movs	r3, #32
 800e2ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e2ce:	2330      	movs	r3, #48	; 0x30
 800e2d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e2d4:	9503      	str	r5, [sp, #12]
 800e2d6:	f04f 0b01 	mov.w	fp, #1
 800e2da:	4637      	mov	r7, r6
 800e2dc:	463d      	mov	r5, r7
 800e2de:	f815 3b01 	ldrb.w	r3, [r5], #1
 800e2e2:	b10b      	cbz	r3, 800e2e8 <_svfiprintf_r+0x58>
 800e2e4:	2b25      	cmp	r3, #37	; 0x25
 800e2e6:	d13e      	bne.n	800e366 <_svfiprintf_r+0xd6>
 800e2e8:	ebb7 0a06 	subs.w	sl, r7, r6
 800e2ec:	d00b      	beq.n	800e306 <_svfiprintf_r+0x76>
 800e2ee:	4653      	mov	r3, sl
 800e2f0:	4632      	mov	r2, r6
 800e2f2:	4621      	mov	r1, r4
 800e2f4:	4640      	mov	r0, r8
 800e2f6:	f7ff ff71 	bl	800e1dc <__ssputs_r>
 800e2fa:	3001      	adds	r0, #1
 800e2fc:	f000 80a4 	beq.w	800e448 <_svfiprintf_r+0x1b8>
 800e300:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e302:	4453      	add	r3, sl
 800e304:	9309      	str	r3, [sp, #36]	; 0x24
 800e306:	783b      	ldrb	r3, [r7, #0]
 800e308:	2b00      	cmp	r3, #0
 800e30a:	f000 809d 	beq.w	800e448 <_svfiprintf_r+0x1b8>
 800e30e:	2300      	movs	r3, #0
 800e310:	f04f 32ff 	mov.w	r2, #4294967295
 800e314:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e318:	9304      	str	r3, [sp, #16]
 800e31a:	9307      	str	r3, [sp, #28]
 800e31c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e320:	931a      	str	r3, [sp, #104]	; 0x68
 800e322:	462f      	mov	r7, r5
 800e324:	2205      	movs	r2, #5
 800e326:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e32a:	4850      	ldr	r0, [pc, #320]	; (800e46c <_svfiprintf_r+0x1dc>)
 800e32c:	f7f1 ff70 	bl	8000210 <memchr>
 800e330:	9b04      	ldr	r3, [sp, #16]
 800e332:	b9d0      	cbnz	r0, 800e36a <_svfiprintf_r+0xda>
 800e334:	06d9      	lsls	r1, r3, #27
 800e336:	bf44      	itt	mi
 800e338:	2220      	movmi	r2, #32
 800e33a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e33e:	071a      	lsls	r2, r3, #28
 800e340:	bf44      	itt	mi
 800e342:	222b      	movmi	r2, #43	; 0x2b
 800e344:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e348:	782a      	ldrb	r2, [r5, #0]
 800e34a:	2a2a      	cmp	r2, #42	; 0x2a
 800e34c:	d015      	beq.n	800e37a <_svfiprintf_r+0xea>
 800e34e:	9a07      	ldr	r2, [sp, #28]
 800e350:	462f      	mov	r7, r5
 800e352:	2000      	movs	r0, #0
 800e354:	250a      	movs	r5, #10
 800e356:	4639      	mov	r1, r7
 800e358:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e35c:	3b30      	subs	r3, #48	; 0x30
 800e35e:	2b09      	cmp	r3, #9
 800e360:	d94d      	bls.n	800e3fe <_svfiprintf_r+0x16e>
 800e362:	b1b8      	cbz	r0, 800e394 <_svfiprintf_r+0x104>
 800e364:	e00f      	b.n	800e386 <_svfiprintf_r+0xf6>
 800e366:	462f      	mov	r7, r5
 800e368:	e7b8      	b.n	800e2dc <_svfiprintf_r+0x4c>
 800e36a:	4a40      	ldr	r2, [pc, #256]	; (800e46c <_svfiprintf_r+0x1dc>)
 800e36c:	1a80      	subs	r0, r0, r2
 800e36e:	fa0b f000 	lsl.w	r0, fp, r0
 800e372:	4318      	orrs	r0, r3
 800e374:	9004      	str	r0, [sp, #16]
 800e376:	463d      	mov	r5, r7
 800e378:	e7d3      	b.n	800e322 <_svfiprintf_r+0x92>
 800e37a:	9a03      	ldr	r2, [sp, #12]
 800e37c:	1d11      	adds	r1, r2, #4
 800e37e:	6812      	ldr	r2, [r2, #0]
 800e380:	9103      	str	r1, [sp, #12]
 800e382:	2a00      	cmp	r2, #0
 800e384:	db01      	blt.n	800e38a <_svfiprintf_r+0xfa>
 800e386:	9207      	str	r2, [sp, #28]
 800e388:	e004      	b.n	800e394 <_svfiprintf_r+0x104>
 800e38a:	4252      	negs	r2, r2
 800e38c:	f043 0302 	orr.w	r3, r3, #2
 800e390:	9207      	str	r2, [sp, #28]
 800e392:	9304      	str	r3, [sp, #16]
 800e394:	783b      	ldrb	r3, [r7, #0]
 800e396:	2b2e      	cmp	r3, #46	; 0x2e
 800e398:	d10c      	bne.n	800e3b4 <_svfiprintf_r+0x124>
 800e39a:	787b      	ldrb	r3, [r7, #1]
 800e39c:	2b2a      	cmp	r3, #42	; 0x2a
 800e39e:	d133      	bne.n	800e408 <_svfiprintf_r+0x178>
 800e3a0:	9b03      	ldr	r3, [sp, #12]
 800e3a2:	1d1a      	adds	r2, r3, #4
 800e3a4:	681b      	ldr	r3, [r3, #0]
 800e3a6:	9203      	str	r2, [sp, #12]
 800e3a8:	2b00      	cmp	r3, #0
 800e3aa:	bfb8      	it	lt
 800e3ac:	f04f 33ff 	movlt.w	r3, #4294967295
 800e3b0:	3702      	adds	r7, #2
 800e3b2:	9305      	str	r3, [sp, #20]
 800e3b4:	4d2e      	ldr	r5, [pc, #184]	; (800e470 <_svfiprintf_r+0x1e0>)
 800e3b6:	7839      	ldrb	r1, [r7, #0]
 800e3b8:	2203      	movs	r2, #3
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f7f1 ff28 	bl	8000210 <memchr>
 800e3c0:	b138      	cbz	r0, 800e3d2 <_svfiprintf_r+0x142>
 800e3c2:	2340      	movs	r3, #64	; 0x40
 800e3c4:	1b40      	subs	r0, r0, r5
 800e3c6:	fa03 f000 	lsl.w	r0, r3, r0
 800e3ca:	9b04      	ldr	r3, [sp, #16]
 800e3cc:	4303      	orrs	r3, r0
 800e3ce:	3701      	adds	r7, #1
 800e3d0:	9304      	str	r3, [sp, #16]
 800e3d2:	7839      	ldrb	r1, [r7, #0]
 800e3d4:	4827      	ldr	r0, [pc, #156]	; (800e474 <_svfiprintf_r+0x1e4>)
 800e3d6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e3da:	2206      	movs	r2, #6
 800e3dc:	1c7e      	adds	r6, r7, #1
 800e3de:	f7f1 ff17 	bl	8000210 <memchr>
 800e3e2:	2800      	cmp	r0, #0
 800e3e4:	d038      	beq.n	800e458 <_svfiprintf_r+0x1c8>
 800e3e6:	4b24      	ldr	r3, [pc, #144]	; (800e478 <_svfiprintf_r+0x1e8>)
 800e3e8:	bb13      	cbnz	r3, 800e430 <_svfiprintf_r+0x1a0>
 800e3ea:	9b03      	ldr	r3, [sp, #12]
 800e3ec:	3307      	adds	r3, #7
 800e3ee:	f023 0307 	bic.w	r3, r3, #7
 800e3f2:	3308      	adds	r3, #8
 800e3f4:	9303      	str	r3, [sp, #12]
 800e3f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e3f8:	444b      	add	r3, r9
 800e3fa:	9309      	str	r3, [sp, #36]	; 0x24
 800e3fc:	e76d      	b.n	800e2da <_svfiprintf_r+0x4a>
 800e3fe:	fb05 3202 	mla	r2, r5, r2, r3
 800e402:	2001      	movs	r0, #1
 800e404:	460f      	mov	r7, r1
 800e406:	e7a6      	b.n	800e356 <_svfiprintf_r+0xc6>
 800e408:	2300      	movs	r3, #0
 800e40a:	3701      	adds	r7, #1
 800e40c:	9305      	str	r3, [sp, #20]
 800e40e:	4619      	mov	r1, r3
 800e410:	250a      	movs	r5, #10
 800e412:	4638      	mov	r0, r7
 800e414:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e418:	3a30      	subs	r2, #48	; 0x30
 800e41a:	2a09      	cmp	r2, #9
 800e41c:	d903      	bls.n	800e426 <_svfiprintf_r+0x196>
 800e41e:	2b00      	cmp	r3, #0
 800e420:	d0c8      	beq.n	800e3b4 <_svfiprintf_r+0x124>
 800e422:	9105      	str	r1, [sp, #20]
 800e424:	e7c6      	b.n	800e3b4 <_svfiprintf_r+0x124>
 800e426:	fb05 2101 	mla	r1, r5, r1, r2
 800e42a:	2301      	movs	r3, #1
 800e42c:	4607      	mov	r7, r0
 800e42e:	e7f0      	b.n	800e412 <_svfiprintf_r+0x182>
 800e430:	ab03      	add	r3, sp, #12
 800e432:	9300      	str	r3, [sp, #0]
 800e434:	4622      	mov	r2, r4
 800e436:	4b11      	ldr	r3, [pc, #68]	; (800e47c <_svfiprintf_r+0x1ec>)
 800e438:	a904      	add	r1, sp, #16
 800e43a:	4640      	mov	r0, r8
 800e43c:	f3af 8000 	nop.w
 800e440:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e444:	4681      	mov	r9, r0
 800e446:	d1d6      	bne.n	800e3f6 <_svfiprintf_r+0x166>
 800e448:	89a3      	ldrh	r3, [r4, #12]
 800e44a:	065b      	lsls	r3, r3, #25
 800e44c:	f53f af35 	bmi.w	800e2ba <_svfiprintf_r+0x2a>
 800e450:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e452:	b01d      	add	sp, #116	; 0x74
 800e454:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e458:	ab03      	add	r3, sp, #12
 800e45a:	9300      	str	r3, [sp, #0]
 800e45c:	4622      	mov	r2, r4
 800e45e:	4b07      	ldr	r3, [pc, #28]	; (800e47c <_svfiprintf_r+0x1ec>)
 800e460:	a904      	add	r1, sp, #16
 800e462:	4640      	mov	r0, r8
 800e464:	f000 f882 	bl	800e56c <_printf_i>
 800e468:	e7ea      	b.n	800e440 <_svfiprintf_r+0x1b0>
 800e46a:	bf00      	nop
 800e46c:	08010a04 	.word	0x08010a04
 800e470:	08010a0a 	.word	0x08010a0a
 800e474:	08010a0e 	.word	0x08010a0e
 800e478:	00000000 	.word	0x00000000
 800e47c:	0800e1dd 	.word	0x0800e1dd

0800e480 <_printf_common>:
 800e480:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e484:	4691      	mov	r9, r2
 800e486:	461f      	mov	r7, r3
 800e488:	688a      	ldr	r2, [r1, #8]
 800e48a:	690b      	ldr	r3, [r1, #16]
 800e48c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e490:	4293      	cmp	r3, r2
 800e492:	bfb8      	it	lt
 800e494:	4613      	movlt	r3, r2
 800e496:	f8c9 3000 	str.w	r3, [r9]
 800e49a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e49e:	4606      	mov	r6, r0
 800e4a0:	460c      	mov	r4, r1
 800e4a2:	b112      	cbz	r2, 800e4aa <_printf_common+0x2a>
 800e4a4:	3301      	adds	r3, #1
 800e4a6:	f8c9 3000 	str.w	r3, [r9]
 800e4aa:	6823      	ldr	r3, [r4, #0]
 800e4ac:	0699      	lsls	r1, r3, #26
 800e4ae:	bf42      	ittt	mi
 800e4b0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e4b4:	3302      	addmi	r3, #2
 800e4b6:	f8c9 3000 	strmi.w	r3, [r9]
 800e4ba:	6825      	ldr	r5, [r4, #0]
 800e4bc:	f015 0506 	ands.w	r5, r5, #6
 800e4c0:	d107      	bne.n	800e4d2 <_printf_common+0x52>
 800e4c2:	f104 0a19 	add.w	sl, r4, #25
 800e4c6:	68e3      	ldr	r3, [r4, #12]
 800e4c8:	f8d9 2000 	ldr.w	r2, [r9]
 800e4cc:	1a9b      	subs	r3, r3, r2
 800e4ce:	42ab      	cmp	r3, r5
 800e4d0:	dc28      	bgt.n	800e524 <_printf_common+0xa4>
 800e4d2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e4d6:	6822      	ldr	r2, [r4, #0]
 800e4d8:	3300      	adds	r3, #0
 800e4da:	bf18      	it	ne
 800e4dc:	2301      	movne	r3, #1
 800e4de:	0692      	lsls	r2, r2, #26
 800e4e0:	d42d      	bmi.n	800e53e <_printf_common+0xbe>
 800e4e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e4e6:	4639      	mov	r1, r7
 800e4e8:	4630      	mov	r0, r6
 800e4ea:	47c0      	blx	r8
 800e4ec:	3001      	adds	r0, #1
 800e4ee:	d020      	beq.n	800e532 <_printf_common+0xb2>
 800e4f0:	6823      	ldr	r3, [r4, #0]
 800e4f2:	68e5      	ldr	r5, [r4, #12]
 800e4f4:	f8d9 2000 	ldr.w	r2, [r9]
 800e4f8:	f003 0306 	and.w	r3, r3, #6
 800e4fc:	2b04      	cmp	r3, #4
 800e4fe:	bf08      	it	eq
 800e500:	1aad      	subeq	r5, r5, r2
 800e502:	68a3      	ldr	r3, [r4, #8]
 800e504:	6922      	ldr	r2, [r4, #16]
 800e506:	bf0c      	ite	eq
 800e508:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e50c:	2500      	movne	r5, #0
 800e50e:	4293      	cmp	r3, r2
 800e510:	bfc4      	itt	gt
 800e512:	1a9b      	subgt	r3, r3, r2
 800e514:	18ed      	addgt	r5, r5, r3
 800e516:	f04f 0900 	mov.w	r9, #0
 800e51a:	341a      	adds	r4, #26
 800e51c:	454d      	cmp	r5, r9
 800e51e:	d11a      	bne.n	800e556 <_printf_common+0xd6>
 800e520:	2000      	movs	r0, #0
 800e522:	e008      	b.n	800e536 <_printf_common+0xb6>
 800e524:	2301      	movs	r3, #1
 800e526:	4652      	mov	r2, sl
 800e528:	4639      	mov	r1, r7
 800e52a:	4630      	mov	r0, r6
 800e52c:	47c0      	blx	r8
 800e52e:	3001      	adds	r0, #1
 800e530:	d103      	bne.n	800e53a <_printf_common+0xba>
 800e532:	f04f 30ff 	mov.w	r0, #4294967295
 800e536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e53a:	3501      	adds	r5, #1
 800e53c:	e7c3      	b.n	800e4c6 <_printf_common+0x46>
 800e53e:	18e1      	adds	r1, r4, r3
 800e540:	1c5a      	adds	r2, r3, #1
 800e542:	2030      	movs	r0, #48	; 0x30
 800e544:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e548:	4422      	add	r2, r4
 800e54a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e54e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e552:	3302      	adds	r3, #2
 800e554:	e7c5      	b.n	800e4e2 <_printf_common+0x62>
 800e556:	2301      	movs	r3, #1
 800e558:	4622      	mov	r2, r4
 800e55a:	4639      	mov	r1, r7
 800e55c:	4630      	mov	r0, r6
 800e55e:	47c0      	blx	r8
 800e560:	3001      	adds	r0, #1
 800e562:	d0e6      	beq.n	800e532 <_printf_common+0xb2>
 800e564:	f109 0901 	add.w	r9, r9, #1
 800e568:	e7d8      	b.n	800e51c <_printf_common+0x9c>
	...

0800e56c <_printf_i>:
 800e56c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e570:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e574:	460c      	mov	r4, r1
 800e576:	7e09      	ldrb	r1, [r1, #24]
 800e578:	b085      	sub	sp, #20
 800e57a:	296e      	cmp	r1, #110	; 0x6e
 800e57c:	4617      	mov	r7, r2
 800e57e:	4606      	mov	r6, r0
 800e580:	4698      	mov	r8, r3
 800e582:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e584:	f000 80b3 	beq.w	800e6ee <_printf_i+0x182>
 800e588:	d822      	bhi.n	800e5d0 <_printf_i+0x64>
 800e58a:	2963      	cmp	r1, #99	; 0x63
 800e58c:	d036      	beq.n	800e5fc <_printf_i+0x90>
 800e58e:	d80a      	bhi.n	800e5a6 <_printf_i+0x3a>
 800e590:	2900      	cmp	r1, #0
 800e592:	f000 80b9 	beq.w	800e708 <_printf_i+0x19c>
 800e596:	2958      	cmp	r1, #88	; 0x58
 800e598:	f000 8083 	beq.w	800e6a2 <_printf_i+0x136>
 800e59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e5a0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e5a4:	e032      	b.n	800e60c <_printf_i+0xa0>
 800e5a6:	2964      	cmp	r1, #100	; 0x64
 800e5a8:	d001      	beq.n	800e5ae <_printf_i+0x42>
 800e5aa:	2969      	cmp	r1, #105	; 0x69
 800e5ac:	d1f6      	bne.n	800e59c <_printf_i+0x30>
 800e5ae:	6820      	ldr	r0, [r4, #0]
 800e5b0:	6813      	ldr	r3, [r2, #0]
 800e5b2:	0605      	lsls	r5, r0, #24
 800e5b4:	f103 0104 	add.w	r1, r3, #4
 800e5b8:	d52a      	bpl.n	800e610 <_printf_i+0xa4>
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	6011      	str	r1, [r2, #0]
 800e5be:	2b00      	cmp	r3, #0
 800e5c0:	da03      	bge.n	800e5ca <_printf_i+0x5e>
 800e5c2:	222d      	movs	r2, #45	; 0x2d
 800e5c4:	425b      	negs	r3, r3
 800e5c6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e5ca:	486f      	ldr	r0, [pc, #444]	; (800e788 <_printf_i+0x21c>)
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	e039      	b.n	800e644 <_printf_i+0xd8>
 800e5d0:	2973      	cmp	r1, #115	; 0x73
 800e5d2:	f000 809d 	beq.w	800e710 <_printf_i+0x1a4>
 800e5d6:	d808      	bhi.n	800e5ea <_printf_i+0x7e>
 800e5d8:	296f      	cmp	r1, #111	; 0x6f
 800e5da:	d020      	beq.n	800e61e <_printf_i+0xb2>
 800e5dc:	2970      	cmp	r1, #112	; 0x70
 800e5de:	d1dd      	bne.n	800e59c <_printf_i+0x30>
 800e5e0:	6823      	ldr	r3, [r4, #0]
 800e5e2:	f043 0320 	orr.w	r3, r3, #32
 800e5e6:	6023      	str	r3, [r4, #0]
 800e5e8:	e003      	b.n	800e5f2 <_printf_i+0x86>
 800e5ea:	2975      	cmp	r1, #117	; 0x75
 800e5ec:	d017      	beq.n	800e61e <_printf_i+0xb2>
 800e5ee:	2978      	cmp	r1, #120	; 0x78
 800e5f0:	d1d4      	bne.n	800e59c <_printf_i+0x30>
 800e5f2:	2378      	movs	r3, #120	; 0x78
 800e5f4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e5f8:	4864      	ldr	r0, [pc, #400]	; (800e78c <_printf_i+0x220>)
 800e5fa:	e055      	b.n	800e6a8 <_printf_i+0x13c>
 800e5fc:	6813      	ldr	r3, [r2, #0]
 800e5fe:	1d19      	adds	r1, r3, #4
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	6011      	str	r1, [r2, #0]
 800e604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e60c:	2301      	movs	r3, #1
 800e60e:	e08c      	b.n	800e72a <_printf_i+0x1be>
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	6011      	str	r1, [r2, #0]
 800e614:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e618:	bf18      	it	ne
 800e61a:	b21b      	sxthne	r3, r3
 800e61c:	e7cf      	b.n	800e5be <_printf_i+0x52>
 800e61e:	6813      	ldr	r3, [r2, #0]
 800e620:	6825      	ldr	r5, [r4, #0]
 800e622:	1d18      	adds	r0, r3, #4
 800e624:	6010      	str	r0, [r2, #0]
 800e626:	0628      	lsls	r0, r5, #24
 800e628:	d501      	bpl.n	800e62e <_printf_i+0xc2>
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	e002      	b.n	800e634 <_printf_i+0xc8>
 800e62e:	0668      	lsls	r0, r5, #25
 800e630:	d5fb      	bpl.n	800e62a <_printf_i+0xbe>
 800e632:	881b      	ldrh	r3, [r3, #0]
 800e634:	4854      	ldr	r0, [pc, #336]	; (800e788 <_printf_i+0x21c>)
 800e636:	296f      	cmp	r1, #111	; 0x6f
 800e638:	bf14      	ite	ne
 800e63a:	220a      	movne	r2, #10
 800e63c:	2208      	moveq	r2, #8
 800e63e:	2100      	movs	r1, #0
 800e640:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e644:	6865      	ldr	r5, [r4, #4]
 800e646:	60a5      	str	r5, [r4, #8]
 800e648:	2d00      	cmp	r5, #0
 800e64a:	f2c0 8095 	blt.w	800e778 <_printf_i+0x20c>
 800e64e:	6821      	ldr	r1, [r4, #0]
 800e650:	f021 0104 	bic.w	r1, r1, #4
 800e654:	6021      	str	r1, [r4, #0]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d13d      	bne.n	800e6d6 <_printf_i+0x16a>
 800e65a:	2d00      	cmp	r5, #0
 800e65c:	f040 808e 	bne.w	800e77c <_printf_i+0x210>
 800e660:	4665      	mov	r5, ip
 800e662:	2a08      	cmp	r2, #8
 800e664:	d10b      	bne.n	800e67e <_printf_i+0x112>
 800e666:	6823      	ldr	r3, [r4, #0]
 800e668:	07db      	lsls	r3, r3, #31
 800e66a:	d508      	bpl.n	800e67e <_printf_i+0x112>
 800e66c:	6923      	ldr	r3, [r4, #16]
 800e66e:	6862      	ldr	r2, [r4, #4]
 800e670:	429a      	cmp	r2, r3
 800e672:	bfde      	ittt	le
 800e674:	2330      	movle	r3, #48	; 0x30
 800e676:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e67a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e67e:	ebac 0305 	sub.w	r3, ip, r5
 800e682:	6123      	str	r3, [r4, #16]
 800e684:	f8cd 8000 	str.w	r8, [sp]
 800e688:	463b      	mov	r3, r7
 800e68a:	aa03      	add	r2, sp, #12
 800e68c:	4621      	mov	r1, r4
 800e68e:	4630      	mov	r0, r6
 800e690:	f7ff fef6 	bl	800e480 <_printf_common>
 800e694:	3001      	adds	r0, #1
 800e696:	d14d      	bne.n	800e734 <_printf_i+0x1c8>
 800e698:	f04f 30ff 	mov.w	r0, #4294967295
 800e69c:	b005      	add	sp, #20
 800e69e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6a2:	4839      	ldr	r0, [pc, #228]	; (800e788 <_printf_i+0x21c>)
 800e6a4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e6a8:	6813      	ldr	r3, [r2, #0]
 800e6aa:	6821      	ldr	r1, [r4, #0]
 800e6ac:	1d1d      	adds	r5, r3, #4
 800e6ae:	681b      	ldr	r3, [r3, #0]
 800e6b0:	6015      	str	r5, [r2, #0]
 800e6b2:	060a      	lsls	r2, r1, #24
 800e6b4:	d50b      	bpl.n	800e6ce <_printf_i+0x162>
 800e6b6:	07ca      	lsls	r2, r1, #31
 800e6b8:	bf44      	itt	mi
 800e6ba:	f041 0120 	orrmi.w	r1, r1, #32
 800e6be:	6021      	strmi	r1, [r4, #0]
 800e6c0:	b91b      	cbnz	r3, 800e6ca <_printf_i+0x15e>
 800e6c2:	6822      	ldr	r2, [r4, #0]
 800e6c4:	f022 0220 	bic.w	r2, r2, #32
 800e6c8:	6022      	str	r2, [r4, #0]
 800e6ca:	2210      	movs	r2, #16
 800e6cc:	e7b7      	b.n	800e63e <_printf_i+0xd2>
 800e6ce:	064d      	lsls	r5, r1, #25
 800e6d0:	bf48      	it	mi
 800e6d2:	b29b      	uxthmi	r3, r3
 800e6d4:	e7ef      	b.n	800e6b6 <_printf_i+0x14a>
 800e6d6:	4665      	mov	r5, ip
 800e6d8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6dc:	fb02 3311 	mls	r3, r2, r1, r3
 800e6e0:	5cc3      	ldrb	r3, [r0, r3]
 800e6e2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e6e6:	460b      	mov	r3, r1
 800e6e8:	2900      	cmp	r1, #0
 800e6ea:	d1f5      	bne.n	800e6d8 <_printf_i+0x16c>
 800e6ec:	e7b9      	b.n	800e662 <_printf_i+0xf6>
 800e6ee:	6813      	ldr	r3, [r2, #0]
 800e6f0:	6825      	ldr	r5, [r4, #0]
 800e6f2:	6961      	ldr	r1, [r4, #20]
 800e6f4:	1d18      	adds	r0, r3, #4
 800e6f6:	6010      	str	r0, [r2, #0]
 800e6f8:	0628      	lsls	r0, r5, #24
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	d501      	bpl.n	800e702 <_printf_i+0x196>
 800e6fe:	6019      	str	r1, [r3, #0]
 800e700:	e002      	b.n	800e708 <_printf_i+0x19c>
 800e702:	066a      	lsls	r2, r5, #25
 800e704:	d5fb      	bpl.n	800e6fe <_printf_i+0x192>
 800e706:	8019      	strh	r1, [r3, #0]
 800e708:	2300      	movs	r3, #0
 800e70a:	6123      	str	r3, [r4, #16]
 800e70c:	4665      	mov	r5, ip
 800e70e:	e7b9      	b.n	800e684 <_printf_i+0x118>
 800e710:	6813      	ldr	r3, [r2, #0]
 800e712:	1d19      	adds	r1, r3, #4
 800e714:	6011      	str	r1, [r2, #0]
 800e716:	681d      	ldr	r5, [r3, #0]
 800e718:	6862      	ldr	r2, [r4, #4]
 800e71a:	2100      	movs	r1, #0
 800e71c:	4628      	mov	r0, r5
 800e71e:	f7f1 fd77 	bl	8000210 <memchr>
 800e722:	b108      	cbz	r0, 800e728 <_printf_i+0x1bc>
 800e724:	1b40      	subs	r0, r0, r5
 800e726:	6060      	str	r0, [r4, #4]
 800e728:	6863      	ldr	r3, [r4, #4]
 800e72a:	6123      	str	r3, [r4, #16]
 800e72c:	2300      	movs	r3, #0
 800e72e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e732:	e7a7      	b.n	800e684 <_printf_i+0x118>
 800e734:	6923      	ldr	r3, [r4, #16]
 800e736:	462a      	mov	r2, r5
 800e738:	4639      	mov	r1, r7
 800e73a:	4630      	mov	r0, r6
 800e73c:	47c0      	blx	r8
 800e73e:	3001      	adds	r0, #1
 800e740:	d0aa      	beq.n	800e698 <_printf_i+0x12c>
 800e742:	6823      	ldr	r3, [r4, #0]
 800e744:	079b      	lsls	r3, r3, #30
 800e746:	d413      	bmi.n	800e770 <_printf_i+0x204>
 800e748:	68e0      	ldr	r0, [r4, #12]
 800e74a:	9b03      	ldr	r3, [sp, #12]
 800e74c:	4298      	cmp	r0, r3
 800e74e:	bfb8      	it	lt
 800e750:	4618      	movlt	r0, r3
 800e752:	e7a3      	b.n	800e69c <_printf_i+0x130>
 800e754:	2301      	movs	r3, #1
 800e756:	464a      	mov	r2, r9
 800e758:	4639      	mov	r1, r7
 800e75a:	4630      	mov	r0, r6
 800e75c:	47c0      	blx	r8
 800e75e:	3001      	adds	r0, #1
 800e760:	d09a      	beq.n	800e698 <_printf_i+0x12c>
 800e762:	3501      	adds	r5, #1
 800e764:	68e3      	ldr	r3, [r4, #12]
 800e766:	9a03      	ldr	r2, [sp, #12]
 800e768:	1a9b      	subs	r3, r3, r2
 800e76a:	42ab      	cmp	r3, r5
 800e76c:	dcf2      	bgt.n	800e754 <_printf_i+0x1e8>
 800e76e:	e7eb      	b.n	800e748 <_printf_i+0x1dc>
 800e770:	2500      	movs	r5, #0
 800e772:	f104 0919 	add.w	r9, r4, #25
 800e776:	e7f5      	b.n	800e764 <_printf_i+0x1f8>
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1ac      	bne.n	800e6d6 <_printf_i+0x16a>
 800e77c:	7803      	ldrb	r3, [r0, #0]
 800e77e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e782:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e786:	e76c      	b.n	800e662 <_printf_i+0xf6>
 800e788:	08010a15 	.word	0x08010a15
 800e78c:	08010a26 	.word	0x08010a26

0800e790 <memmove>:
 800e790:	4288      	cmp	r0, r1
 800e792:	b510      	push	{r4, lr}
 800e794:	eb01 0302 	add.w	r3, r1, r2
 800e798:	d807      	bhi.n	800e7aa <memmove+0x1a>
 800e79a:	1e42      	subs	r2, r0, #1
 800e79c:	4299      	cmp	r1, r3
 800e79e:	d00a      	beq.n	800e7b6 <memmove+0x26>
 800e7a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e7a4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e7a8:	e7f8      	b.n	800e79c <memmove+0xc>
 800e7aa:	4283      	cmp	r3, r0
 800e7ac:	d9f5      	bls.n	800e79a <memmove+0xa>
 800e7ae:	1881      	adds	r1, r0, r2
 800e7b0:	1ad2      	subs	r2, r2, r3
 800e7b2:	42d3      	cmn	r3, r2
 800e7b4:	d100      	bne.n	800e7b8 <memmove+0x28>
 800e7b6:	bd10      	pop	{r4, pc}
 800e7b8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e7bc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e7c0:	e7f7      	b.n	800e7b2 <memmove+0x22>
	...

0800e7c4 <_free_r>:
 800e7c4:	b538      	push	{r3, r4, r5, lr}
 800e7c6:	4605      	mov	r5, r0
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	d045      	beq.n	800e858 <_free_r+0x94>
 800e7cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7d0:	1f0c      	subs	r4, r1, #4
 800e7d2:	2b00      	cmp	r3, #0
 800e7d4:	bfb8      	it	lt
 800e7d6:	18e4      	addlt	r4, r4, r3
 800e7d8:	f000 f8d2 	bl	800e980 <__malloc_lock>
 800e7dc:	4a1f      	ldr	r2, [pc, #124]	; (800e85c <_free_r+0x98>)
 800e7de:	6813      	ldr	r3, [r2, #0]
 800e7e0:	4610      	mov	r0, r2
 800e7e2:	b933      	cbnz	r3, 800e7f2 <_free_r+0x2e>
 800e7e4:	6063      	str	r3, [r4, #4]
 800e7e6:	6014      	str	r4, [r2, #0]
 800e7e8:	4628      	mov	r0, r5
 800e7ea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7ee:	f000 b8c8 	b.w	800e982 <__malloc_unlock>
 800e7f2:	42a3      	cmp	r3, r4
 800e7f4:	d90c      	bls.n	800e810 <_free_r+0x4c>
 800e7f6:	6821      	ldr	r1, [r4, #0]
 800e7f8:	1862      	adds	r2, r4, r1
 800e7fa:	4293      	cmp	r3, r2
 800e7fc:	bf04      	itt	eq
 800e7fe:	681a      	ldreq	r2, [r3, #0]
 800e800:	685b      	ldreq	r3, [r3, #4]
 800e802:	6063      	str	r3, [r4, #4]
 800e804:	bf04      	itt	eq
 800e806:	1852      	addeq	r2, r2, r1
 800e808:	6022      	streq	r2, [r4, #0]
 800e80a:	6004      	str	r4, [r0, #0]
 800e80c:	e7ec      	b.n	800e7e8 <_free_r+0x24>
 800e80e:	4613      	mov	r3, r2
 800e810:	685a      	ldr	r2, [r3, #4]
 800e812:	b10a      	cbz	r2, 800e818 <_free_r+0x54>
 800e814:	42a2      	cmp	r2, r4
 800e816:	d9fa      	bls.n	800e80e <_free_r+0x4a>
 800e818:	6819      	ldr	r1, [r3, #0]
 800e81a:	1858      	adds	r0, r3, r1
 800e81c:	42a0      	cmp	r0, r4
 800e81e:	d10b      	bne.n	800e838 <_free_r+0x74>
 800e820:	6820      	ldr	r0, [r4, #0]
 800e822:	4401      	add	r1, r0
 800e824:	1858      	adds	r0, r3, r1
 800e826:	4282      	cmp	r2, r0
 800e828:	6019      	str	r1, [r3, #0]
 800e82a:	d1dd      	bne.n	800e7e8 <_free_r+0x24>
 800e82c:	6810      	ldr	r0, [r2, #0]
 800e82e:	6852      	ldr	r2, [r2, #4]
 800e830:	605a      	str	r2, [r3, #4]
 800e832:	4401      	add	r1, r0
 800e834:	6019      	str	r1, [r3, #0]
 800e836:	e7d7      	b.n	800e7e8 <_free_r+0x24>
 800e838:	d902      	bls.n	800e840 <_free_r+0x7c>
 800e83a:	230c      	movs	r3, #12
 800e83c:	602b      	str	r3, [r5, #0]
 800e83e:	e7d3      	b.n	800e7e8 <_free_r+0x24>
 800e840:	6820      	ldr	r0, [r4, #0]
 800e842:	1821      	adds	r1, r4, r0
 800e844:	428a      	cmp	r2, r1
 800e846:	bf04      	itt	eq
 800e848:	6811      	ldreq	r1, [r2, #0]
 800e84a:	6852      	ldreq	r2, [r2, #4]
 800e84c:	6062      	str	r2, [r4, #4]
 800e84e:	bf04      	itt	eq
 800e850:	1809      	addeq	r1, r1, r0
 800e852:	6021      	streq	r1, [r4, #0]
 800e854:	605c      	str	r4, [r3, #4]
 800e856:	e7c7      	b.n	800e7e8 <_free_r+0x24>
 800e858:	bd38      	pop	{r3, r4, r5, pc}
 800e85a:	bf00      	nop
 800e85c:	20008654 	.word	0x20008654

0800e860 <_malloc_r>:
 800e860:	b570      	push	{r4, r5, r6, lr}
 800e862:	1ccd      	adds	r5, r1, #3
 800e864:	f025 0503 	bic.w	r5, r5, #3
 800e868:	3508      	adds	r5, #8
 800e86a:	2d0c      	cmp	r5, #12
 800e86c:	bf38      	it	cc
 800e86e:	250c      	movcc	r5, #12
 800e870:	2d00      	cmp	r5, #0
 800e872:	4606      	mov	r6, r0
 800e874:	db01      	blt.n	800e87a <_malloc_r+0x1a>
 800e876:	42a9      	cmp	r1, r5
 800e878:	d903      	bls.n	800e882 <_malloc_r+0x22>
 800e87a:	230c      	movs	r3, #12
 800e87c:	6033      	str	r3, [r6, #0]
 800e87e:	2000      	movs	r0, #0
 800e880:	bd70      	pop	{r4, r5, r6, pc}
 800e882:	f000 f87d 	bl	800e980 <__malloc_lock>
 800e886:	4a21      	ldr	r2, [pc, #132]	; (800e90c <_malloc_r+0xac>)
 800e888:	6814      	ldr	r4, [r2, #0]
 800e88a:	4621      	mov	r1, r4
 800e88c:	b991      	cbnz	r1, 800e8b4 <_malloc_r+0x54>
 800e88e:	4c20      	ldr	r4, [pc, #128]	; (800e910 <_malloc_r+0xb0>)
 800e890:	6823      	ldr	r3, [r4, #0]
 800e892:	b91b      	cbnz	r3, 800e89c <_malloc_r+0x3c>
 800e894:	4630      	mov	r0, r6
 800e896:	f000 f863 	bl	800e960 <_sbrk_r>
 800e89a:	6020      	str	r0, [r4, #0]
 800e89c:	4629      	mov	r1, r5
 800e89e:	4630      	mov	r0, r6
 800e8a0:	f000 f85e 	bl	800e960 <_sbrk_r>
 800e8a4:	1c43      	adds	r3, r0, #1
 800e8a6:	d124      	bne.n	800e8f2 <_malloc_r+0x92>
 800e8a8:	230c      	movs	r3, #12
 800e8aa:	6033      	str	r3, [r6, #0]
 800e8ac:	4630      	mov	r0, r6
 800e8ae:	f000 f868 	bl	800e982 <__malloc_unlock>
 800e8b2:	e7e4      	b.n	800e87e <_malloc_r+0x1e>
 800e8b4:	680b      	ldr	r3, [r1, #0]
 800e8b6:	1b5b      	subs	r3, r3, r5
 800e8b8:	d418      	bmi.n	800e8ec <_malloc_r+0x8c>
 800e8ba:	2b0b      	cmp	r3, #11
 800e8bc:	d90f      	bls.n	800e8de <_malloc_r+0x7e>
 800e8be:	600b      	str	r3, [r1, #0]
 800e8c0:	50cd      	str	r5, [r1, r3]
 800e8c2:	18cc      	adds	r4, r1, r3
 800e8c4:	4630      	mov	r0, r6
 800e8c6:	f000 f85c 	bl	800e982 <__malloc_unlock>
 800e8ca:	f104 000b 	add.w	r0, r4, #11
 800e8ce:	1d23      	adds	r3, r4, #4
 800e8d0:	f020 0007 	bic.w	r0, r0, #7
 800e8d4:	1ac3      	subs	r3, r0, r3
 800e8d6:	d0d3      	beq.n	800e880 <_malloc_r+0x20>
 800e8d8:	425a      	negs	r2, r3
 800e8da:	50e2      	str	r2, [r4, r3]
 800e8dc:	e7d0      	b.n	800e880 <_malloc_r+0x20>
 800e8de:	428c      	cmp	r4, r1
 800e8e0:	684b      	ldr	r3, [r1, #4]
 800e8e2:	bf16      	itet	ne
 800e8e4:	6063      	strne	r3, [r4, #4]
 800e8e6:	6013      	streq	r3, [r2, #0]
 800e8e8:	460c      	movne	r4, r1
 800e8ea:	e7eb      	b.n	800e8c4 <_malloc_r+0x64>
 800e8ec:	460c      	mov	r4, r1
 800e8ee:	6849      	ldr	r1, [r1, #4]
 800e8f0:	e7cc      	b.n	800e88c <_malloc_r+0x2c>
 800e8f2:	1cc4      	adds	r4, r0, #3
 800e8f4:	f024 0403 	bic.w	r4, r4, #3
 800e8f8:	42a0      	cmp	r0, r4
 800e8fa:	d005      	beq.n	800e908 <_malloc_r+0xa8>
 800e8fc:	1a21      	subs	r1, r4, r0
 800e8fe:	4630      	mov	r0, r6
 800e900:	f000 f82e 	bl	800e960 <_sbrk_r>
 800e904:	3001      	adds	r0, #1
 800e906:	d0cf      	beq.n	800e8a8 <_malloc_r+0x48>
 800e908:	6025      	str	r5, [r4, #0]
 800e90a:	e7db      	b.n	800e8c4 <_malloc_r+0x64>
 800e90c:	20008654 	.word	0x20008654
 800e910:	20008658 	.word	0x20008658

0800e914 <_realloc_r>:
 800e914:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e916:	4607      	mov	r7, r0
 800e918:	4614      	mov	r4, r2
 800e91a:	460e      	mov	r6, r1
 800e91c:	b921      	cbnz	r1, 800e928 <_realloc_r+0x14>
 800e91e:	4611      	mov	r1, r2
 800e920:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e924:	f7ff bf9c 	b.w	800e860 <_malloc_r>
 800e928:	b922      	cbnz	r2, 800e934 <_realloc_r+0x20>
 800e92a:	f7ff ff4b 	bl	800e7c4 <_free_r>
 800e92e:	4625      	mov	r5, r4
 800e930:	4628      	mov	r0, r5
 800e932:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e934:	f000 f826 	bl	800e984 <_malloc_usable_size_r>
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d20f      	bcs.n	800e95c <_realloc_r+0x48>
 800e93c:	4621      	mov	r1, r4
 800e93e:	4638      	mov	r0, r7
 800e940:	f7ff ff8e 	bl	800e860 <_malloc_r>
 800e944:	4605      	mov	r5, r0
 800e946:	2800      	cmp	r0, #0
 800e948:	d0f2      	beq.n	800e930 <_realloc_r+0x1c>
 800e94a:	4631      	mov	r1, r6
 800e94c:	4622      	mov	r2, r4
 800e94e:	f7ff fc11 	bl	800e174 <memcpy>
 800e952:	4631      	mov	r1, r6
 800e954:	4638      	mov	r0, r7
 800e956:	f7ff ff35 	bl	800e7c4 <_free_r>
 800e95a:	e7e9      	b.n	800e930 <_realloc_r+0x1c>
 800e95c:	4635      	mov	r5, r6
 800e95e:	e7e7      	b.n	800e930 <_realloc_r+0x1c>

0800e960 <_sbrk_r>:
 800e960:	b538      	push	{r3, r4, r5, lr}
 800e962:	4c06      	ldr	r4, [pc, #24]	; (800e97c <_sbrk_r+0x1c>)
 800e964:	2300      	movs	r3, #0
 800e966:	4605      	mov	r5, r0
 800e968:	4608      	mov	r0, r1
 800e96a:	6023      	str	r3, [r4, #0]
 800e96c:	f7f6 f8e0 	bl	8004b30 <_sbrk>
 800e970:	1c43      	adds	r3, r0, #1
 800e972:	d102      	bne.n	800e97a <_sbrk_r+0x1a>
 800e974:	6823      	ldr	r3, [r4, #0]
 800e976:	b103      	cbz	r3, 800e97a <_sbrk_r+0x1a>
 800e978:	602b      	str	r3, [r5, #0]
 800e97a:	bd38      	pop	{r3, r4, r5, pc}
 800e97c:	20008d50 	.word	0x20008d50

0800e980 <__malloc_lock>:
 800e980:	4770      	bx	lr

0800e982 <__malloc_unlock>:
 800e982:	4770      	bx	lr

0800e984 <_malloc_usable_size_r>:
 800e984:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e988:	1f18      	subs	r0, r3, #4
 800e98a:	2b00      	cmp	r3, #0
 800e98c:	bfbc      	itt	lt
 800e98e:	580b      	ldrlt	r3, [r1, r0]
 800e990:	18c0      	addlt	r0, r0, r3
 800e992:	4770      	bx	lr

0800e994 <_init>:
 800e994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e996:	bf00      	nop
 800e998:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e99a:	bc08      	pop	{r3}
 800e99c:	469e      	mov	lr, r3
 800e99e:	4770      	bx	lr

0800e9a0 <_fini>:
 800e9a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e9a2:	bf00      	nop
 800e9a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e9a6:	bc08      	pop	{r3}
 800e9a8:	469e      	mov	lr, r3
 800e9aa:	4770      	bx	lr

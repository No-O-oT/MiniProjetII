
prog_Mini-projMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010394  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000022b0  08010568  08010568  00020568  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012818  08012818  000300c8  2**0
                  CONTENTS
  4 .ARM          00000008  08012818  08012818  00022818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012820  08012820  000300c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012820  08012820  00022820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012824  08012824  00022824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c8  20000000  08012828  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008de4  200000c8  080128f0  000300c8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008eac  080128f0  00038eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f03a  00000000  00000000  000300f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005c8b  00000000  00000000  0005f132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002600  00000000  00000000  00064dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002368  00000000  00000000  000673c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002e4b4  00000000  00000000  00069728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a99d  00000000  00000000  00097bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0011548e  00000000  00000000  000c2579  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001d7a07  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a890  00000000  00000000  001d7a5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c8 	.word	0x200000c8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801054c 	.word	0x0801054c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000cc 	.word	0x200000cc
 800020c:	0801054c 	.word	0x0801054c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	; 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_d2iz>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b64:	d215      	bcs.n	8000b92 <__aeabi_d2iz+0x36>
 8000b66:	d511      	bpl.n	8000b8c <__aeabi_d2iz+0x30>
 8000b68:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b6c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b70:	d912      	bls.n	8000b98 <__aeabi_d2iz+0x3c>
 8000b72:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b7a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b82:	fa23 f002 	lsr.w	r0, r3, r2
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	4770      	bx	lr
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b96:	d105      	bne.n	8000ba4 <__aeabi_d2iz+0x48>
 8000b98:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	bf08      	it	eq
 8000b9e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ba2:	4770      	bx	lr
 8000ba4:	f04f 0000 	mov.w	r0, #0
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop

08000bac <__aeabi_d2f>:
 8000bac:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bb0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb4:	bf24      	itt	cs
 8000bb6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bba:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bbe:	d90d      	bls.n	8000bdc <__aeabi_d2f+0x30>
 8000bc0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bcc:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bd0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd4:	bf08      	it	eq
 8000bd6:	f020 0001 	biceq.w	r0, r0, #1
 8000bda:	4770      	bx	lr
 8000bdc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000be0:	d121      	bne.n	8000c26 <__aeabi_d2f+0x7a>
 8000be2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be6:	bfbc      	itt	lt
 8000be8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bec:	4770      	bxlt	lr
 8000bee:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bf2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf6:	f1c2 0218 	rsb	r2, r2, #24
 8000bfa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfe:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c02:	fa20 f002 	lsr.w	r0, r0, r2
 8000c06:	bf18      	it	ne
 8000c08:	f040 0001 	orrne.w	r0, r0, #1
 8000c0c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c10:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c14:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c18:	ea40 000c 	orr.w	r0, r0, ip
 8000c1c:	fa23 f302 	lsr.w	r3, r3, r2
 8000c20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c24:	e7cc      	b.n	8000bc0 <__aeabi_d2f+0x14>
 8000c26:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c2a:	d107      	bne.n	8000c3c <__aeabi_d2f+0x90>
 8000c2c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c30:	bf1e      	ittt	ne
 8000c32:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c36:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c3a:	4770      	bxne	lr
 8000c3c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c40:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c44:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop

08000c4c <__aeabi_uldivmod>:
 8000c4c:	b953      	cbnz	r3, 8000c64 <__aeabi_uldivmod+0x18>
 8000c4e:	b94a      	cbnz	r2, 8000c64 <__aeabi_uldivmod+0x18>
 8000c50:	2900      	cmp	r1, #0
 8000c52:	bf08      	it	eq
 8000c54:	2800      	cmpeq	r0, #0
 8000c56:	bf1c      	itt	ne
 8000c58:	f04f 31ff 	movne.w	r1, #4294967295
 8000c5c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c60:	f000 b96e 	b.w	8000f40 <__aeabi_idiv0>
 8000c64:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c68:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c6c:	f000 f806 	bl	8000c7c <__udivmoddi4>
 8000c70:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c74:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c78:	b004      	add	sp, #16
 8000c7a:	4770      	bx	lr

08000c7c <__udivmoddi4>:
 8000c7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c80:	9d08      	ldr	r5, [sp, #32]
 8000c82:	4604      	mov	r4, r0
 8000c84:	468c      	mov	ip, r1
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	f040 8083 	bne.w	8000d92 <__udivmoddi4+0x116>
 8000c8c:	428a      	cmp	r2, r1
 8000c8e:	4617      	mov	r7, r2
 8000c90:	d947      	bls.n	8000d22 <__udivmoddi4+0xa6>
 8000c92:	fab2 f282 	clz	r2, r2
 8000c96:	b142      	cbz	r2, 8000caa <__udivmoddi4+0x2e>
 8000c98:	f1c2 0020 	rsb	r0, r2, #32
 8000c9c:	fa24 f000 	lsr.w	r0, r4, r0
 8000ca0:	4091      	lsls	r1, r2
 8000ca2:	4097      	lsls	r7, r2
 8000ca4:	ea40 0c01 	orr.w	ip, r0, r1
 8000ca8:	4094      	lsls	r4, r2
 8000caa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000cae:	0c23      	lsrs	r3, r4, #16
 8000cb0:	fbbc f6f8 	udiv	r6, ip, r8
 8000cb4:	fa1f fe87 	uxth.w	lr, r7
 8000cb8:	fb08 c116 	mls	r1, r8, r6, ip
 8000cbc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cc0:	fb06 f10e 	mul.w	r1, r6, lr
 8000cc4:	4299      	cmp	r1, r3
 8000cc6:	d909      	bls.n	8000cdc <__udivmoddi4+0x60>
 8000cc8:	18fb      	adds	r3, r7, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 8119 	bcs.w	8000f04 <__udivmoddi4+0x288>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 8116 	bls.w	8000f04 <__udivmoddi4+0x288>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	443b      	add	r3, r7
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000cf0:	45a6      	cmp	lr, r4
 8000cf2:	d909      	bls.n	8000d08 <__udivmoddi4+0x8c>
 8000cf4:	193c      	adds	r4, r7, r4
 8000cf6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfa:	f080 8105 	bcs.w	8000f08 <__udivmoddi4+0x28c>
 8000cfe:	45a6      	cmp	lr, r4
 8000d00:	f240 8102 	bls.w	8000f08 <__udivmoddi4+0x28c>
 8000d04:	3802      	subs	r0, #2
 8000d06:	443c      	add	r4, r7
 8000d08:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0c:	eba4 040e 	sub.w	r4, r4, lr
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa0>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	b902      	cbnz	r2, 8000d26 <__udivmoddi4+0xaa>
 8000d24:	deff      	udf	#255	; 0xff
 8000d26:	fab2 f282 	clz	r2, r2
 8000d2a:	2a00      	cmp	r2, #0
 8000d2c:	d150      	bne.n	8000dd0 <__udivmoddi4+0x154>
 8000d2e:	1bcb      	subs	r3, r1, r7
 8000d30:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d34:	fa1f f887 	uxth.w	r8, r7
 8000d38:	2601      	movs	r6, #1
 8000d3a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d3e:	0c21      	lsrs	r1, r4, #16
 8000d40:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d48:	fb08 f30c 	mul.w	r3, r8, ip
 8000d4c:	428b      	cmp	r3, r1
 8000d4e:	d907      	bls.n	8000d60 <__udivmoddi4+0xe4>
 8000d50:	1879      	adds	r1, r7, r1
 8000d52:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000d56:	d202      	bcs.n	8000d5e <__udivmoddi4+0xe2>
 8000d58:	428b      	cmp	r3, r1
 8000d5a:	f200 80e9 	bhi.w	8000f30 <__udivmoddi4+0x2b4>
 8000d5e:	4684      	mov	ip, r0
 8000d60:	1ac9      	subs	r1, r1, r3
 8000d62:	b2a3      	uxth	r3, r4
 8000d64:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d68:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d6c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000d70:	fb08 f800 	mul.w	r8, r8, r0
 8000d74:	45a0      	cmp	r8, r4
 8000d76:	d907      	bls.n	8000d88 <__udivmoddi4+0x10c>
 8000d78:	193c      	adds	r4, r7, r4
 8000d7a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d7e:	d202      	bcs.n	8000d86 <__udivmoddi4+0x10a>
 8000d80:	45a0      	cmp	r8, r4
 8000d82:	f200 80d9 	bhi.w	8000f38 <__udivmoddi4+0x2bc>
 8000d86:	4618      	mov	r0, r3
 8000d88:	eba4 0408 	sub.w	r4, r4, r8
 8000d8c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d90:	e7bf      	b.n	8000d12 <__udivmoddi4+0x96>
 8000d92:	428b      	cmp	r3, r1
 8000d94:	d909      	bls.n	8000daa <__udivmoddi4+0x12e>
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	f000 80b1 	beq.w	8000efe <__udivmoddi4+0x282>
 8000d9c:	2600      	movs	r6, #0
 8000d9e:	e9c5 0100 	strd	r0, r1, [r5]
 8000da2:	4630      	mov	r0, r6
 8000da4:	4631      	mov	r1, r6
 8000da6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000daa:	fab3 f683 	clz	r6, r3
 8000dae:	2e00      	cmp	r6, #0
 8000db0:	d14a      	bne.n	8000e48 <__udivmoddi4+0x1cc>
 8000db2:	428b      	cmp	r3, r1
 8000db4:	d302      	bcc.n	8000dbc <__udivmoddi4+0x140>
 8000db6:	4282      	cmp	r2, r0
 8000db8:	f200 80b8 	bhi.w	8000f2c <__udivmoddi4+0x2b0>
 8000dbc:	1a84      	subs	r4, r0, r2
 8000dbe:	eb61 0103 	sbc.w	r1, r1, r3
 8000dc2:	2001      	movs	r0, #1
 8000dc4:	468c      	mov	ip, r1
 8000dc6:	2d00      	cmp	r5, #0
 8000dc8:	d0a8      	beq.n	8000d1c <__udivmoddi4+0xa0>
 8000dca:	e9c5 4c00 	strd	r4, ip, [r5]
 8000dce:	e7a5      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000dd0:	f1c2 0320 	rsb	r3, r2, #32
 8000dd4:	fa20 f603 	lsr.w	r6, r0, r3
 8000dd8:	4097      	lsls	r7, r2
 8000dda:	fa01 f002 	lsl.w	r0, r1, r2
 8000dde:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000de2:	40d9      	lsrs	r1, r3
 8000de4:	4330      	orrs	r0, r6
 8000de6:	0c03      	lsrs	r3, r0, #16
 8000de8:	fbb1 f6fe 	udiv	r6, r1, lr
 8000dec:	fa1f f887 	uxth.w	r8, r7
 8000df0:	fb0e 1116 	mls	r1, lr, r6, r1
 8000df4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000df8:	fb06 f108 	mul.w	r1, r6, r8
 8000dfc:	4299      	cmp	r1, r3
 8000dfe:	fa04 f402 	lsl.w	r4, r4, r2
 8000e02:	d909      	bls.n	8000e18 <__udivmoddi4+0x19c>
 8000e04:	18fb      	adds	r3, r7, r3
 8000e06:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e0a:	f080 808d 	bcs.w	8000f28 <__udivmoddi4+0x2ac>
 8000e0e:	4299      	cmp	r1, r3
 8000e10:	f240 808a 	bls.w	8000f28 <__udivmoddi4+0x2ac>
 8000e14:	3e02      	subs	r6, #2
 8000e16:	443b      	add	r3, r7
 8000e18:	1a5b      	subs	r3, r3, r1
 8000e1a:	b281      	uxth	r1, r0
 8000e1c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e20:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e28:	fb00 f308 	mul.w	r3, r0, r8
 8000e2c:	428b      	cmp	r3, r1
 8000e2e:	d907      	bls.n	8000e40 <__udivmoddi4+0x1c4>
 8000e30:	1879      	adds	r1, r7, r1
 8000e32:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e36:	d273      	bcs.n	8000f20 <__udivmoddi4+0x2a4>
 8000e38:	428b      	cmp	r3, r1
 8000e3a:	d971      	bls.n	8000f20 <__udivmoddi4+0x2a4>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4439      	add	r1, r7
 8000e40:	1acb      	subs	r3, r1, r3
 8000e42:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e46:	e778      	b.n	8000d3a <__udivmoddi4+0xbe>
 8000e48:	f1c6 0c20 	rsb	ip, r6, #32
 8000e4c:	fa03 f406 	lsl.w	r4, r3, r6
 8000e50:	fa22 f30c 	lsr.w	r3, r2, ip
 8000e54:	431c      	orrs	r4, r3
 8000e56:	fa20 f70c 	lsr.w	r7, r0, ip
 8000e5a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e5e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000e62:	fa21 f10c 	lsr.w	r1, r1, ip
 8000e66:	431f      	orrs	r7, r3
 8000e68:	0c3b      	lsrs	r3, r7, #16
 8000e6a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e6e:	fa1f f884 	uxth.w	r8, r4
 8000e72:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e76:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e7a:	fb09 fa08 	mul.w	sl, r9, r8
 8000e7e:	458a      	cmp	sl, r1
 8000e80:	fa02 f206 	lsl.w	r2, r2, r6
 8000e84:	fa00 f306 	lsl.w	r3, r0, r6
 8000e88:	d908      	bls.n	8000e9c <__udivmoddi4+0x220>
 8000e8a:	1861      	adds	r1, r4, r1
 8000e8c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000e90:	d248      	bcs.n	8000f24 <__udivmoddi4+0x2a8>
 8000e92:	458a      	cmp	sl, r1
 8000e94:	d946      	bls.n	8000f24 <__udivmoddi4+0x2a8>
 8000e96:	f1a9 0902 	sub.w	r9, r9, #2
 8000e9a:	4421      	add	r1, r4
 8000e9c:	eba1 010a 	sub.w	r1, r1, sl
 8000ea0:	b2bf      	uxth	r7, r7
 8000ea2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ea6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000eaa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000eae:	fb00 f808 	mul.w	r8, r0, r8
 8000eb2:	45b8      	cmp	r8, r7
 8000eb4:	d907      	bls.n	8000ec6 <__udivmoddi4+0x24a>
 8000eb6:	19e7      	adds	r7, r4, r7
 8000eb8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000ebc:	d22e      	bcs.n	8000f1c <__udivmoddi4+0x2a0>
 8000ebe:	45b8      	cmp	r8, r7
 8000ec0:	d92c      	bls.n	8000f1c <__udivmoddi4+0x2a0>
 8000ec2:	3802      	subs	r0, #2
 8000ec4:	4427      	add	r7, r4
 8000ec6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000eca:	eba7 0708 	sub.w	r7, r7, r8
 8000ece:	fba0 8902 	umull	r8, r9, r0, r2
 8000ed2:	454f      	cmp	r7, r9
 8000ed4:	46c6      	mov	lr, r8
 8000ed6:	4649      	mov	r1, r9
 8000ed8:	d31a      	bcc.n	8000f10 <__udivmoddi4+0x294>
 8000eda:	d017      	beq.n	8000f0c <__udivmoddi4+0x290>
 8000edc:	b15d      	cbz	r5, 8000ef6 <__udivmoddi4+0x27a>
 8000ede:	ebb3 020e 	subs.w	r2, r3, lr
 8000ee2:	eb67 0701 	sbc.w	r7, r7, r1
 8000ee6:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000eea:	40f2      	lsrs	r2, r6
 8000eec:	ea4c 0202 	orr.w	r2, ip, r2
 8000ef0:	40f7      	lsrs	r7, r6
 8000ef2:	e9c5 2700 	strd	r2, r7, [r5]
 8000ef6:	2600      	movs	r6, #0
 8000ef8:	4631      	mov	r1, r6
 8000efa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000efe:	462e      	mov	r6, r5
 8000f00:	4628      	mov	r0, r5
 8000f02:	e70b      	b.n	8000d1c <__udivmoddi4+0xa0>
 8000f04:	4606      	mov	r6, r0
 8000f06:	e6e9      	b.n	8000cdc <__udivmoddi4+0x60>
 8000f08:	4618      	mov	r0, r3
 8000f0a:	e6fd      	b.n	8000d08 <__udivmoddi4+0x8c>
 8000f0c:	4543      	cmp	r3, r8
 8000f0e:	d2e5      	bcs.n	8000edc <__udivmoddi4+0x260>
 8000f10:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f14:	eb69 0104 	sbc.w	r1, r9, r4
 8000f18:	3801      	subs	r0, #1
 8000f1a:	e7df      	b.n	8000edc <__udivmoddi4+0x260>
 8000f1c:	4608      	mov	r0, r1
 8000f1e:	e7d2      	b.n	8000ec6 <__udivmoddi4+0x24a>
 8000f20:	4660      	mov	r0, ip
 8000f22:	e78d      	b.n	8000e40 <__udivmoddi4+0x1c4>
 8000f24:	4681      	mov	r9, r0
 8000f26:	e7b9      	b.n	8000e9c <__udivmoddi4+0x220>
 8000f28:	4666      	mov	r6, ip
 8000f2a:	e775      	b.n	8000e18 <__udivmoddi4+0x19c>
 8000f2c:	4630      	mov	r0, r6
 8000f2e:	e74a      	b.n	8000dc6 <__udivmoddi4+0x14a>
 8000f30:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f34:	4439      	add	r1, r7
 8000f36:	e713      	b.n	8000d60 <__udivmoddi4+0xe4>
 8000f38:	3802      	subs	r0, #2
 8000f3a:	443c      	add	r4, r7
 8000f3c:	e724      	b.n	8000d88 <__udivmoddi4+0x10c>
 8000f3e:	bf00      	nop

08000f40 <__aeabi_idiv0>:
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop

08000f44 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 8000f48:	bf00      	nop
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f50:	4770      	bx	lr

08000f52 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000f52:	b480      	push	{r7}
 8000f54:	b083      	sub	sp, #12
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
 8000f5a:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000f5c:	bf00      	nop
 8000f5e:	370c      	adds	r7, #12
 8000f60:	46bd      	mov	sp, r7
 8000f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f66:	4770      	bx	lr

08000f68 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000f6c:	bf00      	nop
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f74:	4770      	bx	lr
	...

08000f78 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b085      	sub	sp, #20
 8000f7c:	af00      	add	r7, sp, #0
 8000f7e:	60f8      	str	r0, [r7, #12]
 8000f80:	60b9      	str	r1, [r7, #8]
 8000f82:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000f84:	68fb      	ldr	r3, [r7, #12]
 8000f86:	4a07      	ldr	r2, [pc, #28]	; (8000fa4 <vApplicationGetIdleTaskMemory+0x2c>)
 8000f88:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <vApplicationGetIdleTaskMemory+0x30>)
 8000f8e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	2280      	movs	r2, #128	; 0x80
 8000f94:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000f96:	bf00      	nop
 8000f98:	3714      	adds	r7, #20
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	200000e4 	.word	0x200000e4
 8000fa8:	2000013c 	.word	0x2000013c

08000fac <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000fb6:	20c8      	movs	r0, #200	; 0xc8
 8000fb8:	f002 face 	bl	8003558 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000fbc:	f000 f9b4 	bl	8001328 <ft5336_I2C_InitializeIfRequired>
}
 8000fc0:	bf00      	nop
 8000fc2:	3708      	adds	r7, #8
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}

08000fc8 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000fd2:	bf00      	nop
 8000fd4:	370c      	adds	r7, #12
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fdc:	4770      	bx	lr

08000fde <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000fe8:	2300      	movs	r3, #0
 8000fea:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000fec:	2300      	movs	r3, #0
 8000fee:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000ff4:	f000 f998 	bl	8001328 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	73fb      	strb	r3, [r7, #15]
 8000ffc:	e010      	b.n	8001020 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 8000ffe:	88fb      	ldrh	r3, [r7, #6]
 8001000:	b2db      	uxtb	r3, r3
 8001002:	21a8      	movs	r1, #168	; 0xa8
 8001004:	4618      	mov	r0, r3
 8001006:	f002 fa89 	bl	800351c <TS_IO_Read>
 800100a:	4603      	mov	r3, r0
 800100c:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800100e:	7b7b      	ldrb	r3, [r7, #13]
 8001010:	b2db      	uxtb	r3, r3
 8001012:	2b51      	cmp	r3, #81	; 0x51
 8001014:	d101      	bne.n	800101a <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8001016:	2301      	movs	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 800101a:	7bfb      	ldrb	r3, [r7, #15]
 800101c:	3301      	adds	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	2b02      	cmp	r3, #2
 8001024:	d802      	bhi.n	800102c <ft5336_ReadID+0x4e>
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	2b00      	cmp	r3, #0
 800102a:	d0e8      	beq.n	8000ffe <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 800102c:	7b7b      	ldrb	r3, [r7, #13]
 800102e:	b2db      	uxtb	r3, r3
 8001030:	b29b      	uxth	r3, r3
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}

0800103a <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	b082      	sub	sp, #8
 800103e:	af00      	add	r7, sp, #0
 8001040:	4603      	mov	r3, r0
 8001042:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8001044:	88fb      	ldrh	r3, [r7, #6]
 8001046:	4618      	mov	r0, r3
 8001048:	f000 f97e 	bl	8001348 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 800104c:	88fb      	ldrh	r3, [r7, #6]
 800104e:	4618      	mov	r0, r3
 8001050:	f000 f932 	bl	80012b8 <ft5336_TS_DisableIT>
}
 8001054:	bf00      	nop
 8001056:	3708      	adds	r7, #8
 8001058:	46bd      	mov	sp, r7
 800105a:	bd80      	pop	{r7, pc}

0800105c <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	4603      	mov	r3, r0
 8001064:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800106a:	88fb      	ldrh	r3, [r7, #6]
 800106c:	b2db      	uxtb	r3, r3
 800106e:	2102      	movs	r1, #2
 8001070:	4618      	mov	r0, r3
 8001072:	f002 fa53 	bl	800351c <TS_IO_Read>
 8001076:	4603      	mov	r3, r0
 8001078:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800107a:	7bfb      	ldrb	r3, [r7, #15]
 800107c:	b2db      	uxtb	r3, r3
 800107e:	f003 030f 	and.w	r3, r3, #15
 8001082:	b2db      	uxtb	r3, r3
 8001084:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 8001086:	7bfb      	ldrb	r3, [r7, #15]
 8001088:	b2db      	uxtb	r3, r3
 800108a:	2b05      	cmp	r3, #5
 800108c:	d901      	bls.n	8001092 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 800108e:	2300      	movs	r3, #0
 8001090:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8001092:	7bfb      	ldrb	r3, [r7, #15]
 8001094:	b2da      	uxtb	r2, r3
 8001096:	4b05      	ldr	r3, [pc, #20]	; (80010ac <ft5336_TS_DetectTouch+0x50>)
 8001098:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800109a:	4b04      	ldr	r3, [pc, #16]	; (80010ac <ft5336_TS_DetectTouch+0x50>)
 800109c:	2200      	movs	r2, #0
 800109e:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 80010a0:	7bfb      	ldrb	r3, [r7, #15]
 80010a2:	b2db      	uxtb	r3, r3
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3710      	adds	r7, #16
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	2000033c 	.word	0x2000033c

080010b0 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	60b9      	str	r1, [r7, #8]
 80010ba:	607a      	str	r2, [r7, #4]
 80010bc:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 80010c2:	2300      	movs	r3, #0
 80010c4:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 80010c6:	2300      	movs	r3, #0
 80010c8:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 80010d2:	4b6d      	ldr	r3, [pc, #436]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010d4:	789a      	ldrb	r2, [r3, #2]
 80010d6:	4b6c      	ldr	r3, [pc, #432]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010d8:	785b      	ldrb	r3, [r3, #1]
 80010da:	429a      	cmp	r2, r3
 80010dc:	f080 80cf 	bcs.w	800127e <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80010e0:	4b69      	ldr	r3, [pc, #420]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 80010e2:	789b      	ldrb	r3, [r3, #2]
 80010e4:	2b09      	cmp	r3, #9
 80010e6:	d871      	bhi.n	80011cc <ft5336_TS_GetXY+0x11c>
 80010e8:	a201      	add	r2, pc, #4	; (adr r2, 80010f0 <ft5336_TS_GetXY+0x40>)
 80010ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010ee:	bf00      	nop
 80010f0:	08001119 	.word	0x08001119
 80010f4:	0800112b 	.word	0x0800112b
 80010f8:	0800113d 	.word	0x0800113d
 80010fc:	0800114f 	.word	0x0800114f
 8001100:	08001161 	.word	0x08001161
 8001104:	08001173 	.word	0x08001173
 8001108:	08001185 	.word	0x08001185
 800110c:	08001197 	.word	0x08001197
 8001110:	080011a9 	.word	0x080011a9
 8001114:	080011bb 	.word	0x080011bb
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8001118:	2304      	movs	r3, #4
 800111a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 800111c:	2303      	movs	r3, #3
 800111e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 8001120:	2306      	movs	r3, #6
 8001122:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8001124:	2305      	movs	r3, #5
 8001126:	753b      	strb	r3, [r7, #20]
      break;
 8001128:	e051      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 800112a:	230a      	movs	r3, #10
 800112c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800112e:	2309      	movs	r3, #9
 8001130:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 8001132:	230c      	movs	r3, #12
 8001134:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 8001136:	230b      	movs	r3, #11
 8001138:	753b      	strb	r3, [r7, #20]
      break;
 800113a:	e048      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 800113c:	2310      	movs	r3, #16
 800113e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8001140:	230f      	movs	r3, #15
 8001142:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8001144:	2312      	movs	r3, #18
 8001146:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 8001148:	2311      	movs	r3, #17
 800114a:	753b      	strb	r3, [r7, #20]
      break;
 800114c:	e03f      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 800114e:	2316      	movs	r3, #22
 8001150:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8001152:	2315      	movs	r3, #21
 8001154:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 8001156:	2318      	movs	r3, #24
 8001158:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800115a:	2317      	movs	r3, #23
 800115c:	753b      	strb	r3, [r7, #20]
      break;
 800115e:	e036      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8001160:	231c      	movs	r3, #28
 8001162:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8001164:	231b      	movs	r3, #27
 8001166:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 8001168:	231e      	movs	r3, #30
 800116a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 800116c:	231d      	movs	r3, #29
 800116e:	753b      	strb	r3, [r7, #20]
      break;
 8001170:	e02d      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8001172:	2322      	movs	r3, #34	; 0x22
 8001174:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 8001176:	2321      	movs	r3, #33	; 0x21
 8001178:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800117a:	2324      	movs	r3, #36	; 0x24
 800117c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 800117e:	2323      	movs	r3, #35	; 0x23
 8001180:	753b      	strb	r3, [r7, #20]
      break;
 8001182:	e024      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8001184:	2328      	movs	r3, #40	; 0x28
 8001186:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 8001188:	2327      	movs	r3, #39	; 0x27
 800118a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 800118c:	232a      	movs	r3, #42	; 0x2a
 800118e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8001190:	2329      	movs	r3, #41	; 0x29
 8001192:	753b      	strb	r3, [r7, #20]
      break;
 8001194:	e01b      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8001196:	232e      	movs	r3, #46	; 0x2e
 8001198:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800119a:	232d      	movs	r3, #45	; 0x2d
 800119c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800119e:	2330      	movs	r3, #48	; 0x30
 80011a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 80011a2:	232f      	movs	r3, #47	; 0x2f
 80011a4:	753b      	strb	r3, [r7, #20]
      break;
 80011a6:	e012      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 80011a8:	2334      	movs	r3, #52	; 0x34
 80011aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 80011ac:	2333      	movs	r3, #51	; 0x33
 80011ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 80011b0:	2336      	movs	r3, #54	; 0x36
 80011b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 80011b4:	2335      	movs	r3, #53	; 0x35
 80011b6:	753b      	strb	r3, [r7, #20]
      break;
 80011b8:	e009      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 80011ba:	233a      	movs	r3, #58	; 0x3a
 80011bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 80011be:	2339      	movs	r3, #57	; 0x39
 80011c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 80011c2:	233c      	movs	r3, #60	; 0x3c
 80011c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 80011c6:	233b      	movs	r3, #59	; 0x3b
 80011c8:	753b      	strb	r3, [r7, #20]
      break;
 80011ca:	e000      	b.n	80011ce <ft5336_TS_GetXY+0x11e>

    default :
      break;
 80011cc:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 80011ce:	89fb      	ldrh	r3, [r7, #14]
 80011d0:	b2db      	uxtb	r3, r3
 80011d2:	7dfa      	ldrb	r2, [r7, #23]
 80011d4:	4611      	mov	r1, r2
 80011d6:	4618      	mov	r0, r3
 80011d8:	f002 f9a0 	bl	800351c <TS_IO_Read>
 80011dc:	4603      	mov	r3, r0
 80011de:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80011e0:	7cfb      	ldrb	r3, [r7, #19]
 80011e2:	b2db      	uxtb	r3, r3
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	4b29      	ldr	r3, [pc, #164]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 80011e8:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80011ea:	89fb      	ldrh	r3, [r7, #14]
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	7dba      	ldrb	r2, [r7, #22]
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f002 f992 	bl	800351c <TS_IO_Read>
 80011f8:	4603      	mov	r3, r0
 80011fa:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80011fc:	7cfb      	ldrb	r3, [r7, #19]
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001206:	b21a      	sxth	r2, r3
 8001208:	4b20      	ldr	r3, [pc, #128]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800120a:	881b      	ldrh	r3, [r3, #0]
 800120c:	b21b      	sxth	r3, r3
 800120e:	4313      	orrs	r3, r2
 8001210:	b21b      	sxth	r3, r3
 8001212:	b29a      	uxth	r2, r3
 8001214:	4b1d      	ldr	r3, [pc, #116]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 8001216:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8001218:	4b1c      	ldr	r3, [pc, #112]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800121a:	881a      	ldrh	r2, [r3, #0]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 8001220:	89fb      	ldrh	r3, [r7, #14]
 8001222:	b2db      	uxtb	r3, r3
 8001224:	7d7a      	ldrb	r2, [r7, #21]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f002 f977 	bl	800351c <TS_IO_Read>
 800122e:	4603      	mov	r3, r0
 8001230:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 8001232:	7cfb      	ldrb	r3, [r7, #19]
 8001234:	b2db      	uxtb	r3, r3
 8001236:	b29a      	uxth	r2, r3
 8001238:	4b14      	ldr	r3, [pc, #80]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800123a:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 800123c:	89fb      	ldrh	r3, [r7, #14]
 800123e:	b2db      	uxtb	r3, r3
 8001240:	7d3a      	ldrb	r2, [r7, #20]
 8001242:	4611      	mov	r1, r2
 8001244:	4618      	mov	r0, r3
 8001246:	f002 f969 	bl	800351c <TS_IO_Read>
 800124a:	4603      	mov	r3, r0
 800124c:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 800124e:	7cfb      	ldrb	r3, [r7, #19]
 8001250:	b2db      	uxtb	r3, r3
 8001252:	021b      	lsls	r3, r3, #8
 8001254:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8001258:	b21a      	sxth	r2, r3
 800125a:	4b0c      	ldr	r3, [pc, #48]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800125c:	881b      	ldrh	r3, [r3, #0]
 800125e:	b21b      	sxth	r3, r3
 8001260:	4313      	orrs	r3, r2
 8001262:	b21b      	sxth	r3, r3
 8001264:	b29a      	uxth	r2, r3
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 8001268:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800126a:	4b08      	ldr	r3, [pc, #32]	; (800128c <ft5336_TS_GetXY+0x1dc>)
 800126c:	881a      	ldrh	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8001272:	4b05      	ldr	r3, [pc, #20]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 8001274:	789b      	ldrb	r3, [r3, #2]
 8001276:	3301      	adds	r3, #1
 8001278:	b2da      	uxtb	r2, r3
 800127a:	4b03      	ldr	r3, [pc, #12]	; (8001288 <ft5336_TS_GetXY+0x1d8>)
 800127c:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 800127e:	bf00      	nop
 8001280:	3718      	adds	r7, #24
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	2000033c 	.word	0x2000033c
 800128c:	20000340 	.word	0x20000340

08001290 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b084      	sub	sp, #16
 8001294:	af00      	add	r7, sp, #0
 8001296:	4603      	mov	r3, r0
 8001298:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800129a:	2300      	movs	r3, #0
 800129c:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800129e:	2301      	movs	r3, #1
 80012a0:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80012a2:	88fb      	ldrh	r3, [r7, #6]
 80012a4:	b2db      	uxtb	r3, r3
 80012a6:	7bfa      	ldrb	r2, [r7, #15]
 80012a8:	21a4      	movs	r1, #164	; 0xa4
 80012aa:	4618      	mov	r0, r3
 80012ac:	f002 f91c 	bl	80034e8 <TS_IO_Write>
}
 80012b0:	bf00      	nop
 80012b2:	3710      	adds	r7, #16
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}

080012b8 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	4603      	mov	r3, r0
 80012c0:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 80012c2:	2300      	movs	r3, #0
 80012c4:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 80012c6:	2300      	movs	r3, #0
 80012c8:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	7bfa      	ldrb	r2, [r7, #15]
 80012d0:	21a4      	movs	r1, #164	; 0xa4
 80012d2:	4618      	mov	r0, r3
 80012d4:	f002 f908 	bl	80034e8 <TS_IO_Write>
}
 80012d8:	bf00      	nop
 80012da:	3710      	adds	r7, #16
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}

080012e0 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80012e0:	b480      	push	{r7}
 80012e2:	b083      	sub	sp, #12
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	4603      	mov	r3, r0
 80012e8:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	370c      	adds	r7, #12
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr

080012f8 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80012f8:	b480      	push	{r7}
 80012fa:	b083      	sub	sp, #12
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 8001302:	bf00      	nop
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr
	...

08001310 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 8001310:	b480      	push	{r7}
 8001312:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8001316:	781b      	ldrb	r3, [r3, #0]
}
 8001318:	4618      	mov	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	2000033c 	.word	0x2000033c

08001328 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 800132c:	f7ff fff0 	bl	8001310 <ft5336_Get_I2C_InitializedStatus>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d104      	bne.n	8001340 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 8001336:	f002 f8cd 	bl	80034d4 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 800133a:	4b02      	ldr	r3, [pc, #8]	; (8001344 <ft5336_I2C_InitializeIfRequired+0x1c>)
 800133c:	2201      	movs	r2, #1
 800133e:	701a      	strb	r2, [r3, #0]
  }
}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	2000033c 	.word	0x2000033c

08001348 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 8001348:	b480      	push	{r7}
 800134a:	b085      	sub	sp, #20
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8001352:	2300      	movs	r3, #0
 8001354:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 8001356:	68fb      	ldr	r3, [r7, #12]
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001364:	b5b0      	push	{r4, r5, r7, lr}
 8001366:	b0b4      	sub	sp, #208	; 0xd0
 8001368:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800136a:	f004 fb10 	bl	800598e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800136e:	f000 f945 	bl	80015fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001372:	f000 ffb7 	bl	80022e4 <MX_GPIO_Init>
  MX_ADC3_Init();
 8001376:	f000 fa43 	bl	8001800 <MX_ADC3_Init>
  MX_I2C1_Init();
 800137a:	f000 faef 	bl	800195c <MX_I2C1_Init>
  MX_I2C3_Init();
 800137e:	f000 fb2d 	bl	80019dc <MX_I2C3_Init>
  MX_LTDC_Init();
 8001382:	f000 fb6b 	bl	8001a5c <MX_LTDC_Init>
  MX_RTC_Init();
 8001386:	f000 fbeb 	bl	8001b60 <MX_RTC_Init>
  MX_SPI2_Init();
 800138a:	f000 fc8f 	bl	8001cac <MX_SPI2_Init>
  MX_TIM1_Init();
 800138e:	f000 fccb 	bl	8001d28 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001392:	f000 fd1d 	bl	8001dd0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001396:	f000 fd69 	bl	8001e6c <MX_TIM3_Init>
  MX_TIM5_Init();
 800139a:	f000 fdcd 	bl	8001f38 <MX_TIM5_Init>
  MX_TIM8_Init();
 800139e:	f000 fe19 	bl	8001fd4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 80013a2:	f000 fef1 	bl	8002188 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 80013a6:	f000 ff1f 	bl	80021e8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 80013aa:	f000 f9d7 	bl	800175c <MX_ADC1_Init>
  MX_DAC_Init();
 80013ae:	f000 fa79 	bl	80018a4 <MX_DAC_Init>
  MX_UART7_Init();
 80013b2:	f000 feb9 	bl	8002128 <MX_UART7_Init>
  MX_FMC_Init();
 80013b6:	f000 ff47 	bl	8002248 <MX_FMC_Init>
  MX_DMA2D_Init();
 80013ba:	f000 fa9d 	bl	80018f8 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 80013be:	f002 f8d7 	bl	8003570 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 80013c2:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 80013c6:	2000      	movs	r0, #0
 80013c8:	f002 f96a 	bl	80036a0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 80013cc:	f002 f940 	bl	8003650 <BSP_LCD_GetXSize>
 80013d0:	4604      	mov	r4, r0
 80013d2:	f002 f951 	bl	8003678 <BSP_LCD_GetYSize>
 80013d6:	4603      	mov	r3, r0
 80013d8:	fb03 f304 	mul.w	r3, r3, r4
 80013dc:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4619      	mov	r1, r3
 80013e4:	2001      	movs	r0, #1
 80013e6:	f002 f95b 	bl	80036a0 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80013ea:	f002 ffd1 	bl	8004390 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80013ee:	2001      	movs	r0, #1
 80013f0:	f002 f9b6 	bl	8003760 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80013f4:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80013f8:	f002 fa24 	bl	8003844 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80013fc:	486b      	ldr	r0, [pc, #428]	; (80015ac <main+0x248>)
 80013fe:	f002 f9f1 	bl	80037e4 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8001402:	f04f 30ff 	mov.w	r0, #4294967295
 8001406:	f002 f9bb 	bl	8003780 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800140a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800140e:	f002 f9cf 	bl	80037b0 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8001412:	f002 f91d 	bl	8003650 <BSP_LCD_GetXSize>
 8001416:	4603      	mov	r3, r0
 8001418:	b29c      	uxth	r4, r3
 800141a:	f002 f92d 	bl	8003678 <BSP_LCD_GetYSize>
 800141e:	4603      	mov	r3, r0
 8001420:	b29b      	uxth	r3, r3
 8001422:	4619      	mov	r1, r3
 8001424:	4620      	mov	r0, r4
 8001426:	f003 fc41 	bl	8004cac <BSP_TS_Init>
	uint8_t start[9]={'$', '$', '$', 'C', '\n', '-', '-', '-', '\n'};
 800142a:	4a61      	ldr	r2, [pc, #388]	; (80015b0 <main+0x24c>)
 800142c:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001430:	ca07      	ldmia	r2, {r0, r1, r2}
 8001432:	c303      	stmia	r3!, {r0, r1}
 8001434:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<9; i++){
 8001436:	2300      	movs	r3, #0
 8001438:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800143c:	e011      	b.n	8001462 <main+0xfe>
		HAL_UART_Transmit_IT(&huart7,start+i,1);
 800143e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001442:	f107 02c0 	add.w	r2, r7, #192	; 0xc0
 8001446:	4413      	add	r3, r2
 8001448:	2201      	movs	r2, #1
 800144a:	4619      	mov	r1, r3
 800144c:	4859      	ldr	r0, [pc, #356]	; (80015b4 <main+0x250>)
 800144e:	f00a f921 	bl	800b694 <HAL_UART_Transmit_IT>
		HAL_Delay(10);
 8001452:	200a      	movs	r0, #10
 8001454:	f004 fac8 	bl	80059e8 <HAL_Delay>
	for(int i=0; i<9; i++){
 8001458:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800145c:	3301      	adds	r3, #1
 800145e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001462:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001466:	2b08      	cmp	r3, #8
 8001468:	dde9      	ble.n	800143e <main+0xda>
	}
	BSP_LCD_DisplayStringAtLine(9, (uint8_t*) "Appuyez sur BP2 pour commencer");
 800146a:	4953      	ldr	r1, [pc, #332]	; (80015b8 <main+0x254>)
 800146c:	2009      	movs	r0, #9
 800146e:	f002 fb1d 	bl	8003aac <BSP_LCD_DisplayStringAtLine>
	while(HAL_GPIO_ReadPin(BP2_GPIO_Port, BP2_Pin));
 8001472:	bf00      	nop
 8001474:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001478:	4850      	ldr	r0, [pc, #320]	; (80015bc <main+0x258>)
 800147a:	f005 ff87 	bl	800738c <HAL_GPIO_ReadPin>
 800147e:	4603      	mov	r3, r0
 8001480:	2b00      	cmp	r3, #0
 8001482:	d1f7      	bne.n	8001474 <main+0x110>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8001484:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8001488:	f002 f9dc 	bl	8003844 <BSP_LCD_Clear>

  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 800148c:	2300      	movs	r3, #0
 800148e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8001492:	2300      	movs	r3, #0
 8001494:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8001498:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800149c:	4618      	mov	r0, r3
 800149e:	f00b f8fc 	bl	800c69a <osMutexCreate>
 80014a2:	4603      	mov	r3, r0
 80014a4:	4a46      	ldr	r2, [pc, #280]	; (80015c0 <main+0x25c>)
 80014a6:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 80014a8:	4b46      	ldr	r3, [pc, #280]	; (80015c4 <main+0x260>)
 80014aa:	f107 04a8 	add.w	r4, r7, #168	; 0xa8
 80014ae:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80014b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 80014b4:	f107 03a8 	add.w	r3, r7, #168	; 0xa8
 80014b8:	2100      	movs	r1, #0
 80014ba:	4618      	mov	r0, r3
 80014bc:	f00b f905 	bl	800c6ca <osMessageCreate>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4a41      	ldr	r2, [pc, #260]	; (80015c8 <main+0x264>)
 80014c4:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 80014c6:	4b41      	ldr	r3, [pc, #260]	; (80015cc <main+0x268>)
 80014c8:	f107 048c 	add.w	r4, r7, #140	; 0x8c
 80014cc:	461d      	mov	r5, r3
 80014ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014d2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014d6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80014da:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80014de:	2100      	movs	r1, #0
 80014e0:	4618      	mov	r0, r3
 80014e2:	f00b f87a 	bl	800c5da <osThreadCreate>
 80014e6:	4603      	mov	r3, r0
 80014e8:	4a39      	ldr	r2, [pc, #228]	; (80015d0 <main+0x26c>)
 80014ea:	6013      	str	r3, [r2, #0]

  /* definition and creation of horloge */
  osThreadDef(horloge, Starthorloge, osPriorityBelowNormal, 0, 1024);
 80014ec:	4b39      	ldr	r3, [pc, #228]	; (80015d4 <main+0x270>)
 80014ee:	f107 0470 	add.w	r4, r7, #112	; 0x70
 80014f2:	461d      	mov	r5, r3
 80014f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80014f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80014f8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80014fc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  horlogeHandle = osThreadCreate(osThread(horloge), NULL);
 8001500:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001504:	2100      	movs	r1, #0
 8001506:	4618      	mov	r0, r3
 8001508:	f00b f867 	bl	800c5da <osThreadCreate>
 800150c:	4603      	mov	r3, r0
 800150e:	4a32      	ldr	r2, [pc, #200]	; (80015d8 <main+0x274>)
 8001510:	6013      	str	r3, [r2, #0]

  /* definition and creation of LRacket */
  osThreadDef(LRacket, StartLRacket, osPriorityAboveNormal, 0, 1024);
 8001512:	4b32      	ldr	r3, [pc, #200]	; (80015dc <main+0x278>)
 8001514:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8001518:	461d      	mov	r5, r3
 800151a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800151c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800151e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001522:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LRacketHandle = osThreadCreate(osThread(LRacket), NULL);
 8001526:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800152a:	2100      	movs	r1, #0
 800152c:	4618      	mov	r0, r3
 800152e:	f00b f854 	bl	800c5da <osThreadCreate>
 8001532:	4603      	mov	r3, r0
 8001534:	4a2a      	ldr	r2, [pc, #168]	; (80015e0 <main+0x27c>)
 8001536:	6013      	str	r3, [r2, #0]

  /* definition and creation of Ball */
  osThreadDef(Ball, StartBall, osPriorityHigh, 0, 1024);
 8001538:	4b2a      	ldr	r3, [pc, #168]	; (80015e4 <main+0x280>)
 800153a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 800153e:	461d      	mov	r5, r3
 8001540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001544:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001548:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallHandle = osThreadCreate(osThread(Ball), NULL);
 800154c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001550:	2100      	movs	r1, #0
 8001552:	4618      	mov	r0, r3
 8001554:	f00b f841 	bl	800c5da <osThreadCreate>
 8001558:	4603      	mov	r3, r0
 800155a:	4a23      	ldr	r2, [pc, #140]	; (80015e8 <main+0x284>)
 800155c:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 800155e:	4b23      	ldr	r3, [pc, #140]	; (80015ec <main+0x288>)
 8001560:	f107 041c 	add.w	r4, r7, #28
 8001564:	461d      	mov	r5, r3
 8001566:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001568:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800156a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800156e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8001572:	f107 031c 	add.w	r3, r7, #28
 8001576:	2100      	movs	r1, #0
 8001578:	4618      	mov	r0, r3
 800157a:	f00b f82e 	bl	800c5da <osThreadCreate>
 800157e:	4603      	mov	r3, r0
 8001580:	4a1b      	ldr	r2, [pc, #108]	; (80015f0 <main+0x28c>)
 8001582:	6013      	str	r3, [r2, #0]

  /* definition and creation of Transmit */
  osThreadDef(Transmit, StartTransmit, osPriorityAboveNormal, 0, 128);
 8001584:	4b1b      	ldr	r3, [pc, #108]	; (80015f4 <main+0x290>)
 8001586:	463c      	mov	r4, r7
 8001588:	461d      	mov	r5, r3
 800158a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800158c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800158e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001592:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  TransmitHandle = osThreadCreate(osThread(Transmit), NULL);
 8001596:	463b      	mov	r3, r7
 8001598:	2100      	movs	r1, #0
 800159a:	4618      	mov	r0, r3
 800159c:	f00b f81d 	bl	800c5da <osThreadCreate>
 80015a0:	4603      	mov	r3, r0
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <main+0x294>)
 80015a4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80015a6:	f00b f811 	bl	800c5cc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80015aa:	e7fe      	b.n	80015aa <main+0x246>
 80015ac:	20000048 	.word	0x20000048
 80015b0:	080105c4 	.word	0x080105c4
 80015b4:	2000871c 	.word	0x2000871c
 80015b8:	080105a4 	.word	0x080105a4
 80015bc:	40020000 	.word	0x40020000
 80015c0:	20008d0c 	.word	0x20008d0c
 80015c4:	080105d0 	.word	0x080105d0
 80015c8:	20008d78 	.word	0x20008d78
 80015cc:	080105e0 	.word	0x080105e0
 80015d0:	20008668 	.word	0x20008668
 80015d4:	080105fc 	.word	0x080105fc
 80015d8:	200089fc 	.word	0x200089fc
 80015dc:	08010618 	.word	0x08010618
 80015e0:	20008664 	.word	0x20008664
 80015e4:	08010634 	.word	0x08010634
 80015e8:	20008d74 	.word	0x20008d74
 80015ec:	08010650 	.word	0x08010650
 80015f0:	20008a48 	.word	0x20008a48
 80015f4:	0801066c 	.word	0x0801066c
 80015f8:	20008a4c 	.word	0x20008a4c

080015fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	b0b4      	sub	sp, #208	; 0xd0
 8001600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001602:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001606:	2230      	movs	r2, #48	; 0x30
 8001608:	2100      	movs	r1, #0
 800160a:	4618      	mov	r0, r3
 800160c:	f00d faf0 	bl	800ebf0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001610:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001620:	f107 0308 	add.w	r3, r7, #8
 8001624:	2284      	movs	r2, #132	; 0x84
 8001626:	2100      	movs	r1, #0
 8001628:	4618      	mov	r0, r3
 800162a:	f00d fae1 	bl	800ebf0 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800162e:	f007 f807 	bl	8008640 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001632:	4b47      	ldr	r3, [pc, #284]	; (8001750 <SystemClock_Config+0x154>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	4a46      	ldr	r2, [pc, #280]	; (8001750 <SystemClock_Config+0x154>)
 8001638:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163c:	6413      	str	r3, [r2, #64]	; 0x40
 800163e:	4b44      	ldr	r3, [pc, #272]	; (8001750 <SystemClock_Config+0x154>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001646:	607b      	str	r3, [r7, #4]
 8001648:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164a:	4b42      	ldr	r3, [pc, #264]	; (8001754 <SystemClock_Config+0x158>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	4a41      	ldr	r2, [pc, #260]	; (8001754 <SystemClock_Config+0x158>)
 8001650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001654:	6013      	str	r3, [r2, #0]
 8001656:	4b3f      	ldr	r3, [pc, #252]	; (8001754 <SystemClock_Config+0x158>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800165e:	603b      	str	r3, [r7, #0]
 8001660:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001662:	2309      	movs	r3, #9
 8001664:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001668:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800166c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001670:	2301      	movs	r3, #1
 8001672:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001676:	2302      	movs	r3, #2
 8001678:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800167c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001680:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8001684:	2319      	movs	r3, #25
 8001686:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 800168a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800168e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001692:	2302      	movs	r3, #2
 8001694:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001698:	2309      	movs	r3, #9
 800169a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800169e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80016a2:	4618      	mov	r0, r3
 80016a4:	f007 f82c 	bl	8008700 <HAL_RCC_OscConfig>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 80016ae:	f001 fdb5 	bl	800321c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80016b2:	f006 ffd5 	bl	8008660 <HAL_PWREx_EnableOverDrive>
 80016b6:	4603      	mov	r3, r0
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d001      	beq.n	80016c0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016bc:	f001 fdae 	bl	800321c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016c0:	230f      	movs	r3, #15
 80016c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016c6:	2302      	movs	r3, #2
 80016c8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016cc:	2300      	movs	r3, #0
 80016ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 80016e2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80016e6:	2106      	movs	r1, #6
 80016e8:	4618      	mov	r0, r3
 80016ea:	f007 faad 	bl	8008c48 <HAL_RCC_ClockConfig>
 80016ee:	4603      	mov	r3, r0
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 80016f4:	f001 fd92 	bl	800321c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 80016f8:	4b17      	ldr	r3, [pc, #92]	; (8001758 <SystemClock_Config+0x15c>)
 80016fa:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 80016fc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8001700:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8001702:	2305      	movs	r3, #5
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8001706:	2302      	movs	r3, #2
 8001708:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 800170a:	2303      	movs	r3, #3
 800170c:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 800170e:	2301      	movs	r3, #1
 8001710:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8001712:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001716:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001718:	f44f 7300 	mov.w	r3, #512	; 0x200
 800171c:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800171e:	2300      	movs	r3, #0
 8001720:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8001722:	2300      	movs	r3, #0
 8001724:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8001726:	2300      	movs	r3, #0
 8001728:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800172a:	2300      	movs	r3, #0
 800172c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 800172e:	2300      	movs	r3, #0
 8001730:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001732:	f107 0308 	add.w	r3, r7, #8
 8001736:	4618      	mov	r0, r3
 8001738:	f007 fc8e 	bl	8009058 <HAL_RCCEx_PeriphCLKConfig>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8001742:	f001 fd6b 	bl	800321c <Error_Handler>
  }
}
 8001746:	bf00      	nop
 8001748:	37d0      	adds	r7, #208	; 0xd0
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}
 800174e:	bf00      	nop
 8001750:	40023800 	.word	0x40023800
 8001754:	40007000 	.word	0x40007000
 8001758:	00015868 	.word	0x00015868

0800175c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001762:	463b      	mov	r3, r7
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001770:	4a21      	ldr	r2, [pc, #132]	; (80017f8 <MX_ADC1_Init+0x9c>)
 8001772:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001774:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001776:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800177a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800177c:	4b1d      	ldr	r3, [pc, #116]	; (80017f4 <MX_ADC1_Init+0x98>)
 800177e:	2200      	movs	r2, #0
 8001780:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001782:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001784:	2200      	movs	r2, #0
 8001786:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001788:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <MX_ADC1_Init+0x98>)
 800178a:	2200      	movs	r2, #0
 800178c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800178e:	4b19      	ldr	r3, [pc, #100]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001790:	2200      	movs	r2, #0
 8001792:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <MX_ADC1_Init+0x98>)
 8001798:	2200      	movs	r2, #0
 800179a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800179c:	4b15      	ldr	r3, [pc, #84]	; (80017f4 <MX_ADC1_Init+0x98>)
 800179e:	4a17      	ldr	r2, [pc, #92]	; (80017fc <MX_ADC1_Init+0xa0>)
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80017a2:	4b14      	ldr	r3, [pc, #80]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80017a8:	4b12      	ldr	r3, [pc, #72]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017aa:	2201      	movs	r2, #1
 80017ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80017ae:	4b11      	ldr	r3, [pc, #68]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b0:	2200      	movs	r2, #0
 80017b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80017b6:	4b0f      	ldr	r3, [pc, #60]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017b8:	2201      	movs	r2, #1
 80017ba:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80017bc:	480d      	ldr	r0, [pc, #52]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017be:	f004 f937 	bl	8005a30 <HAL_ADC_Init>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80017c8:	f001 fd28 	bl	800321c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80017cc:	2300      	movs	r3, #0
 80017ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80017d0:	2301      	movs	r3, #1
 80017d2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80017d8:	463b      	mov	r3, r7
 80017da:	4619      	mov	r1, r3
 80017dc:	4805      	ldr	r0, [pc, #20]	; (80017f4 <MX_ADC1_Init+0x98>)
 80017de:	f004 fabd 	bl	8005d5c <HAL_ADC_ConfigChannel>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d001      	beq.n	80017ec <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80017e8:	f001 fd18 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80017ec:	bf00      	nop
 80017ee:	3710      	adds	r7, #16
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	200089b4 	.word	0x200089b4
 80017f8:	40012000 	.word	0x40012000
 80017fc:	0f000001 	.word	0x0f000001

08001800 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b084      	sub	sp, #16
 8001804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001806:	463b      	mov	r3, r7
 8001808:	2200      	movs	r2, #0
 800180a:	601a      	str	r2, [r3, #0]
 800180c:	605a      	str	r2, [r3, #4]
 800180e:	609a      	str	r2, [r3, #8]
 8001810:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <MX_ADC3_Init+0x98>)
 8001814:	4a21      	ldr	r2, [pc, #132]	; (800189c <MX_ADC3_Init+0x9c>)
 8001816:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001818:	4b1f      	ldr	r3, [pc, #124]	; (8001898 <MX_ADC3_Init+0x98>)
 800181a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800181e:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8001820:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <MX_ADC3_Init+0x98>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001826:	4b1c      	ldr	r3, [pc, #112]	; (8001898 <MX_ADC3_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <MX_ADC3_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8001832:	4b19      	ldr	r3, [pc, #100]	; (8001898 <MX_ADC3_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800183a:	4b17      	ldr	r3, [pc, #92]	; (8001898 <MX_ADC3_Init+0x98>)
 800183c:	2200      	movs	r2, #0
 800183e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001840:	4b15      	ldr	r3, [pc, #84]	; (8001898 <MX_ADC3_Init+0x98>)
 8001842:	4a17      	ldr	r2, [pc, #92]	; (80018a0 <MX_ADC3_Init+0xa0>)
 8001844:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001846:	4b14      	ldr	r3, [pc, #80]	; (8001898 <MX_ADC3_Init+0x98>)
 8001848:	2200      	movs	r2, #0
 800184a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800184c:	4b12      	ldr	r3, [pc, #72]	; (8001898 <MX_ADC3_Init+0x98>)
 800184e:	2201      	movs	r2, #1
 8001850:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8001852:	4b11      	ldr	r3, [pc, #68]	; (8001898 <MX_ADC3_Init+0x98>)
 8001854:	2200      	movs	r2, #0
 8001856:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800185a:	4b0f      	ldr	r3, [pc, #60]	; (8001898 <MX_ADC3_Init+0x98>)
 800185c:	2201      	movs	r2, #1
 800185e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8001860:	480d      	ldr	r0, [pc, #52]	; (8001898 <MX_ADC3_Init+0x98>)
 8001862:	f004 f8e5 	bl	8005a30 <HAL_ADC_Init>
 8001866:	4603      	mov	r3, r0
 8001868:	2b00      	cmp	r3, #0
 800186a:	d001      	beq.n	8001870 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 800186c:	f001 fcd6 	bl	800321c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001870:	2308      	movs	r3, #8
 8001872:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001874:	2301      	movs	r3, #1
 8001876:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001878:	2300      	movs	r3, #0
 800187a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800187c:	463b      	mov	r3, r7
 800187e:	4619      	mov	r1, r3
 8001880:	4805      	ldr	r0, [pc, #20]	; (8001898 <MX_ADC3_Init+0x98>)
 8001882:	f004 fa6b 	bl	8005d5c <HAL_ADC_ConfigChannel>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d001      	beq.n	8001890 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 800188c:	f001 fcc6 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8001890:	bf00      	nop
 8001892:	3710      	adds	r7, #16
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}
 8001898:	20008a00 	.word	0x20008a00
 800189c:	40012200 	.word	0x40012200
 80018a0:	0f000001 	.word	0x0f000001

080018a4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80018aa:	463b      	mov	r3, r7
 80018ac:	2200      	movs	r2, #0
 80018ae:	601a      	str	r2, [r3, #0]
 80018b0:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80018b2:	4b0f      	ldr	r3, [pc, #60]	; (80018f0 <MX_DAC_Init+0x4c>)
 80018b4:	4a0f      	ldr	r2, [pc, #60]	; (80018f4 <MX_DAC_Init+0x50>)
 80018b6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80018b8:	480d      	ldr	r0, [pc, #52]	; (80018f0 <MX_DAC_Init+0x4c>)
 80018ba:	f004 fd75 	bl	80063a8 <HAL_DAC_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80018c4:	f001 fcaa 	bl	800321c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80018c8:	2300      	movs	r3, #0
 80018ca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80018cc:	2300      	movs	r3, #0
 80018ce:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80018d0:	463b      	mov	r3, r7
 80018d2:	2200      	movs	r2, #0
 80018d4:	4619      	mov	r1, r3
 80018d6:	4806      	ldr	r0, [pc, #24]	; (80018f0 <MX_DAC_Init+0x4c>)
 80018d8:	f004 fddc 	bl	8006494 <HAL_DAC_ConfigChannel>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80018e2:	f001 fc9b 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80018e6:	bf00      	nop
 80018e8:	3708      	adds	r7, #8
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	20008ad0 	.word	0x20008ad0
 80018f4:	40007400 	.word	0x40007400

080018f8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 80018fc:	4b15      	ldr	r3, [pc, #84]	; (8001954 <MX_DMA2D_Init+0x5c>)
 80018fe:	4a16      	ldr	r2, [pc, #88]	; (8001958 <MX_DMA2D_Init+0x60>)
 8001900:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8001902:	4b14      	ldr	r3, [pc, #80]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001904:	2200      	movs	r2, #0
 8001906:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8001908:	4b12      	ldr	r3, [pc, #72]	; (8001954 <MX_DMA2D_Init+0x5c>)
 800190a:	2200      	movs	r2, #0
 800190c:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 800190e:	4b11      	ldr	r3, [pc, #68]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001910:	2200      	movs	r2, #0
 8001912:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8001914:	4b0f      	ldr	r3, [pc, #60]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001916:	2200      	movs	r2, #0
 8001918:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800191a:	4b0e      	ldr	r3, [pc, #56]	; (8001954 <MX_DMA2D_Init+0x5c>)
 800191c:	2200      	movs	r2, #0
 800191e:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001922:	2200      	movs	r2, #0
 8001924:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8001926:	4b0b      	ldr	r3, [pc, #44]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001928:	2200      	movs	r2, #0
 800192a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 800192c:	4809      	ldr	r0, [pc, #36]	; (8001954 <MX_DMA2D_Init+0x5c>)
 800192e:	f004 ffe9 	bl	8006904 <HAL_DMA2D_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8001938:	f001 fc70 	bl	800321c <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 800193c:	2101      	movs	r1, #1
 800193e:	4805      	ldr	r0, [pc, #20]	; (8001954 <MX_DMA2D_Init+0x5c>)
 8001940:	f005 f93e 	bl	8006bc0 <HAL_DMA2D_ConfigLayer>
 8001944:	4603      	mov	r3, r0
 8001946:	2b00      	cmp	r3, #0
 8001948:	d001      	beq.n	800194e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 800194a:	f001 fc67 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 800194e:	bf00      	nop
 8001950:	bd80      	pop	{r7, pc}
 8001952:	bf00      	nop
 8001954:	20008c40 	.word	0x20008c40
 8001958:	4002b000 	.word	0x4002b000

0800195c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001960:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001962:	4a1c      	ldr	r2, [pc, #112]	; (80019d4 <MX_I2C1_Init+0x78>)
 8001964:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8001966:	4b1a      	ldr	r3, [pc, #104]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001968:	4a1b      	ldr	r2, [pc, #108]	; (80019d8 <MX_I2C1_Init+0x7c>)
 800196a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800196c:	4b18      	ldr	r3, [pc, #96]	; (80019d0 <MX_I2C1_Init+0x74>)
 800196e:	2200      	movs	r2, #0
 8001970:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001972:	4b17      	ldr	r3, [pc, #92]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001974:	2201      	movs	r2, #1
 8001976:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001978:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <MX_I2C1_Init+0x74>)
 800197a:	2200      	movs	r2, #0
 800197c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800197e:	4b14      	ldr	r3, [pc, #80]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001980:	2200      	movs	r2, #0
 8001982:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001984:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001986:	2200      	movs	r2, #0
 8001988:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800198a:	4b11      	ldr	r3, [pc, #68]	; (80019d0 <MX_I2C1_Init+0x74>)
 800198c:	2200      	movs	r2, #0
 800198e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001990:	4b0f      	ldr	r3, [pc, #60]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001992:	2200      	movs	r2, #0
 8001994:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001996:	480e      	ldr	r0, [pc, #56]	; (80019d0 <MX_I2C1_Init+0x74>)
 8001998:	f005 fd2a 	bl	80073f0 <HAL_I2C_Init>
 800199c:	4603      	mov	r3, r0
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80019a2:	f001 fc3b 	bl	800321c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80019a6:	2100      	movs	r1, #0
 80019a8:	4809      	ldr	r0, [pc, #36]	; (80019d0 <MX_I2C1_Init+0x74>)
 80019aa:	f006 fa39 	bl	8007e20 <HAL_I2CEx_ConfigAnalogFilter>
 80019ae:	4603      	mov	r3, r0
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d001      	beq.n	80019b8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80019b4:	f001 fc32 	bl	800321c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80019b8:	2100      	movs	r1, #0
 80019ba:	4805      	ldr	r0, [pc, #20]	; (80019d0 <MX_I2C1_Init+0x74>)
 80019bc:	f006 fa7b 	bl	8007eb6 <HAL_I2CEx_ConfigDigitalFilter>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80019c6:	f001 fc29 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019ca:	bf00      	nop
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200087dc 	.word	0x200087dc
 80019d4:	40005400 	.word	0x40005400
 80019d8:	00c0eaff 	.word	0x00c0eaff

080019dc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 80019e0:	4b1b      	ldr	r3, [pc, #108]	; (8001a50 <MX_I2C3_Init+0x74>)
 80019e2:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <MX_I2C3_Init+0x78>)
 80019e4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 80019e6:	4b1a      	ldr	r3, [pc, #104]	; (8001a50 <MX_I2C3_Init+0x74>)
 80019e8:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <MX_I2C3_Init+0x7c>)
 80019ea:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 80019ec:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <MX_I2C3_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f2:	4b17      	ldr	r3, [pc, #92]	; (8001a50 <MX_I2C3_Init+0x74>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b15      	ldr	r3, [pc, #84]	; (8001a50 <MX_I2C3_Init+0x74>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 80019fe:	4b14      	ldr	r3, [pc, #80]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001a04:	4b12      	ldr	r3, [pc, #72]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001a16:	480e      	ldr	r0, [pc, #56]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a18:	f005 fcea 	bl	80073f0 <HAL_I2C_Init>
 8001a1c:	4603      	mov	r3, r0
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d001      	beq.n	8001a26 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001a22:	f001 fbfb 	bl	800321c <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001a26:	2100      	movs	r1, #0
 8001a28:	4809      	ldr	r0, [pc, #36]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a2a:	f006 f9f9 	bl	8007e20 <HAL_I2CEx_ConfigAnalogFilter>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001a34:	f001 fbf2 	bl	800321c <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001a38:	2100      	movs	r1, #0
 8001a3a:	4805      	ldr	r0, [pc, #20]	; (8001a50 <MX_I2C3_Init+0x74>)
 8001a3c:	f006 fa3b 	bl	8007eb6 <HAL_I2CEx_ConfigDigitalFilter>
 8001a40:	4603      	mov	r3, r0
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d001      	beq.n	8001a4a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001a46:	f001 fbe9 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8001a4a:	bf00      	nop
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	2000866c 	.word	0x2000866c
 8001a54:	40005c00 	.word	0x40005c00
 8001a58:	00c0eaff 	.word	0x00c0eaff

08001a5c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08e      	sub	sp, #56	; 0x38
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001a62:	1d3b      	adds	r3, r7, #4
 8001a64:	2234      	movs	r2, #52	; 0x34
 8001a66:	2100      	movs	r1, #0
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f00d f8c1 	bl	800ebf0 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8001a6e:	4b3a      	ldr	r3, [pc, #232]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a70:	4a3a      	ldr	r2, [pc, #232]	; (8001b5c <MX_LTDC_Init+0x100>)
 8001a72:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001a74:	4b38      	ldr	r3, [pc, #224]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8001a7a:	4b37      	ldr	r3, [pc, #220]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001a80:	4b35      	ldr	r3, [pc, #212]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001a86:	4b34      	ldr	r3, [pc, #208]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8001a8c:	4b32      	ldr	r3, [pc, #200]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a8e:	2228      	movs	r2, #40	; 0x28
 8001a90:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001a92:	4b31      	ldr	r3, [pc, #196]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a94:	2209      	movs	r2, #9
 8001a96:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001a98:	4b2f      	ldr	r3, [pc, #188]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001a9a:	2235      	movs	r2, #53	; 0x35
 8001a9c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8001a9e:	4b2e      	ldr	r3, [pc, #184]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001aa0:	220b      	movs	r2, #11
 8001aa2:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001aa6:	f240 2215 	movw	r2, #533	; 0x215
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8001aac:	4b2a      	ldr	r3, [pc, #168]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001aae:	f240 121b 	movw	r2, #283	; 0x11b
 8001ab2:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001ab4:	4b28      	ldr	r3, [pc, #160]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001ab6:	f240 2235 	movw	r2, #565	; 0x235
 8001aba:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8001abc:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001abe:	f240 121d 	movw	r2, #285	; 0x11d
 8001ac2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8001ac4:	4b24      	ldr	r3, [pc, #144]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8001acc:	4b22      	ldr	r3, [pc, #136]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8001ad4:	4b20      	ldr	r3, [pc, #128]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001ad6:	2200      	movs	r2, #0
 8001ad8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8001adc:	481e      	ldr	r0, [pc, #120]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001ade:	f006 fa37 	bl	8007f50 <HAL_LTDC_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8001ae8:	f001 fb98 	bl	800321c <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8001af0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001af4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8001af6:	2300      	movs	r3, #0
 8001af8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001afa:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001afe:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001b00:	2302      	movs	r3, #2
 8001b02:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 8001b04:	23ff      	movs	r3, #255	; 0xff
 8001b06:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001b0c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001b10:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8001b12:	2307      	movs	r3, #7
 8001b14:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 8001b16:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001b1c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001b20:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001b22:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001b26:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001b34:	2300      	movs	r3, #0
 8001b36:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	; (8001b58 <MX_LTDC_Init+0xfc>)
 8001b42:	f006 fb97 	bl	8008274 <HAL_LTDC_ConfigLayer>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001b4c:	f001 fb66 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3738      	adds	r7, #56	; 0x38
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	200088a8 	.word	0x200088a8
 8001b5c:	40016800 	.word	0x40016800

08001b60 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b092      	sub	sp, #72	; 0x48
 8001b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001b66:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	601a      	str	r2, [r3, #0]
 8001b6e:	605a      	str	r2, [r3, #4]
 8001b70:	609a      	str	r2, [r3, #8]
 8001b72:	60da      	str	r2, [r3, #12]
 8001b74:	611a      	str	r2, [r3, #16]
 8001b76:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001b78:	2300      	movs	r3, #0
 8001b7a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	222c      	movs	r2, #44	; 0x2c
 8001b80:	2100      	movs	r1, #0
 8001b82:	4618      	mov	r0, r3
 8001b84:	f00d f834 	bl	800ebf0 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001b88:	4b46      	ldr	r3, [pc, #280]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001b8a:	4a47      	ldr	r2, [pc, #284]	; (8001ca8 <MX_RTC_Init+0x148>)
 8001b8c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001b8e:	4b45      	ldr	r3, [pc, #276]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001b90:	2200      	movs	r2, #0
 8001b92:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001b94:	4b43      	ldr	r3, [pc, #268]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001b96:	227f      	movs	r2, #127	; 0x7f
 8001b98:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001b9a:	4b42      	ldr	r3, [pc, #264]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001b9c:	22ff      	movs	r2, #255	; 0xff
 8001b9e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001ba0:	4b40      	ldr	r3, [pc, #256]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001ba6:	4b3f      	ldr	r3, [pc, #252]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001bac:	4b3d      	ldr	r3, [pc, #244]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001bb2:	483c      	ldr	r0, [pc, #240]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001bb4:	f007 fe3e 	bl	8009834 <HAL_RTC_Init>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d001      	beq.n	8001bc2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8001bbe:	f001 fb2d 	bl	800321c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 8001bc8:	2300      	movs	r3, #0
 8001bca:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001bdc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001be0:	2201      	movs	r2, #1
 8001be2:	4619      	mov	r1, r3
 8001be4:	482f      	ldr	r0, [pc, #188]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001be6:	f007 fea1 	bl	800992c <HAL_RTC_SetTime>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d001      	beq.n	8001bf4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 8001bf0:	f001 fb14 	bl	800321c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001c00:	2301      	movs	r3, #1
 8001c02:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 8001c06:	2300      	movs	r3, #0
 8001c08:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001c0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c10:	2201      	movs	r2, #1
 8001c12:	4619      	mov	r1, r3
 8001c14:	4823      	ldr	r0, [pc, #140]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001c16:	f007 ffa5 	bl	8009b64 <HAL_RTC_SetDate>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001c20:	f001 fafc 	bl	800321c <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001c24:	2300      	movs	r3, #0
 8001c26:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001c28:	2300      	movs	r3, #0
 8001c2a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001c30:	2300      	movs	r3, #0
 8001c32:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001c34:	2300      	movs	r3, #0
 8001c36:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001c4e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c52:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c54:	463b      	mov	r3, r7
 8001c56:	2201      	movs	r2, #1
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4812      	ldr	r0, [pc, #72]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001c5c:	f008 f87a 	bl	8009d54 <HAL_RTC_SetAlarm>
 8001c60:	4603      	mov	r3, r0
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	d001      	beq.n	8001c6a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001c66:	f001 fad9 	bl	800321c <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001c6a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001c6e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001c70:	463b      	mov	r3, r7
 8001c72:	2201      	movs	r2, #1
 8001c74:	4619      	mov	r1, r3
 8001c76:	480b      	ldr	r0, [pc, #44]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001c78:	f008 f86c 	bl	8009d54 <HAL_RTC_SetAlarm>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d001      	beq.n	8001c86 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001c82:	f001 facb 	bl	800321c <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001c86:	2202      	movs	r2, #2
 8001c88:	2100      	movs	r1, #0
 8001c8a:	4806      	ldr	r0, [pc, #24]	; (8001ca4 <MX_RTC_Init+0x144>)
 8001c8c:	f008 fa0a 	bl	800a0a4 <HAL_RTCEx_SetTimeStamp>
 8001c90:	4603      	mov	r3, r0
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d001      	beq.n	8001c9a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001c96:	f001 fac1 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001c9a:	bf00      	nop
 8001c9c:	3748      	adds	r7, #72	; 0x48
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	20008ae4 	.word	0x20008ae4
 8001ca8:	40002800 	.word	0x40002800

08001cac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cb2:	4a1c      	ldr	r2, [pc, #112]	; (8001d24 <MX_SPI2_Init+0x78>)
 8001cb4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001cb6:	4b1a      	ldr	r3, [pc, #104]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cb8:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001cbc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001cbe:	4b18      	ldr	r3, [pc, #96]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 8001cc4:	4b16      	ldr	r3, [pc, #88]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cc6:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001cca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001ccc:	4b14      	ldr	r3, [pc, #80]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cce:	2200      	movs	r2, #0
 8001cd0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001cd2:	4b13      	ldr	r3, [pc, #76]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8001cd8:	4b11      	ldr	r3, [pc, #68]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cda:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8001cde:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001ce0:	4b0f      	ldr	r3, [pc, #60]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001ce6:	4b0e      	ldr	r3, [pc, #56]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001cec:	4b0c      	ldr	r3, [pc, #48]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001cf2:	4b0b      	ldr	r3, [pc, #44]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001cf8:	4b09      	ldr	r3, [pc, #36]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001cfa:	2207      	movs	r2, #7
 8001cfc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001cfe:	4b08      	ldr	r3, [pc, #32]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001d04:	4b06      	ldr	r3, [pc, #24]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d06:	2208      	movs	r2, #8
 8001d08:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001d0a:	4805      	ldr	r0, [pc, #20]	; (8001d20 <MX_SPI2_Init+0x74>)
 8001d0c:	f008 fa9f 	bl	800a24e <HAL_SPI_Init>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d001      	beq.n	8001d1a <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 8001d16:	f001 fa81 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	200086b8 	.word	0x200086b8
 8001d24:	40003800 	.word	0x40003800

08001d28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b088      	sub	sp, #32
 8001d2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d2e:	f107 0310 	add.w	r3, r7, #16
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]
 8001d3a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d3c:	1d3b      	adds	r3, r7, #4
 8001d3e:	2200      	movs	r2, #0
 8001d40:	601a      	str	r2, [r3, #0]
 8001d42:	605a      	str	r2, [r3, #4]
 8001d44:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d46:	4b20      	ldr	r3, [pc, #128]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d48:	4a20      	ldr	r2, [pc, #128]	; (8001dcc <MX_TIM1_Init+0xa4>)
 8001d4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001d4c:	4b1e      	ldr	r3, [pc, #120]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b1d      	ldr	r3, [pc, #116]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001d58:	4b1b      	ldr	r3, [pc, #108]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d60:	4b19      	ldr	r3, [pc, #100]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d66:	4b18      	ldr	r3, [pc, #96]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d6c:	4b16      	ldr	r3, [pc, #88]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d72:	4815      	ldr	r0, [pc, #84]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d74:	f008 fafd 	bl	800a372 <HAL_TIM_Base_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001d7e:	f001 fa4d 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d86:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d88:	f107 0310 	add.w	r3, r7, #16
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	480e      	ldr	r0, [pc, #56]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001d90:	f008 fdb0 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001d94:	4603      	mov	r3, r0
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d001      	beq.n	8001d9e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001d9a:	f001 fa3f 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001da2:	2300      	movs	r3, #0
 8001da4:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001da6:	2300      	movs	r3, #0
 8001da8:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	4619      	mov	r1, r3
 8001dae:	4806      	ldr	r0, [pc, #24]	; (8001dc8 <MX_TIM1_Init+0xa0>)
 8001db0:	f009 faf8 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001dba:	f001 fa2f 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001dbe:	bf00      	nop
 8001dc0:	3720      	adds	r7, #32
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	20008b04 	.word	0x20008b04
 8001dcc:	40010000 	.word	0x40010000

08001dd0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b088      	sub	sp, #32
 8001dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001dd6:	f107 0310 	add.w	r3, r7, #16
 8001dda:	2200      	movs	r2, #0
 8001ddc:	601a      	str	r2, [r3, #0]
 8001dde:	605a      	str	r2, [r3, #4]
 8001de0:	609a      	str	r2, [r3, #8]
 8001de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001de4:	1d3b      	adds	r3, r7, #4
 8001de6:	2200      	movs	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
 8001dea:	605a      	str	r2, [r3, #4]
 8001dec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001dee:	4b1e      	ldr	r3, [pc, #120]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001df4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001df6:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001e02:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e04:	f04f 32ff 	mov.w	r2, #4294967295
 8001e08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b15      	ldr	r3, [pc, #84]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001e16:	4814      	ldr	r0, [pc, #80]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e18:	f008 faab 	bl	800a372 <HAL_TIM_Base_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001e22:	f001 f9fb 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e2a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001e2c:	f107 0310 	add.w	r3, r7, #16
 8001e30:	4619      	mov	r1, r3
 8001e32:	480d      	ldr	r0, [pc, #52]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e34:	f008 fd5e 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001e38:	4603      	mov	r3, r0
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d001      	beq.n	8001e42 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001e3e:	f001 f9ed 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e42:	2300      	movs	r3, #0
 8001e44:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4806      	ldr	r0, [pc, #24]	; (8001e68 <MX_TIM2_Init+0x98>)
 8001e50:	f009 faa8 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001e54:	4603      	mov	r3, r0
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d001      	beq.n	8001e5e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001e5a:	f001 f9df 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001e5e:	bf00      	nop
 8001e60:	3720      	adds	r7, #32
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20008c80 	.word	0x20008c80

08001e6c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001e6c:	b580      	push	{r7, lr}
 8001e6e:	b08c      	sub	sp, #48	; 0x30
 8001e70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e72:	f107 0320 	add.w	r3, r7, #32
 8001e76:	2200      	movs	r2, #0
 8001e78:	601a      	str	r2, [r3, #0]
 8001e7a:	605a      	str	r2, [r3, #4]
 8001e7c:	609a      	str	r2, [r3, #8]
 8001e7e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001e80:	f107 030c 	add.w	r3, r7, #12
 8001e84:	2200      	movs	r2, #0
 8001e86:	601a      	str	r2, [r3, #0]
 8001e88:	605a      	str	r2, [r3, #4]
 8001e8a:	609a      	str	r2, [r3, #8]
 8001e8c:	60da      	str	r2, [r3, #12]
 8001e8e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e90:	463b      	mov	r3, r7
 8001e92:	2200      	movs	r2, #0
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	605a      	str	r2, [r3, #4]
 8001e98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e9a:	4b25      	ldr	r3, [pc, #148]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001e9c:	4a25      	ldr	r2, [pc, #148]	; (8001f34 <MX_TIM3_Init+0xc8>)
 8001e9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ea0:	4b23      	ldr	r3, [pc, #140]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001ea2:	2200      	movs	r2, #0
 8001ea4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ea6:	4b22      	ldr	r3, [pc, #136]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001eae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001eb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001eb4:	4b1e      	ldr	r3, [pc, #120]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001eba:	4b1d      	ldr	r3, [pc, #116]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ec0:	481b      	ldr	r0, [pc, #108]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001ec2:	f008 fa56 	bl	800a372 <HAL_TIM_Base_Init>
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d001      	beq.n	8001ed0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001ecc:	f001 f9a6 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ed0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ed4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ed6:	f107 0320 	add.w	r3, r7, #32
 8001eda:	4619      	mov	r1, r3
 8001edc:	4814      	ldr	r0, [pc, #80]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001ede:	f008 fd09 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d001      	beq.n	8001eec <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ee8:	f001 f998 	bl	800321c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 8001eec:	2300      	movs	r3, #0
 8001eee:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001ef4:	f107 030c 	add.w	r3, r7, #12
 8001ef8:	4619      	mov	r1, r3
 8001efa:	480d      	ldr	r0, [pc, #52]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001efc:	f008 fdc0 	bl	800aa80 <HAL_TIM_SlaveConfigSynchro>
 8001f00:	4603      	mov	r3, r0
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d001      	beq.n	8001f0a <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 8001f06:	f001 f989 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f0e:	2300      	movs	r3, #0
 8001f10:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001f12:	463b      	mov	r3, r7
 8001f14:	4619      	mov	r1, r3
 8001f16:	4806      	ldr	r0, [pc, #24]	; (8001f30 <MX_TIM3_Init+0xc4>)
 8001f18:	f009 fa44 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001f22:	f001 f97b 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001f26:	bf00      	nop
 8001f28:	3730      	adds	r7, #48	; 0x30
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	bd80      	pop	{r7, pc}
 8001f2e:	bf00      	nop
 8001f30:	20008868 	.word	0x20008868
 8001f34:	40000400 	.word	0x40000400

08001f38 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b088      	sub	sp, #32
 8001f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f3e:	f107 0310 	add.w	r3, r7, #16
 8001f42:	2200      	movs	r2, #0
 8001f44:	601a      	str	r2, [r3, #0]
 8001f46:	605a      	str	r2, [r3, #4]
 8001f48:	609a      	str	r2, [r3, #8]
 8001f4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f4c:	1d3b      	adds	r3, r7, #4
 8001f4e:	2200      	movs	r2, #0
 8001f50:	601a      	str	r2, [r3, #0]
 8001f52:	605a      	str	r2, [r3, #4]
 8001f54:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001f56:	4b1d      	ldr	r3, [pc, #116]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f58:	4a1d      	ldr	r2, [pc, #116]	; (8001fd0 <MX_TIM5_Init+0x98>)
 8001f5a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001f5c:	4b1b      	ldr	r3, [pc, #108]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f62:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001f68:	4b18      	ldr	r3, [pc, #96]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f6a:	f04f 32ff 	mov.w	r2, #4294967295
 8001f6e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f70:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f76:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f78:	2200      	movs	r2, #0
 8001f7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001f7c:	4813      	ldr	r0, [pc, #76]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f7e:	f008 f9f8 	bl	800a372 <HAL_TIM_Base_Init>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d001      	beq.n	8001f8c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001f88:	f001 f948 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f8c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f90:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001f92:	f107 0310 	add.w	r3, r7, #16
 8001f96:	4619      	mov	r1, r3
 8001f98:	480c      	ldr	r0, [pc, #48]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001f9a:	f008 fcab 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d001      	beq.n	8001fa8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001fa4:	f001 f93a 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001fa8:	2300      	movs	r3, #0
 8001faa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001fac:	2300      	movs	r3, #0
 8001fae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001fb0:	1d3b      	adds	r3, r7, #4
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	4805      	ldr	r0, [pc, #20]	; (8001fcc <MX_TIM5_Init+0x94>)
 8001fb6:	f009 f9f5 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8001fba:	4603      	mov	r3, r0
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d001      	beq.n	8001fc4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001fc0:	f001 f92c 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20008828 	.word	0x20008828
 8001fd0:	40000c00 	.word	0x40000c00

08001fd4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	b09a      	sub	sp, #104	; 0x68
 8001fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fda:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001fde:	2200      	movs	r2, #0
 8001fe0:	601a      	str	r2, [r3, #0]
 8001fe2:	605a      	str	r2, [r3, #4]
 8001fe4:	609a      	str	r2, [r3, #8]
 8001fe6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001fe8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
 8001ff0:	605a      	str	r2, [r3, #4]
 8001ff2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001ff4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	601a      	str	r2, [r3, #0]
 8001ffc:	605a      	str	r2, [r3, #4]
 8001ffe:	609a      	str	r2, [r3, #8]
 8002000:	60da      	str	r2, [r3, #12]
 8002002:	611a      	str	r2, [r3, #16]
 8002004:	615a      	str	r2, [r3, #20]
 8002006:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8002008:	1d3b      	adds	r3, r7, #4
 800200a:	222c      	movs	r2, #44	; 0x2c
 800200c:	2100      	movs	r1, #0
 800200e:	4618      	mov	r0, r3
 8002010:	f00c fdee 	bl	800ebf0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8002014:	4b42      	ldr	r3, [pc, #264]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002016:	4a43      	ldr	r2, [pc, #268]	; (8002124 <MX_TIM8_Init+0x150>)
 8002018:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <MX_TIM8_Init+0x14c>)
 800201c:	2200      	movs	r2, #0
 800201e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002020:	4b3f      	ldr	r3, [pc, #252]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002022:	2200      	movs	r2, #0
 8002024:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8002026:	4b3e      	ldr	r3, [pc, #248]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002028:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800202c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002030:	2200      	movs	r2, #0
 8002032:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002036:	2200      	movs	r2, #0
 8002038:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800203a:	4b39      	ldr	r3, [pc, #228]	; (8002120 <MX_TIM8_Init+0x14c>)
 800203c:	2200      	movs	r2, #0
 800203e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8002040:	4837      	ldr	r0, [pc, #220]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002042:	f008 f996 	bl	800a372 <HAL_TIM_Base_Init>
 8002046:	4603      	mov	r3, r0
 8002048:	2b00      	cmp	r3, #0
 800204a:	d001      	beq.n	8002050 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800204c:	f001 f8e6 	bl	800321c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002050:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002054:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8002056:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800205a:	4619      	mov	r1, r3
 800205c:	4830      	ldr	r0, [pc, #192]	; (8002120 <MX_TIM8_Init+0x14c>)
 800205e:	f008 fc49 	bl	800a8f4 <HAL_TIM_ConfigClockSource>
 8002062:	4603      	mov	r3, r0
 8002064:	2b00      	cmp	r3, #0
 8002066:	d001      	beq.n	800206c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8002068:	f001 f8d8 	bl	800321c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800206c:	482c      	ldr	r0, [pc, #176]	; (8002120 <MX_TIM8_Init+0x14c>)
 800206e:	f008 f9d5 	bl	800a41c <HAL_TIM_PWM_Init>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d001      	beq.n	800207c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8002078:	f001 f8d0 	bl	800321c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	2300      	movs	r3, #0
 800207e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8002080:	2300      	movs	r3, #0
 8002082:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002084:	2300      	movs	r3, #0
 8002086:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8002088:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800208c:	4619      	mov	r1, r3
 800208e:	4824      	ldr	r0, [pc, #144]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002090:	f009 f988 	bl	800b3a4 <HAL_TIMEx_MasterConfigSynchronization>
 8002094:	4603      	mov	r3, r0
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800209a:	f001 f8bf 	bl	800321c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800209e:	2360      	movs	r3, #96	; 0x60
 80020a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80020a2:	2300      	movs	r3, #0
 80020a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80020a6:	2300      	movs	r3, #0
 80020a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80020aa:	2300      	movs	r3, #0
 80020ac:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80020ae:	2300      	movs	r3, #0
 80020b0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80020b2:	2300      	movs	r3, #0
 80020b4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80020b6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80020ba:	220c      	movs	r2, #12
 80020bc:	4619      	mov	r1, r3
 80020be:	4818      	ldr	r0, [pc, #96]	; (8002120 <MX_TIM8_Init+0x14c>)
 80020c0:	f008 fb00 	bl	800a6c4 <HAL_TIM_PWM_ConfigChannel>
 80020c4:	4603      	mov	r3, r0
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d001      	beq.n	80020ce <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80020ca:	f001 f8a7 	bl	800321c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80020ce:	2300      	movs	r3, #0
 80020d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80020d2:	2300      	movs	r3, #0
 80020d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80020d6:	2300      	movs	r3, #0
 80020d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80020e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80020e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80020e8:	2300      	movs	r3, #0
 80020ea:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80020f0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80020f4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80020f6:	2300      	movs	r3, #0
 80020f8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80020fa:	2300      	movs	r3, #0
 80020fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	4619      	mov	r1, r3
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002104:	f009 f9dc 	bl	800b4c0 <HAL_TIMEx_ConfigBreakDeadTime>
 8002108:	4603      	mov	r3, r0
 800210a:	2b00      	cmp	r3, #0
 800210c:	d001      	beq.n	8002112 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 800210e:	f001 f885 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8002112:	4803      	ldr	r0, [pc, #12]	; (8002120 <MX_TIM8_Init+0x14c>)
 8002114:	f003 f97e 	bl	8005414 <HAL_TIM_MspPostInit>

}
 8002118:	bf00      	nop
 800211a:	3768      	adds	r7, #104	; 0x68
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}
 8002120:	2000879c 	.word	0x2000879c
 8002124:	40010400 	.word	0x40010400

08002128 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800212c:	4b14      	ldr	r3, [pc, #80]	; (8002180 <MX_UART7_Init+0x58>)
 800212e:	4a15      	ldr	r2, [pc, #84]	; (8002184 <MX_UART7_Init+0x5c>)
 8002130:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 8002132:	4b13      	ldr	r3, [pc, #76]	; (8002180 <MX_UART7_Init+0x58>)
 8002134:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8002138:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <MX_UART7_Init+0x58>)
 800213c:	2200      	movs	r2, #0
 800213e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8002140:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <MX_UART7_Init+0x58>)
 8002142:	2200      	movs	r2, #0
 8002144:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002146:	4b0e      	ldr	r3, [pc, #56]	; (8002180 <MX_UART7_Init+0x58>)
 8002148:	2200      	movs	r2, #0
 800214a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800214c:	4b0c      	ldr	r3, [pc, #48]	; (8002180 <MX_UART7_Init+0x58>)
 800214e:	220c      	movs	r2, #12
 8002150:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002152:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <MX_UART7_Init+0x58>)
 8002154:	2200      	movs	r2, #0
 8002156:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <MX_UART7_Init+0x58>)
 800215a:	2200      	movs	r2, #0
 800215c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800215e:	4b08      	ldr	r3, [pc, #32]	; (8002180 <MX_UART7_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002164:	4b06      	ldr	r3, [pc, #24]	; (8002180 <MX_UART7_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800216a:	4805      	ldr	r0, [pc, #20]	; (8002180 <MX_UART7_Init+0x58>)
 800216c:	f009 fa44 	bl	800b5f8 <HAL_UART_Init>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002176:	f001 f851 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800217a:	bf00      	nop
 800217c:	bd80      	pop	{r7, pc}
 800217e:	bf00      	nop
 8002180:	2000871c 	.word	0x2000871c
 8002184:	40007800 	.word	0x40007800

08002188 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 800218e:	4a15      	ldr	r2, [pc, #84]	; (80021e4 <MX_USART1_UART_Init+0x5c>)
 8002190:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002192:	4b13      	ldr	r3, [pc, #76]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 8002194:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002198:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800219a:	4b11      	ldr	r3, [pc, #68]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 800219c:	2200      	movs	r2, #0
 800219e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021a0:	4b0f      	ldr	r3, [pc, #60]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80021a6:	4b0e      	ldr	r3, [pc, #56]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80021ac:	4b0c      	ldr	r3, [pc, #48]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021ae:	220c      	movs	r2, #12
 80021b0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021b2:	4b0b      	ldr	r3, [pc, #44]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80021b8:	4b09      	ldr	r3, [pc, #36]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021c4:	4b06      	ldr	r3, [pc, #24]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80021ca:	4805      	ldr	r0, [pc, #20]	; (80021e0 <MX_USART1_UART_Init+0x58>)
 80021cc:	f009 fa14 	bl	800b5f8 <HAL_UART_Init>
 80021d0:	4603      	mov	r3, r0
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d001      	beq.n	80021da <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80021d6:	f001 f821 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	20008a50 	.word	0x20008a50
 80021e4:	40011000 	.word	0x40011000

080021e8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80021ec:	4b14      	ldr	r3, [pc, #80]	; (8002240 <MX_USART6_UART_Init+0x58>)
 80021ee:	4a15      	ldr	r2, [pc, #84]	; (8002244 <MX_USART6_UART_Init+0x5c>)
 80021f0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80021f2:	4b13      	ldr	r3, [pc, #76]	; (8002240 <MX_USART6_UART_Init+0x58>)
 80021f4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80021fa:	4b11      	ldr	r3, [pc, #68]	; (8002240 <MX_USART6_UART_Init+0x58>)
 80021fc:	2200      	movs	r2, #0
 80021fe:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8002200:	4b0f      	ldr	r3, [pc, #60]	; (8002240 <MX_USART6_UART_Init+0x58>)
 8002202:	2200      	movs	r2, #0
 8002204:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002206:	4b0e      	ldr	r3, [pc, #56]	; (8002240 <MX_USART6_UART_Init+0x58>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800220c:	4b0c      	ldr	r3, [pc, #48]	; (8002240 <MX_USART6_UART_Init+0x58>)
 800220e:	220c      	movs	r2, #12
 8002210:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002212:	4b0b      	ldr	r3, [pc, #44]	; (8002240 <MX_USART6_UART_Init+0x58>)
 8002214:	2200      	movs	r2, #0
 8002216:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002218:	4b09      	ldr	r3, [pc, #36]	; (8002240 <MX_USART6_UART_Init+0x58>)
 800221a:	2200      	movs	r2, #0
 800221c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800221e:	4b08      	ldr	r3, [pc, #32]	; (8002240 <MX_USART6_UART_Init+0x58>)
 8002220:	2200      	movs	r2, #0
 8002222:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002224:	4b06      	ldr	r3, [pc, #24]	; (8002240 <MX_USART6_UART_Init+0x58>)
 8002226:	2200      	movs	r2, #0
 8002228:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800222a:	4805      	ldr	r0, [pc, #20]	; (8002240 <MX_USART6_UART_Init+0x58>)
 800222c:	f009 f9e4 	bl	800b5f8 <HAL_UART_Init>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002236:	f000 fff1 	bl	800321c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20008bc0 	.word	0x20008bc0
 8002244:	40011400 	.word	0x40011400

08002248 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	b088      	sub	sp, #32
 800224c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800224e:	1d3b      	adds	r3, r7, #4
 8002250:	2200      	movs	r2, #0
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	605a      	str	r2, [r3, #4]
 8002256:	609a      	str	r2, [r3, #8]
 8002258:	60da      	str	r2, [r3, #12]
 800225a:	611a      	str	r2, [r3, #16]
 800225c:	615a      	str	r2, [r3, #20]
 800225e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8002260:	4b1e      	ldr	r3, [pc, #120]	; (80022dc <MX_FMC_Init+0x94>)
 8002262:	4a1f      	ldr	r2, [pc, #124]	; (80022e0 <MX_FMC_Init+0x98>)
 8002264:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8002266:	4b1d      	ldr	r3, [pc, #116]	; (80022dc <MX_FMC_Init+0x94>)
 8002268:	2200      	movs	r2, #0
 800226a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800226c:	4b1b      	ldr	r3, [pc, #108]	; (80022dc <MX_FMC_Init+0x94>)
 800226e:	2200      	movs	r2, #0
 8002270:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8002272:	4b1a      	ldr	r3, [pc, #104]	; (80022dc <MX_FMC_Init+0x94>)
 8002274:	2204      	movs	r2, #4
 8002276:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8002278:	4b18      	ldr	r3, [pc, #96]	; (80022dc <MX_FMC_Init+0x94>)
 800227a:	2210      	movs	r2, #16
 800227c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800227e:	4b17      	ldr	r3, [pc, #92]	; (80022dc <MX_FMC_Init+0x94>)
 8002280:	2240      	movs	r2, #64	; 0x40
 8002282:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8002284:	4b15      	ldr	r3, [pc, #84]	; (80022dc <MX_FMC_Init+0x94>)
 8002286:	2280      	movs	r2, #128	; 0x80
 8002288:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800228a:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_FMC_Init+0x94>)
 800228c:	2200      	movs	r2, #0
 800228e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8002290:	4b12      	ldr	r3, [pc, #72]	; (80022dc <MX_FMC_Init+0x94>)
 8002292:	2200      	movs	r2, #0
 8002294:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_FMC_Init+0x94>)
 8002298:	2200      	movs	r2, #0
 800229a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_FMC_Init+0x94>)
 800229e:	2200      	movs	r2, #0
 80022a0:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80022a2:	2310      	movs	r3, #16
 80022a4:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80022a6:	2310      	movs	r3, #16
 80022a8:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80022aa:	2310      	movs	r3, #16
 80022ac:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80022ae:	2310      	movs	r3, #16
 80022b0:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80022b2:	2310      	movs	r3, #16
 80022b4:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80022b6:	2310      	movs	r3, #16
 80022b8:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80022ba:	2310      	movs	r3, #16
 80022bc:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	4619      	mov	r1, r3
 80022c2:	4806      	ldr	r0, [pc, #24]	; (80022dc <MX_FMC_Init+0x94>)
 80022c4:	f007 ff44 	bl	800a150 <HAL_SDRAM_Init>
 80022c8:	4603      	mov	r3, r0
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d001      	beq.n	80022d2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80022ce:	f000 ffa5 	bl	800321c <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80022d2:	bf00      	nop
 80022d4:	3720      	adds	r7, #32
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20008cd8 	.word	0x20008cd8
 80022e0:	a0000140 	.word	0xa0000140

080022e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b090      	sub	sp, #64	; 0x40
 80022e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022ea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80022ee:	2200      	movs	r2, #0
 80022f0:	601a      	str	r2, [r3, #0]
 80022f2:	605a      	str	r2, [r3, #4]
 80022f4:	609a      	str	r2, [r3, #8]
 80022f6:	60da      	str	r2, [r3, #12]
 80022f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80022fa:	4bb0      	ldr	r3, [pc, #704]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	4aaf      	ldr	r2, [pc, #700]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002300:	f043 0310 	orr.w	r3, r3, #16
 8002304:	6313      	str	r3, [r2, #48]	; 0x30
 8002306:	4bad      	ldr	r3, [pc, #692]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002308:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800230a:	f003 0310 	and.w	r3, r3, #16
 800230e:	62bb      	str	r3, [r7, #40]	; 0x28
 8002310:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002312:	4baa      	ldr	r3, [pc, #680]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	4aa9      	ldr	r2, [pc, #676]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002318:	f043 0302 	orr.w	r3, r3, #2
 800231c:	6313      	str	r3, [r2, #48]	; 0x30
 800231e:	4ba7      	ldr	r3, [pc, #668]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	627b      	str	r3, [r7, #36]	; 0x24
 8002328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800232a:	4ba4      	ldr	r3, [pc, #656]	; (80025bc <MX_GPIO_Init+0x2d8>)
 800232c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232e:	4aa3      	ldr	r2, [pc, #652]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002330:	f043 0301 	orr.w	r3, r3, #1
 8002334:	6313      	str	r3, [r2, #48]	; 0x30
 8002336:	4ba1      	ldr	r3, [pc, #644]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	623b      	str	r3, [r7, #32]
 8002340:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8002342:	4b9e      	ldr	r3, [pc, #632]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a9d      	ldr	r2, [pc, #628]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002348:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b9b      	ldr	r3, [pc, #620]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002356:	61fb      	str	r3, [r7, #28]
 8002358:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800235a:	4b98      	ldr	r3, [pc, #608]	; (80025bc <MX_GPIO_Init+0x2d8>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a97      	ldr	r2, [pc, #604]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002360:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b95      	ldr	r3, [pc, #596]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800236e:	61bb      	str	r3, [r7, #24]
 8002370:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002372:	4b92      	ldr	r3, [pc, #584]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	4a91      	ldr	r2, [pc, #580]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002378:	f043 0308 	orr.w	r3, r3, #8
 800237c:	6313      	str	r3, [r2, #48]	; 0x30
 800237e:	4b8f      	ldr	r3, [pc, #572]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002382:	f003 0308 	and.w	r3, r3, #8
 8002386:	617b      	str	r3, [r7, #20]
 8002388:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800238a:	4b8c      	ldr	r3, [pc, #560]	; (80025bc <MX_GPIO_Init+0x2d8>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	4a8b      	ldr	r2, [pc, #556]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002390:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002394:	6313      	str	r3, [r2, #48]	; 0x30
 8002396:	4b89      	ldr	r3, [pc, #548]	; (80025bc <MX_GPIO_Init+0x2d8>)
 8002398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800239e:	613b      	str	r3, [r7, #16]
 80023a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80023a2:	4b86      	ldr	r3, [pc, #536]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a6:	4a85      	ldr	r2, [pc, #532]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023a8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80023ac:	6313      	str	r3, [r2, #48]	; 0x30
 80023ae:	4b83      	ldr	r3, [pc, #524]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b6:	60fb      	str	r3, [r7, #12]
 80023b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80023ba:	4b80      	ldr	r3, [pc, #512]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023be:	4a7f      	ldr	r2, [pc, #508]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023c0:	f043 0304 	orr.w	r3, r3, #4
 80023c4:	6313      	str	r3, [r2, #48]	; 0x30
 80023c6:	4b7d      	ldr	r3, [pc, #500]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	60bb      	str	r3, [r7, #8]
 80023d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80023d2:	4b7a      	ldr	r3, [pc, #488]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	4a79      	ldr	r2, [pc, #484]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023d8:	f043 0320 	orr.w	r3, r3, #32
 80023dc:	6313      	str	r3, [r2, #48]	; 0x30
 80023de:	4b77      	ldr	r3, [pc, #476]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	f003 0320 	and.w	r3, r3, #32
 80023e6:	607b      	str	r3, [r7, #4]
 80023e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80023ea:	4b74      	ldr	r3, [pc, #464]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	4a73      	ldr	r2, [pc, #460]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023f4:	6313      	str	r3, [r2, #48]	; 0x30
 80023f6:	4b71      	ldr	r3, [pc, #452]	; (80025bc <MX_GPIO_Init+0x2d8>)
 80023f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023fe:	603b      	str	r3, [r7, #0]
 8002400:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002402:	2200      	movs	r2, #0
 8002404:	2110      	movs	r1, #16
 8002406:	486e      	ldr	r0, [pc, #440]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 8002408:	f004 ffd8 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 800240c:	2200      	movs	r2, #0
 800240e:	2160      	movs	r1, #96	; 0x60
 8002410:	486c      	ldr	r0, [pc, #432]	; (80025c4 <MX_GPIO_Init+0x2e0>)
 8002412:	f004 ffd3 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8002416:	2201      	movs	r2, #1
 8002418:	2120      	movs	r1, #32
 800241a:	486b      	ldr	r0, [pc, #428]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 800241c:	f004 ffce 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8002420:	2200      	movs	r2, #0
 8002422:	2108      	movs	r1, #8
 8002424:	4868      	ldr	r0, [pc, #416]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 8002426:	f004 ffc9 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 800242a:	2200      	movs	r2, #0
 800242c:	2108      	movs	r1, #8
 800242e:	4867      	ldr	r0, [pc, #412]	; (80025cc <MX_GPIO_Init+0x2e8>)
 8002430:	f004 ffc4 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8002434:	2201      	movs	r2, #1
 8002436:	2108      	movs	r1, #8
 8002438:	4865      	ldr	r0, [pc, #404]	; (80025d0 <MX_GPIO_Init+0x2ec>)
 800243a:	f004 ffbf 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 800243e:	2201      	movs	r2, #1
 8002440:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002444:	4861      	ldr	r0, [pc, #388]	; (80025cc <MX_GPIO_Init+0x2e8>)
 8002446:	f004 ffb9 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 800244a:	2200      	movs	r2, #0
 800244c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8002450:	4860      	ldr	r0, [pc, #384]	; (80025d4 <MX_GPIO_Init+0x2f0>)
 8002452:	f004 ffb3 	bl	80073bc <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8002456:	2200      	movs	r2, #0
 8002458:	2108      	movs	r1, #8
 800245a:	485f      	ldr	r0, [pc, #380]	; (80025d8 <MX_GPIO_Init+0x2f4>)
 800245c:	f004 ffae 	bl	80073bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002460:	2308      	movs	r3, #8
 8002462:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002464:	2300      	movs	r3, #0
 8002466:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002468:	2300      	movs	r3, #0
 800246a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800246c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002470:	4619      	mov	r1, r3
 8002472:	4854      	ldr	r0, [pc, #336]	; (80025c4 <MX_GPIO_Init+0x2e0>)
 8002474:	f004 fcd2 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8002478:	f643 0323 	movw	r3, #14371	; 0x3823
 800247c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002486:	2303      	movs	r3, #3
 8002488:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800248a:	230a      	movs	r3, #10
 800248c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800248e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002492:	4619      	mov	r1, r3
 8002494:	484a      	ldr	r0, [pc, #296]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 8002496:	f004 fcc1 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800249a:	2310      	movs	r3, #16
 800249c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800249e:	2301      	movs	r3, #1
 80024a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024a2:	2300      	movs	r3, #0
 80024a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024a6:	2300      	movs	r3, #0
 80024a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80024aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024ae:	4619      	mov	r1, r3
 80024b0:	4843      	ldr	r0, [pc, #268]	; (80025c0 <MX_GPIO_Init+0x2dc>)
 80024b2:	f004 fcb3 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80024b6:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80024ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024bc:	2300      	movs	r3, #0
 80024be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024c0:	2300      	movs	r3, #0
 80024c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024c8:	4619      	mov	r1, r3
 80024ca:	4844      	ldr	r0, [pc, #272]	; (80025dc <MX_GPIO_Init+0x2f8>)
 80024cc:	f004 fca6 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80024d0:	2360      	movs	r3, #96	; 0x60
 80024d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024d4:	2301      	movs	r3, #1
 80024d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d8:	2300      	movs	r3, #0
 80024da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024dc:	2300      	movs	r3, #0
 80024de:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80024e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024e4:	4619      	mov	r1, r3
 80024e6:	4837      	ldr	r0, [pc, #220]	; (80025c4 <MX_GPIO_Init+0x2e0>)
 80024e8:	f004 fc98 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80024ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80024f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f2:	2300      	movs	r3, #0
 80024f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f6:	2300      	movs	r3, #0
 80024f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80024fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80024fe:	4619      	mov	r1, r3
 8002500:	4837      	ldr	r0, [pc, #220]	; (80025e0 <MX_GPIO_Init+0x2fc>)
 8002502:	f004 fc8b 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8002506:	2340      	movs	r3, #64	; 0x40
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <MX_GPIO_Init+0x300>)
 800250c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250e:	2300      	movs	r3, #0
 8002510:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8002512:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002516:	4619      	mov	r1, r3
 8002518:	482b      	ldr	r0, [pc, #172]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 800251a:	f004 fc7f 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 800251e:	2328      	movs	r3, #40	; 0x28
 8002520:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002522:	2301      	movs	r3, #1
 8002524:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002526:	2300      	movs	r3, #0
 8002528:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800252a:	2300      	movs	r3, #0
 800252c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800252e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002532:	4619      	mov	r1, r3
 8002534:	4824      	ldr	r0, [pc, #144]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 8002536:	f004 fc71 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 800253a:	f241 0308 	movw	r3, #4104	; 0x1008
 800253e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002540:	2301      	movs	r3, #1
 8002542:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002544:	2300      	movs	r3, #0
 8002546:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002548:	2300      	movs	r3, #0
 800254a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800254c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002550:	4619      	mov	r1, r3
 8002552:	481e      	ldr	r0, [pc, #120]	; (80025cc <MX_GPIO_Init+0x2e8>)
 8002554:	f004 fc62 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8002558:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800255e:	2300      	movs	r3, #0
 8002560:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002562:	2300      	movs	r3, #0
 8002564:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8002566:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800256a:	4619      	mov	r1, r3
 800256c:	481e      	ldr	r0, [pc, #120]	; (80025e8 <MX_GPIO_Init+0x304>)
 800256e:	f004 fc55 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8002572:	2308      	movs	r3, #8
 8002574:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002576:	2301      	movs	r3, #1
 8002578:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800257a:	2300      	movs	r3, #0
 800257c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800257e:	2300      	movs	r3, #0
 8002580:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8002582:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002586:	4619      	mov	r1, r3
 8002588:	4811      	ldr	r0, [pc, #68]	; (80025d0 <MX_GPIO_Init+0x2ec>)
 800258a:	f004 fc47 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 800258e:	2310      	movs	r3, #16
 8002590:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002592:	2300      	movs	r3, #0
 8002594:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002596:	2300      	movs	r3, #0
 8002598:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800259a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800259e:	4619      	mov	r1, r3
 80025a0:	4809      	ldr	r0, [pc, #36]	; (80025c8 <MX_GPIO_Init+0x2e4>)
 80025a2:	f004 fc3b 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 80025a6:	f248 0304 	movw	r3, #32772	; 0x8004
 80025aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80025ac:	2300      	movs	r3, #0
 80025ae:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b0:	2300      	movs	r3, #0
 80025b2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80025b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80025b8:	4619      	mov	r1, r3
 80025ba:	e017      	b.n	80025ec <MX_GPIO_Init+0x308>
 80025bc:	40023800 	.word	0x40023800
 80025c0:	40020400 	.word	0x40020400
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40020c00 	.word	0x40020c00
 80025cc:	40022000 	.word	0x40022000
 80025d0:	40022800 	.word	0x40022800
 80025d4:	40021c00 	.word	0x40021c00
 80025d8:	40021800 	.word	0x40021800
 80025dc:	40020000 	.word	0x40020000
 80025e0:	40022400 	.word	0x40022400
 80025e4:	10120000 	.word	0x10120000
 80025e8:	40020800 	.word	0x40020800
 80025ec:	4836      	ldr	r0, [pc, #216]	; (80026c8 <MX_GPIO_Init+0x3e4>)
 80025ee:	f004 fc15 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 80025f2:	f645 6340 	movw	r3, #24128	; 0x5e40
 80025f6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80025f8:	2301      	movs	r3, #1
 80025fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025fc:	2300      	movs	r3, #0
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002600:	2300      	movs	r3, #0
 8002602:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8002604:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002608:	4619      	mov	r1, r3
 800260a:	482f      	ldr	r0, [pc, #188]	; (80026c8 <MX_GPIO_Init+0x3e4>)
 800260c:	f004 fc06 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8002610:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002614:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8002616:	4b2d      	ldr	r3, [pc, #180]	; (80026cc <MX_GPIO_Init+0x3e8>)
 8002618:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261a:	2300      	movs	r3, #0
 800261c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 800261e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002622:	4619      	mov	r1, r3
 8002624:	482a      	ldr	r0, [pc, #168]	; (80026d0 <MX_GPIO_Init+0x3ec>)
 8002626:	f004 fbf9 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 800262a:	2310      	movs	r3, #16
 800262c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800262e:	2302      	movs	r3, #2
 8002630:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002632:	2300      	movs	r3, #0
 8002634:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002636:	2303      	movs	r3, #3
 8002638:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 800263a:	230a      	movs	r3, #10
 800263c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 800263e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002642:	4619      	mov	r1, r3
 8002644:	4820      	ldr	r0, [pc, #128]	; (80026c8 <MX_GPIO_Init+0x3e4>)
 8002646:	f004 fbe9 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 800264a:	2384      	movs	r3, #132	; 0x84
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800264e:	2300      	movs	r3, #0
 8002650:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002652:	2300      	movs	r3, #0
 8002654:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002656:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800265a:	4619      	mov	r1, r3
 800265c:	481d      	ldr	r0, [pc, #116]	; (80026d4 <MX_GPIO_Init+0x3f0>)
 800265e:	f004 fbdd 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8002662:	2305      	movs	r3, #5
 8002664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002666:	2302      	movs	r3, #2
 8002668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800266a:	2300      	movs	r3, #0
 800266c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800266e:	2303      	movs	r3, #3
 8002670:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8002672:	230a      	movs	r3, #10
 8002674:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002676:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800267a:	4619      	mov	r1, r3
 800267c:	4816      	ldr	r0, [pc, #88]	; (80026d8 <MX_GPIO_Init+0x3f4>)
 800267e:	f004 fbcd 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8002682:	2308      	movs	r3, #8
 8002684:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002686:	2301      	movs	r3, #1
 8002688:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800268a:	2300      	movs	r3, #0
 800268c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800268e:	2300      	movs	r3, #0
 8002690:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8002692:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002696:	4619      	mov	r1, r3
 8002698:	480e      	ldr	r0, [pc, #56]	; (80026d4 <MX_GPIO_Init+0x3f0>)
 800269a:	f004 fbbf 	bl	8006e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 800269e:	2328      	movs	r3, #40	; 0x28
 80026a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026a2:	2302      	movs	r3, #2
 80026a4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026a6:	2300      	movs	r3, #0
 80026a8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026aa:	2303      	movs	r3, #3
 80026ac:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 80026ae:	230a      	movs	r3, #10
 80026b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80026b6:	4619      	mov	r1, r3
 80026b8:	4808      	ldr	r0, [pc, #32]	; (80026dc <MX_GPIO_Init+0x3f8>)
 80026ba:	f004 fbaf 	bl	8006e1c <HAL_GPIO_Init>

}
 80026be:	bf00      	nop
 80026c0:	3740      	adds	r7, #64	; 0x40
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40021c00 	.word	0x40021c00
 80026cc:	10120000 	.word	0x10120000
 80026d0:	40022000 	.word	0x40022000
 80026d4:	40021800 	.word	0x40021800
 80026d8:	40020800 	.word	0x40020800
 80026dc:	40020000 	.word	0x40020000

080026e0 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(100);
 80026e8:	2064      	movs	r0, #100	; 0x64
 80026ea:	f009 ffc2 	bl	800c672 <osDelay>
 80026ee:	e7fb      	b.n	80026e8 <StartDefaultTask+0x8>

080026f0 <Starthorloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Starthorloge */
void Starthorloge(void const * argument)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b090      	sub	sp, #64	; 0x40
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthorloge */
	//Initialisation du texte d'affichage
	char text[50] = { };
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
 80026fc:	f107 0310 	add.w	r3, r7, #16
 8002700:	222e      	movs	r2, #46	; 0x2e
 8002702:	2100      	movs	r1, #0
 8002704:	4618      	mov	r0, r3
 8002706:	f00c fa73 	bl	800ebf0 <memset>

	/* Infinite loop */
	for (;;) {
		//Récupération des grandeurs temps et date (même si la date ne nous sert pas)
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800270a:	2200      	movs	r2, #0
 800270c:	4915      	ldr	r1, [pc, #84]	; (8002764 <Starthorloge+0x74>)
 800270e:	4816      	ldr	r0, [pc, #88]	; (8002768 <Starthorloge+0x78>)
 8002710:	f007 f9ca 	bl	8009aa8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8002714:	2200      	movs	r2, #0
 8002716:	4915      	ldr	r1, [pc, #84]	; (800276c <Starthorloge+0x7c>)
 8002718:	4813      	ldr	r0, [pc, #76]	; (8002768 <Starthorloge+0x78>)
 800271a:	f007 facb 	bl	8009cb4 <HAL_RTC_GetDate>

		//Conversion en chaine de caractères et stockage dans le texte d'affichage
		sprintf(text, "%2u:%2u", time.Minutes, time.Seconds);
 800271e:	4b11      	ldr	r3, [pc, #68]	; (8002764 <Starthorloge+0x74>)
 8002720:	785b      	ldrb	r3, [r3, #1]
 8002722:	461a      	mov	r2, r3
 8002724:	4b0f      	ldr	r3, [pc, #60]	; (8002764 <Starthorloge+0x74>)
 8002726:	789b      	ldrb	r3, [r3, #2]
 8002728:	f107 000c 	add.w	r0, r7, #12
 800272c:	4910      	ldr	r1, [pc, #64]	; (8002770 <Starthorloge+0x80>)
 800272e:	f00c fa67 	bl	800ec00 <siprintf>

		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002732:	4b10      	ldr	r3, [pc, #64]	; (8002774 <Starthorloge+0x84>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f04f 31ff 	mov.w	r1, #4294967295
 800273a:	4618      	mov	r0, r3
 800273c:	f00a fb42 	bl	800cdc4 <xQueueSemaphoreTake>

		//Affichage du chronomètre de jeu
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8002740:	f107 030c 	add.w	r3, r7, #12
 8002744:	4619      	mov	r1, r3
 8002746:	2001      	movs	r0, #1
 8002748:	f001 f9b0 	bl	8003aac <BSP_LCD_DisplayStringAtLine>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 800274c:	4b09      	ldr	r3, [pc, #36]	; (8002774 <Starthorloge+0x84>)
 800274e:	6818      	ldr	r0, [r3, #0]
 8002750:	2300      	movs	r3, #0
 8002752:	2200      	movs	r2, #0
 8002754:	2100      	movs	r1, #0
 8002756:	f00a fa2f 	bl	800cbb8 <xQueueGenericSend>

		osDelay(500);
 800275a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800275e:	f009 ff88 	bl	800c672 <osDelay>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002762:	e7d2      	b.n	800270a <Starthorloge+0x1a>
 8002764:	20008ba8 	.word	0x20008ba8
 8002768:	20008ae4 	.word	0x20008ae4
 800276c:	20008cc0 	.word	0x20008cc0
 8002770:	08010688 	.word	0x08010688
 8002774:	20008d0c 	.word	0x20008d0c

08002778 <StartLRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLRacket */
void StartLRacket(void const * argument)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b08a      	sub	sp, #40	; 0x28
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8002780:	2300      	movs	r3, #0
 8002782:	61fb      	str	r3, [r7, #28]
	joystick_v = 0;
 8002784:	2300      	movs	r3, #0
 8002786:	61bb      	str	r3, [r7, #24]
	//Initialisation du stockage des coordonnées de la raquette gauche
	int32_t x_LRacket_hold;
	int32_t y_LRacket_hold;

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002788:	f107 0308 	add.w	r3, r7, #8
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002796:	2301      	movs	r3, #1
 8002798:	60fb      	str	r3, [r7, #12]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800279a:	2300      	movs	r3, #0
 800279c:	613b      	str	r3, [r7, #16]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 800279e:	f107 0308 	add.w	r3, r7, #8
 80027a2:	4619      	mov	r1, r3
 80027a4:	485b      	ldr	r0, [pc, #364]	; (8002914 <StartLRacket+0x19c>)
 80027a6:	f003 fad9 	bl	8005d5c <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for (;;) {
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 80027aa:	2308      	movs	r3, #8
 80027ac:	60bb      	str	r3, [r7, #8]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 80027ae:	f107 0308 	add.w	r3, r7, #8
 80027b2:	4619      	mov	r1, r3
 80027b4:	4857      	ldr	r0, [pc, #348]	; (8002914 <StartLRacket+0x19c>)
 80027b6:	f003 fad1 	bl	8005d5c <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 80027ba:	4856      	ldr	r0, [pc, #344]	; (8002914 <StartLRacket+0x19c>)
 80027bc:	f003 f97c 	bl	8005ab8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 80027c0:	bf00      	nop
 80027c2:	2164      	movs	r1, #100	; 0x64
 80027c4:	4853      	ldr	r0, [pc, #332]	; (8002914 <StartLRacket+0x19c>)
 80027c6:	f003 fa37 	bl	8005c38 <HAL_ADC_PollForConversion>
 80027ca:	4603      	mov	r3, r0
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1f8      	bne.n	80027c2 <StartLRacket+0x4a>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 80027d0:	4850      	ldr	r0, [pc, #320]	; (8002914 <StartLRacket+0x19c>)
 80027d2:	f003 fab5 	bl	8005d40 <HAL_ADC_GetValue>
 80027d6:	4603      	mov	r3, r0
 80027d8:	61bb      	str	r3, [r7, #24]

		HAL_ADC_Start(&hadc1);
 80027da:	484f      	ldr	r0, [pc, #316]	; (8002918 <StartLRacket+0x1a0>)
 80027dc:	f003 f96c 	bl	8005ab8 <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 80027e0:	bf00      	nop
 80027e2:	2164      	movs	r1, #100	; 0x64
 80027e4:	484c      	ldr	r0, [pc, #304]	; (8002918 <StartLRacket+0x1a0>)
 80027e6:	f003 fa27 	bl	8005c38 <HAL_ADC_PollForConversion>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1f8      	bne.n	80027e2 <StartLRacket+0x6a>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 80027f0:	4849      	ldr	r0, [pc, #292]	; (8002918 <StartLRacket+0x1a0>)
 80027f2:	f003 faa5 	bl	8005d40 <HAL_ADC_GetValue>
 80027f6:	4603      	mov	r3, r0
 80027f8:	61fb      	str	r3, [r7, #28]

		//Actualisation des coordonnées de la raquette gauche
		x_LRacket -= (joystick_h - 2080)/250;
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8002800:	4a46      	ldr	r2, [pc, #280]	; (800291c <StartLRacket+0x1a4>)
 8002802:	fb82 1203 	smull	r1, r2, r2, r3
 8002806:	1112      	asrs	r2, r2, #4
 8002808:	17db      	asrs	r3, r3, #31
 800280a:	1a9b      	subs	r3, r3, r2
 800280c:	b29a      	uxth	r2, r3
 800280e:	4b44      	ldr	r3, [pc, #272]	; (8002920 <StartLRacket+0x1a8>)
 8002810:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4413      	add	r3, r2
 8002818:	b29b      	uxth	r3, r3
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b40      	ldr	r3, [pc, #256]	; (8002920 <StartLRacket+0x1a8>)
 800281e:	801a      	strh	r2, [r3, #0]
		y_LRacket -= (joystick_v - 2080)/150;
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8002826:	4a3f      	ldr	r2, [pc, #252]	; (8002924 <StartLRacket+0x1ac>)
 8002828:	fb82 1203 	smull	r1, r2, r2, r3
 800282c:	1112      	asrs	r2, r2, #4
 800282e:	17db      	asrs	r3, r3, #31
 8002830:	1a9b      	subs	r3, r3, r2
 8002832:	b29a      	uxth	r2, r3
 8002834:	4b3c      	ldr	r3, [pc, #240]	; (8002928 <StartLRacket+0x1b0>)
 8002836:	f9b3 3000 	ldrsh.w	r3, [r3]
 800283a:	b29b      	uxth	r3, r3
 800283c:	4413      	add	r3, r2
 800283e:	b29b      	uxth	r3, r3
 8002840:	b21a      	sxth	r2, r3
 8002842:	4b39      	ldr	r3, [pc, #228]	; (8002928 <StartLRacket+0x1b0>)
 8002844:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées LRacket
		if (x_LRacket >= 239 - width_rackets) x_LRacket = 239-width_rackets;
 8002846:	4b36      	ldr	r3, [pc, #216]	; (8002920 <StartLRacket+0x1a8>)
 8002848:	f9b3 3000 	ldrsh.w	r3, [r3]
 800284c:	2be6      	cmp	r3, #230	; 0xe6
 800284e:	dd02      	ble.n	8002856 <StartLRacket+0xde>
 8002850:	4b33      	ldr	r3, [pc, #204]	; (8002920 <StartLRacket+0x1a8>)
 8002852:	22e7      	movs	r2, #231	; 0xe7
 8002854:	801a      	strh	r2, [r3, #0]
		if (x_LRacket <= 0) x_LRacket = 0;
 8002856:	4b32      	ldr	r3, [pc, #200]	; (8002920 <StartLRacket+0x1a8>)
 8002858:	f9b3 3000 	ldrsh.w	r3, [r3]
 800285c:	2b00      	cmp	r3, #0
 800285e:	dc02      	bgt.n	8002866 <StartLRacket+0xee>
 8002860:	4b2f      	ldr	r3, [pc, #188]	; (8002920 <StartLRacket+0x1a8>)
 8002862:	2200      	movs	r2, #0
 8002864:	801a      	strh	r2, [r3, #0]
		if (y_LRacket <= 0) y_LRacket = 0;
 8002866:	4b30      	ldr	r3, [pc, #192]	; (8002928 <StartLRacket+0x1b0>)
 8002868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800286c:	2b00      	cmp	r3, #0
 800286e:	dc02      	bgt.n	8002876 <StartLRacket+0xfe>
 8002870:	4b2d      	ldr	r3, [pc, #180]	; (8002928 <StartLRacket+0x1b0>)
 8002872:	2200      	movs	r2, #0
 8002874:	801a      	strh	r2, [r3, #0]
		if (y_LRacket + height_rackets >= 272) y_LRacket = 272 - height_rackets;
 8002876:	4b2c      	ldr	r3, [pc, #176]	; (8002928 <StartLRacket+0x1b0>)
 8002878:	f9b3 3000 	ldrsh.w	r3, [r3]
 800287c:	2bdd      	cmp	r3, #221	; 0xdd
 800287e:	dd02      	ble.n	8002886 <StartLRacket+0x10e>
 8002880:	4b29      	ldr	r3, [pc, #164]	; (8002928 <StartLRacket+0x1b0>)
 8002882:	22de      	movs	r2, #222	; 0xde
 8002884:	801a      	strh	r2, [r3, #0]

		//Tracé de LRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002886:	4b29      	ldr	r3, [pc, #164]	; (800292c <StartLRacket+0x1b4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f04f 31ff 	mov.w	r1, #4294967295
 800288e:	4618      	mov	r0, r3
 8002890:	f00a fa98 	bl	800cdc4 <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002894:	4b26      	ldr	r3, [pc, #152]	; (8002930 <StartLRacket+0x1b8>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	2b00      	cmp	r3, #0
 800289a:	d102      	bne.n	80028a2 <StartLRacket+0x12a>
 800289c:	f04f 33ff 	mov.w	r3, #4294967295
 80028a0:	e001      	b.n	80028a6 <StartLRacket+0x12e>
 80028a2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 ff6a 	bl	8003780 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket_hold, y_LRacket_hold, width_rackets,
 80028ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028ae:	b298      	uxth	r0, r3
 80028b0:	6a3b      	ldr	r3, [r7, #32]
 80028b2:	b299      	uxth	r1, r3
 80028b4:	2332      	movs	r3, #50	; 0x32
 80028b6:	2208      	movs	r2, #8
 80028b8:	f001 fb6c 	bl	8003f94 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 80028bc:	4b1c      	ldr	r3, [pc, #112]	; (8002930 <StartLRacket+0x1b8>)
 80028be:	781b      	ldrb	r3, [r3, #0]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d102      	bne.n	80028ca <StartLRacket+0x152>
 80028c4:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80028c8:	e001      	b.n	80028ce <StartLRacket+0x156>
 80028ca:	f04f 33ff 	mov.w	r3, #4294967295
 80028ce:	4618      	mov	r0, r3
 80028d0:	f000 ff56 	bl	8003780 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket, y_LRacket, width_rackets, height_rackets);
 80028d4:	4b12      	ldr	r3, [pc, #72]	; (8002920 <StartLRacket+0x1a8>)
 80028d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028da:	b298      	uxth	r0, r3
 80028dc:	4b12      	ldr	r3, [pc, #72]	; (8002928 <StartLRacket+0x1b0>)
 80028de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028e2:	b299      	uxth	r1, r3
 80028e4:	2332      	movs	r3, #50	; 0x32
 80028e6:	2208      	movs	r2, #8
 80028e8:	f001 fb54 	bl	8003f94 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 80028ec:	4b0f      	ldr	r3, [pc, #60]	; (800292c <StartLRacket+0x1b4>)
 80028ee:	6818      	ldr	r0, [r3, #0]
 80028f0:	2300      	movs	r3, #0
 80028f2:	2200      	movs	r2, #0
 80028f4:	2100      	movs	r1, #0
 80028f6:	f00a f95f 	bl	800cbb8 <xQueueGenericSend>

		//Stockage des dernières coordonnées de la raquette gauche
		x_LRacket_hold = x_LRacket;
 80028fa:	4b09      	ldr	r3, [pc, #36]	; (8002920 <StartLRacket+0x1a8>)
 80028fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002900:	627b      	str	r3, [r7, #36]	; 0x24
		y_LRacket_hold = y_LRacket;
 8002902:	4b09      	ldr	r3, [pc, #36]	; (8002928 <StartLRacket+0x1b0>)
 8002904:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002908:	623b      	str	r3, [r7, #32]

		osDelay(40);
 800290a:	2028      	movs	r0, #40	; 0x28
 800290c:	f009 feb1 	bl	800c672 <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8002910:	e74b      	b.n	80027aa <StartLRacket+0x32>
 8002912:	bf00      	nop
 8002914:	20008a00 	.word	0x20008a00
 8002918:	200089b4 	.word	0x200089b4
 800291c:	10624dd3 	.word	0x10624dd3
 8002920:	2000002a 	.word	0x2000002a
 8002924:	1b4e81b5 	.word	0x1b4e81b5
 8002928:	2000002c 	.word	0x2000002c
 800292c:	20008d0c 	.word	0x20008d0c
 8002930:	2000003d 	.word	0x2000003d
 8002934:	00000000 	.word	0x00000000

08002938 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8002938:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800293c:	b094      	sub	sp, #80	; 0x50
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=10; //remettre à 10
 8002942:	230a      	movs	r3, #10
 8002944:	647b      	str	r3, [r7, #68]	; 0x44
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8002946:	f00a ffc3 	bl	800d8d0 <xTaskGetTickCount>
 800294a:	4603      	mov	r3, r0
 800294c:	63bb      	str	r3, [r7, #56]	; 0x38

	// Initialisation des coordonnées entières de la balle

	uint16_t x_balle = x_balle_f;
 800294e:	4bbc      	ldr	r3, [pc, #752]	; (8002c40 <StartBall+0x308>)
 8002950:	edd3 7a00 	vldr	s15, [r3]
 8002954:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002958:	ee17 3a90 	vmov	r3, s15
 800295c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	uint16_t y_balle = y_balle_f;
 8002960:	4bb8      	ldr	r3, [pc, #736]	; (8002c44 <StartBall+0x30c>)
 8002962:	edd3 7a00 	vldr	s15, [r3]
 8002966:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800296a:	ee17 3a90 	vmov	r3, s15
 800296e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e


	//Initialisation des anciennes coordonnées de la balle
	uint16_t x_balle_hold = 480;
 8002972:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8002976:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	uint16_t y_balle_hold = 136;
 800297a:	2388      	movs	r3, #136	; 0x88
 800297c:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	//Initialisation du sens de déplacement de la balle
	int16_t angle;

	// Récupération des grandeurs temps et date pour générer un départ aléatoire (à la pression du bouton)
	HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8002980:	2200      	movs	r2, #0
 8002982:	49b1      	ldr	r1, [pc, #708]	; (8002c48 <StartBall+0x310>)
 8002984:	48b1      	ldr	r0, [pc, #708]	; (8002c4c <StartBall+0x314>)
 8002986:	f007 f88f 	bl	8009aa8 <HAL_RTC_GetTime>

	uint16_t time2 = time.SubSeconds;
 800298a:	4baf      	ldr	r3, [pc, #700]	; (8002c48 <StartBall+0x310>)
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
	uint16_t timeFraction = time.SecondFraction;
 8002992:	4bad      	ldr	r3, [pc, #692]	; (8002c48 <StartBall+0x310>)
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	87fb      	strh	r3, [r7, #62]	; 0x3e

	// Nombre pseudo aléatoire entre 30 et 150
	angle = time2*1.0/timeFraction*120+30;
 8002998:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800299c:	4618      	mov	r0, r3
 800299e:	f7fd fdd9 	bl	8000554 <__aeabi_i2d>
 80029a2:	4680      	mov	r8, r0
 80029a4:	4689      	mov	r9, r1
 80029a6:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7fd fdd3 	bl	8000554 <__aeabi_i2d>
 80029ae:	4602      	mov	r2, r0
 80029b0:	460b      	mov	r3, r1
 80029b2:	4640      	mov	r0, r8
 80029b4:	4649      	mov	r1, r9
 80029b6:	f7fd ff61 	bl	800087c <__aeabi_ddiv>
 80029ba:	4602      	mov	r2, r0
 80029bc:	460b      	mov	r3, r1
 80029be:	4610      	mov	r0, r2
 80029c0:	4619      	mov	r1, r3
 80029c2:	f04f 0200 	mov.w	r2, #0
 80029c6:	4ba2      	ldr	r3, [pc, #648]	; (8002c50 <StartBall+0x318>)
 80029c8:	f7fd fe2e 	bl	8000628 <__aeabi_dmul>
 80029cc:	4602      	mov	r2, r0
 80029ce:	460b      	mov	r3, r1
 80029d0:	4610      	mov	r0, r2
 80029d2:	4619      	mov	r1, r3
 80029d4:	f04f 0200 	mov.w	r2, #0
 80029d8:	4b9e      	ldr	r3, [pc, #632]	; (8002c54 <StartBall+0x31c>)
 80029da:	f7fd fc6f 	bl	80002bc <__adddf3>
 80029de:	4602      	mov	r2, r0
 80029e0:	460b      	mov	r3, r1
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f7fe f8b9 	bl	8000b5c <__aeabi_d2iz>
 80029ea:	4603      	mov	r3, r0
 80029ec:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

	if(time2%2) // Une chance sur 2 de partir dans chaque sens
 80029f0:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80029f4:	f003 0301 	and.w	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d005      	beq.n	8002a0a <StartBall+0xd2>
		angle=-angle;
 80029fe:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002a02:	425b      	negs	r3, r3
 8002a04:	b29b      	uxth	r3, r3
 8002a06:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48

  /* Infinite loop */
  for(;;)
  {
	  //Mouvement de la balle
	  x_balle_f += vitesse*sin(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 8002a0a:	4b8d      	ldr	r3, [pc, #564]	; (8002c40 <StartBall+0x308>)
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4618      	mov	r0, r3
 8002a10:	f7fd fdb2 	bl	8000578 <__aeabi_f2d>
 8002a14:	4680      	mov	r8, r0
 8002a16:	4689      	mov	r9, r1
 8002a18:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd99 	bl	8000554 <__aeabi_i2d>
 8002a22:	a385      	add	r3, pc, #532	; (adr r3, 8002c38 <StartBall+0x300>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fdfe 	bl	8000628 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4610      	mov	r0, r2
 8002a32:	4619      	mov	r1, r3
 8002a34:	f04f 0200 	mov.w	r2, #0
 8002a38:	4b87      	ldr	r3, [pc, #540]	; (8002c58 <StartBall+0x320>)
 8002a3a:	f7fd ff1f 	bl	800087c <__aeabi_ddiv>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	ec43 2b17 	vmov	d7, r2, r3
 8002a46:	eeb0 0a47 	vmov.f32	s0, s14
 8002a4a:	eef0 0a67 	vmov.f32	s1, s15
 8002a4e:	f00c fd47 	bl	800f4e0 <sin>
 8002a52:	ec51 0b10 	vmov	r0, r1, d0
 8002a56:	4602      	mov	r2, r0
 8002a58:	460b      	mov	r3, r1
 8002a5a:	f7fd fc2f 	bl	80002bc <__adddf3>
 8002a5e:	4602      	mov	r2, r0
 8002a60:	460b      	mov	r3, r1
 8002a62:	4692      	mov	sl, r2
 8002a64:	469b      	mov	fp, r3
 8002a66:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <StartBall+0x324>)
 8002a68:	781b      	ldrb	r3, [r3, #0]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7fd fd72 	bl	8000554 <__aeabi_i2d>
 8002a70:	f04f 0200 	mov.w	r2, #0
 8002a74:	4b7a      	ldr	r3, [pc, #488]	; (8002c60 <StartBall+0x328>)
 8002a76:	f7fd ff01 	bl	800087c <__aeabi_ddiv>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	4610      	mov	r0, r2
 8002a80:	4619      	mov	r1, r3
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	4b77      	ldr	r3, [pc, #476]	; (8002c64 <StartBall+0x32c>)
 8002a88:	f7fd fc18 	bl	80002bc <__adddf3>
 8002a8c:	4602      	mov	r2, r0
 8002a8e:	460b      	mov	r3, r1
 8002a90:	4650      	mov	r0, sl
 8002a92:	4659      	mov	r1, fp
 8002a94:	f7fd fdc8 	bl	8000628 <__aeabi_dmul>
 8002a98:	4602      	mov	r2, r0
 8002a9a:	460b      	mov	r3, r1
 8002a9c:	4640      	mov	r0, r8
 8002a9e:	4649      	mov	r1, r9
 8002aa0:	f7fd fc0c 	bl	80002bc <__adddf3>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	460b      	mov	r3, r1
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	f7fe f87e 	bl	8000bac <__aeabi_d2f>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	4a63      	ldr	r2, [pc, #396]	; (8002c40 <StartBall+0x308>)
 8002ab4:	6013      	str	r3, [r2, #0]
	  y_balle_f -= vitesse*cos(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 8002ab6:	4b63      	ldr	r3, [pc, #396]	; (8002c44 <StartBall+0x30c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd5c 	bl	8000578 <__aeabi_f2d>
 8002ac0:	4680      	mov	r8, r0
 8002ac2:	4689      	mov	r9, r1
 8002ac4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002ac8:	4618      	mov	r0, r3
 8002aca:	f7fd fd43 	bl	8000554 <__aeabi_i2d>
 8002ace:	a35a      	add	r3, pc, #360	; (adr r3, 8002c38 <StartBall+0x300>)
 8002ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad4:	f7fd fda8 	bl	8000628 <__aeabi_dmul>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f04f 0200 	mov.w	r2, #0
 8002ae4:	4b5c      	ldr	r3, [pc, #368]	; (8002c58 <StartBall+0x320>)
 8002ae6:	f7fd fec9 	bl	800087c <__aeabi_ddiv>
 8002aea:	4602      	mov	r2, r0
 8002aec:	460b      	mov	r3, r1
 8002aee:	ec43 2b17 	vmov	d7, r2, r3
 8002af2:	eeb0 0a47 	vmov.f32	s0, s14
 8002af6:	eef0 0a67 	vmov.f32	s1, s15
 8002afa:	f00c fca1 	bl	800f440 <cos>
 8002afe:	ec51 0b10 	vmov	r0, r1, d0
 8002b02:	4602      	mov	r2, r0
 8002b04:	460b      	mov	r3, r1
 8002b06:	f7fd fbd9 	bl	80002bc <__adddf3>
 8002b0a:	4602      	mov	r2, r0
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	4692      	mov	sl, r2
 8002b10:	469b      	mov	fp, r3
 8002b12:	4b52      	ldr	r3, [pc, #328]	; (8002c5c <StartBall+0x324>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fd fd1c 	bl	8000554 <__aeabi_i2d>
 8002b1c:	f04f 0200 	mov.w	r2, #0
 8002b20:	4b4f      	ldr	r3, [pc, #316]	; (8002c60 <StartBall+0x328>)
 8002b22:	f7fd feab 	bl	800087c <__aeabi_ddiv>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4610      	mov	r0, r2
 8002b2c:	4619      	mov	r1, r3
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	4b4c      	ldr	r3, [pc, #304]	; (8002c64 <StartBall+0x32c>)
 8002b34:	f7fd fbc2 	bl	80002bc <__adddf3>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	460b      	mov	r3, r1
 8002b3c:	4650      	mov	r0, sl
 8002b3e:	4659      	mov	r1, fp
 8002b40:	f7fd fd72 	bl	8000628 <__aeabi_dmul>
 8002b44:	4602      	mov	r2, r0
 8002b46:	460b      	mov	r3, r1
 8002b48:	4640      	mov	r0, r8
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	f7fd fbb4 	bl	80002b8 <__aeabi_dsub>
 8002b50:	4602      	mov	r2, r0
 8002b52:	460b      	mov	r3, r1
 8002b54:	4610      	mov	r0, r2
 8002b56:	4619      	mov	r1, r3
 8002b58:	f7fe f828 	bl	8000bac <__aeabi_d2f>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	4a39      	ldr	r2, [pc, #228]	; (8002c44 <StartBall+0x30c>)
 8002b60:	6013      	str	r3, [r2, #0]

	  x_balle=x_balle_f;
 8002b62:	4b37      	ldr	r3, [pc, #220]	; (8002c40 <StartBall+0x308>)
 8002b64:	edd3 7a00 	vldr	s15, [r3]
 8002b68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b6c:	ee17 3a90 	vmov	r3, s15
 8002b70:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
	  y_balle=y_balle_f;
 8002b74:	4b33      	ldr	r3, [pc, #204]	; (8002c44 <StartBall+0x30c>)
 8002b76:	edd3 7a00 	vldr	s15, [r3]
 8002b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b7e:	ee17 3a90 	vmov	r3, s15
 8002b82:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

	  //Gestion des rebonds sur les bords horizontaux : cadrage vertical des coordonnées de la balle
	  if(y_balle<= radius_balle){
 8002b86:	4b38      	ldr	r3, [pc, #224]	; (8002c68 <StartBall+0x330>)
 8002b88:	781b      	ldrb	r3, [r3, #0]
 8002b8a:	b29b      	uxth	r3, r3
 8002b8c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d826      	bhi.n	8002be2 <StartBall+0x2aa>
		  y_balle_f=radius_balle;
 8002b94:	4b34      	ldr	r3, [pc, #208]	; (8002c68 <StartBall+0x330>)
 8002b96:	781b      	ldrb	r3, [r3, #0]
 8002b98:	ee07 3a90 	vmov	s15, r3
 8002b9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002ba0:	4b28      	ldr	r3, [pc, #160]	; (8002c44 <StartBall+0x30c>)
 8002ba2:	edc3 7a00 	vstr	s15, [r3]
		  y_balle=y_balle_f;
 8002ba6:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <StartBall+0x30c>)
 8002ba8:	edd3 7a00 	vldr	s15, [r3]
 8002bac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002bb0:	ee17 3a90 	vmov	r3, s15
 8002bb4:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  angle=angle>0?180-angle:-180-angle;
 8002bb8:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	dd06      	ble.n	8002bce <StartBall+0x296>
 8002bc0:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002bc4:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	b21b      	sxth	r3, r3
 8002bcc:	e006      	b.n	8002bdc <StartBall+0x2a4>
 8002bce:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002bd2:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	b29b      	uxth	r3, r3
 8002bda:	b21b      	sxth	r3, r3
 8002bdc:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8002be0:	e04d      	b.n	8002c7e <StartBall+0x346>
	  }
	  else if(y_balle>= 271-radius_balle){
 8002be2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002be6:	4b20      	ldr	r3, [pc, #128]	; (8002c68 <StartBall+0x330>)
 8002be8:	781b      	ldrb	r3, [r3, #0]
 8002bea:	4619      	mov	r1, r3
 8002bec:	f240 130f 	movw	r3, #271	; 0x10f
 8002bf0:	1a5b      	subs	r3, r3, r1
 8002bf2:	429a      	cmp	r2, r3
 8002bf4:	db43      	blt.n	8002c7e <StartBall+0x346>
		  y_balle_f=271-radius_balle;
 8002bf6:	4b1c      	ldr	r3, [pc, #112]	; (8002c68 <StartBall+0x330>)
 8002bf8:	781b      	ldrb	r3, [r3, #0]
 8002bfa:	461a      	mov	r2, r3
 8002bfc:	f240 130f 	movw	r3, #271	; 0x10f
 8002c00:	1a9b      	subs	r3, r3, r2
 8002c02:	ee07 3a90 	vmov	s15, r3
 8002c06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c0a:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <StartBall+0x30c>)
 8002c0c:	edc3 7a00 	vstr	s15, [r3]
		  y_balle=y_balle_f;
 8002c10:	4b0c      	ldr	r3, [pc, #48]	; (8002c44 <StartBall+0x30c>)
 8002c12:	edd3 7a00 	vldr	s15, [r3]
 8002c16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002c1a:	ee17 3a90 	vmov	r3, s15
 8002c1e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
		  angle=angle>0?180-angle:-180-angle;
 8002c22:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	dd20      	ble.n	8002c6c <StartBall+0x334>
 8002c2a:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8002c2e:	f1c3 03b4 	rsb	r3, r3, #180	; 0xb4
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	b21b      	sxth	r3, r3
 8002c36:	e020      	b.n	8002c7a <StartBall+0x342>
 8002c38:	f01b866e 	.word	0xf01b866e
 8002c3c:	400921f9 	.word	0x400921f9
 8002c40:	20000034 	.word	0x20000034
 8002c44:	20000038 	.word	0x20000038
 8002c48:	20008ba8 	.word	0x20008ba8
 8002c4c:	20008ae4 	.word	0x20008ae4
 8002c50:	405e0000 	.word	0x405e0000
 8002c54:	403e0000 	.word	0x403e0000
 8002c58:	40668000 	.word	0x40668000
 8002c5c:	20000028 	.word	0x20000028
 8002c60:	40200000 	.word	0x40200000
 8002c64:	3ff00000 	.word	0x3ff00000
 8002c68:	2000003c 	.word	0x2000003c
 8002c6c:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 8002c70:	f06f 03b3 	mvn.w	r3, #179	; 0xb3
 8002c74:	1a9b      	subs	r3, r3, r2
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	b21b      	sxth	r3, r3
 8002c7a:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
	  }

	  //Gestion des rebonds sur les raquettes ou de la perte de la balle : cadrage horizontal des coordonnées de la balle
	  if(angle < 0){
 8002c7e:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	f280 8085 	bge.w	8002d92 <StartBall+0x45a>
		  //Dans le sens droite vers gauche, le rebond doit avoir lieu, s'il existe, sur LRacket
		  if(((x_balle - radius_balle) <= (x_LRacket + width_rackets)) && ((x_balle - radius_balle) >= x_LRacket))
 8002c88:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002c8c:	4ac0      	ldr	r2, [pc, #768]	; (8002f90 <StartBall+0x658>)
 8002c8e:	7812      	ldrb	r2, [r2, #0]
 8002c90:	1a9a      	subs	r2, r3, r2
 8002c92:	4bc0      	ldr	r3, [pc, #768]	; (8002f94 <StartBall+0x65c>)
 8002c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002c98:	3308      	adds	r3, #8
 8002c9a:	429a      	cmp	r2, r3
 8002c9c:	dc4a      	bgt.n	8002d34 <StartBall+0x3fc>
 8002c9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002ca2:	4abb      	ldr	r2, [pc, #748]	; (8002f90 <StartBall+0x658>)
 8002ca4:	7812      	ldrb	r2, [r2, #0]
 8002ca6:	1a9b      	subs	r3, r3, r2
 8002ca8:	4aba      	ldr	r2, [pc, #744]	; (8002f94 <StartBall+0x65c>)
 8002caa:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	db40      	blt.n	8002d34 <StartBall+0x3fc>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002cb2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cb6:	4ab8      	ldr	r2, [pc, #736]	; (8002f98 <StartBall+0x660>)
 8002cb8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	f2c0 80f5 	blt.w	8002eac <StartBall+0x574>
 8002cc2:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002cc6:	4bb4      	ldr	r3, [pc, #720]	; (8002f98 <StartBall+0x660>)
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	3332      	adds	r3, #50	; 0x32
 8002cce:	429a      	cmp	r2, r3
 8002cd0:	f300 80ec 	bgt.w	8002eac <StartBall+0x574>
			  {
				  //Et verticalement "dans" la raquette, il y a rebond, l'angle est calculé selon la position relative de la balle et de la raquette
				  angle= (y_balle-y_LRacket)*1.0/height_rackets * 120 + 30;
 8002cd4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002cd8:	4aaf      	ldr	r2, [pc, #700]	; (8002f98 <StartBall+0x660>)
 8002cda:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002cde:	1a9b      	subs	r3, r3, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7fd fc37 	bl	8000554 <__aeabi_i2d>
 8002ce6:	f04f 0200 	mov.w	r2, #0
 8002cea:	4bac      	ldr	r3, [pc, #688]	; (8002f9c <StartBall+0x664>)
 8002cec:	f7fd fdc6 	bl	800087c <__aeabi_ddiv>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	460b      	mov	r3, r1
 8002cf4:	4610      	mov	r0, r2
 8002cf6:	4619      	mov	r1, r3
 8002cf8:	f04f 0200 	mov.w	r2, #0
 8002cfc:	4ba8      	ldr	r3, [pc, #672]	; (8002fa0 <StartBall+0x668>)
 8002cfe:	f7fd fc93 	bl	8000628 <__aeabi_dmul>
 8002d02:	4602      	mov	r2, r0
 8002d04:	460b      	mov	r3, r1
 8002d06:	4610      	mov	r0, r2
 8002d08:	4619      	mov	r1, r3
 8002d0a:	f04f 0200 	mov.w	r2, #0
 8002d0e:	4ba5      	ldr	r3, [pc, #660]	; (8002fa4 <StartBall+0x66c>)
 8002d10:	f7fd fad4 	bl	80002bc <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff1e 	bl	8000b5c <__aeabi_d2iz>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				  multiplicateur++; // Augmentation de la vitesse à chaque rebond
 8002d26:	4ba0      	ldr	r3, [pc, #640]	; (8002fa8 <StartBall+0x670>)
 8002d28:	781b      	ldrb	r3, [r3, #0]
 8002d2a:	3301      	adds	r3, #1
 8002d2c:	b2da      	uxtb	r2, r3
 8002d2e:	4b9e      	ldr	r3, [pc, #632]	; (8002fa8 <StartBall+0x670>)
 8002d30:	701a      	strb	r2, [r3, #0]
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002d32:	e0bb      	b.n	8002eac <StartBall+0x574>
			  }
		  }
		  else if(x_balle<=radius_balle)
 8002d34:	4b96      	ldr	r3, [pc, #600]	; (8002f90 <StartBall+0x658>)
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b29b      	uxth	r3, r3
 8002d3a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002d3e:	429a      	cmp	r2, r3
 8002d40:	f200 80b7 	bhi.w	8002eb2 <StartBall+0x57a>
		  {
			  //Si la balle touche le bord gauche de l'écran, on a perdu
			  perdu = 1;
 8002d44:	4b99      	ldr	r3, [pc, #612]	; (8002fac <StartBall+0x674>)
 8002d46:	2201      	movs	r2, #1
 8002d48:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002d4a:	4b99      	ldr	r3, [pc, #612]	; (8002fb0 <StartBall+0x678>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d52:	4618      	mov	r0, r3
 8002d54:	f00a f836 	bl	800cdc4 <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_Clear(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002d58:	4b96      	ldr	r3, [pc, #600]	; (8002fb4 <StartBall+0x67c>)
 8002d5a:	781b      	ldrb	r3, [r3, #0]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d102      	bne.n	8002d66 <StartBall+0x42e>
 8002d60:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002d64:	e001      	b.n	8002d6a <StartBall+0x432>
 8002d66:	f04f 33ff 	mov.w	r3, #4294967295
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fd6a 	bl	8003844 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002d70:	4b90      	ldr	r3, [pc, #576]	; (8002fb4 <StartBall+0x67c>)
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d102      	bne.n	8002d7e <StartBall+0x446>
 8002d78:	f04f 33ff 	mov.w	r3, #4294967295
 8002d7c:	e001      	b.n	8002d82 <StartBall+0x44a>
 8002d7e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002d82:	4618      	mov	r0, r3
 8002d84:	f000 fcfc 	bl	8003780 <BSP_LCD_SetTextColor>
			  BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "Perdu ! Appuyez sur reset pour rejouer");
 8002d88:	498b      	ldr	r1, [pc, #556]	; (8002fb8 <StartBall+0x680>)
 8002d8a:	200c      	movs	r0, #12
 8002d8c:	f000 fe8e 	bl	8003aac <BSP_LCD_DisplayStringAtLine>
			  while(1);
 8002d90:	e7fe      	b.n	8002d90 <StartBall+0x458>
		  }
	  }
	  else if(angle > 0){
 8002d92:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	; 0x48
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f340 808b 	ble.w	8002eb2 <StartBall+0x57a>
		  //Dans le sens gauche vers droite, le rebond doit avoir lieu, s'il existe, sur RRacket
		  if(((x_balle + radius_balle) >= x_RRacket) && ((x_balle + radius_balle) <= (x_RRacket + width_rackets)))
 8002d9c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002da0:	4a7b      	ldr	r2, [pc, #492]	; (8002f90 <StartBall+0x658>)
 8002da2:	7812      	ldrb	r2, [r2, #0]
 8002da4:	4413      	add	r3, r2
 8002da6:	4a85      	ldr	r2, [pc, #532]	; (8002fbc <StartBall+0x684>)
 8002da8:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dac:	4293      	cmp	r3, r2
 8002dae:	db4c      	blt.n	8002e4a <StartBall+0x512>
 8002db0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002db4:	4a76      	ldr	r2, [pc, #472]	; (8002f90 <StartBall+0x658>)
 8002db6:	7812      	ldrb	r2, [r2, #0]
 8002db8:	441a      	add	r2, r3
 8002dba:	4b80      	ldr	r3, [pc, #512]	; (8002fbc <StartBall+0x684>)
 8002dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dc0:	3308      	adds	r3, #8
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	dc41      	bgt.n	8002e4a <StartBall+0x512>
		  {
			  //Si l'on est horizontalement "dans" la raquette
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002dc6:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002dca:	4a7d      	ldr	r2, [pc, #500]	; (8002fc0 <StartBall+0x688>)
 8002dcc:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	db6d      	blt.n	8002eb0 <StartBall+0x578>
 8002dd4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8002dd8:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <StartBall+0x688>)
 8002dda:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dde:	3332      	adds	r3, #50	; 0x32
 8002de0:	429a      	cmp	r2, r3
 8002de2:	dc65      	bgt.n	8002eb0 <StartBall+0x578>
			  {
				  //Et verticalement "dans" la raquette, il y a rebond, l'angle est calculé selon la position relative de la balle et de la raquette
				  angle= -((y_balle-y_RRacket)*1.0/height_rackets * 120 + 30);
 8002de4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002de8:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <StartBall+0x688>)
 8002dea:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	4618      	mov	r0, r3
 8002df2:	f7fd fbaf 	bl	8000554 <__aeabi_i2d>
 8002df6:	f04f 0200 	mov.w	r2, #0
 8002dfa:	4b68      	ldr	r3, [pc, #416]	; (8002f9c <StartBall+0x664>)
 8002dfc:	f7fd fd3e 	bl	800087c <__aeabi_ddiv>
 8002e00:	4602      	mov	r2, r0
 8002e02:	460b      	mov	r3, r1
 8002e04:	4610      	mov	r0, r2
 8002e06:	4619      	mov	r1, r3
 8002e08:	f04f 0200 	mov.w	r2, #0
 8002e0c:	4b64      	ldr	r3, [pc, #400]	; (8002fa0 <StartBall+0x668>)
 8002e0e:	f7fd fc0b 	bl	8000628 <__aeabi_dmul>
 8002e12:	4602      	mov	r2, r0
 8002e14:	460b      	mov	r3, r1
 8002e16:	4610      	mov	r0, r2
 8002e18:	4619      	mov	r1, r3
 8002e1a:	f04f 0200 	mov.w	r2, #0
 8002e1e:	4b61      	ldr	r3, [pc, #388]	; (8002fa4 <StartBall+0x66c>)
 8002e20:	f7fd fa4c 	bl	80002bc <__adddf3>
 8002e24:	4602      	mov	r2, r0
 8002e26:	460b      	mov	r3, r1
 8002e28:	4614      	mov	r4, r2
 8002e2a:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 8002e2e:	4620      	mov	r0, r4
 8002e30:	4629      	mov	r1, r5
 8002e32:	f7fd fe93 	bl	8000b5c <__aeabi_d2iz>
 8002e36:	4603      	mov	r3, r0
 8002e38:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				  multiplicateur++; // Augmentation de la vitesse à chaque rebond
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <StartBall+0x670>)
 8002e3e:	781b      	ldrb	r3, [r3, #0]
 8002e40:	3301      	adds	r3, #1
 8002e42:	b2da      	uxtb	r2, r3
 8002e44:	4b58      	ldr	r3, [pc, #352]	; (8002fa8 <StartBall+0x670>)
 8002e46:	701a      	strb	r2, [r3, #0]
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002e48:	e032      	b.n	8002eb0 <StartBall+0x578>
			  }
		  }
		  else if(x_balle>=(959-radius_balle))
 8002e4a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8002e4e:	4b50      	ldr	r3, [pc, #320]	; (8002f90 <StartBall+0x658>)
 8002e50:	781b      	ldrb	r3, [r3, #0]
 8002e52:	4619      	mov	r1, r3
 8002e54:	f240 33bf 	movw	r3, #959	; 0x3bf
 8002e58:	1a5b      	subs	r3, r3, r1
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	db29      	blt.n	8002eb2 <StartBall+0x57a>
		  {
			  //Si la balle touche le bord droit de l'écran, on a perdu
			  perdu = 1;
 8002e5e:	4b53      	ldr	r3, [pc, #332]	; (8002fac <StartBall+0x674>)
 8002e60:	2201      	movs	r2, #1
 8002e62:	701a      	strb	r2, [r3, #0]

			  //Capture de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002e64:	4b52      	ldr	r3, [pc, #328]	; (8002fb0 <StartBall+0x678>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f04f 31ff 	mov.w	r1, #4294967295
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f009 ffa9 	bl	800cdc4 <xQueueSemaphoreTake>

			  //Affichage du message de perte sous le chronomètre
			  BSP_LCD_Clear(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002e72:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <StartBall+0x67c>)
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d102      	bne.n	8002e80 <StartBall+0x548>
 8002e7a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002e7e:	e001      	b.n	8002e84 <StartBall+0x54c>
 8002e80:	f04f 33ff 	mov.w	r3, #4294967295
 8002e84:	4618      	mov	r0, r3
 8002e86:	f000 fcdd 	bl	8003844 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002e8a:	4b4a      	ldr	r3, [pc, #296]	; (8002fb4 <StartBall+0x67c>)
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <StartBall+0x560>
 8002e92:	f04f 33ff 	mov.w	r3, #4294967295
 8002e96:	e001      	b.n	8002e9c <StartBall+0x564>
 8002e98:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f000 fc6f 	bl	8003780 <BSP_LCD_SetTextColor>
			  BSP_LCD_DisplayStringAtLine(12, (uint8_t*) "Perdu ! Appuyez sur reset pour rejouer");
 8002ea2:	4945      	ldr	r1, [pc, #276]	; (8002fb8 <StartBall+0x680>)
 8002ea4:	200c      	movs	r0, #12
 8002ea6:	f000 fe01 	bl	8003aac <BSP_LCD_DisplayStringAtLine>
			  while(1);
 8002eaa:	e7fe      	b.n	8002eaa <StartBall+0x572>
			  if((y_balle >= y_LRacket) && (y_balle <= (y_LRacket + height_rackets)))
 8002eac:	bf00      	nop
 8002eae:	e000      	b.n	8002eb2 <StartBall+0x57a>
			  if((y_balle >= y_RRacket) && (y_balle <= (y_RRacket + height_rackets)))
 8002eb0:	bf00      	nop
		  }
	  }

	  //Affichage de la balle
	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002eb2:	4b3f      	ldr	r3, [pc, #252]	; (8002fb0 <StartBall+0x678>)
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f04f 31ff 	mov.w	r1, #4294967295
 8002eba:	4618      	mov	r0, r3
 8002ebc:	f009 ff82 	bl	800cdc4 <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold <=479){
 8002ec0:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ec4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002ec8:	d216      	bcs.n	8002ef8 <StartBall+0x5c0>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002eca:	4b3a      	ldr	r3, [pc, #232]	; (8002fb4 <StartBall+0x67c>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d102      	bne.n	8002ed8 <StartBall+0x5a0>
 8002ed2:	f04f 33ff 	mov.w	r3, #4294967295
 8002ed6:	e001      	b.n	8002edc <StartBall+0x5a4>
 8002ed8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002edc:	4618      	mov	r0, r3
 8002ede:	f000 fc4f 	bl	8003780 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, radius_balle);
 8002ee2:	4b2b      	ldr	r3, [pc, #172]	; (8002f90 <StartBall+0x658>)
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	b29a      	uxth	r2, r3
 8002ee8:	f8b7 104a 	ldrh.w	r1, [r7, #74]	; 0x4a
 8002eec:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f001 f8c9 	bl	8004088 <BSP_LCD_FillCircle>
 8002ef6:	e02f      	b.n	8002f58 <StartBall+0x620>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002ef8:	4b2e      	ldr	r3, [pc, #184]	; (8002fb4 <StartBall+0x67c>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d102      	bne.n	8002f06 <StartBall+0x5ce>
 8002f00:	f04f 33ff 	mov.w	r3, #4294967295
 8002f04:	e001      	b.n	8002f0a <StartBall+0x5d2>
 8002f06:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 fc38 	bl	8003780 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle_hold+3};
 8002f10:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002f14:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002f16:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f1a:	3303      	adds	r3, #3
 8002f1c:	b29b      	uxth	r3, r3
 8002f1e:	b21b      	sxth	r3, r3
 8002f20:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point2 = {479,y_balle_hold};
 8002f22:	f240 13df 	movw	r3, #479	; 0x1df
 8002f26:	863b      	strh	r3, [r7, #48]	; 0x30
 8002f28:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	; 0x4a
 8002f2c:	867b      	strh	r3, [r7, #50]	; 0x32
		  Point Point3 = {473,y_balle_hold-3};
 8002f2e:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002f32:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8002f34:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8002f38:	3b03      	subs	r3, #3
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	b21b      	sxth	r3, r3
 8002f3e:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  Point Points[3] = {Point1, Point2, Point3};
 8002f40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f42:	623b      	str	r3, [r7, #32]
 8002f44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	62bb      	str	r3, [r7, #40]	; 0x28
		  BSP_LCD_FillPolygon(Points,3);
 8002f4c:	f107 0320 	add.w	r3, r7, #32
 8002f50:	2103      	movs	r1, #3
 8002f52:	4618      	mov	r0, r3
 8002f54:	f001 f938 	bl	80041c8 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle <=479){
 8002f58:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f5c:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002f60:	d230      	bcs.n	8002fc4 <StartBall+0x68c>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002f62:	4b14      	ldr	r3, [pc, #80]	; (8002fb4 <StartBall+0x67c>)
 8002f64:	781b      	ldrb	r3, [r3, #0]
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d102      	bne.n	8002f70 <StartBall+0x638>
 8002f6a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002f6e:	e001      	b.n	8002f74 <StartBall+0x63c>
 8002f70:	f04f 33ff 	mov.w	r3, #4294967295
 8002f74:	4618      	mov	r0, r3
 8002f76:	f000 fc03 	bl	8003780 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, radius_balle);
 8002f7a:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <StartBall+0x658>)
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	b29a      	uxth	r2, r3
 8002f80:	f8b7 104e 	ldrh.w	r1, [r7, #78]	; 0x4e
 8002f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f001 f87d 	bl	8004088 <BSP_LCD_FillCircle>
 8002f8e:	e049      	b.n	8003024 <StartBall+0x6ec>
 8002f90:	2000003c 	.word	0x2000003c
 8002f94:	2000002a 	.word	0x2000002a
 8002f98:	2000002c 	.word	0x2000002c
 8002f9c:	40490000 	.word	0x40490000
 8002fa0:	405e0000 	.word	0x405e0000
 8002fa4:	403e0000 	.word	0x403e0000
 8002fa8:	20000028 	.word	0x20000028
 8002fac:	20000342 	.word	0x20000342
 8002fb0:	20008d0c 	.word	0x20008d0c
 8002fb4:	2000003d 	.word	0x2000003d
 8002fb8:	08010690 	.word	0x08010690
 8002fbc:	2000002e 	.word	0x2000002e
 8002fc0:	20000030 	.word	0x20000030
	  }
	  else{
		  //Afficage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8002fc4:	4b22      	ldr	r3, [pc, #136]	; (8003050 <StartBall+0x718>)
 8002fc6:	781b      	ldrb	r3, [r3, #0]
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d102      	bne.n	8002fd2 <StartBall+0x69a>
 8002fcc:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002fd0:	e001      	b.n	8002fd6 <StartBall+0x69e>
 8002fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f000 fbd2 	bl	8003780 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle+3};
 8002fdc:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002fe0:	83bb      	strh	r3, [r7, #28]
 8002fe2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8002fe6:	3303      	adds	r3, #3
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	b21b      	sxth	r3, r3
 8002fec:	83fb      	strh	r3, [r7, #30]
		  Point Point2 = {479,y_balle};
 8002fee:	f240 13df 	movw	r3, #479	; 0x1df
 8002ff2:	833b      	strh	r3, [r7, #24]
 8002ff4:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8002ff8:	837b      	strh	r3, [r7, #26]
		  Point Point3 = {473,y_balle-3};
 8002ffa:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002ffe:	82bb      	strh	r3, [r7, #20]
 8003000:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003004:	3b03      	subs	r3, #3
 8003006:	b29b      	uxth	r3, r3
 8003008:	b21b      	sxth	r3, r3
 800300a:	82fb      	strh	r3, [r7, #22]

		  Point Points[3] = {Point1, Point2, Point3};
 800300c:	69fb      	ldr	r3, [r7, #28]
 800300e:	60bb      	str	r3, [r7, #8]
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	60fb      	str	r3, [r7, #12]
 8003014:	697b      	ldr	r3, [r7, #20]
 8003016:	613b      	str	r3, [r7, #16]
		  BSP_LCD_FillPolygon(Points,3);
 8003018:	f107 0308 	add.w	r3, r7, #8
 800301c:	2103      	movs	r1, #3
 800301e:	4618      	mov	r0, r3
 8003020:	f001 f8d2 	bl	80041c8 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	  xSemaphoreGive(myMutex_LCDHandle);
 8003024:	4b0b      	ldr	r3, [pc, #44]	; (8003054 <StartBall+0x71c>)
 8003026:	6818      	ldr	r0, [r3, #0]
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2100      	movs	r1, #0
 800302e:	f009 fdc3 	bl	800cbb8 <xQueueGenericSend>

	  //Stockage du dernier emplacement de dessin
	  x_balle_hold = x_balle;
 8003032:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003036:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
	  y_balle_hold = y_balle;
 800303a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800303e:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a

	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003042:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003046:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003048:	4618      	mov	r0, r3
 800304a:	f00a fa77 	bl	800d53c <vTaskDelayUntil>
	  x_balle_f += vitesse*sin(angle*MATH_PI*1.0/180)*(1+multiplicateur*1.0/8);
 800304e:	e4dc      	b.n	8002a0a <StartBall+0xd2>
 8003050:	2000003d 	.word	0x2000003d
 8003054:	20008d0c 	.word	0x20008d0c

08003058 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b084      	sub	sp, #16
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	  //Initialisation de l'état de BP1 et de l'état
	  uint8_t BP1=1;
 8003060:	2301      	movs	r3, #1
 8003062:	73bb      	strb	r3, [r7, #14]
	  uint8_t state=0;
 8003064:	2300      	movs	r3, #0
 8003066:	73fb      	strb	r3, [r7, #15]
	  /* Infinite loop */
	  for(;;)
	  {
		  //Lecture de l'état du BP1
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8003068:	f44f 7180 	mov.w	r1, #256	; 0x100
 800306c:	4834      	ldr	r0, [pc, #208]	; (8003140 <StartBgChanger+0xe8>)
 800306e:	f004 f98d 	bl	800738c <HAL_GPIO_ReadPin>
 8003072:	4603      	mov	r3, r0
 8003074:	73bb      	strb	r3, [r7, #14]

		  //Machine à états
		  switch(state){
 8003076:	7bfb      	ldrb	r3, [r7, #15]
 8003078:	2b02      	cmp	r3, #2
 800307a:	d052      	beq.n	8003122 <StartBgChanger+0xca>
 800307c:	2b02      	cmp	r3, #2
 800307e:	dc59      	bgt.n	8003134 <StartBgChanger+0xdc>
 8003080:	2b00      	cmp	r3, #0
 8003082:	d002      	beq.n	800308a <StartBgChanger+0x32>
 8003084:	2b01      	cmp	r3, #1
 8003086:	d006      	beq.n	8003096 <StartBgChanger+0x3e>
 8003088:	e054      	b.n	8003134 <StartBgChanger+0xdc>
			  case 0:
				  //Attente d'un changement d'état (d'un appui sur BP1)
				  if(!BP1) state = 1;
 800308a:	7bbb      	ldrb	r3, [r7, #14]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d14e      	bne.n	800312e <StartBgChanger+0xd6>
 8003090:	2301      	movs	r3, #1
 8003092:	73fb      	strb	r3, [r7, #15]
				  break;
 8003094:	e04b      	b.n	800312e <StartBgChanger+0xd6>
			  case 1:
				  //Changement de la couleur
				  couleur = !couleur;
 8003096:	4b2b      	ldr	r3, [pc, #172]	; (8003144 <StartBgChanger+0xec>)
 8003098:	781b      	ldrb	r3, [r3, #0]
 800309a:	2b00      	cmp	r3, #0
 800309c:	bf0c      	ite	eq
 800309e:	2301      	moveq	r3, #1
 80030a0:	2300      	movne	r3, #0
 80030a2:	b2db      	uxtb	r3, r3
 80030a4:	461a      	mov	r2, r3
 80030a6:	4b27      	ldr	r3, [pc, #156]	; (8003144 <StartBgChanger+0xec>)
 80030a8:	701a      	strb	r2, [r3, #0]
				  if(couleur==0){
 80030aa:	4b26      	ldr	r3, [pc, #152]	; (8003144 <StartBgChanger+0xec>)
 80030ac:	781b      	ldrb	r3, [r3, #0]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d11a      	bne.n	80030e8 <StartBgChanger+0x90>
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80030b2:	4b25      	ldr	r3, [pc, #148]	; (8003148 <StartBgChanger+0xf0>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f04f 31ff 	mov.w	r1, #4294967295
 80030ba:	4618      	mov	r0, r3
 80030bc:	f009 fe82 	bl	800cdc4 <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en noir sur fond blanc
					  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80030c0:	f04f 30ff 	mov.w	r0, #4294967295
 80030c4:	f000 fbbe 	bl	8003844 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80030c8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80030cc:	f000 fb58 	bl	8003780 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80030d0:	f04f 30ff 	mov.w	r0, #4294967295
 80030d4:	f000 fb6c 	bl	80037b0 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 80030d8:	4b1b      	ldr	r3, [pc, #108]	; (8003148 <StartBgChanger+0xf0>)
 80030da:	6818      	ldr	r0, [r3, #0]
 80030dc:	2300      	movs	r3, #0
 80030de:	2200      	movs	r2, #0
 80030e0:	2100      	movs	r1, #0
 80030e2:	f009 fd69 	bl	800cbb8 <xQueueGenericSend>
 80030e6:	e019      	b.n	800311c <StartBgChanger+0xc4>
				  }
				  else{
					  //Capture de la ressource
					  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80030e8:	4b17      	ldr	r3, [pc, #92]	; (8003148 <StartBgChanger+0xf0>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f04f 31ff 	mov.w	r1, #4294967295
 80030f0:	4618      	mov	r0, r3
 80030f2:	f009 fe67 	bl	800cdc4 <xQueueSemaphoreTake>

					  //Nettoyage et recoloration du LCD en blanc sur fond noir
					  BSP_LCD_Clear(LCD_COLOR_BLACK);
 80030f6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80030fa:	f000 fba3 	bl	8003844 <BSP_LCD_Clear>
					  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80030fe:	f04f 30ff 	mov.w	r0, #4294967295
 8003102:	f000 fb3d 	bl	8003780 <BSP_LCD_SetTextColor>
					  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8003106:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800310a:	f000 fb51 	bl	80037b0 <BSP_LCD_SetBackColor>

					  //Libération de la ressource
					  xSemaphoreGive(myMutex_LCDHandle);
 800310e:	4b0e      	ldr	r3, [pc, #56]	; (8003148 <StartBgChanger+0xf0>)
 8003110:	6818      	ldr	r0, [r3, #0]
 8003112:	2300      	movs	r3, #0
 8003114:	2200      	movs	r2, #0
 8003116:	2100      	movs	r1, #0
 8003118:	f009 fd4e 	bl	800cbb8 <xQueueGenericSend>
				  }

				  //Changement d'état
				  state = 2;
 800311c:	2302      	movs	r3, #2
 800311e:	73fb      	strb	r3, [r7, #15]
				  break;
 8003120:	e008      	b.n	8003134 <StartBgChanger+0xdc>
			  case 2:
				  //Attente d'un changement d'état (relachement du bouton BP1)
				  if(BP1) state = 0;
 8003122:	7bbb      	ldrb	r3, [r7, #14]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d004      	beq.n	8003132 <StartBgChanger+0xda>
 8003128:	2300      	movs	r3, #0
 800312a:	73fb      	strb	r3, [r7, #15]
				  break;
 800312c:	e001      	b.n	8003132 <StartBgChanger+0xda>
				  break;
 800312e:	bf00      	nop
 8003130:	e000      	b.n	8003134 <StartBgChanger+0xdc>
				  break;
 8003132:	bf00      	nop
		  }
	  osDelay(400);
 8003134:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8003138:	f009 fa9b 	bl	800c672 <osDelay>
		  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800313c:	e794      	b.n	8003068 <StartBgChanger+0x10>
 800313e:	bf00      	nop
 8003140:	40020000 	.word	0x40020000
 8003144:	2000003d 	.word	0x2000003d
 8003148:	20008d0c 	.word	0x20008d0c

0800314c <StartTransmit>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTransmit */
void StartTransmit(void const * argument)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b084      	sub	sp, #16
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTransmit */
	uint16_t x_balle = x_balle_f;
 8003154:	4b22      	ldr	r3, [pc, #136]	; (80031e0 <StartTransmit+0x94>)
 8003156:	edd3 7a00 	vldr	s15, [r3]
 800315a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800315e:	ee17 3a90 	vmov	r3, s15
 8003162:	81fb      	strh	r3, [r7, #14]
	uint16_t y_balle = y_balle_f;
 8003164:	4b1f      	ldr	r3, [pc, #124]	; (80031e4 <StartTransmit+0x98>)
 8003166:	edd3 7a00 	vldr	s15, [r3]
 800316a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800316e:	ee17 3a90 	vmov	r3, s15
 8003172:	81bb      	strh	r3, [r7, #12]
  /* Infinite loop */
  for(;;)
  {
	x_balle= x_balle_f;
 8003174:	4b1a      	ldr	r3, [pc, #104]	; (80031e0 <StartTransmit+0x94>)
 8003176:	edd3 7a00 	vldr	s15, [r3]
 800317a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800317e:	ee17 3a90 	vmov	r3, s15
 8003182:	81fb      	strh	r3, [r7, #14]
	y_balle = y_balle_f;
 8003184:	4b17      	ldr	r3, [pc, #92]	; (80031e4 <StartTransmit+0x98>)
 8003186:	edd3 7a00 	vldr	s15, [r3]
 800318a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800318e:	ee17 3a90 	vmov	r3, s15
 8003192:	81bb      	strh	r3, [r7, #12]
	//Transmission du rayon de la balle et des coordonnées de la balle et du drapeau de perte
	txbuffer[0] = radius_balle;
 8003194:	4b14      	ldr	r3, [pc, #80]	; (80031e8 <StartTransmit+0x9c>)
 8003196:	781a      	ldrb	r2, [r3, #0]
 8003198:	4b14      	ldr	r3, [pc, #80]	; (80031ec <StartTransmit+0xa0>)
 800319a:	701a      	strb	r2, [r3, #0]
	txbuffer[1] = (x_balle & 0xFF00) >> 8;
 800319c:	89fb      	ldrh	r3, [r7, #14]
 800319e:	0a1b      	lsrs	r3, r3, #8
 80031a0:	b29b      	uxth	r3, r3
 80031a2:	b2da      	uxtb	r2, r3
 80031a4:	4b11      	ldr	r3, [pc, #68]	; (80031ec <StartTransmit+0xa0>)
 80031a6:	705a      	strb	r2, [r3, #1]
	txbuffer[2] = (x_balle & 0x00FF);
 80031a8:	89fb      	ldrh	r3, [r7, #14]
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	4b0f      	ldr	r3, [pc, #60]	; (80031ec <StartTransmit+0xa0>)
 80031ae:	709a      	strb	r2, [r3, #2]
	txbuffer[3] = (y_balle & 0xFF00) >> 8;
 80031b0:	89bb      	ldrh	r3, [r7, #12]
 80031b2:	0a1b      	lsrs	r3, r3, #8
 80031b4:	b29b      	uxth	r3, r3
 80031b6:	b2da      	uxtb	r2, r3
 80031b8:	4b0c      	ldr	r3, [pc, #48]	; (80031ec <StartTransmit+0xa0>)
 80031ba:	70da      	strb	r2, [r3, #3]
	txbuffer[4] = (y_balle & 0x00FF);
 80031bc:	89bb      	ldrh	r3, [r7, #12]
 80031be:	b2da      	uxtb	r2, r3
 80031c0:	4b0a      	ldr	r3, [pc, #40]	; (80031ec <StartTransmit+0xa0>)
 80031c2:	711a      	strb	r2, [r3, #4]
	txbuffer[5] = perdu;
 80031c4:	4b0a      	ldr	r3, [pc, #40]	; (80031f0 <StartTransmit+0xa4>)
 80031c6:	781a      	ldrb	r2, [r3, #0]
 80031c8:	4b08      	ldr	r3, [pc, #32]	; (80031ec <StartTransmit+0xa0>)
 80031ca:	715a      	strb	r2, [r3, #5]

	  HAL_UART_Transmit_IT(&huart7,txbuffer,6);
 80031cc:	2206      	movs	r2, #6
 80031ce:	4907      	ldr	r1, [pc, #28]	; (80031ec <StartTransmit+0xa0>)
 80031d0:	4808      	ldr	r0, [pc, #32]	; (80031f4 <StartTransmit+0xa8>)
 80031d2:	f008 fa5f 	bl	800b694 <HAL_UART_Transmit_IT>
	  osDelay(20);
 80031d6:	2014      	movs	r0, #20
 80031d8:	f009 fa4b 	bl	800c672 <osDelay>
	x_balle= x_balle_f;
 80031dc:	e7ca      	b.n	8003174 <StartTransmit+0x28>
 80031de:	bf00      	nop
 80031e0:	20000034 	.word	0x20000034
 80031e4:	20000038 	.word	0x20000038
 80031e8:	2000003c 	.word	0x2000003c
 80031ec:	20008b44 	.word	0x20008b44
 80031f0:	20000342 	.word	0x20000342
 80031f4:	2000871c 	.word	0x2000871c

080031f8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b082      	sub	sp, #8
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a04      	ldr	r2, [pc, #16]	; (8003218 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d101      	bne.n	800320e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800320a:	f002 fbcd 	bl	80059a8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800320e:	bf00      	nop
 8003210:	3708      	adds	r7, #8
 8003212:	46bd      	mov	sp, r7
 8003214:	bd80      	pop	{r7, pc}
 8003216:	bf00      	nop
 8003218:	40001000 	.word	0x40001000

0800321c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800321c:	b480      	push	{r7}
 800321e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003220:	b672      	cpsid	i
}
 8003222:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003224:	e7fe      	b.n	8003224 <Error_Handler+0x8>
	...

08003228 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b08c      	sub	sp, #48	; 0x30
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4a51      	ldr	r2, [pc, #324]	; (8003378 <I2Cx_MspInit+0x150>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d14d      	bne.n	80032d4 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8003238:	4b50      	ldr	r3, [pc, #320]	; (800337c <I2Cx_MspInit+0x154>)
 800323a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323c:	4a4f      	ldr	r2, [pc, #316]	; (800337c <I2Cx_MspInit+0x154>)
 800323e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003242:	6313      	str	r3, [r2, #48]	; 0x30
 8003244:	4b4d      	ldr	r3, [pc, #308]	; (800337c <I2Cx_MspInit+0x154>)
 8003246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003248:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800324c:	61bb      	str	r3, [r7, #24]
 800324e:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8003250:	2380      	movs	r3, #128	; 0x80
 8003252:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8003254:	2312      	movs	r3, #18
 8003256:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8003258:	2300      	movs	r3, #0
 800325a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800325c:	2302      	movs	r3, #2
 800325e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8003260:	2304      	movs	r3, #4
 8003262:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003264:	f107 031c 	add.w	r3, r7, #28
 8003268:	4619      	mov	r1, r3
 800326a:	4845      	ldr	r0, [pc, #276]	; (8003380 <I2Cx_MspInit+0x158>)
 800326c:	f003 fdd6 	bl	8006e1c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8003270:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003274:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003276:	f107 031c 	add.w	r3, r7, #28
 800327a:	4619      	mov	r1, r3
 800327c:	4840      	ldr	r0, [pc, #256]	; (8003380 <I2Cx_MspInit+0x158>)
 800327e:	f003 fdcd 	bl	8006e1c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8003282:	4b3e      	ldr	r3, [pc, #248]	; (800337c <I2Cx_MspInit+0x154>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	4a3d      	ldr	r2, [pc, #244]	; (800337c <I2Cx_MspInit+0x154>)
 8003288:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800328c:	6413      	str	r3, [r2, #64]	; 0x40
 800328e:	4b3b      	ldr	r3, [pc, #236]	; (800337c <I2Cx_MspInit+0x154>)
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003296:	617b      	str	r3, [r7, #20]
 8003298:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800329a:	4b38      	ldr	r3, [pc, #224]	; (800337c <I2Cx_MspInit+0x154>)
 800329c:	6a1b      	ldr	r3, [r3, #32]
 800329e:	4a37      	ldr	r2, [pc, #220]	; (800337c <I2Cx_MspInit+0x154>)
 80032a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80032a4:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 80032a6:	4b35      	ldr	r3, [pc, #212]	; (800337c <I2Cx_MspInit+0x154>)
 80032a8:	6a1b      	ldr	r3, [r3, #32]
 80032aa:	4a34      	ldr	r2, [pc, #208]	; (800337c <I2Cx_MspInit+0x154>)
 80032ac:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80032b0:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 80032b2:	2200      	movs	r2, #0
 80032b4:	210f      	movs	r1, #15
 80032b6:	2048      	movs	r0, #72	; 0x48
 80032b8:	f003 f84c 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 80032bc:	2048      	movs	r0, #72	; 0x48
 80032be:	f003 f865 	bl	800638c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 80032c2:	2200      	movs	r2, #0
 80032c4:	210f      	movs	r1, #15
 80032c6:	2049      	movs	r0, #73	; 0x49
 80032c8:	f003 f844 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 80032cc:	2049      	movs	r0, #73	; 0x49
 80032ce:	f003 f85d 	bl	800638c <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 80032d2:	e04d      	b.n	8003370 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80032d4:	4b29      	ldr	r3, [pc, #164]	; (800337c <I2Cx_MspInit+0x154>)
 80032d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d8:	4a28      	ldr	r2, [pc, #160]	; (800337c <I2Cx_MspInit+0x154>)
 80032da:	f043 0302 	orr.w	r3, r3, #2
 80032de:	6313      	str	r3, [r2, #48]	; 0x30
 80032e0:	4b26      	ldr	r3, [pc, #152]	; (800337c <I2Cx_MspInit+0x154>)
 80032e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e4:	f003 0302 	and.w	r3, r3, #2
 80032e8:	613b      	str	r3, [r7, #16]
 80032ea:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 80032ec:	f44f 7380 	mov.w	r3, #256	; 0x100
 80032f0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80032f2:	2312      	movs	r3, #18
 80032f4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80032f6:	2300      	movs	r3, #0
 80032f8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80032fa:	2302      	movs	r3, #2
 80032fc:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80032fe:	2304      	movs	r3, #4
 8003300:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003302:	f107 031c 	add.w	r3, r7, #28
 8003306:	4619      	mov	r1, r3
 8003308:	481e      	ldr	r0, [pc, #120]	; (8003384 <I2Cx_MspInit+0x15c>)
 800330a:	f003 fd87 	bl	8006e1c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 800330e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003312:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8003314:	f107 031c 	add.w	r3, r7, #28
 8003318:	4619      	mov	r1, r3
 800331a:	481a      	ldr	r0, [pc, #104]	; (8003384 <I2Cx_MspInit+0x15c>)
 800331c:	f003 fd7e 	bl	8006e1c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8003320:	4b16      	ldr	r3, [pc, #88]	; (800337c <I2Cx_MspInit+0x154>)
 8003322:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003324:	4a15      	ldr	r2, [pc, #84]	; (800337c <I2Cx_MspInit+0x154>)
 8003326:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800332a:	6413      	str	r3, [r2, #64]	; 0x40
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <I2Cx_MspInit+0x154>)
 800332e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003330:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003334:	60fb      	str	r3, [r7, #12]
 8003336:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 8003338:	4b10      	ldr	r3, [pc, #64]	; (800337c <I2Cx_MspInit+0x154>)
 800333a:	6a1b      	ldr	r3, [r3, #32]
 800333c:	4a0f      	ldr	r2, [pc, #60]	; (800337c <I2Cx_MspInit+0x154>)
 800333e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003342:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 8003344:	4b0d      	ldr	r3, [pc, #52]	; (800337c <I2Cx_MspInit+0x154>)
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	4a0c      	ldr	r2, [pc, #48]	; (800337c <I2Cx_MspInit+0x154>)
 800334a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800334e:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8003350:	2200      	movs	r2, #0
 8003352:	210f      	movs	r1, #15
 8003354:	201f      	movs	r0, #31
 8003356:	f002 fffd 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800335a:	201f      	movs	r0, #31
 800335c:	f003 f816 	bl	800638c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8003360:	2200      	movs	r2, #0
 8003362:	210f      	movs	r1, #15
 8003364:	2020      	movs	r0, #32
 8003366:	f002 fff5 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800336a:	2020      	movs	r0, #32
 800336c:	f003 f80e 	bl	800638c <HAL_NVIC_EnableIRQ>
}
 8003370:	bf00      	nop
 8003372:	3730      	adds	r7, #48	; 0x30
 8003374:	46bd      	mov	sp, r7
 8003376:	bd80      	pop	{r7, pc}
 8003378:	20000344 	.word	0x20000344
 800337c:	40023800 	.word	0x40023800
 8003380:	40021c00 	.word	0x40021c00
 8003384:	40020400 	.word	0x40020400

08003388 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8003390:	6878      	ldr	r0, [r7, #4]
 8003392:	f004 fb1b 	bl	80079cc <HAL_I2C_GetState>
 8003396:	4603      	mov	r3, r0
 8003398:	2b00      	cmp	r3, #0
 800339a:	d125      	bne.n	80033e8 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	4a14      	ldr	r2, [pc, #80]	; (80033f0 <I2Cx_Init+0x68>)
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d103      	bne.n	80033ac <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a13      	ldr	r2, [pc, #76]	; (80033f4 <I2Cx_Init+0x6c>)
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	e002      	b.n	80033b2 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4a12      	ldr	r2, [pc, #72]	; (80033f8 <I2Cx_Init+0x70>)
 80033b0:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a11      	ldr	r2, [pc, #68]	; (80033fc <I2Cx_Init+0x74>)
 80033b6:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2200      	movs	r2, #0
 80033bc:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2201      	movs	r2, #1
 80033c2:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	2200      	movs	r2, #0
 80033c8:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 80033dc:	6878      	ldr	r0, [r7, #4]
 80033de:	f7ff ff23 	bl	8003228 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 80033e2:	6878      	ldr	r0, [r7, #4]
 80033e4:	f004 f804 	bl	80073f0 <HAL_I2C_Init>
  }
}
 80033e8:	bf00      	nop
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}
 80033f0:	20000344 	.word	0x20000344
 80033f4:	40005c00 	.word	0x40005c00
 80033f8:	40005400 	.word	0x40005400
 80033fc:	40912732 	.word	0x40912732

08003400 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08a      	sub	sp, #40	; 0x28
 8003404:	af04      	add	r7, sp, #16
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	4608      	mov	r0, r1
 800340a:	4611      	mov	r1, r2
 800340c:	461a      	mov	r2, r3
 800340e:	4603      	mov	r3, r0
 8003410:	72fb      	strb	r3, [r7, #11]
 8003412:	460b      	mov	r3, r1
 8003414:	813b      	strh	r3, [r7, #8]
 8003416:	4613      	mov	r3, r2
 8003418:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 800341e:	7afb      	ldrb	r3, [r7, #11]
 8003420:	b299      	uxth	r1, r3
 8003422:	88f8      	ldrh	r0, [r7, #6]
 8003424:	893a      	ldrh	r2, [r7, #8]
 8003426:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800342a:	9302      	str	r3, [sp, #8]
 800342c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800342e:	9301      	str	r3, [sp, #4]
 8003430:	6a3b      	ldr	r3, [r7, #32]
 8003432:	9300      	str	r3, [sp, #0]
 8003434:	4603      	mov	r3, r0
 8003436:	68f8      	ldr	r0, [r7, #12]
 8003438:	f004 f9ae 	bl	8007798 <HAL_I2C_Mem_Read>
 800343c:	4603      	mov	r3, r0
 800343e:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 8003440:	7dfb      	ldrb	r3, [r7, #23]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d004      	beq.n	8003450 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 8003446:	7afb      	ldrb	r3, [r7, #11]
 8003448:	4619      	mov	r1, r3
 800344a:	68f8      	ldr	r0, [r7, #12]
 800344c:	f000 f832 	bl	80034b4 <I2Cx_Error>
  }
  return status;    
 8003450:	7dfb      	ldrb	r3, [r7, #23]
}
 8003452:	4618      	mov	r0, r3
 8003454:	3718      	adds	r7, #24
 8003456:	46bd      	mov	sp, r7
 8003458:	bd80      	pop	{r7, pc}

0800345a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800345a:	b580      	push	{r7, lr}
 800345c:	b08a      	sub	sp, #40	; 0x28
 800345e:	af04      	add	r7, sp, #16
 8003460:	60f8      	str	r0, [r7, #12]
 8003462:	4608      	mov	r0, r1
 8003464:	4611      	mov	r1, r2
 8003466:	461a      	mov	r2, r3
 8003468:	4603      	mov	r3, r0
 800346a:	72fb      	strb	r3, [r7, #11]
 800346c:	460b      	mov	r3, r1
 800346e:	813b      	strh	r3, [r7, #8]
 8003470:	4613      	mov	r3, r2
 8003472:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8003478:	7afb      	ldrb	r3, [r7, #11]
 800347a:	b299      	uxth	r1, r3
 800347c:	88f8      	ldrh	r0, [r7, #6]
 800347e:	893a      	ldrh	r2, [r7, #8]
 8003480:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003484:	9302      	str	r3, [sp, #8]
 8003486:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003488:	9301      	str	r3, [sp, #4]
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	9300      	str	r3, [sp, #0]
 800348e:	4603      	mov	r3, r0
 8003490:	68f8      	ldr	r0, [r7, #12]
 8003492:	f004 f86d 	bl	8007570 <HAL_I2C_Mem_Write>
 8003496:	4603      	mov	r3, r0
 8003498:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800349a:	7dfb      	ldrb	r3, [r7, #23]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d004      	beq.n	80034aa <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 80034a0:	7afb      	ldrb	r3, [r7, #11]
 80034a2:	4619      	mov	r1, r3
 80034a4:	68f8      	ldr	r0, [r7, #12]
 80034a6:	f000 f805 	bl	80034b4 <I2Cx_Error>
  }
  return status;
 80034aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	3718      	adds	r7, #24
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}

080034b4 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 80034b4:	b580      	push	{r7, lr}
 80034b6:	b082      	sub	sp, #8
 80034b8:	af00      	add	r7, sp, #0
 80034ba:	6078      	str	r0, [r7, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f004 f825 	bl	8007510 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 80034c6:	6878      	ldr	r0, [r7, #4]
 80034c8:	f7ff ff5e 	bl	8003388 <I2Cx_Init>
}
 80034cc:	bf00      	nop
 80034ce:	3708      	adds	r7, #8
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 80034d8:	4802      	ldr	r0, [pc, #8]	; (80034e4 <TS_IO_Init+0x10>)
 80034da:	f7ff ff55 	bl	8003388 <I2Cx_Init>
}
 80034de:	bf00      	nop
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	20000344 	.word	0x20000344

080034e8 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b084      	sub	sp, #16
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	4603      	mov	r3, r0
 80034f0:	71fb      	strb	r3, [r7, #7]
 80034f2:	460b      	mov	r3, r1
 80034f4:	71bb      	strb	r3, [r7, #6]
 80034f6:	4613      	mov	r3, r2
 80034f8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80034fa:	79bb      	ldrb	r3, [r7, #6]
 80034fc:	b29a      	uxth	r2, r3
 80034fe:	79f9      	ldrb	r1, [r7, #7]
 8003500:	2301      	movs	r3, #1
 8003502:	9301      	str	r3, [sp, #4]
 8003504:	1d7b      	adds	r3, r7, #5
 8003506:	9300      	str	r3, [sp, #0]
 8003508:	2301      	movs	r3, #1
 800350a:	4803      	ldr	r0, [pc, #12]	; (8003518 <TS_IO_Write+0x30>)
 800350c:	f7ff ffa5 	bl	800345a <I2Cx_WriteMultiple>
}
 8003510:	bf00      	nop
 8003512:	3708      	adds	r7, #8
 8003514:	46bd      	mov	sp, r7
 8003516:	bd80      	pop	{r7, pc}
 8003518:	20000344 	.word	0x20000344

0800351c <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b086      	sub	sp, #24
 8003520:	af02      	add	r7, sp, #8
 8003522:	4603      	mov	r3, r0
 8003524:	460a      	mov	r2, r1
 8003526:	71fb      	strb	r3, [r7, #7]
 8003528:	4613      	mov	r3, r2
 800352a:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 800352c:	2300      	movs	r3, #0
 800352e:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 8003530:	79bb      	ldrb	r3, [r7, #6]
 8003532:	b29a      	uxth	r2, r3
 8003534:	79f9      	ldrb	r1, [r7, #7]
 8003536:	2301      	movs	r3, #1
 8003538:	9301      	str	r3, [sp, #4]
 800353a:	f107 030f 	add.w	r3, r7, #15
 800353e:	9300      	str	r3, [sp, #0]
 8003540:	2301      	movs	r3, #1
 8003542:	4804      	ldr	r0, [pc, #16]	; (8003554 <TS_IO_Read+0x38>)
 8003544:	f7ff ff5c 	bl	8003400 <I2Cx_ReadMultiple>

  return read_value;
 8003548:	7bfb      	ldrb	r3, [r7, #15]
}
 800354a:	4618      	mov	r0, r3
 800354c:	3710      	adds	r7, #16
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	20000344 	.word	0x20000344

08003558 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8003560:	6878      	ldr	r0, [r7, #4]
 8003562:	f002 fa41 	bl	80059e8 <HAL_Delay>
}
 8003566:	bf00      	nop
 8003568:	3708      	adds	r7, #8
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
	...

08003570 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8003574:	4b31      	ldr	r3, [pc, #196]	; (800363c <BSP_LCD_Init+0xcc>)
 8003576:	2228      	movs	r2, #40	; 0x28
 8003578:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800357a:	4b30      	ldr	r3, [pc, #192]	; (800363c <BSP_LCD_Init+0xcc>)
 800357c:	2209      	movs	r2, #9
 800357e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003580:	4b2e      	ldr	r3, [pc, #184]	; (800363c <BSP_LCD_Init+0xcc>)
 8003582:	2235      	movs	r2, #53	; 0x35
 8003584:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8003586:	4b2d      	ldr	r3, [pc, #180]	; (800363c <BSP_LCD_Init+0xcc>)
 8003588:	220b      	movs	r2, #11
 800358a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800358c:	4b2b      	ldr	r3, [pc, #172]	; (800363c <BSP_LCD_Init+0xcc>)
 800358e:	f240 121b 	movw	r2, #283	; 0x11b
 8003592:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8003594:	4b29      	ldr	r3, [pc, #164]	; (800363c <BSP_LCD_Init+0xcc>)
 8003596:	f240 2215 	movw	r2, #533	; 0x215
 800359a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800359c:	4b27      	ldr	r3, [pc, #156]	; (800363c <BSP_LCD_Init+0xcc>)
 800359e:	f240 121d 	movw	r2, #285	; 0x11d
 80035a2:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 80035a4:	4b25      	ldr	r3, [pc, #148]	; (800363c <BSP_LCD_Init+0xcc>)
 80035a6:	f240 2235 	movw	r2, #565	; 0x235
 80035aa:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 80035ac:	2100      	movs	r1, #0
 80035ae:	4823      	ldr	r0, [pc, #140]	; (800363c <BSP_LCD_Init+0xcc>)
 80035b0:	f000 ffe6 	bl	8004580 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 80035b4:	4b21      	ldr	r3, [pc, #132]	; (800363c <BSP_LCD_Init+0xcc>)
 80035b6:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80035ba:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 80035bc:	4b1f      	ldr	r3, [pc, #124]	; (800363c <BSP_LCD_Init+0xcc>)
 80035be:	f44f 7288 	mov.w	r2, #272	; 0x110
 80035c2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 80035c4:	4b1d      	ldr	r3, [pc, #116]	; (800363c <BSP_LCD_Init+0xcc>)
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 80035cc:	4b1b      	ldr	r3, [pc, #108]	; (800363c <BSP_LCD_Init+0xcc>)
 80035ce:	2200      	movs	r2, #0
 80035d0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 80035d4:	4b19      	ldr	r3, [pc, #100]	; (800363c <BSP_LCD_Init+0xcc>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 80035dc:	4b17      	ldr	r3, [pc, #92]	; (800363c <BSP_LCD_Init+0xcc>)
 80035de:	2200      	movs	r2, #0
 80035e0:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 80035e2:	4b16      	ldr	r3, [pc, #88]	; (800363c <BSP_LCD_Init+0xcc>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 80035e8:	4b14      	ldr	r3, [pc, #80]	; (800363c <BSP_LCD_Init+0xcc>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 80035ee:	4b13      	ldr	r3, [pc, #76]	; (800363c <BSP_LCD_Init+0xcc>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <BSP_LCD_Init+0xcc>)
 80035f6:	4a12      	ldr	r2, [pc, #72]	; (8003640 <BSP_LCD_Init+0xd0>)
 80035f8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80035fa:	4810      	ldr	r0, [pc, #64]	; (800363c <BSP_LCD_Init+0xcc>)
 80035fc:	f004 fe78 	bl	80082f0 <HAL_LTDC_GetState>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d103      	bne.n	800360e <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 8003606:	2100      	movs	r1, #0
 8003608:	480c      	ldr	r0, [pc, #48]	; (800363c <BSP_LCD_Init+0xcc>)
 800360a:	f000 fedf 	bl	80043cc <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 800360e:	480b      	ldr	r0, [pc, #44]	; (800363c <BSP_LCD_Init+0xcc>)
 8003610:	f004 fc9e 	bl	8007f50 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8003614:	2201      	movs	r2, #1
 8003616:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800361a:	480a      	ldr	r0, [pc, #40]	; (8003644 <BSP_LCD_Init+0xd4>)
 800361c:	f003 fece 	bl	80073bc <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8003620:	2201      	movs	r2, #1
 8003622:	2108      	movs	r1, #8
 8003624:	4808      	ldr	r0, [pc, #32]	; (8003648 <BSP_LCD_Init+0xd8>)
 8003626:	f003 fec9 	bl	80073bc <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800362a:	f001 f989 	bl	8004940 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 800362e:	4807      	ldr	r0, [pc, #28]	; (800364c <BSP_LCD_Init+0xdc>)
 8003630:	f000 f8d8 	bl	80037e4 <BSP_LCD_SetFont>
  
  return LCD_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	bd80      	pop	{r7, pc}
 800363a:	bf00      	nop
 800363c:	20008d7c 	.word	0x20008d7c
 8003640:	40016800 	.word	0x40016800
 8003644:	40022000 	.word	0x40022000
 8003648:	40022800 	.word	0x40022800
 800364c:	20000040 	.word	0x20000040

08003650 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8003650:	b480      	push	{r7}
 8003652:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8003654:	4b06      	ldr	r3, [pc, #24]	; (8003670 <BSP_LCD_GetXSize+0x20>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	4a06      	ldr	r2, [pc, #24]	; (8003674 <BSP_LCD_GetXSize+0x24>)
 800365a:	2134      	movs	r1, #52	; 0x34
 800365c:	fb01 f303 	mul.w	r3, r1, r3
 8003660:	4413      	add	r3, r2
 8003662:	3360      	adds	r3, #96	; 0x60
 8003664:	681b      	ldr	r3, [r3, #0]
}
 8003666:	4618      	mov	r0, r3
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	200003d0 	.word	0x200003d0
 8003674:	20008d7c 	.word	0x20008d7c

08003678 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8003678:	b480      	push	{r7}
 800367a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800367c:	4b06      	ldr	r3, [pc, #24]	; (8003698 <BSP_LCD_GetYSize+0x20>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a06      	ldr	r2, [pc, #24]	; (800369c <BSP_LCD_GetYSize+0x24>)
 8003682:	2134      	movs	r1, #52	; 0x34
 8003684:	fb01 f303 	mul.w	r3, r1, r3
 8003688:	4413      	add	r3, r2
 800368a:	3364      	adds	r3, #100	; 0x64
 800368c:	681b      	ldr	r3, [r3, #0]
}
 800368e:	4618      	mov	r0, r3
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr
 8003698:	200003d0 	.word	0x200003d0
 800369c:	20008d7c 	.word	0x20008d7c

080036a0 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 80036a0:	b580      	push	{r7, lr}
 80036a2:	b090      	sub	sp, #64	; 0x40
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	4603      	mov	r3, r0
 80036a8:	6039      	str	r1, [r7, #0]
 80036aa:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 80036b0:	f7ff ffce 	bl	8003650 <BSP_LCD_GetXSize>
 80036b4:	4603      	mov	r3, r0
 80036b6:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 80036b8:	2300      	movs	r3, #0
 80036ba:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 80036bc:	f7ff ffdc 	bl	8003678 <BSP_LCD_GetYSize>
 80036c0:	4603      	mov	r3, r0
 80036c2:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 80036c4:	2300      	movs	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 80036cc:	23ff      	movs	r3, #255	; 0xff
 80036ce:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 80036d0:	2300      	movs	r3, #0
 80036d2:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 80036da:	2300      	movs	r3, #0
 80036dc:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 80036e0:	2300      	movs	r3, #0
 80036e2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80036e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80036ea:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80036ec:	2307      	movs	r3, #7
 80036ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80036f0:	f7ff ffae 	bl	8003650 <BSP_LCD_GetXSize>
 80036f4:	4603      	mov	r3, r0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80036f8:	f7ff ffbe 	bl	8003678 <BSP_LCD_GetYSize>
 80036fc:	4603      	mov	r3, r0
 80036fe:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8003700:	88fa      	ldrh	r2, [r7, #6]
 8003702:	f107 030c 	add.w	r3, r7, #12
 8003706:	4619      	mov	r1, r3
 8003708:	4812      	ldr	r0, [pc, #72]	; (8003754 <BSP_LCD_LayerDefaultInit+0xb4>)
 800370a:	f004 fdb3 	bl	8008274 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 800370e:	88fa      	ldrh	r2, [r7, #6]
 8003710:	4911      	ldr	r1, [pc, #68]	; (8003758 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003712:	4613      	mov	r3, r2
 8003714:	005b      	lsls	r3, r3, #1
 8003716:	4413      	add	r3, r2
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	440b      	add	r3, r1
 800371c:	3304      	adds	r3, #4
 800371e:	f04f 32ff 	mov.w	r2, #4294967295
 8003722:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003724:	88fa      	ldrh	r2, [r7, #6]
 8003726:	490c      	ldr	r1, [pc, #48]	; (8003758 <BSP_LCD_LayerDefaultInit+0xb8>)
 8003728:	4613      	mov	r3, r2
 800372a:	005b      	lsls	r3, r3, #1
 800372c:	4413      	add	r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	3308      	adds	r3, #8
 8003734:	4a09      	ldr	r2, [pc, #36]	; (800375c <BSP_LCD_LayerDefaultInit+0xbc>)
 8003736:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003738:	88fa      	ldrh	r2, [r7, #6]
 800373a:	4907      	ldr	r1, [pc, #28]	; (8003758 <BSP_LCD_LayerDefaultInit+0xb8>)
 800373c:	4613      	mov	r3, r2
 800373e:	005b      	lsls	r3, r3, #1
 8003740:	4413      	add	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3740      	adds	r7, #64	; 0x40
 8003750:	46bd      	mov	sp, r7
 8003752:	bd80      	pop	{r7, pc}
 8003754:	20008d7c 	.word	0x20008d7c
 8003758:	200003d4 	.word	0x200003d4
 800375c:	20000040 	.word	0x20000040

08003760 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8003768:	4a04      	ldr	r2, [pc, #16]	; (800377c <BSP_LCD_SelectLayer+0x1c>)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6013      	str	r3, [r2, #0]
} 
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
 800377a:	bf00      	nop
 800377c:	200003d0 	.word	0x200003d0

08003780 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8003788:	4b07      	ldr	r3, [pc, #28]	; (80037a8 <BSP_LCD_SetTextColor+0x28>)
 800378a:	681a      	ldr	r2, [r3, #0]
 800378c:	4907      	ldr	r1, [pc, #28]	; (80037ac <BSP_LCD_SetTextColor+0x2c>)
 800378e:	4613      	mov	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	440b      	add	r3, r1
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	601a      	str	r2, [r3, #0]
}
 800379c:	bf00      	nop
 800379e:	370c      	adds	r7, #12
 80037a0:	46bd      	mov	sp, r7
 80037a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a6:	4770      	bx	lr
 80037a8:	200003d0 	.word	0x200003d0
 80037ac:	200003d4 	.word	0x200003d4

080037b0 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 80037b8:	4b08      	ldr	r3, [pc, #32]	; (80037dc <BSP_LCD_SetBackColor+0x2c>)
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	4908      	ldr	r1, [pc, #32]	; (80037e0 <BSP_LCD_SetBackColor+0x30>)
 80037be:	4613      	mov	r3, r2
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	4413      	add	r3, r2
 80037c4:	009b      	lsls	r3, r3, #2
 80037c6:	440b      	add	r3, r1
 80037c8:	3304      	adds	r3, #4
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	bf00      	nop
 80037d0:	370c      	adds	r7, #12
 80037d2:	46bd      	mov	sp, r7
 80037d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d8:	4770      	bx	lr
 80037da:	bf00      	nop
 80037dc:	200003d0 	.word	0x200003d0
 80037e0:	200003d4 	.word	0x200003d4

080037e4 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 80037e4:	b480      	push	{r7}
 80037e6:	b083      	sub	sp, #12
 80037e8:	af00      	add	r7, sp, #0
 80037ea:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 80037ec:	4b08      	ldr	r3, [pc, #32]	; (8003810 <BSP_LCD_SetFont+0x2c>)
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	4908      	ldr	r1, [pc, #32]	; (8003814 <BSP_LCD_SetFont+0x30>)
 80037f2:	4613      	mov	r3, r2
 80037f4:	005b      	lsls	r3, r3, #1
 80037f6:	4413      	add	r3, r2
 80037f8:	009b      	lsls	r3, r3, #2
 80037fa:	440b      	add	r3, r1
 80037fc:	3308      	adds	r3, #8
 80037fe:	687a      	ldr	r2, [r7, #4]
 8003800:	601a      	str	r2, [r3, #0]
}
 8003802:	bf00      	nop
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr
 800380e:	bf00      	nop
 8003810:	200003d0 	.word	0x200003d0
 8003814:	200003d4 	.word	0x200003d4

08003818 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 8003818:	b480      	push	{r7}
 800381a:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 800381c:	4b07      	ldr	r3, [pc, #28]	; (800383c <BSP_LCD_GetFont+0x24>)
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4907      	ldr	r1, [pc, #28]	; (8003840 <BSP_LCD_GetFont+0x28>)
 8003822:	4613      	mov	r3, r2
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4413      	add	r3, r2
 8003828:	009b      	lsls	r3, r3, #2
 800382a:	440b      	add	r3, r1
 800382c:	3308      	adds	r3, #8
 800382e:	681b      	ldr	r3, [r3, #0]
}
 8003830:	4618      	mov	r0, r3
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	200003d0 	.word	0x200003d0
 8003840:	200003d4 	.word	0x200003d4

08003844 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 8003844:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003846:	b085      	sub	sp, #20
 8003848:	af02      	add	r7, sp, #8
 800384a:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 800384c:	4b0f      	ldr	r3, [pc, #60]	; (800388c <BSP_LCD_Clear+0x48>)
 800384e:	681c      	ldr	r4, [r3, #0]
 8003850:	4b0e      	ldr	r3, [pc, #56]	; (800388c <BSP_LCD_Clear+0x48>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	4a0e      	ldr	r2, [pc, #56]	; (8003890 <BSP_LCD_Clear+0x4c>)
 8003856:	2134      	movs	r1, #52	; 0x34
 8003858:	fb01 f303 	mul.w	r3, r1, r3
 800385c:	4413      	add	r3, r2
 800385e:	335c      	adds	r3, #92	; 0x5c
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	461e      	mov	r6, r3
 8003864:	f7ff fef4 	bl	8003650 <BSP_LCD_GetXSize>
 8003868:	4605      	mov	r5, r0
 800386a:	f7ff ff05 	bl	8003678 <BSP_LCD_GetYSize>
 800386e:	4602      	mov	r2, r0
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	9301      	str	r3, [sp, #4]
 8003874:	2300      	movs	r3, #0
 8003876:	9300      	str	r3, [sp, #0]
 8003878:	4613      	mov	r3, r2
 800387a:	462a      	mov	r2, r5
 800387c:	4631      	mov	r1, r6
 800387e:	4620      	mov	r0, r4
 8003880:	f001 f812 	bl	80048a8 <LL_FillBuffer>
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800388c:	200003d0 	.word	0x200003d0
 8003890:	20008d7c 	.word	0x20008d7c

08003894 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8003894:	b590      	push	{r4, r7, lr}
 8003896:	b083      	sub	sp, #12
 8003898:	af00      	add	r7, sp, #0
 800389a:	4603      	mov	r3, r0
 800389c:	80fb      	strh	r3, [r7, #6]
 800389e:	460b      	mov	r3, r1
 80038a0:	80bb      	strh	r3, [r7, #4]
 80038a2:	4613      	mov	r3, r2
 80038a4:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80038a6:	4b1b      	ldr	r3, [pc, #108]	; (8003914 <BSP_LCD_DisplayChar+0x80>)
 80038a8:	681a      	ldr	r2, [r3, #0]
 80038aa:	491b      	ldr	r1, [pc, #108]	; (8003918 <BSP_LCD_DisplayChar+0x84>)
 80038ac:	4613      	mov	r3, r2
 80038ae:	005b      	lsls	r3, r3, #1
 80038b0:	4413      	add	r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	3308      	adds	r3, #8
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	6819      	ldr	r1, [r3, #0]
 80038bc:	78fb      	ldrb	r3, [r7, #3]
 80038be:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80038c2:	4b14      	ldr	r3, [pc, #80]	; (8003914 <BSP_LCD_DisplayChar+0x80>)
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	4c14      	ldr	r4, [pc, #80]	; (8003918 <BSP_LCD_DisplayChar+0x84>)
 80038c8:	4613      	mov	r3, r2
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	4413      	add	r3, r2
 80038ce:	009b      	lsls	r3, r3, #2
 80038d0:	4423      	add	r3, r4
 80038d2:	3308      	adds	r3, #8
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80038d8:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80038dc:	4b0d      	ldr	r3, [pc, #52]	; (8003914 <BSP_LCD_DisplayChar+0x80>)
 80038de:	681a      	ldr	r2, [r3, #0]
 80038e0:	4c0d      	ldr	r4, [pc, #52]	; (8003918 <BSP_LCD_DisplayChar+0x84>)
 80038e2:	4613      	mov	r3, r2
 80038e4:	005b      	lsls	r3, r3, #1
 80038e6:	4413      	add	r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4423      	add	r3, r4
 80038ec:	3308      	adds	r3, #8
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	889b      	ldrh	r3, [r3, #4]
 80038f2:	3307      	adds	r3, #7
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	da00      	bge.n	80038fa <BSP_LCD_DisplayChar+0x66>
 80038f8:	3307      	adds	r3, #7
 80038fa:	10db      	asrs	r3, r3, #3
 80038fc:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8003900:	18ca      	adds	r2, r1, r3
 8003902:	88b9      	ldrh	r1, [r7, #4]
 8003904:	88fb      	ldrh	r3, [r7, #6]
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fe56 	bl	80045b8 <DrawChar>
}
 800390c:	bf00      	nop
 800390e:	370c      	adds	r7, #12
 8003910:	46bd      	mov	sp, r7
 8003912:	bd90      	pop	{r4, r7, pc}
 8003914:	200003d0 	.word	0x200003d0
 8003918:	200003d4 	.word	0x200003d4

0800391c <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 800391c:	b5b0      	push	{r4, r5, r7, lr}
 800391e:	b088      	sub	sp, #32
 8003920:	af00      	add	r7, sp, #0
 8003922:	60ba      	str	r2, [r7, #8]
 8003924:	461a      	mov	r2, r3
 8003926:	4603      	mov	r3, r0
 8003928:	81fb      	strh	r3, [r7, #14]
 800392a:	460b      	mov	r3, r1
 800392c:	81bb      	strh	r3, [r7, #12]
 800392e:	4613      	mov	r3, r2
 8003930:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8003932:	2301      	movs	r3, #1
 8003934:	83fb      	strh	r3, [r7, #30]
 8003936:	2300      	movs	r3, #0
 8003938:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 800393a:	2300      	movs	r3, #0
 800393c:	61bb      	str	r3, [r7, #24]
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8003946:	e002      	b.n	800394e <BSP_LCD_DisplayStringAt+0x32>
 8003948:	69bb      	ldr	r3, [r7, #24]
 800394a:	3301      	adds	r3, #1
 800394c:	61bb      	str	r3, [r7, #24]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	1c5a      	adds	r2, r3, #1
 8003952:	617a      	str	r2, [r7, #20]
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d1f6      	bne.n	8003948 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800395a:	f7ff fe79 	bl	8003650 <BSP_LCD_GetXSize>
 800395e:	4601      	mov	r1, r0
 8003960:	4b50      	ldr	r3, [pc, #320]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 8003962:	681a      	ldr	r2, [r3, #0]
 8003964:	4850      	ldr	r0, [pc, #320]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003966:	4613      	mov	r3, r2
 8003968:	005b      	lsls	r3, r3, #1
 800396a:	4413      	add	r3, r2
 800396c:	009b      	lsls	r3, r3, #2
 800396e:	4403      	add	r3, r0
 8003970:	3308      	adds	r3, #8
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	889b      	ldrh	r3, [r3, #4]
 8003976:	fbb1 f3f3 	udiv	r3, r1, r3
 800397a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800397c:	79fb      	ldrb	r3, [r7, #7]
 800397e:	2b03      	cmp	r3, #3
 8003980:	d01c      	beq.n	80039bc <BSP_LCD_DisplayStringAt+0xa0>
 8003982:	2b03      	cmp	r3, #3
 8003984:	dc33      	bgt.n	80039ee <BSP_LCD_DisplayStringAt+0xd2>
 8003986:	2b01      	cmp	r3, #1
 8003988:	d002      	beq.n	8003990 <BSP_LCD_DisplayStringAt+0x74>
 800398a:	2b02      	cmp	r3, #2
 800398c:	d019      	beq.n	80039c2 <BSP_LCD_DisplayStringAt+0xa6>
 800398e:	e02e      	b.n	80039ee <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8003990:	693a      	ldr	r2, [r7, #16]
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	1ad1      	subs	r1, r2, r3
 8003996:	4b43      	ldr	r3, [pc, #268]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	4843      	ldr	r0, [pc, #268]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 800399c:	4613      	mov	r3, r2
 800399e:	005b      	lsls	r3, r3, #1
 80039a0:	4413      	add	r3, r2
 80039a2:	009b      	lsls	r3, r3, #2
 80039a4:	4403      	add	r3, r0
 80039a6:	3308      	adds	r3, #8
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	889b      	ldrh	r3, [r3, #4]
 80039ac:	fb03 f301 	mul.w	r3, r3, r1
 80039b0:	085b      	lsrs	r3, r3, #1
 80039b2:	b29a      	uxth	r2, r3
 80039b4:	89fb      	ldrh	r3, [r7, #14]
 80039b6:	4413      	add	r3, r2
 80039b8:	83fb      	strh	r3, [r7, #30]
      break;
 80039ba:	e01b      	b.n	80039f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 80039bc:	89fb      	ldrh	r3, [r7, #14]
 80039be:	83fb      	strh	r3, [r7, #30]
      break;
 80039c0:	e018      	b.n	80039f4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 80039c2:	693a      	ldr	r2, [r7, #16]
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	1ad3      	subs	r3, r2, r3
 80039c8:	b299      	uxth	r1, r3
 80039ca:	4b36      	ldr	r3, [pc, #216]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	4836      	ldr	r0, [pc, #216]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 80039d0:	4613      	mov	r3, r2
 80039d2:	005b      	lsls	r3, r3, #1
 80039d4:	4413      	add	r3, r2
 80039d6:	009b      	lsls	r3, r3, #2
 80039d8:	4403      	add	r3, r0
 80039da:	3308      	adds	r3, #8
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	889b      	ldrh	r3, [r3, #4]
 80039e0:	fb11 f303 	smulbb	r3, r1, r3
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	89fb      	ldrh	r3, [r7, #14]
 80039e8:	1ad3      	subs	r3, r2, r3
 80039ea:	83fb      	strh	r3, [r7, #30]
      break;
 80039ec:	e002      	b.n	80039f4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 80039ee:	89fb      	ldrh	r3, [r7, #14]
 80039f0:	83fb      	strh	r3, [r7, #30]
      break;
 80039f2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80039f4:	8bfb      	ldrh	r3, [r7, #30]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d003      	beq.n	8003a02 <BSP_LCD_DisplayStringAt+0xe6>
 80039fa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	da1d      	bge.n	8003a3e <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 8003a02:	2301      	movs	r3, #1
 8003a04:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a06:	e01a      	b.n	8003a3e <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	781a      	ldrb	r2, [r3, #0]
 8003a0c:	89b9      	ldrh	r1, [r7, #12]
 8003a0e:	8bfb      	ldrh	r3, [r7, #30]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff3f 	bl	8003894 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8003a16:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	4923      	ldr	r1, [pc, #140]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	4413      	add	r3, r2
 8003a22:	009b      	lsls	r3, r3, #2
 8003a24:	440b      	add	r3, r1
 8003a26:	3308      	adds	r3, #8
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	889a      	ldrh	r2, [r3, #4]
 8003a2c:	8bfb      	ldrh	r3, [r7, #30]
 8003a2e:	4413      	add	r3, r2
 8003a30:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60bb      	str	r3, [r7, #8]
    i++;
 8003a38:	8bbb      	ldrh	r3, [r7, #28]
 8003a3a:	3301      	adds	r3, #1
 8003a3c:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	781b      	ldrb	r3, [r3, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	bf14      	ite	ne
 8003a46:	2301      	movne	r3, #1
 8003a48:	2300      	moveq	r3, #0
 8003a4a:	b2dc      	uxtb	r4, r3
 8003a4c:	f7ff fe00 	bl	8003650 <BSP_LCD_GetXSize>
 8003a50:	8bb9      	ldrh	r1, [r7, #28]
 8003a52:	4b14      	ldr	r3, [pc, #80]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	4d14      	ldr	r5, [pc, #80]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	005b      	lsls	r3, r3, #1
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	442b      	add	r3, r5
 8003a62:	3308      	adds	r3, #8
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	889b      	ldrh	r3, [r3, #4]
 8003a68:	fb03 f301 	mul.w	r3, r3, r1
 8003a6c:	1ac3      	subs	r3, r0, r3
 8003a6e:	b299      	uxth	r1, r3
 8003a70:	4b0c      	ldr	r3, [pc, #48]	; (8003aa4 <BSP_LCD_DisplayStringAt+0x188>)
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <BSP_LCD_DisplayStringAt+0x18c>)
 8003a76:	4613      	mov	r3, r2
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	4413      	add	r3, r2
 8003a7c:	009b      	lsls	r3, r3, #2
 8003a7e:	4403      	add	r3, r0
 8003a80:	3308      	adds	r3, #8
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	889b      	ldrh	r3, [r3, #4]
 8003a86:	4299      	cmp	r1, r3
 8003a88:	bf2c      	ite	cs
 8003a8a:	2301      	movcs	r3, #1
 8003a8c:	2300      	movcc	r3, #0
 8003a8e:	b2db      	uxtb	r3, r3
 8003a90:	4023      	ands	r3, r4
 8003a92:	b2db      	uxtb	r3, r3
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d1b7      	bne.n	8003a08 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8003a98:	bf00      	nop
 8003a9a:	bf00      	nop
 8003a9c:	3720      	adds	r7, #32
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bdb0      	pop	{r4, r5, r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	200003d0 	.word	0x200003d0
 8003aa8:	200003d4 	.word	0x200003d4

08003aac <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b082      	sub	sp, #8
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	6039      	str	r1, [r7, #0]
 8003ab6:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8003ab8:	f7ff feae 	bl	8003818 <BSP_LCD_GetFont>
 8003abc:	4603      	mov	r3, r0
 8003abe:	88db      	ldrh	r3, [r3, #6]
 8003ac0:	88fa      	ldrh	r2, [r7, #6]
 8003ac2:	fb12 f303 	smulbb	r3, r2, r3
 8003ac6:	b299      	uxth	r1, r3
 8003ac8:	2303      	movs	r3, #3
 8003aca:	683a      	ldr	r2, [r7, #0]
 8003acc:	2000      	movs	r0, #0
 8003ace:	f7ff ff25 	bl	800391c <BSP_LCD_DisplayStringAt>
}
 8003ad2:	bf00      	nop
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
	...

08003adc <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8003adc:	b5b0      	push	{r4, r5, r7, lr}
 8003ade:	b086      	sub	sp, #24
 8003ae0:	af02      	add	r7, sp, #8
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	80fb      	strh	r3, [r7, #6]
 8003ae6:	460b      	mov	r3, r1
 8003ae8:	80bb      	strh	r3, [r7, #4]
 8003aea:	4613      	mov	r3, r2
 8003aec:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8003aee:	2300      	movs	r3, #0
 8003af0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003af2:	4b26      	ldr	r3, [pc, #152]	; (8003b8c <BSP_LCD_DrawHLine+0xb0>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4a26      	ldr	r2, [pc, #152]	; (8003b90 <BSP_LCD_DrawHLine+0xb4>)
 8003af8:	2134      	movs	r1, #52	; 0x34
 8003afa:	fb01 f303 	mul.w	r3, r1, r3
 8003afe:	4413      	add	r3, r2
 8003b00:	3348      	adds	r3, #72	; 0x48
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d114      	bne.n	8003b32 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b08:	4b20      	ldr	r3, [pc, #128]	; (8003b8c <BSP_LCD_DrawHLine+0xb0>)
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	4a20      	ldr	r2, [pc, #128]	; (8003b90 <BSP_LCD_DrawHLine+0xb4>)
 8003b0e:	2134      	movs	r1, #52	; 0x34
 8003b10:	fb01 f303 	mul.w	r3, r1, r3
 8003b14:	4413      	add	r3, r2
 8003b16:	335c      	adds	r3, #92	; 0x5c
 8003b18:	681c      	ldr	r4, [r3, #0]
 8003b1a:	f7ff fd99 	bl	8003650 <BSP_LCD_GetXSize>
 8003b1e:	4602      	mov	r2, r0
 8003b20:	88bb      	ldrh	r3, [r7, #4]
 8003b22:	fb03 f202 	mul.w	r2, r3, r2
 8003b26:	88fb      	ldrh	r3, [r7, #6]
 8003b28:	4413      	add	r3, r2
 8003b2a:	005b      	lsls	r3, r3, #1
 8003b2c:	4423      	add	r3, r4
 8003b2e:	60fb      	str	r3, [r7, #12]
 8003b30:	e013      	b.n	8003b5a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003b32:	4b16      	ldr	r3, [pc, #88]	; (8003b8c <BSP_LCD_DrawHLine+0xb0>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a16      	ldr	r2, [pc, #88]	; (8003b90 <BSP_LCD_DrawHLine+0xb4>)
 8003b38:	2134      	movs	r1, #52	; 0x34
 8003b3a:	fb01 f303 	mul.w	r3, r1, r3
 8003b3e:	4413      	add	r3, r2
 8003b40:	335c      	adds	r3, #92	; 0x5c
 8003b42:	681c      	ldr	r4, [r3, #0]
 8003b44:	f7ff fd84 	bl	8003650 <BSP_LCD_GetXSize>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	88bb      	ldrh	r3, [r7, #4]
 8003b4c:	fb03 f202 	mul.w	r2, r3, r2
 8003b50:	88fb      	ldrh	r3, [r7, #6]
 8003b52:	4413      	add	r3, r2
 8003b54:	009b      	lsls	r3, r3, #2
 8003b56:	4423      	add	r3, r4
 8003b58:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8003b5a:	4b0c      	ldr	r3, [pc, #48]	; (8003b8c <BSP_LCD_DrawHLine+0xb0>)
 8003b5c:	6818      	ldr	r0, [r3, #0]
 8003b5e:	68f9      	ldr	r1, [r7, #12]
 8003b60:	887c      	ldrh	r4, [r7, #2]
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <BSP_LCD_DrawHLine+0xb0>)
 8003b64:	681a      	ldr	r2, [r3, #0]
 8003b66:	4d0b      	ldr	r5, [pc, #44]	; (8003b94 <BSP_LCD_DrawHLine+0xb8>)
 8003b68:	4613      	mov	r3, r2
 8003b6a:	005b      	lsls	r3, r3, #1
 8003b6c:	4413      	add	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	442b      	add	r3, r5
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	9301      	str	r3, [sp, #4]
 8003b76:	2300      	movs	r3, #0
 8003b78:	9300      	str	r3, [sp, #0]
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	4622      	mov	r2, r4
 8003b7e:	f000 fe93 	bl	80048a8 <LL_FillBuffer>
}
 8003b82:	bf00      	nop
 8003b84:	3710      	adds	r7, #16
 8003b86:	46bd      	mov	sp, r7
 8003b88:	bdb0      	pop	{r4, r5, r7, pc}
 8003b8a:	bf00      	nop
 8003b8c:	200003d0 	.word	0x200003d0
 8003b90:	20008d7c 	.word	0x20008d7c
 8003b94:	200003d4 	.word	0x200003d4

08003b98 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8003b98:	b590      	push	{r4, r7, lr}
 8003b9a:	b08b      	sub	sp, #44	; 0x2c
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	4604      	mov	r4, r0
 8003ba0:	4608      	mov	r0, r1
 8003ba2:	4611      	mov	r1, r2
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4623      	mov	r3, r4
 8003ba8:	80fb      	strh	r3, [r7, #6]
 8003baa:	4603      	mov	r3, r0
 8003bac:	80bb      	strh	r3, [r7, #4]
 8003bae:	460b      	mov	r3, r1
 8003bb0:	807b      	strh	r3, [r7, #2]
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	823b      	strh	r3, [r7, #16]
 8003bba:	2300      	movs	r3, #0
 8003bbc:	81fb      	strh	r3, [r7, #14]
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	847b      	strh	r3, [r7, #34]	; 0x22
 8003bca:	2300      	movs	r3, #0
 8003bcc:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8003bce:	2300      	movs	r3, #0
 8003bd0:	83fb      	strh	r3, [r7, #30]
 8003bd2:	2300      	movs	r3, #0
 8003bd4:	83bb      	strh	r3, [r7, #28]
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	837b      	strh	r3, [r7, #26]
 8003bda:	2300      	movs	r3, #0
 8003bdc:	833b      	strh	r3, [r7, #24]
 8003bde:	2300      	movs	r3, #0
 8003be0:	82fb      	strh	r3, [r7, #22]
 8003be2:	2300      	movs	r3, #0
 8003be4:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003be6:	2300      	movs	r3, #0
 8003be8:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8003bea:	887a      	ldrh	r2, [r7, #2]
 8003bec:	88fb      	ldrh	r3, [r7, #6]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	bfb8      	it	lt
 8003bf4:	425b      	neglt	r3, r3
 8003bf6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003bf8:	883a      	ldrh	r2, [r7, #0]
 8003bfa:	88bb      	ldrh	r3, [r7, #4]
 8003bfc:	1ad3      	subs	r3, r2, r3
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	bfb8      	it	lt
 8003c02:	425b      	neglt	r3, r3
 8003c04:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003c06:	88fb      	ldrh	r3, [r7, #6]
 8003c08:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003c0a:	88bb      	ldrh	r3, [r7, #4]
 8003c0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003c0e:	887a      	ldrh	r2, [r7, #2]
 8003c10:	88fb      	ldrh	r3, [r7, #6]
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d304      	bcc.n	8003c20 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8003c16:	2301      	movs	r3, #1
 8003c18:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	843b      	strh	r3, [r7, #32]
 8003c1e:	e005      	b.n	8003c2c <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c24:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003c26:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c2a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003c2c:	883a      	ldrh	r2, [r7, #0]
 8003c2e:	88bb      	ldrh	r3, [r7, #4]
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d304      	bcc.n	8003c3e <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8003c34:	2301      	movs	r3, #1
 8003c36:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003c38:	2301      	movs	r3, #1
 8003c3a:	83bb      	strh	r3, [r7, #28]
 8003c3c:	e005      	b.n	8003c4a <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003c3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c42:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003c44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c48:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003c4a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003c4e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c52:	429a      	cmp	r2, r3
 8003c54:	db11      	blt.n	8003c7a <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003c56:	2300      	movs	r3, #0
 8003c58:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003c5e:	8a3b      	ldrh	r3, [r7, #16]
 8003c60:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8003c62:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	da00      	bge.n	8003c6c <BSP_LCD_DrawLine+0xd4>
 8003c6a:	3301      	adds	r3, #1
 8003c6c:	105b      	asrs	r3, r3, #1
 8003c6e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003c70:	89fb      	ldrh	r3, [r7, #14]
 8003c72:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8003c74:	8a3b      	ldrh	r3, [r7, #16]
 8003c76:	82bb      	strh	r3, [r7, #20]
 8003c78:	e010      	b.n	8003c9c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003c7a:	2300      	movs	r3, #0
 8003c7c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003c7e:	2300      	movs	r3, #0
 8003c80:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8003c82:	89fb      	ldrh	r3, [r7, #14]
 8003c84:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8003c86:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	da00      	bge.n	8003c90 <BSP_LCD_DrawLine+0xf8>
 8003c8e:	3301      	adds	r3, #1
 8003c90:	105b      	asrs	r3, r3, #1
 8003c92:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8003c94:	8a3b      	ldrh	r3, [r7, #16]
 8003c96:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8003c98:	89fb      	ldrh	r3, [r7, #14]
 8003c9a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	827b      	strh	r3, [r7, #18]
 8003ca0:	e037      	b.n	8003d12 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8003ca2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8003ca4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8003ca6:	4b20      	ldr	r3, [pc, #128]	; (8003d28 <BSP_LCD_DrawLine+0x190>)
 8003ca8:	681a      	ldr	r2, [r3, #0]
 8003caa:	4c20      	ldr	r4, [pc, #128]	; (8003d2c <BSP_LCD_DrawLine+0x194>)
 8003cac:	4613      	mov	r3, r2
 8003cae:	005b      	lsls	r3, r3, #1
 8003cb0:	4413      	add	r3, r2
 8003cb2:	009b      	lsls	r3, r3, #2
 8003cb4:	4423      	add	r3, r4
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	461a      	mov	r2, r3
 8003cba:	f000 f923 	bl	8003f04 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8003cbe:	8b3a      	ldrh	r2, [r7, #24]
 8003cc0:	8afb      	ldrh	r3, [r7, #22]
 8003cc2:	4413      	add	r3, r2
 8003cc4:	b29b      	uxth	r3, r3
 8003cc6:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8003cc8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8003ccc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003cd0:	429a      	cmp	r2, r3
 8003cd2:	db0e      	blt.n	8003cf2 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8003cd4:	8b3a      	ldrh	r2, [r7, #24]
 8003cd6:	8b7b      	ldrh	r3, [r7, #26]
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	b29b      	uxth	r3, r3
 8003cdc:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8003cde:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003ce0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003ce2:	4413      	add	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8003ce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cea:	8bfb      	ldrh	r3, [r7, #30]
 8003cec:	4413      	add	r3, r2
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8003cf2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003cf4:	8c3b      	ldrh	r3, [r7, #32]
 8003cf6:	4413      	add	r3, r2
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8003cfc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003cfe:	8bbb      	ldrh	r3, [r7, #28]
 8003d00:	4413      	add	r3, r2
 8003d02:	b29b      	uxth	r3, r3
 8003d04:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003d06:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003d0a:	b29b      	uxth	r3, r3
 8003d0c:	3301      	adds	r3, #1
 8003d0e:	b29b      	uxth	r3, r3
 8003d10:	827b      	strh	r3, [r7, #18]
 8003d12:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003d16:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003d1a:	429a      	cmp	r2, r3
 8003d1c:	ddc1      	ble.n	8003ca2 <BSP_LCD_DrawLine+0x10a>
  }
}
 8003d1e:	bf00      	nop
 8003d20:	bf00      	nop
 8003d22:	372c      	adds	r7, #44	; 0x2c
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd90      	pop	{r4, r7, pc}
 8003d28:	200003d0 	.word	0x200003d0
 8003d2c:	200003d4 	.word	0x200003d4

08003d30 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003d30:	b590      	push	{r4, r7, lr}
 8003d32:	b087      	sub	sp, #28
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	4603      	mov	r3, r0
 8003d38:	80fb      	strh	r3, [r7, #6]
 8003d3a:	460b      	mov	r3, r1
 8003d3c:	80bb      	strh	r3, [r7, #4]
 8003d3e:	4613      	mov	r3, r2
 8003d40:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003d42:	887b      	ldrh	r3, [r7, #2]
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	f1c3 0303 	rsb	r3, r3, #3
 8003d4a:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003d50:	887b      	ldrh	r3, [r7, #2]
 8003d52:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8003d54:	e0c7      	b.n	8003ee6 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003d56:	693b      	ldr	r3, [r7, #16]
 8003d58:	b29a      	uxth	r2, r3
 8003d5a:	88fb      	ldrh	r3, [r7, #6]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	b298      	uxth	r0, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	b29b      	uxth	r3, r3
 8003d64:	88ba      	ldrh	r2, [r7, #4]
 8003d66:	1ad3      	subs	r3, r2, r3
 8003d68:	b299      	uxth	r1, r3
 8003d6a:	4b64      	ldr	r3, [pc, #400]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	4c64      	ldr	r4, [pc, #400]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003d70:	4613      	mov	r3, r2
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	4413      	add	r3, r2
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	4423      	add	r3, r4
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	461a      	mov	r2, r3
 8003d7e:	f000 f8c1 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	b29b      	uxth	r3, r3
 8003d86:	88fa      	ldrh	r2, [r7, #6]
 8003d88:	1ad3      	subs	r3, r2, r3
 8003d8a:	b298      	uxth	r0, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	b29b      	uxth	r3, r3
 8003d90:	88ba      	ldrh	r2, [r7, #4]
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	b299      	uxth	r1, r3
 8003d96:	4b59      	ldr	r3, [pc, #356]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003d98:	681a      	ldr	r2, [r3, #0]
 8003d9a:	4c59      	ldr	r4, [pc, #356]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003d9c:	4613      	mov	r3, r2
 8003d9e:	005b      	lsls	r3, r3, #1
 8003da0:	4413      	add	r3, r2
 8003da2:	009b      	lsls	r3, r3, #2
 8003da4:	4423      	add	r3, r4
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	461a      	mov	r2, r3
 8003daa:	f000 f8ab 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	b29a      	uxth	r2, r3
 8003db2:	88fb      	ldrh	r3, [r7, #6]
 8003db4:	4413      	add	r3, r2
 8003db6:	b298      	uxth	r0, r3
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	b29b      	uxth	r3, r3
 8003dbc:	88ba      	ldrh	r2, [r7, #4]
 8003dbe:	1ad3      	subs	r3, r2, r3
 8003dc0:	b299      	uxth	r1, r3
 8003dc2:	4b4e      	ldr	r3, [pc, #312]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003dc4:	681a      	ldr	r2, [r3, #0]
 8003dc6:	4c4e      	ldr	r4, [pc, #312]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	4423      	add	r3, r4
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	461a      	mov	r2, r3
 8003dd6:	f000 f895 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	b29b      	uxth	r3, r3
 8003dde:	88fa      	ldrh	r2, [r7, #6]
 8003de0:	1ad3      	subs	r3, r2, r3
 8003de2:	b298      	uxth	r0, r3
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	88ba      	ldrh	r2, [r7, #4]
 8003dea:	1ad3      	subs	r3, r2, r3
 8003dec:	b299      	uxth	r1, r3
 8003dee:	4b43      	ldr	r3, [pc, #268]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	4c43      	ldr	r4, [pc, #268]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003df4:	4613      	mov	r3, r2
 8003df6:	005b      	lsls	r3, r3, #1
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	4423      	add	r3, r4
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	461a      	mov	r2, r3
 8003e02:	f000 f87f 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	b29a      	uxth	r2, r3
 8003e0a:	88fb      	ldrh	r3, [r7, #6]
 8003e0c:	4413      	add	r3, r2
 8003e0e:	b298      	uxth	r0, r3
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	b29a      	uxth	r2, r3
 8003e14:	88bb      	ldrh	r3, [r7, #4]
 8003e16:	4413      	add	r3, r2
 8003e18:	b299      	uxth	r1, r3
 8003e1a:	4b38      	ldr	r3, [pc, #224]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	4c38      	ldr	r4, [pc, #224]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003e20:	4613      	mov	r3, r2
 8003e22:	005b      	lsls	r3, r3, #1
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	4423      	add	r3, r4
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	461a      	mov	r2, r3
 8003e2e:	f000 f869 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	1ad3      	subs	r3, r2, r3
 8003e3a:	b298      	uxth	r0, r3
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	88bb      	ldrh	r3, [r7, #4]
 8003e42:	4413      	add	r3, r2
 8003e44:	b299      	uxth	r1, r3
 8003e46:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003e48:	681a      	ldr	r2, [r3, #0]
 8003e4a:	4c2d      	ldr	r4, [pc, #180]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003e4c:	4613      	mov	r3, r2
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	4413      	add	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4423      	add	r3, r4
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	461a      	mov	r2, r3
 8003e5a:	f000 f853 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	b29a      	uxth	r2, r3
 8003e62:	88fb      	ldrh	r3, [r7, #6]
 8003e64:	4413      	add	r3, r2
 8003e66:	b298      	uxth	r0, r3
 8003e68:	693b      	ldr	r3, [r7, #16]
 8003e6a:	b29a      	uxth	r2, r3
 8003e6c:	88bb      	ldrh	r3, [r7, #4]
 8003e6e:	4413      	add	r3, r2
 8003e70:	b299      	uxth	r1, r3
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	4c22      	ldr	r4, [pc, #136]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003e78:	4613      	mov	r3, r2
 8003e7a:	005b      	lsls	r3, r3, #1
 8003e7c:	4413      	add	r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4423      	add	r3, r4
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f000 f83d 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	b29b      	uxth	r3, r3
 8003e8e:	88fa      	ldrh	r2, [r7, #6]
 8003e90:	1ad3      	subs	r3, r2, r3
 8003e92:	b298      	uxth	r0, r3
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	b29a      	uxth	r2, r3
 8003e98:	88bb      	ldrh	r3, [r7, #4]
 8003e9a:	4413      	add	r3, r2
 8003e9c:	b299      	uxth	r1, r3
 8003e9e:	4b17      	ldr	r3, [pc, #92]	; (8003efc <BSP_LCD_DrawCircle+0x1cc>)
 8003ea0:	681a      	ldr	r2, [r3, #0]
 8003ea2:	4c17      	ldr	r4, [pc, #92]	; (8003f00 <BSP_LCD_DrawCircle+0x1d0>)
 8003ea4:	4613      	mov	r3, r2
 8003ea6:	005b      	lsls	r3, r3, #1
 8003ea8:	4413      	add	r3, r2
 8003eaa:	009b      	lsls	r3, r3, #2
 8003eac:	4423      	add	r3, r4
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	461a      	mov	r2, r3
 8003eb2:	f000 f827 	bl	8003f04 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	da06      	bge.n	8003eca <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8003ebc:	693b      	ldr	r3, [r7, #16]
 8003ebe:	009a      	lsls	r2, r3, #2
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4413      	add	r3, r2
 8003ec4:	3306      	adds	r3, #6
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	e00a      	b.n	8003ee0 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	009a      	lsls	r2, r3, #2
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	4413      	add	r3, r2
 8003ed6:	330a      	adds	r3, #10
 8003ed8:	617b      	str	r3, [r7, #20]
      current_y--;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	3b01      	subs	r3, #1
 8003ede:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003ee6:	693a      	ldr	r2, [r7, #16]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	429a      	cmp	r2, r3
 8003eec:	f67f af33 	bls.w	8003d56 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8003ef0:	bf00      	nop
 8003ef2:	bf00      	nop
 8003ef4:	371c      	adds	r7, #28
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	bd90      	pop	{r4, r7, pc}
 8003efa:	bf00      	nop
 8003efc:	200003d0 	.word	0x200003d0
 8003f00:	200003d4 	.word	0x200003d4

08003f04 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8003f04:	b5b0      	push	{r4, r5, r7, lr}
 8003f06:	b082      	sub	sp, #8
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	4603      	mov	r3, r0
 8003f0c:	603a      	str	r2, [r7, #0]
 8003f0e:	80fb      	strh	r3, [r7, #6]
 8003f10:	460b      	mov	r3, r1
 8003f12:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003f14:	4b1d      	ldr	r3, [pc, #116]	; (8003f8c <BSP_LCD_DrawPixel+0x88>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	4a1d      	ldr	r2, [pc, #116]	; (8003f90 <BSP_LCD_DrawPixel+0x8c>)
 8003f1a:	2134      	movs	r1, #52	; 0x34
 8003f1c:	fb01 f303 	mul.w	r3, r1, r3
 8003f20:	4413      	add	r3, r2
 8003f22:	3348      	adds	r3, #72	; 0x48
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d116      	bne.n	8003f58 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8003f2a:	4b18      	ldr	r3, [pc, #96]	; (8003f8c <BSP_LCD_DrawPixel+0x88>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4a18      	ldr	r2, [pc, #96]	; (8003f90 <BSP_LCD_DrawPixel+0x8c>)
 8003f30:	2134      	movs	r1, #52	; 0x34
 8003f32:	fb01 f303 	mul.w	r3, r1, r3
 8003f36:	4413      	add	r3, r2
 8003f38:	335c      	adds	r3, #92	; 0x5c
 8003f3a:	681c      	ldr	r4, [r3, #0]
 8003f3c:	88bd      	ldrh	r5, [r7, #4]
 8003f3e:	f7ff fb87 	bl	8003650 <BSP_LCD_GetXSize>
 8003f42:	4603      	mov	r3, r0
 8003f44:	fb03 f205 	mul.w	r2, r3, r5
 8003f48:	88fb      	ldrh	r3, [r7, #6]
 8003f4a:	4413      	add	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4423      	add	r3, r4
 8003f50:	683a      	ldr	r2, [r7, #0]
 8003f52:	b292      	uxth	r2, r2
 8003f54:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8003f56:	e015      	b.n	8003f84 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8003f58:	4b0c      	ldr	r3, [pc, #48]	; (8003f8c <BSP_LCD_DrawPixel+0x88>)
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a0c      	ldr	r2, [pc, #48]	; (8003f90 <BSP_LCD_DrawPixel+0x8c>)
 8003f5e:	2134      	movs	r1, #52	; 0x34
 8003f60:	fb01 f303 	mul.w	r3, r1, r3
 8003f64:	4413      	add	r3, r2
 8003f66:	335c      	adds	r3, #92	; 0x5c
 8003f68:	681c      	ldr	r4, [r3, #0]
 8003f6a:	88bd      	ldrh	r5, [r7, #4]
 8003f6c:	f7ff fb70 	bl	8003650 <BSP_LCD_GetXSize>
 8003f70:	4603      	mov	r3, r0
 8003f72:	fb03 f205 	mul.w	r2, r3, r5
 8003f76:	88fb      	ldrh	r3, [r7, #6]
 8003f78:	4413      	add	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4423      	add	r3, r4
 8003f7e:	461a      	mov	r2, r3
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	6013      	str	r3, [r2, #0]
}
 8003f84:	bf00      	nop
 8003f86:	3708      	adds	r7, #8
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bdb0      	pop	{r4, r5, r7, pc}
 8003f8c:	200003d0 	.word	0x200003d0
 8003f90:	20008d7c 	.word	0x20008d7c

08003f94 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8003f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f98:	b086      	sub	sp, #24
 8003f9a:	af02      	add	r7, sp, #8
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	4608      	mov	r0, r1
 8003fa0:	4611      	mov	r1, r2
 8003fa2:	461a      	mov	r2, r3
 8003fa4:	4623      	mov	r3, r4
 8003fa6:	80fb      	strh	r3, [r7, #6]
 8003fa8:	4603      	mov	r3, r0
 8003faa:	80bb      	strh	r3, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003fb8:	4b30      	ldr	r3, [pc, #192]	; (800407c <BSP_LCD_FillRect+0xe8>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	4930      	ldr	r1, [pc, #192]	; (8004080 <BSP_LCD_FillRect+0xec>)
 8003fbe:	4613      	mov	r3, r2
 8003fc0:	005b      	lsls	r3, r3, #1
 8003fc2:	4413      	add	r3, r2
 8003fc4:	009b      	lsls	r3, r3, #2
 8003fc6:	440b      	add	r3, r1
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4618      	mov	r0, r3
 8003fcc:	f7ff fbd8 	bl	8003780 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003fd0:	4b2a      	ldr	r3, [pc, #168]	; (800407c <BSP_LCD_FillRect+0xe8>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a2b      	ldr	r2, [pc, #172]	; (8004084 <BSP_LCD_FillRect+0xf0>)
 8003fd6:	2134      	movs	r1, #52	; 0x34
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	4413      	add	r3, r2
 8003fde:	3348      	adds	r3, #72	; 0x48
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	2b02      	cmp	r3, #2
 8003fe4:	d114      	bne.n	8004010 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003fe6:	4b25      	ldr	r3, [pc, #148]	; (800407c <BSP_LCD_FillRect+0xe8>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a26      	ldr	r2, [pc, #152]	; (8004084 <BSP_LCD_FillRect+0xf0>)
 8003fec:	2134      	movs	r1, #52	; 0x34
 8003fee:	fb01 f303 	mul.w	r3, r1, r3
 8003ff2:	4413      	add	r3, r2
 8003ff4:	335c      	adds	r3, #92	; 0x5c
 8003ff6:	681c      	ldr	r4, [r3, #0]
 8003ff8:	f7ff fb2a 	bl	8003650 <BSP_LCD_GetXSize>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	88bb      	ldrh	r3, [r7, #4]
 8004000:	fb03 f202 	mul.w	r2, r3, r2
 8004004:	88fb      	ldrh	r3, [r7, #6]
 8004006:	4413      	add	r3, r2
 8004008:	005b      	lsls	r3, r3, #1
 800400a:	4423      	add	r3, r4
 800400c:	60fb      	str	r3, [r7, #12]
 800400e:	e013      	b.n	8004038 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004010:	4b1a      	ldr	r3, [pc, #104]	; (800407c <BSP_LCD_FillRect+0xe8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a1b      	ldr	r2, [pc, #108]	; (8004084 <BSP_LCD_FillRect+0xf0>)
 8004016:	2134      	movs	r1, #52	; 0x34
 8004018:	fb01 f303 	mul.w	r3, r1, r3
 800401c:	4413      	add	r3, r2
 800401e:	335c      	adds	r3, #92	; 0x5c
 8004020:	681c      	ldr	r4, [r3, #0]
 8004022:	f7ff fb15 	bl	8003650 <BSP_LCD_GetXSize>
 8004026:	4602      	mov	r2, r0
 8004028:	88bb      	ldrh	r3, [r7, #4]
 800402a:	fb03 f202 	mul.w	r2, r3, r2
 800402e:	88fb      	ldrh	r3, [r7, #6]
 8004030:	4413      	add	r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4423      	add	r3, r4
 8004036:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8004038:	4b10      	ldr	r3, [pc, #64]	; (800407c <BSP_LCD_FillRect+0xe8>)
 800403a:	681c      	ldr	r4, [r3, #0]
 800403c:	68fd      	ldr	r5, [r7, #12]
 800403e:	887e      	ldrh	r6, [r7, #2]
 8004040:	f8b7 8000 	ldrh.w	r8, [r7]
 8004044:	f7ff fb04 	bl	8003650 <BSP_LCD_GetXSize>
 8004048:	4602      	mov	r2, r0
 800404a:	887b      	ldrh	r3, [r7, #2]
 800404c:	1ad1      	subs	r1, r2, r3
 800404e:	4b0b      	ldr	r3, [pc, #44]	; (800407c <BSP_LCD_FillRect+0xe8>)
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	480b      	ldr	r0, [pc, #44]	; (8004080 <BSP_LCD_FillRect+0xec>)
 8004054:	4613      	mov	r3, r2
 8004056:	005b      	lsls	r3, r3, #1
 8004058:	4413      	add	r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4403      	add	r3, r0
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	9301      	str	r3, [sp, #4]
 8004062:	9100      	str	r1, [sp, #0]
 8004064:	4643      	mov	r3, r8
 8004066:	4632      	mov	r2, r6
 8004068:	4629      	mov	r1, r5
 800406a:	4620      	mov	r0, r4
 800406c:	f000 fc1c 	bl	80048a8 <LL_FillBuffer>
}
 8004070:	bf00      	nop
 8004072:	3710      	adds	r7, #16
 8004074:	46bd      	mov	sp, r7
 8004076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800407a:	bf00      	nop
 800407c:	200003d0 	.word	0x200003d0
 8004080:	200003d4 	.word	0x200003d4
 8004084:	20008d7c 	.word	0x20008d7c

08004088 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	4603      	mov	r3, r0
 8004090:	80fb      	strh	r3, [r7, #6]
 8004092:	460b      	mov	r3, r1
 8004094:	80bb      	strh	r3, [r7, #4]
 8004096:	4613      	mov	r3, r2
 8004098:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800409a:	887b      	ldrh	r3, [r7, #2]
 800409c:	005b      	lsls	r3, r3, #1
 800409e:	f1c3 0303 	rsb	r3, r3, #3
 80040a2:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 80040a4:	2300      	movs	r3, #0
 80040a6:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 80040a8:	887b      	ldrh	r3, [r7, #2]
 80040aa:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 80040ac:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <BSP_LCD_FillCircle+0x138>)
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	4944      	ldr	r1, [pc, #272]	; (80041c4 <BSP_LCD_FillCircle+0x13c>)
 80040b2:	4613      	mov	r3, r2
 80040b4:	005b      	lsls	r3, r3, #1
 80040b6:	4413      	add	r3, r2
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4618      	mov	r0, r3
 80040c0:	f7ff fb5e 	bl	8003780 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 80040c4:	e061      	b.n	800418a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d021      	beq.n	8004110 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	b29b      	uxth	r3, r3
 80040d0:	88fa      	ldrh	r2, [r7, #6]
 80040d2:	1ad3      	subs	r3, r2, r3
 80040d4:	b298      	uxth	r0, r3
 80040d6:	693b      	ldr	r3, [r7, #16]
 80040d8:	b29a      	uxth	r2, r3
 80040da:	88bb      	ldrh	r3, [r7, #4]
 80040dc:	4413      	add	r3, r2
 80040de:	b299      	uxth	r1, r3
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	005b      	lsls	r3, r3, #1
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	461a      	mov	r2, r3
 80040ea:	f7ff fcf7 	bl	8003adc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	b29b      	uxth	r3, r3
 80040f2:	88fa      	ldrh	r2, [r7, #6]
 80040f4:	1ad3      	subs	r3, r2, r3
 80040f6:	b298      	uxth	r0, r3
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	b29b      	uxth	r3, r3
 80040fc:	88ba      	ldrh	r2, [r7, #4]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	b299      	uxth	r1, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	b29b      	uxth	r3, r3
 8004106:	005b      	lsls	r3, r3, #1
 8004108:	b29b      	uxth	r3, r3
 800410a:	461a      	mov	r2, r3
 800410c:	f7ff fce6 	bl	8003adc <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d021      	beq.n	800415a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 8004116:	693b      	ldr	r3, [r7, #16]
 8004118:	b29b      	uxth	r3, r3
 800411a:	88fa      	ldrh	r2, [r7, #6]
 800411c:	1ad3      	subs	r3, r2, r3
 800411e:	b298      	uxth	r0, r3
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	b29b      	uxth	r3, r3
 8004124:	88ba      	ldrh	r2, [r7, #4]
 8004126:	1ad3      	subs	r3, r2, r3
 8004128:	b299      	uxth	r1, r3
 800412a:	693b      	ldr	r3, [r7, #16]
 800412c:	b29b      	uxth	r3, r3
 800412e:	005b      	lsls	r3, r3, #1
 8004130:	b29b      	uxth	r3, r3
 8004132:	461a      	mov	r2, r3
 8004134:	f7ff fcd2 	bl	8003adc <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	b29b      	uxth	r3, r3
 800413c:	88fa      	ldrh	r2, [r7, #6]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	b298      	uxth	r0, r3
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	b29a      	uxth	r2, r3
 8004146:	88bb      	ldrh	r3, [r7, #4]
 8004148:	4413      	add	r3, r2
 800414a:	b299      	uxth	r1, r3
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	b29b      	uxth	r3, r3
 8004150:	005b      	lsls	r3, r3, #1
 8004152:	b29b      	uxth	r3, r3
 8004154:	461a      	mov	r2, r3
 8004156:	f7ff fcc1 	bl	8003adc <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	2b00      	cmp	r3, #0
 800415e:	da06      	bge.n	800416e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8004160:	693b      	ldr	r3, [r7, #16]
 8004162:	009a      	lsls	r2, r3, #2
 8004164:	697b      	ldr	r3, [r7, #20]
 8004166:	4413      	add	r3, r2
 8004168:	3306      	adds	r3, #6
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e00a      	b.n	8004184 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800416e:	693a      	ldr	r2, [r7, #16]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	1ad3      	subs	r3, r2, r3
 8004174:	009a      	lsls	r2, r3, #2
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	4413      	add	r3, r2
 800417a:	330a      	adds	r3, #10
 800417c:	617b      	str	r3, [r7, #20]
      current_y--;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	3b01      	subs	r3, #1
 8004182:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	3301      	adds	r3, #1
 8004188:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800418a:	693a      	ldr	r2, [r7, #16]
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	429a      	cmp	r2, r3
 8004190:	d999      	bls.n	80040c6 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <BSP_LCD_FillCircle+0x138>)
 8004194:	681a      	ldr	r2, [r3, #0]
 8004196:	490b      	ldr	r1, [pc, #44]	; (80041c4 <BSP_LCD_FillCircle+0x13c>)
 8004198:	4613      	mov	r3, r2
 800419a:	005b      	lsls	r3, r3, #1
 800419c:	4413      	add	r3, r2
 800419e:	009b      	lsls	r3, r3, #2
 80041a0:	440b      	add	r3, r1
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff faeb 	bl	8003780 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 80041aa:	887a      	ldrh	r2, [r7, #2]
 80041ac:	88b9      	ldrh	r1, [r7, #4]
 80041ae:	88fb      	ldrh	r3, [r7, #6]
 80041b0:	4618      	mov	r0, r3
 80041b2:	f7ff fdbd 	bl	8003d30 <BSP_LCD_DrawCircle>
}
 80041b6:	bf00      	nop
 80041b8:	3718      	adds	r7, #24
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	200003d0 	.word	0x200003d0
 80041c4:	200003d4 	.word	0x200003d4

080041c8 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 80041c8:	b5b0      	push	{r4, r5, r7, lr}
 80041ca:	b08c      	sub	sp, #48	; 0x30
 80041cc:	af02      	add	r7, sp, #8
 80041ce:	6078      	str	r0, [r7, #4]
 80041d0:	460b      	mov	r3, r1
 80041d2:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 80041d4:	2300      	movs	r3, #0
 80041d6:	833b      	strh	r3, [r7, #24]
 80041d8:	2300      	movs	r3, #0
 80041da:	82fb      	strh	r3, [r7, #22]
 80041dc:	2300      	movs	r3, #0
 80041de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80041e0:	2300      	movs	r3, #0
 80041e2:	84bb      	strh	r3, [r7, #36]	; 0x24
 80041e4:	2300      	movs	r3, #0
 80041e6:	82bb      	strh	r3, [r7, #20]
 80041e8:	2300      	movs	r3, #0
 80041ea:	827b      	strh	r3, [r7, #18]
 80041ec:	2300      	movs	r3, #0
 80041ee:	823b      	strh	r3, [r7, #16]
 80041f0:	2300      	movs	r3, #0
 80041f2:	81fb      	strh	r3, [r7, #14]
 80041f4:	2300      	movs	r3, #0
 80041f6:	81bb      	strh	r3, [r7, #12]
 80041f8:	2300      	movs	r3, #0
 80041fa:	817b      	strh	r3, [r7, #10]
 80041fc:	2300      	movs	r3, #0
 80041fe:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8004200:	2300      	movs	r3, #0
 8004202:	843b      	strh	r3, [r7, #32]
 8004204:	2300      	movs	r3, #0
 8004206:	83fb      	strh	r3, [r7, #30]
 8004208:	2300      	movs	r3, #0
 800420a:	83bb      	strh	r3, [r7, #28]
 800420c:	2300      	movs	r3, #0
 800420e:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004216:	83fb      	strh	r3, [r7, #30]
 8004218:	8bfb      	ldrh	r3, [r7, #30]
 800421a:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8004222:	837b      	strh	r3, [r7, #26]
 8004224:	8b7b      	ldrh	r3, [r7, #26]
 8004226:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 8004228:	2301      	movs	r3, #1
 800422a:	847b      	strh	r3, [r7, #34]	; 0x22
 800422c:	e02f      	b.n	800428e <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 800422e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004232:	009b      	lsls	r3, r3, #2
 8004234:	687a      	ldr	r2, [r7, #4]
 8004236:	4413      	add	r3, r2
 8004238:	881b      	ldrh	r3, [r3, #0]
 800423a:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 800423c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8004240:	8c3b      	ldrh	r3, [r7, #32]
 8004242:	429a      	cmp	r2, r3
 8004244:	da01      	bge.n	800424a <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 8004246:	89bb      	ldrh	r3, [r7, #12]
 8004248:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 800424a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800424e:	8bfb      	ldrh	r3, [r7, #30]
 8004250:	429a      	cmp	r2, r3
 8004252:	dd01      	ble.n	8004258 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 8004254:	89bb      	ldrh	r3, [r7, #12]
 8004256:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8004258:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800425c:	009b      	lsls	r3, r3, #2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	4413      	add	r3, r2
 8004262:	885b      	ldrh	r3, [r3, #2]
 8004264:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 8004266:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800426a:	8bbb      	ldrh	r3, [r7, #28]
 800426c:	429a      	cmp	r2, r3
 800426e:	da01      	bge.n	8004274 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8004270:	897b      	ldrh	r3, [r7, #10]
 8004272:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 8004274:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8004278:	8b7b      	ldrh	r3, [r7, #26]
 800427a:	429a      	cmp	r2, r3
 800427c:	dd01      	ble.n	8004282 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 800427e:	897b      	ldrh	r3, [r7, #10]
 8004280:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8004282:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8004286:	b29b      	uxth	r3, r3
 8004288:	3301      	adds	r3, #1
 800428a:	b29b      	uxth	r3, r3
 800428c:	847b      	strh	r3, [r7, #34]	; 0x22
 800428e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8004292:	887b      	ldrh	r3, [r7, #2]
 8004294:	429a      	cmp	r2, r3
 8004296:	dbca      	blt.n	800422e <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8004298:	887b      	ldrh	r3, [r7, #2]
 800429a:	2b01      	cmp	r3, #1
 800429c:	d974      	bls.n	8004388 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800429e:	8c3a      	ldrh	r2, [r7, #32]
 80042a0:	8bfb      	ldrh	r3, [r7, #30]
 80042a2:	4413      	add	r3, r2
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	da00      	bge.n	80042aa <BSP_LCD_FillPolygon+0xe2>
 80042a8:	3301      	adds	r3, #1
 80042aa:	105b      	asrs	r3, r3, #1
 80042ac:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 80042ae:	8b7a      	ldrh	r2, [r7, #26]
 80042b0:	8bbb      	ldrh	r3, [r7, #28]
 80042b2:	4413      	add	r3, r2
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	da00      	bge.n	80042ba <BSP_LCD_FillPolygon+0xf2>
 80042b8:	3301      	adds	r3, #1
 80042ba:	105b      	asrs	r3, r3, #1
 80042bc:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	881b      	ldrh	r3, [r3, #0]
 80042c2:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	885b      	ldrh	r3, [r3, #2]
 80042c8:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 80042ca:	e032      	b.n	8004332 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	881b      	ldrh	r3, [r3, #0]
 80042d0:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	885b      	ldrh	r3, [r3, #2]
 80042d6:	82fb      	strh	r3, [r7, #22]
    Points++;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	3304      	adds	r3, #4
 80042dc:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	881b      	ldrh	r3, [r3, #0]
 80042e2:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	885b      	ldrh	r3, [r3, #2]
 80042e8:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 80042ea:	8b38      	ldrh	r0, [r7, #24]
 80042ec:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80042ee:	8abc      	ldrh	r4, [r7, #20]
 80042f0:	8afd      	ldrh	r5, [r7, #22]
 80042f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80042f4:	8a7a      	ldrh	r2, [r7, #18]
 80042f6:	9201      	str	r2, [sp, #4]
 80042f8:	9300      	str	r3, [sp, #0]
 80042fa:	462b      	mov	r3, r5
 80042fc:	4622      	mov	r2, r4
 80042fe:	f000 fa13 	bl	8004728 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 8004302:	8b38      	ldrh	r0, [r7, #24]
 8004304:	8ab9      	ldrh	r1, [r7, #20]
 8004306:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8004308:	8afd      	ldrh	r5, [r7, #22]
 800430a:	8a7b      	ldrh	r3, [r7, #18]
 800430c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800430e:	9201      	str	r2, [sp, #4]
 8004310:	9300      	str	r3, [sp, #0]
 8004312:	462b      	mov	r3, r5
 8004314:	4622      	mov	r2, r4
 8004316:	f000 fa07 	bl	8004728 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 800431a:	8ab8      	ldrh	r0, [r7, #20]
 800431c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800431e:	8b3c      	ldrh	r4, [r7, #24]
 8004320:	8a7d      	ldrh	r5, [r7, #18]
 8004322:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004324:	8afa      	ldrh	r2, [r7, #22]
 8004326:	9201      	str	r2, [sp, #4]
 8004328:	9300      	str	r3, [sp, #0]
 800432a:	462b      	mov	r3, r5
 800432c:	4622      	mov	r2, r4
 800432e:	f000 f9fb 	bl	8004728 <FillTriangle>
  while(--PointCount)
 8004332:	887b      	ldrh	r3, [r7, #2]
 8004334:	3b01      	subs	r3, #1
 8004336:	807b      	strh	r3, [r7, #2]
 8004338:	887b      	ldrh	r3, [r7, #2]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d1c6      	bne.n	80042cc <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 800433e:	8a38      	ldrh	r0, [r7, #16]
 8004340:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004342:	8abc      	ldrh	r4, [r7, #20]
 8004344:	89fd      	ldrh	r5, [r7, #14]
 8004346:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004348:	8a7a      	ldrh	r2, [r7, #18]
 800434a:	9201      	str	r2, [sp, #4]
 800434c:	9300      	str	r3, [sp, #0]
 800434e:	462b      	mov	r3, r5
 8004350:	4622      	mov	r2, r4
 8004352:	f000 f9e9 	bl	8004728 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8004356:	8a38      	ldrh	r0, [r7, #16]
 8004358:	8ab9      	ldrh	r1, [r7, #20]
 800435a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800435c:	89fd      	ldrh	r5, [r7, #14]
 800435e:	8a7b      	ldrh	r3, [r7, #18]
 8004360:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004362:	9201      	str	r2, [sp, #4]
 8004364:	9300      	str	r3, [sp, #0]
 8004366:	462b      	mov	r3, r5
 8004368:	4622      	mov	r2, r4
 800436a:	f000 f9dd 	bl	8004728 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 800436e:	8ab8      	ldrh	r0, [r7, #20]
 8004370:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8004372:	8a3c      	ldrh	r4, [r7, #16]
 8004374:	8a7d      	ldrh	r5, [r7, #18]
 8004376:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8004378:	89fa      	ldrh	r2, [r7, #14]
 800437a:	9201      	str	r2, [sp, #4]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	462b      	mov	r3, r5
 8004380:	4622      	mov	r2, r4
 8004382:	f000 f9d1 	bl	8004728 <FillTriangle>
 8004386:	e000      	b.n	800438a <BSP_LCD_FillPolygon+0x1c2>
    return;
 8004388:	bf00      	nop
}
 800438a:	3728      	adds	r7, #40	; 0x28
 800438c:	46bd      	mov	sp, r7
 800438e:	bdb0      	pop	{r4, r5, r7, pc}

08004390 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8004390:	b580      	push	{r7, lr}
 8004392:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8004394:	4b0a      	ldr	r3, [pc, #40]	; (80043c0 <BSP_LCD_DisplayOn+0x30>)
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	699a      	ldr	r2, [r3, #24]
 800439a:	4b09      	ldr	r3, [pc, #36]	; (80043c0 <BSP_LCD_DisplayOn+0x30>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	f042 0201 	orr.w	r2, r2, #1
 80043a2:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 80043a4:	2201      	movs	r2, #1
 80043a6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80043aa:	4806      	ldr	r0, [pc, #24]	; (80043c4 <BSP_LCD_DisplayOn+0x34>)
 80043ac:	f003 f806 	bl	80073bc <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 80043b0:	2201      	movs	r2, #1
 80043b2:	2108      	movs	r1, #8
 80043b4:	4804      	ldr	r0, [pc, #16]	; (80043c8 <BSP_LCD_DisplayOn+0x38>)
 80043b6:	f003 f801 	bl	80073bc <HAL_GPIO_WritePin>
}
 80043ba:	bf00      	nop
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	20008d7c 	.word	0x20008d7c
 80043c4:	40022000 	.word	0x40022000
 80043c8:	40022800 	.word	0x40022800

080043cc <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b090      	sub	sp, #64	; 0x40
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 80043d6:	4b64      	ldr	r3, [pc, #400]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043da:	4a63      	ldr	r2, [pc, #396]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043dc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80043e0:	6453      	str	r3, [r2, #68]	; 0x44
 80043e2:	4b61      	ldr	r3, [pc, #388]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80043ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80043ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 80043ee:	4b5e      	ldr	r3, [pc, #376]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f2:	4a5d      	ldr	r2, [pc, #372]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043f4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80043f8:	6313      	str	r3, [r2, #48]	; 0x30
 80043fa:	4b5b      	ldr	r3, [pc, #364]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80043fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fe:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004402:	627b      	str	r3, [r7, #36]	; 0x24
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004406:	4b58      	ldr	r3, [pc, #352]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a57      	ldr	r2, [pc, #348]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800440c:	f043 0310 	orr.w	r3, r3, #16
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b55      	ldr	r3, [pc, #340]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f003 0310 	and.w	r3, r3, #16
 800441a:	623b      	str	r3, [r7, #32]
 800441c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800441e:	4b52      	ldr	r3, [pc, #328]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a51      	ldr	r2, [pc, #324]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004424:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b4f      	ldr	r3, [pc, #316]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004432:	61fb      	str	r3, [r7, #28]
 8004434:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8004436:	4b4c      	ldr	r3, [pc, #304]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800443a:	4a4b      	ldr	r2, [pc, #300]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800443c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004440:	6313      	str	r3, [r2, #48]	; 0x30
 8004442:	4b49      	ldr	r3, [pc, #292]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800444a:	61bb      	str	r3, [r7, #24]
 800444c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800444e:	4b46      	ldr	r3, [pc, #280]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004452:	4a45      	ldr	r2, [pc, #276]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004454:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004458:	6313      	str	r3, [r2, #48]	; 0x30
 800445a:	4b43      	ldr	r3, [pc, #268]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800445c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800445e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004462:	617b      	str	r3, [r7, #20]
 8004464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8004466:	4b40      	ldr	r3, [pc, #256]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800446a:	4a3f      	ldr	r2, [pc, #252]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800446c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004470:	6313      	str	r3, [r2, #48]	; 0x30
 8004472:	4b3d      	ldr	r3, [pc, #244]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004474:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004476:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800447a:	613b      	str	r3, [r7, #16]
 800447c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800447e:	4b3a      	ldr	r3, [pc, #232]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004482:	4a39      	ldr	r2, [pc, #228]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004484:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004488:	6313      	str	r3, [r2, #48]	; 0x30
 800448a:	4b37      	ldr	r3, [pc, #220]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800448c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800448e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004492:	60fb      	str	r3, [r7, #12]
 8004494:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8004496:	4b34      	ldr	r3, [pc, #208]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 8004498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800449a:	4a33      	ldr	r2, [pc, #204]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 800449c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80044a0:	6313      	str	r3, [r2, #48]	; 0x30
 80044a2:	4b31      	ldr	r3, [pc, #196]	; (8004568 <BSP_LCD_MspInit+0x19c>)
 80044a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044aa:	60bb      	str	r3, [r7, #8]
 80044ac:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 80044ae:	2310      	movs	r3, #16
 80044b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044b2:	2302      	movs	r3, #2
 80044b4:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 80044ba:	2302      	movs	r3, #2
 80044bc:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 80044be:	230e      	movs	r3, #14
 80044c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80044c2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044c6:	4619      	mov	r1, r3
 80044c8:	4828      	ldr	r0, [pc, #160]	; (800456c <BSP_LCD_MspInit+0x1a0>)
 80044ca:	f002 fca7 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 80044ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80044d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044d4:	2302      	movs	r3, #2
 80044d6:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 80044d8:	2309      	movs	r3, #9
 80044da:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80044dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044e0:	4619      	mov	r1, r3
 80044e2:	4823      	ldr	r0, [pc, #140]	; (8004570 <BSP_LCD_MspInit+0x1a4>)
 80044e4:	f002 fc9a 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 80044e8:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 80044ec:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80044ee:	2302      	movs	r3, #2
 80044f0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80044f2:	230e      	movs	r3, #14
 80044f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80044f6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80044fa:	4619      	mov	r1, r3
 80044fc:	481d      	ldr	r0, [pc, #116]	; (8004574 <BSP_LCD_MspInit+0x1a8>)
 80044fe:	f002 fc8d 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 8004502:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004506:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004508:	2302      	movs	r3, #2
 800450a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800450c:	230e      	movs	r3, #14
 800450e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8004510:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004514:	4619      	mov	r1, r3
 8004516:	4818      	ldr	r0, [pc, #96]	; (8004578 <BSP_LCD_MspInit+0x1ac>)
 8004518:	f002 fc80 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 800451c:	23f7      	movs	r3, #247	; 0xf7
 800451e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004520:	2302      	movs	r3, #2
 8004522:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8004524:	230e      	movs	r3, #14
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 8004528:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800452c:	4619      	mov	r1, r3
 800452e:	4813      	ldr	r0, [pc, #76]	; (800457c <BSP_LCD_MspInit+0x1b0>)
 8004530:	f002 fc74 	bl	8006e1c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 8004534:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004538:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800453a:	2301      	movs	r3, #1
 800453c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 800453e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004542:	4619      	mov	r1, r3
 8004544:	480b      	ldr	r0, [pc, #44]	; (8004574 <BSP_LCD_MspInit+0x1a8>)
 8004546:	f002 fc69 	bl	8006e1c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 800454a:	2308      	movs	r3, #8
 800454c:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800454e:	2301      	movs	r3, #1
 8004550:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8004552:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004556:	4619      	mov	r1, r3
 8004558:	4808      	ldr	r0, [pc, #32]	; (800457c <BSP_LCD_MspInit+0x1b0>)
 800455a:	f002 fc5f 	bl	8006e1c <HAL_GPIO_Init>
}
 800455e:	bf00      	nop
 8004560:	3740      	adds	r7, #64	; 0x40
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40023800 	.word	0x40023800
 800456c:	40021000 	.word	0x40021000
 8004570:	40021800 	.word	0x40021800
 8004574:	40022000 	.word	0x40022000
 8004578:	40022400 	.word	0x40022400
 800457c:	40022800 	.word	0x40022800

08004580 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b082      	sub	sp, #8
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
 8004588:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800458a:	4b0a      	ldr	r3, [pc, #40]	; (80045b4 <BSP_LCD_ClockConfig+0x34>)
 800458c:	2208      	movs	r2, #8
 800458e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8004590:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <BSP_LCD_ClockConfig+0x34>)
 8004592:	22c0      	movs	r2, #192	; 0xc0
 8004594:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8004596:	4b07      	ldr	r3, [pc, #28]	; (80045b4 <BSP_LCD_ClockConfig+0x34>)
 8004598:	2205      	movs	r2, #5
 800459a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800459c:	4b05      	ldr	r3, [pc, #20]	; (80045b4 <BSP_LCD_ClockConfig+0x34>)
 800459e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80045a2:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 80045a4:	4803      	ldr	r0, [pc, #12]	; (80045b4 <BSP_LCD_ClockConfig+0x34>)
 80045a6:	f004 fd57 	bl	8009058 <HAL_RCCEx_PeriphCLKConfig>
}
 80045aa:	bf00      	nop
 80045ac:	3708      	adds	r7, #8
 80045ae:	46bd      	mov	sp, r7
 80045b0:	bd80      	pop	{r7, pc}
 80045b2:	bf00      	nop
 80045b4:	200003ec 	.word	0x200003ec

080045b8 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b088      	sub	sp, #32
 80045bc:	af00      	add	r7, sp, #0
 80045be:	4603      	mov	r3, r0
 80045c0:	603a      	str	r2, [r7, #0]
 80045c2:	80fb      	strh	r3, [r7, #6]
 80045c4:	460b      	mov	r3, r1
 80045c6:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 80045c8:	2300      	movs	r3, #0
 80045ca:	61fb      	str	r3, [r7, #28]
 80045cc:	2300      	movs	r3, #0
 80045ce:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 80045d0:	4b53      	ldr	r3, [pc, #332]	; (8004720 <DrawChar+0x168>)
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	4953      	ldr	r1, [pc, #332]	; (8004724 <DrawChar+0x16c>)
 80045d6:	4613      	mov	r3, r2
 80045d8:	005b      	lsls	r3, r3, #1
 80045da:	4413      	add	r3, r2
 80045dc:	009b      	lsls	r3, r3, #2
 80045de:	440b      	add	r3, r1
 80045e0:	3308      	adds	r3, #8
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	88db      	ldrh	r3, [r3, #6]
 80045e6:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 80045e8:	4b4d      	ldr	r3, [pc, #308]	; (8004720 <DrawChar+0x168>)
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	494d      	ldr	r1, [pc, #308]	; (8004724 <DrawChar+0x16c>)
 80045ee:	4613      	mov	r3, r2
 80045f0:	005b      	lsls	r3, r3, #1
 80045f2:	4413      	add	r3, r2
 80045f4:	009b      	lsls	r3, r3, #2
 80045f6:	440b      	add	r3, r1
 80045f8:	3308      	adds	r3, #8
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	889b      	ldrh	r3, [r3, #4]
 80045fe:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8004600:	8a3b      	ldrh	r3, [r7, #16]
 8004602:	3307      	adds	r3, #7
 8004604:	2b00      	cmp	r3, #0
 8004606:	da00      	bge.n	800460a <DrawChar+0x52>
 8004608:	3307      	adds	r3, #7
 800460a:	10db      	asrs	r3, r3, #3
 800460c:	b2db      	uxtb	r3, r3
 800460e:	00db      	lsls	r3, r3, #3
 8004610:	b2da      	uxtb	r2, r3
 8004612:	8a3b      	ldrh	r3, [r7, #16]
 8004614:	b2db      	uxtb	r3, r3
 8004616:	1ad3      	subs	r3, r2, r3
 8004618:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
 800461e:	e076      	b.n	800470e <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8004620:	8a3b      	ldrh	r3, [r7, #16]
 8004622:	3307      	adds	r3, #7
 8004624:	2b00      	cmp	r3, #0
 8004626:	da00      	bge.n	800462a <DrawChar+0x72>
 8004628:	3307      	adds	r3, #7
 800462a:	10db      	asrs	r3, r3, #3
 800462c:	461a      	mov	r2, r3
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	fb03 f302 	mul.w	r3, r3, r2
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	4413      	add	r3, r2
 8004638:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 800463a:	8a3b      	ldrh	r3, [r7, #16]
 800463c:	3307      	adds	r3, #7
 800463e:	2b00      	cmp	r3, #0
 8004640:	da00      	bge.n	8004644 <DrawChar+0x8c>
 8004642:	3307      	adds	r3, #7
 8004644:	10db      	asrs	r3, r3, #3
 8004646:	2b01      	cmp	r3, #1
 8004648:	d002      	beq.n	8004650 <DrawChar+0x98>
 800464a:	2b02      	cmp	r3, #2
 800464c:	d004      	beq.n	8004658 <DrawChar+0xa0>
 800464e:	e00c      	b.n	800466a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8004650:	68bb      	ldr	r3, [r7, #8]
 8004652:	781b      	ldrb	r3, [r3, #0]
 8004654:	617b      	str	r3, [r7, #20]
      break;
 8004656:	e016      	b.n	8004686 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	781b      	ldrb	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68ba      	ldr	r2, [r7, #8]
 8004660:	3201      	adds	r2, #1
 8004662:	7812      	ldrb	r2, [r2, #0]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]
      break;
 8004668:	e00d      	b.n	8004686 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	781b      	ldrb	r3, [r3, #0]
 800466e:	041a      	lsls	r2, r3, #16
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	3301      	adds	r3, #1
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	021b      	lsls	r3, r3, #8
 8004678:	4313      	orrs	r3, r2
 800467a:	68ba      	ldr	r2, [r7, #8]
 800467c:	3202      	adds	r2, #2
 800467e:	7812      	ldrb	r2, [r2, #0]
 8004680:	4313      	orrs	r3, r2
 8004682:	617b      	str	r3, [r7, #20]
      break;
 8004684:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8004686:	2300      	movs	r3, #0
 8004688:	61bb      	str	r3, [r7, #24]
 800468a:	e036      	b.n	80046fa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800468c:	8a3a      	ldrh	r2, [r7, #16]
 800468e:	69bb      	ldr	r3, [r7, #24]
 8004690:	1ad2      	subs	r2, r2, r3
 8004692:	7bfb      	ldrb	r3, [r7, #15]
 8004694:	4413      	add	r3, r2
 8004696:	3b01      	subs	r3, #1
 8004698:	2201      	movs	r2, #1
 800469a:	fa02 f303 	lsl.w	r3, r2, r3
 800469e:	461a      	mov	r2, r3
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	4013      	ands	r3, r2
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d012      	beq.n	80046ce <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 80046a8:	69bb      	ldr	r3, [r7, #24]
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	88fb      	ldrh	r3, [r7, #6]
 80046ae:	4413      	add	r3, r2
 80046b0:	b298      	uxth	r0, r3
 80046b2:	4b1b      	ldr	r3, [pc, #108]	; (8004720 <DrawChar+0x168>)
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	491b      	ldr	r1, [pc, #108]	; (8004724 <DrawChar+0x16c>)
 80046b8:	4613      	mov	r3, r2
 80046ba:	005b      	lsls	r3, r3, #1
 80046bc:	4413      	add	r3, r2
 80046be:	009b      	lsls	r3, r3, #2
 80046c0:	440b      	add	r3, r1
 80046c2:	681a      	ldr	r2, [r3, #0]
 80046c4:	88bb      	ldrh	r3, [r7, #4]
 80046c6:	4619      	mov	r1, r3
 80046c8:	f7ff fc1c 	bl	8003f04 <BSP_LCD_DrawPixel>
 80046cc:	e012      	b.n	80046f4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 80046ce:	69bb      	ldr	r3, [r7, #24]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	4413      	add	r3, r2
 80046d6:	b298      	uxth	r0, r3
 80046d8:	4b11      	ldr	r3, [pc, #68]	; (8004720 <DrawChar+0x168>)
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	4911      	ldr	r1, [pc, #68]	; (8004724 <DrawChar+0x16c>)
 80046de:	4613      	mov	r3, r2
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	009b      	lsls	r3, r3, #2
 80046e6:	440b      	add	r3, r1
 80046e8:	3304      	adds	r3, #4
 80046ea:	681a      	ldr	r2, [r3, #0]
 80046ec:	88bb      	ldrh	r3, [r7, #4]
 80046ee:	4619      	mov	r1, r3
 80046f0:	f7ff fc08 	bl	8003f04 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80046f4:	69bb      	ldr	r3, [r7, #24]
 80046f6:	3301      	adds	r3, #1
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	8a3b      	ldrh	r3, [r7, #16]
 80046fc:	69ba      	ldr	r2, [r7, #24]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d3c4      	bcc.n	800468c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 8004702:	88bb      	ldrh	r3, [r7, #4]
 8004704:	3301      	adds	r3, #1
 8004706:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8004708:	69fb      	ldr	r3, [r7, #28]
 800470a:	3301      	adds	r3, #1
 800470c:	61fb      	str	r3, [r7, #28]
 800470e:	8a7b      	ldrh	r3, [r7, #18]
 8004710:	69fa      	ldr	r2, [r7, #28]
 8004712:	429a      	cmp	r2, r3
 8004714:	d384      	bcc.n	8004620 <DrawChar+0x68>
  }
}
 8004716:	bf00      	nop
 8004718:	bf00      	nop
 800471a:	3720      	adds	r7, #32
 800471c:	46bd      	mov	sp, r7
 800471e:	bd80      	pop	{r7, pc}
 8004720:	200003d0 	.word	0x200003d0
 8004724:	200003d4 	.word	0x200003d4

08004728 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 8004728:	b590      	push	{r4, r7, lr}
 800472a:	b08b      	sub	sp, #44	; 0x2c
 800472c:	af00      	add	r7, sp, #0
 800472e:	4604      	mov	r4, r0
 8004730:	4608      	mov	r0, r1
 8004732:	4611      	mov	r1, r2
 8004734:	461a      	mov	r2, r3
 8004736:	4623      	mov	r3, r4
 8004738:	80fb      	strh	r3, [r7, #6]
 800473a:	4603      	mov	r3, r0
 800473c:	80bb      	strh	r3, [r7, #4]
 800473e:	460b      	mov	r3, r1
 8004740:	807b      	strh	r3, [r7, #2]
 8004742:	4613      	mov	r3, r2
 8004744:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8004746:	2300      	movs	r3, #0
 8004748:	823b      	strh	r3, [r7, #16]
 800474a:	2300      	movs	r3, #0
 800474c:	81fb      	strh	r3, [r7, #14]
 800474e:	2300      	movs	r3, #0
 8004750:	84fb      	strh	r3, [r7, #38]	; 0x26
 8004752:	2300      	movs	r3, #0
 8004754:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004756:	2300      	movs	r3, #0
 8004758:	847b      	strh	r3, [r7, #34]	; 0x22
 800475a:	2300      	movs	r3, #0
 800475c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 800475e:	2300      	movs	r3, #0
 8004760:	83fb      	strh	r3, [r7, #30]
 8004762:	2300      	movs	r3, #0
 8004764:	83bb      	strh	r3, [r7, #28]
 8004766:	2300      	movs	r3, #0
 8004768:	837b      	strh	r3, [r7, #26]
 800476a:	2300      	movs	r3, #0
 800476c:	833b      	strh	r3, [r7, #24]
 800476e:	2300      	movs	r3, #0
 8004770:	82fb      	strh	r3, [r7, #22]
 8004772:	2300      	movs	r3, #0
 8004774:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8004776:	2300      	movs	r3, #0
 8004778:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800477a:	88ba      	ldrh	r2, [r7, #4]
 800477c:	88fb      	ldrh	r3, [r7, #6]
 800477e:	1ad3      	subs	r3, r2, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	bfb8      	it	lt
 8004784:	425b      	neglt	r3, r3
 8004786:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8004788:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800478a:	883b      	ldrh	r3, [r7, #0]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b00      	cmp	r3, #0
 8004790:	bfb8      	it	lt
 8004792:	425b      	neglt	r3, r3
 8004794:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8004796:	88fb      	ldrh	r3, [r7, #6]
 8004798:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800479a:	883b      	ldrh	r3, [r7, #0]
 800479c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800479e:	88ba      	ldrh	r2, [r7, #4]
 80047a0:	88fb      	ldrh	r3, [r7, #6]
 80047a2:	429a      	cmp	r2, r3
 80047a4:	d304      	bcc.n	80047b0 <FillTriangle+0x88>
  {
    xinc1 = 1;
 80047a6:	2301      	movs	r3, #1
 80047a8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 80047aa:	2301      	movs	r3, #1
 80047ac:	843b      	strh	r3, [r7, #32]
 80047ae:	e005      	b.n	80047bc <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 80047b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047b4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 80047b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047ba:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 80047bc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 80047be:	883b      	ldrh	r3, [r7, #0]
 80047c0:	429a      	cmp	r2, r3
 80047c2:	d304      	bcc.n	80047ce <FillTriangle+0xa6>
  {
    yinc1 = 1;
 80047c4:	2301      	movs	r3, #1
 80047c6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 80047c8:	2301      	movs	r3, #1
 80047ca:	83bb      	strh	r3, [r7, #28]
 80047cc:	e005      	b.n	80047da <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 80047ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 80047d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80047d8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 80047da:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80047de:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80047e2:	429a      	cmp	r2, r3
 80047e4:	db11      	blt.n	800480a <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 80047e6:	2300      	movs	r3, #0
 80047e8:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 80047ea:	2300      	movs	r3, #0
 80047ec:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 80047ee:	8a3b      	ldrh	r3, [r7, #16]
 80047f0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80047f2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	da00      	bge.n	80047fc <FillTriangle+0xd4>
 80047fa:	3301      	adds	r3, #1
 80047fc:	105b      	asrs	r3, r3, #1
 80047fe:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8004800:	89fb      	ldrh	r3, [r7, #14]
 8004802:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8004804:	8a3b      	ldrh	r3, [r7, #16]
 8004806:	82bb      	strh	r3, [r7, #20]
 8004808:	e010      	b.n	800482c <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 800480a:	2300      	movs	r3, #0
 800480c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 800480e:	2300      	movs	r3, #0
 8004810:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8004812:	89fb      	ldrh	r3, [r7, #14]
 8004814:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8004816:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800481a:	2b00      	cmp	r3, #0
 800481c:	da00      	bge.n	8004820 <FillTriangle+0xf8>
 800481e:	3301      	adds	r3, #1
 8004820:	105b      	asrs	r3, r3, #1
 8004822:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8004824:	8a3b      	ldrh	r3, [r7, #16]
 8004826:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8004828:	89fb      	ldrh	r3, [r7, #14]
 800482a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 800482c:	2300      	movs	r3, #0
 800482e:	827b      	strh	r3, [r7, #18]
 8004830:	e02f      	b.n	8004892 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 8004832:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8004834:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8004836:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8004838:	887a      	ldrh	r2, [r7, #2]
 800483a:	f7ff f9ad 	bl	8003b98 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 800483e:	8b3a      	ldrh	r2, [r7, #24]
 8004840:	8afb      	ldrh	r3, [r7, #22]
 8004842:	4413      	add	r3, r2
 8004844:	b29b      	uxth	r3, r3
 8004846:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 8004848:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800484c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8004850:	429a      	cmp	r2, r3
 8004852:	db0e      	blt.n	8004872 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8004854:	8b3a      	ldrh	r2, [r7, #24]
 8004856:	8b7b      	ldrh	r3, [r7, #26]
 8004858:	1ad3      	subs	r3, r2, r3
 800485a:	b29b      	uxth	r3, r3
 800485c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800485e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004860:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004862:	4413      	add	r3, r2
 8004864:	b29b      	uxth	r3, r3
 8004866:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8004868:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800486a:	8bfb      	ldrh	r3, [r7, #30]
 800486c:	4413      	add	r3, r2
 800486e:	b29b      	uxth	r3, r3
 8004870:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8004872:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8004874:	8c3b      	ldrh	r3, [r7, #32]
 8004876:	4413      	add	r3, r2
 8004878:	b29b      	uxth	r3, r3
 800487a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 800487c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800487e:	8bbb      	ldrh	r3, [r7, #28]
 8004880:	4413      	add	r3, r2
 8004882:	b29b      	uxth	r3, r3
 8004884:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8004886:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800488a:	b29b      	uxth	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	b29b      	uxth	r3, r3
 8004890:	827b      	strh	r3, [r7, #18]
 8004892:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8004896:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800489a:	429a      	cmp	r2, r3
 800489c:	ddc9      	ble.n	8004832 <FillTriangle+0x10a>
  } 
}
 800489e:	bf00      	nop
 80048a0:	bf00      	nop
 80048a2:	372c      	adds	r7, #44	; 0x2c
 80048a4:	46bd      	mov	sp, r7
 80048a6:	bd90      	pop	{r4, r7, pc}

080048a8 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b086      	sub	sp, #24
 80048ac:	af02      	add	r7, sp, #8
 80048ae:	60f8      	str	r0, [r7, #12]
 80048b0:	60b9      	str	r1, [r7, #8]
 80048b2:	607a      	str	r2, [r7, #4]
 80048b4:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 80048b6:	4b1e      	ldr	r3, [pc, #120]	; (8004930 <LL_FillBuffer+0x88>)
 80048b8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80048bc:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 80048be:	4b1d      	ldr	r3, [pc, #116]	; (8004934 <LL_FillBuffer+0x8c>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	4a1d      	ldr	r2, [pc, #116]	; (8004938 <LL_FillBuffer+0x90>)
 80048c4:	2134      	movs	r1, #52	; 0x34
 80048c6:	fb01 f303 	mul.w	r3, r1, r3
 80048ca:	4413      	add	r3, r2
 80048cc:	3348      	adds	r3, #72	; 0x48
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	2b02      	cmp	r3, #2
 80048d2:	d103      	bne.n	80048dc <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 80048d4:	4b16      	ldr	r3, [pc, #88]	; (8004930 <LL_FillBuffer+0x88>)
 80048d6:	2202      	movs	r2, #2
 80048d8:	609a      	str	r2, [r3, #8]
 80048da:	e002      	b.n	80048e2 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 80048dc:	4b14      	ldr	r3, [pc, #80]	; (8004930 <LL_FillBuffer+0x88>)
 80048de:	2200      	movs	r2, #0
 80048e0:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 80048e2:	4a13      	ldr	r2, [pc, #76]	; (8004930 <LL_FillBuffer+0x88>)
 80048e4:	69bb      	ldr	r3, [r7, #24]
 80048e6:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 80048e8:	4b11      	ldr	r3, [pc, #68]	; (8004930 <LL_FillBuffer+0x88>)
 80048ea:	4a14      	ldr	r2, [pc, #80]	; (800493c <LL_FillBuffer+0x94>)
 80048ec:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 80048ee:	4810      	ldr	r0, [pc, #64]	; (8004930 <LL_FillBuffer+0x88>)
 80048f0:	f002 f808 	bl	8006904 <HAL_DMA2D_Init>
 80048f4:	4603      	mov	r3, r0
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d115      	bne.n	8004926 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80048fa:	68f9      	ldr	r1, [r7, #12]
 80048fc:	480c      	ldr	r0, [pc, #48]	; (8004930 <LL_FillBuffer+0x88>)
 80048fe:	f002 f95f 	bl	8006bc0 <HAL_DMA2D_ConfigLayer>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d10e      	bne.n	8004926 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8004908:	68ba      	ldr	r2, [r7, #8]
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	9300      	str	r3, [sp, #0]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	69f9      	ldr	r1, [r7, #28]
 8004912:	4807      	ldr	r0, [pc, #28]	; (8004930 <LL_FillBuffer+0x88>)
 8004914:	f002 f840 	bl	8006998 <HAL_DMA2D_Start>
 8004918:	4603      	mov	r3, r0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d103      	bne.n	8004926 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 800491e:	210a      	movs	r1, #10
 8004920:	4803      	ldr	r0, [pc, #12]	; (8004930 <LL_FillBuffer+0x88>)
 8004922:	f002 f864 	bl	80069ee <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8004926:	bf00      	nop
 8004928:	3710      	adds	r7, #16
 800492a:	46bd      	mov	sp, r7
 800492c:	bd80      	pop	{r7, pc}
 800492e:	bf00      	nop
 8004930:	20000390 	.word	0x20000390
 8004934:	200003d0 	.word	0x200003d0
 8004938:	20008d7c 	.word	0x20008d7c
 800493c:	4002b000 	.word	0x4002b000

08004940 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8004940:	b580      	push	{r7, lr}
 8004942:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004944:	4b29      	ldr	r3, [pc, #164]	; (80049ec <BSP_SDRAM_Init+0xac>)
 8004946:	4a2a      	ldr	r2, [pc, #168]	; (80049f0 <BSP_SDRAM_Init+0xb0>)
 8004948:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 800494a:	4b2a      	ldr	r3, [pc, #168]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 800494c:	2202      	movs	r2, #2
 800494e:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8004950:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 8004952:	2207      	movs	r2, #7
 8004954:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8004956:	4b27      	ldr	r3, [pc, #156]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 8004958:	2204      	movs	r2, #4
 800495a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800495c:	4b25      	ldr	r3, [pc, #148]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 800495e:	2207      	movs	r2, #7
 8004960:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8004962:	4b24      	ldr	r3, [pc, #144]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 8004964:	2202      	movs	r2, #2
 8004966:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8004968:	4b22      	ldr	r3, [pc, #136]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 800496a:	2202      	movs	r2, #2
 800496c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800496e:	4b21      	ldr	r3, [pc, #132]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 8004970:	2202      	movs	r2, #2
 8004972:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8004974:	4b1d      	ldr	r3, [pc, #116]	; (80049ec <BSP_SDRAM_Init+0xac>)
 8004976:	2200      	movs	r2, #0
 8004978:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800497a:	4b1c      	ldr	r3, [pc, #112]	; (80049ec <BSP_SDRAM_Init+0xac>)
 800497c:	2200      	movs	r2, #0
 800497e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8004980:	4b1a      	ldr	r3, [pc, #104]	; (80049ec <BSP_SDRAM_Init+0xac>)
 8004982:	2204      	movs	r2, #4
 8004984:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004986:	4b19      	ldr	r3, [pc, #100]	; (80049ec <BSP_SDRAM_Init+0xac>)
 8004988:	2210      	movs	r2, #16
 800498a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800498c:	4b17      	ldr	r3, [pc, #92]	; (80049ec <BSP_SDRAM_Init+0xac>)
 800498e:	2240      	movs	r2, #64	; 0x40
 8004990:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8004992:	4b16      	ldr	r3, [pc, #88]	; (80049ec <BSP_SDRAM_Init+0xac>)
 8004994:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004998:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800499a:	4b14      	ldr	r3, [pc, #80]	; (80049ec <BSP_SDRAM_Init+0xac>)
 800499c:	2200      	movs	r2, #0
 800499e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 80049a0:	4b12      	ldr	r3, [pc, #72]	; (80049ec <BSP_SDRAM_Init+0xac>)
 80049a2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80049a6:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80049a8:	4b10      	ldr	r3, [pc, #64]	; (80049ec <BSP_SDRAM_Init+0xac>)
 80049aa:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80049ae:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80049b0:	4b0e      	ldr	r3, [pc, #56]	; (80049ec <BSP_SDRAM_Init+0xac>)
 80049b2:	2200      	movs	r2, #0
 80049b4:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 80049b6:	2100      	movs	r1, #0
 80049b8:	480c      	ldr	r0, [pc, #48]	; (80049ec <BSP_SDRAM_Init+0xac>)
 80049ba:	f000 f87f 	bl	8004abc <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 80049be:	490d      	ldr	r1, [pc, #52]	; (80049f4 <BSP_SDRAM_Init+0xb4>)
 80049c0:	480a      	ldr	r0, [pc, #40]	; (80049ec <BSP_SDRAM_Init+0xac>)
 80049c2:	f005 fbc5 	bl	800a150 <HAL_SDRAM_Init>
 80049c6:	4603      	mov	r3, r0
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d003      	beq.n	80049d4 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 80049cc:	4b0a      	ldr	r3, [pc, #40]	; (80049f8 <BSP_SDRAM_Init+0xb8>)
 80049ce:	2201      	movs	r2, #1
 80049d0:	701a      	strb	r2, [r3, #0]
 80049d2:	e002      	b.n	80049da <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 80049d4:	4b08      	ldr	r3, [pc, #32]	; (80049f8 <BSP_SDRAM_Init+0xb8>)
 80049d6:	2200      	movs	r2, #0
 80049d8:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80049da:	f240 6003 	movw	r0, #1539	; 0x603
 80049de:	f000 f80d 	bl	80049fc <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 80049e2:	4b05      	ldr	r3, [pc, #20]	; (80049f8 <BSP_SDRAM_Init+0xb8>)
 80049e4:	781b      	ldrb	r3, [r3, #0]
}
 80049e6:	4618      	mov	r0, r3
 80049e8:	bd80      	pop	{r7, pc}
 80049ea:	bf00      	nop
 80049ec:	20008e24 	.word	0x20008e24
 80049f0:	a0000140 	.word	0xa0000140
 80049f4:	20000470 	.word	0x20000470
 80049f8:	20000050 	.word	0x20000050

080049fc <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80049fc:	b580      	push	{r7, lr}
 80049fe:	b084      	sub	sp, #16
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8004a08:	4b2a      	ldr	r3, [pc, #168]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004a0e:	4b29      	ldr	r3, [pc, #164]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a10:	2210      	movs	r2, #16
 8004a12:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004a14:	4b27      	ldr	r3, [pc, #156]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a16:	2201      	movs	r2, #1
 8004a18:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004a1a:	4b26      	ldr	r3, [pc, #152]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a24:	4923      	ldr	r1, [pc, #140]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a26:	4824      	ldr	r0, [pc, #144]	; (8004ab8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a28:	f005 fbc6 	bl	800a1b8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004a2c:	2001      	movs	r0, #1
 8004a2e:	f000 ffdb 	bl	80059e8 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8004a32:	4b20      	ldr	r3, [pc, #128]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a34:	2202      	movs	r2, #2
 8004a36:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004a38:	4b1e      	ldr	r3, [pc, #120]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004a3e:	4b1d      	ldr	r3, [pc, #116]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a40:	2201      	movs	r2, #1
 8004a42:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004a44:	4b1b      	ldr	r3, [pc, #108]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a46:	2200      	movs	r2, #0
 8004a48:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8004a4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a4e:	4919      	ldr	r1, [pc, #100]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a50:	4819      	ldr	r0, [pc, #100]	; (8004ab8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a52:	f005 fbb1 	bl	800a1b8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004a56:	4b17      	ldr	r3, [pc, #92]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a58:	2203      	movs	r2, #3
 8004a5a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004a5c:	4b15      	ldr	r3, [pc, #84]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a5e:	2210      	movs	r2, #16
 8004a60:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8004a62:	4b14      	ldr	r3, [pc, #80]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a64:	2208      	movs	r2, #8
 8004a66:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004a68:	4b12      	ldr	r3, [pc, #72]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004a6e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a72:	4910      	ldr	r1, [pc, #64]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a74:	4810      	ldr	r0, [pc, #64]	; (8004ab8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004a76:	f005 fb9f 	bl	800a1b8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8004a7a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8004a7e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8004a80:	4b0c      	ldr	r3, [pc, #48]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a82:	2204      	movs	r2, #4
 8004a84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8004a86:	4b0b      	ldr	r3, [pc, #44]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a88:	2210      	movs	r2, #16
 8004a8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8004a8c:	4b09      	ldr	r3, [pc, #36]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a8e:	2201      	movs	r2, #1
 8004a90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	4a07      	ldr	r2, [pc, #28]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a96:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8004a98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004a9c:	4905      	ldr	r1, [pc, #20]	; (8004ab4 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8004a9e:	4806      	ldr	r0, [pc, #24]	; (8004ab8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004aa0:	f005 fb8a 	bl	800a1b8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8004aa4:	6879      	ldr	r1, [r7, #4]
 8004aa6:	4804      	ldr	r0, [pc, #16]	; (8004ab8 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8004aa8:	f005 fbb1 	bl	800a20e <HAL_SDRAM_ProgramRefreshRate>
}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	2000048c 	.word	0x2000048c
 8004ab8:	20008e24 	.word	0x20008e24

08004abc <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b090      	sub	sp, #64	; 0x40
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004ac6:	4b70      	ldr	r3, [pc, #448]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aca:	4a6f      	ldr	r2, [pc, #444]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004acc:	f043 0301 	orr.w	r3, r3, #1
 8004ad0:	6393      	str	r3, [r2, #56]	; 0x38
 8004ad2:	4b6d      	ldr	r3, [pc, #436]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004ad4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ad6:	f003 0301 	and.w	r3, r3, #1
 8004ada:	62bb      	str	r3, [r7, #40]	; 0x28
 8004adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8004ade:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ae2:	4a69      	ldr	r2, [pc, #420]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004ae4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8004aea:	4b67      	ldr	r3, [pc, #412]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004af2:	627b      	str	r3, [r7, #36]	; 0x24
 8004af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004af6:	4b64      	ldr	r3, [pc, #400]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afa:	4a63      	ldr	r2, [pc, #396]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004afc:	f043 0304 	orr.w	r3, r3, #4
 8004b00:	6313      	str	r3, [r2, #48]	; 0x30
 8004b02:	4b61      	ldr	r3, [pc, #388]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b06:	f003 0304 	and.w	r3, r3, #4
 8004b0a:	623b      	str	r3, [r7, #32]
 8004b0c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004b0e:	4b5e      	ldr	r3, [pc, #376]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b12:	4a5d      	ldr	r2, [pc, #372]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b14:	f043 0308 	orr.w	r3, r3, #8
 8004b18:	6313      	str	r3, [r2, #48]	; 0x30
 8004b1a:	4b5b      	ldr	r3, [pc, #364]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b1e:	f003 0308 	and.w	r3, r3, #8
 8004b22:	61fb      	str	r3, [r7, #28]
 8004b24:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8004b26:	4b58      	ldr	r3, [pc, #352]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b2a:	4a57      	ldr	r2, [pc, #348]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b2c:	f043 0310 	orr.w	r3, r3, #16
 8004b30:	6313      	str	r3, [r2, #48]	; 0x30
 8004b32:	4b55      	ldr	r3, [pc, #340]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	61bb      	str	r3, [r7, #24]
 8004b3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004b3e:	4b52      	ldr	r3, [pc, #328]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b42:	4a51      	ldr	r2, [pc, #324]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b44:	f043 0320 	orr.w	r3, r3, #32
 8004b48:	6313      	str	r3, [r2, #48]	; 0x30
 8004b4a:	4b4f      	ldr	r3, [pc, #316]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b4e:	f003 0320 	and.w	r3, r3, #32
 8004b52:	617b      	str	r3, [r7, #20]
 8004b54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004b56:	4b4c      	ldr	r3, [pc, #304]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5a:	4a4b      	ldr	r2, [pc, #300]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004b60:	6313      	str	r3, [r2, #48]	; 0x30
 8004b62:	4b49      	ldr	r3, [pc, #292]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	613b      	str	r3, [r7, #16]
 8004b6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004b6e:	4b46      	ldr	r3, [pc, #280]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b72:	4a45      	ldr	r2, [pc, #276]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004b78:	6313      	str	r3, [r2, #48]	; 0x30
 8004b7a:	4b43      	ldr	r3, [pc, #268]	; (8004c88 <BSP_SDRAM_MspInit+0x1cc>)
 8004b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b82:	60fb      	str	r3, [r7, #12]
 8004b84:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8004b86:	2302      	movs	r3, #2
 8004b88:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8004b8e:	2302      	movs	r3, #2
 8004b90:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8004b92:	230c      	movs	r3, #12
 8004b94:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8004b96:	2308      	movs	r3, #8
 8004b98:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8004b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004b9e:	4619      	mov	r1, r3
 8004ba0:	483a      	ldr	r0, [pc, #232]	; (8004c8c <BSP_SDRAM_MspInit+0x1d0>)
 8004ba2:	f002 f93b 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8004ba6:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004baa:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8004bac:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bb0:	4619      	mov	r1, r3
 8004bb2:	4837      	ldr	r0, [pc, #220]	; (8004c90 <BSP_SDRAM_MspInit+0x1d4>)
 8004bb4:	f002 f932 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8004bb8:	f64f 7383 	movw	r3, #65411	; 0xff83
 8004bbc:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004bbe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bc2:	4619      	mov	r1, r3
 8004bc4:	4833      	ldr	r0, [pc, #204]	; (8004c94 <BSP_SDRAM_MspInit+0x1d8>)
 8004bc6:	f002 f929 	bl	8006e1c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8004bca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004bce:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8004bd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bd4:	4619      	mov	r1, r3
 8004bd6:	4830      	ldr	r0, [pc, #192]	; (8004c98 <BSP_SDRAM_MspInit+0x1dc>)
 8004bd8:	f002 f920 	bl	8006e1c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8004bdc:	f248 1333 	movw	r3, #33075	; 0x8133
 8004be0:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004be2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004be6:	4619      	mov	r1, r3
 8004be8:	482c      	ldr	r0, [pc, #176]	; (8004c9c <BSP_SDRAM_MspInit+0x1e0>)
 8004bea:	f002 f917 	bl	8006e1c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8004bee:	2328      	movs	r3, #40	; 0x28
 8004bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8004bf2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004bf6:	4619      	mov	r1, r3
 8004bf8:	4829      	ldr	r0, [pc, #164]	; (8004ca0 <BSP_SDRAM_MspInit+0x1e4>)
 8004bfa:	f002 f90f 	bl	8006e1c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c00:	2200      	movs	r2, #0
 8004c02:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8004c04:	4b27      	ldr	r3, [pc, #156]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c06:	2280      	movs	r2, #128	; 0x80
 8004c08:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8004c0a:	4b26      	ldr	r3, [pc, #152]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004c10:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004c18:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8004c1a:	4b22      	ldr	r3, [pc, #136]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c1c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8004c20:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8004c22:	4b20      	ldr	r3, [pc, #128]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c24:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004c28:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8004c2a:	4b1e      	ldr	r3, [pc, #120]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c2c:	2200      	movs	r2, #0
 8004c2e:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004c30:	4b1c      	ldr	r3, [pc, #112]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8004c36:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8004c38:	4b1a      	ldr	r3, [pc, #104]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004c3e:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c40:	2203      	movs	r2, #3
 8004c42:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c46:	2200      	movs	r2, #0
 8004c48:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8004c4a:	4b16      	ldr	r3, [pc, #88]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8004c50:	4b14      	ldr	r3, [pc, #80]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c52:	4a15      	ldr	r2, [pc, #84]	; (8004ca8 <BSP_SDRAM_MspInit+0x1ec>)
 8004c54:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	4a12      	ldr	r2, [pc, #72]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c5a:	631a      	str	r2, [r3, #48]	; 0x30
 8004c5c:	4a11      	ldr	r2, [pc, #68]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8004c62:	4810      	ldr	r0, [pc, #64]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c64:	f001 fd1c 	bl	80066a0 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8004c68:	480e      	ldr	r0, [pc, #56]	; (8004ca4 <BSP_SDRAM_MspInit+0x1e8>)
 8004c6a:	f001 fc6b 	bl	8006544 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8004c6e:	2200      	movs	r2, #0
 8004c70:	210f      	movs	r1, #15
 8004c72:	2038      	movs	r0, #56	; 0x38
 8004c74:	f001 fb6e 	bl	8006354 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004c78:	2038      	movs	r0, #56	; 0x38
 8004c7a:	f001 fb87 	bl	800638c <HAL_NVIC_EnableIRQ>
}
 8004c7e:	bf00      	nop
 8004c80:	3740      	adds	r7, #64	; 0x40
 8004c82:	46bd      	mov	sp, r7
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	bf00      	nop
 8004c88:	40023800 	.word	0x40023800
 8004c8c:	40020800 	.word	0x40020800
 8004c90:	40020c00 	.word	0x40020c00
 8004c94:	40021000 	.word	0x40021000
 8004c98:	40021400 	.word	0x40021400
 8004c9c:	40021800 	.word	0x40021800
 8004ca0:	40021c00 	.word	0x40021c00
 8004ca4:	2000049c 	.word	0x2000049c
 8004ca8:	40026410 	.word	0x40026410

08004cac <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8004cac:	b580      	push	{r7, lr}
 8004cae:	b084      	sub	sp, #16
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	4603      	mov	r3, r0
 8004cb4:	460a      	mov	r2, r1
 8004cb6:	80fb      	strh	r3, [r7, #6]
 8004cb8:	4613      	mov	r3, r2
 8004cba:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8004cc0:	4a14      	ldr	r2, [pc, #80]	; (8004d14 <BSP_TS_Init+0x68>)
 8004cc2:	88fb      	ldrh	r3, [r7, #6]
 8004cc4:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8004cc6:	4a14      	ldr	r2, [pc, #80]	; (8004d18 <BSP_TS_Init+0x6c>)
 8004cc8:	88bb      	ldrh	r3, [r7, #4]
 8004cca:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8004ccc:	4b13      	ldr	r3, [pc, #76]	; (8004d1c <BSP_TS_Init+0x70>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	2070      	movs	r0, #112	; 0x70
 8004cd2:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8004cd4:	4b11      	ldr	r3, [pc, #68]	; (8004d1c <BSP_TS_Init+0x70>)
 8004cd6:	685b      	ldr	r3, [r3, #4]
 8004cd8:	2070      	movs	r0, #112	; 0x70
 8004cda:	4798      	blx	r3
 8004cdc:	4603      	mov	r3, r0
 8004cde:	2b51      	cmp	r3, #81	; 0x51
 8004ce0:	d111      	bne.n	8004d06 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8004ce2:	4b0f      	ldr	r3, [pc, #60]	; (8004d20 <BSP_TS_Init+0x74>)
 8004ce4:	4a0d      	ldr	r2, [pc, #52]	; (8004d1c <BSP_TS_Init+0x70>)
 8004ce6:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8004ce8:	4b0e      	ldr	r3, [pc, #56]	; (8004d24 <BSP_TS_Init+0x78>)
 8004cea:	2270      	movs	r2, #112	; 0x70
 8004cec:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8004cee:	4b0e      	ldr	r3, [pc, #56]	; (8004d28 <BSP_TS_Init+0x7c>)
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8004cf4:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <BSP_TS_Init+0x74>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	68db      	ldr	r3, [r3, #12]
 8004cfa:	4a0a      	ldr	r2, [pc, #40]	; (8004d24 <BSP_TS_Init+0x78>)
 8004cfc:	7812      	ldrb	r2, [r2, #0]
 8004cfe:	b292      	uxth	r2, r2
 8004d00:	4610      	mov	r0, r2
 8004d02:	4798      	blx	r3
 8004d04:	e001      	b.n	8004d0a <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8004d06:	2303      	movs	r3, #3
 8004d08:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d0c:	4618      	mov	r0, r3
 8004d0e:	3710      	adds	r7, #16
 8004d10:	46bd      	mov	sp, r7
 8004d12:	bd80      	pop	{r7, pc}
 8004d14:	20000500 	.word	0x20000500
 8004d18:	20000502 	.word	0x20000502
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	200004fc 	.word	0x200004fc
 8004d24:	20000505 	.word	0x20000505
 8004d28:	20000504 	.word	0x20000504

08004d2c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d2c:	b580      	push	{r7, lr}
 8004d2e:	b082      	sub	sp, #8
 8004d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8004d32:	4b11      	ldr	r3, [pc, #68]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d36:	4a10      	ldr	r2, [pc, #64]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d3e:	4b0e      	ldr	r3, [pc, #56]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	607b      	str	r3, [r7, #4]
 8004d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d4a:	4b0b      	ldr	r3, [pc, #44]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d4e:	4a0a      	ldr	r2, [pc, #40]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004d54:	6453      	str	r3, [r2, #68]	; 0x44
 8004d56:	4b08      	ldr	r3, [pc, #32]	; (8004d78 <HAL_MspInit+0x4c>)
 8004d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004d5e:	603b      	str	r3, [r7, #0]
 8004d60:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d62:	2200      	movs	r2, #0
 8004d64:	210f      	movs	r1, #15
 8004d66:	f06f 0001 	mvn.w	r0, #1
 8004d6a:	f001 faf3 	bl	8006354 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d6e:	bf00      	nop
 8004d70:	3708      	adds	r7, #8
 8004d72:	46bd      	mov	sp, r7
 8004d74:	bd80      	pop	{r7, pc}
 8004d76:	bf00      	nop
 8004d78:	40023800 	.word	0x40023800

08004d7c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b08c      	sub	sp, #48	; 0x30
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004d84:	f107 031c 	add.w	r3, r7, #28
 8004d88:	2200      	movs	r2, #0
 8004d8a:	601a      	str	r2, [r3, #0]
 8004d8c:	605a      	str	r2, [r3, #4]
 8004d8e:	609a      	str	r2, [r3, #8]
 8004d90:	60da      	str	r2, [r3, #12]
 8004d92:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	4a2a      	ldr	r2, [pc, #168]	; (8004e44 <HAL_ADC_MspInit+0xc8>)
 8004d9a:	4293      	cmp	r3, r2
 8004d9c:	d124      	bne.n	8004de8 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8004d9e:	4b2a      	ldr	r3, [pc, #168]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004da2:	4a29      	ldr	r2, [pc, #164]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004da4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004da8:	6453      	str	r3, [r2, #68]	; 0x44
 8004daa:	4b27      	ldr	r3, [pc, #156]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db2:	61bb      	str	r3, [r7, #24]
 8004db4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004db6:	4b24      	ldr	r3, [pc, #144]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dba:	4a23      	ldr	r2, [pc, #140]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004dbc:	f043 0301 	orr.w	r3, r3, #1
 8004dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8004dc2:	4b21      	ldr	r3, [pc, #132]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dc6:	f003 0301 	and.w	r3, r3, #1
 8004dca:	617b      	str	r3, [r7, #20]
 8004dcc:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004dce:	2301      	movs	r3, #1
 8004dd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004dd2:	2303      	movs	r3, #3
 8004dd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004dda:	f107 031c 	add.w	r3, r7, #28
 8004dde:	4619      	mov	r1, r3
 8004de0:	481a      	ldr	r0, [pc, #104]	; (8004e4c <HAL_ADC_MspInit+0xd0>)
 8004de2:	f002 f81b 	bl	8006e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8004de6:	e029      	b.n	8004e3c <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	4a18      	ldr	r2, [pc, #96]	; (8004e50 <HAL_ADC_MspInit+0xd4>)
 8004dee:	4293      	cmp	r3, r2
 8004df0:	d124      	bne.n	8004e3c <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8004df2:	4b15      	ldr	r3, [pc, #84]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004df4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004df6:	4a14      	ldr	r2, [pc, #80]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004df8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004dfc:	6453      	str	r3, [r2, #68]	; 0x44
 8004dfe:	4b12      	ldr	r3, [pc, #72]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e02:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004e0a:	4b0f      	ldr	r3, [pc, #60]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0e:	4a0e      	ldr	r2, [pc, #56]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004e10:	f043 0320 	orr.w	r3, r3, #32
 8004e14:	6313      	str	r3, [r2, #48]	; 0x30
 8004e16:	4b0c      	ldr	r3, [pc, #48]	; (8004e48 <HAL_ADC_MspInit+0xcc>)
 8004e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e1a:	f003 0320 	and.w	r3, r3, #32
 8004e1e:	60fb      	str	r3, [r7, #12]
 8004e20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8004e22:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8004e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004e28:	2303      	movs	r3, #3
 8004e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004e30:	f107 031c 	add.w	r3, r7, #28
 8004e34:	4619      	mov	r1, r3
 8004e36:	4807      	ldr	r0, [pc, #28]	; (8004e54 <HAL_ADC_MspInit+0xd8>)
 8004e38:	f001 fff0 	bl	8006e1c <HAL_GPIO_Init>
}
 8004e3c:	bf00      	nop
 8004e3e:	3730      	adds	r7, #48	; 0x30
 8004e40:	46bd      	mov	sp, r7
 8004e42:	bd80      	pop	{r7, pc}
 8004e44:	40012000 	.word	0x40012000
 8004e48:	40023800 	.word	0x40023800
 8004e4c:	40020000 	.word	0x40020000
 8004e50:	40012200 	.word	0x40012200
 8004e54:	40021400 	.word	0x40021400

08004e58 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b08a      	sub	sp, #40	; 0x28
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e60:	f107 0314 	add.w	r3, r7, #20
 8004e64:	2200      	movs	r2, #0
 8004e66:	601a      	str	r2, [r3, #0]
 8004e68:	605a      	str	r2, [r3, #4]
 8004e6a:	609a      	str	r2, [r3, #8]
 8004e6c:	60da      	str	r2, [r3, #12]
 8004e6e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a19      	ldr	r2, [pc, #100]	; (8004edc <HAL_DAC_MspInit+0x84>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d12b      	bne.n	8004ed2 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8004e7a:	4b19      	ldr	r3, [pc, #100]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a18      	ldr	r2, [pc, #96]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004e80:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
 8004e86:	4b16      	ldr	r3, [pc, #88]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e8e:	613b      	str	r3, [r7, #16]
 8004e90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e92:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e96:	4a12      	ldr	r2, [pc, #72]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004e98:	f043 0301 	orr.w	r3, r3, #1
 8004e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <HAL_DAC_MspInit+0x88>)
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	f003 0301 	and.w	r3, r3, #1
 8004ea6:	60fb      	str	r3, [r7, #12]
 8004ea8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004eaa:	2310      	movs	r3, #16
 8004eac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004eae:	2303      	movs	r3, #3
 8004eb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4619      	mov	r1, r3
 8004ebc:	4809      	ldr	r0, [pc, #36]	; (8004ee4 <HAL_DAC_MspInit+0x8c>)
 8004ebe:	f001 ffad 	bl	8006e1c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	2100      	movs	r1, #0
 8004ec6:	2036      	movs	r0, #54	; 0x36
 8004ec8:	f001 fa44 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004ecc:	2036      	movs	r0, #54	; 0x36
 8004ece:	f001 fa5d 	bl	800638c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8004ed2:	bf00      	nop
 8004ed4:	3728      	adds	r7, #40	; 0x28
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	40007400 	.word	0x40007400
 8004ee0:	40023800 	.word	0x40023800
 8004ee4:	40020000 	.word	0x40020000

08004ee8 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004ee8:	b480      	push	{r7}
 8004eea:	b085      	sub	sp, #20
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a0a      	ldr	r2, [pc, #40]	; (8004f20 <HAL_DMA2D_MspInit+0x38>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10b      	bne.n	8004f12 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004efa:	4b0a      	ldr	r3, [pc, #40]	; (8004f24 <HAL_DMA2D_MspInit+0x3c>)
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	4a09      	ldr	r2, [pc, #36]	; (8004f24 <HAL_DMA2D_MspInit+0x3c>)
 8004f00:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f04:	6313      	str	r3, [r2, #48]	; 0x30
 8004f06:	4b07      	ldr	r3, [pc, #28]	; (8004f24 <HAL_DMA2D_MspInit+0x3c>)
 8004f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f0e:	60fb      	str	r3, [r7, #12]
 8004f10:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8004f12:	bf00      	nop
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	4002b000 	.word	0x4002b000
 8004f24:	40023800 	.word	0x40023800

08004f28 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004f28:	b580      	push	{r7, lr}
 8004f2a:	b08c      	sub	sp, #48	; 0x30
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f30:	f107 031c 	add.w	r3, r7, #28
 8004f34:	2200      	movs	r2, #0
 8004f36:	601a      	str	r2, [r3, #0]
 8004f38:	605a      	str	r2, [r3, #4]
 8004f3a:	609a      	str	r2, [r3, #8]
 8004f3c:	60da      	str	r2, [r3, #12]
 8004f3e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a2f      	ldr	r2, [pc, #188]	; (8005004 <HAL_I2C_MspInit+0xdc>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d129      	bne.n	8004f9e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004f4a:	4b2f      	ldr	r3, [pc, #188]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f4e:	4a2e      	ldr	r2, [pc, #184]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f50:	f043 0302 	orr.w	r3, r3, #2
 8004f54:	6313      	str	r3, [r2, #48]	; 0x30
 8004f56:	4b2c      	ldr	r3, [pc, #176]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f5a:	f003 0302 	and.w	r3, r3, #2
 8004f5e:	61bb      	str	r3, [r7, #24]
 8004f60:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8004f62:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004f66:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004f68:	2312      	movs	r3, #18
 8004f6a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f70:	2300      	movs	r3, #0
 8004f72:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004f74:	2304      	movs	r3, #4
 8004f76:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004f78:	f107 031c 	add.w	r3, r7, #28
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	4823      	ldr	r0, [pc, #140]	; (800500c <HAL_I2C_MspInit+0xe4>)
 8004f80:	f001 ff4c 	bl	8006e1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004f84:	4b20      	ldr	r3, [pc, #128]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f88:	4a1f      	ldr	r2, [pc, #124]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f8a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004f8e:	6413      	str	r3, [r2, #64]	; 0x40
 8004f90:	4b1d      	ldr	r3, [pc, #116]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004f92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f98:	617b      	str	r3, [r7, #20]
 8004f9a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004f9c:	e02d      	b.n	8004ffa <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	4a1b      	ldr	r2, [pc, #108]	; (8005010 <HAL_I2C_MspInit+0xe8>)
 8004fa4:	4293      	cmp	r3, r2
 8004fa6:	d128      	bne.n	8004ffa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004fa8:	4b17      	ldr	r3, [pc, #92]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004faa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fac:	4a16      	ldr	r2, [pc, #88]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004fae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004fb2:	6313      	str	r3, [r2, #48]	; 0x30
 8004fb4:	4b14      	ldr	r3, [pc, #80]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fbc:	613b      	str	r3, [r7, #16]
 8004fbe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004fc0:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8004fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fc6:	2312      	movs	r3, #18
 8004fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004fca:	2301      	movs	r3, #1
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fce:	2303      	movs	r3, #3
 8004fd0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8004fd2:	2304      	movs	r3, #4
 8004fd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004fd6:	f107 031c 	add.w	r3, r7, #28
 8004fda:	4619      	mov	r1, r3
 8004fdc:	480d      	ldr	r0, [pc, #52]	; (8005014 <HAL_I2C_MspInit+0xec>)
 8004fde:	f001 ff1d 	bl	8006e1c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8004fe2:	4b09      	ldr	r3, [pc, #36]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	4a08      	ldr	r2, [pc, #32]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004fe8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004fec:	6413      	str	r3, [r2, #64]	; 0x40
 8004fee:	4b06      	ldr	r3, [pc, #24]	; (8005008 <HAL_I2C_MspInit+0xe0>)
 8004ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ff2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff6:	60fb      	str	r3, [r7, #12]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
}
 8004ffa:	bf00      	nop
 8004ffc:	3730      	adds	r7, #48	; 0x30
 8004ffe:	46bd      	mov	sp, r7
 8005000:	bd80      	pop	{r7, pc}
 8005002:	bf00      	nop
 8005004:	40005400 	.word	0x40005400
 8005008:	40023800 	.word	0x40023800
 800500c:	40020400 	.word	0x40020400
 8005010:	40005c00 	.word	0x40005c00
 8005014:	40021c00 	.word	0x40021c00

08005018 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8005018:	b580      	push	{r7, lr}
 800501a:	b082      	sub	sp, #8
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	4a15      	ldr	r2, [pc, #84]	; (800507c <HAL_I2C_MspDeInit+0x64>)
 8005026:	4293      	cmp	r3, r2
 8005028:	d110      	bne.n	800504c <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 800502a:	4b15      	ldr	r3, [pc, #84]	; (8005080 <HAL_I2C_MspDeInit+0x68>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502e:	4a14      	ldr	r2, [pc, #80]	; (8005080 <HAL_I2C_MspDeInit+0x68>)
 8005030:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005034:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8005036:	f44f 7180 	mov.w	r1, #256	; 0x100
 800503a:	4812      	ldr	r0, [pc, #72]	; (8005084 <HAL_I2C_MspDeInit+0x6c>)
 800503c:	f002 f89a 	bl	8007174 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8005040:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005044:	480f      	ldr	r0, [pc, #60]	; (8005084 <HAL_I2C_MspDeInit+0x6c>)
 8005046:	f002 f895 	bl	8007174 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 800504a:	e013      	b.n	8005074 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4a0d      	ldr	r2, [pc, #52]	; (8005088 <HAL_I2C_MspDeInit+0x70>)
 8005052:	4293      	cmp	r3, r2
 8005054:	d10e      	bne.n	8005074 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8005056:	4b0a      	ldr	r3, [pc, #40]	; (8005080 <HAL_I2C_MspDeInit+0x68>)
 8005058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800505a:	4a09      	ldr	r2, [pc, #36]	; (8005080 <HAL_I2C_MspDeInit+0x68>)
 800505c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005060:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8005062:	2180      	movs	r1, #128	; 0x80
 8005064:	4809      	ldr	r0, [pc, #36]	; (800508c <HAL_I2C_MspDeInit+0x74>)
 8005066:	f002 f885 	bl	8007174 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800506a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800506e:	4807      	ldr	r0, [pc, #28]	; (800508c <HAL_I2C_MspDeInit+0x74>)
 8005070:	f002 f880 	bl	8007174 <HAL_GPIO_DeInit>
}
 8005074:	bf00      	nop
 8005076:	3708      	adds	r7, #8
 8005078:	46bd      	mov	sp, r7
 800507a:	bd80      	pop	{r7, pc}
 800507c:	40005400 	.word	0x40005400
 8005080:	40023800 	.word	0x40023800
 8005084:	40020400 	.word	0x40020400
 8005088:	40005c00 	.word	0x40005c00
 800508c:	40021c00 	.word	0x40021c00

08005090 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b08e      	sub	sp, #56	; 0x38
 8005094:	af00      	add	r7, sp, #0
 8005096:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005098:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800509c:	2200      	movs	r2, #0
 800509e:	601a      	str	r2, [r3, #0]
 80050a0:	605a      	str	r2, [r3, #4]
 80050a2:	609a      	str	r2, [r3, #8]
 80050a4:	60da      	str	r2, [r3, #12]
 80050a6:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	4a55      	ldr	r2, [pc, #340]	; (8005204 <HAL_LTDC_MspInit+0x174>)
 80050ae:	4293      	cmp	r3, r2
 80050b0:	f040 80a3 	bne.w	80051fa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80050b4:	4b54      	ldr	r3, [pc, #336]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050b8:	4a53      	ldr	r2, [pc, #332]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80050be:	6453      	str	r3, [r2, #68]	; 0x44
 80050c0:	4b51      	ldr	r3, [pc, #324]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80050c4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80050c8:	623b      	str	r3, [r7, #32]
 80050ca:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 80050cc:	4b4e      	ldr	r3, [pc, #312]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d0:	4a4d      	ldr	r2, [pc, #308]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050d2:	f043 0310 	orr.w	r3, r3, #16
 80050d6:	6313      	str	r3, [r2, #48]	; 0x30
 80050d8:	4b4b      	ldr	r3, [pc, #300]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050dc:	f003 0310 	and.w	r3, r3, #16
 80050e0:	61fb      	str	r3, [r7, #28]
 80050e2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80050e4:	4b48      	ldr	r3, [pc, #288]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050e8:	4a47      	ldr	r2, [pc, #284]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80050ee:	6313      	str	r3, [r2, #48]	; 0x30
 80050f0:	4b45      	ldr	r3, [pc, #276]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80050f8:	61bb      	str	r3, [r7, #24]
 80050fa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80050fc:	4b42      	ldr	r3, [pc, #264]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 80050fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005100:	4a41      	ldr	r2, [pc, #260]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 8005102:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005106:	6313      	str	r3, [r2, #48]	; 0x30
 8005108:	4b3f      	ldr	r3, [pc, #252]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 800510a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800510c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005110:	617b      	str	r3, [r7, #20]
 8005112:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005114:	4b3c      	ldr	r3, [pc, #240]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 8005116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005118:	4a3b      	ldr	r2, [pc, #236]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 800511a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800511e:	6313      	str	r3, [r2, #48]	; 0x30
 8005120:	4b39      	ldr	r3, [pc, #228]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 8005122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005124:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005128:	613b      	str	r3, [r7, #16]
 800512a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 800512c:	4b36      	ldr	r3, [pc, #216]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 800512e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005130:	4a35      	ldr	r2, [pc, #212]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 8005132:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005136:	6313      	str	r3, [r2, #48]	; 0x30
 8005138:	4b33      	ldr	r3, [pc, #204]	; (8005208 <HAL_LTDC_MspInit+0x178>)
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005140:	60fb      	str	r3, [r7, #12]
 8005142:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 8005144:	2310      	movs	r3, #16
 8005146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005148:	2302      	movs	r3, #2
 800514a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800514c:	2300      	movs	r3, #0
 800514e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005150:	2300      	movs	r3, #0
 8005152:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005154:	230e      	movs	r3, #14
 8005156:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8005158:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800515c:	4619      	mov	r1, r3
 800515e:	482b      	ldr	r0, [pc, #172]	; (800520c <HAL_LTDC_MspInit+0x17c>)
 8005160:	f001 fe5c 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8005164:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8005168:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800516a:	2302      	movs	r3, #2
 800516c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516e:	2300      	movs	r3, #0
 8005170:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005172:	2300      	movs	r3, #0
 8005174:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005176:	230e      	movs	r3, #14
 8005178:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800517a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800517e:	4619      	mov	r1, r3
 8005180:	4823      	ldr	r0, [pc, #140]	; (8005210 <HAL_LTDC_MspInit+0x180>)
 8005182:	f001 fe4b 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8005186:	23f7      	movs	r3, #247	; 0xf7
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800518a:	2302      	movs	r3, #2
 800518c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800518e:	2300      	movs	r3, #0
 8005190:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005192:	2300      	movs	r3, #0
 8005194:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8005196:	230e      	movs	r3, #14
 8005198:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800519a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800519e:	4619      	mov	r1, r3
 80051a0:	481c      	ldr	r0, [pc, #112]	; (8005214 <HAL_LTDC_MspInit+0x184>)
 80051a2:	f001 fe3b 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 80051a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ac:	2302      	movs	r3, #2
 80051ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051b0:	2300      	movs	r3, #0
 80051b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051b4:	2300      	movs	r3, #0
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80051b8:	2309      	movs	r3, #9
 80051ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 80051bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051c0:	4619      	mov	r1, r3
 80051c2:	4815      	ldr	r0, [pc, #84]	; (8005218 <HAL_LTDC_MspInit+0x188>)
 80051c4:	f001 fe2a 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 80051c8:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 80051cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051ce:	2302      	movs	r3, #2
 80051d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051d2:	2300      	movs	r3, #0
 80051d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80051d6:	2300      	movs	r3, #0
 80051d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80051da:	230e      	movs	r3, #14
 80051dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80051de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80051e2:	4619      	mov	r1, r3
 80051e4:	480d      	ldr	r0, [pc, #52]	; (800521c <HAL_LTDC_MspInit+0x18c>)
 80051e6:	f001 fe19 	bl	8006e1c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 80051ea:	2200      	movs	r2, #0
 80051ec:	2105      	movs	r1, #5
 80051ee:	2058      	movs	r0, #88	; 0x58
 80051f0:	f001 f8b0 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80051f4:	2058      	movs	r0, #88	; 0x58
 80051f6:	f001 f8c9 	bl	800638c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80051fa:	bf00      	nop
 80051fc:	3738      	adds	r7, #56	; 0x38
 80051fe:	46bd      	mov	sp, r7
 8005200:	bd80      	pop	{r7, pc}
 8005202:	bf00      	nop
 8005204:	40016800 	.word	0x40016800
 8005208:	40023800 	.word	0x40023800
 800520c:	40021000 	.word	0x40021000
 8005210:	40022400 	.word	0x40022400
 8005214:	40022800 	.word	0x40022800
 8005218:	40021800 	.word	0x40021800
 800521c:	40022000 	.word	0x40022000

08005220 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	4a07      	ldr	r2, [pc, #28]	; (800524c <HAL_RTC_MspInit+0x2c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d105      	bne.n	800523e <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8005232:	4b07      	ldr	r3, [pc, #28]	; (8005250 <HAL_RTC_MspInit+0x30>)
 8005234:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005236:	4a06      	ldr	r2, [pc, #24]	; (8005250 <HAL_RTC_MspInit+0x30>)
 8005238:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800523c:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 800523e:	bf00      	nop
 8005240:	370c      	adds	r7, #12
 8005242:	46bd      	mov	sp, r7
 8005244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005248:	4770      	bx	lr
 800524a:	bf00      	nop
 800524c:	40002800 	.word	0x40002800
 8005250:	40023800 	.word	0x40023800

08005254 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8005254:	b580      	push	{r7, lr}
 8005256:	b08a      	sub	sp, #40	; 0x28
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800525c:	f107 0314 	add.w	r3, r7, #20
 8005260:	2200      	movs	r2, #0
 8005262:	601a      	str	r2, [r3, #0]
 8005264:	605a      	str	r2, [r3, #4]
 8005266:	609a      	str	r2, [r3, #8]
 8005268:	60da      	str	r2, [r3, #12]
 800526a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4a2d      	ldr	r2, [pc, #180]	; (8005328 <HAL_SPI_MspInit+0xd4>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d154      	bne.n	8005320 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8005276:	4b2d      	ldr	r3, [pc, #180]	; (800532c <HAL_SPI_MspInit+0xd8>)
 8005278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800527a:	4a2c      	ldr	r2, [pc, #176]	; (800532c <HAL_SPI_MspInit+0xd8>)
 800527c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005280:	6413      	str	r3, [r2, #64]	; 0x40
 8005282:	4b2a      	ldr	r3, [pc, #168]	; (800532c <HAL_SPI_MspInit+0xd8>)
 8005284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800528a:	613b      	str	r3, [r7, #16]
 800528c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800528e:	4b27      	ldr	r3, [pc, #156]	; (800532c <HAL_SPI_MspInit+0xd8>)
 8005290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005292:	4a26      	ldr	r2, [pc, #152]	; (800532c <HAL_SPI_MspInit+0xd8>)
 8005294:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005298:	6313      	str	r3, [r2, #48]	; 0x30
 800529a:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_SPI_MspInit+0xd8>)
 800529c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800529e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a2:	60fb      	str	r3, [r7, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80052a6:	4b21      	ldr	r3, [pc, #132]	; (800532c <HAL_SPI_MspInit+0xd8>)
 80052a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052aa:	4a20      	ldr	r2, [pc, #128]	; (800532c <HAL_SPI_MspInit+0xd8>)
 80052ac:	f043 0302 	orr.w	r3, r3, #2
 80052b0:	6313      	str	r3, [r2, #48]	; 0x30
 80052b2:	4b1e      	ldr	r3, [pc, #120]	; (800532c <HAL_SPI_MspInit+0xd8>)
 80052b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052b6:	f003 0302 	and.w	r3, r3, #2
 80052ba:	60bb      	str	r3, [r7, #8]
 80052bc:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 80052be:	2302      	movs	r3, #2
 80052c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052c2:	2302      	movs	r3, #2
 80052c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052c6:	2300      	movs	r3, #0
 80052c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80052ca:	2300      	movs	r3, #0
 80052cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052ce:	2305      	movs	r3, #5
 80052d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 80052d2:	f107 0314 	add.w	r3, r7, #20
 80052d6:	4619      	mov	r1, r3
 80052d8:	4815      	ldr	r0, [pc, #84]	; (8005330 <HAL_SPI_MspInit+0xdc>)
 80052da:	f001 fd9f 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80052de:	2301      	movs	r3, #1
 80052e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80052e2:	2302      	movs	r3, #2
 80052e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80052e6:	2300      	movs	r3, #0
 80052e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80052ea:	2303      	movs	r3, #3
 80052ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80052ee:	2305      	movs	r3, #5
 80052f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80052f2:	f107 0314 	add.w	r3, r7, #20
 80052f6:	4619      	mov	r1, r3
 80052f8:	480d      	ldr	r0, [pc, #52]	; (8005330 <HAL_SPI_MspInit+0xdc>)
 80052fa:	f001 fd8f 	bl	8006e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80052fe:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8005302:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005304:	2302      	movs	r3, #2
 8005306:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005308:	2300      	movs	r3, #0
 800530a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800530c:	2303      	movs	r3, #3
 800530e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8005310:	2305      	movs	r3, #5
 8005312:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005314:	f107 0314 	add.w	r3, r7, #20
 8005318:	4619      	mov	r1, r3
 800531a:	4806      	ldr	r0, [pc, #24]	; (8005334 <HAL_SPI_MspInit+0xe0>)
 800531c:	f001 fd7e 	bl	8006e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8005320:	bf00      	nop
 8005322:	3728      	adds	r7, #40	; 0x28
 8005324:	46bd      	mov	sp, r7
 8005326:	bd80      	pop	{r7, pc}
 8005328:	40003800 	.word	0x40003800
 800532c:	40023800 	.word	0x40023800
 8005330:	40022000 	.word	0x40022000
 8005334:	40020400 	.word	0x40020400

08005338 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005338:	b480      	push	{r7}
 800533a:	b089      	sub	sp, #36	; 0x24
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	4a2e      	ldr	r2, [pc, #184]	; (8005400 <HAL_TIM_Base_MspInit+0xc8>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d10c      	bne.n	8005364 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800534a:	4b2e      	ldr	r3, [pc, #184]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 800534c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800534e:	4a2d      	ldr	r2, [pc, #180]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005350:	f043 0301 	orr.w	r3, r3, #1
 8005354:	6453      	str	r3, [r2, #68]	; 0x44
 8005356:	4b2b      	ldr	r3, [pc, #172]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005358:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800535a:	f003 0301 	and.w	r3, r3, #1
 800535e:	61fb      	str	r3, [r7, #28]
 8005360:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8005362:	e046      	b.n	80053f2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800536c:	d10c      	bne.n	8005388 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800536e:	4b25      	ldr	r3, [pc, #148]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005372:	4a24      	ldr	r2, [pc, #144]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005374:	f043 0301 	orr.w	r3, r3, #1
 8005378:	6413      	str	r3, [r2, #64]	; 0x40
 800537a:	4b22      	ldr	r3, [pc, #136]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 800537c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800537e:	f003 0301 	and.w	r3, r3, #1
 8005382:	61bb      	str	r3, [r7, #24]
 8005384:	69bb      	ldr	r3, [r7, #24]
}
 8005386:	e034      	b.n	80053f2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a1e      	ldr	r2, [pc, #120]	; (8005408 <HAL_TIM_Base_MspInit+0xd0>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d10c      	bne.n	80053ac <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005396:	4a1b      	ldr	r2, [pc, #108]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 8005398:	f043 0302 	orr.w	r3, r3, #2
 800539c:	6413      	str	r3, [r2, #64]	; 0x40
 800539e:	4b19      	ldr	r3, [pc, #100]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053a2:	f003 0302 	and.w	r3, r3, #2
 80053a6:	617b      	str	r3, [r7, #20]
 80053a8:	697b      	ldr	r3, [r7, #20]
}
 80053aa:	e022      	b.n	80053f2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	4a16      	ldr	r2, [pc, #88]	; (800540c <HAL_TIM_Base_MspInit+0xd4>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d10c      	bne.n	80053d0 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80053b6:	4b13      	ldr	r3, [pc, #76]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ba:	4a12      	ldr	r2, [pc, #72]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053bc:	f043 0308 	orr.w	r3, r3, #8
 80053c0:	6413      	str	r3, [r2, #64]	; 0x40
 80053c2:	4b10      	ldr	r3, [pc, #64]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053c6:	f003 0308 	and.w	r3, r3, #8
 80053ca:	613b      	str	r3, [r7, #16]
 80053cc:	693b      	ldr	r3, [r7, #16]
}
 80053ce:	e010      	b.n	80053f2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	4a0e      	ldr	r2, [pc, #56]	; (8005410 <HAL_TIM_Base_MspInit+0xd8>)
 80053d6:	4293      	cmp	r3, r2
 80053d8:	d10b      	bne.n	80053f2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80053da:	4b0a      	ldr	r3, [pc, #40]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053de:	4a09      	ldr	r2, [pc, #36]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053e0:	f043 0302 	orr.w	r3, r3, #2
 80053e4:	6453      	str	r3, [r2, #68]	; 0x44
 80053e6:	4b07      	ldr	r3, [pc, #28]	; (8005404 <HAL_TIM_Base_MspInit+0xcc>)
 80053e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80053ea:	f003 0302 	and.w	r3, r3, #2
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	68fb      	ldr	r3, [r7, #12]
}
 80053f2:	bf00      	nop
 80053f4:	3724      	adds	r7, #36	; 0x24
 80053f6:	46bd      	mov	sp, r7
 80053f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fc:	4770      	bx	lr
 80053fe:	bf00      	nop
 8005400:	40010000 	.word	0x40010000
 8005404:	40023800 	.word	0x40023800
 8005408:	40000400 	.word	0x40000400
 800540c:	40000c00 	.word	0x40000c00
 8005410:	40010400 	.word	0x40010400

08005414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800541c:	f107 030c 	add.w	r3, r7, #12
 8005420:	2200      	movs	r2, #0
 8005422:	601a      	str	r2, [r3, #0]
 8005424:	605a      	str	r2, [r3, #4]
 8005426:	609a      	str	r2, [r3, #8]
 8005428:	60da      	str	r2, [r3, #12]
 800542a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	4a11      	ldr	r2, [pc, #68]	; (8005478 <HAL_TIM_MspPostInit+0x64>)
 8005432:	4293      	cmp	r3, r2
 8005434:	d11b      	bne.n	800546e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8005436:	4b11      	ldr	r3, [pc, #68]	; (800547c <HAL_TIM_MspPostInit+0x68>)
 8005438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800543a:	4a10      	ldr	r2, [pc, #64]	; (800547c <HAL_TIM_MspPostInit+0x68>)
 800543c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005440:	6313      	str	r3, [r2, #48]	; 0x30
 8005442:	4b0e      	ldr	r3, [pc, #56]	; (800547c <HAL_TIM_MspPostInit+0x68>)
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544a:	60bb      	str	r3, [r7, #8]
 800544c:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800544e:	2304      	movs	r3, #4
 8005450:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005452:	2302      	movs	r3, #2
 8005454:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005456:	2300      	movs	r3, #0
 8005458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800545a:	2300      	movs	r3, #0
 800545c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800545e:	2303      	movs	r3, #3
 8005460:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8005462:	f107 030c 	add.w	r3, r7, #12
 8005466:	4619      	mov	r1, r3
 8005468:	4805      	ldr	r0, [pc, #20]	; (8005480 <HAL_TIM_MspPostInit+0x6c>)
 800546a:	f001 fcd7 	bl	8006e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800546e:	bf00      	nop
 8005470:	3720      	adds	r7, #32
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	40010400 	.word	0x40010400
 800547c:	40023800 	.word	0x40023800
 8005480:	40022000 	.word	0x40022000

08005484 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b08e      	sub	sp, #56	; 0x38
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800548c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005490:	2200      	movs	r2, #0
 8005492:	601a      	str	r2, [r3, #0]
 8005494:	605a      	str	r2, [r3, #4]
 8005496:	609a      	str	r2, [r3, #8]
 8005498:	60da      	str	r2, [r3, #12]
 800549a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	4a5b      	ldr	r2, [pc, #364]	; (8005610 <HAL_UART_MspInit+0x18c>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d130      	bne.n	8005508 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 80054a6:	4b5b      	ldr	r3, [pc, #364]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054aa:	4a5a      	ldr	r2, [pc, #360]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054ac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80054b0:	6413      	str	r3, [r2, #64]	; 0x40
 80054b2:	4b58      	ldr	r3, [pc, #352]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054b6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80054ba:	623b      	str	r3, [r7, #32]
 80054bc:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80054be:	4b55      	ldr	r3, [pc, #340]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c2:	4a54      	ldr	r2, [pc, #336]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054c4:	f043 0320 	orr.w	r3, r3, #32
 80054c8:	6313      	str	r3, [r2, #48]	; 0x30
 80054ca:	4b52      	ldr	r3, [pc, #328]	; (8005614 <HAL_UART_MspInit+0x190>)
 80054cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054ce:	f003 0320 	and.w	r3, r3, #32
 80054d2:	61fb      	str	r3, [r7, #28]
 80054d4:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80054d6:	23c0      	movs	r3, #192	; 0xc0
 80054d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054da:	2302      	movs	r3, #2
 80054dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054de:	2300      	movs	r3, #0
 80054e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054e2:	2303      	movs	r3, #3
 80054e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 80054e6:	2308      	movs	r3, #8
 80054e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80054ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054ee:	4619      	mov	r1, r3
 80054f0:	4849      	ldr	r0, [pc, #292]	; (8005618 <HAL_UART_MspInit+0x194>)
 80054f2:	f001 fc93 	bl	8006e1c <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80054f6:	2200      	movs	r2, #0
 80054f8:	2105      	movs	r1, #5
 80054fa:	2052      	movs	r0, #82	; 0x52
 80054fc:	f000 ff2a 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8005500:	2052      	movs	r0, #82	; 0x52
 8005502:	f000 ff43 	bl	800638c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005506:	e07f      	b.n	8005608 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a43      	ldr	r2, [pc, #268]	; (800561c <HAL_UART_MspInit+0x198>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d14d      	bne.n	80055ae <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 8005512:	4b40      	ldr	r3, [pc, #256]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005516:	4a3f      	ldr	r2, [pc, #252]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005518:	f043 0310 	orr.w	r3, r3, #16
 800551c:	6453      	str	r3, [r2, #68]	; 0x44
 800551e:	4b3d      	ldr	r3, [pc, #244]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005522:	f003 0310 	and.w	r3, r3, #16
 8005526:	61bb      	str	r3, [r7, #24]
 8005528:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800552a:	4b3a      	ldr	r3, [pc, #232]	; (8005614 <HAL_UART_MspInit+0x190>)
 800552c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800552e:	4a39      	ldr	r2, [pc, #228]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005530:	f043 0302 	orr.w	r3, r3, #2
 8005534:	6313      	str	r3, [r2, #48]	; 0x30
 8005536:	4b37      	ldr	r3, [pc, #220]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553a:	f003 0302 	and.w	r3, r3, #2
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005542:	4b34      	ldr	r3, [pc, #208]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005546:	4a33      	ldr	r2, [pc, #204]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005548:	f043 0301 	orr.w	r3, r3, #1
 800554c:	6313      	str	r3, [r2, #48]	; 0x30
 800554e:	4b31      	ldr	r3, [pc, #196]	; (8005614 <HAL_UART_MspInit+0x190>)
 8005550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	613b      	str	r3, [r7, #16]
 8005558:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800555a:	2380      	movs	r3, #128	; 0x80
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800555e:	2302      	movs	r3, #2
 8005560:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005562:	2300      	movs	r3, #0
 8005564:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005566:	2300      	movs	r3, #0
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800556a:	2307      	movs	r3, #7
 800556c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800556e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005572:	4619      	mov	r1, r3
 8005574:	482a      	ldr	r0, [pc, #168]	; (8005620 <HAL_UART_MspInit+0x19c>)
 8005576:	f001 fc51 	bl	8006e1c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800557a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800557e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005580:	2302      	movs	r3, #2
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005584:	2300      	movs	r3, #0
 8005586:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005588:	2300      	movs	r3, #0
 800558a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800558c:	2307      	movs	r3, #7
 800558e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8005590:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005594:	4619      	mov	r1, r3
 8005596:	4823      	ldr	r0, [pc, #140]	; (8005624 <HAL_UART_MspInit+0x1a0>)
 8005598:	f001 fc40 	bl	8006e1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800559c:	2200      	movs	r2, #0
 800559e:	2107      	movs	r1, #7
 80055a0:	2025      	movs	r0, #37	; 0x25
 80055a2:	f000 fed7 	bl	8006354 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80055a6:	2025      	movs	r0, #37	; 0x25
 80055a8:	f000 fef0 	bl	800638c <HAL_NVIC_EnableIRQ>
}
 80055ac:	e02c      	b.n	8005608 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	4a1d      	ldr	r2, [pc, #116]	; (8005628 <HAL_UART_MspInit+0x1a4>)
 80055b4:	4293      	cmp	r3, r2
 80055b6:	d127      	bne.n	8005608 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 80055b8:	4b16      	ldr	r3, [pc, #88]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055bc:	4a15      	ldr	r2, [pc, #84]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055be:	f043 0320 	orr.w	r3, r3, #32
 80055c2:	6453      	str	r3, [r2, #68]	; 0x44
 80055c4:	4b13      	ldr	r3, [pc, #76]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80055c8:	f003 0320 	and.w	r3, r3, #32
 80055cc:	60fb      	str	r3, [r7, #12]
 80055ce:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80055d0:	4b10      	ldr	r3, [pc, #64]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d4:	4a0f      	ldr	r2, [pc, #60]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055d6:	f043 0304 	orr.w	r3, r3, #4
 80055da:	6313      	str	r3, [r2, #48]	; 0x30
 80055dc:	4b0d      	ldr	r3, [pc, #52]	; (8005614 <HAL_UART_MspInit+0x190>)
 80055de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e0:	f003 0304 	and.w	r3, r3, #4
 80055e4:	60bb      	str	r3, [r7, #8]
 80055e6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80055e8:	23c0      	movs	r3, #192	; 0xc0
 80055ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80055ec:	2302      	movs	r3, #2
 80055ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80055f0:	2300      	movs	r3, #0
 80055f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80055f4:	2303      	movs	r3, #3
 80055f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80055f8:	2308      	movs	r3, #8
 80055fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80055fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005600:	4619      	mov	r1, r3
 8005602:	480a      	ldr	r0, [pc, #40]	; (800562c <HAL_UART_MspInit+0x1a8>)
 8005604:	f001 fc0a 	bl	8006e1c <HAL_GPIO_Init>
}
 8005608:	bf00      	nop
 800560a:	3738      	adds	r7, #56	; 0x38
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	40007800 	.word	0x40007800
 8005614:	40023800 	.word	0x40023800
 8005618:	40021400 	.word	0x40021400
 800561c:	40011000 	.word	0x40011000
 8005620:	40020400 	.word	0x40020400
 8005624:	40020000 	.word	0x40020000
 8005628:	40011400 	.word	0x40011400
 800562c:	40020800 	.word	0x40020800

08005630 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 8005636:	1d3b      	adds	r3, r7, #4
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]
 800563c:	605a      	str	r2, [r3, #4]
 800563e:	609a      	str	r2, [r3, #8]
 8005640:	60da      	str	r2, [r3, #12]
 8005642:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8005644:	4b3a      	ldr	r3, [pc, #232]	; (8005730 <HAL_FMC_MspInit+0x100>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	2b00      	cmp	r3, #0
 800564a:	d16d      	bne.n	8005728 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 800564c:	4b38      	ldr	r3, [pc, #224]	; (8005730 <HAL_FMC_MspInit+0x100>)
 800564e:	2201      	movs	r2, #1
 8005650:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8005652:	4b38      	ldr	r3, [pc, #224]	; (8005734 <HAL_FMC_MspInit+0x104>)
 8005654:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005656:	4a37      	ldr	r2, [pc, #220]	; (8005734 <HAL_FMC_MspInit+0x104>)
 8005658:	f043 0301 	orr.w	r3, r3, #1
 800565c:	6393      	str	r3, [r2, #56]	; 0x38
 800565e:	4b35      	ldr	r3, [pc, #212]	; (8005734 <HAL_FMC_MspInit+0x104>)
 8005660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005662:	f003 0301 	and.w	r3, r3, #1
 8005666:	603b      	str	r3, [r7, #0]
 8005668:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800566a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800566e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005670:	2302      	movs	r3, #2
 8005672:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005674:	2300      	movs	r3, #0
 8005676:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005678:	2303      	movs	r3, #3
 800567a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800567c:	230c      	movs	r3, #12
 800567e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005680:	1d3b      	adds	r3, r7, #4
 8005682:	4619      	mov	r1, r3
 8005684:	482c      	ldr	r0, [pc, #176]	; (8005738 <HAL_FMC_MspInit+0x108>)
 8005686:	f001 fbc9 	bl	8006e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800568a:	f248 1333 	movw	r3, #33075	; 0x8133
 800568e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005690:	2302      	movs	r3, #2
 8005692:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005694:	2300      	movs	r3, #0
 8005696:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005698:	2303      	movs	r3, #3
 800569a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800569c:	230c      	movs	r3, #12
 800569e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80056a0:	1d3b      	adds	r3, r7, #4
 80056a2:	4619      	mov	r1, r3
 80056a4:	4825      	ldr	r0, [pc, #148]	; (800573c <HAL_FMC_MspInit+0x10c>)
 80056a6:	f001 fbb9 	bl	8006e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 80056aa:	f24c 7303 	movw	r3, #50947	; 0xc703
 80056ae:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056b0:	2302      	movs	r3, #2
 80056b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056b4:	2300      	movs	r3, #0
 80056b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056b8:	2303      	movs	r3, #3
 80056ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056bc:	230c      	movs	r3, #12
 80056be:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80056c0:	1d3b      	adds	r3, r7, #4
 80056c2:	4619      	mov	r1, r3
 80056c4:	481e      	ldr	r0, [pc, #120]	; (8005740 <HAL_FMC_MspInit+0x110>)
 80056c6:	f001 fba9 	bl	8006e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80056ca:	f64f 033f 	movw	r3, #63551	; 0xf83f
 80056ce:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056d0:	2302      	movs	r3, #2
 80056d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056d4:	2300      	movs	r3, #0
 80056d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056d8:	2303      	movs	r3, #3
 80056da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056dc:	230c      	movs	r3, #12
 80056de:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80056e0:	1d3b      	adds	r3, r7, #4
 80056e2:	4619      	mov	r1, r3
 80056e4:	4817      	ldr	r0, [pc, #92]	; (8005744 <HAL_FMC_MspInit+0x114>)
 80056e6:	f001 fb99 	bl	8006e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 80056ea:	2328      	movs	r3, #40	; 0x28
 80056ec:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80056ee:	2302      	movs	r3, #2
 80056f0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80056f2:	2300      	movs	r3, #0
 80056f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80056f6:	2303      	movs	r3, #3
 80056f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80056fa:	230c      	movs	r3, #12
 80056fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80056fe:	1d3b      	adds	r3, r7, #4
 8005700:	4619      	mov	r1, r3
 8005702:	4811      	ldr	r0, [pc, #68]	; (8005748 <HAL_FMC_MspInit+0x118>)
 8005704:	f001 fb8a 	bl	8006e1c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8005708:	2308      	movs	r3, #8
 800570a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800570c:	2302      	movs	r3, #2
 800570e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005710:	2300      	movs	r3, #0
 8005712:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005714:	2303      	movs	r3, #3
 8005716:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8005718:	230c      	movs	r3, #12
 800571a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800571c:	1d3b      	adds	r3, r7, #4
 800571e:	4619      	mov	r1, r3
 8005720:	480a      	ldr	r0, [pc, #40]	; (800574c <HAL_FMC_MspInit+0x11c>)
 8005722:	f001 fb7b 	bl	8006e1c <HAL_GPIO_Init>
 8005726:	e000      	b.n	800572a <HAL_FMC_MspInit+0xfa>
    return;
 8005728:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800572a:	3718      	adds	r7, #24
 800572c:	46bd      	mov	sp, r7
 800572e:	bd80      	pop	{r7, pc}
 8005730:	20000508 	.word	0x20000508
 8005734:	40023800 	.word	0x40023800
 8005738:	40021000 	.word	0x40021000
 800573c:	40021800 	.word	0x40021800
 8005740:	40020c00 	.word	0x40020c00
 8005744:	40021400 	.word	0x40021400
 8005748:	40021c00 	.word	0x40021c00
 800574c:	40020800 	.word	0x40020800

08005750 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8005758:	f7ff ff6a 	bl	8005630 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b08c      	sub	sp, #48	; 0x30
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800576c:	2300      	movs	r3, #0
 800576e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8005770:	2300      	movs	r3, #0
 8005772:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8005774:	2200      	movs	r2, #0
 8005776:	6879      	ldr	r1, [r7, #4]
 8005778:	2036      	movs	r0, #54	; 0x36
 800577a:	f000 fdeb 	bl	8006354 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800577e:	2036      	movs	r0, #54	; 0x36
 8005780:	f000 fe04 	bl	800638c <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8005784:	4b1f      	ldr	r3, [pc, #124]	; (8005804 <HAL_InitTick+0xa0>)
 8005786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005788:	4a1e      	ldr	r2, [pc, #120]	; (8005804 <HAL_InitTick+0xa0>)
 800578a:	f043 0310 	orr.w	r3, r3, #16
 800578e:	6413      	str	r3, [r2, #64]	; 0x40
 8005790:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <HAL_InitTick+0xa0>)
 8005792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005794:	f003 0310 	and.w	r3, r3, #16
 8005798:	60fb      	str	r3, [r7, #12]
 800579a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800579c:	f107 0210 	add.w	r2, r7, #16
 80057a0:	f107 0314 	add.w	r3, r7, #20
 80057a4:	4611      	mov	r1, r2
 80057a6:	4618      	mov	r0, r3
 80057a8:	f003 fc24 	bl	8008ff4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80057ac:	f003 fbfa 	bl	8008fa4 <HAL_RCC_GetPCLK1Freq>
 80057b0:	4603      	mov	r3, r0
 80057b2:	005b      	lsls	r3, r3, #1
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80057b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057b8:	4a13      	ldr	r2, [pc, #76]	; (8005808 <HAL_InitTick+0xa4>)
 80057ba:	fba2 2303 	umull	r2, r3, r2, r3
 80057be:	0c9b      	lsrs	r3, r3, #18
 80057c0:	3b01      	subs	r3, #1
 80057c2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80057c4:	4b11      	ldr	r3, [pc, #68]	; (800580c <HAL_InitTick+0xa8>)
 80057c6:	4a12      	ldr	r2, [pc, #72]	; (8005810 <HAL_InitTick+0xac>)
 80057c8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80057ca:	4b10      	ldr	r3, [pc, #64]	; (800580c <HAL_InitTick+0xa8>)
 80057cc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80057d0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80057d2:	4a0e      	ldr	r2, [pc, #56]	; (800580c <HAL_InitTick+0xa8>)
 80057d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057d6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80057d8:	4b0c      	ldr	r3, [pc, #48]	; (800580c <HAL_InitTick+0xa8>)
 80057da:	2200      	movs	r2, #0
 80057dc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057de:	4b0b      	ldr	r3, [pc, #44]	; (800580c <HAL_InitTick+0xa8>)
 80057e0:	2200      	movs	r2, #0
 80057e2:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80057e4:	4809      	ldr	r0, [pc, #36]	; (800580c <HAL_InitTick+0xa8>)
 80057e6:	f004 fdc4 	bl	800a372 <HAL_TIM_Base_Init>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d104      	bne.n	80057fa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80057f0:	4806      	ldr	r0, [pc, #24]	; (800580c <HAL_InitTick+0xa8>)
 80057f2:	f004 fde9 	bl	800a3c8 <HAL_TIM_Base_Start_IT>
 80057f6:	4603      	mov	r3, r0
 80057f8:	e000      	b.n	80057fc <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80057fa:	2301      	movs	r3, #1
}
 80057fc:	4618      	mov	r0, r3
 80057fe:	3730      	adds	r7, #48	; 0x30
 8005800:	46bd      	mov	sp, r7
 8005802:	bd80      	pop	{r7, pc}
 8005804:	40023800 	.word	0x40023800
 8005808:	431bde83 	.word	0x431bde83
 800580c:	20008e58 	.word	0x20008e58
 8005810:	40001000 	.word	0x40001000

08005814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005814:	b480      	push	{r7}
 8005816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005818:	e7fe      	b.n	8005818 <NMI_Handler+0x4>

0800581a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800581a:	b480      	push	{r7}
 800581c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800581e:	e7fe      	b.n	800581e <HardFault_Handler+0x4>

08005820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005820:	b480      	push	{r7}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005824:	e7fe      	b.n	8005824 <MemManage_Handler+0x4>

08005826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005826:	b480      	push	{r7}
 8005828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800582a:	e7fe      	b.n	800582a <BusFault_Handler+0x4>

0800582c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800582c:	b480      	push	{r7}
 800582e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005830:	e7fe      	b.n	8005830 <UsageFault_Handler+0x4>

08005832 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005832:	b480      	push	{r7}
 8005834:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005836:	bf00      	nop
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8005840:	b580      	push	{r7, lr}
 8005842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005844:	4802      	ldr	r0, [pc, #8]	; (8005850 <USART1_IRQHandler+0x10>)
 8005846:	f005 ff81 	bl	800b74c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */
  /* USER CODE END USART1_IRQn 1 */
}
 800584a:	bf00      	nop
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	20008a50 	.word	0x20008a50

08005854 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8005858:	4b06      	ldr	r3, [pc, #24]	; (8005874 <TIM6_DAC_IRQHandler+0x20>)
 800585a:	791b      	ldrb	r3, [r3, #4]
 800585c:	b2db      	uxtb	r3, r3
 800585e:	2b00      	cmp	r3, #0
 8005860:	d002      	beq.n	8005868 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8005862:	4804      	ldr	r0, [pc, #16]	; (8005874 <TIM6_DAC_IRQHandler+0x20>)
 8005864:	f000 fdc2 	bl	80063ec <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8005868:	4803      	ldr	r0, [pc, #12]	; (8005878 <TIM6_DAC_IRQHandler+0x24>)
 800586a:	f004 fe0c 	bl	800a486 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800586e:	bf00      	nop
 8005870:	bd80      	pop	{r7, pc}
 8005872:	bf00      	nop
 8005874:	20008ad0 	.word	0x20008ad0
 8005878:	20008e58 	.word	0x20008e58

0800587c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8005880:	4802      	ldr	r0, [pc, #8]	; (800588c <UART7_IRQHandler+0x10>)
 8005882:	f005 ff63 	bl	800b74c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */
  /* USER CODE END UART7_IRQn 1 */
}
 8005886:	bf00      	nop
 8005888:	bd80      	pop	{r7, pc}
 800588a:	bf00      	nop
 800588c:	2000871c 	.word	0x2000871c

08005890 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8005890:	b580      	push	{r7, lr}
 8005892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8005894:	4802      	ldr	r0, [pc, #8]	; (80058a0 <LTDC_IRQHandler+0x10>)
 8005896:	f002 fc2b 	bl	80080f0 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800589a:	bf00      	nop
 800589c:	bd80      	pop	{r7, pc}
 800589e:	bf00      	nop
 80058a0:	200088a8 	.word	0x200088a8

080058a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80058a4:	b580      	push	{r7, lr}
 80058a6:	b086      	sub	sp, #24
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80058ac:	4a14      	ldr	r2, [pc, #80]	; (8005900 <_sbrk+0x5c>)
 80058ae:	4b15      	ldr	r3, [pc, #84]	; (8005904 <_sbrk+0x60>)
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80058b4:	697b      	ldr	r3, [r7, #20]
 80058b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80058b8:	4b13      	ldr	r3, [pc, #76]	; (8005908 <_sbrk+0x64>)
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d102      	bne.n	80058c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80058c0:	4b11      	ldr	r3, [pc, #68]	; (8005908 <_sbrk+0x64>)
 80058c2:	4a12      	ldr	r2, [pc, #72]	; (800590c <_sbrk+0x68>)
 80058c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80058c6:	4b10      	ldr	r3, [pc, #64]	; (8005908 <_sbrk+0x64>)
 80058c8:	681a      	ldr	r2, [r3, #0]
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4413      	add	r3, r2
 80058ce:	693a      	ldr	r2, [r7, #16]
 80058d0:	429a      	cmp	r2, r3
 80058d2:	d207      	bcs.n	80058e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80058d4:	f009 f954 	bl	800eb80 <__errno>
 80058d8:	4603      	mov	r3, r0
 80058da:	220c      	movs	r2, #12
 80058dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	e009      	b.n	80058f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80058e4:	4b08      	ldr	r3, [pc, #32]	; (8005908 <_sbrk+0x64>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80058ea:	4b07      	ldr	r3, [pc, #28]	; (8005908 <_sbrk+0x64>)
 80058ec:	681a      	ldr	r2, [r3, #0]
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4413      	add	r3, r2
 80058f2:	4a05      	ldr	r2, [pc, #20]	; (8005908 <_sbrk+0x64>)
 80058f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3718      	adds	r7, #24
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}
 8005900:	20050000 	.word	0x20050000
 8005904:	00000400 	.word	0x00000400
 8005908:	2000050c 	.word	0x2000050c
 800590c:	20008eb0 	.word	0x20008eb0

08005910 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005910:	b480      	push	{r7}
 8005912:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8005914:	4b08      	ldr	r3, [pc, #32]	; (8005938 <SystemInit+0x28>)
 8005916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800591a:	4a07      	ldr	r2, [pc, #28]	; (8005938 <SystemInit+0x28>)
 800591c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005920:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8005924:	4b04      	ldr	r3, [pc, #16]	; (8005938 <SystemInit+0x28>)
 8005926:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800592a:	609a      	str	r2, [r3, #8]
#endif
}
 800592c:	bf00      	nop
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr
 8005936:	bf00      	nop
 8005938:	e000ed00 	.word	0xe000ed00

0800593c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800593c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005974 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8005940:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8005942:	e003      	b.n	800594c <LoopCopyDataInit>

08005944 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8005944:	4b0c      	ldr	r3, [pc, #48]	; (8005978 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8005946:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8005948:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800594a:	3104      	adds	r1, #4

0800594c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800594c:	480b      	ldr	r0, [pc, #44]	; (800597c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800594e:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8005950:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8005952:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8005954:	d3f6      	bcc.n	8005944 <CopyDataInit>
  ldr  r2, =_sbss
 8005956:	4a0b      	ldr	r2, [pc, #44]	; (8005984 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8005958:	e002      	b.n	8005960 <LoopFillZerobss>

0800595a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800595a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800595c:	f842 3b04 	str.w	r3, [r2], #4

08005960 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8005960:	4b09      	ldr	r3, [pc, #36]	; (8005988 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8005962:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8005964:	d3f9      	bcc.n	800595a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8005966:	f7ff ffd3 	bl	8005910 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800596a:	f009 f90f 	bl	800eb8c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800596e:	f7fb fcf9 	bl	8001364 <main>
  bx  lr    
 8005972:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005974:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8005978:	08012828 	.word	0x08012828
  ldr  r0, =_sdata
 800597c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8005980:	200000c8 	.word	0x200000c8
  ldr  r2, =_sbss
 8005984:	200000c8 	.word	0x200000c8
  ldr  r3, = _ebss
 8005988:	20008eac 	.word	0x20008eac

0800598c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800598c:	e7fe      	b.n	800598c <ADC_IRQHandler>

0800598e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800598e:	b580      	push	{r7, lr}
 8005990:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8005992:	2003      	movs	r0, #3
 8005994:	f000 fcd3 	bl	800633e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8005998:	2000      	movs	r0, #0
 800599a:	f7ff fee3 	bl	8005764 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800599e:	f7ff f9c5 	bl	8004d2c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80059a2:	2300      	movs	r3, #0
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	bd80      	pop	{r7, pc}

080059a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80059a8:	b480      	push	{r7}
 80059aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80059ac:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_IncTick+0x20>)
 80059ae:	781b      	ldrb	r3, [r3, #0]
 80059b0:	461a      	mov	r2, r3
 80059b2:	4b06      	ldr	r3, [pc, #24]	; (80059cc <HAL_IncTick+0x24>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	4413      	add	r3, r2
 80059b8:	4a04      	ldr	r2, [pc, #16]	; (80059cc <HAL_IncTick+0x24>)
 80059ba:	6013      	str	r3, [r2, #0]
}
 80059bc:	bf00      	nop
 80059be:	46bd      	mov	sp, r7
 80059c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c4:	4770      	bx	lr
 80059c6:	bf00      	nop
 80059c8:	2000005c 	.word	0x2000005c
 80059cc:	20008e98 	.word	0x20008e98

080059d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80059d0:	b480      	push	{r7}
 80059d2:	af00      	add	r7, sp, #0
  return uwTick;
 80059d4:	4b03      	ldr	r3, [pc, #12]	; (80059e4 <HAL_GetTick+0x14>)
 80059d6:	681b      	ldr	r3, [r3, #0]
}
 80059d8:	4618      	mov	r0, r3
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr
 80059e2:	bf00      	nop
 80059e4:	20008e98 	.word	0x20008e98

080059e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b084      	sub	sp, #16
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80059f0:	f7ff ffee 	bl	80059d0 <HAL_GetTick>
 80059f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a00:	d005      	beq.n	8005a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8005a02:	4b0a      	ldr	r3, [pc, #40]	; (8005a2c <HAL_Delay+0x44>)
 8005a04:	781b      	ldrb	r3, [r3, #0]
 8005a06:	461a      	mov	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	4413      	add	r3, r2
 8005a0c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8005a0e:	bf00      	nop
 8005a10:	f7ff ffde 	bl	80059d0 <HAL_GetTick>
 8005a14:	4602      	mov	r2, r0
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	1ad3      	subs	r3, r2, r3
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d8f7      	bhi.n	8005a10 <HAL_Delay+0x28>
  {
  }
}
 8005a20:	bf00      	nop
 8005a22:	bf00      	nop
 8005a24:	3710      	adds	r7, #16
 8005a26:	46bd      	mov	sp, r7
 8005a28:	bd80      	pop	{r7, pc}
 8005a2a:	bf00      	nop
 8005a2c:	2000005c 	.word	0x2000005c

08005a30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b084      	sub	sp, #16
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005a38:	2300      	movs	r3, #0
 8005a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d101      	bne.n	8005a46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8005a42:	2301      	movs	r3, #1
 8005a44:	e031      	b.n	8005aaa <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d109      	bne.n	8005a62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8005a4e:	6878      	ldr	r0, [r7, #4]
 8005a50:	f7ff f994 	bl	8004d7c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2200      	movs	r2, #0
 8005a58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a66:	f003 0310 	and.w	r3, r3, #16
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d116      	bne.n	8005a9c <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a72:	4b10      	ldr	r3, [pc, #64]	; (8005ab4 <HAL_ADC_Init+0x84>)
 8005a74:	4013      	ands	r3, r2
 8005a76:	f043 0202 	orr.w	r2, r3, #2
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fab6 	bl	8005ff0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	2200      	movs	r2, #0
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a8e:	f023 0303 	bic.w	r3, r3, #3
 8005a92:	f043 0201 	orr.w	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	641a      	str	r2, [r3, #64]	; 0x40
 8005a9a:	e001      	b.n	8005aa0 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8005a9c:	2301      	movs	r3, #1
 8005a9e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8005aa8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005aaa:	4618      	mov	r0, r3
 8005aac:	3710      	adds	r7, #16
 8005aae:	46bd      	mov	sp, r7
 8005ab0:	bd80      	pop	{r7, pc}
 8005ab2:	bf00      	nop
 8005ab4:	ffffeefd 	.word	0xffffeefd

08005ab8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b085      	sub	sp, #20
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aca:	2b01      	cmp	r3, #1
 8005acc:	d101      	bne.n	8005ad2 <HAL_ADC_Start+0x1a>
 8005ace:	2302      	movs	r3, #2
 8005ad0:	e0a0      	b.n	8005c14 <HAL_ADC_Start+0x15c>
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	2b01      	cmp	r3, #1
 8005ae6:	d018      	beq.n	8005b1a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	689a      	ldr	r2, [r3, #8]
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f042 0201 	orr.w	r2, r2, #1
 8005af6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8005af8:	4b49      	ldr	r3, [pc, #292]	; (8005c20 <HAL_ADC_Start+0x168>)
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	4a49      	ldr	r2, [pc, #292]	; (8005c24 <HAL_ADC_Start+0x16c>)
 8005afe:	fba2 2303 	umull	r2, r3, r2, r3
 8005b02:	0c9a      	lsrs	r2, r3, #18
 8005b04:	4613      	mov	r3, r2
 8005b06:	005b      	lsls	r3, r3, #1
 8005b08:	4413      	add	r3, r2
 8005b0a:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b0c:	e002      	b.n	8005b14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	3b01      	subs	r3, #1
 8005b12:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1f9      	bne.n	8005b0e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	689b      	ldr	r3, [r3, #8]
 8005b20:	f003 0301 	and.w	r3, r3, #1
 8005b24:	2b01      	cmp	r3, #1
 8005b26:	d174      	bne.n	8005c12 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005b2c:	4b3e      	ldr	r3, [pc, #248]	; (8005c28 <HAL_ADC_Start+0x170>)
 8005b2e:	4013      	ands	r3, r2
 8005b30:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b4a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8005b4e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005b5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b62:	d106      	bne.n	8005b72 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b68:	f023 0206 	bic.w	r2, r3, #6
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	645a      	str	r2, [r3, #68]	; 0x44
 8005b70:	e002      	b.n	8005b78 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2200      	movs	r2, #0
 8005b76:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8005b88:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8005b8a:	4b28      	ldr	r3, [pc, #160]	; (8005c2c <HAL_ADC_Start+0x174>)
 8005b8c:	685b      	ldr	r3, [r3, #4]
 8005b8e:	f003 031f 	and.w	r3, r3, #31
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d10f      	bne.n	8005bb6 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d136      	bne.n	8005c12 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	689a      	ldr	r2, [r3, #8]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bb2:	609a      	str	r2, [r3, #8]
 8005bb4:	e02d      	b.n	8005c12 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a1d      	ldr	r2, [pc, #116]	; (8005c30 <HAL_ADC_Start+0x178>)
 8005bbc:	4293      	cmp	r3, r2
 8005bbe:	d10e      	bne.n	8005bde <HAL_ADC_Start+0x126>
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	689b      	ldr	r3, [r3, #8]
 8005bc6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d107      	bne.n	8005bde <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	689a      	ldr	r2, [r3, #8]
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005bdc:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8005bde:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_ADC_Start+0x174>)
 8005be0:	685b      	ldr	r3, [r3, #4]
 8005be2:	f003 0310 	and.w	r3, r3, #16
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d113      	bne.n	8005c12 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	4a11      	ldr	r2, [pc, #68]	; (8005c34 <HAL_ADC_Start+0x17c>)
 8005bf0:	4293      	cmp	r3, r2
 8005bf2:	d10e      	bne.n	8005c12 <HAL_ADC_Start+0x15a>
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d107      	bne.n	8005c12 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	689a      	ldr	r2, [r3, #8]
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8005c10:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3714      	adds	r7, #20
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr
 8005c20:	20000054 	.word	0x20000054
 8005c24:	431bde83 	.word	0x431bde83
 8005c28:	fffff8fe 	.word	0xfffff8fe
 8005c2c:	40012300 	.word	0x40012300
 8005c30:	40012000 	.word	0x40012000
 8005c34:	40012200 	.word	0x40012200

08005c38 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8005c42:	2300      	movs	r3, #0
 8005c44:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	681b      	ldr	r3, [r3, #0]
 8005c4a:	689b      	ldr	r3, [r3, #8]
 8005c4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c50:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c54:	d113      	bne.n	8005c7e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8005c60:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c64:	d10b      	bne.n	8005c7e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6a:	f043 0220 	orr.w	r2, r3, #32
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	2200      	movs	r2, #0
 8005c76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	e05c      	b.n	8005d38 <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8005c7e:	f7ff fea7 	bl	80059d0 <HAL_GetTick>
 8005c82:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005c84:	e01a      	b.n	8005cbc <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c8c:	d016      	beq.n	8005cbc <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8005c8e:	683b      	ldr	r3, [r7, #0]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d007      	beq.n	8005ca4 <HAL_ADC_PollForConversion+0x6c>
 8005c94:	f7ff fe9c 	bl	80059d0 <HAL_GetTick>
 8005c98:	4602      	mov	r2, r0
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	1ad3      	subs	r3, r2, r3
 8005c9e:	683a      	ldr	r2, [r7, #0]
 8005ca0:	429a      	cmp	r2, r3
 8005ca2:	d20b      	bcs.n	8005cbc <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca8:	f043 0204 	orr.w	r2, r3, #4
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8005cb8:	2303      	movs	r3, #3
 8005cba:	e03d      	b.n	8005d38 <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	f003 0302 	and.w	r3, r3, #2
 8005cc6:	2b02      	cmp	r3, #2
 8005cc8:	d1dd      	bne.n	8005c86 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f06f 0212 	mvn.w	r2, #18
 8005cd2:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cd8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	689b      	ldr	r3, [r3, #8]
 8005ce6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d123      	bne.n	8005d36 <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d11f      	bne.n	8005d36 <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cfc:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d006      	beq.n	8005d12 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d111      	bne.n	8005d36 <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d105      	bne.n	8005d36 <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	f043 0201 	orr.w	r2, r3, #1
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8005d36:	2300      	movs	r3, #0
}
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3710      	adds	r7, #16
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8005d40:	b480      	push	{r7}
 8005d42:	b083      	sub	sp, #12
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8005d4e:	4618      	mov	r0, r3
 8005d50:	370c      	adds	r7, #12
 8005d52:	46bd      	mov	sp, r7
 8005d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d58:	4770      	bx	lr
	...

08005d5c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b085      	sub	sp, #20
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
 8005d64:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8005d66:	2300      	movs	r3, #0
 8005d68:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d70:	2b01      	cmp	r3, #1
 8005d72:	d101      	bne.n	8005d78 <HAL_ADC_ConfigChannel+0x1c>
 8005d74:	2302      	movs	r3, #2
 8005d76:	e12a      	b.n	8005fce <HAL_ADC_ConfigChannel+0x272>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2201      	movs	r2, #1
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8005d80:	683b      	ldr	r3, [r7, #0]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	2b09      	cmp	r3, #9
 8005d86:	d93a      	bls.n	8005dfe <HAL_ADC_ConfigChannel+0xa2>
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d90:	d035      	beq.n	8005dfe <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	68d9      	ldr	r1, [r3, #12]
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	461a      	mov	r2, r3
 8005da0:	4613      	mov	r3, r2
 8005da2:	005b      	lsls	r3, r3, #1
 8005da4:	4413      	add	r3, r2
 8005da6:	3b1e      	subs	r3, #30
 8005da8:	2207      	movs	r2, #7
 8005daa:	fa02 f303 	lsl.w	r3, r2, r3
 8005dae:	43da      	mvns	r2, r3
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	400a      	ands	r2, r1
 8005db6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	4a87      	ldr	r2, [pc, #540]	; (8005fdc <HAL_ADC_ConfigChannel+0x280>)
 8005dbe:	4293      	cmp	r3, r2
 8005dc0:	d10a      	bne.n	8005dd8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	68d9      	ldr	r1, [r3, #12]
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	689b      	ldr	r3, [r3, #8]
 8005dcc:	061a      	lsls	r2, r3, #24
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	430a      	orrs	r2, r1
 8005dd4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dd6:	e035      	b.n	8005e44 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68d9      	ldr	r1, [r3, #12]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	689a      	ldr	r2, [r3, #8]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	4618      	mov	r0, r3
 8005dea:	4603      	mov	r3, r0
 8005dec:	005b      	lsls	r3, r3, #1
 8005dee:	4403      	add	r3, r0
 8005df0:	3b1e      	subs	r3, #30
 8005df2:	409a      	lsls	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	430a      	orrs	r2, r1
 8005dfa:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005dfc:	e022      	b.n	8005e44 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	6919      	ldr	r1, [r3, #16]
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	b29b      	uxth	r3, r3
 8005e0a:	461a      	mov	r2, r3
 8005e0c:	4613      	mov	r3, r2
 8005e0e:	005b      	lsls	r3, r3, #1
 8005e10:	4413      	add	r3, r2
 8005e12:	2207      	movs	r2, #7
 8005e14:	fa02 f303 	lsl.w	r3, r2, r3
 8005e18:	43da      	mvns	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	400a      	ands	r2, r1
 8005e20:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	6919      	ldr	r1, [r3, #16]
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	689a      	ldr	r2, [r3, #8]
 8005e2c:	683b      	ldr	r3, [r7, #0]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	b29b      	uxth	r3, r3
 8005e32:	4618      	mov	r0, r3
 8005e34:	4603      	mov	r3, r0
 8005e36:	005b      	lsls	r3, r3, #1
 8005e38:	4403      	add	r3, r0
 8005e3a:	409a      	lsls	r2, r3
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	430a      	orrs	r2, r1
 8005e42:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d824      	bhi.n	8005e96 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	4613      	mov	r3, r2
 8005e58:	009b      	lsls	r3, r3, #2
 8005e5a:	4413      	add	r3, r2
 8005e5c:	3b05      	subs	r3, #5
 8005e5e:	221f      	movs	r2, #31
 8005e60:	fa02 f303 	lsl.w	r3, r2, r3
 8005e64:	43da      	mvns	r2, r3
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	400a      	ands	r2, r1
 8005e6c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	b29b      	uxth	r3, r3
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	4613      	mov	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	4413      	add	r3, r2
 8005e86:	3b05      	subs	r3, #5
 8005e88:	fa00 f203 	lsl.w	r2, r0, r3
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	430a      	orrs	r2, r1
 8005e92:	635a      	str	r2, [r3, #52]	; 0x34
 8005e94:	e04c      	b.n	8005f30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8005e96:	683b      	ldr	r3, [r7, #0]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	2b0c      	cmp	r3, #12
 8005e9c:	d824      	bhi.n	8005ee8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ea4:	683b      	ldr	r3, [r7, #0]
 8005ea6:	685a      	ldr	r2, [r3, #4]
 8005ea8:	4613      	mov	r3, r2
 8005eaa:	009b      	lsls	r3, r3, #2
 8005eac:	4413      	add	r3, r2
 8005eae:	3b23      	subs	r3, #35	; 0x23
 8005eb0:	221f      	movs	r2, #31
 8005eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb6:	43da      	mvns	r2, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	400a      	ands	r2, r1
 8005ebe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	b29b      	uxth	r3, r3
 8005ecc:	4618      	mov	r0, r3
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	685a      	ldr	r2, [r3, #4]
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	3b23      	subs	r3, #35	; 0x23
 8005eda:	fa00 f203 	lsl.w	r2, r0, r3
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ee6:	e023      	b.n	8005f30 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005eee:	683b      	ldr	r3, [r7, #0]
 8005ef0:	685a      	ldr	r2, [r3, #4]
 8005ef2:	4613      	mov	r3, r2
 8005ef4:	009b      	lsls	r3, r3, #2
 8005ef6:	4413      	add	r3, r2
 8005ef8:	3b41      	subs	r3, #65	; 0x41
 8005efa:	221f      	movs	r2, #31
 8005efc:	fa02 f303 	lsl.w	r3, r2, r3
 8005f00:	43da      	mvns	r2, r3
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	400a      	ands	r2, r1
 8005f08:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005f10:	683b      	ldr	r3, [r7, #0]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	b29b      	uxth	r3, r3
 8005f16:	4618      	mov	r0, r3
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	4613      	mov	r3, r2
 8005f1e:	009b      	lsls	r3, r3, #2
 8005f20:	4413      	add	r3, r2
 8005f22:	3b41      	subs	r3, #65	; 0x41
 8005f24:	fa00 f203 	lsl.w	r2, r0, r3
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	430a      	orrs	r2, r1
 8005f2e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a2a      	ldr	r2, [pc, #168]	; (8005fe0 <HAL_ADC_ConfigChannel+0x284>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d10a      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x1f4>
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005f42:	d105      	bne.n	8005f50 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005f44:	4b27      	ldr	r3, [pc, #156]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f46:	685b      	ldr	r3, [r3, #4]
 8005f48:	4a26      	ldr	r2, [pc, #152]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f4a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005f4e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	4a22      	ldr	r2, [pc, #136]	; (8005fe0 <HAL_ADC_ConfigChannel+0x284>)
 8005f56:	4293      	cmp	r3, r2
 8005f58:	d109      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x212>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b12      	cmp	r3, #18
 8005f60:	d105      	bne.n	8005f6e <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8005f62:	4b20      	ldr	r3, [pc, #128]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	4a1f      	ldr	r2, [pc, #124]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f68:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005f6c:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	4a1b      	ldr	r2, [pc, #108]	; (8005fe0 <HAL_ADC_ConfigChannel+0x284>)
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d125      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x268>
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a17      	ldr	r2, [pc, #92]	; (8005fdc <HAL_ADC_ConfigChannel+0x280>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d003      	beq.n	8005f8a <HAL_ADC_ConfigChannel+0x22e>
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	2b11      	cmp	r3, #17
 8005f88:	d11c      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8005f8a:	4b16      	ldr	r3, [pc, #88]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f8c:	685b      	ldr	r3, [r3, #4]
 8005f8e:	4a15      	ldr	r2, [pc, #84]	; (8005fe4 <HAL_ADC_ConfigChannel+0x288>)
 8005f90:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005f94:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8005f96:	683b      	ldr	r3, [r7, #0]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	4a10      	ldr	r2, [pc, #64]	; (8005fdc <HAL_ADC_ConfigChannel+0x280>)
 8005f9c:	4293      	cmp	r3, r2
 8005f9e:	d111      	bne.n	8005fc4 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8005fa0:	4b11      	ldr	r3, [pc, #68]	; (8005fe8 <HAL_ADC_ConfigChannel+0x28c>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a11      	ldr	r2, [pc, #68]	; (8005fec <HAL_ADC_ConfigChannel+0x290>)
 8005fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8005faa:	0c9a      	lsrs	r2, r3, #18
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	005b      	lsls	r3, r3, #1
 8005fb4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fb6:	e002      	b.n	8005fbe <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d1f9      	bne.n	8005fb8 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005fcc:	2300      	movs	r3, #0
}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3714      	adds	r7, #20
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd8:	4770      	bx	lr
 8005fda:	bf00      	nop
 8005fdc:	10000012 	.word	0x10000012
 8005fe0:	40012000 	.word	0x40012000
 8005fe4:	40012300 	.word	0x40012300
 8005fe8:	20000054 	.word	0x20000054
 8005fec:	431bde83 	.word	0x431bde83

08005ff0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005ff0:	b480      	push	{r7}
 8005ff2:	b083      	sub	sp, #12
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8005ff8:	4b78      	ldr	r3, [pc, #480]	; (80061dc <ADC_Init+0x1ec>)
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	4a77      	ldr	r2, [pc, #476]	; (80061dc <ADC_Init+0x1ec>)
 8005ffe:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8006002:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8006004:	4b75      	ldr	r3, [pc, #468]	; (80061dc <ADC_Init+0x1ec>)
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	685b      	ldr	r3, [r3, #4]
 800600c:	4973      	ldr	r1, [pc, #460]	; (80061dc <ADC_Init+0x1ec>)
 800600e:	4313      	orrs	r3, r2
 8006010:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006020:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	6859      	ldr	r1, [r3, #4]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	021a      	lsls	r2, r3, #8
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	430a      	orrs	r2, r1
 8006034:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006044:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	6859      	ldr	r1, [r3, #4]
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	430a      	orrs	r2, r1
 8006056:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006066:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	6899      	ldr	r1, [r3, #8]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	68da      	ldr	r2, [r3, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	430a      	orrs	r2, r1
 8006078:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800607e:	4a58      	ldr	r2, [pc, #352]	; (80061e0 <ADC_Init+0x1f0>)
 8006080:	4293      	cmp	r3, r2
 8006082:	d022      	beq.n	80060ca <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	689a      	ldr	r2, [r3, #8]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006092:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	6899      	ldr	r1, [r3, #8]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	430a      	orrs	r2, r1
 80060a4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060b4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	6899      	ldr	r1, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	430a      	orrs	r2, r1
 80060c6:	609a      	str	r2, [r3, #8]
 80060c8:	e00f      	b.n	80060ea <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	689a      	ldr	r2, [r3, #8]
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80060d8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	689a      	ldr	r2, [r3, #8]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80060e8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	689a      	ldr	r2, [r3, #8]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0202 	bic.w	r2, r2, #2
 80060f8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	6899      	ldr	r1, [r3, #8]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	699b      	ldr	r3, [r3, #24]
 8006104:	005a      	lsls	r2, r3, #1
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	430a      	orrs	r2, r1
 800610c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006114:	2b00      	cmp	r3, #0
 8006116:	d01b      	beq.n	8006150 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	685a      	ldr	r2, [r3, #4]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006126:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	685a      	ldr	r2, [r3, #4]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8006136:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	6859      	ldr	r1, [r3, #4]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006142:	3b01      	subs	r3, #1
 8006144:	035a      	lsls	r2, r3, #13
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	605a      	str	r2, [r3, #4]
 800614e:	e007      	b.n	8006160 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800615e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800616e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	69db      	ldr	r3, [r3, #28]
 800617a:	3b01      	subs	r3, #1
 800617c:	051a      	lsls	r2, r3, #20
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	689a      	ldr	r2, [r3, #8]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8006194:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	6899      	ldr	r1, [r3, #8]
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80061a2:	025a      	lsls	r2, r3, #9
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	430a      	orrs	r2, r1
 80061aa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	689a      	ldr	r2, [r3, #8]
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061ba:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	6899      	ldr	r1, [r3, #8]
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	695b      	ldr	r3, [r3, #20]
 80061c6:	029a      	lsls	r2, r3, #10
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	430a      	orrs	r2, r1
 80061ce:	609a      	str	r2, [r3, #8]
}
 80061d0:	bf00      	nop
 80061d2:	370c      	adds	r7, #12
 80061d4:	46bd      	mov	sp, r7
 80061d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061da:	4770      	bx	lr
 80061dc:	40012300 	.word	0x40012300
 80061e0:	0f000001 	.word	0x0f000001

080061e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80061e4:	b480      	push	{r7}
 80061e6:	b085      	sub	sp, #20
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	f003 0307 	and.w	r3, r3, #7
 80061f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80061f4:	4b0b      	ldr	r3, [pc, #44]	; (8006224 <__NVIC_SetPriorityGrouping+0x40>)
 80061f6:	68db      	ldr	r3, [r3, #12]
 80061f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80061fa:	68ba      	ldr	r2, [r7, #8]
 80061fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006200:	4013      	ands	r3, r2
 8006202:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800620c:	4b06      	ldr	r3, [pc, #24]	; (8006228 <__NVIC_SetPriorityGrouping+0x44>)
 800620e:	4313      	orrs	r3, r2
 8006210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006212:	4a04      	ldr	r2, [pc, #16]	; (8006224 <__NVIC_SetPriorityGrouping+0x40>)
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	60d3      	str	r3, [r2, #12]
}
 8006218:	bf00      	nop
 800621a:	3714      	adds	r7, #20
 800621c:	46bd      	mov	sp, r7
 800621e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006222:	4770      	bx	lr
 8006224:	e000ed00 	.word	0xe000ed00
 8006228:	05fa0000 	.word	0x05fa0000

0800622c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800622c:	b480      	push	{r7}
 800622e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006230:	4b04      	ldr	r3, [pc, #16]	; (8006244 <__NVIC_GetPriorityGrouping+0x18>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	0a1b      	lsrs	r3, r3, #8
 8006236:	f003 0307 	and.w	r3, r3, #7
}
 800623a:	4618      	mov	r0, r3
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr
 8006244:	e000ed00 	.word	0xe000ed00

08006248 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006248:	b480      	push	{r7}
 800624a:	b083      	sub	sp, #12
 800624c:	af00      	add	r7, sp, #0
 800624e:	4603      	mov	r3, r0
 8006250:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006252:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006256:	2b00      	cmp	r3, #0
 8006258:	db0b      	blt.n	8006272 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800625a:	79fb      	ldrb	r3, [r7, #7]
 800625c:	f003 021f 	and.w	r2, r3, #31
 8006260:	4907      	ldr	r1, [pc, #28]	; (8006280 <__NVIC_EnableIRQ+0x38>)
 8006262:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006266:	095b      	lsrs	r3, r3, #5
 8006268:	2001      	movs	r0, #1
 800626a:	fa00 f202 	lsl.w	r2, r0, r2
 800626e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006272:	bf00      	nop
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr
 800627e:	bf00      	nop
 8006280:	e000e100 	.word	0xe000e100

08006284 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006284:	b480      	push	{r7}
 8006286:	b083      	sub	sp, #12
 8006288:	af00      	add	r7, sp, #0
 800628a:	4603      	mov	r3, r0
 800628c:	6039      	str	r1, [r7, #0]
 800628e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006290:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006294:	2b00      	cmp	r3, #0
 8006296:	db0a      	blt.n	80062ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	b2da      	uxtb	r2, r3
 800629c:	490c      	ldr	r1, [pc, #48]	; (80062d0 <__NVIC_SetPriority+0x4c>)
 800629e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80062a2:	0112      	lsls	r2, r2, #4
 80062a4:	b2d2      	uxtb	r2, r2
 80062a6:	440b      	add	r3, r1
 80062a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80062ac:	e00a      	b.n	80062c4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	b2da      	uxtb	r2, r3
 80062b2:	4908      	ldr	r1, [pc, #32]	; (80062d4 <__NVIC_SetPriority+0x50>)
 80062b4:	79fb      	ldrb	r3, [r7, #7]
 80062b6:	f003 030f 	and.w	r3, r3, #15
 80062ba:	3b04      	subs	r3, #4
 80062bc:	0112      	lsls	r2, r2, #4
 80062be:	b2d2      	uxtb	r2, r2
 80062c0:	440b      	add	r3, r1
 80062c2:	761a      	strb	r2, [r3, #24]
}
 80062c4:	bf00      	nop
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	e000e100 	.word	0xe000e100
 80062d4:	e000ed00 	.word	0xe000ed00

080062d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80062d8:	b480      	push	{r7}
 80062da:	b089      	sub	sp, #36	; 0x24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f003 0307 	and.w	r3, r3, #7
 80062ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80062ec:	69fb      	ldr	r3, [r7, #28]
 80062ee:	f1c3 0307 	rsb	r3, r3, #7
 80062f2:	2b04      	cmp	r3, #4
 80062f4:	bf28      	it	cs
 80062f6:	2304      	movcs	r3, #4
 80062f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	3304      	adds	r3, #4
 80062fe:	2b06      	cmp	r3, #6
 8006300:	d902      	bls.n	8006308 <NVIC_EncodePriority+0x30>
 8006302:	69fb      	ldr	r3, [r7, #28]
 8006304:	3b03      	subs	r3, #3
 8006306:	e000      	b.n	800630a <NVIC_EncodePriority+0x32>
 8006308:	2300      	movs	r3, #0
 800630a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800630c:	f04f 32ff 	mov.w	r2, #4294967295
 8006310:	69bb      	ldr	r3, [r7, #24]
 8006312:	fa02 f303 	lsl.w	r3, r2, r3
 8006316:	43da      	mvns	r2, r3
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	401a      	ands	r2, r3
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006320:	f04f 31ff 	mov.w	r1, #4294967295
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	fa01 f303 	lsl.w	r3, r1, r3
 800632a:	43d9      	mvns	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006330:	4313      	orrs	r3, r2
         );
}
 8006332:	4618      	mov	r0, r3
 8006334:	3724      	adds	r7, #36	; 0x24
 8006336:	46bd      	mov	sp, r7
 8006338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633c:	4770      	bx	lr

0800633e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800633e:	b580      	push	{r7, lr}
 8006340:	b082      	sub	sp, #8
 8006342:	af00      	add	r7, sp, #0
 8006344:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006346:	6878      	ldr	r0, [r7, #4]
 8006348:	f7ff ff4c 	bl	80061e4 <__NVIC_SetPriorityGrouping>
}
 800634c:	bf00      	nop
 800634e:	3708      	adds	r7, #8
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006354:	b580      	push	{r7, lr}
 8006356:	b086      	sub	sp, #24
 8006358:	af00      	add	r7, sp, #0
 800635a:	4603      	mov	r3, r0
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8006362:	2300      	movs	r3, #0
 8006364:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006366:	f7ff ff61 	bl	800622c <__NVIC_GetPriorityGrouping>
 800636a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	68b9      	ldr	r1, [r7, #8]
 8006370:	6978      	ldr	r0, [r7, #20]
 8006372:	f7ff ffb1 	bl	80062d8 <NVIC_EncodePriority>
 8006376:	4602      	mov	r2, r0
 8006378:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800637c:	4611      	mov	r1, r2
 800637e:	4618      	mov	r0, r3
 8006380:	f7ff ff80 	bl	8006284 <__NVIC_SetPriority>
}
 8006384:	bf00      	nop
 8006386:	3718      	adds	r7, #24
 8006388:	46bd      	mov	sp, r7
 800638a:	bd80      	pop	{r7, pc}

0800638c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	4603      	mov	r3, r0
 8006394:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800639a:	4618      	mov	r0, r3
 800639c:	f7ff ff54 	bl	8006248 <__NVIC_EnableIRQ>
}
 80063a0:	bf00      	nop
 80063a2:	3708      	adds	r7, #8
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d101      	bne.n	80063ba <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80063b6:	2301      	movs	r3, #1
 80063b8:	e014      	b.n	80063e4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	791b      	ldrb	r3, [r3, #4]
 80063be:	b2db      	uxtb	r3, r3
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d105      	bne.n	80063d0 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fe fd44 	bl	8004e58 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2202      	movs	r2, #2
 80063d4:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2201      	movs	r2, #1
 80063e0:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	3708      	adds	r7, #8
 80063e8:	46bd      	mov	sp, r7
 80063ea:	bd80      	pop	{r7, pc}

080063ec <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 80063ec:	b580      	push	{r7, lr}
 80063ee:	b082      	sub	sp, #8
 80063f0:	af00      	add	r7, sp, #0
 80063f2:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	681b      	ldr	r3, [r3, #0]
 80063f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80063fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006402:	d118      	bne.n	8006436 <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2204      	movs	r2, #4
 8006408:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	691b      	ldr	r3, [r3, #16]
 800640e:	f043 0201 	orr.w	r2, r3, #1
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800641e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800642e:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8006430:	6878      	ldr	r0, [r7, #4]
 8006432:	f000 f825 	bl	8006480 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800643c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006444:	d118      	bne.n	8006478 <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2204      	movs	r2, #4
 800644a:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	691b      	ldr	r3, [r3, #16]
 8006450:	f043 0202 	orr.w	r2, r3, #2
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8006460:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8006470:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 f85b 	bl	800652e <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 8006478:	bf00      	nop
 800647a:	3708      	adds	r7, #8
 800647c:	46bd      	mov	sp, r7
 800647e:	bd80      	pop	{r7, pc}

08006480 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8006480:	b480      	push	{r7}
 8006482:	b083      	sub	sp, #12
 8006484:	af00      	add	r7, sp, #0
 8006486:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8006488:	bf00      	nop
 800648a:	370c      	adds	r7, #12
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr

08006494 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8006494:	b480      	push	{r7}
 8006496:	b087      	sub	sp, #28
 8006498:	af00      	add	r7, sp, #0
 800649a:	60f8      	str	r0, [r7, #12]
 800649c:	60b9      	str	r1, [r7, #8]
 800649e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80064a0:	2300      	movs	r3, #0
 80064a2:	617b      	str	r3, [r7, #20]
 80064a4:	2300      	movs	r3, #0
 80064a6:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	795b      	ldrb	r3, [r3, #5]
 80064ac:	2b01      	cmp	r3, #1
 80064ae:	d101      	bne.n	80064b4 <HAL_DAC_ConfigChannel+0x20>
 80064b0:	2302      	movs	r3, #2
 80064b2:	e036      	b.n	8006522 <HAL_DAC_ConfigChannel+0x8e>
 80064b4:	68fb      	ldr	r3, [r7, #12]
 80064b6:	2201      	movs	r2, #1
 80064b8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	2202      	movs	r2, #2
 80064be:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80064c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	fa02 f303 	lsl.w	r3, r2, r3
 80064d2:	43db      	mvns	r3, r3
 80064d4:	697a      	ldr	r2, [r7, #20]
 80064d6:	4013      	ands	r3, r2
 80064d8:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	681a      	ldr	r2, [r3, #0]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	685b      	ldr	r3, [r3, #4]
 80064e2:	4313      	orrs	r3, r2
 80064e4:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80064e6:	693a      	ldr	r2, [r7, #16]
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6819      	ldr	r1, [r3, #0]
 8006502:	22c0      	movs	r2, #192	; 0xc0
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	fa02 f303 	lsl.w	r3, r2, r3
 800650a:	43da      	mvns	r2, r3
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	400a      	ands	r2, r1
 8006512:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	2201      	movs	r2, #1
 8006518:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	2200      	movs	r2, #0
 800651e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8006520:	2300      	movs	r3, #0
}
 8006522:	4618      	mov	r0, r3
 8006524:	371c      	adds	r7, #28
 8006526:	46bd      	mov	sp, r7
 8006528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652c:	4770      	bx	lr

0800652e <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800652e:	b480      	push	{r7}
 8006530:	b083      	sub	sp, #12
 8006532:	af00      	add	r7, sp, #0
 8006534:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006536:	bf00      	nop
 8006538:	370c      	adds	r7, #12
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
	...

08006544 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006544:	b580      	push	{r7, lr}
 8006546:	b086      	sub	sp, #24
 8006548:	af00      	add	r7, sp, #0
 800654a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800654c:	2300      	movs	r3, #0
 800654e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006550:	f7ff fa3e 	bl	80059d0 <HAL_GetTick>
 8006554:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2b00      	cmp	r3, #0
 800655a:	d101      	bne.n	8006560 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800655c:	2301      	movs	r3, #1
 800655e:	e099      	b.n	8006694 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2202      	movs	r2, #2
 800656c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681a      	ldr	r2, [r3, #0]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f022 0201 	bic.w	r2, r2, #1
 800657e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006580:	e00f      	b.n	80065a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006582:	f7ff fa25 	bl	80059d0 <HAL_GetTick>
 8006586:	4602      	mov	r2, r0
 8006588:	693b      	ldr	r3, [r7, #16]
 800658a:	1ad3      	subs	r3, r2, r3
 800658c:	2b05      	cmp	r3, #5
 800658e:	d908      	bls.n	80065a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	2220      	movs	r2, #32
 8006594:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2203      	movs	r2, #3
 800659a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800659e:	2303      	movs	r3, #3
 80065a0:	e078      	b.n	8006694 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f003 0301 	and.w	r3, r3, #1
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1e8      	bne.n	8006582 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80065b8:	697a      	ldr	r2, [r7, #20]
 80065ba:	4b38      	ldr	r3, [pc, #224]	; (800669c <HAL_DMA_Init+0x158>)
 80065bc:	4013      	ands	r3, r2
 80065be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	685a      	ldr	r2, [r3, #4]
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	689b      	ldr	r3, [r3, #8]
 80065c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	691b      	ldr	r3, [r3, #16]
 80065d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80065da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	699b      	ldr	r3, [r3, #24]
 80065e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80065e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80065ee:	697a      	ldr	r2, [r7, #20]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	2b04      	cmp	r3, #4
 80065fa:	d107      	bne.n	800660c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006604:	4313      	orrs	r3, r2
 8006606:	697a      	ldr	r2, [r7, #20]
 8006608:	4313      	orrs	r3, r2
 800660a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	697a      	ldr	r2, [r7, #20]
 8006612:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f023 0307 	bic.w	r3, r3, #7
 8006622:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	697a      	ldr	r2, [r7, #20]
 800662a:	4313      	orrs	r3, r2
 800662c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006632:	2b04      	cmp	r3, #4
 8006634:	d117      	bne.n	8006666 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800663a:	697a      	ldr	r2, [r7, #20]
 800663c:	4313      	orrs	r3, r2
 800663e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006644:	2b00      	cmp	r3, #0
 8006646:	d00e      	beq.n	8006666 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006648:	6878      	ldr	r0, [r7, #4]
 800664a:	f000 f8df 	bl	800680c <DMA_CheckFifoParam>
 800664e:	4603      	mov	r3, r0
 8006650:	2b00      	cmp	r3, #0
 8006652:	d008      	beq.n	8006666 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2240      	movs	r2, #64	; 0x40
 8006658:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2201      	movs	r2, #1
 800665e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006662:	2301      	movs	r3, #1
 8006664:	e016      	b.n	8006694 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	697a      	ldr	r2, [r7, #20]
 800666c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 f896 	bl	80067a0 <DMA_CalcBaseAndBitshift>
 8006674:	4603      	mov	r3, r0
 8006676:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800667c:	223f      	movs	r2, #63	; 0x3f
 800667e:	409a      	lsls	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2200      	movs	r2, #0
 8006688:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2201      	movs	r2, #1
 800668e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006692:	2300      	movs	r3, #0
}
 8006694:	4618      	mov	r0, r3
 8006696:	3718      	adds	r7, #24
 8006698:	46bd      	mov	sp, r7
 800669a:	bd80      	pop	{r7, pc}
 800669c:	f010803f 	.word	0xf010803f

080066a0 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d101      	bne.n	80066b2 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80066ae:	2301      	movs	r3, #1
 80066b0:	e050      	b.n	8006754 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	2b02      	cmp	r3, #2
 80066bc:	d101      	bne.n	80066c2 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 80066be:	2302      	movs	r3, #2
 80066c0:	e048      	b.n	8006754 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	681a      	ldr	r2, [r3, #0]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0201 	bic.w	r2, r2, #1
 80066d0:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2200      	movs	r2, #0
 80066d8:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2200      	movs	r2, #0
 80066e0:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	2200      	movs	r2, #0
 80066e8:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	2200      	movs	r2, #0
 80066f0:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	2200      	movs	r2, #0
 80066f8:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	2221      	movs	r2, #33	; 0x21
 8006700:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 f84c 	bl	80067a0 <DMA_CalcBaseAndBitshift>
 8006708:	4603      	mov	r3, r0
 800670a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006710:	223f      	movs	r2, #63	; 0x3f
 8006712:	409a      	lsls	r2, r3
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2200      	movs	r2, #0
 800671c:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2200      	movs	r2, #0
 800672e:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	2200      	movs	r2, #0
 800673a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	2200      	movs	r2, #0
 8006740:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8006752:	2300      	movs	r3, #0
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800675c:	b480      	push	{r7}
 800675e:	b083      	sub	sp, #12
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800676a:	b2db      	uxtb	r3, r3
 800676c:	2b02      	cmp	r3, #2
 800676e:	d004      	beq.n	800677a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2280      	movs	r2, #128	; 0x80
 8006774:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006776:	2301      	movs	r3, #1
 8006778:	e00c      	b.n	8006794 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	2205      	movs	r2, #5
 800677e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	681a      	ldr	r2, [r3, #0]
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f022 0201 	bic.w	r2, r2, #1
 8006790:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006792:	2300      	movs	r3, #0
}
 8006794:	4618      	mov	r0, r3
 8006796:	370c      	adds	r7, #12
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80067a0:	b480      	push	{r7}
 80067a2:	b085      	sub	sp, #20
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	681b      	ldr	r3, [r3, #0]
 80067ac:	b2db      	uxtb	r3, r3
 80067ae:	3b10      	subs	r3, #16
 80067b0:	4a13      	ldr	r2, [pc, #76]	; (8006800 <DMA_CalcBaseAndBitshift+0x60>)
 80067b2:	fba2 2303 	umull	r2, r3, r2, r3
 80067b6:	091b      	lsrs	r3, r3, #4
 80067b8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80067ba:	4a12      	ldr	r2, [pc, #72]	; (8006804 <DMA_CalcBaseAndBitshift+0x64>)
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	461a      	mov	r2, r3
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	2b03      	cmp	r3, #3
 80067cc:	d908      	bls.n	80067e0 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	461a      	mov	r2, r3
 80067d4:	4b0c      	ldr	r3, [pc, #48]	; (8006808 <DMA_CalcBaseAndBitshift+0x68>)
 80067d6:	4013      	ands	r3, r2
 80067d8:	1d1a      	adds	r2, r3, #4
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	659a      	str	r2, [r3, #88]	; 0x58
 80067de:	e006      	b.n	80067ee <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	461a      	mov	r2, r3
 80067e6:	4b08      	ldr	r3, [pc, #32]	; (8006808 <DMA_CalcBaseAndBitshift+0x68>)
 80067e8:	4013      	ands	r3, r2
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80067f2:	4618      	mov	r0, r3
 80067f4:	3714      	adds	r7, #20
 80067f6:	46bd      	mov	sp, r7
 80067f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fc:	4770      	bx	lr
 80067fe:	bf00      	nop
 8006800:	aaaaaaab 	.word	0xaaaaaaab
 8006804:	08012604 	.word	0x08012604
 8006808:	fffffc00 	.word	0xfffffc00

0800680c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800680c:	b480      	push	{r7}
 800680e:	b085      	sub	sp, #20
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006814:	2300      	movs	r3, #0
 8006816:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800681c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	2b00      	cmp	r3, #0
 8006824:	d11f      	bne.n	8006866 <DMA_CheckFifoParam+0x5a>
 8006826:	68bb      	ldr	r3, [r7, #8]
 8006828:	2b03      	cmp	r3, #3
 800682a:	d856      	bhi.n	80068da <DMA_CheckFifoParam+0xce>
 800682c:	a201      	add	r2, pc, #4	; (adr r2, 8006834 <DMA_CheckFifoParam+0x28>)
 800682e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006832:	bf00      	nop
 8006834:	08006845 	.word	0x08006845
 8006838:	08006857 	.word	0x08006857
 800683c:	08006845 	.word	0x08006845
 8006840:	080068db 	.word	0x080068db
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006848:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800684c:	2b00      	cmp	r3, #0
 800684e:	d046      	beq.n	80068de <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8006850:	2301      	movs	r3, #1
 8006852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006854:	e043      	b.n	80068de <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800685a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800685e:	d140      	bne.n	80068e2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8006864:	e03d      	b.n	80068e2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800686e:	d121      	bne.n	80068b4 <DMA_CheckFifoParam+0xa8>
 8006870:	68bb      	ldr	r3, [r7, #8]
 8006872:	2b03      	cmp	r3, #3
 8006874:	d837      	bhi.n	80068e6 <DMA_CheckFifoParam+0xda>
 8006876:	a201      	add	r2, pc, #4	; (adr r2, 800687c <DMA_CheckFifoParam+0x70>)
 8006878:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800687c:	0800688d 	.word	0x0800688d
 8006880:	08006893 	.word	0x08006893
 8006884:	0800688d 	.word	0x0800688d
 8006888:	080068a5 	.word	0x080068a5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	73fb      	strb	r3, [r7, #15]
      break;
 8006890:	e030      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006896:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800689a:	2b00      	cmp	r3, #0
 800689c:	d025      	beq.n	80068ea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80068a2:	e022      	b.n	80068ea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80068ac:	d11f      	bne.n	80068ee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80068ae:	2301      	movs	r3, #1
 80068b0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80068b2:	e01c      	b.n	80068ee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80068b4:	68bb      	ldr	r3, [r7, #8]
 80068b6:	2b02      	cmp	r3, #2
 80068b8:	d903      	bls.n	80068c2 <DMA_CheckFifoParam+0xb6>
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	2b03      	cmp	r3, #3
 80068be:	d003      	beq.n	80068c8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80068c0:	e018      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	73fb      	strb	r3, [r7, #15]
      break;
 80068c6:	e015      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d00e      	beq.n	80068f2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	73fb      	strb	r3, [r7, #15]
      break;
 80068d8:	e00b      	b.n	80068f2 <DMA_CheckFifoParam+0xe6>
      break;
 80068da:	bf00      	nop
 80068dc:	e00a      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;
 80068de:	bf00      	nop
 80068e0:	e008      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;
 80068e2:	bf00      	nop
 80068e4:	e006      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;
 80068e6:	bf00      	nop
 80068e8:	e004      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;
 80068ea:	bf00      	nop
 80068ec:	e002      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;   
 80068ee:	bf00      	nop
 80068f0:	e000      	b.n	80068f4 <DMA_CheckFifoParam+0xe8>
      break;
 80068f2:	bf00      	nop
    }
  } 
  
  return status; 
 80068f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80068f6:	4618      	mov	r0, r3
 80068f8:	3714      	adds	r7, #20
 80068fa:	46bd      	mov	sp, r7
 80068fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop

08006904 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d101      	bne.n	8006916 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8006912:	2301      	movs	r3, #1
 8006914:	e039      	b.n	800698a <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800691c:	b2db      	uxtb	r3, r3
 800691e:	2b00      	cmp	r3, #0
 8006920:	d106      	bne.n	8006930 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	2200      	movs	r2, #0
 8006926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f7fe fadc 	bl	8004ee8 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	2202      	movs	r2, #2
 8006934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	685a      	ldr	r2, [r3, #4]
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	430a      	orrs	r2, r1
 800694c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006954:	f023 0107 	bic.w	r1, r3, #7
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	689a      	ldr	r2, [r3, #8]
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	430a      	orrs	r2, r1
 8006962:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800696a:	4b0a      	ldr	r3, [pc, #40]	; (8006994 <HAL_DMA2D_Init+0x90>)
 800696c:	4013      	ands	r3, r2
 800696e:	687a      	ldr	r2, [r7, #4]
 8006970:	68d1      	ldr	r1, [r2, #12]
 8006972:	687a      	ldr	r2, [r7, #4]
 8006974:	6812      	ldr	r2, [r2, #0]
 8006976:	430b      	orrs	r3, r1
 8006978:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2200      	movs	r2, #0
 800697e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	2201      	movs	r2, #1
 8006984:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8006988:	2300      	movs	r3, #0
}
 800698a:	4618      	mov	r0, r3
 800698c:	3708      	adds	r7, #8
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	ffffc000 	.word	0xffffc000

08006998 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b086      	sub	sp, #24
 800699c:	af02      	add	r7, sp, #8
 800699e:	60f8      	str	r0, [r7, #12]
 80069a0:	60b9      	str	r1, [r7, #8]
 80069a2:	607a      	str	r2, [r7, #4]
 80069a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_DMA2D_Start+0x1c>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e018      	b.n	80069e6 <HAL_DMA2D_Start+0x4e>
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 80069c4:	69bb      	ldr	r3, [r7, #24]
 80069c6:	9300      	str	r3, [sp, #0]
 80069c8:	683b      	ldr	r3, [r7, #0]
 80069ca:	687a      	ldr	r2, [r7, #4]
 80069cc:	68b9      	ldr	r1, [r7, #8]
 80069ce:	68f8      	ldr	r0, [r7, #12]
 80069d0:	f000 f988 	bl	8006ce4 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	f042 0201 	orr.w	r2, r2, #1
 80069e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80069e4:	2300      	movs	r3, #0
}
 80069e6:	4618      	mov	r0, r3
 80069e8:	3710      	adds	r7, #16
 80069ea:	46bd      	mov	sp, r7
 80069ec:	bd80      	pop	{r7, pc}

080069ee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 80069ee:	b580      	push	{r7, lr}
 80069f0:	b086      	sub	sp, #24
 80069f2:	af00      	add	r7, sp, #0
 80069f4:	6078      	str	r0, [r7, #4]
 80069f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f003 0301 	and.w	r3, r3, #1
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d056      	beq.n	8006ab8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8006a0a:	f7fe ffe1 	bl	80059d0 <HAL_GetTick>
 8006a0e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006a10:	e04b      	b.n	8006aaa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	685b      	ldr	r3, [r3, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	d023      	beq.n	8006a6c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f003 0320 	and.w	r3, r3, #32
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d005      	beq.n	8006a3a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a32:	f043 0202 	orr.w	r2, r3, #2
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	f003 0301 	and.w	r3, r3, #1
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d005      	beq.n	8006a50 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a48:	f043 0201 	orr.w	r2, r3, #1
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2221      	movs	r2, #33	; 0x21
 8006a56:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2204      	movs	r2, #4
 8006a5c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	2200      	movs	r2, #0
 8006a64:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e0a5      	b.n	8006bb8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a72:	d01a      	beq.n	8006aaa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006a74:	f7fe ffac 	bl	80059d0 <HAL_GetTick>
 8006a78:	4602      	mov	r2, r0
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	683a      	ldr	r2, [r7, #0]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d302      	bcc.n	8006a8a <HAL_DMA2D_PollForTransfer+0x9c>
 8006a84:	683b      	ldr	r3, [r7, #0]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d10f      	bne.n	8006aaa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006a8e:	f043 0220 	orr.w	r2, r3, #32
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2203      	movs	r2, #3
 8006a9a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	2200      	movs	r2, #0
 8006aa2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006aa6:	2303      	movs	r3, #3
 8006aa8:	e086      	b.n	8006bb8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	685b      	ldr	r3, [r3, #4]
 8006ab0:	f003 0302 	and.w	r3, r3, #2
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d0ac      	beq.n	8006a12 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	69db      	ldr	r3, [r3, #28]
 8006abe:	f003 0320 	and.w	r3, r3, #32
 8006ac2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aca:	f003 0320 	and.w	r3, r3, #32
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8006ad4:	693b      	ldr	r3, [r7, #16]
 8006ad6:	2b00      	cmp	r3, #0
 8006ad8:	d061      	beq.n	8006b9e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8006ada:	f7fe ff79 	bl	80059d0 <HAL_GetTick>
 8006ade:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006ae0:	e056      	b.n	8006b90 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d02e      	beq.n	8006b52 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d005      	beq.n	8006b0a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b02:	f043 0204 	orr.w	r2, r3, #4
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006b0a:	68fb      	ldr	r3, [r7, #12]
 8006b0c:	f003 0320 	and.w	r3, r3, #32
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d005      	beq.n	8006b20 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b18:	f043 0202 	orr.w	r2, r3, #2
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	f003 0301 	and.w	r3, r3, #1
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d005      	beq.n	8006b36 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b2e:	f043 0201 	orr.w	r2, r3, #1
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	2229      	movs	r2, #41	; 0x29
 8006b3c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2204      	movs	r2, #4
 8006b42:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	2200      	movs	r2, #0
 8006b4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8006b4e:	2301      	movs	r3, #1
 8006b50:	e032      	b.n	8006bb8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b58:	d01a      	beq.n	8006b90 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8006b5a:	f7fe ff39 	bl	80059d0 <HAL_GetTick>
 8006b5e:	4602      	mov	r2, r0
 8006b60:	697b      	ldr	r3, [r7, #20]
 8006b62:	1ad3      	subs	r3, r2, r3
 8006b64:	683a      	ldr	r2, [r7, #0]
 8006b66:	429a      	cmp	r2, r3
 8006b68:	d302      	bcc.n	8006b70 <HAL_DMA2D_PollForTransfer+0x182>
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d10f      	bne.n	8006b90 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b74:	f043 0220 	orr.w	r2, r3, #32
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2203      	movs	r2, #3
 8006b80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8006b8c:	2303      	movs	r3, #3
 8006b8e:	e013      	b.n	8006bb8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	685b      	ldr	r3, [r3, #4]
 8006b96:	f003 0310 	and.w	r3, r3, #16
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d0a1      	beq.n	8006ae2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	2212      	movs	r2, #18
 8006ba4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2201      	movs	r2, #1
 8006baa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2200      	movs	r2, #0
 8006bb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	4618      	mov	r0, r3
 8006bba:	3718      	adds	r7, #24
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8006bc0:	b480      	push	{r7}
 8006bc2:	b087      	sub	sp, #28
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
 8006bc8:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006bd8:	2b01      	cmp	r3, #1
 8006bda:	d101      	bne.n	8006be0 <HAL_DMA2D_ConfigLayer+0x20>
 8006bdc:	2302      	movs	r3, #2
 8006bde:	e079      	b.n	8006cd4 <HAL_DMA2D_ConfigLayer+0x114>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2201      	movs	r2, #1
 8006be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2202      	movs	r2, #2
 8006bec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	3318      	adds	r3, #24
 8006bf6:	687a      	ldr	r2, [r7, #4]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	685a      	ldr	r2, [r3, #4]
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	041b      	lsls	r3, r3, #16
 8006c06:	4313      	orrs	r3, r2
 8006c08:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8006c0a:	4b35      	ldr	r3, [pc, #212]	; (8006ce0 <HAL_DMA2D_ConfigLayer+0x120>)
 8006c0c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c0e:	693b      	ldr	r3, [r7, #16]
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	2b0a      	cmp	r3, #10
 8006c14:	d003      	beq.n	8006c1e <HAL_DMA2D_ConfigLayer+0x5e>
 8006c16:	693b      	ldr	r3, [r7, #16]
 8006c18:	685b      	ldr	r3, [r3, #4]
 8006c1a:	2b09      	cmp	r3, #9
 8006c1c:	d107      	bne.n	8006c2e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	68db      	ldr	r3, [r3, #12]
 8006c22:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006c26:	697a      	ldr	r2, [r7, #20]
 8006c28:	4313      	orrs	r3, r2
 8006c2a:	617b      	str	r3, [r7, #20]
 8006c2c:	e005      	b.n	8006c3a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8006c2e:	693b      	ldr	r3, [r7, #16]
 8006c30:	68db      	ldr	r3, [r3, #12]
 8006c32:	061b      	lsls	r3, r3, #24
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	4313      	orrs	r3, r2
 8006c38:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d120      	bne.n	8006c82 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	43db      	mvns	r3, r3
 8006c4a:	ea02 0103 	and.w	r1, r2, r3
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	697a      	ldr	r2, [r7, #20]
 8006c54:	430a      	orrs	r2, r1
 8006c56:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	6812      	ldr	r2, [r2, #0]
 8006c60:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006c62:	693b      	ldr	r3, [r7, #16]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b0a      	cmp	r3, #10
 8006c68:	d003      	beq.n	8006c72 <HAL_DMA2D_ConfigLayer+0xb2>
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	685b      	ldr	r3, [r3, #4]
 8006c6e:	2b09      	cmp	r3, #9
 8006c70:	d127      	bne.n	8006cc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	68da      	ldr	r2, [r3, #12]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c80:	e01f      	b.n	8006cc2 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	43db      	mvns	r3, r3
 8006c8c:	ea02 0103 	and.w	r1, r2, r3
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	697a      	ldr	r2, [r7, #20]
 8006c96:	430a      	orrs	r2, r1
 8006c98:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	693a      	ldr	r2, [r7, #16]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	685b      	ldr	r3, [r3, #4]
 8006ca8:	2b0a      	cmp	r3, #10
 8006caa:	d003      	beq.n	8006cb4 <HAL_DMA2D_ConfigLayer+0xf4>
 8006cac:	693b      	ldr	r3, [r7, #16]
 8006cae:	685b      	ldr	r3, [r3, #4]
 8006cb0:	2b09      	cmp	r3, #9
 8006cb2:	d106      	bne.n	8006cc2 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	68da      	ldr	r2, [r3, #12]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8006cc0:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2200      	movs	r2, #0
 8006cce:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8006cd2:	2300      	movs	r3, #0
}
 8006cd4:	4618      	mov	r0, r3
 8006cd6:	371c      	adds	r7, #28
 8006cd8:	46bd      	mov	sp, r7
 8006cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cde:	4770      	bx	lr
 8006ce0:	ff03000f 	.word	0xff03000f

08006ce4 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8006ce4:	b480      	push	{r7}
 8006ce6:	b08b      	sub	sp, #44	; 0x2c
 8006ce8:	af00      	add	r7, sp, #0
 8006cea:	60f8      	str	r0, [r7, #12]
 8006cec:	60b9      	str	r1, [r7, #8]
 8006cee:	607a      	str	r2, [r7, #4]
 8006cf0:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cf8:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8006cfc:	683b      	ldr	r3, [r7, #0]
 8006cfe:	041a      	lsls	r2, r3, #16
 8006d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d02:	431a      	orrs	r2, r3
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	430a      	orrs	r2, r1
 8006d0a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	687a      	ldr	r2, [r7, #4]
 8006d12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8006d1c:	d174      	bne.n	8006e08 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8006d1e:	68bb      	ldr	r3, [r7, #8]
 8006d20:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006d24:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d2c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8006d34:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8006d36:	68bb      	ldr	r3, [r7, #8]
 8006d38:	b2db      	uxtb	r3, r3
 8006d3a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	689b      	ldr	r3, [r3, #8]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d108      	bne.n	8006d56 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8006d44:	69ba      	ldr	r2, [r7, #24]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	6a3b      	ldr	r3, [r7, #32]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	697a      	ldr	r2, [r7, #20]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	627b      	str	r3, [r7, #36]	; 0x24
 8006d54:	e053      	b.n	8006dfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	689b      	ldr	r3, [r3, #8]
 8006d5a:	2b01      	cmp	r3, #1
 8006d5c:	d106      	bne.n	8006d6c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8006d5e:	69ba      	ldr	r2, [r7, #24]
 8006d60:	69fb      	ldr	r3, [r7, #28]
 8006d62:	4313      	orrs	r3, r2
 8006d64:	697a      	ldr	r2, [r7, #20]
 8006d66:	4313      	orrs	r3, r2
 8006d68:	627b      	str	r3, [r7, #36]	; 0x24
 8006d6a:	e048      	b.n	8006dfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	2b02      	cmp	r3, #2
 8006d72:	d111      	bne.n	8006d98 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8006d74:	69fb      	ldr	r3, [r7, #28]
 8006d76:	0cdb      	lsrs	r3, r3, #19
 8006d78:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8006d7a:	69bb      	ldr	r3, [r7, #24]
 8006d7c:	0a9b      	lsrs	r3, r3, #10
 8006d7e:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006d80:	697b      	ldr	r3, [r7, #20]
 8006d82:	08db      	lsrs	r3, r3, #3
 8006d84:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	015a      	lsls	r2, r3, #5
 8006d8a:	69fb      	ldr	r3, [r7, #28]
 8006d8c:	02db      	lsls	r3, r3, #11
 8006d8e:	4313      	orrs	r3, r2
 8006d90:	697a      	ldr	r2, [r7, #20]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	627b      	str	r3, [r7, #36]	; 0x24
 8006d96:	e032      	b.n	8006dfe <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	689b      	ldr	r3, [r3, #8]
 8006d9c:	2b03      	cmp	r3, #3
 8006d9e:	d117      	bne.n	8006dd0 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8006da0:	6a3b      	ldr	r3, [r7, #32]
 8006da2:	0fdb      	lsrs	r3, r3, #31
 8006da4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	0cdb      	lsrs	r3, r3, #19
 8006daa:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8006dac:	69bb      	ldr	r3, [r7, #24]
 8006dae:	0adb      	lsrs	r3, r3, #11
 8006db0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	08db      	lsrs	r3, r3, #3
 8006db6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8006db8:	69bb      	ldr	r3, [r7, #24]
 8006dba:	015a      	lsls	r2, r3, #5
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	029b      	lsls	r3, r3, #10
 8006dc0:	431a      	orrs	r2, r3
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	03db      	lsls	r3, r3, #15
 8006dc6:	4313      	orrs	r3, r2
 8006dc8:	697a      	ldr	r2, [r7, #20]
 8006dca:	4313      	orrs	r3, r2
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8006dce:	e016      	b.n	8006dfe <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8006dd0:	6a3b      	ldr	r3, [r7, #32]
 8006dd2:	0f1b      	lsrs	r3, r3, #28
 8006dd4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8006dd6:	69fb      	ldr	r3, [r7, #28]
 8006dd8:	0d1b      	lsrs	r3, r3, #20
 8006dda:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8006ddc:	69bb      	ldr	r3, [r7, #24]
 8006dde:	0b1b      	lsrs	r3, r3, #12
 8006de0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	091b      	lsrs	r3, r3, #4
 8006de6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8006de8:	69bb      	ldr	r3, [r7, #24]
 8006dea:	011a      	lsls	r2, r3, #4
 8006dec:	69fb      	ldr	r3, [r7, #28]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	431a      	orrs	r2, r3
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	4313      	orrs	r3, r2
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	4313      	orrs	r3, r2
 8006dfc:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e04:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8006e06:	e003      	b.n	8006e10 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	60da      	str	r2, [r3, #12]
}
 8006e10:	bf00      	nop
 8006e12:	372c      	adds	r7, #44	; 0x2c
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr

08006e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b089      	sub	sp, #36	; 0x24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	6078      	str	r0, [r7, #4]
 8006e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8006e26:	2300      	movs	r3, #0
 8006e28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8006e32:	2300      	movs	r3, #0
 8006e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8006e36:	2300      	movs	r3, #0
 8006e38:	61fb      	str	r3, [r7, #28]
 8006e3a:	e175      	b.n	8007128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	69fb      	ldr	r3, [r7, #28]
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006e46:	683b      	ldr	r3, [r7, #0]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	697a      	ldr	r2, [r7, #20]
 8006e4c:	4013      	ands	r3, r2
 8006e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006e50:	693a      	ldr	r2, [r7, #16]
 8006e52:	697b      	ldr	r3, [r7, #20]
 8006e54:	429a      	cmp	r2, r3
 8006e56:	f040 8164 	bne.w	8007122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e5a:	683b      	ldr	r3, [r7, #0]
 8006e5c:	685b      	ldr	r3, [r3, #4]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d00b      	beq.n	8006e7a <HAL_GPIO_Init+0x5e>
 8006e62:	683b      	ldr	r3, [r7, #0]
 8006e64:	685b      	ldr	r3, [r3, #4]
 8006e66:	2b02      	cmp	r3, #2
 8006e68:	d007      	beq.n	8006e7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8006e6e:	2b11      	cmp	r3, #17
 8006e70:	d003      	beq.n	8006e7a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	685b      	ldr	r3, [r3, #4]
 8006e76:	2b12      	cmp	r3, #18
 8006e78:	d130      	bne.n	8006edc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	689b      	ldr	r3, [r3, #8]
 8006e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006e80:	69fb      	ldr	r3, [r7, #28]
 8006e82:	005b      	lsls	r3, r3, #1
 8006e84:	2203      	movs	r2, #3
 8006e86:	fa02 f303 	lsl.w	r3, r2, r3
 8006e8a:	43db      	mvns	r3, r3
 8006e8c:	69ba      	ldr	r2, [r7, #24]
 8006e8e:	4013      	ands	r3, r2
 8006e90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006e92:	683b      	ldr	r3, [r7, #0]
 8006e94:	68da      	ldr	r2, [r3, #12]
 8006e96:	69fb      	ldr	r3, [r7, #28]
 8006e98:	005b      	lsls	r3, r3, #1
 8006e9a:	fa02 f303 	lsl.w	r3, r2, r3
 8006e9e:	69ba      	ldr	r2, [r7, #24]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	69ba      	ldr	r2, [r7, #24]
 8006ea8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	685b      	ldr	r3, [r3, #4]
 8006eae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006eb0:	2201      	movs	r2, #1
 8006eb2:	69fb      	ldr	r3, [r7, #28]
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	43db      	mvns	r3, r3
 8006eba:	69ba      	ldr	r2, [r7, #24]
 8006ebc:	4013      	ands	r3, r2
 8006ebe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	685b      	ldr	r3, [r3, #4]
 8006ec4:	091b      	lsrs	r3, r3, #4
 8006ec6:	f003 0201 	and.w	r2, r3, #1
 8006eca:	69fb      	ldr	r3, [r7, #28]
 8006ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8006ed0:	69ba      	ldr	r2, [r7, #24]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	69ba      	ldr	r2, [r7, #24]
 8006eda:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006ee2:	69fb      	ldr	r3, [r7, #28]
 8006ee4:	005b      	lsls	r3, r3, #1
 8006ee6:	2203      	movs	r2, #3
 8006ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8006eec:	43db      	mvns	r3, r3
 8006eee:	69ba      	ldr	r2, [r7, #24]
 8006ef0:	4013      	ands	r3, r2
 8006ef2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	689a      	ldr	r2, [r3, #8]
 8006ef8:	69fb      	ldr	r3, [r7, #28]
 8006efa:	005b      	lsls	r3, r3, #1
 8006efc:	fa02 f303 	lsl.w	r3, r2, r3
 8006f00:	69ba      	ldr	r2, [r7, #24]
 8006f02:	4313      	orrs	r3, r2
 8006f04:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	69ba      	ldr	r2, [r7, #24]
 8006f0a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8006f0c:	683b      	ldr	r3, [r7, #0]
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	2b02      	cmp	r3, #2
 8006f12:	d003      	beq.n	8006f1c <HAL_GPIO_Init+0x100>
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	2b12      	cmp	r3, #18
 8006f1a:	d123      	bne.n	8006f64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8006f1c:	69fb      	ldr	r3, [r7, #28]
 8006f1e:	08da      	lsrs	r2, r3, #3
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	3208      	adds	r2, #8
 8006f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006f2a:	69fb      	ldr	r3, [r7, #28]
 8006f2c:	f003 0307 	and.w	r3, r3, #7
 8006f30:	009b      	lsls	r3, r3, #2
 8006f32:	220f      	movs	r2, #15
 8006f34:	fa02 f303 	lsl.w	r3, r2, r3
 8006f38:	43db      	mvns	r3, r3
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	4013      	ands	r3, r2
 8006f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	691a      	ldr	r2, [r3, #16]
 8006f44:	69fb      	ldr	r3, [r7, #28]
 8006f46:	f003 0307 	and.w	r3, r3, #7
 8006f4a:	009b      	lsls	r3, r3, #2
 8006f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8006f50:	69ba      	ldr	r2, [r7, #24]
 8006f52:	4313      	orrs	r3, r2
 8006f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006f56:	69fb      	ldr	r3, [r7, #28]
 8006f58:	08da      	lsrs	r2, r3, #3
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	3208      	adds	r2, #8
 8006f5e:	69b9      	ldr	r1, [r7, #24]
 8006f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006f6a:	69fb      	ldr	r3, [r7, #28]
 8006f6c:	005b      	lsls	r3, r3, #1
 8006f6e:	2203      	movs	r2, #3
 8006f70:	fa02 f303 	lsl.w	r3, r2, r3
 8006f74:	43db      	mvns	r3, r3
 8006f76:	69ba      	ldr	r2, [r7, #24]
 8006f78:	4013      	ands	r3, r2
 8006f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006f7c:	683b      	ldr	r3, [r7, #0]
 8006f7e:	685b      	ldr	r3, [r3, #4]
 8006f80:	f003 0203 	and.w	r2, r3, #3
 8006f84:	69fb      	ldr	r3, [r7, #28]
 8006f86:	005b      	lsls	r3, r3, #1
 8006f88:	fa02 f303 	lsl.w	r3, r2, r3
 8006f8c:	69ba      	ldr	r2, [r7, #24]
 8006f8e:	4313      	orrs	r3, r2
 8006f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	69ba      	ldr	r2, [r7, #24]
 8006f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006f98:	683b      	ldr	r3, [r7, #0]
 8006f9a:	685b      	ldr	r3, [r3, #4]
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	f000 80be 	beq.w	8007122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006fa6:	4b66      	ldr	r3, [pc, #408]	; (8007140 <HAL_GPIO_Init+0x324>)
 8006fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006faa:	4a65      	ldr	r2, [pc, #404]	; (8007140 <HAL_GPIO_Init+0x324>)
 8006fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8006fb2:	4b63      	ldr	r3, [pc, #396]	; (8007140 <HAL_GPIO_Init+0x324>)
 8006fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006fbe:	4a61      	ldr	r2, [pc, #388]	; (8007144 <HAL_GPIO_Init+0x328>)
 8006fc0:	69fb      	ldr	r3, [r7, #28]
 8006fc2:	089b      	lsrs	r3, r3, #2
 8006fc4:	3302      	adds	r3, #2
 8006fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	f003 0303 	and.w	r3, r3, #3
 8006fd2:	009b      	lsls	r3, r3, #2
 8006fd4:	220f      	movs	r2, #15
 8006fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8006fda:	43db      	mvns	r3, r3
 8006fdc:	69ba      	ldr	r2, [r7, #24]
 8006fde:	4013      	ands	r3, r2
 8006fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	4a58      	ldr	r2, [pc, #352]	; (8007148 <HAL_GPIO_Init+0x32c>)
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d037      	beq.n	800705a <HAL_GPIO_Init+0x23e>
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	4a57      	ldr	r2, [pc, #348]	; (800714c <HAL_GPIO_Init+0x330>)
 8006fee:	4293      	cmp	r3, r2
 8006ff0:	d031      	beq.n	8007056 <HAL_GPIO_Init+0x23a>
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	4a56      	ldr	r2, [pc, #344]	; (8007150 <HAL_GPIO_Init+0x334>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d02b      	beq.n	8007052 <HAL_GPIO_Init+0x236>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	4a55      	ldr	r2, [pc, #340]	; (8007154 <HAL_GPIO_Init+0x338>)
 8006ffe:	4293      	cmp	r3, r2
 8007000:	d025      	beq.n	800704e <HAL_GPIO_Init+0x232>
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	4a54      	ldr	r2, [pc, #336]	; (8007158 <HAL_GPIO_Init+0x33c>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d01f      	beq.n	800704a <HAL_GPIO_Init+0x22e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	4a53      	ldr	r2, [pc, #332]	; (800715c <HAL_GPIO_Init+0x340>)
 800700e:	4293      	cmp	r3, r2
 8007010:	d019      	beq.n	8007046 <HAL_GPIO_Init+0x22a>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	4a52      	ldr	r2, [pc, #328]	; (8007160 <HAL_GPIO_Init+0x344>)
 8007016:	4293      	cmp	r3, r2
 8007018:	d013      	beq.n	8007042 <HAL_GPIO_Init+0x226>
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	4a51      	ldr	r2, [pc, #324]	; (8007164 <HAL_GPIO_Init+0x348>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00d      	beq.n	800703e <HAL_GPIO_Init+0x222>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	4a50      	ldr	r2, [pc, #320]	; (8007168 <HAL_GPIO_Init+0x34c>)
 8007026:	4293      	cmp	r3, r2
 8007028:	d007      	beq.n	800703a <HAL_GPIO_Init+0x21e>
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	4a4f      	ldr	r2, [pc, #316]	; (800716c <HAL_GPIO_Init+0x350>)
 800702e:	4293      	cmp	r3, r2
 8007030:	d101      	bne.n	8007036 <HAL_GPIO_Init+0x21a>
 8007032:	2309      	movs	r3, #9
 8007034:	e012      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007036:	230a      	movs	r3, #10
 8007038:	e010      	b.n	800705c <HAL_GPIO_Init+0x240>
 800703a:	2308      	movs	r3, #8
 800703c:	e00e      	b.n	800705c <HAL_GPIO_Init+0x240>
 800703e:	2307      	movs	r3, #7
 8007040:	e00c      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007042:	2306      	movs	r3, #6
 8007044:	e00a      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007046:	2305      	movs	r3, #5
 8007048:	e008      	b.n	800705c <HAL_GPIO_Init+0x240>
 800704a:	2304      	movs	r3, #4
 800704c:	e006      	b.n	800705c <HAL_GPIO_Init+0x240>
 800704e:	2303      	movs	r3, #3
 8007050:	e004      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007052:	2302      	movs	r3, #2
 8007054:	e002      	b.n	800705c <HAL_GPIO_Init+0x240>
 8007056:	2301      	movs	r3, #1
 8007058:	e000      	b.n	800705c <HAL_GPIO_Init+0x240>
 800705a:	2300      	movs	r3, #0
 800705c:	69fa      	ldr	r2, [r7, #28]
 800705e:	f002 0203 	and.w	r2, r2, #3
 8007062:	0092      	lsls	r2, r2, #2
 8007064:	4093      	lsls	r3, r2
 8007066:	69ba      	ldr	r2, [r7, #24]
 8007068:	4313      	orrs	r3, r2
 800706a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800706c:	4935      	ldr	r1, [pc, #212]	; (8007144 <HAL_GPIO_Init+0x328>)
 800706e:	69fb      	ldr	r3, [r7, #28]
 8007070:	089b      	lsrs	r3, r3, #2
 8007072:	3302      	adds	r3, #2
 8007074:	69ba      	ldr	r2, [r7, #24]
 8007076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800707a:	4b3d      	ldr	r3, [pc, #244]	; (8007170 <HAL_GPIO_Init+0x354>)
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	43db      	mvns	r3, r3
 8007084:	69ba      	ldr	r2, [r7, #24]
 8007086:	4013      	ands	r3, r2
 8007088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800708a:	683b      	ldr	r3, [r7, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d003      	beq.n	800709e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8007096:	69ba      	ldr	r2, [r7, #24]
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	4313      	orrs	r3, r2
 800709c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800709e:	4a34      	ldr	r2, [pc, #208]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070a0:	69bb      	ldr	r3, [r7, #24]
 80070a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80070a4:	4b32      	ldr	r3, [pc, #200]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070aa:	693b      	ldr	r3, [r7, #16]
 80070ac:	43db      	mvns	r3, r3
 80070ae:	69ba      	ldr	r2, [r7, #24]
 80070b0:	4013      	ands	r3, r2
 80070b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	685b      	ldr	r3, [r3, #4]
 80070b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d003      	beq.n	80070c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80070c0:	69ba      	ldr	r2, [r7, #24]
 80070c2:	693b      	ldr	r3, [r7, #16]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80070c8:	4a29      	ldr	r2, [pc, #164]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070ca:	69bb      	ldr	r3, [r7, #24]
 80070cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80070ce:	4b28      	ldr	r3, [pc, #160]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070d0:	689b      	ldr	r3, [r3, #8]
 80070d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070d4:	693b      	ldr	r3, [r7, #16]
 80070d6:	43db      	mvns	r3, r3
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	4013      	ands	r3, r2
 80070dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80070de:	683b      	ldr	r3, [r7, #0]
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d003      	beq.n	80070f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80070ea:	69ba      	ldr	r2, [r7, #24]
 80070ec:	693b      	ldr	r3, [r7, #16]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80070f2:	4a1f      	ldr	r2, [pc, #124]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80070f8:	4b1d      	ldr	r3, [pc, #116]	; (8007170 <HAL_GPIO_Init+0x354>)
 80070fa:	68db      	ldr	r3, [r3, #12]
 80070fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80070fe:	693b      	ldr	r3, [r7, #16]
 8007100:	43db      	mvns	r3, r3
 8007102:	69ba      	ldr	r2, [r7, #24]
 8007104:	4013      	ands	r3, r2
 8007106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007108:	683b      	ldr	r3, [r7, #0]
 800710a:	685b      	ldr	r3, [r3, #4]
 800710c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d003      	beq.n	800711c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8007114:	69ba      	ldr	r2, [r7, #24]
 8007116:	693b      	ldr	r3, [r7, #16]
 8007118:	4313      	orrs	r3, r2
 800711a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800711c:	4a14      	ldr	r2, [pc, #80]	; (8007170 <HAL_GPIO_Init+0x354>)
 800711e:	69bb      	ldr	r3, [r7, #24]
 8007120:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	3301      	adds	r3, #1
 8007126:	61fb      	str	r3, [r7, #28]
 8007128:	69fb      	ldr	r3, [r7, #28]
 800712a:	2b0f      	cmp	r3, #15
 800712c:	f67f ae86 	bls.w	8006e3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	3724      	adds	r7, #36	; 0x24
 8007136:	46bd      	mov	sp, r7
 8007138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800713c:	4770      	bx	lr
 800713e:	bf00      	nop
 8007140:	40023800 	.word	0x40023800
 8007144:	40013800 	.word	0x40013800
 8007148:	40020000 	.word	0x40020000
 800714c:	40020400 	.word	0x40020400
 8007150:	40020800 	.word	0x40020800
 8007154:	40020c00 	.word	0x40020c00
 8007158:	40021000 	.word	0x40021000
 800715c:	40021400 	.word	0x40021400
 8007160:	40021800 	.word	0x40021800
 8007164:	40021c00 	.word	0x40021c00
 8007168:	40022000 	.word	0x40022000
 800716c:	40022400 	.word	0x40022400
 8007170:	40013c00 	.word	0x40013c00

08007174 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8007174:	b480      	push	{r7}
 8007176:	b087      	sub	sp, #28
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
 800717c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 800717e:	2300      	movs	r3, #0
 8007180:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 8007186:	2300      	movs	r3, #0
 8007188:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800718a:	2300      	movs	r3, #0
 800718c:	617b      	str	r3, [r7, #20]
 800718e:	e0d9      	b.n	8007344 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8007190:	2201      	movs	r2, #1
 8007192:	697b      	ldr	r3, [r7, #20]
 8007194:	fa02 f303 	lsl.w	r3, r2, r3
 8007198:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 800719a:	683a      	ldr	r2, [r7, #0]
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	4013      	ands	r3, r2
 80071a0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80071a2:	68fa      	ldr	r2, [r7, #12]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	429a      	cmp	r2, r3
 80071a8:	f040 80c9 	bne.w	800733e <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80071ac:	4a6b      	ldr	r2, [pc, #428]	; (800735c <HAL_GPIO_DeInit+0x1e8>)
 80071ae:	697b      	ldr	r3, [r7, #20]
 80071b0:	089b      	lsrs	r3, r3, #2
 80071b2:	3302      	adds	r3, #2
 80071b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80071b8:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	f003 0303 	and.w	r3, r3, #3
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	220f      	movs	r2, #15
 80071c4:	fa02 f303 	lsl.w	r3, r2, r3
 80071c8:	68ba      	ldr	r2, [r7, #8]
 80071ca:	4013      	ands	r3, r2
 80071cc:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	4a63      	ldr	r2, [pc, #396]	; (8007360 <HAL_GPIO_DeInit+0x1ec>)
 80071d2:	4293      	cmp	r3, r2
 80071d4:	d037      	beq.n	8007246 <HAL_GPIO_DeInit+0xd2>
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	4a62      	ldr	r2, [pc, #392]	; (8007364 <HAL_GPIO_DeInit+0x1f0>)
 80071da:	4293      	cmp	r3, r2
 80071dc:	d031      	beq.n	8007242 <HAL_GPIO_DeInit+0xce>
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	4a61      	ldr	r2, [pc, #388]	; (8007368 <HAL_GPIO_DeInit+0x1f4>)
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d02b      	beq.n	800723e <HAL_GPIO_DeInit+0xca>
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	4a60      	ldr	r2, [pc, #384]	; (800736c <HAL_GPIO_DeInit+0x1f8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d025      	beq.n	800723a <HAL_GPIO_DeInit+0xc6>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	4a5f      	ldr	r2, [pc, #380]	; (8007370 <HAL_GPIO_DeInit+0x1fc>)
 80071f2:	4293      	cmp	r3, r2
 80071f4:	d01f      	beq.n	8007236 <HAL_GPIO_DeInit+0xc2>
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	4a5e      	ldr	r2, [pc, #376]	; (8007374 <HAL_GPIO_DeInit+0x200>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d019      	beq.n	8007232 <HAL_GPIO_DeInit+0xbe>
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a5d      	ldr	r2, [pc, #372]	; (8007378 <HAL_GPIO_DeInit+0x204>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <HAL_GPIO_DeInit+0xba>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a5c      	ldr	r2, [pc, #368]	; (800737c <HAL_GPIO_DeInit+0x208>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00d      	beq.n	800722a <HAL_GPIO_DeInit+0xb6>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a5b      	ldr	r2, [pc, #364]	; (8007380 <HAL_GPIO_DeInit+0x20c>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d007      	beq.n	8007226 <HAL_GPIO_DeInit+0xb2>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a5a      	ldr	r2, [pc, #360]	; (8007384 <HAL_GPIO_DeInit+0x210>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d101      	bne.n	8007222 <HAL_GPIO_DeInit+0xae>
 800721e:	2309      	movs	r3, #9
 8007220:	e012      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007222:	230a      	movs	r3, #10
 8007224:	e010      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007226:	2308      	movs	r3, #8
 8007228:	e00e      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 800722a:	2307      	movs	r3, #7
 800722c:	e00c      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 800722e:	2306      	movs	r3, #6
 8007230:	e00a      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007232:	2305      	movs	r3, #5
 8007234:	e008      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007236:	2304      	movs	r3, #4
 8007238:	e006      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 800723a:	2303      	movs	r3, #3
 800723c:	e004      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 800723e:	2302      	movs	r3, #2
 8007240:	e002      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007242:	2301      	movs	r3, #1
 8007244:	e000      	b.n	8007248 <HAL_GPIO_DeInit+0xd4>
 8007246:	2300      	movs	r3, #0
 8007248:	697a      	ldr	r2, [r7, #20]
 800724a:	f002 0203 	and.w	r2, r2, #3
 800724e:	0092      	lsls	r2, r2, #2
 8007250:	4093      	lsls	r3, r2
 8007252:	68ba      	ldr	r2, [r7, #8]
 8007254:	429a      	cmp	r2, r3
 8007256:	d132      	bne.n	80072be <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8007258:	4b4b      	ldr	r3, [pc, #300]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	43db      	mvns	r3, r3
 8007260:	4949      	ldr	r1, [pc, #292]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 8007262:	4013      	ands	r3, r2
 8007264:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8007266:	4b48      	ldr	r3, [pc, #288]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 8007268:	685a      	ldr	r2, [r3, #4]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	43db      	mvns	r3, r3
 800726e:	4946      	ldr	r1, [pc, #280]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 8007270:	4013      	ands	r3, r2
 8007272:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 8007274:	4b44      	ldr	r3, [pc, #272]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 8007276:	689a      	ldr	r2, [r3, #8]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	43db      	mvns	r3, r3
 800727c:	4942      	ldr	r1, [pc, #264]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 800727e:	4013      	ands	r3, r2
 8007280:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8007282:	4b41      	ldr	r3, [pc, #260]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	43db      	mvns	r3, r3
 800728a:	493f      	ldr	r1, [pc, #252]	; (8007388 <HAL_GPIO_DeInit+0x214>)
 800728c:	4013      	ands	r3, r2
 800728e:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	f003 0303 	and.w	r3, r3, #3
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	220f      	movs	r2, #15
 800729a:	fa02 f303 	lsl.w	r3, r2, r3
 800729e:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80072a0:	4a2e      	ldr	r2, [pc, #184]	; (800735c <HAL_GPIO_DeInit+0x1e8>)
 80072a2:	697b      	ldr	r3, [r7, #20]
 80072a4:	089b      	lsrs	r3, r3, #2
 80072a6:	3302      	adds	r3, #2
 80072a8:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	43da      	mvns	r2, r3
 80072b0:	482a      	ldr	r0, [pc, #168]	; (800735c <HAL_GPIO_DeInit+0x1e8>)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	089b      	lsrs	r3, r3, #2
 80072b6:	400a      	ands	r2, r1
 80072b8:	3302      	adds	r3, #2
 80072ba:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	681a      	ldr	r2, [r3, #0]
 80072c2:	697b      	ldr	r3, [r7, #20]
 80072c4:	005b      	lsls	r3, r3, #1
 80072c6:	2103      	movs	r1, #3
 80072c8:	fa01 f303 	lsl.w	r3, r1, r3
 80072cc:	43db      	mvns	r3, r3
 80072ce:	401a      	ands	r2, r3
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	08da      	lsrs	r2, r3, #3
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	3208      	adds	r2, #8
 80072dc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	f003 0307 	and.w	r3, r3, #7
 80072e6:	009b      	lsls	r3, r3, #2
 80072e8:	220f      	movs	r2, #15
 80072ea:	fa02 f303 	lsl.w	r3, r2, r3
 80072ee:	43db      	mvns	r3, r3
 80072f0:	697a      	ldr	r2, [r7, #20]
 80072f2:	08d2      	lsrs	r2, r2, #3
 80072f4:	4019      	ands	r1, r3
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	3208      	adds	r2, #8
 80072fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	68da      	ldr	r2, [r3, #12]
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	005b      	lsls	r3, r3, #1
 8007306:	2103      	movs	r1, #3
 8007308:	fa01 f303 	lsl.w	r3, r1, r3
 800730c:	43db      	mvns	r3, r3
 800730e:	401a      	ands	r2, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	685a      	ldr	r2, [r3, #4]
 8007318:	2101      	movs	r1, #1
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	fa01 f303 	lsl.w	r3, r1, r3
 8007320:	43db      	mvns	r3, r3
 8007322:	401a      	ands	r2, r3
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	689a      	ldr	r2, [r3, #8]
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	005b      	lsls	r3, r3, #1
 8007330:	2103      	movs	r1, #3
 8007332:	fa01 f303 	lsl.w	r3, r1, r3
 8007336:	43db      	mvns	r3, r3
 8007338:	401a      	ands	r2, r3
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	3301      	adds	r3, #1
 8007342:	617b      	str	r3, [r7, #20]
 8007344:	697b      	ldr	r3, [r7, #20]
 8007346:	2b0f      	cmp	r3, #15
 8007348:	f67f af22 	bls.w	8007190 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 800734c:	bf00      	nop
 800734e:	bf00      	nop
 8007350:	371c      	adds	r7, #28
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40013800 	.word	0x40013800
 8007360:	40020000 	.word	0x40020000
 8007364:	40020400 	.word	0x40020400
 8007368:	40020800 	.word	0x40020800
 800736c:	40020c00 	.word	0x40020c00
 8007370:	40021000 	.word	0x40021000
 8007374:	40021400 	.word	0x40021400
 8007378:	40021800 	.word	0x40021800
 800737c:	40021c00 	.word	0x40021c00
 8007380:	40022000 	.word	0x40022000
 8007384:	40022400 	.word	0x40022400
 8007388:	40013c00 	.word	0x40013c00

0800738c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	460b      	mov	r3, r1
 8007396:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	691a      	ldr	r2, [r3, #16]
 800739c:	887b      	ldrh	r3, [r7, #2]
 800739e:	4013      	ands	r3, r2
 80073a0:	2b00      	cmp	r3, #0
 80073a2:	d002      	beq.n	80073aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80073a4:	2301      	movs	r3, #1
 80073a6:	73fb      	strb	r3, [r7, #15]
 80073a8:	e001      	b.n	80073ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80073aa:	2300      	movs	r3, #0
 80073ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80073ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80073b0:	4618      	mov	r0, r3
 80073b2:	3714      	adds	r7, #20
 80073b4:	46bd      	mov	sp, r7
 80073b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ba:	4770      	bx	lr

080073bc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80073bc:	b480      	push	{r7}
 80073be:	b083      	sub	sp, #12
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	460b      	mov	r3, r1
 80073c6:	807b      	strh	r3, [r7, #2]
 80073c8:	4613      	mov	r3, r2
 80073ca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80073cc:	787b      	ldrb	r3, [r7, #1]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d003      	beq.n	80073da <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80073d2:	887a      	ldrh	r2, [r7, #2]
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80073d8:	e003      	b.n	80073e2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80073da:	887b      	ldrh	r3, [r7, #2]
 80073dc:	041a      	lsls	r2, r3, #16
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	619a      	str	r2, [r3, #24]
}
 80073e2:	bf00      	nop
 80073e4:	370c      	adds	r7, #12
 80073e6:	46bd      	mov	sp, r7
 80073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ec:	4770      	bx	lr
	...

080073f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80073f0:	b580      	push	{r7, lr}
 80073f2:	b082      	sub	sp, #8
 80073f4:	af00      	add	r7, sp, #0
 80073f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d101      	bne.n	8007402 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80073fe:	2301      	movs	r3, #1
 8007400:	e07f      	b.n	8007502 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007408:	b2db      	uxtb	r3, r3
 800740a:	2b00      	cmp	r3, #0
 800740c:	d106      	bne.n	800741c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f7fd fd86 	bl	8004f28 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2224      	movs	r2, #36	; 0x24
 8007420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	681a      	ldr	r2, [r3, #0]
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	f022 0201 	bic.w	r2, r2, #1
 8007432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	685a      	ldr	r2, [r3, #4]
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007440:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	689a      	ldr	r2, [r3, #8]
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	681b      	ldr	r3, [r3, #0]
 800744c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007450:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	68db      	ldr	r3, [r3, #12]
 8007456:	2b01      	cmp	r3, #1
 8007458:	d107      	bne.n	800746a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	689a      	ldr	r2, [r3, #8]
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007466:	609a      	str	r2, [r3, #8]
 8007468:	e006      	b.n	8007478 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	689a      	ldr	r2, [r3, #8]
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007476:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68db      	ldr	r3, [r3, #12]
 800747c:	2b02      	cmp	r3, #2
 800747e:	d104      	bne.n	800748a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007488:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	6859      	ldr	r1, [r3, #4]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681a      	ldr	r2, [r3, #0]
 8007494:	4b1d      	ldr	r3, [pc, #116]	; (800750c <HAL_I2C_Init+0x11c>)
 8007496:	430b      	orrs	r3, r1
 8007498:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	68da      	ldr	r2, [r3, #12]
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	681b      	ldr	r3, [r3, #0]
 80074a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80074a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	691a      	ldr	r2, [r3, #16]
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	695b      	ldr	r3, [r3, #20]
 80074b2:	ea42 0103 	orr.w	r1, r2, r3
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	699b      	ldr	r3, [r3, #24]
 80074ba:	021a      	lsls	r2, r3, #8
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	430a      	orrs	r2, r1
 80074c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	69d9      	ldr	r1, [r3, #28]
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	6a1a      	ldr	r2, [r3, #32]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	430a      	orrs	r2, r1
 80074d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f042 0201 	orr.w	r2, r2, #1
 80074e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2200      	movs	r2, #0
 80074e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2220      	movs	r2, #32
 80074ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	2200      	movs	r2, #0
 80074fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007500:	2300      	movs	r3, #0
}
 8007502:	4618      	mov	r0, r3
 8007504:	3708      	adds	r7, #8
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	02008000 	.word	0x02008000

08007510 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8007510:	b580      	push	{r7, lr}
 8007512:	b082      	sub	sp, #8
 8007514:	af00      	add	r7, sp, #0
 8007516:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d101      	bne.n	8007522 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800751e:	2301      	movs	r3, #1
 8007520:	e021      	b.n	8007566 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	2224      	movs	r2, #36	; 0x24
 8007526:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681a      	ldr	r2, [r3, #0]
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f022 0201 	bic.w	r2, r2, #1
 8007538:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fd fd6c 	bl	8005018 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	2200      	movs	r2, #0
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	2200      	movs	r2, #0
 8007552:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	2200      	movs	r2, #0
 8007558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2200      	movs	r2, #0
 8007560:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007564:	2300      	movs	r3, #0
}
 8007566:	4618      	mov	r0, r3
 8007568:	3708      	adds	r7, #8
 800756a:	46bd      	mov	sp, r7
 800756c:	bd80      	pop	{r7, pc}
	...

08007570 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b088      	sub	sp, #32
 8007574:	af02      	add	r7, sp, #8
 8007576:	60f8      	str	r0, [r7, #12]
 8007578:	4608      	mov	r0, r1
 800757a:	4611      	mov	r1, r2
 800757c:	461a      	mov	r2, r3
 800757e:	4603      	mov	r3, r0
 8007580:	817b      	strh	r3, [r7, #10]
 8007582:	460b      	mov	r3, r1
 8007584:	813b      	strh	r3, [r7, #8]
 8007586:	4613      	mov	r3, r2
 8007588:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007590:	b2db      	uxtb	r3, r3
 8007592:	2b20      	cmp	r3, #32
 8007594:	f040 80f9 	bne.w	800778a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	2b00      	cmp	r3, #0
 800759c:	d002      	beq.n	80075a4 <HAL_I2C_Mem_Write+0x34>
 800759e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	d105      	bne.n	80075b0 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80075aa:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80075ac:	2301      	movs	r3, #1
 80075ae:	e0ed      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d101      	bne.n	80075be <HAL_I2C_Mem_Write+0x4e>
 80075ba:	2302      	movs	r3, #2
 80075bc:	e0e6      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	2201      	movs	r2, #1
 80075c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80075c6:	f7fe fa03 	bl	80059d0 <HAL_GetTick>
 80075ca:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	9300      	str	r3, [sp, #0]
 80075d0:	2319      	movs	r3, #25
 80075d2:	2201      	movs	r2, #1
 80075d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80075d8:	68f8      	ldr	r0, [r7, #12]
 80075da:	f000 fad1 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80075de:	4603      	mov	r3, r0
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d001      	beq.n	80075e8 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e0d1      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	2221      	movs	r2, #33	; 0x21
 80075ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2240      	movs	r2, #64	; 0x40
 80075f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	2200      	movs	r2, #0
 80075fc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	6a3a      	ldr	r2, [r7, #32]
 8007602:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007608:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	2200      	movs	r2, #0
 800760e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007610:	88f8      	ldrh	r0, [r7, #6]
 8007612:	893a      	ldrh	r2, [r7, #8]
 8007614:	8979      	ldrh	r1, [r7, #10]
 8007616:	697b      	ldr	r3, [r7, #20]
 8007618:	9301      	str	r3, [sp, #4]
 800761a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800761c:	9300      	str	r3, [sp, #0]
 800761e:	4603      	mov	r3, r0
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f000 f9e1 	bl	80079e8 <I2C_RequestMemoryWrite>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d005      	beq.n	8007638 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	2200      	movs	r2, #0
 8007630:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8007634:	2301      	movs	r3, #1
 8007636:	e0a9      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800763c:	b29b      	uxth	r3, r3
 800763e:	2bff      	cmp	r3, #255	; 0xff
 8007640:	d90e      	bls.n	8007660 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	22ff      	movs	r2, #255	; 0xff
 8007646:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800764c:	b2da      	uxtb	r2, r3
 800764e:	8979      	ldrh	r1, [r7, #10]
 8007650:	2300      	movs	r3, #0
 8007652:	9300      	str	r3, [sp, #0]
 8007654:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007658:	68f8      	ldr	r0, [r7, #12]
 800765a:	f000 fbb3 	bl	8007dc4 <I2C_TransferConfig>
 800765e:	e00f      	b.n	8007680 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007664:	b29a      	uxth	r2, r3
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800766e:	b2da      	uxtb	r2, r3
 8007670:	8979      	ldrh	r1, [r7, #10]
 8007672:	2300      	movs	r3, #0
 8007674:	9300      	str	r3, [sp, #0]
 8007676:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800767a:	68f8      	ldr	r0, [r7, #12]
 800767c:	f000 fba2 	bl	8007dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007680:	697a      	ldr	r2, [r7, #20]
 8007682:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f000 fabb 	bl	8007c00 <I2C_WaitOnTXISFlagUntilTimeout>
 800768a:	4603      	mov	r3, r0
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8007690:	2301      	movs	r3, #1
 8007692:	e07b      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007698:	781a      	ldrb	r2, [r3, #0]
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076a4:	1c5a      	adds	r2, r3, #1
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076ae:	b29b      	uxth	r3, r3
 80076b0:	3b01      	subs	r3, #1
 80076b2:	b29a      	uxth	r2, r3
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076bc:	3b01      	subs	r3, #1
 80076be:	b29a      	uxth	r2, r3
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076c8:	b29b      	uxth	r3, r3
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d034      	beq.n	8007738 <HAL_I2C_Mem_Write+0x1c8>
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d130      	bne.n	8007738 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80076d6:	697b      	ldr	r3, [r7, #20]
 80076d8:	9300      	str	r3, [sp, #0]
 80076da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076dc:	2200      	movs	r2, #0
 80076de:	2180      	movs	r1, #128	; 0x80
 80076e0:	68f8      	ldr	r0, [r7, #12]
 80076e2:	f000 fa4d 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d001      	beq.n	80076f0 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 80076ec:	2301      	movs	r3, #1
 80076ee:	e04d      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076f4:	b29b      	uxth	r3, r3
 80076f6:	2bff      	cmp	r3, #255	; 0xff
 80076f8:	d90e      	bls.n	8007718 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	22ff      	movs	r2, #255	; 0xff
 80076fe:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007704:	b2da      	uxtb	r2, r3
 8007706:	8979      	ldrh	r1, [r7, #10]
 8007708:	2300      	movs	r3, #0
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007710:	68f8      	ldr	r0, [r7, #12]
 8007712:	f000 fb57 	bl	8007dc4 <I2C_TransferConfig>
 8007716:	e00f      	b.n	8007738 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800771c:	b29a      	uxth	r2, r3
 800771e:	68fb      	ldr	r3, [r7, #12]
 8007720:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007726:	b2da      	uxtb	r2, r3
 8007728:	8979      	ldrh	r1, [r7, #10]
 800772a:	2300      	movs	r3, #0
 800772c:	9300      	str	r3, [sp, #0]
 800772e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 fb46 	bl	8007dc4 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8007738:	68fb      	ldr	r3, [r7, #12]
 800773a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800773c:	b29b      	uxth	r3, r3
 800773e:	2b00      	cmp	r3, #0
 8007740:	d19e      	bne.n	8007680 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007742:	697a      	ldr	r2, [r7, #20]
 8007744:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007746:	68f8      	ldr	r0, [r7, #12]
 8007748:	f000 fa9a 	bl	8007c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800774c:	4603      	mov	r3, r0
 800774e:	2b00      	cmp	r3, #0
 8007750:	d001      	beq.n	8007756 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8007752:	2301      	movs	r3, #1
 8007754:	e01a      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007756:	68fb      	ldr	r3, [r7, #12]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	2220      	movs	r2, #32
 800775c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800775e:	68fb      	ldr	r3, [r7, #12]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	6859      	ldr	r1, [r3, #4]
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	4b0a      	ldr	r3, [pc, #40]	; (8007794 <HAL_I2C_Mem_Write+0x224>)
 800776a:	400b      	ands	r3, r1
 800776c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800776e:	68fb      	ldr	r3, [r7, #12]
 8007770:	2220      	movs	r2, #32
 8007772:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	2200      	movs	r2, #0
 800777a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	e000      	b.n	800778c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800778a:	2302      	movs	r3, #2
  }
}
 800778c:	4618      	mov	r0, r3
 800778e:	3718      	adds	r7, #24
 8007790:	46bd      	mov	sp, r7
 8007792:	bd80      	pop	{r7, pc}
 8007794:	fe00e800 	.word	0xfe00e800

08007798 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b088      	sub	sp, #32
 800779c:	af02      	add	r7, sp, #8
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	4608      	mov	r0, r1
 80077a2:	4611      	mov	r1, r2
 80077a4:	461a      	mov	r2, r3
 80077a6:	4603      	mov	r3, r0
 80077a8:	817b      	strh	r3, [r7, #10]
 80077aa:	460b      	mov	r3, r1
 80077ac:	813b      	strh	r3, [r7, #8]
 80077ae:	4613      	mov	r3, r2
 80077b0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b20      	cmp	r3, #32
 80077bc:	f040 80fd 	bne.w	80079ba <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80077c0:	6a3b      	ldr	r3, [r7, #32]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d002      	beq.n	80077cc <HAL_I2C_Mem_Read+0x34>
 80077c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	d105      	bne.n	80077d8 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	f44f 7200 	mov.w	r2, #512	; 0x200
 80077d2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80077d4:	2301      	movs	r3, #1
 80077d6:	e0f1      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077de:	2b01      	cmp	r3, #1
 80077e0:	d101      	bne.n	80077e6 <HAL_I2C_Mem_Read+0x4e>
 80077e2:	2302      	movs	r3, #2
 80077e4:	e0ea      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	2201      	movs	r2, #1
 80077ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80077ee:	f7fe f8ef 	bl	80059d0 <HAL_GetTick>
 80077f2:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	9300      	str	r3, [sp, #0]
 80077f8:	2319      	movs	r3, #25
 80077fa:	2201      	movs	r2, #1
 80077fc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007800:	68f8      	ldr	r0, [r7, #12]
 8007802:	f000 f9bd 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007806:	4603      	mov	r3, r0
 8007808:	2b00      	cmp	r3, #0
 800780a:	d001      	beq.n	8007810 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e0d5      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2222      	movs	r2, #34	; 0x22
 8007814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	2240      	movs	r2, #64	; 0x40
 800781c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	2200      	movs	r2, #0
 8007824:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8007826:	68fb      	ldr	r3, [r7, #12]
 8007828:	6a3a      	ldr	r2, [r7, #32]
 800782a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8007830:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2200      	movs	r2, #0
 8007836:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8007838:	88f8      	ldrh	r0, [r7, #6]
 800783a:	893a      	ldrh	r2, [r7, #8]
 800783c:	8979      	ldrh	r1, [r7, #10]
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	9301      	str	r3, [sp, #4]
 8007842:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007844:	9300      	str	r3, [sp, #0]
 8007846:	4603      	mov	r3, r0
 8007848:	68f8      	ldr	r0, [r7, #12]
 800784a:	f000 f921 	bl	8007a90 <I2C_RequestMemoryRead>
 800784e:	4603      	mov	r3, r0
 8007850:	2b00      	cmp	r3, #0
 8007852:	d005      	beq.n	8007860 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	2200      	movs	r2, #0
 8007858:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800785c:	2301      	movs	r3, #1
 800785e:	e0ad      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007864:	b29b      	uxth	r3, r3
 8007866:	2bff      	cmp	r3, #255	; 0xff
 8007868:	d90e      	bls.n	8007888 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	22ff      	movs	r2, #255	; 0xff
 800786e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007874:	b2da      	uxtb	r2, r3
 8007876:	8979      	ldrh	r1, [r7, #10]
 8007878:	4b52      	ldr	r3, [pc, #328]	; (80079c4 <HAL_I2C_Mem_Read+0x22c>)
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007880:	68f8      	ldr	r0, [r7, #12]
 8007882:	f000 fa9f 	bl	8007dc4 <I2C_TransferConfig>
 8007886:	e00f      	b.n	80078a8 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800788c:	b29a      	uxth	r2, r3
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007896:	b2da      	uxtb	r2, r3
 8007898:	8979      	ldrh	r1, [r7, #10]
 800789a:	4b4a      	ldr	r3, [pc, #296]	; (80079c4 <HAL_I2C_Mem_Read+0x22c>)
 800789c:	9300      	str	r3, [sp, #0]
 800789e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078a2:	68f8      	ldr	r0, [r7, #12]
 80078a4:	f000 fa8e 	bl	8007dc4 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	9300      	str	r3, [sp, #0]
 80078ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078ae:	2200      	movs	r2, #0
 80078b0:	2104      	movs	r1, #4
 80078b2:	68f8      	ldr	r0, [r7, #12]
 80078b4:	f000 f964 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 80078b8:	4603      	mov	r3, r0
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d001      	beq.n	80078c2 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80078be:	2301      	movs	r3, #1
 80078c0:	e07c      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078cc:	b2d2      	uxtb	r2, r2
 80078ce:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d4:	1c5a      	adds	r2, r3, #1
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078de:	3b01      	subs	r3, #1
 80078e0:	b29a      	uxth	r2, r3
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078ea:	b29b      	uxth	r3, r3
 80078ec:	3b01      	subs	r3, #1
 80078ee:	b29a      	uxth	r2, r3
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078f8:	b29b      	uxth	r3, r3
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d034      	beq.n	8007968 <HAL_I2C_Mem_Read+0x1d0>
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007902:	2b00      	cmp	r3, #0
 8007904:	d130      	bne.n	8007968 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800790c:	2200      	movs	r2, #0
 800790e:	2180      	movs	r1, #128	; 0x80
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f935 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007916:	4603      	mov	r3, r0
 8007918:	2b00      	cmp	r3, #0
 800791a:	d001      	beq.n	8007920 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800791c:	2301      	movs	r3, #1
 800791e:	e04d      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007924:	b29b      	uxth	r3, r3
 8007926:	2bff      	cmp	r3, #255	; 0xff
 8007928:	d90e      	bls.n	8007948 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	22ff      	movs	r2, #255	; 0xff
 800792e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007934:	b2da      	uxtb	r2, r3
 8007936:	8979      	ldrh	r1, [r7, #10]
 8007938:	2300      	movs	r3, #0
 800793a:	9300      	str	r3, [sp, #0]
 800793c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007940:	68f8      	ldr	r0, [r7, #12]
 8007942:	f000 fa3f 	bl	8007dc4 <I2C_TransferConfig>
 8007946:	e00f      	b.n	8007968 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800794c:	b29a      	uxth	r2, r3
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007956:	b2da      	uxtb	r2, r3
 8007958:	8979      	ldrh	r1, [r7, #10]
 800795a:	2300      	movs	r3, #0
 800795c:	9300      	str	r3, [sp, #0]
 800795e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007962:	68f8      	ldr	r0, [r7, #12]
 8007964:	f000 fa2e 	bl	8007dc4 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800796c:	b29b      	uxth	r3, r3
 800796e:	2b00      	cmp	r3, #0
 8007970:	d19a      	bne.n	80078a8 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007972:	697a      	ldr	r2, [r7, #20]
 8007974:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007976:	68f8      	ldr	r0, [r7, #12]
 8007978:	f000 f982 	bl	8007c80 <I2C_WaitOnSTOPFlagUntilTimeout>
 800797c:	4603      	mov	r3, r0
 800797e:	2b00      	cmp	r3, #0
 8007980:	d001      	beq.n	8007986 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e01a      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	2220      	movs	r2, #32
 800798c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	6859      	ldr	r1, [r3, #4]
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681a      	ldr	r2, [r3, #0]
 8007998:	4b0b      	ldr	r3, [pc, #44]	; (80079c8 <HAL_I2C_Mem_Read+0x230>)
 800799a:	400b      	ands	r3, r1
 800799c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	2220      	movs	r2, #32
 80079a2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	2200      	movs	r2, #0
 80079b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80079b6:	2300      	movs	r3, #0
 80079b8:	e000      	b.n	80079bc <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80079ba:	2302      	movs	r3, #2
  }
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3718      	adds	r7, #24
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}
 80079c4:	80002400 	.word	0x80002400
 80079c8:	fe00e800 	.word	0xfe00e800

080079cc <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 80079cc:	b480      	push	{r7}
 80079ce:	b083      	sub	sp, #12
 80079d0:	af00      	add	r7, sp, #0
 80079d2:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079da:	b2db      	uxtb	r3, r3
}
 80079dc:	4618      	mov	r0, r3
 80079de:	370c      	adds	r7, #12
 80079e0:	46bd      	mov	sp, r7
 80079e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079e6:	4770      	bx	lr

080079e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b086      	sub	sp, #24
 80079ec:	af02      	add	r7, sp, #8
 80079ee:	60f8      	str	r0, [r7, #12]
 80079f0:	4608      	mov	r0, r1
 80079f2:	4611      	mov	r1, r2
 80079f4:	461a      	mov	r2, r3
 80079f6:	4603      	mov	r3, r0
 80079f8:	817b      	strh	r3, [r7, #10]
 80079fa:	460b      	mov	r3, r1
 80079fc:	813b      	strh	r3, [r7, #8]
 80079fe:	4613      	mov	r3, r2
 8007a00:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007a02:	88fb      	ldrh	r3, [r7, #6]
 8007a04:	b2da      	uxtb	r2, r3
 8007a06:	8979      	ldrh	r1, [r7, #10]
 8007a08:	4b20      	ldr	r3, [pc, #128]	; (8007a8c <I2C_RequestMemoryWrite+0xa4>)
 8007a0a:	9300      	str	r3, [sp, #0]
 8007a0c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f000 f9d7 	bl	8007dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a16:	69fa      	ldr	r2, [r7, #28]
 8007a18:	69b9      	ldr	r1, [r7, #24]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f8f0 	bl	8007c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a20:	4603      	mov	r3, r0
 8007a22:	2b00      	cmp	r3, #0
 8007a24:	d001      	beq.n	8007a2a <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8007a26:	2301      	movs	r3, #1
 8007a28:	e02c      	b.n	8007a84 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007a2a:	88fb      	ldrh	r3, [r7, #6]
 8007a2c:	2b01      	cmp	r3, #1
 8007a2e:	d105      	bne.n	8007a3c <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a30:	893b      	ldrh	r3, [r7, #8]
 8007a32:	b2da      	uxtb	r2, r3
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	629a      	str	r2, [r3, #40]	; 0x28
 8007a3a:	e015      	b.n	8007a68 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007a3c:	893b      	ldrh	r3, [r7, #8]
 8007a3e:	0a1b      	lsrs	r3, r3, #8
 8007a40:	b29b      	uxth	r3, r3
 8007a42:	b2da      	uxtb	r2, r3
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007a4a:	69fa      	ldr	r2, [r7, #28]
 8007a4c:	69b9      	ldr	r1, [r7, #24]
 8007a4e:	68f8      	ldr	r0, [r7, #12]
 8007a50:	f000 f8d6 	bl	8007c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8007a54:	4603      	mov	r3, r0
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d001      	beq.n	8007a5e <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8007a5a:	2301      	movs	r3, #1
 8007a5c:	e012      	b.n	8007a84 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007a5e:	893b      	ldrh	r3, [r7, #8]
 8007a60:	b2da      	uxtb	r2, r3
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007a68:	69fb      	ldr	r3, [r7, #28]
 8007a6a:	9300      	str	r3, [sp, #0]
 8007a6c:	69bb      	ldr	r3, [r7, #24]
 8007a6e:	2200      	movs	r2, #0
 8007a70:	2180      	movs	r1, #128	; 0x80
 8007a72:	68f8      	ldr	r0, [r7, #12]
 8007a74:	f000 f884 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007a78:	4603      	mov	r3, r0
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d001      	beq.n	8007a82 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8007a7e:	2301      	movs	r3, #1
 8007a80:	e000      	b.n	8007a84 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8007a82:	2300      	movs	r3, #0
}
 8007a84:	4618      	mov	r0, r3
 8007a86:	3710      	adds	r7, #16
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	bd80      	pop	{r7, pc}
 8007a8c:	80002000 	.word	0x80002000

08007a90 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8007a90:	b580      	push	{r7, lr}
 8007a92:	b086      	sub	sp, #24
 8007a94:	af02      	add	r7, sp, #8
 8007a96:	60f8      	str	r0, [r7, #12]
 8007a98:	4608      	mov	r0, r1
 8007a9a:	4611      	mov	r1, r2
 8007a9c:	461a      	mov	r2, r3
 8007a9e:	4603      	mov	r3, r0
 8007aa0:	817b      	strh	r3, [r7, #10]
 8007aa2:	460b      	mov	r3, r1
 8007aa4:	813b      	strh	r3, [r7, #8]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007aaa:	88fb      	ldrh	r3, [r7, #6]
 8007aac:	b2da      	uxtb	r2, r3
 8007aae:	8979      	ldrh	r1, [r7, #10]
 8007ab0:	4b20      	ldr	r3, [pc, #128]	; (8007b34 <I2C_RequestMemoryRead+0xa4>)
 8007ab2:	9300      	str	r3, [sp, #0]
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	68f8      	ldr	r0, [r7, #12]
 8007ab8:	f000 f984 	bl	8007dc4 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007abc:	69fa      	ldr	r2, [r7, #28]
 8007abe:	69b9      	ldr	r1, [r7, #24]
 8007ac0:	68f8      	ldr	r0, [r7, #12]
 8007ac2:	f000 f89d 	bl	8007c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ac6:	4603      	mov	r3, r0
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d001      	beq.n	8007ad0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8007acc:	2301      	movs	r3, #1
 8007ace:	e02c      	b.n	8007b2a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007ad0:	88fb      	ldrh	r3, [r7, #6]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d105      	bne.n	8007ae2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ad6:	893b      	ldrh	r3, [r7, #8]
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	629a      	str	r2, [r3, #40]	; 0x28
 8007ae0:	e015      	b.n	8007b0e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007ae2:	893b      	ldrh	r3, [r7, #8]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	b29b      	uxth	r3, r3
 8007ae8:	b2da      	uxtb	r2, r3
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007af0:	69fa      	ldr	r2, [r7, #28]
 8007af2:	69b9      	ldr	r1, [r7, #24]
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f883 	bl	8007c00 <I2C_WaitOnTXISFlagUntilTimeout>
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d001      	beq.n	8007b04 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8007b00:	2301      	movs	r3, #1
 8007b02:	e012      	b.n	8007b2a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b04:	893b      	ldrh	r3, [r7, #8]
 8007b06:	b2da      	uxtb	r2, r3
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007b0e:	69fb      	ldr	r3, [r7, #28]
 8007b10:	9300      	str	r3, [sp, #0]
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	2200      	movs	r2, #0
 8007b16:	2140      	movs	r1, #64	; 0x40
 8007b18:	68f8      	ldr	r0, [r7, #12]
 8007b1a:	f000 f831 	bl	8007b80 <I2C_WaitOnFlagUntilTimeout>
 8007b1e:	4603      	mov	r3, r0
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d001      	beq.n	8007b28 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8007b24:	2301      	movs	r3, #1
 8007b26:	e000      	b.n	8007b2a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	3710      	adds	r7, #16
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	bd80      	pop	{r7, pc}
 8007b32:	bf00      	nop
 8007b34:	80002000 	.word	0x80002000

08007b38 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	699b      	ldr	r3, [r3, #24]
 8007b46:	f003 0302 	and.w	r3, r3, #2
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d103      	bne.n	8007b56 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	2200      	movs	r2, #0
 8007b54:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	699b      	ldr	r3, [r3, #24]
 8007b5c:	f003 0301 	and.w	r3, r3, #1
 8007b60:	2b01      	cmp	r3, #1
 8007b62:	d007      	beq.n	8007b74 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	699a      	ldr	r2, [r3, #24]
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f042 0201 	orr.w	r2, r2, #1
 8007b72:	619a      	str	r2, [r3, #24]
  }
}
 8007b74:	bf00      	nop
 8007b76:	370c      	adds	r7, #12
 8007b78:	46bd      	mov	sp, r7
 8007b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7e:	4770      	bx	lr

08007b80 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b084      	sub	sp, #16
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	603b      	str	r3, [r7, #0]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007b90:	e022      	b.n	8007bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b98:	d01e      	beq.n	8007bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b9a:	f7fd ff19 	bl	80059d0 <HAL_GetTick>
 8007b9e:	4602      	mov	r2, r0
 8007ba0:	69bb      	ldr	r3, [r7, #24]
 8007ba2:	1ad3      	subs	r3, r2, r3
 8007ba4:	683a      	ldr	r2, [r7, #0]
 8007ba6:	429a      	cmp	r2, r3
 8007ba8:	d302      	bcc.n	8007bb0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007baa:	683b      	ldr	r3, [r7, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d113      	bne.n	8007bd8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bb4:	f043 0220 	orr.w	r2, r3, #32
 8007bb8:	68fb      	ldr	r3, [r7, #12]
 8007bba:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007bbc:	68fb      	ldr	r3, [r7, #12]
 8007bbe:	2220      	movs	r2, #32
 8007bc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2200      	movs	r2, #0
 8007bc8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007bd4:	2301      	movs	r3, #1
 8007bd6:	e00f      	b.n	8007bf8 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007bd8:	68fb      	ldr	r3, [r7, #12]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	699a      	ldr	r2, [r3, #24]
 8007bde:	68bb      	ldr	r3, [r7, #8]
 8007be0:	4013      	ands	r3, r2
 8007be2:	68ba      	ldr	r2, [r7, #8]
 8007be4:	429a      	cmp	r2, r3
 8007be6:	bf0c      	ite	eq
 8007be8:	2301      	moveq	r3, #1
 8007bea:	2300      	movne	r3, #0
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	461a      	mov	r2, r3
 8007bf0:	79fb      	ldrb	r3, [r7, #7]
 8007bf2:	429a      	cmp	r2, r3
 8007bf4:	d0cd      	beq.n	8007b92 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007bf6:	2300      	movs	r3, #0
}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	3710      	adds	r7, #16
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	bd80      	pop	{r7, pc}

08007c00 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b084      	sub	sp, #16
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	60f8      	str	r0, [r7, #12]
 8007c08:	60b9      	str	r1, [r7, #8]
 8007c0a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c0c:	e02c      	b.n	8007c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c0e:	687a      	ldr	r2, [r7, #4]
 8007c10:	68b9      	ldr	r1, [r7, #8]
 8007c12:	68f8      	ldr	r0, [r7, #12]
 8007c14:	f000 f870 	bl	8007cf8 <I2C_IsAcknowledgeFailed>
 8007c18:	4603      	mov	r3, r0
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d001      	beq.n	8007c22 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c1e:	2301      	movs	r3, #1
 8007c20:	e02a      	b.n	8007c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007c28:	d01e      	beq.n	8007c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007c2a:	f7fd fed1 	bl	80059d0 <HAL_GetTick>
 8007c2e:	4602      	mov	r2, r0
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	1ad3      	subs	r3, r2, r3
 8007c34:	68ba      	ldr	r2, [r7, #8]
 8007c36:	429a      	cmp	r2, r3
 8007c38:	d302      	bcc.n	8007c40 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8007c3a:	68bb      	ldr	r3, [r7, #8]
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	d113      	bne.n	8007c68 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007c44:	f043 0220 	orr.w	r2, r3, #32
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	2220      	movs	r2, #32
 8007c50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8007c64:	2301      	movs	r3, #1
 8007c66:	e007      	b.n	8007c78 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	699b      	ldr	r3, [r3, #24]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b02      	cmp	r3, #2
 8007c74:	d1cb      	bne.n	8007c0e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007c76:	2300      	movs	r3, #0
}
 8007c78:	4618      	mov	r0, r3
 8007c7a:	3710      	adds	r7, #16
 8007c7c:	46bd      	mov	sp, r7
 8007c7e:	bd80      	pop	{r7, pc}

08007c80 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007c80:	b580      	push	{r7, lr}
 8007c82:	b084      	sub	sp, #16
 8007c84:	af00      	add	r7, sp, #0
 8007c86:	60f8      	str	r0, [r7, #12]
 8007c88:	60b9      	str	r1, [r7, #8]
 8007c8a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c8c:	e028      	b.n	8007ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 f830 	bl	8007cf8 <I2C_IsAcknowledgeFailed>
 8007c98:	4603      	mov	r3, r0
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d001      	beq.n	8007ca2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007c9e:	2301      	movs	r3, #1
 8007ca0:	e026      	b.n	8007cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ca2:	f7fd fe95 	bl	80059d0 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	68ba      	ldr	r2, [r7, #8]
 8007cae:	429a      	cmp	r2, r3
 8007cb0:	d302      	bcc.n	8007cb8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007cb2:	68bb      	ldr	r3, [r7, #8]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d113      	bne.n	8007ce0 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cb8:	68fb      	ldr	r3, [r7, #12]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbc:	f043 0220 	orr.w	r2, r3, #32
 8007cc0:	68fb      	ldr	r3, [r7, #12]
 8007cc2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e007      	b.n	8007cf0 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007ce0:	68fb      	ldr	r3, [r7, #12]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	699b      	ldr	r3, [r3, #24]
 8007ce6:	f003 0320 	and.w	r3, r3, #32
 8007cea:	2b20      	cmp	r3, #32
 8007cec:	d1cf      	bne.n	8007c8e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007cee:	2300      	movs	r3, #0
}
 8007cf0:	4618      	mov	r0, r3
 8007cf2:	3710      	adds	r7, #16
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007cf8:	b580      	push	{r7, lr}
 8007cfa:	b084      	sub	sp, #16
 8007cfc:	af00      	add	r7, sp, #0
 8007cfe:	60f8      	str	r0, [r7, #12]
 8007d00:	60b9      	str	r1, [r7, #8]
 8007d02:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	699b      	ldr	r3, [r3, #24]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d151      	bne.n	8007db6 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d12:	e022      	b.n	8007d5a <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007d14:	68bb      	ldr	r3, [r7, #8]
 8007d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007d1a:	d01e      	beq.n	8007d5a <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d1c:	f7fd fe58 	bl	80059d0 <HAL_GetTick>
 8007d20:	4602      	mov	r2, r0
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	1ad3      	subs	r3, r2, r3
 8007d26:	68ba      	ldr	r2, [r7, #8]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d302      	bcc.n	8007d32 <I2C_IsAcknowledgeFailed+0x3a>
 8007d2c:	68bb      	ldr	r3, [r7, #8]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d113      	bne.n	8007d5a <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d32:	68fb      	ldr	r3, [r7, #12]
 8007d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d36:	f043 0220 	orr.w	r2, r3, #32
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d3e:	68fb      	ldr	r3, [r7, #12]
 8007d40:	2220      	movs	r2, #32
 8007d42:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	2200      	movs	r2, #0
 8007d4a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	2200      	movs	r2, #0
 8007d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8007d56:	2301      	movs	r3, #1
 8007d58:	e02e      	b.n	8007db8 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	f003 0320 	and.w	r3, r3, #32
 8007d64:	2b20      	cmp	r3, #32
 8007d66:	d1d5      	bne.n	8007d14 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d68:	68fb      	ldr	r3, [r7, #12]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	2210      	movs	r2, #16
 8007d6e:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	2220      	movs	r2, #32
 8007d76:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d78:	68f8      	ldr	r0, [r7, #12]
 8007d7a:	f7ff fedd 	bl	8007b38 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	6859      	ldr	r1, [r3, #4]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4b0d      	ldr	r3, [pc, #52]	; (8007dc0 <I2C_IsAcknowledgeFailed+0xc8>)
 8007d8a:	400b      	ands	r3, r1
 8007d8c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d92:	f043 0204 	orr.w	r2, r3, #4
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	2200      	movs	r2, #0
 8007dae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8007db2:	2301      	movs	r3, #1
 8007db4:	e000      	b.n	8007db8 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8007db6:	2300      	movs	r3, #0
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3710      	adds	r7, #16
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	fe00e800 	.word	0xfe00e800

08007dc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8007dc4:	b480      	push	{r7}
 8007dc6:	b085      	sub	sp, #20
 8007dc8:	af00      	add	r7, sp, #0
 8007dca:	60f8      	str	r0, [r7, #12]
 8007dcc:	607b      	str	r3, [r7, #4]
 8007dce:	460b      	mov	r3, r1
 8007dd0:	817b      	strh	r3, [r7, #10]
 8007dd2:	4613      	mov	r3, r2
 8007dd4:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8007dd6:	68fb      	ldr	r3, [r7, #12]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685a      	ldr	r2, [r3, #4]
 8007ddc:	69bb      	ldr	r3, [r7, #24]
 8007dde:	0d5b      	lsrs	r3, r3, #21
 8007de0:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007de4:	4b0d      	ldr	r3, [pc, #52]	; (8007e1c <I2C_TransferConfig+0x58>)
 8007de6:	430b      	orrs	r3, r1
 8007de8:	43db      	mvns	r3, r3
 8007dea:	ea02 0103 	and.w	r1, r2, r3
 8007dee:	897b      	ldrh	r3, [r7, #10]
 8007df0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8007df4:	7a7b      	ldrb	r3, [r7, #9]
 8007df6:	041b      	lsls	r3, r3, #16
 8007df8:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007dfc:	431a      	orrs	r2, r3
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	431a      	orrs	r2, r3
 8007e02:	69bb      	ldr	r3, [r7, #24]
 8007e04:	431a      	orrs	r2, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8007e0e:	bf00      	nop
 8007e10:	3714      	adds	r7, #20
 8007e12:	46bd      	mov	sp, r7
 8007e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e18:	4770      	bx	lr
 8007e1a:	bf00      	nop
 8007e1c:	03ff63ff 	.word	0x03ff63ff

08007e20 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b083      	sub	sp, #12
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e30:	b2db      	uxtb	r3, r3
 8007e32:	2b20      	cmp	r3, #32
 8007e34:	d138      	bne.n	8007ea8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d101      	bne.n	8007e44 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007e40:	2302      	movs	r3, #2
 8007e42:	e032      	b.n	8007eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	2201      	movs	r2, #1
 8007e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	2224      	movs	r2, #36	; 0x24
 8007e50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	681a      	ldr	r2, [r3, #0]
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	f022 0201 	bic.w	r2, r2, #1
 8007e62:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	681a      	ldr	r2, [r3, #0]
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8007e72:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	6819      	ldr	r1, [r3, #0]
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	683a      	ldr	r2, [r7, #0]
 8007e80:	430a      	orrs	r2, r1
 8007e82:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	681a      	ldr	r2, [r3, #0]
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f042 0201 	orr.w	r2, r2, #1
 8007e92:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2200      	movs	r2, #0
 8007ea0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007ea4:	2300      	movs	r3, #0
 8007ea6:	e000      	b.n	8007eaa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8007ea8:	2302      	movs	r3, #2
  }
}
 8007eaa:	4618      	mov	r0, r3
 8007eac:	370c      	adds	r7, #12
 8007eae:	46bd      	mov	sp, r7
 8007eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb4:	4770      	bx	lr

08007eb6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007eb6:	b480      	push	{r7}
 8007eb8:	b085      	sub	sp, #20
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
 8007ebe:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ec6:	b2db      	uxtb	r3, r3
 8007ec8:	2b20      	cmp	r3, #32
 8007eca:	d139      	bne.n	8007f40 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ed2:	2b01      	cmp	r3, #1
 8007ed4:	d101      	bne.n	8007eda <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8007ed6:	2302      	movs	r3, #2
 8007ed8:	e033      	b.n	8007f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2201      	movs	r2, #1
 8007ede:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2224      	movs	r2, #36	; 0x24
 8007ee6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	f022 0201 	bic.w	r2, r2, #1
 8007ef8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007f02:	68fb      	ldr	r3, [r7, #12]
 8007f04:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007f08:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007f0a:	683b      	ldr	r3, [r7, #0]
 8007f0c:	021b      	lsls	r3, r3, #8
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4313      	orrs	r3, r2
 8007f12:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	f042 0201 	orr.w	r2, r2, #1
 8007f2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2220      	movs	r2, #32
 8007f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	e000      	b.n	8007f42 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007f40:	2302      	movs	r3, #2
  }
}
 8007f42:	4618      	mov	r0, r3
 8007f44:	3714      	adds	r7, #20
 8007f46:	46bd      	mov	sp, r7
 8007f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4c:	4770      	bx	lr
	...

08007f50 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b084      	sub	sp, #16
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d101      	bne.n	8007f62 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007f5e:	2301      	movs	r3, #1
 8007f60:	e0bf      	b.n	80080e2 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007f68:	b2db      	uxtb	r3, r3
 8007f6a:	2b00      	cmp	r3, #0
 8007f6c:	d106      	bne.n	8007f7c <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	2200      	movs	r2, #0
 8007f72:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7fd f88a 	bl	8005090 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	699a      	ldr	r2, [r3, #24]
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8007f92:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	6999      	ldr	r1, [r3, #24]
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	685a      	ldr	r2, [r3, #4]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fa8:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	691b      	ldr	r3, [r3, #16]
 8007fae:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	430a      	orrs	r2, r1
 8007fb6:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	6899      	ldr	r1, [r3, #8]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681a      	ldr	r2, [r3, #0]
 8007fc2:	4b4a      	ldr	r3, [pc, #296]	; (80080ec <HAL_LTDC_Init+0x19c>)
 8007fc4:	400b      	ands	r3, r1
 8007fc6:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	695b      	ldr	r3, [r3, #20]
 8007fcc:	041b      	lsls	r3, r3, #16
 8007fce:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	681b      	ldr	r3, [r3, #0]
 8007fd4:	6899      	ldr	r1, [r3, #8]
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	431a      	orrs	r2, r3
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	430a      	orrs	r2, r1
 8007fe4:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	68d9      	ldr	r1, [r3, #12]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	4b3e      	ldr	r3, [pc, #248]	; (80080ec <HAL_LTDC_Init+0x19c>)
 8007ff2:	400b      	ands	r3, r1
 8007ff4:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	69db      	ldr	r3, [r3, #28]
 8007ffa:	041b      	lsls	r3, r3, #16
 8007ffc:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	68d9      	ldr	r1, [r3, #12]
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6a1a      	ldr	r2, [r3, #32]
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	431a      	orrs	r2, r3
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	430a      	orrs	r2, r1
 8008012:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	6919      	ldr	r1, [r3, #16]
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	4b33      	ldr	r3, [pc, #204]	; (80080ec <HAL_LTDC_Init+0x19c>)
 8008020:	400b      	ands	r3, r1
 8008022:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008028:	041b      	lsls	r3, r3, #16
 800802a:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	6919      	ldr	r1, [r3, #16]
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	431a      	orrs	r2, r3
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	430a      	orrs	r2, r1
 8008040:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	6959      	ldr	r1, [r3, #20]
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	681a      	ldr	r2, [r3, #0]
 800804c:	4b27      	ldr	r3, [pc, #156]	; (80080ec <HAL_LTDC_Init+0x19c>)
 800804e:	400b      	ands	r3, r1
 8008050:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008056:	041b      	lsls	r3, r3, #16
 8008058:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	6959      	ldr	r1, [r3, #20]
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	431a      	orrs	r2, r3
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	430a      	orrs	r2, r1
 800806e:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008076:	021b      	lsls	r3, r3, #8
 8008078:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8008080:	041b      	lsls	r3, r3, #16
 8008082:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8008092:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80080a6:	431a      	orrs	r2, r3
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	430a      	orrs	r2, r1
 80080ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f042 0206 	orr.w	r2, r2, #6
 80080be:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	699a      	ldr	r2, [r3, #24]
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f042 0201 	orr.w	r2, r2, #1
 80080ce:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2200      	movs	r2, #0
 80080d4:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2201      	movs	r2, #1
 80080dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3710      	adds	r7, #16
 80080e6:	46bd      	mov	sp, r7
 80080e8:	bd80      	pop	{r7, pc}
 80080ea:	bf00      	nop
 80080ec:	f000f800 	.word	0xf000f800

080080f0 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 80080f0:	b580      	push	{r7, lr}
 80080f2:	b084      	sub	sp, #16
 80080f4:	af00      	add	r7, sp, #0
 80080f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008106:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	f003 0304 	and.w	r3, r3, #4
 800810e:	2b00      	cmp	r3, #0
 8008110:	d023      	beq.n	800815a <HAL_LTDC_IRQHandler+0x6a>
 8008112:	68bb      	ldr	r3, [r7, #8]
 8008114:	f003 0304 	and.w	r3, r3, #4
 8008118:	2b00      	cmp	r3, #0
 800811a:	d01e      	beq.n	800815a <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	f022 0204 	bic.w	r2, r2, #4
 800812a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	2204      	movs	r2, #4
 8008132:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800813a:	f043 0201 	orr.w	r2, r3, #1
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2204      	movs	r2, #4
 8008148:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8008154:	6878      	ldr	r0, [r7, #4]
 8008156:	f000 f86f 	bl	8008238 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	f003 0302 	and.w	r3, r3, #2
 8008160:	2b00      	cmp	r3, #0
 8008162:	d023      	beq.n	80081ac <HAL_LTDC_IRQHandler+0xbc>
 8008164:	68bb      	ldr	r3, [r7, #8]
 8008166:	f003 0302 	and.w	r3, r3, #2
 800816a:	2b00      	cmp	r3, #0
 800816c:	d01e      	beq.n	80081ac <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0202 	bic.w	r2, r2, #2
 800817c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	2202      	movs	r2, #2
 8008184:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800818c:	f043 0202 	orr.w	r2, r3, #2
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	2204      	movs	r2, #4
 800819a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	2200      	movs	r2, #0
 80081a2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f846 	bl	8008238 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	f003 0301 	and.w	r3, r3, #1
 80081b2:	2b00      	cmp	r3, #0
 80081b4:	d01b      	beq.n	80081ee <HAL_LTDC_IRQHandler+0xfe>
 80081b6:	68bb      	ldr	r3, [r7, #8]
 80081b8:	f003 0301 	and.w	r3, r3, #1
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d016      	beq.n	80081ee <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f022 0201 	bic.w	r2, r2, #1
 80081ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	681b      	ldr	r3, [r3, #0]
 80081d4:	2201      	movs	r2, #1
 80081d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	2201      	movs	r2, #1
 80081dc:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2200      	movs	r2, #0
 80081e4:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 80081e8:	6878      	ldr	r0, [r7, #4]
 80081ea:	f000 f82f 	bl	800824c <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	f003 0308 	and.w	r3, r3, #8
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d01b      	beq.n	8008230 <HAL_LTDC_IRQHandler+0x140>
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f003 0308 	and.w	r3, r3, #8
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d016      	beq.n	8008230 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f022 0208 	bic.w	r2, r2, #8
 8008210:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	2208      	movs	r2, #8
 8008218:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2200      	movs	r2, #0
 8008226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800822a:	6878      	ldr	r0, [r7, #4]
 800822c:	f000 f818 	bl	8008260 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8008230:	bf00      	nop
 8008232:	3710      	adds	r7, #16
 8008234:	46bd      	mov	sp, r7
 8008236:	bd80      	pop	{r7, pc}

08008238 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8008238:	b480      	push	{r7}
 800823a:	b083      	sub	sp, #12
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8008240:	bf00      	nop
 8008242:	370c      	adds	r7, #12
 8008244:	46bd      	mov	sp, r7
 8008246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800824a:	4770      	bx	lr

0800824c <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 800824c:	b480      	push	{r7}
 800824e:	b083      	sub	sp, #12
 8008250:	af00      	add	r7, sp, #0
 8008252:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 8008268:	bf00      	nop
 800826a:	370c      	adds	r7, #12
 800826c:	46bd      	mov	sp, r7
 800826e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008272:	4770      	bx	lr

08008274 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8008274:	b5b0      	push	{r4, r5, r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	60f8      	str	r0, [r7, #12]
 800827c:	60b9      	str	r1, [r7, #8]
 800827e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 8008286:	2b01      	cmp	r3, #1
 8008288:	d101      	bne.n	800828e <HAL_LTDC_ConfigLayer+0x1a>
 800828a:	2302      	movs	r3, #2
 800828c:	e02c      	b.n	80082e8 <HAL_LTDC_ConfigLayer+0x74>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	2201      	movs	r2, #1
 8008292:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	2202      	movs	r2, #2
 800829a:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800829e:	68fa      	ldr	r2, [r7, #12]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2134      	movs	r1, #52	; 0x34
 80082a4:	fb01 f303 	mul.w	r3, r1, r3
 80082a8:	4413      	add	r3, r2
 80082aa:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80082ae:	68bb      	ldr	r3, [r7, #8]
 80082b0:	4614      	mov	r4, r2
 80082b2:	461d      	mov	r5, r3
 80082b4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082b6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082bc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80082be:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80082c0:	682b      	ldr	r3, [r5, #0]
 80082c2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80082c4:	687a      	ldr	r2, [r7, #4]
 80082c6:	68b9      	ldr	r1, [r7, #8]
 80082c8:	68f8      	ldr	r0, [r7, #12]
 80082ca:	f000 f81f 	bl	800830c <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 80082ce:	68fb      	ldr	r3, [r7, #12]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	2201      	movs	r2, #1
 80082d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	2201      	movs	r2, #1
 80082da:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	2200      	movs	r2, #0
 80082e2:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 80082e6:	2300      	movs	r3, #0
}
 80082e8:	4618      	mov	r0, r3
 80082ea:	3710      	adds	r7, #16
 80082ec:	46bd      	mov	sp, r7
 80082ee:	bdb0      	pop	{r4, r5, r7, pc}

080082f0 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b083      	sub	sp, #12
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80082fe:	b2db      	uxtb	r3, r3
}
 8008300:	4618      	mov	r0, r3
 8008302:	370c      	adds	r7, #12
 8008304:	46bd      	mov	sp, r7
 8008306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830a:	4770      	bx	lr

0800830c <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800830c:	b480      	push	{r7}
 800830e:	b089      	sub	sp, #36	; 0x24
 8008310:	af00      	add	r7, sp, #0
 8008312:	60f8      	str	r0, [r7, #12]
 8008314:	60b9      	str	r1, [r7, #8]
 8008316:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	685a      	ldr	r2, [r3, #4]
 800831c:	68fb      	ldr	r3, [r7, #12]
 800831e:	681b      	ldr	r3, [r3, #0]
 8008320:	68db      	ldr	r3, [r3, #12]
 8008322:	0c1b      	lsrs	r3, r3, #16
 8008324:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008328:	4413      	add	r3, r2
 800832a:	041b      	lsls	r3, r3, #16
 800832c:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	01db      	lsls	r3, r3, #7
 8008338:	4413      	add	r3, r2
 800833a:	3384      	adds	r3, #132	; 0x84
 800833c:	685b      	ldr	r3, [r3, #4]
 800833e:	68fa      	ldr	r2, [r7, #12]
 8008340:	6812      	ldr	r2, [r2, #0]
 8008342:	4611      	mov	r1, r2
 8008344:	687a      	ldr	r2, [r7, #4]
 8008346:	01d2      	lsls	r2, r2, #7
 8008348:	440a      	add	r2, r1
 800834a:	3284      	adds	r2, #132	; 0x84
 800834c:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8008350:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008352:	68bb      	ldr	r3, [r7, #8]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	68db      	ldr	r3, [r3, #12]
 800835c:	0c1b      	lsrs	r3, r3, #16
 800835e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008362:	4413      	add	r3, r2
 8008364:	1c5a      	adds	r2, r3, #1
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4619      	mov	r1, r3
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	01db      	lsls	r3, r3, #7
 8008370:	440b      	add	r3, r1
 8008372:	3384      	adds	r3, #132	; 0x84
 8008374:	4619      	mov	r1, r3
 8008376:	69fb      	ldr	r3, [r7, #28]
 8008378:	4313      	orrs	r3, r2
 800837a:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800837c:	68bb      	ldr	r3, [r7, #8]
 800837e:	68da      	ldr	r2, [r3, #12]
 8008380:	68fb      	ldr	r3, [r7, #12]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	68db      	ldr	r3, [r3, #12]
 8008386:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800838a:	4413      	add	r3, r2
 800838c:	041b      	lsls	r3, r3, #16
 800838e:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	461a      	mov	r2, r3
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	01db      	lsls	r3, r3, #7
 800839a:	4413      	add	r3, r2
 800839c:	3384      	adds	r3, #132	; 0x84
 800839e:	689b      	ldr	r3, [r3, #8]
 80083a0:	68fa      	ldr	r2, [r7, #12]
 80083a2:	6812      	ldr	r2, [r2, #0]
 80083a4:	4611      	mov	r1, r2
 80083a6:	687a      	ldr	r2, [r7, #4]
 80083a8:	01d2      	lsls	r2, r2, #7
 80083aa:	440a      	add	r2, r1
 80083ac:	3284      	adds	r2, #132	; 0x84
 80083ae:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80083b2:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	689a      	ldr	r2, [r3, #8]
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	68db      	ldr	r3, [r3, #12]
 80083be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80083c2:	4413      	add	r3, r2
 80083c4:	1c5a      	adds	r2, r3, #1
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4619      	mov	r1, r3
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	01db      	lsls	r3, r3, #7
 80083d0:	440b      	add	r3, r1
 80083d2:	3384      	adds	r3, #132	; 0x84
 80083d4:	4619      	mov	r1, r3
 80083d6:	69fb      	ldr	r3, [r7, #28]
 80083d8:	4313      	orrs	r3, r2
 80083da:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	461a      	mov	r2, r3
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	01db      	lsls	r3, r3, #7
 80083e6:	4413      	add	r3, r2
 80083e8:	3384      	adds	r3, #132	; 0x84
 80083ea:	691b      	ldr	r3, [r3, #16]
 80083ec:	68fa      	ldr	r2, [r7, #12]
 80083ee:	6812      	ldr	r2, [r2, #0]
 80083f0:	4611      	mov	r1, r2
 80083f2:	687a      	ldr	r2, [r7, #4]
 80083f4:	01d2      	lsls	r2, r2, #7
 80083f6:	440a      	add	r2, r1
 80083f8:	3284      	adds	r2, #132	; 0x84
 80083fa:	f023 0307 	bic.w	r3, r3, #7
 80083fe:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	461a      	mov	r2, r3
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	01db      	lsls	r3, r3, #7
 800840a:	4413      	add	r3, r2
 800840c:	3384      	adds	r3, #132	; 0x84
 800840e:	461a      	mov	r2, r3
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	691b      	ldr	r3, [r3, #16]
 8008414:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008416:	68bb      	ldr	r3, [r7, #8]
 8008418:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800841c:	021b      	lsls	r3, r3, #8
 800841e:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008420:	68bb      	ldr	r3, [r7, #8]
 8008422:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8008426:	041b      	lsls	r3, r3, #16
 8008428:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800842a:	68bb      	ldr	r3, [r7, #8]
 800842c:	699b      	ldr	r3, [r3, #24]
 800842e:	061b      	lsls	r3, r3, #24
 8008430:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	461a      	mov	r2, r3
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	01db      	lsls	r3, r3, #7
 800843c:	4413      	add	r3, r2
 800843e:	3384      	adds	r3, #132	; 0x84
 8008440:	699b      	ldr	r3, [r3, #24]
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	461a      	mov	r2, r3
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	01db      	lsls	r3, r3, #7
 800844c:	4413      	add	r3, r2
 800844e:	3384      	adds	r3, #132	; 0x84
 8008450:	461a      	mov	r2, r3
 8008452:	2300      	movs	r3, #0
 8008454:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8008456:	68bb      	ldr	r3, [r7, #8]
 8008458:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800845c:	461a      	mov	r2, r3
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	431a      	orrs	r2, r3
 8008462:	69bb      	ldr	r3, [r7, #24]
 8008464:	431a      	orrs	r2, r3
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	681b      	ldr	r3, [r3, #0]
 800846a:	4619      	mov	r1, r3
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	01db      	lsls	r3, r3, #7
 8008470:	440b      	add	r3, r1
 8008472:	3384      	adds	r3, #132	; 0x84
 8008474:	4619      	mov	r1, r3
 8008476:	697b      	ldr	r3, [r7, #20]
 8008478:	4313      	orrs	r3, r2
 800847a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800847c:	68fb      	ldr	r3, [r7, #12]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	461a      	mov	r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	01db      	lsls	r3, r3, #7
 8008486:	4413      	add	r3, r2
 8008488:	3384      	adds	r3, #132	; 0x84
 800848a:	695b      	ldr	r3, [r3, #20]
 800848c:	68fa      	ldr	r2, [r7, #12]
 800848e:	6812      	ldr	r2, [r2, #0]
 8008490:	4611      	mov	r1, r2
 8008492:	687a      	ldr	r2, [r7, #4]
 8008494:	01d2      	lsls	r2, r2, #7
 8008496:	440a      	add	r2, r1
 8008498:	3284      	adds	r2, #132	; 0x84
 800849a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800849e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	461a      	mov	r2, r3
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	01db      	lsls	r3, r3, #7
 80084aa:	4413      	add	r3, r2
 80084ac:	3384      	adds	r3, #132	; 0x84
 80084ae:	461a      	mov	r2, r3
 80084b0:	68bb      	ldr	r3, [r7, #8]
 80084b2:	695b      	ldr	r3, [r3, #20]
 80084b4:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	461a      	mov	r2, r3
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	01db      	lsls	r3, r3, #7
 80084c0:	4413      	add	r3, r2
 80084c2:	3384      	adds	r3, #132	; 0x84
 80084c4:	69da      	ldr	r2, [r3, #28]
 80084c6:	68fb      	ldr	r3, [r7, #12]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	4619      	mov	r1, r3
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	01db      	lsls	r3, r3, #7
 80084d0:	440b      	add	r3, r1
 80084d2:	3384      	adds	r3, #132	; 0x84
 80084d4:	4619      	mov	r1, r3
 80084d6:	4b58      	ldr	r3, [pc, #352]	; (8008638 <LTDC_SetConfig+0x32c>)
 80084d8:	4013      	ands	r3, r2
 80084da:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 80084dc:	68bb      	ldr	r3, [r7, #8]
 80084de:	69da      	ldr	r2, [r3, #28]
 80084e0:	68bb      	ldr	r3, [r7, #8]
 80084e2:	6a1b      	ldr	r3, [r3, #32]
 80084e4:	68f9      	ldr	r1, [r7, #12]
 80084e6:	6809      	ldr	r1, [r1, #0]
 80084e8:	4608      	mov	r0, r1
 80084ea:	6879      	ldr	r1, [r7, #4]
 80084ec:	01c9      	lsls	r1, r1, #7
 80084ee:	4401      	add	r1, r0
 80084f0:	3184      	adds	r1, #132	; 0x84
 80084f2:	4313      	orrs	r3, r2
 80084f4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	681b      	ldr	r3, [r3, #0]
 80084fa:	461a      	mov	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	01db      	lsls	r3, r3, #7
 8008500:	4413      	add	r3, r2
 8008502:	3384      	adds	r3, #132	; 0x84
 8008504:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	681b      	ldr	r3, [r3, #0]
 800850a:	461a      	mov	r2, r3
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	01db      	lsls	r3, r3, #7
 8008510:	4413      	add	r3, r2
 8008512:	3384      	adds	r3, #132	; 0x84
 8008514:	461a      	mov	r2, r3
 8008516:	2300      	movs	r3, #0
 8008518:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	461a      	mov	r2, r3
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	01db      	lsls	r3, r3, #7
 8008524:	4413      	add	r3, r2
 8008526:	3384      	adds	r3, #132	; 0x84
 8008528:	461a      	mov	r2, r3
 800852a:	68bb      	ldr	r3, [r7, #8]
 800852c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800852e:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008530:	68bb      	ldr	r3, [r7, #8]
 8008532:	691b      	ldr	r3, [r3, #16]
 8008534:	2b00      	cmp	r3, #0
 8008536:	d102      	bne.n	800853e <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8008538:	2304      	movs	r3, #4
 800853a:	61fb      	str	r3, [r7, #28]
 800853c:	e01b      	b.n	8008576 <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800853e:	68bb      	ldr	r3, [r7, #8]
 8008540:	691b      	ldr	r3, [r3, #16]
 8008542:	2b01      	cmp	r3, #1
 8008544:	d102      	bne.n	800854c <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 8008546:	2303      	movs	r3, #3
 8008548:	61fb      	str	r3, [r7, #28]
 800854a:	e014      	b.n	8008576 <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800854c:	68bb      	ldr	r3, [r7, #8]
 800854e:	691b      	ldr	r3, [r3, #16]
 8008550:	2b04      	cmp	r3, #4
 8008552:	d00b      	beq.n	800856c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008558:	2b02      	cmp	r3, #2
 800855a:	d007      	beq.n	800856c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800855c:	68bb      	ldr	r3, [r7, #8]
 800855e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8008560:	2b03      	cmp	r3, #3
 8008562:	d003      	beq.n	800856c <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8008564:	68bb      	ldr	r3, [r7, #8]
 8008566:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8008568:	2b07      	cmp	r3, #7
 800856a:	d102      	bne.n	8008572 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 800856c:	2302      	movs	r3, #2
 800856e:	61fb      	str	r3, [r7, #28]
 8008570:	e001      	b.n	8008576 <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 8008572:	2301      	movs	r3, #1
 8008574:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	461a      	mov	r2, r3
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	01db      	lsls	r3, r3, #7
 8008580:	4413      	add	r3, r2
 8008582:	3384      	adds	r3, #132	; 0x84
 8008584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008586:	68fa      	ldr	r2, [r7, #12]
 8008588:	6812      	ldr	r2, [r2, #0]
 800858a:	4611      	mov	r1, r2
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	01d2      	lsls	r2, r2, #7
 8008590:	440a      	add	r2, r1
 8008592:	3284      	adds	r2, #132	; 0x84
 8008594:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 8008598:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 800859a:	68bb      	ldr	r3, [r7, #8]
 800859c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800859e:	69fa      	ldr	r2, [r7, #28]
 80085a0:	fb02 f303 	mul.w	r3, r2, r3
 80085a4:	041a      	lsls	r2, r3, #16
 80085a6:	68bb      	ldr	r3, [r7, #8]
 80085a8:	6859      	ldr	r1, [r3, #4]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	1acb      	subs	r3, r1, r3
 80085b0:	69f9      	ldr	r1, [r7, #28]
 80085b2:	fb01 f303 	mul.w	r3, r1, r3
 80085b6:	3303      	adds	r3, #3
 80085b8:	68f9      	ldr	r1, [r7, #12]
 80085ba:	6809      	ldr	r1, [r1, #0]
 80085bc:	4608      	mov	r0, r1
 80085be:	6879      	ldr	r1, [r7, #4]
 80085c0:	01c9      	lsls	r1, r1, #7
 80085c2:	4401      	add	r1, r0
 80085c4:	3184      	adds	r1, #132	; 0x84
 80085c6:	4313      	orrs	r3, r2
 80085c8:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	461a      	mov	r2, r3
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	01db      	lsls	r3, r3, #7
 80085d4:	4413      	add	r3, r2
 80085d6:	3384      	adds	r3, #132	; 0x84
 80085d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	4619      	mov	r1, r3
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	01db      	lsls	r3, r3, #7
 80085e4:	440b      	add	r3, r1
 80085e6:	3384      	adds	r3, #132	; 0x84
 80085e8:	4619      	mov	r1, r3
 80085ea:	4b14      	ldr	r3, [pc, #80]	; (800863c <LTDC_SetConfig+0x330>)
 80085ec:	4013      	ands	r3, r2
 80085ee:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	461a      	mov	r2, r3
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	01db      	lsls	r3, r3, #7
 80085fa:	4413      	add	r3, r2
 80085fc:	3384      	adds	r3, #132	; 0x84
 80085fe:	461a      	mov	r2, r3
 8008600:	68bb      	ldr	r3, [r7, #8]
 8008602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008604:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	461a      	mov	r2, r3
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	01db      	lsls	r3, r3, #7
 8008610:	4413      	add	r3, r2
 8008612:	3384      	adds	r3, #132	; 0x84
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	68fa      	ldr	r2, [r7, #12]
 8008618:	6812      	ldr	r2, [r2, #0]
 800861a:	4611      	mov	r1, r2
 800861c:	687a      	ldr	r2, [r7, #4]
 800861e:	01d2      	lsls	r2, r2, #7
 8008620:	440a      	add	r2, r1
 8008622:	3284      	adds	r2, #132	; 0x84
 8008624:	f043 0301 	orr.w	r3, r3, #1
 8008628:	6013      	str	r3, [r2, #0]
}
 800862a:	bf00      	nop
 800862c:	3724      	adds	r7, #36	; 0x24
 800862e:	46bd      	mov	sp, r7
 8008630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008634:	4770      	bx	lr
 8008636:	bf00      	nop
 8008638:	fffff8f8 	.word	0xfffff8f8
 800863c:	fffff800 	.word	0xfffff800

08008640 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008640:	b480      	push	{r7}
 8008642:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008644:	4b05      	ldr	r3, [pc, #20]	; (800865c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a04      	ldr	r2, [pc, #16]	; (800865c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800864a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800864e:	6013      	str	r3, [r2, #0]
}
 8008650:	bf00      	nop
 8008652:	46bd      	mov	sp, r7
 8008654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008658:	4770      	bx	lr
 800865a:	bf00      	nop
 800865c:	40007000 	.word	0x40007000

08008660 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008660:	b580      	push	{r7, lr}
 8008662:	b082      	sub	sp, #8
 8008664:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008666:	2300      	movs	r3, #0
 8008668:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800866a:	4b23      	ldr	r3, [pc, #140]	; (80086f8 <HAL_PWREx_EnableOverDrive+0x98>)
 800866c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800866e:	4a22      	ldr	r2, [pc, #136]	; (80086f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008670:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008674:	6413      	str	r3, [r2, #64]	; 0x40
 8008676:	4b20      	ldr	r3, [pc, #128]	; (80086f8 <HAL_PWREx_EnableOverDrive+0x98>)
 8008678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800867a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800867e:	603b      	str	r3, [r7, #0]
 8008680:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008682:	4b1e      	ldr	r3, [pc, #120]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	4a1d      	ldr	r2, [pc, #116]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 8008688:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800868c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800868e:	f7fd f99f 	bl	80059d0 <HAL_GetTick>
 8008692:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008694:	e009      	b.n	80086aa <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008696:	f7fd f99b 	bl	80059d0 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086a4:	d901      	bls.n	80086aa <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80086a6:	2303      	movs	r3, #3
 80086a8:	e022      	b.n	80086f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80086aa:	4b14      	ldr	r3, [pc, #80]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80086ac:	685b      	ldr	r3, [r3, #4]
 80086ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80086b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80086b6:	d1ee      	bne.n	8008696 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80086b8:	4b10      	ldr	r3, [pc, #64]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	4a0f      	ldr	r2, [pc, #60]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80086be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80086c2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80086c4:	f7fd f984 	bl	80059d0 <HAL_GetTick>
 80086c8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086ca:	e009      	b.n	80086e0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80086cc:	f7fd f980 	bl	80059d0 <HAL_GetTick>
 80086d0:	4602      	mov	r2, r0
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	1ad3      	subs	r3, r2, r3
 80086d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80086da:	d901      	bls.n	80086e0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80086dc:	2303      	movs	r3, #3
 80086de:	e007      	b.n	80086f0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80086e0:	4b06      	ldr	r3, [pc, #24]	; (80086fc <HAL_PWREx_EnableOverDrive+0x9c>)
 80086e2:	685b      	ldr	r3, [r3, #4]
 80086e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80086e8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80086ec:	d1ee      	bne.n	80086cc <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80086ee:	2300      	movs	r3, #0
}
 80086f0:	4618      	mov	r0, r3
 80086f2:	3708      	adds	r7, #8
 80086f4:	46bd      	mov	sp, r7
 80086f6:	bd80      	pop	{r7, pc}
 80086f8:	40023800 	.word	0x40023800
 80086fc:	40007000 	.word	0x40007000

08008700 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008700:	b580      	push	{r7, lr}
 8008702:	b086      	sub	sp, #24
 8008704:	af00      	add	r7, sp, #0
 8008706:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008708:	2300      	movs	r3, #0
 800870a:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	2b00      	cmp	r3, #0
 8008710:	d101      	bne.n	8008716 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008712:	2301      	movs	r3, #1
 8008714:	e291      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f003 0301 	and.w	r3, r3, #1
 800871e:	2b00      	cmp	r3, #0
 8008720:	f000 8087 	beq.w	8008832 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008724:	4b96      	ldr	r3, [pc, #600]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008726:	689b      	ldr	r3, [r3, #8]
 8008728:	f003 030c 	and.w	r3, r3, #12
 800872c:	2b04      	cmp	r3, #4
 800872e:	d00c      	beq.n	800874a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008730:	4b93      	ldr	r3, [pc, #588]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008732:	689b      	ldr	r3, [r3, #8]
 8008734:	f003 030c 	and.w	r3, r3, #12
 8008738:	2b08      	cmp	r3, #8
 800873a:	d112      	bne.n	8008762 <HAL_RCC_OscConfig+0x62>
 800873c:	4b90      	ldr	r3, [pc, #576]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800873e:	685b      	ldr	r3, [r3, #4]
 8008740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008744:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008748:	d10b      	bne.n	8008762 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800874a:	4b8d      	ldr	r3, [pc, #564]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008752:	2b00      	cmp	r3, #0
 8008754:	d06c      	beq.n	8008830 <HAL_RCC_OscConfig+0x130>
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	685b      	ldr	r3, [r3, #4]
 800875a:	2b00      	cmp	r3, #0
 800875c:	d168      	bne.n	8008830 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800875e:	2301      	movs	r3, #1
 8008760:	e26b      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	685b      	ldr	r3, [r3, #4]
 8008766:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800876a:	d106      	bne.n	800877a <HAL_RCC_OscConfig+0x7a>
 800876c:	4b84      	ldr	r3, [pc, #528]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	4a83      	ldr	r2, [pc, #524]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008772:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008776:	6013      	str	r3, [r2, #0]
 8008778:	e02e      	b.n	80087d8 <HAL_RCC_OscConfig+0xd8>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	685b      	ldr	r3, [r3, #4]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d10c      	bne.n	800879c <HAL_RCC_OscConfig+0x9c>
 8008782:	4b7f      	ldr	r3, [pc, #508]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a7e      	ldr	r2, [pc, #504]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b7c      	ldr	r3, [pc, #496]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a7b      	ldr	r2, [pc, #492]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008798:	6013      	str	r3, [r2, #0]
 800879a:	e01d      	b.n	80087d8 <HAL_RCC_OscConfig+0xd8>
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80087a4:	d10c      	bne.n	80087c0 <HAL_RCC_OscConfig+0xc0>
 80087a6:	4b76      	ldr	r3, [pc, #472]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	4a75      	ldr	r2, [pc, #468]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80087b0:	6013      	str	r3, [r2, #0]
 80087b2:	4b73      	ldr	r3, [pc, #460]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	4a72      	ldr	r2, [pc, #456]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80087bc:	6013      	str	r3, [r2, #0]
 80087be:	e00b      	b.n	80087d8 <HAL_RCC_OscConfig+0xd8>
 80087c0:	4b6f      	ldr	r3, [pc, #444]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	4a6e      	ldr	r2, [pc, #440]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80087ca:	6013      	str	r3, [r2, #0]
 80087cc:	4b6c      	ldr	r3, [pc, #432]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	4a6b      	ldr	r2, [pc, #428]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80087d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d013      	beq.n	8008808 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087e0:	f7fd f8f6 	bl	80059d0 <HAL_GetTick>
 80087e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087e6:	e008      	b.n	80087fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e8:	f7fd f8f2 	bl	80059d0 <HAL_GetTick>
 80087ec:	4602      	mov	r2, r0
 80087ee:	693b      	ldr	r3, [r7, #16]
 80087f0:	1ad3      	subs	r3, r2, r3
 80087f2:	2b64      	cmp	r3, #100	; 0x64
 80087f4:	d901      	bls.n	80087fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80087f6:	2303      	movs	r3, #3
 80087f8:	e21f      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80087fa:	4b61      	ldr	r3, [pc, #388]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008802:	2b00      	cmp	r3, #0
 8008804:	d0f0      	beq.n	80087e8 <HAL_RCC_OscConfig+0xe8>
 8008806:	e014      	b.n	8008832 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008808:	f7fd f8e2 	bl	80059d0 <HAL_GetTick>
 800880c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800880e:	e008      	b.n	8008822 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008810:	f7fd f8de 	bl	80059d0 <HAL_GetTick>
 8008814:	4602      	mov	r2, r0
 8008816:	693b      	ldr	r3, [r7, #16]
 8008818:	1ad3      	subs	r3, r2, r3
 800881a:	2b64      	cmp	r3, #100	; 0x64
 800881c:	d901      	bls.n	8008822 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800881e:	2303      	movs	r3, #3
 8008820:	e20b      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008822:	4b57      	ldr	r3, [pc, #348]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800882a:	2b00      	cmp	r3, #0
 800882c:	d1f0      	bne.n	8008810 <HAL_RCC_OscConfig+0x110>
 800882e:	e000      	b.n	8008832 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008830:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	f003 0302 	and.w	r3, r3, #2
 800883a:	2b00      	cmp	r3, #0
 800883c:	d069      	beq.n	8008912 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800883e:	4b50      	ldr	r3, [pc, #320]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008840:	689b      	ldr	r3, [r3, #8]
 8008842:	f003 030c 	and.w	r3, r3, #12
 8008846:	2b00      	cmp	r3, #0
 8008848:	d00b      	beq.n	8008862 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800884a:	4b4d      	ldr	r3, [pc, #308]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800884c:	689b      	ldr	r3, [r3, #8]
 800884e:	f003 030c 	and.w	r3, r3, #12
 8008852:	2b08      	cmp	r3, #8
 8008854:	d11c      	bne.n	8008890 <HAL_RCC_OscConfig+0x190>
 8008856:	4b4a      	ldr	r3, [pc, #296]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008858:	685b      	ldr	r3, [r3, #4]
 800885a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800885e:	2b00      	cmp	r3, #0
 8008860:	d116      	bne.n	8008890 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008862:	4b47      	ldr	r3, [pc, #284]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <HAL_RCC_OscConfig+0x17a>
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	68db      	ldr	r3, [r3, #12]
 8008872:	2b01      	cmp	r3, #1
 8008874:	d001      	beq.n	800887a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e1df      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800887a:	4b41      	ldr	r3, [pc, #260]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	691b      	ldr	r3, [r3, #16]
 8008886:	00db      	lsls	r3, r3, #3
 8008888:	493d      	ldr	r1, [pc, #244]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800888a:	4313      	orrs	r3, r2
 800888c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800888e:	e040      	b.n	8008912 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	68db      	ldr	r3, [r3, #12]
 8008894:	2b00      	cmp	r3, #0
 8008896:	d023      	beq.n	80088e0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008898:	4b39      	ldr	r3, [pc, #228]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a38      	ldr	r2, [pc, #224]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800889e:	f043 0301 	orr.w	r3, r3, #1
 80088a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088a4:	f7fd f894 	bl	80059d0 <HAL_GetTick>
 80088a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088aa:	e008      	b.n	80088be <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088ac:	f7fd f890 	bl	80059d0 <HAL_GetTick>
 80088b0:	4602      	mov	r2, r0
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	1ad3      	subs	r3, r2, r3
 80088b6:	2b02      	cmp	r3, #2
 80088b8:	d901      	bls.n	80088be <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80088ba:	2303      	movs	r3, #3
 80088bc:	e1bd      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80088be:	4b30      	ldr	r3, [pc, #192]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f003 0302 	and.w	r3, r3, #2
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d0f0      	beq.n	80088ac <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80088ca:	4b2d      	ldr	r3, [pc, #180]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	691b      	ldr	r3, [r3, #16]
 80088d6:	00db      	lsls	r3, r3, #3
 80088d8:	4929      	ldr	r1, [pc, #164]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80088da:	4313      	orrs	r3, r2
 80088dc:	600b      	str	r3, [r1, #0]
 80088de:	e018      	b.n	8008912 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088e0:	4b27      	ldr	r3, [pc, #156]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	4a26      	ldr	r2, [pc, #152]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 80088e6:	f023 0301 	bic.w	r3, r3, #1
 80088ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ec:	f7fd f870 	bl	80059d0 <HAL_GetTick>
 80088f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80088f2:	e008      	b.n	8008906 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088f4:	f7fd f86c 	bl	80059d0 <HAL_GetTick>
 80088f8:	4602      	mov	r2, r0
 80088fa:	693b      	ldr	r3, [r7, #16]
 80088fc:	1ad3      	subs	r3, r2, r3
 80088fe:	2b02      	cmp	r3, #2
 8008900:	d901      	bls.n	8008906 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008902:	2303      	movs	r3, #3
 8008904:	e199      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008906:	4b1e      	ldr	r3, [pc, #120]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	f003 0302 	and.w	r3, r3, #2
 800890e:	2b00      	cmp	r3, #0
 8008910:	d1f0      	bne.n	80088f4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 0308 	and.w	r3, r3, #8
 800891a:	2b00      	cmp	r3, #0
 800891c:	d038      	beq.n	8008990 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	695b      	ldr	r3, [r3, #20]
 8008922:	2b00      	cmp	r3, #0
 8008924:	d019      	beq.n	800895a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008926:	4b16      	ldr	r3, [pc, #88]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800892a:	4a15      	ldr	r2, [pc, #84]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800892c:	f043 0301 	orr.w	r3, r3, #1
 8008930:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008932:	f7fd f84d 	bl	80059d0 <HAL_GetTick>
 8008936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008938:	e008      	b.n	800894c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800893a:	f7fd f849 	bl	80059d0 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	2b02      	cmp	r3, #2
 8008946:	d901      	bls.n	800894c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e176      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800894c:	4b0c      	ldr	r3, [pc, #48]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800894e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008950:	f003 0302 	and.w	r3, r3, #2
 8008954:	2b00      	cmp	r3, #0
 8008956:	d0f0      	beq.n	800893a <HAL_RCC_OscConfig+0x23a>
 8008958:	e01a      	b.n	8008990 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800895a:	4b09      	ldr	r3, [pc, #36]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 800895c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800895e:	4a08      	ldr	r2, [pc, #32]	; (8008980 <HAL_RCC_OscConfig+0x280>)
 8008960:	f023 0301 	bic.w	r3, r3, #1
 8008964:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008966:	f7fd f833 	bl	80059d0 <HAL_GetTick>
 800896a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800896c:	e00a      	b.n	8008984 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800896e:	f7fd f82f 	bl	80059d0 <HAL_GetTick>
 8008972:	4602      	mov	r2, r0
 8008974:	693b      	ldr	r3, [r7, #16]
 8008976:	1ad3      	subs	r3, r2, r3
 8008978:	2b02      	cmp	r3, #2
 800897a:	d903      	bls.n	8008984 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800897c:	2303      	movs	r3, #3
 800897e:	e15c      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
 8008980:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008984:	4b91      	ldr	r3, [pc, #580]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008988:	f003 0302 	and.w	r3, r3, #2
 800898c:	2b00      	cmp	r3, #0
 800898e:	d1ee      	bne.n	800896e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	f003 0304 	and.w	r3, r3, #4
 8008998:	2b00      	cmp	r3, #0
 800899a:	f000 80a4 	beq.w	8008ae6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800899e:	4b8b      	ldr	r3, [pc, #556]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 80089a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d10d      	bne.n	80089c6 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80089aa:	4b88      	ldr	r3, [pc, #544]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 80089ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ae:	4a87      	ldr	r2, [pc, #540]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 80089b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80089b4:	6413      	str	r3, [r2, #64]	; 0x40
 80089b6:	4b85      	ldr	r3, [pc, #532]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 80089b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80089be:	60bb      	str	r3, [r7, #8]
 80089c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80089c2:	2301      	movs	r3, #1
 80089c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c6:	4b82      	ldr	r3, [pc, #520]	; (8008bd0 <HAL_RCC_OscConfig+0x4d0>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d118      	bne.n	8008a04 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80089d2:	4b7f      	ldr	r3, [pc, #508]	; (8008bd0 <HAL_RCC_OscConfig+0x4d0>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	4a7e      	ldr	r2, [pc, #504]	; (8008bd0 <HAL_RCC_OscConfig+0x4d0>)
 80089d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089de:	f7fc fff7 	bl	80059d0 <HAL_GetTick>
 80089e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089e4:	e008      	b.n	80089f8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089e6:	f7fc fff3 	bl	80059d0 <HAL_GetTick>
 80089ea:	4602      	mov	r2, r0
 80089ec:	693b      	ldr	r3, [r7, #16]
 80089ee:	1ad3      	subs	r3, r2, r3
 80089f0:	2b64      	cmp	r3, #100	; 0x64
 80089f2:	d901      	bls.n	80089f8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80089f4:	2303      	movs	r3, #3
 80089f6:	e120      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089f8:	4b75      	ldr	r3, [pc, #468]	; (8008bd0 <HAL_RCC_OscConfig+0x4d0>)
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d0f0      	beq.n	80089e6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	689b      	ldr	r3, [r3, #8]
 8008a08:	2b01      	cmp	r3, #1
 8008a0a:	d106      	bne.n	8008a1a <HAL_RCC_OscConfig+0x31a>
 8008a0c:	4b6f      	ldr	r3, [pc, #444]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a10:	4a6e      	ldr	r2, [pc, #440]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a12:	f043 0301 	orr.w	r3, r3, #1
 8008a16:	6713      	str	r3, [r2, #112]	; 0x70
 8008a18:	e02d      	b.n	8008a76 <HAL_RCC_OscConfig+0x376>
 8008a1a:	687b      	ldr	r3, [r7, #4]
 8008a1c:	689b      	ldr	r3, [r3, #8]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d10c      	bne.n	8008a3c <HAL_RCC_OscConfig+0x33c>
 8008a22:	4b6a      	ldr	r3, [pc, #424]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a26:	4a69      	ldr	r2, [pc, #420]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a28:	f023 0301 	bic.w	r3, r3, #1
 8008a2c:	6713      	str	r3, [r2, #112]	; 0x70
 8008a2e:	4b67      	ldr	r3, [pc, #412]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a32:	4a66      	ldr	r2, [pc, #408]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a34:	f023 0304 	bic.w	r3, r3, #4
 8008a38:	6713      	str	r3, [r2, #112]	; 0x70
 8008a3a:	e01c      	b.n	8008a76 <HAL_RCC_OscConfig+0x376>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	2b05      	cmp	r3, #5
 8008a42:	d10c      	bne.n	8008a5e <HAL_RCC_OscConfig+0x35e>
 8008a44:	4b61      	ldr	r3, [pc, #388]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a48:	4a60      	ldr	r2, [pc, #384]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a4a:	f043 0304 	orr.w	r3, r3, #4
 8008a4e:	6713      	str	r3, [r2, #112]	; 0x70
 8008a50:	4b5e      	ldr	r3, [pc, #376]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a54:	4a5d      	ldr	r2, [pc, #372]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008a5c:	e00b      	b.n	8008a76 <HAL_RCC_OscConfig+0x376>
 8008a5e:	4b5b      	ldr	r3, [pc, #364]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a62:	4a5a      	ldr	r2, [pc, #360]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a64:	f023 0301 	bic.w	r3, r3, #1
 8008a68:	6713      	str	r3, [r2, #112]	; 0x70
 8008a6a:	4b58      	ldr	r3, [pc, #352]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008a6e:	4a57      	ldr	r2, [pc, #348]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a70:	f023 0304 	bic.w	r3, r3, #4
 8008a74:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	689b      	ldr	r3, [r3, #8]
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d015      	beq.n	8008aaa <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a7e:	f7fc ffa7 	bl	80059d0 <HAL_GetTick>
 8008a82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a84:	e00a      	b.n	8008a9c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a86:	f7fc ffa3 	bl	80059d0 <HAL_GetTick>
 8008a8a:	4602      	mov	r2, r0
 8008a8c:	693b      	ldr	r3, [r7, #16]
 8008a8e:	1ad3      	subs	r3, r2, r3
 8008a90:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a94:	4293      	cmp	r3, r2
 8008a96:	d901      	bls.n	8008a9c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8008a98:	2303      	movs	r3, #3
 8008a9a:	e0ce      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008a9c:	4b4b      	ldr	r3, [pc, #300]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008a9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d0ee      	beq.n	8008a86 <HAL_RCC_OscConfig+0x386>
 8008aa8:	e014      	b.n	8008ad4 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008aaa:	f7fc ff91 	bl	80059d0 <HAL_GetTick>
 8008aae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ab0:	e00a      	b.n	8008ac8 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008ab2:	f7fc ff8d 	bl	80059d0 <HAL_GetTick>
 8008ab6:	4602      	mov	r2, r0
 8008ab8:	693b      	ldr	r3, [r7, #16]
 8008aba:	1ad3      	subs	r3, r2, r3
 8008abc:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d901      	bls.n	8008ac8 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8008ac4:	2303      	movs	r3, #3
 8008ac6:	e0b8      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008ac8:	4b40      	ldr	r3, [pc, #256]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008aca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008acc:	f003 0302 	and.w	r3, r3, #2
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d1ee      	bne.n	8008ab2 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8008ad4:	7dfb      	ldrb	r3, [r7, #23]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d105      	bne.n	8008ae6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008ada:	4b3c      	ldr	r3, [pc, #240]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ade:	4a3b      	ldr	r2, [pc, #236]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008ae0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ae4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	f000 80a4 	beq.w	8008c38 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8008af0:	4b36      	ldr	r3, [pc, #216]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008af2:	689b      	ldr	r3, [r3, #8]
 8008af4:	f003 030c 	and.w	r3, r3, #12
 8008af8:	2b08      	cmp	r3, #8
 8008afa:	d06b      	beq.n	8008bd4 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	699b      	ldr	r3, [r3, #24]
 8008b00:	2b02      	cmp	r3, #2
 8008b02:	d149      	bne.n	8008b98 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b04:	4b31      	ldr	r3, [pc, #196]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	4a30      	ldr	r2, [pc, #192]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b10:	f7fc ff5e 	bl	80059d0 <HAL_GetTick>
 8008b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b16:	e008      	b.n	8008b2a <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b18:	f7fc ff5a 	bl	80059d0 <HAL_GetTick>
 8008b1c:	4602      	mov	r2, r0
 8008b1e:	693b      	ldr	r3, [r7, #16]
 8008b20:	1ad3      	subs	r3, r2, r3
 8008b22:	2b02      	cmp	r3, #2
 8008b24:	d901      	bls.n	8008b2a <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008b26:	2303      	movs	r3, #3
 8008b28:	e087      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008b2a:	4b28      	ldr	r3, [pc, #160]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b2c:	681b      	ldr	r3, [r3, #0]
 8008b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d1f0      	bne.n	8008b18 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b36:	687b      	ldr	r3, [r7, #4]
 8008b38:	69da      	ldr	r2, [r3, #28]
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	6a1b      	ldr	r3, [r3, #32]
 8008b3e:	431a      	orrs	r2, r3
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b44:	019b      	lsls	r3, r3, #6
 8008b46:	431a      	orrs	r2, r3
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b4c:	085b      	lsrs	r3, r3, #1
 8008b4e:	3b01      	subs	r3, #1
 8008b50:	041b      	lsls	r3, r3, #16
 8008b52:	431a      	orrs	r2, r3
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b58:	061b      	lsls	r3, r3, #24
 8008b5a:	4313      	orrs	r3, r2
 8008b5c:	4a1b      	ldr	r2, [pc, #108]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b5e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8008b62:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008b64:	4b19      	ldr	r3, [pc, #100]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	4a18      	ldr	r2, [pc, #96]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008b6e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b70:	f7fc ff2e 	bl	80059d0 <HAL_GetTick>
 8008b74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b76:	e008      	b.n	8008b8a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b78:	f7fc ff2a 	bl	80059d0 <HAL_GetTick>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	693b      	ldr	r3, [r7, #16]
 8008b80:	1ad3      	subs	r3, r2, r3
 8008b82:	2b02      	cmp	r3, #2
 8008b84:	d901      	bls.n	8008b8a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008b86:	2303      	movs	r3, #3
 8008b88:	e057      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b8a:	4b10      	ldr	r3, [pc, #64]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b92:	2b00      	cmp	r3, #0
 8008b94:	d0f0      	beq.n	8008b78 <HAL_RCC_OscConfig+0x478>
 8008b96:	e04f      	b.n	8008c38 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008b98:	4b0c      	ldr	r3, [pc, #48]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b9a:	681b      	ldr	r3, [r3, #0]
 8008b9c:	4a0b      	ldr	r2, [pc, #44]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008b9e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ba2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba4:	f7fc ff14 	bl	80059d0 <HAL_GetTick>
 8008ba8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008baa:	e008      	b.n	8008bbe <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bac:	f7fc ff10 	bl	80059d0 <HAL_GetTick>
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	693b      	ldr	r3, [r7, #16]
 8008bb4:	1ad3      	subs	r3, r2, r3
 8008bb6:	2b02      	cmp	r3, #2
 8008bb8:	d901      	bls.n	8008bbe <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8008bba:	2303      	movs	r3, #3
 8008bbc:	e03d      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008bbe:	4b03      	ldr	r3, [pc, #12]	; (8008bcc <HAL_RCC_OscConfig+0x4cc>)
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1f0      	bne.n	8008bac <HAL_RCC_OscConfig+0x4ac>
 8008bca:	e035      	b.n	8008c38 <HAL_RCC_OscConfig+0x538>
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8008bd4:	4b1b      	ldr	r3, [pc, #108]	; (8008c44 <HAL_RCC_OscConfig+0x544>)
 8008bd6:	685b      	ldr	r3, [r3, #4]
 8008bd8:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	699b      	ldr	r3, [r3, #24]
 8008bde:	2b01      	cmp	r3, #1
 8008be0:	d028      	beq.n	8008c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008be8:	687b      	ldr	r3, [r7, #4]
 8008bea:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008bec:	429a      	cmp	r2, r3
 8008bee:	d121      	bne.n	8008c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008bfa:	429a      	cmp	r2, r3
 8008bfc:	d11a      	bne.n	8008c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008bfe:	68fa      	ldr	r2, [r7, #12]
 8008c00:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008c04:	4013      	ands	r3, r2
 8008c06:	687a      	ldr	r2, [r7, #4]
 8008c08:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008c0a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008c0c:	4293      	cmp	r3, r2
 8008c0e:	d111      	bne.n	8008c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c1a:	085b      	lsrs	r3, r3, #1
 8008c1c:	3b01      	subs	r3, #1
 8008c1e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008c20:	429a      	cmp	r2, r3
 8008c22:	d107      	bne.n	8008c34 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008c2e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d001      	beq.n	8008c38 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e000      	b.n	8008c3a <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3718      	adds	r7, #24
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	bd80      	pop	{r7, pc}
 8008c42:	bf00      	nop
 8008c44:	40023800 	.word	0x40023800

08008c48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008c48:	b580      	push	{r7, lr}
 8008c4a:	b084      	sub	sp, #16
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
 8008c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d101      	bne.n	8008c60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008c5c:	2301      	movs	r3, #1
 8008c5e:	e0d0      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008c60:	4b6a      	ldr	r3, [pc, #424]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f003 030f 	and.w	r3, r3, #15
 8008c68:	683a      	ldr	r2, [r7, #0]
 8008c6a:	429a      	cmp	r2, r3
 8008c6c:	d910      	bls.n	8008c90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008c6e:	4b67      	ldr	r3, [pc, #412]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	f023 020f 	bic.w	r2, r3, #15
 8008c76:	4965      	ldr	r1, [pc, #404]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008c78:	683b      	ldr	r3, [r7, #0]
 8008c7a:	4313      	orrs	r3, r2
 8008c7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008c7e:	4b63      	ldr	r3, [pc, #396]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f003 030f 	and.w	r3, r3, #15
 8008c86:	683a      	ldr	r2, [r7, #0]
 8008c88:	429a      	cmp	r2, r3
 8008c8a:	d001      	beq.n	8008c90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008c8c:	2301      	movs	r3, #1
 8008c8e:	e0b8      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f003 0302 	and.w	r3, r3, #2
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	d020      	beq.n	8008cde <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	f003 0304 	and.w	r3, r3, #4
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d005      	beq.n	8008cb4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ca8:	4b59      	ldr	r3, [pc, #356]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008caa:	689b      	ldr	r3, [r3, #8]
 8008cac:	4a58      	ldr	r2, [pc, #352]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008cb2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f003 0308 	and.w	r3, r3, #8
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008cc0:	4b53      	ldr	r3, [pc, #332]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc2:	689b      	ldr	r3, [r3, #8]
 8008cc4:	4a52      	ldr	r2, [pc, #328]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cc6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008cca:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ccc:	4b50      	ldr	r3, [pc, #320]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cce:	689b      	ldr	r3, [r3, #8]
 8008cd0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	689b      	ldr	r3, [r3, #8]
 8008cd8:	494d      	ldr	r1, [pc, #308]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cda:	4313      	orrs	r3, r2
 8008cdc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f003 0301 	and.w	r3, r3, #1
 8008ce6:	2b00      	cmp	r3, #0
 8008ce8:	d040      	beq.n	8008d6c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	685b      	ldr	r3, [r3, #4]
 8008cee:	2b01      	cmp	r3, #1
 8008cf0:	d107      	bne.n	8008d02 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008cf2:	4b47      	ldr	r3, [pc, #284]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d115      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e07f      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	685b      	ldr	r3, [r3, #4]
 8008d06:	2b02      	cmp	r3, #2
 8008d08:	d107      	bne.n	8008d1a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d0a:	4b41      	ldr	r3, [pc, #260]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008d0c:	681b      	ldr	r3, [r3, #0]
 8008d0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d109      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d16:	2301      	movs	r3, #1
 8008d18:	e073      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008d1a:	4b3d      	ldr	r3, [pc, #244]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008d1c:	681b      	ldr	r3, [r3, #0]
 8008d1e:	f003 0302 	and.w	r3, r3, #2
 8008d22:	2b00      	cmp	r3, #0
 8008d24:	d101      	bne.n	8008d2a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008d26:	2301      	movs	r3, #1
 8008d28:	e06b      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008d2a:	4b39      	ldr	r3, [pc, #228]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f023 0203 	bic.w	r2, r3, #3
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	685b      	ldr	r3, [r3, #4]
 8008d36:	4936      	ldr	r1, [pc, #216]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008d38:	4313      	orrs	r3, r2
 8008d3a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d3c:	f7fc fe48 	bl	80059d0 <HAL_GetTick>
 8008d40:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d42:	e00a      	b.n	8008d5a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008d44:	f7fc fe44 	bl	80059d0 <HAL_GetTick>
 8008d48:	4602      	mov	r2, r0
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	1ad3      	subs	r3, r2, r3
 8008d4e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d52:	4293      	cmp	r3, r2
 8008d54:	d901      	bls.n	8008d5a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008d56:	2303      	movs	r3, #3
 8008d58:	e053      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008d5a:	4b2d      	ldr	r3, [pc, #180]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008d5c:	689b      	ldr	r3, [r3, #8]
 8008d5e:	f003 020c 	and.w	r2, r3, #12
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	685b      	ldr	r3, [r3, #4]
 8008d66:	009b      	lsls	r3, r3, #2
 8008d68:	429a      	cmp	r2, r3
 8008d6a:	d1eb      	bne.n	8008d44 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008d6c:	4b27      	ldr	r3, [pc, #156]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	f003 030f 	and.w	r3, r3, #15
 8008d74:	683a      	ldr	r2, [r7, #0]
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d210      	bcs.n	8008d9c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d7a:	4b24      	ldr	r3, [pc, #144]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	f023 020f 	bic.w	r2, r3, #15
 8008d82:	4922      	ldr	r1, [pc, #136]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008d84:	683b      	ldr	r3, [r7, #0]
 8008d86:	4313      	orrs	r3, r2
 8008d88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d8a:	4b20      	ldr	r3, [pc, #128]	; (8008e0c <HAL_RCC_ClockConfig+0x1c4>)
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	f003 030f 	and.w	r3, r3, #15
 8008d92:	683a      	ldr	r2, [r7, #0]
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d001      	beq.n	8008d9c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008d98:	2301      	movs	r3, #1
 8008d9a:	e032      	b.n	8008e02 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	f003 0304 	and.w	r3, r3, #4
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d008      	beq.n	8008dba <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008da8:	4b19      	ldr	r3, [pc, #100]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008daa:	689b      	ldr	r3, [r3, #8]
 8008dac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	68db      	ldr	r3, [r3, #12]
 8008db4:	4916      	ldr	r1, [pc, #88]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008db6:	4313      	orrs	r3, r2
 8008db8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	f003 0308 	and.w	r3, r3, #8
 8008dc2:	2b00      	cmp	r3, #0
 8008dc4:	d009      	beq.n	8008dda <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008dc6:	4b12      	ldr	r3, [pc, #72]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	691b      	ldr	r3, [r3, #16]
 8008dd2:	00db      	lsls	r3, r3, #3
 8008dd4:	490e      	ldr	r1, [pc, #56]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008dd6:	4313      	orrs	r3, r2
 8008dd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008dda:	f000 f821 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 8008dde:	4602      	mov	r2, r0
 8008de0:	4b0b      	ldr	r3, [pc, #44]	; (8008e10 <HAL_RCC_ClockConfig+0x1c8>)
 8008de2:	689b      	ldr	r3, [r3, #8]
 8008de4:	091b      	lsrs	r3, r3, #4
 8008de6:	f003 030f 	and.w	r3, r3, #15
 8008dea:	490a      	ldr	r1, [pc, #40]	; (8008e14 <HAL_RCC_ClockConfig+0x1cc>)
 8008dec:	5ccb      	ldrb	r3, [r1, r3]
 8008dee:	fa22 f303 	lsr.w	r3, r2, r3
 8008df2:	4a09      	ldr	r2, [pc, #36]	; (8008e18 <HAL_RCC_ClockConfig+0x1d0>)
 8008df4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008df6:	4b09      	ldr	r3, [pc, #36]	; (8008e1c <HAL_RCC_ClockConfig+0x1d4>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	f7fc fcb2 	bl	8005764 <HAL_InitTick>

  return HAL_OK;
 8008e00:	2300      	movs	r3, #0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3710      	adds	r7, #16
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	40023c00 	.word	0x40023c00
 8008e10:	40023800 	.word	0x40023800
 8008e14:	080125ec 	.word	0x080125ec
 8008e18:	20000054 	.word	0x20000054
 8008e1c:	20000058 	.word	0x20000058

08008e20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008e20:	b5b0      	push	{r4, r5, r7, lr}
 8008e22:	b084      	sub	sp, #16
 8008e24:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008e26:	2100      	movs	r1, #0
 8008e28:	6079      	str	r1, [r7, #4]
 8008e2a:	2100      	movs	r1, #0
 8008e2c:	60f9      	str	r1, [r7, #12]
 8008e2e:	2100      	movs	r1, #0
 8008e30:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8008e32:	2100      	movs	r1, #0
 8008e34:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008e36:	4952      	ldr	r1, [pc, #328]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e38:	6889      	ldr	r1, [r1, #8]
 8008e3a:	f001 010c 	and.w	r1, r1, #12
 8008e3e:	2908      	cmp	r1, #8
 8008e40:	d00d      	beq.n	8008e5e <HAL_RCC_GetSysClockFreq+0x3e>
 8008e42:	2908      	cmp	r1, #8
 8008e44:	f200 8094 	bhi.w	8008f70 <HAL_RCC_GetSysClockFreq+0x150>
 8008e48:	2900      	cmp	r1, #0
 8008e4a:	d002      	beq.n	8008e52 <HAL_RCC_GetSysClockFreq+0x32>
 8008e4c:	2904      	cmp	r1, #4
 8008e4e:	d003      	beq.n	8008e58 <HAL_RCC_GetSysClockFreq+0x38>
 8008e50:	e08e      	b.n	8008f70 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008e52:	4b4c      	ldr	r3, [pc, #304]	; (8008f84 <HAL_RCC_GetSysClockFreq+0x164>)
 8008e54:	60bb      	str	r3, [r7, #8]
      break;
 8008e56:	e08e      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008e58:	4b4b      	ldr	r3, [pc, #300]	; (8008f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8008e5a:	60bb      	str	r3, [r7, #8]
      break;
 8008e5c:	e08b      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008e5e:	4948      	ldr	r1, [pc, #288]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e60:	6849      	ldr	r1, [r1, #4]
 8008e62:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8008e66:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008e68:	4945      	ldr	r1, [pc, #276]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e6a:	6849      	ldr	r1, [r1, #4]
 8008e6c:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8008e70:	2900      	cmp	r1, #0
 8008e72:	d024      	beq.n	8008ebe <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e74:	4942      	ldr	r1, [pc, #264]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008e76:	6849      	ldr	r1, [r1, #4]
 8008e78:	0989      	lsrs	r1, r1, #6
 8008e7a:	4608      	mov	r0, r1
 8008e7c:	f04f 0100 	mov.w	r1, #0
 8008e80:	f240 14ff 	movw	r4, #511	; 0x1ff
 8008e84:	f04f 0500 	mov.w	r5, #0
 8008e88:	ea00 0204 	and.w	r2, r0, r4
 8008e8c:	ea01 0305 	and.w	r3, r1, r5
 8008e90:	493d      	ldr	r1, [pc, #244]	; (8008f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8008e92:	fb01 f003 	mul.w	r0, r1, r3
 8008e96:	2100      	movs	r1, #0
 8008e98:	fb01 f102 	mul.w	r1, r1, r2
 8008e9c:	1844      	adds	r4, r0, r1
 8008e9e:	493a      	ldr	r1, [pc, #232]	; (8008f88 <HAL_RCC_GetSysClockFreq+0x168>)
 8008ea0:	fba2 0101 	umull	r0, r1, r2, r1
 8008ea4:	1863      	adds	r3, r4, r1
 8008ea6:	4619      	mov	r1, r3
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	461a      	mov	r2, r3
 8008eac:	f04f 0300 	mov.w	r3, #0
 8008eb0:	f7f7 fecc 	bl	8000c4c <__aeabi_uldivmod>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	460b      	mov	r3, r1
 8008eb8:	4613      	mov	r3, r2
 8008eba:	60fb      	str	r3, [r7, #12]
 8008ebc:	e04a      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ebe:	4b30      	ldr	r3, [pc, #192]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008ec0:	685b      	ldr	r3, [r3, #4]
 8008ec2:	099b      	lsrs	r3, r3, #6
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	f04f 0300 	mov.w	r3, #0
 8008eca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008ece:	f04f 0100 	mov.w	r1, #0
 8008ed2:	ea02 0400 	and.w	r4, r2, r0
 8008ed6:	ea03 0501 	and.w	r5, r3, r1
 8008eda:	4620      	mov	r0, r4
 8008edc:	4629      	mov	r1, r5
 8008ede:	f04f 0200 	mov.w	r2, #0
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	014b      	lsls	r3, r1, #5
 8008ee8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008eec:	0142      	lsls	r2, r0, #5
 8008eee:	4610      	mov	r0, r2
 8008ef0:	4619      	mov	r1, r3
 8008ef2:	1b00      	subs	r0, r0, r4
 8008ef4:	eb61 0105 	sbc.w	r1, r1, r5
 8008ef8:	f04f 0200 	mov.w	r2, #0
 8008efc:	f04f 0300 	mov.w	r3, #0
 8008f00:	018b      	lsls	r3, r1, #6
 8008f02:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008f06:	0182      	lsls	r2, r0, #6
 8008f08:	1a12      	subs	r2, r2, r0
 8008f0a:	eb63 0301 	sbc.w	r3, r3, r1
 8008f0e:	f04f 0000 	mov.w	r0, #0
 8008f12:	f04f 0100 	mov.w	r1, #0
 8008f16:	00d9      	lsls	r1, r3, #3
 8008f18:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f1c:	00d0      	lsls	r0, r2, #3
 8008f1e:	4602      	mov	r2, r0
 8008f20:	460b      	mov	r3, r1
 8008f22:	1912      	adds	r2, r2, r4
 8008f24:	eb45 0303 	adc.w	r3, r5, r3
 8008f28:	f04f 0000 	mov.w	r0, #0
 8008f2c:	f04f 0100 	mov.w	r1, #0
 8008f30:	0299      	lsls	r1, r3, #10
 8008f32:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008f36:	0290      	lsls	r0, r2, #10
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	4619      	mov	r1, r3
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	461a      	mov	r2, r3
 8008f44:	f04f 0300 	mov.w	r3, #0
 8008f48:	f7f7 fe80 	bl	8000c4c <__aeabi_uldivmod>
 8008f4c:	4602      	mov	r2, r0
 8008f4e:	460b      	mov	r3, r1
 8008f50:	4613      	mov	r3, r2
 8008f52:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008f54:	4b0a      	ldr	r3, [pc, #40]	; (8008f80 <HAL_RCC_GetSysClockFreq+0x160>)
 8008f56:	685b      	ldr	r3, [r3, #4]
 8008f58:	0c1b      	lsrs	r3, r3, #16
 8008f5a:	f003 0303 	and.w	r3, r3, #3
 8008f5e:	3301      	adds	r3, #1
 8008f60:	005b      	lsls	r3, r3, #1
 8008f62:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f6c:	60bb      	str	r3, [r7, #8]
      break;
 8008f6e:	e002      	b.n	8008f76 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008f70:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <HAL_RCC_GetSysClockFreq+0x164>)
 8008f72:	60bb      	str	r3, [r7, #8]
      break;
 8008f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008f76:	68bb      	ldr	r3, [r7, #8]
}
 8008f78:	4618      	mov	r0, r3
 8008f7a:	3710      	adds	r7, #16
 8008f7c:	46bd      	mov	sp, r7
 8008f7e:	bdb0      	pop	{r4, r5, r7, pc}
 8008f80:	40023800 	.word	0x40023800
 8008f84:	00f42400 	.word	0x00f42400
 8008f88:	017d7840 	.word	0x017d7840

08008f8c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008f8c:	b480      	push	{r7}
 8008f8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008f90:	4b03      	ldr	r3, [pc, #12]	; (8008fa0 <HAL_RCC_GetHCLKFreq+0x14>)
 8008f92:	681b      	ldr	r3, [r3, #0]
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr
 8008f9e:	bf00      	nop
 8008fa0:	20000054 	.word	0x20000054

08008fa4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008fa8:	f7ff fff0 	bl	8008f8c <HAL_RCC_GetHCLKFreq>
 8008fac:	4602      	mov	r2, r0
 8008fae:	4b05      	ldr	r3, [pc, #20]	; (8008fc4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008fb0:	689b      	ldr	r3, [r3, #8]
 8008fb2:	0a9b      	lsrs	r3, r3, #10
 8008fb4:	f003 0307 	and.w	r3, r3, #7
 8008fb8:	4903      	ldr	r1, [pc, #12]	; (8008fc8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fba:	5ccb      	ldrb	r3, [r1, r3]
 8008fbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	bd80      	pop	{r7, pc}
 8008fc4:	40023800 	.word	0x40023800
 8008fc8:	080125fc 	.word	0x080125fc

08008fcc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008fcc:	b580      	push	{r7, lr}
 8008fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008fd0:	f7ff ffdc 	bl	8008f8c <HAL_RCC_GetHCLKFreq>
 8008fd4:	4602      	mov	r2, r0
 8008fd6:	4b05      	ldr	r3, [pc, #20]	; (8008fec <HAL_RCC_GetPCLK2Freq+0x20>)
 8008fd8:	689b      	ldr	r3, [r3, #8]
 8008fda:	0b5b      	lsrs	r3, r3, #13
 8008fdc:	f003 0307 	and.w	r3, r3, #7
 8008fe0:	4903      	ldr	r1, [pc, #12]	; (8008ff0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008fe2:	5ccb      	ldrb	r3, [r1, r3]
 8008fe4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008fe8:	4618      	mov	r0, r3
 8008fea:	bd80      	pop	{r7, pc}
 8008fec:	40023800 	.word	0x40023800
 8008ff0:	080125fc 	.word	0x080125fc

08008ff4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
 8008ffc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008ffe:	687b      	ldr	r3, [r7, #4]
 8009000:	220f      	movs	r2, #15
 8009002:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8009004:	4b12      	ldr	r3, [pc, #72]	; (8009050 <HAL_RCC_GetClockConfig+0x5c>)
 8009006:	689b      	ldr	r3, [r3, #8]
 8009008:	f003 0203 	and.w	r2, r3, #3
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8009010:	4b0f      	ldr	r3, [pc, #60]	; (8009050 <HAL_RCC_GetClockConfig+0x5c>)
 8009012:	689b      	ldr	r3, [r3, #8]
 8009014:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800901c:	4b0c      	ldr	r3, [pc, #48]	; (8009050 <HAL_RCC_GetClockConfig+0x5c>)
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8009028:	4b09      	ldr	r3, [pc, #36]	; (8009050 <HAL_RCC_GetClockConfig+0x5c>)
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	08db      	lsrs	r3, r3, #3
 800902e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8009036:	4b07      	ldr	r3, [pc, #28]	; (8009054 <HAL_RCC_GetClockConfig+0x60>)
 8009038:	681b      	ldr	r3, [r3, #0]
 800903a:	f003 020f 	and.w	r2, r3, #15
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	601a      	str	r2, [r3, #0]
}
 8009042:	bf00      	nop
 8009044:	370c      	adds	r7, #12
 8009046:	46bd      	mov	sp, r7
 8009048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904c:	4770      	bx	lr
 800904e:	bf00      	nop
 8009050:	40023800 	.word	0x40023800
 8009054:	40023c00 	.word	0x40023c00

08009058 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b088      	sub	sp, #32
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009060:	2300      	movs	r3, #0
 8009062:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8009064:	2300      	movs	r3, #0
 8009066:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009068:	2300      	movs	r3, #0
 800906a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800906c:	2300      	movs	r3, #0
 800906e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009070:	2300      	movs	r3, #0
 8009072:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	f003 0301 	and.w	r3, r3, #1
 800907c:	2b00      	cmp	r3, #0
 800907e:	d012      	beq.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009080:	4b69      	ldr	r3, [pc, #420]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009082:	689b      	ldr	r3, [r3, #8]
 8009084:	4a68      	ldr	r2, [pc, #416]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009086:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800908a:	6093      	str	r3, [r2, #8]
 800908c:	4b66      	ldr	r3, [pc, #408]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009094:	4964      	ldr	r1, [pc, #400]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009096:	4313      	orrs	r3, r2
 8009098:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d101      	bne.n	80090a6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80090a2:	2301      	movs	r3, #1
 80090a4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d017      	beq.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80090b2:	4b5d      	ldr	r3, [pc, #372]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090c0:	4959      	ldr	r1, [pc, #356]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090c2:	4313      	orrs	r3, r2
 80090c4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80090d0:	d101      	bne.n	80090d6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80090d2:	2301      	movs	r3, #1
 80090d4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d101      	bne.n	80090e2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80090de:	2301      	movs	r3, #1
 80090e0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d017      	beq.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80090ee:	4b4e      	ldr	r3, [pc, #312]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090f4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090fc:	494a      	ldr	r1, [pc, #296]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090fe:	4313      	orrs	r3, r2
 8009100:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910c:	d101      	bne.n	8009112 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800910e:	2301      	movs	r3, #1
 8009110:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009116:	2b00      	cmp	r3, #0
 8009118:	d101      	bne.n	800911e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800911a:	2301      	movs	r3, #1
 800911c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d001      	beq.n	800912e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800912a:	2301      	movs	r3, #1
 800912c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	681b      	ldr	r3, [r3, #0]
 8009132:	f003 0320 	and.w	r3, r3, #32
 8009136:	2b00      	cmp	r3, #0
 8009138:	f000 808b 	beq.w	8009252 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800913c:	4b3a      	ldr	r3, [pc, #232]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800913e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009140:	4a39      	ldr	r2, [pc, #228]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009146:	6413      	str	r3, [r2, #64]	; 0x40
 8009148:	4b37      	ldr	r3, [pc, #220]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800914a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800914c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009150:	60bb      	str	r3, [r7, #8]
 8009152:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009154:	4b35      	ldr	r3, [pc, #212]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	4a34      	ldr	r2, [pc, #208]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800915a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800915e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009160:	f7fc fc36 	bl	80059d0 <HAL_GetTick>
 8009164:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009166:	e008      	b.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009168:	f7fc fc32 	bl	80059d0 <HAL_GetTick>
 800916c:	4602      	mov	r2, r0
 800916e:	697b      	ldr	r3, [r7, #20]
 8009170:	1ad3      	subs	r3, r2, r3
 8009172:	2b64      	cmp	r3, #100	; 0x64
 8009174:	d901      	bls.n	800917a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009176:	2303      	movs	r3, #3
 8009178:	e355      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800917a:	4b2c      	ldr	r3, [pc, #176]	; (800922c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009182:	2b00      	cmp	r3, #0
 8009184:	d0f0      	beq.n	8009168 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009186:	4b28      	ldr	r3, [pc, #160]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009188:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800918e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009190:	693b      	ldr	r3, [r7, #16]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d035      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800919a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800919e:	693a      	ldr	r2, [r7, #16]
 80091a0:	429a      	cmp	r2, r3
 80091a2:	d02e      	beq.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80091a4:	4b20      	ldr	r3, [pc, #128]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091ac:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80091ae:	4b1e      	ldr	r3, [pc, #120]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091b2:	4a1d      	ldr	r2, [pc, #116]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091b8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80091ba:	4b1b      	ldr	r3, [pc, #108]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091be:	4a1a      	ldr	r2, [pc, #104]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80091c4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80091c6:	4a18      	ldr	r2, [pc, #96]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091c8:	693b      	ldr	r3, [r7, #16]
 80091ca:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80091cc:	4b16      	ldr	r3, [pc, #88]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091d0:	f003 0301 	and.w	r3, r3, #1
 80091d4:	2b01      	cmp	r3, #1
 80091d6:	d114      	bne.n	8009202 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091d8:	f7fc fbfa 	bl	80059d0 <HAL_GetTick>
 80091dc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091de:	e00a      	b.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80091e0:	f7fc fbf6 	bl	80059d0 <HAL_GetTick>
 80091e4:	4602      	mov	r2, r0
 80091e6:	697b      	ldr	r3, [r7, #20]
 80091e8:	1ad3      	subs	r3, r2, r3
 80091ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80091ee:	4293      	cmp	r3, r2
 80091f0:	d901      	bls.n	80091f6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80091f2:	2303      	movs	r3, #3
 80091f4:	e317      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80091f6:	4b0c      	ldr	r3, [pc, #48]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80091f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fa:	f003 0302 	and.w	r3, r3, #2
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0ee      	beq.n	80091e0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009206:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800920a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800920e:	d111      	bne.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8009210:	4b05      	ldr	r3, [pc, #20]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009212:	689b      	ldr	r3, [r3, #8]
 8009214:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800921c:	4b04      	ldr	r3, [pc, #16]	; (8009230 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800921e:	400b      	ands	r3, r1
 8009220:	4901      	ldr	r1, [pc, #4]	; (8009228 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009222:	4313      	orrs	r3, r2
 8009224:	608b      	str	r3, [r1, #8]
 8009226:	e00b      	b.n	8009240 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8009228:	40023800 	.word	0x40023800
 800922c:	40007000 	.word	0x40007000
 8009230:	0ffffcff 	.word	0x0ffffcff
 8009234:	4bb0      	ldr	r3, [pc, #704]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009236:	689b      	ldr	r3, [r3, #8]
 8009238:	4aaf      	ldr	r2, [pc, #700]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800923a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800923e:	6093      	str	r3, [r2, #8]
 8009240:	4bad      	ldr	r3, [pc, #692]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009242:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800924c:	49aa      	ldr	r1, [pc, #680]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800924e:	4313      	orrs	r3, r2
 8009250:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	f003 0310 	and.w	r3, r3, #16
 800925a:	2b00      	cmp	r3, #0
 800925c:	d010      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800925e:	4ba6      	ldr	r3, [pc, #664]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009260:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009264:	4aa4      	ldr	r2, [pc, #656]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009266:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800926a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800926e:	4ba2      	ldr	r3, [pc, #648]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009270:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009278:	499f      	ldr	r1, [pc, #636]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800927a:	4313      	orrs	r3, r2
 800927c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800928c:	4b9a      	ldr	r3, [pc, #616]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800928e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009292:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800929a:	4997      	ldr	r1, [pc, #604]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80092ae:	4b92      	ldr	r3, [pc, #584]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092bc:	498e      	ldr	r1, [pc, #568]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80092d0:	4b89      	ldr	r3, [pc, #548]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80092de:	4986      	ldr	r1, [pc, #536]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d00a      	beq.n	8009308 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80092f2:	4b81      	ldr	r3, [pc, #516]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009300:	497d      	ldr	r1, [pc, #500]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009310:	2b00      	cmp	r3, #0
 8009312:	d00a      	beq.n	800932a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8009314:	4b78      	ldr	r3, [pc, #480]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800931a:	f023 0203 	bic.w	r2, r3, #3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009322:	4975      	ldr	r1, [pc, #468]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009324:	4313      	orrs	r3, r2
 8009326:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009332:	2b00      	cmp	r3, #0
 8009334:	d00a      	beq.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009336:	4b70      	ldr	r3, [pc, #448]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009338:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800933c:	f023 020c 	bic.w	r2, r3, #12
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009344:	496c      	ldr	r1, [pc, #432]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009346:	4313      	orrs	r3, r2
 8009348:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009354:	2b00      	cmp	r3, #0
 8009356:	d00a      	beq.n	800936e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009358:	4b67      	ldr	r3, [pc, #412]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800935a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009366:	4964      	ldr	r1, [pc, #400]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009368:	4313      	orrs	r3, r2
 800936a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009376:	2b00      	cmp	r3, #0
 8009378:	d00a      	beq.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800937a:	4b5f      	ldr	r3, [pc, #380]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800937c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009380:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009388:	495b      	ldr	r1, [pc, #364]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800938a:	4313      	orrs	r3, r2
 800938c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	681b      	ldr	r3, [r3, #0]
 8009394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009398:	2b00      	cmp	r3, #0
 800939a:	d00a      	beq.n	80093b2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800939c:	4b56      	ldr	r3, [pc, #344]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800939e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093a2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80093aa:	4953      	ldr	r1, [pc, #332]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ac:	4313      	orrs	r3, r2
 80093ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	d00a      	beq.n	80093d4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80093be:	4b4e      	ldr	r3, [pc, #312]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80093cc:	494a      	ldr	r1, [pc, #296]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093ce:	4313      	orrs	r3, r2
 80093d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	681b      	ldr	r3, [r3, #0]
 80093d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d00a      	beq.n	80093f6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80093e0:	4b45      	ldr	r3, [pc, #276]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80093e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80093ee:	4942      	ldr	r1, [pc, #264]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80093f0:	4313      	orrs	r3, r2
 80093f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00a      	beq.n	8009418 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009402:	4b3d      	ldr	r3, [pc, #244]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009404:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009408:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009410:	4939      	ldr	r1, [pc, #228]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009412:	4313      	orrs	r3, r2
 8009414:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	681b      	ldr	r3, [r3, #0]
 800941c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009420:	2b00      	cmp	r3, #0
 8009422:	d00a      	beq.n	800943a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009424:	4b34      	ldr	r3, [pc, #208]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800942a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009432:	4931      	ldr	r1, [pc, #196]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009434:	4313      	orrs	r3, r2
 8009436:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009442:	2b00      	cmp	r3, #0
 8009444:	d011      	beq.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009446:	4b2c      	ldr	r3, [pc, #176]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009448:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800944c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009454:	4928      	ldr	r1, [pc, #160]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009456:	4313      	orrs	r3, r2
 8009458:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009460:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009464:	d101      	bne.n	800946a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009466:	2301      	movs	r3, #1
 8009468:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	f003 0308 	and.w	r3, r3, #8
 8009472:	2b00      	cmp	r3, #0
 8009474:	d001      	beq.n	800947a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009476:	2301      	movs	r3, #1
 8009478:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009482:	2b00      	cmp	r3, #0
 8009484:	d00a      	beq.n	800949c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009486:	4b1c      	ldr	r3, [pc, #112]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009488:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800948c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009494:	4918      	ldr	r1, [pc, #96]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8009496:	4313      	orrs	r3, r2
 8009498:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d00b      	beq.n	80094c0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80094a8:	4b13      	ldr	r3, [pc, #76]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80094ae:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80094b8:	490f      	ldr	r1, [pc, #60]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094ba:	4313      	orrs	r3, r2
 80094bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80094c0:	69fb      	ldr	r3, [r7, #28]
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d005      	beq.n	80094d2 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80094ce:	f040 80d8 	bne.w	8009682 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80094d2:	4b09      	ldr	r3, [pc, #36]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094d4:	681b      	ldr	r3, [r3, #0]
 80094d6:	4a08      	ldr	r2, [pc, #32]	; (80094f8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80094d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80094dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80094de:	f7fc fa77 	bl	80059d0 <HAL_GetTick>
 80094e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094e4:	e00a      	b.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80094e6:	f7fc fa73 	bl	80059d0 <HAL_GetTick>
 80094ea:	4602      	mov	r2, r0
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	1ad3      	subs	r3, r2, r3
 80094f0:	2b64      	cmp	r3, #100	; 0x64
 80094f2:	d903      	bls.n	80094fc <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	e196      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80094f8:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80094fc:	4b6c      	ldr	r3, [pc, #432]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1ee      	bne.n	80094e6 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	f003 0301 	and.w	r3, r3, #1
 8009510:	2b00      	cmp	r3, #0
 8009512:	d021      	beq.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009518:	2b00      	cmp	r3, #0
 800951a:	d11d      	bne.n	8009558 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800951c:	4b64      	ldr	r3, [pc, #400]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800951e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009522:	0c1b      	lsrs	r3, r3, #16
 8009524:	f003 0303 	and.w	r3, r3, #3
 8009528:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800952a:	4b61      	ldr	r3, [pc, #388]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800952c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009530:	0e1b      	lsrs	r3, r3, #24
 8009532:	f003 030f 	and.w	r3, r3, #15
 8009536:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	685b      	ldr	r3, [r3, #4]
 800953c:	019a      	lsls	r2, r3, #6
 800953e:	693b      	ldr	r3, [r7, #16]
 8009540:	041b      	lsls	r3, r3, #16
 8009542:	431a      	orrs	r2, r3
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	061b      	lsls	r3, r3, #24
 8009548:	431a      	orrs	r2, r3
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	071b      	lsls	r3, r3, #28
 8009550:	4957      	ldr	r1, [pc, #348]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009552:	4313      	orrs	r3, r2
 8009554:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009558:	687b      	ldr	r3, [r7, #4]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009560:	2b00      	cmp	r3, #0
 8009562:	d004      	beq.n	800956e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8009564:	687b      	ldr	r3, [r7, #4]
 8009566:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009568:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800956c:	d00a      	beq.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	681b      	ldr	r3, [r3, #0]
 8009572:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009576:	2b00      	cmp	r3, #0
 8009578:	d02e      	beq.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800957e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009582:	d129      	bne.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009584:	4b4a      	ldr	r3, [pc, #296]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009586:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800958a:	0c1b      	lsrs	r3, r3, #16
 800958c:	f003 0303 	and.w	r3, r3, #3
 8009590:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009592:	4b47      	ldr	r3, [pc, #284]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009594:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009598:	0f1b      	lsrs	r3, r3, #28
 800959a:	f003 0307 	and.w	r3, r3, #7
 800959e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	685b      	ldr	r3, [r3, #4]
 80095a4:	019a      	lsls	r2, r3, #6
 80095a6:	693b      	ldr	r3, [r7, #16]
 80095a8:	041b      	lsls	r3, r3, #16
 80095aa:	431a      	orrs	r2, r3
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	68db      	ldr	r3, [r3, #12]
 80095b0:	061b      	lsls	r3, r3, #24
 80095b2:	431a      	orrs	r2, r3
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	071b      	lsls	r3, r3, #28
 80095b8:	493d      	ldr	r1, [pc, #244]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095ba:	4313      	orrs	r3, r2
 80095bc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80095c0:	4b3b      	ldr	r3, [pc, #236]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095c6:	f023 021f 	bic.w	r2, r3, #31
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80095ce:	3b01      	subs	r3, #1
 80095d0:	4937      	ldr	r1, [pc, #220]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095d2:	4313      	orrs	r3, r2
 80095d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80095e0:	2b00      	cmp	r3, #0
 80095e2:	d01d      	beq.n	8009620 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80095e4:	4b32      	ldr	r3, [pc, #200]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095ea:	0e1b      	lsrs	r3, r3, #24
 80095ec:	f003 030f 	and.w	r3, r3, #15
 80095f0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80095f2:	4b2f      	ldr	r3, [pc, #188]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80095f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80095f8:	0f1b      	lsrs	r3, r3, #28
 80095fa:	f003 0307 	and.w	r3, r3, #7
 80095fe:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009600:	687b      	ldr	r3, [r7, #4]
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	019a      	lsls	r2, r3, #6
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	691b      	ldr	r3, [r3, #16]
 800960a:	041b      	lsls	r3, r3, #16
 800960c:	431a      	orrs	r2, r3
 800960e:	693b      	ldr	r3, [r7, #16]
 8009610:	061b      	lsls	r3, r3, #24
 8009612:	431a      	orrs	r2, r3
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	071b      	lsls	r3, r3, #28
 8009618:	4925      	ldr	r1, [pc, #148]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800961a:	4313      	orrs	r3, r2
 800961c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009628:	2b00      	cmp	r3, #0
 800962a:	d011      	beq.n	8009650 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	685b      	ldr	r3, [r3, #4]
 8009630:	019a      	lsls	r2, r3, #6
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	691b      	ldr	r3, [r3, #16]
 8009636:	041b      	lsls	r3, r3, #16
 8009638:	431a      	orrs	r2, r3
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	061b      	lsls	r3, r3, #24
 8009640:	431a      	orrs	r2, r3
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	689b      	ldr	r3, [r3, #8]
 8009646:	071b      	lsls	r3, r3, #28
 8009648:	4919      	ldr	r1, [pc, #100]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800964a:	4313      	orrs	r3, r2
 800964c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009650:	4b17      	ldr	r3, [pc, #92]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	4a16      	ldr	r2, [pc, #88]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009656:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800965a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800965c:	f7fc f9b8 	bl	80059d0 <HAL_GetTick>
 8009660:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009662:	e008      	b.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009664:	f7fc f9b4 	bl	80059d0 <HAL_GetTick>
 8009668:	4602      	mov	r2, r0
 800966a:	697b      	ldr	r3, [r7, #20]
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	2b64      	cmp	r3, #100	; 0x64
 8009670:	d901      	bls.n	8009676 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	e0d7      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009676:	4b0e      	ldr	r3, [pc, #56]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800967e:	2b00      	cmp	r3, #0
 8009680:	d0f0      	beq.n	8009664 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009682:	69bb      	ldr	r3, [r7, #24]
 8009684:	2b01      	cmp	r3, #1
 8009686:	f040 80cd 	bne.w	8009824 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800968a:	4b09      	ldr	r3, [pc, #36]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	4a08      	ldr	r2, [pc, #32]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8009690:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009696:	f7fc f99b 	bl	80059d0 <HAL_GetTick>
 800969a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800969c:	e00a      	b.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800969e:	f7fc f997 	bl	80059d0 <HAL_GetTick>
 80096a2:	4602      	mov	r2, r0
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	1ad3      	subs	r3, r2, r3
 80096a8:	2b64      	cmp	r3, #100	; 0x64
 80096aa:	d903      	bls.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096ac:	2303      	movs	r3, #3
 80096ae:	e0ba      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80096b0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80096b4:	4b5e      	ldr	r3, [pc, #376]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096c0:	d0ed      	beq.n	800969e <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d003      	beq.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d2:	2b00      	cmp	r3, #0
 80096d4:	d009      	beq.n	80096ea <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80096de:	2b00      	cmp	r3, #0
 80096e0:	d02e      	beq.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d12a      	bne.n	8009740 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80096ea:	4b51      	ldr	r3, [pc, #324]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096f0:	0c1b      	lsrs	r3, r3, #16
 80096f2:	f003 0303 	and.w	r3, r3, #3
 80096f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80096f8:	4b4d      	ldr	r3, [pc, #308]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80096fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096fe:	0f1b      	lsrs	r3, r3, #28
 8009700:	f003 0307 	and.w	r3, r3, #7
 8009704:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	695b      	ldr	r3, [r3, #20]
 800970a:	019a      	lsls	r2, r3, #6
 800970c:	693b      	ldr	r3, [r7, #16]
 800970e:	041b      	lsls	r3, r3, #16
 8009710:	431a      	orrs	r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	699b      	ldr	r3, [r3, #24]
 8009716:	061b      	lsls	r3, r3, #24
 8009718:	431a      	orrs	r2, r3
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	071b      	lsls	r3, r3, #28
 800971e:	4944      	ldr	r1, [pc, #272]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009720:	4313      	orrs	r3, r2
 8009722:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009726:	4b42      	ldr	r3, [pc, #264]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009728:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800972c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009734:	3b01      	subs	r3, #1
 8009736:	021b      	lsls	r3, r3, #8
 8009738:	493d      	ldr	r1, [pc, #244]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800973a:	4313      	orrs	r3, r2
 800973c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d022      	beq.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009750:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009754:	d11d      	bne.n	8009792 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009756:	4b36      	ldr	r3, [pc, #216]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800975c:	0e1b      	lsrs	r3, r3, #24
 800975e:	f003 030f 	and.w	r3, r3, #15
 8009762:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009764:	4b32      	ldr	r3, [pc, #200]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009766:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800976a:	0f1b      	lsrs	r3, r3, #28
 800976c:	f003 0307 	and.w	r3, r3, #7
 8009770:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	695b      	ldr	r3, [r3, #20]
 8009776:	019a      	lsls	r2, r3, #6
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	041b      	lsls	r3, r3, #16
 800977e:	431a      	orrs	r2, r3
 8009780:	693b      	ldr	r3, [r7, #16]
 8009782:	061b      	lsls	r3, r3, #24
 8009784:	431a      	orrs	r2, r3
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	071b      	lsls	r3, r3, #28
 800978a:	4929      	ldr	r1, [pc, #164]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800978c:	4313      	orrs	r3, r2
 800978e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009792:	687b      	ldr	r3, [r7, #4]
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	f003 0308 	and.w	r3, r3, #8
 800979a:	2b00      	cmp	r3, #0
 800979c:	d028      	beq.n	80097f0 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800979e:	4b24      	ldr	r3, [pc, #144]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097a4:	0e1b      	lsrs	r3, r3, #24
 80097a6:	f003 030f 	and.w	r3, r3, #15
 80097aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80097ac:	4b20      	ldr	r3, [pc, #128]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097b2:	0c1b      	lsrs	r3, r3, #16
 80097b4:	f003 0303 	and.w	r3, r3, #3
 80097b8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	695b      	ldr	r3, [r3, #20]
 80097be:	019a      	lsls	r2, r3, #6
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	041b      	lsls	r3, r3, #16
 80097c4:	431a      	orrs	r2, r3
 80097c6:	693b      	ldr	r3, [r7, #16]
 80097c8:	061b      	lsls	r3, r3, #24
 80097ca:	431a      	orrs	r2, r3
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	69db      	ldr	r3, [r3, #28]
 80097d0:	071b      	lsls	r3, r3, #28
 80097d2:	4917      	ldr	r1, [pc, #92]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097d4:	4313      	orrs	r3, r2
 80097d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80097da:	4b15      	ldr	r3, [pc, #84]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097e8:	4911      	ldr	r1, [pc, #68]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097ea:	4313      	orrs	r3, r2
 80097ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80097f0:	4b0f      	ldr	r3, [pc, #60]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097f2:	681b      	ldr	r3, [r3, #0]
 80097f4:	4a0e      	ldr	r2, [pc, #56]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80097f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80097fa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80097fc:	f7fc f8e8 	bl	80059d0 <HAL_GetTick>
 8009800:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009802:	e008      	b.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009804:	f7fc f8e4 	bl	80059d0 <HAL_GetTick>
 8009808:	4602      	mov	r2, r0
 800980a:	697b      	ldr	r3, [r7, #20]
 800980c:	1ad3      	subs	r3, r2, r3
 800980e:	2b64      	cmp	r3, #100	; 0x64
 8009810:	d901      	bls.n	8009816 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009812:	2303      	movs	r3, #3
 8009814:	e007      	b.n	8009826 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009816:	4b06      	ldr	r3, [pc, #24]	; (8009830 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800981e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009822:	d1ef      	bne.n	8009804 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8009824:	2300      	movs	r3, #0
}
 8009826:	4618      	mov	r0, r3
 8009828:	3720      	adds	r7, #32
 800982a:	46bd      	mov	sp, r7
 800982c:	bd80      	pop	{r7, pc}
 800982e:	bf00      	nop
 8009830:	40023800 	.word	0x40023800

08009834 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e06b      	b.n	800991e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	7f5b      	ldrb	r3, [r3, #29]
 800984a:	b2db      	uxtb	r3, r3
 800984c:	2b00      	cmp	r3, #0
 800984e:	d105      	bne.n	800985c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8009850:	687b      	ldr	r3, [r7, #4]
 8009852:	2200      	movs	r2, #0
 8009854:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f7fb fce2 	bl	8005220 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	2202      	movs	r2, #2
 8009860:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	22ca      	movs	r2, #202	; 0xca
 8009868:	625a      	str	r2, [r3, #36]	; 0x24
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	2253      	movs	r2, #83	; 0x53
 8009870:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f000 fbae 	bl	8009fd4 <RTC_EnterInitMode>
 8009878:	4603      	mov	r3, r0
 800987a:	2b00      	cmp	r3, #0
 800987c:	d008      	beq.n	8009890 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	22ff      	movs	r2, #255	; 0xff
 8009884:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	2204      	movs	r2, #4
 800988a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800988c:	2301      	movs	r3, #1
 800988e:	e046      	b.n	800991e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8009890:	687b      	ldr	r3, [r7, #4]
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	6899      	ldr	r1, [r3, #8]
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681a      	ldr	r2, [r3, #0]
 800989a:	4b23      	ldr	r3, [pc, #140]	; (8009928 <HAL_RTC_Init+0xf4>)
 800989c:	400b      	ands	r3, r1
 800989e:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	681b      	ldr	r3, [r3, #0]
 80098a4:	6899      	ldr	r1, [r3, #8]
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	685a      	ldr	r2, [r3, #4]
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	691b      	ldr	r3, [r3, #16]
 80098ae:	431a      	orrs	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	695b      	ldr	r3, [r3, #20]
 80098b4:	431a      	orrs	r2, r3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	68d2      	ldr	r2, [r2, #12]
 80098c6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	6919      	ldr	r1, [r3, #16]
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	689b      	ldr	r3, [r3, #8]
 80098d2:	041a      	lsls	r2, r3, #16
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	430a      	orrs	r2, r1
 80098da:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	68da      	ldr	r2, [r3, #12]
 80098e2:	687b      	ldr	r3, [r7, #4]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098ea:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	f022 0208 	bic.w	r2, r2, #8
 80098fa:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	699a      	ldr	r2, [r3, #24]
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	430a      	orrs	r2, r1
 800990c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	22ff      	movs	r2, #255	; 0xff
 8009914:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2201      	movs	r2, #1
 800991a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 800991c:	2300      	movs	r3, #0
  }
}
 800991e:	4618      	mov	r0, r3
 8009920:	3708      	adds	r7, #8
 8009922:	46bd      	mov	sp, r7
 8009924:	bd80      	pop	{r7, pc}
 8009926:	bf00      	nop
 8009928:	ff8fffbf 	.word	0xff8fffbf

0800992c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800992c:	b590      	push	{r4, r7, lr}
 800992e:	b087      	sub	sp, #28
 8009930:	af00      	add	r7, sp, #0
 8009932:	60f8      	str	r0, [r7, #12]
 8009934:	60b9      	str	r1, [r7, #8]
 8009936:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009938:	2300      	movs	r3, #0
 800993a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800993c:	68fb      	ldr	r3, [r7, #12]
 800993e:	7f1b      	ldrb	r3, [r3, #28]
 8009940:	2b01      	cmp	r3, #1
 8009942:	d101      	bne.n	8009948 <HAL_RTC_SetTime+0x1c>
 8009944:	2302      	movs	r3, #2
 8009946:	e0a8      	b.n	8009a9a <HAL_RTC_SetTime+0x16e>
 8009948:	68fb      	ldr	r3, [r7, #12]
 800994a:	2201      	movs	r2, #1
 800994c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	2202      	movs	r2, #2
 8009952:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	2b00      	cmp	r3, #0
 8009958:	d126      	bne.n	80099a8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	681b      	ldr	r3, [r3, #0]
 800995e:	689b      	ldr	r3, [r3, #8]
 8009960:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009964:	2b00      	cmp	r3, #0
 8009966:	d102      	bne.n	800996e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	2200      	movs	r2, #0
 800996c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	781b      	ldrb	r3, [r3, #0]
 8009972:	4618      	mov	r0, r3
 8009974:	f000 fb5a 	bl	800a02c <RTC_ByteToBcd2>
 8009978:	4603      	mov	r3, r0
 800997a:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 800997c:	68bb      	ldr	r3, [r7, #8]
 800997e:	785b      	ldrb	r3, [r3, #1]
 8009980:	4618      	mov	r0, r3
 8009982:	f000 fb53 	bl	800a02c <RTC_ByteToBcd2>
 8009986:	4603      	mov	r3, r0
 8009988:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 800998a:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 800998c:	68bb      	ldr	r3, [r7, #8]
 800998e:	789b      	ldrb	r3, [r3, #2]
 8009990:	4618      	mov	r0, r3
 8009992:	f000 fb4b 	bl	800a02c <RTC_ByteToBcd2>
 8009996:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8009998:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	7b1b      	ldrb	r3, [r3, #12]
 80099a0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80099a2:	4313      	orrs	r3, r2
 80099a4:	617b      	str	r3, [r7, #20]
 80099a6:	e018      	b.n	80099da <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80099a8:	68fb      	ldr	r3, [r7, #12]
 80099aa:	681b      	ldr	r3, [r3, #0]
 80099ac:	689b      	ldr	r3, [r3, #8]
 80099ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099b2:	2b00      	cmp	r3, #0
 80099b4:	d102      	bne.n	80099bc <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	2200      	movs	r2, #0
 80099ba:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80099bc:	68bb      	ldr	r3, [r7, #8]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 80099c2:	68bb      	ldr	r3, [r7, #8]
 80099c4:	785b      	ldrb	r3, [r3, #1]
 80099c6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80099c8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 80099ca:	68ba      	ldr	r2, [r7, #8]
 80099cc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 80099ce:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 80099d0:	68bb      	ldr	r3, [r7, #8]
 80099d2:	7b1b      	ldrb	r3, [r3, #12]
 80099d4:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 80099d6:	4313      	orrs	r3, r2
 80099d8:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	22ca      	movs	r2, #202	; 0xca
 80099e0:	625a      	str	r2, [r3, #36]	; 0x24
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	2253      	movs	r2, #83	; 0x53
 80099e8:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80099ea:	68f8      	ldr	r0, [r7, #12]
 80099ec:	f000 faf2 	bl	8009fd4 <RTC_EnterInitMode>
 80099f0:	4603      	mov	r3, r0
 80099f2:	2b00      	cmp	r3, #0
 80099f4:	d00b      	beq.n	8009a0e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	681b      	ldr	r3, [r3, #0]
 80099fa:	22ff      	movs	r2, #255	; 0xff
 80099fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	2204      	movs	r2, #4
 8009a02:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009a04:	68fb      	ldr	r3, [r7, #12]
 8009a06:	2200      	movs	r2, #0
 8009a08:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009a0a:	2301      	movs	r3, #1
 8009a0c:	e045      	b.n	8009a9a <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	681a      	ldr	r2, [r3, #0]
 8009a12:	6979      	ldr	r1, [r7, #20]
 8009a14:	4b23      	ldr	r3, [pc, #140]	; (8009aa4 <HAL_RTC_SetTime+0x178>)
 8009a16:	400b      	ands	r3, r1
 8009a18:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8009a1a:	68fb      	ldr	r3, [r7, #12]
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	689a      	ldr	r2, [r3, #8]
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009a28:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8009a2a:	68fb      	ldr	r3, [r7, #12]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	6899      	ldr	r1, [r3, #8]
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	691a      	ldr	r2, [r3, #16]
 8009a34:	68bb      	ldr	r3, [r7, #8]
 8009a36:	695b      	ldr	r3, [r3, #20]
 8009a38:	431a      	orrs	r2, r3
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	430a      	orrs	r2, r1
 8009a40:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	681b      	ldr	r3, [r3, #0]
 8009a46:	68da      	ldr	r2, [r3, #12]
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009a50:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	689b      	ldr	r3, [r3, #8]
 8009a58:	f003 0320 	and.w	r3, r3, #32
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d111      	bne.n	8009a84 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009a60:	68f8      	ldr	r0, [r7, #12]
 8009a62:	f000 fa8f 	bl	8009f84 <HAL_RTC_WaitForSynchro>
 8009a66:	4603      	mov	r3, r0
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d00b      	beq.n	8009a84 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a6c:	68fb      	ldr	r3, [r7, #12]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	22ff      	movs	r2, #255	; 0xff
 8009a72:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009a74:	68fb      	ldr	r3, [r7, #12]
 8009a76:	2204      	movs	r2, #4
 8009a78:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009a7a:	68fb      	ldr	r3, [r7, #12]
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009a80:	2301      	movs	r3, #1
 8009a82:	e00a      	b.n	8009a9a <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	22ff      	movs	r2, #255	; 0xff
 8009a8a:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8009a8c:	68fb      	ldr	r3, [r7, #12]
 8009a8e:	2201      	movs	r2, #1
 8009a90:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	2200      	movs	r2, #0
 8009a96:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8009a98:	2300      	movs	r3, #0
  }
}
 8009a9a:	4618      	mov	r0, r3
 8009a9c:	371c      	adds	r7, #28
 8009a9e:	46bd      	mov	sp, r7
 8009aa0:	bd90      	pop	{r4, r7, pc}
 8009aa2:	bf00      	nop
 8009aa4:	007f7f7f 	.word	0x007f7f7f

08009aa8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b086      	sub	sp, #24
 8009aac:	af00      	add	r7, sp, #0
 8009aae:	60f8      	str	r0, [r7, #12]
 8009ab0:	60b9      	str	r1, [r7, #8]
 8009ab2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	691b      	ldr	r3, [r3, #16]
 8009ac8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8009acc:	68bb      	ldr	r3, [r7, #8]
 8009ace:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	681a      	ldr	r2, [r3, #0]
 8009ad6:	4b22      	ldr	r3, [pc, #136]	; (8009b60 <HAL_RTC_GetTime+0xb8>)
 8009ad8:	4013      	ands	r3, r2
 8009ada:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8009adc:	697b      	ldr	r3, [r7, #20]
 8009ade:	0c1b      	lsrs	r3, r3, #16
 8009ae0:	b2db      	uxtb	r3, r3
 8009ae2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009ae6:	b2da      	uxtb	r2, r3
 8009ae8:	68bb      	ldr	r3, [r7, #8]
 8009aea:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8009aec:	697b      	ldr	r3, [r7, #20]
 8009aee:	0a1b      	lsrs	r3, r3, #8
 8009af0:	b2db      	uxtb	r3, r3
 8009af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009af6:	b2da      	uxtb	r2, r3
 8009af8:	68bb      	ldr	r3, [r7, #8]
 8009afa:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8009afc:	697b      	ldr	r3, [r7, #20]
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009b04:	b2da      	uxtb	r2, r3
 8009b06:	68bb      	ldr	r3, [r7, #8]
 8009b08:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8009b0a:	697b      	ldr	r3, [r7, #20]
 8009b0c:	0c1b      	lsrs	r3, r3, #16
 8009b0e:	b2db      	uxtb	r3, r3
 8009b10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b14:	b2da      	uxtb	r2, r3
 8009b16:	68bb      	ldr	r3, [r7, #8]
 8009b18:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	d11a      	bne.n	8009b56 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8009b20:	68bb      	ldr	r3, [r7, #8]
 8009b22:	781b      	ldrb	r3, [r3, #0]
 8009b24:	4618      	mov	r0, r3
 8009b26:	f000 fa9f 	bl	800a068 <RTC_Bcd2ToByte>
 8009b2a:	4603      	mov	r3, r0
 8009b2c:	461a      	mov	r2, r3
 8009b2e:	68bb      	ldr	r3, [r7, #8]
 8009b30:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8009b32:	68bb      	ldr	r3, [r7, #8]
 8009b34:	785b      	ldrb	r3, [r3, #1]
 8009b36:	4618      	mov	r0, r3
 8009b38:	f000 fa96 	bl	800a068 <RTC_Bcd2ToByte>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	461a      	mov	r2, r3
 8009b40:	68bb      	ldr	r3, [r7, #8]
 8009b42:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8009b44:	68bb      	ldr	r3, [r7, #8]
 8009b46:	789b      	ldrb	r3, [r3, #2]
 8009b48:	4618      	mov	r0, r3
 8009b4a:	f000 fa8d 	bl	800a068 <RTC_Bcd2ToByte>
 8009b4e:	4603      	mov	r3, r0
 8009b50:	461a      	mov	r2, r3
 8009b52:	68bb      	ldr	r3, [r7, #8]
 8009b54:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8009b56:	2300      	movs	r3, #0
}
 8009b58:	4618      	mov	r0, r3
 8009b5a:	3718      	adds	r7, #24
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	bd80      	pop	{r7, pc}
 8009b60:	007f7f7f 	.word	0x007f7f7f

08009b64 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009b64:	b590      	push	{r4, r7, lr}
 8009b66:	b087      	sub	sp, #28
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009b70:	2300      	movs	r3, #0
 8009b72:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	7f1b      	ldrb	r3, [r3, #28]
 8009b78:	2b01      	cmp	r3, #1
 8009b7a:	d101      	bne.n	8009b80 <HAL_RTC_SetDate+0x1c>
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	e092      	b.n	8009ca6 <HAL_RTC_SetDate+0x142>
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	2201      	movs	r2, #1
 8009b84:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	2202      	movs	r2, #2
 8009b8a:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8009b8c:	687b      	ldr	r3, [r7, #4]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d10e      	bne.n	8009bb0 <HAL_RTC_SetDate+0x4c>
 8009b92:	68bb      	ldr	r3, [r7, #8]
 8009b94:	785b      	ldrb	r3, [r3, #1]
 8009b96:	f003 0310 	and.w	r3, r3, #16
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d008      	beq.n	8009bb0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8009b9e:	68bb      	ldr	r3, [r7, #8]
 8009ba0:	785b      	ldrb	r3, [r3, #1]
 8009ba2:	f023 0310 	bic.w	r3, r3, #16
 8009ba6:	b2db      	uxtb	r3, r3
 8009ba8:	330a      	adds	r3, #10
 8009baa:	b2da      	uxtb	r2, r3
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d11c      	bne.n	8009bf0 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009bb6:	68bb      	ldr	r3, [r7, #8]
 8009bb8:	78db      	ldrb	r3, [r3, #3]
 8009bba:	4618      	mov	r0, r3
 8009bbc:	f000 fa36 	bl	800a02c <RTC_ByteToBcd2>
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009bc4:	68bb      	ldr	r3, [r7, #8]
 8009bc6:	785b      	ldrb	r3, [r3, #1]
 8009bc8:	4618      	mov	r0, r3
 8009bca:	f000 fa2f 	bl	800a02c <RTC_ByteToBcd2>
 8009bce:	4603      	mov	r3, r0
 8009bd0:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009bd2:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	789b      	ldrb	r3, [r3, #2]
 8009bd8:	4618      	mov	r0, r3
 8009bda:	f000 fa27 	bl	800a02c <RTC_ByteToBcd2>
 8009bde:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8009be0:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	781b      	ldrb	r3, [r3, #0]
 8009be8:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8009bea:	4313      	orrs	r3, r2
 8009bec:	617b      	str	r3, [r7, #20]
 8009bee:	e00e      	b.n	8009c0e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009bf0:	68bb      	ldr	r3, [r7, #8]
 8009bf2:	78db      	ldrb	r3, [r3, #3]
 8009bf4:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	785b      	ldrb	r3, [r3, #1]
 8009bfa:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009bfc:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8009bfe:	68ba      	ldr	r2, [r7, #8]
 8009c00:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8009c02:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	781b      	ldrb	r3, [r3, #0]
 8009c08:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8009c0a:	4313      	orrs	r3, r2
 8009c0c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	22ca      	movs	r2, #202	; 0xca
 8009c14:	625a      	str	r2, [r3, #36]	; 0x24
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	681b      	ldr	r3, [r3, #0]
 8009c1a:	2253      	movs	r2, #83	; 0x53
 8009c1c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8009c1e:	68f8      	ldr	r0, [r7, #12]
 8009c20:	f000 f9d8 	bl	8009fd4 <RTC_EnterInitMode>
 8009c24:	4603      	mov	r3, r0
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d00b      	beq.n	8009c42 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	22ff      	movs	r2, #255	; 0xff
 8009c30:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	2204      	movs	r2, #4
 8009c36:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	2200      	movs	r2, #0
 8009c3c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8009c3e:	2301      	movs	r3, #1
 8009c40:	e031      	b.n	8009ca6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	681a      	ldr	r2, [r3, #0]
 8009c46:	6979      	ldr	r1, [r7, #20]
 8009c48:	4b19      	ldr	r3, [pc, #100]	; (8009cb0 <HAL_RTC_SetDate+0x14c>)
 8009c4a:	400b      	ands	r3, r1
 8009c4c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	681b      	ldr	r3, [r3, #0]
 8009c52:	68da      	ldr	r2, [r3, #12]
 8009c54:	68fb      	ldr	r3, [r7, #12]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009c5c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	689b      	ldr	r3, [r3, #8]
 8009c64:	f003 0320 	and.w	r3, r3, #32
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	d111      	bne.n	8009c90 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8009c6c:	68f8      	ldr	r0, [r7, #12]
 8009c6e:	f000 f989 	bl	8009f84 <HAL_RTC_WaitForSynchro>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d00b      	beq.n	8009c90 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	22ff      	movs	r2, #255	; 0xff
 8009c7e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	2204      	movs	r2, #4
 8009c84:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009c86:	68fb      	ldr	r3, [r7, #12]
 8009c88:	2200      	movs	r2, #0
 8009c8a:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8009c8c:	2301      	movs	r3, #1
 8009c8e:	e00a      	b.n	8009ca6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	22ff      	movs	r2, #255	; 0xff
 8009c96:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8009c98:	68fb      	ldr	r3, [r7, #12]
 8009c9a:	2201      	movs	r2, #1
 8009c9c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8009ca4:	2300      	movs	r3, #0
  }
}
 8009ca6:	4618      	mov	r0, r3
 8009ca8:	371c      	adds	r7, #28
 8009caa:	46bd      	mov	sp, r7
 8009cac:	bd90      	pop	{r4, r7, pc}
 8009cae:	bf00      	nop
 8009cb0:	00ffff3f 	.word	0x00ffff3f

08009cb4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8009cb4:	b580      	push	{r7, lr}
 8009cb6:	b086      	sub	sp, #24
 8009cb8:	af00      	add	r7, sp, #0
 8009cba:	60f8      	str	r0, [r7, #12]
 8009cbc:	60b9      	str	r1, [r7, #8]
 8009cbe:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8009cc0:	2300      	movs	r3, #0
 8009cc2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	4b21      	ldr	r3, [pc, #132]	; (8009d50 <HAL_RTC_GetDate+0x9c>)
 8009ccc:	4013      	ands	r3, r2
 8009cce:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8009cd0:	697b      	ldr	r3, [r7, #20]
 8009cd2:	0c1b      	lsrs	r3, r3, #16
 8009cd4:	b2da      	uxtb	r2, r3
 8009cd6:	68bb      	ldr	r3, [r7, #8]
 8009cd8:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8009cda:	697b      	ldr	r3, [r7, #20]
 8009cdc:	0a1b      	lsrs	r3, r3, #8
 8009cde:	b2db      	uxtb	r3, r3
 8009ce0:	f003 031f 	and.w	r3, r3, #31
 8009ce4:	b2da      	uxtb	r2, r3
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8009cea:	697b      	ldr	r3, [r7, #20]
 8009cec:	b2db      	uxtb	r3, r3
 8009cee:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009cf2:	b2da      	uxtb	r2, r3
 8009cf4:	68bb      	ldr	r3, [r7, #8]
 8009cf6:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	0b5b      	lsrs	r3, r3, #13
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	f003 0307 	and.w	r3, r3, #7
 8009d02:	b2da      	uxtb	r2, r3
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8009d08:	687b      	ldr	r3, [r7, #4]
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d11a      	bne.n	8009d44 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8009d0e:	68bb      	ldr	r3, [r7, #8]
 8009d10:	78db      	ldrb	r3, [r3, #3]
 8009d12:	4618      	mov	r0, r3
 8009d14:	f000 f9a8 	bl	800a068 <RTC_Bcd2ToByte>
 8009d18:	4603      	mov	r3, r0
 8009d1a:	461a      	mov	r2, r3
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8009d20:	68bb      	ldr	r3, [r7, #8]
 8009d22:	785b      	ldrb	r3, [r3, #1]
 8009d24:	4618      	mov	r0, r3
 8009d26:	f000 f99f 	bl	800a068 <RTC_Bcd2ToByte>
 8009d2a:	4603      	mov	r3, r0
 8009d2c:	461a      	mov	r2, r3
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	789b      	ldrb	r3, [r3, #2]
 8009d36:	4618      	mov	r0, r3
 8009d38:	f000 f996 	bl	800a068 <RTC_Bcd2ToByte>
 8009d3c:	4603      	mov	r3, r0
 8009d3e:	461a      	mov	r2, r3
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8009d44:	2300      	movs	r3, #0
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3718      	adds	r7, #24
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}
 8009d4e:	bf00      	nop
 8009d50:	00ffff3f 	.word	0x00ffff3f

08009d54 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8009d54:	b590      	push	{r4, r7, lr}
 8009d56:	b089      	sub	sp, #36	; 0x24
 8009d58:	af00      	add	r7, sp, #0
 8009d5a:	60f8      	str	r0, [r7, #12]
 8009d5c:	60b9      	str	r1, [r7, #8]
 8009d5e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8009d60:	2300      	movs	r3, #0
 8009d62:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8009d64:	2300      	movs	r3, #0
 8009d66:	61fb      	str	r3, [r7, #28]
 8009d68:	2300      	movs	r3, #0
 8009d6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	7f1b      	ldrb	r3, [r3, #28]
 8009d70:	2b01      	cmp	r3, #1
 8009d72:	d101      	bne.n	8009d78 <HAL_RTC_SetAlarm+0x24>
 8009d74:	2302      	movs	r3, #2
 8009d76:	e101      	b.n	8009f7c <HAL_RTC_SetAlarm+0x228>
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	2202      	movs	r2, #2
 8009d82:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	2b00      	cmp	r3, #0
 8009d88:	d137      	bne.n	8009dfa <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	689b      	ldr	r3, [r3, #8]
 8009d90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d102      	bne.n	8009d9e <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009d9e:	68bb      	ldr	r3, [r7, #8]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	4618      	mov	r0, r3
 8009da4:	f000 f942 	bl	800a02c <RTC_ByteToBcd2>
 8009da8:	4603      	mov	r3, r0
 8009daa:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009dac:	68bb      	ldr	r3, [r7, #8]
 8009dae:	785b      	ldrb	r3, [r3, #1]
 8009db0:	4618      	mov	r0, r3
 8009db2:	f000 f93b 	bl	800a02c <RTC_ByteToBcd2>
 8009db6:	4603      	mov	r3, r0
 8009db8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009dba:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009dbc:	68bb      	ldr	r3, [r7, #8]
 8009dbe:	789b      	ldrb	r3, [r3, #2]
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	f000 f933 	bl	800a02c <RTC_ByteToBcd2>
 8009dc6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8009dc8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009dcc:	68bb      	ldr	r3, [r7, #8]
 8009dce:	7b1b      	ldrb	r3, [r3, #12]
 8009dd0:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8009dd2:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009dd6:	68bb      	ldr	r3, [r7, #8]
 8009dd8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009ddc:	4618      	mov	r0, r3
 8009dde:	f000 f925 	bl	800a02c <RTC_ByteToBcd2>
 8009de2:	4603      	mov	r3, r0
 8009de4:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009de6:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009dea:	68bb      	ldr	r3, [r7, #8]
 8009dec:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8009dee:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009df0:	68bb      	ldr	r3, [r7, #8]
 8009df2:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8009df4:	4313      	orrs	r3, r2
 8009df6:	61fb      	str	r3, [r7, #28]
 8009df8:	e023      	b.n	8009e42 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8009dfa:	68fb      	ldr	r3, [r7, #12]
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	689b      	ldr	r3, [r3, #8]
 8009e00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009e04:	2b00      	cmp	r3, #0
 8009e06:	d102      	bne.n	8009e0e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8009e08:	68bb      	ldr	r3, [r7, #8]
 8009e0a:	2200      	movs	r2, #0
 8009e0c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009e0e:	68bb      	ldr	r3, [r7, #8]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009e14:	68bb      	ldr	r3, [r7, #8]
 8009e16:	785b      	ldrb	r3, [r3, #1]
 8009e18:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009e1a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8009e20:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009e22:	68bb      	ldr	r3, [r7, #8]
 8009e24:	7b1b      	ldrb	r3, [r3, #12]
 8009e26:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8009e28:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009e2a:	68bb      	ldr	r3, [r7, #8]
 8009e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8009e30:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8009e32:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8009e38:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8009e3a:	68bb      	ldr	r3, [r7, #8]
 8009e3c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8009e3e:	4313      	orrs	r3, r2
 8009e40:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	685a      	ldr	r2, [r3, #4]
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	69db      	ldr	r3, [r3, #28]
 8009e4a:	4313      	orrs	r3, r2
 8009e4c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009e4e:	68fb      	ldr	r3, [r7, #12]
 8009e50:	681b      	ldr	r3, [r3, #0]
 8009e52:	22ca      	movs	r2, #202	; 0xca
 8009e54:	625a      	str	r2, [r3, #36]	; 0x24
 8009e56:	68fb      	ldr	r3, [r7, #12]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	2253      	movs	r2, #83	; 0x53
 8009e5c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8009e5e:	68bb      	ldr	r3, [r7, #8]
 8009e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e62:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e66:	d13f      	bne.n	8009ee8 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	681b      	ldr	r3, [r3, #0]
 8009e6c:	689a      	ldr	r2, [r3, #8]
 8009e6e:	68fb      	ldr	r3, [r7, #12]
 8009e70:	681b      	ldr	r3, [r3, #0]
 8009e72:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009e76:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	689a      	ldr	r2, [r3, #8]
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009e86:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009e88:	f7fb fda2 	bl	80059d0 <HAL_GetTick>
 8009e8c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009e8e:	e013      	b.n	8009eb8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009e90:	f7fb fd9e 	bl	80059d0 <HAL_GetTick>
 8009e94:	4602      	mov	r2, r0
 8009e96:	69bb      	ldr	r3, [r7, #24]
 8009e98:	1ad3      	subs	r3, r2, r3
 8009e9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009e9e:	d90b      	bls.n	8009eb8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009ea0:	68fb      	ldr	r3, [r7, #12]
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	22ff      	movs	r2, #255	; 0xff
 8009ea6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	2203      	movs	r2, #3
 8009eac:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	2200      	movs	r2, #0
 8009eb2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009eb4:	2303      	movs	r3, #3
 8009eb6:	e061      	b.n	8009f7c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	68db      	ldr	r3, [r3, #12]
 8009ebe:	f003 0301 	and.w	r3, r3, #1
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d0e4      	beq.n	8009e90 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8009ec6:	68fb      	ldr	r3, [r7, #12]
 8009ec8:	681b      	ldr	r3, [r3, #0]
 8009eca:	69fa      	ldr	r2, [r7, #28]
 8009ecc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	697a      	ldr	r2, [r7, #20]
 8009ed4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	689a      	ldr	r2, [r3, #8]
 8009edc:	68fb      	ldr	r3, [r7, #12]
 8009ede:	681b      	ldr	r3, [r3, #0]
 8009ee0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009ee4:	609a      	str	r2, [r3, #8]
 8009ee6:	e03e      	b.n	8009f66 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	689a      	ldr	r2, [r3, #8]
 8009eee:	68fb      	ldr	r3, [r7, #12]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009ef6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009ef8:	68fb      	ldr	r3, [r7, #12]
 8009efa:	681b      	ldr	r3, [r3, #0]
 8009efc:	689a      	ldr	r2, [r3, #8]
 8009efe:	68fb      	ldr	r3, [r7, #12]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f06:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009f08:	f7fb fd62 	bl	80059d0 <HAL_GetTick>
 8009f0c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009f0e:	e013      	b.n	8009f38 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009f10:	f7fb fd5e 	bl	80059d0 <HAL_GetTick>
 8009f14:	4602      	mov	r2, r0
 8009f16:	69bb      	ldr	r3, [r7, #24]
 8009f18:	1ad3      	subs	r3, r2, r3
 8009f1a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009f1e:	d90b      	bls.n	8009f38 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	22ff      	movs	r2, #255	; 0xff
 8009f26:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009f28:	68fb      	ldr	r3, [r7, #12]
 8009f2a:	2203      	movs	r2, #3
 8009f2c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009f34:	2303      	movs	r3, #3
 8009f36:	e021      	b.n	8009f7c <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	68db      	ldr	r3, [r3, #12]
 8009f3e:	f003 0302 	and.w	r3, r3, #2
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d0e4      	beq.n	8009f10 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	69fa      	ldr	r2, [r7, #28]
 8009f4c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	697a      	ldr	r2, [r7, #20]
 8009f54:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	689a      	ldr	r2, [r3, #8]
 8009f5c:	68fb      	ldr	r3, [r7, #12]
 8009f5e:	681b      	ldr	r3, [r3, #0]
 8009f60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009f64:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	22ff      	movs	r2, #255	; 0xff
 8009f6c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009f6e:	68fb      	ldr	r3, [r7, #12]
 8009f70:	2201      	movs	r2, #1
 8009f72:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2200      	movs	r2, #0
 8009f78:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8009f7a:	2300      	movs	r3, #0
}
 8009f7c:	4618      	mov	r0, r3
 8009f7e:	3724      	adds	r7, #36	; 0x24
 8009f80:	46bd      	mov	sp, r7
 8009f82:	bd90      	pop	{r4, r7, pc}

08009f84 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8009f84:	b580      	push	{r7, lr}
 8009f86:	b084      	sub	sp, #16
 8009f88:	af00      	add	r7, sp, #0
 8009f8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009f8c:	2300      	movs	r3, #0
 8009f8e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	681b      	ldr	r3, [r3, #0]
 8009f94:	68da      	ldr	r2, [r3, #12]
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8009f9e:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009fa0:	f7fb fd16 	bl	80059d0 <HAL_GetTick>
 8009fa4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009fa6:	e009      	b.n	8009fbc <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009fa8:	f7fb fd12 	bl	80059d0 <HAL_GetTick>
 8009fac:	4602      	mov	r2, r0
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	1ad3      	subs	r3, r2, r3
 8009fb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8009fb6:	d901      	bls.n	8009fbc <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8009fb8:	2303      	movs	r3, #3
 8009fba:	e007      	b.n	8009fcc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d0ee      	beq.n	8009fa8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8009fca:	2300      	movs	r3, #0
}
 8009fcc:	4618      	mov	r0, r3
 8009fce:	3710      	adds	r7, #16
 8009fd0:	46bd      	mov	sp, r7
 8009fd2:	bd80      	pop	{r7, pc}

08009fd4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009fd4:	b580      	push	{r7, lr}
 8009fd6:	b084      	sub	sp, #16
 8009fd8:	af00      	add	r7, sp, #0
 8009fda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fea:	2b00      	cmp	r3, #0
 8009fec:	d119      	bne.n	800a022 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	f04f 32ff 	mov.w	r2, #4294967295
 8009ff6:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009ff8:	f7fb fcea 	bl	80059d0 <HAL_GetTick>
 8009ffc:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009ffe:	e009      	b.n	800a014 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800a000:	f7fb fce6 	bl	80059d0 <HAL_GetTick>
 800a004:	4602      	mov	r2, r0
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	1ad3      	subs	r3, r2, r3
 800a00a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800a00e:	d901      	bls.n	800a014 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 800a010:	2303      	movs	r3, #3
 800a012:	e007      	b.n	800a024 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	68db      	ldr	r3, [r3, #12]
 800a01a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d0ee      	beq.n	800a000 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 800a022:	2300      	movs	r3, #0
}
 800a024:	4618      	mov	r0, r3
 800a026:	3710      	adds	r7, #16
 800a028:	46bd      	mov	sp, r7
 800a02a:	bd80      	pop	{r7, pc}

0800a02c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800a02c:	b480      	push	{r7}
 800a02e:	b085      	sub	sp, #20
 800a030:	af00      	add	r7, sp, #0
 800a032:	4603      	mov	r3, r0
 800a034:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 800a036:	2300      	movs	r3, #0
 800a038:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800a03a:	e005      	b.n	800a048 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	3301      	adds	r3, #1
 800a040:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 800a042:	79fb      	ldrb	r3, [r7, #7]
 800a044:	3b0a      	subs	r3, #10
 800a046:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 800a048:	79fb      	ldrb	r3, [r7, #7]
 800a04a:	2b09      	cmp	r3, #9
 800a04c:	d8f6      	bhi.n	800a03c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	b2db      	uxtb	r3, r3
 800a052:	011b      	lsls	r3, r3, #4
 800a054:	b2da      	uxtb	r2, r3
 800a056:	79fb      	ldrb	r3, [r7, #7]
 800a058:	4313      	orrs	r3, r2
 800a05a:	b2db      	uxtb	r3, r3
}
 800a05c:	4618      	mov	r0, r3
 800a05e:	3714      	adds	r7, #20
 800a060:	46bd      	mov	sp, r7
 800a062:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a066:	4770      	bx	lr

0800a068 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	4603      	mov	r3, r0
 800a070:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 800a072:	2300      	movs	r3, #0
 800a074:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 800a076:	79fb      	ldrb	r3, [r7, #7]
 800a078:	091b      	lsrs	r3, r3, #4
 800a07a:	b2db      	uxtb	r3, r3
 800a07c:	461a      	mov	r2, r3
 800a07e:	4613      	mov	r3, r2
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	4413      	add	r3, r2
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800a088:	79fb      	ldrb	r3, [r7, #7]
 800a08a:	f003 030f 	and.w	r3, r3, #15
 800a08e:	b2da      	uxtb	r2, r3
 800a090:	68fb      	ldr	r3, [r7, #12]
 800a092:	b2db      	uxtb	r3, r3
 800a094:	4413      	add	r3, r2
 800a096:	b2db      	uxtb	r3, r3
}
 800a098:	4618      	mov	r0, r3
 800a09a:	3714      	adds	r7, #20
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b087      	sub	sp, #28
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	60f8      	str	r0, [r7, #12]
 800a0ac:	60b9      	str	r1, [r7, #8]
 800a0ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800a0b4:	68fb      	ldr	r3, [r7, #12]
 800a0b6:	7f1b      	ldrb	r3, [r3, #28]
 800a0b8:	2b01      	cmp	r3, #1
 800a0ba:	d101      	bne.n	800a0c0 <HAL_RTCEx_SetTimeStamp+0x1c>
 800a0bc:	2302      	movs	r3, #2
 800a0be:	e03e      	b.n	800a13e <HAL_RTCEx_SetTimeStamp+0x9a>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	2201      	movs	r2, #1
 800a0c4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800a0c6:	68fb      	ldr	r3, [r7, #12]
 800a0c8:	2202      	movs	r2, #2
 800a0ca:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	689a      	ldr	r2, [r3, #8]
 800a0d2:	4b1e      	ldr	r3, [pc, #120]	; (800a14c <HAL_RTCEx_SetTimeStamp+0xa8>)
 800a0d4:	4013      	ands	r3, r2
 800a0d6:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 800a0d8:	697a      	ldr	r2, [r7, #20]
 800a0da:	68bb      	ldr	r3, [r7, #8]
 800a0dc:	4313      	orrs	r3, r2
 800a0de:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	681b      	ldr	r3, [r3, #0]
 800a0e4:	22ca      	movs	r2, #202	; 0xca
 800a0e6:	625a      	str	r2, [r3, #36]	; 0x24
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	2253      	movs	r2, #83	; 0x53
 800a0ee:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	f022 0206 	bic.w	r2, r2, #6
 800a0fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	681b      	ldr	r3, [r3, #0]
 800a104:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	687a      	ldr	r2, [r7, #4]
 800a10c:	430a      	orrs	r2, r1
 800a10e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	689a      	ldr	r2, [r3, #8]
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a126:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800a128:	68fb      	ldr	r3, [r7, #12]
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	22ff      	movs	r2, #255	; 0xff
 800a12e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	2201      	movs	r2, #1
 800a134:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	2200      	movs	r2, #0
 800a13a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800a13c:	2300      	movs	r3, #0
}
 800a13e:	4618      	mov	r0, r3
 800a140:	371c      	adds	r7, #28
 800a142:	46bd      	mov	sp, r7
 800a144:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a148:	4770      	bx	lr
 800a14a:	bf00      	nop
 800a14c:	fffff7f7 	.word	0xfffff7f7

0800a150 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800a150:	b580      	push	{r7, lr}
 800a152:	b082      	sub	sp, #8
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	2b00      	cmp	r3, #0
 800a15e:	d101      	bne.n	800a164 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 800a160:	2301      	movs	r3, #1
 800a162:	e025      	b.n	800a1b0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a16a:	b2db      	uxtb	r3, r3
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d106      	bne.n	800a17e <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2200      	movs	r2, #0
 800a174:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800a178:	6878      	ldr	r0, [r7, #4]
 800a17a:	f7fb fae9 	bl	8005750 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a17e:	687b      	ldr	r3, [r7, #4]
 800a180:	2202      	movs	r2, #2
 800a182:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800a186:	687b      	ldr	r3, [r7, #4]
 800a188:	681a      	ldr	r2, [r3, #0]
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	3304      	adds	r3, #4
 800a18e:	4619      	mov	r1, r3
 800a190:	4610      	mov	r0, r2
 800a192:	f002 f8dd 	bl	800c350 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	6818      	ldr	r0, [r3, #0]
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	685b      	ldr	r3, [r3, #4]
 800a19e:	461a      	mov	r2, r3
 800a1a0:	6839      	ldr	r1, [r7, #0]
 800a1a2:	f002 f947 	bl	800c434 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a1a6:	687b      	ldr	r3, [r7, #4]
 800a1a8:	2201      	movs	r2, #1
 800a1aa:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 800a1ae:	2300      	movs	r3, #0
}
 800a1b0:	4618      	mov	r0, r3
 800a1b2:	3708      	adds	r7, #8
 800a1b4:	46bd      	mov	sp, r7
 800a1b6:	bd80      	pop	{r7, pc}

0800a1b8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800a1b8:	b580      	push	{r7, lr}
 800a1ba:	b084      	sub	sp, #16
 800a1bc:	af00      	add	r7, sp, #0
 800a1be:	60f8      	str	r0, [r7, #12]
 800a1c0:	60b9      	str	r1, [r7, #8]
 800a1c2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a1c4:	68fb      	ldr	r3, [r7, #12]
 800a1c6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a1ca:	b2db      	uxtb	r3, r3
 800a1cc:	2b02      	cmp	r3, #2
 800a1ce:	d101      	bne.n	800a1d4 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 800a1d0:	2302      	movs	r3, #2
 800a1d2:	e018      	b.n	800a206 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a1d4:	68fb      	ldr	r3, [r7, #12]
 800a1d6:	2202      	movs	r2, #2
 800a1d8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800a1dc:	68fb      	ldr	r3, [r7, #12]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	687a      	ldr	r2, [r7, #4]
 800a1e2:	68b9      	ldr	r1, [r7, #8]
 800a1e4:	4618      	mov	r0, r3
 800a1e6:	f002 f9a5 	bl	800c534 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	2b02      	cmp	r3, #2
 800a1f0:	d104      	bne.n	800a1fc <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800a1f2:	68fb      	ldr	r3, [r7, #12]
 800a1f4:	2205      	movs	r2, #5
 800a1f6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800a1fa:	e003      	b.n	800a204 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800a1fc:	68fb      	ldr	r3, [r7, #12]
 800a1fe:	2201      	movs	r2, #1
 800a200:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 800a204:	2300      	movs	r3, #0
}
 800a206:	4618      	mov	r0, r3
 800a208:	3710      	adds	r7, #16
 800a20a:	46bd      	mov	sp, r7
 800a20c:	bd80      	pop	{r7, pc}

0800a20e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800a20e:	b580      	push	{r7, lr}
 800a210:	b082      	sub	sp, #8
 800a212:	af00      	add	r7, sp, #0
 800a214:	6078      	str	r0, [r7, #4]
 800a216:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800a21e:	b2db      	uxtb	r3, r3
 800a220:	2b02      	cmp	r3, #2
 800a222:	d101      	bne.n	800a228 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 800a224:	2302      	movs	r3, #2
 800a226:	e00e      	b.n	800a246 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	2202      	movs	r2, #2
 800a22c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	6839      	ldr	r1, [r7, #0]
 800a236:	4618      	mov	r0, r3
 800a238:	f002 f99d 	bl	800c576 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2201      	movs	r2, #1
 800a240:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 800a244:	2300      	movs	r3, #0
}
 800a246:	4618      	mov	r0, r3
 800a248:	3708      	adds	r7, #8
 800a24a:	46bd      	mov	sp, r7
 800a24c:	bd80      	pop	{r7, pc}

0800a24e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800a24e:	b580      	push	{r7, lr}
 800a250:	b084      	sub	sp, #16
 800a252:	af00      	add	r7, sp, #0
 800a254:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d101      	bne.n	800a260 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800a25c:	2301      	movs	r3, #1
 800a25e:	e084      	b.n	800a36a <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	2200      	movs	r2, #0
 800a264:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a26c:	b2db      	uxtb	r3, r3
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d106      	bne.n	800a280 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	2200      	movs	r2, #0
 800a276:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800a27a:	6878      	ldr	r0, [r7, #4]
 800a27c:	f7fa ffea 	bl	8005254 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800a280:	687b      	ldr	r3, [r7, #4]
 800a282:	2202      	movs	r2, #2
 800a284:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	681a      	ldr	r2, [r3, #0]
 800a28e:	687b      	ldr	r3, [r7, #4]
 800a290:	681b      	ldr	r3, [r3, #0]
 800a292:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a298:	687b      	ldr	r3, [r7, #4]
 800a29a:	68db      	ldr	r3, [r3, #12]
 800a29c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2a0:	d902      	bls.n	800a2a8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	60fb      	str	r3, [r7, #12]
 800a2a6:	e002      	b.n	800a2ae <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800a2a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a2ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	68db      	ldr	r3, [r3, #12]
 800a2b2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800a2b6:	d007      	beq.n	800a2c8 <HAL_SPI_Init+0x7a>
 800a2b8:	687b      	ldr	r3, [r7, #4]
 800a2ba:	68db      	ldr	r3, [r3, #12]
 800a2bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2c0:	d002      	beq.n	800a2c8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2c2:	687b      	ldr	r3, [r7, #4]
 800a2c4:	2200      	movs	r2, #0
 800a2c6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 800a2c8:	687b      	ldr	r3, [r7, #4]
 800a2ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d10b      	bne.n	800a2e8 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a2d0:	687b      	ldr	r3, [r7, #4]
 800a2d2:	68db      	ldr	r3, [r3, #12]
 800a2d4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a2d8:	d903      	bls.n	800a2e2 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800a2da:	687b      	ldr	r3, [r7, #4]
 800a2dc:	2202      	movs	r2, #2
 800a2de:	631a      	str	r2, [r3, #48]	; 0x30
 800a2e0:	e002      	b.n	800a2e8 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800a2e2:	687b      	ldr	r3, [r7, #4]
 800a2e4:	2201      	movs	r2, #1
 800a2e6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	685a      	ldr	r2, [r3, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	689b      	ldr	r3, [r3, #8]
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	687b      	ldr	r3, [r7, #4]
 800a2f4:	691b      	ldr	r3, [r3, #16]
 800a2f6:	431a      	orrs	r2, r3
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	695b      	ldr	r3, [r3, #20]
 800a2fc:	431a      	orrs	r2, r3
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	699b      	ldr	r3, [r3, #24]
 800a302:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a306:	431a      	orrs	r2, r3
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	69db      	ldr	r3, [r3, #28]
 800a30c:	431a      	orrs	r2, r3
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	6a1b      	ldr	r3, [r3, #32]
 800a312:	ea42 0103 	orr.w	r1, r2, r3
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	430a      	orrs	r2, r1
 800a320:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	699b      	ldr	r3, [r3, #24]
 800a326:	0c1b      	lsrs	r3, r3, #16
 800a328:	f003 0204 	and.w	r2, r3, #4
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a330:	431a      	orrs	r2, r3
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a336:	431a      	orrs	r2, r3
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	68db      	ldr	r3, [r3, #12]
 800a33c:	ea42 0103 	orr.w	r1, r2, r3
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	681b      	ldr	r3, [r3, #0]
 800a344:	68fa      	ldr	r2, [r7, #12]
 800a346:	430a      	orrs	r2, r1
 800a348:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	69da      	ldr	r2, [r3, #28]
 800a350:	687b      	ldr	r3, [r7, #4]
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a358:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	2200      	movs	r2, #0
 800a35e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	2201      	movs	r2, #1
 800a364:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a368:	2300      	movs	r3, #0
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a372:	b580      	push	{r7, lr}
 800a374:	b082      	sub	sp, #8
 800a376:	af00      	add	r7, sp, #0
 800a378:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	2b00      	cmp	r3, #0
 800a37e:	d101      	bne.n	800a384 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a380:	2301      	movs	r3, #1
 800a382:	e01d      	b.n	800a3c0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a38a:	b2db      	uxtb	r3, r3
 800a38c:	2b00      	cmp	r3, #0
 800a38e:	d106      	bne.n	800a39e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a398:	6878      	ldr	r0, [r7, #4]
 800a39a:	f7fa ffcd 	bl	8005338 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a39e:	687b      	ldr	r3, [r7, #4]
 800a3a0:	2202      	movs	r2, #2
 800a3a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	681a      	ldr	r2, [r3, #0]
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	3304      	adds	r3, #4
 800a3ae:	4619      	mov	r1, r3
 800a3b0:	4610      	mov	r0, r2
 800a3b2:	f000 fbcf 	bl	800ab54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	2201      	movs	r2, #1
 800a3ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a3be:	2300      	movs	r3, #0
}
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	3708      	adds	r7, #8
 800a3c4:	46bd      	mov	sp, r7
 800a3c6:	bd80      	pop	{r7, pc}

0800a3c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800a3c8:	b480      	push	{r7}
 800a3ca:	b085      	sub	sp, #20
 800a3cc:	af00      	add	r7, sp, #0
 800a3ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	68da      	ldr	r2, [r3, #12]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f042 0201 	orr.w	r2, r2, #1
 800a3de:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	681b      	ldr	r3, [r3, #0]
 800a3e4:	689a      	ldr	r2, [r3, #8]
 800a3e6:	4b0c      	ldr	r3, [pc, #48]	; (800a418 <HAL_TIM_Base_Start_IT+0x50>)
 800a3e8:	4013      	ands	r3, r2
 800a3ea:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800a3ec:	68fb      	ldr	r3, [r7, #12]
 800a3ee:	2b06      	cmp	r3, #6
 800a3f0:	d00b      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0x42>
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3f8:	d007      	beq.n	800a40a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	681a      	ldr	r2, [r3, #0]
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f042 0201 	orr.w	r2, r2, #1
 800a408:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800a40a:	2300      	movs	r3, #0
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	3714      	adds	r7, #20
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	00010007 	.word	0x00010007

0800a41c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800a41c:	b580      	push	{r7, lr}
 800a41e:	b082      	sub	sp, #8
 800a420:	af00      	add	r7, sp, #0
 800a422:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	2b00      	cmp	r3, #0
 800a428:	d101      	bne.n	800a42e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800a42a:	2301      	movs	r3, #1
 800a42c:	e01d      	b.n	800a46a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a434:	b2db      	uxtb	r3, r3
 800a436:	2b00      	cmp	r3, #0
 800a438:	d106      	bne.n	800a448 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	2200      	movs	r2, #0
 800a43e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800a442:	6878      	ldr	r0, [r7, #4]
 800a444:	f000 f815 	bl	800a472 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	2202      	movs	r2, #2
 800a44c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681a      	ldr	r2, [r3, #0]
 800a454:	687b      	ldr	r3, [r7, #4]
 800a456:	3304      	adds	r3, #4
 800a458:	4619      	mov	r1, r3
 800a45a:	4610      	mov	r0, r2
 800a45c:	f000 fb7a 	bl	800ab54 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	2201      	movs	r2, #1
 800a464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a468:	2300      	movs	r3, #0
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3708      	adds	r7, #8
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}

0800a472 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800a472:	b480      	push	{r7}
 800a474:	b083      	sub	sp, #12
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800a47a:	bf00      	nop
 800a47c:	370c      	adds	r7, #12
 800a47e:	46bd      	mov	sp, r7
 800a480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a484:	4770      	bx	lr

0800a486 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800a486:	b580      	push	{r7, lr}
 800a488:	b082      	sub	sp, #8
 800a48a:	af00      	add	r7, sp, #0
 800a48c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	691b      	ldr	r3, [r3, #16]
 800a494:	f003 0302 	and.w	r3, r3, #2
 800a498:	2b02      	cmp	r3, #2
 800a49a:	d122      	bne.n	800a4e2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	68db      	ldr	r3, [r3, #12]
 800a4a2:	f003 0302 	and.w	r3, r3, #2
 800a4a6:	2b02      	cmp	r3, #2
 800a4a8:	d11b      	bne.n	800a4e2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f06f 0202 	mvn.w	r2, #2
 800a4b2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	2201      	movs	r2, #1
 800a4b8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	699b      	ldr	r3, [r3, #24]
 800a4c0:	f003 0303 	and.w	r3, r3, #3
 800a4c4:	2b00      	cmp	r3, #0
 800a4c6:	d003      	beq.n	800a4d0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a4c8:	6878      	ldr	r0, [r7, #4]
 800a4ca:	f000 fb25 	bl	800ab18 <HAL_TIM_IC_CaptureCallback>
 800a4ce:	e005      	b.n	800a4dc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f000 fb17 	bl	800ab04 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a4d6:	6878      	ldr	r0, [r7, #4]
 800a4d8:	f000 fb28 	bl	800ab2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	2200      	movs	r2, #0
 800a4e0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	f003 0304 	and.w	r3, r3, #4
 800a4ec:	2b04      	cmp	r3, #4
 800a4ee:	d122      	bne.n	800a536 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	68db      	ldr	r3, [r3, #12]
 800a4f6:	f003 0304 	and.w	r3, r3, #4
 800a4fa:	2b04      	cmp	r3, #4
 800a4fc:	d11b      	bne.n	800a536 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a4fe:	687b      	ldr	r3, [r7, #4]
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	f06f 0204 	mvn.w	r2, #4
 800a506:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	2202      	movs	r2, #2
 800a50c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a50e:	687b      	ldr	r3, [r7, #4]
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	699b      	ldr	r3, [r3, #24]
 800a514:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d003      	beq.n	800a524 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a51c:	6878      	ldr	r0, [r7, #4]
 800a51e:	f000 fafb 	bl	800ab18 <HAL_TIM_IC_CaptureCallback>
 800a522:	e005      	b.n	800a530 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a524:	6878      	ldr	r0, [r7, #4]
 800a526:	f000 faed 	bl	800ab04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a52a:	6878      	ldr	r0, [r7, #4]
 800a52c:	f000 fafe 	bl	800ab2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	2200      	movs	r2, #0
 800a534:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	691b      	ldr	r3, [r3, #16]
 800a53c:	f003 0308 	and.w	r3, r3, #8
 800a540:	2b08      	cmp	r3, #8
 800a542:	d122      	bne.n	800a58a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	68db      	ldr	r3, [r3, #12]
 800a54a:	f003 0308 	and.w	r3, r3, #8
 800a54e:	2b08      	cmp	r3, #8
 800a550:	d11b      	bne.n	800a58a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	f06f 0208 	mvn.w	r2, #8
 800a55a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	2204      	movs	r2, #4
 800a560:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a562:	687b      	ldr	r3, [r7, #4]
 800a564:	681b      	ldr	r3, [r3, #0]
 800a566:	69db      	ldr	r3, [r3, #28]
 800a568:	f003 0303 	and.w	r3, r3, #3
 800a56c:	2b00      	cmp	r3, #0
 800a56e:	d003      	beq.n	800a578 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a570:	6878      	ldr	r0, [r7, #4]
 800a572:	f000 fad1 	bl	800ab18 <HAL_TIM_IC_CaptureCallback>
 800a576:	e005      	b.n	800a584 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a578:	6878      	ldr	r0, [r7, #4]
 800a57a:	f000 fac3 	bl	800ab04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a57e:	6878      	ldr	r0, [r7, #4]
 800a580:	f000 fad4 	bl	800ab2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	2200      	movs	r2, #0
 800a588:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	691b      	ldr	r3, [r3, #16]
 800a590:	f003 0310 	and.w	r3, r3, #16
 800a594:	2b10      	cmp	r3, #16
 800a596:	d122      	bne.n	800a5de <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68db      	ldr	r3, [r3, #12]
 800a59e:	f003 0310 	and.w	r3, r3, #16
 800a5a2:	2b10      	cmp	r3, #16
 800a5a4:	d11b      	bne.n	800a5de <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	f06f 0210 	mvn.w	r2, #16
 800a5ae:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	2208      	movs	r2, #8
 800a5b4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	69db      	ldr	r3, [r3, #28]
 800a5bc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a5c0:	2b00      	cmp	r3, #0
 800a5c2:	d003      	beq.n	800a5cc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	f000 faa7 	bl	800ab18 <HAL_TIM_IC_CaptureCallback>
 800a5ca:	e005      	b.n	800a5d8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a5cc:	6878      	ldr	r0, [r7, #4]
 800a5ce:	f000 fa99 	bl	800ab04 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 faaa 	bl	800ab2c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	2200      	movs	r2, #0
 800a5dc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a5de:	687b      	ldr	r3, [r7, #4]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	691b      	ldr	r3, [r3, #16]
 800a5e4:	f003 0301 	and.w	r3, r3, #1
 800a5e8:	2b01      	cmp	r3, #1
 800a5ea:	d10e      	bne.n	800a60a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	68db      	ldr	r3, [r3, #12]
 800a5f2:	f003 0301 	and.w	r3, r3, #1
 800a5f6:	2b01      	cmp	r3, #1
 800a5f8:	d107      	bne.n	800a60a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	f06f 0201 	mvn.w	r2, #1
 800a602:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f7f8 fdf7 	bl	80031f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	691b      	ldr	r3, [r3, #16]
 800a610:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a614:	2b80      	cmp	r3, #128	; 0x80
 800a616:	d10e      	bne.n	800a636 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	68db      	ldr	r3, [r3, #12]
 800a61e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a622:	2b80      	cmp	r3, #128	; 0x80
 800a624:	d107      	bne.n	800a636 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a62e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a630:	6878      	ldr	r0, [r7, #4]
 800a632:	f000 ffcd 	bl	800b5d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a644:	d10e      	bne.n	800a664 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a646:	687b      	ldr	r3, [r7, #4]
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	68db      	ldr	r3, [r3, #12]
 800a64c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a650:	2b80      	cmp	r3, #128	; 0x80
 800a652:	d107      	bne.n	800a664 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a65c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800a65e:	6878      	ldr	r0, [r7, #4]
 800a660:	f000 ffc0 	bl	800b5e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a66e:	2b40      	cmp	r3, #64	; 0x40
 800a670:	d10e      	bne.n	800a690 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	681b      	ldr	r3, [r3, #0]
 800a676:	68db      	ldr	r3, [r3, #12]
 800a678:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a67c:	2b40      	cmp	r3, #64	; 0x40
 800a67e:	d107      	bne.n	800a690 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a688:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a68a:	6878      	ldr	r0, [r7, #4]
 800a68c:	f000 fa58 	bl	800ab40 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	691b      	ldr	r3, [r3, #16]
 800a696:	f003 0320 	and.w	r3, r3, #32
 800a69a:	2b20      	cmp	r3, #32
 800a69c:	d10e      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68db      	ldr	r3, [r3, #12]
 800a6a4:	f003 0320 	and.w	r3, r3, #32
 800a6a8:	2b20      	cmp	r3, #32
 800a6aa:	d107      	bne.n	800a6bc <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f06f 0220 	mvn.w	r2, #32
 800a6b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f000 ff80 	bl	800b5bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a6bc:	bf00      	nop
 800a6be:	3708      	adds	r7, #8
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b084      	sub	sp, #16
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a6d6:	2b01      	cmp	r3, #1
 800a6d8:	d101      	bne.n	800a6de <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a6da:	2302      	movs	r3, #2
 800a6dc:	e105      	b.n	800a8ea <HAL_TIM_PWM_ConfigChannel+0x226>
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2201      	movs	r2, #1
 800a6e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	2202      	movs	r2, #2
 800a6ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	2b14      	cmp	r3, #20
 800a6f2:	f200 80f0 	bhi.w	800a8d6 <HAL_TIM_PWM_ConfigChannel+0x212>
 800a6f6:	a201      	add	r2, pc, #4	; (adr r2, 800a6fc <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a6f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a6fc:	0800a751 	.word	0x0800a751
 800a700:	0800a8d7 	.word	0x0800a8d7
 800a704:	0800a8d7 	.word	0x0800a8d7
 800a708:	0800a8d7 	.word	0x0800a8d7
 800a70c:	0800a791 	.word	0x0800a791
 800a710:	0800a8d7 	.word	0x0800a8d7
 800a714:	0800a8d7 	.word	0x0800a8d7
 800a718:	0800a8d7 	.word	0x0800a8d7
 800a71c:	0800a7d3 	.word	0x0800a7d3
 800a720:	0800a8d7 	.word	0x0800a8d7
 800a724:	0800a8d7 	.word	0x0800a8d7
 800a728:	0800a8d7 	.word	0x0800a8d7
 800a72c:	0800a813 	.word	0x0800a813
 800a730:	0800a8d7 	.word	0x0800a8d7
 800a734:	0800a8d7 	.word	0x0800a8d7
 800a738:	0800a8d7 	.word	0x0800a8d7
 800a73c:	0800a855 	.word	0x0800a855
 800a740:	0800a8d7 	.word	0x0800a8d7
 800a744:	0800a8d7 	.word	0x0800a8d7
 800a748:	0800a8d7 	.word	0x0800a8d7
 800a74c:	0800a895 	.word	0x0800a895
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a750:	68fb      	ldr	r3, [r7, #12]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	68b9      	ldr	r1, [r7, #8]
 800a756:	4618      	mov	r0, r3
 800a758:	f000 fa9c 	bl	800ac94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	699a      	ldr	r2, [r3, #24]
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f042 0208 	orr.w	r2, r2, #8
 800a76a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	699a      	ldr	r2, [r3, #24]
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 0204 	bic.w	r2, r2, #4
 800a77a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a77c:	68fb      	ldr	r3, [r7, #12]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	6999      	ldr	r1, [r3, #24]
 800a782:	68bb      	ldr	r3, [r7, #8]
 800a784:	691a      	ldr	r2, [r3, #16]
 800a786:	68fb      	ldr	r3, [r7, #12]
 800a788:	681b      	ldr	r3, [r3, #0]
 800a78a:	430a      	orrs	r2, r1
 800a78c:	619a      	str	r2, [r3, #24]
      break;
 800a78e:	e0a3      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	681b      	ldr	r3, [r3, #0]
 800a794:	68b9      	ldr	r1, [r7, #8]
 800a796:	4618      	mov	r0, r3
 800a798:	f000 faee 	bl	800ad78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a79c:	68fb      	ldr	r3, [r7, #12]
 800a79e:	681b      	ldr	r3, [r3, #0]
 800a7a0:	699a      	ldr	r2, [r3, #24]
 800a7a2:	68fb      	ldr	r3, [r7, #12]
 800a7a4:	681b      	ldr	r3, [r3, #0]
 800a7a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a7aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	699a      	ldr	r2, [r3, #24]
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	6999      	ldr	r1, [r3, #24]
 800a7c2:	68bb      	ldr	r3, [r7, #8]
 800a7c4:	691b      	ldr	r3, [r3, #16]
 800a7c6:	021a      	lsls	r2, r3, #8
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	430a      	orrs	r2, r1
 800a7ce:	619a      	str	r2, [r3, #24]
      break;
 800a7d0:	e082      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	68b9      	ldr	r1, [r7, #8]
 800a7d8:	4618      	mov	r0, r3
 800a7da:	f000 fb45 	bl	800ae68 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a7de:	68fb      	ldr	r3, [r7, #12]
 800a7e0:	681b      	ldr	r3, [r3, #0]
 800a7e2:	69da      	ldr	r2, [r3, #28]
 800a7e4:	68fb      	ldr	r3, [r7, #12]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	f042 0208 	orr.w	r2, r2, #8
 800a7ec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a7ee:	68fb      	ldr	r3, [r7, #12]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	69da      	ldr	r2, [r3, #28]
 800a7f4:	68fb      	ldr	r3, [r7, #12]
 800a7f6:	681b      	ldr	r3, [r3, #0]
 800a7f8:	f022 0204 	bic.w	r2, r2, #4
 800a7fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a7fe:	68fb      	ldr	r3, [r7, #12]
 800a800:	681b      	ldr	r3, [r3, #0]
 800a802:	69d9      	ldr	r1, [r3, #28]
 800a804:	68bb      	ldr	r3, [r7, #8]
 800a806:	691a      	ldr	r2, [r3, #16]
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	681b      	ldr	r3, [r3, #0]
 800a80c:	430a      	orrs	r2, r1
 800a80e:	61da      	str	r2, [r3, #28]
      break;
 800a810:	e062      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a812:	68fb      	ldr	r3, [r7, #12]
 800a814:	681b      	ldr	r3, [r3, #0]
 800a816:	68b9      	ldr	r1, [r7, #8]
 800a818:	4618      	mov	r0, r3
 800a81a:	f000 fb9b 	bl	800af54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	69da      	ldr	r2, [r3, #28]
 800a824:	68fb      	ldr	r3, [r7, #12]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a82c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	69da      	ldr	r2, [r3, #28]
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	681b      	ldr	r3, [r3, #0]
 800a838:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a83c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	681b      	ldr	r3, [r3, #0]
 800a842:	69d9      	ldr	r1, [r3, #28]
 800a844:	68bb      	ldr	r3, [r7, #8]
 800a846:	691b      	ldr	r3, [r3, #16]
 800a848:	021a      	lsls	r2, r3, #8
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	430a      	orrs	r2, r1
 800a850:	61da      	str	r2, [r3, #28]
      break;
 800a852:	e041      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	68b9      	ldr	r1, [r7, #8]
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fbd2 	bl	800b004 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f042 0208 	orr.w	r2, r2, #8
 800a86e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	681b      	ldr	r3, [r3, #0]
 800a874:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f022 0204 	bic.w	r2, r2, #4
 800a87e:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a886:	68bb      	ldr	r3, [r7, #8]
 800a888:	691a      	ldr	r2, [r3, #16]
 800a88a:	68fb      	ldr	r3, [r7, #12]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	430a      	orrs	r2, r1
 800a890:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a892:	e021      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800a894:	68fb      	ldr	r3, [r7, #12]
 800a896:	681b      	ldr	r3, [r3, #0]
 800a898:	68b9      	ldr	r1, [r7, #8]
 800a89a:	4618      	mov	r0, r3
 800a89c:	f000 fc04 	bl	800b0a8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	681b      	ldr	r3, [r3, #0]
 800a8a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a8ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800a8b0:	68fb      	ldr	r3, [r7, #12]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800a8b6:	68fb      	ldr	r3, [r7, #12]
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a8be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800a8c0:	68fb      	ldr	r3, [r7, #12]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800a8c6:	68bb      	ldr	r3, [r7, #8]
 800a8c8:	691b      	ldr	r3, [r3, #16]
 800a8ca:	021a      	lsls	r2, r3, #8
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	430a      	orrs	r2, r1
 800a8d2:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800a8d4:	e000      	b.n	800a8d8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 800a8d6:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	2201      	movs	r2, #1
 800a8dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a8e0:	68fb      	ldr	r3, [r7, #12]
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a8e8:	2300      	movs	r3, #0
}
 800a8ea:	4618      	mov	r0, r3
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop

0800a8f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a8f4:	b580      	push	{r7, lr}
 800a8f6:	b084      	sub	sp, #16
 800a8f8:	af00      	add	r7, sp, #0
 800a8fa:	6078      	str	r0, [r7, #4]
 800a8fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a904:	2b01      	cmp	r3, #1
 800a906:	d101      	bne.n	800a90c <HAL_TIM_ConfigClockSource+0x18>
 800a908:	2302      	movs	r3, #2
 800a90a:	e0b3      	b.n	800aa74 <HAL_TIM_ConfigClockSource+0x180>
 800a90c:	687b      	ldr	r3, [r7, #4]
 800a90e:	2201      	movs	r2, #1
 800a910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2202      	movs	r2, #2
 800a918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	689b      	ldr	r3, [r3, #8]
 800a922:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a924:	68fa      	ldr	r2, [r7, #12]
 800a926:	4b55      	ldr	r3, [pc, #340]	; (800aa7c <HAL_TIM_ConfigClockSource+0x188>)
 800a928:	4013      	ands	r3, r2
 800a92a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a92c:	68fb      	ldr	r3, [r7, #12]
 800a92e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a932:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	68fa      	ldr	r2, [r7, #12]
 800a93a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	681b      	ldr	r3, [r3, #0]
 800a940:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a944:	d03e      	beq.n	800a9c4 <HAL_TIM_ConfigClockSource+0xd0>
 800a946:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a94a:	f200 8087 	bhi.w	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a94e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a952:	f000 8085 	beq.w	800aa60 <HAL_TIM_ConfigClockSource+0x16c>
 800a956:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a95a:	d87f      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a95c:	2b70      	cmp	r3, #112	; 0x70
 800a95e:	d01a      	beq.n	800a996 <HAL_TIM_ConfigClockSource+0xa2>
 800a960:	2b70      	cmp	r3, #112	; 0x70
 800a962:	d87b      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a964:	2b60      	cmp	r3, #96	; 0x60
 800a966:	d050      	beq.n	800aa0a <HAL_TIM_ConfigClockSource+0x116>
 800a968:	2b60      	cmp	r3, #96	; 0x60
 800a96a:	d877      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a96c:	2b50      	cmp	r3, #80	; 0x50
 800a96e:	d03c      	beq.n	800a9ea <HAL_TIM_ConfigClockSource+0xf6>
 800a970:	2b50      	cmp	r3, #80	; 0x50
 800a972:	d873      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a974:	2b40      	cmp	r3, #64	; 0x40
 800a976:	d058      	beq.n	800aa2a <HAL_TIM_ConfigClockSource+0x136>
 800a978:	2b40      	cmp	r3, #64	; 0x40
 800a97a:	d86f      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a97c:	2b30      	cmp	r3, #48	; 0x30
 800a97e:	d064      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x156>
 800a980:	2b30      	cmp	r3, #48	; 0x30
 800a982:	d86b      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a984:	2b20      	cmp	r3, #32
 800a986:	d060      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x156>
 800a988:	2b20      	cmp	r3, #32
 800a98a:	d867      	bhi.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d05c      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x156>
 800a990:	2b10      	cmp	r3, #16
 800a992:	d05a      	beq.n	800aa4a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a994:	e062      	b.n	800aa5c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	6818      	ldr	r0, [r3, #0]
 800a99a:	683b      	ldr	r3, [r7, #0]
 800a99c:	6899      	ldr	r1, [r3, #8]
 800a99e:	683b      	ldr	r3, [r7, #0]
 800a9a0:	685a      	ldr	r2, [r3, #4]
 800a9a2:	683b      	ldr	r3, [r7, #0]
 800a9a4:	68db      	ldr	r3, [r3, #12]
 800a9a6:	f000 fcdd 	bl	800b364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a9b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	609a      	str	r2, [r3, #8]
      break;
 800a9c2:	e04e      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	6818      	ldr	r0, [r3, #0]
 800a9c8:	683b      	ldr	r3, [r7, #0]
 800a9ca:	6899      	ldr	r1, [r3, #8]
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	685a      	ldr	r2, [r3, #4]
 800a9d0:	683b      	ldr	r3, [r7, #0]
 800a9d2:	68db      	ldr	r3, [r3, #12]
 800a9d4:	f000 fcc6 	bl	800b364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a9d8:	687b      	ldr	r3, [r7, #4]
 800a9da:	681b      	ldr	r3, [r3, #0]
 800a9dc:	689a      	ldr	r2, [r3, #8]
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a9e6:	609a      	str	r2, [r3, #8]
      break;
 800a9e8:	e03b      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6818      	ldr	r0, [r3, #0]
 800a9ee:	683b      	ldr	r3, [r7, #0]
 800a9f0:	6859      	ldr	r1, [r3, #4]
 800a9f2:	683b      	ldr	r3, [r7, #0]
 800a9f4:	68db      	ldr	r3, [r3, #12]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f000 fc3a 	bl	800b270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	2150      	movs	r1, #80	; 0x50
 800aa02:	4618      	mov	r0, r3
 800aa04:	f000 fc93 	bl	800b32e <TIM_ITRx_SetConfig>
      break;
 800aa08:	e02b      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6818      	ldr	r0, [r3, #0]
 800aa0e:	683b      	ldr	r3, [r7, #0]
 800aa10:	6859      	ldr	r1, [r3, #4]
 800aa12:	683b      	ldr	r3, [r7, #0]
 800aa14:	68db      	ldr	r3, [r3, #12]
 800aa16:	461a      	mov	r2, r3
 800aa18:	f000 fc59 	bl	800b2ce <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	681b      	ldr	r3, [r3, #0]
 800aa20:	2160      	movs	r1, #96	; 0x60
 800aa22:	4618      	mov	r0, r3
 800aa24:	f000 fc83 	bl	800b32e <TIM_ITRx_SetConfig>
      break;
 800aa28:	e01b      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6818      	ldr	r0, [r3, #0]
 800aa2e:	683b      	ldr	r3, [r7, #0]
 800aa30:	6859      	ldr	r1, [r3, #4]
 800aa32:	683b      	ldr	r3, [r7, #0]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	461a      	mov	r2, r3
 800aa38:	f000 fc1a 	bl	800b270 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	681b      	ldr	r3, [r3, #0]
 800aa40:	2140      	movs	r1, #64	; 0x40
 800aa42:	4618      	mov	r0, r3
 800aa44:	f000 fc73 	bl	800b32e <TIM_ITRx_SetConfig>
      break;
 800aa48:	e00b      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aa4a:	687b      	ldr	r3, [r7, #4]
 800aa4c:	681a      	ldr	r2, [r3, #0]
 800aa4e:	683b      	ldr	r3, [r7, #0]
 800aa50:	681b      	ldr	r3, [r3, #0]
 800aa52:	4619      	mov	r1, r3
 800aa54:	4610      	mov	r0, r2
 800aa56:	f000 fc6a 	bl	800b32e <TIM_ITRx_SetConfig>
      break;
 800aa5a:	e002      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa5c:	bf00      	nop
 800aa5e:	e000      	b.n	800aa62 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800aa60:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	2201      	movs	r2, #1
 800aa66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aa6a:	687b      	ldr	r3, [r7, #4]
 800aa6c:	2200      	movs	r2, #0
 800aa6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aa72:	2300      	movs	r3, #0
}
 800aa74:	4618      	mov	r0, r3
 800aa76:	3710      	adds	r7, #16
 800aa78:	46bd      	mov	sp, r7
 800aa7a:	bd80      	pop	{r7, pc}
 800aa7c:	fffeff88 	.word	0xfffeff88

0800aa80 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800aa80:	b580      	push	{r7, lr}
 800aa82:	b082      	sub	sp, #8
 800aa84:	af00      	add	r7, sp, #0
 800aa86:	6078      	str	r0, [r7, #4]
 800aa88:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800aa90:	2b01      	cmp	r3, #1
 800aa92:	d101      	bne.n	800aa98 <HAL_TIM_SlaveConfigSynchro+0x18>
 800aa94:	2302      	movs	r3, #2
 800aa96:	e031      	b.n	800aafc <HAL_TIM_SlaveConfigSynchro+0x7c>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	2201      	movs	r2, #1
 800aa9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	2202      	movs	r2, #2
 800aaa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800aaa8:	6839      	ldr	r1, [r7, #0]
 800aaaa:	6878      	ldr	r0, [r7, #4]
 800aaac:	f000 fb50 	bl	800b150 <TIM_SlaveTimer_SetConfig>
 800aab0:	4603      	mov	r3, r0
 800aab2:	2b00      	cmp	r3, #0
 800aab4:	d009      	beq.n	800aaca <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	2201      	movs	r2, #1
 800aaba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	2200      	movs	r2, #0
 800aac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 800aac6:	2301      	movs	r3, #1
 800aac8:	e018      	b.n	800aafc <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	68da      	ldr	r2, [r3, #12]
 800aad0:	687b      	ldr	r3, [r7, #4]
 800aad2:	681b      	ldr	r3, [r3, #0]
 800aad4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aad8:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	68da      	ldr	r2, [r3, #12]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800aae8:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	2201      	movs	r2, #1
 800aaee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	2200      	movs	r2, #0
 800aaf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800aafa:	2300      	movs	r3, #0
}
 800aafc:	4618      	mov	r0, r3
 800aafe:	3708      	adds	r7, #8
 800ab00:	46bd      	mov	sp, r7
 800ab02:	bd80      	pop	{r7, pc}

0800ab04 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ab04:	b480      	push	{r7}
 800ab06:	b083      	sub	sp, #12
 800ab08:	af00      	add	r7, sp, #0
 800ab0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ab0c:	bf00      	nop
 800ab0e:	370c      	adds	r7, #12
 800ab10:	46bd      	mov	sp, r7
 800ab12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab16:	4770      	bx	lr

0800ab18 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ab18:	b480      	push	{r7}
 800ab1a:	b083      	sub	sp, #12
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ab20:	bf00      	nop
 800ab22:	370c      	adds	r7, #12
 800ab24:	46bd      	mov	sp, r7
 800ab26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab2a:	4770      	bx	lr

0800ab2c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ab2c:	b480      	push	{r7}
 800ab2e:	b083      	sub	sp, #12
 800ab30:	af00      	add	r7, sp, #0
 800ab32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ab34:	bf00      	nop
 800ab36:	370c      	adds	r7, #12
 800ab38:	46bd      	mov	sp, r7
 800ab3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab3e:	4770      	bx	lr

0800ab40 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ab40:	b480      	push	{r7}
 800ab42:	b083      	sub	sp, #12
 800ab44:	af00      	add	r7, sp, #0
 800ab46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ab48:	bf00      	nop
 800ab4a:	370c      	adds	r7, #12
 800ab4c:	46bd      	mov	sp, r7
 800ab4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab52:	4770      	bx	lr

0800ab54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800ab54:	b480      	push	{r7}
 800ab56:	b085      	sub	sp, #20
 800ab58:	af00      	add	r7, sp, #0
 800ab5a:	6078      	str	r0, [r7, #4]
 800ab5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	681b      	ldr	r3, [r3, #0]
 800ab62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	4a40      	ldr	r2, [pc, #256]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800ab68:	4293      	cmp	r3, r2
 800ab6a:	d013      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab6c:	687b      	ldr	r3, [r7, #4]
 800ab6e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800ab72:	d00f      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab74:	687b      	ldr	r3, [r7, #4]
 800ab76:	4a3d      	ldr	r2, [pc, #244]	; (800ac6c <TIM_Base_SetConfig+0x118>)
 800ab78:	4293      	cmp	r3, r2
 800ab7a:	d00b      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	4a3c      	ldr	r2, [pc, #240]	; (800ac70 <TIM_Base_SetConfig+0x11c>)
 800ab80:	4293      	cmp	r3, r2
 800ab82:	d007      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	4a3b      	ldr	r2, [pc, #236]	; (800ac74 <TIM_Base_SetConfig+0x120>)
 800ab88:	4293      	cmp	r3, r2
 800ab8a:	d003      	beq.n	800ab94 <TIM_Base_SetConfig+0x40>
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	4a3a      	ldr	r2, [pc, #232]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d108      	bne.n	800aba6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ab94:	68fb      	ldr	r3, [r7, #12]
 800ab96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	685b      	ldr	r3, [r3, #4]
 800aba0:	68fa      	ldr	r2, [r7, #12]
 800aba2:	4313      	orrs	r3, r2
 800aba4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	4a2f      	ldr	r2, [pc, #188]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800abaa:	4293      	cmp	r3, r2
 800abac:	d02b      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abb4:	d027      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	4a2c      	ldr	r2, [pc, #176]	; (800ac6c <TIM_Base_SetConfig+0x118>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d023      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	4a2b      	ldr	r2, [pc, #172]	; (800ac70 <TIM_Base_SetConfig+0x11c>)
 800abc2:	4293      	cmp	r3, r2
 800abc4:	d01f      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	4a2a      	ldr	r2, [pc, #168]	; (800ac74 <TIM_Base_SetConfig+0x120>)
 800abca:	4293      	cmp	r3, r2
 800abcc:	d01b      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	4a29      	ldr	r2, [pc, #164]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d017      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	4a28      	ldr	r2, [pc, #160]	; (800ac7c <TIM_Base_SetConfig+0x128>)
 800abda:	4293      	cmp	r3, r2
 800abdc:	d013      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	4a27      	ldr	r2, [pc, #156]	; (800ac80 <TIM_Base_SetConfig+0x12c>)
 800abe2:	4293      	cmp	r3, r2
 800abe4:	d00f      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abe6:	687b      	ldr	r3, [r7, #4]
 800abe8:	4a26      	ldr	r2, [pc, #152]	; (800ac84 <TIM_Base_SetConfig+0x130>)
 800abea:	4293      	cmp	r3, r2
 800abec:	d00b      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	4a25      	ldr	r2, [pc, #148]	; (800ac88 <TIM_Base_SetConfig+0x134>)
 800abf2:	4293      	cmp	r3, r2
 800abf4:	d007      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abf6:	687b      	ldr	r3, [r7, #4]
 800abf8:	4a24      	ldr	r2, [pc, #144]	; (800ac8c <TIM_Base_SetConfig+0x138>)
 800abfa:	4293      	cmp	r3, r2
 800abfc:	d003      	beq.n	800ac06 <TIM_Base_SetConfig+0xb2>
 800abfe:	687b      	ldr	r3, [r7, #4]
 800ac00:	4a23      	ldr	r2, [pc, #140]	; (800ac90 <TIM_Base_SetConfig+0x13c>)
 800ac02:	4293      	cmp	r3, r2
 800ac04:	d108      	bne.n	800ac18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800ac0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800ac0e:	683b      	ldr	r3, [r7, #0]
 800ac10:	68db      	ldr	r3, [r3, #12]
 800ac12:	68fa      	ldr	r2, [r7, #12]
 800ac14:	4313      	orrs	r3, r2
 800ac16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800ac18:	68fb      	ldr	r3, [r7, #12]
 800ac1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800ac1e:	683b      	ldr	r3, [r7, #0]
 800ac20:	695b      	ldr	r3, [r3, #20]
 800ac22:	4313      	orrs	r3, r2
 800ac24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	68fa      	ldr	r2, [r7, #12]
 800ac2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800ac2c:	683b      	ldr	r3, [r7, #0]
 800ac2e:	689a      	ldr	r2, [r3, #8]
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800ac34:	683b      	ldr	r3, [r7, #0]
 800ac36:	681a      	ldr	r2, [r3, #0]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	4a0a      	ldr	r2, [pc, #40]	; (800ac68 <TIM_Base_SetConfig+0x114>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d003      	beq.n	800ac4c <TIM_Base_SetConfig+0xf8>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	4a0c      	ldr	r2, [pc, #48]	; (800ac78 <TIM_Base_SetConfig+0x124>)
 800ac48:	4293      	cmp	r3, r2
 800ac4a:	d103      	bne.n	800ac54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	691a      	ldr	r2, [r3, #16]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	2201      	movs	r2, #1
 800ac58:	615a      	str	r2, [r3, #20]
}
 800ac5a:	bf00      	nop
 800ac5c:	3714      	adds	r7, #20
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	40010000 	.word	0x40010000
 800ac6c:	40000400 	.word	0x40000400
 800ac70:	40000800 	.word	0x40000800
 800ac74:	40000c00 	.word	0x40000c00
 800ac78:	40010400 	.word	0x40010400
 800ac7c:	40014000 	.word	0x40014000
 800ac80:	40014400 	.word	0x40014400
 800ac84:	40014800 	.word	0x40014800
 800ac88:	40001800 	.word	0x40001800
 800ac8c:	40001c00 	.word	0x40001c00
 800ac90:	40002000 	.word	0x40002000

0800ac94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ac94:	b480      	push	{r7}
 800ac96:	b087      	sub	sp, #28
 800ac98:	af00      	add	r7, sp, #0
 800ac9a:	6078      	str	r0, [r7, #4]
 800ac9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6a1b      	ldr	r3, [r3, #32]
 800aca2:	f023 0201 	bic.w	r2, r3, #1
 800aca6:	687b      	ldr	r3, [r7, #4]
 800aca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	6a1b      	ldr	r3, [r3, #32]
 800acae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800acb0:	687b      	ldr	r3, [r7, #4]
 800acb2:	685b      	ldr	r3, [r3, #4]
 800acb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800acb6:	687b      	ldr	r3, [r7, #4]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800acbc:	68fa      	ldr	r2, [r7, #12]
 800acbe:	4b2b      	ldr	r3, [pc, #172]	; (800ad6c <TIM_OC1_SetConfig+0xd8>)
 800acc0:	4013      	ands	r3, r2
 800acc2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	f023 0303 	bic.w	r3, r3, #3
 800acca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800accc:	683b      	ldr	r3, [r7, #0]
 800acce:	681b      	ldr	r3, [r3, #0]
 800acd0:	68fa      	ldr	r2, [r7, #12]
 800acd2:	4313      	orrs	r3, r2
 800acd4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800acd6:	697b      	ldr	r3, [r7, #20]
 800acd8:	f023 0302 	bic.w	r3, r3, #2
 800acdc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800acde:	683b      	ldr	r3, [r7, #0]
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	697a      	ldr	r2, [r7, #20]
 800ace4:	4313      	orrs	r3, r2
 800ace6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	4a21      	ldr	r2, [pc, #132]	; (800ad70 <TIM_OC1_SetConfig+0xdc>)
 800acec:	4293      	cmp	r3, r2
 800acee:	d003      	beq.n	800acf8 <TIM_OC1_SetConfig+0x64>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	4a20      	ldr	r2, [pc, #128]	; (800ad74 <TIM_OC1_SetConfig+0xe0>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d10c      	bne.n	800ad12 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800acf8:	697b      	ldr	r3, [r7, #20]
 800acfa:	f023 0308 	bic.w	r3, r3, #8
 800acfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800ad00:	683b      	ldr	r3, [r7, #0]
 800ad02:	68db      	ldr	r3, [r3, #12]
 800ad04:	697a      	ldr	r2, [r7, #20]
 800ad06:	4313      	orrs	r3, r2
 800ad08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800ad0a:	697b      	ldr	r3, [r7, #20]
 800ad0c:	f023 0304 	bic.w	r3, r3, #4
 800ad10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	4a16      	ldr	r2, [pc, #88]	; (800ad70 <TIM_OC1_SetConfig+0xdc>)
 800ad16:	4293      	cmp	r3, r2
 800ad18:	d003      	beq.n	800ad22 <TIM_OC1_SetConfig+0x8e>
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	4a15      	ldr	r2, [pc, #84]	; (800ad74 <TIM_OC1_SetConfig+0xe0>)
 800ad1e:	4293      	cmp	r3, r2
 800ad20:	d111      	bne.n	800ad46 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800ad22:	693b      	ldr	r3, [r7, #16]
 800ad24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800ad28:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800ad2a:	693b      	ldr	r3, [r7, #16]
 800ad2c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800ad30:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800ad32:	683b      	ldr	r3, [r7, #0]
 800ad34:	695b      	ldr	r3, [r3, #20]
 800ad36:	693a      	ldr	r2, [r7, #16]
 800ad38:	4313      	orrs	r3, r2
 800ad3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800ad3c:	683b      	ldr	r3, [r7, #0]
 800ad3e:	699b      	ldr	r3, [r3, #24]
 800ad40:	693a      	ldr	r2, [r7, #16]
 800ad42:	4313      	orrs	r3, r2
 800ad44:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	693a      	ldr	r2, [r7, #16]
 800ad4a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	68fa      	ldr	r2, [r7, #12]
 800ad50:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800ad52:	683b      	ldr	r3, [r7, #0]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	697a      	ldr	r2, [r7, #20]
 800ad5e:	621a      	str	r2, [r3, #32]
}
 800ad60:	bf00      	nop
 800ad62:	371c      	adds	r7, #28
 800ad64:	46bd      	mov	sp, r7
 800ad66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad6a:	4770      	bx	lr
 800ad6c:	fffeff8f 	.word	0xfffeff8f
 800ad70:	40010000 	.word	0x40010000
 800ad74:	40010400 	.word	0x40010400

0800ad78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	b087      	sub	sp, #28
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
 800ad80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	6a1b      	ldr	r3, [r3, #32]
 800ad86:	f023 0210 	bic.w	r2, r3, #16
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	6a1b      	ldr	r3, [r3, #32]
 800ad92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ad94:	687b      	ldr	r3, [r7, #4]
 800ad96:	685b      	ldr	r3, [r3, #4]
 800ad98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	699b      	ldr	r3, [r3, #24]
 800ad9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800ada0:	68fa      	ldr	r2, [r7, #12]
 800ada2:	4b2e      	ldr	r3, [pc, #184]	; (800ae5c <TIM_OC2_SetConfig+0xe4>)
 800ada4:	4013      	ands	r3, r2
 800ada6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800adae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800adb0:	683b      	ldr	r3, [r7, #0]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	021b      	lsls	r3, r3, #8
 800adb6:	68fa      	ldr	r2, [r7, #12]
 800adb8:	4313      	orrs	r3, r2
 800adba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	f023 0320 	bic.w	r3, r3, #32
 800adc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800adc4:	683b      	ldr	r3, [r7, #0]
 800adc6:	689b      	ldr	r3, [r3, #8]
 800adc8:	011b      	lsls	r3, r3, #4
 800adca:	697a      	ldr	r2, [r7, #20]
 800adcc:	4313      	orrs	r3, r2
 800adce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800add0:	687b      	ldr	r3, [r7, #4]
 800add2:	4a23      	ldr	r2, [pc, #140]	; (800ae60 <TIM_OC2_SetConfig+0xe8>)
 800add4:	4293      	cmp	r3, r2
 800add6:	d003      	beq.n	800ade0 <TIM_OC2_SetConfig+0x68>
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	4a22      	ldr	r2, [pc, #136]	; (800ae64 <TIM_OC2_SetConfig+0xec>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d10d      	bne.n	800adfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800ade0:	697b      	ldr	r3, [r7, #20]
 800ade2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ade6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800ade8:	683b      	ldr	r3, [r7, #0]
 800adea:	68db      	ldr	r3, [r3, #12]
 800adec:	011b      	lsls	r3, r3, #4
 800adee:	697a      	ldr	r2, [r7, #20]
 800adf0:	4313      	orrs	r3, r2
 800adf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800adfa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	4a18      	ldr	r2, [pc, #96]	; (800ae60 <TIM_OC2_SetConfig+0xe8>)
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d003      	beq.n	800ae0c <TIM_OC2_SetConfig+0x94>
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	4a17      	ldr	r2, [pc, #92]	; (800ae64 <TIM_OC2_SetConfig+0xec>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d113      	bne.n	800ae34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800ae0c:	693b      	ldr	r3, [r7, #16]
 800ae0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800ae12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800ae14:	693b      	ldr	r3, [r7, #16]
 800ae16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800ae1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800ae1c:	683b      	ldr	r3, [r7, #0]
 800ae1e:	695b      	ldr	r3, [r3, #20]
 800ae20:	009b      	lsls	r3, r3, #2
 800ae22:	693a      	ldr	r2, [r7, #16]
 800ae24:	4313      	orrs	r3, r2
 800ae26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800ae28:	683b      	ldr	r3, [r7, #0]
 800ae2a:	699b      	ldr	r3, [r3, #24]
 800ae2c:	009b      	lsls	r3, r3, #2
 800ae2e:	693a      	ldr	r2, [r7, #16]
 800ae30:	4313      	orrs	r3, r2
 800ae32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	693a      	ldr	r2, [r7, #16]
 800ae38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	68fa      	ldr	r2, [r7, #12]
 800ae3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800ae40:	683b      	ldr	r3, [r7, #0]
 800ae42:	685a      	ldr	r2, [r3, #4]
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	697a      	ldr	r2, [r7, #20]
 800ae4c:	621a      	str	r2, [r3, #32]
}
 800ae4e:	bf00      	nop
 800ae50:	371c      	adds	r7, #28
 800ae52:	46bd      	mov	sp, r7
 800ae54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae58:	4770      	bx	lr
 800ae5a:	bf00      	nop
 800ae5c:	feff8fff 	.word	0xfeff8fff
 800ae60:	40010000 	.word	0x40010000
 800ae64:	40010400 	.word	0x40010400

0800ae68 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800ae68:	b480      	push	{r7}
 800ae6a:	b087      	sub	sp, #28
 800ae6c:	af00      	add	r7, sp, #0
 800ae6e:	6078      	str	r0, [r7, #4]
 800ae70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800ae72:	687b      	ldr	r3, [r7, #4]
 800ae74:	6a1b      	ldr	r3, [r3, #32]
 800ae76:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6a1b      	ldr	r3, [r3, #32]
 800ae82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	685b      	ldr	r3, [r3, #4]
 800ae88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	69db      	ldr	r3, [r3, #28]
 800ae8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800ae90:	68fa      	ldr	r2, [r7, #12]
 800ae92:	4b2d      	ldr	r3, [pc, #180]	; (800af48 <TIM_OC3_SetConfig+0xe0>)
 800ae94:	4013      	ands	r3, r2
 800ae96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	f023 0303 	bic.w	r3, r3, #3
 800ae9e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800aea0:	683b      	ldr	r3, [r7, #0]
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	68fa      	ldr	r2, [r7, #12]
 800aea6:	4313      	orrs	r3, r2
 800aea8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800aeb0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800aeb2:	683b      	ldr	r3, [r7, #0]
 800aeb4:	689b      	ldr	r3, [r3, #8]
 800aeb6:	021b      	lsls	r3, r3, #8
 800aeb8:	697a      	ldr	r2, [r7, #20]
 800aeba:	4313      	orrs	r3, r2
 800aebc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	4a22      	ldr	r2, [pc, #136]	; (800af4c <TIM_OC3_SetConfig+0xe4>)
 800aec2:	4293      	cmp	r3, r2
 800aec4:	d003      	beq.n	800aece <TIM_OC3_SetConfig+0x66>
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	4a21      	ldr	r2, [pc, #132]	; (800af50 <TIM_OC3_SetConfig+0xe8>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d10d      	bne.n	800aeea <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800aece:	697b      	ldr	r3, [r7, #20]
 800aed0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800aed4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800aed6:	683b      	ldr	r3, [r7, #0]
 800aed8:	68db      	ldr	r3, [r3, #12]
 800aeda:	021b      	lsls	r3, r3, #8
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	4313      	orrs	r3, r2
 800aee0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800aee2:	697b      	ldr	r3, [r7, #20]
 800aee4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800aee8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800aeea:	687b      	ldr	r3, [r7, #4]
 800aeec:	4a17      	ldr	r2, [pc, #92]	; (800af4c <TIM_OC3_SetConfig+0xe4>)
 800aeee:	4293      	cmp	r3, r2
 800aef0:	d003      	beq.n	800aefa <TIM_OC3_SetConfig+0x92>
 800aef2:	687b      	ldr	r3, [r7, #4]
 800aef4:	4a16      	ldr	r2, [pc, #88]	; (800af50 <TIM_OC3_SetConfig+0xe8>)
 800aef6:	4293      	cmp	r3, r2
 800aef8:	d113      	bne.n	800af22 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800aefa:	693b      	ldr	r3, [r7, #16]
 800aefc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800af00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800af0a:	683b      	ldr	r3, [r7, #0]
 800af0c:	695b      	ldr	r3, [r3, #20]
 800af0e:	011b      	lsls	r3, r3, #4
 800af10:	693a      	ldr	r2, [r7, #16]
 800af12:	4313      	orrs	r3, r2
 800af14:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800af16:	683b      	ldr	r3, [r7, #0]
 800af18:	699b      	ldr	r3, [r3, #24]
 800af1a:	011b      	lsls	r3, r3, #4
 800af1c:	693a      	ldr	r2, [r7, #16]
 800af1e:	4313      	orrs	r3, r2
 800af20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	693a      	ldr	r2, [r7, #16]
 800af26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	68fa      	ldr	r2, [r7, #12]
 800af2c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800af2e:	683b      	ldr	r3, [r7, #0]
 800af30:	685a      	ldr	r2, [r3, #4]
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800af36:	687b      	ldr	r3, [r7, #4]
 800af38:	697a      	ldr	r2, [r7, #20]
 800af3a:	621a      	str	r2, [r3, #32]
}
 800af3c:	bf00      	nop
 800af3e:	371c      	adds	r7, #28
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr
 800af48:	fffeff8f 	.word	0xfffeff8f
 800af4c:	40010000 	.word	0x40010000
 800af50:	40010400 	.word	0x40010400

0800af54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800af54:	b480      	push	{r7}
 800af56:	b087      	sub	sp, #28
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	6a1b      	ldr	r3, [r3, #32]
 800af62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	6a1b      	ldr	r3, [r3, #32]
 800af6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	685b      	ldr	r3, [r3, #4]
 800af74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	69db      	ldr	r3, [r3, #28]
 800af7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800af7c:	68fa      	ldr	r2, [r7, #12]
 800af7e:	4b1e      	ldr	r3, [pc, #120]	; (800aff8 <TIM_OC4_SetConfig+0xa4>)
 800af80:	4013      	ands	r3, r2
 800af82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800af8c:	683b      	ldr	r3, [r7, #0]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	021b      	lsls	r3, r3, #8
 800af92:	68fa      	ldr	r2, [r7, #12]
 800af94:	4313      	orrs	r3, r2
 800af96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800af9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	689b      	ldr	r3, [r3, #8]
 800afa4:	031b      	lsls	r3, r3, #12
 800afa6:	693a      	ldr	r2, [r7, #16]
 800afa8:	4313      	orrs	r3, r2
 800afaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	4a13      	ldr	r2, [pc, #76]	; (800affc <TIM_OC4_SetConfig+0xa8>)
 800afb0:	4293      	cmp	r3, r2
 800afb2:	d003      	beq.n	800afbc <TIM_OC4_SetConfig+0x68>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	4a12      	ldr	r2, [pc, #72]	; (800b000 <TIM_OC4_SetConfig+0xac>)
 800afb8:	4293      	cmp	r3, r2
 800afba:	d109      	bne.n	800afd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800afbc:	697b      	ldr	r3, [r7, #20]
 800afbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800afc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	695b      	ldr	r3, [r3, #20]
 800afc8:	019b      	lsls	r3, r3, #6
 800afca:	697a      	ldr	r2, [r7, #20]
 800afcc:	4313      	orrs	r3, r2
 800afce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	68fa      	ldr	r2, [r7, #12]
 800afda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800afdc:	683b      	ldr	r3, [r7, #0]
 800afde:	685a      	ldr	r2, [r3, #4]
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800afe4:	687b      	ldr	r3, [r7, #4]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	621a      	str	r2, [r3, #32]
}
 800afea:	bf00      	nop
 800afec:	371c      	adds	r7, #28
 800afee:	46bd      	mov	sp, r7
 800aff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aff4:	4770      	bx	lr
 800aff6:	bf00      	nop
 800aff8:	feff8fff 	.word	0xfeff8fff
 800affc:	40010000 	.word	0x40010000
 800b000:	40010400 	.word	0x40010400

0800b004 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b004:	b480      	push	{r7}
 800b006:	b087      	sub	sp, #28
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
 800b00c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	6a1b      	ldr	r3, [r3, #32]
 800b012:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800b016:	687b      	ldr	r3, [r7, #4]
 800b018:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	6a1b      	ldr	r3, [r3, #32]
 800b01e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	685b      	ldr	r3, [r3, #4]
 800b024:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b02a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800b02c:	68fa      	ldr	r2, [r7, #12]
 800b02e:	4b1b      	ldr	r3, [pc, #108]	; (800b09c <TIM_OC5_SetConfig+0x98>)
 800b030:	4013      	ands	r3, r2
 800b032:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800b034:	683b      	ldr	r3, [r7, #0]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	68fa      	ldr	r2, [r7, #12]
 800b03a:	4313      	orrs	r3, r2
 800b03c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800b044:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800b046:	683b      	ldr	r3, [r7, #0]
 800b048:	689b      	ldr	r3, [r3, #8]
 800b04a:	041b      	lsls	r3, r3, #16
 800b04c:	693a      	ldr	r2, [r7, #16]
 800b04e:	4313      	orrs	r3, r2
 800b050:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	4a12      	ldr	r2, [pc, #72]	; (800b0a0 <TIM_OC5_SetConfig+0x9c>)
 800b056:	4293      	cmp	r3, r2
 800b058:	d003      	beq.n	800b062 <TIM_OC5_SetConfig+0x5e>
 800b05a:	687b      	ldr	r3, [r7, #4]
 800b05c:	4a11      	ldr	r2, [pc, #68]	; (800b0a4 <TIM_OC5_SetConfig+0xa0>)
 800b05e:	4293      	cmp	r3, r2
 800b060:	d109      	bne.n	800b076 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800b062:	697b      	ldr	r3, [r7, #20]
 800b064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800b068:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800b06a:	683b      	ldr	r3, [r7, #0]
 800b06c:	695b      	ldr	r3, [r3, #20]
 800b06e:	021b      	lsls	r3, r3, #8
 800b070:	697a      	ldr	r2, [r7, #20]
 800b072:	4313      	orrs	r3, r2
 800b074:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	697a      	ldr	r2, [r7, #20]
 800b07a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68fa      	ldr	r2, [r7, #12]
 800b080:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800b082:	683b      	ldr	r3, [r7, #0]
 800b084:	685a      	ldr	r2, [r3, #4]
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	693a      	ldr	r2, [r7, #16]
 800b08e:	621a      	str	r2, [r3, #32]
}
 800b090:	bf00      	nop
 800b092:	371c      	adds	r7, #28
 800b094:	46bd      	mov	sp, r7
 800b096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b09a:	4770      	bx	lr
 800b09c:	fffeff8f 	.word	0xfffeff8f
 800b0a0:	40010000 	.word	0x40010000
 800b0a4:	40010400 	.word	0x40010400

0800b0a8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800b0a8:	b480      	push	{r7}
 800b0aa:	b087      	sub	sp, #28
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]
 800b0b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	6a1b      	ldr	r3, [r3, #32]
 800b0b6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800b0ba:	687b      	ldr	r3, [r7, #4]
 800b0bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a1b      	ldr	r3, [r3, #32]
 800b0c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	685b      	ldr	r3, [r3, #4]
 800b0c8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b0ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800b0d0:	68fa      	ldr	r2, [r7, #12]
 800b0d2:	4b1c      	ldr	r3, [pc, #112]	; (800b144 <TIM_OC6_SetConfig+0x9c>)
 800b0d4:	4013      	ands	r3, r2
 800b0d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800b0d8:	683b      	ldr	r3, [r7, #0]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	021b      	lsls	r3, r3, #8
 800b0de:	68fa      	ldr	r2, [r7, #12]
 800b0e0:	4313      	orrs	r3, r2
 800b0e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800b0e4:	693b      	ldr	r3, [r7, #16]
 800b0e6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800b0ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	689b      	ldr	r3, [r3, #8]
 800b0f0:	051b      	lsls	r3, r3, #20
 800b0f2:	693a      	ldr	r2, [r7, #16]
 800b0f4:	4313      	orrs	r3, r2
 800b0f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	4a13      	ldr	r2, [pc, #76]	; (800b148 <TIM_OC6_SetConfig+0xa0>)
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	d003      	beq.n	800b108 <TIM_OC6_SetConfig+0x60>
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	4a12      	ldr	r2, [pc, #72]	; (800b14c <TIM_OC6_SetConfig+0xa4>)
 800b104:	4293      	cmp	r3, r2
 800b106:	d109      	bne.n	800b11c <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800b108:	697b      	ldr	r3, [r7, #20]
 800b10a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800b10e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800b110:	683b      	ldr	r3, [r7, #0]
 800b112:	695b      	ldr	r3, [r3, #20]
 800b114:	029b      	lsls	r3, r3, #10
 800b116:	697a      	ldr	r2, [r7, #20]
 800b118:	4313      	orrs	r3, r2
 800b11a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	697a      	ldr	r2, [r7, #20]
 800b120:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	68fa      	ldr	r2, [r7, #12]
 800b126:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800b128:	683b      	ldr	r3, [r7, #0]
 800b12a:	685a      	ldr	r2, [r3, #4]
 800b12c:	687b      	ldr	r3, [r7, #4]
 800b12e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	693a      	ldr	r2, [r7, #16]
 800b134:	621a      	str	r2, [r3, #32]
}
 800b136:	bf00      	nop
 800b138:	371c      	adds	r7, #28
 800b13a:	46bd      	mov	sp, r7
 800b13c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b140:	4770      	bx	lr
 800b142:	bf00      	nop
 800b144:	feff8fff 	.word	0xfeff8fff
 800b148:	40010000 	.word	0x40010000
 800b14c:	40010400 	.word	0x40010400

0800b150 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800b150:	b580      	push	{r7, lr}
 800b152:	b086      	sub	sp, #24
 800b154:	af00      	add	r7, sp, #0
 800b156:	6078      	str	r0, [r7, #4]
 800b158:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b15a:	687b      	ldr	r3, [r7, #4]
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b162:	697b      	ldr	r3, [r7, #20]
 800b164:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b168:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800b16a:	683b      	ldr	r3, [r7, #0]
 800b16c:	685b      	ldr	r3, [r3, #4]
 800b16e:	697a      	ldr	r2, [r7, #20]
 800b170:	4313      	orrs	r3, r2
 800b172:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800b174:	697a      	ldr	r2, [r7, #20]
 800b176:	4b3d      	ldr	r3, [pc, #244]	; (800b26c <TIM_SlaveTimer_SetConfig+0x11c>)
 800b178:	4013      	ands	r3, r2
 800b17a:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800b17c:	683b      	ldr	r3, [r7, #0]
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	697a      	ldr	r2, [r7, #20]
 800b182:	4313      	orrs	r3, r2
 800b184:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800b186:	687b      	ldr	r3, [r7, #4]
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	697a      	ldr	r2, [r7, #20]
 800b18c:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800b18e:	683b      	ldr	r3, [r7, #0]
 800b190:	685b      	ldr	r3, [r3, #4]
 800b192:	2b70      	cmp	r3, #112	; 0x70
 800b194:	d01a      	beq.n	800b1cc <TIM_SlaveTimer_SetConfig+0x7c>
 800b196:	2b70      	cmp	r3, #112	; 0x70
 800b198:	d860      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b19a:	2b60      	cmp	r3, #96	; 0x60
 800b19c:	d054      	beq.n	800b248 <TIM_SlaveTimer_SetConfig+0xf8>
 800b19e:	2b60      	cmp	r3, #96	; 0x60
 800b1a0:	d85c      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b1a2:	2b50      	cmp	r3, #80	; 0x50
 800b1a4:	d046      	beq.n	800b234 <TIM_SlaveTimer_SetConfig+0xe4>
 800b1a6:	2b50      	cmp	r3, #80	; 0x50
 800b1a8:	d858      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b1aa:	2b40      	cmp	r3, #64	; 0x40
 800b1ac:	d019      	beq.n	800b1e2 <TIM_SlaveTimer_SetConfig+0x92>
 800b1ae:	2b40      	cmp	r3, #64	; 0x40
 800b1b0:	d854      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b1b2:	2b30      	cmp	r3, #48	; 0x30
 800b1b4:	d054      	beq.n	800b260 <TIM_SlaveTimer_SetConfig+0x110>
 800b1b6:	2b30      	cmp	r3, #48	; 0x30
 800b1b8:	d850      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b1ba:	2b20      	cmp	r3, #32
 800b1bc:	d050      	beq.n	800b260 <TIM_SlaveTimer_SetConfig+0x110>
 800b1be:	2b20      	cmp	r3, #32
 800b1c0:	d84c      	bhi.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
 800b1c2:	2b00      	cmp	r3, #0
 800b1c4:	d04c      	beq.n	800b260 <TIM_SlaveTimer_SetConfig+0x110>
 800b1c6:	2b10      	cmp	r3, #16
 800b1c8:	d04a      	beq.n	800b260 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800b1ca:	e047      	b.n	800b25c <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	6818      	ldr	r0, [r3, #0]
 800b1d0:	683b      	ldr	r3, [r7, #0]
 800b1d2:	68d9      	ldr	r1, [r3, #12]
 800b1d4:	683b      	ldr	r3, [r7, #0]
 800b1d6:	689a      	ldr	r2, [r3, #8]
 800b1d8:	683b      	ldr	r3, [r7, #0]
 800b1da:	691b      	ldr	r3, [r3, #16]
 800b1dc:	f000 f8c2 	bl	800b364 <TIM_ETR_SetConfig>
      break;
 800b1e0:	e03f      	b.n	800b262 <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800b1e2:	683b      	ldr	r3, [r7, #0]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	2b05      	cmp	r3, #5
 800b1e8:	d101      	bne.n	800b1ee <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 800b1ea:	2301      	movs	r3, #1
 800b1ec:	e03a      	b.n	800b264 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	681b      	ldr	r3, [r3, #0]
 800b1f2:	6a1b      	ldr	r3, [r3, #32]
 800b1f4:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	6a1a      	ldr	r2, [r3, #32]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	681b      	ldr	r3, [r3, #0]
 800b200:	f022 0201 	bic.w	r2, r2, #1
 800b204:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800b206:	687b      	ldr	r3, [r7, #4]
 800b208:	681b      	ldr	r3, [r3, #0]
 800b20a:	699b      	ldr	r3, [r3, #24]
 800b20c:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b214:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800b216:	683b      	ldr	r3, [r7, #0]
 800b218:	691b      	ldr	r3, [r3, #16]
 800b21a:	011b      	lsls	r3, r3, #4
 800b21c:	68fa      	ldr	r2, [r7, #12]
 800b21e:	4313      	orrs	r3, r2
 800b220:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	68fa      	ldr	r2, [r7, #12]
 800b228:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800b22a:	687b      	ldr	r3, [r7, #4]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	693a      	ldr	r2, [r7, #16]
 800b230:	621a      	str	r2, [r3, #32]
      break;
 800b232:	e016      	b.n	800b262 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	6818      	ldr	r0, [r3, #0]
 800b238:	683b      	ldr	r3, [r7, #0]
 800b23a:	6899      	ldr	r1, [r3, #8]
 800b23c:	683b      	ldr	r3, [r7, #0]
 800b23e:	691b      	ldr	r3, [r3, #16]
 800b240:	461a      	mov	r2, r3
 800b242:	f000 f815 	bl	800b270 <TIM_TI1_ConfigInputStage>
      break;
 800b246:	e00c      	b.n	800b262 <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	6818      	ldr	r0, [r3, #0]
 800b24c:	683b      	ldr	r3, [r7, #0]
 800b24e:	6899      	ldr	r1, [r3, #8]
 800b250:	683b      	ldr	r3, [r7, #0]
 800b252:	691b      	ldr	r3, [r3, #16]
 800b254:	461a      	mov	r2, r3
 800b256:	f000 f83a 	bl	800b2ce <TIM_TI2_ConfigInputStage>
      break;
 800b25a:	e002      	b.n	800b262 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b25c:	bf00      	nop
 800b25e:	e000      	b.n	800b262 <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800b260:	bf00      	nop
  }
  return HAL_OK;
 800b262:	2300      	movs	r3, #0
}
 800b264:	4618      	mov	r0, r3
 800b266:	3718      	adds	r7, #24
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	fffefff8 	.word	0xfffefff8

0800b270 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b270:	b480      	push	{r7}
 800b272:	b087      	sub	sp, #28
 800b274:	af00      	add	r7, sp, #0
 800b276:	60f8      	str	r0, [r7, #12]
 800b278:	60b9      	str	r1, [r7, #8]
 800b27a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800b27c:	68fb      	ldr	r3, [r7, #12]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	6a1b      	ldr	r3, [r3, #32]
 800b286:	f023 0201 	bic.w	r2, r3, #1
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b28e:	68fb      	ldr	r3, [r7, #12]
 800b290:	699b      	ldr	r3, [r3, #24]
 800b292:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b294:	693b      	ldr	r3, [r7, #16]
 800b296:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b29a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	011b      	lsls	r3, r3, #4
 800b2a0:	693a      	ldr	r2, [r7, #16]
 800b2a2:	4313      	orrs	r3, r2
 800b2a4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b2a6:	697b      	ldr	r3, [r7, #20]
 800b2a8:	f023 030a 	bic.w	r3, r3, #10
 800b2ac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b2ae:	697a      	ldr	r2, [r7, #20]
 800b2b0:	68bb      	ldr	r3, [r7, #8]
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	693a      	ldr	r2, [r7, #16]
 800b2ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	697a      	ldr	r2, [r7, #20]
 800b2c0:	621a      	str	r2, [r3, #32]
}
 800b2c2:	bf00      	nop
 800b2c4:	371c      	adds	r7, #28
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2cc:	4770      	bx	lr

0800b2ce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b2ce:	b480      	push	{r7}
 800b2d0:	b087      	sub	sp, #28
 800b2d2:	af00      	add	r7, sp, #0
 800b2d4:	60f8      	str	r0, [r7, #12]
 800b2d6:	60b9      	str	r1, [r7, #8]
 800b2d8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b2da:	68fb      	ldr	r3, [r7, #12]
 800b2dc:	6a1b      	ldr	r3, [r3, #32]
 800b2de:	f023 0210 	bic.w	r2, r3, #16
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b2e6:	68fb      	ldr	r3, [r7, #12]
 800b2e8:	699b      	ldr	r3, [r3, #24]
 800b2ea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	6a1b      	ldr	r3, [r3, #32]
 800b2f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b2f2:	697b      	ldr	r3, [r7, #20]
 800b2f4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b2f8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	031b      	lsls	r3, r3, #12
 800b2fe:	697a      	ldr	r2, [r7, #20]
 800b300:	4313      	orrs	r3, r2
 800b302:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b304:	693b      	ldr	r3, [r7, #16]
 800b306:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b30a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b30c:	68bb      	ldr	r3, [r7, #8]
 800b30e:	011b      	lsls	r3, r3, #4
 800b310:	693a      	ldr	r2, [r7, #16]
 800b312:	4313      	orrs	r3, r2
 800b314:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	697a      	ldr	r2, [r7, #20]
 800b31a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	693a      	ldr	r2, [r7, #16]
 800b320:	621a      	str	r2, [r3, #32]
}
 800b322:	bf00      	nop
 800b324:	371c      	adds	r7, #28
 800b326:	46bd      	mov	sp, r7
 800b328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b32c:	4770      	bx	lr

0800b32e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b32e:	b480      	push	{r7}
 800b330:	b085      	sub	sp, #20
 800b332:	af00      	add	r7, sp, #0
 800b334:	6078      	str	r0, [r7, #4]
 800b336:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b338:	687b      	ldr	r3, [r7, #4]
 800b33a:	689b      	ldr	r3, [r3, #8]
 800b33c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b33e:	68fb      	ldr	r3, [r7, #12]
 800b340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b346:	683a      	ldr	r2, [r7, #0]
 800b348:	68fb      	ldr	r3, [r7, #12]
 800b34a:	4313      	orrs	r3, r2
 800b34c:	f043 0307 	orr.w	r3, r3, #7
 800b350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	68fa      	ldr	r2, [r7, #12]
 800b356:	609a      	str	r2, [r3, #8]
}
 800b358:	bf00      	nop
 800b35a:	3714      	adds	r7, #20
 800b35c:	46bd      	mov	sp, r7
 800b35e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b362:	4770      	bx	lr

0800b364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b364:	b480      	push	{r7}
 800b366:	b087      	sub	sp, #28
 800b368:	af00      	add	r7, sp, #0
 800b36a:	60f8      	str	r0, [r7, #12]
 800b36c:	60b9      	str	r1, [r7, #8]
 800b36e:	607a      	str	r2, [r7, #4]
 800b370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b372:	68fb      	ldr	r3, [r7, #12]
 800b374:	689b      	ldr	r3, [r3, #8]
 800b376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b378:	697b      	ldr	r3, [r7, #20]
 800b37a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b37e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b380:	683b      	ldr	r3, [r7, #0]
 800b382:	021a      	lsls	r2, r3, #8
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	431a      	orrs	r2, r3
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	4313      	orrs	r3, r2
 800b38c:	697a      	ldr	r2, [r7, #20]
 800b38e:	4313      	orrs	r3, r2
 800b390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	697a      	ldr	r2, [r7, #20]
 800b396:	609a      	str	r2, [r3, #8]
}
 800b398:	bf00      	nop
 800b39a:	371c      	adds	r7, #28
 800b39c:	46bd      	mov	sp, r7
 800b39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3a2:	4770      	bx	lr

0800b3a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b3a4:	b480      	push	{r7}
 800b3a6:	b085      	sub	sp, #20
 800b3a8:	af00      	add	r7, sp, #0
 800b3aa:	6078      	str	r0, [r7, #4]
 800b3ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b3b4:	2b01      	cmp	r3, #1
 800b3b6:	d101      	bne.n	800b3bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b3b8:	2302      	movs	r3, #2
 800b3ba:	e06d      	b.n	800b498 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	2201      	movs	r2, #1
 800b3c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2202      	movs	r2, #2
 800b3c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	685b      	ldr	r3, [r3, #4]
 800b3d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b3d4:	687b      	ldr	r3, [r7, #4]
 800b3d6:	681b      	ldr	r3, [r3, #0]
 800b3d8:	689b      	ldr	r3, [r3, #8]
 800b3da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	681b      	ldr	r3, [r3, #0]
 800b3e0:	4a30      	ldr	r2, [pc, #192]	; (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b3e2:	4293      	cmp	r3, r2
 800b3e4:	d004      	beq.n	800b3f0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	4a2f      	ldr	r2, [pc, #188]	; (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b3ec:	4293      	cmp	r3, r2
 800b3ee:	d108      	bne.n	800b402 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b3f6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b3f8:	683b      	ldr	r3, [r7, #0]
 800b3fa:	685b      	ldr	r3, [r3, #4]
 800b3fc:	68fa      	ldr	r2, [r7, #12]
 800b3fe:	4313      	orrs	r3, r2
 800b400:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b402:	68fb      	ldr	r3, [r7, #12]
 800b404:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b408:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	681b      	ldr	r3, [r3, #0]
 800b40e:	68fa      	ldr	r2, [r7, #12]
 800b410:	4313      	orrs	r3, r2
 800b412:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	68fa      	ldr	r2, [r7, #12]
 800b41a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a20      	ldr	r2, [pc, #128]	; (800b4a4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d022      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b42e:	d01d      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a1d      	ldr	r2, [pc, #116]	; (800b4ac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d018      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a1c      	ldr	r2, [pc, #112]	; (800b4b0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d013      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a1a      	ldr	r2, [pc, #104]	; (800b4b4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d00e      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a15      	ldr	r2, [pc, #84]	; (800b4a8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d009      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a16      	ldr	r2, [pc, #88]	; (800b4b8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d004      	beq.n	800b46c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	4a15      	ldr	r2, [pc, #84]	; (800b4bc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800b468:	4293      	cmp	r3, r2
 800b46a:	d10c      	bne.n	800b486 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b46c:	68bb      	ldr	r3, [r7, #8]
 800b46e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b472:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b474:	683b      	ldr	r3, [r7, #0]
 800b476:	689b      	ldr	r3, [r3, #8]
 800b478:	68ba      	ldr	r2, [r7, #8]
 800b47a:	4313      	orrs	r3, r2
 800b47c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b47e:	687b      	ldr	r3, [r7, #4]
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68ba      	ldr	r2, [r7, #8]
 800b484:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b486:	687b      	ldr	r3, [r7, #4]
 800b488:	2201      	movs	r2, #1
 800b48a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	2200      	movs	r2, #0
 800b492:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b496:	2300      	movs	r3, #0
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3714      	adds	r7, #20
 800b49c:	46bd      	mov	sp, r7
 800b49e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4a2:	4770      	bx	lr
 800b4a4:	40010000 	.word	0x40010000
 800b4a8:	40010400 	.word	0x40010400
 800b4ac:	40000400 	.word	0x40000400
 800b4b0:	40000800 	.word	0x40000800
 800b4b4:	40000c00 	.word	0x40000c00
 800b4b8:	40014000 	.word	0x40014000
 800b4bc:	40001800 	.word	0x40001800

0800b4c0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800b4c0:	b480      	push	{r7}
 800b4c2:	b085      	sub	sp, #20
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]
 800b4c8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b4d4:	2b01      	cmp	r3, #1
 800b4d6:	d101      	bne.n	800b4dc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800b4d8:	2302      	movs	r3, #2
 800b4da:	e065      	b.n	800b5a8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	2201      	movs	r2, #1
 800b4e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800b4ea:	683b      	ldr	r3, [r7, #0]
 800b4ec:	68db      	ldr	r3, [r3, #12]
 800b4ee:	4313      	orrs	r3, r2
 800b4f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800b4f8:	683b      	ldr	r3, [r7, #0]
 800b4fa:	689b      	ldr	r3, [r3, #8]
 800b4fc:	4313      	orrs	r3, r2
 800b4fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800b500:	68fb      	ldr	r3, [r7, #12]
 800b502:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800b506:	683b      	ldr	r3, [r7, #0]
 800b508:	685b      	ldr	r3, [r3, #4]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800b514:	683b      	ldr	r3, [r7, #0]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4313      	orrs	r3, r2
 800b51a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800b51c:	68fb      	ldr	r3, [r7, #12]
 800b51e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800b522:	683b      	ldr	r3, [r7, #0]
 800b524:	691b      	ldr	r3, [r3, #16]
 800b526:	4313      	orrs	r3, r2
 800b528:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800b52a:	68fb      	ldr	r3, [r7, #12]
 800b52c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
 800b534:	4313      	orrs	r3, r2
 800b536:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800b538:	68fb      	ldr	r3, [r7, #12]
 800b53a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800b53e:	683b      	ldr	r3, [r7, #0]
 800b540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b542:	4313      	orrs	r3, r2
 800b544:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800b54c:	683b      	ldr	r3, [r7, #0]
 800b54e:	699b      	ldr	r3, [r3, #24]
 800b550:	041b      	lsls	r3, r3, #16
 800b552:	4313      	orrs	r3, r2
 800b554:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	4a16      	ldr	r2, [pc, #88]	; (800b5b4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800b55c:	4293      	cmp	r3, r2
 800b55e:	d004      	beq.n	800b56a <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	681b      	ldr	r3, [r3, #0]
 800b564:	4a14      	ldr	r2, [pc, #80]	; (800b5b8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800b566:	4293      	cmp	r3, r2
 800b568:	d115      	bne.n	800b596 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800b56a:	68fb      	ldr	r3, [r7, #12]
 800b56c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b574:	051b      	lsls	r3, r3, #20
 800b576:	4313      	orrs	r3, r2
 800b578:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800b57a:	68fb      	ldr	r3, [r7, #12]
 800b57c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800b580:	683b      	ldr	r3, [r7, #0]
 800b582:	69db      	ldr	r3, [r3, #28]
 800b584:	4313      	orrs	r3, r2
 800b586:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800b588:	68fb      	ldr	r3, [r7, #12]
 800b58a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	6a1b      	ldr	r3, [r3, #32]
 800b592:	4313      	orrs	r3, r2
 800b594:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	68fa      	ldr	r2, [r7, #12]
 800b59c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800b59e:	687b      	ldr	r3, [r7, #4]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b5a6:	2300      	movs	r3, #0
}
 800b5a8:	4618      	mov	r0, r3
 800b5aa:	3714      	adds	r7, #20
 800b5ac:	46bd      	mov	sp, r7
 800b5ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b2:	4770      	bx	lr
 800b5b4:	40010000 	.word	0x40010000
 800b5b8:	40010400 	.word	0x40010400

0800b5bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b5bc:	b480      	push	{r7}
 800b5be:	b083      	sub	sp, #12
 800b5c0:	af00      	add	r7, sp, #0
 800b5c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b5c4:	bf00      	nop
 800b5c6:	370c      	adds	r7, #12
 800b5c8:	46bd      	mov	sp, r7
 800b5ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5ce:	4770      	bx	lr

0800b5d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b5d0:	b480      	push	{r7}
 800b5d2:	b083      	sub	sp, #12
 800b5d4:	af00      	add	r7, sp, #0
 800b5d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b5d8:	bf00      	nop
 800b5da:	370c      	adds	r7, #12
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5e2:	4770      	bx	lr

0800b5e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b5e4:	b480      	push	{r7}
 800b5e6:	b083      	sub	sp, #12
 800b5e8:	af00      	add	r7, sp, #0
 800b5ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b5ec:	bf00      	nop
 800b5ee:	370c      	adds	r7, #12
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5f6:	4770      	bx	lr

0800b5f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b5f8:	b580      	push	{r7, lr}
 800b5fa:	b082      	sub	sp, #8
 800b5fc:	af00      	add	r7, sp, #0
 800b5fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b600:	687b      	ldr	r3, [r7, #4]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d101      	bne.n	800b60a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b606:	2301      	movs	r3, #1
 800b608:	e040      	b.n	800b68c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d106      	bne.n	800b620 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	2200      	movs	r2, #0
 800b616:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f7f9 ff32 	bl	8005484 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	2224      	movs	r2, #36	; 0x24
 800b624:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	681b      	ldr	r3, [r3, #0]
 800b62a:	681a      	ldr	r2, [r3, #0]
 800b62c:	687b      	ldr	r3, [r7, #4]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f022 0201 	bic.w	r2, r2, #1
 800b634:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 f9cc 	bl	800b9d4 <UART_SetConfig>
 800b63c:	4603      	mov	r3, r0
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d101      	bne.n	800b646 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b642:	2301      	movs	r3, #1
 800b644:	e022      	b.n	800b68c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b646:	687b      	ldr	r3, [r7, #4]
 800b648:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b64a:	2b00      	cmp	r3, #0
 800b64c:	d002      	beq.n	800b654 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b64e:	6878      	ldr	r0, [r7, #4]
 800b650:	f000 fc6c 	bl	800bf2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b654:	687b      	ldr	r3, [r7, #4]
 800b656:	681b      	ldr	r3, [r3, #0]
 800b658:	685a      	ldr	r2, [r3, #4]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b662:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	681b      	ldr	r3, [r3, #0]
 800b668:	689a      	ldr	r2, [r3, #8]
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	681b      	ldr	r3, [r3, #0]
 800b66e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b672:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	681b      	ldr	r3, [r3, #0]
 800b678:	681a      	ldr	r2, [r3, #0]
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	f042 0201 	orr.w	r2, r2, #1
 800b682:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b684:	6878      	ldr	r0, [r7, #4]
 800b686:	f000 fcf3 	bl	800c070 <UART_CheckIdleState>
 800b68a:	4603      	mov	r3, r0
}
 800b68c:	4618      	mov	r0, r3
 800b68e:	3708      	adds	r7, #8
 800b690:	46bd      	mov	sp, r7
 800b692:	bd80      	pop	{r7, pc}

0800b694 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	4613      	mov	r3, r2
 800b6a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b6a6:	2b20      	cmp	r3, #32
 800b6a8:	d144      	bne.n	800b734 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800b6aa:	68bb      	ldr	r3, [r7, #8]
 800b6ac:	2b00      	cmp	r3, #0
 800b6ae:	d002      	beq.n	800b6b6 <HAL_UART_Transmit_IT+0x22>
 800b6b0:	88fb      	ldrh	r3, [r7, #6]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800b6b6:	2301      	movs	r3, #1
 800b6b8:	e03d      	b.n	800b736 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800b6c0:	2b01      	cmp	r3, #1
 800b6c2:	d101      	bne.n	800b6c8 <HAL_UART_Transmit_IT+0x34>
 800b6c4:	2302      	movs	r3, #2
 800b6c6:	e036      	b.n	800b736 <HAL_UART_Transmit_IT+0xa2>
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	2201      	movs	r2, #1
 800b6cc:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800b6d0:	68fb      	ldr	r3, [r7, #12]
 800b6d2:	68ba      	ldr	r2, [r7, #8]
 800b6d4:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	88fa      	ldrh	r2, [r7, #6]
 800b6da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	88fa      	ldrh	r2, [r7, #6]
 800b6e2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	2200      	movs	r2, #0
 800b6ea:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	2200      	movs	r2, #0
 800b6f0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b6f2:	68fb      	ldr	r3, [r7, #12]
 800b6f4:	2221      	movs	r2, #33	; 0x21
 800b6f6:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b6f8:	68fb      	ldr	r3, [r7, #12]
 800b6fa:	689b      	ldr	r3, [r3, #8]
 800b6fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b700:	d107      	bne.n	800b712 <HAL_UART_Transmit_IT+0x7e>
 800b702:	68fb      	ldr	r3, [r7, #12]
 800b704:	691b      	ldr	r3, [r3, #16]
 800b706:	2b00      	cmp	r3, #0
 800b708:	d103      	bne.n	800b712 <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	4a0d      	ldr	r2, [pc, #52]	; (800b744 <HAL_UART_Transmit_IT+0xb0>)
 800b70e:	665a      	str	r2, [r3, #100]	; 0x64
 800b710:	e002      	b.n	800b718 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	4a0c      	ldr	r2, [pc, #48]	; (800b748 <HAL_UART_Transmit_IT+0xb4>)
 800b716:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800b718:	68fb      	ldr	r3, [r7, #12]
 800b71a:	2200      	movs	r2, #0
 800b71c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b720:	68fb      	ldr	r3, [r7, #12]
 800b722:	681b      	ldr	r3, [r3, #0]
 800b724:	681a      	ldr	r2, [r3, #0]
 800b726:	68fb      	ldr	r3, [r7, #12]
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b72e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e000      	b.n	800b736 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800b734:	2302      	movs	r3, #2
  }
}
 800b736:	4618      	mov	r0, r3
 800b738:	3714      	adds	r7, #20
 800b73a:	46bd      	mov	sp, r7
 800b73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b740:	4770      	bx	lr
 800b742:	bf00      	nop
 800b744:	0800c2a3 	.word	0x0800c2a3
 800b748:	0800c231 	.word	0x0800c231

0800b74c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800b74c:	b580      	push	{r7, lr}
 800b74e:	b088      	sub	sp, #32
 800b750:	af00      	add	r7, sp, #0
 800b752:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	69db      	ldr	r3, [r3, #28]
 800b75a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b75c:	687b      	ldr	r3, [r7, #4]
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	681b      	ldr	r3, [r3, #0]
 800b762:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	689b      	ldr	r3, [r3, #8]
 800b76a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800b76c:	69fa      	ldr	r2, [r7, #28]
 800b76e:	f640 030f 	movw	r3, #2063	; 0x80f
 800b772:	4013      	ands	r3, r2
 800b774:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d113      	bne.n	800b7a4 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800b77c:	69fb      	ldr	r3, [r7, #28]
 800b77e:	f003 0320 	and.w	r3, r3, #32
 800b782:	2b00      	cmp	r3, #0
 800b784:	d00e      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b786:	69bb      	ldr	r3, [r7, #24]
 800b788:	f003 0320 	and.w	r3, r3, #32
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	d009      	beq.n	800b7a4 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b794:	2b00      	cmp	r3, #0
 800b796:	f000 80ff 	beq.w	800b998 <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 800b79a:	687b      	ldr	r3, [r7, #4]
 800b79c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b79e:	6878      	ldr	r0, [r7, #4]
 800b7a0:	4798      	blx	r3
      }
      return;
 800b7a2:	e0f9      	b.n	800b998 <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	2b00      	cmp	r3, #0
 800b7a8:	f000 80d5 	beq.w	800b956 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800b7ac:	697b      	ldr	r3, [r7, #20]
 800b7ae:	f003 0301 	and.w	r3, r3, #1
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d105      	bne.n	800b7c2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800b7b6:	69bb      	ldr	r3, [r7, #24]
 800b7b8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	f000 80ca 	beq.w	800b956 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b7c2:	69fb      	ldr	r3, [r7, #28]
 800b7c4:	f003 0301 	and.w	r3, r3, #1
 800b7c8:	2b00      	cmp	r3, #0
 800b7ca:	d00e      	beq.n	800b7ea <HAL_UART_IRQHandler+0x9e>
 800b7cc:	69bb      	ldr	r3, [r7, #24]
 800b7ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d009      	beq.n	800b7ea <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	2201      	movs	r2, #1
 800b7dc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b7e2:	f043 0201 	orr.w	r2, r3, #1
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b7ea:	69fb      	ldr	r3, [r7, #28]
 800b7ec:	f003 0302 	and.w	r3, r3, #2
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d00e      	beq.n	800b812 <HAL_UART_IRQHandler+0xc6>
 800b7f4:	697b      	ldr	r3, [r7, #20]
 800b7f6:	f003 0301 	and.w	r3, r3, #1
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d009      	beq.n	800b812 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b7fe:	687b      	ldr	r3, [r7, #4]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	2202      	movs	r2, #2
 800b804:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b806:	687b      	ldr	r3, [r7, #4]
 800b808:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b80a:	f043 0204 	orr.w	r2, r3, #4
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b812:	69fb      	ldr	r3, [r7, #28]
 800b814:	f003 0304 	and.w	r3, r3, #4
 800b818:	2b00      	cmp	r3, #0
 800b81a:	d00e      	beq.n	800b83a <HAL_UART_IRQHandler+0xee>
 800b81c:	697b      	ldr	r3, [r7, #20]
 800b81e:	f003 0301 	and.w	r3, r3, #1
 800b822:	2b00      	cmp	r3, #0
 800b824:	d009      	beq.n	800b83a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	2204      	movs	r2, #4
 800b82c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b832:	f043 0202 	orr.w	r2, r3, #2
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b83a:	69fb      	ldr	r3, [r7, #28]
 800b83c:	f003 0308 	and.w	r3, r3, #8
 800b840:	2b00      	cmp	r3, #0
 800b842:	d013      	beq.n	800b86c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b844:	69bb      	ldr	r3, [r7, #24]
 800b846:	f003 0320 	and.w	r3, r3, #32
 800b84a:	2b00      	cmp	r3, #0
 800b84c:	d104      	bne.n	800b858 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800b84e:	697b      	ldr	r3, [r7, #20]
 800b850:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800b854:	2b00      	cmp	r3, #0
 800b856:	d009      	beq.n	800b86c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	2208      	movs	r2, #8
 800b85e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b864:	f043 0208 	orr.w	r2, r3, #8
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b86c:	69fb      	ldr	r3, [r7, #28]
 800b86e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b872:	2b00      	cmp	r3, #0
 800b874:	d00f      	beq.n	800b896 <HAL_UART_IRQHandler+0x14a>
 800b876:	69bb      	ldr	r3, [r7, #24]
 800b878:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d00a      	beq.n	800b896 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681b      	ldr	r3, [r3, #0]
 800b884:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b888:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b88a:	687b      	ldr	r3, [r7, #4]
 800b88c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b88e:	f043 0220 	orr.w	r2, r3, #32
 800b892:	687b      	ldr	r3, [r7, #4]
 800b894:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d07e      	beq.n	800b99c <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800b89e:	69fb      	ldr	r3, [r7, #28]
 800b8a0:	f003 0320 	and.w	r3, r3, #32
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d00c      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	f003 0320 	and.w	r3, r3, #32
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d007      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b8be:	6878      	ldr	r0, [r7, #4]
 800b8c0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800b8c6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	681b      	ldr	r3, [r3, #0]
 800b8cc:	689b      	ldr	r3, [r3, #8]
 800b8ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8d2:	2b40      	cmp	r3, #64	; 0x40
 800b8d4:	d004      	beq.n	800b8e0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b8dc:	2b00      	cmp	r3, #0
 800b8de:	d031      	beq.n	800b944 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800b8e0:	6878      	ldr	r0, [r7, #4]
 800b8e2:	f000 fc6f 	bl	800c1c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	689b      	ldr	r3, [r3, #8]
 800b8ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b8f0:	2b40      	cmp	r3, #64	; 0x40
 800b8f2:	d123      	bne.n	800b93c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	689a      	ldr	r2, [r3, #8]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b902:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b908:	2b00      	cmp	r3, #0
 800b90a:	d013      	beq.n	800b934 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b90c:	687b      	ldr	r3, [r7, #4]
 800b90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b910:	4a25      	ldr	r2, [pc, #148]	; (800b9a8 <HAL_UART_IRQHandler+0x25c>)
 800b912:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b918:	4618      	mov	r0, r3
 800b91a:	f7fa ff1f 	bl	800675c <HAL_DMA_Abort_IT>
 800b91e:	4603      	mov	r3, r0
 800b920:	2b00      	cmp	r3, #0
 800b922:	d016      	beq.n	800b952 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800b928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b92a:	687a      	ldr	r2, [r7, #4]
 800b92c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800b92e:	4610      	mov	r0, r2
 800b930:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b932:	e00e      	b.n	800b952 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800b934:	6878      	ldr	r0, [r7, #4]
 800b936:	f000 f843 	bl	800b9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b93a:	e00a      	b.n	800b952 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800b93c:	6878      	ldr	r0, [r7, #4]
 800b93e:	f000 f83f 	bl	800b9c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b942:	e006      	b.n	800b952 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800b944:	6878      	ldr	r0, [r7, #4]
 800b946:	f000 f83b 	bl	800b9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2200      	movs	r2, #0
 800b94e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800b950:	e024      	b.n	800b99c <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b952:	bf00      	nop
    return;
 800b954:	e022      	b.n	800b99c <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800b956:	69fb      	ldr	r3, [r7, #28]
 800b958:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b95c:	2b00      	cmp	r3, #0
 800b95e:	d00d      	beq.n	800b97c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800b960:	69bb      	ldr	r3, [r7, #24]
 800b962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b966:	2b00      	cmp	r3, #0
 800b968:	d008      	beq.n	800b97c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d016      	beq.n	800b9a0 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800b972:	687b      	ldr	r3, [r7, #4]
 800b974:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800b976:	6878      	ldr	r0, [r7, #4]
 800b978:	4798      	blx	r3
    }
    return;
 800b97a:	e011      	b.n	800b9a0 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800b97c:	69fb      	ldr	r3, [r7, #28]
 800b97e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b982:	2b00      	cmp	r3, #0
 800b984:	d00d      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x256>
 800b986:	69bb      	ldr	r3, [r7, #24]
 800b988:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d008      	beq.n	800b9a2 <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 800b990:	6878      	ldr	r0, [r7, #4]
 800b992:	f000 fcc4 	bl	800c31e <UART_EndTransmit_IT>
    return;
 800b996:	e004      	b.n	800b9a2 <HAL_UART_IRQHandler+0x256>
      return;
 800b998:	bf00      	nop
 800b99a:	e002      	b.n	800b9a2 <HAL_UART_IRQHandler+0x256>
    return;
 800b99c:	bf00      	nop
 800b99e:	e000      	b.n	800b9a2 <HAL_UART_IRQHandler+0x256>
    return;
 800b9a0:	bf00      	nop
  }

}
 800b9a2:	3720      	adds	r7, #32
 800b9a4:	46bd      	mov	sp, r7
 800b9a6:	bd80      	pop	{r7, pc}
 800b9a8:	0800c205 	.word	0x0800c205

0800b9ac <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800b9ac:	b480      	push	{r7}
 800b9ae:	b083      	sub	sp, #12
 800b9b0:	af00      	add	r7, sp, #0
 800b9b2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800b9b4:	bf00      	nop
 800b9b6:	370c      	adds	r7, #12
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9be:	4770      	bx	lr

0800b9c0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800b9c0:	b480      	push	{r7}
 800b9c2:	b083      	sub	sp, #12
 800b9c4:	af00      	add	r7, sp, #0
 800b9c6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800b9c8:	bf00      	nop
 800b9ca:	370c      	adds	r7, #12
 800b9cc:	46bd      	mov	sp, r7
 800b9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9d2:	4770      	bx	lr

0800b9d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b9d4:	b580      	push	{r7, lr}
 800b9d6:	b088      	sub	sp, #32
 800b9d8:	af00      	add	r7, sp, #0
 800b9da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800b9dc:	2300      	movs	r3, #0
 800b9de:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	689a      	ldr	r2, [r3, #8]
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	691b      	ldr	r3, [r3, #16]
 800b9ec:	431a      	orrs	r2, r3
 800b9ee:	687b      	ldr	r3, [r7, #4]
 800b9f0:	695b      	ldr	r3, [r3, #20]
 800b9f2:	431a      	orrs	r2, r3
 800b9f4:	687b      	ldr	r3, [r7, #4]
 800b9f6:	69db      	ldr	r3, [r3, #28]
 800b9f8:	4313      	orrs	r3, r2
 800b9fa:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b9fc:	687b      	ldr	r3, [r7, #4]
 800b9fe:	681b      	ldr	r3, [r3, #0]
 800ba00:	681a      	ldr	r2, [r3, #0]
 800ba02:	4ba7      	ldr	r3, [pc, #668]	; (800bca0 <UART_SetConfig+0x2cc>)
 800ba04:	4013      	ands	r3, r2
 800ba06:	687a      	ldr	r2, [r7, #4]
 800ba08:	6812      	ldr	r2, [r2, #0]
 800ba0a:	6939      	ldr	r1, [r7, #16]
 800ba0c:	430b      	orrs	r3, r1
 800ba0e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	685b      	ldr	r3, [r3, #4]
 800ba16:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	68da      	ldr	r2, [r3, #12]
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	681b      	ldr	r3, [r3, #0]
 800ba22:	430a      	orrs	r2, r1
 800ba24:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	699b      	ldr	r3, [r3, #24]
 800ba2a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	6a1b      	ldr	r3, [r3, #32]
 800ba30:	693a      	ldr	r2, [r7, #16]
 800ba32:	4313      	orrs	r3, r2
 800ba34:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	681b      	ldr	r3, [r3, #0]
 800ba3a:	689b      	ldr	r3, [r3, #8]
 800ba3c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ba40:	687b      	ldr	r3, [r7, #4]
 800ba42:	681b      	ldr	r3, [r3, #0]
 800ba44:	693a      	ldr	r2, [r7, #16]
 800ba46:	430a      	orrs	r2, r1
 800ba48:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	681b      	ldr	r3, [r3, #0]
 800ba4e:	4a95      	ldr	r2, [pc, #596]	; (800bca4 <UART_SetConfig+0x2d0>)
 800ba50:	4293      	cmp	r3, r2
 800ba52:	d120      	bne.n	800ba96 <UART_SetConfig+0xc2>
 800ba54:	4b94      	ldr	r3, [pc, #592]	; (800bca8 <UART_SetConfig+0x2d4>)
 800ba56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ba5a:	f003 0303 	and.w	r3, r3, #3
 800ba5e:	2b03      	cmp	r3, #3
 800ba60:	d816      	bhi.n	800ba90 <UART_SetConfig+0xbc>
 800ba62:	a201      	add	r2, pc, #4	; (adr r2, 800ba68 <UART_SetConfig+0x94>)
 800ba64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ba68:	0800ba79 	.word	0x0800ba79
 800ba6c:	0800ba85 	.word	0x0800ba85
 800ba70:	0800ba7f 	.word	0x0800ba7f
 800ba74:	0800ba8b 	.word	0x0800ba8b
 800ba78:	2301      	movs	r3, #1
 800ba7a:	77fb      	strb	r3, [r7, #31]
 800ba7c:	e14f      	b.n	800bd1e <UART_SetConfig+0x34a>
 800ba7e:	2302      	movs	r3, #2
 800ba80:	77fb      	strb	r3, [r7, #31]
 800ba82:	e14c      	b.n	800bd1e <UART_SetConfig+0x34a>
 800ba84:	2304      	movs	r3, #4
 800ba86:	77fb      	strb	r3, [r7, #31]
 800ba88:	e149      	b.n	800bd1e <UART_SetConfig+0x34a>
 800ba8a:	2308      	movs	r3, #8
 800ba8c:	77fb      	strb	r3, [r7, #31]
 800ba8e:	e146      	b.n	800bd1e <UART_SetConfig+0x34a>
 800ba90:	2310      	movs	r3, #16
 800ba92:	77fb      	strb	r3, [r7, #31]
 800ba94:	e143      	b.n	800bd1e <UART_SetConfig+0x34a>
 800ba96:	687b      	ldr	r3, [r7, #4]
 800ba98:	681b      	ldr	r3, [r3, #0]
 800ba9a:	4a84      	ldr	r2, [pc, #528]	; (800bcac <UART_SetConfig+0x2d8>)
 800ba9c:	4293      	cmp	r3, r2
 800ba9e:	d132      	bne.n	800bb06 <UART_SetConfig+0x132>
 800baa0:	4b81      	ldr	r3, [pc, #516]	; (800bca8 <UART_SetConfig+0x2d4>)
 800baa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800baa6:	f003 030c 	and.w	r3, r3, #12
 800baaa:	2b0c      	cmp	r3, #12
 800baac:	d828      	bhi.n	800bb00 <UART_SetConfig+0x12c>
 800baae:	a201      	add	r2, pc, #4	; (adr r2, 800bab4 <UART_SetConfig+0xe0>)
 800bab0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bab4:	0800bae9 	.word	0x0800bae9
 800bab8:	0800bb01 	.word	0x0800bb01
 800babc:	0800bb01 	.word	0x0800bb01
 800bac0:	0800bb01 	.word	0x0800bb01
 800bac4:	0800baf5 	.word	0x0800baf5
 800bac8:	0800bb01 	.word	0x0800bb01
 800bacc:	0800bb01 	.word	0x0800bb01
 800bad0:	0800bb01 	.word	0x0800bb01
 800bad4:	0800baef 	.word	0x0800baef
 800bad8:	0800bb01 	.word	0x0800bb01
 800badc:	0800bb01 	.word	0x0800bb01
 800bae0:	0800bb01 	.word	0x0800bb01
 800bae4:	0800bafb 	.word	0x0800bafb
 800bae8:	2300      	movs	r3, #0
 800baea:	77fb      	strb	r3, [r7, #31]
 800baec:	e117      	b.n	800bd1e <UART_SetConfig+0x34a>
 800baee:	2302      	movs	r3, #2
 800baf0:	77fb      	strb	r3, [r7, #31]
 800baf2:	e114      	b.n	800bd1e <UART_SetConfig+0x34a>
 800baf4:	2304      	movs	r3, #4
 800baf6:	77fb      	strb	r3, [r7, #31]
 800baf8:	e111      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bafa:	2308      	movs	r3, #8
 800bafc:	77fb      	strb	r3, [r7, #31]
 800bafe:	e10e      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb00:	2310      	movs	r3, #16
 800bb02:	77fb      	strb	r3, [r7, #31]
 800bb04:	e10b      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a69      	ldr	r2, [pc, #420]	; (800bcb0 <UART_SetConfig+0x2dc>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d120      	bne.n	800bb52 <UART_SetConfig+0x17e>
 800bb10:	4b65      	ldr	r3, [pc, #404]	; (800bca8 <UART_SetConfig+0x2d4>)
 800bb12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb16:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800bb1a:	2b30      	cmp	r3, #48	; 0x30
 800bb1c:	d013      	beq.n	800bb46 <UART_SetConfig+0x172>
 800bb1e:	2b30      	cmp	r3, #48	; 0x30
 800bb20:	d814      	bhi.n	800bb4c <UART_SetConfig+0x178>
 800bb22:	2b20      	cmp	r3, #32
 800bb24:	d009      	beq.n	800bb3a <UART_SetConfig+0x166>
 800bb26:	2b20      	cmp	r3, #32
 800bb28:	d810      	bhi.n	800bb4c <UART_SetConfig+0x178>
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d002      	beq.n	800bb34 <UART_SetConfig+0x160>
 800bb2e:	2b10      	cmp	r3, #16
 800bb30:	d006      	beq.n	800bb40 <UART_SetConfig+0x16c>
 800bb32:	e00b      	b.n	800bb4c <UART_SetConfig+0x178>
 800bb34:	2300      	movs	r3, #0
 800bb36:	77fb      	strb	r3, [r7, #31]
 800bb38:	e0f1      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb3a:	2302      	movs	r3, #2
 800bb3c:	77fb      	strb	r3, [r7, #31]
 800bb3e:	e0ee      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb40:	2304      	movs	r3, #4
 800bb42:	77fb      	strb	r3, [r7, #31]
 800bb44:	e0eb      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb46:	2308      	movs	r3, #8
 800bb48:	77fb      	strb	r3, [r7, #31]
 800bb4a:	e0e8      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb4c:	2310      	movs	r3, #16
 800bb4e:	77fb      	strb	r3, [r7, #31]
 800bb50:	e0e5      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	4a57      	ldr	r2, [pc, #348]	; (800bcb4 <UART_SetConfig+0x2e0>)
 800bb58:	4293      	cmp	r3, r2
 800bb5a:	d120      	bne.n	800bb9e <UART_SetConfig+0x1ca>
 800bb5c:	4b52      	ldr	r3, [pc, #328]	; (800bca8 <UART_SetConfig+0x2d4>)
 800bb5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bb62:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800bb66:	2bc0      	cmp	r3, #192	; 0xc0
 800bb68:	d013      	beq.n	800bb92 <UART_SetConfig+0x1be>
 800bb6a:	2bc0      	cmp	r3, #192	; 0xc0
 800bb6c:	d814      	bhi.n	800bb98 <UART_SetConfig+0x1c4>
 800bb6e:	2b80      	cmp	r3, #128	; 0x80
 800bb70:	d009      	beq.n	800bb86 <UART_SetConfig+0x1b2>
 800bb72:	2b80      	cmp	r3, #128	; 0x80
 800bb74:	d810      	bhi.n	800bb98 <UART_SetConfig+0x1c4>
 800bb76:	2b00      	cmp	r3, #0
 800bb78:	d002      	beq.n	800bb80 <UART_SetConfig+0x1ac>
 800bb7a:	2b40      	cmp	r3, #64	; 0x40
 800bb7c:	d006      	beq.n	800bb8c <UART_SetConfig+0x1b8>
 800bb7e:	e00b      	b.n	800bb98 <UART_SetConfig+0x1c4>
 800bb80:	2300      	movs	r3, #0
 800bb82:	77fb      	strb	r3, [r7, #31]
 800bb84:	e0cb      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb86:	2302      	movs	r3, #2
 800bb88:	77fb      	strb	r3, [r7, #31]
 800bb8a:	e0c8      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb8c:	2304      	movs	r3, #4
 800bb8e:	77fb      	strb	r3, [r7, #31]
 800bb90:	e0c5      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb92:	2308      	movs	r3, #8
 800bb94:	77fb      	strb	r3, [r7, #31]
 800bb96:	e0c2      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb98:	2310      	movs	r3, #16
 800bb9a:	77fb      	strb	r3, [r7, #31]
 800bb9c:	e0bf      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	4a45      	ldr	r2, [pc, #276]	; (800bcb8 <UART_SetConfig+0x2e4>)
 800bba4:	4293      	cmp	r3, r2
 800bba6:	d125      	bne.n	800bbf4 <UART_SetConfig+0x220>
 800bba8:	4b3f      	ldr	r3, [pc, #252]	; (800bca8 <UART_SetConfig+0x2d4>)
 800bbaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bbae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbb2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbb6:	d017      	beq.n	800bbe8 <UART_SetConfig+0x214>
 800bbb8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800bbbc:	d817      	bhi.n	800bbee <UART_SetConfig+0x21a>
 800bbbe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbc2:	d00b      	beq.n	800bbdc <UART_SetConfig+0x208>
 800bbc4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bbc8:	d811      	bhi.n	800bbee <UART_SetConfig+0x21a>
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d003      	beq.n	800bbd6 <UART_SetConfig+0x202>
 800bbce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bbd2:	d006      	beq.n	800bbe2 <UART_SetConfig+0x20e>
 800bbd4:	e00b      	b.n	800bbee <UART_SetConfig+0x21a>
 800bbd6:	2300      	movs	r3, #0
 800bbd8:	77fb      	strb	r3, [r7, #31]
 800bbda:	e0a0      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bbdc:	2302      	movs	r3, #2
 800bbde:	77fb      	strb	r3, [r7, #31]
 800bbe0:	e09d      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bbe2:	2304      	movs	r3, #4
 800bbe4:	77fb      	strb	r3, [r7, #31]
 800bbe6:	e09a      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bbe8:	2308      	movs	r3, #8
 800bbea:	77fb      	strb	r3, [r7, #31]
 800bbec:	e097      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bbee:	2310      	movs	r3, #16
 800bbf0:	77fb      	strb	r3, [r7, #31]
 800bbf2:	e094      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	4a30      	ldr	r2, [pc, #192]	; (800bcbc <UART_SetConfig+0x2e8>)
 800bbfa:	4293      	cmp	r3, r2
 800bbfc:	d125      	bne.n	800bc4a <UART_SetConfig+0x276>
 800bbfe:	4b2a      	ldr	r3, [pc, #168]	; (800bca8 <UART_SetConfig+0x2d4>)
 800bc00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800bc08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc0c:	d017      	beq.n	800bc3e <UART_SetConfig+0x26a>
 800bc0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800bc12:	d817      	bhi.n	800bc44 <UART_SetConfig+0x270>
 800bc14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc18:	d00b      	beq.n	800bc32 <UART_SetConfig+0x25e>
 800bc1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800bc1e:	d811      	bhi.n	800bc44 <UART_SetConfig+0x270>
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d003      	beq.n	800bc2c <UART_SetConfig+0x258>
 800bc24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bc28:	d006      	beq.n	800bc38 <UART_SetConfig+0x264>
 800bc2a:	e00b      	b.n	800bc44 <UART_SetConfig+0x270>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	77fb      	strb	r3, [r7, #31]
 800bc30:	e075      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc32:	2302      	movs	r3, #2
 800bc34:	77fb      	strb	r3, [r7, #31]
 800bc36:	e072      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc38:	2304      	movs	r3, #4
 800bc3a:	77fb      	strb	r3, [r7, #31]
 800bc3c:	e06f      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc3e:	2308      	movs	r3, #8
 800bc40:	77fb      	strb	r3, [r7, #31]
 800bc42:	e06c      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc44:	2310      	movs	r3, #16
 800bc46:	77fb      	strb	r3, [r7, #31]
 800bc48:	e069      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	4a1c      	ldr	r2, [pc, #112]	; (800bcc0 <UART_SetConfig+0x2ec>)
 800bc50:	4293      	cmp	r3, r2
 800bc52:	d137      	bne.n	800bcc4 <UART_SetConfig+0x2f0>
 800bc54:	4b14      	ldr	r3, [pc, #80]	; (800bca8 <UART_SetConfig+0x2d4>)
 800bc56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bc5a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800bc5e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc62:	d017      	beq.n	800bc94 <UART_SetConfig+0x2c0>
 800bc64:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800bc68:	d817      	bhi.n	800bc9a <UART_SetConfig+0x2c6>
 800bc6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc6e:	d00b      	beq.n	800bc88 <UART_SetConfig+0x2b4>
 800bc70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bc74:	d811      	bhi.n	800bc9a <UART_SetConfig+0x2c6>
 800bc76:	2b00      	cmp	r3, #0
 800bc78:	d003      	beq.n	800bc82 <UART_SetConfig+0x2ae>
 800bc7a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bc7e:	d006      	beq.n	800bc8e <UART_SetConfig+0x2ba>
 800bc80:	e00b      	b.n	800bc9a <UART_SetConfig+0x2c6>
 800bc82:	2300      	movs	r3, #0
 800bc84:	77fb      	strb	r3, [r7, #31]
 800bc86:	e04a      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc88:	2302      	movs	r3, #2
 800bc8a:	77fb      	strb	r3, [r7, #31]
 800bc8c:	e047      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc8e:	2304      	movs	r3, #4
 800bc90:	77fb      	strb	r3, [r7, #31]
 800bc92:	e044      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc94:	2308      	movs	r3, #8
 800bc96:	77fb      	strb	r3, [r7, #31]
 800bc98:	e041      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bc9a:	2310      	movs	r3, #16
 800bc9c:	77fb      	strb	r3, [r7, #31]
 800bc9e:	e03e      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bca0:	efff69f3 	.word	0xefff69f3
 800bca4:	40011000 	.word	0x40011000
 800bca8:	40023800 	.word	0x40023800
 800bcac:	40004400 	.word	0x40004400
 800bcb0:	40004800 	.word	0x40004800
 800bcb4:	40004c00 	.word	0x40004c00
 800bcb8:	40005000 	.word	0x40005000
 800bcbc:	40011400 	.word	0x40011400
 800bcc0:	40007800 	.word	0x40007800
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a94      	ldr	r2, [pc, #592]	; (800bf1c <UART_SetConfig+0x548>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d125      	bne.n	800bd1a <UART_SetConfig+0x346>
 800bcce:	4b94      	ldr	r3, [pc, #592]	; (800bf20 <UART_SetConfig+0x54c>)
 800bcd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800bcd4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800bcd8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bcdc:	d017      	beq.n	800bd0e <UART_SetConfig+0x33a>
 800bcde:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800bce2:	d817      	bhi.n	800bd14 <UART_SetConfig+0x340>
 800bce4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bce8:	d00b      	beq.n	800bd02 <UART_SetConfig+0x32e>
 800bcea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bcee:	d811      	bhi.n	800bd14 <UART_SetConfig+0x340>
 800bcf0:	2b00      	cmp	r3, #0
 800bcf2:	d003      	beq.n	800bcfc <UART_SetConfig+0x328>
 800bcf4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800bcf8:	d006      	beq.n	800bd08 <UART_SetConfig+0x334>
 800bcfa:	e00b      	b.n	800bd14 <UART_SetConfig+0x340>
 800bcfc:	2300      	movs	r3, #0
 800bcfe:	77fb      	strb	r3, [r7, #31]
 800bd00:	e00d      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bd02:	2302      	movs	r3, #2
 800bd04:	77fb      	strb	r3, [r7, #31]
 800bd06:	e00a      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bd08:	2304      	movs	r3, #4
 800bd0a:	77fb      	strb	r3, [r7, #31]
 800bd0c:	e007      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bd0e:	2308      	movs	r3, #8
 800bd10:	77fb      	strb	r3, [r7, #31]
 800bd12:	e004      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bd14:	2310      	movs	r3, #16
 800bd16:	77fb      	strb	r3, [r7, #31]
 800bd18:	e001      	b.n	800bd1e <UART_SetConfig+0x34a>
 800bd1a:	2310      	movs	r3, #16
 800bd1c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bd1e:	687b      	ldr	r3, [r7, #4]
 800bd20:	69db      	ldr	r3, [r3, #28]
 800bd22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800bd26:	d17f      	bne.n	800be28 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800bd28:	7ffb      	ldrb	r3, [r7, #31]
 800bd2a:	2b08      	cmp	r3, #8
 800bd2c:	d85c      	bhi.n	800bde8 <UART_SetConfig+0x414>
 800bd2e:	a201      	add	r2, pc, #4	; (adr r2, 800bd34 <UART_SetConfig+0x360>)
 800bd30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd34:	0800bd59 	.word	0x0800bd59
 800bd38:	0800bd79 	.word	0x0800bd79
 800bd3c:	0800bd99 	.word	0x0800bd99
 800bd40:	0800bde9 	.word	0x0800bde9
 800bd44:	0800bdb1 	.word	0x0800bdb1
 800bd48:	0800bde9 	.word	0x0800bde9
 800bd4c:	0800bde9 	.word	0x0800bde9
 800bd50:	0800bde9 	.word	0x0800bde9
 800bd54:	0800bdd1 	.word	0x0800bdd1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd58:	f7fd f924 	bl	8008fa4 <HAL_RCC_GetPCLK1Freq>
 800bd5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd5e:	68fb      	ldr	r3, [r7, #12]
 800bd60:	005a      	lsls	r2, r3, #1
 800bd62:	687b      	ldr	r3, [r7, #4]
 800bd64:	685b      	ldr	r3, [r3, #4]
 800bd66:	085b      	lsrs	r3, r3, #1
 800bd68:	441a      	add	r2, r3
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	685b      	ldr	r3, [r3, #4]
 800bd6e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	61bb      	str	r3, [r7, #24]
        break;
 800bd76:	e03a      	b.n	800bdee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd78:	f7fd f928 	bl	8008fcc <HAL_RCC_GetPCLK2Freq>
 800bd7c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	005a      	lsls	r2, r3, #1
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	685b      	ldr	r3, [r3, #4]
 800bd86:	085b      	lsrs	r3, r3, #1
 800bd88:	441a      	add	r2, r3
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	685b      	ldr	r3, [r3, #4]
 800bd8e:	fbb2 f3f3 	udiv	r3, r2, r3
 800bd92:	b29b      	uxth	r3, r3
 800bd94:	61bb      	str	r3, [r7, #24]
        break;
 800bd96:	e02a      	b.n	800bdee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800bd98:	687b      	ldr	r3, [r7, #4]
 800bd9a:	685b      	ldr	r3, [r3, #4]
 800bd9c:	085a      	lsrs	r2, r3, #1
 800bd9e:	4b61      	ldr	r3, [pc, #388]	; (800bf24 <UART_SetConfig+0x550>)
 800bda0:	4413      	add	r3, r2
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	6852      	ldr	r2, [r2, #4]
 800bda6:	fbb3 f3f2 	udiv	r3, r3, r2
 800bdaa:	b29b      	uxth	r3, r3
 800bdac:	61bb      	str	r3, [r7, #24]
        break;
 800bdae:	e01e      	b.n	800bdee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800bdb0:	f7fd f836 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800bdb4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800bdb6:	68fb      	ldr	r3, [r7, #12]
 800bdb8:	005a      	lsls	r2, r3, #1
 800bdba:	687b      	ldr	r3, [r7, #4]
 800bdbc:	685b      	ldr	r3, [r3, #4]
 800bdbe:	085b      	lsrs	r3, r3, #1
 800bdc0:	441a      	add	r2, r3
 800bdc2:	687b      	ldr	r3, [r7, #4]
 800bdc4:	685b      	ldr	r3, [r3, #4]
 800bdc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800bdca:	b29b      	uxth	r3, r3
 800bdcc:	61bb      	str	r3, [r7, #24]
        break;
 800bdce:	e00e      	b.n	800bdee <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	685b      	ldr	r3, [r3, #4]
 800bdd4:	085b      	lsrs	r3, r3, #1
 800bdd6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	685b      	ldr	r3, [r3, #4]
 800bdde:	fbb2 f3f3 	udiv	r3, r2, r3
 800bde2:	b29b      	uxth	r3, r3
 800bde4:	61bb      	str	r3, [r7, #24]
        break;
 800bde6:	e002      	b.n	800bdee <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800bde8:	2301      	movs	r3, #1
 800bdea:	75fb      	strb	r3, [r7, #23]
        break;
 800bdec:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdee:	69bb      	ldr	r3, [r7, #24]
 800bdf0:	2b0f      	cmp	r3, #15
 800bdf2:	d916      	bls.n	800be22 <UART_SetConfig+0x44e>
 800bdf4:	69bb      	ldr	r3, [r7, #24]
 800bdf6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bdfa:	d212      	bcs.n	800be22 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800bdfc:	69bb      	ldr	r3, [r7, #24]
 800bdfe:	b29b      	uxth	r3, r3
 800be00:	f023 030f 	bic.w	r3, r3, #15
 800be04:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be06:	69bb      	ldr	r3, [r7, #24]
 800be08:	085b      	lsrs	r3, r3, #1
 800be0a:	b29b      	uxth	r3, r3
 800be0c:	f003 0307 	and.w	r3, r3, #7
 800be10:	b29a      	uxth	r2, r3
 800be12:	897b      	ldrh	r3, [r7, #10]
 800be14:	4313      	orrs	r3, r2
 800be16:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	897a      	ldrh	r2, [r7, #10]
 800be1e:	60da      	str	r2, [r3, #12]
 800be20:	e070      	b.n	800bf04 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800be22:	2301      	movs	r3, #1
 800be24:	75fb      	strb	r3, [r7, #23]
 800be26:	e06d      	b.n	800bf04 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800be28:	7ffb      	ldrb	r3, [r7, #31]
 800be2a:	2b08      	cmp	r3, #8
 800be2c:	d859      	bhi.n	800bee2 <UART_SetConfig+0x50e>
 800be2e:	a201      	add	r2, pc, #4	; (adr r2, 800be34 <UART_SetConfig+0x460>)
 800be30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be34:	0800be59 	.word	0x0800be59
 800be38:	0800be77 	.word	0x0800be77
 800be3c:	0800be95 	.word	0x0800be95
 800be40:	0800bee3 	.word	0x0800bee3
 800be44:	0800bead 	.word	0x0800bead
 800be48:	0800bee3 	.word	0x0800bee3
 800be4c:	0800bee3 	.word	0x0800bee3
 800be50:	0800bee3 	.word	0x0800bee3
 800be54:	0800becb 	.word	0x0800becb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800be58:	f7fd f8a4 	bl	8008fa4 <HAL_RCC_GetPCLK1Freq>
 800be5c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	685b      	ldr	r3, [r3, #4]
 800be62:	085a      	lsrs	r2, r3, #1
 800be64:	68fb      	ldr	r3, [r7, #12]
 800be66:	441a      	add	r2, r3
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	685b      	ldr	r3, [r3, #4]
 800be6c:	fbb2 f3f3 	udiv	r3, r2, r3
 800be70:	b29b      	uxth	r3, r3
 800be72:	61bb      	str	r3, [r7, #24]
        break;
 800be74:	e038      	b.n	800bee8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800be76:	f7fd f8a9 	bl	8008fcc <HAL_RCC_GetPCLK2Freq>
 800be7a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800be7c:	687b      	ldr	r3, [r7, #4]
 800be7e:	685b      	ldr	r3, [r3, #4]
 800be80:	085a      	lsrs	r2, r3, #1
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	441a      	add	r2, r3
 800be86:	687b      	ldr	r3, [r7, #4]
 800be88:	685b      	ldr	r3, [r3, #4]
 800be8a:	fbb2 f3f3 	udiv	r3, r2, r3
 800be8e:	b29b      	uxth	r3, r3
 800be90:	61bb      	str	r3, [r7, #24]
        break;
 800be92:	e029      	b.n	800bee8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	685b      	ldr	r3, [r3, #4]
 800be98:	085a      	lsrs	r2, r3, #1
 800be9a:	4b23      	ldr	r3, [pc, #140]	; (800bf28 <UART_SetConfig+0x554>)
 800be9c:	4413      	add	r3, r2
 800be9e:	687a      	ldr	r2, [r7, #4]
 800bea0:	6852      	ldr	r2, [r2, #4]
 800bea2:	fbb3 f3f2 	udiv	r3, r3, r2
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	61bb      	str	r3, [r7, #24]
        break;
 800beaa:	e01d      	b.n	800bee8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800beac:	f7fc ffb8 	bl	8008e20 <HAL_RCC_GetSysClockFreq>
 800beb0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800beb2:	687b      	ldr	r3, [r7, #4]
 800beb4:	685b      	ldr	r3, [r3, #4]
 800beb6:	085a      	lsrs	r2, r3, #1
 800beb8:	68fb      	ldr	r3, [r7, #12]
 800beba:	441a      	add	r2, r3
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	685b      	ldr	r3, [r3, #4]
 800bec0:	fbb2 f3f3 	udiv	r3, r2, r3
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	61bb      	str	r3, [r7, #24]
        break;
 800bec8:	e00e      	b.n	800bee8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800beca:	687b      	ldr	r3, [r7, #4]
 800becc:	685b      	ldr	r3, [r3, #4]
 800bece:	085b      	lsrs	r3, r3, #1
 800bed0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800bed4:	687b      	ldr	r3, [r7, #4]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	fbb2 f3f3 	udiv	r3, r2, r3
 800bedc:	b29b      	uxth	r3, r3
 800bede:	61bb      	str	r3, [r7, #24]
        break;
 800bee0:	e002      	b.n	800bee8 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800bee2:	2301      	movs	r3, #1
 800bee4:	75fb      	strb	r3, [r7, #23]
        break;
 800bee6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bee8:	69bb      	ldr	r3, [r7, #24]
 800beea:	2b0f      	cmp	r3, #15
 800beec:	d908      	bls.n	800bf00 <UART_SetConfig+0x52c>
 800beee:	69bb      	ldr	r3, [r7, #24]
 800bef0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bef4:	d204      	bcs.n	800bf00 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	69ba      	ldr	r2, [r7, #24]
 800befc:	60da      	str	r2, [r3, #12]
 800befe:	e001      	b.n	800bf04 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800bf00:	2301      	movs	r3, #1
 800bf02:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	2200      	movs	r2, #0
 800bf08:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800bf0a:	687b      	ldr	r3, [r7, #4]
 800bf0c:	2200      	movs	r2, #0
 800bf0e:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800bf10:	7dfb      	ldrb	r3, [r7, #23]
}
 800bf12:	4618      	mov	r0, r3
 800bf14:	3720      	adds	r7, #32
 800bf16:	46bd      	mov	sp, r7
 800bf18:	bd80      	pop	{r7, pc}
 800bf1a:	bf00      	nop
 800bf1c:	40007c00 	.word	0x40007c00
 800bf20:	40023800 	.word	0x40023800
 800bf24:	01e84800 	.word	0x01e84800
 800bf28:	00f42400 	.word	0x00f42400

0800bf2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800bf2c:	b480      	push	{r7}
 800bf2e:	b083      	sub	sp, #12
 800bf30:	af00      	add	r7, sp, #0
 800bf32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf38:	f003 0301 	and.w	r3, r3, #1
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d00a      	beq.n	800bf56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800bf4a:	687b      	ldr	r3, [r7, #4]
 800bf4c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	681b      	ldr	r3, [r3, #0]
 800bf52:	430a      	orrs	r2, r1
 800bf54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bf56:	687b      	ldr	r3, [r7, #4]
 800bf58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf5a:	f003 0302 	and.w	r3, r3, #2
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d00a      	beq.n	800bf78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	685b      	ldr	r3, [r3, #4]
 800bf68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800bf6c:	687b      	ldr	r3, [r7, #4]
 800bf6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	430a      	orrs	r2, r1
 800bf76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf7c:	f003 0304 	and.w	r3, r3, #4
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d00a      	beq.n	800bf9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	685b      	ldr	r3, [r3, #4]
 800bf8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	430a      	orrs	r2, r1
 800bf98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9e:	f003 0308 	and.w	r3, r3, #8
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d00a      	beq.n	800bfbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	685b      	ldr	r3, [r3, #4]
 800bfac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	430a      	orrs	r2, r1
 800bfba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfc0:	f003 0310 	and.w	r3, r3, #16
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d00a      	beq.n	800bfde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	681b      	ldr	r3, [r3, #0]
 800bfcc:	689b      	ldr	r3, [r3, #8]
 800bfce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800bfd2:	687b      	ldr	r3, [r7, #4]
 800bfd4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfd6:	687b      	ldr	r3, [r7, #4]
 800bfd8:	681b      	ldr	r3, [r3, #0]
 800bfda:	430a      	orrs	r2, r1
 800bfdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bfde:	687b      	ldr	r3, [r7, #4]
 800bfe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bfe2:	f003 0320 	and.w	r3, r3, #32
 800bfe6:	2b00      	cmp	r3, #0
 800bfe8:	d00a      	beq.n	800c000 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	689b      	ldr	r3, [r3, #8]
 800bff0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	430a      	orrs	r2, r1
 800bffe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c004:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c008:	2b00      	cmp	r3, #0
 800c00a:	d01a      	beq.n	800c042 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c00c:	687b      	ldr	r3, [r7, #4]
 800c00e:	681b      	ldr	r3, [r3, #0]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800c016:	687b      	ldr	r3, [r7, #4]
 800c018:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	681b      	ldr	r3, [r3, #0]
 800c01e:	430a      	orrs	r2, r1
 800c020:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c022:	687b      	ldr	r3, [r7, #4]
 800c024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c026:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800c02a:	d10a      	bne.n	800c042 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c02c:	687b      	ldr	r3, [r7, #4]
 800c02e:	681b      	ldr	r3, [r3, #0]
 800c030:	685b      	ldr	r3, [r3, #4]
 800c032:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800c036:	687b      	ldr	r3, [r7, #4]
 800c038:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c03a:	687b      	ldr	r3, [r7, #4]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	430a      	orrs	r2, r1
 800c040:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c042:	687b      	ldr	r3, [r7, #4]
 800c044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c046:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c04a:	2b00      	cmp	r3, #0
 800c04c:	d00a      	beq.n	800c064 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c04e:	687b      	ldr	r3, [r7, #4]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	685b      	ldr	r3, [r3, #4]
 800c054:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	681b      	ldr	r3, [r3, #0]
 800c060:	430a      	orrs	r2, r1
 800c062:	605a      	str	r2, [r3, #4]
  }
}
 800c064:	bf00      	nop
 800c066:	370c      	adds	r7, #12
 800c068:	46bd      	mov	sp, r7
 800c06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c06e:	4770      	bx	lr

0800c070 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800c070:	b580      	push	{r7, lr}
 800c072:	b086      	sub	sp, #24
 800c074:	af02      	add	r7, sp, #8
 800c076:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	2200      	movs	r2, #0
 800c07c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800c07e:	f7f9 fca7 	bl	80059d0 <HAL_GetTick>
 800c082:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	681b      	ldr	r3, [r3, #0]
 800c088:	681b      	ldr	r3, [r3, #0]
 800c08a:	f003 0308 	and.w	r3, r3, #8
 800c08e:	2b08      	cmp	r3, #8
 800c090:	d10e      	bne.n	800c0b0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800c096:	9300      	str	r3, [sp, #0]
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	2200      	movs	r2, #0
 800c09c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800c0a0:	6878      	ldr	r0, [r7, #4]
 800c0a2:	f000 f814 	bl	800c0ce <UART_WaitOnFlagUntilTimeout>
 800c0a6:	4603      	mov	r3, r0
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d001      	beq.n	800c0b0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800c0ac:	2303      	movs	r3, #3
 800c0ae:	e00a      	b.n	800c0c6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800c0b0:	687b      	ldr	r3, [r7, #4]
 800c0b2:	2220      	movs	r2, #32
 800c0b4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800c0b6:	687b      	ldr	r3, [r7, #4]
 800c0b8:	2220      	movs	r2, #32
 800c0ba:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	2200      	movs	r2, #0
 800c0c0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800c0c4:	2300      	movs	r3, #0
}
 800c0c6:	4618      	mov	r0, r3
 800c0c8:	3710      	adds	r7, #16
 800c0ca:	46bd      	mov	sp, r7
 800c0cc:	bd80      	pop	{r7, pc}

0800c0ce <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800c0ce:	b580      	push	{r7, lr}
 800c0d0:	b084      	sub	sp, #16
 800c0d2:	af00      	add	r7, sp, #0
 800c0d4:	60f8      	str	r0, [r7, #12]
 800c0d6:	60b9      	str	r1, [r7, #8]
 800c0d8:	603b      	str	r3, [r7, #0]
 800c0da:	4613      	mov	r3, r2
 800c0dc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c0de:	e05d      	b.n	800c19c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c0e0:	69bb      	ldr	r3, [r7, #24]
 800c0e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0e6:	d059      	beq.n	800c19c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c0e8:	f7f9 fc72 	bl	80059d0 <HAL_GetTick>
 800c0ec:	4602      	mov	r2, r0
 800c0ee:	683b      	ldr	r3, [r7, #0]
 800c0f0:	1ad3      	subs	r3, r2, r3
 800c0f2:	69ba      	ldr	r2, [r7, #24]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d302      	bcc.n	800c0fe <UART_WaitOnFlagUntilTimeout+0x30>
 800c0f8:	69bb      	ldr	r3, [r7, #24]
 800c0fa:	2b00      	cmp	r3, #0
 800c0fc:	d11b      	bne.n	800c136 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	681a      	ldr	r2, [r3, #0]
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c10c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	689a      	ldr	r2, [r3, #8]
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	f022 0201 	bic.w	r2, r2, #1
 800c11c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	2220      	movs	r2, #32
 800c122:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	2220      	movs	r2, #32
 800c128:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800c12a:	68fb      	ldr	r3, [r7, #12]
 800c12c:	2200      	movs	r2, #0
 800c12e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800c132:	2303      	movs	r3, #3
 800c134:	e042      	b.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800c136:	68fb      	ldr	r3, [r7, #12]
 800c138:	681b      	ldr	r3, [r3, #0]
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	f003 0304 	and.w	r3, r3, #4
 800c140:	2b00      	cmp	r3, #0
 800c142:	d02b      	beq.n	800c19c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c144:	68fb      	ldr	r3, [r7, #12]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	69db      	ldr	r3, [r3, #28]
 800c14a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c14e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c152:	d123      	bne.n	800c19c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c15c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c15e:	68fb      	ldr	r3, [r7, #12]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	681a      	ldr	r2, [r3, #0]
 800c164:	68fb      	ldr	r3, [r7, #12]
 800c166:	681b      	ldr	r3, [r3, #0]
 800c168:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c16c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	689a      	ldr	r2, [r3, #8]
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	f022 0201 	bic.w	r2, r2, #1
 800c17c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	2220      	movs	r2, #32
 800c182:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	2220      	movs	r2, #32
 800c188:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c18a:	68fb      	ldr	r3, [r7, #12]
 800c18c:	2220      	movs	r2, #32
 800c18e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800c190:	68fb      	ldr	r3, [r7, #12]
 800c192:	2200      	movs	r2, #0
 800c194:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800c198:	2303      	movs	r3, #3
 800c19a:	e00f      	b.n	800c1bc <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c19c:	68fb      	ldr	r3, [r7, #12]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	69da      	ldr	r2, [r3, #28]
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	4013      	ands	r3, r2
 800c1a6:	68ba      	ldr	r2, [r7, #8]
 800c1a8:	429a      	cmp	r2, r3
 800c1aa:	bf0c      	ite	eq
 800c1ac:	2301      	moveq	r3, #1
 800c1ae:	2300      	movne	r3, #0
 800c1b0:	b2db      	uxtb	r3, r3
 800c1b2:	461a      	mov	r2, r3
 800c1b4:	79fb      	ldrb	r3, [r7, #7]
 800c1b6:	429a      	cmp	r2, r3
 800c1b8:	d092      	beq.n	800c0e0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800c1ba:	2300      	movs	r3, #0
}
 800c1bc:	4618      	mov	r0, r3
 800c1be:	3710      	adds	r7, #16
 800c1c0:	46bd      	mov	sp, r7
 800c1c2:	bd80      	pop	{r7, pc}

0800c1c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b083      	sub	sp, #12
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	681a      	ldr	r2, [r3, #0]
 800c1d2:	687b      	ldr	r3, [r7, #4]
 800c1d4:	681b      	ldr	r3, [r3, #0]
 800c1d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c1da:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	681b      	ldr	r3, [r3, #0]
 800c1e0:	689a      	ldr	r2, [r3, #8]
 800c1e2:	687b      	ldr	r3, [r7, #4]
 800c1e4:	681b      	ldr	r3, [r3, #0]
 800c1e6:	f022 0201 	bic.w	r2, r2, #1
 800c1ea:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c1ec:	687b      	ldr	r3, [r7, #4]
 800c1ee:	2220      	movs	r2, #32
 800c1f0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800c1f2:	687b      	ldr	r3, [r7, #4]
 800c1f4:	2200      	movs	r2, #0
 800c1f6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800c204:	b580      	push	{r7, lr}
 800c206:	b084      	sub	sp, #16
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c210:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	2200      	movs	r2, #0
 800c216:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	2200      	movs	r2, #0
 800c21e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c222:	68f8      	ldr	r0, [r7, #12]
 800c224:	f7ff fbcc 	bl	800b9c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c228:	bf00      	nop
 800c22a:	3710      	adds	r7, #16
 800c22c:	46bd      	mov	sp, r7
 800c22e:	bd80      	pop	{r7, pc}

0800c230 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800c230:	b480      	push	{r7}
 800c232:	b083      	sub	sp, #12
 800c234:	af00      	add	r7, sp, #0
 800c236:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c238:	687b      	ldr	r3, [r7, #4]
 800c23a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c23c:	2b21      	cmp	r3, #33	; 0x21
 800c23e:	d12a      	bne.n	800c296 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c246:	b29b      	uxth	r3, r3
 800c248:	2b00      	cmp	r3, #0
 800c24a:	d110      	bne.n	800c26e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	681a      	ldr	r2, [r3, #0]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c25a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	681b      	ldr	r3, [r3, #0]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c26a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800c26c:	e013      	b.n	800c296 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c272:	781a      	ldrb	r2, [r3, #0]
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c27e:	1c5a      	adds	r2, r3, #1
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c284:	687b      	ldr	r3, [r7, #4]
 800c286:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c28a:	b29b      	uxth	r3, r3
 800c28c:	3b01      	subs	r3, #1
 800c28e:	b29a      	uxth	r2, r3
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c296:	bf00      	nop
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr

0800c2a2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800c2a2:	b480      	push	{r7}
 800c2a4:	b085      	sub	sp, #20
 800c2a6:	af00      	add	r7, sp, #0
 800c2a8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c2ae:	2b21      	cmp	r3, #33	; 0x21
 800c2b0:	d12f      	bne.n	800c312 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c2b8:	b29b      	uxth	r3, r3
 800c2ba:	2b00      	cmp	r3, #0
 800c2bc:	d110      	bne.n	800c2e0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	681b      	ldr	r3, [r3, #0]
 800c2c2:	681a      	ldr	r2, [r3, #0]
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c2cc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	681a      	ldr	r2, [r3, #0]
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c2dc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800c2de:	e018      	b.n	800c312 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800c2e6:	68fb      	ldr	r3, [r7, #12]
 800c2e8:	881b      	ldrh	r3, [r3, #0]
 800c2ea:	461a      	mov	r2, r3
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c2f4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c2fa:	1c9a      	adds	r2, r3, #2
 800c2fc:	687b      	ldr	r3, [r7, #4]
 800c2fe:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800c306:	b29b      	uxth	r3, r3
 800c308:	3b01      	subs	r3, #1
 800c30a:	b29a      	uxth	r2, r3
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800c312:	bf00      	nop
 800c314:	3714      	adds	r7, #20
 800c316:	46bd      	mov	sp, r7
 800c318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31c:	4770      	bx	lr

0800c31e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800c31e:	b580      	push	{r7, lr}
 800c320:	b082      	sub	sp, #8
 800c322:	af00      	add	r7, sp, #0
 800c324:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	681b      	ldr	r3, [r3, #0]
 800c32a:	681a      	ldr	r2, [r3, #0]
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c334:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c336:	687b      	ldr	r3, [r7, #4]
 800c338:	2220      	movs	r2, #32
 800c33a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2200      	movs	r2, #0
 800c340:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800c342:	6878      	ldr	r0, [r7, #4]
 800c344:	f7ff fb32 	bl	800b9ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c348:	bf00      	nop
 800c34a:	3708      	adds	r7, #8
 800c34c:	46bd      	mov	sp, r7
 800c34e:	bd80      	pop	{r7, pc}

0800c350 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800c350:	b480      	push	{r7}
 800c352:	b085      	sub	sp, #20
 800c354:	af00      	add	r7, sp, #0
 800c356:	6078      	str	r0, [r7, #4]
 800c358:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800c35e:	2300      	movs	r3, #0
 800c360:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	2b01      	cmp	r3, #1
 800c368:	d027      	beq.n	800c3ba <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c36a:	687b      	ldr	r3, [r7, #4]
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c370:	68fa      	ldr	r2, [r7, #12]
 800c372:	4b2f      	ldr	r3, [pc, #188]	; (800c430 <FMC_SDRAM_Init+0xe0>)
 800c374:	4013      	ands	r3, r2
 800c376:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800c37c:	683b      	ldr	r3, [r7, #0]
 800c37e:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c380:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800c386:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800c388:	683b      	ldr	r3, [r7, #0]
 800c38a:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800c38c:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800c38e:	683b      	ldr	r3, [r7, #0]
 800c390:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800c392:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800c394:	683b      	ldr	r3, [r7, #0]
 800c396:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800c398:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800c39a:	683b      	ldr	r3, [r7, #0]
 800c39c:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800c39e:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800c3a4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800c3a6:	683b      	ldr	r3, [r7, #0]
 800c3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c3aa:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c3ac:	68fa      	ldr	r2, [r7, #12]
 800c3ae:	4313      	orrs	r3, r2
 800c3b0:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	68fa      	ldr	r2, [r7, #12]
 800c3b6:	601a      	str	r2, [r3, #0]
 800c3b8:	e032      	b.n	800c420 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800c3c0:	68fb      	ldr	r3, [r7, #12]
 800c3c2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800c3c6:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3c8:	683b      	ldr	r3, [r7, #0]
 800c3ca:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800c3cc:	683b      	ldr	r3, [r7, #0]
 800c3ce:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3d0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800c3d2:	683b      	ldr	r3, [r7, #0]
 800c3d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800c3d6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	4313      	orrs	r3, r2
 800c3dc:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800c3de:	687b      	ldr	r3, [r7, #4]
 800c3e0:	685b      	ldr	r3, [r3, #4]
 800c3e2:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	4b12      	ldr	r3, [pc, #72]	; (800c430 <FMC_SDRAM_Init+0xe0>)
 800c3e8:	4013      	ands	r3, r2
 800c3ea:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c3ec:	683b      	ldr	r3, [r7, #0]
 800c3ee:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800c3f0:	683b      	ldr	r3, [r7, #0]
 800c3f2:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c3f4:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800c3f6:	683b      	ldr	r3, [r7, #0]
 800c3f8:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800c3fa:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800c3fc:	683b      	ldr	r3, [r7, #0]
 800c3fe:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800c400:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800c402:	683b      	ldr	r3, [r7, #0]
 800c404:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800c406:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800c408:	683b      	ldr	r3, [r7, #0]
 800c40a:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800c40c:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800c40e:	68ba      	ldr	r2, [r7, #8]
 800c410:	4313      	orrs	r3, r2
 800c412:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	68fa      	ldr	r2, [r7, #12]
 800c418:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	68ba      	ldr	r2, [r7, #8]
 800c41e:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800c420:	2300      	movs	r3, #0
}
 800c422:	4618      	mov	r0, r3
 800c424:	3714      	adds	r7, #20
 800c426:	46bd      	mov	sp, r7
 800c428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c42c:	4770      	bx	lr
 800c42e:	bf00      	nop
 800c430:	ffff8000 	.word	0xffff8000

0800c434 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800c434:	b480      	push	{r7}
 800c436:	b087      	sub	sp, #28
 800c438:	af00      	add	r7, sp, #0
 800c43a:	60f8      	str	r0, [r7, #12]
 800c43c:	60b9      	str	r1, [r7, #8]
 800c43e:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800c440:	2300      	movs	r3, #0
 800c442:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800c444:	2300      	movs	r3, #0
 800c446:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800c448:	687b      	ldr	r3, [r7, #4]
 800c44a:	2b01      	cmp	r3, #1
 800c44c:	d02e      	beq.n	800c4ac <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	689b      	ldr	r3, [r3, #8]
 800c452:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c454:	697b      	ldr	r3, [r7, #20]
 800c456:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c45a:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	681b      	ldr	r3, [r3, #0]
 800c460:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	685b      	ldr	r3, [r3, #4]
 800c466:	3b01      	subs	r3, #1
 800c468:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c46a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c46c:	68bb      	ldr	r3, [r7, #8]
 800c46e:	689b      	ldr	r3, [r3, #8]
 800c470:	3b01      	subs	r3, #1
 800c472:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800c474:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c476:	68bb      	ldr	r3, [r7, #8]
 800c478:	68db      	ldr	r3, [r3, #12]
 800c47a:	3b01      	subs	r3, #1
 800c47c:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800c47e:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c480:	68bb      	ldr	r3, [r7, #8]
 800c482:	691b      	ldr	r3, [r3, #16]
 800c484:	3b01      	subs	r3, #1
 800c486:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800c488:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	695b      	ldr	r3, [r3, #20]
 800c48e:	3b01      	subs	r3, #1
 800c490:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800c492:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	699b      	ldr	r3, [r3, #24]
 800c498:	3b01      	subs	r3, #1
 800c49a:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c49c:	4313      	orrs	r3, r2
 800c49e:	697a      	ldr	r2, [r7, #20]
 800c4a0:	4313      	orrs	r3, r2
 800c4a2:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c4a4:	68fb      	ldr	r3, [r7, #12]
 800c4a6:	697a      	ldr	r2, [r7, #20]
 800c4a8:	609a      	str	r2, [r3, #8]
 800c4aa:	e039      	b.n	800c520 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800c4ac:	68fb      	ldr	r3, [r7, #12]
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800c4b2:	697a      	ldr	r2, [r7, #20]
 800c4b4:	4b1e      	ldr	r3, [pc, #120]	; (800c530 <FMC_SDRAM_Timing_Init+0xfc>)
 800c4b6:	4013      	ands	r3, r2
 800c4b8:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c4ba:	68bb      	ldr	r3, [r7, #8]
 800c4bc:	68db      	ldr	r3, [r3, #12]
 800c4be:	3b01      	subs	r3, #1
 800c4c0:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800c4c2:	68bb      	ldr	r3, [r7, #8]
 800c4c4:	695b      	ldr	r3, [r3, #20]
 800c4c6:	3b01      	subs	r3, #1
 800c4c8:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800c4ca:	4313      	orrs	r3, r2
 800c4cc:	697a      	ldr	r2, [r7, #20]
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800c4d2:	68fb      	ldr	r3, [r7, #12]
 800c4d4:	68db      	ldr	r3, [r3, #12]
 800c4d6:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800c4d8:	693b      	ldr	r3, [r7, #16]
 800c4da:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800c4de:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	685b      	ldr	r3, [r3, #4]
 800c4ea:	3b01      	subs	r3, #1
 800c4ec:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c4ee:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c4f0:	68bb      	ldr	r3, [r7, #8]
 800c4f2:	689b      	ldr	r3, [r3, #8]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800c4f8:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	691b      	ldr	r3, [r3, #16]
 800c4fe:	3b01      	subs	r3, #1
 800c500:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800c502:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800c504:	68bb      	ldr	r3, [r7, #8]
 800c506:	699b      	ldr	r3, [r3, #24]
 800c508:	3b01      	subs	r3, #1
 800c50a:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800c50c:	4313      	orrs	r3, r2
 800c50e:	693a      	ldr	r2, [r7, #16]
 800c510:	4313      	orrs	r3, r2
 800c512:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800c514:	68fb      	ldr	r3, [r7, #12]
 800c516:	697a      	ldr	r2, [r7, #20]
 800c518:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	693a      	ldr	r2, [r7, #16]
 800c51e:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800c520:	2300      	movs	r3, #0
}
 800c522:	4618      	mov	r0, r3
 800c524:	371c      	adds	r7, #28
 800c526:	46bd      	mov	sp, r7
 800c528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c52c:	4770      	bx	lr
 800c52e:	bf00      	nop
 800c530:	ff0f0fff 	.word	0xff0f0fff

0800c534 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800c534:	b480      	push	{r7}
 800c536:	b087      	sub	sp, #28
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800c540:	2300      	movs	r3, #0
 800c542:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c544:	68bb      	ldr	r3, [r7, #8]
 800c546:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800c548:	68bb      	ldr	r3, [r7, #8]
 800c54a:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c54c:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800c54e:	68bb      	ldr	r3, [r7, #8]
 800c550:	689b      	ldr	r3, [r3, #8]
 800c552:	3b01      	subs	r3, #1
 800c554:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800c556:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	68db      	ldr	r3, [r3, #12]
 800c55c:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800c55e:	4313      	orrs	r3, r2
 800c560:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800c562:	697a      	ldr	r2, [r7, #20]
 800c564:	68fb      	ldr	r3, [r7, #12]
 800c566:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800c568:	2300      	movs	r3, #0
}
 800c56a:	4618      	mov	r0, r3
 800c56c:	371c      	adds	r7, #28
 800c56e:	46bd      	mov	sp, r7
 800c570:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c574:	4770      	bx	lr

0800c576 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800c576:	b480      	push	{r7}
 800c578:	b083      	sub	sp, #12
 800c57a:	af00      	add	r7, sp, #0
 800c57c:	6078      	str	r0, [r7, #4]
 800c57e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	695a      	ldr	r2, [r3, #20]
 800c584:	683b      	ldr	r3, [r7, #0]
 800c586:	005b      	lsls	r3, r3, #1
 800c588:	431a      	orrs	r2, r3
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800c58e:	2300      	movs	r3, #0
}
 800c590:	4618      	mov	r0, r3
 800c592:	370c      	adds	r7, #12
 800c594:	46bd      	mov	sp, r7
 800c596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c59a:	4770      	bx	lr

0800c59c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800c59c:	b480      	push	{r7}
 800c59e:	b085      	sub	sp, #20
 800c5a0:	af00      	add	r7, sp, #0
 800c5a2:	4603      	mov	r3, r0
 800c5a4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800c5a6:	2300      	movs	r3, #0
 800c5a8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800c5aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800c5ae:	2b84      	cmp	r3, #132	; 0x84
 800c5b0:	d005      	beq.n	800c5be <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800c5b2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800c5b6:	68fb      	ldr	r3, [r7, #12]
 800c5b8:	4413      	add	r3, r2
 800c5ba:	3303      	adds	r3, #3
 800c5bc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800c5be:	68fb      	ldr	r3, [r7, #12]
}
 800c5c0:	4618      	mov	r0, r3
 800c5c2:	3714      	adds	r7, #20
 800c5c4:	46bd      	mov	sp, r7
 800c5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5ca:	4770      	bx	lr

0800c5cc <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800c5cc:	b580      	push	{r7, lr}
 800c5ce:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800c5d0:	f001 f86e 	bl	800d6b0 <vTaskStartScheduler>
  
  return osOK;
 800c5d4:	2300      	movs	r3, #0
}
 800c5d6:	4618      	mov	r0, r3
 800c5d8:	bd80      	pop	{r7, pc}

0800c5da <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800c5da:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c5dc:	b089      	sub	sp, #36	; 0x24
 800c5de:	af04      	add	r7, sp, #16
 800c5e0:	6078      	str	r0, [r7, #4]
 800c5e2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800c5e4:	687b      	ldr	r3, [r7, #4]
 800c5e6:	695b      	ldr	r3, [r3, #20]
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d020      	beq.n	800c62e <osThreadCreate+0x54>
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	699b      	ldr	r3, [r3, #24]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d01c      	beq.n	800c62e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c5f4:	687b      	ldr	r3, [r7, #4]
 800c5f6:	685c      	ldr	r4, [r3, #4]
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	681d      	ldr	r5, [r3, #0]
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	691e      	ldr	r6, [r3, #16]
 800c600:	687b      	ldr	r3, [r7, #4]
 800c602:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c606:	4618      	mov	r0, r3
 800c608:	f7ff ffc8 	bl	800c59c <makeFreeRtosPriority>
 800c60c:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	695b      	ldr	r3, [r3, #20]
 800c612:	687a      	ldr	r2, [r7, #4]
 800c614:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c616:	9202      	str	r2, [sp, #8]
 800c618:	9301      	str	r3, [sp, #4]
 800c61a:	9100      	str	r1, [sp, #0]
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	4632      	mov	r2, r6
 800c620:	4629      	mov	r1, r5
 800c622:	4620      	mov	r0, r4
 800c624:	f000 fde4 	bl	800d1f0 <xTaskCreateStatic>
 800c628:	4603      	mov	r3, r0
 800c62a:	60fb      	str	r3, [r7, #12]
 800c62c:	e01c      	b.n	800c668 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c62e:	687b      	ldr	r3, [r7, #4]
 800c630:	685c      	ldr	r4, [r3, #4]
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800c63a:	b29e      	uxth	r6, r3
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800c642:	4618      	mov	r0, r3
 800c644:	f7ff ffaa 	bl	800c59c <makeFreeRtosPriority>
 800c648:	4602      	mov	r2, r0
 800c64a:	f107 030c 	add.w	r3, r7, #12
 800c64e:	9301      	str	r3, [sp, #4]
 800c650:	9200      	str	r2, [sp, #0]
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	4632      	mov	r2, r6
 800c656:	4629      	mov	r1, r5
 800c658:	4620      	mov	r0, r4
 800c65a:	f000 fe2c 	bl	800d2b6 <xTaskCreate>
 800c65e:	4603      	mov	r3, r0
 800c660:	2b01      	cmp	r3, #1
 800c662:	d001      	beq.n	800c668 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800c664:	2300      	movs	r3, #0
 800c666:	e000      	b.n	800c66a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800c668:	68fb      	ldr	r3, [r7, #12]
}
 800c66a:	4618      	mov	r0, r3
 800c66c:	3714      	adds	r7, #20
 800c66e:	46bd      	mov	sp, r7
 800c670:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c672 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800c672:	b580      	push	{r7, lr}
 800c674:	b084      	sub	sp, #16
 800c676:	af00      	add	r7, sp, #0
 800c678:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800c67a:	687b      	ldr	r3, [r7, #4]
 800c67c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <osDelay+0x16>
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	e000      	b.n	800c68a <osDelay+0x18>
 800c688:	2301      	movs	r3, #1
 800c68a:	4618      	mov	r0, r3
 800c68c:	f000 ffda 	bl	800d644 <vTaskDelay>
  
  return osOK;
 800c690:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800c692:	4618      	mov	r0, r3
 800c694:	3710      	adds	r7, #16
 800c696:	46bd      	mov	sp, r7
 800c698:	bd80      	pop	{r7, pc}

0800c69a <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800c69a:	b580      	push	{r7, lr}
 800c69c:	b082      	sub	sp, #8
 800c69e:	af00      	add	r7, sp, #0
 800c6a0:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	685b      	ldr	r3, [r3, #4]
 800c6a6:	2b00      	cmp	r3, #0
 800c6a8:	d007      	beq.n	800c6ba <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	685b      	ldr	r3, [r3, #4]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	2001      	movs	r0, #1
 800c6b2:	f000 fa66 	bl	800cb82 <xQueueCreateMutexStatic>
 800c6b6:	4603      	mov	r3, r0
 800c6b8:	e003      	b.n	800c6c2 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800c6ba:	2001      	movs	r0, #1
 800c6bc:	f000 fa49 	bl	800cb52 <xQueueCreateMutex>
 800c6c0:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800c6c2:	4618      	mov	r0, r3
 800c6c4:	3708      	adds	r7, #8
 800c6c6:	46bd      	mov	sp, r7
 800c6c8:	bd80      	pop	{r7, pc}

0800c6ca <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800c6ca:	b590      	push	{r4, r7, lr}
 800c6cc:	b085      	sub	sp, #20
 800c6ce:	af02      	add	r7, sp, #8
 800c6d0:	6078      	str	r0, [r7, #4]
 800c6d2:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	689b      	ldr	r3, [r3, #8]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d011      	beq.n	800c700 <osMessageCreate+0x36>
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	68db      	ldr	r3, [r3, #12]
 800c6e0:	2b00      	cmp	r3, #0
 800c6e2:	d00d      	beq.n	800c700 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800c6e4:	687b      	ldr	r3, [r7, #4]
 800c6e6:	6818      	ldr	r0, [r3, #0]
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	6859      	ldr	r1, [r3, #4]
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	689a      	ldr	r2, [r3, #8]
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	68db      	ldr	r3, [r3, #12]
 800c6f4:	2400      	movs	r4, #0
 800c6f6:	9400      	str	r4, [sp, #0]
 800c6f8:	f000 f92e 	bl	800c958 <xQueueGenericCreateStatic>
 800c6fc:	4603      	mov	r3, r0
 800c6fe:	e008      	b.n	800c712 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	6818      	ldr	r0, [r3, #0]
 800c704:	687b      	ldr	r3, [r7, #4]
 800c706:	685b      	ldr	r3, [r3, #4]
 800c708:	2200      	movs	r2, #0
 800c70a:	4619      	mov	r1, r3
 800c70c:	f000 f9a6 	bl	800ca5c <xQueueGenericCreate>
 800c710:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800c712:	4618      	mov	r0, r3
 800c714:	370c      	adds	r7, #12
 800c716:	46bd      	mov	sp, r7
 800c718:	bd90      	pop	{r4, r7, pc}

0800c71a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800c71a:	b480      	push	{r7}
 800c71c:	b083      	sub	sp, #12
 800c71e:	af00      	add	r7, sp, #0
 800c720:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f103 0208 	add.w	r2, r3, #8
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	f04f 32ff 	mov.w	r2, #4294967295
 800c732:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	f103 0208 	add.w	r2, r3, #8
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	f103 0208 	add.w	r2, r3, #8
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	2200      	movs	r2, #0
 800c74c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c74e:	bf00      	nop
 800c750:	370c      	adds	r7, #12
 800c752:	46bd      	mov	sp, r7
 800c754:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c758:	4770      	bx	lr

0800c75a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800c75a:	b480      	push	{r7}
 800c75c:	b083      	sub	sp, #12
 800c75e:	af00      	add	r7, sp, #0
 800c760:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800c762:	687b      	ldr	r3, [r7, #4]
 800c764:	2200      	movs	r2, #0
 800c766:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800c768:	bf00      	nop
 800c76a:	370c      	adds	r7, #12
 800c76c:	46bd      	mov	sp, r7
 800c76e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c772:	4770      	bx	lr

0800c774 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c774:	b480      	push	{r7}
 800c776:	b085      	sub	sp, #20
 800c778:	af00      	add	r7, sp, #0
 800c77a:	6078      	str	r0, [r7, #4]
 800c77c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	685b      	ldr	r3, [r3, #4]
 800c782:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68fa      	ldr	r2, [r7, #12]
 800c788:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	689a      	ldr	r2, [r3, #8]
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c792:	68fb      	ldr	r3, [r7, #12]
 800c794:	689b      	ldr	r3, [r3, #8]
 800c796:	683a      	ldr	r2, [r7, #0]
 800c798:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c79a:	68fb      	ldr	r3, [r7, #12]
 800c79c:	683a      	ldr	r2, [r7, #0]
 800c79e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800c7a0:	683b      	ldr	r3, [r7, #0]
 800c7a2:	687a      	ldr	r2, [r7, #4]
 800c7a4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c7a6:	687b      	ldr	r3, [r7, #4]
 800c7a8:	681b      	ldr	r3, [r3, #0]
 800c7aa:	1c5a      	adds	r2, r3, #1
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	601a      	str	r2, [r3, #0]
}
 800c7b0:	bf00      	nop
 800c7b2:	3714      	adds	r7, #20
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c7bc:	b480      	push	{r7}
 800c7be:	b085      	sub	sp, #20
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
 800c7c4:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c7c6:	683b      	ldr	r3, [r7, #0]
 800c7c8:	681b      	ldr	r3, [r3, #0]
 800c7ca:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c7cc:	68bb      	ldr	r3, [r7, #8]
 800c7ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c7d2:	d103      	bne.n	800c7dc <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	691b      	ldr	r3, [r3, #16]
 800c7d8:	60fb      	str	r3, [r7, #12]
 800c7da:	e00c      	b.n	800c7f6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c7dc:	687b      	ldr	r3, [r7, #4]
 800c7de:	3308      	adds	r3, #8
 800c7e0:	60fb      	str	r3, [r7, #12]
 800c7e2:	e002      	b.n	800c7ea <vListInsert+0x2e>
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	685b      	ldr	r3, [r3, #4]
 800c7e8:	60fb      	str	r3, [r7, #12]
 800c7ea:	68fb      	ldr	r3, [r7, #12]
 800c7ec:	685b      	ldr	r3, [r3, #4]
 800c7ee:	681b      	ldr	r3, [r3, #0]
 800c7f0:	68ba      	ldr	r2, [r7, #8]
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d2f6      	bcs.n	800c7e4 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c7f6:	68fb      	ldr	r3, [r7, #12]
 800c7f8:	685a      	ldr	r2, [r3, #4]
 800c7fa:	683b      	ldr	r3, [r7, #0]
 800c7fc:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c7fe:	683b      	ldr	r3, [r7, #0]
 800c800:	685b      	ldr	r3, [r3, #4]
 800c802:	683a      	ldr	r2, [r7, #0]
 800c804:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c806:	683b      	ldr	r3, [r7, #0]
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800c80c:	68fb      	ldr	r3, [r7, #12]
 800c80e:	683a      	ldr	r2, [r7, #0]
 800c810:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800c812:	683b      	ldr	r3, [r7, #0]
 800c814:	687a      	ldr	r2, [r7, #4]
 800c816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	1c5a      	adds	r2, r3, #1
 800c81e:	687b      	ldr	r3, [r7, #4]
 800c820:	601a      	str	r2, [r3, #0]
}
 800c822:	bf00      	nop
 800c824:	3714      	adds	r7, #20
 800c826:	46bd      	mov	sp, r7
 800c828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c82c:	4770      	bx	lr

0800c82e <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800c82e:	b480      	push	{r7}
 800c830:	b085      	sub	sp, #20
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	691b      	ldr	r3, [r3, #16]
 800c83a:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	685b      	ldr	r3, [r3, #4]
 800c840:	687a      	ldr	r2, [r7, #4]
 800c842:	6892      	ldr	r2, [r2, #8]
 800c844:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	687a      	ldr	r2, [r7, #4]
 800c84c:	6852      	ldr	r2, [r2, #4]
 800c84e:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	685b      	ldr	r3, [r3, #4]
 800c854:	687a      	ldr	r2, [r7, #4]
 800c856:	429a      	cmp	r2, r3
 800c858:	d103      	bne.n	800c862 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	689a      	ldr	r2, [r3, #8]
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800c868:	68fb      	ldr	r3, [r7, #12]
 800c86a:	681b      	ldr	r3, [r3, #0]
 800c86c:	1e5a      	subs	r2, r3, #1
 800c86e:	68fb      	ldr	r3, [r7, #12]
 800c870:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c872:	68fb      	ldr	r3, [r7, #12]
 800c874:	681b      	ldr	r3, [r3, #0]
}
 800c876:	4618      	mov	r0, r3
 800c878:	3714      	adds	r7, #20
 800c87a:	46bd      	mov	sp, r7
 800c87c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c880:	4770      	bx	lr
	...

0800c884 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800c884:	b580      	push	{r7, lr}
 800c886:	b084      	sub	sp, #16
 800c888:	af00      	add	r7, sp, #0
 800c88a:	6078      	str	r0, [r7, #4]
 800c88c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c892:	68fb      	ldr	r3, [r7, #12]
 800c894:	2b00      	cmp	r3, #0
 800c896:	d10c      	bne.n	800c8b2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c89c:	b672      	cpsid	i
 800c89e:	f383 8811 	msr	BASEPRI, r3
 800c8a2:	f3bf 8f6f 	isb	sy
 800c8a6:	f3bf 8f4f 	dsb	sy
 800c8aa:	b662      	cpsie	i
 800c8ac:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c8ae:	bf00      	nop
 800c8b0:	e7fe      	b.n	800c8b0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800c8b2:	f001 fe93 	bl	800e5dc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8b6:	68fb      	ldr	r3, [r7, #12]
 800c8b8:	681a      	ldr	r2, [r3, #0]
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8be:	68f9      	ldr	r1, [r7, #12]
 800c8c0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8c2:	fb01 f303 	mul.w	r3, r1, r3
 800c8c6:	441a      	add	r2, r3
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2200      	movs	r2, #0
 800c8d0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800c8d2:	68fb      	ldr	r3, [r7, #12]
 800c8d4:	681a      	ldr	r2, [r3, #0]
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681a      	ldr	r2, [r3, #0]
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8e2:	3b01      	subs	r3, #1
 800c8e4:	68f9      	ldr	r1, [r7, #12]
 800c8e6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800c8e8:	fb01 f303 	mul.w	r3, r1, r3
 800c8ec:	441a      	add	r2, r3
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800c8f2:	68fb      	ldr	r3, [r7, #12]
 800c8f4:	22ff      	movs	r2, #255	; 0xff
 800c8f6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	22ff      	movs	r2, #255	; 0xff
 800c8fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800c902:	683b      	ldr	r3, [r7, #0]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d114      	bne.n	800c932 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c908:	68fb      	ldr	r3, [r7, #12]
 800c90a:	691b      	ldr	r3, [r3, #16]
 800c90c:	2b00      	cmp	r3, #0
 800c90e:	d01a      	beq.n	800c946 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3310      	adds	r3, #16
 800c914:	4618      	mov	r0, r3
 800c916:	f001 f94d 	bl	800dbb4 <xTaskRemoveFromEventList>
 800c91a:	4603      	mov	r3, r0
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d012      	beq.n	800c946 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800c920:	4b0c      	ldr	r3, [pc, #48]	; (800c954 <xQueueGenericReset+0xd0>)
 800c922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c926:	601a      	str	r2, [r3, #0]
 800c928:	f3bf 8f4f 	dsb	sy
 800c92c:	f3bf 8f6f 	isb	sy
 800c930:	e009      	b.n	800c946 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800c932:	68fb      	ldr	r3, [r7, #12]
 800c934:	3310      	adds	r3, #16
 800c936:	4618      	mov	r0, r3
 800c938:	f7ff feef 	bl	800c71a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3324      	adds	r3, #36	; 0x24
 800c940:	4618      	mov	r0, r3
 800c942:	f7ff feea 	bl	800c71a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800c946:	f001 fe7d 	bl	800e644 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800c94a:	2301      	movs	r3, #1
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3710      	adds	r7, #16
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08e      	sub	sp, #56	; 0x38
 800c95c:	af02      	add	r7, sp, #8
 800c95e:	60f8      	str	r0, [r7, #12]
 800c960:	60b9      	str	r1, [r7, #8]
 800c962:	607a      	str	r2, [r7, #4]
 800c964:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	2b00      	cmp	r3, #0
 800c96a:	d10c      	bne.n	800c986 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800c96c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c970:	b672      	cpsid	i
 800c972:	f383 8811 	msr	BASEPRI, r3
 800c976:	f3bf 8f6f 	isb	sy
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	b662      	cpsie	i
 800c980:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800c982:	bf00      	nop
 800c984:	e7fe      	b.n	800c984 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800c986:	683b      	ldr	r3, [r7, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d10c      	bne.n	800c9a6 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800c98c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c990:	b672      	cpsid	i
 800c992:	f383 8811 	msr	BASEPRI, r3
 800c996:	f3bf 8f6f 	isb	sy
 800c99a:	f3bf 8f4f 	dsb	sy
 800c99e:	b662      	cpsie	i
 800c9a0:	627b      	str	r3, [r7, #36]	; 0x24
}
 800c9a2:	bf00      	nop
 800c9a4:	e7fe      	b.n	800c9a4 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d002      	beq.n	800c9b2 <xQueueGenericCreateStatic+0x5a>
 800c9ac:	68bb      	ldr	r3, [r7, #8]
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d001      	beq.n	800c9b6 <xQueueGenericCreateStatic+0x5e>
 800c9b2:	2301      	movs	r3, #1
 800c9b4:	e000      	b.n	800c9b8 <xQueueGenericCreateStatic+0x60>
 800c9b6:	2300      	movs	r3, #0
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d10c      	bne.n	800c9d6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800c9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c0:	b672      	cpsid	i
 800c9c2:	f383 8811 	msr	BASEPRI, r3
 800c9c6:	f3bf 8f6f 	isb	sy
 800c9ca:	f3bf 8f4f 	dsb	sy
 800c9ce:	b662      	cpsie	i
 800c9d0:	623b      	str	r3, [r7, #32]
}
 800c9d2:	bf00      	nop
 800c9d4:	e7fe      	b.n	800c9d4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d102      	bne.n	800c9e2 <xQueueGenericCreateStatic+0x8a>
 800c9dc:	68bb      	ldr	r3, [r7, #8]
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d101      	bne.n	800c9e6 <xQueueGenericCreateStatic+0x8e>
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	e000      	b.n	800c9e8 <xQueueGenericCreateStatic+0x90>
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d10c      	bne.n	800ca06 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800c9ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f0:	b672      	cpsid	i
 800c9f2:	f383 8811 	msr	BASEPRI, r3
 800c9f6:	f3bf 8f6f 	isb	sy
 800c9fa:	f3bf 8f4f 	dsb	sy
 800c9fe:	b662      	cpsie	i
 800ca00:	61fb      	str	r3, [r7, #28]
}
 800ca02:	bf00      	nop
 800ca04:	e7fe      	b.n	800ca04 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ca06:	2348      	movs	r3, #72	; 0x48
 800ca08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ca0a:	697b      	ldr	r3, [r7, #20]
 800ca0c:	2b48      	cmp	r3, #72	; 0x48
 800ca0e:	d00c      	beq.n	800ca2a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ca10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca14:	b672      	cpsid	i
 800ca16:	f383 8811 	msr	BASEPRI, r3
 800ca1a:	f3bf 8f6f 	isb	sy
 800ca1e:	f3bf 8f4f 	dsb	sy
 800ca22:	b662      	cpsie	i
 800ca24:	61bb      	str	r3, [r7, #24]
}
 800ca26:	bf00      	nop
 800ca28:	e7fe      	b.n	800ca28 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ca2a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ca30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d00d      	beq.n	800ca52 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ca36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca38:	2201      	movs	r2, #1
 800ca3a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ca3e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ca42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca44:	9300      	str	r3, [sp, #0]
 800ca46:	4613      	mov	r3, r2
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	68b9      	ldr	r1, [r7, #8]
 800ca4c:	68f8      	ldr	r0, [r7, #12]
 800ca4e:	f000 f847 	bl	800cae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ca52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ca54:	4618      	mov	r0, r3
 800ca56:	3730      	adds	r7, #48	; 0x30
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	bd80      	pop	{r7, pc}

0800ca5c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ca5c:	b580      	push	{r7, lr}
 800ca5e:	b08a      	sub	sp, #40	; 0x28
 800ca60:	af02      	add	r7, sp, #8
 800ca62:	60f8      	str	r0, [r7, #12]
 800ca64:	60b9      	str	r1, [r7, #8]
 800ca66:	4613      	mov	r3, r2
 800ca68:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	2b00      	cmp	r3, #0
 800ca6e:	d10c      	bne.n	800ca8a <xQueueGenericCreate+0x2e>
	__asm volatile
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	b672      	cpsid	i
 800ca76:	f383 8811 	msr	BASEPRI, r3
 800ca7a:	f3bf 8f6f 	isb	sy
 800ca7e:	f3bf 8f4f 	dsb	sy
 800ca82:	b662      	cpsie	i
 800ca84:	613b      	str	r3, [r7, #16]
}
 800ca86:	bf00      	nop
 800ca88:	e7fe      	b.n	800ca88 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800ca8a:	68bb      	ldr	r3, [r7, #8]
 800ca8c:	2b00      	cmp	r3, #0
 800ca8e:	d102      	bne.n	800ca96 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	61fb      	str	r3, [r7, #28]
 800ca94:	e004      	b.n	800caa0 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ca96:	68fb      	ldr	r3, [r7, #12]
 800ca98:	68ba      	ldr	r2, [r7, #8]
 800ca9a:	fb02 f303 	mul.w	r3, r2, r3
 800ca9e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800caa0:	69fb      	ldr	r3, [r7, #28]
 800caa2:	3348      	adds	r3, #72	; 0x48
 800caa4:	4618      	mov	r0, r3
 800caa6:	f001 fe81 	bl	800e7ac <pvPortMalloc>
 800caaa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800caac:	69bb      	ldr	r3, [r7, #24]
 800caae:	2b00      	cmp	r3, #0
 800cab0:	d011      	beq.n	800cad6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800cab2:	69bb      	ldr	r3, [r7, #24]
 800cab4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cab6:	697b      	ldr	r3, [r7, #20]
 800cab8:	3348      	adds	r3, #72	; 0x48
 800caba:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cabc:	69bb      	ldr	r3, [r7, #24]
 800cabe:	2200      	movs	r2, #0
 800cac0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cac4:	79fa      	ldrb	r2, [r7, #7]
 800cac6:	69bb      	ldr	r3, [r7, #24]
 800cac8:	9300      	str	r3, [sp, #0]
 800caca:	4613      	mov	r3, r2
 800cacc:	697a      	ldr	r2, [r7, #20]
 800cace:	68b9      	ldr	r1, [r7, #8]
 800cad0:	68f8      	ldr	r0, [r7, #12]
 800cad2:	f000 f805 	bl	800cae0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800cad6:	69bb      	ldr	r3, [r7, #24]
	}
 800cad8:	4618      	mov	r0, r3
 800cada:	3720      	adds	r7, #32
 800cadc:	46bd      	mov	sp, r7
 800cade:	bd80      	pop	{r7, pc}

0800cae0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800cae0:	b580      	push	{r7, lr}
 800cae2:	b084      	sub	sp, #16
 800cae4:	af00      	add	r7, sp, #0
 800cae6:	60f8      	str	r0, [r7, #12]
 800cae8:	60b9      	str	r1, [r7, #8]
 800caea:	607a      	str	r2, [r7, #4]
 800caec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	2b00      	cmp	r3, #0
 800caf2:	d103      	bne.n	800cafc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800caf4:	69bb      	ldr	r3, [r7, #24]
 800caf6:	69ba      	ldr	r2, [r7, #24]
 800caf8:	601a      	str	r2, [r3, #0]
 800cafa:	e002      	b.n	800cb02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800cafc:	69bb      	ldr	r3, [r7, #24]
 800cafe:	687a      	ldr	r2, [r7, #4]
 800cb00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800cb02:	69bb      	ldr	r3, [r7, #24]
 800cb04:	68fa      	ldr	r2, [r7, #12]
 800cb06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800cb08:	69bb      	ldr	r3, [r7, #24]
 800cb0a:	68ba      	ldr	r2, [r7, #8]
 800cb0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cb0e:	2101      	movs	r1, #1
 800cb10:	69b8      	ldr	r0, [r7, #24]
 800cb12:	f7ff feb7 	bl	800c884 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cb16:	bf00      	nop
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}

0800cb1e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800cb1e:	b580      	push	{r7, lr}
 800cb20:	b082      	sub	sp, #8
 800cb22:	af00      	add	r7, sp, #0
 800cb24:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cb26:	687b      	ldr	r3, [r7, #4]
 800cb28:	2b00      	cmp	r3, #0
 800cb2a:	d00e      	beq.n	800cb4a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	2200      	movs	r2, #0
 800cb30:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	2200      	movs	r2, #0
 800cb36:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cb3e:	2300      	movs	r3, #0
 800cb40:	2200      	movs	r2, #0
 800cb42:	2100      	movs	r1, #0
 800cb44:	6878      	ldr	r0, [r7, #4]
 800cb46:	f000 f837 	bl	800cbb8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cb4a:	bf00      	nop
 800cb4c:	3708      	adds	r7, #8
 800cb4e:	46bd      	mov	sp, r7
 800cb50:	bd80      	pop	{r7, pc}

0800cb52 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cb52:	b580      	push	{r7, lr}
 800cb54:	b086      	sub	sp, #24
 800cb56:	af00      	add	r7, sp, #0
 800cb58:	4603      	mov	r3, r0
 800cb5a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb5c:	2301      	movs	r3, #1
 800cb5e:	617b      	str	r3, [r7, #20]
 800cb60:	2300      	movs	r3, #0
 800cb62:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cb64:	79fb      	ldrb	r3, [r7, #7]
 800cb66:	461a      	mov	r2, r3
 800cb68:	6939      	ldr	r1, [r7, #16]
 800cb6a:	6978      	ldr	r0, [r7, #20]
 800cb6c:	f7ff ff76 	bl	800ca5c <xQueueGenericCreate>
 800cb70:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cb72:	68f8      	ldr	r0, [r7, #12]
 800cb74:	f7ff ffd3 	bl	800cb1e <prvInitialiseMutex>

		return xNewQueue;
 800cb78:	68fb      	ldr	r3, [r7, #12]
	}
 800cb7a:	4618      	mov	r0, r3
 800cb7c:	3718      	adds	r7, #24
 800cb7e:	46bd      	mov	sp, r7
 800cb80:	bd80      	pop	{r7, pc}

0800cb82 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cb82:	b580      	push	{r7, lr}
 800cb84:	b088      	sub	sp, #32
 800cb86:	af02      	add	r7, sp, #8
 800cb88:	4603      	mov	r3, r0
 800cb8a:	6039      	str	r1, [r7, #0]
 800cb8c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cb8e:	2301      	movs	r3, #1
 800cb90:	617b      	str	r3, [r7, #20]
 800cb92:	2300      	movs	r3, #0
 800cb94:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cb96:	79fb      	ldrb	r3, [r7, #7]
 800cb98:	9300      	str	r3, [sp, #0]
 800cb9a:	683b      	ldr	r3, [r7, #0]
 800cb9c:	2200      	movs	r2, #0
 800cb9e:	6939      	ldr	r1, [r7, #16]
 800cba0:	6978      	ldr	r0, [r7, #20]
 800cba2:	f7ff fed9 	bl	800c958 <xQueueGenericCreateStatic>
 800cba6:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cba8:	68f8      	ldr	r0, [r7, #12]
 800cbaa:	f7ff ffb8 	bl	800cb1e <prvInitialiseMutex>

		return xNewQueue;
 800cbae:	68fb      	ldr	r3, [r7, #12]
	}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3718      	adds	r7, #24
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}

0800cbb8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800cbb8:	b580      	push	{r7, lr}
 800cbba:	b08e      	sub	sp, #56	; 0x38
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	60f8      	str	r0, [r7, #12]
 800cbc0:	60b9      	str	r1, [r7, #8]
 800cbc2:	607a      	str	r2, [r7, #4]
 800cbc4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800cbc6:	2300      	movs	r3, #0
 800cbc8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d10c      	bne.n	800cbee <xQueueGenericSend+0x36>
	__asm volatile
 800cbd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbd8:	b672      	cpsid	i
 800cbda:	f383 8811 	msr	BASEPRI, r3
 800cbde:	f3bf 8f6f 	isb	sy
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	b662      	cpsie	i
 800cbe8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cbea:	bf00      	nop
 800cbec:	e7fe      	b.n	800cbec <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800cbee:	68bb      	ldr	r3, [r7, #8]
 800cbf0:	2b00      	cmp	r3, #0
 800cbf2:	d103      	bne.n	800cbfc <xQueueGenericSend+0x44>
 800cbf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cbf8:	2b00      	cmp	r3, #0
 800cbfa:	d101      	bne.n	800cc00 <xQueueGenericSend+0x48>
 800cbfc:	2301      	movs	r3, #1
 800cbfe:	e000      	b.n	800cc02 <xQueueGenericSend+0x4a>
 800cc00:	2300      	movs	r3, #0
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <xQueueGenericSend+0x68>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800cc20:	683b      	ldr	r3, [r7, #0]
 800cc22:	2b02      	cmp	r3, #2
 800cc24:	d103      	bne.n	800cc2e <xQueueGenericSend+0x76>
 800cc26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc2a:	2b01      	cmp	r3, #1
 800cc2c:	d101      	bne.n	800cc32 <xQueueGenericSend+0x7a>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	e000      	b.n	800cc34 <xQueueGenericSend+0x7c>
 800cc32:	2300      	movs	r3, #0
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d10c      	bne.n	800cc52 <xQueueGenericSend+0x9a>
	__asm volatile
 800cc38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc3c:	b672      	cpsid	i
 800cc3e:	f383 8811 	msr	BASEPRI, r3
 800cc42:	f3bf 8f6f 	isb	sy
 800cc46:	f3bf 8f4f 	dsb	sy
 800cc4a:	b662      	cpsie	i
 800cc4c:	623b      	str	r3, [r7, #32]
}
 800cc4e:	bf00      	nop
 800cc50:	e7fe      	b.n	800cc50 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cc52:	f001 f975 	bl	800df40 <xTaskGetSchedulerState>
 800cc56:	4603      	mov	r3, r0
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d102      	bne.n	800cc62 <xQueueGenericSend+0xaa>
 800cc5c:	687b      	ldr	r3, [r7, #4]
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d101      	bne.n	800cc66 <xQueueGenericSend+0xae>
 800cc62:	2301      	movs	r3, #1
 800cc64:	e000      	b.n	800cc68 <xQueueGenericSend+0xb0>
 800cc66:	2300      	movs	r3, #0
 800cc68:	2b00      	cmp	r3, #0
 800cc6a:	d10c      	bne.n	800cc86 <xQueueGenericSend+0xce>
	__asm volatile
 800cc6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc70:	b672      	cpsid	i
 800cc72:	f383 8811 	msr	BASEPRI, r3
 800cc76:	f3bf 8f6f 	isb	sy
 800cc7a:	f3bf 8f4f 	dsb	sy
 800cc7e:	b662      	cpsie	i
 800cc80:	61fb      	str	r3, [r7, #28]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800cc86:	f001 fca9 	bl	800e5dc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800cc8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc92:	429a      	cmp	r2, r3
 800cc94:	d302      	bcc.n	800cc9c <xQueueGenericSend+0xe4>
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	2b02      	cmp	r3, #2
 800cc9a:	d129      	bne.n	800ccf0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cc9c:	683a      	ldr	r2, [r7, #0]
 800cc9e:	68b9      	ldr	r1, [r7, #8]
 800cca0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cca2:	f000 f9bb 	bl	800d01c <prvCopyDataToQueue>
 800cca6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cca8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccac:	2b00      	cmp	r3, #0
 800ccae:	d010      	beq.n	800ccd2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ccb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ccb2:	3324      	adds	r3, #36	; 0x24
 800ccb4:	4618      	mov	r0, r3
 800ccb6:	f000 ff7d 	bl	800dbb4 <xTaskRemoveFromEventList>
 800ccba:	4603      	mov	r3, r0
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	d013      	beq.n	800cce8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800ccc0:	4b3f      	ldr	r3, [pc, #252]	; (800cdc0 <xQueueGenericSend+0x208>)
 800ccc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccc6:	601a      	str	r2, [r3, #0]
 800ccc8:	f3bf 8f4f 	dsb	sy
 800cccc:	f3bf 8f6f 	isb	sy
 800ccd0:	e00a      	b.n	800cce8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800ccd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ccd4:	2b00      	cmp	r3, #0
 800ccd6:	d007      	beq.n	800cce8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800ccd8:	4b39      	ldr	r3, [pc, #228]	; (800cdc0 <xQueueGenericSend+0x208>)
 800ccda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccde:	601a      	str	r2, [r3, #0]
 800cce0:	f3bf 8f4f 	dsb	sy
 800cce4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800cce8:	f001 fcac 	bl	800e644 <vPortExitCritical>
				return pdPASS;
 800ccec:	2301      	movs	r3, #1
 800ccee:	e063      	b.n	800cdb8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	2b00      	cmp	r3, #0
 800ccf4:	d103      	bne.n	800ccfe <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ccf6:	f001 fca5 	bl	800e644 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e05c      	b.n	800cdb8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ccfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d106      	bne.n	800cd12 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cd04:	f107 0314 	add.w	r3, r7, #20
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f000 ffb7 	bl	800dc7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cd0e:	2301      	movs	r3, #1
 800cd10:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800cd12:	f001 fc97 	bl	800e644 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cd16:	f000 fd2f 	bl	800d778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cd1a:	f001 fc5f 	bl	800e5dc <vPortEnterCritical>
 800cd1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cd24:	b25b      	sxtb	r3, r3
 800cd26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd2a:	d103      	bne.n	800cd34 <xQueueGenericSend+0x17c>
 800cd2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd2e:	2200      	movs	r2, #0
 800cd30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cd34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd36:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cd3a:	b25b      	sxtb	r3, r3
 800cd3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd40:	d103      	bne.n	800cd4a <xQueueGenericSend+0x192>
 800cd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd44:	2200      	movs	r2, #0
 800cd46:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cd4a:	f001 fc7b 	bl	800e644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cd4e:	1d3a      	adds	r2, r7, #4
 800cd50:	f107 0314 	add.w	r3, r7, #20
 800cd54:	4611      	mov	r1, r2
 800cd56:	4618      	mov	r0, r3
 800cd58:	f000 ffa6 	bl	800dca8 <xTaskCheckForTimeOut>
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d124      	bne.n	800cdac <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800cd62:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd64:	f000 fa2c 	bl	800d1c0 <prvIsQueueFull>
 800cd68:	4603      	mov	r3, r0
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d018      	beq.n	800cda0 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cd6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cd70:	3310      	adds	r3, #16
 800cd72:	687a      	ldr	r2, [r7, #4]
 800cd74:	4611      	mov	r1, r2
 800cd76:	4618      	mov	r0, r3
 800cd78:	f000 fef6 	bl	800db68 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800cd7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cd7e:	f000 f9b7 	bl	800d0f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800cd82:	f000 fd07 	bl	800d794 <xTaskResumeAll>
 800cd86:	4603      	mov	r3, r0
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	f47f af7c 	bne.w	800cc86 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800cd8e:	4b0c      	ldr	r3, [pc, #48]	; (800cdc0 <xQueueGenericSend+0x208>)
 800cd90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd94:	601a      	str	r2, [r3, #0]
 800cd96:	f3bf 8f4f 	dsb	sy
 800cd9a:	f3bf 8f6f 	isb	sy
 800cd9e:	e772      	b.n	800cc86 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800cda0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cda2:	f000 f9a5 	bl	800d0f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cda6:	f000 fcf5 	bl	800d794 <xTaskResumeAll>
 800cdaa:	e76c      	b.n	800cc86 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800cdac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800cdae:	f000 f99f 	bl	800d0f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cdb2:	f000 fcef 	bl	800d794 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800cdb6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800cdb8:	4618      	mov	r0, r3
 800cdba:	3738      	adds	r7, #56	; 0x38
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	bd80      	pop	{r7, pc}
 800cdc0:	e000ed04 	.word	0xe000ed04

0800cdc4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800cdc4:	b580      	push	{r7, lr}
 800cdc6:	b08e      	sub	sp, #56	; 0x38
 800cdc8:	af00      	add	r7, sp, #0
 800cdca:	6078      	str	r0, [r7, #4]
 800cdcc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800cdce:	2300      	movs	r3, #0
 800cdd0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800cdd6:	2300      	movs	r3, #0
 800cdd8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800cdda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	d10c      	bne.n	800cdfa <xQueueSemaphoreTake+0x36>
	__asm volatile
 800cde0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde4:	b672      	cpsid	i
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	b662      	cpsie	i
 800cdf4:	623b      	str	r3, [r7, #32]
}
 800cdf6:	bf00      	nop
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800cdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cdfe:	2b00      	cmp	r3, #0
 800ce00:	d00c      	beq.n	800ce1c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800ce02:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce06:	b672      	cpsid	i
 800ce08:	f383 8811 	msr	BASEPRI, r3
 800ce0c:	f3bf 8f6f 	isb	sy
 800ce10:	f3bf 8f4f 	dsb	sy
 800ce14:	b662      	cpsie	i
 800ce16:	61fb      	str	r3, [r7, #28]
}
 800ce18:	bf00      	nop
 800ce1a:	e7fe      	b.n	800ce1a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce1c:	f001 f890 	bl	800df40 <xTaskGetSchedulerState>
 800ce20:	4603      	mov	r3, r0
 800ce22:	2b00      	cmp	r3, #0
 800ce24:	d102      	bne.n	800ce2c <xQueueSemaphoreTake+0x68>
 800ce26:	683b      	ldr	r3, [r7, #0]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <xQueueSemaphoreTake+0x6c>
 800ce2c:	2301      	movs	r3, #1
 800ce2e:	e000      	b.n	800ce32 <xQueueSemaphoreTake+0x6e>
 800ce30:	2300      	movs	r3, #0
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d10c      	bne.n	800ce50 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800ce36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce3a:	b672      	cpsid	i
 800ce3c:	f383 8811 	msr	BASEPRI, r3
 800ce40:	f3bf 8f6f 	isb	sy
 800ce44:	f3bf 8f4f 	dsb	sy
 800ce48:	b662      	cpsie	i
 800ce4a:	61bb      	str	r3, [r7, #24]
}
 800ce4c:	bf00      	nop
 800ce4e:	e7fe      	b.n	800ce4e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ce50:	f001 fbc4 	bl	800e5dc <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ce54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ce58:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ce5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce5c:	2b00      	cmp	r3, #0
 800ce5e:	d024      	beq.n	800ceaa <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ce60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ce62:	1e5a      	subs	r2, r3, #1
 800ce64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce66:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ce68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce6a:	681b      	ldr	r3, [r3, #0]
 800ce6c:	2b00      	cmp	r3, #0
 800ce6e:	d104      	bne.n	800ce7a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ce70:	f001 fa2c 	bl	800e2cc <pvTaskIncrementMutexHeldCount>
 800ce74:	4602      	mov	r2, r0
 800ce76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce78:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ce7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce7c:	691b      	ldr	r3, [r3, #16]
 800ce7e:	2b00      	cmp	r3, #0
 800ce80:	d00f      	beq.n	800cea2 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ce82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce84:	3310      	adds	r3, #16
 800ce86:	4618      	mov	r0, r3
 800ce88:	f000 fe94 	bl	800dbb4 <xTaskRemoveFromEventList>
 800ce8c:	4603      	mov	r3, r0
 800ce8e:	2b00      	cmp	r3, #0
 800ce90:	d007      	beq.n	800cea2 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ce92:	4b55      	ldr	r3, [pc, #340]	; (800cfe8 <xQueueSemaphoreTake+0x224>)
 800ce94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce98:	601a      	str	r2, [r3, #0]
 800ce9a:	f3bf 8f4f 	dsb	sy
 800ce9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800cea2:	f001 fbcf 	bl	800e644 <vPortExitCritical>
				return pdPASS;
 800cea6:	2301      	movs	r3, #1
 800cea8:	e099      	b.n	800cfde <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d113      	bne.n	800ced8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ceb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d00c      	beq.n	800ced0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	b672      	cpsid	i
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	b662      	cpsie	i
 800ceca:	617b      	str	r3, [r7, #20]
}
 800cecc:	bf00      	nop
 800cece:	e7fe      	b.n	800cece <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ced0:	f001 fbb8 	bl	800e644 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ced4:	2300      	movs	r3, #0
 800ced6:	e082      	b.n	800cfde <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ced8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d106      	bne.n	800ceec <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cede:	f107 030c 	add.w	r3, r7, #12
 800cee2:	4618      	mov	r0, r3
 800cee4:	f000 feca 	bl	800dc7c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800cee8:	2301      	movs	r3, #1
 800ceea:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ceec:	f001 fbaa 	bl	800e644 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800cef0:	f000 fc42 	bl	800d778 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cef4:	f001 fb72 	bl	800e5dc <vPortEnterCritical>
 800cef8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cefa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800cefe:	b25b      	sxtb	r3, r3
 800cf00:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf04:	d103      	bne.n	800cf0e <xQueueSemaphoreTake+0x14a>
 800cf06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf08:	2200      	movs	r2, #0
 800cf0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800cf14:	b25b      	sxtb	r3, r3
 800cf16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf1a:	d103      	bne.n	800cf24 <xQueueSemaphoreTake+0x160>
 800cf1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800cf24:	f001 fb8e 	bl	800e644 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf28:	463a      	mov	r2, r7
 800cf2a:	f107 030c 	add.w	r3, r7, #12
 800cf2e:	4611      	mov	r1, r2
 800cf30:	4618      	mov	r0, r3
 800cf32:	f000 feb9 	bl	800dca8 <xTaskCheckForTimeOut>
 800cf36:	4603      	mov	r3, r0
 800cf38:	2b00      	cmp	r3, #0
 800cf3a:	d132      	bne.n	800cfa2 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cf3c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf3e:	f000 f929 	bl	800d194 <prvIsQueueEmpty>
 800cf42:	4603      	mov	r3, r0
 800cf44:	2b00      	cmp	r3, #0
 800cf46:	d026      	beq.n	800cf96 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cf48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf4a:	681b      	ldr	r3, [r3, #0]
 800cf4c:	2b00      	cmp	r3, #0
 800cf4e:	d109      	bne.n	800cf64 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800cf50:	f001 fb44 	bl	800e5dc <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cf54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf56:	689b      	ldr	r3, [r3, #8]
 800cf58:	4618      	mov	r0, r3
 800cf5a:	f001 f80f 	bl	800df7c <xTaskPriorityInherit>
 800cf5e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800cf60:	f001 fb70 	bl	800e644 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800cf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cf66:	3324      	adds	r3, #36	; 0x24
 800cf68:	683a      	ldr	r2, [r7, #0]
 800cf6a:	4611      	mov	r1, r2
 800cf6c:	4618      	mov	r0, r3
 800cf6e:	f000 fdfb 	bl	800db68 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf72:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf74:	f000 f8bc 	bl	800d0f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf78:	f000 fc0c 	bl	800d794 <xTaskResumeAll>
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	f47f af66 	bne.w	800ce50 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800cf84:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <xQueueSemaphoreTake+0x224>)
 800cf86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cf8a:	601a      	str	r2, [r3, #0]
 800cf8c:	f3bf 8f4f 	dsb	sy
 800cf90:	f3bf 8f6f 	isb	sy
 800cf94:	e75c      	b.n	800ce50 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800cf96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cf98:	f000 f8aa 	bl	800d0f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf9c:	f000 fbfa 	bl	800d794 <xTaskResumeAll>
 800cfa0:	e756      	b.n	800ce50 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800cfa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfa4:	f000 f8a4 	bl	800d0f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfa8:	f000 fbf4 	bl	800d794 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800cfac:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfae:	f000 f8f1 	bl	800d194 <prvIsQueueEmpty>
 800cfb2:	4603      	mov	r3, r0
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	f43f af4b 	beq.w	800ce50 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800cfba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d00d      	beq.n	800cfdc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800cfc0:	f001 fb0c 	bl	800e5dc <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800cfc4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800cfc6:	f000 f811 	bl	800cfec <prvGetDisinheritPriorityAfterTimeout>
 800cfca:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800cfcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cfce:	689b      	ldr	r3, [r3, #8]
 800cfd0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cfd2:	4618      	mov	r0, r3
 800cfd4:	f001 f8dc 	bl	800e190 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800cfd8:	f001 fb34 	bl	800e644 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800cfdc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800cfde:	4618      	mov	r0, r3
 800cfe0:	3738      	adds	r7, #56	; 0x38
 800cfe2:	46bd      	mov	sp, r7
 800cfe4:	bd80      	pop	{r7, pc}
 800cfe6:	bf00      	nop
 800cfe8:	e000ed04 	.word	0xe000ed04

0800cfec <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800cfec:	b480      	push	{r7}
 800cfee:	b085      	sub	sp, #20
 800cff0:	af00      	add	r7, sp, #0
 800cff2:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cff8:	2b00      	cmp	r3, #0
 800cffa:	d006      	beq.n	800d00a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	f1c3 0307 	rsb	r3, r3, #7
 800d006:	60fb      	str	r3, [r7, #12]
 800d008:	e001      	b.n	800d00e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800d00a:	2300      	movs	r3, #0
 800d00c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800d00e:	68fb      	ldr	r3, [r7, #12]
	}
 800d010:	4618      	mov	r0, r3
 800d012:	3714      	adds	r7, #20
 800d014:	46bd      	mov	sp, r7
 800d016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d01a:	4770      	bx	lr

0800d01c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b086      	sub	sp, #24
 800d020:	af00      	add	r7, sp, #0
 800d022:	60f8      	str	r0, [r7, #12]
 800d024:	60b9      	str	r1, [r7, #8]
 800d026:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d028:	2300      	movs	r3, #0
 800d02a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d02c:	68fb      	ldr	r3, [r7, #12]
 800d02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d030:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d032:	68fb      	ldr	r3, [r7, #12]
 800d034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d036:	2b00      	cmp	r3, #0
 800d038:	d10d      	bne.n	800d056 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d03a:	68fb      	ldr	r3, [r7, #12]
 800d03c:	681b      	ldr	r3, [r3, #0]
 800d03e:	2b00      	cmp	r3, #0
 800d040:	d14d      	bne.n	800d0de <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	689b      	ldr	r3, [r3, #8]
 800d046:	4618      	mov	r0, r3
 800d048:	f001 f818 	bl	800e07c <xTaskPriorityDisinherit>
 800d04c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	609a      	str	r2, [r3, #8]
 800d054:	e043      	b.n	800d0de <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d119      	bne.n	800d090 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	6858      	ldr	r0, [r3, #4]
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d064:	461a      	mov	r2, r3
 800d066:	68b9      	ldr	r1, [r7, #8]
 800d068:	f001 fdb4 	bl	800ebd4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d06c:	68fb      	ldr	r3, [r7, #12]
 800d06e:	685a      	ldr	r2, [r3, #4]
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d074:	441a      	add	r2, r3
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d07a:	68fb      	ldr	r3, [r7, #12]
 800d07c:	685a      	ldr	r2, [r3, #4]
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	689b      	ldr	r3, [r3, #8]
 800d082:	429a      	cmp	r2, r3
 800d084:	d32b      	bcc.n	800d0de <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d086:	68fb      	ldr	r3, [r7, #12]
 800d088:	681a      	ldr	r2, [r3, #0]
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	605a      	str	r2, [r3, #4]
 800d08e:	e026      	b.n	800d0de <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	68d8      	ldr	r0, [r3, #12]
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d098:	461a      	mov	r2, r3
 800d09a:	68b9      	ldr	r1, [r7, #8]
 800d09c:	f001 fd9a 	bl	800ebd4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	68da      	ldr	r2, [r3, #12]
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0a8:	425b      	negs	r3, r3
 800d0aa:	441a      	add	r2, r3
 800d0ac:	68fb      	ldr	r3, [r7, #12]
 800d0ae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	68da      	ldr	r2, [r3, #12]
 800d0b4:	68fb      	ldr	r3, [r7, #12]
 800d0b6:	681b      	ldr	r3, [r3, #0]
 800d0b8:	429a      	cmp	r2, r3
 800d0ba:	d207      	bcs.n	800d0cc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	689a      	ldr	r2, [r3, #8]
 800d0c0:	68fb      	ldr	r3, [r7, #12]
 800d0c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c4:	425b      	negs	r3, r3
 800d0c6:	441a      	add	r2, r3
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	2b02      	cmp	r3, #2
 800d0d0:	d105      	bne.n	800d0de <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d0d2:	693b      	ldr	r3, [r7, #16]
 800d0d4:	2b00      	cmp	r3, #0
 800d0d6:	d002      	beq.n	800d0de <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800d0d8:	693b      	ldr	r3, [r7, #16]
 800d0da:	3b01      	subs	r3, #1
 800d0dc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d0de:	693b      	ldr	r3, [r7, #16]
 800d0e0:	1c5a      	adds	r2, r3, #1
 800d0e2:	68fb      	ldr	r3, [r7, #12]
 800d0e4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800d0e6:	697b      	ldr	r3, [r7, #20]
}
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	3718      	adds	r7, #24
 800d0ec:	46bd      	mov	sp, r7
 800d0ee:	bd80      	pop	{r7, pc}

0800d0f0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800d0f0:	b580      	push	{r7, lr}
 800d0f2:	b084      	sub	sp, #16
 800d0f4:	af00      	add	r7, sp, #0
 800d0f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800d0f8:	f001 fa70 	bl	800e5dc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d102:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d104:	e011      	b.n	800d12a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	d012      	beq.n	800d134 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	3324      	adds	r3, #36	; 0x24
 800d112:	4618      	mov	r0, r3
 800d114:	f000 fd4e 	bl	800dbb4 <xTaskRemoveFromEventList>
 800d118:	4603      	mov	r3, r0
 800d11a:	2b00      	cmp	r3, #0
 800d11c:	d001      	beq.n	800d122 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800d11e:	f000 fe29 	bl	800dd74 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800d122:	7bfb      	ldrb	r3, [r7, #15]
 800d124:	3b01      	subs	r3, #1
 800d126:	b2db      	uxtb	r3, r3
 800d128:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d12a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	dce9      	bgt.n	800d106 <prvUnlockQueue+0x16>
 800d132:	e000      	b.n	800d136 <prvUnlockQueue+0x46>
					break;
 800d134:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	22ff      	movs	r2, #255	; 0xff
 800d13a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800d13e:	f001 fa81 	bl	800e644 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800d142:	f001 fa4b 	bl	800e5dc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d14c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d14e:	e011      	b.n	800d174 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	691b      	ldr	r3, [r3, #16]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d012      	beq.n	800d17e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d158:	687b      	ldr	r3, [r7, #4]
 800d15a:	3310      	adds	r3, #16
 800d15c:	4618      	mov	r0, r3
 800d15e:	f000 fd29 	bl	800dbb4 <xTaskRemoveFromEventList>
 800d162:	4603      	mov	r3, r0
 800d164:	2b00      	cmp	r3, #0
 800d166:	d001      	beq.n	800d16c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800d168:	f000 fe04 	bl	800dd74 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800d16c:	7bbb      	ldrb	r3, [r7, #14]
 800d16e:	3b01      	subs	r3, #1
 800d170:	b2db      	uxtb	r3, r3
 800d172:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d174:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d178:	2b00      	cmp	r3, #0
 800d17a:	dce9      	bgt.n	800d150 <prvUnlockQueue+0x60>
 800d17c:	e000      	b.n	800d180 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800d17e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	22ff      	movs	r2, #255	; 0xff
 800d184:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800d188:	f001 fa5c 	bl	800e644 <vPortExitCritical>
}
 800d18c:	bf00      	nop
 800d18e:	3710      	adds	r7, #16
 800d190:	46bd      	mov	sp, r7
 800d192:	bd80      	pop	{r7, pc}

0800d194 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d194:	b580      	push	{r7, lr}
 800d196:	b084      	sub	sp, #16
 800d198:	af00      	add	r7, sp, #0
 800d19a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d19c:	f001 fa1e 	bl	800e5dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d1a0:	687b      	ldr	r3, [r7, #4]
 800d1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	d102      	bne.n	800d1ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800d1a8:	2301      	movs	r3, #1
 800d1aa:	60fb      	str	r3, [r7, #12]
 800d1ac:	e001      	b.n	800d1b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800d1ae:	2300      	movs	r3, #0
 800d1b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1b2:	f001 fa47 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800d1b6:	68fb      	ldr	r3, [r7, #12]
}
 800d1b8:	4618      	mov	r0, r3
 800d1ba:	3710      	adds	r7, #16
 800d1bc:	46bd      	mov	sp, r7
 800d1be:	bd80      	pop	{r7, pc}

0800d1c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b084      	sub	sp, #16
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d1c8:	f001 fa08 	bl	800e5dc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1d4:	429a      	cmp	r2, r3
 800d1d6:	d102      	bne.n	800d1de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800d1d8:	2301      	movs	r3, #1
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	e001      	b.n	800d1e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800d1de:	2300      	movs	r3, #0
 800d1e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800d1e2:	f001 fa2f 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800d1e6:	68fb      	ldr	r3, [r7, #12]
}
 800d1e8:	4618      	mov	r0, r3
 800d1ea:	3710      	adds	r7, #16
 800d1ec:	46bd      	mov	sp, r7
 800d1ee:	bd80      	pop	{r7, pc}

0800d1f0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800d1f0:	b580      	push	{r7, lr}
 800d1f2:	b08e      	sub	sp, #56	; 0x38
 800d1f4:	af04      	add	r7, sp, #16
 800d1f6:	60f8      	str	r0, [r7, #12]
 800d1f8:	60b9      	str	r1, [r7, #8]
 800d1fa:	607a      	str	r2, [r7, #4]
 800d1fc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800d1fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d200:	2b00      	cmp	r3, #0
 800d202:	d10c      	bne.n	800d21e <xTaskCreateStatic+0x2e>
	__asm volatile
 800d204:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d208:	b672      	cpsid	i
 800d20a:	f383 8811 	msr	BASEPRI, r3
 800d20e:	f3bf 8f6f 	isb	sy
 800d212:	f3bf 8f4f 	dsb	sy
 800d216:	b662      	cpsie	i
 800d218:	623b      	str	r3, [r7, #32]
}
 800d21a:	bf00      	nop
 800d21c:	e7fe      	b.n	800d21c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800d21e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d220:	2b00      	cmp	r3, #0
 800d222:	d10c      	bne.n	800d23e <xTaskCreateStatic+0x4e>
	__asm volatile
 800d224:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d228:	b672      	cpsid	i
 800d22a:	f383 8811 	msr	BASEPRI, r3
 800d22e:	f3bf 8f6f 	isb	sy
 800d232:	f3bf 8f4f 	dsb	sy
 800d236:	b662      	cpsie	i
 800d238:	61fb      	str	r3, [r7, #28]
}
 800d23a:	bf00      	nop
 800d23c:	e7fe      	b.n	800d23c <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800d23e:	2358      	movs	r3, #88	; 0x58
 800d240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800d242:	693b      	ldr	r3, [r7, #16]
 800d244:	2b58      	cmp	r3, #88	; 0x58
 800d246:	d00c      	beq.n	800d262 <xTaskCreateStatic+0x72>
	__asm volatile
 800d248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d24c:	b672      	cpsid	i
 800d24e:	f383 8811 	msr	BASEPRI, r3
 800d252:	f3bf 8f6f 	isb	sy
 800d256:	f3bf 8f4f 	dsb	sy
 800d25a:	b662      	cpsie	i
 800d25c:	61bb      	str	r3, [r7, #24]
}
 800d25e:	bf00      	nop
 800d260:	e7fe      	b.n	800d260 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800d262:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800d264:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d266:	2b00      	cmp	r3, #0
 800d268:	d01e      	beq.n	800d2a8 <xTaskCreateStatic+0xb8>
 800d26a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	d01b      	beq.n	800d2a8 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d272:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800d274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d276:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d278:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800d27a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d27c:	2202      	movs	r2, #2
 800d27e:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800d282:	2300      	movs	r3, #0
 800d284:	9303      	str	r3, [sp, #12]
 800d286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d288:	9302      	str	r3, [sp, #8]
 800d28a:	f107 0314 	add.w	r3, r7, #20
 800d28e:	9301      	str	r3, [sp, #4]
 800d290:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d292:	9300      	str	r3, [sp, #0]
 800d294:	683b      	ldr	r3, [r7, #0]
 800d296:	687a      	ldr	r2, [r7, #4]
 800d298:	68b9      	ldr	r1, [r7, #8]
 800d29a:	68f8      	ldr	r0, [r7, #12]
 800d29c:	f000 f850 	bl	800d340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d2a0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800d2a2:	f000 f8e1 	bl	800d468 <prvAddNewTaskToReadyList>
 800d2a6:	e001      	b.n	800d2ac <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800d2a8:	2300      	movs	r3, #0
 800d2aa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800d2ac:	697b      	ldr	r3, [r7, #20]
	}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3728      	adds	r7, #40	; 0x28
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	bd80      	pop	{r7, pc}

0800d2b6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800d2b6:	b580      	push	{r7, lr}
 800d2b8:	b08c      	sub	sp, #48	; 0x30
 800d2ba:	af04      	add	r7, sp, #16
 800d2bc:	60f8      	str	r0, [r7, #12]
 800d2be:	60b9      	str	r1, [r7, #8]
 800d2c0:	603b      	str	r3, [r7, #0]
 800d2c2:	4613      	mov	r3, r2
 800d2c4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800d2c6:	88fb      	ldrh	r3, [r7, #6]
 800d2c8:	009b      	lsls	r3, r3, #2
 800d2ca:	4618      	mov	r0, r3
 800d2cc:	f001 fa6e 	bl	800e7ac <pvPortMalloc>
 800d2d0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800d2d2:	697b      	ldr	r3, [r7, #20]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	d00e      	beq.n	800d2f6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800d2d8:	2058      	movs	r0, #88	; 0x58
 800d2da:	f001 fa67 	bl	800e7ac <pvPortMalloc>
 800d2de:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800d2e0:	69fb      	ldr	r3, [r7, #28]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d003      	beq.n	800d2ee <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800d2e6:	69fb      	ldr	r3, [r7, #28]
 800d2e8:	697a      	ldr	r2, [r7, #20]
 800d2ea:	631a      	str	r2, [r3, #48]	; 0x30
 800d2ec:	e005      	b.n	800d2fa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800d2ee:	6978      	ldr	r0, [r7, #20]
 800d2f0:	f001 fb2c 	bl	800e94c <vPortFree>
 800d2f4:	e001      	b.n	800d2fa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800d2f6:	2300      	movs	r3, #0
 800d2f8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800d2fa:	69fb      	ldr	r3, [r7, #28]
 800d2fc:	2b00      	cmp	r3, #0
 800d2fe:	d017      	beq.n	800d330 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800d300:	69fb      	ldr	r3, [r7, #28]
 800d302:	2200      	movs	r2, #0
 800d304:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800d308:	88fa      	ldrh	r2, [r7, #6]
 800d30a:	2300      	movs	r3, #0
 800d30c:	9303      	str	r3, [sp, #12]
 800d30e:	69fb      	ldr	r3, [r7, #28]
 800d310:	9302      	str	r3, [sp, #8]
 800d312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d314:	9301      	str	r3, [sp, #4]
 800d316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d318:	9300      	str	r3, [sp, #0]
 800d31a:	683b      	ldr	r3, [r7, #0]
 800d31c:	68b9      	ldr	r1, [r7, #8]
 800d31e:	68f8      	ldr	r0, [r7, #12]
 800d320:	f000 f80e 	bl	800d340 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800d324:	69f8      	ldr	r0, [r7, #28]
 800d326:	f000 f89f 	bl	800d468 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800d32a:	2301      	movs	r3, #1
 800d32c:	61bb      	str	r3, [r7, #24]
 800d32e:	e002      	b.n	800d336 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800d330:	f04f 33ff 	mov.w	r3, #4294967295
 800d334:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800d336:	69bb      	ldr	r3, [r7, #24]
	}
 800d338:	4618      	mov	r0, r3
 800d33a:	3720      	adds	r7, #32
 800d33c:	46bd      	mov	sp, r7
 800d33e:	bd80      	pop	{r7, pc}

0800d340 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800d340:	b580      	push	{r7, lr}
 800d342:	b088      	sub	sp, #32
 800d344:	af00      	add	r7, sp, #0
 800d346:	60f8      	str	r0, [r7, #12]
 800d348:	60b9      	str	r1, [r7, #8]
 800d34a:	607a      	str	r2, [r7, #4]
 800d34c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800d34e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d350:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800d352:	687b      	ldr	r3, [r7, #4]
 800d354:	009b      	lsls	r3, r3, #2
 800d356:	461a      	mov	r2, r3
 800d358:	21a5      	movs	r1, #165	; 0xa5
 800d35a:	f001 fc49 	bl	800ebf0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800d35e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d360:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d362:	6879      	ldr	r1, [r7, #4]
 800d364:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800d368:	440b      	add	r3, r1
 800d36a:	009b      	lsls	r3, r3, #2
 800d36c:	4413      	add	r3, r2
 800d36e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800d370:	69bb      	ldr	r3, [r7, #24]
 800d372:	f023 0307 	bic.w	r3, r3, #7
 800d376:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800d378:	69bb      	ldr	r3, [r7, #24]
 800d37a:	f003 0307 	and.w	r3, r3, #7
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d00c      	beq.n	800d39c <prvInitialiseNewTask+0x5c>
	__asm volatile
 800d382:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d386:	b672      	cpsid	i
 800d388:	f383 8811 	msr	BASEPRI, r3
 800d38c:	f3bf 8f6f 	isb	sy
 800d390:	f3bf 8f4f 	dsb	sy
 800d394:	b662      	cpsie	i
 800d396:	617b      	str	r3, [r7, #20]
}
 800d398:	bf00      	nop
 800d39a:	e7fe      	b.n	800d39a <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800d39c:	68bb      	ldr	r3, [r7, #8]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	d01f      	beq.n	800d3e2 <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3a2:	2300      	movs	r3, #0
 800d3a4:	61fb      	str	r3, [r7, #28]
 800d3a6:	e012      	b.n	800d3ce <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800d3a8:	68ba      	ldr	r2, [r7, #8]
 800d3aa:	69fb      	ldr	r3, [r7, #28]
 800d3ac:	4413      	add	r3, r2
 800d3ae:	7819      	ldrb	r1, [r3, #0]
 800d3b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d3b2:	69fb      	ldr	r3, [r7, #28]
 800d3b4:	4413      	add	r3, r2
 800d3b6:	3334      	adds	r3, #52	; 0x34
 800d3b8:	460a      	mov	r2, r1
 800d3ba:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800d3bc:	68ba      	ldr	r2, [r7, #8]
 800d3be:	69fb      	ldr	r3, [r7, #28]
 800d3c0:	4413      	add	r3, r2
 800d3c2:	781b      	ldrb	r3, [r3, #0]
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d006      	beq.n	800d3d6 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800d3c8:	69fb      	ldr	r3, [r7, #28]
 800d3ca:	3301      	adds	r3, #1
 800d3cc:	61fb      	str	r3, [r7, #28]
 800d3ce:	69fb      	ldr	r3, [r7, #28]
 800d3d0:	2b0f      	cmp	r3, #15
 800d3d2:	d9e9      	bls.n	800d3a8 <prvInitialiseNewTask+0x68>
 800d3d4:	e000      	b.n	800d3d8 <prvInitialiseNewTask+0x98>
			{
				break;
 800d3d6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800d3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3da:	2200      	movs	r2, #0
 800d3dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800d3e0:	e003      	b.n	800d3ea <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800d3e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3e4:	2200      	movs	r2, #0
 800d3e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800d3ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d3ec:	2b06      	cmp	r3, #6
 800d3ee:	d901      	bls.n	800d3f4 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800d3f0:	2306      	movs	r3, #6
 800d3f2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800d3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3f8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800d3fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d3fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d3fe:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800d400:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d402:	2200      	movs	r2, #0
 800d404:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800d406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d408:	3304      	adds	r3, #4
 800d40a:	4618      	mov	r0, r3
 800d40c:	f7ff f9a5 	bl	800c75a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800d410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d412:	3318      	adds	r3, #24
 800d414:	4618      	mov	r0, r3
 800d416:	f7ff f9a0 	bl	800c75a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800d41a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d41c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d41e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d420:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d422:	f1c3 0207 	rsb	r2, r3, #7
 800d426:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d428:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800d42a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d42c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d42e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800d430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d432:	2200      	movs	r2, #0
 800d434:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800d436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d438:	2200      	movs	r2, #0
 800d43a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800d43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d43e:	2200      	movs	r2, #0
 800d440:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800d444:	683a      	ldr	r2, [r7, #0]
 800d446:	68f9      	ldr	r1, [r7, #12]
 800d448:	69b8      	ldr	r0, [r7, #24]
 800d44a:	f000 ffb9 	bl	800e3c0 <pxPortInitialiseStack>
 800d44e:	4602      	mov	r2, r0
 800d450:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d452:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800d454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d456:	2b00      	cmp	r3, #0
 800d458:	d002      	beq.n	800d460 <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800d45a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d45c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d45e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d460:	bf00      	nop
 800d462:	3720      	adds	r7, #32
 800d464:	46bd      	mov	sp, r7
 800d466:	bd80      	pop	{r7, pc}

0800d468 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800d468:	b580      	push	{r7, lr}
 800d46a:	b082      	sub	sp, #8
 800d46c:	af00      	add	r7, sp, #0
 800d46e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800d470:	f001 f8b4 	bl	800e5dc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800d474:	4b2a      	ldr	r3, [pc, #168]	; (800d520 <prvAddNewTaskToReadyList+0xb8>)
 800d476:	681b      	ldr	r3, [r3, #0]
 800d478:	3301      	adds	r3, #1
 800d47a:	4a29      	ldr	r2, [pc, #164]	; (800d520 <prvAddNewTaskToReadyList+0xb8>)
 800d47c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800d47e:	4b29      	ldr	r3, [pc, #164]	; (800d524 <prvAddNewTaskToReadyList+0xbc>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	2b00      	cmp	r3, #0
 800d484:	d109      	bne.n	800d49a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800d486:	4a27      	ldr	r2, [pc, #156]	; (800d524 <prvAddNewTaskToReadyList+0xbc>)
 800d488:	687b      	ldr	r3, [r7, #4]
 800d48a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800d48c:	4b24      	ldr	r3, [pc, #144]	; (800d520 <prvAddNewTaskToReadyList+0xb8>)
 800d48e:	681b      	ldr	r3, [r3, #0]
 800d490:	2b01      	cmp	r3, #1
 800d492:	d110      	bne.n	800d4b6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800d494:	f000 fc94 	bl	800ddc0 <prvInitialiseTaskLists>
 800d498:	e00d      	b.n	800d4b6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800d49a:	4b23      	ldr	r3, [pc, #140]	; (800d528 <prvAddNewTaskToReadyList+0xc0>)
 800d49c:	681b      	ldr	r3, [r3, #0]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d109      	bne.n	800d4b6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800d4a2:	4b20      	ldr	r3, [pc, #128]	; (800d524 <prvAddNewTaskToReadyList+0xbc>)
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d802      	bhi.n	800d4b6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800d4b0:	4a1c      	ldr	r2, [pc, #112]	; (800d524 <prvAddNewTaskToReadyList+0xbc>)
 800d4b2:	687b      	ldr	r3, [r7, #4]
 800d4b4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800d4b6:	4b1d      	ldr	r3, [pc, #116]	; (800d52c <prvAddNewTaskToReadyList+0xc4>)
 800d4b8:	681b      	ldr	r3, [r3, #0]
 800d4ba:	3301      	adds	r3, #1
 800d4bc:	4a1b      	ldr	r2, [pc, #108]	; (800d52c <prvAddNewTaskToReadyList+0xc4>)
 800d4be:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c4:	2201      	movs	r2, #1
 800d4c6:	409a      	lsls	r2, r3
 800d4c8:	4b19      	ldr	r3, [pc, #100]	; (800d530 <prvAddNewTaskToReadyList+0xc8>)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	4313      	orrs	r3, r2
 800d4ce:	4a18      	ldr	r2, [pc, #96]	; (800d530 <prvAddNewTaskToReadyList+0xc8>)
 800d4d0:	6013      	str	r3, [r2, #0]
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d4d6:	4613      	mov	r3, r2
 800d4d8:	009b      	lsls	r3, r3, #2
 800d4da:	4413      	add	r3, r2
 800d4dc:	009b      	lsls	r3, r3, #2
 800d4de:	4a15      	ldr	r2, [pc, #84]	; (800d534 <prvAddNewTaskToReadyList+0xcc>)
 800d4e0:	441a      	add	r2, r3
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	3304      	adds	r3, #4
 800d4e6:	4619      	mov	r1, r3
 800d4e8:	4610      	mov	r0, r2
 800d4ea:	f7ff f943 	bl	800c774 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800d4ee:	f001 f8a9 	bl	800e644 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	; (800d528 <prvAddNewTaskToReadyList+0xc0>)
 800d4f4:	681b      	ldr	r3, [r3, #0]
 800d4f6:	2b00      	cmp	r3, #0
 800d4f8:	d00e      	beq.n	800d518 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800d4fa:	4b0a      	ldr	r3, [pc, #40]	; (800d524 <prvAddNewTaskToReadyList+0xbc>)
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d504:	429a      	cmp	r2, r3
 800d506:	d207      	bcs.n	800d518 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800d508:	4b0b      	ldr	r3, [pc, #44]	; (800d538 <prvAddNewTaskToReadyList+0xd0>)
 800d50a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d50e:	601a      	str	r2, [r3, #0]
 800d510:	f3bf 8f4f 	dsb	sy
 800d514:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d518:	bf00      	nop
 800d51a:	3708      	adds	r7, #8
 800d51c:	46bd      	mov	sp, r7
 800d51e:	bd80      	pop	{r7, pc}
 800d520:	20000610 	.word	0x20000610
 800d524:	20000510 	.word	0x20000510
 800d528:	2000061c 	.word	0x2000061c
 800d52c:	2000062c 	.word	0x2000062c
 800d530:	20000618 	.word	0x20000618
 800d534:	20000514 	.word	0x20000514
 800d538:	e000ed04 	.word	0xe000ed04

0800d53c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800d53c:	b580      	push	{r7, lr}
 800d53e:	b08a      	sub	sp, #40	; 0x28
 800d540:	af00      	add	r7, sp, #0
 800d542:	6078      	str	r0, [r7, #4]
 800d544:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800d546:	2300      	movs	r3, #0
 800d548:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d10c      	bne.n	800d56a <vTaskDelayUntil+0x2e>
	__asm volatile
 800d550:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d554:	b672      	cpsid	i
 800d556:	f383 8811 	msr	BASEPRI, r3
 800d55a:	f3bf 8f6f 	isb	sy
 800d55e:	f3bf 8f4f 	dsb	sy
 800d562:	b662      	cpsie	i
 800d564:	617b      	str	r3, [r7, #20]
}
 800d566:	bf00      	nop
 800d568:	e7fe      	b.n	800d568 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	2b00      	cmp	r3, #0
 800d56e:	d10c      	bne.n	800d58a <vTaskDelayUntil+0x4e>
	__asm volatile
 800d570:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d574:	b672      	cpsid	i
 800d576:	f383 8811 	msr	BASEPRI, r3
 800d57a:	f3bf 8f6f 	isb	sy
 800d57e:	f3bf 8f4f 	dsb	sy
 800d582:	b662      	cpsie	i
 800d584:	613b      	str	r3, [r7, #16]
}
 800d586:	bf00      	nop
 800d588:	e7fe      	b.n	800d588 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800d58a:	4b2b      	ldr	r3, [pc, #172]	; (800d638 <vTaskDelayUntil+0xfc>)
 800d58c:	681b      	ldr	r3, [r3, #0]
 800d58e:	2b00      	cmp	r3, #0
 800d590:	d00c      	beq.n	800d5ac <vTaskDelayUntil+0x70>
	__asm volatile
 800d592:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d596:	b672      	cpsid	i
 800d598:	f383 8811 	msr	BASEPRI, r3
 800d59c:	f3bf 8f6f 	isb	sy
 800d5a0:	f3bf 8f4f 	dsb	sy
 800d5a4:	b662      	cpsie	i
 800d5a6:	60fb      	str	r3, [r7, #12]
}
 800d5a8:	bf00      	nop
 800d5aa:	e7fe      	b.n	800d5aa <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800d5ac:	f000 f8e4 	bl	800d778 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800d5b0:	4b22      	ldr	r3, [pc, #136]	; (800d63c <vTaskDelayUntil+0x100>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	681b      	ldr	r3, [r3, #0]
 800d5ba:	683a      	ldr	r2, [r7, #0]
 800d5bc:	4413      	add	r3, r2
 800d5be:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800d5c0:	687b      	ldr	r3, [r7, #4]
 800d5c2:	681b      	ldr	r3, [r3, #0]
 800d5c4:	6a3a      	ldr	r2, [r7, #32]
 800d5c6:	429a      	cmp	r2, r3
 800d5c8:	d20b      	bcs.n	800d5e2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800d5ca:	687b      	ldr	r3, [r7, #4]
 800d5cc:	681b      	ldr	r3, [r3, #0]
 800d5ce:	69fa      	ldr	r2, [r7, #28]
 800d5d0:	429a      	cmp	r2, r3
 800d5d2:	d211      	bcs.n	800d5f8 <vTaskDelayUntil+0xbc>
 800d5d4:	69fa      	ldr	r2, [r7, #28]
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	429a      	cmp	r2, r3
 800d5da:	d90d      	bls.n	800d5f8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	627b      	str	r3, [r7, #36]	; 0x24
 800d5e0:	e00a      	b.n	800d5f8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	69fa      	ldr	r2, [r7, #28]
 800d5e8:	429a      	cmp	r2, r3
 800d5ea:	d303      	bcc.n	800d5f4 <vTaskDelayUntil+0xb8>
 800d5ec:	69fa      	ldr	r2, [r7, #28]
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	429a      	cmp	r2, r3
 800d5f2:	d901      	bls.n	800d5f8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800d5f4:	2301      	movs	r3, #1
 800d5f6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800d5f8:	687b      	ldr	r3, [r7, #4]
 800d5fa:	69fa      	ldr	r2, [r7, #28]
 800d5fc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800d5fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d600:	2b00      	cmp	r3, #0
 800d602:	d006      	beq.n	800d612 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800d604:	69fa      	ldr	r2, [r7, #28]
 800d606:	6a3b      	ldr	r3, [r7, #32]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	2100      	movs	r1, #0
 800d60c:	4618      	mov	r0, r3
 800d60e:	f000 fe71 	bl	800e2f4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800d612:	f000 f8bf 	bl	800d794 <xTaskResumeAll>
 800d616:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d618:	69bb      	ldr	r3, [r7, #24]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d107      	bne.n	800d62e <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800d61e:	4b08      	ldr	r3, [pc, #32]	; (800d640 <vTaskDelayUntil+0x104>)
 800d620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d624:	601a      	str	r2, [r3, #0]
 800d626:	f3bf 8f4f 	dsb	sy
 800d62a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d62e:	bf00      	nop
 800d630:	3728      	adds	r7, #40	; 0x28
 800d632:	46bd      	mov	sp, r7
 800d634:	bd80      	pop	{r7, pc}
 800d636:	bf00      	nop
 800d638:	20000638 	.word	0x20000638
 800d63c:	20000614 	.word	0x20000614
 800d640:	e000ed04 	.word	0xe000ed04

0800d644 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800d644:	b580      	push	{r7, lr}
 800d646:	b084      	sub	sp, #16
 800d648:	af00      	add	r7, sp, #0
 800d64a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800d64c:	2300      	movs	r3, #0
 800d64e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800d650:	687b      	ldr	r3, [r7, #4]
 800d652:	2b00      	cmp	r3, #0
 800d654:	d019      	beq.n	800d68a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800d656:	4b14      	ldr	r3, [pc, #80]	; (800d6a8 <vTaskDelay+0x64>)
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d00c      	beq.n	800d678 <vTaskDelay+0x34>
	__asm volatile
 800d65e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d662:	b672      	cpsid	i
 800d664:	f383 8811 	msr	BASEPRI, r3
 800d668:	f3bf 8f6f 	isb	sy
 800d66c:	f3bf 8f4f 	dsb	sy
 800d670:	b662      	cpsie	i
 800d672:	60bb      	str	r3, [r7, #8]
}
 800d674:	bf00      	nop
 800d676:	e7fe      	b.n	800d676 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800d678:	f000 f87e 	bl	800d778 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800d67c:	2100      	movs	r1, #0
 800d67e:	6878      	ldr	r0, [r7, #4]
 800d680:	f000 fe38 	bl	800e2f4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800d684:	f000 f886 	bl	800d794 <xTaskResumeAll>
 800d688:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d107      	bne.n	800d6a0 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800d690:	4b06      	ldr	r3, [pc, #24]	; (800d6ac <vTaskDelay+0x68>)
 800d692:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d696:	601a      	str	r2, [r3, #0]
 800d698:	f3bf 8f4f 	dsb	sy
 800d69c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d6a0:	bf00      	nop
 800d6a2:	3710      	adds	r7, #16
 800d6a4:	46bd      	mov	sp, r7
 800d6a6:	bd80      	pop	{r7, pc}
 800d6a8:	20000638 	.word	0x20000638
 800d6ac:	e000ed04 	.word	0xe000ed04

0800d6b0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800d6b0:	b580      	push	{r7, lr}
 800d6b2:	b08a      	sub	sp, #40	; 0x28
 800d6b4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800d6b6:	2300      	movs	r3, #0
 800d6b8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800d6ba:	2300      	movs	r3, #0
 800d6bc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800d6be:	463a      	mov	r2, r7
 800d6c0:	1d39      	adds	r1, r7, #4
 800d6c2:	f107 0308 	add.w	r3, r7, #8
 800d6c6:	4618      	mov	r0, r3
 800d6c8:	f7f3 fc56 	bl	8000f78 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800d6cc:	6839      	ldr	r1, [r7, #0]
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	68ba      	ldr	r2, [r7, #8]
 800d6d2:	9202      	str	r2, [sp, #8]
 800d6d4:	9301      	str	r3, [sp, #4]
 800d6d6:	2300      	movs	r3, #0
 800d6d8:	9300      	str	r3, [sp, #0]
 800d6da:	2300      	movs	r3, #0
 800d6dc:	460a      	mov	r2, r1
 800d6de:	4920      	ldr	r1, [pc, #128]	; (800d760 <vTaskStartScheduler+0xb0>)
 800d6e0:	4820      	ldr	r0, [pc, #128]	; (800d764 <vTaskStartScheduler+0xb4>)
 800d6e2:	f7ff fd85 	bl	800d1f0 <xTaskCreateStatic>
 800d6e6:	4603      	mov	r3, r0
 800d6e8:	4a1f      	ldr	r2, [pc, #124]	; (800d768 <vTaskStartScheduler+0xb8>)
 800d6ea:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800d6ec:	4b1e      	ldr	r3, [pc, #120]	; (800d768 <vTaskStartScheduler+0xb8>)
 800d6ee:	681b      	ldr	r3, [r3, #0]
 800d6f0:	2b00      	cmp	r3, #0
 800d6f2:	d002      	beq.n	800d6fa <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800d6f4:	2301      	movs	r3, #1
 800d6f6:	617b      	str	r3, [r7, #20]
 800d6f8:	e001      	b.n	800d6fe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800d6fa:	2300      	movs	r3, #0
 800d6fc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800d6fe:	697b      	ldr	r3, [r7, #20]
 800d700:	2b01      	cmp	r3, #1
 800d702:	d118      	bne.n	800d736 <vTaskStartScheduler+0x86>
	__asm volatile
 800d704:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d708:	b672      	cpsid	i
 800d70a:	f383 8811 	msr	BASEPRI, r3
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	f3bf 8f4f 	dsb	sy
 800d716:	b662      	cpsie	i
 800d718:	613b      	str	r3, [r7, #16]
}
 800d71a:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800d71c:	4b13      	ldr	r3, [pc, #76]	; (800d76c <vTaskStartScheduler+0xbc>)
 800d71e:	f04f 32ff 	mov.w	r2, #4294967295
 800d722:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800d724:	4b12      	ldr	r3, [pc, #72]	; (800d770 <vTaskStartScheduler+0xc0>)
 800d726:	2201      	movs	r2, #1
 800d728:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800d72a:	4b12      	ldr	r3, [pc, #72]	; (800d774 <vTaskStartScheduler+0xc4>)
 800d72c:	2200      	movs	r2, #0
 800d72e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800d730:	f000 fed6 	bl	800e4e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800d734:	e010      	b.n	800d758 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800d736:	697b      	ldr	r3, [r7, #20]
 800d738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d73c:	d10c      	bne.n	800d758 <vTaskStartScheduler+0xa8>
	__asm volatile
 800d73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d742:	b672      	cpsid	i
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	b662      	cpsie	i
 800d752:	60fb      	str	r3, [r7, #12]
}
 800d754:	bf00      	nop
 800d756:	e7fe      	b.n	800d756 <vTaskStartScheduler+0xa6>
}
 800d758:	bf00      	nop
 800d75a:	3718      	adds	r7, #24
 800d75c:	46bd      	mov	sp, r7
 800d75e:	bd80      	pop	{r7, pc}
 800d760:	080106b8 	.word	0x080106b8
 800d764:	0800dd8d 	.word	0x0800dd8d
 800d768:	20000634 	.word	0x20000634
 800d76c:	20000630 	.word	0x20000630
 800d770:	2000061c 	.word	0x2000061c
 800d774:	20000614 	.word	0x20000614

0800d778 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800d778:	b480      	push	{r7}
 800d77a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800d77c:	4b04      	ldr	r3, [pc, #16]	; (800d790 <vTaskSuspendAll+0x18>)
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	3301      	adds	r3, #1
 800d782:	4a03      	ldr	r2, [pc, #12]	; (800d790 <vTaskSuspendAll+0x18>)
 800d784:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800d786:	bf00      	nop
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr
 800d790:	20000638 	.word	0x20000638

0800d794 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800d794:	b580      	push	{r7, lr}
 800d796:	b084      	sub	sp, #16
 800d798:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800d79a:	2300      	movs	r3, #0
 800d79c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800d79e:	2300      	movs	r3, #0
 800d7a0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800d7a2:	4b42      	ldr	r3, [pc, #264]	; (800d8ac <xTaskResumeAll+0x118>)
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	2b00      	cmp	r3, #0
 800d7a8:	d10c      	bne.n	800d7c4 <xTaskResumeAll+0x30>
	__asm volatile
 800d7aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7ae:	b672      	cpsid	i
 800d7b0:	f383 8811 	msr	BASEPRI, r3
 800d7b4:	f3bf 8f6f 	isb	sy
 800d7b8:	f3bf 8f4f 	dsb	sy
 800d7bc:	b662      	cpsie	i
 800d7be:	603b      	str	r3, [r7, #0]
}
 800d7c0:	bf00      	nop
 800d7c2:	e7fe      	b.n	800d7c2 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800d7c4:	f000 ff0a 	bl	800e5dc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800d7c8:	4b38      	ldr	r3, [pc, #224]	; (800d8ac <xTaskResumeAll+0x118>)
 800d7ca:	681b      	ldr	r3, [r3, #0]
 800d7cc:	3b01      	subs	r3, #1
 800d7ce:	4a37      	ldr	r2, [pc, #220]	; (800d8ac <xTaskResumeAll+0x118>)
 800d7d0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7d2:	4b36      	ldr	r3, [pc, #216]	; (800d8ac <xTaskResumeAll+0x118>)
 800d7d4:	681b      	ldr	r3, [r3, #0]
 800d7d6:	2b00      	cmp	r3, #0
 800d7d8:	d161      	bne.n	800d89e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7da:	4b35      	ldr	r3, [pc, #212]	; (800d8b0 <xTaskResumeAll+0x11c>)
 800d7dc:	681b      	ldr	r3, [r3, #0]
 800d7de:	2b00      	cmp	r3, #0
 800d7e0:	d05d      	beq.n	800d89e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7e2:	e02e      	b.n	800d842 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7e4:	4b33      	ldr	r3, [pc, #204]	; (800d8b4 <xTaskResumeAll+0x120>)
 800d7e6:	68db      	ldr	r3, [r3, #12]
 800d7e8:	68db      	ldr	r3, [r3, #12]
 800d7ea:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	3318      	adds	r3, #24
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f7ff f81c 	bl	800c82e <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	3304      	adds	r3, #4
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	f7ff f817 	bl	800c82e <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d804:	2201      	movs	r2, #1
 800d806:	409a      	lsls	r2, r3
 800d808:	4b2b      	ldr	r3, [pc, #172]	; (800d8b8 <xTaskResumeAll+0x124>)
 800d80a:	681b      	ldr	r3, [r3, #0]
 800d80c:	4313      	orrs	r3, r2
 800d80e:	4a2a      	ldr	r2, [pc, #168]	; (800d8b8 <xTaskResumeAll+0x124>)
 800d810:	6013      	str	r3, [r2, #0]
 800d812:	68fb      	ldr	r3, [r7, #12]
 800d814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d816:	4613      	mov	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4a27      	ldr	r2, [pc, #156]	; (800d8bc <xTaskResumeAll+0x128>)
 800d820:	441a      	add	r2, r3
 800d822:	68fb      	ldr	r3, [r7, #12]
 800d824:	3304      	adds	r3, #4
 800d826:	4619      	mov	r1, r3
 800d828:	4610      	mov	r0, r2
 800d82a:	f7fe ffa3 	bl	800c774 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d832:	4b23      	ldr	r3, [pc, #140]	; (800d8c0 <xTaskResumeAll+0x12c>)
 800d834:	681b      	ldr	r3, [r3, #0]
 800d836:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d838:	429a      	cmp	r2, r3
 800d83a:	d302      	bcc.n	800d842 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800d83c:	4b21      	ldr	r3, [pc, #132]	; (800d8c4 <xTaskResumeAll+0x130>)
 800d83e:	2201      	movs	r2, #1
 800d840:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d842:	4b1c      	ldr	r3, [pc, #112]	; (800d8b4 <xTaskResumeAll+0x120>)
 800d844:	681b      	ldr	r3, [r3, #0]
 800d846:	2b00      	cmp	r3, #0
 800d848:	d1cc      	bne.n	800d7e4 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d84a:	68fb      	ldr	r3, [r7, #12]
 800d84c:	2b00      	cmp	r3, #0
 800d84e:	d001      	beq.n	800d854 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d850:	f000 fb56 	bl	800df00 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800d854:	4b1c      	ldr	r3, [pc, #112]	; (800d8c8 <xTaskResumeAll+0x134>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	2b00      	cmp	r3, #0
 800d85e:	d010      	beq.n	800d882 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d860:	f000 f846 	bl	800d8f0 <xTaskIncrementTick>
 800d864:	4603      	mov	r3, r0
 800d866:	2b00      	cmp	r3, #0
 800d868:	d002      	beq.n	800d870 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800d86a:	4b16      	ldr	r3, [pc, #88]	; (800d8c4 <xTaskResumeAll+0x130>)
 800d86c:	2201      	movs	r2, #1
 800d86e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	3b01      	subs	r3, #1
 800d874:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d1f1      	bne.n	800d860 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800d87c:	4b12      	ldr	r3, [pc, #72]	; (800d8c8 <xTaskResumeAll+0x134>)
 800d87e:	2200      	movs	r2, #0
 800d880:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d882:	4b10      	ldr	r3, [pc, #64]	; (800d8c4 <xTaskResumeAll+0x130>)
 800d884:	681b      	ldr	r3, [r3, #0]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d009      	beq.n	800d89e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d88a:	2301      	movs	r3, #1
 800d88c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d88e:	4b0f      	ldr	r3, [pc, #60]	; (800d8cc <xTaskResumeAll+0x138>)
 800d890:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d894:	601a      	str	r2, [r3, #0]
 800d896:	f3bf 8f4f 	dsb	sy
 800d89a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d89e:	f000 fed1 	bl	800e644 <vPortExitCritical>

	return xAlreadyYielded;
 800d8a2:	68bb      	ldr	r3, [r7, #8]
}
 800d8a4:	4618      	mov	r0, r3
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	20000638 	.word	0x20000638
 800d8b0:	20000610 	.word	0x20000610
 800d8b4:	200005d0 	.word	0x200005d0
 800d8b8:	20000618 	.word	0x20000618
 800d8bc:	20000514 	.word	0x20000514
 800d8c0:	20000510 	.word	0x20000510
 800d8c4:	20000624 	.word	0x20000624
 800d8c8:	20000620 	.word	0x20000620
 800d8cc:	e000ed04 	.word	0xe000ed04

0800d8d0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d8d0:	b480      	push	{r7}
 800d8d2:	b083      	sub	sp, #12
 800d8d4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d8d6:	4b05      	ldr	r3, [pc, #20]	; (800d8ec <xTaskGetTickCount+0x1c>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d8dc:	687b      	ldr	r3, [r7, #4]
}
 800d8de:	4618      	mov	r0, r3
 800d8e0:	370c      	adds	r7, #12
 800d8e2:	46bd      	mov	sp, r7
 800d8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8e8:	4770      	bx	lr
 800d8ea:	bf00      	nop
 800d8ec:	20000614 	.word	0x20000614

0800d8f0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d8f0:	b580      	push	{r7, lr}
 800d8f2:	b086      	sub	sp, #24
 800d8f4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d8f6:	2300      	movs	r3, #0
 800d8f8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d8fa:	4b4f      	ldr	r3, [pc, #316]	; (800da38 <xTaskIncrementTick+0x148>)
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2b00      	cmp	r3, #0
 800d900:	f040 808a 	bne.w	800da18 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d904:	4b4d      	ldr	r3, [pc, #308]	; (800da3c <xTaskIncrementTick+0x14c>)
 800d906:	681b      	ldr	r3, [r3, #0]
 800d908:	3301      	adds	r3, #1
 800d90a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d90c:	4a4b      	ldr	r2, [pc, #300]	; (800da3c <xTaskIncrementTick+0x14c>)
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d912:	693b      	ldr	r3, [r7, #16]
 800d914:	2b00      	cmp	r3, #0
 800d916:	d122      	bne.n	800d95e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800d918:	4b49      	ldr	r3, [pc, #292]	; (800da40 <xTaskIncrementTick+0x150>)
 800d91a:	681b      	ldr	r3, [r3, #0]
 800d91c:	681b      	ldr	r3, [r3, #0]
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d00c      	beq.n	800d93c <xTaskIncrementTick+0x4c>
	__asm volatile
 800d922:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d926:	b672      	cpsid	i
 800d928:	f383 8811 	msr	BASEPRI, r3
 800d92c:	f3bf 8f6f 	isb	sy
 800d930:	f3bf 8f4f 	dsb	sy
 800d934:	b662      	cpsie	i
 800d936:	603b      	str	r3, [r7, #0]
}
 800d938:	bf00      	nop
 800d93a:	e7fe      	b.n	800d93a <xTaskIncrementTick+0x4a>
 800d93c:	4b40      	ldr	r3, [pc, #256]	; (800da40 <xTaskIncrementTick+0x150>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	60fb      	str	r3, [r7, #12]
 800d942:	4b40      	ldr	r3, [pc, #256]	; (800da44 <xTaskIncrementTick+0x154>)
 800d944:	681b      	ldr	r3, [r3, #0]
 800d946:	4a3e      	ldr	r2, [pc, #248]	; (800da40 <xTaskIncrementTick+0x150>)
 800d948:	6013      	str	r3, [r2, #0]
 800d94a:	4a3e      	ldr	r2, [pc, #248]	; (800da44 <xTaskIncrementTick+0x154>)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6013      	str	r3, [r2, #0]
 800d950:	4b3d      	ldr	r3, [pc, #244]	; (800da48 <xTaskIncrementTick+0x158>)
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3301      	adds	r3, #1
 800d956:	4a3c      	ldr	r2, [pc, #240]	; (800da48 <xTaskIncrementTick+0x158>)
 800d958:	6013      	str	r3, [r2, #0]
 800d95a:	f000 fad1 	bl	800df00 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d95e:	4b3b      	ldr	r3, [pc, #236]	; (800da4c <xTaskIncrementTick+0x15c>)
 800d960:	681b      	ldr	r3, [r3, #0]
 800d962:	693a      	ldr	r2, [r7, #16]
 800d964:	429a      	cmp	r2, r3
 800d966:	d348      	bcc.n	800d9fa <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d968:	4b35      	ldr	r3, [pc, #212]	; (800da40 <xTaskIncrementTick+0x150>)
 800d96a:	681b      	ldr	r3, [r3, #0]
 800d96c:	681b      	ldr	r3, [r3, #0]
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d104      	bne.n	800d97c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d972:	4b36      	ldr	r3, [pc, #216]	; (800da4c <xTaskIncrementTick+0x15c>)
 800d974:	f04f 32ff 	mov.w	r2, #4294967295
 800d978:	601a      	str	r2, [r3, #0]
					break;
 800d97a:	e03e      	b.n	800d9fa <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d97c:	4b30      	ldr	r3, [pc, #192]	; (800da40 <xTaskIncrementTick+0x150>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	68db      	ldr	r3, [r3, #12]
 800d982:	68db      	ldr	r3, [r3, #12]
 800d984:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	685b      	ldr	r3, [r3, #4]
 800d98a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d98c:	693a      	ldr	r2, [r7, #16]
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	429a      	cmp	r2, r3
 800d992:	d203      	bcs.n	800d99c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d994:	4a2d      	ldr	r2, [pc, #180]	; (800da4c <xTaskIncrementTick+0x15c>)
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d99a:	e02e      	b.n	800d9fa <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d99c:	68bb      	ldr	r3, [r7, #8]
 800d99e:	3304      	adds	r3, #4
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	f7fe ff44 	bl	800c82e <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d9a6:	68bb      	ldr	r3, [r7, #8]
 800d9a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d9aa:	2b00      	cmp	r3, #0
 800d9ac:	d004      	beq.n	800d9b8 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d9ae:	68bb      	ldr	r3, [r7, #8]
 800d9b0:	3318      	adds	r3, #24
 800d9b2:	4618      	mov	r0, r3
 800d9b4:	f7fe ff3b 	bl	800c82e <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d9b8:	68bb      	ldr	r3, [r7, #8]
 800d9ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9bc:	2201      	movs	r2, #1
 800d9be:	409a      	lsls	r2, r3
 800d9c0:	4b23      	ldr	r3, [pc, #140]	; (800da50 <xTaskIncrementTick+0x160>)
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	4313      	orrs	r3, r2
 800d9c6:	4a22      	ldr	r2, [pc, #136]	; (800da50 <xTaskIncrementTick+0x160>)
 800d9c8:	6013      	str	r3, [r2, #0]
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ce:	4613      	mov	r3, r2
 800d9d0:	009b      	lsls	r3, r3, #2
 800d9d2:	4413      	add	r3, r2
 800d9d4:	009b      	lsls	r3, r3, #2
 800d9d6:	4a1f      	ldr	r2, [pc, #124]	; (800da54 <xTaskIncrementTick+0x164>)
 800d9d8:	441a      	add	r2, r3
 800d9da:	68bb      	ldr	r3, [r7, #8]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f7fe fec7 	bl	800c774 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d9e6:	68bb      	ldr	r3, [r7, #8]
 800d9e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d9ea:	4b1b      	ldr	r3, [pc, #108]	; (800da58 <xTaskIncrementTick+0x168>)
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9f0:	429a      	cmp	r2, r3
 800d9f2:	d3b9      	bcc.n	800d968 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800d9f4:	2301      	movs	r3, #1
 800d9f6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d9f8:	e7b6      	b.n	800d968 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d9fa:	4b17      	ldr	r3, [pc, #92]	; (800da58 <xTaskIncrementTick+0x168>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da00:	4914      	ldr	r1, [pc, #80]	; (800da54 <xTaskIncrementTick+0x164>)
 800da02:	4613      	mov	r3, r2
 800da04:	009b      	lsls	r3, r3, #2
 800da06:	4413      	add	r3, r2
 800da08:	009b      	lsls	r3, r3, #2
 800da0a:	440b      	add	r3, r1
 800da0c:	681b      	ldr	r3, [r3, #0]
 800da0e:	2b01      	cmp	r3, #1
 800da10:	d907      	bls.n	800da22 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800da12:	2301      	movs	r3, #1
 800da14:	617b      	str	r3, [r7, #20]
 800da16:	e004      	b.n	800da22 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800da18:	4b10      	ldr	r3, [pc, #64]	; (800da5c <xTaskIncrementTick+0x16c>)
 800da1a:	681b      	ldr	r3, [r3, #0]
 800da1c:	3301      	adds	r3, #1
 800da1e:	4a0f      	ldr	r2, [pc, #60]	; (800da5c <xTaskIncrementTick+0x16c>)
 800da20:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800da22:	4b0f      	ldr	r3, [pc, #60]	; (800da60 <xTaskIncrementTick+0x170>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d001      	beq.n	800da2e <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800da2a:	2301      	movs	r3, #1
 800da2c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800da2e:	697b      	ldr	r3, [r7, #20]
}
 800da30:	4618      	mov	r0, r3
 800da32:	3718      	adds	r7, #24
 800da34:	46bd      	mov	sp, r7
 800da36:	bd80      	pop	{r7, pc}
 800da38:	20000638 	.word	0x20000638
 800da3c:	20000614 	.word	0x20000614
 800da40:	200005c8 	.word	0x200005c8
 800da44:	200005cc 	.word	0x200005cc
 800da48:	20000628 	.word	0x20000628
 800da4c:	20000630 	.word	0x20000630
 800da50:	20000618 	.word	0x20000618
 800da54:	20000514 	.word	0x20000514
 800da58:	20000510 	.word	0x20000510
 800da5c:	20000620 	.word	0x20000620
 800da60:	20000624 	.word	0x20000624

0800da64 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b088      	sub	sp, #32
 800da68:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800da6a:	4b3a      	ldr	r3, [pc, #232]	; (800db54 <vTaskSwitchContext+0xf0>)
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d003      	beq.n	800da7a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800da72:	4b39      	ldr	r3, [pc, #228]	; (800db58 <vTaskSwitchContext+0xf4>)
 800da74:	2201      	movs	r2, #1
 800da76:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800da78:	e068      	b.n	800db4c <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800da7a:	4b37      	ldr	r3, [pc, #220]	; (800db58 <vTaskSwitchContext+0xf4>)
 800da7c:	2200      	movs	r2, #0
 800da7e:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800da80:	4b36      	ldr	r3, [pc, #216]	; (800db5c <vTaskSwitchContext+0xf8>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da86:	61fb      	str	r3, [r7, #28]
 800da88:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800da8c:	61bb      	str	r3, [r7, #24]
 800da8e:	69fb      	ldr	r3, [r7, #28]
 800da90:	681b      	ldr	r3, [r3, #0]
 800da92:	69ba      	ldr	r2, [r7, #24]
 800da94:	429a      	cmp	r2, r3
 800da96:	d111      	bne.n	800dabc <vTaskSwitchContext+0x58>
 800da98:	69fb      	ldr	r3, [r7, #28]
 800da9a:	3304      	adds	r3, #4
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	69ba      	ldr	r2, [r7, #24]
 800daa0:	429a      	cmp	r2, r3
 800daa2:	d10b      	bne.n	800dabc <vTaskSwitchContext+0x58>
 800daa4:	69fb      	ldr	r3, [r7, #28]
 800daa6:	3308      	adds	r3, #8
 800daa8:	681b      	ldr	r3, [r3, #0]
 800daaa:	69ba      	ldr	r2, [r7, #24]
 800daac:	429a      	cmp	r2, r3
 800daae:	d105      	bne.n	800dabc <vTaskSwitchContext+0x58>
 800dab0:	69fb      	ldr	r3, [r7, #28]
 800dab2:	330c      	adds	r3, #12
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	69ba      	ldr	r2, [r7, #24]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d008      	beq.n	800dace <vTaskSwitchContext+0x6a>
 800dabc:	4b27      	ldr	r3, [pc, #156]	; (800db5c <vTaskSwitchContext+0xf8>)
 800dabe:	681a      	ldr	r2, [r3, #0]
 800dac0:	4b26      	ldr	r3, [pc, #152]	; (800db5c <vTaskSwitchContext+0xf8>)
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	3334      	adds	r3, #52	; 0x34
 800dac6:	4619      	mov	r1, r3
 800dac8:	4610      	mov	r0, r2
 800daca:	f7f3 fa42 	bl	8000f52 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dace:	4b24      	ldr	r3, [pc, #144]	; (800db60 <vTaskSwitchContext+0xfc>)
 800dad0:	681b      	ldr	r3, [r3, #0]
 800dad2:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800dad4:	68fb      	ldr	r3, [r7, #12]
 800dad6:	fab3 f383 	clz	r3, r3
 800dada:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800dadc:	7afb      	ldrb	r3, [r7, #11]
 800dade:	f1c3 031f 	rsb	r3, r3, #31
 800dae2:	617b      	str	r3, [r7, #20]
 800dae4:	491f      	ldr	r1, [pc, #124]	; (800db64 <vTaskSwitchContext+0x100>)
 800dae6:	697a      	ldr	r2, [r7, #20]
 800dae8:	4613      	mov	r3, r2
 800daea:	009b      	lsls	r3, r3, #2
 800daec:	4413      	add	r3, r2
 800daee:	009b      	lsls	r3, r3, #2
 800daf0:	440b      	add	r3, r1
 800daf2:	681b      	ldr	r3, [r3, #0]
 800daf4:	2b00      	cmp	r3, #0
 800daf6:	d10c      	bne.n	800db12 <vTaskSwitchContext+0xae>
	__asm volatile
 800daf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dafc:	b672      	cpsid	i
 800dafe:	f383 8811 	msr	BASEPRI, r3
 800db02:	f3bf 8f6f 	isb	sy
 800db06:	f3bf 8f4f 	dsb	sy
 800db0a:	b662      	cpsie	i
 800db0c:	607b      	str	r3, [r7, #4]
}
 800db0e:	bf00      	nop
 800db10:	e7fe      	b.n	800db10 <vTaskSwitchContext+0xac>
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	4613      	mov	r3, r2
 800db16:	009b      	lsls	r3, r3, #2
 800db18:	4413      	add	r3, r2
 800db1a:	009b      	lsls	r3, r3, #2
 800db1c:	4a11      	ldr	r2, [pc, #68]	; (800db64 <vTaskSwitchContext+0x100>)
 800db1e:	4413      	add	r3, r2
 800db20:	613b      	str	r3, [r7, #16]
 800db22:	693b      	ldr	r3, [r7, #16]
 800db24:	685b      	ldr	r3, [r3, #4]
 800db26:	685a      	ldr	r2, [r3, #4]
 800db28:	693b      	ldr	r3, [r7, #16]
 800db2a:	605a      	str	r2, [r3, #4]
 800db2c:	693b      	ldr	r3, [r7, #16]
 800db2e:	685a      	ldr	r2, [r3, #4]
 800db30:	693b      	ldr	r3, [r7, #16]
 800db32:	3308      	adds	r3, #8
 800db34:	429a      	cmp	r2, r3
 800db36:	d104      	bne.n	800db42 <vTaskSwitchContext+0xde>
 800db38:	693b      	ldr	r3, [r7, #16]
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	685a      	ldr	r2, [r3, #4]
 800db3e:	693b      	ldr	r3, [r7, #16]
 800db40:	605a      	str	r2, [r3, #4]
 800db42:	693b      	ldr	r3, [r7, #16]
 800db44:	685b      	ldr	r3, [r3, #4]
 800db46:	68db      	ldr	r3, [r3, #12]
 800db48:	4a04      	ldr	r2, [pc, #16]	; (800db5c <vTaskSwitchContext+0xf8>)
 800db4a:	6013      	str	r3, [r2, #0]
}
 800db4c:	bf00      	nop
 800db4e:	3720      	adds	r7, #32
 800db50:	46bd      	mov	sp, r7
 800db52:	bd80      	pop	{r7, pc}
 800db54:	20000638 	.word	0x20000638
 800db58:	20000624 	.word	0x20000624
 800db5c:	20000510 	.word	0x20000510
 800db60:	20000618 	.word	0x20000618
 800db64:	20000514 	.word	0x20000514

0800db68 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800db68:	b580      	push	{r7, lr}
 800db6a:	b084      	sub	sp, #16
 800db6c:	af00      	add	r7, sp, #0
 800db6e:	6078      	str	r0, [r7, #4]
 800db70:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	2b00      	cmp	r3, #0
 800db76:	d10c      	bne.n	800db92 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800db78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db7c:	b672      	cpsid	i
 800db7e:	f383 8811 	msr	BASEPRI, r3
 800db82:	f3bf 8f6f 	isb	sy
 800db86:	f3bf 8f4f 	dsb	sy
 800db8a:	b662      	cpsie	i
 800db8c:	60fb      	str	r3, [r7, #12]
}
 800db8e:	bf00      	nop
 800db90:	e7fe      	b.n	800db90 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800db92:	4b07      	ldr	r3, [pc, #28]	; (800dbb0 <vTaskPlaceOnEventList+0x48>)
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	3318      	adds	r3, #24
 800db98:	4619      	mov	r1, r3
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	f7fe fe0e 	bl	800c7bc <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800dba0:	2101      	movs	r1, #1
 800dba2:	6838      	ldr	r0, [r7, #0]
 800dba4:	f000 fba6 	bl	800e2f4 <prvAddCurrentTaskToDelayedList>
}
 800dba8:	bf00      	nop
 800dbaa:	3710      	adds	r7, #16
 800dbac:	46bd      	mov	sp, r7
 800dbae:	bd80      	pop	{r7, pc}
 800dbb0:	20000510 	.word	0x20000510

0800dbb4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	68db      	ldr	r3, [r3, #12]
 800dbc0:	68db      	ldr	r3, [r3, #12]
 800dbc2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d10c      	bne.n	800dbe4 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	b672      	cpsid	i
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	b662      	cpsie	i
 800dbde:	60fb      	str	r3, [r7, #12]
}
 800dbe0:	bf00      	nop
 800dbe2:	e7fe      	b.n	800dbe2 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800dbe4:	693b      	ldr	r3, [r7, #16]
 800dbe6:	3318      	adds	r3, #24
 800dbe8:	4618      	mov	r0, r3
 800dbea:	f7fe fe20 	bl	800c82e <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800dbee:	4b1d      	ldr	r3, [pc, #116]	; (800dc64 <xTaskRemoveFromEventList+0xb0>)
 800dbf0:	681b      	ldr	r3, [r3, #0]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d11c      	bne.n	800dc30 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800dbf6:	693b      	ldr	r3, [r7, #16]
 800dbf8:	3304      	adds	r3, #4
 800dbfa:	4618      	mov	r0, r3
 800dbfc:	f7fe fe17 	bl	800c82e <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800dc00:	693b      	ldr	r3, [r7, #16]
 800dc02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc04:	2201      	movs	r2, #1
 800dc06:	409a      	lsls	r2, r3
 800dc08:	4b17      	ldr	r3, [pc, #92]	; (800dc68 <xTaskRemoveFromEventList+0xb4>)
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	4313      	orrs	r3, r2
 800dc0e:	4a16      	ldr	r2, [pc, #88]	; (800dc68 <xTaskRemoveFromEventList+0xb4>)
 800dc10:	6013      	str	r3, [r2, #0]
 800dc12:	693b      	ldr	r3, [r7, #16]
 800dc14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc16:	4613      	mov	r3, r2
 800dc18:	009b      	lsls	r3, r3, #2
 800dc1a:	4413      	add	r3, r2
 800dc1c:	009b      	lsls	r3, r3, #2
 800dc1e:	4a13      	ldr	r2, [pc, #76]	; (800dc6c <xTaskRemoveFromEventList+0xb8>)
 800dc20:	441a      	add	r2, r3
 800dc22:	693b      	ldr	r3, [r7, #16]
 800dc24:	3304      	adds	r3, #4
 800dc26:	4619      	mov	r1, r3
 800dc28:	4610      	mov	r0, r2
 800dc2a:	f7fe fda3 	bl	800c774 <vListInsertEnd>
 800dc2e:	e005      	b.n	800dc3c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	3318      	adds	r3, #24
 800dc34:	4619      	mov	r1, r3
 800dc36:	480e      	ldr	r0, [pc, #56]	; (800dc70 <xTaskRemoveFromEventList+0xbc>)
 800dc38:	f7fe fd9c 	bl	800c774 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800dc3c:	693b      	ldr	r3, [r7, #16]
 800dc3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dc40:	4b0c      	ldr	r3, [pc, #48]	; (800dc74 <xTaskRemoveFromEventList+0xc0>)
 800dc42:	681b      	ldr	r3, [r3, #0]
 800dc44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dc46:	429a      	cmp	r2, r3
 800dc48:	d905      	bls.n	800dc56 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800dc4a:	2301      	movs	r3, #1
 800dc4c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800dc4e:	4b0a      	ldr	r3, [pc, #40]	; (800dc78 <xTaskRemoveFromEventList+0xc4>)
 800dc50:	2201      	movs	r2, #1
 800dc52:	601a      	str	r2, [r3, #0]
 800dc54:	e001      	b.n	800dc5a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800dc56:	2300      	movs	r3, #0
 800dc58:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800dc5a:	697b      	ldr	r3, [r7, #20]
}
 800dc5c:	4618      	mov	r0, r3
 800dc5e:	3718      	adds	r7, #24
 800dc60:	46bd      	mov	sp, r7
 800dc62:	bd80      	pop	{r7, pc}
 800dc64:	20000638 	.word	0x20000638
 800dc68:	20000618 	.word	0x20000618
 800dc6c:	20000514 	.word	0x20000514
 800dc70:	200005d0 	.word	0x200005d0
 800dc74:	20000510 	.word	0x20000510
 800dc78:	20000624 	.word	0x20000624

0800dc7c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800dc7c:	b480      	push	{r7}
 800dc7e:	b083      	sub	sp, #12
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800dc84:	4b06      	ldr	r3, [pc, #24]	; (800dca0 <vTaskInternalSetTimeOutState+0x24>)
 800dc86:	681a      	ldr	r2, [r3, #0]
 800dc88:	687b      	ldr	r3, [r7, #4]
 800dc8a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800dc8c:	4b05      	ldr	r3, [pc, #20]	; (800dca4 <vTaskInternalSetTimeOutState+0x28>)
 800dc8e:	681a      	ldr	r2, [r3, #0]
 800dc90:	687b      	ldr	r3, [r7, #4]
 800dc92:	605a      	str	r2, [r3, #4]
}
 800dc94:	bf00      	nop
 800dc96:	370c      	adds	r7, #12
 800dc98:	46bd      	mov	sp, r7
 800dc9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc9e:	4770      	bx	lr
 800dca0:	20000628 	.word	0x20000628
 800dca4:	20000614 	.word	0x20000614

0800dca8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b088      	sub	sp, #32
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d10c      	bne.n	800dcd2 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800dcb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcbc:	b672      	cpsid	i
 800dcbe:	f383 8811 	msr	BASEPRI, r3
 800dcc2:	f3bf 8f6f 	isb	sy
 800dcc6:	f3bf 8f4f 	dsb	sy
 800dcca:	b662      	cpsie	i
 800dccc:	613b      	str	r3, [r7, #16]
}
 800dcce:	bf00      	nop
 800dcd0:	e7fe      	b.n	800dcd0 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800dcd2:	683b      	ldr	r3, [r7, #0]
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	d10c      	bne.n	800dcf2 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800dcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dcdc:	b672      	cpsid	i
 800dcde:	f383 8811 	msr	BASEPRI, r3
 800dce2:	f3bf 8f6f 	isb	sy
 800dce6:	f3bf 8f4f 	dsb	sy
 800dcea:	b662      	cpsie	i
 800dcec:	60fb      	str	r3, [r7, #12]
}
 800dcee:	bf00      	nop
 800dcf0:	e7fe      	b.n	800dcf0 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800dcf2:	f000 fc73 	bl	800e5dc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800dcf6:	4b1d      	ldr	r3, [pc, #116]	; (800dd6c <xTaskCheckForTimeOut+0xc4>)
 800dcf8:	681b      	ldr	r3, [r3, #0]
 800dcfa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	69ba      	ldr	r2, [r7, #24]
 800dd02:	1ad3      	subs	r3, r2, r3
 800dd04:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800dd06:	683b      	ldr	r3, [r7, #0]
 800dd08:	681b      	ldr	r3, [r3, #0]
 800dd0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dd0e:	d102      	bne.n	800dd16 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]
 800dd14:	e023      	b.n	800dd5e <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800dd16:	687b      	ldr	r3, [r7, #4]
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	4b15      	ldr	r3, [pc, #84]	; (800dd70 <xTaskCheckForTimeOut+0xc8>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	429a      	cmp	r2, r3
 800dd20:	d007      	beq.n	800dd32 <xTaskCheckForTimeOut+0x8a>
 800dd22:	687b      	ldr	r3, [r7, #4]
 800dd24:	685b      	ldr	r3, [r3, #4]
 800dd26:	69ba      	ldr	r2, [r7, #24]
 800dd28:	429a      	cmp	r2, r3
 800dd2a:	d302      	bcc.n	800dd32 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800dd2c:	2301      	movs	r3, #1
 800dd2e:	61fb      	str	r3, [r7, #28]
 800dd30:	e015      	b.n	800dd5e <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	681b      	ldr	r3, [r3, #0]
 800dd36:	697a      	ldr	r2, [r7, #20]
 800dd38:	429a      	cmp	r2, r3
 800dd3a:	d20b      	bcs.n	800dd54 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	681a      	ldr	r2, [r3, #0]
 800dd40:	697b      	ldr	r3, [r7, #20]
 800dd42:	1ad2      	subs	r2, r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800dd48:	6878      	ldr	r0, [r7, #4]
 800dd4a:	f7ff ff97 	bl	800dc7c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800dd4e:	2300      	movs	r3, #0
 800dd50:	61fb      	str	r3, [r7, #28]
 800dd52:	e004      	b.n	800dd5e <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800dd54:	683b      	ldr	r3, [r7, #0]
 800dd56:	2200      	movs	r2, #0
 800dd58:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800dd5a:	2301      	movs	r3, #1
 800dd5c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800dd5e:	f000 fc71 	bl	800e644 <vPortExitCritical>

	return xReturn;
 800dd62:	69fb      	ldr	r3, [r7, #28]
}
 800dd64:	4618      	mov	r0, r3
 800dd66:	3720      	adds	r7, #32
 800dd68:	46bd      	mov	sp, r7
 800dd6a:	bd80      	pop	{r7, pc}
 800dd6c:	20000614 	.word	0x20000614
 800dd70:	20000628 	.word	0x20000628

0800dd74 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800dd74:	b480      	push	{r7}
 800dd76:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800dd78:	4b03      	ldr	r3, [pc, #12]	; (800dd88 <vTaskMissedYield+0x14>)
 800dd7a:	2201      	movs	r2, #1
 800dd7c:	601a      	str	r2, [r3, #0]
}
 800dd7e:	bf00      	nop
 800dd80:	46bd      	mov	sp, r7
 800dd82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd86:	4770      	bx	lr
 800dd88:	20000624 	.word	0x20000624

0800dd8c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800dd8c:	b580      	push	{r7, lr}
 800dd8e:	b082      	sub	sp, #8
 800dd90:	af00      	add	r7, sp, #0
 800dd92:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800dd94:	f000 f854 	bl	800de40 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800dd98:	4b07      	ldr	r3, [pc, #28]	; (800ddb8 <prvIdleTask+0x2c>)
 800dd9a:	681b      	ldr	r3, [r3, #0]
 800dd9c:	2b01      	cmp	r3, #1
 800dd9e:	d907      	bls.n	800ddb0 <prvIdleTask+0x24>
			{
				taskYIELD();
 800dda0:	4b06      	ldr	r3, [pc, #24]	; (800ddbc <prvIdleTask+0x30>)
 800dda2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dda6:	601a      	str	r2, [r3, #0]
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800ddb0:	f7f3 f8c8 	bl	8000f44 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ddb4:	e7ee      	b.n	800dd94 <prvIdleTask+0x8>
 800ddb6:	bf00      	nop
 800ddb8:	20000514 	.word	0x20000514
 800ddbc:	e000ed04 	.word	0xe000ed04

0800ddc0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ddc0:	b580      	push	{r7, lr}
 800ddc2:	b082      	sub	sp, #8
 800ddc4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ddc6:	2300      	movs	r3, #0
 800ddc8:	607b      	str	r3, [r7, #4]
 800ddca:	e00c      	b.n	800dde6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	4613      	mov	r3, r2
 800ddd0:	009b      	lsls	r3, r3, #2
 800ddd2:	4413      	add	r3, r2
 800ddd4:	009b      	lsls	r3, r3, #2
 800ddd6:	4a12      	ldr	r2, [pc, #72]	; (800de20 <prvInitialiseTaskLists+0x60>)
 800ddd8:	4413      	add	r3, r2
 800ddda:	4618      	mov	r0, r3
 800dddc:	f7fe fc9d 	bl	800c71a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dde0:	687b      	ldr	r3, [r7, #4]
 800dde2:	3301      	adds	r3, #1
 800dde4:	607b      	str	r3, [r7, #4]
 800dde6:	687b      	ldr	r3, [r7, #4]
 800dde8:	2b06      	cmp	r3, #6
 800ddea:	d9ef      	bls.n	800ddcc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ddec:	480d      	ldr	r0, [pc, #52]	; (800de24 <prvInitialiseTaskLists+0x64>)
 800ddee:	f7fe fc94 	bl	800c71a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ddf2:	480d      	ldr	r0, [pc, #52]	; (800de28 <prvInitialiseTaskLists+0x68>)
 800ddf4:	f7fe fc91 	bl	800c71a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ddf8:	480c      	ldr	r0, [pc, #48]	; (800de2c <prvInitialiseTaskLists+0x6c>)
 800ddfa:	f7fe fc8e 	bl	800c71a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ddfe:	480c      	ldr	r0, [pc, #48]	; (800de30 <prvInitialiseTaskLists+0x70>)
 800de00:	f7fe fc8b 	bl	800c71a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800de04:	480b      	ldr	r0, [pc, #44]	; (800de34 <prvInitialiseTaskLists+0x74>)
 800de06:	f7fe fc88 	bl	800c71a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800de0a:	4b0b      	ldr	r3, [pc, #44]	; (800de38 <prvInitialiseTaskLists+0x78>)
 800de0c:	4a05      	ldr	r2, [pc, #20]	; (800de24 <prvInitialiseTaskLists+0x64>)
 800de0e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800de10:	4b0a      	ldr	r3, [pc, #40]	; (800de3c <prvInitialiseTaskLists+0x7c>)
 800de12:	4a05      	ldr	r2, [pc, #20]	; (800de28 <prvInitialiseTaskLists+0x68>)
 800de14:	601a      	str	r2, [r3, #0]
}
 800de16:	bf00      	nop
 800de18:	3708      	adds	r7, #8
 800de1a:	46bd      	mov	sp, r7
 800de1c:	bd80      	pop	{r7, pc}
 800de1e:	bf00      	nop
 800de20:	20000514 	.word	0x20000514
 800de24:	200005a0 	.word	0x200005a0
 800de28:	200005b4 	.word	0x200005b4
 800de2c:	200005d0 	.word	0x200005d0
 800de30:	200005e4 	.word	0x200005e4
 800de34:	200005fc 	.word	0x200005fc
 800de38:	200005c8 	.word	0x200005c8
 800de3c:	200005cc 	.word	0x200005cc

0800de40 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800de40:	b580      	push	{r7, lr}
 800de42:	b082      	sub	sp, #8
 800de44:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de46:	e019      	b.n	800de7c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800de48:	f000 fbc8 	bl	800e5dc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de4c:	4b10      	ldr	r3, [pc, #64]	; (800de90 <prvCheckTasksWaitingTermination+0x50>)
 800de4e:	68db      	ldr	r3, [r3, #12]
 800de50:	68db      	ldr	r3, [r3, #12]
 800de52:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	3304      	adds	r3, #4
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe fce8 	bl	800c82e <uxListRemove>
				--uxCurrentNumberOfTasks;
 800de5e:	4b0d      	ldr	r3, [pc, #52]	; (800de94 <prvCheckTasksWaitingTermination+0x54>)
 800de60:	681b      	ldr	r3, [r3, #0]
 800de62:	3b01      	subs	r3, #1
 800de64:	4a0b      	ldr	r2, [pc, #44]	; (800de94 <prvCheckTasksWaitingTermination+0x54>)
 800de66:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800de68:	4b0b      	ldr	r3, [pc, #44]	; (800de98 <prvCheckTasksWaitingTermination+0x58>)
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	3b01      	subs	r3, #1
 800de6e:	4a0a      	ldr	r2, [pc, #40]	; (800de98 <prvCheckTasksWaitingTermination+0x58>)
 800de70:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800de72:	f000 fbe7 	bl	800e644 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800de76:	6878      	ldr	r0, [r7, #4]
 800de78:	f000 f810 	bl	800de9c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de7c:	4b06      	ldr	r3, [pc, #24]	; (800de98 <prvCheckTasksWaitingTermination+0x58>)
 800de7e:	681b      	ldr	r3, [r3, #0]
 800de80:	2b00      	cmp	r3, #0
 800de82:	d1e1      	bne.n	800de48 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800de84:	bf00      	nop
 800de86:	bf00      	nop
 800de88:	3708      	adds	r7, #8
 800de8a:	46bd      	mov	sp, r7
 800de8c:	bd80      	pop	{r7, pc}
 800de8e:	bf00      	nop
 800de90:	200005e4 	.word	0x200005e4
 800de94:	20000610 	.word	0x20000610
 800de98:	200005f8 	.word	0x200005f8

0800de9c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800de9c:	b580      	push	{r7, lr}
 800de9e:	b084      	sub	sp, #16
 800dea0:	af00      	add	r7, sp, #0
 800dea2:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800deaa:	2b00      	cmp	r3, #0
 800deac:	d108      	bne.n	800dec0 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800deae:	687b      	ldr	r3, [r7, #4]
 800deb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800deb2:	4618      	mov	r0, r3
 800deb4:	f000 fd4a 	bl	800e94c <vPortFree>
				vPortFree( pxTCB );
 800deb8:	6878      	ldr	r0, [r7, #4]
 800deba:	f000 fd47 	bl	800e94c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800debe:	e01a      	b.n	800def6 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800dec0:	687b      	ldr	r3, [r7, #4]
 800dec2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800dec6:	2b01      	cmp	r3, #1
 800dec8:	d103      	bne.n	800ded2 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800deca:	6878      	ldr	r0, [r7, #4]
 800decc:	f000 fd3e 	bl	800e94c <vPortFree>
	}
 800ded0:	e011      	b.n	800def6 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ded2:	687b      	ldr	r3, [r7, #4]
 800ded4:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800ded8:	2b02      	cmp	r3, #2
 800deda:	d00c      	beq.n	800def6 <prvDeleteTCB+0x5a>
	__asm volatile
 800dedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dee0:	b672      	cpsid	i
 800dee2:	f383 8811 	msr	BASEPRI, r3
 800dee6:	f3bf 8f6f 	isb	sy
 800deea:	f3bf 8f4f 	dsb	sy
 800deee:	b662      	cpsie	i
 800def0:	60fb      	str	r3, [r7, #12]
}
 800def2:	bf00      	nop
 800def4:	e7fe      	b.n	800def4 <prvDeleteTCB+0x58>
	}
 800def6:	bf00      	nop
 800def8:	3710      	adds	r7, #16
 800defa:	46bd      	mov	sp, r7
 800defc:	bd80      	pop	{r7, pc}
	...

0800df00 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800df00:	b480      	push	{r7}
 800df02:	b083      	sub	sp, #12
 800df04:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800df06:	4b0c      	ldr	r3, [pc, #48]	; (800df38 <prvResetNextTaskUnblockTime+0x38>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	681b      	ldr	r3, [r3, #0]
 800df0c:	2b00      	cmp	r3, #0
 800df0e:	d104      	bne.n	800df1a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800df10:	4b0a      	ldr	r3, [pc, #40]	; (800df3c <prvResetNextTaskUnblockTime+0x3c>)
 800df12:	f04f 32ff 	mov.w	r2, #4294967295
 800df16:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800df18:	e008      	b.n	800df2c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800df1a:	4b07      	ldr	r3, [pc, #28]	; (800df38 <prvResetNextTaskUnblockTime+0x38>)
 800df1c:	681b      	ldr	r3, [r3, #0]
 800df1e:	68db      	ldr	r3, [r3, #12]
 800df20:	68db      	ldr	r3, [r3, #12]
 800df22:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	685b      	ldr	r3, [r3, #4]
 800df28:	4a04      	ldr	r2, [pc, #16]	; (800df3c <prvResetNextTaskUnblockTime+0x3c>)
 800df2a:	6013      	str	r3, [r2, #0]
}
 800df2c:	bf00      	nop
 800df2e:	370c      	adds	r7, #12
 800df30:	46bd      	mov	sp, r7
 800df32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df36:	4770      	bx	lr
 800df38:	200005c8 	.word	0x200005c8
 800df3c:	20000630 	.word	0x20000630

0800df40 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800df40:	b480      	push	{r7}
 800df42:	b083      	sub	sp, #12
 800df44:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800df46:	4b0b      	ldr	r3, [pc, #44]	; (800df74 <xTaskGetSchedulerState+0x34>)
 800df48:	681b      	ldr	r3, [r3, #0]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d102      	bne.n	800df54 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800df4e:	2301      	movs	r3, #1
 800df50:	607b      	str	r3, [r7, #4]
 800df52:	e008      	b.n	800df66 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800df54:	4b08      	ldr	r3, [pc, #32]	; (800df78 <xTaskGetSchedulerState+0x38>)
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d102      	bne.n	800df62 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800df5c:	2302      	movs	r3, #2
 800df5e:	607b      	str	r3, [r7, #4]
 800df60:	e001      	b.n	800df66 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800df62:	2300      	movs	r3, #0
 800df64:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800df66:	687b      	ldr	r3, [r7, #4]
	}
 800df68:	4618      	mov	r0, r3
 800df6a:	370c      	adds	r7, #12
 800df6c:	46bd      	mov	sp, r7
 800df6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df72:	4770      	bx	lr
 800df74:	2000061c 	.word	0x2000061c
 800df78:	20000638 	.word	0x20000638

0800df7c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800df7c:	b580      	push	{r7, lr}
 800df7e:	b084      	sub	sp, #16
 800df80:	af00      	add	r7, sp, #0
 800df82:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800df88:	2300      	movs	r3, #0
 800df8a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	2b00      	cmp	r3, #0
 800df90:	d069      	beq.n	800e066 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800df92:	68bb      	ldr	r3, [r7, #8]
 800df94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df96:	4b36      	ldr	r3, [pc, #216]	; (800e070 <xTaskPriorityInherit+0xf4>)
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df9c:	429a      	cmp	r2, r3
 800df9e:	d259      	bcs.n	800e054 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dfa0:	68bb      	ldr	r3, [r7, #8]
 800dfa2:	699b      	ldr	r3, [r3, #24]
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	db06      	blt.n	800dfb6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dfa8:	4b31      	ldr	r3, [pc, #196]	; (800e070 <xTaskPriorityInherit+0xf4>)
 800dfaa:	681b      	ldr	r3, [r3, #0]
 800dfac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfae:	f1c3 0207 	rsb	r2, r3, #7
 800dfb2:	68bb      	ldr	r3, [r7, #8]
 800dfb4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dfb6:	68bb      	ldr	r3, [r7, #8]
 800dfb8:	6959      	ldr	r1, [r3, #20]
 800dfba:	68bb      	ldr	r3, [r7, #8]
 800dfbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfbe:	4613      	mov	r3, r2
 800dfc0:	009b      	lsls	r3, r3, #2
 800dfc2:	4413      	add	r3, r2
 800dfc4:	009b      	lsls	r3, r3, #2
 800dfc6:	4a2b      	ldr	r2, [pc, #172]	; (800e074 <xTaskPriorityInherit+0xf8>)
 800dfc8:	4413      	add	r3, r2
 800dfca:	4299      	cmp	r1, r3
 800dfcc:	d13a      	bne.n	800e044 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dfce:	68bb      	ldr	r3, [r7, #8]
 800dfd0:	3304      	adds	r3, #4
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	f7fe fc2b 	bl	800c82e <uxListRemove>
 800dfd8:	4603      	mov	r3, r0
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	d115      	bne.n	800e00a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800dfde:	68bb      	ldr	r3, [r7, #8]
 800dfe0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dfe2:	4924      	ldr	r1, [pc, #144]	; (800e074 <xTaskPriorityInherit+0xf8>)
 800dfe4:	4613      	mov	r3, r2
 800dfe6:	009b      	lsls	r3, r3, #2
 800dfe8:	4413      	add	r3, r2
 800dfea:	009b      	lsls	r3, r3, #2
 800dfec:	440b      	add	r3, r1
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d10a      	bne.n	800e00a <xTaskPriorityInherit+0x8e>
 800dff4:	68bb      	ldr	r3, [r7, #8]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	2201      	movs	r2, #1
 800dffa:	fa02 f303 	lsl.w	r3, r2, r3
 800dffe:	43da      	mvns	r2, r3
 800e000:	4b1d      	ldr	r3, [pc, #116]	; (800e078 <xTaskPriorityInherit+0xfc>)
 800e002:	681b      	ldr	r3, [r3, #0]
 800e004:	4013      	ands	r3, r2
 800e006:	4a1c      	ldr	r2, [pc, #112]	; (800e078 <xTaskPriorityInherit+0xfc>)
 800e008:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e00a:	4b19      	ldr	r3, [pc, #100]	; (800e070 <xTaskPriorityInherit+0xf4>)
 800e00c:	681b      	ldr	r3, [r3, #0]
 800e00e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e014:	68bb      	ldr	r3, [r7, #8]
 800e016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e018:	2201      	movs	r2, #1
 800e01a:	409a      	lsls	r2, r3
 800e01c:	4b16      	ldr	r3, [pc, #88]	; (800e078 <xTaskPriorityInherit+0xfc>)
 800e01e:	681b      	ldr	r3, [r3, #0]
 800e020:	4313      	orrs	r3, r2
 800e022:	4a15      	ldr	r2, [pc, #84]	; (800e078 <xTaskPriorityInherit+0xfc>)
 800e024:	6013      	str	r3, [r2, #0]
 800e026:	68bb      	ldr	r3, [r7, #8]
 800e028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e02a:	4613      	mov	r3, r2
 800e02c:	009b      	lsls	r3, r3, #2
 800e02e:	4413      	add	r3, r2
 800e030:	009b      	lsls	r3, r3, #2
 800e032:	4a10      	ldr	r2, [pc, #64]	; (800e074 <xTaskPriorityInherit+0xf8>)
 800e034:	441a      	add	r2, r3
 800e036:	68bb      	ldr	r3, [r7, #8]
 800e038:	3304      	adds	r3, #4
 800e03a:	4619      	mov	r1, r3
 800e03c:	4610      	mov	r0, r2
 800e03e:	f7fe fb99 	bl	800c774 <vListInsertEnd>
 800e042:	e004      	b.n	800e04e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e044:	4b0a      	ldr	r3, [pc, #40]	; (800e070 <xTaskPriorityInherit+0xf4>)
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e04a:	68bb      	ldr	r3, [r7, #8]
 800e04c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800e04e:	2301      	movs	r3, #1
 800e050:	60fb      	str	r3, [r7, #12]
 800e052:	e008      	b.n	800e066 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e054:	68bb      	ldr	r3, [r7, #8]
 800e056:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e058:	4b05      	ldr	r3, [pc, #20]	; (800e070 <xTaskPriorityInherit+0xf4>)
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e05e:	429a      	cmp	r2, r3
 800e060:	d201      	bcs.n	800e066 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800e062:	2301      	movs	r3, #1
 800e064:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e066:	68fb      	ldr	r3, [r7, #12]
	}
 800e068:	4618      	mov	r0, r3
 800e06a:	3710      	adds	r7, #16
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	20000510 	.word	0x20000510
 800e074:	20000514 	.word	0x20000514
 800e078:	20000618 	.word	0x20000618

0800e07c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e07c:	b580      	push	{r7, lr}
 800e07e:	b086      	sub	sp, #24
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e088:	2300      	movs	r3, #0
 800e08a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e08c:	687b      	ldr	r3, [r7, #4]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d072      	beq.n	800e178 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e092:	4b3c      	ldr	r3, [pc, #240]	; (800e184 <xTaskPriorityDisinherit+0x108>)
 800e094:	681b      	ldr	r3, [r3, #0]
 800e096:	693a      	ldr	r2, [r7, #16]
 800e098:	429a      	cmp	r2, r3
 800e09a:	d00c      	beq.n	800e0b6 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800e09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0a0:	b672      	cpsid	i
 800e0a2:	f383 8811 	msr	BASEPRI, r3
 800e0a6:	f3bf 8f6f 	isb	sy
 800e0aa:	f3bf 8f4f 	dsb	sy
 800e0ae:	b662      	cpsie	i
 800e0b0:	60fb      	str	r3, [r7, #12]
}
 800e0b2:	bf00      	nop
 800e0b4:	e7fe      	b.n	800e0b4 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800e0b6:	693b      	ldr	r3, [r7, #16]
 800e0b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0ba:	2b00      	cmp	r3, #0
 800e0bc:	d10c      	bne.n	800e0d8 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800e0be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0c2:	b672      	cpsid	i
 800e0c4:	f383 8811 	msr	BASEPRI, r3
 800e0c8:	f3bf 8f6f 	isb	sy
 800e0cc:	f3bf 8f4f 	dsb	sy
 800e0d0:	b662      	cpsie	i
 800e0d2:	60bb      	str	r3, [r7, #8]
}
 800e0d4:	bf00      	nop
 800e0d6:	e7fe      	b.n	800e0d6 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800e0d8:	693b      	ldr	r3, [r7, #16]
 800e0da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0dc:	1e5a      	subs	r2, r3, #1
 800e0de:	693b      	ldr	r3, [r7, #16]
 800e0e0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e0e2:	693b      	ldr	r3, [r7, #16]
 800e0e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0e6:	693b      	ldr	r3, [r7, #16]
 800e0e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e0ea:	429a      	cmp	r2, r3
 800e0ec:	d044      	beq.n	800e178 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e0ee:	693b      	ldr	r3, [r7, #16]
 800e0f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e0f2:	2b00      	cmp	r3, #0
 800e0f4:	d140      	bne.n	800e178 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e0f6:	693b      	ldr	r3, [r7, #16]
 800e0f8:	3304      	adds	r3, #4
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7fe fb97 	bl	800c82e <uxListRemove>
 800e100:	4603      	mov	r3, r0
 800e102:	2b00      	cmp	r3, #0
 800e104:	d115      	bne.n	800e132 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10a:	491f      	ldr	r1, [pc, #124]	; (800e188 <xTaskPriorityDisinherit+0x10c>)
 800e10c:	4613      	mov	r3, r2
 800e10e:	009b      	lsls	r3, r3, #2
 800e110:	4413      	add	r3, r2
 800e112:	009b      	lsls	r3, r3, #2
 800e114:	440b      	add	r3, r1
 800e116:	681b      	ldr	r3, [r3, #0]
 800e118:	2b00      	cmp	r3, #0
 800e11a:	d10a      	bne.n	800e132 <xTaskPriorityDisinherit+0xb6>
 800e11c:	693b      	ldr	r3, [r7, #16]
 800e11e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e120:	2201      	movs	r2, #1
 800e122:	fa02 f303 	lsl.w	r3, r2, r3
 800e126:	43da      	mvns	r2, r3
 800e128:	4b18      	ldr	r3, [pc, #96]	; (800e18c <xTaskPriorityDisinherit+0x110>)
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	4013      	ands	r3, r2
 800e12e:	4a17      	ldr	r2, [pc, #92]	; (800e18c <xTaskPriorityDisinherit+0x110>)
 800e130:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e132:	693b      	ldr	r3, [r7, #16]
 800e134:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800e136:	693b      	ldr	r3, [r7, #16]
 800e138:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e13a:	693b      	ldr	r3, [r7, #16]
 800e13c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e13e:	f1c3 0207 	rsb	r2, r3, #7
 800e142:	693b      	ldr	r3, [r7, #16]
 800e144:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e146:	693b      	ldr	r3, [r7, #16]
 800e148:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e14a:	2201      	movs	r2, #1
 800e14c:	409a      	lsls	r2, r3
 800e14e:	4b0f      	ldr	r3, [pc, #60]	; (800e18c <xTaskPriorityDisinherit+0x110>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	4313      	orrs	r3, r2
 800e154:	4a0d      	ldr	r2, [pc, #52]	; (800e18c <xTaskPriorityDisinherit+0x110>)
 800e156:	6013      	str	r3, [r2, #0]
 800e158:	693b      	ldr	r3, [r7, #16]
 800e15a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e15c:	4613      	mov	r3, r2
 800e15e:	009b      	lsls	r3, r3, #2
 800e160:	4413      	add	r3, r2
 800e162:	009b      	lsls	r3, r3, #2
 800e164:	4a08      	ldr	r2, [pc, #32]	; (800e188 <xTaskPriorityDisinherit+0x10c>)
 800e166:	441a      	add	r2, r3
 800e168:	693b      	ldr	r3, [r7, #16]
 800e16a:	3304      	adds	r3, #4
 800e16c:	4619      	mov	r1, r3
 800e16e:	4610      	mov	r0, r2
 800e170:	f7fe fb00 	bl	800c774 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e174:	2301      	movs	r3, #1
 800e176:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e178:	697b      	ldr	r3, [r7, #20]
	}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	20000510 	.word	0x20000510
 800e188:	20000514 	.word	0x20000514
 800e18c:	20000618 	.word	0x20000618

0800e190 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800e190:	b580      	push	{r7, lr}
 800e192:	b088      	sub	sp, #32
 800e194:	af00      	add	r7, sp, #0
 800e196:	6078      	str	r0, [r7, #4]
 800e198:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800e19a:	687b      	ldr	r3, [r7, #4]
 800e19c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800e19e:	2301      	movs	r3, #1
 800e1a0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f000 8087 	beq.w	800e2b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800e1aa:	69bb      	ldr	r3, [r7, #24]
 800e1ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d10c      	bne.n	800e1cc <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800e1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1b6:	b672      	cpsid	i
 800e1b8:	f383 8811 	msr	BASEPRI, r3
 800e1bc:	f3bf 8f6f 	isb	sy
 800e1c0:	f3bf 8f4f 	dsb	sy
 800e1c4:	b662      	cpsie	i
 800e1c6:	60fb      	str	r3, [r7, #12]
}
 800e1c8:	bf00      	nop
 800e1ca:	e7fe      	b.n	800e1ca <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e1cc:	69bb      	ldr	r3, [r7, #24]
 800e1ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1d0:	683a      	ldr	r2, [r7, #0]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d902      	bls.n	800e1dc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800e1d6:	683b      	ldr	r3, [r7, #0]
 800e1d8:	61fb      	str	r3, [r7, #28]
 800e1da:	e002      	b.n	800e1e2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800e1dc:	69bb      	ldr	r3, [r7, #24]
 800e1de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e1e0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e1e2:	69bb      	ldr	r3, [r7, #24]
 800e1e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e1e6:	69fa      	ldr	r2, [r7, #28]
 800e1e8:	429a      	cmp	r2, r3
 800e1ea:	d065      	beq.n	800e2b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e1ec:	69bb      	ldr	r3, [r7, #24]
 800e1ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e1f0:	697a      	ldr	r2, [r7, #20]
 800e1f2:	429a      	cmp	r2, r3
 800e1f4:	d160      	bne.n	800e2b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800e1f6:	4b32      	ldr	r3, [pc, #200]	; (800e2c0 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800e1f8:	681b      	ldr	r3, [r3, #0]
 800e1fa:	69ba      	ldr	r2, [r7, #24]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d10c      	bne.n	800e21a <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800e200:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e204:	b672      	cpsid	i
 800e206:	f383 8811 	msr	BASEPRI, r3
 800e20a:	f3bf 8f6f 	isb	sy
 800e20e:	f3bf 8f4f 	dsb	sy
 800e212:	b662      	cpsie	i
 800e214:	60bb      	str	r3, [r7, #8]
}
 800e216:	bf00      	nop
 800e218:	e7fe      	b.n	800e218 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800e21a:	69bb      	ldr	r3, [r7, #24]
 800e21c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e21e:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800e220:	69bb      	ldr	r3, [r7, #24]
 800e222:	69fa      	ldr	r2, [r7, #28]
 800e224:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e226:	69bb      	ldr	r3, [r7, #24]
 800e228:	699b      	ldr	r3, [r3, #24]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	db04      	blt.n	800e238 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e22e:	69fb      	ldr	r3, [r7, #28]
 800e230:	f1c3 0207 	rsb	r2, r3, #7
 800e234:	69bb      	ldr	r3, [r7, #24]
 800e236:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e238:	69bb      	ldr	r3, [r7, #24]
 800e23a:	6959      	ldr	r1, [r3, #20]
 800e23c:	693a      	ldr	r2, [r7, #16]
 800e23e:	4613      	mov	r3, r2
 800e240:	009b      	lsls	r3, r3, #2
 800e242:	4413      	add	r3, r2
 800e244:	009b      	lsls	r3, r3, #2
 800e246:	4a1f      	ldr	r2, [pc, #124]	; (800e2c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e248:	4413      	add	r3, r2
 800e24a:	4299      	cmp	r1, r3
 800e24c:	d134      	bne.n	800e2b8 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e24e:	69bb      	ldr	r3, [r7, #24]
 800e250:	3304      	adds	r3, #4
 800e252:	4618      	mov	r0, r3
 800e254:	f7fe faeb 	bl	800c82e <uxListRemove>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d115      	bne.n	800e28a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800e25e:	69bb      	ldr	r3, [r7, #24]
 800e260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e262:	4918      	ldr	r1, [pc, #96]	; (800e2c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e264:	4613      	mov	r3, r2
 800e266:	009b      	lsls	r3, r3, #2
 800e268:	4413      	add	r3, r2
 800e26a:	009b      	lsls	r3, r3, #2
 800e26c:	440b      	add	r3, r1
 800e26e:	681b      	ldr	r3, [r3, #0]
 800e270:	2b00      	cmp	r3, #0
 800e272:	d10a      	bne.n	800e28a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800e274:	69bb      	ldr	r3, [r7, #24]
 800e276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e278:	2201      	movs	r2, #1
 800e27a:	fa02 f303 	lsl.w	r3, r2, r3
 800e27e:	43da      	mvns	r2, r3
 800e280:	4b11      	ldr	r3, [pc, #68]	; (800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	4013      	ands	r3, r2
 800e286:	4a10      	ldr	r2, [pc, #64]	; (800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e288:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800e28a:	69bb      	ldr	r3, [r7, #24]
 800e28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e28e:	2201      	movs	r2, #1
 800e290:	409a      	lsls	r2, r3
 800e292:	4b0d      	ldr	r3, [pc, #52]	; (800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	4313      	orrs	r3, r2
 800e298:	4a0b      	ldr	r2, [pc, #44]	; (800e2c8 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800e29a:	6013      	str	r3, [r2, #0]
 800e29c:	69bb      	ldr	r3, [r7, #24]
 800e29e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2a0:	4613      	mov	r3, r2
 800e2a2:	009b      	lsls	r3, r3, #2
 800e2a4:	4413      	add	r3, r2
 800e2a6:	009b      	lsls	r3, r3, #2
 800e2a8:	4a06      	ldr	r2, [pc, #24]	; (800e2c4 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800e2aa:	441a      	add	r2, r3
 800e2ac:	69bb      	ldr	r3, [r7, #24]
 800e2ae:	3304      	adds	r3, #4
 800e2b0:	4619      	mov	r1, r3
 800e2b2:	4610      	mov	r0, r2
 800e2b4:	f7fe fa5e 	bl	800c774 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2b8:	bf00      	nop
 800e2ba:	3720      	adds	r7, #32
 800e2bc:	46bd      	mov	sp, r7
 800e2be:	bd80      	pop	{r7, pc}
 800e2c0:	20000510 	.word	0x20000510
 800e2c4:	20000514 	.word	0x20000514
 800e2c8:	20000618 	.word	0x20000618

0800e2cc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800e2cc:	b480      	push	{r7}
 800e2ce:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800e2d0:	4b07      	ldr	r3, [pc, #28]	; (800e2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	2b00      	cmp	r3, #0
 800e2d6:	d004      	beq.n	800e2e2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800e2d8:	4b05      	ldr	r3, [pc, #20]	; (800e2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2da:	681b      	ldr	r3, [r3, #0]
 800e2dc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800e2de:	3201      	adds	r2, #1
 800e2e0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800e2e2:	4b03      	ldr	r3, [pc, #12]	; (800e2f0 <pvTaskIncrementMutexHeldCount+0x24>)
 800e2e4:	681b      	ldr	r3, [r3, #0]
	}
 800e2e6:	4618      	mov	r0, r3
 800e2e8:	46bd      	mov	sp, r7
 800e2ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2ee:	4770      	bx	lr
 800e2f0:	20000510 	.word	0x20000510

0800e2f4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e2f4:	b580      	push	{r7, lr}
 800e2f6:	b084      	sub	sp, #16
 800e2f8:	af00      	add	r7, sp, #0
 800e2fa:	6078      	str	r0, [r7, #4]
 800e2fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e2fe:	4b29      	ldr	r3, [pc, #164]	; (800e3a4 <prvAddCurrentTaskToDelayedList+0xb0>)
 800e300:	681b      	ldr	r3, [r3, #0]
 800e302:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e304:	4b28      	ldr	r3, [pc, #160]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e306:	681b      	ldr	r3, [r3, #0]
 800e308:	3304      	adds	r3, #4
 800e30a:	4618      	mov	r0, r3
 800e30c:	f7fe fa8f 	bl	800c82e <uxListRemove>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d10b      	bne.n	800e32e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800e316:	4b24      	ldr	r3, [pc, #144]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e318:	681b      	ldr	r3, [r3, #0]
 800e31a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e31c:	2201      	movs	r2, #1
 800e31e:	fa02 f303 	lsl.w	r3, r2, r3
 800e322:	43da      	mvns	r2, r3
 800e324:	4b21      	ldr	r3, [pc, #132]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	4013      	ands	r3, r2
 800e32a:	4a20      	ldr	r2, [pc, #128]	; (800e3ac <prvAddCurrentTaskToDelayedList+0xb8>)
 800e32c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e32e:	687b      	ldr	r3, [r7, #4]
 800e330:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e334:	d10a      	bne.n	800e34c <prvAddCurrentTaskToDelayedList+0x58>
 800e336:	683b      	ldr	r3, [r7, #0]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d007      	beq.n	800e34c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e33c:	4b1a      	ldr	r3, [pc, #104]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	3304      	adds	r3, #4
 800e342:	4619      	mov	r1, r3
 800e344:	481a      	ldr	r0, [pc, #104]	; (800e3b0 <prvAddCurrentTaskToDelayedList+0xbc>)
 800e346:	f7fe fa15 	bl	800c774 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e34a:	e026      	b.n	800e39a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e34c:	68fa      	ldr	r2, [r7, #12]
 800e34e:	687b      	ldr	r3, [r7, #4]
 800e350:	4413      	add	r3, r2
 800e352:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e354:	4b14      	ldr	r3, [pc, #80]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	68ba      	ldr	r2, [r7, #8]
 800e35a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e35c:	68ba      	ldr	r2, [r7, #8]
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	429a      	cmp	r2, r3
 800e362:	d209      	bcs.n	800e378 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e364:	4b13      	ldr	r3, [pc, #76]	; (800e3b4 <prvAddCurrentTaskToDelayedList+0xc0>)
 800e366:	681a      	ldr	r2, [r3, #0]
 800e368:	4b0f      	ldr	r3, [pc, #60]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e36a:	681b      	ldr	r3, [r3, #0]
 800e36c:	3304      	adds	r3, #4
 800e36e:	4619      	mov	r1, r3
 800e370:	4610      	mov	r0, r2
 800e372:	f7fe fa23 	bl	800c7bc <vListInsert>
}
 800e376:	e010      	b.n	800e39a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e378:	4b0f      	ldr	r3, [pc, #60]	; (800e3b8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800e37a:	681a      	ldr	r2, [r3, #0]
 800e37c:	4b0a      	ldr	r3, [pc, #40]	; (800e3a8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800e37e:	681b      	ldr	r3, [r3, #0]
 800e380:	3304      	adds	r3, #4
 800e382:	4619      	mov	r1, r3
 800e384:	4610      	mov	r0, r2
 800e386:	f7fe fa19 	bl	800c7bc <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e38a:	4b0c      	ldr	r3, [pc, #48]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e38c:	681b      	ldr	r3, [r3, #0]
 800e38e:	68ba      	ldr	r2, [r7, #8]
 800e390:	429a      	cmp	r2, r3
 800e392:	d202      	bcs.n	800e39a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800e394:	4a09      	ldr	r2, [pc, #36]	; (800e3bc <prvAddCurrentTaskToDelayedList+0xc8>)
 800e396:	68bb      	ldr	r3, [r7, #8]
 800e398:	6013      	str	r3, [r2, #0]
}
 800e39a:	bf00      	nop
 800e39c:	3710      	adds	r7, #16
 800e39e:	46bd      	mov	sp, r7
 800e3a0:	bd80      	pop	{r7, pc}
 800e3a2:	bf00      	nop
 800e3a4:	20000614 	.word	0x20000614
 800e3a8:	20000510 	.word	0x20000510
 800e3ac:	20000618 	.word	0x20000618
 800e3b0:	200005fc 	.word	0x200005fc
 800e3b4:	200005cc 	.word	0x200005cc
 800e3b8:	200005c8 	.word	0x200005c8
 800e3bc:	20000630 	.word	0x20000630

0800e3c0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e3c0:	b480      	push	{r7}
 800e3c2:	b085      	sub	sp, #20
 800e3c4:	af00      	add	r7, sp, #0
 800e3c6:	60f8      	str	r0, [r7, #12]
 800e3c8:	60b9      	str	r1, [r7, #8]
 800e3ca:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	3b04      	subs	r3, #4
 800e3d0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e3d2:	68fb      	ldr	r3, [r7, #12]
 800e3d4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e3d8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3da:	68fb      	ldr	r3, [r7, #12]
 800e3dc:	3b04      	subs	r3, #4
 800e3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e3e0:	68bb      	ldr	r3, [r7, #8]
 800e3e2:	f023 0201 	bic.w	r2, r3, #1
 800e3e6:	68fb      	ldr	r3, [r7, #12]
 800e3e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e3ea:	68fb      	ldr	r3, [r7, #12]
 800e3ec:	3b04      	subs	r3, #4
 800e3ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e3f0:	4a0c      	ldr	r2, [pc, #48]	; (800e424 <pxPortInitialiseStack+0x64>)
 800e3f2:	68fb      	ldr	r3, [r7, #12]
 800e3f4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	3b14      	subs	r3, #20
 800e3fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e3fc:	687a      	ldr	r2, [r7, #4]
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e402:	68fb      	ldr	r3, [r7, #12]
 800e404:	3b04      	subs	r3, #4
 800e406:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	f06f 0202 	mvn.w	r2, #2
 800e40e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e410:	68fb      	ldr	r3, [r7, #12]
 800e412:	3b20      	subs	r3, #32
 800e414:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e416:	68fb      	ldr	r3, [r7, #12]
}
 800e418:	4618      	mov	r0, r3
 800e41a:	3714      	adds	r7, #20
 800e41c:	46bd      	mov	sp, r7
 800e41e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e422:	4770      	bx	lr
 800e424:	0800e429 	.word	0x0800e429

0800e428 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e428:	b480      	push	{r7}
 800e42a:	b085      	sub	sp, #20
 800e42c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e42e:	2300      	movs	r3, #0
 800e430:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e432:	4b14      	ldr	r3, [pc, #80]	; (800e484 <prvTaskExitError+0x5c>)
 800e434:	681b      	ldr	r3, [r3, #0]
 800e436:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e43a:	d00c      	beq.n	800e456 <prvTaskExitError+0x2e>
	__asm volatile
 800e43c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e440:	b672      	cpsid	i
 800e442:	f383 8811 	msr	BASEPRI, r3
 800e446:	f3bf 8f6f 	isb	sy
 800e44a:	f3bf 8f4f 	dsb	sy
 800e44e:	b662      	cpsie	i
 800e450:	60fb      	str	r3, [r7, #12]
}
 800e452:	bf00      	nop
 800e454:	e7fe      	b.n	800e454 <prvTaskExitError+0x2c>
	__asm volatile
 800e456:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e45a:	b672      	cpsid	i
 800e45c:	f383 8811 	msr	BASEPRI, r3
 800e460:	f3bf 8f6f 	isb	sy
 800e464:	f3bf 8f4f 	dsb	sy
 800e468:	b662      	cpsie	i
 800e46a:	60bb      	str	r3, [r7, #8]
}
 800e46c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e46e:	bf00      	nop
 800e470:	687b      	ldr	r3, [r7, #4]
 800e472:	2b00      	cmp	r3, #0
 800e474:	d0fc      	beq.n	800e470 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e476:	bf00      	nop
 800e478:	bf00      	nop
 800e47a:	3714      	adds	r7, #20
 800e47c:	46bd      	mov	sp, r7
 800e47e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e482:	4770      	bx	lr
 800e484:	20000060 	.word	0x20000060
	...

0800e490 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e490:	4b07      	ldr	r3, [pc, #28]	; (800e4b0 <pxCurrentTCBConst2>)
 800e492:	6819      	ldr	r1, [r3, #0]
 800e494:	6808      	ldr	r0, [r1, #0]
 800e496:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e49a:	f380 8809 	msr	PSP, r0
 800e49e:	f3bf 8f6f 	isb	sy
 800e4a2:	f04f 0000 	mov.w	r0, #0
 800e4a6:	f380 8811 	msr	BASEPRI, r0
 800e4aa:	4770      	bx	lr
 800e4ac:	f3af 8000 	nop.w

0800e4b0 <pxCurrentTCBConst2>:
 800e4b0:	20000510 	.word	0x20000510
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e4b4:	bf00      	nop
 800e4b6:	bf00      	nop

0800e4b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e4b8:	4808      	ldr	r0, [pc, #32]	; (800e4dc <prvPortStartFirstTask+0x24>)
 800e4ba:	6800      	ldr	r0, [r0, #0]
 800e4bc:	6800      	ldr	r0, [r0, #0]
 800e4be:	f380 8808 	msr	MSP, r0
 800e4c2:	f04f 0000 	mov.w	r0, #0
 800e4c6:	f380 8814 	msr	CONTROL, r0
 800e4ca:	b662      	cpsie	i
 800e4cc:	b661      	cpsie	f
 800e4ce:	f3bf 8f4f 	dsb	sy
 800e4d2:	f3bf 8f6f 	isb	sy
 800e4d6:	df00      	svc	0
 800e4d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e4da:	bf00      	nop
 800e4dc:	e000ed08 	.word	0xe000ed08

0800e4e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e4e0:	b580      	push	{r7, lr}
 800e4e2:	b084      	sub	sp, #16
 800e4e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e4e6:	4b37      	ldr	r3, [pc, #220]	; (800e5c4 <xPortStartScheduler+0xe4>)
 800e4e8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e4ea:	68fb      	ldr	r3, [r7, #12]
 800e4ec:	781b      	ldrb	r3, [r3, #0]
 800e4ee:	b2db      	uxtb	r3, r3
 800e4f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e4f2:	68fb      	ldr	r3, [r7, #12]
 800e4f4:	22ff      	movs	r2, #255	; 0xff
 800e4f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e4f8:	68fb      	ldr	r3, [r7, #12]
 800e4fa:	781b      	ldrb	r3, [r3, #0]
 800e4fc:	b2db      	uxtb	r3, r3
 800e4fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e500:	78fb      	ldrb	r3, [r7, #3]
 800e502:	b2db      	uxtb	r3, r3
 800e504:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e508:	b2da      	uxtb	r2, r3
 800e50a:	4b2f      	ldr	r3, [pc, #188]	; (800e5c8 <xPortStartScheduler+0xe8>)
 800e50c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e50e:	4b2f      	ldr	r3, [pc, #188]	; (800e5cc <xPortStartScheduler+0xec>)
 800e510:	2207      	movs	r2, #7
 800e512:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e514:	e009      	b.n	800e52a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800e516:	4b2d      	ldr	r3, [pc, #180]	; (800e5cc <xPortStartScheduler+0xec>)
 800e518:	681b      	ldr	r3, [r3, #0]
 800e51a:	3b01      	subs	r3, #1
 800e51c:	4a2b      	ldr	r2, [pc, #172]	; (800e5cc <xPortStartScheduler+0xec>)
 800e51e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e520:	78fb      	ldrb	r3, [r7, #3]
 800e522:	b2db      	uxtb	r3, r3
 800e524:	005b      	lsls	r3, r3, #1
 800e526:	b2db      	uxtb	r3, r3
 800e528:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e52a:	78fb      	ldrb	r3, [r7, #3]
 800e52c:	b2db      	uxtb	r3, r3
 800e52e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e532:	2b80      	cmp	r3, #128	; 0x80
 800e534:	d0ef      	beq.n	800e516 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e536:	4b25      	ldr	r3, [pc, #148]	; (800e5cc <xPortStartScheduler+0xec>)
 800e538:	681b      	ldr	r3, [r3, #0]
 800e53a:	f1c3 0307 	rsb	r3, r3, #7
 800e53e:	2b04      	cmp	r3, #4
 800e540:	d00c      	beq.n	800e55c <xPortStartScheduler+0x7c>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	b672      	cpsid	i
 800e548:	f383 8811 	msr	BASEPRI, r3
 800e54c:	f3bf 8f6f 	isb	sy
 800e550:	f3bf 8f4f 	dsb	sy
 800e554:	b662      	cpsie	i
 800e556:	60bb      	str	r3, [r7, #8]
}
 800e558:	bf00      	nop
 800e55a:	e7fe      	b.n	800e55a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e55c:	4b1b      	ldr	r3, [pc, #108]	; (800e5cc <xPortStartScheduler+0xec>)
 800e55e:	681b      	ldr	r3, [r3, #0]
 800e560:	021b      	lsls	r3, r3, #8
 800e562:	4a1a      	ldr	r2, [pc, #104]	; (800e5cc <xPortStartScheduler+0xec>)
 800e564:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e566:	4b19      	ldr	r3, [pc, #100]	; (800e5cc <xPortStartScheduler+0xec>)
 800e568:	681b      	ldr	r3, [r3, #0]
 800e56a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e56e:	4a17      	ldr	r2, [pc, #92]	; (800e5cc <xPortStartScheduler+0xec>)
 800e570:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	b2da      	uxtb	r2, r3
 800e576:	68fb      	ldr	r3, [r7, #12]
 800e578:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e57a:	4b15      	ldr	r3, [pc, #84]	; (800e5d0 <xPortStartScheduler+0xf0>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	4a14      	ldr	r2, [pc, #80]	; (800e5d0 <xPortStartScheduler+0xf0>)
 800e580:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e584:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e586:	4b12      	ldr	r3, [pc, #72]	; (800e5d0 <xPortStartScheduler+0xf0>)
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	4a11      	ldr	r2, [pc, #68]	; (800e5d0 <xPortStartScheduler+0xf0>)
 800e58c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e590:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e592:	f000 f8dd 	bl	800e750 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e596:	4b0f      	ldr	r3, [pc, #60]	; (800e5d4 <xPortStartScheduler+0xf4>)
 800e598:	2200      	movs	r2, #0
 800e59a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e59c:	f000 f8fc 	bl	800e798 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e5a0:	4b0d      	ldr	r3, [pc, #52]	; (800e5d8 <xPortStartScheduler+0xf8>)
 800e5a2:	681b      	ldr	r3, [r3, #0]
 800e5a4:	4a0c      	ldr	r2, [pc, #48]	; (800e5d8 <xPortStartScheduler+0xf8>)
 800e5a6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e5aa:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e5ac:	f7ff ff84 	bl	800e4b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e5b0:	f7ff fa58 	bl	800da64 <vTaskSwitchContext>
	prvTaskExitError();
 800e5b4:	f7ff ff38 	bl	800e428 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e5b8:	2300      	movs	r3, #0
}
 800e5ba:	4618      	mov	r0, r3
 800e5bc:	3710      	adds	r7, #16
 800e5be:	46bd      	mov	sp, r7
 800e5c0:	bd80      	pop	{r7, pc}
 800e5c2:	bf00      	nop
 800e5c4:	e000e400 	.word	0xe000e400
 800e5c8:	2000063c 	.word	0x2000063c
 800e5cc:	20000640 	.word	0x20000640
 800e5d0:	e000ed20 	.word	0xe000ed20
 800e5d4:	20000060 	.word	0x20000060
 800e5d8:	e000ef34 	.word	0xe000ef34

0800e5dc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e5dc:	b480      	push	{r7}
 800e5de:	b083      	sub	sp, #12
 800e5e0:	af00      	add	r7, sp, #0
	__asm volatile
 800e5e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5e6:	b672      	cpsid	i
 800e5e8:	f383 8811 	msr	BASEPRI, r3
 800e5ec:	f3bf 8f6f 	isb	sy
 800e5f0:	f3bf 8f4f 	dsb	sy
 800e5f4:	b662      	cpsie	i
 800e5f6:	607b      	str	r3, [r7, #4]
}
 800e5f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e5fa:	4b10      	ldr	r3, [pc, #64]	; (800e63c <vPortEnterCritical+0x60>)
 800e5fc:	681b      	ldr	r3, [r3, #0]
 800e5fe:	3301      	adds	r3, #1
 800e600:	4a0e      	ldr	r2, [pc, #56]	; (800e63c <vPortEnterCritical+0x60>)
 800e602:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e604:	4b0d      	ldr	r3, [pc, #52]	; (800e63c <vPortEnterCritical+0x60>)
 800e606:	681b      	ldr	r3, [r3, #0]
 800e608:	2b01      	cmp	r3, #1
 800e60a:	d111      	bne.n	800e630 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e60c:	4b0c      	ldr	r3, [pc, #48]	; (800e640 <vPortEnterCritical+0x64>)
 800e60e:	681b      	ldr	r3, [r3, #0]
 800e610:	b2db      	uxtb	r3, r3
 800e612:	2b00      	cmp	r3, #0
 800e614:	d00c      	beq.n	800e630 <vPortEnterCritical+0x54>
	__asm volatile
 800e616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e61a:	b672      	cpsid	i
 800e61c:	f383 8811 	msr	BASEPRI, r3
 800e620:	f3bf 8f6f 	isb	sy
 800e624:	f3bf 8f4f 	dsb	sy
 800e628:	b662      	cpsie	i
 800e62a:	603b      	str	r3, [r7, #0]
}
 800e62c:	bf00      	nop
 800e62e:	e7fe      	b.n	800e62e <vPortEnterCritical+0x52>
	}
}
 800e630:	bf00      	nop
 800e632:	370c      	adds	r7, #12
 800e634:	46bd      	mov	sp, r7
 800e636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e63a:	4770      	bx	lr
 800e63c:	20000060 	.word	0x20000060
 800e640:	e000ed04 	.word	0xe000ed04

0800e644 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e644:	b480      	push	{r7}
 800e646:	b083      	sub	sp, #12
 800e648:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e64a:	4b13      	ldr	r3, [pc, #76]	; (800e698 <vPortExitCritical+0x54>)
 800e64c:	681b      	ldr	r3, [r3, #0]
 800e64e:	2b00      	cmp	r3, #0
 800e650:	d10c      	bne.n	800e66c <vPortExitCritical+0x28>
	__asm volatile
 800e652:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e656:	b672      	cpsid	i
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	b662      	cpsie	i
 800e666:	607b      	str	r3, [r7, #4]
}
 800e668:	bf00      	nop
 800e66a:	e7fe      	b.n	800e66a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800e66c:	4b0a      	ldr	r3, [pc, #40]	; (800e698 <vPortExitCritical+0x54>)
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	3b01      	subs	r3, #1
 800e672:	4a09      	ldr	r2, [pc, #36]	; (800e698 <vPortExitCritical+0x54>)
 800e674:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e676:	4b08      	ldr	r3, [pc, #32]	; (800e698 <vPortExitCritical+0x54>)
 800e678:	681b      	ldr	r3, [r3, #0]
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	d105      	bne.n	800e68a <vPortExitCritical+0x46>
 800e67e:	2300      	movs	r3, #0
 800e680:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e682:	683b      	ldr	r3, [r7, #0]
 800e684:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800e688:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e68a:	bf00      	nop
 800e68c:	370c      	adds	r7, #12
 800e68e:	46bd      	mov	sp, r7
 800e690:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e694:	4770      	bx	lr
 800e696:	bf00      	nop
 800e698:	20000060 	.word	0x20000060
 800e69c:	00000000 	.word	0x00000000

0800e6a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e6a0:	f3ef 8009 	mrs	r0, PSP
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	4b15      	ldr	r3, [pc, #84]	; (800e700 <pxCurrentTCBConst>)
 800e6aa:	681a      	ldr	r2, [r3, #0]
 800e6ac:	f01e 0f10 	tst.w	lr, #16
 800e6b0:	bf08      	it	eq
 800e6b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e6b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ba:	6010      	str	r0, [r2, #0]
 800e6bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e6c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e6c4:	b672      	cpsid	i
 800e6c6:	f380 8811 	msr	BASEPRI, r0
 800e6ca:	f3bf 8f4f 	dsb	sy
 800e6ce:	f3bf 8f6f 	isb	sy
 800e6d2:	b662      	cpsie	i
 800e6d4:	f7ff f9c6 	bl	800da64 <vTaskSwitchContext>
 800e6d8:	f04f 0000 	mov.w	r0, #0
 800e6dc:	f380 8811 	msr	BASEPRI, r0
 800e6e0:	bc09      	pop	{r0, r3}
 800e6e2:	6819      	ldr	r1, [r3, #0]
 800e6e4:	6808      	ldr	r0, [r1, #0]
 800e6e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e6ea:	f01e 0f10 	tst.w	lr, #16
 800e6ee:	bf08      	it	eq
 800e6f0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e6f4:	f380 8809 	msr	PSP, r0
 800e6f8:	f3bf 8f6f 	isb	sy
 800e6fc:	4770      	bx	lr
 800e6fe:	bf00      	nop

0800e700 <pxCurrentTCBConst>:
 800e700:	20000510 	.word	0x20000510
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e704:	bf00      	nop
 800e706:	bf00      	nop

0800e708 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e708:	b580      	push	{r7, lr}
 800e70a:	b082      	sub	sp, #8
 800e70c:	af00      	add	r7, sp, #0
	__asm volatile
 800e70e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e712:	b672      	cpsid	i
 800e714:	f383 8811 	msr	BASEPRI, r3
 800e718:	f3bf 8f6f 	isb	sy
 800e71c:	f3bf 8f4f 	dsb	sy
 800e720:	b662      	cpsie	i
 800e722:	607b      	str	r3, [r7, #4]
}
 800e724:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e726:	f7ff f8e3 	bl	800d8f0 <xTaskIncrementTick>
 800e72a:	4603      	mov	r3, r0
 800e72c:	2b00      	cmp	r3, #0
 800e72e:	d003      	beq.n	800e738 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e730:	4b06      	ldr	r3, [pc, #24]	; (800e74c <SysTick_Handler+0x44>)
 800e732:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e736:	601a      	str	r2, [r3, #0]
 800e738:	2300      	movs	r3, #0
 800e73a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e73c:	683b      	ldr	r3, [r7, #0]
 800e73e:	f383 8811 	msr	BASEPRI, r3
}
 800e742:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e744:	bf00      	nop
 800e746:	3708      	adds	r7, #8
 800e748:	46bd      	mov	sp, r7
 800e74a:	bd80      	pop	{r7, pc}
 800e74c:	e000ed04 	.word	0xe000ed04

0800e750 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e750:	b480      	push	{r7}
 800e752:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e754:	4b0b      	ldr	r3, [pc, #44]	; (800e784 <vPortSetupTimerInterrupt+0x34>)
 800e756:	2200      	movs	r2, #0
 800e758:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e75a:	4b0b      	ldr	r3, [pc, #44]	; (800e788 <vPortSetupTimerInterrupt+0x38>)
 800e75c:	2200      	movs	r2, #0
 800e75e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <vPortSetupTimerInterrupt+0x3c>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	4a0a      	ldr	r2, [pc, #40]	; (800e790 <vPortSetupTimerInterrupt+0x40>)
 800e766:	fba2 2303 	umull	r2, r3, r2, r3
 800e76a:	099b      	lsrs	r3, r3, #6
 800e76c:	4a09      	ldr	r2, [pc, #36]	; (800e794 <vPortSetupTimerInterrupt+0x44>)
 800e76e:	3b01      	subs	r3, #1
 800e770:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e772:	4b04      	ldr	r3, [pc, #16]	; (800e784 <vPortSetupTimerInterrupt+0x34>)
 800e774:	2207      	movs	r2, #7
 800e776:	601a      	str	r2, [r3, #0]
}
 800e778:	bf00      	nop
 800e77a:	46bd      	mov	sp, r7
 800e77c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e780:	4770      	bx	lr
 800e782:	bf00      	nop
 800e784:	e000e010 	.word	0xe000e010
 800e788:	e000e018 	.word	0xe000e018
 800e78c:	20000054 	.word	0x20000054
 800e790:	10624dd3 	.word	0x10624dd3
 800e794:	e000e014 	.word	0xe000e014

0800e798 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e798:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e7a8 <vPortEnableVFP+0x10>
 800e79c:	6801      	ldr	r1, [r0, #0]
 800e79e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e7a2:	6001      	str	r1, [r0, #0]
 800e7a4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e7a6:	bf00      	nop
 800e7a8:	e000ed88 	.word	0xe000ed88

0800e7ac <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e7ac:	b580      	push	{r7, lr}
 800e7ae:	b08a      	sub	sp, #40	; 0x28
 800e7b0:	af00      	add	r7, sp, #0
 800e7b2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e7b4:	2300      	movs	r3, #0
 800e7b6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e7b8:	f7fe ffde 	bl	800d778 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e7bc:	4b5e      	ldr	r3, [pc, #376]	; (800e938 <pvPortMalloc+0x18c>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d101      	bne.n	800e7c8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e7c4:	f000 f920 	bl	800ea08 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e7c8:	4b5c      	ldr	r3, [pc, #368]	; (800e93c <pvPortMalloc+0x190>)
 800e7ca:	681a      	ldr	r2, [r3, #0]
 800e7cc:	687b      	ldr	r3, [r7, #4]
 800e7ce:	4013      	ands	r3, r2
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	f040 8092 	bne.w	800e8fa <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	d01f      	beq.n	800e81c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800e7dc:	2208      	movs	r2, #8
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	4413      	add	r3, r2
 800e7e2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	f003 0307 	and.w	r3, r3, #7
 800e7ea:	2b00      	cmp	r3, #0
 800e7ec:	d016      	beq.n	800e81c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	f023 0307 	bic.w	r3, r3, #7
 800e7f4:	3308      	adds	r3, #8
 800e7f6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	f003 0307 	and.w	r3, r3, #7
 800e7fe:	2b00      	cmp	r3, #0
 800e800:	d00c      	beq.n	800e81c <pvPortMalloc+0x70>
	__asm volatile
 800e802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e806:	b672      	cpsid	i
 800e808:	f383 8811 	msr	BASEPRI, r3
 800e80c:	f3bf 8f6f 	isb	sy
 800e810:	f3bf 8f4f 	dsb	sy
 800e814:	b662      	cpsie	i
 800e816:	617b      	str	r3, [r7, #20]
}
 800e818:	bf00      	nop
 800e81a:	e7fe      	b.n	800e81a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	2b00      	cmp	r3, #0
 800e820:	d06b      	beq.n	800e8fa <pvPortMalloc+0x14e>
 800e822:	4b47      	ldr	r3, [pc, #284]	; (800e940 <pvPortMalloc+0x194>)
 800e824:	681b      	ldr	r3, [r3, #0]
 800e826:	687a      	ldr	r2, [r7, #4]
 800e828:	429a      	cmp	r2, r3
 800e82a:	d866      	bhi.n	800e8fa <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e82c:	4b45      	ldr	r3, [pc, #276]	; (800e944 <pvPortMalloc+0x198>)
 800e82e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e830:	4b44      	ldr	r3, [pc, #272]	; (800e944 <pvPortMalloc+0x198>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e836:	e004      	b.n	800e842 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800e838:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e83c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e83e:	681b      	ldr	r3, [r3, #0]
 800e840:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e844:	685b      	ldr	r3, [r3, #4]
 800e846:	687a      	ldr	r2, [r7, #4]
 800e848:	429a      	cmp	r2, r3
 800e84a:	d903      	bls.n	800e854 <pvPortMalloc+0xa8>
 800e84c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	2b00      	cmp	r3, #0
 800e852:	d1f1      	bne.n	800e838 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e854:	4b38      	ldr	r3, [pc, #224]	; (800e938 <pvPortMalloc+0x18c>)
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e85a:	429a      	cmp	r2, r3
 800e85c:	d04d      	beq.n	800e8fa <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e85e:	6a3b      	ldr	r3, [r7, #32]
 800e860:	681b      	ldr	r3, [r3, #0]
 800e862:	2208      	movs	r2, #8
 800e864:	4413      	add	r3, r2
 800e866:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e868:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e86a:	681a      	ldr	r2, [r3, #0]
 800e86c:	6a3b      	ldr	r3, [r7, #32]
 800e86e:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e872:	685a      	ldr	r2, [r3, #4]
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	1ad2      	subs	r2, r2, r3
 800e878:	2308      	movs	r3, #8
 800e87a:	005b      	lsls	r3, r3, #1
 800e87c:	429a      	cmp	r2, r3
 800e87e:	d921      	bls.n	800e8c4 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e880:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e882:	687b      	ldr	r3, [r7, #4]
 800e884:	4413      	add	r3, r2
 800e886:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e888:	69bb      	ldr	r3, [r7, #24]
 800e88a:	f003 0307 	and.w	r3, r3, #7
 800e88e:	2b00      	cmp	r3, #0
 800e890:	d00c      	beq.n	800e8ac <pvPortMalloc+0x100>
	__asm volatile
 800e892:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e896:	b672      	cpsid	i
 800e898:	f383 8811 	msr	BASEPRI, r3
 800e89c:	f3bf 8f6f 	isb	sy
 800e8a0:	f3bf 8f4f 	dsb	sy
 800e8a4:	b662      	cpsie	i
 800e8a6:	613b      	str	r3, [r7, #16]
}
 800e8a8:	bf00      	nop
 800e8aa:	e7fe      	b.n	800e8aa <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	687b      	ldr	r3, [r7, #4]
 800e8b2:	1ad2      	subs	r2, r2, r3
 800e8b4:	69bb      	ldr	r3, [r7, #24]
 800e8b6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e8b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ba:	687a      	ldr	r2, [r7, #4]
 800e8bc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e8be:	69b8      	ldr	r0, [r7, #24]
 800e8c0:	f000 f904 	bl	800eacc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e8c4:	4b1e      	ldr	r3, [pc, #120]	; (800e940 <pvPortMalloc+0x194>)
 800e8c6:	681a      	ldr	r2, [r3, #0]
 800e8c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8ca:	685b      	ldr	r3, [r3, #4]
 800e8cc:	1ad3      	subs	r3, r2, r3
 800e8ce:	4a1c      	ldr	r2, [pc, #112]	; (800e940 <pvPortMalloc+0x194>)
 800e8d0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e8d2:	4b1b      	ldr	r3, [pc, #108]	; (800e940 <pvPortMalloc+0x194>)
 800e8d4:	681a      	ldr	r2, [r3, #0]
 800e8d6:	4b1c      	ldr	r3, [pc, #112]	; (800e948 <pvPortMalloc+0x19c>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	429a      	cmp	r2, r3
 800e8dc:	d203      	bcs.n	800e8e6 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e8de:	4b18      	ldr	r3, [pc, #96]	; (800e940 <pvPortMalloc+0x194>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	4a19      	ldr	r2, [pc, #100]	; (800e948 <pvPortMalloc+0x19c>)
 800e8e4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8e8:	685a      	ldr	r2, [r3, #4]
 800e8ea:	4b14      	ldr	r3, [pc, #80]	; (800e93c <pvPortMalloc+0x190>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	431a      	orrs	r2, r3
 800e8f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e8f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e8f6:	2200      	movs	r2, #0
 800e8f8:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e8fa:	f7fe ff4b 	bl	800d794 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800e8fe:	69fb      	ldr	r3, [r7, #28]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d101      	bne.n	800e908 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800e904:	f7f2 fb30 	bl	8000f68 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e908:	69fb      	ldr	r3, [r7, #28]
 800e90a:	f003 0307 	and.w	r3, r3, #7
 800e90e:	2b00      	cmp	r3, #0
 800e910:	d00c      	beq.n	800e92c <pvPortMalloc+0x180>
	__asm volatile
 800e912:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e916:	b672      	cpsid	i
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	b662      	cpsie	i
 800e926:	60fb      	str	r3, [r7, #12]
}
 800e928:	bf00      	nop
 800e92a:	e7fe      	b.n	800e92a <pvPortMalloc+0x17e>
	return pvReturn;
 800e92c:	69fb      	ldr	r3, [r7, #28]
}
 800e92e:	4618      	mov	r0, r3
 800e930:	3728      	adds	r7, #40	; 0x28
 800e932:	46bd      	mov	sp, r7
 800e934:	bd80      	pop	{r7, pc}
 800e936:	bf00      	nop
 800e938:	2000864c 	.word	0x2000864c
 800e93c:	20008658 	.word	0x20008658
 800e940:	20008650 	.word	0x20008650
 800e944:	20008644 	.word	0x20008644
 800e948:	20008654 	.word	0x20008654

0800e94c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e94c:	b580      	push	{r7, lr}
 800e94e:	b086      	sub	sp, #24
 800e950:	af00      	add	r7, sp, #0
 800e952:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e958:	687b      	ldr	r3, [r7, #4]
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	d04c      	beq.n	800e9f8 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e95e:	2308      	movs	r3, #8
 800e960:	425b      	negs	r3, r3
 800e962:	697a      	ldr	r2, [r7, #20]
 800e964:	4413      	add	r3, r2
 800e966:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e968:	697b      	ldr	r3, [r7, #20]
 800e96a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e96c:	693b      	ldr	r3, [r7, #16]
 800e96e:	685a      	ldr	r2, [r3, #4]
 800e970:	4b23      	ldr	r3, [pc, #140]	; (800ea00 <vPortFree+0xb4>)
 800e972:	681b      	ldr	r3, [r3, #0]
 800e974:	4013      	ands	r3, r2
 800e976:	2b00      	cmp	r3, #0
 800e978:	d10c      	bne.n	800e994 <vPortFree+0x48>
	__asm volatile
 800e97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e97e:	b672      	cpsid	i
 800e980:	f383 8811 	msr	BASEPRI, r3
 800e984:	f3bf 8f6f 	isb	sy
 800e988:	f3bf 8f4f 	dsb	sy
 800e98c:	b662      	cpsie	i
 800e98e:	60fb      	str	r3, [r7, #12]
}
 800e990:	bf00      	nop
 800e992:	e7fe      	b.n	800e992 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e994:	693b      	ldr	r3, [r7, #16]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d00c      	beq.n	800e9b6 <vPortFree+0x6a>
	__asm volatile
 800e99c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9a0:	b672      	cpsid	i
 800e9a2:	f383 8811 	msr	BASEPRI, r3
 800e9a6:	f3bf 8f6f 	isb	sy
 800e9aa:	f3bf 8f4f 	dsb	sy
 800e9ae:	b662      	cpsie	i
 800e9b0:	60bb      	str	r3, [r7, #8]
}
 800e9b2:	bf00      	nop
 800e9b4:	e7fe      	b.n	800e9b4 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e9b6:	693b      	ldr	r3, [r7, #16]
 800e9b8:	685a      	ldr	r2, [r3, #4]
 800e9ba:	4b11      	ldr	r3, [pc, #68]	; (800ea00 <vPortFree+0xb4>)
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	4013      	ands	r3, r2
 800e9c0:	2b00      	cmp	r3, #0
 800e9c2:	d019      	beq.n	800e9f8 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e9c4:	693b      	ldr	r3, [r7, #16]
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d115      	bne.n	800e9f8 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e9cc:	693b      	ldr	r3, [r7, #16]
 800e9ce:	685a      	ldr	r2, [r3, #4]
 800e9d0:	4b0b      	ldr	r3, [pc, #44]	; (800ea00 <vPortFree+0xb4>)
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	43db      	mvns	r3, r3
 800e9d6:	401a      	ands	r2, r3
 800e9d8:	693b      	ldr	r3, [r7, #16]
 800e9da:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e9dc:	f7fe fecc 	bl	800d778 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e9e0:	693b      	ldr	r3, [r7, #16]
 800e9e2:	685a      	ldr	r2, [r3, #4]
 800e9e4:	4b07      	ldr	r3, [pc, #28]	; (800ea04 <vPortFree+0xb8>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	4413      	add	r3, r2
 800e9ea:	4a06      	ldr	r2, [pc, #24]	; (800ea04 <vPortFree+0xb8>)
 800e9ec:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e9ee:	6938      	ldr	r0, [r7, #16]
 800e9f0:	f000 f86c 	bl	800eacc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e9f4:	f7fe fece 	bl	800d794 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e9f8:	bf00      	nop
 800e9fa:	3718      	adds	r7, #24
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}
 800ea00:	20008658 	.word	0x20008658
 800ea04:	20008650 	.word	0x20008650

0800ea08 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ea08:	b480      	push	{r7}
 800ea0a:	b085      	sub	sp, #20
 800ea0c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ea0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800ea12:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ea14:	4b27      	ldr	r3, [pc, #156]	; (800eab4 <prvHeapInit+0xac>)
 800ea16:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ea18:	68fb      	ldr	r3, [r7, #12]
 800ea1a:	f003 0307 	and.w	r3, r3, #7
 800ea1e:	2b00      	cmp	r3, #0
 800ea20:	d00c      	beq.n	800ea3c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ea22:	68fb      	ldr	r3, [r7, #12]
 800ea24:	3307      	adds	r3, #7
 800ea26:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f023 0307 	bic.w	r3, r3, #7
 800ea2e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ea30:	68ba      	ldr	r2, [r7, #8]
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	1ad3      	subs	r3, r2, r3
 800ea36:	4a1f      	ldr	r2, [pc, #124]	; (800eab4 <prvHeapInit+0xac>)
 800ea38:	4413      	add	r3, r2
 800ea3a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ea3c:	68fb      	ldr	r3, [r7, #12]
 800ea3e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ea40:	4a1d      	ldr	r2, [pc, #116]	; (800eab8 <prvHeapInit+0xb0>)
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ea46:	4b1c      	ldr	r3, [pc, #112]	; (800eab8 <prvHeapInit+0xb0>)
 800ea48:	2200      	movs	r2, #0
 800ea4a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	68ba      	ldr	r2, [r7, #8]
 800ea50:	4413      	add	r3, r2
 800ea52:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ea54:	2208      	movs	r2, #8
 800ea56:	68fb      	ldr	r3, [r7, #12]
 800ea58:	1a9b      	subs	r3, r3, r2
 800ea5a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ea5c:	68fb      	ldr	r3, [r7, #12]
 800ea5e:	f023 0307 	bic.w	r3, r3, #7
 800ea62:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	4a15      	ldr	r2, [pc, #84]	; (800eabc <prvHeapInit+0xb4>)
 800ea68:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ea6a:	4b14      	ldr	r3, [pc, #80]	; (800eabc <prvHeapInit+0xb4>)
 800ea6c:	681b      	ldr	r3, [r3, #0]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ea72:	4b12      	ldr	r3, [pc, #72]	; (800eabc <prvHeapInit+0xb4>)
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	2200      	movs	r2, #0
 800ea78:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ea7a:	687b      	ldr	r3, [r7, #4]
 800ea7c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ea7e:	683b      	ldr	r3, [r7, #0]
 800ea80:	68fa      	ldr	r2, [r7, #12]
 800ea82:	1ad2      	subs	r2, r2, r3
 800ea84:	683b      	ldr	r3, [r7, #0]
 800ea86:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ea88:	4b0c      	ldr	r3, [pc, #48]	; (800eabc <prvHeapInit+0xb4>)
 800ea8a:	681a      	ldr	r2, [r3, #0]
 800ea8c:	683b      	ldr	r3, [r7, #0]
 800ea8e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea90:	683b      	ldr	r3, [r7, #0]
 800ea92:	685b      	ldr	r3, [r3, #4]
 800ea94:	4a0a      	ldr	r2, [pc, #40]	; (800eac0 <prvHeapInit+0xb8>)
 800ea96:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ea98:	683b      	ldr	r3, [r7, #0]
 800ea9a:	685b      	ldr	r3, [r3, #4]
 800ea9c:	4a09      	ldr	r2, [pc, #36]	; (800eac4 <prvHeapInit+0xbc>)
 800ea9e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800eaa0:	4b09      	ldr	r3, [pc, #36]	; (800eac8 <prvHeapInit+0xc0>)
 800eaa2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800eaa6:	601a      	str	r2, [r3, #0]
}
 800eaa8:	bf00      	nop
 800eaaa:	3714      	adds	r7, #20
 800eaac:	46bd      	mov	sp, r7
 800eaae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab2:	4770      	bx	lr
 800eab4:	20000644 	.word	0x20000644
 800eab8:	20008644 	.word	0x20008644
 800eabc:	2000864c 	.word	0x2000864c
 800eac0:	20008654 	.word	0x20008654
 800eac4:	20008650 	.word	0x20008650
 800eac8:	20008658 	.word	0x20008658

0800eacc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800eacc:	b480      	push	{r7}
 800eace:	b085      	sub	sp, #20
 800ead0:	af00      	add	r7, sp, #0
 800ead2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ead4:	4b28      	ldr	r3, [pc, #160]	; (800eb78 <prvInsertBlockIntoFreeList+0xac>)
 800ead6:	60fb      	str	r3, [r7, #12]
 800ead8:	e002      	b.n	800eae0 <prvInsertBlockIntoFreeList+0x14>
 800eada:	68fb      	ldr	r3, [r7, #12]
 800eadc:	681b      	ldr	r3, [r3, #0]
 800eade:	60fb      	str	r3, [r7, #12]
 800eae0:	68fb      	ldr	r3, [r7, #12]
 800eae2:	681b      	ldr	r3, [r3, #0]
 800eae4:	687a      	ldr	r2, [r7, #4]
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d8f7      	bhi.n	800eada <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800eaea:	68fb      	ldr	r3, [r7, #12]
 800eaec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800eaee:	68fb      	ldr	r3, [r7, #12]
 800eaf0:	685b      	ldr	r3, [r3, #4]
 800eaf2:	68ba      	ldr	r2, [r7, #8]
 800eaf4:	4413      	add	r3, r2
 800eaf6:	687a      	ldr	r2, [r7, #4]
 800eaf8:	429a      	cmp	r2, r3
 800eafa:	d108      	bne.n	800eb0e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	685a      	ldr	r2, [r3, #4]
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	685b      	ldr	r3, [r3, #4]
 800eb04:	441a      	add	r2, r3
 800eb06:	68fb      	ldr	r3, [r7, #12]
 800eb08:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800eb0a:	68fb      	ldr	r3, [r7, #12]
 800eb0c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	685b      	ldr	r3, [r3, #4]
 800eb16:	68ba      	ldr	r2, [r7, #8]
 800eb18:	441a      	add	r2, r3
 800eb1a:	68fb      	ldr	r3, [r7, #12]
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	429a      	cmp	r2, r3
 800eb20:	d118      	bne.n	800eb54 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800eb22:	68fb      	ldr	r3, [r7, #12]
 800eb24:	681a      	ldr	r2, [r3, #0]
 800eb26:	4b15      	ldr	r3, [pc, #84]	; (800eb7c <prvInsertBlockIntoFreeList+0xb0>)
 800eb28:	681b      	ldr	r3, [r3, #0]
 800eb2a:	429a      	cmp	r2, r3
 800eb2c:	d00d      	beq.n	800eb4a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800eb2e:	687b      	ldr	r3, [r7, #4]
 800eb30:	685a      	ldr	r2, [r3, #4]
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	685b      	ldr	r3, [r3, #4]
 800eb38:	441a      	add	r2, r3
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800eb3e:	68fb      	ldr	r3, [r7, #12]
 800eb40:	681b      	ldr	r3, [r3, #0]
 800eb42:	681a      	ldr	r2, [r3, #0]
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	601a      	str	r2, [r3, #0]
 800eb48:	e008      	b.n	800eb5c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800eb4a:	4b0c      	ldr	r3, [pc, #48]	; (800eb7c <prvInsertBlockIntoFreeList+0xb0>)
 800eb4c:	681a      	ldr	r2, [r3, #0]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	601a      	str	r2, [r3, #0]
 800eb52:	e003      	b.n	800eb5c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800eb54:	68fb      	ldr	r3, [r7, #12]
 800eb56:	681a      	ldr	r2, [r3, #0]
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800eb5c:	68fa      	ldr	r2, [r7, #12]
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	429a      	cmp	r2, r3
 800eb62:	d002      	beq.n	800eb6a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	687a      	ldr	r2, [r7, #4]
 800eb68:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800eb6a:	bf00      	nop
 800eb6c:	3714      	adds	r7, #20
 800eb6e:	46bd      	mov	sp, r7
 800eb70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb74:	4770      	bx	lr
 800eb76:	bf00      	nop
 800eb78:	20008644 	.word	0x20008644
 800eb7c:	2000864c 	.word	0x2000864c

0800eb80 <__errno>:
 800eb80:	4b01      	ldr	r3, [pc, #4]	; (800eb88 <__errno+0x8>)
 800eb82:	6818      	ldr	r0, [r3, #0]
 800eb84:	4770      	bx	lr
 800eb86:	bf00      	nop
 800eb88:	20000064 	.word	0x20000064

0800eb8c <__libc_init_array>:
 800eb8c:	b570      	push	{r4, r5, r6, lr}
 800eb8e:	4d0d      	ldr	r5, [pc, #52]	; (800ebc4 <__libc_init_array+0x38>)
 800eb90:	4c0d      	ldr	r4, [pc, #52]	; (800ebc8 <__libc_init_array+0x3c>)
 800eb92:	1b64      	subs	r4, r4, r5
 800eb94:	10a4      	asrs	r4, r4, #2
 800eb96:	2600      	movs	r6, #0
 800eb98:	42a6      	cmp	r6, r4
 800eb9a:	d109      	bne.n	800ebb0 <__libc_init_array+0x24>
 800eb9c:	4d0b      	ldr	r5, [pc, #44]	; (800ebcc <__libc_init_array+0x40>)
 800eb9e:	4c0c      	ldr	r4, [pc, #48]	; (800ebd0 <__libc_init_array+0x44>)
 800eba0:	f001 fcd4 	bl	801054c <_init>
 800eba4:	1b64      	subs	r4, r4, r5
 800eba6:	10a4      	asrs	r4, r4, #2
 800eba8:	2600      	movs	r6, #0
 800ebaa:	42a6      	cmp	r6, r4
 800ebac:	d105      	bne.n	800ebba <__libc_init_array+0x2e>
 800ebae:	bd70      	pop	{r4, r5, r6, pc}
 800ebb0:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebb4:	4798      	blx	r3
 800ebb6:	3601      	adds	r6, #1
 800ebb8:	e7ee      	b.n	800eb98 <__libc_init_array+0xc>
 800ebba:	f855 3b04 	ldr.w	r3, [r5], #4
 800ebbe:	4798      	blx	r3
 800ebc0:	3601      	adds	r6, #1
 800ebc2:	e7f2      	b.n	800ebaa <__libc_init_array+0x1e>
 800ebc4:	08012820 	.word	0x08012820
 800ebc8:	08012820 	.word	0x08012820
 800ebcc:	08012820 	.word	0x08012820
 800ebd0:	08012824 	.word	0x08012824

0800ebd4 <memcpy>:
 800ebd4:	440a      	add	r2, r1
 800ebd6:	4291      	cmp	r1, r2
 800ebd8:	f100 33ff 	add.w	r3, r0, #4294967295
 800ebdc:	d100      	bne.n	800ebe0 <memcpy+0xc>
 800ebde:	4770      	bx	lr
 800ebe0:	b510      	push	{r4, lr}
 800ebe2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ebe6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ebea:	4291      	cmp	r1, r2
 800ebec:	d1f9      	bne.n	800ebe2 <memcpy+0xe>
 800ebee:	bd10      	pop	{r4, pc}

0800ebf0 <memset>:
 800ebf0:	4402      	add	r2, r0
 800ebf2:	4603      	mov	r3, r0
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d100      	bne.n	800ebfa <memset+0xa>
 800ebf8:	4770      	bx	lr
 800ebfa:	f803 1b01 	strb.w	r1, [r3], #1
 800ebfe:	e7f9      	b.n	800ebf4 <memset+0x4>

0800ec00 <siprintf>:
 800ec00:	b40e      	push	{r1, r2, r3}
 800ec02:	b500      	push	{lr}
 800ec04:	b09c      	sub	sp, #112	; 0x70
 800ec06:	ab1d      	add	r3, sp, #116	; 0x74
 800ec08:	9002      	str	r0, [sp, #8]
 800ec0a:	9006      	str	r0, [sp, #24]
 800ec0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ec10:	4809      	ldr	r0, [pc, #36]	; (800ec38 <siprintf+0x38>)
 800ec12:	9107      	str	r1, [sp, #28]
 800ec14:	9104      	str	r1, [sp, #16]
 800ec16:	4909      	ldr	r1, [pc, #36]	; (800ec3c <siprintf+0x3c>)
 800ec18:	f853 2b04 	ldr.w	r2, [r3], #4
 800ec1c:	9105      	str	r1, [sp, #20]
 800ec1e:	6800      	ldr	r0, [r0, #0]
 800ec20:	9301      	str	r3, [sp, #4]
 800ec22:	a902      	add	r1, sp, #8
 800ec24:	f000 f868 	bl	800ecf8 <_svfiprintf_r>
 800ec28:	9b02      	ldr	r3, [sp, #8]
 800ec2a:	2200      	movs	r2, #0
 800ec2c:	701a      	strb	r2, [r3, #0]
 800ec2e:	b01c      	add	sp, #112	; 0x70
 800ec30:	f85d eb04 	ldr.w	lr, [sp], #4
 800ec34:	b003      	add	sp, #12
 800ec36:	4770      	bx	lr
 800ec38:	20000064 	.word	0x20000064
 800ec3c:	ffff0208 	.word	0xffff0208

0800ec40 <__ssputs_r>:
 800ec40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ec44:	688e      	ldr	r6, [r1, #8]
 800ec46:	429e      	cmp	r6, r3
 800ec48:	4682      	mov	sl, r0
 800ec4a:	460c      	mov	r4, r1
 800ec4c:	4690      	mov	r8, r2
 800ec4e:	461f      	mov	r7, r3
 800ec50:	d838      	bhi.n	800ecc4 <__ssputs_r+0x84>
 800ec52:	898a      	ldrh	r2, [r1, #12]
 800ec54:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ec58:	d032      	beq.n	800ecc0 <__ssputs_r+0x80>
 800ec5a:	6825      	ldr	r5, [r4, #0]
 800ec5c:	6909      	ldr	r1, [r1, #16]
 800ec5e:	eba5 0901 	sub.w	r9, r5, r1
 800ec62:	6965      	ldr	r5, [r4, #20]
 800ec64:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ec68:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ec6c:	3301      	adds	r3, #1
 800ec6e:	444b      	add	r3, r9
 800ec70:	106d      	asrs	r5, r5, #1
 800ec72:	429d      	cmp	r5, r3
 800ec74:	bf38      	it	cc
 800ec76:	461d      	movcc	r5, r3
 800ec78:	0553      	lsls	r3, r2, #21
 800ec7a:	d531      	bpl.n	800ece0 <__ssputs_r+0xa0>
 800ec7c:	4629      	mov	r1, r5
 800ec7e:	f000 fb39 	bl	800f2f4 <_malloc_r>
 800ec82:	4606      	mov	r6, r0
 800ec84:	b950      	cbnz	r0, 800ec9c <__ssputs_r+0x5c>
 800ec86:	230c      	movs	r3, #12
 800ec88:	f8ca 3000 	str.w	r3, [sl]
 800ec8c:	89a3      	ldrh	r3, [r4, #12]
 800ec8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ec92:	81a3      	strh	r3, [r4, #12]
 800ec94:	f04f 30ff 	mov.w	r0, #4294967295
 800ec98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ec9c:	6921      	ldr	r1, [r4, #16]
 800ec9e:	464a      	mov	r2, r9
 800eca0:	f7ff ff98 	bl	800ebd4 <memcpy>
 800eca4:	89a3      	ldrh	r3, [r4, #12]
 800eca6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ecaa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ecae:	81a3      	strh	r3, [r4, #12]
 800ecb0:	6126      	str	r6, [r4, #16]
 800ecb2:	6165      	str	r5, [r4, #20]
 800ecb4:	444e      	add	r6, r9
 800ecb6:	eba5 0509 	sub.w	r5, r5, r9
 800ecba:	6026      	str	r6, [r4, #0]
 800ecbc:	60a5      	str	r5, [r4, #8]
 800ecbe:	463e      	mov	r6, r7
 800ecc0:	42be      	cmp	r6, r7
 800ecc2:	d900      	bls.n	800ecc6 <__ssputs_r+0x86>
 800ecc4:	463e      	mov	r6, r7
 800ecc6:	4632      	mov	r2, r6
 800ecc8:	6820      	ldr	r0, [r4, #0]
 800ecca:	4641      	mov	r1, r8
 800eccc:	f000 faa8 	bl	800f220 <memmove>
 800ecd0:	68a3      	ldr	r3, [r4, #8]
 800ecd2:	6822      	ldr	r2, [r4, #0]
 800ecd4:	1b9b      	subs	r3, r3, r6
 800ecd6:	4432      	add	r2, r6
 800ecd8:	60a3      	str	r3, [r4, #8]
 800ecda:	6022      	str	r2, [r4, #0]
 800ecdc:	2000      	movs	r0, #0
 800ecde:	e7db      	b.n	800ec98 <__ssputs_r+0x58>
 800ece0:	462a      	mov	r2, r5
 800ece2:	f000 fb61 	bl	800f3a8 <_realloc_r>
 800ece6:	4606      	mov	r6, r0
 800ece8:	2800      	cmp	r0, #0
 800ecea:	d1e1      	bne.n	800ecb0 <__ssputs_r+0x70>
 800ecec:	6921      	ldr	r1, [r4, #16]
 800ecee:	4650      	mov	r0, sl
 800ecf0:	f000 fab0 	bl	800f254 <_free_r>
 800ecf4:	e7c7      	b.n	800ec86 <__ssputs_r+0x46>
	...

0800ecf8 <_svfiprintf_r>:
 800ecf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecfc:	4698      	mov	r8, r3
 800ecfe:	898b      	ldrh	r3, [r1, #12]
 800ed00:	061b      	lsls	r3, r3, #24
 800ed02:	b09d      	sub	sp, #116	; 0x74
 800ed04:	4607      	mov	r7, r0
 800ed06:	460d      	mov	r5, r1
 800ed08:	4614      	mov	r4, r2
 800ed0a:	d50e      	bpl.n	800ed2a <_svfiprintf_r+0x32>
 800ed0c:	690b      	ldr	r3, [r1, #16]
 800ed0e:	b963      	cbnz	r3, 800ed2a <_svfiprintf_r+0x32>
 800ed10:	2140      	movs	r1, #64	; 0x40
 800ed12:	f000 faef 	bl	800f2f4 <_malloc_r>
 800ed16:	6028      	str	r0, [r5, #0]
 800ed18:	6128      	str	r0, [r5, #16]
 800ed1a:	b920      	cbnz	r0, 800ed26 <_svfiprintf_r+0x2e>
 800ed1c:	230c      	movs	r3, #12
 800ed1e:	603b      	str	r3, [r7, #0]
 800ed20:	f04f 30ff 	mov.w	r0, #4294967295
 800ed24:	e0d1      	b.n	800eeca <_svfiprintf_r+0x1d2>
 800ed26:	2340      	movs	r3, #64	; 0x40
 800ed28:	616b      	str	r3, [r5, #20]
 800ed2a:	2300      	movs	r3, #0
 800ed2c:	9309      	str	r3, [sp, #36]	; 0x24
 800ed2e:	2320      	movs	r3, #32
 800ed30:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ed34:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed38:	2330      	movs	r3, #48	; 0x30
 800ed3a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eee4 <_svfiprintf_r+0x1ec>
 800ed3e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ed42:	f04f 0901 	mov.w	r9, #1
 800ed46:	4623      	mov	r3, r4
 800ed48:	469a      	mov	sl, r3
 800ed4a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed4e:	b10a      	cbz	r2, 800ed54 <_svfiprintf_r+0x5c>
 800ed50:	2a25      	cmp	r2, #37	; 0x25
 800ed52:	d1f9      	bne.n	800ed48 <_svfiprintf_r+0x50>
 800ed54:	ebba 0b04 	subs.w	fp, sl, r4
 800ed58:	d00b      	beq.n	800ed72 <_svfiprintf_r+0x7a>
 800ed5a:	465b      	mov	r3, fp
 800ed5c:	4622      	mov	r2, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	4638      	mov	r0, r7
 800ed62:	f7ff ff6d 	bl	800ec40 <__ssputs_r>
 800ed66:	3001      	adds	r0, #1
 800ed68:	f000 80aa 	beq.w	800eec0 <_svfiprintf_r+0x1c8>
 800ed6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed6e:	445a      	add	r2, fp
 800ed70:	9209      	str	r2, [sp, #36]	; 0x24
 800ed72:	f89a 3000 	ldrb.w	r3, [sl]
 800ed76:	2b00      	cmp	r3, #0
 800ed78:	f000 80a2 	beq.w	800eec0 <_svfiprintf_r+0x1c8>
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ed82:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed86:	f10a 0a01 	add.w	sl, sl, #1
 800ed8a:	9304      	str	r3, [sp, #16]
 800ed8c:	9307      	str	r3, [sp, #28]
 800ed8e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ed92:	931a      	str	r3, [sp, #104]	; 0x68
 800ed94:	4654      	mov	r4, sl
 800ed96:	2205      	movs	r2, #5
 800ed98:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed9c:	4851      	ldr	r0, [pc, #324]	; (800eee4 <_svfiprintf_r+0x1ec>)
 800ed9e:	f7f1 fa37 	bl	8000210 <memchr>
 800eda2:	9a04      	ldr	r2, [sp, #16]
 800eda4:	b9d8      	cbnz	r0, 800edde <_svfiprintf_r+0xe6>
 800eda6:	06d0      	lsls	r0, r2, #27
 800eda8:	bf44      	itt	mi
 800edaa:	2320      	movmi	r3, #32
 800edac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edb0:	0711      	lsls	r1, r2, #28
 800edb2:	bf44      	itt	mi
 800edb4:	232b      	movmi	r3, #43	; 0x2b
 800edb6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800edba:	f89a 3000 	ldrb.w	r3, [sl]
 800edbe:	2b2a      	cmp	r3, #42	; 0x2a
 800edc0:	d015      	beq.n	800edee <_svfiprintf_r+0xf6>
 800edc2:	9a07      	ldr	r2, [sp, #28]
 800edc4:	4654      	mov	r4, sl
 800edc6:	2000      	movs	r0, #0
 800edc8:	f04f 0c0a 	mov.w	ip, #10
 800edcc:	4621      	mov	r1, r4
 800edce:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edd2:	3b30      	subs	r3, #48	; 0x30
 800edd4:	2b09      	cmp	r3, #9
 800edd6:	d94e      	bls.n	800ee76 <_svfiprintf_r+0x17e>
 800edd8:	b1b0      	cbz	r0, 800ee08 <_svfiprintf_r+0x110>
 800edda:	9207      	str	r2, [sp, #28]
 800eddc:	e014      	b.n	800ee08 <_svfiprintf_r+0x110>
 800edde:	eba0 0308 	sub.w	r3, r0, r8
 800ede2:	fa09 f303 	lsl.w	r3, r9, r3
 800ede6:	4313      	orrs	r3, r2
 800ede8:	9304      	str	r3, [sp, #16]
 800edea:	46a2      	mov	sl, r4
 800edec:	e7d2      	b.n	800ed94 <_svfiprintf_r+0x9c>
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	1d19      	adds	r1, r3, #4
 800edf2:	681b      	ldr	r3, [r3, #0]
 800edf4:	9103      	str	r1, [sp, #12]
 800edf6:	2b00      	cmp	r3, #0
 800edf8:	bfbb      	ittet	lt
 800edfa:	425b      	neglt	r3, r3
 800edfc:	f042 0202 	orrlt.w	r2, r2, #2
 800ee00:	9307      	strge	r3, [sp, #28]
 800ee02:	9307      	strlt	r3, [sp, #28]
 800ee04:	bfb8      	it	lt
 800ee06:	9204      	strlt	r2, [sp, #16]
 800ee08:	7823      	ldrb	r3, [r4, #0]
 800ee0a:	2b2e      	cmp	r3, #46	; 0x2e
 800ee0c:	d10c      	bne.n	800ee28 <_svfiprintf_r+0x130>
 800ee0e:	7863      	ldrb	r3, [r4, #1]
 800ee10:	2b2a      	cmp	r3, #42	; 0x2a
 800ee12:	d135      	bne.n	800ee80 <_svfiprintf_r+0x188>
 800ee14:	9b03      	ldr	r3, [sp, #12]
 800ee16:	1d1a      	adds	r2, r3, #4
 800ee18:	681b      	ldr	r3, [r3, #0]
 800ee1a:	9203      	str	r2, [sp, #12]
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	bfb8      	it	lt
 800ee20:	f04f 33ff 	movlt.w	r3, #4294967295
 800ee24:	3402      	adds	r4, #2
 800ee26:	9305      	str	r3, [sp, #20]
 800ee28:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eef4 <_svfiprintf_r+0x1fc>
 800ee2c:	7821      	ldrb	r1, [r4, #0]
 800ee2e:	2203      	movs	r2, #3
 800ee30:	4650      	mov	r0, sl
 800ee32:	f7f1 f9ed 	bl	8000210 <memchr>
 800ee36:	b140      	cbz	r0, 800ee4a <_svfiprintf_r+0x152>
 800ee38:	2340      	movs	r3, #64	; 0x40
 800ee3a:	eba0 000a 	sub.w	r0, r0, sl
 800ee3e:	fa03 f000 	lsl.w	r0, r3, r0
 800ee42:	9b04      	ldr	r3, [sp, #16]
 800ee44:	4303      	orrs	r3, r0
 800ee46:	3401      	adds	r4, #1
 800ee48:	9304      	str	r3, [sp, #16]
 800ee4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee4e:	4826      	ldr	r0, [pc, #152]	; (800eee8 <_svfiprintf_r+0x1f0>)
 800ee50:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ee54:	2206      	movs	r2, #6
 800ee56:	f7f1 f9db 	bl	8000210 <memchr>
 800ee5a:	2800      	cmp	r0, #0
 800ee5c:	d038      	beq.n	800eed0 <_svfiprintf_r+0x1d8>
 800ee5e:	4b23      	ldr	r3, [pc, #140]	; (800eeec <_svfiprintf_r+0x1f4>)
 800ee60:	bb1b      	cbnz	r3, 800eeaa <_svfiprintf_r+0x1b2>
 800ee62:	9b03      	ldr	r3, [sp, #12]
 800ee64:	3307      	adds	r3, #7
 800ee66:	f023 0307 	bic.w	r3, r3, #7
 800ee6a:	3308      	adds	r3, #8
 800ee6c:	9303      	str	r3, [sp, #12]
 800ee6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ee70:	4433      	add	r3, r6
 800ee72:	9309      	str	r3, [sp, #36]	; 0x24
 800ee74:	e767      	b.n	800ed46 <_svfiprintf_r+0x4e>
 800ee76:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	2001      	movs	r0, #1
 800ee7e:	e7a5      	b.n	800edcc <_svfiprintf_r+0xd4>
 800ee80:	2300      	movs	r3, #0
 800ee82:	3401      	adds	r4, #1
 800ee84:	9305      	str	r3, [sp, #20]
 800ee86:	4619      	mov	r1, r3
 800ee88:	f04f 0c0a 	mov.w	ip, #10
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee92:	3a30      	subs	r2, #48	; 0x30
 800ee94:	2a09      	cmp	r2, #9
 800ee96:	d903      	bls.n	800eea0 <_svfiprintf_r+0x1a8>
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d0c5      	beq.n	800ee28 <_svfiprintf_r+0x130>
 800ee9c:	9105      	str	r1, [sp, #20]
 800ee9e:	e7c3      	b.n	800ee28 <_svfiprintf_r+0x130>
 800eea0:	fb0c 2101 	mla	r1, ip, r1, r2
 800eea4:	4604      	mov	r4, r0
 800eea6:	2301      	movs	r3, #1
 800eea8:	e7f0      	b.n	800ee8c <_svfiprintf_r+0x194>
 800eeaa:	ab03      	add	r3, sp, #12
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	462a      	mov	r2, r5
 800eeb0:	4b0f      	ldr	r3, [pc, #60]	; (800eef0 <_svfiprintf_r+0x1f8>)
 800eeb2:	a904      	add	r1, sp, #16
 800eeb4:	4638      	mov	r0, r7
 800eeb6:	f3af 8000 	nop.w
 800eeba:	1c42      	adds	r2, r0, #1
 800eebc:	4606      	mov	r6, r0
 800eebe:	d1d6      	bne.n	800ee6e <_svfiprintf_r+0x176>
 800eec0:	89ab      	ldrh	r3, [r5, #12]
 800eec2:	065b      	lsls	r3, r3, #25
 800eec4:	f53f af2c 	bmi.w	800ed20 <_svfiprintf_r+0x28>
 800eec8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eeca:	b01d      	add	sp, #116	; 0x74
 800eecc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eed0:	ab03      	add	r3, sp, #12
 800eed2:	9300      	str	r3, [sp, #0]
 800eed4:	462a      	mov	r2, r5
 800eed6:	4b06      	ldr	r3, [pc, #24]	; (800eef0 <_svfiprintf_r+0x1f8>)
 800eed8:	a904      	add	r1, sp, #16
 800eeda:	4638      	mov	r0, r7
 800eedc:	f000 f87a 	bl	800efd4 <_printf_i>
 800eee0:	e7eb      	b.n	800eeba <_svfiprintf_r+0x1c2>
 800eee2:	bf00      	nop
 800eee4:	0801260c 	.word	0x0801260c
 800eee8:	08012616 	.word	0x08012616
 800eeec:	00000000 	.word	0x00000000
 800eef0:	0800ec41 	.word	0x0800ec41
 800eef4:	08012612 	.word	0x08012612

0800eef8 <_printf_common>:
 800eef8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800eefc:	4616      	mov	r6, r2
 800eefe:	4699      	mov	r9, r3
 800ef00:	688a      	ldr	r2, [r1, #8]
 800ef02:	690b      	ldr	r3, [r1, #16]
 800ef04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800ef08:	4293      	cmp	r3, r2
 800ef0a:	bfb8      	it	lt
 800ef0c:	4613      	movlt	r3, r2
 800ef0e:	6033      	str	r3, [r6, #0]
 800ef10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800ef14:	4607      	mov	r7, r0
 800ef16:	460c      	mov	r4, r1
 800ef18:	b10a      	cbz	r2, 800ef1e <_printf_common+0x26>
 800ef1a:	3301      	adds	r3, #1
 800ef1c:	6033      	str	r3, [r6, #0]
 800ef1e:	6823      	ldr	r3, [r4, #0]
 800ef20:	0699      	lsls	r1, r3, #26
 800ef22:	bf42      	ittt	mi
 800ef24:	6833      	ldrmi	r3, [r6, #0]
 800ef26:	3302      	addmi	r3, #2
 800ef28:	6033      	strmi	r3, [r6, #0]
 800ef2a:	6825      	ldr	r5, [r4, #0]
 800ef2c:	f015 0506 	ands.w	r5, r5, #6
 800ef30:	d106      	bne.n	800ef40 <_printf_common+0x48>
 800ef32:	f104 0a19 	add.w	sl, r4, #25
 800ef36:	68e3      	ldr	r3, [r4, #12]
 800ef38:	6832      	ldr	r2, [r6, #0]
 800ef3a:	1a9b      	subs	r3, r3, r2
 800ef3c:	42ab      	cmp	r3, r5
 800ef3e:	dc26      	bgt.n	800ef8e <_printf_common+0x96>
 800ef40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800ef44:	1e13      	subs	r3, r2, #0
 800ef46:	6822      	ldr	r2, [r4, #0]
 800ef48:	bf18      	it	ne
 800ef4a:	2301      	movne	r3, #1
 800ef4c:	0692      	lsls	r2, r2, #26
 800ef4e:	d42b      	bmi.n	800efa8 <_printf_common+0xb0>
 800ef50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800ef54:	4649      	mov	r1, r9
 800ef56:	4638      	mov	r0, r7
 800ef58:	47c0      	blx	r8
 800ef5a:	3001      	adds	r0, #1
 800ef5c:	d01e      	beq.n	800ef9c <_printf_common+0xa4>
 800ef5e:	6823      	ldr	r3, [r4, #0]
 800ef60:	68e5      	ldr	r5, [r4, #12]
 800ef62:	6832      	ldr	r2, [r6, #0]
 800ef64:	f003 0306 	and.w	r3, r3, #6
 800ef68:	2b04      	cmp	r3, #4
 800ef6a:	bf08      	it	eq
 800ef6c:	1aad      	subeq	r5, r5, r2
 800ef6e:	68a3      	ldr	r3, [r4, #8]
 800ef70:	6922      	ldr	r2, [r4, #16]
 800ef72:	bf0c      	ite	eq
 800ef74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ef78:	2500      	movne	r5, #0
 800ef7a:	4293      	cmp	r3, r2
 800ef7c:	bfc4      	itt	gt
 800ef7e:	1a9b      	subgt	r3, r3, r2
 800ef80:	18ed      	addgt	r5, r5, r3
 800ef82:	2600      	movs	r6, #0
 800ef84:	341a      	adds	r4, #26
 800ef86:	42b5      	cmp	r5, r6
 800ef88:	d11a      	bne.n	800efc0 <_printf_common+0xc8>
 800ef8a:	2000      	movs	r0, #0
 800ef8c:	e008      	b.n	800efa0 <_printf_common+0xa8>
 800ef8e:	2301      	movs	r3, #1
 800ef90:	4652      	mov	r2, sl
 800ef92:	4649      	mov	r1, r9
 800ef94:	4638      	mov	r0, r7
 800ef96:	47c0      	blx	r8
 800ef98:	3001      	adds	r0, #1
 800ef9a:	d103      	bne.n	800efa4 <_printf_common+0xac>
 800ef9c:	f04f 30ff 	mov.w	r0, #4294967295
 800efa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efa4:	3501      	adds	r5, #1
 800efa6:	e7c6      	b.n	800ef36 <_printf_common+0x3e>
 800efa8:	18e1      	adds	r1, r4, r3
 800efaa:	1c5a      	adds	r2, r3, #1
 800efac:	2030      	movs	r0, #48	; 0x30
 800efae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800efb2:	4422      	add	r2, r4
 800efb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800efb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800efbc:	3302      	adds	r3, #2
 800efbe:	e7c7      	b.n	800ef50 <_printf_common+0x58>
 800efc0:	2301      	movs	r3, #1
 800efc2:	4622      	mov	r2, r4
 800efc4:	4649      	mov	r1, r9
 800efc6:	4638      	mov	r0, r7
 800efc8:	47c0      	blx	r8
 800efca:	3001      	adds	r0, #1
 800efcc:	d0e6      	beq.n	800ef9c <_printf_common+0xa4>
 800efce:	3601      	adds	r6, #1
 800efd0:	e7d9      	b.n	800ef86 <_printf_common+0x8e>
	...

0800efd4 <_printf_i>:
 800efd4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800efd8:	460c      	mov	r4, r1
 800efda:	4691      	mov	r9, r2
 800efdc:	7e27      	ldrb	r7, [r4, #24]
 800efde:	990c      	ldr	r1, [sp, #48]	; 0x30
 800efe0:	2f78      	cmp	r7, #120	; 0x78
 800efe2:	4680      	mov	r8, r0
 800efe4:	469a      	mov	sl, r3
 800efe6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800efea:	d807      	bhi.n	800effc <_printf_i+0x28>
 800efec:	2f62      	cmp	r7, #98	; 0x62
 800efee:	d80a      	bhi.n	800f006 <_printf_i+0x32>
 800eff0:	2f00      	cmp	r7, #0
 800eff2:	f000 80d8 	beq.w	800f1a6 <_printf_i+0x1d2>
 800eff6:	2f58      	cmp	r7, #88	; 0x58
 800eff8:	f000 80a3 	beq.w	800f142 <_printf_i+0x16e>
 800effc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f000:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f004:	e03a      	b.n	800f07c <_printf_i+0xa8>
 800f006:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f00a:	2b15      	cmp	r3, #21
 800f00c:	d8f6      	bhi.n	800effc <_printf_i+0x28>
 800f00e:	a001      	add	r0, pc, #4	; (adr r0, 800f014 <_printf_i+0x40>)
 800f010:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800f014:	0800f06d 	.word	0x0800f06d
 800f018:	0800f081 	.word	0x0800f081
 800f01c:	0800effd 	.word	0x0800effd
 800f020:	0800effd 	.word	0x0800effd
 800f024:	0800effd 	.word	0x0800effd
 800f028:	0800effd 	.word	0x0800effd
 800f02c:	0800f081 	.word	0x0800f081
 800f030:	0800effd 	.word	0x0800effd
 800f034:	0800effd 	.word	0x0800effd
 800f038:	0800effd 	.word	0x0800effd
 800f03c:	0800effd 	.word	0x0800effd
 800f040:	0800f18d 	.word	0x0800f18d
 800f044:	0800f0b1 	.word	0x0800f0b1
 800f048:	0800f16f 	.word	0x0800f16f
 800f04c:	0800effd 	.word	0x0800effd
 800f050:	0800effd 	.word	0x0800effd
 800f054:	0800f1af 	.word	0x0800f1af
 800f058:	0800effd 	.word	0x0800effd
 800f05c:	0800f0b1 	.word	0x0800f0b1
 800f060:	0800effd 	.word	0x0800effd
 800f064:	0800effd 	.word	0x0800effd
 800f068:	0800f177 	.word	0x0800f177
 800f06c:	680b      	ldr	r3, [r1, #0]
 800f06e:	1d1a      	adds	r2, r3, #4
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	600a      	str	r2, [r1, #0]
 800f074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800f078:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f07c:	2301      	movs	r3, #1
 800f07e:	e0a3      	b.n	800f1c8 <_printf_i+0x1f4>
 800f080:	6825      	ldr	r5, [r4, #0]
 800f082:	6808      	ldr	r0, [r1, #0]
 800f084:	062e      	lsls	r6, r5, #24
 800f086:	f100 0304 	add.w	r3, r0, #4
 800f08a:	d50a      	bpl.n	800f0a2 <_printf_i+0xce>
 800f08c:	6805      	ldr	r5, [r0, #0]
 800f08e:	600b      	str	r3, [r1, #0]
 800f090:	2d00      	cmp	r5, #0
 800f092:	da03      	bge.n	800f09c <_printf_i+0xc8>
 800f094:	232d      	movs	r3, #45	; 0x2d
 800f096:	426d      	negs	r5, r5
 800f098:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f09c:	485e      	ldr	r0, [pc, #376]	; (800f218 <_printf_i+0x244>)
 800f09e:	230a      	movs	r3, #10
 800f0a0:	e019      	b.n	800f0d6 <_printf_i+0x102>
 800f0a2:	f015 0f40 	tst.w	r5, #64	; 0x40
 800f0a6:	6805      	ldr	r5, [r0, #0]
 800f0a8:	600b      	str	r3, [r1, #0]
 800f0aa:	bf18      	it	ne
 800f0ac:	b22d      	sxthne	r5, r5
 800f0ae:	e7ef      	b.n	800f090 <_printf_i+0xbc>
 800f0b0:	680b      	ldr	r3, [r1, #0]
 800f0b2:	6825      	ldr	r5, [r4, #0]
 800f0b4:	1d18      	adds	r0, r3, #4
 800f0b6:	6008      	str	r0, [r1, #0]
 800f0b8:	0628      	lsls	r0, r5, #24
 800f0ba:	d501      	bpl.n	800f0c0 <_printf_i+0xec>
 800f0bc:	681d      	ldr	r5, [r3, #0]
 800f0be:	e002      	b.n	800f0c6 <_printf_i+0xf2>
 800f0c0:	0669      	lsls	r1, r5, #25
 800f0c2:	d5fb      	bpl.n	800f0bc <_printf_i+0xe8>
 800f0c4:	881d      	ldrh	r5, [r3, #0]
 800f0c6:	4854      	ldr	r0, [pc, #336]	; (800f218 <_printf_i+0x244>)
 800f0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800f0ca:	bf0c      	ite	eq
 800f0cc:	2308      	moveq	r3, #8
 800f0ce:	230a      	movne	r3, #10
 800f0d0:	2100      	movs	r1, #0
 800f0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f0d6:	6866      	ldr	r6, [r4, #4]
 800f0d8:	60a6      	str	r6, [r4, #8]
 800f0da:	2e00      	cmp	r6, #0
 800f0dc:	bfa2      	ittt	ge
 800f0de:	6821      	ldrge	r1, [r4, #0]
 800f0e0:	f021 0104 	bicge.w	r1, r1, #4
 800f0e4:	6021      	strge	r1, [r4, #0]
 800f0e6:	b90d      	cbnz	r5, 800f0ec <_printf_i+0x118>
 800f0e8:	2e00      	cmp	r6, #0
 800f0ea:	d04d      	beq.n	800f188 <_printf_i+0x1b4>
 800f0ec:	4616      	mov	r6, r2
 800f0ee:	fbb5 f1f3 	udiv	r1, r5, r3
 800f0f2:	fb03 5711 	mls	r7, r3, r1, r5
 800f0f6:	5dc7      	ldrb	r7, [r0, r7]
 800f0f8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800f0fc:	462f      	mov	r7, r5
 800f0fe:	42bb      	cmp	r3, r7
 800f100:	460d      	mov	r5, r1
 800f102:	d9f4      	bls.n	800f0ee <_printf_i+0x11a>
 800f104:	2b08      	cmp	r3, #8
 800f106:	d10b      	bne.n	800f120 <_printf_i+0x14c>
 800f108:	6823      	ldr	r3, [r4, #0]
 800f10a:	07df      	lsls	r7, r3, #31
 800f10c:	d508      	bpl.n	800f120 <_printf_i+0x14c>
 800f10e:	6923      	ldr	r3, [r4, #16]
 800f110:	6861      	ldr	r1, [r4, #4]
 800f112:	4299      	cmp	r1, r3
 800f114:	bfde      	ittt	le
 800f116:	2330      	movle	r3, #48	; 0x30
 800f118:	f806 3c01 	strble.w	r3, [r6, #-1]
 800f11c:	f106 36ff 	addle.w	r6, r6, #4294967295
 800f120:	1b92      	subs	r2, r2, r6
 800f122:	6122      	str	r2, [r4, #16]
 800f124:	f8cd a000 	str.w	sl, [sp]
 800f128:	464b      	mov	r3, r9
 800f12a:	aa03      	add	r2, sp, #12
 800f12c:	4621      	mov	r1, r4
 800f12e:	4640      	mov	r0, r8
 800f130:	f7ff fee2 	bl	800eef8 <_printf_common>
 800f134:	3001      	adds	r0, #1
 800f136:	d14c      	bne.n	800f1d2 <_printf_i+0x1fe>
 800f138:	f04f 30ff 	mov.w	r0, #4294967295
 800f13c:	b004      	add	sp, #16
 800f13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f142:	4835      	ldr	r0, [pc, #212]	; (800f218 <_printf_i+0x244>)
 800f144:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800f148:	6823      	ldr	r3, [r4, #0]
 800f14a:	680e      	ldr	r6, [r1, #0]
 800f14c:	061f      	lsls	r7, r3, #24
 800f14e:	f856 5b04 	ldr.w	r5, [r6], #4
 800f152:	600e      	str	r6, [r1, #0]
 800f154:	d514      	bpl.n	800f180 <_printf_i+0x1ac>
 800f156:	07d9      	lsls	r1, r3, #31
 800f158:	bf44      	itt	mi
 800f15a:	f043 0320 	orrmi.w	r3, r3, #32
 800f15e:	6023      	strmi	r3, [r4, #0]
 800f160:	b91d      	cbnz	r5, 800f16a <_printf_i+0x196>
 800f162:	6823      	ldr	r3, [r4, #0]
 800f164:	f023 0320 	bic.w	r3, r3, #32
 800f168:	6023      	str	r3, [r4, #0]
 800f16a:	2310      	movs	r3, #16
 800f16c:	e7b0      	b.n	800f0d0 <_printf_i+0xfc>
 800f16e:	6823      	ldr	r3, [r4, #0]
 800f170:	f043 0320 	orr.w	r3, r3, #32
 800f174:	6023      	str	r3, [r4, #0]
 800f176:	2378      	movs	r3, #120	; 0x78
 800f178:	4828      	ldr	r0, [pc, #160]	; (800f21c <_printf_i+0x248>)
 800f17a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f17e:	e7e3      	b.n	800f148 <_printf_i+0x174>
 800f180:	065e      	lsls	r6, r3, #25
 800f182:	bf48      	it	mi
 800f184:	b2ad      	uxthmi	r5, r5
 800f186:	e7e6      	b.n	800f156 <_printf_i+0x182>
 800f188:	4616      	mov	r6, r2
 800f18a:	e7bb      	b.n	800f104 <_printf_i+0x130>
 800f18c:	680b      	ldr	r3, [r1, #0]
 800f18e:	6826      	ldr	r6, [r4, #0]
 800f190:	6960      	ldr	r0, [r4, #20]
 800f192:	1d1d      	adds	r5, r3, #4
 800f194:	600d      	str	r5, [r1, #0]
 800f196:	0635      	lsls	r5, r6, #24
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	d501      	bpl.n	800f1a0 <_printf_i+0x1cc>
 800f19c:	6018      	str	r0, [r3, #0]
 800f19e:	e002      	b.n	800f1a6 <_printf_i+0x1d2>
 800f1a0:	0671      	lsls	r1, r6, #25
 800f1a2:	d5fb      	bpl.n	800f19c <_printf_i+0x1c8>
 800f1a4:	8018      	strh	r0, [r3, #0]
 800f1a6:	2300      	movs	r3, #0
 800f1a8:	6123      	str	r3, [r4, #16]
 800f1aa:	4616      	mov	r6, r2
 800f1ac:	e7ba      	b.n	800f124 <_printf_i+0x150>
 800f1ae:	680b      	ldr	r3, [r1, #0]
 800f1b0:	1d1a      	adds	r2, r3, #4
 800f1b2:	600a      	str	r2, [r1, #0]
 800f1b4:	681e      	ldr	r6, [r3, #0]
 800f1b6:	6862      	ldr	r2, [r4, #4]
 800f1b8:	2100      	movs	r1, #0
 800f1ba:	4630      	mov	r0, r6
 800f1bc:	f7f1 f828 	bl	8000210 <memchr>
 800f1c0:	b108      	cbz	r0, 800f1c6 <_printf_i+0x1f2>
 800f1c2:	1b80      	subs	r0, r0, r6
 800f1c4:	6060      	str	r0, [r4, #4]
 800f1c6:	6863      	ldr	r3, [r4, #4]
 800f1c8:	6123      	str	r3, [r4, #16]
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f1d0:	e7a8      	b.n	800f124 <_printf_i+0x150>
 800f1d2:	6923      	ldr	r3, [r4, #16]
 800f1d4:	4632      	mov	r2, r6
 800f1d6:	4649      	mov	r1, r9
 800f1d8:	4640      	mov	r0, r8
 800f1da:	47d0      	blx	sl
 800f1dc:	3001      	adds	r0, #1
 800f1de:	d0ab      	beq.n	800f138 <_printf_i+0x164>
 800f1e0:	6823      	ldr	r3, [r4, #0]
 800f1e2:	079b      	lsls	r3, r3, #30
 800f1e4:	d413      	bmi.n	800f20e <_printf_i+0x23a>
 800f1e6:	68e0      	ldr	r0, [r4, #12]
 800f1e8:	9b03      	ldr	r3, [sp, #12]
 800f1ea:	4298      	cmp	r0, r3
 800f1ec:	bfb8      	it	lt
 800f1ee:	4618      	movlt	r0, r3
 800f1f0:	e7a4      	b.n	800f13c <_printf_i+0x168>
 800f1f2:	2301      	movs	r3, #1
 800f1f4:	4632      	mov	r2, r6
 800f1f6:	4649      	mov	r1, r9
 800f1f8:	4640      	mov	r0, r8
 800f1fa:	47d0      	blx	sl
 800f1fc:	3001      	adds	r0, #1
 800f1fe:	d09b      	beq.n	800f138 <_printf_i+0x164>
 800f200:	3501      	adds	r5, #1
 800f202:	68e3      	ldr	r3, [r4, #12]
 800f204:	9903      	ldr	r1, [sp, #12]
 800f206:	1a5b      	subs	r3, r3, r1
 800f208:	42ab      	cmp	r3, r5
 800f20a:	dcf2      	bgt.n	800f1f2 <_printf_i+0x21e>
 800f20c:	e7eb      	b.n	800f1e6 <_printf_i+0x212>
 800f20e:	2500      	movs	r5, #0
 800f210:	f104 0619 	add.w	r6, r4, #25
 800f214:	e7f5      	b.n	800f202 <_printf_i+0x22e>
 800f216:	bf00      	nop
 800f218:	0801261d 	.word	0x0801261d
 800f21c:	0801262e 	.word	0x0801262e

0800f220 <memmove>:
 800f220:	4288      	cmp	r0, r1
 800f222:	b510      	push	{r4, lr}
 800f224:	eb01 0402 	add.w	r4, r1, r2
 800f228:	d902      	bls.n	800f230 <memmove+0x10>
 800f22a:	4284      	cmp	r4, r0
 800f22c:	4623      	mov	r3, r4
 800f22e:	d807      	bhi.n	800f240 <memmove+0x20>
 800f230:	1e43      	subs	r3, r0, #1
 800f232:	42a1      	cmp	r1, r4
 800f234:	d008      	beq.n	800f248 <memmove+0x28>
 800f236:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f23a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f23e:	e7f8      	b.n	800f232 <memmove+0x12>
 800f240:	4402      	add	r2, r0
 800f242:	4601      	mov	r1, r0
 800f244:	428a      	cmp	r2, r1
 800f246:	d100      	bne.n	800f24a <memmove+0x2a>
 800f248:	bd10      	pop	{r4, pc}
 800f24a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f24e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f252:	e7f7      	b.n	800f244 <memmove+0x24>

0800f254 <_free_r>:
 800f254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f256:	2900      	cmp	r1, #0
 800f258:	d048      	beq.n	800f2ec <_free_r+0x98>
 800f25a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f25e:	9001      	str	r0, [sp, #4]
 800f260:	2b00      	cmp	r3, #0
 800f262:	f1a1 0404 	sub.w	r4, r1, #4
 800f266:	bfb8      	it	lt
 800f268:	18e4      	addlt	r4, r4, r3
 800f26a:	f000 f8d3 	bl	800f414 <__malloc_lock>
 800f26e:	4a20      	ldr	r2, [pc, #128]	; (800f2f0 <_free_r+0x9c>)
 800f270:	9801      	ldr	r0, [sp, #4]
 800f272:	6813      	ldr	r3, [r2, #0]
 800f274:	4615      	mov	r5, r2
 800f276:	b933      	cbnz	r3, 800f286 <_free_r+0x32>
 800f278:	6063      	str	r3, [r4, #4]
 800f27a:	6014      	str	r4, [r2, #0]
 800f27c:	b003      	add	sp, #12
 800f27e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f282:	f000 b8cd 	b.w	800f420 <__malloc_unlock>
 800f286:	42a3      	cmp	r3, r4
 800f288:	d90b      	bls.n	800f2a2 <_free_r+0x4e>
 800f28a:	6821      	ldr	r1, [r4, #0]
 800f28c:	1862      	adds	r2, r4, r1
 800f28e:	4293      	cmp	r3, r2
 800f290:	bf04      	itt	eq
 800f292:	681a      	ldreq	r2, [r3, #0]
 800f294:	685b      	ldreq	r3, [r3, #4]
 800f296:	6063      	str	r3, [r4, #4]
 800f298:	bf04      	itt	eq
 800f29a:	1852      	addeq	r2, r2, r1
 800f29c:	6022      	streq	r2, [r4, #0]
 800f29e:	602c      	str	r4, [r5, #0]
 800f2a0:	e7ec      	b.n	800f27c <_free_r+0x28>
 800f2a2:	461a      	mov	r2, r3
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	b10b      	cbz	r3, 800f2ac <_free_r+0x58>
 800f2a8:	42a3      	cmp	r3, r4
 800f2aa:	d9fa      	bls.n	800f2a2 <_free_r+0x4e>
 800f2ac:	6811      	ldr	r1, [r2, #0]
 800f2ae:	1855      	adds	r5, r2, r1
 800f2b0:	42a5      	cmp	r5, r4
 800f2b2:	d10b      	bne.n	800f2cc <_free_r+0x78>
 800f2b4:	6824      	ldr	r4, [r4, #0]
 800f2b6:	4421      	add	r1, r4
 800f2b8:	1854      	adds	r4, r2, r1
 800f2ba:	42a3      	cmp	r3, r4
 800f2bc:	6011      	str	r1, [r2, #0]
 800f2be:	d1dd      	bne.n	800f27c <_free_r+0x28>
 800f2c0:	681c      	ldr	r4, [r3, #0]
 800f2c2:	685b      	ldr	r3, [r3, #4]
 800f2c4:	6053      	str	r3, [r2, #4]
 800f2c6:	4421      	add	r1, r4
 800f2c8:	6011      	str	r1, [r2, #0]
 800f2ca:	e7d7      	b.n	800f27c <_free_r+0x28>
 800f2cc:	d902      	bls.n	800f2d4 <_free_r+0x80>
 800f2ce:	230c      	movs	r3, #12
 800f2d0:	6003      	str	r3, [r0, #0]
 800f2d2:	e7d3      	b.n	800f27c <_free_r+0x28>
 800f2d4:	6825      	ldr	r5, [r4, #0]
 800f2d6:	1961      	adds	r1, r4, r5
 800f2d8:	428b      	cmp	r3, r1
 800f2da:	bf04      	itt	eq
 800f2dc:	6819      	ldreq	r1, [r3, #0]
 800f2de:	685b      	ldreq	r3, [r3, #4]
 800f2e0:	6063      	str	r3, [r4, #4]
 800f2e2:	bf04      	itt	eq
 800f2e4:	1949      	addeq	r1, r1, r5
 800f2e6:	6021      	streq	r1, [r4, #0]
 800f2e8:	6054      	str	r4, [r2, #4]
 800f2ea:	e7c7      	b.n	800f27c <_free_r+0x28>
 800f2ec:	b003      	add	sp, #12
 800f2ee:	bd30      	pop	{r4, r5, pc}
 800f2f0:	2000865c 	.word	0x2000865c

0800f2f4 <_malloc_r>:
 800f2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f2f6:	1ccd      	adds	r5, r1, #3
 800f2f8:	f025 0503 	bic.w	r5, r5, #3
 800f2fc:	3508      	adds	r5, #8
 800f2fe:	2d0c      	cmp	r5, #12
 800f300:	bf38      	it	cc
 800f302:	250c      	movcc	r5, #12
 800f304:	2d00      	cmp	r5, #0
 800f306:	4606      	mov	r6, r0
 800f308:	db01      	blt.n	800f30e <_malloc_r+0x1a>
 800f30a:	42a9      	cmp	r1, r5
 800f30c:	d903      	bls.n	800f316 <_malloc_r+0x22>
 800f30e:	230c      	movs	r3, #12
 800f310:	6033      	str	r3, [r6, #0]
 800f312:	2000      	movs	r0, #0
 800f314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f316:	f000 f87d 	bl	800f414 <__malloc_lock>
 800f31a:	4921      	ldr	r1, [pc, #132]	; (800f3a0 <_malloc_r+0xac>)
 800f31c:	680a      	ldr	r2, [r1, #0]
 800f31e:	4614      	mov	r4, r2
 800f320:	b99c      	cbnz	r4, 800f34a <_malloc_r+0x56>
 800f322:	4f20      	ldr	r7, [pc, #128]	; (800f3a4 <_malloc_r+0xb0>)
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	b923      	cbnz	r3, 800f332 <_malloc_r+0x3e>
 800f328:	4621      	mov	r1, r4
 800f32a:	4630      	mov	r0, r6
 800f32c:	f000 f862 	bl	800f3f4 <_sbrk_r>
 800f330:	6038      	str	r0, [r7, #0]
 800f332:	4629      	mov	r1, r5
 800f334:	4630      	mov	r0, r6
 800f336:	f000 f85d 	bl	800f3f4 <_sbrk_r>
 800f33a:	1c43      	adds	r3, r0, #1
 800f33c:	d123      	bne.n	800f386 <_malloc_r+0x92>
 800f33e:	230c      	movs	r3, #12
 800f340:	6033      	str	r3, [r6, #0]
 800f342:	4630      	mov	r0, r6
 800f344:	f000 f86c 	bl	800f420 <__malloc_unlock>
 800f348:	e7e3      	b.n	800f312 <_malloc_r+0x1e>
 800f34a:	6823      	ldr	r3, [r4, #0]
 800f34c:	1b5b      	subs	r3, r3, r5
 800f34e:	d417      	bmi.n	800f380 <_malloc_r+0x8c>
 800f350:	2b0b      	cmp	r3, #11
 800f352:	d903      	bls.n	800f35c <_malloc_r+0x68>
 800f354:	6023      	str	r3, [r4, #0]
 800f356:	441c      	add	r4, r3
 800f358:	6025      	str	r5, [r4, #0]
 800f35a:	e004      	b.n	800f366 <_malloc_r+0x72>
 800f35c:	6863      	ldr	r3, [r4, #4]
 800f35e:	42a2      	cmp	r2, r4
 800f360:	bf0c      	ite	eq
 800f362:	600b      	streq	r3, [r1, #0]
 800f364:	6053      	strne	r3, [r2, #4]
 800f366:	4630      	mov	r0, r6
 800f368:	f000 f85a 	bl	800f420 <__malloc_unlock>
 800f36c:	f104 000b 	add.w	r0, r4, #11
 800f370:	1d23      	adds	r3, r4, #4
 800f372:	f020 0007 	bic.w	r0, r0, #7
 800f376:	1ac2      	subs	r2, r0, r3
 800f378:	d0cc      	beq.n	800f314 <_malloc_r+0x20>
 800f37a:	1a1b      	subs	r3, r3, r0
 800f37c:	50a3      	str	r3, [r4, r2]
 800f37e:	e7c9      	b.n	800f314 <_malloc_r+0x20>
 800f380:	4622      	mov	r2, r4
 800f382:	6864      	ldr	r4, [r4, #4]
 800f384:	e7cc      	b.n	800f320 <_malloc_r+0x2c>
 800f386:	1cc4      	adds	r4, r0, #3
 800f388:	f024 0403 	bic.w	r4, r4, #3
 800f38c:	42a0      	cmp	r0, r4
 800f38e:	d0e3      	beq.n	800f358 <_malloc_r+0x64>
 800f390:	1a21      	subs	r1, r4, r0
 800f392:	4630      	mov	r0, r6
 800f394:	f000 f82e 	bl	800f3f4 <_sbrk_r>
 800f398:	3001      	adds	r0, #1
 800f39a:	d1dd      	bne.n	800f358 <_malloc_r+0x64>
 800f39c:	e7cf      	b.n	800f33e <_malloc_r+0x4a>
 800f39e:	bf00      	nop
 800f3a0:	2000865c 	.word	0x2000865c
 800f3a4:	20008660 	.word	0x20008660

0800f3a8 <_realloc_r>:
 800f3a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f3aa:	4607      	mov	r7, r0
 800f3ac:	4614      	mov	r4, r2
 800f3ae:	460e      	mov	r6, r1
 800f3b0:	b921      	cbnz	r1, 800f3bc <_realloc_r+0x14>
 800f3b2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800f3b6:	4611      	mov	r1, r2
 800f3b8:	f7ff bf9c 	b.w	800f2f4 <_malloc_r>
 800f3bc:	b922      	cbnz	r2, 800f3c8 <_realloc_r+0x20>
 800f3be:	f7ff ff49 	bl	800f254 <_free_r>
 800f3c2:	4625      	mov	r5, r4
 800f3c4:	4628      	mov	r0, r5
 800f3c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f3c8:	f000 f830 	bl	800f42c <_malloc_usable_size_r>
 800f3cc:	42a0      	cmp	r0, r4
 800f3ce:	d20f      	bcs.n	800f3f0 <_realloc_r+0x48>
 800f3d0:	4621      	mov	r1, r4
 800f3d2:	4638      	mov	r0, r7
 800f3d4:	f7ff ff8e 	bl	800f2f4 <_malloc_r>
 800f3d8:	4605      	mov	r5, r0
 800f3da:	2800      	cmp	r0, #0
 800f3dc:	d0f2      	beq.n	800f3c4 <_realloc_r+0x1c>
 800f3de:	4631      	mov	r1, r6
 800f3e0:	4622      	mov	r2, r4
 800f3e2:	f7ff fbf7 	bl	800ebd4 <memcpy>
 800f3e6:	4631      	mov	r1, r6
 800f3e8:	4638      	mov	r0, r7
 800f3ea:	f7ff ff33 	bl	800f254 <_free_r>
 800f3ee:	e7e9      	b.n	800f3c4 <_realloc_r+0x1c>
 800f3f0:	4635      	mov	r5, r6
 800f3f2:	e7e7      	b.n	800f3c4 <_realloc_r+0x1c>

0800f3f4 <_sbrk_r>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	4d06      	ldr	r5, [pc, #24]	; (800f410 <_sbrk_r+0x1c>)
 800f3f8:	2300      	movs	r3, #0
 800f3fa:	4604      	mov	r4, r0
 800f3fc:	4608      	mov	r0, r1
 800f3fe:	602b      	str	r3, [r5, #0]
 800f400:	f7f6 fa50 	bl	80058a4 <_sbrk>
 800f404:	1c43      	adds	r3, r0, #1
 800f406:	d102      	bne.n	800f40e <_sbrk_r+0x1a>
 800f408:	682b      	ldr	r3, [r5, #0]
 800f40a:	b103      	cbz	r3, 800f40e <_sbrk_r+0x1a>
 800f40c:	6023      	str	r3, [r4, #0]
 800f40e:	bd38      	pop	{r3, r4, r5, pc}
 800f410:	20008e9c 	.word	0x20008e9c

0800f414 <__malloc_lock>:
 800f414:	4801      	ldr	r0, [pc, #4]	; (800f41c <__malloc_lock+0x8>)
 800f416:	f000 b811 	b.w	800f43c <__retarget_lock_acquire_recursive>
 800f41a:	bf00      	nop
 800f41c:	20008ea4 	.word	0x20008ea4

0800f420 <__malloc_unlock>:
 800f420:	4801      	ldr	r0, [pc, #4]	; (800f428 <__malloc_unlock+0x8>)
 800f422:	f000 b80c 	b.w	800f43e <__retarget_lock_release_recursive>
 800f426:	bf00      	nop
 800f428:	20008ea4 	.word	0x20008ea4

0800f42c <_malloc_usable_size_r>:
 800f42c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f430:	1f18      	subs	r0, r3, #4
 800f432:	2b00      	cmp	r3, #0
 800f434:	bfbc      	itt	lt
 800f436:	580b      	ldrlt	r3, [r1, r0]
 800f438:	18c0      	addlt	r0, r0, r3
 800f43a:	4770      	bx	lr

0800f43c <__retarget_lock_acquire_recursive>:
 800f43c:	4770      	bx	lr

0800f43e <__retarget_lock_release_recursive>:
 800f43e:	4770      	bx	lr

0800f440 <cos>:
 800f440:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f442:	ec53 2b10 	vmov	r2, r3, d0
 800f446:	4824      	ldr	r0, [pc, #144]	; (800f4d8 <cos+0x98>)
 800f448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f44c:	4281      	cmp	r1, r0
 800f44e:	dc06      	bgt.n	800f45e <cos+0x1e>
 800f450:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 800f4d0 <cos+0x90>
 800f454:	f000 faa4 	bl	800f9a0 <__kernel_cos>
 800f458:	ec51 0b10 	vmov	r0, r1, d0
 800f45c:	e007      	b.n	800f46e <cos+0x2e>
 800f45e:	481f      	ldr	r0, [pc, #124]	; (800f4dc <cos+0x9c>)
 800f460:	4281      	cmp	r1, r0
 800f462:	dd09      	ble.n	800f478 <cos+0x38>
 800f464:	ee10 0a10 	vmov	r0, s0
 800f468:	4619      	mov	r1, r3
 800f46a:	f7f0 ff25 	bl	80002b8 <__aeabi_dsub>
 800f46e:	ec41 0b10 	vmov	d0, r0, r1
 800f472:	b005      	add	sp, #20
 800f474:	f85d fb04 	ldr.w	pc, [sp], #4
 800f478:	4668      	mov	r0, sp
 800f47a:	f000 f885 	bl	800f588 <__ieee754_rem_pio2>
 800f47e:	f000 0003 	and.w	r0, r0, #3
 800f482:	2801      	cmp	r0, #1
 800f484:	d007      	beq.n	800f496 <cos+0x56>
 800f486:	2802      	cmp	r0, #2
 800f488:	d012      	beq.n	800f4b0 <cos+0x70>
 800f48a:	b9c0      	cbnz	r0, 800f4be <cos+0x7e>
 800f48c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f490:	ed9d 0b00 	vldr	d0, [sp]
 800f494:	e7de      	b.n	800f454 <cos+0x14>
 800f496:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f49a:	ed9d 0b00 	vldr	d0, [sp]
 800f49e:	f000 fe87 	bl	80101b0 <__kernel_sin>
 800f4a2:	ec53 2b10 	vmov	r2, r3, d0
 800f4a6:	ee10 0a10 	vmov	r0, s0
 800f4aa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4ae:	e7de      	b.n	800f46e <cos+0x2e>
 800f4b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4b4:	ed9d 0b00 	vldr	d0, [sp]
 800f4b8:	f000 fa72 	bl	800f9a0 <__kernel_cos>
 800f4bc:	e7f1      	b.n	800f4a2 <cos+0x62>
 800f4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4c2:	ed9d 0b00 	vldr	d0, [sp]
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	f000 fe72 	bl	80101b0 <__kernel_sin>
 800f4cc:	e7c4      	b.n	800f458 <cos+0x18>
 800f4ce:	bf00      	nop
	...
 800f4d8:	3fe921fb 	.word	0x3fe921fb
 800f4dc:	7fefffff 	.word	0x7fefffff

0800f4e0 <sin>:
 800f4e0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f4e2:	ec53 2b10 	vmov	r2, r3, d0
 800f4e6:	4826      	ldr	r0, [pc, #152]	; (800f580 <sin+0xa0>)
 800f4e8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f4ec:	4281      	cmp	r1, r0
 800f4ee:	dc07      	bgt.n	800f500 <sin+0x20>
 800f4f0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800f578 <sin+0x98>
 800f4f4:	2000      	movs	r0, #0
 800f4f6:	f000 fe5b 	bl	80101b0 <__kernel_sin>
 800f4fa:	ec51 0b10 	vmov	r0, r1, d0
 800f4fe:	e007      	b.n	800f510 <sin+0x30>
 800f500:	4820      	ldr	r0, [pc, #128]	; (800f584 <sin+0xa4>)
 800f502:	4281      	cmp	r1, r0
 800f504:	dd09      	ble.n	800f51a <sin+0x3a>
 800f506:	ee10 0a10 	vmov	r0, s0
 800f50a:	4619      	mov	r1, r3
 800f50c:	f7f0 fed4 	bl	80002b8 <__aeabi_dsub>
 800f510:	ec41 0b10 	vmov	d0, r0, r1
 800f514:	b005      	add	sp, #20
 800f516:	f85d fb04 	ldr.w	pc, [sp], #4
 800f51a:	4668      	mov	r0, sp
 800f51c:	f000 f834 	bl	800f588 <__ieee754_rem_pio2>
 800f520:	f000 0003 	and.w	r0, r0, #3
 800f524:	2801      	cmp	r0, #1
 800f526:	d008      	beq.n	800f53a <sin+0x5a>
 800f528:	2802      	cmp	r0, #2
 800f52a:	d00d      	beq.n	800f548 <sin+0x68>
 800f52c:	b9d0      	cbnz	r0, 800f564 <sin+0x84>
 800f52e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f532:	ed9d 0b00 	vldr	d0, [sp]
 800f536:	2001      	movs	r0, #1
 800f538:	e7dd      	b.n	800f4f6 <sin+0x16>
 800f53a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f53e:	ed9d 0b00 	vldr	d0, [sp]
 800f542:	f000 fa2d 	bl	800f9a0 <__kernel_cos>
 800f546:	e7d8      	b.n	800f4fa <sin+0x1a>
 800f548:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f54c:	ed9d 0b00 	vldr	d0, [sp]
 800f550:	2001      	movs	r0, #1
 800f552:	f000 fe2d 	bl	80101b0 <__kernel_sin>
 800f556:	ec53 2b10 	vmov	r2, r3, d0
 800f55a:	ee10 0a10 	vmov	r0, s0
 800f55e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f562:	e7d5      	b.n	800f510 <sin+0x30>
 800f564:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f568:	ed9d 0b00 	vldr	d0, [sp]
 800f56c:	f000 fa18 	bl	800f9a0 <__kernel_cos>
 800f570:	e7f1      	b.n	800f556 <sin+0x76>
 800f572:	bf00      	nop
 800f574:	f3af 8000 	nop.w
	...
 800f580:	3fe921fb 	.word	0x3fe921fb
 800f584:	7fefffff 	.word	0x7fefffff

0800f588 <__ieee754_rem_pio2>:
 800f588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f58c:	ed2d 8b02 	vpush	{d8}
 800f590:	ec55 4b10 	vmov	r4, r5, d0
 800f594:	4bca      	ldr	r3, [pc, #808]	; (800f8c0 <__ieee754_rem_pio2+0x338>)
 800f596:	b08b      	sub	sp, #44	; 0x2c
 800f598:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f59c:	4598      	cmp	r8, r3
 800f59e:	4682      	mov	sl, r0
 800f5a0:	9502      	str	r5, [sp, #8]
 800f5a2:	dc08      	bgt.n	800f5b6 <__ieee754_rem_pio2+0x2e>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	ed80 0b00 	vstr	d0, [r0]
 800f5ac:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f5b0:	f04f 0b00 	mov.w	fp, #0
 800f5b4:	e028      	b.n	800f608 <__ieee754_rem_pio2+0x80>
 800f5b6:	4bc3      	ldr	r3, [pc, #780]	; (800f8c4 <__ieee754_rem_pio2+0x33c>)
 800f5b8:	4598      	cmp	r8, r3
 800f5ba:	dc78      	bgt.n	800f6ae <__ieee754_rem_pio2+0x126>
 800f5bc:	9b02      	ldr	r3, [sp, #8]
 800f5be:	4ec2      	ldr	r6, [pc, #776]	; (800f8c8 <__ieee754_rem_pio2+0x340>)
 800f5c0:	2b00      	cmp	r3, #0
 800f5c2:	ee10 0a10 	vmov	r0, s0
 800f5c6:	a3b0      	add	r3, pc, #704	; (adr r3, 800f888 <__ieee754_rem_pio2+0x300>)
 800f5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	dd39      	ble.n	800f644 <__ieee754_rem_pio2+0xbc>
 800f5d0:	f7f0 fe72 	bl	80002b8 <__aeabi_dsub>
 800f5d4:	45b0      	cmp	r8, r6
 800f5d6:	4604      	mov	r4, r0
 800f5d8:	460d      	mov	r5, r1
 800f5da:	d01b      	beq.n	800f614 <__ieee754_rem_pio2+0x8c>
 800f5dc:	a3ac      	add	r3, pc, #688	; (adr r3, 800f890 <__ieee754_rem_pio2+0x308>)
 800f5de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5e2:	f7f0 fe69 	bl	80002b8 <__aeabi_dsub>
 800f5e6:	4602      	mov	r2, r0
 800f5e8:	460b      	mov	r3, r1
 800f5ea:	e9ca 2300 	strd	r2, r3, [sl]
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	4629      	mov	r1, r5
 800f5f2:	f7f0 fe61 	bl	80002b8 <__aeabi_dsub>
 800f5f6:	a3a6      	add	r3, pc, #664	; (adr r3, 800f890 <__ieee754_rem_pio2+0x308>)
 800f5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5fc:	f7f0 fe5c 	bl	80002b8 <__aeabi_dsub>
 800f600:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f604:	f04f 0b01 	mov.w	fp, #1
 800f608:	4658      	mov	r0, fp
 800f60a:	b00b      	add	sp, #44	; 0x2c
 800f60c:	ecbd 8b02 	vpop	{d8}
 800f610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f614:	a3a0      	add	r3, pc, #640	; (adr r3, 800f898 <__ieee754_rem_pio2+0x310>)
 800f616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61a:	f7f0 fe4d 	bl	80002b8 <__aeabi_dsub>
 800f61e:	a3a0      	add	r3, pc, #640	; (adr r3, 800f8a0 <__ieee754_rem_pio2+0x318>)
 800f620:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f624:	4604      	mov	r4, r0
 800f626:	460d      	mov	r5, r1
 800f628:	f7f0 fe46 	bl	80002b8 <__aeabi_dsub>
 800f62c:	4602      	mov	r2, r0
 800f62e:	460b      	mov	r3, r1
 800f630:	e9ca 2300 	strd	r2, r3, [sl]
 800f634:	4620      	mov	r0, r4
 800f636:	4629      	mov	r1, r5
 800f638:	f7f0 fe3e 	bl	80002b8 <__aeabi_dsub>
 800f63c:	a398      	add	r3, pc, #608	; (adr r3, 800f8a0 <__ieee754_rem_pio2+0x318>)
 800f63e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f642:	e7db      	b.n	800f5fc <__ieee754_rem_pio2+0x74>
 800f644:	f7f0 fe3a 	bl	80002bc <__adddf3>
 800f648:	45b0      	cmp	r8, r6
 800f64a:	4604      	mov	r4, r0
 800f64c:	460d      	mov	r5, r1
 800f64e:	d016      	beq.n	800f67e <__ieee754_rem_pio2+0xf6>
 800f650:	a38f      	add	r3, pc, #572	; (adr r3, 800f890 <__ieee754_rem_pio2+0x308>)
 800f652:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f656:	f7f0 fe31 	bl	80002bc <__adddf3>
 800f65a:	4602      	mov	r2, r0
 800f65c:	460b      	mov	r3, r1
 800f65e:	e9ca 2300 	strd	r2, r3, [sl]
 800f662:	4620      	mov	r0, r4
 800f664:	4629      	mov	r1, r5
 800f666:	f7f0 fe27 	bl	80002b8 <__aeabi_dsub>
 800f66a:	a389      	add	r3, pc, #548	; (adr r3, 800f890 <__ieee754_rem_pio2+0x308>)
 800f66c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f670:	f7f0 fe24 	bl	80002bc <__adddf3>
 800f674:	f04f 3bff 	mov.w	fp, #4294967295
 800f678:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f67c:	e7c4      	b.n	800f608 <__ieee754_rem_pio2+0x80>
 800f67e:	a386      	add	r3, pc, #536	; (adr r3, 800f898 <__ieee754_rem_pio2+0x310>)
 800f680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f684:	f7f0 fe1a 	bl	80002bc <__adddf3>
 800f688:	a385      	add	r3, pc, #532	; (adr r3, 800f8a0 <__ieee754_rem_pio2+0x318>)
 800f68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f68e:	4604      	mov	r4, r0
 800f690:	460d      	mov	r5, r1
 800f692:	f7f0 fe13 	bl	80002bc <__adddf3>
 800f696:	4602      	mov	r2, r0
 800f698:	460b      	mov	r3, r1
 800f69a:	e9ca 2300 	strd	r2, r3, [sl]
 800f69e:	4620      	mov	r0, r4
 800f6a0:	4629      	mov	r1, r5
 800f6a2:	f7f0 fe09 	bl	80002b8 <__aeabi_dsub>
 800f6a6:	a37e      	add	r3, pc, #504	; (adr r3, 800f8a0 <__ieee754_rem_pio2+0x318>)
 800f6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ac:	e7e0      	b.n	800f670 <__ieee754_rem_pio2+0xe8>
 800f6ae:	4b87      	ldr	r3, [pc, #540]	; (800f8cc <__ieee754_rem_pio2+0x344>)
 800f6b0:	4598      	cmp	r8, r3
 800f6b2:	f300 80d9 	bgt.w	800f868 <__ieee754_rem_pio2+0x2e0>
 800f6b6:	f000 fe39 	bl	801032c <fabs>
 800f6ba:	ec55 4b10 	vmov	r4, r5, d0
 800f6be:	ee10 0a10 	vmov	r0, s0
 800f6c2:	a379      	add	r3, pc, #484	; (adr r3, 800f8a8 <__ieee754_rem_pio2+0x320>)
 800f6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6c8:	4629      	mov	r1, r5
 800f6ca:	f7f0 ffad 	bl	8000628 <__aeabi_dmul>
 800f6ce:	4b80      	ldr	r3, [pc, #512]	; (800f8d0 <__ieee754_rem_pio2+0x348>)
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f7f0 fdf3 	bl	80002bc <__adddf3>
 800f6d6:	f7f1 fa41 	bl	8000b5c <__aeabi_d2iz>
 800f6da:	4683      	mov	fp, r0
 800f6dc:	f7f0 ff3a 	bl	8000554 <__aeabi_i2d>
 800f6e0:	4602      	mov	r2, r0
 800f6e2:	460b      	mov	r3, r1
 800f6e4:	ec43 2b18 	vmov	d8, r2, r3
 800f6e8:	a367      	add	r3, pc, #412	; (adr r3, 800f888 <__ieee754_rem_pio2+0x300>)
 800f6ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6ee:	f7f0 ff9b 	bl	8000628 <__aeabi_dmul>
 800f6f2:	4602      	mov	r2, r0
 800f6f4:	460b      	mov	r3, r1
 800f6f6:	4620      	mov	r0, r4
 800f6f8:	4629      	mov	r1, r5
 800f6fa:	f7f0 fddd 	bl	80002b8 <__aeabi_dsub>
 800f6fe:	a364      	add	r3, pc, #400	; (adr r3, 800f890 <__ieee754_rem_pio2+0x308>)
 800f700:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f704:	4606      	mov	r6, r0
 800f706:	460f      	mov	r7, r1
 800f708:	ec51 0b18 	vmov	r0, r1, d8
 800f70c:	f7f0 ff8c 	bl	8000628 <__aeabi_dmul>
 800f710:	f1bb 0f1f 	cmp.w	fp, #31
 800f714:	4604      	mov	r4, r0
 800f716:	460d      	mov	r5, r1
 800f718:	dc0d      	bgt.n	800f736 <__ieee754_rem_pio2+0x1ae>
 800f71a:	4b6e      	ldr	r3, [pc, #440]	; (800f8d4 <__ieee754_rem_pio2+0x34c>)
 800f71c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f724:	4543      	cmp	r3, r8
 800f726:	d006      	beq.n	800f736 <__ieee754_rem_pio2+0x1ae>
 800f728:	4622      	mov	r2, r4
 800f72a:	462b      	mov	r3, r5
 800f72c:	4630      	mov	r0, r6
 800f72e:	4639      	mov	r1, r7
 800f730:	f7f0 fdc2 	bl	80002b8 <__aeabi_dsub>
 800f734:	e00f      	b.n	800f756 <__ieee754_rem_pio2+0x1ce>
 800f736:	462b      	mov	r3, r5
 800f738:	4622      	mov	r2, r4
 800f73a:	4630      	mov	r0, r6
 800f73c:	4639      	mov	r1, r7
 800f73e:	f7f0 fdbb 	bl	80002b8 <__aeabi_dsub>
 800f742:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f746:	9303      	str	r3, [sp, #12]
 800f748:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f74c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f750:	f1b8 0f10 	cmp.w	r8, #16
 800f754:	dc02      	bgt.n	800f75c <__ieee754_rem_pio2+0x1d4>
 800f756:	e9ca 0100 	strd	r0, r1, [sl]
 800f75a:	e039      	b.n	800f7d0 <__ieee754_rem_pio2+0x248>
 800f75c:	a34e      	add	r3, pc, #312	; (adr r3, 800f898 <__ieee754_rem_pio2+0x310>)
 800f75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f762:	ec51 0b18 	vmov	r0, r1, d8
 800f766:	f7f0 ff5f 	bl	8000628 <__aeabi_dmul>
 800f76a:	4604      	mov	r4, r0
 800f76c:	460d      	mov	r5, r1
 800f76e:	4602      	mov	r2, r0
 800f770:	460b      	mov	r3, r1
 800f772:	4630      	mov	r0, r6
 800f774:	4639      	mov	r1, r7
 800f776:	f7f0 fd9f 	bl	80002b8 <__aeabi_dsub>
 800f77a:	4602      	mov	r2, r0
 800f77c:	460b      	mov	r3, r1
 800f77e:	4680      	mov	r8, r0
 800f780:	4689      	mov	r9, r1
 800f782:	4630      	mov	r0, r6
 800f784:	4639      	mov	r1, r7
 800f786:	f7f0 fd97 	bl	80002b8 <__aeabi_dsub>
 800f78a:	4622      	mov	r2, r4
 800f78c:	462b      	mov	r3, r5
 800f78e:	f7f0 fd93 	bl	80002b8 <__aeabi_dsub>
 800f792:	a343      	add	r3, pc, #268	; (adr r3, 800f8a0 <__ieee754_rem_pio2+0x318>)
 800f794:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f798:	4604      	mov	r4, r0
 800f79a:	460d      	mov	r5, r1
 800f79c:	ec51 0b18 	vmov	r0, r1, d8
 800f7a0:	f7f0 ff42 	bl	8000628 <__aeabi_dmul>
 800f7a4:	4622      	mov	r2, r4
 800f7a6:	462b      	mov	r3, r5
 800f7a8:	f7f0 fd86 	bl	80002b8 <__aeabi_dsub>
 800f7ac:	4602      	mov	r2, r0
 800f7ae:	460b      	mov	r3, r1
 800f7b0:	4604      	mov	r4, r0
 800f7b2:	460d      	mov	r5, r1
 800f7b4:	4640      	mov	r0, r8
 800f7b6:	4649      	mov	r1, r9
 800f7b8:	f7f0 fd7e 	bl	80002b8 <__aeabi_dsub>
 800f7bc:	9a03      	ldr	r2, [sp, #12]
 800f7be:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f7c2:	1ad3      	subs	r3, r2, r3
 800f7c4:	2b31      	cmp	r3, #49	; 0x31
 800f7c6:	dc24      	bgt.n	800f812 <__ieee754_rem_pio2+0x28a>
 800f7c8:	e9ca 0100 	strd	r0, r1, [sl]
 800f7cc:	4646      	mov	r6, r8
 800f7ce:	464f      	mov	r7, r9
 800f7d0:	e9da 8900 	ldrd	r8, r9, [sl]
 800f7d4:	4630      	mov	r0, r6
 800f7d6:	4642      	mov	r2, r8
 800f7d8:	464b      	mov	r3, r9
 800f7da:	4639      	mov	r1, r7
 800f7dc:	f7f0 fd6c 	bl	80002b8 <__aeabi_dsub>
 800f7e0:	462b      	mov	r3, r5
 800f7e2:	4622      	mov	r2, r4
 800f7e4:	f7f0 fd68 	bl	80002b8 <__aeabi_dsub>
 800f7e8:	9b02      	ldr	r3, [sp, #8]
 800f7ea:	2b00      	cmp	r3, #0
 800f7ec:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f7f0:	f6bf af0a 	bge.w	800f608 <__ieee754_rem_pio2+0x80>
 800f7f4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f7f8:	f8ca 3004 	str.w	r3, [sl, #4]
 800f7fc:	f8ca 8000 	str.w	r8, [sl]
 800f800:	f8ca 0008 	str.w	r0, [sl, #8]
 800f804:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f808:	f8ca 300c 	str.w	r3, [sl, #12]
 800f80c:	f1cb 0b00 	rsb	fp, fp, #0
 800f810:	e6fa      	b.n	800f608 <__ieee754_rem_pio2+0x80>
 800f812:	a327      	add	r3, pc, #156	; (adr r3, 800f8b0 <__ieee754_rem_pio2+0x328>)
 800f814:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f818:	ec51 0b18 	vmov	r0, r1, d8
 800f81c:	f7f0 ff04 	bl	8000628 <__aeabi_dmul>
 800f820:	4604      	mov	r4, r0
 800f822:	460d      	mov	r5, r1
 800f824:	4602      	mov	r2, r0
 800f826:	460b      	mov	r3, r1
 800f828:	4640      	mov	r0, r8
 800f82a:	4649      	mov	r1, r9
 800f82c:	f7f0 fd44 	bl	80002b8 <__aeabi_dsub>
 800f830:	4602      	mov	r2, r0
 800f832:	460b      	mov	r3, r1
 800f834:	4606      	mov	r6, r0
 800f836:	460f      	mov	r7, r1
 800f838:	4640      	mov	r0, r8
 800f83a:	4649      	mov	r1, r9
 800f83c:	f7f0 fd3c 	bl	80002b8 <__aeabi_dsub>
 800f840:	4622      	mov	r2, r4
 800f842:	462b      	mov	r3, r5
 800f844:	f7f0 fd38 	bl	80002b8 <__aeabi_dsub>
 800f848:	a31b      	add	r3, pc, #108	; (adr r3, 800f8b8 <__ieee754_rem_pio2+0x330>)
 800f84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f84e:	4604      	mov	r4, r0
 800f850:	460d      	mov	r5, r1
 800f852:	ec51 0b18 	vmov	r0, r1, d8
 800f856:	f7f0 fee7 	bl	8000628 <__aeabi_dmul>
 800f85a:	4622      	mov	r2, r4
 800f85c:	462b      	mov	r3, r5
 800f85e:	f7f0 fd2b 	bl	80002b8 <__aeabi_dsub>
 800f862:	4604      	mov	r4, r0
 800f864:	460d      	mov	r5, r1
 800f866:	e75f      	b.n	800f728 <__ieee754_rem_pio2+0x1a0>
 800f868:	4b1b      	ldr	r3, [pc, #108]	; (800f8d8 <__ieee754_rem_pio2+0x350>)
 800f86a:	4598      	cmp	r8, r3
 800f86c:	dd36      	ble.n	800f8dc <__ieee754_rem_pio2+0x354>
 800f86e:	ee10 2a10 	vmov	r2, s0
 800f872:	462b      	mov	r3, r5
 800f874:	4620      	mov	r0, r4
 800f876:	4629      	mov	r1, r5
 800f878:	f7f0 fd1e 	bl	80002b8 <__aeabi_dsub>
 800f87c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f880:	e9ca 0100 	strd	r0, r1, [sl]
 800f884:	e694      	b.n	800f5b0 <__ieee754_rem_pio2+0x28>
 800f886:	bf00      	nop
 800f888:	54400000 	.word	0x54400000
 800f88c:	3ff921fb 	.word	0x3ff921fb
 800f890:	1a626331 	.word	0x1a626331
 800f894:	3dd0b461 	.word	0x3dd0b461
 800f898:	1a600000 	.word	0x1a600000
 800f89c:	3dd0b461 	.word	0x3dd0b461
 800f8a0:	2e037073 	.word	0x2e037073
 800f8a4:	3ba3198a 	.word	0x3ba3198a
 800f8a8:	6dc9c883 	.word	0x6dc9c883
 800f8ac:	3fe45f30 	.word	0x3fe45f30
 800f8b0:	2e000000 	.word	0x2e000000
 800f8b4:	3ba3198a 	.word	0x3ba3198a
 800f8b8:	252049c1 	.word	0x252049c1
 800f8bc:	397b839a 	.word	0x397b839a
 800f8c0:	3fe921fb 	.word	0x3fe921fb
 800f8c4:	4002d97b 	.word	0x4002d97b
 800f8c8:	3ff921fb 	.word	0x3ff921fb
 800f8cc:	413921fb 	.word	0x413921fb
 800f8d0:	3fe00000 	.word	0x3fe00000
 800f8d4:	08012640 	.word	0x08012640
 800f8d8:	7fefffff 	.word	0x7fefffff
 800f8dc:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f8e0:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f8e4:	ee10 0a10 	vmov	r0, s0
 800f8e8:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f8ec:	ee10 6a10 	vmov	r6, s0
 800f8f0:	460f      	mov	r7, r1
 800f8f2:	f7f1 f933 	bl	8000b5c <__aeabi_d2iz>
 800f8f6:	f7f0 fe2d 	bl	8000554 <__aeabi_i2d>
 800f8fa:	4602      	mov	r2, r0
 800f8fc:	460b      	mov	r3, r1
 800f8fe:	4630      	mov	r0, r6
 800f900:	4639      	mov	r1, r7
 800f902:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f906:	f7f0 fcd7 	bl	80002b8 <__aeabi_dsub>
 800f90a:	4b22      	ldr	r3, [pc, #136]	; (800f994 <__ieee754_rem_pio2+0x40c>)
 800f90c:	2200      	movs	r2, #0
 800f90e:	f7f0 fe8b 	bl	8000628 <__aeabi_dmul>
 800f912:	460f      	mov	r7, r1
 800f914:	4606      	mov	r6, r0
 800f916:	f7f1 f921 	bl	8000b5c <__aeabi_d2iz>
 800f91a:	f7f0 fe1b 	bl	8000554 <__aeabi_i2d>
 800f91e:	4602      	mov	r2, r0
 800f920:	460b      	mov	r3, r1
 800f922:	4630      	mov	r0, r6
 800f924:	4639      	mov	r1, r7
 800f926:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f92a:	f7f0 fcc5 	bl	80002b8 <__aeabi_dsub>
 800f92e:	4b19      	ldr	r3, [pc, #100]	; (800f994 <__ieee754_rem_pio2+0x40c>)
 800f930:	2200      	movs	r2, #0
 800f932:	f7f0 fe79 	bl	8000628 <__aeabi_dmul>
 800f936:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f93a:	ad04      	add	r5, sp, #16
 800f93c:	f04f 0803 	mov.w	r8, #3
 800f940:	46a9      	mov	r9, r5
 800f942:	2600      	movs	r6, #0
 800f944:	2700      	movs	r7, #0
 800f946:	4632      	mov	r2, r6
 800f948:	463b      	mov	r3, r7
 800f94a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f94e:	46c3      	mov	fp, r8
 800f950:	3d08      	subs	r5, #8
 800f952:	f108 38ff 	add.w	r8, r8, #4294967295
 800f956:	f7f1 f8cf 	bl	8000af8 <__aeabi_dcmpeq>
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d1f3      	bne.n	800f946 <__ieee754_rem_pio2+0x3be>
 800f95e:	4b0e      	ldr	r3, [pc, #56]	; (800f998 <__ieee754_rem_pio2+0x410>)
 800f960:	9301      	str	r3, [sp, #4]
 800f962:	2302      	movs	r3, #2
 800f964:	9300      	str	r3, [sp, #0]
 800f966:	4622      	mov	r2, r4
 800f968:	465b      	mov	r3, fp
 800f96a:	4651      	mov	r1, sl
 800f96c:	4648      	mov	r0, r9
 800f96e:	f000 f8df 	bl	800fb30 <__kernel_rem_pio2>
 800f972:	9b02      	ldr	r3, [sp, #8]
 800f974:	2b00      	cmp	r3, #0
 800f976:	4683      	mov	fp, r0
 800f978:	f6bf ae46 	bge.w	800f608 <__ieee754_rem_pio2+0x80>
 800f97c:	f8da 3004 	ldr.w	r3, [sl, #4]
 800f980:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f984:	f8ca 3004 	str.w	r3, [sl, #4]
 800f988:	f8da 300c 	ldr.w	r3, [sl, #12]
 800f98c:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f990:	e73a      	b.n	800f808 <__ieee754_rem_pio2+0x280>
 800f992:	bf00      	nop
 800f994:	41700000 	.word	0x41700000
 800f998:	080126c0 	.word	0x080126c0
 800f99c:	00000000 	.word	0x00000000

0800f9a0 <__kernel_cos>:
 800f9a0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a4:	ec57 6b10 	vmov	r6, r7, d0
 800f9a8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f9ac:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f9b0:	ed8d 1b00 	vstr	d1, [sp]
 800f9b4:	da07      	bge.n	800f9c6 <__kernel_cos+0x26>
 800f9b6:	ee10 0a10 	vmov	r0, s0
 800f9ba:	4639      	mov	r1, r7
 800f9bc:	f7f1 f8ce 	bl	8000b5c <__aeabi_d2iz>
 800f9c0:	2800      	cmp	r0, #0
 800f9c2:	f000 8088 	beq.w	800fad6 <__kernel_cos+0x136>
 800f9c6:	4632      	mov	r2, r6
 800f9c8:	463b      	mov	r3, r7
 800f9ca:	4630      	mov	r0, r6
 800f9cc:	4639      	mov	r1, r7
 800f9ce:	f7f0 fe2b 	bl	8000628 <__aeabi_dmul>
 800f9d2:	4b51      	ldr	r3, [pc, #324]	; (800fb18 <__kernel_cos+0x178>)
 800f9d4:	2200      	movs	r2, #0
 800f9d6:	4604      	mov	r4, r0
 800f9d8:	460d      	mov	r5, r1
 800f9da:	f7f0 fe25 	bl	8000628 <__aeabi_dmul>
 800f9de:	a340      	add	r3, pc, #256	; (adr r3, 800fae0 <__kernel_cos+0x140>)
 800f9e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9e4:	4682      	mov	sl, r0
 800f9e6:	468b      	mov	fp, r1
 800f9e8:	4620      	mov	r0, r4
 800f9ea:	4629      	mov	r1, r5
 800f9ec:	f7f0 fe1c 	bl	8000628 <__aeabi_dmul>
 800f9f0:	a33d      	add	r3, pc, #244	; (adr r3, 800fae8 <__kernel_cos+0x148>)
 800f9f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9f6:	f7f0 fc61 	bl	80002bc <__adddf3>
 800f9fa:	4622      	mov	r2, r4
 800f9fc:	462b      	mov	r3, r5
 800f9fe:	f7f0 fe13 	bl	8000628 <__aeabi_dmul>
 800fa02:	a33b      	add	r3, pc, #236	; (adr r3, 800faf0 <__kernel_cos+0x150>)
 800fa04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa08:	f7f0 fc56 	bl	80002b8 <__aeabi_dsub>
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	462b      	mov	r3, r5
 800fa10:	f7f0 fe0a 	bl	8000628 <__aeabi_dmul>
 800fa14:	a338      	add	r3, pc, #224	; (adr r3, 800faf8 <__kernel_cos+0x158>)
 800fa16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa1a:	f7f0 fc4f 	bl	80002bc <__adddf3>
 800fa1e:	4622      	mov	r2, r4
 800fa20:	462b      	mov	r3, r5
 800fa22:	f7f0 fe01 	bl	8000628 <__aeabi_dmul>
 800fa26:	a336      	add	r3, pc, #216	; (adr r3, 800fb00 <__kernel_cos+0x160>)
 800fa28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa2c:	f7f0 fc44 	bl	80002b8 <__aeabi_dsub>
 800fa30:	4622      	mov	r2, r4
 800fa32:	462b      	mov	r3, r5
 800fa34:	f7f0 fdf8 	bl	8000628 <__aeabi_dmul>
 800fa38:	a333      	add	r3, pc, #204	; (adr r3, 800fb08 <__kernel_cos+0x168>)
 800fa3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fa3e:	f7f0 fc3d 	bl	80002bc <__adddf3>
 800fa42:	4622      	mov	r2, r4
 800fa44:	462b      	mov	r3, r5
 800fa46:	f7f0 fdef 	bl	8000628 <__aeabi_dmul>
 800fa4a:	4622      	mov	r2, r4
 800fa4c:	462b      	mov	r3, r5
 800fa4e:	f7f0 fdeb 	bl	8000628 <__aeabi_dmul>
 800fa52:	e9dd 2300 	ldrd	r2, r3, [sp]
 800fa56:	4604      	mov	r4, r0
 800fa58:	460d      	mov	r5, r1
 800fa5a:	4630      	mov	r0, r6
 800fa5c:	4639      	mov	r1, r7
 800fa5e:	f7f0 fde3 	bl	8000628 <__aeabi_dmul>
 800fa62:	460b      	mov	r3, r1
 800fa64:	4602      	mov	r2, r0
 800fa66:	4629      	mov	r1, r5
 800fa68:	4620      	mov	r0, r4
 800fa6a:	f7f0 fc25 	bl	80002b8 <__aeabi_dsub>
 800fa6e:	4b2b      	ldr	r3, [pc, #172]	; (800fb1c <__kernel_cos+0x17c>)
 800fa70:	4598      	cmp	r8, r3
 800fa72:	4606      	mov	r6, r0
 800fa74:	460f      	mov	r7, r1
 800fa76:	dc10      	bgt.n	800fa9a <__kernel_cos+0xfa>
 800fa78:	4602      	mov	r2, r0
 800fa7a:	460b      	mov	r3, r1
 800fa7c:	4650      	mov	r0, sl
 800fa7e:	4659      	mov	r1, fp
 800fa80:	f7f0 fc1a 	bl	80002b8 <__aeabi_dsub>
 800fa84:	460b      	mov	r3, r1
 800fa86:	4926      	ldr	r1, [pc, #152]	; (800fb20 <__kernel_cos+0x180>)
 800fa88:	4602      	mov	r2, r0
 800fa8a:	2000      	movs	r0, #0
 800fa8c:	f7f0 fc14 	bl	80002b8 <__aeabi_dsub>
 800fa90:	ec41 0b10 	vmov	d0, r0, r1
 800fa94:	b003      	add	sp, #12
 800fa96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa9a:	4b22      	ldr	r3, [pc, #136]	; (800fb24 <__kernel_cos+0x184>)
 800fa9c:	4920      	ldr	r1, [pc, #128]	; (800fb20 <__kernel_cos+0x180>)
 800fa9e:	4598      	cmp	r8, r3
 800faa0:	bfcc      	ite	gt
 800faa2:	4d21      	ldrgt	r5, [pc, #132]	; (800fb28 <__kernel_cos+0x188>)
 800faa4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800faa8:	2400      	movs	r4, #0
 800faaa:	4622      	mov	r2, r4
 800faac:	462b      	mov	r3, r5
 800faae:	2000      	movs	r0, #0
 800fab0:	f7f0 fc02 	bl	80002b8 <__aeabi_dsub>
 800fab4:	4622      	mov	r2, r4
 800fab6:	4680      	mov	r8, r0
 800fab8:	4689      	mov	r9, r1
 800faba:	462b      	mov	r3, r5
 800fabc:	4650      	mov	r0, sl
 800fabe:	4659      	mov	r1, fp
 800fac0:	f7f0 fbfa 	bl	80002b8 <__aeabi_dsub>
 800fac4:	4632      	mov	r2, r6
 800fac6:	463b      	mov	r3, r7
 800fac8:	f7f0 fbf6 	bl	80002b8 <__aeabi_dsub>
 800facc:	4602      	mov	r2, r0
 800face:	460b      	mov	r3, r1
 800fad0:	4640      	mov	r0, r8
 800fad2:	4649      	mov	r1, r9
 800fad4:	e7da      	b.n	800fa8c <__kernel_cos+0xec>
 800fad6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800fb10 <__kernel_cos+0x170>
 800fada:	e7db      	b.n	800fa94 <__kernel_cos+0xf4>
 800fadc:	f3af 8000 	nop.w
 800fae0:	be8838d4 	.word	0xbe8838d4
 800fae4:	bda8fae9 	.word	0xbda8fae9
 800fae8:	bdb4b1c4 	.word	0xbdb4b1c4
 800faec:	3e21ee9e 	.word	0x3e21ee9e
 800faf0:	809c52ad 	.word	0x809c52ad
 800faf4:	3e927e4f 	.word	0x3e927e4f
 800faf8:	19cb1590 	.word	0x19cb1590
 800fafc:	3efa01a0 	.word	0x3efa01a0
 800fb00:	16c15177 	.word	0x16c15177
 800fb04:	3f56c16c 	.word	0x3f56c16c
 800fb08:	5555554c 	.word	0x5555554c
 800fb0c:	3fa55555 	.word	0x3fa55555
 800fb10:	00000000 	.word	0x00000000
 800fb14:	3ff00000 	.word	0x3ff00000
 800fb18:	3fe00000 	.word	0x3fe00000
 800fb1c:	3fd33332 	.word	0x3fd33332
 800fb20:	3ff00000 	.word	0x3ff00000
 800fb24:	3fe90000 	.word	0x3fe90000
 800fb28:	3fd20000 	.word	0x3fd20000
 800fb2c:	00000000 	.word	0x00000000

0800fb30 <__kernel_rem_pio2>:
 800fb30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb34:	ed2d 8b02 	vpush	{d8}
 800fb38:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800fb3c:	f112 0f14 	cmn.w	r2, #20
 800fb40:	9308      	str	r3, [sp, #32]
 800fb42:	9101      	str	r1, [sp, #4]
 800fb44:	4bc6      	ldr	r3, [pc, #792]	; (800fe60 <__kernel_rem_pio2+0x330>)
 800fb46:	99a4      	ldr	r1, [sp, #656]	; 0x290
 800fb48:	9009      	str	r0, [sp, #36]	; 0x24
 800fb4a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fb4e:	9304      	str	r3, [sp, #16]
 800fb50:	9b08      	ldr	r3, [sp, #32]
 800fb52:	f103 33ff 	add.w	r3, r3, #4294967295
 800fb56:	bfa8      	it	ge
 800fb58:	1ed4      	subge	r4, r2, #3
 800fb5a:	9306      	str	r3, [sp, #24]
 800fb5c:	bfb2      	itee	lt
 800fb5e:	2400      	movlt	r4, #0
 800fb60:	2318      	movge	r3, #24
 800fb62:	fb94 f4f3 	sdivge	r4, r4, r3
 800fb66:	f06f 0317 	mvn.w	r3, #23
 800fb6a:	fb04 3303 	mla	r3, r4, r3, r3
 800fb6e:	eb03 0a02 	add.w	sl, r3, r2
 800fb72:	9b04      	ldr	r3, [sp, #16]
 800fb74:	9a06      	ldr	r2, [sp, #24]
 800fb76:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 800fe50 <__kernel_rem_pio2+0x320>
 800fb7a:	eb03 0802 	add.w	r8, r3, r2
 800fb7e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fb80:	1aa7      	subs	r7, r4, r2
 800fb82:	ae20      	add	r6, sp, #128	; 0x80
 800fb84:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fb88:	2500      	movs	r5, #0
 800fb8a:	4545      	cmp	r5, r8
 800fb8c:	dd18      	ble.n	800fbc0 <__kernel_rem_pio2+0x90>
 800fb8e:	9b08      	ldr	r3, [sp, #32]
 800fb90:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800fb94:	aa20      	add	r2, sp, #128	; 0x80
 800fb96:	ed9f 8bae 	vldr	d8, [pc, #696]	; 800fe50 <__kernel_rem_pio2+0x320>
 800fb9a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fb9e:	f1c3 0301 	rsb	r3, r3, #1
 800fba2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800fba6:	9307      	str	r3, [sp, #28]
 800fba8:	9b07      	ldr	r3, [sp, #28]
 800fbaa:	9a04      	ldr	r2, [sp, #16]
 800fbac:	4443      	add	r3, r8
 800fbae:	429a      	cmp	r2, r3
 800fbb0:	db2f      	blt.n	800fc12 <__kernel_rem_pio2+0xe2>
 800fbb2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800fbb6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800fbba:	462f      	mov	r7, r5
 800fbbc:	2600      	movs	r6, #0
 800fbbe:	e01b      	b.n	800fbf8 <__kernel_rem_pio2+0xc8>
 800fbc0:	42ef      	cmn	r7, r5
 800fbc2:	d407      	bmi.n	800fbd4 <__kernel_rem_pio2+0xa4>
 800fbc4:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fbc8:	f7f0 fcc4 	bl	8000554 <__aeabi_i2d>
 800fbcc:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fbd0:	3501      	adds	r5, #1
 800fbd2:	e7da      	b.n	800fb8a <__kernel_rem_pio2+0x5a>
 800fbd4:	ec51 0b18 	vmov	r0, r1, d8
 800fbd8:	e7f8      	b.n	800fbcc <__kernel_rem_pio2+0x9c>
 800fbda:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fbde:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fbe2:	f7f0 fd21 	bl	8000628 <__aeabi_dmul>
 800fbe6:	4602      	mov	r2, r0
 800fbe8:	460b      	mov	r3, r1
 800fbea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800fbee:	f7f0 fb65 	bl	80002bc <__adddf3>
 800fbf2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800fbf6:	3601      	adds	r6, #1
 800fbf8:	9b06      	ldr	r3, [sp, #24]
 800fbfa:	429e      	cmp	r6, r3
 800fbfc:	f1a7 0708 	sub.w	r7, r7, #8
 800fc00:	ddeb      	ble.n	800fbda <__kernel_rem_pio2+0xaa>
 800fc02:	ed9d 7b02 	vldr	d7, [sp, #8]
 800fc06:	3508      	adds	r5, #8
 800fc08:	ecab 7b02 	vstmia	fp!, {d7}
 800fc0c:	f108 0801 	add.w	r8, r8, #1
 800fc10:	e7ca      	b.n	800fba8 <__kernel_rem_pio2+0x78>
 800fc12:	9b04      	ldr	r3, [sp, #16]
 800fc14:	aa0c      	add	r2, sp, #48	; 0x30
 800fc16:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fc1a:	930b      	str	r3, [sp, #44]	; 0x2c
 800fc1c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800fc1e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fc22:	9c04      	ldr	r4, [sp, #16]
 800fc24:	930a      	str	r3, [sp, #40]	; 0x28
 800fc26:	ab98      	add	r3, sp, #608	; 0x260
 800fc28:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fc2c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fc30:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 800fc34:	f8cd b008 	str.w	fp, [sp, #8]
 800fc38:	4625      	mov	r5, r4
 800fc3a:	2d00      	cmp	r5, #0
 800fc3c:	dc78      	bgt.n	800fd30 <__kernel_rem_pio2+0x200>
 800fc3e:	ec47 6b10 	vmov	d0, r6, r7
 800fc42:	4650      	mov	r0, sl
 800fc44:	f000 fbfc 	bl	8010440 <scalbn>
 800fc48:	ec57 6b10 	vmov	r6, r7, d0
 800fc4c:	2200      	movs	r2, #0
 800fc4e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fc52:	ee10 0a10 	vmov	r0, s0
 800fc56:	4639      	mov	r1, r7
 800fc58:	f7f0 fce6 	bl	8000628 <__aeabi_dmul>
 800fc5c:	ec41 0b10 	vmov	d0, r0, r1
 800fc60:	f000 fb6e 	bl	8010340 <floor>
 800fc64:	4b7f      	ldr	r3, [pc, #508]	; (800fe64 <__kernel_rem_pio2+0x334>)
 800fc66:	ec51 0b10 	vmov	r0, r1, d0
 800fc6a:	2200      	movs	r2, #0
 800fc6c:	f7f0 fcdc 	bl	8000628 <__aeabi_dmul>
 800fc70:	4602      	mov	r2, r0
 800fc72:	460b      	mov	r3, r1
 800fc74:	4630      	mov	r0, r6
 800fc76:	4639      	mov	r1, r7
 800fc78:	f7f0 fb1e 	bl	80002b8 <__aeabi_dsub>
 800fc7c:	460f      	mov	r7, r1
 800fc7e:	4606      	mov	r6, r0
 800fc80:	f7f0 ff6c 	bl	8000b5c <__aeabi_d2iz>
 800fc84:	9007      	str	r0, [sp, #28]
 800fc86:	f7f0 fc65 	bl	8000554 <__aeabi_i2d>
 800fc8a:	4602      	mov	r2, r0
 800fc8c:	460b      	mov	r3, r1
 800fc8e:	4630      	mov	r0, r6
 800fc90:	4639      	mov	r1, r7
 800fc92:	f7f0 fb11 	bl	80002b8 <__aeabi_dsub>
 800fc96:	f1ba 0f00 	cmp.w	sl, #0
 800fc9a:	4606      	mov	r6, r0
 800fc9c:	460f      	mov	r7, r1
 800fc9e:	dd70      	ble.n	800fd82 <__kernel_rem_pio2+0x252>
 800fca0:	1e62      	subs	r2, r4, #1
 800fca2:	ab0c      	add	r3, sp, #48	; 0x30
 800fca4:	9d07      	ldr	r5, [sp, #28]
 800fca6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fcaa:	f1ca 0118 	rsb	r1, sl, #24
 800fcae:	fa40 f301 	asr.w	r3, r0, r1
 800fcb2:	441d      	add	r5, r3
 800fcb4:	408b      	lsls	r3, r1
 800fcb6:	1ac0      	subs	r0, r0, r3
 800fcb8:	ab0c      	add	r3, sp, #48	; 0x30
 800fcba:	9507      	str	r5, [sp, #28]
 800fcbc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fcc0:	f1ca 0317 	rsb	r3, sl, #23
 800fcc4:	fa40 f303 	asr.w	r3, r0, r3
 800fcc8:	9302      	str	r3, [sp, #8]
 800fcca:	9b02      	ldr	r3, [sp, #8]
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	dd66      	ble.n	800fd9e <__kernel_rem_pio2+0x26e>
 800fcd0:	9b07      	ldr	r3, [sp, #28]
 800fcd2:	2200      	movs	r2, #0
 800fcd4:	3301      	adds	r3, #1
 800fcd6:	9307      	str	r3, [sp, #28]
 800fcd8:	4615      	mov	r5, r2
 800fcda:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fcde:	4294      	cmp	r4, r2
 800fce0:	f300 8099 	bgt.w	800fe16 <__kernel_rem_pio2+0x2e6>
 800fce4:	f1ba 0f00 	cmp.w	sl, #0
 800fce8:	dd07      	ble.n	800fcfa <__kernel_rem_pio2+0x1ca>
 800fcea:	f1ba 0f01 	cmp.w	sl, #1
 800fcee:	f000 80a5 	beq.w	800fe3c <__kernel_rem_pio2+0x30c>
 800fcf2:	f1ba 0f02 	cmp.w	sl, #2
 800fcf6:	f000 80c1 	beq.w	800fe7c <__kernel_rem_pio2+0x34c>
 800fcfa:	9b02      	ldr	r3, [sp, #8]
 800fcfc:	2b02      	cmp	r3, #2
 800fcfe:	d14e      	bne.n	800fd9e <__kernel_rem_pio2+0x26e>
 800fd00:	4632      	mov	r2, r6
 800fd02:	463b      	mov	r3, r7
 800fd04:	4958      	ldr	r1, [pc, #352]	; (800fe68 <__kernel_rem_pio2+0x338>)
 800fd06:	2000      	movs	r0, #0
 800fd08:	f7f0 fad6 	bl	80002b8 <__aeabi_dsub>
 800fd0c:	4606      	mov	r6, r0
 800fd0e:	460f      	mov	r7, r1
 800fd10:	2d00      	cmp	r5, #0
 800fd12:	d044      	beq.n	800fd9e <__kernel_rem_pio2+0x26e>
 800fd14:	4650      	mov	r0, sl
 800fd16:	ed9f 0b50 	vldr	d0, [pc, #320]	; 800fe58 <__kernel_rem_pio2+0x328>
 800fd1a:	f000 fb91 	bl	8010440 <scalbn>
 800fd1e:	4630      	mov	r0, r6
 800fd20:	4639      	mov	r1, r7
 800fd22:	ec53 2b10 	vmov	r2, r3, d0
 800fd26:	f7f0 fac7 	bl	80002b8 <__aeabi_dsub>
 800fd2a:	4606      	mov	r6, r0
 800fd2c:	460f      	mov	r7, r1
 800fd2e:	e036      	b.n	800fd9e <__kernel_rem_pio2+0x26e>
 800fd30:	4b4e      	ldr	r3, [pc, #312]	; (800fe6c <__kernel_rem_pio2+0x33c>)
 800fd32:	2200      	movs	r2, #0
 800fd34:	4630      	mov	r0, r6
 800fd36:	4639      	mov	r1, r7
 800fd38:	f7f0 fc76 	bl	8000628 <__aeabi_dmul>
 800fd3c:	f7f0 ff0e 	bl	8000b5c <__aeabi_d2iz>
 800fd40:	f7f0 fc08 	bl	8000554 <__aeabi_i2d>
 800fd44:	4b4a      	ldr	r3, [pc, #296]	; (800fe70 <__kernel_rem_pio2+0x340>)
 800fd46:	2200      	movs	r2, #0
 800fd48:	4680      	mov	r8, r0
 800fd4a:	4689      	mov	r9, r1
 800fd4c:	f7f0 fc6c 	bl	8000628 <__aeabi_dmul>
 800fd50:	4602      	mov	r2, r0
 800fd52:	460b      	mov	r3, r1
 800fd54:	4630      	mov	r0, r6
 800fd56:	4639      	mov	r1, r7
 800fd58:	f7f0 faae 	bl	80002b8 <__aeabi_dsub>
 800fd5c:	f7f0 fefe 	bl	8000b5c <__aeabi_d2iz>
 800fd60:	9b02      	ldr	r3, [sp, #8]
 800fd62:	f843 0b04 	str.w	r0, [r3], #4
 800fd66:	3d01      	subs	r5, #1
 800fd68:	9302      	str	r3, [sp, #8]
 800fd6a:	ab70      	add	r3, sp, #448	; 0x1c0
 800fd6c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fd70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd74:	4640      	mov	r0, r8
 800fd76:	4649      	mov	r1, r9
 800fd78:	f7f0 faa0 	bl	80002bc <__adddf3>
 800fd7c:	4606      	mov	r6, r0
 800fd7e:	460f      	mov	r7, r1
 800fd80:	e75b      	b.n	800fc3a <__kernel_rem_pio2+0x10a>
 800fd82:	d105      	bne.n	800fd90 <__kernel_rem_pio2+0x260>
 800fd84:	1e63      	subs	r3, r4, #1
 800fd86:	aa0c      	add	r2, sp, #48	; 0x30
 800fd88:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd8c:	15c3      	asrs	r3, r0, #23
 800fd8e:	e79b      	b.n	800fcc8 <__kernel_rem_pio2+0x198>
 800fd90:	4b38      	ldr	r3, [pc, #224]	; (800fe74 <__kernel_rem_pio2+0x344>)
 800fd92:	2200      	movs	r2, #0
 800fd94:	f7f0 fece 	bl	8000b34 <__aeabi_dcmpge>
 800fd98:	2800      	cmp	r0, #0
 800fd9a:	d139      	bne.n	800fe10 <__kernel_rem_pio2+0x2e0>
 800fd9c:	9002      	str	r0, [sp, #8]
 800fd9e:	2200      	movs	r2, #0
 800fda0:	2300      	movs	r3, #0
 800fda2:	4630      	mov	r0, r6
 800fda4:	4639      	mov	r1, r7
 800fda6:	f7f0 fea7 	bl	8000af8 <__aeabi_dcmpeq>
 800fdaa:	2800      	cmp	r0, #0
 800fdac:	f000 80b4 	beq.w	800ff18 <__kernel_rem_pio2+0x3e8>
 800fdb0:	f104 3bff 	add.w	fp, r4, #4294967295
 800fdb4:	465b      	mov	r3, fp
 800fdb6:	2200      	movs	r2, #0
 800fdb8:	9904      	ldr	r1, [sp, #16]
 800fdba:	428b      	cmp	r3, r1
 800fdbc:	da65      	bge.n	800fe8a <__kernel_rem_pio2+0x35a>
 800fdbe:	2a00      	cmp	r2, #0
 800fdc0:	d07b      	beq.n	800feba <__kernel_rem_pio2+0x38a>
 800fdc2:	ab0c      	add	r3, sp, #48	; 0x30
 800fdc4:	f1aa 0a18 	sub.w	sl, sl, #24
 800fdc8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	f000 80a0 	beq.w	800ff12 <__kernel_rem_pio2+0x3e2>
 800fdd2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 800fe58 <__kernel_rem_pio2+0x328>
 800fdd6:	4650      	mov	r0, sl
 800fdd8:	f000 fb32 	bl	8010440 <scalbn>
 800fddc:	4f23      	ldr	r7, [pc, #140]	; (800fe6c <__kernel_rem_pio2+0x33c>)
 800fdde:	ec55 4b10 	vmov	r4, r5, d0
 800fde2:	46d8      	mov	r8, fp
 800fde4:	2600      	movs	r6, #0
 800fde6:	f1b8 0f00 	cmp.w	r8, #0
 800fdea:	f280 80cf 	bge.w	800ff8c <__kernel_rem_pio2+0x45c>
 800fdee:	ed9f 8b18 	vldr	d8, [pc, #96]	; 800fe50 <__kernel_rem_pio2+0x320>
 800fdf2:	465f      	mov	r7, fp
 800fdf4:	f04f 0800 	mov.w	r8, #0
 800fdf8:	2f00      	cmp	r7, #0
 800fdfa:	f2c0 80fd 	blt.w	800fff8 <__kernel_rem_pio2+0x4c8>
 800fdfe:	ab70      	add	r3, sp, #448	; 0x1c0
 800fe00:	f8df a074 	ldr.w	sl, [pc, #116]	; 800fe78 <__kernel_rem_pio2+0x348>
 800fe04:	ec55 4b18 	vmov	r4, r5, d8
 800fe08:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 800fe0c:	2600      	movs	r6, #0
 800fe0e:	e0e5      	b.n	800ffdc <__kernel_rem_pio2+0x4ac>
 800fe10:	2302      	movs	r3, #2
 800fe12:	9302      	str	r3, [sp, #8]
 800fe14:	e75c      	b.n	800fcd0 <__kernel_rem_pio2+0x1a0>
 800fe16:	f8db 3000 	ldr.w	r3, [fp]
 800fe1a:	b955      	cbnz	r5, 800fe32 <__kernel_rem_pio2+0x302>
 800fe1c:	b123      	cbz	r3, 800fe28 <__kernel_rem_pio2+0x2f8>
 800fe1e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fe22:	f8cb 3000 	str.w	r3, [fp]
 800fe26:	2301      	movs	r3, #1
 800fe28:	3201      	adds	r2, #1
 800fe2a:	f10b 0b04 	add.w	fp, fp, #4
 800fe2e:	461d      	mov	r5, r3
 800fe30:	e755      	b.n	800fcde <__kernel_rem_pio2+0x1ae>
 800fe32:	1acb      	subs	r3, r1, r3
 800fe34:	f8cb 3000 	str.w	r3, [fp]
 800fe38:	462b      	mov	r3, r5
 800fe3a:	e7f5      	b.n	800fe28 <__kernel_rem_pio2+0x2f8>
 800fe3c:	1e62      	subs	r2, r4, #1
 800fe3e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe44:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fe48:	a90c      	add	r1, sp, #48	; 0x30
 800fe4a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe4e:	e754      	b.n	800fcfa <__kernel_rem_pio2+0x1ca>
	...
 800fe5c:	3ff00000 	.word	0x3ff00000
 800fe60:	08012808 	.word	0x08012808
 800fe64:	40200000 	.word	0x40200000
 800fe68:	3ff00000 	.word	0x3ff00000
 800fe6c:	3e700000 	.word	0x3e700000
 800fe70:	41700000 	.word	0x41700000
 800fe74:	3fe00000 	.word	0x3fe00000
 800fe78:	080127c8 	.word	0x080127c8
 800fe7c:	1e62      	subs	r2, r4, #1
 800fe7e:	ab0c      	add	r3, sp, #48	; 0x30
 800fe80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe84:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fe88:	e7de      	b.n	800fe48 <__kernel_rem_pio2+0x318>
 800fe8a:	a90c      	add	r1, sp, #48	; 0x30
 800fe8c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fe90:	3b01      	subs	r3, #1
 800fe92:	430a      	orrs	r2, r1
 800fe94:	e790      	b.n	800fdb8 <__kernel_rem_pio2+0x288>
 800fe96:	3301      	adds	r3, #1
 800fe98:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fe9c:	2900      	cmp	r1, #0
 800fe9e:	d0fa      	beq.n	800fe96 <__kernel_rem_pio2+0x366>
 800fea0:	9a08      	ldr	r2, [sp, #32]
 800fea2:	18e3      	adds	r3, r4, r3
 800fea4:	18a6      	adds	r6, r4, r2
 800fea6:	aa20      	add	r2, sp, #128	; 0x80
 800fea8:	1c65      	adds	r5, r4, #1
 800feaa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800feae:	9302      	str	r3, [sp, #8]
 800feb0:	9b02      	ldr	r3, [sp, #8]
 800feb2:	42ab      	cmp	r3, r5
 800feb4:	da04      	bge.n	800fec0 <__kernel_rem_pio2+0x390>
 800feb6:	461c      	mov	r4, r3
 800feb8:	e6b5      	b.n	800fc26 <__kernel_rem_pio2+0xf6>
 800feba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800febc:	2301      	movs	r3, #1
 800febe:	e7eb      	b.n	800fe98 <__kernel_rem_pio2+0x368>
 800fec0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fec2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fec6:	f7f0 fb45 	bl	8000554 <__aeabi_i2d>
 800feca:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fece:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fed0:	46b3      	mov	fp, r6
 800fed2:	461c      	mov	r4, r3
 800fed4:	2700      	movs	r7, #0
 800fed6:	f04f 0800 	mov.w	r8, #0
 800feda:	f04f 0900 	mov.w	r9, #0
 800fede:	9b06      	ldr	r3, [sp, #24]
 800fee0:	429f      	cmp	r7, r3
 800fee2:	dd06      	ble.n	800fef2 <__kernel_rem_pio2+0x3c2>
 800fee4:	ab70      	add	r3, sp, #448	; 0x1c0
 800fee6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800feea:	e9c3 8900 	strd	r8, r9, [r3]
 800feee:	3501      	adds	r5, #1
 800fef0:	e7de      	b.n	800feb0 <__kernel_rem_pio2+0x380>
 800fef2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fef6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800fefa:	f7f0 fb95 	bl	8000628 <__aeabi_dmul>
 800fefe:	4602      	mov	r2, r0
 800ff00:	460b      	mov	r3, r1
 800ff02:	4640      	mov	r0, r8
 800ff04:	4649      	mov	r1, r9
 800ff06:	f7f0 f9d9 	bl	80002bc <__adddf3>
 800ff0a:	3701      	adds	r7, #1
 800ff0c:	4680      	mov	r8, r0
 800ff0e:	4689      	mov	r9, r1
 800ff10:	e7e5      	b.n	800fede <__kernel_rem_pio2+0x3ae>
 800ff12:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ff16:	e754      	b.n	800fdc2 <__kernel_rem_pio2+0x292>
 800ff18:	ec47 6b10 	vmov	d0, r6, r7
 800ff1c:	f1ca 0000 	rsb	r0, sl, #0
 800ff20:	f000 fa8e 	bl	8010440 <scalbn>
 800ff24:	ec57 6b10 	vmov	r6, r7, d0
 800ff28:	4b9f      	ldr	r3, [pc, #636]	; (80101a8 <__kernel_rem_pio2+0x678>)
 800ff2a:	ee10 0a10 	vmov	r0, s0
 800ff2e:	2200      	movs	r2, #0
 800ff30:	4639      	mov	r1, r7
 800ff32:	f7f0 fdff 	bl	8000b34 <__aeabi_dcmpge>
 800ff36:	b300      	cbz	r0, 800ff7a <__kernel_rem_pio2+0x44a>
 800ff38:	4b9c      	ldr	r3, [pc, #624]	; (80101ac <__kernel_rem_pio2+0x67c>)
 800ff3a:	2200      	movs	r2, #0
 800ff3c:	4630      	mov	r0, r6
 800ff3e:	4639      	mov	r1, r7
 800ff40:	f7f0 fb72 	bl	8000628 <__aeabi_dmul>
 800ff44:	f7f0 fe0a 	bl	8000b5c <__aeabi_d2iz>
 800ff48:	4605      	mov	r5, r0
 800ff4a:	f7f0 fb03 	bl	8000554 <__aeabi_i2d>
 800ff4e:	4b96      	ldr	r3, [pc, #600]	; (80101a8 <__kernel_rem_pio2+0x678>)
 800ff50:	2200      	movs	r2, #0
 800ff52:	f7f0 fb69 	bl	8000628 <__aeabi_dmul>
 800ff56:	460b      	mov	r3, r1
 800ff58:	4602      	mov	r2, r0
 800ff5a:	4639      	mov	r1, r7
 800ff5c:	4630      	mov	r0, r6
 800ff5e:	f7f0 f9ab 	bl	80002b8 <__aeabi_dsub>
 800ff62:	f7f0 fdfb 	bl	8000b5c <__aeabi_d2iz>
 800ff66:	f104 0b01 	add.w	fp, r4, #1
 800ff6a:	ab0c      	add	r3, sp, #48	; 0x30
 800ff6c:	f10a 0a18 	add.w	sl, sl, #24
 800ff70:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff74:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 800ff78:	e72b      	b.n	800fdd2 <__kernel_rem_pio2+0x2a2>
 800ff7a:	4630      	mov	r0, r6
 800ff7c:	4639      	mov	r1, r7
 800ff7e:	f7f0 fded 	bl	8000b5c <__aeabi_d2iz>
 800ff82:	ab0c      	add	r3, sp, #48	; 0x30
 800ff84:	46a3      	mov	fp, r4
 800ff86:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff8a:	e722      	b.n	800fdd2 <__kernel_rem_pio2+0x2a2>
 800ff8c:	ab70      	add	r3, sp, #448	; 0x1c0
 800ff8e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 800ff92:	ab0c      	add	r3, sp, #48	; 0x30
 800ff94:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800ff98:	f7f0 fadc 	bl	8000554 <__aeabi_i2d>
 800ff9c:	4622      	mov	r2, r4
 800ff9e:	462b      	mov	r3, r5
 800ffa0:	f7f0 fb42 	bl	8000628 <__aeabi_dmul>
 800ffa4:	4632      	mov	r2, r6
 800ffa6:	e9c9 0100 	strd	r0, r1, [r9]
 800ffaa:	463b      	mov	r3, r7
 800ffac:	4620      	mov	r0, r4
 800ffae:	4629      	mov	r1, r5
 800ffb0:	f7f0 fb3a 	bl	8000628 <__aeabi_dmul>
 800ffb4:	f108 38ff 	add.w	r8, r8, #4294967295
 800ffb8:	4604      	mov	r4, r0
 800ffba:	460d      	mov	r5, r1
 800ffbc:	e713      	b.n	800fde6 <__kernel_rem_pio2+0x2b6>
 800ffbe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ffc2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ffc6:	f7f0 fb2f 	bl	8000628 <__aeabi_dmul>
 800ffca:	4602      	mov	r2, r0
 800ffcc:	460b      	mov	r3, r1
 800ffce:	4620      	mov	r0, r4
 800ffd0:	4629      	mov	r1, r5
 800ffd2:	f7f0 f973 	bl	80002bc <__adddf3>
 800ffd6:	3601      	adds	r6, #1
 800ffd8:	4604      	mov	r4, r0
 800ffda:	460d      	mov	r5, r1
 800ffdc:	9b04      	ldr	r3, [sp, #16]
 800ffde:	429e      	cmp	r6, r3
 800ffe0:	dc01      	bgt.n	800ffe6 <__kernel_rem_pio2+0x4b6>
 800ffe2:	45b0      	cmp	r8, r6
 800ffe4:	daeb      	bge.n	800ffbe <__kernel_rem_pio2+0x48e>
 800ffe6:	ab48      	add	r3, sp, #288	; 0x120
 800ffe8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800ffec:	e9c3 4500 	strd	r4, r5, [r3]
 800fff0:	3f01      	subs	r7, #1
 800fff2:	f108 0801 	add.w	r8, r8, #1
 800fff6:	e6ff      	b.n	800fdf8 <__kernel_rem_pio2+0x2c8>
 800fff8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 800fffa:	2b02      	cmp	r3, #2
 800fffc:	dc0b      	bgt.n	8010016 <__kernel_rem_pio2+0x4e6>
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dc6e      	bgt.n	80100e0 <__kernel_rem_pio2+0x5b0>
 8010002:	d045      	beq.n	8010090 <__kernel_rem_pio2+0x560>
 8010004:	9b07      	ldr	r3, [sp, #28]
 8010006:	f003 0007 	and.w	r0, r3, #7
 801000a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801000e:	ecbd 8b02 	vpop	{d8}
 8010012:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010016:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8010018:	2b03      	cmp	r3, #3
 801001a:	d1f3      	bne.n	8010004 <__kernel_rem_pio2+0x4d4>
 801001c:	ab48      	add	r3, sp, #288	; 0x120
 801001e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8010022:	46d0      	mov	r8, sl
 8010024:	46d9      	mov	r9, fp
 8010026:	f1b9 0f00 	cmp.w	r9, #0
 801002a:	f1a8 0808 	sub.w	r8, r8, #8
 801002e:	dc64      	bgt.n	80100fa <__kernel_rem_pio2+0x5ca>
 8010030:	465c      	mov	r4, fp
 8010032:	2c01      	cmp	r4, #1
 8010034:	f1aa 0a08 	sub.w	sl, sl, #8
 8010038:	dc7e      	bgt.n	8010138 <__kernel_rem_pio2+0x608>
 801003a:	2000      	movs	r0, #0
 801003c:	2100      	movs	r1, #0
 801003e:	f1bb 0f01 	cmp.w	fp, #1
 8010042:	f300 8097 	bgt.w	8010174 <__kernel_rem_pio2+0x644>
 8010046:	9b02      	ldr	r3, [sp, #8]
 8010048:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801004c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8010050:	2b00      	cmp	r3, #0
 8010052:	f040 8099 	bne.w	8010188 <__kernel_rem_pio2+0x658>
 8010056:	9b01      	ldr	r3, [sp, #4]
 8010058:	e9c3 5600 	strd	r5, r6, [r3]
 801005c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010060:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010064:	e7ce      	b.n	8010004 <__kernel_rem_pio2+0x4d4>
 8010066:	ab48      	add	r3, sp, #288	; 0x120
 8010068:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801006c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010070:	f7f0 f924 	bl	80002bc <__adddf3>
 8010074:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010078:	f1bb 0f00 	cmp.w	fp, #0
 801007c:	daf3      	bge.n	8010066 <__kernel_rem_pio2+0x536>
 801007e:	9b02      	ldr	r3, [sp, #8]
 8010080:	b113      	cbz	r3, 8010088 <__kernel_rem_pio2+0x558>
 8010082:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010086:	4619      	mov	r1, r3
 8010088:	9b01      	ldr	r3, [sp, #4]
 801008a:	e9c3 0100 	strd	r0, r1, [r3]
 801008e:	e7b9      	b.n	8010004 <__kernel_rem_pio2+0x4d4>
 8010090:	2000      	movs	r0, #0
 8010092:	2100      	movs	r1, #0
 8010094:	e7f0      	b.n	8010078 <__kernel_rem_pio2+0x548>
 8010096:	ab48      	add	r3, sp, #288	; 0x120
 8010098:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801009c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100a0:	f7f0 f90c 	bl	80002bc <__adddf3>
 80100a4:	3c01      	subs	r4, #1
 80100a6:	2c00      	cmp	r4, #0
 80100a8:	daf5      	bge.n	8010096 <__kernel_rem_pio2+0x566>
 80100aa:	9b02      	ldr	r3, [sp, #8]
 80100ac:	b1e3      	cbz	r3, 80100e8 <__kernel_rem_pio2+0x5b8>
 80100ae:	4602      	mov	r2, r0
 80100b0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100b4:	9c01      	ldr	r4, [sp, #4]
 80100b6:	e9c4 2300 	strd	r2, r3, [r4]
 80100ba:	4602      	mov	r2, r0
 80100bc:	460b      	mov	r3, r1
 80100be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 80100c2:	f7f0 f8f9 	bl	80002b8 <__aeabi_dsub>
 80100c6:	ad4a      	add	r5, sp, #296	; 0x128
 80100c8:	2401      	movs	r4, #1
 80100ca:	45a3      	cmp	fp, r4
 80100cc:	da0f      	bge.n	80100ee <__kernel_rem_pio2+0x5be>
 80100ce:	9b02      	ldr	r3, [sp, #8]
 80100d0:	b113      	cbz	r3, 80100d8 <__kernel_rem_pio2+0x5a8>
 80100d2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80100d6:	4619      	mov	r1, r3
 80100d8:	9b01      	ldr	r3, [sp, #4]
 80100da:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80100de:	e791      	b.n	8010004 <__kernel_rem_pio2+0x4d4>
 80100e0:	465c      	mov	r4, fp
 80100e2:	2000      	movs	r0, #0
 80100e4:	2100      	movs	r1, #0
 80100e6:	e7de      	b.n	80100a6 <__kernel_rem_pio2+0x576>
 80100e8:	4602      	mov	r2, r0
 80100ea:	460b      	mov	r3, r1
 80100ec:	e7e2      	b.n	80100b4 <__kernel_rem_pio2+0x584>
 80100ee:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 80100f2:	f7f0 f8e3 	bl	80002bc <__adddf3>
 80100f6:	3401      	adds	r4, #1
 80100f8:	e7e7      	b.n	80100ca <__kernel_rem_pio2+0x59a>
 80100fa:	e9d8 4500 	ldrd	r4, r5, [r8]
 80100fe:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8010102:	4620      	mov	r0, r4
 8010104:	4632      	mov	r2, r6
 8010106:	463b      	mov	r3, r7
 8010108:	4629      	mov	r1, r5
 801010a:	f7f0 f8d7 	bl	80002bc <__adddf3>
 801010e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010112:	4602      	mov	r2, r0
 8010114:	460b      	mov	r3, r1
 8010116:	4620      	mov	r0, r4
 8010118:	4629      	mov	r1, r5
 801011a:	f7f0 f8cd 	bl	80002b8 <__aeabi_dsub>
 801011e:	4632      	mov	r2, r6
 8010120:	463b      	mov	r3, r7
 8010122:	f7f0 f8cb 	bl	80002bc <__adddf3>
 8010126:	ed9d 7b04 	vldr	d7, [sp, #16]
 801012a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801012e:	ed88 7b00 	vstr	d7, [r8]
 8010132:	f109 39ff 	add.w	r9, r9, #4294967295
 8010136:	e776      	b.n	8010026 <__kernel_rem_pio2+0x4f6>
 8010138:	e9da 8900 	ldrd	r8, r9, [sl]
 801013c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8010140:	4640      	mov	r0, r8
 8010142:	4632      	mov	r2, r6
 8010144:	463b      	mov	r3, r7
 8010146:	4649      	mov	r1, r9
 8010148:	f7f0 f8b8 	bl	80002bc <__adddf3>
 801014c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8010150:	4602      	mov	r2, r0
 8010152:	460b      	mov	r3, r1
 8010154:	4640      	mov	r0, r8
 8010156:	4649      	mov	r1, r9
 8010158:	f7f0 f8ae 	bl	80002b8 <__aeabi_dsub>
 801015c:	4632      	mov	r2, r6
 801015e:	463b      	mov	r3, r7
 8010160:	f7f0 f8ac 	bl	80002bc <__adddf3>
 8010164:	ed9d 7b04 	vldr	d7, [sp, #16]
 8010168:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801016c:	ed8a 7b00 	vstr	d7, [sl]
 8010170:	3c01      	subs	r4, #1
 8010172:	e75e      	b.n	8010032 <__kernel_rem_pio2+0x502>
 8010174:	ab48      	add	r3, sp, #288	; 0x120
 8010176:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801017a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801017e:	f7f0 f89d 	bl	80002bc <__adddf3>
 8010182:	f10b 3bff 	add.w	fp, fp, #4294967295
 8010186:	e75a      	b.n	801003e <__kernel_rem_pio2+0x50e>
 8010188:	9b01      	ldr	r3, [sp, #4]
 801018a:	9a01      	ldr	r2, [sp, #4]
 801018c:	601d      	str	r5, [r3, #0]
 801018e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010192:	605c      	str	r4, [r3, #4]
 8010194:	609f      	str	r7, [r3, #8]
 8010196:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801019a:	60d3      	str	r3, [r2, #12]
 801019c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80101a0:	6110      	str	r0, [r2, #16]
 80101a2:	6153      	str	r3, [r2, #20]
 80101a4:	e72e      	b.n	8010004 <__kernel_rem_pio2+0x4d4>
 80101a6:	bf00      	nop
 80101a8:	41700000 	.word	0x41700000
 80101ac:	3e700000 	.word	0x3e700000

080101b0 <__kernel_sin>:
 80101b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80101b4:	ed2d 8b04 	vpush	{d8-d9}
 80101b8:	eeb0 8a41 	vmov.f32	s16, s2
 80101bc:	eef0 8a61 	vmov.f32	s17, s3
 80101c0:	ec55 4b10 	vmov	r4, r5, d0
 80101c4:	b083      	sub	sp, #12
 80101c6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80101ca:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80101ce:	9001      	str	r0, [sp, #4]
 80101d0:	da06      	bge.n	80101e0 <__kernel_sin+0x30>
 80101d2:	ee10 0a10 	vmov	r0, s0
 80101d6:	4629      	mov	r1, r5
 80101d8:	f7f0 fcc0 	bl	8000b5c <__aeabi_d2iz>
 80101dc:	2800      	cmp	r0, #0
 80101de:	d051      	beq.n	8010284 <__kernel_sin+0xd4>
 80101e0:	4622      	mov	r2, r4
 80101e2:	462b      	mov	r3, r5
 80101e4:	4620      	mov	r0, r4
 80101e6:	4629      	mov	r1, r5
 80101e8:	f7f0 fa1e 	bl	8000628 <__aeabi_dmul>
 80101ec:	4682      	mov	sl, r0
 80101ee:	468b      	mov	fp, r1
 80101f0:	4602      	mov	r2, r0
 80101f2:	460b      	mov	r3, r1
 80101f4:	4620      	mov	r0, r4
 80101f6:	4629      	mov	r1, r5
 80101f8:	f7f0 fa16 	bl	8000628 <__aeabi_dmul>
 80101fc:	a341      	add	r3, pc, #260	; (adr r3, 8010304 <__kernel_sin+0x154>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	4680      	mov	r8, r0
 8010204:	4689      	mov	r9, r1
 8010206:	4650      	mov	r0, sl
 8010208:	4659      	mov	r1, fp
 801020a:	f7f0 fa0d 	bl	8000628 <__aeabi_dmul>
 801020e:	a33f      	add	r3, pc, #252	; (adr r3, 801030c <__kernel_sin+0x15c>)
 8010210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010214:	f7f0 f850 	bl	80002b8 <__aeabi_dsub>
 8010218:	4652      	mov	r2, sl
 801021a:	465b      	mov	r3, fp
 801021c:	f7f0 fa04 	bl	8000628 <__aeabi_dmul>
 8010220:	a33c      	add	r3, pc, #240	; (adr r3, 8010314 <__kernel_sin+0x164>)
 8010222:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010226:	f7f0 f849 	bl	80002bc <__adddf3>
 801022a:	4652      	mov	r2, sl
 801022c:	465b      	mov	r3, fp
 801022e:	f7f0 f9fb 	bl	8000628 <__aeabi_dmul>
 8010232:	a33a      	add	r3, pc, #232	; (adr r3, 801031c <__kernel_sin+0x16c>)
 8010234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010238:	f7f0 f83e 	bl	80002b8 <__aeabi_dsub>
 801023c:	4652      	mov	r2, sl
 801023e:	465b      	mov	r3, fp
 8010240:	f7f0 f9f2 	bl	8000628 <__aeabi_dmul>
 8010244:	a337      	add	r3, pc, #220	; (adr r3, 8010324 <__kernel_sin+0x174>)
 8010246:	e9d3 2300 	ldrd	r2, r3, [r3]
 801024a:	f7f0 f837 	bl	80002bc <__adddf3>
 801024e:	9b01      	ldr	r3, [sp, #4]
 8010250:	4606      	mov	r6, r0
 8010252:	460f      	mov	r7, r1
 8010254:	b9eb      	cbnz	r3, 8010292 <__kernel_sin+0xe2>
 8010256:	4602      	mov	r2, r0
 8010258:	460b      	mov	r3, r1
 801025a:	4650      	mov	r0, sl
 801025c:	4659      	mov	r1, fp
 801025e:	f7f0 f9e3 	bl	8000628 <__aeabi_dmul>
 8010262:	a325      	add	r3, pc, #148	; (adr r3, 80102f8 <__kernel_sin+0x148>)
 8010264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010268:	f7f0 f826 	bl	80002b8 <__aeabi_dsub>
 801026c:	4642      	mov	r2, r8
 801026e:	464b      	mov	r3, r9
 8010270:	f7f0 f9da 	bl	8000628 <__aeabi_dmul>
 8010274:	4602      	mov	r2, r0
 8010276:	460b      	mov	r3, r1
 8010278:	4620      	mov	r0, r4
 801027a:	4629      	mov	r1, r5
 801027c:	f7f0 f81e 	bl	80002bc <__adddf3>
 8010280:	4604      	mov	r4, r0
 8010282:	460d      	mov	r5, r1
 8010284:	ec45 4b10 	vmov	d0, r4, r5
 8010288:	b003      	add	sp, #12
 801028a:	ecbd 8b04 	vpop	{d8-d9}
 801028e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010292:	4b1b      	ldr	r3, [pc, #108]	; (8010300 <__kernel_sin+0x150>)
 8010294:	ec51 0b18 	vmov	r0, r1, d8
 8010298:	2200      	movs	r2, #0
 801029a:	f7f0 f9c5 	bl	8000628 <__aeabi_dmul>
 801029e:	4632      	mov	r2, r6
 80102a0:	ec41 0b19 	vmov	d9, r0, r1
 80102a4:	463b      	mov	r3, r7
 80102a6:	4640      	mov	r0, r8
 80102a8:	4649      	mov	r1, r9
 80102aa:	f7f0 f9bd 	bl	8000628 <__aeabi_dmul>
 80102ae:	4602      	mov	r2, r0
 80102b0:	460b      	mov	r3, r1
 80102b2:	ec51 0b19 	vmov	r0, r1, d9
 80102b6:	f7ef ffff 	bl	80002b8 <__aeabi_dsub>
 80102ba:	4652      	mov	r2, sl
 80102bc:	465b      	mov	r3, fp
 80102be:	f7f0 f9b3 	bl	8000628 <__aeabi_dmul>
 80102c2:	ec53 2b18 	vmov	r2, r3, d8
 80102c6:	f7ef fff7 	bl	80002b8 <__aeabi_dsub>
 80102ca:	a30b      	add	r3, pc, #44	; (adr r3, 80102f8 <__kernel_sin+0x148>)
 80102cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80102d0:	4606      	mov	r6, r0
 80102d2:	460f      	mov	r7, r1
 80102d4:	4640      	mov	r0, r8
 80102d6:	4649      	mov	r1, r9
 80102d8:	f7f0 f9a6 	bl	8000628 <__aeabi_dmul>
 80102dc:	4602      	mov	r2, r0
 80102de:	460b      	mov	r3, r1
 80102e0:	4630      	mov	r0, r6
 80102e2:	4639      	mov	r1, r7
 80102e4:	f7ef ffea 	bl	80002bc <__adddf3>
 80102e8:	4602      	mov	r2, r0
 80102ea:	460b      	mov	r3, r1
 80102ec:	4620      	mov	r0, r4
 80102ee:	4629      	mov	r1, r5
 80102f0:	f7ef ffe2 	bl	80002b8 <__aeabi_dsub>
 80102f4:	e7c4      	b.n	8010280 <__kernel_sin+0xd0>
 80102f6:	bf00      	nop
 80102f8:	55555549 	.word	0x55555549
 80102fc:	3fc55555 	.word	0x3fc55555
 8010300:	3fe00000 	.word	0x3fe00000
 8010304:	5acfd57c 	.word	0x5acfd57c
 8010308:	3de5d93a 	.word	0x3de5d93a
 801030c:	8a2b9ceb 	.word	0x8a2b9ceb
 8010310:	3e5ae5e6 	.word	0x3e5ae5e6
 8010314:	57b1fe7d 	.word	0x57b1fe7d
 8010318:	3ec71de3 	.word	0x3ec71de3
 801031c:	19c161d5 	.word	0x19c161d5
 8010320:	3f2a01a0 	.word	0x3f2a01a0
 8010324:	1110f8a6 	.word	0x1110f8a6
 8010328:	3f811111 	.word	0x3f811111

0801032c <fabs>:
 801032c:	ec51 0b10 	vmov	r0, r1, d0
 8010330:	ee10 2a10 	vmov	r2, s0
 8010334:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8010338:	ec43 2b10 	vmov	d0, r2, r3
 801033c:	4770      	bx	lr
	...

08010340 <floor>:
 8010340:	ec51 0b10 	vmov	r0, r1, d0
 8010344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010348:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801034c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010350:	2e13      	cmp	r6, #19
 8010352:	ee10 5a10 	vmov	r5, s0
 8010356:	ee10 8a10 	vmov	r8, s0
 801035a:	460c      	mov	r4, r1
 801035c:	dc32      	bgt.n	80103c4 <floor+0x84>
 801035e:	2e00      	cmp	r6, #0
 8010360:	da14      	bge.n	801038c <floor+0x4c>
 8010362:	a333      	add	r3, pc, #204	; (adr r3, 8010430 <floor+0xf0>)
 8010364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010368:	f7ef ffa8 	bl	80002bc <__adddf3>
 801036c:	2200      	movs	r2, #0
 801036e:	2300      	movs	r3, #0
 8010370:	f7f0 fbea 	bl	8000b48 <__aeabi_dcmpgt>
 8010374:	b138      	cbz	r0, 8010386 <floor+0x46>
 8010376:	2c00      	cmp	r4, #0
 8010378:	da57      	bge.n	801042a <floor+0xea>
 801037a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 801037e:	431d      	orrs	r5, r3
 8010380:	d001      	beq.n	8010386 <floor+0x46>
 8010382:	4c2d      	ldr	r4, [pc, #180]	; (8010438 <floor+0xf8>)
 8010384:	2500      	movs	r5, #0
 8010386:	4621      	mov	r1, r4
 8010388:	4628      	mov	r0, r5
 801038a:	e025      	b.n	80103d8 <floor+0x98>
 801038c:	4f2b      	ldr	r7, [pc, #172]	; (801043c <floor+0xfc>)
 801038e:	4137      	asrs	r7, r6
 8010390:	ea01 0307 	and.w	r3, r1, r7
 8010394:	4303      	orrs	r3, r0
 8010396:	d01f      	beq.n	80103d8 <floor+0x98>
 8010398:	a325      	add	r3, pc, #148	; (adr r3, 8010430 <floor+0xf0>)
 801039a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801039e:	f7ef ff8d 	bl	80002bc <__adddf3>
 80103a2:	2200      	movs	r2, #0
 80103a4:	2300      	movs	r3, #0
 80103a6:	f7f0 fbcf 	bl	8000b48 <__aeabi_dcmpgt>
 80103aa:	2800      	cmp	r0, #0
 80103ac:	d0eb      	beq.n	8010386 <floor+0x46>
 80103ae:	2c00      	cmp	r4, #0
 80103b0:	bfbe      	ittt	lt
 80103b2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80103b6:	fa43 f606 	asrlt.w	r6, r3, r6
 80103ba:	19a4      	addlt	r4, r4, r6
 80103bc:	ea24 0407 	bic.w	r4, r4, r7
 80103c0:	2500      	movs	r5, #0
 80103c2:	e7e0      	b.n	8010386 <floor+0x46>
 80103c4:	2e33      	cmp	r6, #51	; 0x33
 80103c6:	dd0b      	ble.n	80103e0 <floor+0xa0>
 80103c8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80103cc:	d104      	bne.n	80103d8 <floor+0x98>
 80103ce:	ee10 2a10 	vmov	r2, s0
 80103d2:	460b      	mov	r3, r1
 80103d4:	f7ef ff72 	bl	80002bc <__adddf3>
 80103d8:	ec41 0b10 	vmov	d0, r0, r1
 80103dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80103e0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80103e4:	f04f 33ff 	mov.w	r3, #4294967295
 80103e8:	fa23 f707 	lsr.w	r7, r3, r7
 80103ec:	4207      	tst	r7, r0
 80103ee:	d0f3      	beq.n	80103d8 <floor+0x98>
 80103f0:	a30f      	add	r3, pc, #60	; (adr r3, 8010430 <floor+0xf0>)
 80103f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103f6:	f7ef ff61 	bl	80002bc <__adddf3>
 80103fa:	2200      	movs	r2, #0
 80103fc:	2300      	movs	r3, #0
 80103fe:	f7f0 fba3 	bl	8000b48 <__aeabi_dcmpgt>
 8010402:	2800      	cmp	r0, #0
 8010404:	d0bf      	beq.n	8010386 <floor+0x46>
 8010406:	2c00      	cmp	r4, #0
 8010408:	da02      	bge.n	8010410 <floor+0xd0>
 801040a:	2e14      	cmp	r6, #20
 801040c:	d103      	bne.n	8010416 <floor+0xd6>
 801040e:	3401      	adds	r4, #1
 8010410:	ea25 0507 	bic.w	r5, r5, r7
 8010414:	e7b7      	b.n	8010386 <floor+0x46>
 8010416:	2301      	movs	r3, #1
 8010418:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801041c:	fa03 f606 	lsl.w	r6, r3, r6
 8010420:	4435      	add	r5, r6
 8010422:	4545      	cmp	r5, r8
 8010424:	bf38      	it	cc
 8010426:	18e4      	addcc	r4, r4, r3
 8010428:	e7f2      	b.n	8010410 <floor+0xd0>
 801042a:	2500      	movs	r5, #0
 801042c:	462c      	mov	r4, r5
 801042e:	e7aa      	b.n	8010386 <floor+0x46>
 8010430:	8800759c 	.word	0x8800759c
 8010434:	7e37e43c 	.word	0x7e37e43c
 8010438:	bff00000 	.word	0xbff00000
 801043c:	000fffff 	.word	0x000fffff

08010440 <scalbn>:
 8010440:	b570      	push	{r4, r5, r6, lr}
 8010442:	ec55 4b10 	vmov	r4, r5, d0
 8010446:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801044a:	4606      	mov	r6, r0
 801044c:	462b      	mov	r3, r5
 801044e:	b99a      	cbnz	r2, 8010478 <scalbn+0x38>
 8010450:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010454:	4323      	orrs	r3, r4
 8010456:	d036      	beq.n	80104c6 <scalbn+0x86>
 8010458:	4b39      	ldr	r3, [pc, #228]	; (8010540 <scalbn+0x100>)
 801045a:	4629      	mov	r1, r5
 801045c:	ee10 0a10 	vmov	r0, s0
 8010460:	2200      	movs	r2, #0
 8010462:	f7f0 f8e1 	bl	8000628 <__aeabi_dmul>
 8010466:	4b37      	ldr	r3, [pc, #220]	; (8010544 <scalbn+0x104>)
 8010468:	429e      	cmp	r6, r3
 801046a:	4604      	mov	r4, r0
 801046c:	460d      	mov	r5, r1
 801046e:	da10      	bge.n	8010492 <scalbn+0x52>
 8010470:	a32b      	add	r3, pc, #172	; (adr r3, 8010520 <scalbn+0xe0>)
 8010472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010476:	e03a      	b.n	80104ee <scalbn+0xae>
 8010478:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801047c:	428a      	cmp	r2, r1
 801047e:	d10c      	bne.n	801049a <scalbn+0x5a>
 8010480:	ee10 2a10 	vmov	r2, s0
 8010484:	4620      	mov	r0, r4
 8010486:	4629      	mov	r1, r5
 8010488:	f7ef ff18 	bl	80002bc <__adddf3>
 801048c:	4604      	mov	r4, r0
 801048e:	460d      	mov	r5, r1
 8010490:	e019      	b.n	80104c6 <scalbn+0x86>
 8010492:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8010496:	460b      	mov	r3, r1
 8010498:	3a36      	subs	r2, #54	; 0x36
 801049a:	4432      	add	r2, r6
 801049c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80104a0:	428a      	cmp	r2, r1
 80104a2:	dd08      	ble.n	80104b6 <scalbn+0x76>
 80104a4:	2d00      	cmp	r5, #0
 80104a6:	a120      	add	r1, pc, #128	; (adr r1, 8010528 <scalbn+0xe8>)
 80104a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104ac:	da1c      	bge.n	80104e8 <scalbn+0xa8>
 80104ae:	a120      	add	r1, pc, #128	; (adr r1, 8010530 <scalbn+0xf0>)
 80104b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b4:	e018      	b.n	80104e8 <scalbn+0xa8>
 80104b6:	2a00      	cmp	r2, #0
 80104b8:	dd08      	ble.n	80104cc <scalbn+0x8c>
 80104ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80104be:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80104c2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80104c6:	ec45 4b10 	vmov	d0, r4, r5
 80104ca:	bd70      	pop	{r4, r5, r6, pc}
 80104cc:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80104d0:	da19      	bge.n	8010506 <scalbn+0xc6>
 80104d2:	f24c 3350 	movw	r3, #50000	; 0xc350
 80104d6:	429e      	cmp	r6, r3
 80104d8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 80104dc:	dd0a      	ble.n	80104f4 <scalbn+0xb4>
 80104de:	a112      	add	r1, pc, #72	; (adr r1, 8010528 <scalbn+0xe8>)
 80104e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104e4:	2b00      	cmp	r3, #0
 80104e6:	d1e2      	bne.n	80104ae <scalbn+0x6e>
 80104e8:	a30f      	add	r3, pc, #60	; (adr r3, 8010528 <scalbn+0xe8>)
 80104ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104ee:	f7f0 f89b 	bl	8000628 <__aeabi_dmul>
 80104f2:	e7cb      	b.n	801048c <scalbn+0x4c>
 80104f4:	a10a      	add	r1, pc, #40	; (adr r1, 8010520 <scalbn+0xe0>)
 80104f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104fa:	2b00      	cmp	r3, #0
 80104fc:	d0b8      	beq.n	8010470 <scalbn+0x30>
 80104fe:	a10e      	add	r1, pc, #56	; (adr r1, 8010538 <scalbn+0xf8>)
 8010500:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010504:	e7b4      	b.n	8010470 <scalbn+0x30>
 8010506:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801050a:	3236      	adds	r2, #54	; 0x36
 801050c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8010510:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8010514:	4620      	mov	r0, r4
 8010516:	4b0c      	ldr	r3, [pc, #48]	; (8010548 <scalbn+0x108>)
 8010518:	2200      	movs	r2, #0
 801051a:	e7e8      	b.n	80104ee <scalbn+0xae>
 801051c:	f3af 8000 	nop.w
 8010520:	c2f8f359 	.word	0xc2f8f359
 8010524:	01a56e1f 	.word	0x01a56e1f
 8010528:	8800759c 	.word	0x8800759c
 801052c:	7e37e43c 	.word	0x7e37e43c
 8010530:	8800759c 	.word	0x8800759c
 8010534:	fe37e43c 	.word	0xfe37e43c
 8010538:	c2f8f359 	.word	0xc2f8f359
 801053c:	81a56e1f 	.word	0x81a56e1f
 8010540:	43500000 	.word	0x43500000
 8010544:	ffff3cb0 	.word	0xffff3cb0
 8010548:	3c900000 	.word	0x3c900000

0801054c <_init>:
 801054c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801054e:	bf00      	nop
 8010550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010552:	bc08      	pop	{r3}
 8010554:	469e      	mov	lr, r3
 8010556:	4770      	bx	lr

08010558 <_fini>:
 8010558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801055a:	bf00      	nop
 801055c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801055e:	bc08      	pop	{r3}
 8010560:	469e      	mov	lr, r3
 8010562:	4770      	bx	lr

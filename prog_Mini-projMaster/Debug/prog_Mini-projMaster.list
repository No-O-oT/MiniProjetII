
prog_Mini-projMaster.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e4ec  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000206c  0800e6bc  0800e6bc  0001e6bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010728  08010728  000300c4  2**0
                  CONTENTS
  4 .ARM          00000008  08010728  08010728  00020728  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010730  08010730  000300c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010730  08010730  00020730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010734  08010734  00020734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c4  20000000  08010738  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c84  200000c4  080107fc  000300c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20008d48  080107fc  00038d48  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002c94f  00000000  00000000  000300f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005533  00000000  00000000  0005ca43  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000025f0  00000000  00000000  00061f78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00002358  00000000  00000000  00064568  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002e203  00000000  00000000  000668c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0001f55d  00000000  00000000  00094ac3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00114b33  00000000  00000000  000b4020  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001c8b53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a380  00000000  00000000  001c8bd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000c4 	.word	0x200000c4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800e6a4 	.word	0x0800e6a4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000c8 	.word	0x200000c8
 800020c:	0800e6a4 	.word	0x0800e6a4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b972 	b.w	80005ac <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	4688      	mov	r8, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14b      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4615      	mov	r5, r2
 80002f2:	d967      	bls.n	80003c4 <__udivmoddi4+0xe4>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b14a      	cbz	r2, 800030e <__udivmoddi4+0x2e>
 80002fa:	f1c2 0720 	rsb	r7, r2, #32
 80002fe:	fa01 f302 	lsl.w	r3, r1, r2
 8000302:	fa20 f707 	lsr.w	r7, r0, r7
 8000306:	4095      	lsls	r5, r2
 8000308:	ea47 0803 	orr.w	r8, r7, r3
 800030c:	4094      	lsls	r4, r2
 800030e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000312:	0c23      	lsrs	r3, r4, #16
 8000314:	fbb8 f7fe 	udiv	r7, r8, lr
 8000318:	fa1f fc85 	uxth.w	ip, r5
 800031c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000320:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000324:	fb07 f10c 	mul.w	r1, r7, ip
 8000328:	4299      	cmp	r1, r3
 800032a:	d909      	bls.n	8000340 <__udivmoddi4+0x60>
 800032c:	18eb      	adds	r3, r5, r3
 800032e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000332:	f080 811b 	bcs.w	800056c <__udivmoddi4+0x28c>
 8000336:	4299      	cmp	r1, r3
 8000338:	f240 8118 	bls.w	800056c <__udivmoddi4+0x28c>
 800033c:	3f02      	subs	r7, #2
 800033e:	442b      	add	r3, r5
 8000340:	1a5b      	subs	r3, r3, r1
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb3 f0fe 	udiv	r0, r3, lr
 8000348:	fb0e 3310 	mls	r3, lr, r0, r3
 800034c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000350:	fb00 fc0c 	mul.w	ip, r0, ip
 8000354:	45a4      	cmp	ip, r4
 8000356:	d909      	bls.n	800036c <__udivmoddi4+0x8c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	f080 8107 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000362:	45a4      	cmp	ip, r4
 8000364:	f240 8104 	bls.w	8000570 <__udivmoddi4+0x290>
 8000368:	3802      	subs	r0, #2
 800036a:	442c      	add	r4, r5
 800036c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000370:	eba4 040c 	sub.w	r4, r4, ip
 8000374:	2700      	movs	r7, #0
 8000376:	b11e      	cbz	r6, 8000380 <__udivmoddi4+0xa0>
 8000378:	40d4      	lsrs	r4, r2
 800037a:	2300      	movs	r3, #0
 800037c:	e9c6 4300 	strd	r4, r3, [r6]
 8000380:	4639      	mov	r1, r7
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d909      	bls.n	800039e <__udivmoddi4+0xbe>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80eb 	beq.w	8000566 <__udivmoddi4+0x286>
 8000390:	2700      	movs	r7, #0
 8000392:	e9c6 0100 	strd	r0, r1, [r6]
 8000396:	4638      	mov	r0, r7
 8000398:	4639      	mov	r1, r7
 800039a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039e:	fab3 f783 	clz	r7, r3
 80003a2:	2f00      	cmp	r7, #0
 80003a4:	d147      	bne.n	8000436 <__udivmoddi4+0x156>
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d302      	bcc.n	80003b0 <__udivmoddi4+0xd0>
 80003aa:	4282      	cmp	r2, r0
 80003ac:	f200 80fa 	bhi.w	80005a4 <__udivmoddi4+0x2c4>
 80003b0:	1a84      	subs	r4, r0, r2
 80003b2:	eb61 0303 	sbc.w	r3, r1, r3
 80003b6:	2001      	movs	r0, #1
 80003b8:	4698      	mov	r8, r3
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	d0e0      	beq.n	8000380 <__udivmoddi4+0xa0>
 80003be:	e9c6 4800 	strd	r4, r8, [r6]
 80003c2:	e7dd      	b.n	8000380 <__udivmoddi4+0xa0>
 80003c4:	b902      	cbnz	r2, 80003c8 <__udivmoddi4+0xe8>
 80003c6:	deff      	udf	#255	; 0xff
 80003c8:	fab2 f282 	clz	r2, r2
 80003cc:	2a00      	cmp	r2, #0
 80003ce:	f040 808f 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d2:	1b49      	subs	r1, r1, r5
 80003d4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80003d8:	fa1f f885 	uxth.w	r8, r5
 80003dc:	2701      	movs	r7, #1
 80003de:	fbb1 fcfe 	udiv	ip, r1, lr
 80003e2:	0c23      	lsrs	r3, r4, #16
 80003e4:	fb0e 111c 	mls	r1, lr, ip, r1
 80003e8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003ec:	fb08 f10c 	mul.w	r1, r8, ip
 80003f0:	4299      	cmp	r1, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f4:	18eb      	adds	r3, r5, r3
 80003f6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4299      	cmp	r1, r3
 80003fe:	f200 80cd 	bhi.w	800059c <__udivmoddi4+0x2bc>
 8000402:	4684      	mov	ip, r0
 8000404:	1a59      	subs	r1, r3, r1
 8000406:	b2a3      	uxth	r3, r4
 8000408:	fbb1 f0fe 	udiv	r0, r1, lr
 800040c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000410:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000414:	fb08 f800 	mul.w	r8, r8, r0
 8000418:	45a0      	cmp	r8, r4
 800041a:	d907      	bls.n	800042c <__udivmoddi4+0x14c>
 800041c:	192c      	adds	r4, r5, r4
 800041e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x14a>
 8000424:	45a0      	cmp	r8, r4
 8000426:	f200 80b6 	bhi.w	8000596 <__udivmoddi4+0x2b6>
 800042a:	4618      	mov	r0, r3
 800042c:	eba4 0408 	sub.w	r4, r4, r8
 8000430:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000434:	e79f      	b.n	8000376 <__udivmoddi4+0x96>
 8000436:	f1c7 0c20 	rsb	ip, r7, #32
 800043a:	40bb      	lsls	r3, r7
 800043c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000440:	ea4e 0e03 	orr.w	lr, lr, r3
 8000444:	fa01 f407 	lsl.w	r4, r1, r7
 8000448:	fa20 f50c 	lsr.w	r5, r0, ip
 800044c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000450:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000454:	4325      	orrs	r5, r4
 8000456:	fbb3 f9f8 	udiv	r9, r3, r8
 800045a:	0c2c      	lsrs	r4, r5, #16
 800045c:	fb08 3319 	mls	r3, r8, r9, r3
 8000460:	fa1f fa8e 	uxth.w	sl, lr
 8000464:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000468:	fb09 f40a 	mul.w	r4, r9, sl
 800046c:	429c      	cmp	r4, r3
 800046e:	fa02 f207 	lsl.w	r2, r2, r7
 8000472:	fa00 f107 	lsl.w	r1, r0, r7
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1e 0303 	adds.w	r3, lr, r3
 800047c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000480:	f080 8087 	bcs.w	8000592 <__udivmoddi4+0x2b2>
 8000484:	429c      	cmp	r4, r3
 8000486:	f240 8084 	bls.w	8000592 <__udivmoddi4+0x2b2>
 800048a:	f1a9 0902 	sub.w	r9, r9, #2
 800048e:	4473      	add	r3, lr
 8000490:	1b1b      	subs	r3, r3, r4
 8000492:	b2ad      	uxth	r5, r5
 8000494:	fbb3 f0f8 	udiv	r0, r3, r8
 8000498:	fb08 3310 	mls	r3, r8, r0, r3
 800049c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004a0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004a4:	45a2      	cmp	sl, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1e 0404 	adds.w	r4, lr, r4
 80004ac:	f100 33ff 	add.w	r3, r0, #4294967295
 80004b0:	d26b      	bcs.n	800058a <__udivmoddi4+0x2aa>
 80004b2:	45a2      	cmp	sl, r4
 80004b4:	d969      	bls.n	800058a <__udivmoddi4+0x2aa>
 80004b6:	3802      	subs	r0, #2
 80004b8:	4474      	add	r4, lr
 80004ba:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004be:	fba0 8902 	umull	r8, r9, r0, r2
 80004c2:	eba4 040a 	sub.w	r4, r4, sl
 80004c6:	454c      	cmp	r4, r9
 80004c8:	46c2      	mov	sl, r8
 80004ca:	464b      	mov	r3, r9
 80004cc:	d354      	bcc.n	8000578 <__udivmoddi4+0x298>
 80004ce:	d051      	beq.n	8000574 <__udivmoddi4+0x294>
 80004d0:	2e00      	cmp	r6, #0
 80004d2:	d069      	beq.n	80005a8 <__udivmoddi4+0x2c8>
 80004d4:	ebb1 050a 	subs.w	r5, r1, sl
 80004d8:	eb64 0403 	sbc.w	r4, r4, r3
 80004dc:	fa04 fc0c 	lsl.w	ip, r4, ip
 80004e0:	40fd      	lsrs	r5, r7
 80004e2:	40fc      	lsrs	r4, r7
 80004e4:	ea4c 0505 	orr.w	r5, ip, r5
 80004e8:	e9c6 5400 	strd	r5, r4, [r6]
 80004ec:	2700      	movs	r7, #0
 80004ee:	e747      	b.n	8000380 <__udivmoddi4+0xa0>
 80004f0:	f1c2 0320 	rsb	r3, r2, #32
 80004f4:	fa20 f703 	lsr.w	r7, r0, r3
 80004f8:	4095      	lsls	r5, r2
 80004fa:	fa01 f002 	lsl.w	r0, r1, r2
 80004fe:	fa21 f303 	lsr.w	r3, r1, r3
 8000502:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000506:	4338      	orrs	r0, r7
 8000508:	0c01      	lsrs	r1, r0, #16
 800050a:	fbb3 f7fe 	udiv	r7, r3, lr
 800050e:	fa1f f885 	uxth.w	r8, r5
 8000512:	fb0e 3317 	mls	r3, lr, r7, r3
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb07 f308 	mul.w	r3, r7, r8
 800051e:	428b      	cmp	r3, r1
 8000520:	fa04 f402 	lsl.w	r4, r4, r2
 8000524:	d907      	bls.n	8000536 <__udivmoddi4+0x256>
 8000526:	1869      	adds	r1, r5, r1
 8000528:	f107 3cff 	add.w	ip, r7, #4294967295
 800052c:	d22f      	bcs.n	800058e <__udivmoddi4+0x2ae>
 800052e:	428b      	cmp	r3, r1
 8000530:	d92d      	bls.n	800058e <__udivmoddi4+0x2ae>
 8000532:	3f02      	subs	r7, #2
 8000534:	4429      	add	r1, r5
 8000536:	1acb      	subs	r3, r1, r3
 8000538:	b281      	uxth	r1, r0
 800053a:	fbb3 f0fe 	udiv	r0, r3, lr
 800053e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000542:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000546:	fb00 f308 	mul.w	r3, r0, r8
 800054a:	428b      	cmp	r3, r1
 800054c:	d907      	bls.n	800055e <__udivmoddi4+0x27e>
 800054e:	1869      	adds	r1, r5, r1
 8000550:	f100 3cff 	add.w	ip, r0, #4294967295
 8000554:	d217      	bcs.n	8000586 <__udivmoddi4+0x2a6>
 8000556:	428b      	cmp	r3, r1
 8000558:	d915      	bls.n	8000586 <__udivmoddi4+0x2a6>
 800055a:	3802      	subs	r0, #2
 800055c:	4429      	add	r1, r5
 800055e:	1ac9      	subs	r1, r1, r3
 8000560:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000564:	e73b      	b.n	80003de <__udivmoddi4+0xfe>
 8000566:	4637      	mov	r7, r6
 8000568:	4630      	mov	r0, r6
 800056a:	e709      	b.n	8000380 <__udivmoddi4+0xa0>
 800056c:	4607      	mov	r7, r0
 800056e:	e6e7      	b.n	8000340 <__udivmoddi4+0x60>
 8000570:	4618      	mov	r0, r3
 8000572:	e6fb      	b.n	800036c <__udivmoddi4+0x8c>
 8000574:	4541      	cmp	r1, r8
 8000576:	d2ab      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 8000578:	ebb8 0a02 	subs.w	sl, r8, r2
 800057c:	eb69 020e 	sbc.w	r2, r9, lr
 8000580:	3801      	subs	r0, #1
 8000582:	4613      	mov	r3, r2
 8000584:	e7a4      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000586:	4660      	mov	r0, ip
 8000588:	e7e9      	b.n	800055e <__udivmoddi4+0x27e>
 800058a:	4618      	mov	r0, r3
 800058c:	e795      	b.n	80004ba <__udivmoddi4+0x1da>
 800058e:	4667      	mov	r7, ip
 8000590:	e7d1      	b.n	8000536 <__udivmoddi4+0x256>
 8000592:	4681      	mov	r9, r0
 8000594:	e77c      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000596:	3802      	subs	r0, #2
 8000598:	442c      	add	r4, r5
 800059a:	e747      	b.n	800042c <__udivmoddi4+0x14c>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	442b      	add	r3, r5
 80005a2:	e72f      	b.n	8000404 <__udivmoddi4+0x124>
 80005a4:	4638      	mov	r0, r7
 80005a6:	e708      	b.n	80003ba <__udivmoddi4+0xda>
 80005a8:	4637      	mov	r7, r6
 80005aa:	e6e9      	b.n	8000380 <__udivmoddi4+0xa0>

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 80005b0:	b480      	push	{r7}
 80005b2:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 80005b4:	bf00      	nop
 80005b6:	46bd      	mov	sp, r7
 80005b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005bc:	4770      	bx	lr

080005be <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005be:	b480      	push	{r7}
 80005c0:	b083      	sub	sp, #12
 80005c2:	af00      	add	r7, sp, #0
 80005c4:	6078      	str	r0, [r7, #4]
 80005c6:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c8:	bf00      	nop
 80005ca:	370c      	adds	r7, #12
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr

080005d4 <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 80005d8:	bf00      	nop
 80005da:	46bd      	mov	sp, r7
 80005dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e0:	4770      	bx	lr
	...

080005e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005e4:	b480      	push	{r7}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	60f8      	str	r0, [r7, #12]
 80005ec:	60b9      	str	r1, [r7, #8]
 80005ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4a07      	ldr	r2, [pc, #28]	; (8000610 <vApplicationGetIdleTaskMemory+0x2c>)
 80005f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80005f6:	68bb      	ldr	r3, [r7, #8]
 80005f8:	4a06      	ldr	r2, [pc, #24]	; (8000614 <vApplicationGetIdleTaskMemory+0x30>)
 80005fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2280      	movs	r2, #128	; 0x80
 8000600:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
 800060e:	bf00      	nop
 8000610:	200000e0 	.word	0x200000e0
 8000614:	20000138 	.word	0x20000138

08000618 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b082      	sub	sp, #8
 800061c:	af00      	add	r7, sp, #0
 800061e:	4603      	mov	r3, r0
 8000620:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 8000622:	20c8      	movs	r0, #200	; 0xc8
 8000624:	f002 f852 	bl	80026cc <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000628:	f000 f9b4 	bl	8000994 <ft5336_I2C_InitializeIfRequired>
}
 800062c:	bf00      	nop
 800062e:	3708      	adds	r7, #8
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}

08000634 <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	4603      	mov	r3, r0
 800063c:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr

0800064a <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 800064a:	b580      	push	{r7, lr}
 800064c:	b084      	sub	sp, #16
 800064e:	af00      	add	r7, sp, #0
 8000650:	4603      	mov	r3, r0
 8000652:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 8000654:	2300      	movs	r3, #0
 8000656:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 8000658:	2300      	movs	r3, #0
 800065a:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 800065c:	2300      	movs	r3, #0
 800065e:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000660:	f000 f998 	bl	8000994 <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000664:	2300      	movs	r3, #0
 8000666:	73fb      	strb	r3, [r7, #15]
 8000668:	e010      	b.n	800068c <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 800066a:	88fb      	ldrh	r3, [r7, #6]
 800066c:	b2db      	uxtb	r3, r3
 800066e:	21a8      	movs	r1, #168	; 0xa8
 8000670:	4618      	mov	r0, r3
 8000672:	f002 f80d 	bl	8002690 <TS_IO_Read>
 8000676:	4603      	mov	r3, r0
 8000678:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 800067a:	7b7b      	ldrb	r3, [r7, #13]
 800067c:	b2db      	uxtb	r3, r3
 800067e:	2b51      	cmp	r3, #81	; 0x51
 8000680:	d101      	bne.n	8000686 <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 8000682:	2301      	movs	r3, #1
 8000684:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 8000686:	7bfb      	ldrb	r3, [r7, #15]
 8000688:	3301      	adds	r3, #1
 800068a:	73fb      	strb	r3, [r7, #15]
 800068c:	7bfb      	ldrb	r3, [r7, #15]
 800068e:	2b02      	cmp	r3, #2
 8000690:	d802      	bhi.n	8000698 <ft5336_ReadID+0x4e>
 8000692:	7bbb      	ldrb	r3, [r7, #14]
 8000694:	2b00      	cmp	r3, #0
 8000696:	d0e8      	beq.n	800066a <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 8000698:	7b7b      	ldrb	r3, [r7, #13]
 800069a:	b2db      	uxtb	r3, r3
 800069c:	b29b      	uxth	r3, r3
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}

080006a6 <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b082      	sub	sp, #8
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	4603      	mov	r3, r0
 80006ae:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 f97e 	bl	80009b4 <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 80006b8:	88fb      	ldrh	r3, [r7, #6]
 80006ba:	4618      	mov	r0, r3
 80006bc:	f000 f932 	bl	8000924 <ft5336_TS_DisableIT>
}
 80006c0:	bf00      	nop
 80006c2:	3708      	adds	r7, #8
 80006c4:	46bd      	mov	sp, r7
 80006c6:	bd80      	pop	{r7, pc}

080006c8 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b084      	sub	sp, #16
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	4603      	mov	r3, r0
 80006d0:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 80006d6:	88fb      	ldrh	r3, [r7, #6]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2102      	movs	r1, #2
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 ffd7 	bl	8002690 <TS_IO_Read>
 80006e2:	4603      	mov	r3, r0
 80006e4:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 80006e6:	7bfb      	ldrb	r3, [r7, #15]
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	f003 030f 	and.w	r3, r3, #15
 80006ee:	b2db      	uxtb	r3, r3
 80006f0:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 80006f2:	7bfb      	ldrb	r3, [r7, #15]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b05      	cmp	r3, #5
 80006f8:	d901      	bls.n	80006fe <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 80006fa:	2300      	movs	r3, #0
 80006fc:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 80006fe:	7bfb      	ldrb	r3, [r7, #15]
 8000700:	b2da      	uxtb	r2, r3
 8000702:	4b05      	ldr	r3, [pc, #20]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000704:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 8000706:	4b04      	ldr	r3, [pc, #16]	; (8000718 <ft5336_TS_DetectTouch+0x50>)
 8000708:	2200      	movs	r2, #0
 800070a:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	b2db      	uxtb	r3, r3
}
 8000710:	4618      	mov	r0, r3
 8000712:	3710      	adds	r7, #16
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	20000338 	.word	0x20000338

0800071c <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b086      	sub	sp, #24
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	60b9      	str	r1, [r7, #8]
 8000726:	607a      	str	r2, [r7, #4]
 8000728:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 800072a:	2300      	movs	r3, #0
 800072c:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 800072e:	2300      	movs	r3, #0
 8000730:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 8000736:	2300      	movs	r3, #0
 8000738:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 800073a:	2300      	movs	r3, #0
 800073c:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 800073e:	4b6d      	ldr	r3, [pc, #436]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000740:	789a      	ldrb	r2, [r3, #2]
 8000742:	4b6c      	ldr	r3, [pc, #432]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 8000744:	785b      	ldrb	r3, [r3, #1]
 8000746:	429a      	cmp	r2, r3
 8000748:	f080 80cf 	bcs.w	80008ea <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 800074c:	4b69      	ldr	r3, [pc, #420]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 800074e:	789b      	ldrb	r3, [r3, #2]
 8000750:	2b09      	cmp	r3, #9
 8000752:	d871      	bhi.n	8000838 <ft5336_TS_GetXY+0x11c>
 8000754:	a201      	add	r2, pc, #4	; (adr r2, 800075c <ft5336_TS_GetXY+0x40>)
 8000756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075a:	bf00      	nop
 800075c:	08000785 	.word	0x08000785
 8000760:	08000797 	.word	0x08000797
 8000764:	080007a9 	.word	0x080007a9
 8000768:	080007bb 	.word	0x080007bb
 800076c:	080007cd 	.word	0x080007cd
 8000770:	080007df 	.word	0x080007df
 8000774:	080007f1 	.word	0x080007f1
 8000778:	08000803 	.word	0x08000803
 800077c:	08000815 	.word	0x08000815
 8000780:	08000827 	.word	0x08000827
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 8000784:	2304      	movs	r3, #4
 8000786:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 8000788:	2303      	movs	r3, #3
 800078a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 800078c:	2306      	movs	r3, #6
 800078e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 8000790:	2305      	movs	r3, #5
 8000792:	753b      	strb	r3, [r7, #20]
      break;
 8000794:	e051      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 8000796:	230a      	movs	r3, #10
 8000798:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 800079a:	2309      	movs	r3, #9
 800079c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 800079e:	230c      	movs	r3, #12
 80007a0:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80007a2:	230b      	movs	r3, #11
 80007a4:	753b      	strb	r3, [r7, #20]
      break;
 80007a6:	e048      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 80007a8:	2310      	movs	r3, #16
 80007aa:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 80007ac:	230f      	movs	r3, #15
 80007ae:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 80007b0:	2312      	movs	r3, #18
 80007b2:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 80007b4:	2311      	movs	r3, #17
 80007b6:	753b      	strb	r3, [r7, #20]
      break;
 80007b8:	e03f      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 80007ba:	2316      	movs	r3, #22
 80007bc:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 80007be:	2315      	movs	r3, #21
 80007c0:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 80007c2:	2318      	movs	r3, #24
 80007c4:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 80007c6:	2317      	movs	r3, #23
 80007c8:	753b      	strb	r3, [r7, #20]
      break;
 80007ca:	e036      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 80007cc:	231c      	movs	r3, #28
 80007ce:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 80007d0:	231b      	movs	r3, #27
 80007d2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 80007d4:	231e      	movs	r3, #30
 80007d6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 80007d8:	231d      	movs	r3, #29
 80007da:	753b      	strb	r3, [r7, #20]
      break;
 80007dc:	e02d      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 80007de:	2322      	movs	r3, #34	; 0x22
 80007e0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 80007e2:	2321      	movs	r3, #33	; 0x21
 80007e4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 80007e6:	2324      	movs	r3, #36	; 0x24
 80007e8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 80007ea:	2323      	movs	r3, #35	; 0x23
 80007ec:	753b      	strb	r3, [r7, #20]
      break;
 80007ee:	e024      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 80007f0:	2328      	movs	r3, #40	; 0x28
 80007f2:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 80007f4:	2327      	movs	r3, #39	; 0x27
 80007f6:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 80007f8:	232a      	movs	r3, #42	; 0x2a
 80007fa:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 80007fc:	2329      	movs	r3, #41	; 0x29
 80007fe:	753b      	strb	r3, [r7, #20]
      break;
 8000800:	e01b      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 8000802:	232e      	movs	r3, #46	; 0x2e
 8000804:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 8000806:	232d      	movs	r3, #45	; 0x2d
 8000808:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 800080a:	2330      	movs	r3, #48	; 0x30
 800080c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 800080e:	232f      	movs	r3, #47	; 0x2f
 8000810:	753b      	strb	r3, [r7, #20]
      break;
 8000812:	e012      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 8000814:	2334      	movs	r3, #52	; 0x34
 8000816:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000818:	2333      	movs	r3, #51	; 0x33
 800081a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 800081c:	2336      	movs	r3, #54	; 0x36
 800081e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000820:	2335      	movs	r3, #53	; 0x35
 8000822:	753b      	strb	r3, [r7, #20]
      break;
 8000824:	e009      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 8000826:	233a      	movs	r3, #58	; 0x3a
 8000828:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 800082a:	2339      	movs	r3, #57	; 0x39
 800082c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 800082e:	233c      	movs	r3, #60	; 0x3c
 8000830:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 8000832:	233b      	movs	r3, #59	; 0x3b
 8000834:	753b      	strb	r3, [r7, #20]
      break;
 8000836:	e000      	b.n	800083a <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000838:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 800083a:	89fb      	ldrh	r3, [r7, #14]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	7dfa      	ldrb	r2, [r7, #23]
 8000840:	4611      	mov	r1, r2
 8000842:	4618      	mov	r0, r3
 8000844:	f001 ff24 	bl	8002690 <TS_IO_Read>
 8000848:	4603      	mov	r3, r0
 800084a:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800084c:	7cfb      	ldrb	r3, [r7, #19]
 800084e:	b2db      	uxtb	r3, r3
 8000850:	b29a      	uxth	r2, r3
 8000852:	4b29      	ldr	r3, [pc, #164]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000854:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 8000856:	89fb      	ldrh	r3, [r7, #14]
 8000858:	b2db      	uxtb	r3, r3
 800085a:	7dba      	ldrb	r2, [r7, #22]
 800085c:	4611      	mov	r1, r2
 800085e:	4618      	mov	r0, r3
 8000860:	f001 ff16 	bl	8002690 <TS_IO_Read>
 8000864:	4603      	mov	r3, r0
 8000866:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000868:	7cfb      	ldrb	r3, [r7, #19]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8000872:	b21a      	sxth	r2, r3
 8000874:	4b20      	ldr	r3, [pc, #128]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000876:	881b      	ldrh	r3, [r3, #0]
 8000878:	b21b      	sxth	r3, r3
 800087a:	4313      	orrs	r3, r2
 800087c:	b21b      	sxth	r3, r3
 800087e:	b29a      	uxth	r2, r3
 8000880:	4b1d      	ldr	r3, [pc, #116]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000882:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 8000884:	4b1c      	ldr	r3, [pc, #112]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 8000886:	881a      	ldrh	r2, [r3, #0]
 8000888:	68bb      	ldr	r3, [r7, #8]
 800088a:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 800088c:	89fb      	ldrh	r3, [r7, #14]
 800088e:	b2db      	uxtb	r3, r3
 8000890:	7d7a      	ldrb	r2, [r7, #21]
 8000892:	4611      	mov	r1, r2
 8000894:	4618      	mov	r0, r3
 8000896:	f001 fefb 	bl	8002690 <TS_IO_Read>
 800089a:	4603      	mov	r3, r0
 800089c:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 800089e:	7cfb      	ldrb	r3, [r7, #19]
 80008a0:	b2db      	uxtb	r3, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b14      	ldr	r3, [pc, #80]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008a6:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 80008a8:	89fb      	ldrh	r3, [r7, #14]
 80008aa:	b2db      	uxtb	r3, r3
 80008ac:	7d3a      	ldrb	r2, [r7, #20]
 80008ae:	4611      	mov	r1, r2
 80008b0:	4618      	mov	r0, r3
 80008b2:	f001 feed 	bl	8002690 <TS_IO_Read>
 80008b6:	4603      	mov	r3, r0
 80008b8:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80008ba:	7cfb      	ldrb	r3, [r7, #19]
 80008bc:	b2db      	uxtb	r3, r3
 80008be:	021b      	lsls	r3, r3, #8
 80008c0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80008c4:	b21a      	sxth	r2, r3
 80008c6:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008c8:	881b      	ldrh	r3, [r3, #0]
 80008ca:	b21b      	sxth	r3, r3
 80008cc:	4313      	orrs	r3, r2
 80008ce:	b21b      	sxth	r3, r3
 80008d0:	b29a      	uxth	r2, r3
 80008d2:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d4:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <ft5336_TS_GetXY+0x1dc>)
 80008d8:	881a      	ldrh	r2, [r3, #0]
 80008da:	687b      	ldr	r3, [r7, #4]
 80008dc:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 80008de:	4b05      	ldr	r3, [pc, #20]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e0:	789b      	ldrb	r3, [r3, #2]
 80008e2:	3301      	adds	r3, #1
 80008e4:	b2da      	uxtb	r2, r3
 80008e6:	4b03      	ldr	r3, [pc, #12]	; (80008f4 <ft5336_TS_GetXY+0x1d8>)
 80008e8:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 80008ea:	bf00      	nop
 80008ec:	3718      	adds	r7, #24
 80008ee:	46bd      	mov	sp, r7
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	bf00      	nop
 80008f4:	20000338 	.word	0x20000338
 80008f8:	2000033c 	.word	0x2000033c

080008fc <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b084      	sub	sp, #16
 8000900:	af00      	add	r7, sp, #0
 8000902:	4603      	mov	r3, r0
 8000904:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 8000906:	2300      	movs	r3, #0
 8000908:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800090a:	2301      	movs	r3, #1
 800090c:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800090e:	88fb      	ldrh	r3, [r7, #6]
 8000910:	b2db      	uxtb	r3, r3
 8000912:	7bfa      	ldrb	r2, [r7, #15]
 8000914:	21a4      	movs	r1, #164	; 0xa4
 8000916:	4618      	mov	r0, r3
 8000918:	f001 fea0 	bl	800265c <TS_IO_Write>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}

08000924 <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 800092e:	2300      	movs	r3, #0
 8000930:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000932:	2300      	movs	r3, #0
 8000934:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000936:	88fb      	ldrh	r3, [r7, #6]
 8000938:	b2db      	uxtb	r3, r3
 800093a:	7bfa      	ldrb	r2, [r7, #15]
 800093c:	21a4      	movs	r1, #164	; 0xa4
 800093e:	4618      	mov	r0, r3
 8000940:	f001 fe8c 	bl	800265c <TS_IO_Write>
}
 8000944:	bf00      	nop
 8000946:	3710      	adds	r7, #16
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}

0800094c <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	4603      	mov	r3, r0
 8000954:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 8000956:	2300      	movs	r3, #0
}
 8000958:	4618      	mov	r0, r3
 800095a:	370c      	adds	r7, #12
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr

08000964 <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	4603      	mov	r3, r0
 800096c:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 800096e:	bf00      	nop
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
	...

0800097c <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <ft5336_Get_I2C_InitializedStatus+0x14>)
 8000982:	781b      	ldrb	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000338 	.word	0x20000338

08000994 <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 8000998:	f7ff fff0 	bl	800097c <ft5336_Get_I2C_InitializedStatus>
 800099c:	4603      	mov	r3, r0
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d104      	bne.n	80009ac <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80009a2:	f001 fe51 	bl	8002648 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80009a6:	4b02      	ldr	r3, [pc, #8]	; (80009b0 <ft5336_I2C_InitializeIfRequired+0x1c>)
 80009a8:	2201      	movs	r2, #1
 80009aa:	701a      	strb	r2, [r3, #0]
  }
}
 80009ac:	bf00      	nop
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20000338 	.word	0x20000338

080009b4 <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b085      	sub	sp, #20
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	4603      	mov	r3, r0
 80009bc:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 80009c2:	68fb      	ldr	r3, [r7, #12]
}
 80009c4:	4618      	mov	r0, r3
 80009c6:	3714      	adds	r7, #20
 80009c8:	46bd      	mov	sp, r7
 80009ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ce:	4770      	bx	lr

080009d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009d0:	b5b0      	push	{r4, r5, r7, lr}
 80009d2:	b0aa      	sub	sp, #168	; 0xa8
 80009d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009d6:	f004 f87e 	bl	8004ad6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009da:	f000 f8ff 	bl	8000bdc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009de:	f000 ff71 	bl	80018c4 <MX_GPIO_Init>
  MX_ADC3_Init();
 80009e2:	f000 f9fd 	bl	8000de0 <MX_ADC3_Init>
  MX_I2C1_Init();
 80009e6:	f000 faa9 	bl	8000f3c <MX_I2C1_Init>
  MX_I2C3_Init();
 80009ea:	f000 fae7 	bl	8000fbc <MX_I2C3_Init>
  MX_LTDC_Init();
 80009ee:	f000 fb25 	bl	800103c <MX_LTDC_Init>
  MX_RTC_Init();
 80009f2:	f000 fba5 	bl	8001140 <MX_RTC_Init>
  MX_SPI2_Init();
 80009f6:	f000 fc49 	bl	800128c <MX_SPI2_Init>
  MX_TIM1_Init();
 80009fa:	f000 fc85 	bl	8001308 <MX_TIM1_Init>
  MX_TIM2_Init();
 80009fe:	f000 fcd7 	bl	80013b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a02:	f000 fd23 	bl	800144c <MX_TIM3_Init>
  MX_TIM5_Init();
 8000a06:	f000 fd87 	bl	8001518 <MX_TIM5_Init>
  MX_TIM8_Init();
 8000a0a:	f000 fdd3 	bl	80015b4 <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000a0e:	f000 feab 	bl	8001768 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000a12:	f000 fed9 	bl	80017c8 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 8000a16:	f000 f991 	bl	8000d3c <MX_ADC1_Init>
  MX_DAC_Init();
 8000a1a:	f000 fa33 	bl	8000e84 <MX_DAC_Init>
  MX_UART7_Init();
 8000a1e:	f000 fe73 	bl	8001708 <MX_UART7_Init>
  MX_FMC_Init();
 8000a22:	f000 ff01 	bl	8001828 <MX_FMC_Init>
  MX_DMA2D_Init();
 8000a26:	f000 fa57 	bl	8000ed8 <MX_DMA2D_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000a2a:	f001 fe5b 	bl	80026e4 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000a2e:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 8000a32:	2000      	movs	r0, #0
 8000a34:	f001 feee 	bl	8002814 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000a38:	f001 fec4 	bl	80027c4 <BSP_LCD_GetXSize>
 8000a3c:	4604      	mov	r4, r0
 8000a3e:	f001 fed5 	bl	80027ec <BSP_LCD_GetYSize>
 8000a42:	4603      	mov	r3, r0
 8000a44:	fb03 f304 	mul.w	r3, r3, r4
	BSP_LCD_LayerDefaultInit(1,
 8000a48:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
 8000a4c:	009b      	lsls	r3, r3, #2
 8000a4e:	4619      	mov	r1, r3
 8000a50:	2001      	movs	r0, #1
 8000a52:	f001 fedf 	bl	8002814 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 8000a56:	f002 fd57 	bl	8003508 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 8000a5a:	2001      	movs	r0, #1
 8000a5c:	f001 ff3a 	bl	80028d4 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8000a60:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a64:	f001 ffa8 	bl	80029b8 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 8000a68:	484c      	ldr	r0, [pc, #304]	; (8000b9c <main+0x1cc>)
 8000a6a:	f001 ff75 	bl	8002958 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8000a6e:	f04f 30ff 	mov.w	r0, #4294967295
 8000a72:	f001 ff3f 	bl	80028f4 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8000a76:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8000a7a:	f001 ff53 	bl	8002924 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8000a7e:	f001 fea1 	bl	80027c4 <BSP_LCD_GetXSize>
 8000a82:	4603      	mov	r3, r0
 8000a84:	b29c      	uxth	r4, r3
 8000a86:	f001 feb1 	bl	80027ec <BSP_LCD_GetYSize>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4620      	mov	r0, r4
 8000a92:	f003 f9c7 	bl	8003e24 <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8000a96:	2201      	movs	r2, #1
 8000a98:	4941      	ldr	r1, [pc, #260]	; (8000ba0 <main+0x1d0>)
 8000a9a:	4842      	ldr	r0, [pc, #264]	; (8000ba4 <main+0x1d4>)
 8000a9c:	f009 fe7e 	bl	800a79c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000aac:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f00a feec 	bl	800b88e <osMutexCreate>
 8000ab6:	4602      	mov	r2, r0
 8000ab8:	4b3b      	ldr	r3, [pc, #236]	; (8000ba8 <main+0x1d8>)
 8000aba:	601a      	str	r2, [r3, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000abc:	4b3b      	ldr	r3, [pc, #236]	; (8000bac <main+0x1dc>)
 8000abe:	f107 0490 	add.w	r4, r7, #144	; 0x90
 8000ac2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ac4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000ac8:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f00a fef5 	bl	800b8be <osMessageCreate>
 8000ad4:	4602      	mov	r2, r0
 8000ad6:	4b36      	ldr	r3, [pc, #216]	; (8000bb0 <main+0x1e0>)
 8000ad8:	601a      	str	r2, [r3, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000ada:	4b36      	ldr	r3, [pc, #216]	; (8000bb4 <main+0x1e4>)
 8000adc:	f107 0474 	add.w	r4, r7, #116	; 0x74
 8000ae0:	461d      	mov	r5, r3
 8000ae2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ae4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ae6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000aea:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000aee:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8000af2:	2100      	movs	r1, #0
 8000af4:	4618      	mov	r0, r3
 8000af6:	f00a fe6a 	bl	800b7ce <osThreadCreate>
 8000afa:	4602      	mov	r2, r0
 8000afc:	4b2e      	ldr	r3, [pc, #184]	; (8000bb8 <main+0x1e8>)
 8000afe:	601a      	str	r2, [r3, #0]

  /* definition and creation of horloge */
  osThreadDef(horloge, Starthorloge, osPriorityBelowNormal, 0, 1024);
 8000b00:	4b2e      	ldr	r3, [pc, #184]	; (8000bbc <main+0x1ec>)
 8000b02:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000b06:	461d      	mov	r5, r3
 8000b08:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b0a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b0c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b10:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  horlogeHandle = osThreadCreate(osThread(horloge), NULL);
 8000b14:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000b18:	2100      	movs	r1, #0
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	f00a fe57 	bl	800b7ce <osThreadCreate>
 8000b20:	4602      	mov	r2, r0
 8000b22:	4b27      	ldr	r3, [pc, #156]	; (8000bc0 <main+0x1f0>)
 8000b24:	601a      	str	r2, [r3, #0]

  /* definition and creation of LRacket */
  osThreadDef(LRacket, StartLRacket, osPriorityAboveNormal, 0, 1024);
 8000b26:	4b27      	ldr	r3, [pc, #156]	; (8000bc4 <main+0x1f4>)
 8000b28:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 8000b2c:	461d      	mov	r5, r3
 8000b2e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b30:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b32:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b36:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  LRacketHandle = osThreadCreate(osThread(LRacket), NULL);
 8000b3a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8000b3e:	2100      	movs	r1, #0
 8000b40:	4618      	mov	r0, r3
 8000b42:	f00a fe44 	bl	800b7ce <osThreadCreate>
 8000b46:	4602      	mov	r2, r0
 8000b48:	4b1f      	ldr	r3, [pc, #124]	; (8000bc8 <main+0x1f8>)
 8000b4a:	601a      	str	r2, [r3, #0]

  /* definition and creation of Ball */
  osThreadDef(Ball, StartBall, osPriorityHigh, 0, 1024);
 8000b4c:	4b1f      	ldr	r3, [pc, #124]	; (8000bcc <main+0x1fc>)
 8000b4e:	f107 0420 	add.w	r4, r7, #32
 8000b52:	461d      	mov	r5, r3
 8000b54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b58:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b5c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallHandle = osThreadCreate(osThread(Ball), NULL);
 8000b60:	f107 0320 	add.w	r3, r7, #32
 8000b64:	2100      	movs	r1, #0
 8000b66:	4618      	mov	r0, r3
 8000b68:	f00a fe31 	bl	800b7ce <osThreadCreate>
 8000b6c:	4602      	mov	r2, r0
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <main+0x200>)
 8000b70:	601a      	str	r2, [r3, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000b72:	4b18      	ldr	r3, [pc, #96]	; (8000bd4 <main+0x204>)
 8000b74:	1d3c      	adds	r4, r7, #4
 8000b76:	461d      	mov	r5, r3
 8000b78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b7c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b80:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000b84:	1d3b      	adds	r3, r7, #4
 8000b86:	2100      	movs	r1, #0
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f00a fe20 	bl	800b7ce <osThreadCreate>
 8000b8e:	4602      	mov	r2, r0
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <main+0x208>)
 8000b92:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000b94:	f00a fe14 	bl	800b7c0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000b98:	e7fe      	b.n	8000b98 <main+0x1c8>
 8000b9a:	bf00      	nop
 8000b9c:	20000044 	.word	0x20000044
 8000ba0:	20008c10 	.word	0x20008c10
 8000ba4:	200089e4 	.word	0x200089e4
 8000ba8:	20008c0c 	.word	0x20008c0c
 8000bac:	0800e6bc 	.word	0x0800e6bc
 8000bb0:	20008c20 	.word	0x20008c20
 8000bb4:	0800e6d8 	.word	0x0800e6d8
 8000bb8:	20008664 	.word	0x20008664
 8000bbc:	0800e6fc 	.word	0x0800e6fc
 8000bc0:	20008994 	.word	0x20008994
 8000bc4:	0800e720 	.word	0x0800e720
 8000bc8:	20008660 	.word	0x20008660
 8000bcc:	0800e744 	.word	0x0800e744
 8000bd0:	20008c1c 	.word	0x20008c1c
 8000bd4:	0800e76c 	.word	0x0800e76c
 8000bd8:	200089e0 	.word	0x200089e0

08000bdc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b0b4      	sub	sp, #208	; 0xd0
 8000be0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000be2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000be6:	2230      	movs	r2, #48	; 0x30
 8000be8:	2100      	movs	r1, #0
 8000bea:	4618      	mov	r0, r3
 8000bec:	f00d f955 	bl	800de9a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf0:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c00:	f107 0308 	add.w	r3, r7, #8
 8000c04:	2284      	movs	r2, #132	; 0x84
 8000c06:	2100      	movs	r1, #0
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f00d f946 	bl	800de9a <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000c0e:	f006 fdb3 	bl	8007778 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b47      	ldr	r3, [pc, #284]	; (8000d30 <SystemClock_Config+0x154>)
 8000c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c16:	4a46      	ldr	r2, [pc, #280]	; (8000d30 <SystemClock_Config+0x154>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	6413      	str	r3, [r2, #64]	; 0x40
 8000c1e:	4b44      	ldr	r3, [pc, #272]	; (8000d30 <SystemClock_Config+0x154>)
 8000c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c2a:	4b42      	ldr	r3, [pc, #264]	; (8000d34 <SystemClock_Config+0x158>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a41      	ldr	r2, [pc, #260]	; (8000d34 <SystemClock_Config+0x158>)
 8000c30:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	4b3f      	ldr	r3, [pc, #252]	; (8000d34 <SystemClock_Config+0x158>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c3e:	603b      	str	r3, [r7, #0]
 8000c40:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000c42:	2309      	movs	r3, #9
 8000c44:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000c48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000c4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000c50:	2301      	movs	r3, #1
 8000c52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c56:	2302      	movs	r3, #2
 8000c58:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000c60:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000c64:	2319      	movs	r3, #25
 8000c66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000c6a:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000c6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000c72:	2302      	movs	r3, #2
 8000c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000c78:	2309      	movs	r3, #9
 8000c7a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c7e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000c82:	4618      	mov	r0, r3
 8000c84:	f006 fdd8 	bl	8007838 <HAL_RCC_OscConfig>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000c8e:	f001 fb81 	bl	8002394 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000c92:	f006 fd81 	bl	8007798 <HAL_PWREx_EnableOverDrive>
 8000c96:	4603      	mov	r3, r0
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d001      	beq.n	8000ca0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000c9c:	f001 fb7a 	bl	8002394 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ca0:	230f      	movs	r3, #15
 8000ca2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ca6:	2302      	movs	r3, #2
 8000ca8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000cac:	2300      	movs	r3, #0
 8000cae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000cb2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000cb6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000cba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000cc2:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000cc6:	2106      	movs	r1, #6
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f007 f859 	bl	8007d80 <HAL_RCC_ClockConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000cd4:	f001 fb5e 	bl	8002394 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000cd8:	4b17      	ldr	r3, [pc, #92]	; (8000d38 <SystemClock_Config+0x15c>)
 8000cda:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000cdc:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000ce0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000ce2:	2305      	movs	r3, #5
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000cea:	2303      	movs	r3, #3
 8000cec:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000cf2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cf6:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000cf8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000cfc:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000d02:	2300      	movs	r3, #0
 8000d04:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000d06:	2300      	movs	r3, #0
 8000d08:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4618      	mov	r0, r3
 8000d18:	f007 fa36 	bl	8008188 <HAL_RCCEx_PeriphCLKConfig>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000d22:	f001 fb37 	bl	8002394 <Error_Handler>
  }
}
 8000d26:	bf00      	nop
 8000d28:	37d0      	adds	r7, #208	; 0xd0
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40007000 	.word	0x40007000
 8000d38:	00015868 	.word	0x00015868

08000d3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d42:	463b      	mov	r3, r7
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000d4e:	4b21      	ldr	r3, [pc, #132]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d50:	4a21      	ldr	r2, [pc, #132]	; (8000dd8 <MX_ADC1_Init+0x9c>)
 8000d52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d54:	4b1f      	ldr	r3, [pc, #124]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d56:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d5a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d5c:	4b1d      	ldr	r3, [pc, #116]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d5e:	2200      	movs	r2, #0
 8000d60:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d62:	4b1c      	ldr	r3, [pc, #112]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000d68:	4b1a      	ldr	r3, [pc, #104]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000d6e:	4b19      	ldr	r3, [pc, #100]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d78:	2200      	movs	r2, #0
 8000d7a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d7c:	4b15      	ldr	r3, [pc, #84]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d7e:	4a17      	ldr	r2, [pc, #92]	; (8000ddc <MX_ADC1_Init+0xa0>)
 8000d80:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d82:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000d88:	4b12      	ldr	r3, [pc, #72]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d8a:	2201      	movs	r2, #1
 8000d8c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d90:	2200      	movs	r2, #0
 8000d92:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d96:	4b0f      	ldr	r3, [pc, #60]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d98:	2201      	movs	r2, #1
 8000d9a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9c:	480d      	ldr	r0, [pc, #52]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000d9e:	f003 fee9 	bl	8004b74 <HAL_ADC_Init>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000da8:	f001 faf4 	bl	8002394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000dac:	2300      	movs	r3, #0
 8000dae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000db0:	2301      	movs	r3, #1
 8000db2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000db8:	463b      	mov	r3, r7
 8000dba:	4619      	mov	r1, r3
 8000dbc:	4805      	ldr	r0, [pc, #20]	; (8000dd4 <MX_ADC1_Init+0x98>)
 8000dbe:	f004 f86f 	bl	8004ea0 <HAL_ADC_ConfigChannel>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000dc8:	f001 fae4 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000dcc:	bf00      	nop
 8000dce:	3710      	adds	r7, #16
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	bd80      	pop	{r7, pc}
 8000dd4:	2000894c 	.word	0x2000894c
 8000dd8:	40012000 	.word	0x40012000
 8000ddc:	0f000001 	.word	0x0f000001

08000de0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000de6:	463b      	mov	r3, r7
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
 8000dee:	609a      	str	r2, [r3, #8]
 8000df0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000df2:	4b21      	ldr	r3, [pc, #132]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000df4:	4a21      	ldr	r2, [pc, #132]	; (8000e7c <MX_ADC3_Init+0x9c>)
 8000df6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000df8:	4b1f      	ldr	r3, [pc, #124]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000dfa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000dfe:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000e00:	4b1d      	ldr	r3, [pc, #116]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e02:	2200      	movs	r2, #0
 8000e04:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e06:	4b1c      	ldr	r3, [pc, #112]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000e0c:	4b1a      	ldr	r3, [pc, #104]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000e12:	4b19      	ldr	r3, [pc, #100]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e20:	4b15      	ldr	r3, [pc, #84]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e22:	4a17      	ldr	r2, [pc, #92]	; (8000e80 <MX_ADC3_Init+0xa0>)
 8000e24:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e26:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000e2c:	4b12      	ldr	r3, [pc, #72]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e2e:	2201      	movs	r2, #1
 8000e30:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000e32:	4b11      	ldr	r3, [pc, #68]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e3c:	2201      	movs	r2, #1
 8000e3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000e40:	480d      	ldr	r0, [pc, #52]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e42:	f003 fe97 	bl	8004b74 <HAL_ADC_Init>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000e4c:	f001 faa2 	bl	8002394 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000e50:	2306      	movs	r3, #6
 8000e52:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e54:	2301      	movs	r3, #1
 8000e56:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000e5c:	463b      	mov	r3, r7
 8000e5e:	4619      	mov	r1, r3
 8000e60:	4805      	ldr	r0, [pc, #20]	; (8000e78 <MX_ADC3_Init+0x98>)
 8000e62:	f004 f81d 	bl	8004ea0 <HAL_ADC_ConfigChannel>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d001      	beq.n	8000e70 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000e6c:	f001 fa92 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000e70:	bf00      	nop
 8000e72:	3710      	adds	r7, #16
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20008998 	.word	0x20008998
 8000e7c:	40012200 	.word	0x40012200
 8000e80:	0f000001 	.word	0x0f000001

08000e84 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000e94:	4a0f      	ldr	r2, [pc, #60]	; (8000ed4 <MX_DAC_Init+0x50>)
 8000e96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000e9a:	f004 fb27 	bl	80054ec <HAL_DAC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000ea4:	f001 fa76 	bl	8002394 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4806      	ldr	r0, [pc, #24]	; (8000ed0 <MX_DAC_Init+0x4c>)
 8000eb8:	f004 fb8e 	bl	80055d8 <HAL_DAC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000ec2:	f001 fa67 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000ec6:	bf00      	nop
 8000ec8:	3708      	adds	r7, #8
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	20008a64 	.word	0x20008a64
 8000ed4:	40007400 	.word	0x40007400

08000ed8 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000edc:	4b15      	ldr	r3, [pc, #84]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ede:	4a16      	ldr	r2, [pc, #88]	; (8000f38 <MX_DMA2D_Init+0x60>)
 8000ee0:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000ee2:	4b14      	ldr	r3, [pc, #80]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000ee8:	4b12      	ldr	r3, [pc, #72]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000eee:	4b11      	ldr	r3, [pc, #68]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000ef4:	4b0f      	ldr	r3, [pc, #60]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000f0c:	4809      	ldr	r0, [pc, #36]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f0e:	f004 fd99 	bl	8005a44 <HAL_DMA2D_Init>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d001      	beq.n	8000f1c <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000f18:	f001 fa3c 	bl	8002394 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000f1c:	2101      	movs	r1, #1
 8000f1e:	4805      	ldr	r0, [pc, #20]	; (8000f34 <MX_DMA2D_Init+0x5c>)
 8000f20:	f004 feee 	bl	8005d00 <HAL_DMA2D_ConfigLayer>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000f2a:	f001 fa33 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20008b58 	.word	0x20008b58
 8000f38:	4002b000 	.word	0x4002b000

08000f3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f40:	4b1b      	ldr	r3, [pc, #108]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f42:	4a1c      	ldr	r2, [pc, #112]	; (8000fb4 <MX_I2C1_Init+0x78>)
 8000f44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000f46:	4b1a      	ldr	r3, [pc, #104]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f48:	4a1b      	ldr	r2, [pc, #108]	; (8000fb8 <MX_I2C1_Init+0x7c>)
 8000f4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f4c:	4b18      	ldr	r3, [pc, #96]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f52:	4b17      	ldr	r3, [pc, #92]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f54:	2201      	movs	r2, #1
 8000f56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f58:	4b15      	ldr	r3, [pc, #84]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f5e:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f64:	4b12      	ldr	r3, [pc, #72]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f6a:	4b11      	ldr	r3, [pc, #68]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f70:	4b0f      	ldr	r3, [pc, #60]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f76:	480e      	ldr	r0, [pc, #56]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f78:	f005 fad6 	bl	8006528 <HAL_I2C_Init>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d001      	beq.n	8000f86 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f82:	f001 fa07 	bl	8002394 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f86:	2100      	movs	r1, #0
 8000f88:	4809      	ldr	r0, [pc, #36]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f8a:	f005 ffe5 	bl	8006f58 <HAL_I2CEx_ConfigAnalogFilter>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f94:	f001 f9fe 	bl	8002394 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	4805      	ldr	r0, [pc, #20]	; (8000fb0 <MX_I2C1_Init+0x74>)
 8000f9c:	f006 f827 	bl	8006fee <HAL_I2CEx_ConfigDigitalFilter>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000fa6:	f001 f9f5 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000faa:	bf00      	nop
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	200087d8 	.word	0x200087d8
 8000fb4:	40005400 	.word	0x40005400
 8000fb8:	00c0eaff 	.word	0x00c0eaff

08000fbc <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000fc0:	4b1b      	ldr	r3, [pc, #108]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fc2:	4a1c      	ldr	r2, [pc, #112]	; (8001034 <MX_I2C3_Init+0x78>)
 8000fc4:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000fc6:	4b1a      	ldr	r3, [pc, #104]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fc8:	4a1b      	ldr	r2, [pc, #108]	; (8001038 <MX_I2C3_Init+0x7c>)
 8000fca:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000fcc:	4b18      	ldr	r3, [pc, #96]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fd2:	4b17      	ldr	r3, [pc, #92]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000fd8:	4b15      	ldr	r3, [pc, #84]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000fde:	4b14      	ldr	r3, [pc, #80]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fe4:	4b12      	ldr	r3, [pc, #72]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fea:	4b11      	ldr	r3, [pc, #68]	; (8001030 <MX_I2C3_Init+0x74>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000ff0:	4b0f      	ldr	r3, [pc, #60]	; (8001030 <MX_I2C3_Init+0x74>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000ff6:	480e      	ldr	r0, [pc, #56]	; (8001030 <MX_I2C3_Init+0x74>)
 8000ff8:	f005 fa96 	bl	8006528 <HAL_I2C_Init>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d001      	beq.n	8001006 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001002:	f001 f9c7 	bl	8002394 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001006:	2100      	movs	r1, #0
 8001008:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_I2C3_Init+0x74>)
 800100a:	f005 ffa5 	bl	8006f58 <HAL_I2CEx_ConfigAnalogFilter>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001014:	f001 f9be 	bl	8002394 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8001018:	2100      	movs	r1, #0
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_I2C3_Init+0x74>)
 800101c:	f005 ffe7 	bl	8006fee <HAL_I2CEx_ConfigDigitalFilter>
 8001020:	4603      	mov	r3, r0
 8001022:	2b00      	cmp	r3, #0
 8001024:	d001      	beq.n	800102a <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8001026:	f001 f9b5 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800102a:	bf00      	nop
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	20008668 	.word	0x20008668
 8001034:	40005c00 	.word	0x40005c00
 8001038:	00c0eaff 	.word	0x00c0eaff

0800103c <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08e      	sub	sp, #56	; 0x38
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2234      	movs	r2, #52	; 0x34
 8001046:	2100      	movs	r1, #0
 8001048:	4618      	mov	r0, r3
 800104a:	f00c ff26 	bl	800de9a <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 800104e:	4b3a      	ldr	r3, [pc, #232]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001050:	4a3a      	ldr	r2, [pc, #232]	; (800113c <MX_LTDC_Init+0x100>)
 8001052:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8001054:	4b38      	ldr	r3, [pc, #224]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001056:	2200      	movs	r2, #0
 8001058:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800105a:	4b37      	ldr	r3, [pc, #220]	; (8001138 <MX_LTDC_Init+0xfc>)
 800105c:	2200      	movs	r2, #0
 800105e:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8001060:	4b35      	ldr	r3, [pc, #212]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001062:	2200      	movs	r2, #0
 8001064:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8001066:	4b34      	ldr	r3, [pc, #208]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001068:	2200      	movs	r2, #0
 800106a:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 800106c:	4b32      	ldr	r3, [pc, #200]	; (8001138 <MX_LTDC_Init+0xfc>)
 800106e:	2228      	movs	r2, #40	; 0x28
 8001070:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8001072:	4b31      	ldr	r3, [pc, #196]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001074:	2209      	movs	r2, #9
 8001076:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8001078:	4b2f      	ldr	r3, [pc, #188]	; (8001138 <MX_LTDC_Init+0xfc>)
 800107a:	2235      	movs	r2, #53	; 0x35
 800107c:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 800107e:	4b2e      	ldr	r3, [pc, #184]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001080:	220b      	movs	r2, #11
 8001082:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8001084:	4b2c      	ldr	r3, [pc, #176]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001086:	f240 2215 	movw	r2, #533	; 0x215
 800108a:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 800108c:	4b2a      	ldr	r3, [pc, #168]	; (8001138 <MX_LTDC_Init+0xfc>)
 800108e:	f240 121b 	movw	r2, #283	; 0x11b
 8001092:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8001094:	4b28      	ldr	r3, [pc, #160]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001096:	f240 2235 	movw	r2, #565	; 0x235
 800109a:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 800109c:	4b26      	ldr	r3, [pc, #152]	; (8001138 <MX_LTDC_Init+0xfc>)
 800109e:	f240 121d 	movw	r2, #285	; 0x11d
 80010a2:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 80010a4:	4b24      	ldr	r3, [pc, #144]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 80010ac:	4b22      	ldr	r3, [pc, #136]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 80010b4:	4b20      	ldr	r3, [pc, #128]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 80010bc:	481e      	ldr	r0, [pc, #120]	; (8001138 <MX_LTDC_Init+0xfc>)
 80010be:	f005 ffe3 	bl	8007088 <HAL_LTDC_Init>
 80010c2:	4603      	mov	r3, r0
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d001      	beq.n	80010cc <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 80010c8:	f001 f964 	bl	8002394 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 80010cc:	2300      	movs	r3, #0
 80010ce:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 80010d0:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 80010d4:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 80010da:	f44f 7388 	mov.w	r3, #272	; 0x110
 80010de:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 80010e0:	2302      	movs	r3, #2
 80010e2:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 80010e4:	23ff      	movs	r3, #255	; 0xff
 80010e6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 80010e8:	2300      	movs	r3, #0
 80010ea:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 80010ec:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80010f0:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 80010f2:	2307      	movs	r3, #7
 80010f4:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 80010f6:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 80010fa:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 80010fc:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001100:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 8001102:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001106:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001108:	2300      	movs	r3, #0
 800110a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8001114:	2300      	movs	r3, #0
 8001116:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2200      	movs	r2, #0
 800111e:	4619      	mov	r1, r3
 8001120:	4805      	ldr	r0, [pc, #20]	; (8001138 <MX_LTDC_Init+0xfc>)
 8001122:	f006 f943 	bl	80073ac <HAL_LTDC_ConfigLayer>
 8001126:	4603      	mov	r3, r0
 8001128:	2b00      	cmp	r3, #0
 800112a:	d001      	beq.n	8001130 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 800112c:	f001 f932 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001130:	bf00      	nop
 8001132:	3738      	adds	r7, #56	; 0x38
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	200088a4 	.word	0x200088a4
 800113c:	40016800 	.word	0x40016800

08001140 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b092      	sub	sp, #72	; 0x48
 8001144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001146:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800114a:	2200      	movs	r2, #0
 800114c:	601a      	str	r2, [r3, #0]
 800114e:	605a      	str	r2, [r3, #4]
 8001150:	609a      	str	r2, [r3, #8]
 8001152:	60da      	str	r2, [r3, #12]
 8001154:	611a      	str	r2, [r3, #16]
 8001156:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001158:	2300      	movs	r3, #0
 800115a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 800115c:	463b      	mov	r3, r7
 800115e:	222c      	movs	r2, #44	; 0x2c
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f00c fe99 	bl	800de9a <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001168:	4b46      	ldr	r3, [pc, #280]	; (8001284 <MX_RTC_Init+0x144>)
 800116a:	4a47      	ldr	r2, [pc, #284]	; (8001288 <MX_RTC_Init+0x148>)
 800116c:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800116e:	4b45      	ldr	r3, [pc, #276]	; (8001284 <MX_RTC_Init+0x144>)
 8001170:	2200      	movs	r2, #0
 8001172:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001174:	4b43      	ldr	r3, [pc, #268]	; (8001284 <MX_RTC_Init+0x144>)
 8001176:	227f      	movs	r2, #127	; 0x7f
 8001178:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800117a:	4b42      	ldr	r3, [pc, #264]	; (8001284 <MX_RTC_Init+0x144>)
 800117c:	22ff      	movs	r2, #255	; 0xff
 800117e:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001180:	4b40      	ldr	r3, [pc, #256]	; (8001284 <MX_RTC_Init+0x144>)
 8001182:	2200      	movs	r2, #0
 8001184:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001186:	4b3f      	ldr	r3, [pc, #252]	; (8001284 <MX_RTC_Init+0x144>)
 8001188:	2200      	movs	r2, #0
 800118a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 800118c:	4b3d      	ldr	r3, [pc, #244]	; (8001284 <MX_RTC_Init+0x144>)
 800118e:	2200      	movs	r2, #0
 8001190:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001192:	483c      	ldr	r0, [pc, #240]	; (8001284 <MX_RTC_Init+0x144>)
 8001194:	f007 fbe6 	bl	8008964 <HAL_RTC_Init>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 800119e:	f001 f8f9 	bl	8002394 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80011a8:	2300      	movs	r3, #0
 80011aa:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80011ae:	2300      	movs	r3, #0
 80011b0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80011b4:	2300      	movs	r3, #0
 80011b6:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80011bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80011c0:	2201      	movs	r2, #1
 80011c2:	4619      	mov	r1, r3
 80011c4:	482f      	ldr	r0, [pc, #188]	; (8001284 <MX_RTC_Init+0x144>)
 80011c6:	f007 fc49 	bl	8008a5c <HAL_RTC_SetTime>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80011d0:	f001 f8e0 	bl	8002394 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 80011da:	2301      	movs	r3, #1
 80011dc:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 80011e0:	2301      	movs	r3, #1
 80011e2:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 80011e6:	2300      	movs	r3, #0
 80011e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80011ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011f0:	2201      	movs	r2, #1
 80011f2:	4619      	mov	r1, r3
 80011f4:	4823      	ldr	r0, [pc, #140]	; (8001284 <MX_RTC_Init+0x144>)
 80011f6:	f007 fd4d 	bl	8008c94 <HAL_RTC_SetDate>
 80011fa:	4603      	mov	r3, r0
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d001      	beq.n	8001204 <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001200:	f001 f8c8 	bl	8002394 <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 8001204:	2300      	movs	r3, #0
 8001206:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001208:	2300      	movs	r3, #0
 800120a:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 800120c:	2300      	movs	r3, #0
 800120e:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001214:	2300      	movs	r3, #0
 8001216:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001218:	2300      	movs	r3, #0
 800121a:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001220:	2300      	movs	r3, #0
 8001222:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 8001224:	2300      	movs	r3, #0
 8001226:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001228:	2301      	movs	r3, #1
 800122a:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 800122e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001232:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001234:	463b      	mov	r3, r7
 8001236:	2201      	movs	r2, #1
 8001238:	4619      	mov	r1, r3
 800123a:	4812      	ldr	r0, [pc, #72]	; (8001284 <MX_RTC_Init+0x144>)
 800123c:	f007 fe22 	bl	8008e84 <HAL_RTC_SetAlarm>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 8001246:	f001 f8a5 	bl	8002394 <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 800124a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800124e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001250:	463b      	mov	r3, r7
 8001252:	2201      	movs	r2, #1
 8001254:	4619      	mov	r1, r3
 8001256:	480b      	ldr	r0, [pc, #44]	; (8001284 <MX_RTC_Init+0x144>)
 8001258:	f007 fe14 	bl	8008e84 <HAL_RTC_SetAlarm>
 800125c:	4603      	mov	r3, r0
 800125e:	2b00      	cmp	r3, #0
 8001260:	d001      	beq.n	8001266 <MX_RTC_Init+0x126>
  {
    Error_Handler();
 8001262:	f001 f897 	bl	8002394 <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 8001266:	2202      	movs	r2, #2
 8001268:	2100      	movs	r1, #0
 800126a:	4806      	ldr	r0, [pc, #24]	; (8001284 <MX_RTC_Init+0x144>)
 800126c:	f007 ffb2 	bl	80091d4 <HAL_RTCEx_SetTimeStamp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d001      	beq.n	800127a <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 8001276:	f001 f88d 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800127a:	bf00      	nop
 800127c:	3748      	adds	r7, #72	; 0x48
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20008a78 	.word	0x20008a78
 8001288:	40002800 	.word	0x40002800

0800128c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8001290:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <MX_SPI2_Init+0x74>)
 8001292:	4a1c      	ldr	r2, [pc, #112]	; (8001304 <MX_SPI2_Init+0x78>)
 8001294:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001296:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_SPI2_Init+0x74>)
 8001298:	f44f 7282 	mov.w	r2, #260	; 0x104
 800129c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <MX_SPI2_Init+0x74>)
 80012a0:	2200      	movs	r2, #0
 80012a2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80012a4:	4b16      	ldr	r3, [pc, #88]	; (8001300 <MX_SPI2_Init+0x74>)
 80012a6:	f44f 7240 	mov.w	r2, #768	; 0x300
 80012aa:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012ac:	4b14      	ldr	r3, [pc, #80]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012b2:	4b13      	ldr	r3, [pc, #76]	; (8001300 <MX_SPI2_Init+0x74>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80012b8:	4b11      	ldr	r3, [pc, #68]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80012be:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80012c0:	4b0f      	ldr	r3, [pc, #60]	; (8001300 <MX_SPI2_Init+0x74>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012c6:	4b0e      	ldr	r3, [pc, #56]	; (8001300 <MX_SPI2_Init+0x74>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012cc:	4b0c      	ldr	r3, [pc, #48]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012d2:	4b0b      	ldr	r3, [pc, #44]	; (8001300 <MX_SPI2_Init+0x74>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80012d8:	4b09      	ldr	r3, [pc, #36]	; (8001300 <MX_SPI2_Init+0x74>)
 80012da:	2207      	movs	r2, #7
 80012dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80012de:	4b08      	ldr	r3, [pc, #32]	; (8001300 <MX_SPI2_Init+0x74>)
 80012e0:	2200      	movs	r2, #0
 80012e2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80012e4:	4b06      	ldr	r3, [pc, #24]	; (8001300 <MX_SPI2_Init+0x74>)
 80012e6:	2208      	movs	r2, #8
 80012e8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012ea:	4805      	ldr	r0, [pc, #20]	; (8001300 <MX_SPI2_Init+0x74>)
 80012ec:	f008 f847 	bl	800937e <HAL_SPI_Init>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80012f6:	f001 f84d 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200086b4 	.word	0x200086b4
 8001304:	40003800 	.word	0x40003800

08001308 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b088      	sub	sp, #32
 800130c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0310 	add.w	r3, r7, #16
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	1d3b      	adds	r3, r7, #4
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]
 8001324:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001326:	4b20      	ldr	r3, [pc, #128]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001328:	4a20      	ldr	r2, [pc, #128]	; (80013ac <MX_TIM1_Init+0xa4>)
 800132a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800132c:	4b1e      	ldr	r3, [pc, #120]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800132e:	2200      	movs	r2, #0
 8001330:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1d      	ldr	r3, [pc, #116]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001338:	4b1b      	ldr	r3, [pc, #108]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800133a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800133e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b19      	ldr	r3, [pc, #100]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001346:	4b18      	ldr	r3, [pc, #96]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001348:	2200      	movs	r2, #0
 800134a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b16      	ldr	r3, [pc, #88]	; (80013a8 <MX_TIM1_Init+0xa0>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001352:	4815      	ldr	r0, [pc, #84]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001354:	f008 f8a5 	bl	80094a2 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 800135e:	f001 f819 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001366:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0310 	add.w	r3, r7, #16
 800136c:	4619      	mov	r1, r3
 800136e:	480e      	ldr	r0, [pc, #56]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001370:	f008 fb58 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 800137a:	f001 f80b 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138a:	1d3b      	adds	r3, r7, #4
 800138c:	4619      	mov	r1, r3
 800138e:	4806      	ldr	r0, [pc, #24]	; (80013a8 <MX_TIM1_Init+0xa0>)
 8001390:	f009 f88c 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800139a:	f000 fffb 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800139e:	bf00      	nop
 80013a0:	3720      	adds	r7, #32
 80013a2:	46bd      	mov	sp, r7
 80013a4:	bd80      	pop	{r7, pc}
 80013a6:	bf00      	nop
 80013a8:	20008a98 	.word	0x20008a98
 80013ac:	40010000 	.word	0x40010000

080013b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b088      	sub	sp, #32
 80013b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013b6:	f107 0310 	add.w	r3, r7, #16
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]
 80013c0:	609a      	str	r2, [r3, #8]
 80013c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013c4:	1d3b      	adds	r3, r7, #4
 80013c6:	2200      	movs	r2, #0
 80013c8:	601a      	str	r2, [r3, #0]
 80013ca:	605a      	str	r2, [r3, #4]
 80013cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013ce:	4b1e      	ldr	r3, [pc, #120]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013d4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80013d6:	4b1c      	ldr	r3, [pc, #112]	; (8001448 <MX_TIM2_Init+0x98>)
 80013d8:	2200      	movs	r2, #0
 80013da:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b1a      	ldr	r3, [pc, #104]	; (8001448 <MX_TIM2_Init+0x98>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013e2:	4b19      	ldr	r3, [pc, #100]	; (8001448 <MX_TIM2_Init+0x98>)
 80013e4:	f04f 32ff 	mov.w	r2, #4294967295
 80013e8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b17      	ldr	r3, [pc, #92]	; (8001448 <MX_TIM2_Init+0x98>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b15      	ldr	r3, [pc, #84]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f6:	4814      	ldr	r0, [pc, #80]	; (8001448 <MX_TIM2_Init+0x98>)
 80013f8:	f008 f853 	bl	80094a2 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001402:	f000 ffc7 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800140c:	f107 0310 	add.w	r3, r7, #16
 8001410:	4619      	mov	r1, r3
 8001412:	480d      	ldr	r0, [pc, #52]	; (8001448 <MX_TIM2_Init+0x98>)
 8001414:	f008 fb06 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800141e:	f000 ffb9 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001422:	2300      	movs	r3, #0
 8001424:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800142a:	1d3b      	adds	r3, r7, #4
 800142c:	4619      	mov	r1, r3
 800142e:	4806      	ldr	r0, [pc, #24]	; (8001448 <MX_TIM2_Init+0x98>)
 8001430:	f009 f83c 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800143a:	f000 ffab 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800143e:	bf00      	nop
 8001440:	3720      	adds	r7, #32
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20008b98 	.word	0x20008b98

0800144c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08c      	sub	sp, #48	; 0x30
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0320 	add.w	r3, r7, #32
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001460:	f107 030c 	add.w	r3, r7, #12
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	609a      	str	r2, [r3, #8]
 800146c:	60da      	str	r2, [r3, #12]
 800146e:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001470:	463b      	mov	r3, r7
 8001472:	2200      	movs	r2, #0
 8001474:	601a      	str	r2, [r3, #0]
 8001476:	605a      	str	r2, [r3, #4]
 8001478:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800147a:	4b25      	ldr	r3, [pc, #148]	; (8001510 <MX_TIM3_Init+0xc4>)
 800147c:	4a25      	ldr	r2, [pc, #148]	; (8001514 <MX_TIM3_Init+0xc8>)
 800147e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001480:	4b23      	ldr	r3, [pc, #140]	; (8001510 <MX_TIM3_Init+0xc4>)
 8001482:	2200      	movs	r2, #0
 8001484:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001486:	4b22      	ldr	r3, [pc, #136]	; (8001510 <MX_TIM3_Init+0xc4>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800148c:	4b20      	ldr	r3, [pc, #128]	; (8001510 <MX_TIM3_Init+0xc4>)
 800148e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001492:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001494:	4b1e      	ldr	r3, [pc, #120]	; (8001510 <MX_TIM3_Init+0xc4>)
 8001496:	2200      	movs	r2, #0
 8001498:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149a:	4b1d      	ldr	r3, [pc, #116]	; (8001510 <MX_TIM3_Init+0xc4>)
 800149c:	2200      	movs	r2, #0
 800149e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80014a0:	481b      	ldr	r0, [pc, #108]	; (8001510 <MX_TIM3_Init+0xc4>)
 80014a2:	f007 fffe 	bl	80094a2 <HAL_TIM_Base_Init>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80014ac:	f000 ff72 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b4:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80014b6:	f107 0320 	add.w	r3, r7, #32
 80014ba:	4619      	mov	r1, r3
 80014bc:	4814      	ldr	r0, [pc, #80]	; (8001510 <MX_TIM3_Init+0xc4>)
 80014be:	f008 fab1 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80014c8:	f000 ff64 	bl	8002394 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80014d0:	2300      	movs	r3, #0
 80014d2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80014d4:	f107 030c 	add.w	r3, r7, #12
 80014d8:	4619      	mov	r1, r3
 80014da:	480d      	ldr	r0, [pc, #52]	; (8001510 <MX_TIM3_Init+0xc4>)
 80014dc:	f008 fb5c 	bl	8009b98 <HAL_TIM_SlaveConfigSynchro>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 80014e6:	f000 ff55 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014ea:	2300      	movs	r3, #0
 80014ec:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014f2:	463b      	mov	r3, r7
 80014f4:	4619      	mov	r1, r3
 80014f6:	4806      	ldr	r0, [pc, #24]	; (8001510 <MX_TIM3_Init+0xc4>)
 80014f8:	f008 ffd8 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 80014fc:	4603      	mov	r3, r0
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d001      	beq.n	8001506 <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 8001502:	f000 ff47 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001506:	bf00      	nop
 8001508:	3730      	adds	r7, #48	; 0x30
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	20008864 	.word	0x20008864
 8001514:	40000400 	.word	0x40000400

08001518 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800151e:	f107 0310 	add.w	r3, r7, #16
 8001522:	2200      	movs	r2, #0
 8001524:	601a      	str	r2, [r3, #0]
 8001526:	605a      	str	r2, [r3, #4]
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800152c:	1d3b      	adds	r3, r7, #4
 800152e:	2200      	movs	r2, #0
 8001530:	601a      	str	r2, [r3, #0]
 8001532:	605a      	str	r2, [r3, #4]
 8001534:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001536:	4b1d      	ldr	r3, [pc, #116]	; (80015ac <MX_TIM5_Init+0x94>)
 8001538:	4a1d      	ldr	r2, [pc, #116]	; (80015b0 <MX_TIM5_Init+0x98>)
 800153a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 800153c:	4b1b      	ldr	r3, [pc, #108]	; (80015ac <MX_TIM5_Init+0x94>)
 800153e:	2200      	movs	r2, #0
 8001540:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001542:	4b1a      	ldr	r3, [pc, #104]	; (80015ac <MX_TIM5_Init+0x94>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001548:	4b18      	ldr	r3, [pc, #96]	; (80015ac <MX_TIM5_Init+0x94>)
 800154a:	f04f 32ff 	mov.w	r2, #4294967295
 800154e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001550:	4b16      	ldr	r3, [pc, #88]	; (80015ac <MX_TIM5_Init+0x94>)
 8001552:	2200      	movs	r2, #0
 8001554:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <MX_TIM5_Init+0x94>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800155c:	4813      	ldr	r0, [pc, #76]	; (80015ac <MX_TIM5_Init+0x94>)
 800155e:	f007 ffa0 	bl	80094a2 <HAL_TIM_Base_Init>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001568:	f000 ff14 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800156c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001570:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	4619      	mov	r1, r3
 8001578:	480c      	ldr	r0, [pc, #48]	; (80015ac <MX_TIM5_Init+0x94>)
 800157a:	f008 fa53 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001584:	f000 ff06 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001590:	1d3b      	adds	r3, r7, #4
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_TIM5_Init+0x94>)
 8001596:	f008 ff89 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 800159a:	4603      	mov	r3, r0
 800159c:	2b00      	cmp	r3, #0
 800159e:	d001      	beq.n	80015a4 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80015a0:	f000 fef8 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015a4:	bf00      	nop
 80015a6:	3720      	adds	r7, #32
 80015a8:	46bd      	mov	sp, r7
 80015aa:	bd80      	pop	{r7, pc}
 80015ac:	20008824 	.word	0x20008824
 80015b0:	40000c00 	.word	0x40000c00

080015b4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b09a      	sub	sp, #104	; 0x68
 80015b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80015be:	2200      	movs	r2, #0
 80015c0:	601a      	str	r2, [r3, #0]
 80015c2:	605a      	str	r2, [r3, #4]
 80015c4:	609a      	str	r2, [r3, #8]
 80015c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015d4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015d8:	2200      	movs	r2, #0
 80015da:	601a      	str	r2, [r3, #0]
 80015dc:	605a      	str	r2, [r3, #4]
 80015de:	609a      	str	r2, [r3, #8]
 80015e0:	60da      	str	r2, [r3, #12]
 80015e2:	611a      	str	r2, [r3, #16]
 80015e4:	615a      	str	r2, [r3, #20]
 80015e6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015e8:	1d3b      	adds	r3, r7, #4
 80015ea:	222c      	movs	r2, #44	; 0x2c
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f00c fc53 	bl	800de9a <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015f4:	4b42      	ldr	r3, [pc, #264]	; (8001700 <MX_TIM8_Init+0x14c>)
 80015f6:	4a43      	ldr	r2, [pc, #268]	; (8001704 <MX_TIM8_Init+0x150>)
 80015f8:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015fa:	4b41      	ldr	r3, [pc, #260]	; (8001700 <MX_TIM8_Init+0x14c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001600:	4b3f      	ldr	r3, [pc, #252]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001602:	2200      	movs	r2, #0
 8001604:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001606:	4b3e      	ldr	r3, [pc, #248]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001608:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800160c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800160e:	4b3c      	ldr	r3, [pc, #240]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001614:	4b3a      	ldr	r3, [pc, #232]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001616:	2200      	movs	r2, #0
 8001618:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800161a:	4b39      	ldr	r3, [pc, #228]	; (8001700 <MX_TIM8_Init+0x14c>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001620:	4837      	ldr	r0, [pc, #220]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001622:	f007 ff3e 	bl	80094a2 <HAL_TIM_Base_Init>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 800162c:	f000 feb2 	bl	8002394 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001630:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001634:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001636:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800163a:	4619      	mov	r1, r3
 800163c:	4830      	ldr	r0, [pc, #192]	; (8001700 <MX_TIM8_Init+0x14c>)
 800163e:	f008 f9f1 	bl	8009a24 <HAL_TIM_ConfigClockSource>
 8001642:	4603      	mov	r3, r0
 8001644:	2b00      	cmp	r3, #0
 8001646:	d001      	beq.n	800164c <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001648:	f000 fea4 	bl	8002394 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800164c:	482c      	ldr	r0, [pc, #176]	; (8001700 <MX_TIM8_Init+0x14c>)
 800164e:	f007 ff7d 	bl	800954c <HAL_TIM_PWM_Init>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001658:	f000 fe9c 	bl	8002394 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800165c:	2300      	movs	r3, #0
 800165e:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001660:	2300      	movs	r3, #0
 8001662:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001664:	2300      	movs	r3, #0
 8001666:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001668:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800166c:	4619      	mov	r1, r3
 800166e:	4824      	ldr	r0, [pc, #144]	; (8001700 <MX_TIM8_Init+0x14c>)
 8001670:	f008 ff1c 	bl	800a4ac <HAL_TIMEx_MasterConfigSynchronization>
 8001674:	4603      	mov	r3, r0
 8001676:	2b00      	cmp	r3, #0
 8001678:	d001      	beq.n	800167e <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 800167a:	f000 fe8b 	bl	8002394 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800167e:	2360      	movs	r3, #96	; 0x60
 8001680:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8001682:	2300      	movs	r3, #0
 8001684:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001686:	2300      	movs	r3, #0
 8001688:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800168e:	2300      	movs	r3, #0
 8001690:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001696:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800169a:	220c      	movs	r2, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4818      	ldr	r0, [pc, #96]	; (8001700 <MX_TIM8_Init+0x14c>)
 80016a0:	f008 f8a8 	bl	80097f4 <HAL_TIM_PWM_ConfigChannel>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80016aa:	f000 fe73 	bl	8002394 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016ae:	2300      	movs	r3, #0
 80016b0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016b2:	2300      	movs	r3, #0
 80016b4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016b6:	2300      	movs	r3, #0
 80016b8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016ba:	2300      	movs	r3, #0
 80016bc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016be:	2300      	movs	r3, #0
 80016c0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016c6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80016c8:	2300      	movs	r3, #0
 80016ca:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80016d0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016d4:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80016d6:	2300      	movs	r3, #0
 80016d8:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016da:	2300      	movs	r3, #0
 80016dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80016de:	1d3b      	adds	r3, r7, #4
 80016e0:	4619      	mov	r1, r3
 80016e2:	4807      	ldr	r0, [pc, #28]	; (8001700 <MX_TIM8_Init+0x14c>)
 80016e4:	f008 ff70 	bl	800a5c8 <HAL_TIMEx_ConfigBreakDeadTime>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 80016ee:	f000 fe51 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80016f2:	4803      	ldr	r0, [pc, #12]	; (8001700 <MX_TIM8_Init+0x14c>)
 80016f4:	f002 ff4a 	bl	800458c <HAL_TIM_MspPostInit>

}
 80016f8:	bf00      	nop
 80016fa:	3768      	adds	r7, #104	; 0x68
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	20008798 	.word	0x20008798
 8001704:	40010400 	.word	0x40010400

08001708 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <MX_UART7_Init+0x58>)
 800170e:	4a15      	ldr	r2, [pc, #84]	; (8001764 <MX_UART7_Init+0x5c>)
 8001710:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 8001712:	4b13      	ldr	r3, [pc, #76]	; (8001760 <MX_UART7_Init+0x58>)
 8001714:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001718:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 800171a:	4b11      	ldr	r3, [pc, #68]	; (8001760 <MX_UART7_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001720:	4b0f      	ldr	r3, [pc, #60]	; (8001760 <MX_UART7_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8001726:	4b0e      	ldr	r3, [pc, #56]	; (8001760 <MX_UART7_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 800172c:	4b0c      	ldr	r3, [pc, #48]	; (8001760 <MX_UART7_Init+0x58>)
 800172e:	220c      	movs	r2, #12
 8001730:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001732:	4b0b      	ldr	r3, [pc, #44]	; (8001760 <MX_UART7_Init+0x58>)
 8001734:	2200      	movs	r2, #0
 8001736:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001738:	4b09      	ldr	r3, [pc, #36]	; (8001760 <MX_UART7_Init+0x58>)
 800173a:	2200      	movs	r2, #0
 800173c:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800173e:	4b08      	ldr	r3, [pc, #32]	; (8001760 <MX_UART7_Init+0x58>)
 8001740:	2200      	movs	r2, #0
 8001742:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <MX_UART7_Init+0x58>)
 8001746:	2200      	movs	r2, #0
 8001748:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 800174a:	4805      	ldr	r0, [pc, #20]	; (8001760 <MX_UART7_Init+0x58>)
 800174c:	f008 ffd8 	bl	800a700 <HAL_UART_Init>
 8001750:	4603      	mov	r3, r0
 8001752:	2b00      	cmp	r3, #0
 8001754:	d001      	beq.n	800175a <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8001756:	f000 fe1d 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 800175a:	bf00      	nop
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	20008718 	.word	0x20008718
 8001764:	40007800 	.word	0x40007800

08001768 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001768:	b580      	push	{r7, lr}
 800176a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800176c:	4b14      	ldr	r3, [pc, #80]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 800176e:	4a15      	ldr	r2, [pc, #84]	; (80017c4 <MX_USART1_UART_Init+0x5c>)
 8001770:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001772:	4b13      	ldr	r3, [pc, #76]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 8001774:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001778:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800177a:	4b11      	ldr	r3, [pc, #68]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 800177c:	2200      	movs	r2, #0
 800177e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001780:	4b0f      	ldr	r3, [pc, #60]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 8001782:	2200      	movs	r2, #0
 8001784:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001786:	4b0e      	ldr	r3, [pc, #56]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800178c:	4b0c      	ldr	r3, [pc, #48]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 800178e:	220c      	movs	r2, #12
 8001790:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001792:	4b0b      	ldr	r3, [pc, #44]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 8001794:	2200      	movs	r2, #0
 8001796:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001798:	4b09      	ldr	r3, [pc, #36]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 800179a:	2200      	movs	r2, #0
 800179c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800179e:	4b08      	ldr	r3, [pc, #32]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80017a4:	4b06      	ldr	r3, [pc, #24]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80017aa:	4805      	ldr	r0, [pc, #20]	; (80017c0 <MX_USART1_UART_Init+0x58>)
 80017ac:	f008 ffa8 	bl	800a700 <HAL_UART_Init>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80017b6:	f000 fded 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80017ba:	bf00      	nop
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200089e4 	.word	0x200089e4
 80017c4:	40011000 	.word	0x40011000

080017c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017ce:	4a15      	ldr	r2, [pc, #84]	; (8001824 <MX_USART6_UART_Init+0x5c>)
 80017d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80017d2:	4b13      	ldr	r3, [pc, #76]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80017d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80017da:	4b11      	ldr	r3, [pc, #68]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017dc:	2200      	movs	r2, #0
 80017de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80017e0:	4b0f      	ldr	r3, [pc, #60]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80017e6:	4b0e      	ldr	r3, [pc, #56]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80017ec:	4b0c      	ldr	r3, [pc, #48]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017ee:	220c      	movs	r2, #12
 80017f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80017f2:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80017f8:	4b09      	ldr	r3, [pc, #36]	; (8001820 <MX_USART6_UART_Init+0x58>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80017fe:	4b08      	ldr	r3, [pc, #32]	; (8001820 <MX_USART6_UART_Init+0x58>)
 8001800:	2200      	movs	r2, #0
 8001802:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <MX_USART6_UART_Init+0x58>)
 8001806:	2200      	movs	r2, #0
 8001808:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800180a:	4805      	ldr	r0, [pc, #20]	; (8001820 <MX_USART6_UART_Init+0x58>)
 800180c:	f008 ff78 	bl	800a700 <HAL_UART_Init>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8001816:	f000 fdbd 	bl	8002394 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800181a:	bf00      	nop
 800181c:	bd80      	pop	{r7, pc}
 800181e:	bf00      	nop
 8001820:	20008ad8 	.word	0x20008ad8
 8001824:	40011400 	.word	0x40011400

08001828 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b088      	sub	sp, #32
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 800182e:	1d3b      	adds	r3, r7, #4
 8001830:	2200      	movs	r2, #0
 8001832:	601a      	str	r2, [r3, #0]
 8001834:	605a      	str	r2, [r3, #4]
 8001836:	609a      	str	r2, [r3, #8]
 8001838:	60da      	str	r2, [r3, #12]
 800183a:	611a      	str	r2, [r3, #16]
 800183c:	615a      	str	r2, [r3, #20]
 800183e:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001840:	4b1e      	ldr	r3, [pc, #120]	; (80018bc <MX_FMC_Init+0x94>)
 8001842:	4a1f      	ldr	r2, [pc, #124]	; (80018c0 <MX_FMC_Init+0x98>)
 8001844:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 8001846:	4b1d      	ldr	r3, [pc, #116]	; (80018bc <MX_FMC_Init+0x94>)
 8001848:	2200      	movs	r2, #0
 800184a:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800184c:	4b1b      	ldr	r3, [pc, #108]	; (80018bc <MX_FMC_Init+0x94>)
 800184e:	2200      	movs	r2, #0
 8001850:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001852:	4b1a      	ldr	r3, [pc, #104]	; (80018bc <MX_FMC_Init+0x94>)
 8001854:	2204      	movs	r2, #4
 8001856:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001858:	4b18      	ldr	r3, [pc, #96]	; (80018bc <MX_FMC_Init+0x94>)
 800185a:	2210      	movs	r2, #16
 800185c:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <MX_FMC_Init+0x94>)
 8001860:	2240      	movs	r2, #64	; 0x40
 8001862:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8001864:	4b15      	ldr	r3, [pc, #84]	; (80018bc <MX_FMC_Init+0x94>)
 8001866:	2280      	movs	r2, #128	; 0x80
 8001868:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800186a:	4b14      	ldr	r3, [pc, #80]	; (80018bc <MX_FMC_Init+0x94>)
 800186c:	2200      	movs	r2, #0
 800186e:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001870:	4b12      	ldr	r3, [pc, #72]	; (80018bc <MX_FMC_Init+0x94>)
 8001872:	2200      	movs	r2, #0
 8001874:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8001876:	4b11      	ldr	r3, [pc, #68]	; (80018bc <MX_FMC_Init+0x94>)
 8001878:	2200      	movs	r2, #0
 800187a:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800187c:	4b0f      	ldr	r3, [pc, #60]	; (80018bc <MX_FMC_Init+0x94>)
 800187e:	2200      	movs	r2, #0
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8001882:	2310      	movs	r3, #16
 8001884:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8001886:	2310      	movs	r3, #16
 8001888:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 800188a:	2310      	movs	r3, #16
 800188c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 800188e:	2310      	movs	r3, #16
 8001890:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8001892:	2310      	movs	r3, #16
 8001894:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8001896:	2310      	movs	r3, #16
 8001898:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 800189a:	2310      	movs	r3, #16
 800189c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4806      	ldr	r0, [pc, #24]	; (80018bc <MX_FMC_Init+0x94>)
 80018a4:	f007 fcec 	bl	8009280 <HAL_SDRAM_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80018ae:	f000 fd71 	bl	8002394 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80018b2:	bf00      	nop
 80018b4:	3720      	adds	r7, #32
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20008bd8 	.word	0x20008bd8
 80018c0:	a0000140 	.word	0xa0000140

080018c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b090      	sub	sp, #64	; 0x40
 80018c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80018ce:	2200      	movs	r2, #0
 80018d0:	601a      	str	r2, [r3, #0]
 80018d2:	605a      	str	r2, [r3, #4]
 80018d4:	609a      	str	r2, [r3, #8]
 80018d6:	60da      	str	r2, [r3, #12]
 80018d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018da:	4bb0      	ldr	r3, [pc, #704]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4aaf      	ldr	r2, [pc, #700]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0310 	orr.w	r3, r3, #16
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4bad      	ldr	r3, [pc, #692]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0310 	and.w	r3, r3, #16
 80018ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80018f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f2:	4baa      	ldr	r3, [pc, #680]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4aa9      	ldr	r2, [pc, #676]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0302 	orr.w	r3, r3, #2
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4ba7      	ldr	r3, [pc, #668]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0302 	and.w	r3, r3, #2
 8001906:	627b      	str	r3, [r7, #36]	; 0x24
 8001908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190a:	4ba4      	ldr	r3, [pc, #656]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 800190c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800190e:	4aa3      	ldr	r2, [pc, #652]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001910:	f043 0301 	orr.w	r3, r3, #1
 8001914:	6313      	str	r3, [r2, #48]	; 0x30
 8001916:	4ba1      	ldr	r3, [pc, #644]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191a:	f003 0301 	and.w	r3, r3, #1
 800191e:	623b      	str	r3, [r7, #32]
 8001920:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001922:	4b9e      	ldr	r3, [pc, #632]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001926:	4a9d      	ldr	r2, [pc, #628]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001928:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800192c:	6313      	str	r3, [r2, #48]	; 0x30
 800192e:	4b9b      	ldr	r3, [pc, #620]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001932:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001936:	61fb      	str	r3, [r7, #28]
 8001938:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 800193a:	4b98      	ldr	r3, [pc, #608]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	4a97      	ldr	r2, [pc, #604]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001940:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001944:	6313      	str	r3, [r2, #48]	; 0x30
 8001946:	4b95      	ldr	r3, [pc, #596]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001952:	4b92      	ldr	r3, [pc, #584]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	4a91      	ldr	r2, [pc, #580]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001958:	f043 0308 	orr.w	r3, r3, #8
 800195c:	6313      	str	r3, [r2, #48]	; 0x30
 800195e:	4b8f      	ldr	r3, [pc, #572]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001962:	f003 0308 	and.w	r3, r3, #8
 8001966:	617b      	str	r3, [r7, #20]
 8001968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800196a:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 800196c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800196e:	4a8b      	ldr	r2, [pc, #556]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001970:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001974:	6313      	str	r3, [r2, #48]	; 0x30
 8001976:	4b89      	ldr	r3, [pc, #548]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800197a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800197e:	613b      	str	r3, [r7, #16]
 8001980:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8001982:	4b86      	ldr	r3, [pc, #536]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001986:	4a85      	ldr	r2, [pc, #532]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001988:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800198c:	6313      	str	r3, [r2, #48]	; 0x30
 800198e:	4b83      	ldr	r3, [pc, #524]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001992:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199a:	4b80      	ldr	r3, [pc, #512]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199e:	4a7f      	ldr	r2, [pc, #508]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019a0:	f043 0304 	orr.w	r3, r3, #4
 80019a4:	6313      	str	r3, [r2, #48]	; 0x30
 80019a6:	4b7d      	ldr	r3, [pc, #500]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019aa:	f003 0304 	and.w	r3, r3, #4
 80019ae:	60bb      	str	r3, [r7, #8]
 80019b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80019b2:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019b6:	4a79      	ldr	r2, [pc, #484]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019b8:	f043 0320 	orr.w	r3, r3, #32
 80019bc:	6313      	str	r3, [r2, #48]	; 0x30
 80019be:	4b77      	ldr	r3, [pc, #476]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019c2:	f003 0320 	and.w	r3, r3, #32
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80019ca:	4b74      	ldr	r3, [pc, #464]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ce:	4a73      	ldr	r2, [pc, #460]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80019d4:	6313      	str	r3, [r2, #48]	; 0x30
 80019d6:	4b71      	ldr	r3, [pc, #452]	; (8001b9c <MX_GPIO_Init+0x2d8>)
 80019d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019de:	603b      	str	r3, [r7, #0]
 80019e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 80019e2:	2200      	movs	r2, #0
 80019e4:	2110      	movs	r1, #16
 80019e6:	486e      	ldr	r0, [pc, #440]	; (8001ba0 <MX_GPIO_Init+0x2dc>)
 80019e8:	f004 fd84 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 80019ec:	2200      	movs	r2, #0
 80019ee:	2160      	movs	r1, #96	; 0x60
 80019f0:	486c      	ldr	r0, [pc, #432]	; (8001ba4 <MX_GPIO_Init+0x2e0>)
 80019f2:	f004 fd7f 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 80019f6:	2201      	movs	r2, #1
 80019f8:	2120      	movs	r1, #32
 80019fa:	486b      	ldr	r0, [pc, #428]	; (8001ba8 <MX_GPIO_Init+0x2e4>)
 80019fc:	f004 fd7a 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001a00:	2200      	movs	r2, #0
 8001a02:	2108      	movs	r1, #8
 8001a04:	4868      	ldr	r0, [pc, #416]	; (8001ba8 <MX_GPIO_Init+0x2e4>)
 8001a06:	f004 fd75 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	2108      	movs	r1, #8
 8001a0e:	4867      	ldr	r0, [pc, #412]	; (8001bac <MX_GPIO_Init+0x2e8>)
 8001a10:	f004 fd70 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 8001a14:	2201      	movs	r2, #1
 8001a16:	2108      	movs	r1, #8
 8001a18:	4865      	ldr	r0, [pc, #404]	; (8001bb0 <MX_GPIO_Init+0x2ec>)
 8001a1a:	f004 fd6b 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001a1e:	2201      	movs	r2, #1
 8001a20:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001a24:	4861      	ldr	r0, [pc, #388]	; (8001bac <MX_GPIO_Init+0x2e8>)
 8001a26:	f004 fd65 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001a30:	4860      	ldr	r0, [pc, #384]	; (8001bb4 <MX_GPIO_Init+0x2f0>)
 8001a32:	f004 fd5f 	bl	80064f4 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 8001a36:	2200      	movs	r2, #0
 8001a38:	2108      	movs	r1, #8
 8001a3a:	485f      	ldr	r0, [pc, #380]	; (8001bb8 <MX_GPIO_Init+0x2f4>)
 8001a3c:	f004 fd5a 	bl	80064f4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001a40:	2308      	movs	r3, #8
 8001a42:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a44:	2300      	movs	r3, #0
 8001a46:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a50:	4619      	mov	r1, r3
 8001a52:	4854      	ldr	r0, [pc, #336]	; (8001ba4 <MX_GPIO_Init+0x2e0>)
 8001a54:	f004 fa82 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001a58:	f643 0323 	movw	r3, #14371	; 0x3823
 8001a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a5e:	2302      	movs	r3, #2
 8001a60:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a62:	2300      	movs	r3, #0
 8001a64:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a66:	2303      	movs	r3, #3
 8001a68:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001a6a:	230a      	movs	r3, #10
 8001a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	484a      	ldr	r0, [pc, #296]	; (8001ba0 <MX_GPIO_Init+0x2dc>)
 8001a76:	f004 fa71 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001a7a:	2310      	movs	r3, #16
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4843      	ldr	r0, [pc, #268]	; (8001ba0 <MX_GPIO_Init+0x2dc>)
 8001a92:	f004 fa63 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 8001a96:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 8001a9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	4844      	ldr	r0, [pc, #272]	; (8001bbc <MX_GPIO_Init+0x2f8>)
 8001aac:	f004 fa56 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 8001ab0:	2360      	movs	r3, #96	; 0x60
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001abc:	2300      	movs	r3, #0
 8001abe:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ac0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac4:	4619      	mov	r1, r3
 8001ac6:	4837      	ldr	r0, [pc, #220]	; (8001ba4 <MX_GPIO_Init+0x2e0>)
 8001ac8:	f004 fa48 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 8001acc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad6:	2300      	movs	r3, #0
 8001ad8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001ada:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ade:	4619      	mov	r1, r3
 8001ae0:	4837      	ldr	r0, [pc, #220]	; (8001bc0 <MX_GPIO_Init+0x2fc>)
 8001ae2:	f004 fa3b 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001ae6:	2340      	movs	r3, #64	; 0x40
 8001ae8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001aea:	4b36      	ldr	r3, [pc, #216]	; (8001bc4 <MX_GPIO_Init+0x300>)
 8001aec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aee:	2300      	movs	r3, #0
 8001af0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001af6:	4619      	mov	r1, r3
 8001af8:	482b      	ldr	r0, [pc, #172]	; (8001ba8 <MX_GPIO_Init+0x2e4>)
 8001afa:	f004 fa2f 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001afe:	2328      	movs	r3, #40	; 0x28
 8001b00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b02:	2301      	movs	r3, #1
 8001b04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b06:	2300      	movs	r3, #0
 8001b08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b0e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b12:	4619      	mov	r1, r3
 8001b14:	4824      	ldr	r0, [pc, #144]	; (8001ba8 <MX_GPIO_Init+0x2e4>)
 8001b16:	f004 fa21 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001b1a:	f241 0308 	movw	r3, #4104	; 0x1008
 8001b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b20:	2301      	movs	r3, #1
 8001b22:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b24:	2300      	movs	r3, #0
 8001b26:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001b2c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b30:	4619      	mov	r1, r3
 8001b32:	481e      	ldr	r0, [pc, #120]	; (8001bac <MX_GPIO_Init+0x2e8>)
 8001b34:	f004 fa12 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001b38:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b3e:	2300      	movs	r3, #0
 8001b40:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b42:	2300      	movs	r3, #0
 8001b44:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	481e      	ldr	r0, [pc, #120]	; (8001bc8 <MX_GPIO_Init+0x304>)
 8001b4e:	f004 fa05 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001b52:	2308      	movs	r3, #8
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b56:	2301      	movs	r3, #1
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001b62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b66:	4619      	mov	r1, r3
 8001b68:	4811      	ldr	r0, [pc, #68]	; (8001bb0 <MX_GPIO_Init+0x2ec>)
 8001b6a:	f004 f9f7 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001b6e:	2310      	movs	r3, #16
 8001b70:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b72:	2300      	movs	r3, #0
 8001b74:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b76:	2300      	movs	r3, #0
 8001b78:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001b7a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b7e:	4619      	mov	r1, r3
 8001b80:	4809      	ldr	r0, [pc, #36]	; (8001ba8 <MX_GPIO_Init+0x2e4>)
 8001b82:	f004 f9eb 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001b86:	f248 0304 	movw	r3, #32772	; 0x8004
 8001b8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b8c:	2300      	movs	r3, #0
 8001b8e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b94:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b98:	4619      	mov	r1, r3
 8001b9a:	e017      	b.n	8001bcc <MX_GPIO_Init+0x308>
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020400 	.word	0x40020400
 8001ba4:	40021000 	.word	0x40021000
 8001ba8:	40020c00 	.word	0x40020c00
 8001bac:	40022000 	.word	0x40022000
 8001bb0:	40022800 	.word	0x40022800
 8001bb4:	40021c00 	.word	0x40021c00
 8001bb8:	40021800 	.word	0x40021800
 8001bbc:	40020000 	.word	0x40020000
 8001bc0:	40022400 	.word	0x40022400
 8001bc4:	10120000 	.word	0x10120000
 8001bc8:	40020800 	.word	0x40020800
 8001bcc:	4836      	ldr	r0, [pc, #216]	; (8001ca8 <MX_GPIO_Init+0x3e4>)
 8001bce:	f004 f9c5 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001bd2:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001bd6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001be0:	2300      	movs	r3, #0
 8001be2:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001be4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001be8:	4619      	mov	r1, r3
 8001bea:	482f      	ldr	r0, [pc, #188]	; (8001ca8 <MX_GPIO_Init+0x3e4>)
 8001bec:	f004 f9b6 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001bf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001bf4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001bf6:	4b2d      	ldr	r3, [pc, #180]	; (8001cac <MX_GPIO_Init+0x3e8>)
 8001bf8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bfa:	2300      	movs	r3, #0
 8001bfc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c02:	4619      	mov	r1, r3
 8001c04:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <MX_GPIO_Init+0x3ec>)
 8001c06:	f004 f9a9 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001c0a:	2310      	movs	r3, #16
 8001c0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0e:	2302      	movs	r3, #2
 8001c10:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c12:	2300      	movs	r3, #0
 8001c14:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c16:	2303      	movs	r3, #3
 8001c18:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c1a:	230a      	movs	r3, #10
 8001c1c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001c1e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c22:	4619      	mov	r1, r3
 8001c24:	4820      	ldr	r0, [pc, #128]	; (8001ca8 <MX_GPIO_Init+0x3e4>)
 8001c26:	f004 f999 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001c2a:	2384      	movs	r3, #132	; 0x84
 8001c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c32:	2300      	movs	r3, #0
 8001c34:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001c36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	481d      	ldr	r0, [pc, #116]	; (8001cb4 <MX_GPIO_Init+0x3f0>)
 8001c3e:	f004 f98d 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001c42:	2305      	movs	r3, #5
 8001c44:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c46:	2302      	movs	r3, #2
 8001c48:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c52:	230a      	movs	r3, #10
 8001c54:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c56:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c5a:	4619      	mov	r1, r3
 8001c5c:	4816      	ldr	r0, [pc, #88]	; (8001cb8 <MX_GPIO_Init+0x3f4>)
 8001c5e:	f004 f97d 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001c62:	2308      	movs	r3, #8
 8001c64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001c72:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c76:	4619      	mov	r1, r3
 8001c78:	480e      	ldr	r0, [pc, #56]	; (8001cb4 <MX_GPIO_Init+0x3f0>)
 8001c7a:	f004 f96f 	bl	8005f5c <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001c7e:	2328      	movs	r3, #40	; 0x28
 8001c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c82:	2302      	movs	r3, #2
 8001c84:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c86:	2300      	movs	r3, #0
 8001c88:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c8a:	2303      	movs	r3, #3
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001c8e:	230a      	movs	r3, #10
 8001c90:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c96:	4619      	mov	r1, r3
 8001c98:	4808      	ldr	r0, [pc, #32]	; (8001cbc <MX_GPIO_Init+0x3f8>)
 8001c9a:	f004 f95f 	bl	8005f5c <HAL_GPIO_Init>

}
 8001c9e:	bf00      	nop
 8001ca0:	3740      	adds	r7, #64	; 0x40
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	40021c00 	.word	0x40021c00
 8001cac:	10120000 	.word	0x10120000
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021800 	.word	0x40021800
 8001cb8:	40020800 	.word	0x40020800
 8001cbc:	40020000 	.word	0x40020000

08001cc0 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	uint8_t Message;

	//Capture du message transmis sur la liaison série
	Message = rxbuffer[0];
 8001cc8:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <HAL_UART_RxCpltCallback+0x48>)
 8001cca:	781b      	ldrb	r3, [r3, #0]
 8001ccc:	73fb      	strb	r3, [r7, #15]

	if(rxbuffer[0]=='a') HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,1);
 8001cce:	4b0e      	ldr	r3, [pc, #56]	; (8001d08 <HAL_UART_RxCpltCallback+0x48>)
 8001cd0:	781b      	ldrb	r3, [r3, #0]
 8001cd2:	2b61      	cmp	r3, #97	; 0x61
 8001cd4:	d104      	bne.n	8001ce0 <HAL_UART_RxCpltCallback+0x20>
 8001cd6:	2201      	movs	r2, #1
 8001cd8:	2110      	movs	r1, #16
 8001cda:	480c      	ldr	r0, [pc, #48]	; (8001d0c <HAL_UART_RxCpltCallback+0x4c>)
 8001cdc:	f004 fc0a 	bl	80064f4 <HAL_GPIO_WritePin>

	if(rxbuffer[0]=='e') HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin,0);
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_UART_RxCpltCallback+0x48>)
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	2b65      	cmp	r3, #101	; 0x65
 8001ce6:	d104      	bne.n	8001cf2 <HAL_UART_RxCpltCallback+0x32>
 8001ce8:	2200      	movs	r2, #0
 8001cea:	2110      	movs	r1, #16
 8001cec:	4807      	ldr	r0, [pc, #28]	; (8001d0c <HAL_UART_RxCpltCallback+0x4c>)
 8001cee:	f004 fc01 	bl	80064f4 <HAL_GPIO_WritePin>
//		xQueueSendFromISR(myQueueU2HHandle, &Message, 0);
//		vTaskResume(BgChangerHandle);
//	}

	//Réinitialisation de la variable Message
	Message = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	73fb      	strb	r3, [r7, #15]

	HAL_UART_Receive_IT(&huart1,rxbuffer,1);
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	4903      	ldr	r1, [pc, #12]	; (8001d08 <HAL_UART_RxCpltCallback+0x48>)
 8001cfa:	4805      	ldr	r0, [pc, #20]	; (8001d10 <HAL_UART_RxCpltCallback+0x50>)
 8001cfc:	f008 fd4e 	bl	800a79c <HAL_UART_Receive_IT>
}
 8001d00:	bf00      	nop
 8001d02:	3710      	adds	r7, #16
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	20008c10 	.word	0x20008c10
 8001d0c:	40020400 	.word	0x40020400
 8001d10:	200089e4 	.word	0x200089e4

08001d14 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b082      	sub	sp, #8
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1000);
 8001d1c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001d20:	f009 fda1 	bl	800b866 <osDelay>
 8001d24:	e7fa      	b.n	8001d1c <StartDefaultTask+0x8>
	...

08001d28 <Starthorloge>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_Starthorloge */
void Starthorloge(void const * argument)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b096      	sub	sp, #88	; 0x58
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Starthorloge */
	char text[50] = { };
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	2232      	movs	r2, #50	; 0x32
 8001d36:	2100      	movs	r1, #0
 8001d38:	4618      	mov	r0, r3
 8001d3a:	f00c f8ae 	bl	800de9a <memset>
	RTC_TimeTypeDef time;
	RTC_DateTypeDef date;
	/* Infinite loop */
	for (;;) {
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d3e:	f107 030c 	add.w	r3, r7, #12
 8001d42:	2200      	movs	r2, #0
 8001d44:	4619      	mov	r1, r3
 8001d46:	4815      	ldr	r0, [pc, #84]	; (8001d9c <Starthorloge+0x74>)
 8001d48:	f006 ff46 	bl	8008bd8 <HAL_RTC_GetTime>
		HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001d4c:	f107 0308 	add.w	r3, r7, #8
 8001d50:	2200      	movs	r2, #0
 8001d52:	4619      	mov	r1, r3
 8001d54:	4811      	ldr	r0, [pc, #68]	; (8001d9c <Starthorloge+0x74>)
 8001d56:	f007 f845 	bl	8008de4 <HAL_RTC_GetDate>

		sprintf(text, "%2u:%2u",
				time.Minutes, time.Seconds);
 8001d5a:	7b7b      	ldrb	r3, [r7, #13]
		sprintf(text, "%2u:%2u",
 8001d5c:	461a      	mov	r2, r3
				time.Minutes, time.Seconds);
 8001d5e:	7bbb      	ldrb	r3, [r7, #14]
		sprintf(text, "%2u:%2u",
 8001d60:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <Starthorloge+0x78>)
 8001d66:	f00c f8a1 	bl	800deac <siprintf>
		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <Starthorloge+0x7c>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f04f 31ff 	mov.w	r1, #4294967295
 8001d72:	4618      	mov	r0, r3
 8001d74:	f00a f916 	bl	800bfa4 <xQueueSemaphoreTake>
		BSP_LCD_DisplayStringAtLine(1, (uint8_t*) text);
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	2001      	movs	r0, #1
 8001d80:	f000 ff4a 	bl	8002c18 <BSP_LCD_DisplayStringAtLine>
		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001d84:	4b07      	ldr	r3, [pc, #28]	; (8001da4 <Starthorloge+0x7c>)
 8001d86:	6818      	ldr	r0, [r3, #0]
 8001d88:	2300      	movs	r3, #0
 8001d8a:	2200      	movs	r2, #0
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	f00a f807 	bl	800bda0 <xQueueGenericSend>
		osDelay(100);
 8001d92:	2064      	movs	r0, #100	; 0x64
 8001d94:	f009 fd67 	bl	800b866 <osDelay>
		HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8001d98:	e7d1      	b.n	8001d3e <Starthorloge+0x16>
 8001d9a:	bf00      	nop
 8001d9c:	20008a78 	.word	0x20008a78
 8001da0:	0800e788 	.word	0x0800e788
 8001da4:	20008c0c 	.word	0x20008c0c

08001da8 <StartLRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLRacket */
void StartLRacket(void const * argument)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0a4      	sub	sp, #144	; 0x90
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartLRacket */
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001db0:	2300      	movs	r3, #0
 8001db2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	joystick_v = 0;
 8001db6:	2300      	movs	r3, #0
 8001db8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	int32_t x_LRacket_hold;
	int32_t y_LRacket_hold;

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001dbc:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	601a      	str	r2, [r3, #0]
 8001dc4:	605a      	str	r2, [r3, #4]
 8001dc6:	609a      	str	r2, [r3, #8]
 8001dc8:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	677b      	str	r3, [r7, #116]	; 0x74
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	67bb      	str	r3, [r7, #120]	; 0x78


	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001dd2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	485e      	ldr	r0, [pc, #376]	; (8001f54 <StartLRacket+0x1ac>)
 8001dda:	f003 f861 	bl	8004ea0 <HAL_ADC_ConfigChannel>
	/* Infinite loop */
	for (;;) {
		x_LRacket_hold = x_LRacket;
 8001dde:	4b5e      	ldr	r3, [pc, #376]	; (8001f58 <StartLRacket+0x1b0>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
		y_LRacket_hold = y_LRacket;
 8001de6:	4b5d      	ldr	r3, [pc, #372]	; (8001f5c <StartLRacket+0x1b4>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80


		//Capture des valeurs des joysticks
		sConfig.Channel = ADC_CHANNEL_8;
 8001dee:	2308      	movs	r3, #8
 8001df0:	673b      	str	r3, [r7, #112]	; 0x70
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001df2:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001df6:	4619      	mov	r1, r3
 8001df8:	4856      	ldr	r0, [pc, #344]	; (8001f54 <StartLRacket+0x1ac>)
 8001dfa:	f003 f851 	bl	8004ea0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001dfe:	4855      	ldr	r0, [pc, #340]	; (8001f54 <StartLRacket+0x1ac>)
 8001e00:	f002 fefc 	bl	8004bfc <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001e04:	bf00      	nop
 8001e06:	2164      	movs	r1, #100	; 0x64
 8001e08:	4852      	ldr	r0, [pc, #328]	; (8001f54 <StartLRacket+0x1ac>)
 8001e0a:	f002 ffb7 	bl	8004d7c <HAL_ADC_PollForConversion>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d1f8      	bne.n	8001e06 <StartLRacket+0x5e>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001e14:	484f      	ldr	r0, [pc, #316]	; (8001f54 <StartLRacket+0x1ac>)
 8001e16:	f003 f835 	bl	8004e84 <HAL_ADC_GetValue>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

		HAL_ADC_Start(&hadc1);
 8001e20:	484f      	ldr	r0, [pc, #316]	; (8001f60 <StartLRacket+0x1b8>)
 8001e22:	f002 feeb 	bl	8004bfc <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001e26:	bf00      	nop
 8001e28:	2164      	movs	r1, #100	; 0x64
 8001e2a:	484d      	ldr	r0, [pc, #308]	; (8001f60 <StartLRacket+0x1b8>)
 8001e2c:	f002 ffa6 	bl	8004d7c <HAL_ADC_PollForConversion>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d1f8      	bne.n	8001e28 <StartLRacket+0x80>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001e36:	484a      	ldr	r0, [pc, #296]	; (8001f60 <StartLRacket+0x1b8>)
 8001e38:	f003 f824 	bl	8004e84 <HAL_ADC_GetValue>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

		//Actualisation des coordonnées
		x_LRacket -= (joystick_h - 2080)/100;
 8001e42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8001e46:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001e4a:	4a46      	ldr	r2, [pc, #280]	; (8001f64 <StartLRacket+0x1bc>)
 8001e4c:	fb82 1203 	smull	r1, r2, r2, r3
 8001e50:	1152      	asrs	r2, r2, #5
 8001e52:	17db      	asrs	r3, r3, #31
 8001e54:	1a9a      	subs	r2, r3, r2
 8001e56:	4b40      	ldr	r3, [pc, #256]	; (8001f58 <StartLRacket+0x1b0>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	4413      	add	r3, r2
 8001e5c:	4a3e      	ldr	r2, [pc, #248]	; (8001f58 <StartLRacket+0x1b0>)
 8001e5e:	6013      	str	r3, [r2, #0]
		y_LRacket -= (joystick_v - 2080)/150;
 8001e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8001e64:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001e68:	4a3f      	ldr	r2, [pc, #252]	; (8001f68 <StartLRacket+0x1c0>)
 8001e6a:	fb82 1203 	smull	r1, r2, r2, r3
 8001e6e:	1112      	asrs	r2, r2, #4
 8001e70:	17db      	asrs	r3, r3, #31
 8001e72:	1a9a      	subs	r2, r3, r2
 8001e74:	4b39      	ldr	r3, [pc, #228]	; (8001f5c <StartLRacket+0x1b4>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4413      	add	r3, r2
 8001e7a:	4a38      	ldr	r2, [pc, #224]	; (8001f5c <StartLRacket+0x1b4>)
 8001e7c:	6013      	str	r3, [r2, #0]

		char textx[100];
		sprintf(textx, "x = %d", x_LRacket);
 8001e7e:	4b36      	ldr	r3, [pc, #216]	; (8001f58 <StartLRacket+0x1b0>)
 8001e80:	681a      	ldr	r2, [r3, #0]
 8001e82:	f107 030c 	add.w	r3, r7, #12
 8001e86:	4939      	ldr	r1, [pc, #228]	; (8001f6c <StartLRacket+0x1c4>)
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f00c f80f 	bl	800deac <siprintf>
		BSP_LCD_DisplayStringAtLine(9, textx);
 8001e8e:	f107 030c 	add.w	r3, r7, #12
 8001e92:	4619      	mov	r1, r3
 8001e94:	2009      	movs	r0, #9
 8001e96:	f000 febf 	bl	8002c18 <BSP_LCD_DisplayStringAtLine>

		// Cadrage des coordonnées LRacket
		if (x_LRacket >= 239 - width_rackets) x_LRacket = 239-width_rackets;
 8001e9a:	4b2f      	ldr	r3, [pc, #188]	; (8001f58 <StartLRacket+0x1b0>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2be6      	cmp	r3, #230	; 0xe6
 8001ea0:	dd02      	ble.n	8001ea8 <StartLRacket+0x100>
 8001ea2:	4b2d      	ldr	r3, [pc, #180]	; (8001f58 <StartLRacket+0x1b0>)
 8001ea4:	22e7      	movs	r2, #231	; 0xe7
 8001ea6:	601a      	str	r2, [r3, #0]

		if (x_LRacket <= 0) x_LRacket = 0;
 8001ea8:	4b2b      	ldr	r3, [pc, #172]	; (8001f58 <StartLRacket+0x1b0>)
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	dc02      	bgt.n	8001eb6 <StartLRacket+0x10e>
 8001eb0:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <StartLRacket+0x1b0>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	601a      	str	r2, [r3, #0]

		if (y_LRacket <= 0) y_LRacket = 0;
 8001eb6:	4b29      	ldr	r3, [pc, #164]	; (8001f5c <StartLRacket+0x1b4>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	dc02      	bgt.n	8001ec4 <StartLRacket+0x11c>
 8001ebe:	4b27      	ldr	r3, [pc, #156]	; (8001f5c <StartLRacket+0x1b4>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]

		if (y_LRacket + height_rackets >= 272) y_LRacket = 272 - height_rackets;
 8001ec4:	4b25      	ldr	r3, [pc, #148]	; (8001f5c <StartLRacket+0x1b4>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	3328      	adds	r3, #40	; 0x28
 8001eca:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8001ece:	db02      	blt.n	8001ed6 <StartLRacket+0x12e>
 8001ed0:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <StartLRacket+0x1b4>)
 8001ed2:	22e8      	movs	r2, #232	; 0xe8
 8001ed4:	601a      	str	r2, [r3, #0]

		//Tracé de LRacket
		// Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ed6:	4b26      	ldr	r3, [pc, #152]	; (8001f70 <StartLRacket+0x1c8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f04f 31ff 	mov.w	r1, #4294967295
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f00a f860 	bl	800bfa4 <xQueueSemaphoreTake>

		// Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001ee4:	4b23      	ldr	r3, [pc, #140]	; (8001f74 <StartLRacket+0x1cc>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d102      	bne.n	8001ef2 <StartLRacket+0x14a>
 8001eec:	f04f 33ff 	mov.w	r3, #4294967295
 8001ef0:	e001      	b.n	8001ef6 <StartLRacket+0x14e>
 8001ef2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	f000 fcfc 	bl	80028f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket_hold, y_LRacket_hold, width_rackets,
 8001efc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8001f00:	b298      	uxth	r0, r3
 8001f02:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8001f06:	b299      	uxth	r1, r3
 8001f08:	2328      	movs	r3, #40	; 0x28
 8001f0a:	2208      	movs	r2, #8
 8001f0c:	f001 f8fe 	bl	800310c <BSP_LCD_FillRect>
				height_rackets);

		// Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001f10:	4b18      	ldr	r3, [pc, #96]	; (8001f74 <StartLRacket+0x1cc>)
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d102      	bne.n	8001f1e <StartLRacket+0x176>
 8001f18:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f1c:	e001      	b.n	8001f22 <StartLRacket+0x17a>
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 fce6 	bl	80028f4 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_LRacket, y_LRacket, width_rackets, height_rackets);
 8001f28:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <StartLRacket+0x1b0>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	b298      	uxth	r0, r3
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <StartLRacket+0x1b4>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	b299      	uxth	r1, r3
 8001f34:	2328      	movs	r3, #40	; 0x28
 8001f36:	2208      	movs	r2, #8
 8001f38:	f001 f8e8 	bl	800310c <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001f3c:	4b0c      	ldr	r3, [pc, #48]	; (8001f70 <StartLRacket+0x1c8>)
 8001f3e:	6818      	ldr	r0, [r3, #0]
 8001f40:	2300      	movs	r3, #0
 8001f42:	2200      	movs	r2, #0
 8001f44:	2100      	movs	r1, #0
 8001f46:	f009 ff2b 	bl	800bda0 <xQueueGenericSend>

		osDelay(40);
 8001f4a:	2028      	movs	r0, #40	; 0x28
 8001f4c:	f009 fc8b 	bl	800b866 <osDelay>
	for (;;) {
 8001f50:	e745      	b.n	8001dde <StartLRacket+0x36>
 8001f52:	bf00      	nop
 8001f54:	20008998 	.word	0x20008998
 8001f58:	20000028 	.word	0x20000028
 8001f5c:	2000002c 	.word	0x2000002c
 8001f60:	2000894c 	.word	0x2000894c
 8001f64:	51eb851f 	.word	0x51eb851f
 8001f68:	1b4e81b5 	.word	0x1b4e81b5
 8001f6c:	0800e790 	.word	0x0800e790
 8001f70:	20008c0c 	.word	0x20008c0c
 8001f74:	20000038 	.word	0x20000038

08001f78 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b096      	sub	sp, #88	; 0x58
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */
	TickType_t xFrequency=10;
 8001f80:	230a      	movs	r3, #10
 8001f82:	64bb      	str	r3, [r7, #72]	; 0x48
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001f84:	f00a fe1a 	bl	800cbbc <xTaskGetTickCount>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	63bb      	str	r3, [r7, #56]	; 0x38
	uint32_t x_balle = 480;
 8001f8c:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f90:	657b      	str	r3, [r7, #84]	; 0x54
	uint32_t y_balle = 136;
 8001f92:	2388      	movs	r3, #136	; 0x88
 8001f94:	653b      	str	r3, [r7, #80]	; 0x50
	uint32_t x_balle_hold = 480;
 8001f96:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001f9a:	647b      	str	r3, [r7, #68]	; 0x44
	uint32_t y_balle_hold = 136;
 8001f9c:	2388      	movs	r3, #136	; 0x88
 8001f9e:	643b      	str	r3, [r7, #64]	; 0x40
	uint8_t radius_balle = 8;
 8001fa0:	2308      	movs	r3, #8
 8001fa2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	int8_t x_sens = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
	int8_t y_sens = 1;
 8001fac:	2301      	movs	r3, #1
 8001fae:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e

  /* Infinite loop */
  for(;;)
  {

	  x_balle_hold = x_balle;
 8001fb2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001fb4:	647b      	str	r3, [r7, #68]	; 0x44
	  y_balle_hold = y_balle;
 8001fb6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fb8:	643b      	str	r3, [r7, #64]	; 0x40

	  //Mouvement de la balle
	  x_balle += x_sens;
 8001fba:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001fbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001fc0:	4413      	add	r3, r2
 8001fc2:	657b      	str	r3, [r7, #84]	; 0x54
	  y_balle += y_sens;
 8001fc4:	f997 304e 	ldrsb.w	r3, [r7, #78]	; 0x4e
 8001fc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fca:	4413      	add	r3, r2
 8001fcc:	653b      	str	r3, [r7, #80]	; 0x50

	  //Cadrage vertical des coordonnées de la balle
	  if((y_balle-radius_balle <= 0) || (y_balle+radius_balle >= 271)){
 8001fce:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8001fd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d006      	beq.n	8001fe6 <StartBall+0x6e>
 8001fd8:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8001fdc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001fde:	4413      	add	r3, r2
 8001fe0:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8001fe4:	d905      	bls.n	8001ff2 <StartBall+0x7a>
		  y_sens = -y_sens;
 8001fe6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 8001fea:	425b      	negs	r3, r3
 8001fec:	b2db      	uxtb	r3, r3
 8001fee:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
	  }
	  if(x_sens==-1){
 8001ff2:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001ff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ffa:	d13e      	bne.n	800207a <StartBall+0x102>
		  //Cadrage rebond sur LRacket
		  if((x_balle - radius_balle <= x_LRacket + width_rackets) && (x_balle - radius_balle >= x_LRacket))
 8001ffc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002002:	1ad3      	subs	r3, r2, r3
 8002004:	4a97      	ldr	r2, [pc, #604]	; (8002264 <StartBall+0x2ec>)
 8002006:	6812      	ldr	r2, [r2, #0]
 8002008:	3208      	adds	r2, #8
 800200a:	4293      	cmp	r3, r2
 800200c:	d818      	bhi.n	8002040 <StartBall+0xc8>
 800200e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002012:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002014:	1ad3      	subs	r3, r2, r3
 8002016:	4a93      	ldr	r2, [pc, #588]	; (8002264 <StartBall+0x2ec>)
 8002018:	6812      	ldr	r2, [r2, #0]
 800201a:	4293      	cmp	r3, r2
 800201c:	d310      	bcc.n	8002040 <StartBall+0xc8>
		  {
			  //Abscisse critique
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 800201e:	4b92      	ldr	r3, [pc, #584]	; (8002268 <StartBall+0x2f0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	461a      	mov	r2, r3
 8002024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002026:	4293      	cmp	r3, r2
 8002028:	d36e      	bcc.n	8002108 <StartBall+0x190>
 800202a:	4b8f      	ldr	r3, [pc, #572]	; (8002268 <StartBall+0x2f0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	3328      	adds	r3, #40	; 0x28
 8002030:	461a      	mov	r2, r3
 8002032:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002034:	4293      	cmp	r3, r2
 8002036:	d867      	bhi.n	8002108 <StartBall+0x190>
			  {
				  //Rebond
				  x_sens = 1;
 8002038:	2301      	movs	r3, #1
 800203a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 800203e:	e063      	b.n	8002108 <StartBall+0x190>
			  }
		  }
		  else if(x_balle==radius_balle)
 8002040:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002044:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002046:	429a      	cmp	r2, r3
 8002048:	d161      	bne.n	800210e <StartBall+0x196>
		  {
			  //Perdu
			  // Accaparement de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800204a:	4b88      	ldr	r3, [pc, #544]	; (800226c <StartBall+0x2f4>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	f04f 31ff 	mov.w	r1, #4294967295
 8002052:	4618      	mov	r0, r3
 8002054:	f009 ffa6 	bl	800bfa4 <xQueueSemaphoreTake>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8002058:	4985      	ldr	r1, [pc, #532]	; (8002270 <StartBall+0x2f8>)
 800205a:	2002      	movs	r0, #2
 800205c:	f000 fddc 	bl	8002c18 <BSP_LCD_DisplayStringAtLine>
			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 8002060:	4b82      	ldr	r3, [pc, #520]	; (800226c <StartBall+0x2f4>)
 8002062:	6818      	ldr	r0, [r3, #0]
 8002064:	2300      	movs	r3, #0
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	f009 fe99 	bl	800bda0 <xQueueGenericSend>
			  vTaskSuspend(BallHandle);
 800206e:	4b81      	ldr	r3, [pc, #516]	; (8002274 <StartBall+0x2fc>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4618      	mov	r0, r3
 8002074:	f00a fc00 	bl	800c878 <vTaskSuspend>
 8002078:	e049      	b.n	800210e <StartBall+0x196>
		  }
	  }
	  else if(x_sens==1)
 800207a:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 800207e:	2b01      	cmp	r3, #1
 8002080:	d145      	bne.n	800210e <StartBall+0x196>
	  {
		  //Cadrage rebond sur RRacket
		  if((x_balle + radius_balle >= x_RRacket) && (x_balle + radius_balle <= x_RRacket + width_rackets))
 8002082:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002086:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002088:	4413      	add	r3, r2
 800208a:	4a7b      	ldr	r2, [pc, #492]	; (8002278 <StartBall+0x300>)
 800208c:	6812      	ldr	r2, [r2, #0]
 800208e:	4293      	cmp	r3, r2
 8002090:	d319      	bcc.n	80020c6 <StartBall+0x14e>
 8002092:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002096:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002098:	4413      	add	r3, r2
 800209a:	4a77      	ldr	r2, [pc, #476]	; (8002278 <StartBall+0x300>)
 800209c:	6812      	ldr	r2, [r2, #0]
 800209e:	3208      	adds	r2, #8
 80020a0:	4293      	cmp	r3, r2
 80020a2:	d810      	bhi.n	80020c6 <StartBall+0x14e>
		  {
			  //Abscisse critique
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 80020a4:	4b75      	ldr	r3, [pc, #468]	; (800227c <StartBall+0x304>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	461a      	mov	r2, r3
 80020aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ac:	4293      	cmp	r3, r2
 80020ae:	d32d      	bcc.n	800210c <StartBall+0x194>
 80020b0:	4b72      	ldr	r3, [pc, #456]	; (800227c <StartBall+0x304>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	3328      	adds	r3, #40	; 0x28
 80020b6:	461a      	mov	r2, r3
 80020b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d826      	bhi.n	800210c <StartBall+0x194>
			  {
				  //Rebond
				  x_sens = -1;
 80020be:	23ff      	movs	r3, #255	; 0xff
 80020c0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 80020c4:	e022      	b.n	800210c <StartBall+0x194>
			  }
		  }
		  else if(x_balle==959-radius_balle)
 80020c6:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80020ca:	f240 33bf 	movw	r3, #959	; 0x3bf
 80020ce:	1a9b      	subs	r3, r3, r2
 80020d0:	461a      	mov	r2, r3
 80020d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020d4:	4293      	cmp	r3, r2
 80020d6:	d11a      	bne.n	800210e <StartBall+0x196>
		  {
			  //Perdu
			  // Accaparement de la ressource
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80020d8:	4b64      	ldr	r3, [pc, #400]	; (800226c <StartBall+0x2f4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f04f 31ff 	mov.w	r1, #4294967295
 80020e0:	4618      	mov	r0, r3
 80020e2:	f009 ff5f 	bl	800bfa4 <xQueueSemaphoreTake>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 80020e6:	4962      	ldr	r1, [pc, #392]	; (8002270 <StartBall+0x2f8>)
 80020e8:	2002      	movs	r0, #2
 80020ea:	f000 fd95 	bl	8002c18 <BSP_LCD_DisplayStringAtLine>
			  //Libération de la ressource
			  xSemaphoreGive(myMutex_LCDHandle);
 80020ee:	4b5f      	ldr	r3, [pc, #380]	; (800226c <StartBall+0x2f4>)
 80020f0:	6818      	ldr	r0, [r3, #0]
 80020f2:	2300      	movs	r3, #0
 80020f4:	2200      	movs	r2, #0
 80020f6:	2100      	movs	r1, #0
 80020f8:	f009 fe52 	bl	800bda0 <xQueueGenericSend>
			  vTaskSuspend(BallHandle);
 80020fc:	4b5d      	ldr	r3, [pc, #372]	; (8002274 <StartBall+0x2fc>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	4618      	mov	r0, r3
 8002102:	f00a fbb9 	bl	800c878 <vTaskSuspend>
 8002106:	e002      	b.n	800210e <StartBall+0x196>
			  if((y_balle >= y_LRacket) && (y_balle <= y_LRacket + height_rackets))
 8002108:	bf00      	nop
 800210a:	e000      	b.n	800210e <StartBall+0x196>
			  if((y_balle >= y_RRacket) && (y_balle <= y_RRacket + height_rackets))
 800210c:	bf00      	nop
		  }
	  }

	  // Accaparement de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800210e:	4b57      	ldr	r3, [pc, #348]	; (800226c <StartBall+0x2f4>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f04f 31ff 	mov.w	r1, #4294967295
 8002116:	4618      	mov	r0, r3
 8002118:	f009 ff44 	bl	800bfa4 <xQueueSemaphoreTake>

	  if(x_balle_hold <=479){
 800211c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800211e:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 8002122:	d216      	bcs.n	8002152 <StartBall+0x1da>
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002124:	4b56      	ldr	r3, [pc, #344]	; (8002280 <StartBall+0x308>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d102      	bne.n	8002132 <StartBall+0x1ba>
 800212c:	f04f 33ff 	mov.w	r3, #4294967295
 8002130:	e001      	b.n	8002136 <StartBall+0x1be>
 8002132:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002136:	4618      	mov	r0, r3
 8002138:	f000 fbdc 	bl	80028f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, radius_balle);
 800213c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800213e:	b29b      	uxth	r3, r3
 8002140:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002142:	b291      	uxth	r1, r2
 8002144:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8002148:	b292      	uxth	r2, r2
 800214a:	4618      	mov	r0, r3
 800214c:	f001 f858 	bl	8003200 <BSP_LCD_FillCircle>
 8002150:	e02f      	b.n	80021b2 <StartBall+0x23a>
	  }
	  else{
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8002152:	4b4b      	ldr	r3, [pc, #300]	; (8002280 <StartBall+0x308>)
 8002154:	781b      	ldrb	r3, [r3, #0]
 8002156:	2b00      	cmp	r3, #0
 8002158:	d102      	bne.n	8002160 <StartBall+0x1e8>
 800215a:	f04f 33ff 	mov.w	r3, #4294967295
 800215e:	e001      	b.n	8002164 <StartBall+0x1ec>
 8002160:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002164:	4618      	mov	r0, r3
 8002166:	f000 fbc5 	bl	80028f4 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle_hold+3};
 800216a:	f240 13d9 	movw	r3, #473	; 0x1d9
 800216e:	86bb      	strh	r3, [r7, #52]	; 0x34
 8002170:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002172:	b29b      	uxth	r3, r3
 8002174:	3303      	adds	r3, #3
 8002176:	b29b      	uxth	r3, r3
 8002178:	b21b      	sxth	r3, r3
 800217a:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point2 = {479,y_balle_hold};
 800217c:	f240 13df 	movw	r3, #479	; 0x1df
 8002180:	863b      	strh	r3, [r7, #48]	; 0x30
 8002182:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002184:	b21b      	sxth	r3, r3
 8002186:	867b      	strh	r3, [r7, #50]	; 0x32
		  Point Point3 = {473,y_balle_hold-3};
 8002188:	f240 13d9 	movw	r3, #473	; 0x1d9
 800218c:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800218e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002190:	b29b      	uxth	r3, r3
 8002192:	3b03      	subs	r3, #3
 8002194:	b29b      	uxth	r3, r3
 8002196:	b21b      	sxth	r3, r3
 8002198:	85fb      	strh	r3, [r7, #46]	; 0x2e

		  Point Points[3] = {Point1, Point2, Point3};
 800219a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800219c:	623b      	str	r3, [r7, #32]
 800219e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
 80021a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
		  BSP_LCD_FillPolygon(Points,3);
 80021a6:	f107 0320 	add.w	r3, r7, #32
 80021aa:	2103      	movs	r1, #3
 80021ac:	4618      	mov	r0, r3
 80021ae:	f001 f8c7 	bl	8003340 <BSP_LCD_FillPolygon>
	  }

	  if(x_balle <=479){
 80021b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021b4:	f5b3 7ff0 	cmp.w	r3, #480	; 0x1e0
 80021b8:	d216      	bcs.n	80021e8 <StartBall+0x270>
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 80021ba:	4b31      	ldr	r3, [pc, #196]	; (8002280 <StartBall+0x308>)
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d102      	bne.n	80021c8 <StartBall+0x250>
 80021c2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021c6:	e001      	b.n	80021cc <StartBall+0x254>
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	4618      	mov	r0, r3
 80021ce:	f000 fb91 	bl	80028f4 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, radius_balle);
 80021d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80021d4:	b29b      	uxth	r3, r3
 80021d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80021d8:	b291      	uxth	r1, r2
 80021da:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 80021de:	b292      	uxth	r2, r2
 80021e0:	4618      	mov	r0, r3
 80021e2:	f001 f80d 	bl	8003200 <BSP_LCD_FillCircle>
 80021e6:	e02f      	b.n	8002248 <StartBall+0x2d0>
	  }
	  else{
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 80021e8:	4b25      	ldr	r3, [pc, #148]	; (8002280 <StartBall+0x308>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d102      	bne.n	80021f6 <StartBall+0x27e>
 80021f0:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80021f4:	e001      	b.n	80021fa <StartBall+0x282>
 80021f6:	f04f 33ff 	mov.w	r3, #4294967295
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 fb7a 	bl	80028f4 <BSP_LCD_SetTextColor>
		  Point Point1 = {473,y_balle+3};
 8002200:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002204:	83bb      	strh	r3, [r7, #28]
 8002206:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002208:	b29b      	uxth	r3, r3
 800220a:	3303      	adds	r3, #3
 800220c:	b29b      	uxth	r3, r3
 800220e:	b21b      	sxth	r3, r3
 8002210:	83fb      	strh	r3, [r7, #30]
		  Point Point2 = {479,y_balle};
 8002212:	f240 13df 	movw	r3, #479	; 0x1df
 8002216:	833b      	strh	r3, [r7, #24]
 8002218:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800221a:	b21b      	sxth	r3, r3
 800221c:	837b      	strh	r3, [r7, #26]
		  Point Point3 = {473,y_balle-3};
 800221e:	f240 13d9 	movw	r3, #473	; 0x1d9
 8002222:	82bb      	strh	r3, [r7, #20]
 8002224:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002226:	b29b      	uxth	r3, r3
 8002228:	3b03      	subs	r3, #3
 800222a:	b29b      	uxth	r3, r3
 800222c:	b21b      	sxth	r3, r3
 800222e:	82fb      	strh	r3, [r7, #22]

		  Point Points[3] = {Point1, Point2, Point3};
 8002230:	69fb      	ldr	r3, [r7, #28]
 8002232:	60bb      	str	r3, [r7, #8]
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	60fb      	str	r3, [r7, #12]
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	613b      	str	r3, [r7, #16]
		  BSP_LCD_FillPolygon(Points,3);
 800223c:	f107 0308 	add.w	r3, r7, #8
 8002240:	2103      	movs	r1, #3
 8002242:	4618      	mov	r0, r3
 8002244:	f001 f87c 	bl	8003340 <BSP_LCD_FillPolygon>
	  }


	  //Libération de la ressource
	  xSemaphoreGive(myMutex_LCDHandle);
 8002248:	4b08      	ldr	r3, [pc, #32]	; (800226c <StartBall+0x2f4>)
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	2300      	movs	r3, #0
 800224e:	2200      	movs	r2, #0
 8002250:	2100      	movs	r1, #0
 8002252:	f009 fda5 	bl	800bda0 <xQueueGenericSend>
	  vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002256:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800225a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800225c:	4618      	mov	r0, r3
 800225e:	f00a fa55 	bl	800c70c <vTaskDelayUntil>
	  x_balle_hold = x_balle;
 8002262:	e6a6      	b.n	8001fb2 <StartBall+0x3a>
 8002264:	20000028 	.word	0x20000028
 8002268:	2000002c 	.word	0x2000002c
 800226c:	20008c0c 	.word	0x20008c0c
 8002270:	0800e798 	.word	0x0800e798
 8002274:	20008c1c 	.word	0x20008c1c
 8002278:	20000030 	.word	0x20000030
 800227c:	20000034 	.word	0x20000034
 8002280:	20000038 	.word	0x20000038

08002284 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b084      	sub	sp, #16
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
//	uint8_t Message;
	uint8_t BP1=1;
 800228c:	2301      	movs	r3, #1
 800228e:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 8002290:	2300      	movs	r3, #0
 8002292:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
//	  xQueueReceive(myQueueU2HHandle, &Message, portMAX_DELAY);
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002294:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002298:	4832      	ldr	r0, [pc, #200]	; (8002364 <StartBgChanger+0xe0>)
 800229a:	f004 f913 	bl	80064c4 <HAL_GPIO_ReadPin>
 800229e:	4603      	mov	r3, r0
 80022a0:	73bb      	strb	r3, [r7, #14]
	  switch(state){
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d009      	beq.n	80022bc <StartBgChanger+0x38>
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d04d      	beq.n	8002348 <StartBgChanger+0xc4>
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d154      	bne.n	800235a <StartBgChanger+0xd6>
	  case 0:
		  if(!BP1) state = 1;
 80022b0:	7bbb      	ldrb	r3, [r7, #14]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d14e      	bne.n	8002354 <StartBgChanger+0xd0>
 80022b6:	2301      	movs	r3, #1
 80022b8:	73fb      	strb	r3, [r7, #15]
		  break;
 80022ba:	e04b      	b.n	8002354 <StartBgChanger+0xd0>
	  case 1:
		  couleur = !couleur;
 80022bc:	4b2a      	ldr	r3, [pc, #168]	; (8002368 <StartBgChanger+0xe4>)
 80022be:	781b      	ldrb	r3, [r3, #0]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	bf0c      	ite	eq
 80022c4:	2301      	moveq	r3, #1
 80022c6:	2300      	movne	r3, #0
 80022c8:	b2db      	uxtb	r3, r3
 80022ca:	461a      	mov	r2, r3
 80022cc:	4b26      	ldr	r3, [pc, #152]	; (8002368 <StartBgChanger+0xe4>)
 80022ce:	701a      	strb	r2, [r3, #0]
		  if(couleur==0){
 80022d0:	4b25      	ldr	r3, [pc, #148]	; (8002368 <StartBgChanger+0xe4>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d11a      	bne.n	800230e <StartBgChanger+0x8a>
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 80022d8:	4b24      	ldr	r3, [pc, #144]	; (800236c <StartBgChanger+0xe8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	4618      	mov	r0, r3
 80022e2:	f009 fe5f 	bl	800bfa4 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80022e6:	f04f 30ff 	mov.w	r0, #4294967295
 80022ea:	f000 fb65 	bl	80029b8 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80022ee:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80022f2:	f000 faff 	bl	80028f4 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80022f6:	f04f 30ff 	mov.w	r0, #4294967295
 80022fa:	f000 fb13 	bl	8002924 <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 80022fe:	4b1b      	ldr	r3, [pc, #108]	; (800236c <StartBgChanger+0xe8>)
 8002300:	6818      	ldr	r0, [r3, #0]
 8002302:	2300      	movs	r3, #0
 8002304:	2200      	movs	r2, #0
 8002306:	2100      	movs	r1, #0
 8002308:	f009 fd4a 	bl	800bda0 <xQueueGenericSend>
 800230c:	e019      	b.n	8002342 <StartBgChanger+0xbe>
		  }
		  else{
			  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 800230e:	4b17      	ldr	r3, [pc, #92]	; (800236c <StartBgChanger+0xe8>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f04f 31ff 	mov.w	r1, #4294967295
 8002316:	4618      	mov	r0, r3
 8002318:	f009 fe44 	bl	800bfa4 <xQueueSemaphoreTake>
			  BSP_LCD_Clear(LCD_COLOR_BLACK);
 800231c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002320:	f000 fb4a 	bl	80029b8 <BSP_LCD_Clear>
			  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8002324:	f04f 30ff 	mov.w	r0, #4294967295
 8002328:	f000 fae4 	bl	80028f4 <BSP_LCD_SetTextColor>
			  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 800232c:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8002330:	f000 faf8 	bl	8002924 <BSP_LCD_SetBackColor>
			  xSemaphoreGive(myMutex_LCDHandle);
 8002334:	4b0d      	ldr	r3, [pc, #52]	; (800236c <StartBgChanger+0xe8>)
 8002336:	6818      	ldr	r0, [r3, #0]
 8002338:	2300      	movs	r3, #0
 800233a:	2200      	movs	r2, #0
 800233c:	2100      	movs	r1, #0
 800233e:	f009 fd2f 	bl	800bda0 <xQueueGenericSend>
		  }
		  state = 2;
 8002342:	2302      	movs	r3, #2
 8002344:	73fb      	strb	r3, [r7, #15]
		  break;
 8002346:	e008      	b.n	800235a <StartBgChanger+0xd6>
	  case 2:
		  if(BP1) state = 0;
 8002348:	7bbb      	ldrb	r3, [r7, #14]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d004      	beq.n	8002358 <StartBgChanger+0xd4>
 800234e:	2300      	movs	r3, #0
 8002350:	73fb      	strb	r3, [r7, #15]
		  break;
 8002352:	e001      	b.n	8002358 <StartBgChanger+0xd4>
		  break;
 8002354:	bf00      	nop
 8002356:	e000      	b.n	800235a <StartBgChanger+0xd6>
		  break;
 8002358:	bf00      	nop
//		  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
//		  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
//	  }
//	  xSemaphoreGive(myMutex_LCDHandle);
//	  FlagBgChanger = 1;
  osDelay(100);
 800235a:	2064      	movs	r0, #100	; 0x64
 800235c:	f009 fa83 	bl	800b866 <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 8002360:	e798      	b.n	8002294 <StartBgChanger+0x10>
 8002362:	bf00      	nop
 8002364:	40020000 	.word	0x40020000
 8002368:	20000038 	.word	0x20000038
 800236c:	20008c0c 	.word	0x20008c0c

08002370 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b082      	sub	sp, #8
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a04      	ldr	r2, [pc, #16]	; (8002390 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d101      	bne.n	8002386 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8002382:	f002 fbb5 	bl	8004af0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8002386:	bf00      	nop
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	40001000 	.word	0x40001000

08002394 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002394:	b480      	push	{r7}
 8002396:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002398:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800239a:	e7fe      	b.n	800239a <Error_Handler+0x6>

0800239c <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b08c      	sub	sp, #48	; 0x30
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	4a51      	ldr	r2, [pc, #324]	; (80024ec <I2Cx_MspInit+0x150>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d14d      	bne.n	8002448 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80023ac:	4b50      	ldr	r3, [pc, #320]	; (80024f0 <I2Cx_MspInit+0x154>)
 80023ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023b0:	4a4f      	ldr	r2, [pc, #316]	; (80024f0 <I2Cx_MspInit+0x154>)
 80023b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80023b6:	6313      	str	r3, [r2, #48]	; 0x30
 80023b8:	4b4d      	ldr	r3, [pc, #308]	; (80024f0 <I2Cx_MspInit+0x154>)
 80023ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023c0:	61bb      	str	r3, [r7, #24]
 80023c2:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 80023c4:	2380      	movs	r3, #128	; 0x80
 80023c6:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80023c8:	2312      	movs	r3, #18
 80023ca:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80023cc:	2300      	movs	r3, #0
 80023ce:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80023d0:	2302      	movs	r3, #2
 80023d2:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 80023d4:	2304      	movs	r3, #4
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023d8:	f107 031c 	add.w	r3, r7, #28
 80023dc:	4619      	mov	r1, r3
 80023de:	4845      	ldr	r0, [pc, #276]	; (80024f4 <I2Cx_MspInit+0x158>)
 80023e0:	f003 fdbc 	bl	8005f5c <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 80023e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80023e8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80023ea:	f107 031c 	add.w	r3, r7, #28
 80023ee:	4619      	mov	r1, r3
 80023f0:	4840      	ldr	r0, [pc, #256]	; (80024f4 <I2Cx_MspInit+0x158>)
 80023f2:	f003 fdb3 	bl	8005f5c <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 80023f6:	4b3e      	ldr	r3, [pc, #248]	; (80024f0 <I2Cx_MspInit+0x154>)
 80023f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fa:	4a3d      	ldr	r2, [pc, #244]	; (80024f0 <I2Cx_MspInit+0x154>)
 80023fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002400:	6413      	str	r3, [r2, #64]	; 0x40
 8002402:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002406:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800240e:	4b38      	ldr	r3, [pc, #224]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a37      	ldr	r2, [pc, #220]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002414:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002418:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 800241a:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <I2Cx_MspInit+0x154>)
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002420:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002424:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002426:	2200      	movs	r2, #0
 8002428:	210f      	movs	r1, #15
 800242a:	2048      	movs	r0, #72	; 0x48
 800242c:	f003 f834 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 8002430:	2048      	movs	r0, #72	; 0x48
 8002432:	f003 f84d 	bl	80054d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002436:	2200      	movs	r2, #0
 8002438:	210f      	movs	r1, #15
 800243a:	2049      	movs	r0, #73	; 0x49
 800243c:	f003 f82c 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 8002440:	2049      	movs	r0, #73	; 0x49
 8002442:	f003 f845 	bl	80054d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002446:	e04d      	b.n	80024e4 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002448:	4b29      	ldr	r3, [pc, #164]	; (80024f0 <I2Cx_MspInit+0x154>)
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4a28      	ldr	r2, [pc, #160]	; (80024f0 <I2Cx_MspInit+0x154>)
 800244e:	f043 0302 	orr.w	r3, r3, #2
 8002452:	6313      	str	r3, [r2, #48]	; 0x30
 8002454:	4b26      	ldr	r3, [pc, #152]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	613b      	str	r3, [r7, #16]
 800245e:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 8002460:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002464:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002466:	2312      	movs	r3, #18
 8002468:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 800246a:	2300      	movs	r3, #0
 800246c:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800246e:	2302      	movs	r3, #2
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 8002472:	2304      	movs	r3, #4
 8002474:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002476:	f107 031c 	add.w	r3, r7, #28
 800247a:	4619      	mov	r1, r3
 800247c:	481e      	ldr	r0, [pc, #120]	; (80024f8 <I2Cx_MspInit+0x15c>)
 800247e:	f003 fd6d 	bl	8005f5c <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 8002482:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002486:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002488:	f107 031c 	add.w	r3, r7, #28
 800248c:	4619      	mov	r1, r3
 800248e:	481a      	ldr	r0, [pc, #104]	; (80024f8 <I2Cx_MspInit+0x15c>)
 8002490:	f003 fd64 	bl	8005f5c <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 8002494:	4b16      	ldr	r3, [pc, #88]	; (80024f0 <I2Cx_MspInit+0x154>)
 8002496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002498:	4a15      	ldr	r2, [pc, #84]	; (80024f0 <I2Cx_MspInit+0x154>)
 800249a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800249e:	6413      	str	r3, [r2, #64]	; 0x40
 80024a0:	4b13      	ldr	r3, [pc, #76]	; (80024f0 <I2Cx_MspInit+0x154>)
 80024a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80024ac:	4b10      	ldr	r3, [pc, #64]	; (80024f0 <I2Cx_MspInit+0x154>)
 80024ae:	6a1b      	ldr	r3, [r3, #32]
 80024b0:	4a0f      	ldr	r2, [pc, #60]	; (80024f0 <I2Cx_MspInit+0x154>)
 80024b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80024b6:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80024b8:	4b0d      	ldr	r3, [pc, #52]	; (80024f0 <I2Cx_MspInit+0x154>)
 80024ba:	6a1b      	ldr	r3, [r3, #32]
 80024bc:	4a0c      	ldr	r2, [pc, #48]	; (80024f0 <I2Cx_MspInit+0x154>)
 80024be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80024c2:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	210f      	movs	r1, #15
 80024c8:	201f      	movs	r0, #31
 80024ca:	f002 ffe5 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 80024ce:	201f      	movs	r0, #31
 80024d0:	f002 fffe 	bl	80054d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 80024d4:	2200      	movs	r2, #0
 80024d6:	210f      	movs	r1, #15
 80024d8:	2020      	movs	r0, #32
 80024da:	f002 ffdd 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 80024de:	2020      	movs	r0, #32
 80024e0:	f002 fff6 	bl	80054d0 <HAL_NVIC_EnableIRQ>
}
 80024e4:	bf00      	nop
 80024e6:	3730      	adds	r7, #48	; 0x30
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	20000340 	.word	0x20000340
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40021c00 	.word	0x40021c00
 80024f8:	40020400 	.word	0x40020400

080024fc <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 80024fc:	b580      	push	{r7, lr}
 80024fe:	b082      	sub	sp, #8
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	f004 fafd 	bl	8006b04 <HAL_I2C_GetState>
 800250a:	4603      	mov	r3, r0
 800250c:	2b00      	cmp	r3, #0
 800250e:	d125      	bne.n	800255c <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4a14      	ldr	r2, [pc, #80]	; (8002564 <I2Cx_Init+0x68>)
 8002514:	4293      	cmp	r3, r2
 8002516:	d103      	bne.n	8002520 <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	4a13      	ldr	r2, [pc, #76]	; (8002568 <I2Cx_Init+0x6c>)
 800251c:	601a      	str	r2, [r3, #0]
 800251e:	e002      	b.n	8002526 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	4a12      	ldr	r2, [pc, #72]	; (800256c <I2Cx_Init+0x70>)
 8002524:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a11      	ldr	r2, [pc, #68]	; (8002570 <I2Cx_Init+0x74>)
 800252a:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2201      	movs	r2, #1
 8002536:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2200      	movs	r2, #0
 8002542:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2200      	movs	r2, #0
 8002548:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 8002550:	6878      	ldr	r0, [r7, #4]
 8002552:	f7ff ff23 	bl	800239c <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f003 ffe6 	bl	8006528 <HAL_I2C_Init>
  }
}
 800255c:	bf00      	nop
 800255e:	3708      	adds	r7, #8
 8002560:	46bd      	mov	sp, r7
 8002562:	bd80      	pop	{r7, pc}
 8002564:	20000340 	.word	0x20000340
 8002568:	40005c00 	.word	0x40005c00
 800256c:	40005400 	.word	0x40005400
 8002570:	40912732 	.word	0x40912732

08002574 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b08a      	sub	sp, #40	; 0x28
 8002578:	af04      	add	r7, sp, #16
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	4608      	mov	r0, r1
 800257e:	4611      	mov	r1, r2
 8002580:	461a      	mov	r2, r3
 8002582:	4603      	mov	r3, r0
 8002584:	72fb      	strb	r3, [r7, #11]
 8002586:	460b      	mov	r3, r1
 8002588:	813b      	strh	r3, [r7, #8]
 800258a:	4613      	mov	r3, r2
 800258c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 800258e:	2300      	movs	r3, #0
 8002590:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002592:	7afb      	ldrb	r3, [r7, #11]
 8002594:	b299      	uxth	r1, r3
 8002596:	88f8      	ldrh	r0, [r7, #6]
 8002598:	893a      	ldrh	r2, [r7, #8]
 800259a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800259e:	9302      	str	r3, [sp, #8]
 80025a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	6a3b      	ldr	r3, [r7, #32]
 80025a6:	9300      	str	r3, [sp, #0]
 80025a8:	4603      	mov	r3, r0
 80025aa:	68f8      	ldr	r0, [r7, #12]
 80025ac:	f004 f990 	bl	80068d0 <HAL_I2C_Mem_Read>
 80025b0:	4603      	mov	r3, r0
 80025b2:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80025b4:	7dfb      	ldrb	r3, [r7, #23]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80025ba:	7afb      	ldrb	r3, [r7, #11]
 80025bc:	4619      	mov	r1, r3
 80025be:	68f8      	ldr	r0, [r7, #12]
 80025c0:	f000 f832 	bl	8002628 <I2Cx_Error>
  }
  return status;    
 80025c4:	7dfb      	ldrb	r3, [r7, #23]
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3718      	adds	r7, #24
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}

080025ce <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 80025ce:	b580      	push	{r7, lr}
 80025d0:	b08a      	sub	sp, #40	; 0x28
 80025d2:	af04      	add	r7, sp, #16
 80025d4:	60f8      	str	r0, [r7, #12]
 80025d6:	4608      	mov	r0, r1
 80025d8:	4611      	mov	r1, r2
 80025da:	461a      	mov	r2, r3
 80025dc:	4603      	mov	r3, r0
 80025de:	72fb      	strb	r3, [r7, #11]
 80025e0:	460b      	mov	r3, r1
 80025e2:	813b      	strh	r3, [r7, #8]
 80025e4:	4613      	mov	r3, r2
 80025e6:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80025e8:	2300      	movs	r3, #0
 80025ea:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80025ec:	7afb      	ldrb	r3, [r7, #11]
 80025ee:	b299      	uxth	r1, r3
 80025f0:	88f8      	ldrh	r0, [r7, #6]
 80025f2:	893a      	ldrh	r2, [r7, #8]
 80025f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025f8:	9302      	str	r3, [sp, #8]
 80025fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80025fc:	9301      	str	r3, [sp, #4]
 80025fe:	6a3b      	ldr	r3, [r7, #32]
 8002600:	9300      	str	r3, [sp, #0]
 8002602:	4603      	mov	r3, r0
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f004 f84f 	bl	80066a8 <HAL_I2C_Mem_Write>
 800260a:	4603      	mov	r3, r0
 800260c:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800260e:	7dfb      	ldrb	r3, [r7, #23]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d004      	beq.n	800261e <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002614:	7afb      	ldrb	r3, [r7, #11]
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f000 f805 	bl	8002628 <I2Cx_Error>
  }
  return status;
 800261e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002620:	4618      	mov	r0, r3
 8002622:	3718      	adds	r7, #24
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}

08002628 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002628:	b580      	push	{r7, lr}
 800262a:	b082      	sub	sp, #8
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	460b      	mov	r3, r1
 8002632:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002634:	6878      	ldr	r0, [r7, #4]
 8002636:	f004 f807 	bl	8006648 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 800263a:	6878      	ldr	r0, [r7, #4]
 800263c:	f7ff ff5e 	bl	80024fc <I2Cx_Init>
}
 8002640:	bf00      	nop
 8002642:	3708      	adds	r7, #8
 8002644:	46bd      	mov	sp, r7
 8002646:	bd80      	pop	{r7, pc}

08002648 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 800264c:	4802      	ldr	r0, [pc, #8]	; (8002658 <TS_IO_Init+0x10>)
 800264e:	f7ff ff55 	bl	80024fc <I2Cx_Init>
}
 8002652:	bf00      	nop
 8002654:	bd80      	pop	{r7, pc}
 8002656:	bf00      	nop
 8002658:	20000340 	.word	0x20000340

0800265c <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af02      	add	r7, sp, #8
 8002662:	4603      	mov	r3, r0
 8002664:	71fb      	strb	r3, [r7, #7]
 8002666:	460b      	mov	r3, r1
 8002668:	71bb      	strb	r3, [r7, #6]
 800266a:	4613      	mov	r3, r2
 800266c:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 800266e:	79bb      	ldrb	r3, [r7, #6]
 8002670:	b29a      	uxth	r2, r3
 8002672:	79f9      	ldrb	r1, [r7, #7]
 8002674:	2301      	movs	r3, #1
 8002676:	9301      	str	r3, [sp, #4]
 8002678:	1d7b      	adds	r3, r7, #5
 800267a:	9300      	str	r3, [sp, #0]
 800267c:	2301      	movs	r3, #1
 800267e:	4803      	ldr	r0, [pc, #12]	; (800268c <TS_IO_Write+0x30>)
 8002680:	f7ff ffa5 	bl	80025ce <I2Cx_WriteMultiple>
}
 8002684:	bf00      	nop
 8002686:	3708      	adds	r7, #8
 8002688:	46bd      	mov	sp, r7
 800268a:	bd80      	pop	{r7, pc}
 800268c:	20000340 	.word	0x20000340

08002690 <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af02      	add	r7, sp, #8
 8002696:	4603      	mov	r3, r0
 8002698:	460a      	mov	r2, r1
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	4613      	mov	r3, r2
 800269e:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80026a0:	2300      	movs	r3, #0
 80026a2:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80026a4:	79bb      	ldrb	r3, [r7, #6]
 80026a6:	b29a      	uxth	r2, r3
 80026a8:	79f9      	ldrb	r1, [r7, #7]
 80026aa:	2301      	movs	r3, #1
 80026ac:	9301      	str	r3, [sp, #4]
 80026ae:	f107 030f 	add.w	r3, r7, #15
 80026b2:	9300      	str	r3, [sp, #0]
 80026b4:	2301      	movs	r3, #1
 80026b6:	4804      	ldr	r0, [pc, #16]	; (80026c8 <TS_IO_Read+0x38>)
 80026b8:	f7ff ff5c 	bl	8002574 <I2Cx_ReadMultiple>

  return read_value;
 80026bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3710      	adds	r7, #16
 80026c2:	46bd      	mov	sp, r7
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	20000340 	.word	0x20000340

080026cc <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f002 fa2b 	bl	8004b30 <HAL_Delay>
}
 80026da:	bf00      	nop
 80026dc:	3708      	adds	r7, #8
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
	...

080026e4 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 80026e4:	b580      	push	{r7, lr}
 80026e6:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 80026e8:	4b31      	ldr	r3, [pc, #196]	; (80027b0 <BSP_LCD_Init+0xcc>)
 80026ea:	2228      	movs	r2, #40	; 0x28
 80026ec:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 80026ee:	4b30      	ldr	r3, [pc, #192]	; (80027b0 <BSP_LCD_Init+0xcc>)
 80026f0:	2209      	movs	r2, #9
 80026f2:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 80026f4:	4b2e      	ldr	r3, [pc, #184]	; (80027b0 <BSP_LCD_Init+0xcc>)
 80026f6:	2235      	movs	r2, #53	; 0x35
 80026f8:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 80026fa:	4b2d      	ldr	r3, [pc, #180]	; (80027b0 <BSP_LCD_Init+0xcc>)
 80026fc:	220b      	movs	r2, #11
 80026fe:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002702:	f240 121b 	movw	r2, #283	; 0x11b
 8002706:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002708:	4b29      	ldr	r3, [pc, #164]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800270a:	f240 2215 	movw	r2, #533	; 0x215
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 8002710:	4b27      	ldr	r3, [pc, #156]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002712:	f240 121d 	movw	r2, #285	; 0x11d
 8002716:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002718:	4b25      	ldr	r3, [pc, #148]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800271a:	f240 2235 	movw	r2, #565	; 0x235
 800271e:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 8002720:	2100      	movs	r1, #0
 8002722:	4823      	ldr	r0, [pc, #140]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002724:	f000 ffe8 	bl	80036f8 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002728:	4b21      	ldr	r3, [pc, #132]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800272a:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800272e:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 8002730:	4b1f      	ldr	r3, [pc, #124]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002732:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002736:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002738:	4b1d      	ldr	r3, [pc, #116]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800273a:	2200      	movs	r2, #0
 800273c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 8002740:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002748:	4b19      	ldr	r3, [pc, #100]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8002750:	4b17      	ldr	r3, [pc, #92]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002752:	2200      	movs	r2, #0
 8002754:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002756:	4b16      	ldr	r3, [pc, #88]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002758:	2200      	movs	r2, #0
 800275a:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 800275c:	4b14      	ldr	r3, [pc, #80]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800275e:	2200      	movs	r2, #0
 8002760:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8002762:	4b13      	ldr	r3, [pc, #76]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002764:	2200      	movs	r2, #0
 8002766:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 8002768:	4b11      	ldr	r3, [pc, #68]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800276a:	4a12      	ldr	r2, [pc, #72]	; (80027b4 <BSP_LCD_Init+0xd0>)
 800276c:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 800276e:	4810      	ldr	r0, [pc, #64]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002770:	f004 fe5a 	bl	8007428 <HAL_LTDC_GetState>
 8002774:	4603      	mov	r3, r0
 8002776:	2b00      	cmp	r3, #0
 8002778:	d103      	bne.n	8002782 <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 800277a:	2100      	movs	r1, #0
 800277c:	480c      	ldr	r0, [pc, #48]	; (80027b0 <BSP_LCD_Init+0xcc>)
 800277e:	f000 fee1 	bl	8003544 <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 8002782:	480b      	ldr	r0, [pc, #44]	; (80027b0 <BSP_LCD_Init+0xcc>)
 8002784:	f004 fc80 	bl	8007088 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 8002788:	2201      	movs	r2, #1
 800278a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800278e:	480a      	ldr	r0, [pc, #40]	; (80027b8 <BSP_LCD_Init+0xd4>)
 8002790:	f003 feb0 	bl	80064f4 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8002794:	2201      	movs	r2, #1
 8002796:	2108      	movs	r1, #8
 8002798:	4808      	ldr	r0, [pc, #32]	; (80027bc <BSP_LCD_Init+0xd8>)
 800279a:	f003 feab 	bl	80064f4 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 800279e:	f001 f98b 	bl	8003ab8 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80027a2:	4807      	ldr	r0, [pc, #28]	; (80027c0 <BSP_LCD_Init+0xdc>)
 80027a4:	f000 f8d8 	bl	8002958 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20008c24 	.word	0x20008c24
 80027b4:	40016800 	.word	0x40016800
 80027b8:	40022000 	.word	0x40022000
 80027bc:	40022800 	.word	0x40022800
 80027c0:	2000003c 	.word	0x2000003c

080027c4 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 80027c4:	b480      	push	{r7}
 80027c6:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 80027c8:	4b06      	ldr	r3, [pc, #24]	; (80027e4 <BSP_LCD_GetXSize+0x20>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a06      	ldr	r2, [pc, #24]	; (80027e8 <BSP_LCD_GetXSize+0x24>)
 80027ce:	2134      	movs	r1, #52	; 0x34
 80027d0:	fb01 f303 	mul.w	r3, r1, r3
 80027d4:	4413      	add	r3, r2
 80027d6:	3360      	adds	r3, #96	; 0x60
 80027d8:	681b      	ldr	r3, [r3, #0]
}
 80027da:	4618      	mov	r0, r3
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	200003cc 	.word	0x200003cc
 80027e8:	20008c24 	.word	0x20008c24

080027ec <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 80027ec:	b480      	push	{r7}
 80027ee:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 80027f0:	4b06      	ldr	r3, [pc, #24]	; (800280c <BSP_LCD_GetYSize+0x20>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a06      	ldr	r2, [pc, #24]	; (8002810 <BSP_LCD_GetYSize+0x24>)
 80027f6:	2134      	movs	r1, #52	; 0x34
 80027f8:	fb01 f303 	mul.w	r3, r1, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	3364      	adds	r3, #100	; 0x64
 8002800:	681b      	ldr	r3, [r3, #0]
}
 8002802:	4618      	mov	r0, r3
 8002804:	46bd      	mov	sp, r7
 8002806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280a:	4770      	bx	lr
 800280c:	200003cc 	.word	0x200003cc
 8002810:	20008c24 	.word	0x20008c24

08002814 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002814:	b580      	push	{r7, lr}
 8002816:	b090      	sub	sp, #64	; 0x40
 8002818:	af00      	add	r7, sp, #0
 800281a:	4603      	mov	r3, r0
 800281c:	6039      	str	r1, [r7, #0]
 800281e:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 8002820:	2300      	movs	r3, #0
 8002822:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002824:	f7ff ffce 	bl	80027c4 <BSP_LCD_GetXSize>
 8002828:	4603      	mov	r3, r0
 800282a:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 800282c:	2300      	movs	r3, #0
 800282e:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 8002830:	f7ff ffdc 	bl	80027ec <BSP_LCD_GetYSize>
 8002834:	4603      	mov	r3, r0
 8002836:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002838:	2300      	movs	r3, #0
 800283a:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 800283c:	683b      	ldr	r3, [r7, #0]
 800283e:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 8002840:	23ff      	movs	r3, #255	; 0xff
 8002842:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002844:	2300      	movs	r3, #0
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002848:	2300      	movs	r3, #0
 800284a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800284e:	2300      	movs	r3, #0
 8002850:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002854:	2300      	movs	r3, #0
 8002856:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800285a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800285e:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8002860:	2307      	movs	r3, #7
 8002862:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 8002864:	f7ff ffae 	bl	80027c4 <BSP_LCD_GetXSize>
 8002868:	4603      	mov	r3, r0
 800286a:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 800286c:	f7ff ffbe 	bl	80027ec <BSP_LCD_GetYSize>
 8002870:	4603      	mov	r3, r0
 8002872:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 8002874:	88fa      	ldrh	r2, [r7, #6]
 8002876:	f107 030c 	add.w	r3, r7, #12
 800287a:	4619      	mov	r1, r3
 800287c:	4812      	ldr	r0, [pc, #72]	; (80028c8 <BSP_LCD_LayerDefaultInit+0xb4>)
 800287e:	f004 fd95 	bl	80073ac <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8002882:	88fa      	ldrh	r2, [r7, #6]
 8002884:	4911      	ldr	r1, [pc, #68]	; (80028cc <BSP_LCD_LayerDefaultInit+0xb8>)
 8002886:	4613      	mov	r3, r2
 8002888:	005b      	lsls	r3, r3, #1
 800288a:	4413      	add	r3, r2
 800288c:	009b      	lsls	r3, r3, #2
 800288e:	440b      	add	r3, r1
 8002890:	3304      	adds	r3, #4
 8002892:	f04f 32ff 	mov.w	r2, #4294967295
 8002896:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 8002898:	88fa      	ldrh	r2, [r7, #6]
 800289a:	490c      	ldr	r1, [pc, #48]	; (80028cc <BSP_LCD_LayerDefaultInit+0xb8>)
 800289c:	4613      	mov	r3, r2
 800289e:	005b      	lsls	r3, r3, #1
 80028a0:	4413      	add	r3, r2
 80028a2:	009b      	lsls	r3, r3, #2
 80028a4:	440b      	add	r3, r1
 80028a6:	3308      	adds	r3, #8
 80028a8:	4a09      	ldr	r2, [pc, #36]	; (80028d0 <BSP_LCD_LayerDefaultInit+0xbc>)
 80028aa:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80028ac:	88fa      	ldrh	r2, [r7, #6]
 80028ae:	4907      	ldr	r1, [pc, #28]	; (80028cc <BSP_LCD_LayerDefaultInit+0xb8>)
 80028b0:	4613      	mov	r3, r2
 80028b2:	005b      	lsls	r3, r3, #1
 80028b4:	4413      	add	r3, r2
 80028b6:	009b      	lsls	r3, r3, #2
 80028b8:	440b      	add	r3, r1
 80028ba:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80028be:	601a      	str	r2, [r3, #0]
}
 80028c0:	bf00      	nop
 80028c2:	3740      	adds	r7, #64	; 0x40
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	20008c24 	.word	0x20008c24
 80028cc:	200003d0 	.word	0x200003d0
 80028d0:	2000003c 	.word	0x2000003c

080028d4 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b083      	sub	sp, #12
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 80028dc:	4a04      	ldr	r2, [pc, #16]	; (80028f0 <BSP_LCD_SelectLayer+0x1c>)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6013      	str	r3, [r2, #0]
} 
 80028e2:	bf00      	nop
 80028e4:	370c      	adds	r7, #12
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	200003cc 	.word	0x200003cc

080028f4 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 80028fc:	4b07      	ldr	r3, [pc, #28]	; (800291c <BSP_LCD_SetTextColor+0x28>)
 80028fe:	681a      	ldr	r2, [r3, #0]
 8002900:	4907      	ldr	r1, [pc, #28]	; (8002920 <BSP_LCD_SetTextColor+0x2c>)
 8002902:	4613      	mov	r3, r2
 8002904:	005b      	lsls	r3, r3, #1
 8002906:	4413      	add	r3, r2
 8002908:	009b      	lsls	r3, r3, #2
 800290a:	440b      	add	r3, r1
 800290c:	687a      	ldr	r2, [r7, #4]
 800290e:	601a      	str	r2, [r3, #0]
}
 8002910:	bf00      	nop
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291a:	4770      	bx	lr
 800291c:	200003cc 	.word	0x200003cc
 8002920:	200003d0 	.word	0x200003d0

08002924 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 800292c:	4b08      	ldr	r3, [pc, #32]	; (8002950 <BSP_LCD_SetBackColor+0x2c>)
 800292e:	681a      	ldr	r2, [r3, #0]
 8002930:	4908      	ldr	r1, [pc, #32]	; (8002954 <BSP_LCD_SetBackColor+0x30>)
 8002932:	4613      	mov	r3, r2
 8002934:	005b      	lsls	r3, r3, #1
 8002936:	4413      	add	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	440b      	add	r3, r1
 800293c:	3304      	adds	r3, #4
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]
}
 8002942:	bf00      	nop
 8002944:	370c      	adds	r7, #12
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr
 800294e:	bf00      	nop
 8002950:	200003cc 	.word	0x200003cc
 8002954:	200003d0 	.word	0x200003d0

08002958 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 8002960:	4b08      	ldr	r3, [pc, #32]	; (8002984 <BSP_LCD_SetFont+0x2c>)
 8002962:	681a      	ldr	r2, [r3, #0]
 8002964:	4908      	ldr	r1, [pc, #32]	; (8002988 <BSP_LCD_SetFont+0x30>)
 8002966:	4613      	mov	r3, r2
 8002968:	005b      	lsls	r3, r3, #1
 800296a:	4413      	add	r3, r2
 800296c:	009b      	lsls	r3, r3, #2
 800296e:	440b      	add	r3, r1
 8002970:	3308      	adds	r3, #8
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	601a      	str	r2, [r3, #0]
}
 8002976:	bf00      	nop
 8002978:	370c      	adds	r7, #12
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	200003cc 	.word	0x200003cc
 8002988:	200003d0 	.word	0x200003d0

0800298c <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 8002990:	4b07      	ldr	r3, [pc, #28]	; (80029b0 <BSP_LCD_GetFont+0x24>)
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4907      	ldr	r1, [pc, #28]	; (80029b4 <BSP_LCD_GetFont+0x28>)
 8002996:	4613      	mov	r3, r2
 8002998:	005b      	lsls	r3, r3, #1
 800299a:	4413      	add	r3, r2
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	440b      	add	r3, r1
 80029a0:	3308      	adds	r3, #8
 80029a2:	681b      	ldr	r3, [r3, #0]
}
 80029a4:	4618      	mov	r0, r3
 80029a6:	46bd      	mov	sp, r7
 80029a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ac:	4770      	bx	lr
 80029ae:	bf00      	nop
 80029b0:	200003cc 	.word	0x200003cc
 80029b4:	200003d0 	.word	0x200003d0

080029b8 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80029b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ba:	b085      	sub	sp, #20
 80029bc:	af02      	add	r7, sp, #8
 80029be:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80029c0:	4b0f      	ldr	r3, [pc, #60]	; (8002a00 <BSP_LCD_Clear+0x48>)
 80029c2:	681c      	ldr	r4, [r3, #0]
 80029c4:	4b0e      	ldr	r3, [pc, #56]	; (8002a00 <BSP_LCD_Clear+0x48>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a0e      	ldr	r2, [pc, #56]	; (8002a04 <BSP_LCD_Clear+0x4c>)
 80029ca:	2134      	movs	r1, #52	; 0x34
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	335c      	adds	r3, #92	; 0x5c
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	461d      	mov	r5, r3
 80029d8:	f7ff fef4 	bl	80027c4 <BSP_LCD_GetXSize>
 80029dc:	4606      	mov	r6, r0
 80029de:	f7ff ff05 	bl	80027ec <BSP_LCD_GetYSize>
 80029e2:	4602      	mov	r2, r0
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	9301      	str	r3, [sp, #4]
 80029e8:	2300      	movs	r3, #0
 80029ea:	9300      	str	r3, [sp, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	4632      	mov	r2, r6
 80029f0:	4629      	mov	r1, r5
 80029f2:	4620      	mov	r0, r4
 80029f4:	f001 f814 	bl	8003a20 <LL_FillBuffer>
}
 80029f8:	bf00      	nop
 80029fa:	370c      	adds	r7, #12
 80029fc:	46bd      	mov	sp, r7
 80029fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002a00:	200003cc 	.word	0x200003cc
 8002a04:	20008c24 	.word	0x20008c24

08002a08 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002a08:	b590      	push	{r4, r7, lr}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	4603      	mov	r3, r0
 8002a10:	80fb      	strh	r3, [r7, #6]
 8002a12:	460b      	mov	r3, r1
 8002a14:	80bb      	strh	r3, [r7, #4]
 8002a16:	4613      	mov	r3, r2
 8002a18:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a1a:	4b1b      	ldr	r3, [pc, #108]	; (8002a88 <BSP_LCD_DisplayChar+0x80>)
 8002a1c:	681a      	ldr	r2, [r3, #0]
 8002a1e:	491b      	ldr	r1, [pc, #108]	; (8002a8c <BSP_LCD_DisplayChar+0x84>)
 8002a20:	4613      	mov	r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	4413      	add	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	440b      	add	r3, r1
 8002a2a:	3308      	adds	r3, #8
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6819      	ldr	r1, [r3, #0]
 8002a30:	78fb      	ldrb	r3, [r7, #3]
 8002a32:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a36:	4b14      	ldr	r3, [pc, #80]	; (8002a88 <BSP_LCD_DisplayChar+0x80>)
 8002a38:	681a      	ldr	r2, [r3, #0]
 8002a3a:	4c14      	ldr	r4, [pc, #80]	; (8002a8c <BSP_LCD_DisplayChar+0x84>)
 8002a3c:	4613      	mov	r3, r2
 8002a3e:	005b      	lsls	r3, r3, #1
 8002a40:	4413      	add	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4423      	add	r3, r4
 8002a46:	3308      	adds	r3, #8
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a4c:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002a50:	4b0d      	ldr	r3, [pc, #52]	; (8002a88 <BSP_LCD_DisplayChar+0x80>)
 8002a52:	681a      	ldr	r2, [r3, #0]
 8002a54:	4c0d      	ldr	r4, [pc, #52]	; (8002a8c <BSP_LCD_DisplayChar+0x84>)
 8002a56:	4613      	mov	r3, r2
 8002a58:	005b      	lsls	r3, r3, #1
 8002a5a:	4413      	add	r3, r2
 8002a5c:	009b      	lsls	r3, r3, #2
 8002a5e:	4423      	add	r3, r4
 8002a60:	3308      	adds	r3, #8
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	889b      	ldrh	r3, [r3, #4]
 8002a66:	3307      	adds	r3, #7
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	da00      	bge.n	8002a6e <BSP_LCD_DisplayChar+0x66>
 8002a6c:	3307      	adds	r3, #7
 8002a6e:	10db      	asrs	r3, r3, #3
 8002a70:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002a74:	18ca      	adds	r2, r1, r3
 8002a76:	88b9      	ldrh	r1, [r7, #4]
 8002a78:	88fb      	ldrh	r3, [r7, #6]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f000 fe58 	bl	8003730 <DrawChar>
}
 8002a80:	bf00      	nop
 8002a82:	370c      	adds	r7, #12
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd90      	pop	{r4, r7, pc}
 8002a88:	200003cc 	.word	0x200003cc
 8002a8c:	200003d0 	.word	0x200003d0

08002a90 <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8002a90:	b5b0      	push	{r4, r5, r7, lr}
 8002a92:	b088      	sub	sp, #32
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	60ba      	str	r2, [r7, #8]
 8002a98:	461a      	mov	r2, r3
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	81fb      	strh	r3, [r7, #14]
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	81bb      	strh	r3, [r7, #12]
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	83fb      	strh	r3, [r7, #30]
 8002aaa:	2300      	movs	r3, #0
 8002aac:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 8002aae:	2300      	movs	r3, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 8002ab6:	68bb      	ldr	r3, [r7, #8]
 8002ab8:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 8002aba:	e002      	b.n	8002ac2 <BSP_LCD_DisplayStringAt+0x32>
 8002abc:	69bb      	ldr	r3, [r7, #24]
 8002abe:	3301      	adds	r3, #1
 8002ac0:	61bb      	str	r3, [r7, #24]
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	1c5a      	adds	r2, r3, #1
 8002ac6:	617a      	str	r2, [r7, #20]
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1f6      	bne.n	8002abc <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 8002ace:	f7ff fe79 	bl	80027c4 <BSP_LCD_GetXSize>
 8002ad2:	4b4f      	ldr	r3, [pc, #316]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002ad4:	681a      	ldr	r2, [r3, #0]
 8002ad6:	494f      	ldr	r1, [pc, #316]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002ad8:	4613      	mov	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4413      	add	r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3308      	adds	r3, #8
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	889b      	ldrh	r3, [r3, #4]
 8002ae8:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aec:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	2b02      	cmp	r3, #2
 8002af2:	d01c      	beq.n	8002b2e <BSP_LCD_DisplayStringAt+0x9e>
 8002af4:	2b03      	cmp	r3, #3
 8002af6:	d017      	beq.n	8002b28 <BSP_LCD_DisplayStringAt+0x98>
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d12e      	bne.n	8002b5a <BSP_LCD_DisplayStringAt+0xca>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002afc:	693a      	ldr	r2, [r7, #16]
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	1ad1      	subs	r1, r2, r3
 8002b02:	4b43      	ldr	r3, [pc, #268]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	4843      	ldr	r0, [pc, #268]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002b08:	4613      	mov	r3, r2
 8002b0a:	005b      	lsls	r3, r3, #1
 8002b0c:	4413      	add	r3, r2
 8002b0e:	009b      	lsls	r3, r3, #2
 8002b10:	4403      	add	r3, r0
 8002b12:	3308      	adds	r3, #8
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	889b      	ldrh	r3, [r3, #4]
 8002b18:	fb03 f301 	mul.w	r3, r3, r1
 8002b1c:	085b      	lsrs	r3, r3, #1
 8002b1e:	b29a      	uxth	r2, r3
 8002b20:	89fb      	ldrh	r3, [r7, #14]
 8002b22:	4413      	add	r3, r2
 8002b24:	83fb      	strh	r3, [r7, #30]
      break;
 8002b26:	e01b      	b.n	8002b60 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 8002b28:	89fb      	ldrh	r3, [r7, #14]
 8002b2a:	83fb      	strh	r3, [r7, #30]
      break;
 8002b2c:	e018      	b.n	8002b60 <BSP_LCD_DisplayStringAt+0xd0>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002b2e:	693a      	ldr	r2, [r7, #16]
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	b299      	uxth	r1, r3
 8002b36:	4b36      	ldr	r3, [pc, #216]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002b38:	681a      	ldr	r2, [r3, #0]
 8002b3a:	4836      	ldr	r0, [pc, #216]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	4413      	add	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4403      	add	r3, r0
 8002b46:	3308      	adds	r3, #8
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	889b      	ldrh	r3, [r3, #4]
 8002b4c:	fb11 f303 	smulbb	r3, r1, r3
 8002b50:	b29a      	uxth	r2, r3
 8002b52:	89fb      	ldrh	r3, [r7, #14]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	83fb      	strh	r3, [r7, #30]
      break;
 8002b58:	e002      	b.n	8002b60 <BSP_LCD_DisplayStringAt+0xd0>
    }    
  default:
    {
      ref_column = Xpos;
 8002b5a:	89fb      	ldrh	r3, [r7, #14]
 8002b5c:	83fb      	strh	r3, [r7, #30]
      break;
 8002b5e:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 8002b60:	8bfb      	ldrh	r3, [r7, #30]
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <BSP_LCD_DisplayStringAt+0xde>
 8002b66:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	da1d      	bge.n	8002baa <BSP_LCD_DisplayStringAt+0x11a>
  {
    ref_column = 1;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002b72:	e01a      	b.n	8002baa <BSP_LCD_DisplayStringAt+0x11a>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	781a      	ldrb	r2, [r3, #0]
 8002b78:	89b9      	ldrh	r1, [r7, #12]
 8002b7a:	8bfb      	ldrh	r3, [r7, #30]
 8002b7c:	4618      	mov	r0, r3
 8002b7e:	f7ff ff43 	bl	8002a08 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 8002b82:	4b23      	ldr	r3, [pc, #140]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002b84:	681a      	ldr	r2, [r3, #0]
 8002b86:	4923      	ldr	r1, [pc, #140]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002b88:	4613      	mov	r3, r2
 8002b8a:	005b      	lsls	r3, r3, #1
 8002b8c:	4413      	add	r3, r2
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	440b      	add	r3, r1
 8002b92:	3308      	adds	r3, #8
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	889a      	ldrh	r2, [r3, #4]
 8002b98:	8bfb      	ldrh	r3, [r7, #30]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 8002b9e:	68bb      	ldr	r3, [r7, #8]
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	60bb      	str	r3, [r7, #8]
    i++;
 8002ba4:	8bbb      	ldrh	r3, [r7, #28]
 8002ba6:	3301      	adds	r3, #1
 8002ba8:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bf14      	ite	ne
 8002bb2:	2301      	movne	r3, #1
 8002bb4:	2300      	moveq	r3, #0
 8002bb6:	b2dc      	uxtb	r4, r3
 8002bb8:	f7ff fe04 	bl	80027c4 <BSP_LCD_GetXSize>
 8002bbc:	4605      	mov	r5, r0
 8002bbe:	8bb9      	ldrh	r1, [r7, #28]
 8002bc0:	4b13      	ldr	r3, [pc, #76]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002bc2:	681a      	ldr	r2, [r3, #0]
 8002bc4:	4813      	ldr	r0, [pc, #76]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	005b      	lsls	r3, r3, #1
 8002bca:	4413      	add	r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	4403      	add	r3, r0
 8002bd0:	3308      	adds	r3, #8
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	889b      	ldrh	r3, [r3, #4]
 8002bd6:	fb03 f301 	mul.w	r3, r3, r1
 8002bda:	1aeb      	subs	r3, r5, r3
 8002bdc:	b299      	uxth	r1, r3
 8002bde:	4b0c      	ldr	r3, [pc, #48]	; (8002c10 <BSP_LCD_DisplayStringAt+0x180>)
 8002be0:	681a      	ldr	r2, [r3, #0]
 8002be2:	480c      	ldr	r0, [pc, #48]	; (8002c14 <BSP_LCD_DisplayStringAt+0x184>)
 8002be4:	4613      	mov	r3, r2
 8002be6:	005b      	lsls	r3, r3, #1
 8002be8:	4413      	add	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4403      	add	r3, r0
 8002bee:	3308      	adds	r3, #8
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	889b      	ldrh	r3, [r3, #4]
 8002bf4:	4299      	cmp	r1, r3
 8002bf6:	bf2c      	ite	cs
 8002bf8:	2301      	movcs	r3, #1
 8002bfa:	2300      	movcc	r3, #0
 8002bfc:	b2db      	uxtb	r3, r3
 8002bfe:	4023      	ands	r3, r4
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d1b6      	bne.n	8002b74 <BSP_LCD_DisplayStringAt+0xe4>
  }  
}
 8002c06:	bf00      	nop
 8002c08:	3720      	adds	r7, #32
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bdb0      	pop	{r4, r5, r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	200003cc 	.word	0x200003cc
 8002c14:	200003d0 	.word	0x200003d0

08002c18 <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	4603      	mov	r3, r0
 8002c20:	6039      	str	r1, [r7, #0]
 8002c22:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002c24:	f7ff feb2 	bl	800298c <BSP_LCD_GetFont>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	88db      	ldrh	r3, [r3, #6]
 8002c2c:	88fa      	ldrh	r2, [r7, #6]
 8002c2e:	fb12 f303 	smulbb	r3, r2, r3
 8002c32:	b299      	uxth	r1, r3
 8002c34:	2303      	movs	r3, #3
 8002c36:	683a      	ldr	r2, [r7, #0]
 8002c38:	2000      	movs	r0, #0
 8002c3a:	f7ff ff29 	bl	8002a90 <BSP_LCD_DisplayStringAt>
}
 8002c3e:	bf00      	nop
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
	...

08002c48 <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b086      	sub	sp, #24
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	4603      	mov	r3, r0
 8002c50:	80fb      	strh	r3, [r7, #6]
 8002c52:	460b      	mov	r3, r1
 8002c54:	80bb      	strh	r3, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002c5e:	4b26      	ldr	r3, [pc, #152]	; (8002cf8 <BSP_LCD_DrawHLine+0xb0>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a26      	ldr	r2, [pc, #152]	; (8002cfc <BSP_LCD_DrawHLine+0xb4>)
 8002c64:	2134      	movs	r1, #52	; 0x34
 8002c66:	fb01 f303 	mul.w	r3, r1, r3
 8002c6a:	4413      	add	r3, r2
 8002c6c:	3348      	adds	r3, #72	; 0x48
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d114      	bne.n	8002c9e <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c74:	4b20      	ldr	r3, [pc, #128]	; (8002cf8 <BSP_LCD_DrawHLine+0xb0>)
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a20      	ldr	r2, [pc, #128]	; (8002cfc <BSP_LCD_DrawHLine+0xb4>)
 8002c7a:	2134      	movs	r1, #52	; 0x34
 8002c7c:	fb01 f303 	mul.w	r3, r1, r3
 8002c80:	4413      	add	r3, r2
 8002c82:	335c      	adds	r3, #92	; 0x5c
 8002c84:	681c      	ldr	r4, [r3, #0]
 8002c86:	f7ff fd9d 	bl	80027c4 <BSP_LCD_GetXSize>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	88bb      	ldrh	r3, [r7, #4]
 8002c8e:	fb03 f202 	mul.w	r2, r3, r2
 8002c92:	88fb      	ldrh	r3, [r7, #6]
 8002c94:	4413      	add	r3, r2
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	4423      	add	r3, r4
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e013      	b.n	8002cc6 <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002c9e:	4b16      	ldr	r3, [pc, #88]	; (8002cf8 <BSP_LCD_DrawHLine+0xb0>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	4a16      	ldr	r2, [pc, #88]	; (8002cfc <BSP_LCD_DrawHLine+0xb4>)
 8002ca4:	2134      	movs	r1, #52	; 0x34
 8002ca6:	fb01 f303 	mul.w	r3, r1, r3
 8002caa:	4413      	add	r3, r2
 8002cac:	335c      	adds	r3, #92	; 0x5c
 8002cae:	681c      	ldr	r4, [r3, #0]
 8002cb0:	f7ff fd88 	bl	80027c4 <BSP_LCD_GetXSize>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	88bb      	ldrh	r3, [r7, #4]
 8002cb8:	fb03 f202 	mul.w	r2, r3, r2
 8002cbc:	88fb      	ldrh	r3, [r7, #6]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	4423      	add	r3, r4
 8002cc4:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002cc6:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <BSP_LCD_DrawHLine+0xb0>)
 8002cc8:	6818      	ldr	r0, [r3, #0]
 8002cca:	68fc      	ldr	r4, [r7, #12]
 8002ccc:	887d      	ldrh	r5, [r7, #2]
 8002cce:	4b0a      	ldr	r3, [pc, #40]	; (8002cf8 <BSP_LCD_DrawHLine+0xb0>)
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	490b      	ldr	r1, [pc, #44]	; (8002d00 <BSP_LCD_DrawHLine+0xb8>)
 8002cd4:	4613      	mov	r3, r2
 8002cd6:	005b      	lsls	r3, r3, #1
 8002cd8:	4413      	add	r3, r2
 8002cda:	009b      	lsls	r3, r3, #2
 8002cdc:	440b      	add	r3, r1
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	9301      	str	r3, [sp, #4]
 8002ce2:	2300      	movs	r3, #0
 8002ce4:	9300      	str	r3, [sp, #0]
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	462a      	mov	r2, r5
 8002cea:	4621      	mov	r1, r4
 8002cec:	f000 fe98 	bl	8003a20 <LL_FillBuffer>
}
 8002cf0:	bf00      	nop
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bdb0      	pop	{r4, r5, r7, pc}
 8002cf8:	200003cc 	.word	0x200003cc
 8002cfc:	20008c24 	.word	0x20008c24
 8002d00:	200003d0 	.word	0x200003d0

08002d04 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002d04:	b590      	push	{r4, r7, lr}
 8002d06:	b08b      	sub	sp, #44	; 0x2c
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4604      	mov	r4, r0
 8002d0c:	4608      	mov	r0, r1
 8002d0e:	4611      	mov	r1, r2
 8002d10:	461a      	mov	r2, r3
 8002d12:	4623      	mov	r3, r4
 8002d14:	80fb      	strh	r3, [r7, #6]
 8002d16:	4603      	mov	r3, r0
 8002d18:	80bb      	strh	r3, [r7, #4]
 8002d1a:	460b      	mov	r3, r1
 8002d1c:	807b      	strh	r3, [r7, #2]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002d22:	2300      	movs	r3, #0
 8002d24:	823b      	strh	r3, [r7, #16]
 8002d26:	2300      	movs	r3, #0
 8002d28:	81fb      	strh	r3, [r7, #14]
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002d2e:	2300      	movs	r3, #0
 8002d30:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002d32:	2300      	movs	r3, #0
 8002d34:	847b      	strh	r3, [r7, #34]	; 0x22
 8002d36:	2300      	movs	r3, #0
 8002d38:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	83fb      	strh	r3, [r7, #30]
 8002d3e:	2300      	movs	r3, #0
 8002d40:	83bb      	strh	r3, [r7, #28]
 8002d42:	2300      	movs	r3, #0
 8002d44:	837b      	strh	r3, [r7, #26]
 8002d46:	2300      	movs	r3, #0
 8002d48:	833b      	strh	r3, [r7, #24]
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	82fb      	strh	r3, [r7, #22]
 8002d4e:	2300      	movs	r3, #0
 8002d50:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002d52:	2300      	movs	r3, #0
 8002d54:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002d56:	887a      	ldrh	r2, [r7, #2]
 8002d58:	88fb      	ldrh	r3, [r7, #6]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	bfb8      	it	lt
 8002d60:	425b      	neglt	r3, r3
 8002d62:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002d64:	883a      	ldrh	r2, [r7, #0]
 8002d66:	88bb      	ldrh	r3, [r7, #4]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	bfb8      	it	lt
 8002d6e:	425b      	neglt	r3, r3
 8002d70:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002d72:	88fb      	ldrh	r3, [r7, #6]
 8002d74:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002d76:	88bb      	ldrh	r3, [r7, #4]
 8002d78:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002d7a:	887a      	ldrh	r2, [r7, #2]
 8002d7c:	88fb      	ldrh	r3, [r7, #6]
 8002d7e:	429a      	cmp	r2, r3
 8002d80:	d304      	bcc.n	8002d8c <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002d82:	2301      	movs	r3, #1
 8002d84:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002d86:	2301      	movs	r3, #1
 8002d88:	843b      	strh	r3, [r7, #32]
 8002d8a:	e005      	b.n	8002d98 <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002d8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d90:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002d92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002d96:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002d98:	883a      	ldrh	r2, [r7, #0]
 8002d9a:	88bb      	ldrh	r3, [r7, #4]
 8002d9c:	429a      	cmp	r2, r3
 8002d9e:	d304      	bcc.n	8002daa <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002da0:	2301      	movs	r3, #1
 8002da2:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002da4:	2301      	movs	r3, #1
 8002da6:	83bb      	strh	r3, [r7, #28]
 8002da8:	e005      	b.n	8002db6 <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002dae:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002db0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002db4:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002db6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002dba:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002dbe:	429a      	cmp	r2, r3
 8002dc0:	db11      	blt.n	8002de6 <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002dca:	8a3b      	ldrh	r3, [r7, #16]
 8002dcc:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002dce:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	da00      	bge.n	8002dd8 <BSP_LCD_DrawLine+0xd4>
 8002dd6:	3301      	adds	r3, #1
 8002dd8:	105b      	asrs	r3, r3, #1
 8002dda:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002ddc:	89fb      	ldrh	r3, [r7, #14]
 8002dde:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002de0:	8a3b      	ldrh	r3, [r7, #16]
 8002de2:	82bb      	strh	r3, [r7, #20]
 8002de4:	e010      	b.n	8002e08 <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002de6:	2300      	movs	r3, #0
 8002de8:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002dea:	2300      	movs	r3, #0
 8002dec:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002dee:	89fb      	ldrh	r3, [r7, #14]
 8002df0:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002df2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	da00      	bge.n	8002dfc <BSP_LCD_DrawLine+0xf8>
 8002dfa:	3301      	adds	r3, #1
 8002dfc:	105b      	asrs	r3, r3, #1
 8002dfe:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002e00:	8a3b      	ldrh	r3, [r7, #16]
 8002e02:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002e04:	89fb      	ldrh	r3, [r7, #14]
 8002e06:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002e08:	2300      	movs	r3, #0
 8002e0a:	827b      	strh	r3, [r7, #18]
 8002e0c:	e038      	b.n	8002e80 <BSP_LCD_DrawLine+0x17c>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002e0e:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002e10:	8cbc      	ldrh	r4, [r7, #36]	; 0x24
 8002e12:	4b20      	ldr	r3, [pc, #128]	; (8002e94 <BSP_LCD_DrawLine+0x190>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	4920      	ldr	r1, [pc, #128]	; (8002e98 <BSP_LCD_DrawLine+0x194>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	461a      	mov	r2, r3
 8002e26:	4621      	mov	r1, r4
 8002e28:	f000 f928 	bl	800307c <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002e2c:	8b3a      	ldrh	r2, [r7, #24]
 8002e2e:	8afb      	ldrh	r3, [r7, #22]
 8002e30:	4413      	add	r3, r2
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002e36:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002e3a:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	db0e      	blt.n	8002e60 <BSP_LCD_DrawLine+0x15c>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002e42:	8b3a      	ldrh	r2, [r7, #24]
 8002e44:	8b7b      	ldrh	r3, [r7, #26]
 8002e46:	1ad3      	subs	r3, r2, r3
 8002e48:	b29b      	uxth	r3, r3
 8002e4a:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002e4c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002e50:	4413      	add	r3, r2
 8002e52:	b29b      	uxth	r3, r3
 8002e54:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002e56:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e58:	8bfb      	ldrh	r3, [r7, #30]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002e60:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002e62:	8c3b      	ldrh	r3, [r7, #32]
 8002e64:	4413      	add	r3, r2
 8002e66:	b29b      	uxth	r3, r3
 8002e68:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002e6a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002e6c:	8bbb      	ldrh	r3, [r7, #28]
 8002e6e:	4413      	add	r3, r2
 8002e70:	b29b      	uxth	r3, r3
 8002e72:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002e74:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002e78:	b29b      	uxth	r3, r3
 8002e7a:	3301      	adds	r3, #1
 8002e7c:	b29b      	uxth	r3, r3
 8002e7e:	827b      	strh	r3, [r7, #18]
 8002e80:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002e84:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002e88:	429a      	cmp	r2, r3
 8002e8a:	ddc0      	ble.n	8002e0e <BSP_LCD_DrawLine+0x10a>
  }
}
 8002e8c:	bf00      	nop
 8002e8e:	372c      	adds	r7, #44	; 0x2c
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd90      	pop	{r4, r7, pc}
 8002e94:	200003cc 	.word	0x200003cc
 8002e98:	200003d0 	.word	0x200003d0

08002e9c <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002e9c:	b590      	push	{r4, r7, lr}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	80fb      	strh	r3, [r7, #6]
 8002ea6:	460b      	mov	r3, r1
 8002ea8:	80bb      	strh	r3, [r7, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002eae:	887b      	ldrh	r3, [r7, #2]
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	f1c3 0303 	rsb	r3, r3, #3
 8002eb6:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002eb8:	2300      	movs	r3, #0
 8002eba:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002ebc:	887b      	ldrh	r3, [r7, #2]
 8002ebe:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002ec0:	e0cf      	b.n	8003062 <BSP_LCD_DrawCircle+0x1c6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	b29a      	uxth	r2, r3
 8002ec6:	88fb      	ldrh	r3, [r7, #6]
 8002ec8:	4413      	add	r3, r2
 8002eca:	b298      	uxth	r0, r3
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	88ba      	ldrh	r2, [r7, #4]
 8002ed2:	1ad3      	subs	r3, r2, r3
 8002ed4:	b29c      	uxth	r4, r3
 8002ed6:	4b67      	ldr	r3, [pc, #412]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	4967      	ldr	r1, [pc, #412]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002edc:	4613      	mov	r3, r2
 8002ede:	005b      	lsls	r3, r3, #1
 8002ee0:	4413      	add	r3, r2
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	440b      	add	r3, r1
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4621      	mov	r1, r4
 8002eec:	f000 f8c6 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	88fa      	ldrh	r2, [r7, #6]
 8002ef6:	1ad3      	subs	r3, r2, r3
 8002ef8:	b298      	uxth	r0, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	b29b      	uxth	r3, r3
 8002efe:	88ba      	ldrh	r2, [r7, #4]
 8002f00:	1ad3      	subs	r3, r2, r3
 8002f02:	b29c      	uxth	r4, r3
 8002f04:	4b5b      	ldr	r3, [pc, #364]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002f06:	681a      	ldr	r2, [r3, #0]
 8002f08:	495b      	ldr	r1, [pc, #364]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002f0a:	4613      	mov	r3, r2
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	4413      	add	r3, r2
 8002f10:	009b      	lsls	r3, r3, #2
 8002f12:	440b      	add	r3, r1
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	461a      	mov	r2, r3
 8002f18:	4621      	mov	r1, r4
 8002f1a:	f000 f8af 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	b29a      	uxth	r2, r3
 8002f22:	88fb      	ldrh	r3, [r7, #6]
 8002f24:	4413      	add	r3, r2
 8002f26:	b298      	uxth	r0, r3
 8002f28:	693b      	ldr	r3, [r7, #16]
 8002f2a:	b29b      	uxth	r3, r3
 8002f2c:	88ba      	ldrh	r2, [r7, #4]
 8002f2e:	1ad3      	subs	r3, r2, r3
 8002f30:	b29c      	uxth	r4, r3
 8002f32:	4b50      	ldr	r3, [pc, #320]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	4950      	ldr	r1, [pc, #320]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002f38:	4613      	mov	r3, r2
 8002f3a:	005b      	lsls	r3, r3, #1
 8002f3c:	4413      	add	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	440b      	add	r3, r1
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	461a      	mov	r2, r3
 8002f46:	4621      	mov	r1, r4
 8002f48:	f000 f898 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	88fa      	ldrh	r2, [r7, #6]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	b298      	uxth	r0, r3
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	88ba      	ldrh	r2, [r7, #4]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	b29c      	uxth	r4, r3
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	4944      	ldr	r1, [pc, #272]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002f66:	4613      	mov	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	4413      	add	r3, r2
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	440b      	add	r3, r1
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	461a      	mov	r2, r3
 8002f74:	4621      	mov	r1, r4
 8002f76:	f000 f881 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	88fb      	ldrh	r3, [r7, #6]
 8002f80:	4413      	add	r3, r2
 8002f82:	b298      	uxth	r0, r3
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	88bb      	ldrh	r3, [r7, #4]
 8002f8a:	4413      	add	r3, r2
 8002f8c:	b29c      	uxth	r4, r3
 8002f8e:	4b39      	ldr	r3, [pc, #228]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002f90:	681a      	ldr	r2, [r3, #0]
 8002f92:	4939      	ldr	r1, [pc, #228]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002f94:	4613      	mov	r3, r2
 8002f96:	005b      	lsls	r3, r3, #1
 8002f98:	4413      	add	r3, r2
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	440b      	add	r3, r1
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	4621      	mov	r1, r4
 8002fa4:	f000 f86a 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	b29b      	uxth	r3, r3
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	b298      	uxth	r0, r3
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	b29a      	uxth	r2, r3
 8002fb6:	88bb      	ldrh	r3, [r7, #4]
 8002fb8:	4413      	add	r3, r2
 8002fba:	b29c      	uxth	r4, r3
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	492d      	ldr	r1, [pc, #180]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002fc2:	4613      	mov	r3, r2
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4413      	add	r3, r2
 8002fc8:	009b      	lsls	r3, r3, #2
 8002fca:	440b      	add	r3, r1
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	461a      	mov	r2, r3
 8002fd0:	4621      	mov	r1, r4
 8002fd2:	f000 f853 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	b29a      	uxth	r2, r3
 8002fda:	88fb      	ldrh	r3, [r7, #6]
 8002fdc:	4413      	add	r3, r2
 8002fde:	b298      	uxth	r0, r3
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	88bb      	ldrh	r3, [r7, #4]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	b29c      	uxth	r4, r3
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 8002fec:	681a      	ldr	r2, [r3, #0]
 8002fee:	4922      	ldr	r1, [pc, #136]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	005b      	lsls	r3, r3, #1
 8002ff4:	4413      	add	r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	461a      	mov	r2, r3
 8002ffe:	4621      	mov	r1, r4
 8003000:	f000 f83c 	bl	800307c <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	b29b      	uxth	r3, r3
 8003008:	88fa      	ldrh	r2, [r7, #6]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	b298      	uxth	r0, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	b29a      	uxth	r2, r3
 8003012:	88bb      	ldrh	r3, [r7, #4]
 8003014:	4413      	add	r3, r2
 8003016:	b29c      	uxth	r4, r3
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <BSP_LCD_DrawCircle+0x1d8>)
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	4916      	ldr	r1, [pc, #88]	; (8003078 <BSP_LCD_DrawCircle+0x1dc>)
 800301e:	4613      	mov	r3, r2
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	4413      	add	r3, r2
 8003024:	009b      	lsls	r3, r3, #2
 8003026:	440b      	add	r3, r1
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	461a      	mov	r2, r3
 800302c:	4621      	mov	r1, r4
 800302e:	f000 f825 	bl	800307c <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	2b00      	cmp	r3, #0
 8003036:	da06      	bge.n	8003046 <BSP_LCD_DrawCircle+0x1aa>
    { 
      decision += (current_x << 2) + 6;
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	009a      	lsls	r2, r3, #2
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	4413      	add	r3, r2
 8003040:	3306      	adds	r3, #6
 8003042:	617b      	str	r3, [r7, #20]
 8003044:	e00a      	b.n	800305c <BSP_LCD_DrawCircle+0x1c0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	1ad3      	subs	r3, r2, r3
 800304c:	009a      	lsls	r2, r3, #2
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	4413      	add	r3, r2
 8003052:	330a      	adds	r3, #10
 8003054:	617b      	str	r3, [r7, #20]
      current_y--;
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	3b01      	subs	r3, #1
 800305a:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 800305c:	693b      	ldr	r3, [r7, #16]
 800305e:	3301      	adds	r3, #1
 8003060:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003062:	693a      	ldr	r2, [r7, #16]
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	429a      	cmp	r2, r3
 8003068:	f67f af2b 	bls.w	8002ec2 <BSP_LCD_DrawCircle+0x26>
  } 
}
 800306c:	bf00      	nop
 800306e:	371c      	adds	r7, #28
 8003070:	46bd      	mov	sp, r7
 8003072:	bd90      	pop	{r4, r7, pc}
 8003074:	200003cc 	.word	0x200003cc
 8003078:	200003d0 	.word	0x200003d0

0800307c <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 800307c:	b5b0      	push	{r4, r5, r7, lr}
 800307e:	b082      	sub	sp, #8
 8003080:	af00      	add	r7, sp, #0
 8003082:	4603      	mov	r3, r0
 8003084:	603a      	str	r2, [r7, #0]
 8003086:	80fb      	strh	r3, [r7, #6]
 8003088:	460b      	mov	r3, r1
 800308a:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800308c:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <BSP_LCD_DrawPixel+0x88>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a1d      	ldr	r2, [pc, #116]	; (8003108 <BSP_LCD_DrawPixel+0x8c>)
 8003092:	2134      	movs	r1, #52	; 0x34
 8003094:	fb01 f303 	mul.w	r3, r1, r3
 8003098:	4413      	add	r3, r2
 800309a:	3348      	adds	r3, #72	; 0x48
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d116      	bne.n	80030d0 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 80030a2:	4b18      	ldr	r3, [pc, #96]	; (8003104 <BSP_LCD_DrawPixel+0x88>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a18      	ldr	r2, [pc, #96]	; (8003108 <BSP_LCD_DrawPixel+0x8c>)
 80030a8:	2134      	movs	r1, #52	; 0x34
 80030aa:	fb01 f303 	mul.w	r3, r1, r3
 80030ae:	4413      	add	r3, r2
 80030b0:	335c      	adds	r3, #92	; 0x5c
 80030b2:	681c      	ldr	r4, [r3, #0]
 80030b4:	88bd      	ldrh	r5, [r7, #4]
 80030b6:	f7ff fb85 	bl	80027c4 <BSP_LCD_GetXSize>
 80030ba:	4603      	mov	r3, r0
 80030bc:	fb03 f205 	mul.w	r2, r3, r5
 80030c0:	88fb      	ldrh	r3, [r7, #6]
 80030c2:	4413      	add	r3, r2
 80030c4:	005b      	lsls	r3, r3, #1
 80030c6:	4423      	add	r3, r4
 80030c8:	683a      	ldr	r2, [r7, #0]
 80030ca:	b292      	uxth	r2, r2
 80030cc:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 80030ce:	e015      	b.n	80030fc <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80030d0:	4b0c      	ldr	r3, [pc, #48]	; (8003104 <BSP_LCD_DrawPixel+0x88>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0c      	ldr	r2, [pc, #48]	; (8003108 <BSP_LCD_DrawPixel+0x8c>)
 80030d6:	2134      	movs	r1, #52	; 0x34
 80030d8:	fb01 f303 	mul.w	r3, r1, r3
 80030dc:	4413      	add	r3, r2
 80030de:	335c      	adds	r3, #92	; 0x5c
 80030e0:	681c      	ldr	r4, [r3, #0]
 80030e2:	88bd      	ldrh	r5, [r7, #4]
 80030e4:	f7ff fb6e 	bl	80027c4 <BSP_LCD_GetXSize>
 80030e8:	4603      	mov	r3, r0
 80030ea:	fb03 f205 	mul.w	r2, r3, r5
 80030ee:	88fb      	ldrh	r3, [r7, #6]
 80030f0:	4413      	add	r3, r2
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	4423      	add	r3, r4
 80030f6:	461a      	mov	r2, r3
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	6013      	str	r3, [r2, #0]
}
 80030fc:	bf00      	nop
 80030fe:	3708      	adds	r7, #8
 8003100:	46bd      	mov	sp, r7
 8003102:	bdb0      	pop	{r4, r5, r7, pc}
 8003104:	200003cc 	.word	0x200003cc
 8003108:	20008c24 	.word	0x20008c24

0800310c <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 800310c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003110:	b086      	sub	sp, #24
 8003112:	af02      	add	r7, sp, #8
 8003114:	4604      	mov	r4, r0
 8003116:	4608      	mov	r0, r1
 8003118:	4611      	mov	r1, r2
 800311a:	461a      	mov	r2, r3
 800311c:	4623      	mov	r3, r4
 800311e:	80fb      	strh	r3, [r7, #6]
 8003120:	4603      	mov	r3, r0
 8003122:	80bb      	strh	r3, [r7, #4]
 8003124:	460b      	mov	r3, r1
 8003126:	807b      	strh	r3, [r7, #2]
 8003128:	4613      	mov	r3, r2
 800312a:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003130:	4b30      	ldr	r3, [pc, #192]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	4930      	ldr	r1, [pc, #192]	; (80031f8 <BSP_LCD_FillRect+0xec>)
 8003136:	4613      	mov	r3, r2
 8003138:	005b      	lsls	r3, r3, #1
 800313a:	4413      	add	r3, r2
 800313c:	009b      	lsls	r3, r3, #2
 800313e:	440b      	add	r3, r1
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4618      	mov	r0, r3
 8003144:	f7ff fbd6 	bl	80028f4 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a2b      	ldr	r2, [pc, #172]	; (80031fc <BSP_LCD_FillRect+0xf0>)
 800314e:	2134      	movs	r1, #52	; 0x34
 8003150:	fb01 f303 	mul.w	r3, r1, r3
 8003154:	4413      	add	r3, r2
 8003156:	3348      	adds	r3, #72	; 0x48
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b02      	cmp	r3, #2
 800315c:	d114      	bne.n	8003188 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800315e:	4b25      	ldr	r3, [pc, #148]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	4a26      	ldr	r2, [pc, #152]	; (80031fc <BSP_LCD_FillRect+0xf0>)
 8003164:	2134      	movs	r1, #52	; 0x34
 8003166:	fb01 f303 	mul.w	r3, r1, r3
 800316a:	4413      	add	r3, r2
 800316c:	335c      	adds	r3, #92	; 0x5c
 800316e:	681c      	ldr	r4, [r3, #0]
 8003170:	f7ff fb28 	bl	80027c4 <BSP_LCD_GetXSize>
 8003174:	4602      	mov	r2, r0
 8003176:	88bb      	ldrh	r3, [r7, #4]
 8003178:	fb03 f202 	mul.w	r2, r3, r2
 800317c:	88fb      	ldrh	r3, [r7, #6]
 800317e:	4413      	add	r3, r2
 8003180:	005b      	lsls	r3, r3, #1
 8003182:	4423      	add	r3, r4
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	e013      	b.n	80031b0 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8003188:	4b1a      	ldr	r3, [pc, #104]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a1b      	ldr	r2, [pc, #108]	; (80031fc <BSP_LCD_FillRect+0xf0>)
 800318e:	2134      	movs	r1, #52	; 0x34
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	335c      	adds	r3, #92	; 0x5c
 8003198:	681c      	ldr	r4, [r3, #0]
 800319a:	f7ff fb13 	bl	80027c4 <BSP_LCD_GetXSize>
 800319e:	4602      	mov	r2, r0
 80031a0:	88bb      	ldrh	r3, [r7, #4]
 80031a2:	fb03 f202 	mul.w	r2, r3, r2
 80031a6:	88fb      	ldrh	r3, [r7, #6]
 80031a8:	4413      	add	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4423      	add	r3, r4
 80031ae:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 80031b0:	4b10      	ldr	r3, [pc, #64]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 80031b2:	681c      	ldr	r4, [r3, #0]
 80031b4:	68fd      	ldr	r5, [r7, #12]
 80031b6:	887e      	ldrh	r6, [r7, #2]
 80031b8:	f8b7 8000 	ldrh.w	r8, [r7]
 80031bc:	f7ff fb02 	bl	80027c4 <BSP_LCD_GetXSize>
 80031c0:	4602      	mov	r2, r0
 80031c2:	887b      	ldrh	r3, [r7, #2]
 80031c4:	1ad1      	subs	r1, r2, r3
 80031c6:	4b0b      	ldr	r3, [pc, #44]	; (80031f4 <BSP_LCD_FillRect+0xe8>)
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	480b      	ldr	r0, [pc, #44]	; (80031f8 <BSP_LCD_FillRect+0xec>)
 80031cc:	4613      	mov	r3, r2
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	4413      	add	r3, r2
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	4403      	add	r3, r0
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	9301      	str	r3, [sp, #4]
 80031da:	9100      	str	r1, [sp, #0]
 80031dc:	4643      	mov	r3, r8
 80031de:	4632      	mov	r2, r6
 80031e0:	4629      	mov	r1, r5
 80031e2:	4620      	mov	r0, r4
 80031e4:	f000 fc1c 	bl	8003a20 <LL_FillBuffer>
}
 80031e8:	bf00      	nop
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80031f2:	bf00      	nop
 80031f4:	200003cc 	.word	0x200003cc
 80031f8:	200003d0 	.word	0x200003d0
 80031fc:	20008c24 	.word	0x20008c24

08003200 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
 800320a:	460b      	mov	r3, r1
 800320c:	80bb      	strh	r3, [r7, #4]
 800320e:	4613      	mov	r3, r2
 8003210:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8003212:	887b      	ldrh	r3, [r7, #2]
 8003214:	005b      	lsls	r3, r3, #1
 8003216:	f1c3 0303 	rsb	r3, r3, #3
 800321a:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 800321c:	2300      	movs	r3, #0
 800321e:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003220:	887b      	ldrh	r3, [r7, #2]
 8003222:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003224:	4b44      	ldr	r3, [pc, #272]	; (8003338 <BSP_LCD_FillCircle+0x138>)
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	4944      	ldr	r1, [pc, #272]	; (800333c <BSP_LCD_FillCircle+0x13c>)
 800322a:	4613      	mov	r3, r2
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7ff fb5c 	bl	80028f4 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 800323c:	e061      	b.n	8003302 <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d021      	beq.n	8003288 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	b29b      	uxth	r3, r3
 8003248:	88fa      	ldrh	r2, [r7, #6]
 800324a:	1ad3      	subs	r3, r2, r3
 800324c:	b298      	uxth	r0, r3
 800324e:	693b      	ldr	r3, [r7, #16]
 8003250:	b29a      	uxth	r2, r3
 8003252:	88bb      	ldrh	r3, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	b299      	uxth	r1, r3
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	b29b      	uxth	r3, r3
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	b29b      	uxth	r3, r3
 8003260:	461a      	mov	r2, r3
 8003262:	f7ff fcf1 	bl	8002c48 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	b29b      	uxth	r3, r3
 800326a:	88fa      	ldrh	r2, [r7, #6]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	b298      	uxth	r0, r3
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	b29b      	uxth	r3, r3
 8003274:	88ba      	ldrh	r2, [r7, #4]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	b299      	uxth	r1, r3
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	b29b      	uxth	r3, r3
 800327e:	005b      	lsls	r3, r3, #1
 8003280:	b29b      	uxth	r3, r3
 8003282:	461a      	mov	r2, r3
 8003284:	f7ff fce0 	bl	8002c48 <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 8003288:	693b      	ldr	r3, [r7, #16]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d021      	beq.n	80032d2 <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	b29b      	uxth	r3, r3
 8003292:	88fa      	ldrh	r2, [r7, #6]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	b298      	uxth	r0, r3
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	b29b      	uxth	r3, r3
 800329c:	88ba      	ldrh	r2, [r7, #4]
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b299      	uxth	r1, r3
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	b29b      	uxth	r3, r3
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	b29b      	uxth	r3, r3
 80032aa:	461a      	mov	r2, r3
 80032ac:	f7ff fccc 	bl	8002c48 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	b29b      	uxth	r3, r3
 80032b4:	88fa      	ldrh	r2, [r7, #6]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	b298      	uxth	r0, r3
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	b29a      	uxth	r2, r3
 80032be:	88bb      	ldrh	r3, [r7, #4]
 80032c0:	4413      	add	r3, r2
 80032c2:	b299      	uxth	r1, r3
 80032c4:	693b      	ldr	r3, [r7, #16]
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	005b      	lsls	r3, r3, #1
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	461a      	mov	r2, r3
 80032ce:	f7ff fcbb 	bl	8002c48 <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	da06      	bge.n	80032e6 <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 80032d8:	693b      	ldr	r3, [r7, #16]
 80032da:	009a      	lsls	r2, r3, #2
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	4413      	add	r3, r2
 80032e0:	3306      	adds	r3, #6
 80032e2:	617b      	str	r3, [r7, #20]
 80032e4:	e00a      	b.n	80032fc <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	1ad3      	subs	r3, r2, r3
 80032ec:	009a      	lsls	r2, r3, #2
 80032ee:	697b      	ldr	r3, [r7, #20]
 80032f0:	4413      	add	r3, r2
 80032f2:	330a      	adds	r3, #10
 80032f4:	617b      	str	r3, [r7, #20]
      current_y--;
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3b01      	subs	r3, #1
 80032fa:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 80032fc:	693b      	ldr	r3, [r7, #16]
 80032fe:	3301      	adds	r3, #1
 8003300:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8003302:	693a      	ldr	r2, [r7, #16]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	429a      	cmp	r2, r3
 8003308:	d999      	bls.n	800323e <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800330a:	4b0b      	ldr	r3, [pc, #44]	; (8003338 <BSP_LCD_FillCircle+0x138>)
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	490b      	ldr	r1, [pc, #44]	; (800333c <BSP_LCD_FillCircle+0x13c>)
 8003310:	4613      	mov	r3, r2
 8003312:	005b      	lsls	r3, r3, #1
 8003314:	4413      	add	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4618      	mov	r0, r3
 800331e:	f7ff fae9 	bl	80028f4 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8003322:	887a      	ldrh	r2, [r7, #2]
 8003324:	88b9      	ldrh	r1, [r7, #4]
 8003326:	88fb      	ldrh	r3, [r7, #6]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fdb7 	bl	8002e9c <BSP_LCD_DrawCircle>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	200003cc 	.word	0x200003cc
 800333c:	200003d0 	.word	0x200003d0

08003340 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003340:	b5b0      	push	{r4, r5, r7, lr}
 8003342:	b08c      	sub	sp, #48	; 0x30
 8003344:	af02      	add	r7, sp, #8
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	460b      	mov	r3, r1
 800334a:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 800334c:	2300      	movs	r3, #0
 800334e:	833b      	strh	r3, [r7, #24]
 8003350:	2300      	movs	r3, #0
 8003352:	82fb      	strh	r3, [r7, #22]
 8003354:	2300      	movs	r3, #0
 8003356:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003358:	2300      	movs	r3, #0
 800335a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800335c:	2300      	movs	r3, #0
 800335e:	82bb      	strh	r3, [r7, #20]
 8003360:	2300      	movs	r3, #0
 8003362:	827b      	strh	r3, [r7, #18]
 8003364:	2300      	movs	r3, #0
 8003366:	823b      	strh	r3, [r7, #16]
 8003368:	2300      	movs	r3, #0
 800336a:	81fb      	strh	r3, [r7, #14]
 800336c:	2300      	movs	r3, #0
 800336e:	81bb      	strh	r3, [r7, #12]
 8003370:	2300      	movs	r3, #0
 8003372:	817b      	strh	r3, [r7, #10]
 8003374:	2300      	movs	r3, #0
 8003376:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 8003378:	2300      	movs	r3, #0
 800337a:	843b      	strh	r3, [r7, #32]
 800337c:	2300      	movs	r3, #0
 800337e:	83fb      	strh	r3, [r7, #30]
 8003380:	2300      	movs	r3, #0
 8003382:	83bb      	strh	r3, [r7, #28]
 8003384:	2300      	movs	r3, #0
 8003386:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800338e:	83fb      	strh	r3, [r7, #30]
 8003390:	8bfb      	ldrh	r3, [r7, #30]
 8003392:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800339a:	837b      	strh	r3, [r7, #26]
 800339c:	8b7b      	ldrh	r3, [r7, #26]
 800339e:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80033a0:	2301      	movs	r3, #1
 80033a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80033a4:	e02f      	b.n	8003406 <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80033a6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80033aa:	009b      	lsls	r3, r3, #2
 80033ac:	687a      	ldr	r2, [r7, #4]
 80033ae:	4413      	add	r3, r2
 80033b0:	881b      	ldrh	r3, [r3, #0]
 80033b2:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80033b4:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033b8:	8c3b      	ldrh	r3, [r7, #32]
 80033ba:	429a      	cmp	r2, r3
 80033bc:	da01      	bge.n	80033c2 <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80033be:	89bb      	ldrh	r3, [r7, #12]
 80033c0:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80033c2:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80033c6:	8bfb      	ldrh	r3, [r7, #30]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	dd01      	ble.n	80033d0 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 80033cc:	89bb      	ldrh	r3, [r7, #12]
 80033ce:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 80033d0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80033d4:	009b      	lsls	r3, r3, #2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	4413      	add	r3, r2
 80033da:	885b      	ldrh	r3, [r3, #2]
 80033dc:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 80033de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033e2:	8bbb      	ldrh	r3, [r7, #28]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	da01      	bge.n	80033ec <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 80033e8:	897b      	ldrh	r3, [r7, #10]
 80033ea:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 80033ec:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80033f0:	8b7b      	ldrh	r3, [r7, #26]
 80033f2:	429a      	cmp	r2, r3
 80033f4:	dd01      	ble.n	80033fa <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 80033f6:	897b      	ldrh	r3, [r7, #10]
 80033f8:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 80033fa:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3301      	adds	r3, #1
 8003402:	b29b      	uxth	r3, r3
 8003404:	847b      	strh	r3, [r7, #34]	; 0x22
 8003406:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 800340a:	887b      	ldrh	r3, [r7, #2]
 800340c:	429a      	cmp	r2, r3
 800340e:	dbca      	blt.n	80033a6 <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003410:	887b      	ldrh	r3, [r7, #2]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d974      	bls.n	8003500 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 8003416:	8c3a      	ldrh	r2, [r7, #32]
 8003418:	8bfb      	ldrh	r3, [r7, #30]
 800341a:	4413      	add	r3, r2
 800341c:	2b00      	cmp	r3, #0
 800341e:	da00      	bge.n	8003422 <BSP_LCD_FillPolygon+0xe2>
 8003420:	3301      	adds	r3, #1
 8003422:	105b      	asrs	r3, r3, #1
 8003424:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 8003426:	8b7a      	ldrh	r2, [r7, #26]
 8003428:	8bbb      	ldrh	r3, [r7, #28]
 800342a:	4413      	add	r3, r2
 800342c:	2b00      	cmp	r3, #0
 800342e:	da00      	bge.n	8003432 <BSP_LCD_FillPolygon+0xf2>
 8003430:	3301      	adds	r3, #1
 8003432:	105b      	asrs	r3, r3, #1
 8003434:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	881b      	ldrh	r3, [r3, #0]
 800343a:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	885b      	ldrh	r3, [r3, #2]
 8003440:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 8003442:	e032      	b.n	80034aa <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	881b      	ldrh	r3, [r3, #0]
 8003448:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	885b      	ldrh	r3, [r3, #2]
 800344e:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	3304      	adds	r3, #4
 8003454:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	881b      	ldrh	r3, [r3, #0]
 800345a:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	885b      	ldrh	r3, [r3, #2]
 8003460:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 8003462:	8b38      	ldrh	r0, [r7, #24]
 8003464:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003466:	8abc      	ldrh	r4, [r7, #20]
 8003468:	8afd      	ldrh	r5, [r7, #22]
 800346a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800346c:	8a7a      	ldrh	r2, [r7, #18]
 800346e:	9201      	str	r2, [sp, #4]
 8003470:	9300      	str	r3, [sp, #0]
 8003472:	462b      	mov	r3, r5
 8003474:	4622      	mov	r2, r4
 8003476:	f000 fa13 	bl	80038a0 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 800347a:	8b38      	ldrh	r0, [r7, #24]
 800347c:	8ab9      	ldrh	r1, [r7, #20]
 800347e:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 8003480:	8afd      	ldrh	r5, [r7, #22]
 8003482:	8a7b      	ldrh	r3, [r7, #18]
 8003484:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003486:	9201      	str	r2, [sp, #4]
 8003488:	9300      	str	r3, [sp, #0]
 800348a:	462b      	mov	r3, r5
 800348c:	4622      	mov	r2, r4
 800348e:	f000 fa07 	bl	80038a0 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 8003492:	8ab8      	ldrh	r0, [r7, #20]
 8003494:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003496:	8b3c      	ldrh	r4, [r7, #24]
 8003498:	8a7d      	ldrh	r5, [r7, #18]
 800349a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800349c:	8afa      	ldrh	r2, [r7, #22]
 800349e:	9201      	str	r2, [sp, #4]
 80034a0:	9300      	str	r3, [sp, #0]
 80034a2:	462b      	mov	r3, r5
 80034a4:	4622      	mov	r2, r4
 80034a6:	f000 f9fb 	bl	80038a0 <FillTriangle>
  while(--PointCount)
 80034aa:	887b      	ldrh	r3, [r7, #2]
 80034ac:	3b01      	subs	r3, #1
 80034ae:	807b      	strh	r3, [r7, #2]
 80034b0:	887b      	ldrh	r3, [r7, #2]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1c6      	bne.n	8003444 <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80034b6:	8a38      	ldrh	r0, [r7, #16]
 80034b8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80034ba:	8abc      	ldrh	r4, [r7, #20]
 80034bc:	89fd      	ldrh	r5, [r7, #14]
 80034be:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034c0:	8a7a      	ldrh	r2, [r7, #18]
 80034c2:	9201      	str	r2, [sp, #4]
 80034c4:	9300      	str	r3, [sp, #0]
 80034c6:	462b      	mov	r3, r5
 80034c8:	4622      	mov	r2, r4
 80034ca:	f000 f9e9 	bl	80038a0 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 80034ce:	8a38      	ldrh	r0, [r7, #16]
 80034d0:	8ab9      	ldrh	r1, [r7, #20]
 80034d2:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80034d4:	89fd      	ldrh	r5, [r7, #14]
 80034d6:	8a7b      	ldrh	r3, [r7, #18]
 80034d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80034da:	9201      	str	r2, [sp, #4]
 80034dc:	9300      	str	r3, [sp, #0]
 80034de:	462b      	mov	r3, r5
 80034e0:	4622      	mov	r2, r4
 80034e2:	f000 f9dd 	bl	80038a0 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 80034e6:	8ab8      	ldrh	r0, [r7, #20]
 80034e8:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80034ea:	8a3c      	ldrh	r4, [r7, #16]
 80034ec:	8a7d      	ldrh	r5, [r7, #18]
 80034ee:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80034f0:	89fa      	ldrh	r2, [r7, #14]
 80034f2:	9201      	str	r2, [sp, #4]
 80034f4:	9300      	str	r3, [sp, #0]
 80034f6:	462b      	mov	r3, r5
 80034f8:	4622      	mov	r2, r4
 80034fa:	f000 f9d1 	bl	80038a0 <FillTriangle>
 80034fe:	e000      	b.n	8003502 <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003500:	bf00      	nop
}
 8003502:	3728      	adds	r7, #40	; 0x28
 8003504:	46bd      	mov	sp, r7
 8003506:	bdb0      	pop	{r4, r5, r7, pc}

08003508 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 800350c:	4b0a      	ldr	r3, [pc, #40]	; (8003538 <BSP_LCD_DisplayOn+0x30>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	699a      	ldr	r2, [r3, #24]
 8003512:	4b09      	ldr	r3, [pc, #36]	; (8003538 <BSP_LCD_DisplayOn+0x30>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 800351c:	2201      	movs	r2, #1
 800351e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003522:	4806      	ldr	r0, [pc, #24]	; (800353c <BSP_LCD_DisplayOn+0x34>)
 8003524:	f002 ffe6 	bl	80064f4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003528:	2201      	movs	r2, #1
 800352a:	2108      	movs	r1, #8
 800352c:	4804      	ldr	r0, [pc, #16]	; (8003540 <BSP_LCD_DisplayOn+0x38>)
 800352e:	f002 ffe1 	bl	80064f4 <HAL_GPIO_WritePin>
}
 8003532:	bf00      	nop
 8003534:	bd80      	pop	{r7, pc}
 8003536:	bf00      	nop
 8003538:	20008c24 	.word	0x20008c24
 800353c:	40022000 	.word	0x40022000
 8003540:	40022800 	.word	0x40022800

08003544 <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b090      	sub	sp, #64	; 0x40
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
 800354c:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 800354e:	4b64      	ldr	r3, [pc, #400]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003552:	4a63      	ldr	r2, [pc, #396]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003554:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003558:	6453      	str	r3, [r2, #68]	; 0x44
 800355a:	4b61      	ldr	r3, [pc, #388]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003562:	62bb      	str	r3, [r7, #40]	; 0x28
 8003564:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 8003566:	4b5e      	ldr	r3, [pc, #376]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800356a:	4a5d      	ldr	r2, [pc, #372]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 800356c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003570:	6313      	str	r3, [r2, #48]	; 0x30
 8003572:	4b5b      	ldr	r3, [pc, #364]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003576:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800357a:	627b      	str	r3, [r7, #36]	; 0x24
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800357e:	4b58      	ldr	r3, [pc, #352]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003582:	4a57      	ldr	r2, [pc, #348]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003584:	f043 0310 	orr.w	r3, r3, #16
 8003588:	6313      	str	r3, [r2, #48]	; 0x30
 800358a:	4b55      	ldr	r3, [pc, #340]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 800358c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800358e:	f003 0310 	and.w	r3, r3, #16
 8003592:	623b      	str	r3, [r7, #32]
 8003594:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003596:	4b52      	ldr	r3, [pc, #328]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359a:	4a51      	ldr	r2, [pc, #324]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 800359c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80035a0:	6313      	str	r3, [r2, #48]	; 0x30
 80035a2:	4b4f      	ldr	r3, [pc, #316]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035aa:	61fb      	str	r3, [r7, #28]
 80035ac:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80035ae:	4b4c      	ldr	r3, [pc, #304]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b2:	4a4b      	ldr	r2, [pc, #300]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035b8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ba:	4b49      	ldr	r3, [pc, #292]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c2:	61bb      	str	r3, [r7, #24]
 80035c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80035c6:	4b46      	ldr	r3, [pc, #280]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a45      	ldr	r2, [pc, #276]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b43      	ldr	r3, [pc, #268]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035da:	617b      	str	r3, [r7, #20]
 80035dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80035de:	4b40      	ldr	r3, [pc, #256]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035e2:	4a3f      	ldr	r2, [pc, #252]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035e4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035e8:	6313      	str	r3, [r2, #48]	; 0x30
 80035ea:	4b3d      	ldr	r3, [pc, #244]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 80035f6:	4b3a      	ldr	r3, [pc, #232]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035fa:	4a39      	ldr	r2, [pc, #228]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 80035fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003600:	6313      	str	r3, [r2, #48]	; 0x30
 8003602:	4b37      	ldr	r3, [pc, #220]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003606:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360a:	60fb      	str	r3, [r7, #12]
 800360c:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800360e:	4b34      	ldr	r3, [pc, #208]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a33      	ldr	r2, [pc, #204]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 8003614:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b31      	ldr	r3, [pc, #196]	; (80036e0 <BSP_LCD_MspInit+0x19c>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003622:	60bb      	str	r3, [r7, #8]
 8003624:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 8003626:	2310      	movs	r3, #16
 8003628:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800362a:	2302      	movs	r3, #2
 800362c:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800362e:	2300      	movs	r3, #0
 8003630:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003632:	2302      	movs	r3, #2
 8003634:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 8003636:	230e      	movs	r3, #14
 8003638:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800363a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800363e:	4619      	mov	r1, r3
 8003640:	4828      	ldr	r0, [pc, #160]	; (80036e4 <BSP_LCD_MspInit+0x1a0>)
 8003642:	f002 fc8b 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 8003646:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800364a:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800364c:	2302      	movs	r3, #2
 800364e:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003650:	2309      	movs	r3, #9
 8003652:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003654:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003658:	4619      	mov	r1, r3
 800365a:	4823      	ldr	r0, [pc, #140]	; (80036e8 <BSP_LCD_MspInit+0x1a4>)
 800365c:	f002 fc7e 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003660:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 8003664:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003666:	2302      	movs	r3, #2
 8003668:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800366a:	230e      	movs	r3, #14
 800366c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800366e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003672:	4619      	mov	r1, r3
 8003674:	481d      	ldr	r0, [pc, #116]	; (80036ec <BSP_LCD_MspInit+0x1a8>)
 8003676:	f002 fc71 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 800367a:	f64e 73ff 	movw	r3, #61439	; 0xefff
 800367e:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003680:	2302      	movs	r3, #2
 8003682:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 8003684:	230e      	movs	r3, #14
 8003686:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 8003688:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800368c:	4619      	mov	r1, r3
 800368e:	4818      	ldr	r0, [pc, #96]	; (80036f0 <BSP_LCD_MspInit+0x1ac>)
 8003690:	f002 fc64 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 8003694:	23f7      	movs	r3, #247	; 0xf7
 8003696:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003698:	2302      	movs	r3, #2
 800369a:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 800369c:	230e      	movs	r3, #14
 800369e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80036a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036a4:	4619      	mov	r1, r3
 80036a6:	4813      	ldr	r0, [pc, #76]	; (80036f4 <BSP_LCD_MspInit+0x1b0>)
 80036a8:	f002 fc58 	bl	8005f5c <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80036ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036b2:	2301      	movs	r3, #1
 80036b4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80036b6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ba:	4619      	mov	r1, r3
 80036bc:	480b      	ldr	r0, [pc, #44]	; (80036ec <BSP_LCD_MspInit+0x1a8>)
 80036be:	f002 fc4d 	bl	8005f5c <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80036c2:	2308      	movs	r3, #8
 80036c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80036c6:	2301      	movs	r3, #1
 80036c8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 80036ca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80036ce:	4619      	mov	r1, r3
 80036d0:	4808      	ldr	r0, [pc, #32]	; (80036f4 <BSP_LCD_MspInit+0x1b0>)
 80036d2:	f002 fc43 	bl	8005f5c <HAL_GPIO_Init>
}
 80036d6:	bf00      	nop
 80036d8:	3740      	adds	r7, #64	; 0x40
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40021000 	.word	0x40021000
 80036e8:	40021800 	.word	0x40021800
 80036ec:	40022000 	.word	0x40022000
 80036f0:	40022400 	.word	0x40022400
 80036f4:	40022800 	.word	0x40022800

080036f8 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8003702:	4b0a      	ldr	r3, [pc, #40]	; (800372c <BSP_LCD_ClockConfig+0x34>)
 8003704:	2208      	movs	r2, #8
 8003706:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003708:	4b08      	ldr	r3, [pc, #32]	; (800372c <BSP_LCD_ClockConfig+0x34>)
 800370a:	22c0      	movs	r2, #192	; 0xc0
 800370c:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 800370e:	4b07      	ldr	r3, [pc, #28]	; (800372c <BSP_LCD_ClockConfig+0x34>)
 8003710:	2205      	movs	r2, #5
 8003712:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 8003714:	4b05      	ldr	r3, [pc, #20]	; (800372c <BSP_LCD_ClockConfig+0x34>)
 8003716:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 800371c:	4803      	ldr	r0, [pc, #12]	; (800372c <BSP_LCD_ClockConfig+0x34>)
 800371e:	f004 fd33 	bl	8008188 <HAL_RCCEx_PeriphCLKConfig>
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	200003e8 	.word	0x200003e8

08003730 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b088      	sub	sp, #32
 8003734:	af00      	add	r7, sp, #0
 8003736:	4603      	mov	r3, r0
 8003738:	603a      	str	r2, [r7, #0]
 800373a:	80fb      	strh	r3, [r7, #6]
 800373c:	460b      	mov	r3, r1
 800373e:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003740:	2300      	movs	r3, #0
 8003742:	61fb      	str	r3, [r7, #28]
 8003744:	2300      	movs	r3, #0
 8003746:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003748:	4b53      	ldr	r3, [pc, #332]	; (8003898 <DrawChar+0x168>)
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	4953      	ldr	r1, [pc, #332]	; (800389c <DrawChar+0x16c>)
 800374e:	4613      	mov	r3, r2
 8003750:	005b      	lsls	r3, r3, #1
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	440b      	add	r3, r1
 8003758:	3308      	adds	r3, #8
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	88db      	ldrh	r3, [r3, #6]
 800375e:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003760:	4b4d      	ldr	r3, [pc, #308]	; (8003898 <DrawChar+0x168>)
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	494d      	ldr	r1, [pc, #308]	; (800389c <DrawChar+0x16c>)
 8003766:	4613      	mov	r3, r2
 8003768:	005b      	lsls	r3, r3, #1
 800376a:	4413      	add	r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3308      	adds	r3, #8
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	889b      	ldrh	r3, [r3, #4]
 8003776:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 8003778:	8a3b      	ldrh	r3, [r7, #16]
 800377a:	3307      	adds	r3, #7
 800377c:	2b00      	cmp	r3, #0
 800377e:	da00      	bge.n	8003782 <DrawChar+0x52>
 8003780:	3307      	adds	r3, #7
 8003782:	10db      	asrs	r3, r3, #3
 8003784:	b2db      	uxtb	r3, r3
 8003786:	00db      	lsls	r3, r3, #3
 8003788:	b2da      	uxtb	r2, r3
 800378a:	8a3b      	ldrh	r3, [r7, #16]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	1ad3      	subs	r3, r2, r3
 8003790:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 8003792:	2300      	movs	r3, #0
 8003794:	61fb      	str	r3, [r7, #28]
 8003796:	e076      	b.n	8003886 <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 8003798:	8a3b      	ldrh	r3, [r7, #16]
 800379a:	3307      	adds	r3, #7
 800379c:	2b00      	cmp	r3, #0
 800379e:	da00      	bge.n	80037a2 <DrawChar+0x72>
 80037a0:	3307      	adds	r3, #7
 80037a2:	10db      	asrs	r3, r3, #3
 80037a4:	461a      	mov	r2, r3
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	fb03 f302 	mul.w	r3, r3, r2
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	4413      	add	r3, r2
 80037b0:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80037b2:	8a3b      	ldrh	r3, [r7, #16]
 80037b4:	3307      	adds	r3, #7
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	da00      	bge.n	80037bc <DrawChar+0x8c>
 80037ba:	3307      	adds	r3, #7
 80037bc:	10db      	asrs	r3, r3, #3
 80037be:	2b01      	cmp	r3, #1
 80037c0:	d002      	beq.n	80037c8 <DrawChar+0x98>
 80037c2:	2b02      	cmp	r3, #2
 80037c4:	d004      	beq.n	80037d0 <DrawChar+0xa0>
 80037c6:	e00c      	b.n	80037e2 <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	617b      	str	r3, [r7, #20]
      break;
 80037ce:	e016      	b.n	80037fe <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	781b      	ldrb	r3, [r3, #0]
 80037d4:	021b      	lsls	r3, r3, #8
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	3201      	adds	r2, #1
 80037da:	7812      	ldrb	r2, [r2, #0]
 80037dc:	4313      	orrs	r3, r2
 80037de:	617b      	str	r3, [r7, #20]
      break;
 80037e0:	e00d      	b.n	80037fe <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	781b      	ldrb	r3, [r3, #0]
 80037e6:	041a      	lsls	r2, r3, #16
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	3301      	adds	r3, #1
 80037ec:	781b      	ldrb	r3, [r3, #0]
 80037ee:	021b      	lsls	r3, r3, #8
 80037f0:	4313      	orrs	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	3202      	adds	r2, #2
 80037f6:	7812      	ldrb	r2, [r2, #0]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	617b      	str	r3, [r7, #20]
      break;
 80037fc:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 80037fe:	2300      	movs	r3, #0
 8003800:	61bb      	str	r3, [r7, #24]
 8003802:	e036      	b.n	8003872 <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 8003804:	8a3a      	ldrh	r2, [r7, #16]
 8003806:	69bb      	ldr	r3, [r7, #24]
 8003808:	1ad2      	subs	r2, r2, r3
 800380a:	7bfb      	ldrb	r3, [r7, #15]
 800380c:	4413      	add	r3, r2
 800380e:	3b01      	subs	r3, #1
 8003810:	2201      	movs	r2, #1
 8003812:	fa02 f303 	lsl.w	r3, r2, r3
 8003816:	461a      	mov	r2, r3
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	4013      	ands	r3, r2
 800381c:	2b00      	cmp	r3, #0
 800381e:	d012      	beq.n	8003846 <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	b29a      	uxth	r2, r3
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	4413      	add	r3, r2
 8003828:	b298      	uxth	r0, r3
 800382a:	4b1b      	ldr	r3, [pc, #108]	; (8003898 <DrawChar+0x168>)
 800382c:	681a      	ldr	r2, [r3, #0]
 800382e:	491b      	ldr	r1, [pc, #108]	; (800389c <DrawChar+0x16c>)
 8003830:	4613      	mov	r3, r2
 8003832:	005b      	lsls	r3, r3, #1
 8003834:	4413      	add	r3, r2
 8003836:	009b      	lsls	r3, r3, #2
 8003838:	440b      	add	r3, r1
 800383a:	681a      	ldr	r2, [r3, #0]
 800383c:	88bb      	ldrh	r3, [r7, #4]
 800383e:	4619      	mov	r1, r3
 8003840:	f7ff fc1c 	bl	800307c <BSP_LCD_DrawPixel>
 8003844:	e012      	b.n	800386c <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8003846:	69bb      	ldr	r3, [r7, #24]
 8003848:	b29a      	uxth	r2, r3
 800384a:	88fb      	ldrh	r3, [r7, #6]
 800384c:	4413      	add	r3, r2
 800384e:	b298      	uxth	r0, r3
 8003850:	4b11      	ldr	r3, [pc, #68]	; (8003898 <DrawChar+0x168>)
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	4911      	ldr	r1, [pc, #68]	; (800389c <DrawChar+0x16c>)
 8003856:	4613      	mov	r3, r2
 8003858:	005b      	lsls	r3, r3, #1
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3304      	adds	r3, #4
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	88bb      	ldrh	r3, [r7, #4]
 8003866:	4619      	mov	r1, r3
 8003868:	f7ff fc08 	bl	800307c <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800386c:	69bb      	ldr	r3, [r7, #24]
 800386e:	3301      	adds	r3, #1
 8003870:	61bb      	str	r3, [r7, #24]
 8003872:	8a3b      	ldrh	r3, [r7, #16]
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	429a      	cmp	r2, r3
 8003878:	d3c4      	bcc.n	8003804 <DrawChar+0xd4>
      } 
    }
    Ypos++;
 800387a:	88bb      	ldrh	r3, [r7, #4]
 800387c:	3301      	adds	r3, #1
 800387e:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	3301      	adds	r3, #1
 8003884:	61fb      	str	r3, [r7, #28]
 8003886:	8a7b      	ldrh	r3, [r7, #18]
 8003888:	69fa      	ldr	r2, [r7, #28]
 800388a:	429a      	cmp	r2, r3
 800388c:	d384      	bcc.n	8003798 <DrawChar+0x68>
  }
}
 800388e:	bf00      	nop
 8003890:	3720      	adds	r7, #32
 8003892:	46bd      	mov	sp, r7
 8003894:	bd80      	pop	{r7, pc}
 8003896:	bf00      	nop
 8003898:	200003cc 	.word	0x200003cc
 800389c:	200003d0 	.word	0x200003d0

080038a0 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80038a0:	b590      	push	{r4, r7, lr}
 80038a2:	b08b      	sub	sp, #44	; 0x2c
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	4604      	mov	r4, r0
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4623      	mov	r3, r4
 80038b0:	80fb      	strh	r3, [r7, #6]
 80038b2:	4603      	mov	r3, r0
 80038b4:	80bb      	strh	r3, [r7, #4]
 80038b6:	460b      	mov	r3, r1
 80038b8:	807b      	strh	r3, [r7, #2]
 80038ba:	4613      	mov	r3, r2
 80038bc:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80038be:	2300      	movs	r3, #0
 80038c0:	823b      	strh	r3, [r7, #16]
 80038c2:	2300      	movs	r3, #0
 80038c4:	81fb      	strh	r3, [r7, #14]
 80038c6:	2300      	movs	r3, #0
 80038c8:	84fb      	strh	r3, [r7, #38]	; 0x26
 80038ca:	2300      	movs	r3, #0
 80038cc:	84bb      	strh	r3, [r7, #36]	; 0x24
 80038ce:	2300      	movs	r3, #0
 80038d0:	847b      	strh	r3, [r7, #34]	; 0x22
 80038d2:	2300      	movs	r3, #0
 80038d4:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 80038d6:	2300      	movs	r3, #0
 80038d8:	83fb      	strh	r3, [r7, #30]
 80038da:	2300      	movs	r3, #0
 80038dc:	83bb      	strh	r3, [r7, #28]
 80038de:	2300      	movs	r3, #0
 80038e0:	837b      	strh	r3, [r7, #26]
 80038e2:	2300      	movs	r3, #0
 80038e4:	833b      	strh	r3, [r7, #24]
 80038e6:	2300      	movs	r3, #0
 80038e8:	82fb      	strh	r3, [r7, #22]
 80038ea:	2300      	movs	r3, #0
 80038ec:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 80038ee:	2300      	movs	r3, #0
 80038f0:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 80038f2:	88ba      	ldrh	r2, [r7, #4]
 80038f4:	88fb      	ldrh	r3, [r7, #6]
 80038f6:	1ad3      	subs	r3, r2, r3
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	bfb8      	it	lt
 80038fc:	425b      	neglt	r3, r3
 80038fe:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003900:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003902:	883b      	ldrh	r3, [r7, #0]
 8003904:	1ad3      	subs	r3, r2, r3
 8003906:	2b00      	cmp	r3, #0
 8003908:	bfb8      	it	lt
 800390a:	425b      	neglt	r3, r3
 800390c:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 800390e:	88fb      	ldrh	r3, [r7, #6]
 8003910:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8003912:	883b      	ldrh	r3, [r7, #0]
 8003914:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8003916:	88ba      	ldrh	r2, [r7, #4]
 8003918:	88fb      	ldrh	r3, [r7, #6]
 800391a:	429a      	cmp	r2, r3
 800391c:	d304      	bcc.n	8003928 <FillTriangle+0x88>
  {
    xinc1 = 1;
 800391e:	2301      	movs	r3, #1
 8003920:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8003922:	2301      	movs	r3, #1
 8003924:	843b      	strh	r3, [r7, #32]
 8003926:	e005      	b.n	8003934 <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003928:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800392c:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 800392e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003932:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8003934:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8003936:	883b      	ldrh	r3, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d304      	bcc.n	8003946 <FillTriangle+0xa6>
  {
    yinc1 = 1;
 800393c:	2301      	movs	r3, #1
 800393e:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003940:	2301      	movs	r3, #1
 8003942:	83bb      	strh	r3, [r7, #28]
 8003944:	e005      	b.n	8003952 <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8003946:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800394a:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 800394c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003950:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8003952:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8003956:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800395a:	429a      	cmp	r2, r3
 800395c:	db11      	blt.n	8003982 <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 800395e:	2300      	movs	r3, #0
 8003960:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8003962:	2300      	movs	r3, #0
 8003964:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8003966:	8a3b      	ldrh	r3, [r7, #16]
 8003968:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 800396a:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800396e:	2b00      	cmp	r3, #0
 8003970:	da00      	bge.n	8003974 <FillTriangle+0xd4>
 8003972:	3301      	adds	r3, #1
 8003974:	105b      	asrs	r3, r3, #1
 8003976:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8003978:	89fb      	ldrh	r3, [r7, #14]
 800397a:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 800397c:	8a3b      	ldrh	r3, [r7, #16]
 800397e:	82bb      	strh	r3, [r7, #20]
 8003980:	e010      	b.n	80039a4 <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8003982:	2300      	movs	r3, #0
 8003984:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8003986:	2300      	movs	r3, #0
 8003988:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 800398a:	89fb      	ldrh	r3, [r7, #14]
 800398c:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 800398e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003992:	2b00      	cmp	r3, #0
 8003994:	da00      	bge.n	8003998 <FillTriangle+0xf8>
 8003996:	3301      	adds	r3, #1
 8003998:	105b      	asrs	r3, r3, #1
 800399a:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 800399c:	8a3b      	ldrh	r3, [r7, #16]
 800399e:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80039a0:	89fb      	ldrh	r3, [r7, #14]
 80039a2:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80039a4:	2300      	movs	r3, #0
 80039a6:	827b      	strh	r3, [r7, #18]
 80039a8:	e02f      	b.n	8003a0a <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80039aa:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80039ac:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80039ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80039b0:	887a      	ldrh	r2, [r7, #2]
 80039b2:	f7ff f9a7 	bl	8002d04 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80039b6:	8b3a      	ldrh	r2, [r7, #24]
 80039b8:	8afb      	ldrh	r3, [r7, #22]
 80039ba:	4413      	add	r3, r2
 80039bc:	b29b      	uxth	r3, r3
 80039be:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80039c0:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80039c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80039c8:	429a      	cmp	r2, r3
 80039ca:	db0e      	blt.n	80039ea <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 80039cc:	8b3a      	ldrh	r2, [r7, #24]
 80039ce:	8b7b      	ldrh	r3, [r7, #26]
 80039d0:	1ad3      	subs	r3, r2, r3
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 80039d6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80039da:	4413      	add	r3, r2
 80039dc:	b29b      	uxth	r3, r3
 80039de:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 80039e0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039e2:	8bfb      	ldrh	r3, [r7, #30]
 80039e4:	4413      	add	r3, r2
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 80039ea:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80039ec:	8c3b      	ldrh	r3, [r7, #32]
 80039ee:	4413      	add	r3, r2
 80039f0:	b29b      	uxth	r3, r3
 80039f2:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 80039f4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80039f6:	8bbb      	ldrh	r3, [r7, #28]
 80039f8:	4413      	add	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80039fe:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3301      	adds	r3, #1
 8003a06:	b29b      	uxth	r3, r3
 8003a08:	827b      	strh	r3, [r7, #18]
 8003a0a:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003a0e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003a12:	429a      	cmp	r2, r3
 8003a14:	ddc9      	ble.n	80039aa <FillTriangle+0x10a>
  } 
}
 8003a16:	bf00      	nop
 8003a18:	372c      	adds	r7, #44	; 0x2c
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd90      	pop	{r4, r7, pc}
	...

08003a20 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b086      	sub	sp, #24
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003a2e:	4b1e      	ldr	r3, [pc, #120]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a30:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8003a34:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8003a36:	4b1d      	ldr	r3, [pc, #116]	; (8003aac <LL_FillBuffer+0x8c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <LL_FillBuffer+0x90>)
 8003a3c:	2134      	movs	r1, #52	; 0x34
 8003a3e:	fb01 f303 	mul.w	r3, r1, r3
 8003a42:	4413      	add	r3, r2
 8003a44:	3348      	adds	r3, #72	; 0x48
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	2b02      	cmp	r3, #2
 8003a4a:	d103      	bne.n	8003a54 <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003a4c:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a4e:	2202      	movs	r2, #2
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	e002      	b.n	8003a5a <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003a54:	4b14      	ldr	r3, [pc, #80]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a56:	2200      	movs	r2, #0
 8003a58:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003a5a:	4a13      	ldr	r2, [pc, #76]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a5c:	69bb      	ldr	r3, [r7, #24]
 8003a5e:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003a60:	4b11      	ldr	r3, [pc, #68]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a62:	4a14      	ldr	r2, [pc, #80]	; (8003ab4 <LL_FillBuffer+0x94>)
 8003a64:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 8003a66:	4810      	ldr	r0, [pc, #64]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a68:	f001 ffec 	bl	8005a44 <HAL_DMA2D_Init>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d115      	bne.n	8003a9e <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 8003a72:	68f9      	ldr	r1, [r7, #12]
 8003a74:	480c      	ldr	r0, [pc, #48]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a76:	f002 f943 	bl	8005d00 <HAL_DMA2D_ConfigLayer>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10e      	bne.n	8003a9e <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003a80:	68ba      	ldr	r2, [r7, #8]
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	69f9      	ldr	r1, [r7, #28]
 8003a8a:	4807      	ldr	r0, [pc, #28]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a8c:	f002 f824 	bl	8005ad8 <HAL_DMA2D_Start>
 8003a90:	4603      	mov	r3, r0
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d103      	bne.n	8003a9e <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 8003a96:	210a      	movs	r1, #10
 8003a98:	4803      	ldr	r0, [pc, #12]	; (8003aa8 <LL_FillBuffer+0x88>)
 8003a9a:	f002 f848 	bl	8005b2e <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 8003a9e:	bf00      	nop
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	2000038c 	.word	0x2000038c
 8003aac:	200003cc 	.word	0x200003cc
 8003ab0:	20008c24 	.word	0x20008c24
 8003ab4:	4002b000 	.word	0x4002b000

08003ab8 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 8003abc:	4b29      	ldr	r3, [pc, #164]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003abe:	4a2a      	ldr	r2, [pc, #168]	; (8003b68 <BSP_SDRAM_Init+0xb0>)
 8003ac0:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 8003ac2:	4b2a      	ldr	r3, [pc, #168]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003ac4:	2202      	movs	r2, #2
 8003ac6:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003ac8:	4b28      	ldr	r3, [pc, #160]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003aca:	2207      	movs	r2, #7
 8003acc:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003ace:	4b27      	ldr	r3, [pc, #156]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 8003ad4:	4b25      	ldr	r3, [pc, #148]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003ad6:	2207      	movs	r2, #7
 8003ad8:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003ada:	4b24      	ldr	r3, [pc, #144]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003adc:	2202      	movs	r2, #2
 8003ade:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003ae0:	4b22      	ldr	r3, [pc, #136]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 8003ae6:	4b21      	ldr	r3, [pc, #132]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003ae8:	2202      	movs	r2, #2
 8003aea:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003aec:	4b1d      	ldr	r3, [pc, #116]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003aee:	2200      	movs	r2, #0
 8003af0:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8003af2:	4b1c      	ldr	r3, [pc, #112]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003af4:	2200      	movs	r2, #0
 8003af6:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003afa:	2204      	movs	r2, #4
 8003afc:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003afe:	4b19      	ldr	r3, [pc, #100]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b00:	2210      	movs	r2, #16
 8003b02:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8003b04:	4b17      	ldr	r3, [pc, #92]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b06:	2240      	movs	r2, #64	; 0x40
 8003b08:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003b0a:	4b16      	ldr	r3, [pc, #88]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b0c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b10:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8003b12:	4b14      	ldr	r3, [pc, #80]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b14:	2200      	movs	r2, #0
 8003b16:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003b18:	4b12      	ldr	r3, [pc, #72]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b1a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003b1e:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003b20:	4b10      	ldr	r3, [pc, #64]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b22:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003b26:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003b28:	4b0e      	ldr	r3, [pc, #56]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003b2e:	2100      	movs	r1, #0
 8003b30:	480c      	ldr	r0, [pc, #48]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b32:	f000 f87f 	bl	8003c34 <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 8003b36:	490d      	ldr	r1, [pc, #52]	; (8003b6c <BSP_SDRAM_Init+0xb4>)
 8003b38:	480a      	ldr	r0, [pc, #40]	; (8003b64 <BSP_SDRAM_Init+0xac>)
 8003b3a:	f005 fba1 	bl	8009280 <HAL_SDRAM_Init>
 8003b3e:	4603      	mov	r3, r0
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d003      	beq.n	8003b4c <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 8003b44:	4b0a      	ldr	r3, [pc, #40]	; (8003b70 <BSP_SDRAM_Init+0xb8>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	701a      	strb	r2, [r3, #0]
 8003b4a:	e002      	b.n	8003b52 <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003b4c:	4b08      	ldr	r3, [pc, #32]	; (8003b70 <BSP_SDRAM_Init+0xb8>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 8003b52:	f240 6003 	movw	r0, #1539	; 0x603
 8003b56:	f000 f80d 	bl	8003b74 <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003b5a:	4b05      	ldr	r3, [pc, #20]	; (8003b70 <BSP_SDRAM_Init+0xb8>)
 8003b5c:	781b      	ldrb	r3, [r3, #0]
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	20008ccc 	.word	0x20008ccc
 8003b68:	a0000140 	.word	0xa0000140
 8003b6c:	2000046c 	.word	0x2000046c
 8003b70:	2000004c 	.word	0x2000004c

08003b74 <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b084      	sub	sp, #16
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 8003b80:	4b2a      	ldr	r3, [pc, #168]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b82:	2201      	movs	r2, #1
 8003b84:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003b86:	4b29      	ldr	r3, [pc, #164]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b88:	2210      	movs	r2, #16
 8003b8a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003b8c:	4b27      	ldr	r3, [pc, #156]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003b92:	4b26      	ldr	r3, [pc, #152]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003b98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003b9c:	4923      	ldr	r1, [pc, #140]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003b9e:	4824      	ldr	r0, [pc, #144]	; (8003c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003ba0:	f005 fba2 	bl	80092e8 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8003ba4:	2001      	movs	r0, #1
 8003ba6:	f000 ffc3 	bl	8004b30 <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 8003baa:	4b20      	ldr	r3, [pc, #128]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bac:	2202      	movs	r2, #2
 8003bae:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bb0:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bb2:	2210      	movs	r2, #16
 8003bb4:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003bb6:	4b1d      	ldr	r3, [pc, #116]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bb8:	2201      	movs	r2, #1
 8003bba:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003bbc:	4b1b      	ldr	r3, [pc, #108]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bbe:	2200      	movs	r2, #0
 8003bc0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 8003bc2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bc6:	4919      	ldr	r1, [pc, #100]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bc8:	4819      	ldr	r0, [pc, #100]	; (8003c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bca:	f005 fb8d 	bl	80092e8 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003bce:	4b17      	ldr	r3, [pc, #92]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bd0:	2203      	movs	r2, #3
 8003bd2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bd4:	4b15      	ldr	r3, [pc, #84]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bd6:	2210      	movs	r2, #16
 8003bd8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003bda:	4b14      	ldr	r3, [pc, #80]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bdc:	2208      	movs	r2, #8
 8003bde:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003be0:	4b12      	ldr	r3, [pc, #72]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003be2:	2200      	movs	r2, #0
 8003be4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003be6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003bea:	4910      	ldr	r1, [pc, #64]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bec:	4810      	ldr	r0, [pc, #64]	; (8003c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003bee:	f005 fb7b 	bl	80092e8 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003bf2:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003bf6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003bf8:	4b0c      	ldr	r3, [pc, #48]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003bfa:	2204      	movs	r2, #4
 8003bfc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003bfe:	4b0b      	ldr	r3, [pc, #44]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c00:	2210      	movs	r2, #16
 8003c02:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003c04:	4b09      	ldr	r3, [pc, #36]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c06:	2201      	movs	r2, #1
 8003c08:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	4a07      	ldr	r2, [pc, #28]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c0e:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003c10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003c14:	4905      	ldr	r1, [pc, #20]	; (8003c2c <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003c16:	4806      	ldr	r0, [pc, #24]	; (8003c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c18:	f005 fb66 	bl	80092e8 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003c1c:	6879      	ldr	r1, [r7, #4]
 8003c1e:	4804      	ldr	r0, [pc, #16]	; (8003c30 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003c20:	f005 fb8d 	bl	800933e <HAL_SDRAM_ProgramRefreshRate>
}
 8003c24:	bf00      	nop
 8003c26:	3710      	adds	r7, #16
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	bd80      	pop	{r7, pc}
 8003c2c:	20000488 	.word	0x20000488
 8003c30:	20008ccc 	.word	0x20008ccc

08003c34 <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b090      	sub	sp, #64	; 0x40
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
 8003c3c:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003c3e:	4b70      	ldr	r3, [pc, #448]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c42:	4a6f      	ldr	r2, [pc, #444]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6393      	str	r3, [r2, #56]	; 0x38
 8003c4a:	4b6d      	ldr	r3, [pc, #436]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	62bb      	str	r3, [r7, #40]	; 0x28
 8003c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003c56:	4b6a      	ldr	r3, [pc, #424]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c5a:	4a69      	ldr	r2, [pc, #420]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c5c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003c60:	6313      	str	r3, [r2, #48]	; 0x30
 8003c62:	4b67      	ldr	r3, [pc, #412]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6a:	627b      	str	r3, [r7, #36]	; 0x24
 8003c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c6e:	4b64      	ldr	r3, [pc, #400]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c72:	4a63      	ldr	r2, [pc, #396]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c74:	f043 0304 	orr.w	r3, r3, #4
 8003c78:	6313      	str	r3, [r2, #48]	; 0x30
 8003c7a:	4b61      	ldr	r3, [pc, #388]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7e:	f003 0304 	and.w	r3, r3, #4
 8003c82:	623b      	str	r3, [r7, #32]
 8003c84:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c86:	4b5e      	ldr	r3, [pc, #376]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c8a:	4a5d      	ldr	r2, [pc, #372]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c8c:	f043 0308 	orr.w	r3, r3, #8
 8003c90:	6313      	str	r3, [r2, #48]	; 0x30
 8003c92:	4b5b      	ldr	r3, [pc, #364]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c96:	f003 0308 	and.w	r3, r3, #8
 8003c9a:	61fb      	str	r3, [r7, #28]
 8003c9c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003c9e:	4b58      	ldr	r3, [pc, #352]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ca2:	4a57      	ldr	r2, [pc, #348]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003ca4:	f043 0310 	orr.w	r3, r3, #16
 8003ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8003caa:	4b55      	ldr	r3, [pc, #340]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cae:	f003 0310 	and.w	r3, r3, #16
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003cb6:	4b52      	ldr	r3, [pc, #328]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cba:	4a51      	ldr	r2, [pc, #324]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cbc:	f043 0320 	orr.w	r3, r3, #32
 8003cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc2:	4b4f      	ldr	r3, [pc, #316]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc6:	f003 0320 	and.w	r3, r3, #32
 8003cca:	617b      	str	r3, [r7, #20]
 8003ccc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003cce:	4b4c      	ldr	r3, [pc, #304]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cd2:	4a4b      	ldr	r2, [pc, #300]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ce2:	613b      	str	r3, [r7, #16]
 8003ce4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003ce6:	4b46      	ldr	r3, [pc, #280]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cea:	4a45      	ldr	r2, [pc, #276]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8003cf2:	4b43      	ldr	r3, [pc, #268]	; (8003e00 <BSP_SDRAM_MspInit+0x1cc>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003cfa:	60fb      	str	r3, [r7, #12]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003cfe:	2302      	movs	r3, #2
 8003d00:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003d02:	2301      	movs	r3, #1
 8003d04:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003d06:	2302      	movs	r3, #2
 8003d08:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003d0a:	230c      	movs	r3, #12
 8003d0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003d0e:	2308      	movs	r3, #8
 8003d10:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003d12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d16:	4619      	mov	r1, r3
 8003d18:	483a      	ldr	r0, [pc, #232]	; (8003e04 <BSP_SDRAM_MspInit+0x1d0>)
 8003d1a:	f002 f91f 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003d1e:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003d24:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4837      	ldr	r0, [pc, #220]	; (8003e08 <BSP_SDRAM_MspInit+0x1d4>)
 8003d2c:	f002 f916 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003d30:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003d34:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003d36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d3a:	4619      	mov	r1, r3
 8003d3c:	4833      	ldr	r0, [pc, #204]	; (8003e0c <BSP_SDRAM_MspInit+0x1d8>)
 8003d3e:	f002 f90d 	bl	8005f5c <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003d42:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003d46:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003d48:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d4c:	4619      	mov	r1, r3
 8003d4e:	4830      	ldr	r0, [pc, #192]	; (8003e10 <BSP_SDRAM_MspInit+0x1dc>)
 8003d50:	f002 f904 	bl	8005f5c <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003d54:	f248 1333 	movw	r3, #33075	; 0x8133
 8003d58:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003d5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d5e:	4619      	mov	r1, r3
 8003d60:	482c      	ldr	r0, [pc, #176]	; (8003e14 <BSP_SDRAM_MspInit+0x1e0>)
 8003d62:	f002 f8fb 	bl	8005f5c <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003d66:	2328      	movs	r3, #40	; 0x28
 8003d68:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003d6a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003d6e:	4619      	mov	r1, r3
 8003d70:	4829      	ldr	r0, [pc, #164]	; (8003e18 <BSP_SDRAM_MspInit+0x1e4>)
 8003d72:	f002 f8f3 	bl	8005f5c <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003d76:	4b29      	ldr	r3, [pc, #164]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003d7c:	4b27      	ldr	r3, [pc, #156]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d7e:	2280      	movs	r2, #128	; 0x80
 8003d80:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003d82:	4b26      	ldr	r3, [pc, #152]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003d88:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003d8a:	4b24      	ldr	r3, [pc, #144]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003d90:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003d92:	4b22      	ldr	r3, [pc, #136]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d94:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003d98:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003d9a:	4b20      	ldr	r3, [pc, #128]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003d9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003da0:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003da2:	4b1e      	ldr	r3, [pc, #120]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003da8:	4b1c      	ldr	r3, [pc, #112]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003daa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003dae:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003db0:	4b1a      	ldr	r3, [pc, #104]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003db2:	2200      	movs	r2, #0
 8003db4:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003db6:	4b19      	ldr	r3, [pc, #100]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003db8:	2203      	movs	r2, #3
 8003dba:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003dbc:	4b17      	ldr	r3, [pc, #92]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003dc2:	4b16      	ldr	r3, [pc, #88]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003dc8:	4b14      	ldr	r3, [pc, #80]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003dca:	4a15      	ldr	r2, [pc, #84]	; (8003e20 <BSP_SDRAM_MspInit+0x1ec>)
 8003dcc:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	4a12      	ldr	r2, [pc, #72]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003dd2:	631a      	str	r2, [r3, #48]	; 0x30
 8003dd4:	4a11      	ldr	r2, [pc, #68]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003dda:	4810      	ldr	r0, [pc, #64]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003ddc:	f001 fd02 	bl	80057e4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003de0:	480e      	ldr	r0, [pc, #56]	; (8003e1c <BSP_SDRAM_MspInit+0x1e8>)
 8003de2:	f001 fc51 	bl	8005688 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003de6:	2200      	movs	r2, #0
 8003de8:	210f      	movs	r1, #15
 8003dea:	2038      	movs	r0, #56	; 0x38
 8003dec:	f001 fb54 	bl	8005498 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003df0:	2038      	movs	r0, #56	; 0x38
 8003df2:	f001 fb6d 	bl	80054d0 <HAL_NVIC_EnableIRQ>
}
 8003df6:	bf00      	nop
 8003df8:	3740      	adds	r7, #64	; 0x40
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	bd80      	pop	{r7, pc}
 8003dfe:	bf00      	nop
 8003e00:	40023800 	.word	0x40023800
 8003e04:	40020800 	.word	0x40020800
 8003e08:	40020c00 	.word	0x40020c00
 8003e0c:	40021000 	.word	0x40021000
 8003e10:	40021400 	.word	0x40021400
 8003e14:	40021800 	.word	0x40021800
 8003e18:	40021c00 	.word	0x40021c00
 8003e1c:	20000498 	.word	0x20000498
 8003e20:	40026410 	.word	0x40026410

08003e24 <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	4603      	mov	r3, r0
 8003e2c:	460a      	mov	r2, r1
 8003e2e:	80fb      	strh	r3, [r7, #6]
 8003e30:	4613      	mov	r3, r2
 8003e32:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003e34:	2300      	movs	r3, #0
 8003e36:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003e38:	4a14      	ldr	r2, [pc, #80]	; (8003e8c <BSP_TS_Init+0x68>)
 8003e3a:	88fb      	ldrh	r3, [r7, #6]
 8003e3c:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003e3e:	4a14      	ldr	r2, [pc, #80]	; (8003e90 <BSP_TS_Init+0x6c>)
 8003e40:	88bb      	ldrh	r3, [r7, #4]
 8003e42:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003e44:	4b13      	ldr	r3, [pc, #76]	; (8003e94 <BSP_TS_Init+0x70>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2070      	movs	r0, #112	; 0x70
 8003e4a:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003e4c:	4b11      	ldr	r3, [pc, #68]	; (8003e94 <BSP_TS_Init+0x70>)
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2070      	movs	r0, #112	; 0x70
 8003e52:	4798      	blx	r3
 8003e54:	4603      	mov	r3, r0
 8003e56:	2b51      	cmp	r3, #81	; 0x51
 8003e58:	d111      	bne.n	8003e7e <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003e5a:	4b0f      	ldr	r3, [pc, #60]	; (8003e98 <BSP_TS_Init+0x74>)
 8003e5c:	4a0d      	ldr	r2, [pc, #52]	; (8003e94 <BSP_TS_Init+0x70>)
 8003e5e:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003e60:	4b0e      	ldr	r3, [pc, #56]	; (8003e9c <BSP_TS_Init+0x78>)
 8003e62:	2270      	movs	r2, #112	; 0x70
 8003e64:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003e66:	4b0e      	ldr	r3, [pc, #56]	; (8003ea0 <BSP_TS_Init+0x7c>)
 8003e68:	2208      	movs	r2, #8
 8003e6a:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003e6c:	4b0a      	ldr	r3, [pc, #40]	; (8003e98 <BSP_TS_Init+0x74>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	4a0a      	ldr	r2, [pc, #40]	; (8003e9c <BSP_TS_Init+0x78>)
 8003e74:	7812      	ldrb	r2, [r2, #0]
 8003e76:	b292      	uxth	r2, r2
 8003e78:	4610      	mov	r0, r2
 8003e7a:	4798      	blx	r3
 8003e7c:	e001      	b.n	8003e82 <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3710      	adds	r7, #16
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	bd80      	pop	{r7, pc}
 8003e8c:	200004fc 	.word	0x200004fc
 8003e90:	200004fe 	.word	0x200004fe
 8003e94:	20000000 	.word	0x20000000
 8003e98:	200004f8 	.word	0x200004f8
 8003e9c:	20000501 	.word	0x20000501
 8003ea0:	20000500 	.word	0x20000500

08003ea4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b082      	sub	sp, #8
 8003ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003eaa:	4b11      	ldr	r3, [pc, #68]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	4a10      	ldr	r2, [pc, #64]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003eb6:	4b0e      	ldr	r3, [pc, #56]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ebe:	607b      	str	r3, [r7, #4]
 8003ec0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ec2:	4b0b      	ldr	r3, [pc, #44]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ec6:	4a0a      	ldr	r2, [pc, #40]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003ec8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ecc:	6453      	str	r3, [r2, #68]	; 0x44
 8003ece:	4b08      	ldr	r3, [pc, #32]	; (8003ef0 <HAL_MspInit+0x4c>)
 8003ed0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ed2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ed6:	603b      	str	r3, [r7, #0]
 8003ed8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003eda:	2200      	movs	r2, #0
 8003edc:	210f      	movs	r1, #15
 8003ede:	f06f 0001 	mvn.w	r0, #1
 8003ee2:	f001 fad9 	bl	8005498 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	3708      	adds	r7, #8
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40023800 	.word	0x40023800

08003ef4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b08c      	sub	sp, #48	; 0x30
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003efc:	f107 031c 	add.w	r3, r7, #28
 8003f00:	2200      	movs	r2, #0
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	605a      	str	r2, [r3, #4]
 8003f06:	609a      	str	r2, [r3, #8]
 8003f08:	60da      	str	r2, [r3, #12]
 8003f0a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	4a2a      	ldr	r2, [pc, #168]	; (8003fbc <HAL_ADC_MspInit+0xc8>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d124      	bne.n	8003f60 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f16:	4b2a      	ldr	r3, [pc, #168]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f1a:	4a29      	ldr	r2, [pc, #164]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f20:	6453      	str	r3, [r2, #68]	; 0x44
 8003f22:	4b27      	ldr	r3, [pc, #156]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f2a:	61bb      	str	r3, [r7, #24]
 8003f2c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f2e:	4b24      	ldr	r3, [pc, #144]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f32:	4a23      	ldr	r2, [pc, #140]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f34:	f043 0301 	orr.w	r3, r3, #1
 8003f38:	6313      	str	r3, [r2, #48]	; 0x30
 8003f3a:	4b21      	ldr	r3, [pc, #132]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3e:	f003 0301 	and.w	r3, r3, #1
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003f46:	2301      	movs	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f4e:	2300      	movs	r3, #0
 8003f50:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f52:	f107 031c 	add.w	r3, r7, #28
 8003f56:	4619      	mov	r1, r3
 8003f58:	481a      	ldr	r0, [pc, #104]	; (8003fc4 <HAL_ADC_MspInit+0xd0>)
 8003f5a:	f001 ffff 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003f5e:	e029      	b.n	8003fb4 <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a18      	ldr	r2, [pc, #96]	; (8003fc8 <HAL_ADC_MspInit+0xd4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d124      	bne.n	8003fb4 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003f6a:	4b15      	ldr	r3, [pc, #84]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f6e:	4a14      	ldr	r2, [pc, #80]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f74:	6453      	str	r3, [r2, #68]	; 0x44
 8003f76:	4b12      	ldr	r3, [pc, #72]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f7e:	613b      	str	r3, [r7, #16]
 8003f80:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003f82:	4b0f      	ldr	r3, [pc, #60]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a0e      	ldr	r2, [pc, #56]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f88:	f043 0320 	orr.w	r3, r3, #32
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_ADC_MspInit+0xcc>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0320 	and.w	r3, r3, #32
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
 8003f9a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003f9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003fa8:	f107 031c 	add.w	r3, r7, #28
 8003fac:	4619      	mov	r1, r3
 8003fae:	4807      	ldr	r0, [pc, #28]	; (8003fcc <HAL_ADC_MspInit+0xd8>)
 8003fb0:	f001 ffd4 	bl	8005f5c <HAL_GPIO_Init>
}
 8003fb4:	bf00      	nop
 8003fb6:	3730      	adds	r7, #48	; 0x30
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	bd80      	pop	{r7, pc}
 8003fbc:	40012000 	.word	0x40012000
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40020000 	.word	0x40020000
 8003fc8:	40012200 	.word	0x40012200
 8003fcc:	40021400 	.word	0x40021400

08003fd0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08a      	sub	sp, #40	; 0x28
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 0314 	add.w	r3, r7, #20
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a19      	ldr	r2, [pc, #100]	; (8004054 <HAL_DAC_MspInit+0x84>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d12b      	bne.n	800404a <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003ff2:	4b19      	ldr	r3, [pc, #100]	; (8004058 <HAL_DAC_MspInit+0x88>)
 8003ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff6:	4a18      	ldr	r2, [pc, #96]	; (8004058 <HAL_DAC_MspInit+0x88>)
 8003ff8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003ffc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ffe:	4b16      	ldr	r3, [pc, #88]	; (8004058 <HAL_DAC_MspInit+0x88>)
 8004000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004002:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004006:	613b      	str	r3, [r7, #16]
 8004008:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800400a:	4b13      	ldr	r3, [pc, #76]	; (8004058 <HAL_DAC_MspInit+0x88>)
 800400c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800400e:	4a12      	ldr	r2, [pc, #72]	; (8004058 <HAL_DAC_MspInit+0x88>)
 8004010:	f043 0301 	orr.w	r3, r3, #1
 8004014:	6313      	str	r3, [r2, #48]	; 0x30
 8004016:	4b10      	ldr	r3, [pc, #64]	; (8004058 <HAL_DAC_MspInit+0x88>)
 8004018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401a:	f003 0301 	and.w	r3, r3, #1
 800401e:	60fb      	str	r3, [r7, #12]
 8004020:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8004022:	2310      	movs	r3, #16
 8004024:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004026:	2303      	movs	r3, #3
 8004028:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800402a:	2300      	movs	r3, #0
 800402c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800402e:	f107 0314 	add.w	r3, r7, #20
 8004032:	4619      	mov	r1, r3
 8004034:	4809      	ldr	r0, [pc, #36]	; (800405c <HAL_DAC_MspInit+0x8c>)
 8004036:	f001 ff91 	bl	8005f5c <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800403a:	2200      	movs	r2, #0
 800403c:	2100      	movs	r1, #0
 800403e:	2036      	movs	r0, #54	; 0x36
 8004040:	f001 fa2a 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004044:	2036      	movs	r0, #54	; 0x36
 8004046:	f001 fa43 	bl	80054d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800404a:	bf00      	nop
 800404c:	3728      	adds	r7, #40	; 0x28
 800404e:	46bd      	mov	sp, r7
 8004050:	bd80      	pop	{r7, pc}
 8004052:	bf00      	nop
 8004054:	40007400 	.word	0x40007400
 8004058:	40023800 	.word	0x40023800
 800405c:	40020000 	.word	0x40020000

08004060 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a0a      	ldr	r2, [pc, #40]	; (8004098 <HAL_DMA2D_MspInit+0x38>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d10b      	bne.n	800408a <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8004072:	4b0a      	ldr	r3, [pc, #40]	; (800409c <HAL_DMA2D_MspInit+0x3c>)
 8004074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004076:	4a09      	ldr	r2, [pc, #36]	; (800409c <HAL_DMA2D_MspInit+0x3c>)
 8004078:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800407c:	6313      	str	r3, [r2, #48]	; 0x30
 800407e:	4b07      	ldr	r3, [pc, #28]	; (800409c <HAL_DMA2D_MspInit+0x3c>)
 8004080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004082:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004086:	60fb      	str	r3, [r7, #12]
 8004088:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 800408a:	bf00      	nop
 800408c:	3714      	adds	r7, #20
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	4002b000 	.word	0x4002b000
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08c      	sub	sp, #48	; 0x30
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 031c 	add.w	r3, r7, #28
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a2f      	ldr	r2, [pc, #188]	; (800417c <HAL_I2C_MspInit+0xdc>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d129      	bne.n	8004116 <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80040c2:	4b2f      	ldr	r3, [pc, #188]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 80040c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c6:	4a2e      	ldr	r2, [pc, #184]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 80040c8:	f043 0302 	orr.w	r3, r3, #2
 80040cc:	6313      	str	r3, [r2, #48]	; 0x30
 80040ce:	4b2c      	ldr	r3, [pc, #176]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 80040d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d2:	f003 0302 	and.w	r3, r3, #2
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 80040da:	f44f 7340 	mov.w	r3, #768	; 0x300
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80040e0:	2312      	movs	r3, #18
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80040e4:	2301      	movs	r3, #1
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80040e8:	2300      	movs	r3, #0
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80040ec:	2304      	movs	r3, #4
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	4619      	mov	r1, r3
 80040f6:	4823      	ldr	r0, [pc, #140]	; (8004184 <HAL_I2C_MspInit+0xe4>)
 80040f8:	f001 ff30 	bl	8005f5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80040fc:	4b20      	ldr	r3, [pc, #128]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 80040fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004100:	4a1f      	ldr	r2, [pc, #124]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 8004102:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004106:	6413      	str	r3, [r2, #64]	; 0x40
 8004108:	4b1d      	ldr	r3, [pc, #116]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004110:	617b      	str	r3, [r7, #20]
 8004112:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8004114:	e02d      	b.n	8004172 <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4a1b      	ldr	r2, [pc, #108]	; (8004188 <HAL_I2C_MspInit+0xe8>)
 800411c:	4293      	cmp	r3, r2
 800411e:	d128      	bne.n	8004172 <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004120:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	4a16      	ldr	r2, [pc, #88]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 8004126:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800412a:	6313      	str	r3, [r2, #48]	; 0x30
 800412c:	4b14      	ldr	r3, [pc, #80]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004134:	613b      	str	r3, [r7, #16]
 8004136:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8004138:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800413c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800413e:	2312      	movs	r3, #18
 8004140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004142:	2301      	movs	r3, #1
 8004144:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004146:	2303      	movs	r3, #3
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800414a:	2304      	movs	r3, #4
 800414c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 800414e:	f107 031c 	add.w	r3, r7, #28
 8004152:	4619      	mov	r1, r3
 8004154:	480d      	ldr	r0, [pc, #52]	; (800418c <HAL_I2C_MspInit+0xec>)
 8004156:	f001 ff01 	bl	8005f5c <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 800415a:	4b09      	ldr	r3, [pc, #36]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 800415c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415e:	4a08      	ldr	r2, [pc, #32]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 8004160:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004164:	6413      	str	r3, [r2, #64]	; 0x40
 8004166:	4b06      	ldr	r3, [pc, #24]	; (8004180 <HAL_I2C_MspInit+0xe0>)
 8004168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	68fb      	ldr	r3, [r7, #12]
}
 8004172:	bf00      	nop
 8004174:	3730      	adds	r7, #48	; 0x30
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	40005400 	.word	0x40005400
 8004180:	40023800 	.word	0x40023800
 8004184:	40020400 	.word	0x40020400
 8004188:	40005c00 	.word	0x40005c00
 800418c:	40021c00 	.word	0x40021c00

08004190 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b082      	sub	sp, #8
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	4a15      	ldr	r2, [pc, #84]	; (80041f4 <HAL_I2C_MspDeInit+0x64>)
 800419e:	4293      	cmp	r3, r2
 80041a0:	d110      	bne.n	80041c4 <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 80041a2:	4b15      	ldr	r3, [pc, #84]	; (80041f8 <HAL_I2C_MspDeInit+0x68>)
 80041a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a6:	4a14      	ldr	r2, [pc, #80]	; (80041f8 <HAL_I2C_MspDeInit+0x68>)
 80041a8:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80041ac:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 80041ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041b2:	4812      	ldr	r0, [pc, #72]	; (80041fc <HAL_I2C_MspDeInit+0x6c>)
 80041b4:	f002 f87c 	bl	80062b0 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 80041b8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80041bc:	480f      	ldr	r0, [pc, #60]	; (80041fc <HAL_I2C_MspDeInit+0x6c>)
 80041be:	f002 f877 	bl	80062b0 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 80041c2:	e013      	b.n	80041ec <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	4a0d      	ldr	r2, [pc, #52]	; (8004200 <HAL_I2C_MspDeInit+0x70>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d10e      	bne.n	80041ec <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 80041ce:	4b0a      	ldr	r3, [pc, #40]	; (80041f8 <HAL_I2C_MspDeInit+0x68>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	4a09      	ldr	r2, [pc, #36]	; (80041f8 <HAL_I2C_MspDeInit+0x68>)
 80041d4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80041d8:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 80041da:	2180      	movs	r1, #128	; 0x80
 80041dc:	4809      	ldr	r0, [pc, #36]	; (8004204 <HAL_I2C_MspDeInit+0x74>)
 80041de:	f002 f867 	bl	80062b0 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 80041e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80041e6:	4807      	ldr	r0, [pc, #28]	; (8004204 <HAL_I2C_MspDeInit+0x74>)
 80041e8:	f002 f862 	bl	80062b0 <HAL_GPIO_DeInit>
}
 80041ec:	bf00      	nop
 80041ee:	3708      	adds	r7, #8
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}
 80041f4:	40005400 	.word	0x40005400
 80041f8:	40023800 	.word	0x40023800
 80041fc:	40020400 	.word	0x40020400
 8004200:	40005c00 	.word	0x40005c00
 8004204:	40021c00 	.word	0x40021c00

08004208 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08e      	sub	sp, #56	; 0x38
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004214:	2200      	movs	r2, #0
 8004216:	601a      	str	r2, [r3, #0]
 8004218:	605a      	str	r2, [r3, #4]
 800421a:	609a      	str	r2, [r3, #8]
 800421c:	60da      	str	r2, [r3, #12]
 800421e:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a55      	ldr	r2, [pc, #340]	; (800437c <HAL_LTDC_MspInit+0x174>)
 8004226:	4293      	cmp	r3, r2
 8004228:	f040 80a3 	bne.w	8004372 <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800422c:	4b54      	ldr	r3, [pc, #336]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800422e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004230:	4a53      	ldr	r2, [pc, #332]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004232:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004236:	6453      	str	r3, [r2, #68]	; 0x44
 8004238:	4b51      	ldr	r3, [pc, #324]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800423a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800423c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004240:	623b      	str	r3, [r7, #32]
 8004242:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8004244:	4b4e      	ldr	r3, [pc, #312]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004248:	4a4d      	ldr	r2, [pc, #308]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800424a:	f043 0310 	orr.w	r3, r3, #16
 800424e:	6313      	str	r3, [r2, #48]	; 0x30
 8004250:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004254:	f003 0310 	and.w	r3, r3, #16
 8004258:	61fb      	str	r3, [r7, #28]
 800425a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800425c:	4b48      	ldr	r3, [pc, #288]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800425e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004260:	4a47      	ldr	r2, [pc, #284]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004262:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004266:	6313      	str	r3, [r2, #48]	; 0x30
 8004268:	4b45      	ldr	r3, [pc, #276]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800426a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800426c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004270:	61bb      	str	r3, [r7, #24]
 8004272:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 8004274:	4b42      	ldr	r3, [pc, #264]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004278:	4a41      	ldr	r2, [pc, #260]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800427a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800427e:	6313      	str	r3, [r2, #48]	; 0x30
 8004280:	4b3f      	ldr	r3, [pc, #252]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004284:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004288:	617b      	str	r3, [r7, #20]
 800428a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800428c:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800428e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004290:	4a3b      	ldr	r2, [pc, #236]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	6313      	str	r3, [r2, #48]	; 0x30
 8004298:	4b39      	ldr	r3, [pc, #228]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800429c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80042a4:	4b36      	ldr	r3, [pc, #216]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 80042a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042a8:	4a35      	ldr	r2, [pc, #212]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 80042aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042ae:	6313      	str	r3, [r2, #48]	; 0x30
 80042b0:	4b33      	ldr	r3, [pc, #204]	; (8004380 <HAL_LTDC_MspInit+0x178>)
 80042b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b8:	60fb      	str	r3, [r7, #12]
 80042ba:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80042bc:	2310      	movs	r3, #16
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042c0:	2302      	movs	r3, #2
 80042c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c4:	2300      	movs	r3, #0
 80042c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c8:	2300      	movs	r3, #0
 80042ca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042cc:	230e      	movs	r3, #14
 80042ce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 80042d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d4:	4619      	mov	r1, r3
 80042d6:	482b      	ldr	r0, [pc, #172]	; (8004384 <HAL_LTDC_MspInit+0x17c>)
 80042d8:	f001 fe40 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 80042dc:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80042e0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042e2:	2302      	movs	r3, #2
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042e6:	2300      	movs	r3, #0
 80042e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042ea:	2300      	movs	r3, #0
 80042ec:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80042ee:	230e      	movs	r3, #14
 80042f0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80042f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042f6:	4619      	mov	r1, r3
 80042f8:	4823      	ldr	r0, [pc, #140]	; (8004388 <HAL_LTDC_MspInit+0x180>)
 80042fa:	f001 fe2f 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 80042fe:	23f7      	movs	r3, #247	; 0xf7
 8004300:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004302:	2302      	movs	r3, #2
 8004304:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004306:	2300      	movs	r3, #0
 8004308:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430a:	2300      	movs	r3, #0
 800430c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800430e:	230e      	movs	r3, #14
 8004310:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8004312:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004316:	4619      	mov	r1, r3
 8004318:	481c      	ldr	r0, [pc, #112]	; (800438c <HAL_LTDC_MspInit+0x184>)
 800431a:	f001 fe1f 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 800431e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004322:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004324:	2302      	movs	r3, #2
 8004326:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004328:	2300      	movs	r3, #0
 800432a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800432c:	2300      	movs	r3, #0
 800432e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004330:	2309      	movs	r3, #9
 8004332:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 8004334:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004338:	4619      	mov	r1, r3
 800433a:	4815      	ldr	r0, [pc, #84]	; (8004390 <HAL_LTDC_MspInit+0x188>)
 800433c:	f001 fe0e 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004340:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 8004344:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004346:	2302      	movs	r3, #2
 8004348:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434a:	2300      	movs	r3, #0
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800434e:	2300      	movs	r3, #0
 8004350:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004352:	230e      	movs	r3, #14
 8004354:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004356:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435a:	4619      	mov	r1, r3
 800435c:	480d      	ldr	r0, [pc, #52]	; (8004394 <HAL_LTDC_MspInit+0x18c>)
 800435e:	f001 fdfd 	bl	8005f5c <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 8004362:	2200      	movs	r2, #0
 8004364:	2105      	movs	r1, #5
 8004366:	2058      	movs	r0, #88	; 0x58
 8004368:	f001 f896 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800436c:	2058      	movs	r0, #88	; 0x58
 800436e:	f001 f8af 	bl	80054d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 8004372:	bf00      	nop
 8004374:	3738      	adds	r7, #56	; 0x38
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}
 800437a:	bf00      	nop
 800437c:	40016800 	.word	0x40016800
 8004380:	40023800 	.word	0x40023800
 8004384:	40021000 	.word	0x40021000
 8004388:	40022400 	.word	0x40022400
 800438c:	40022800 	.word	0x40022800
 8004390:	40021800 	.word	0x40021800
 8004394:	40022000 	.word	0x40022000

08004398 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	4a07      	ldr	r2, [pc, #28]	; (80043c4 <HAL_RTC_MspInit+0x2c>)
 80043a6:	4293      	cmp	r3, r2
 80043a8:	d105      	bne.n	80043b6 <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80043aa:	4b07      	ldr	r3, [pc, #28]	; (80043c8 <HAL_RTC_MspInit+0x30>)
 80043ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043ae:	4a06      	ldr	r2, [pc, #24]	; (80043c8 <HAL_RTC_MspInit+0x30>)
 80043b0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80043b4:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80043b6:	bf00      	nop
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	40002800 	.word	0x40002800
 80043c8:	40023800 	.word	0x40023800

080043cc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b08a      	sub	sp, #40	; 0x28
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043d4:	f107 0314 	add.w	r3, r7, #20
 80043d8:	2200      	movs	r2, #0
 80043da:	601a      	str	r2, [r3, #0]
 80043dc:	605a      	str	r2, [r3, #4]
 80043de:	609a      	str	r2, [r3, #8]
 80043e0:	60da      	str	r2, [r3, #12]
 80043e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	4a2d      	ldr	r2, [pc, #180]	; (80044a0 <HAL_SPI_MspInit+0xd4>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d154      	bne.n	8004498 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80043ee:	4b2d      	ldr	r3, [pc, #180]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 80043f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f2:	4a2c      	ldr	r2, [pc, #176]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 80043f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80043f8:	6413      	str	r3, [r2, #64]	; 0x40
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 80043fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004402:	613b      	str	r3, [r7, #16]
 8004404:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 8004406:	4b27      	ldr	r3, [pc, #156]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 8004408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800440a:	4a26      	ldr	r2, [pc, #152]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 800440c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004410:	6313      	str	r3, [r2, #48]	; 0x30
 8004412:	4b24      	ldr	r3, [pc, #144]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 8004414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004416:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800441a:	60fb      	str	r3, [r7, #12]
 800441c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800441e:	4b21      	ldr	r3, [pc, #132]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 8004420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004422:	4a20      	ldr	r2, [pc, #128]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 8004424:	f043 0302 	orr.w	r3, r3, #2
 8004428:	6313      	str	r3, [r2, #48]	; 0x30
 800442a:	4b1e      	ldr	r3, [pc, #120]	; (80044a4 <HAL_SPI_MspInit+0xd8>)
 800442c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800442e:	f003 0302 	and.w	r3, r3, #2
 8004432:	60bb      	str	r3, [r7, #8]
 8004434:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 8004436:	2302      	movs	r3, #2
 8004438:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800443a:	2302      	movs	r3, #2
 800443c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800443e:	2300      	movs	r3, #0
 8004440:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004442:	2300      	movs	r3, #0
 8004444:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004446:	2305      	movs	r3, #5
 8004448:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 800444a:	f107 0314 	add.w	r3, r7, #20
 800444e:	4619      	mov	r1, r3
 8004450:	4815      	ldr	r0, [pc, #84]	; (80044a8 <HAL_SPI_MspInit+0xdc>)
 8004452:	f001 fd83 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8004456:	2301      	movs	r3, #1
 8004458:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800445a:	2302      	movs	r3, #2
 800445c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800445e:	2300      	movs	r3, #0
 8004460:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004462:	2303      	movs	r3, #3
 8004464:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004466:	2305      	movs	r3, #5
 8004468:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800446a:	f107 0314 	add.w	r3, r7, #20
 800446e:	4619      	mov	r1, r3
 8004470:	480d      	ldr	r0, [pc, #52]	; (80044a8 <HAL_SPI_MspInit+0xdc>)
 8004472:	f001 fd73 	bl	8005f5c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8004476:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800447a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800447c:	2302      	movs	r3, #2
 800447e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004480:	2300      	movs	r3, #0
 8004482:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004484:	2303      	movs	r3, #3
 8004486:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004488:	2305      	movs	r3, #5
 800448a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800448c:	f107 0314 	add.w	r3, r7, #20
 8004490:	4619      	mov	r1, r3
 8004492:	4806      	ldr	r0, [pc, #24]	; (80044ac <HAL_SPI_MspInit+0xe0>)
 8004494:	f001 fd62 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8004498:	bf00      	nop
 800449a:	3728      	adds	r7, #40	; 0x28
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}
 80044a0:	40003800 	.word	0x40003800
 80044a4:	40023800 	.word	0x40023800
 80044a8:	40022000 	.word	0x40022000
 80044ac:	40020400 	.word	0x40020400

080044b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b089      	sub	sp, #36	; 0x24
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a2e      	ldr	r2, [pc, #184]	; (8004578 <HAL_TIM_Base_MspInit+0xc8>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d10c      	bne.n	80044dc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80044c2:	4b2e      	ldr	r3, [pc, #184]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	4a2d      	ldr	r2, [pc, #180]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044c8:	f043 0301 	orr.w	r3, r3, #1
 80044cc:	6453      	str	r3, [r2, #68]	; 0x44
 80044ce:	4b2b      	ldr	r3, [pc, #172]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f003 0301 	and.w	r3, r3, #1
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80044da:	e046      	b.n	800456a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044e4:	d10c      	bne.n	8004500 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80044e6:	4b25      	ldr	r3, [pc, #148]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	4a24      	ldr	r2, [pc, #144]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044ec:	f043 0301 	orr.w	r3, r3, #1
 80044f0:	6413      	str	r3, [r2, #64]	; 0x40
 80044f2:	4b22      	ldr	r3, [pc, #136]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	f003 0301 	and.w	r3, r3, #1
 80044fa:	61bb      	str	r3, [r7, #24]
 80044fc:	69bb      	ldr	r3, [r7, #24]
}
 80044fe:	e034      	b.n	800456a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4a1e      	ldr	r2, [pc, #120]	; (8004580 <HAL_TIM_Base_MspInit+0xd0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d10c      	bne.n	8004524 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800450a:	4b1c      	ldr	r3, [pc, #112]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 800450c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800450e:	4a1b      	ldr	r2, [pc, #108]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004510:	f043 0302 	orr.w	r3, r3, #2
 8004514:	6413      	str	r3, [r2, #64]	; 0x40
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451a:	f003 0302 	and.w	r3, r3, #2
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	697b      	ldr	r3, [r7, #20]
}
 8004522:	e022      	b.n	800456a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	4a16      	ldr	r2, [pc, #88]	; (8004584 <HAL_TIM_Base_MspInit+0xd4>)
 800452a:	4293      	cmp	r3, r2
 800452c:	d10c      	bne.n	8004548 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800452e:	4b13      	ldr	r3, [pc, #76]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004532:	4a12      	ldr	r2, [pc, #72]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004534:	f043 0308 	orr.w	r3, r3, #8
 8004538:	6413      	str	r3, [r2, #64]	; 0x40
 800453a:	4b10      	ldr	r3, [pc, #64]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 800453c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800453e:	f003 0308 	and.w	r3, r3, #8
 8004542:	613b      	str	r3, [r7, #16]
 8004544:	693b      	ldr	r3, [r7, #16]
}
 8004546:	e010      	b.n	800456a <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a0e      	ldr	r2, [pc, #56]	; (8004588 <HAL_TIM_Base_MspInit+0xd8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d10b      	bne.n	800456a <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8004552:	4b0a      	ldr	r3, [pc, #40]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	4a09      	ldr	r2, [pc, #36]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004558:	f043 0302 	orr.w	r3, r3, #2
 800455c:	6453      	str	r3, [r2, #68]	; 0x44
 800455e:	4b07      	ldr	r3, [pc, #28]	; (800457c <HAL_TIM_Base_MspInit+0xcc>)
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f003 0302 	and.w	r3, r3, #2
 8004566:	60fb      	str	r3, [r7, #12]
 8004568:	68fb      	ldr	r3, [r7, #12]
}
 800456a:	bf00      	nop
 800456c:	3724      	adds	r7, #36	; 0x24
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	40010000 	.word	0x40010000
 800457c:	40023800 	.word	0x40023800
 8004580:	40000400 	.word	0x40000400
 8004584:	40000c00 	.word	0x40000c00
 8004588:	40010400 	.word	0x40010400

0800458c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800458c:	b580      	push	{r7, lr}
 800458e:	b088      	sub	sp, #32
 8004590:	af00      	add	r7, sp, #0
 8004592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004594:	f107 030c 	add.w	r3, r7, #12
 8004598:	2200      	movs	r2, #0
 800459a:	601a      	str	r2, [r3, #0]
 800459c:	605a      	str	r2, [r3, #4]
 800459e:	609a      	str	r2, [r3, #8]
 80045a0:	60da      	str	r2, [r3, #12]
 80045a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a11      	ldr	r2, [pc, #68]	; (80045f0 <HAL_TIM_MspPostInit+0x64>)
 80045aa:	4293      	cmp	r3, r2
 80045ac:	d11b      	bne.n	80045e6 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80045ae:	4b11      	ldr	r3, [pc, #68]	; (80045f4 <HAL_TIM_MspPostInit+0x68>)
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	4a10      	ldr	r2, [pc, #64]	; (80045f4 <HAL_TIM_MspPostInit+0x68>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6313      	str	r3, [r2, #48]	; 0x30
 80045ba:	4b0e      	ldr	r3, [pc, #56]	; (80045f4 <HAL_TIM_MspPostInit+0x68>)
 80045bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	60bb      	str	r3, [r7, #8]
 80045c4:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80045c6:	2304      	movs	r3, #4
 80045c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045ca:	2302      	movs	r3, #2
 80045cc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045d2:	2300      	movs	r3, #0
 80045d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80045d6:	2303      	movs	r3, #3
 80045d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80045da:	f107 030c 	add.w	r3, r7, #12
 80045de:	4619      	mov	r1, r3
 80045e0:	4805      	ldr	r0, [pc, #20]	; (80045f8 <HAL_TIM_MspPostInit+0x6c>)
 80045e2:	f001 fcbb 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 80045e6:	bf00      	nop
 80045e8:	3720      	adds	r7, #32
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40010400 	.word	0x40010400
 80045f4:	40023800 	.word	0x40023800
 80045f8:	40022000 	.word	0x40022000

080045fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b08e      	sub	sp, #56	; 0x38
 8004600:	af00      	add	r7, sp, #0
 8004602:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004604:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004608:	2200      	movs	r2, #0
 800460a:	601a      	str	r2, [r3, #0]
 800460c:	605a      	str	r2, [r3, #4]
 800460e:	609a      	str	r2, [r3, #8]
 8004610:	60da      	str	r2, [r3, #12]
 8004612:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a57      	ldr	r2, [pc, #348]	; (8004778 <HAL_UART_MspInit+0x17c>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d128      	bne.n	8004670 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 800461e:	4b57      	ldr	r3, [pc, #348]	; (800477c <HAL_UART_MspInit+0x180>)
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	4a56      	ldr	r2, [pc, #344]	; (800477c <HAL_UART_MspInit+0x180>)
 8004624:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004628:	6413      	str	r3, [r2, #64]	; 0x40
 800462a:	4b54      	ldr	r3, [pc, #336]	; (800477c <HAL_UART_MspInit+0x180>)
 800462c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004632:	623b      	str	r3, [r7, #32]
 8004634:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8004636:	4b51      	ldr	r3, [pc, #324]	; (800477c <HAL_UART_MspInit+0x180>)
 8004638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800463a:	4a50      	ldr	r2, [pc, #320]	; (800477c <HAL_UART_MspInit+0x180>)
 800463c:	f043 0320 	orr.w	r3, r3, #32
 8004640:	6313      	str	r3, [r2, #48]	; 0x30
 8004642:	4b4e      	ldr	r3, [pc, #312]	; (800477c <HAL_UART_MspInit+0x180>)
 8004644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004646:	f003 0320 	and.w	r3, r3, #32
 800464a:	61fb      	str	r3, [r7, #28]
 800464c:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 800464e:	23c0      	movs	r3, #192	; 0xc0
 8004650:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004652:	2302      	movs	r3, #2
 8004654:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004656:	2300      	movs	r3, #0
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800465a:	2303      	movs	r3, #3
 800465c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800465e:	2308      	movs	r3, #8
 8004660:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004662:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004666:	4619      	mov	r1, r3
 8004668:	4845      	ldr	r0, [pc, #276]	; (8004780 <HAL_UART_MspInit+0x184>)
 800466a:	f001 fc77 	bl	8005f5c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800466e:	e07f      	b.n	8004770 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART1)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a43      	ldr	r2, [pc, #268]	; (8004784 <HAL_UART_MspInit+0x188>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d14d      	bne.n	8004716 <HAL_UART_MspInit+0x11a>
    __HAL_RCC_USART1_CLK_ENABLE();
 800467a:	4b40      	ldr	r3, [pc, #256]	; (800477c <HAL_UART_MspInit+0x180>)
 800467c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800467e:	4a3f      	ldr	r2, [pc, #252]	; (800477c <HAL_UART_MspInit+0x180>)
 8004680:	f043 0310 	orr.w	r3, r3, #16
 8004684:	6453      	str	r3, [r2, #68]	; 0x44
 8004686:	4b3d      	ldr	r3, [pc, #244]	; (800477c <HAL_UART_MspInit+0x180>)
 8004688:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	61bb      	str	r3, [r7, #24]
 8004690:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004692:	4b3a      	ldr	r3, [pc, #232]	; (800477c <HAL_UART_MspInit+0x180>)
 8004694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004696:	4a39      	ldr	r2, [pc, #228]	; (800477c <HAL_UART_MspInit+0x180>)
 8004698:	f043 0302 	orr.w	r3, r3, #2
 800469c:	6313      	str	r3, [r2, #48]	; 0x30
 800469e:	4b37      	ldr	r3, [pc, #220]	; (800477c <HAL_UART_MspInit+0x180>)
 80046a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a2:	f003 0302 	and.w	r3, r3, #2
 80046a6:	617b      	str	r3, [r7, #20]
 80046a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80046aa:	4b34      	ldr	r3, [pc, #208]	; (800477c <HAL_UART_MspInit+0x180>)
 80046ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ae:	4a33      	ldr	r2, [pc, #204]	; (800477c <HAL_UART_MspInit+0x180>)
 80046b0:	f043 0301 	orr.w	r3, r3, #1
 80046b4:	6313      	str	r3, [r2, #48]	; 0x30
 80046b6:	4b31      	ldr	r3, [pc, #196]	; (800477c <HAL_UART_MspInit+0x180>)
 80046b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ba:	f003 0301 	and.w	r3, r3, #1
 80046be:	613b      	str	r3, [r7, #16]
 80046c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80046c2:	2380      	movs	r3, #128	; 0x80
 80046c4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046c6:	2302      	movs	r3, #2
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ca:	2300      	movs	r3, #0
 80046cc:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ce:	2300      	movs	r3, #0
 80046d0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046d2:	2307      	movs	r3, #7
 80046d4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80046d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046da:	4619      	mov	r1, r3
 80046dc:	482a      	ldr	r0, [pc, #168]	; (8004788 <HAL_UART_MspInit+0x18c>)
 80046de:	f001 fc3d 	bl	8005f5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80046e2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046e8:	2302      	movs	r3, #2
 80046ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ec:	2300      	movs	r3, #0
 80046ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046f0:	2300      	movs	r3, #0
 80046f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80046f4:	2307      	movs	r3, #7
 80046f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80046f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80046fc:	4619      	mov	r1, r3
 80046fe:	4823      	ldr	r0, [pc, #140]	; (800478c <HAL_UART_MspInit+0x190>)
 8004700:	f001 fc2c 	bl	8005f5c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8004704:	2200      	movs	r2, #0
 8004706:	2107      	movs	r1, #7
 8004708:	2025      	movs	r0, #37	; 0x25
 800470a:	f000 fec5 	bl	8005498 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800470e:	2025      	movs	r0, #37	; 0x25
 8004710:	f000 fede 	bl	80054d0 <HAL_NVIC_EnableIRQ>
}
 8004714:	e02c      	b.n	8004770 <HAL_UART_MspInit+0x174>
  else if(huart->Instance==USART6)
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4a1d      	ldr	r2, [pc, #116]	; (8004790 <HAL_UART_MspInit+0x194>)
 800471c:	4293      	cmp	r3, r2
 800471e:	d127      	bne.n	8004770 <HAL_UART_MspInit+0x174>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004720:	4b16      	ldr	r3, [pc, #88]	; (800477c <HAL_UART_MspInit+0x180>)
 8004722:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004724:	4a15      	ldr	r2, [pc, #84]	; (800477c <HAL_UART_MspInit+0x180>)
 8004726:	f043 0320 	orr.w	r3, r3, #32
 800472a:	6453      	str	r3, [r2, #68]	; 0x44
 800472c:	4b13      	ldr	r3, [pc, #76]	; (800477c <HAL_UART_MspInit+0x180>)
 800472e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004730:	f003 0320 	and.w	r3, r3, #32
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004738:	4b10      	ldr	r3, [pc, #64]	; (800477c <HAL_UART_MspInit+0x180>)
 800473a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800473c:	4a0f      	ldr	r2, [pc, #60]	; (800477c <HAL_UART_MspInit+0x180>)
 800473e:	f043 0304 	orr.w	r3, r3, #4
 8004742:	6313      	str	r3, [r2, #48]	; 0x30
 8004744:	4b0d      	ldr	r3, [pc, #52]	; (800477c <HAL_UART_MspInit+0x180>)
 8004746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004748:	f003 0304 	and.w	r3, r3, #4
 800474c:	60bb      	str	r3, [r7, #8]
 800474e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004750:	23c0      	movs	r3, #192	; 0xc0
 8004752:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004754:	2302      	movs	r3, #2
 8004756:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004758:	2300      	movs	r3, #0
 800475a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800475c:	2303      	movs	r3, #3
 800475e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8004760:	2308      	movs	r3, #8
 8004762:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004764:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004768:	4619      	mov	r1, r3
 800476a:	480a      	ldr	r0, [pc, #40]	; (8004794 <HAL_UART_MspInit+0x198>)
 800476c:	f001 fbf6 	bl	8005f5c <HAL_GPIO_Init>
}
 8004770:	bf00      	nop
 8004772:	3738      	adds	r7, #56	; 0x38
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}
 8004778:	40007800 	.word	0x40007800
 800477c:	40023800 	.word	0x40023800
 8004780:	40021400 	.word	0x40021400
 8004784:	40011000 	.word	0x40011000
 8004788:	40020400 	.word	0x40020400
 800478c:	40020000 	.word	0x40020000
 8004790:	40011400 	.word	0x40011400
 8004794:	40020800 	.word	0x40020800

08004798 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8004798:	b580      	push	{r7, lr}
 800479a:	b086      	sub	sp, #24
 800479c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800479e:	1d3b      	adds	r3, r7, #4
 80047a0:	2200      	movs	r2, #0
 80047a2:	601a      	str	r2, [r3, #0]
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	609a      	str	r2, [r3, #8]
 80047a8:	60da      	str	r2, [r3, #12]
 80047aa:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80047ac:	4b3a      	ldr	r3, [pc, #232]	; (8004898 <HAL_FMC_MspInit+0x100>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d16d      	bne.n	8004890 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80047b4:	4b38      	ldr	r3, [pc, #224]	; (8004898 <HAL_FMC_MspInit+0x100>)
 80047b6:	2201      	movs	r2, #1
 80047b8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80047ba:	4b38      	ldr	r3, [pc, #224]	; (800489c <HAL_FMC_MspInit+0x104>)
 80047bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047be:	4a37      	ldr	r2, [pc, #220]	; (800489c <HAL_FMC_MspInit+0x104>)
 80047c0:	f043 0301 	orr.w	r3, r3, #1
 80047c4:	6393      	str	r3, [r2, #56]	; 0x38
 80047c6:	4b35      	ldr	r3, [pc, #212]	; (800489c <HAL_FMC_MspInit+0x104>)
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	f003 0301 	and.w	r3, r3, #1
 80047ce:	603b      	str	r3, [r7, #0]
 80047d0:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 80047d2:	f64f 7383 	movw	r3, #65411	; 0xff83
 80047d6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047d8:	2302      	movs	r3, #2
 80047da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047dc:	2300      	movs	r3, #0
 80047de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80047e0:	2303      	movs	r3, #3
 80047e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80047e4:	230c      	movs	r3, #12
 80047e6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80047e8:	1d3b      	adds	r3, r7, #4
 80047ea:	4619      	mov	r1, r3
 80047ec:	482c      	ldr	r0, [pc, #176]	; (80048a0 <HAL_FMC_MspInit+0x108>)
 80047ee:	f001 fbb5 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 80047f2:	f248 1333 	movw	r3, #33075	; 0x8133
 80047f6:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f8:	2302      	movs	r3, #2
 80047fa:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80047fc:	2300      	movs	r3, #0
 80047fe:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004800:	2303      	movs	r3, #3
 8004802:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004804:	230c      	movs	r3, #12
 8004806:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004808:	1d3b      	adds	r3, r7, #4
 800480a:	4619      	mov	r1, r3
 800480c:	4825      	ldr	r0, [pc, #148]	; (80048a4 <HAL_FMC_MspInit+0x10c>)
 800480e:	f001 fba5 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 8004812:	f24c 7303 	movw	r3, #50947	; 0xc703
 8004816:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004818:	2302      	movs	r3, #2
 800481a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800481c:	2300      	movs	r3, #0
 800481e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004820:	2303      	movs	r3, #3
 8004822:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004824:	230c      	movs	r3, #12
 8004826:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004828:	1d3b      	adds	r3, r7, #4
 800482a:	4619      	mov	r1, r3
 800482c:	481e      	ldr	r0, [pc, #120]	; (80048a8 <HAL_FMC_MspInit+0x110>)
 800482e:	f001 fb95 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8004832:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8004836:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004838:	2302      	movs	r3, #2
 800483a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800483c:	2300      	movs	r3, #0
 800483e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004840:	2303      	movs	r3, #3
 8004842:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004844:	230c      	movs	r3, #12
 8004846:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004848:	1d3b      	adds	r3, r7, #4
 800484a:	4619      	mov	r1, r3
 800484c:	4817      	ldr	r0, [pc, #92]	; (80048ac <HAL_FMC_MspInit+0x114>)
 800484e:	f001 fb85 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 8004852:	2328      	movs	r3, #40	; 0x28
 8004854:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004856:	2302      	movs	r3, #2
 8004858:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800485a:	2300      	movs	r3, #0
 800485c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800485e:	2303      	movs	r3, #3
 8004860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004862:	230c      	movs	r3, #12
 8004864:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8004866:	1d3b      	adds	r3, r7, #4
 8004868:	4619      	mov	r1, r3
 800486a:	4811      	ldr	r0, [pc, #68]	; (80048b0 <HAL_FMC_MspInit+0x118>)
 800486c:	f001 fb76 	bl	8005f5c <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8004870:	2308      	movs	r3, #8
 8004872:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004874:	2302      	movs	r3, #2
 8004876:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004878:	2300      	movs	r3, #0
 800487a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800487c:	2303      	movs	r3, #3
 800487e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8004880:	230c      	movs	r3, #12
 8004882:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004884:	1d3b      	adds	r3, r7, #4
 8004886:	4619      	mov	r1, r3
 8004888:	480a      	ldr	r0, [pc, #40]	; (80048b4 <HAL_FMC_MspInit+0x11c>)
 800488a:	f001 fb67 	bl	8005f5c <HAL_GPIO_Init>
 800488e:	e000      	b.n	8004892 <HAL_FMC_MspInit+0xfa>
    return;
 8004890:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8004892:	3718      	adds	r7, #24
 8004894:	46bd      	mov	sp, r7
 8004896:	bd80      	pop	{r7, pc}
 8004898:	20000504 	.word	0x20000504
 800489c:	40023800 	.word	0x40023800
 80048a0:	40021000 	.word	0x40021000
 80048a4:	40021800 	.word	0x40021800
 80048a8:	40020c00 	.word	0x40020c00
 80048ac:	40021400 	.word	0x40021400
 80048b0:	40021c00 	.word	0x40021c00
 80048b4:	40020800 	.word	0x40020800

080048b8 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80048b8:	b580      	push	{r7, lr}
 80048ba:	b082      	sub	sp, #8
 80048bc:	af00      	add	r7, sp, #0
 80048be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 80048c0:	f7ff ff6a 	bl	8004798 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80048c4:	bf00      	nop
 80048c6:	3708      	adds	r7, #8
 80048c8:	46bd      	mov	sp, r7
 80048ca:	bd80      	pop	{r7, pc}

080048cc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b08c      	sub	sp, #48	; 0x30
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80048d4:	2300      	movs	r3, #0
 80048d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80048d8:	2300      	movs	r3, #0
 80048da:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80048dc:	2200      	movs	r2, #0
 80048de:	6879      	ldr	r1, [r7, #4]
 80048e0:	2036      	movs	r0, #54	; 0x36
 80048e2:	f000 fdd9 	bl	8005498 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80048e6:	2036      	movs	r0, #54	; 0x36
 80048e8:	f000 fdf2 	bl	80054d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80048ec:	4b1f      	ldr	r3, [pc, #124]	; (800496c <HAL_InitTick+0xa0>)
 80048ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048f0:	4a1e      	ldr	r2, [pc, #120]	; (800496c <HAL_InitTick+0xa0>)
 80048f2:	f043 0310 	orr.w	r3, r3, #16
 80048f6:	6413      	str	r3, [r2, #64]	; 0x40
 80048f8:	4b1c      	ldr	r3, [pc, #112]	; (800496c <HAL_InitTick+0xa0>)
 80048fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048fc:	f003 0310 	and.w	r3, r3, #16
 8004900:	60fb      	str	r3, [r7, #12]
 8004902:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004904:	f107 0210 	add.w	r2, r7, #16
 8004908:	f107 0314 	add.w	r3, r7, #20
 800490c:	4611      	mov	r1, r2
 800490e:	4618      	mov	r0, r3
 8004910:	f003 fc08 	bl	8008124 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8004914:	f003 fbde 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 8004918:	4603      	mov	r3, r0
 800491a:	005b      	lsls	r3, r3, #1
 800491c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800491e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004920:	4a13      	ldr	r2, [pc, #76]	; (8004970 <HAL_InitTick+0xa4>)
 8004922:	fba2 2303 	umull	r2, r3, r2, r3
 8004926:	0c9b      	lsrs	r3, r3, #18
 8004928:	3b01      	subs	r3, #1
 800492a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800492c:	4b11      	ldr	r3, [pc, #68]	; (8004974 <HAL_InitTick+0xa8>)
 800492e:	4a12      	ldr	r2, [pc, #72]	; (8004978 <HAL_InitTick+0xac>)
 8004930:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8004932:	4b10      	ldr	r3, [pc, #64]	; (8004974 <HAL_InitTick+0xa8>)
 8004934:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004938:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800493a:	4a0e      	ldr	r2, [pc, #56]	; (8004974 <HAL_InitTick+0xa8>)
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004940:	4b0c      	ldr	r3, [pc, #48]	; (8004974 <HAL_InitTick+0xa8>)
 8004942:	2200      	movs	r2, #0
 8004944:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <HAL_InitTick+0xa8>)
 8004948:	2200      	movs	r2, #0
 800494a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 800494c:	4809      	ldr	r0, [pc, #36]	; (8004974 <HAL_InitTick+0xa8>)
 800494e:	f004 fda8 	bl	80094a2 <HAL_TIM_Base_Init>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d104      	bne.n	8004962 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8004958:	4806      	ldr	r0, [pc, #24]	; (8004974 <HAL_InitTick+0xa8>)
 800495a:	f004 fdcd 	bl	80094f8 <HAL_TIM_Base_Start_IT>
 800495e:	4603      	mov	r3, r0
 8004960:	e000      	b.n	8004964 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
}
 8004964:	4618      	mov	r0, r3
 8004966:	3730      	adds	r7, #48	; 0x30
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40023800 	.word	0x40023800
 8004970:	431bde83 	.word	0x431bde83
 8004974:	20008d00 	.word	0x20008d00
 8004978:	40001000 	.word	0x40001000

0800497c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800497c:	b480      	push	{r7}
 800497e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004980:	e7fe      	b.n	8004980 <NMI_Handler+0x4>

08004982 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004982:	b480      	push	{r7}
 8004984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004986:	e7fe      	b.n	8004986 <HardFault_Handler+0x4>

08004988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004988:	b480      	push	{r7}
 800498a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800498c:	e7fe      	b.n	800498c <MemManage_Handler+0x4>

0800498e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800498e:	b480      	push	{r7}
 8004990:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004992:	e7fe      	b.n	8004992 <BusFault_Handler+0x4>

08004994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004994:	b480      	push	{r7}
 8004996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004998:	e7fe      	b.n	8004998 <UsageFault_Handler+0x4>

0800499a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800499a:	b480      	push	{r7}
 800499c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800499e:	bf00      	nop
 80049a0:	46bd      	mov	sp, r7
 80049a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a6:	4770      	bx	lr

080049a8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80049a8:	b580      	push	{r7, lr}
 80049aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80049ac:	4802      	ldr	r0, [pc, #8]	; (80049b8 <USART1_IRQHandler+0x10>)
 80049ae:	f005 ff97 	bl	800a8e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80049b2:	bf00      	nop
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	200089e4 	.word	0x200089e4

080049bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_DAC_IRQHandler(&hdac);
 80049c0:	4803      	ldr	r0, [pc, #12]	; (80049d0 <TIM6_DAC_IRQHandler+0x14>)
 80049c2:	f000 fdb5 	bl	8005530 <HAL_DAC_IRQHandler>
  HAL_TIM_IRQHandler(&htim6);
 80049c6:	4803      	ldr	r0, [pc, #12]	; (80049d4 <TIM6_DAC_IRQHandler+0x18>)
 80049c8:	f004 fdf5 	bl	80095b6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80049cc:	bf00      	nop
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	20008a64 	.word	0x20008a64
 80049d4:	20008d00 	.word	0x20008d00

080049d8 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 80049d8:	b580      	push	{r7, lr}
 80049da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 80049dc:	4802      	ldr	r0, [pc, #8]	; (80049e8 <LTDC_IRQHandler+0x10>)
 80049de:	f002 fc23 	bl	8007228 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 80049e2:	bf00      	nop
 80049e4:	bd80      	pop	{r7, pc}
 80049e6:	bf00      	nop
 80049e8:	200088a4 	.word	0x200088a4

080049ec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b086      	sub	sp, #24
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049f4:	4a14      	ldr	r2, [pc, #80]	; (8004a48 <_sbrk+0x5c>)
 80049f6:	4b15      	ldr	r3, [pc, #84]	; (8004a4c <_sbrk+0x60>)
 80049f8:	1ad3      	subs	r3, r2, r3
 80049fa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049fc:	697b      	ldr	r3, [r7, #20]
 80049fe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004a00:	4b13      	ldr	r3, [pc, #76]	; (8004a50 <_sbrk+0x64>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d102      	bne.n	8004a0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004a08:	4b11      	ldr	r3, [pc, #68]	; (8004a50 <_sbrk+0x64>)
 8004a0a:	4a12      	ldr	r2, [pc, #72]	; (8004a54 <_sbrk+0x68>)
 8004a0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004a0e:	4b10      	ldr	r3, [pc, #64]	; (8004a50 <_sbrk+0x64>)
 8004a10:	681a      	ldr	r2, [r3, #0]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4413      	add	r3, r2
 8004a16:	693a      	ldr	r2, [r7, #16]
 8004a18:	429a      	cmp	r2, r3
 8004a1a:	d207      	bcs.n	8004a2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a1c:	f009 fa08 	bl	800de30 <__errno>
 8004a20:	4602      	mov	r2, r0
 8004a22:	230c      	movs	r3, #12
 8004a24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8004a26:	f04f 33ff 	mov.w	r3, #4294967295
 8004a2a:	e009      	b.n	8004a40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a2c:	4b08      	ldr	r3, [pc, #32]	; (8004a50 <_sbrk+0x64>)
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a32:	4b07      	ldr	r3, [pc, #28]	; (8004a50 <_sbrk+0x64>)
 8004a34:	681a      	ldr	r2, [r3, #0]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	4413      	add	r3, r2
 8004a3a:	4a05      	ldr	r2, [pc, #20]	; (8004a50 <_sbrk+0x64>)
 8004a3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3718      	adds	r7, #24
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}
 8004a48:	20050000 	.word	0x20050000
 8004a4c:	00000400 	.word	0x00000400
 8004a50:	20000508 	.word	0x20000508
 8004a54:	20008d48 	.word	0x20008d48

08004a58 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a58:	b480      	push	{r7}
 8004a5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a5c:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <SystemInit+0x28>)
 8004a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a62:	4a07      	ldr	r2, [pc, #28]	; (8004a80 <SystemInit+0x28>)
 8004a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004a6c:	4b04      	ldr	r3, [pc, #16]	; (8004a80 <SystemInit+0x28>)
 8004a6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004a72:	609a      	str	r2, [r3, #8]
#endif
}
 8004a74:	bf00      	nop
 8004a76:	46bd      	mov	sp, r7
 8004a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7c:	4770      	bx	lr
 8004a7e:	bf00      	nop
 8004a80:	e000ed00 	.word	0xe000ed00

08004a84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004a84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004abc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004a88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004a8a:	e003      	b.n	8004a94 <LoopCopyDataInit>

08004a8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004a8c:	4b0c      	ldr	r3, [pc, #48]	; (8004ac0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8004a8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8004a90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8004a92:	3104      	adds	r1, #4

08004a94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004a94:	480b      	ldr	r0, [pc, #44]	; (8004ac4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004a96:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004a98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004a9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004a9c:	d3f6      	bcc.n	8004a8c <CopyDataInit>
  ldr  r2, =_sbss
 8004a9e:	4a0b      	ldr	r2, [pc, #44]	; (8004acc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8004aa0:	e002      	b.n	8004aa8 <LoopFillZerobss>

08004aa2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8004aa2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8004aa4:	f842 3b04 	str.w	r3, [r2], #4

08004aa8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8004aa8:	4b09      	ldr	r3, [pc, #36]	; (8004ad0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8004aaa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8004aac:	d3f9      	bcc.n	8004aa2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004aae:	f7ff ffd3 	bl	8004a58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004ab2:	f009 f9c3 	bl	800de3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004ab6:	f7fb ff8b 	bl	80009d0 <main>
  bx  lr    
 8004aba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8004abc:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 8004ac0:	08010738 	.word	0x08010738
  ldr  r0, =_sdata
 8004ac4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8004ac8:	200000c4 	.word	0x200000c4
  ldr  r2, =_sbss
 8004acc:	200000c4 	.word	0x200000c4
  ldr  r3, = _ebss
 8004ad0:	20008d48 	.word	0x20008d48

08004ad4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ad4:	e7fe      	b.n	8004ad4 <ADC_IRQHandler>

08004ad6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ad6:	b580      	push	{r7, lr}
 8004ad8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004ada:	2003      	movs	r0, #3
 8004adc:	f000 fcd1 	bl	8005482 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004ae0:	2000      	movs	r0, #0
 8004ae2:	f7ff fef3 	bl	80048cc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8004ae6:	f7ff f9dd 	bl	8003ea4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8004aea:	2300      	movs	r3, #0
}
 8004aec:	4618      	mov	r0, r3
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004af0:	b480      	push	{r7}
 8004af2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004af4:	4b06      	ldr	r3, [pc, #24]	; (8004b10 <HAL_IncTick+0x20>)
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	461a      	mov	r2, r3
 8004afa:	4b06      	ldr	r3, [pc, #24]	; (8004b14 <HAL_IncTick+0x24>)
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4413      	add	r3, r2
 8004b00:	4a04      	ldr	r2, [pc, #16]	; (8004b14 <HAL_IncTick+0x24>)
 8004b02:	6013      	str	r3, [r2, #0]
}
 8004b04:	bf00      	nop
 8004b06:	46bd      	mov	sp, r7
 8004b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b0c:	4770      	bx	lr
 8004b0e:	bf00      	nop
 8004b10:	20000058 	.word	0x20000058
 8004b14:	20008d40 	.word	0x20008d40

08004b18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004b18:	b480      	push	{r7}
 8004b1a:	af00      	add	r7, sp, #0
  return uwTick;
 8004b1c:	4b03      	ldr	r3, [pc, #12]	; (8004b2c <HAL_GetTick+0x14>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	46bd      	mov	sp, r7
 8004b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b28:	4770      	bx	lr
 8004b2a:	bf00      	nop
 8004b2c:	20008d40 	.word	0x20008d40

08004b30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b38:	f7ff ffee 	bl	8004b18 <HAL_GetTick>
 8004b3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b48:	d005      	beq.n	8004b56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b4a:	4b09      	ldr	r3, [pc, #36]	; (8004b70 <HAL_Delay+0x40>)
 8004b4c:	781b      	ldrb	r3, [r3, #0]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b56:	bf00      	nop
 8004b58:	f7ff ffde 	bl	8004b18 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68bb      	ldr	r3, [r7, #8]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	68fa      	ldr	r2, [r7, #12]
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d8f7      	bhi.n	8004b58 <HAL_Delay+0x28>
  {
  }
}
 8004b68:	bf00      	nop
 8004b6a:	3710      	adds	r7, #16
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	bd80      	pop	{r7, pc}
 8004b70:	20000058 	.word	0x20000058

08004b74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004b7c:	2300      	movs	r3, #0
 8004b7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004b86:	2301      	movs	r3, #1
 8004b88:	e031      	b.n	8004bee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d109      	bne.n	8004ba6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004b92:	6878      	ldr	r0, [r7, #4]
 8004b94:	f7ff f9ae 	bl	8003ef4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004baa:	f003 0310 	and.w	r3, r3, #16
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d116      	bne.n	8004be0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bb6:	4b10      	ldr	r3, [pc, #64]	; (8004bf8 <HAL_ADC_Init+0x84>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fab6 	bl	8005134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bd2:	f023 0303 	bic.w	r3, r3, #3
 8004bd6:	f043 0201 	orr.w	r2, r3, #1
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8004bde:	e001      	b.n	8004be4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8004be0:	2301      	movs	r3, #1
 8004be2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8004bec:	7bfb      	ldrb	r3, [r7, #15]
}
 8004bee:	4618      	mov	r0, r3
 8004bf0:	3710      	adds	r7, #16
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	bd80      	pop	{r7, pc}
 8004bf6:	bf00      	nop
 8004bf8:	ffffeefd 	.word	0xffffeefd

08004bfc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b085      	sub	sp, #20
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004c04:	2300      	movs	r3, #0
 8004c06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c0e:	2b01      	cmp	r3, #1
 8004c10:	d101      	bne.n	8004c16 <HAL_ADC_Start+0x1a>
 8004c12:	2302      	movs	r3, #2
 8004c14:	e0a0      	b.n	8004d58 <HAL_ADC_Start+0x15c>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	689b      	ldr	r3, [r3, #8]
 8004c24:	f003 0301 	and.w	r3, r3, #1
 8004c28:	2b01      	cmp	r3, #1
 8004c2a:	d018      	beq.n	8004c5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	689a      	ldr	r2, [r3, #8]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f042 0201 	orr.w	r2, r2, #1
 8004c3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004c3c:	4b49      	ldr	r3, [pc, #292]	; (8004d64 <HAL_ADC_Start+0x168>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a49      	ldr	r2, [pc, #292]	; (8004d68 <HAL_ADC_Start+0x16c>)
 8004c42:	fba2 2303 	umull	r2, r3, r2, r3
 8004c46:	0c9a      	lsrs	r2, r3, #18
 8004c48:	4613      	mov	r3, r2
 8004c4a:	005b      	lsls	r3, r3, #1
 8004c4c:	4413      	add	r3, r2
 8004c4e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c50:	e002      	b.n	8004c58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3b01      	subs	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d1f9      	bne.n	8004c52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	689b      	ldr	r3, [r3, #8]
 8004c64:	f003 0301 	and.w	r3, r3, #1
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d174      	bne.n	8004d56 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c70:	4b3e      	ldr	r3, [pc, #248]	; (8004d6c <HAL_ADC_Start+0x170>)
 8004c72:	4013      	ands	r3, r2
 8004c74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d007      	beq.n	8004c9a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004ca2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ca6:	d106      	bne.n	8004cb6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004cac:	f023 0206 	bic.w	r2, r3, #6
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	645a      	str	r2, [r3, #68]	; 0x44
 8004cb4:	e002      	b.n	8004cbc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004ccc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004cce:	4b28      	ldr	r3, [pc, #160]	; (8004d70 <HAL_ADC_Start+0x174>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	f003 031f 	and.w	r3, r3, #31
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d10f      	bne.n	8004cfa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	689b      	ldr	r3, [r3, #8]
 8004ce0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d136      	bne.n	8004d56 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004cf6:	609a      	str	r2, [r3, #8]
 8004cf8:	e02d      	b.n	8004d56 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a1d      	ldr	r2, [pc, #116]	; (8004d74 <HAL_ADC_Start+0x178>)
 8004d00:	4293      	cmp	r3, r2
 8004d02:	d10e      	bne.n	8004d22 <HAL_ADC_Start+0x126>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	689b      	ldr	r3, [r3, #8]
 8004d0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d107      	bne.n	8004d22 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	689a      	ldr	r2, [r3, #8]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d20:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004d22:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_ADC_Start+0x174>)
 8004d24:	685b      	ldr	r3, [r3, #4]
 8004d26:	f003 0310 	and.w	r3, r3, #16
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d113      	bne.n	8004d56 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a11      	ldr	r2, [pc, #68]	; (8004d78 <HAL_ADC_Start+0x17c>)
 8004d34:	4293      	cmp	r3, r2
 8004d36:	d10e      	bne.n	8004d56 <HAL_ADC_Start+0x15a>
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	689b      	ldr	r3, [r3, #8]
 8004d3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004d54:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004d56:	2300      	movs	r3, #0
}
 8004d58:	4618      	mov	r0, r3
 8004d5a:	3714      	adds	r7, #20
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d62:	4770      	bx	lr
 8004d64:	20000050 	.word	0x20000050
 8004d68:	431bde83 	.word	0x431bde83
 8004d6c:	fffff8fe 	.word	0xfffff8fe
 8004d70:	40012300 	.word	0x40012300
 8004d74:	40012000 	.word	0x40012000
 8004d78:	40012200 	.word	0x40012200

08004d7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b084      	sub	sp, #16
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d86:	2300      	movs	r3, #0
 8004d88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d98:	d113      	bne.n	8004dc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004da4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004da8:	d10b      	bne.n	8004dc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dae:	f043 0220 	orr.w	r2, r3, #32
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2200      	movs	r2, #0
 8004dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e05c      	b.n	8004e7c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004dc2:	f7ff fea9 	bl	8004b18 <HAL_GetTick>
 8004dc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004dc8:	e01a      	b.n	8004e00 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dd0:	d016      	beq.n	8004e00 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004dd2:	683b      	ldr	r3, [r7, #0]
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d007      	beq.n	8004de8 <HAL_ADC_PollForConversion+0x6c>
 8004dd8:	f7ff fe9e 	bl	8004b18 <HAL_GetTick>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d20b      	bcs.n	8004e00 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dec:	f043 0204 	orr.w	r2, r3, #4
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004dfc:	2303      	movs	r3, #3
 8004dfe:	e03d      	b.n	8004e7c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b02      	cmp	r3, #2
 8004e0c:	d1dd      	bne.n	8004dca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f06f 0212 	mvn.w	r2, #18
 8004e16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	689b      	ldr	r3, [r3, #8]
 8004e2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d123      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d11f      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d006      	beq.n	8004e56 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d111      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d105      	bne.n	8004e7a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e72:	f043 0201 	orr.w	r2, r3, #1
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	370c      	adds	r7, #12
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
	...

08004ea0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
 8004ea8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	d101      	bne.n	8004ebc <HAL_ADC_ConfigChannel+0x1c>
 8004eb8:	2302      	movs	r3, #2
 8004eba:	e12a      	b.n	8005112 <HAL_ADC_ConfigChannel+0x272>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	2b09      	cmp	r3, #9
 8004eca:	d93a      	bls.n	8004f42 <HAL_ADC_ConfigChannel+0xa2>
 8004ecc:	683b      	ldr	r3, [r7, #0]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed4:	d035      	beq.n	8004f42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	68d9      	ldr	r1, [r3, #12]
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	b29b      	uxth	r3, r3
 8004ee2:	461a      	mov	r2, r3
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	005b      	lsls	r3, r3, #1
 8004ee8:	4413      	add	r3, r2
 8004eea:	3b1e      	subs	r3, #30
 8004eec:	2207      	movs	r2, #7
 8004eee:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef2:	43da      	mvns	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	400a      	ands	r2, r1
 8004efa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	4a87      	ldr	r2, [pc, #540]	; (8005120 <HAL_ADC_ConfigChannel+0x280>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d10a      	bne.n	8004f1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	68d9      	ldr	r1, [r3, #12]
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	689b      	ldr	r3, [r3, #8]
 8004f10:	061a      	lsls	r2, r3, #24
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f1a:	e035      	b.n	8004f88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	68d9      	ldr	r1, [r3, #12]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	689a      	ldr	r2, [r3, #8]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	b29b      	uxth	r3, r3
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	4603      	mov	r3, r0
 8004f30:	005b      	lsls	r3, r3, #1
 8004f32:	4403      	add	r3, r0
 8004f34:	3b1e      	subs	r3, #30
 8004f36:	409a      	lsls	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	430a      	orrs	r2, r1
 8004f3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004f40:	e022      	b.n	8004f88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	6919      	ldr	r1, [r3, #16]
 8004f48:	683b      	ldr	r3, [r7, #0]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	b29b      	uxth	r3, r3
 8004f4e:	461a      	mov	r2, r3
 8004f50:	4613      	mov	r3, r2
 8004f52:	005b      	lsls	r3, r3, #1
 8004f54:	4413      	add	r3, r2
 8004f56:	2207      	movs	r2, #7
 8004f58:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5c:	43da      	mvns	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	400a      	ands	r2, r1
 8004f64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6919      	ldr	r1, [r3, #16]
 8004f6c:	683b      	ldr	r3, [r7, #0]
 8004f6e:	689a      	ldr	r2, [r3, #8]
 8004f70:	683b      	ldr	r3, [r7, #0]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	b29b      	uxth	r3, r3
 8004f76:	4618      	mov	r0, r3
 8004f78:	4603      	mov	r3, r0
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	4403      	add	r3, r0
 8004f7e:	409a      	lsls	r2, r3
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	2b06      	cmp	r3, #6
 8004f8e:	d824      	bhi.n	8004fda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	685a      	ldr	r2, [r3, #4]
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	009b      	lsls	r3, r3, #2
 8004f9e:	4413      	add	r3, r2
 8004fa0:	3b05      	subs	r3, #5
 8004fa2:	221f      	movs	r2, #31
 8004fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fa8:	43da      	mvns	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	400a      	ands	r2, r1
 8004fb0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004fb8:	683b      	ldr	r3, [r7, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	b29b      	uxth	r3, r3
 8004fbe:	4618      	mov	r0, r3
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685a      	ldr	r2, [r3, #4]
 8004fc4:	4613      	mov	r3, r2
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	4413      	add	r3, r2
 8004fca:	3b05      	subs	r3, #5
 8004fcc:	fa00 f203 	lsl.w	r2, r0, r3
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	430a      	orrs	r2, r1
 8004fd6:	635a      	str	r2, [r3, #52]	; 0x34
 8004fd8:	e04c      	b.n	8005074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	2b0c      	cmp	r3, #12
 8004fe0:	d824      	bhi.n	800502c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	685a      	ldr	r2, [r3, #4]
 8004fec:	4613      	mov	r3, r2
 8004fee:	009b      	lsls	r3, r3, #2
 8004ff0:	4413      	add	r3, r2
 8004ff2:	3b23      	subs	r3, #35	; 0x23
 8004ff4:	221f      	movs	r2, #31
 8004ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ffa:	43da      	mvns	r2, r3
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	400a      	ands	r2, r1
 8005002:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800500a:	683b      	ldr	r3, [r7, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	b29b      	uxth	r3, r3
 8005010:	4618      	mov	r0, r3
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	685a      	ldr	r2, [r3, #4]
 8005016:	4613      	mov	r3, r2
 8005018:	009b      	lsls	r3, r3, #2
 800501a:	4413      	add	r3, r2
 800501c:	3b23      	subs	r3, #35	; 0x23
 800501e:	fa00 f203 	lsl.w	r2, r0, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	430a      	orrs	r2, r1
 8005028:	631a      	str	r2, [r3, #48]	; 0x30
 800502a:	e023      	b.n	8005074 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	685a      	ldr	r2, [r3, #4]
 8005036:	4613      	mov	r3, r2
 8005038:	009b      	lsls	r3, r3, #2
 800503a:	4413      	add	r3, r2
 800503c:	3b41      	subs	r3, #65	; 0x41
 800503e:	221f      	movs	r2, #31
 8005040:	fa02 f303 	lsl.w	r3, r2, r3
 8005044:	43da      	mvns	r2, r3
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	400a      	ands	r2, r1
 800504c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	b29b      	uxth	r3, r3
 800505a:	4618      	mov	r0, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	685a      	ldr	r2, [r3, #4]
 8005060:	4613      	mov	r3, r2
 8005062:	009b      	lsls	r3, r3, #2
 8005064:	4413      	add	r3, r2
 8005066:	3b41      	subs	r3, #65	; 0x41
 8005068:	fa00 f203 	lsl.w	r2, r0, r3
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	4a2a      	ldr	r2, [pc, #168]	; (8005124 <HAL_ADC_ConfigChannel+0x284>)
 800507a:	4293      	cmp	r3, r2
 800507c:	d10a      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x1f4>
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005086:	d105      	bne.n	8005094 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8005088:	4b27      	ldr	r3, [pc, #156]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	4a26      	ldr	r2, [pc, #152]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 800508e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8005092:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a22      	ldr	r2, [pc, #136]	; (8005124 <HAL_ADC_ConfigChannel+0x284>)
 800509a:	4293      	cmp	r3, r2
 800509c:	d109      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x212>
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	2b12      	cmp	r3, #18
 80050a4:	d105      	bne.n	80050b2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80050a6:	4b20      	ldr	r3, [pc, #128]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	4a1f      	ldr	r2, [pc, #124]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 80050ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80050b0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	4a1b      	ldr	r2, [pc, #108]	; (8005124 <HAL_ADC_ConfigChannel+0x284>)
 80050b8:	4293      	cmp	r3, r2
 80050ba:	d125      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x268>
 80050bc:	683b      	ldr	r3, [r7, #0]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <HAL_ADC_ConfigChannel+0x280>)
 80050c2:	4293      	cmp	r3, r2
 80050c4:	d003      	beq.n	80050ce <HAL_ADC_ConfigChannel+0x22e>
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	2b11      	cmp	r3, #17
 80050cc:	d11c      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80050ce:	4b16      	ldr	r3, [pc, #88]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 80050d0:	685b      	ldr	r3, [r3, #4]
 80050d2:	4a15      	ldr	r2, [pc, #84]	; (8005128 <HAL_ADC_ConfigChannel+0x288>)
 80050d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80050d8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a10      	ldr	r2, [pc, #64]	; (8005120 <HAL_ADC_ConfigChannel+0x280>)
 80050e0:	4293      	cmp	r3, r2
 80050e2:	d111      	bne.n	8005108 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80050e4:	4b11      	ldr	r3, [pc, #68]	; (800512c <HAL_ADC_ConfigChannel+0x28c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	4a11      	ldr	r2, [pc, #68]	; (8005130 <HAL_ADC_ConfigChannel+0x290>)
 80050ea:	fba2 2303 	umull	r2, r3, r2, r3
 80050ee:	0c9a      	lsrs	r2, r3, #18
 80050f0:	4613      	mov	r3, r2
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	005b      	lsls	r3, r3, #1
 80050f8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80050fa:	e002      	b.n	8005102 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	3b01      	subs	r3, #1
 8005100:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d1f9      	bne.n	80050fc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2200      	movs	r2, #0
 800510c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr
 800511e:	bf00      	nop
 8005120:	10000012 	.word	0x10000012
 8005124:	40012000 	.word	0x40012000
 8005128:	40012300 	.word	0x40012300
 800512c:	20000050 	.word	0x20000050
 8005130:	431bde83 	.word	0x431bde83

08005134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8005134:	b480      	push	{r7}
 8005136:	b083      	sub	sp, #12
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 800513c:	4b78      	ldr	r3, [pc, #480]	; (8005320 <ADC_Init+0x1ec>)
 800513e:	685b      	ldr	r3, [r3, #4]
 8005140:	4a77      	ldr	r2, [pc, #476]	; (8005320 <ADC_Init+0x1ec>)
 8005142:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8005146:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8005148:	4b75      	ldr	r3, [pc, #468]	; (8005320 <ADC_Init+0x1ec>)
 800514a:	685a      	ldr	r2, [r3, #4]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	4973      	ldr	r1, [pc, #460]	; (8005320 <ADC_Init+0x1ec>)
 8005152:	4313      	orrs	r3, r2
 8005154:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	685a      	ldr	r2, [r3, #4]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005164:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6859      	ldr	r1, [r3, #4]
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	691b      	ldr	r3, [r3, #16]
 8005170:	021a      	lsls	r2, r3, #8
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	430a      	orrs	r2, r1
 8005178:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	685a      	ldr	r2, [r3, #4]
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8005188:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	6859      	ldr	r1, [r3, #4]
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	689a      	ldr	r2, [r3, #8]
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	430a      	orrs	r2, r1
 800519a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	689a      	ldr	r2, [r3, #8]
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80051aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	6899      	ldr	r1, [r3, #8]
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	68da      	ldr	r2, [r3, #12]
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	430a      	orrs	r2, r1
 80051bc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	4a58      	ldr	r2, [pc, #352]	; (8005324 <ADC_Init+0x1f0>)
 80051c4:	4293      	cmp	r3, r2
 80051c6:	d022      	beq.n	800520e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	689a      	ldr	r2, [r3, #8]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80051d6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	6899      	ldr	r1, [r3, #8]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	430a      	orrs	r2, r1
 80051e8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	689a      	ldr	r2, [r3, #8]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80051f8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6899      	ldr	r1, [r3, #8]
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	609a      	str	r2, [r3, #8]
 800520c:	e00f      	b.n	800522e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	689a      	ldr	r2, [r3, #8]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800521c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	689a      	ldr	r2, [r3, #8]
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800522c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	f022 0202 	bic.w	r2, r2, #2
 800523c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	6899      	ldr	r1, [r3, #8]
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	699b      	ldr	r3, [r3, #24]
 8005248:	005a      	lsls	r2, r3, #1
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	430a      	orrs	r2, r1
 8005250:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d01b      	beq.n	8005294 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	685a      	ldr	r2, [r3, #4]
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800526a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	685a      	ldr	r2, [r3, #4]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800527a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	6859      	ldr	r1, [r3, #4]
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005286:	3b01      	subs	r3, #1
 8005288:	035a      	lsls	r2, r3, #13
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	430a      	orrs	r2, r1
 8005290:	605a      	str	r2, [r3, #4]
 8005292:	e007      	b.n	80052a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	685a      	ldr	r2, [r3, #4]
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80052a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80052b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	69db      	ldr	r3, [r3, #28]
 80052be:	3b01      	subs	r3, #1
 80052c0:	051a      	lsls	r2, r3, #20
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	430a      	orrs	r2, r1
 80052c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80052d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	6899      	ldr	r1, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80052e6:	025a      	lsls	r2, r3, #9
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	430a      	orrs	r2, r1
 80052ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	6899      	ldr	r1, [r3, #8]
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	695b      	ldr	r3, [r3, #20]
 800530a:	029a      	lsls	r2, r3, #10
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	430a      	orrs	r2, r1
 8005312:	609a      	str	r2, [r3, #8]
}
 8005314:	bf00      	nop
 8005316:	370c      	adds	r7, #12
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr
 8005320:	40012300 	.word	0x40012300
 8005324:	0f000001 	.word	0x0f000001

08005328 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005328:	b480      	push	{r7}
 800532a:	b085      	sub	sp, #20
 800532c:	af00      	add	r7, sp, #0
 800532e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	f003 0307 	and.w	r3, r3, #7
 8005336:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005338:	4b0b      	ldr	r3, [pc, #44]	; (8005368 <__NVIC_SetPriorityGrouping+0x40>)
 800533a:	68db      	ldr	r3, [r3, #12]
 800533c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800533e:	68ba      	ldr	r2, [r7, #8]
 8005340:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005344:	4013      	ands	r3, r2
 8005346:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005350:	4b06      	ldr	r3, [pc, #24]	; (800536c <__NVIC_SetPriorityGrouping+0x44>)
 8005352:	4313      	orrs	r3, r2
 8005354:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005356:	4a04      	ldr	r2, [pc, #16]	; (8005368 <__NVIC_SetPriorityGrouping+0x40>)
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	60d3      	str	r3, [r2, #12]
}
 800535c:	bf00      	nop
 800535e:	3714      	adds	r7, #20
 8005360:	46bd      	mov	sp, r7
 8005362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005366:	4770      	bx	lr
 8005368:	e000ed00 	.word	0xe000ed00
 800536c:	05fa0000 	.word	0x05fa0000

08005370 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005370:	b480      	push	{r7}
 8005372:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005374:	4b04      	ldr	r3, [pc, #16]	; (8005388 <__NVIC_GetPriorityGrouping+0x18>)
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	0a1b      	lsrs	r3, r3, #8
 800537a:	f003 0307 	and.w	r3, r3, #7
}
 800537e:	4618      	mov	r0, r3
 8005380:	46bd      	mov	sp, r7
 8005382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005386:	4770      	bx	lr
 8005388:	e000ed00 	.word	0xe000ed00

0800538c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800538c:	b480      	push	{r7}
 800538e:	b083      	sub	sp, #12
 8005390:	af00      	add	r7, sp, #0
 8005392:	4603      	mov	r3, r0
 8005394:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800539a:	2b00      	cmp	r3, #0
 800539c:	db0b      	blt.n	80053b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800539e:	79fb      	ldrb	r3, [r7, #7]
 80053a0:	f003 021f 	and.w	r2, r3, #31
 80053a4:	4907      	ldr	r1, [pc, #28]	; (80053c4 <__NVIC_EnableIRQ+0x38>)
 80053a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053aa:	095b      	lsrs	r3, r3, #5
 80053ac:	2001      	movs	r0, #1
 80053ae:	fa00 f202 	lsl.w	r2, r0, r2
 80053b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80053b6:	bf00      	nop
 80053b8:	370c      	adds	r7, #12
 80053ba:	46bd      	mov	sp, r7
 80053bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053c0:	4770      	bx	lr
 80053c2:	bf00      	nop
 80053c4:	e000e100 	.word	0xe000e100

080053c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b083      	sub	sp, #12
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	4603      	mov	r3, r0
 80053d0:	6039      	str	r1, [r7, #0]
 80053d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80053d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	db0a      	blt.n	80053f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	b2da      	uxtb	r2, r3
 80053e0:	490c      	ldr	r1, [pc, #48]	; (8005414 <__NVIC_SetPriority+0x4c>)
 80053e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80053e6:	0112      	lsls	r2, r2, #4
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	440b      	add	r3, r1
 80053ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80053f0:	e00a      	b.n	8005408 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80053f2:	683b      	ldr	r3, [r7, #0]
 80053f4:	b2da      	uxtb	r2, r3
 80053f6:	4908      	ldr	r1, [pc, #32]	; (8005418 <__NVIC_SetPriority+0x50>)
 80053f8:	79fb      	ldrb	r3, [r7, #7]
 80053fa:	f003 030f 	and.w	r3, r3, #15
 80053fe:	3b04      	subs	r3, #4
 8005400:	0112      	lsls	r2, r2, #4
 8005402:	b2d2      	uxtb	r2, r2
 8005404:	440b      	add	r3, r1
 8005406:	761a      	strb	r2, [r3, #24]
}
 8005408:	bf00      	nop
 800540a:	370c      	adds	r7, #12
 800540c:	46bd      	mov	sp, r7
 800540e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005412:	4770      	bx	lr
 8005414:	e000e100 	.word	0xe000e100
 8005418:	e000ed00 	.word	0xe000ed00

0800541c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800541c:	b480      	push	{r7}
 800541e:	b089      	sub	sp, #36	; 0x24
 8005420:	af00      	add	r7, sp, #0
 8005422:	60f8      	str	r0, [r7, #12]
 8005424:	60b9      	str	r1, [r7, #8]
 8005426:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	f003 0307 	and.w	r3, r3, #7
 800542e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	f1c3 0307 	rsb	r3, r3, #7
 8005436:	2b04      	cmp	r3, #4
 8005438:	bf28      	it	cs
 800543a:	2304      	movcs	r3, #4
 800543c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800543e:	69fb      	ldr	r3, [r7, #28]
 8005440:	3304      	adds	r3, #4
 8005442:	2b06      	cmp	r3, #6
 8005444:	d902      	bls.n	800544c <NVIC_EncodePriority+0x30>
 8005446:	69fb      	ldr	r3, [r7, #28]
 8005448:	3b03      	subs	r3, #3
 800544a:	e000      	b.n	800544e <NVIC_EncodePriority+0x32>
 800544c:	2300      	movs	r3, #0
 800544e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005450:	f04f 32ff 	mov.w	r2, #4294967295
 8005454:	69bb      	ldr	r3, [r7, #24]
 8005456:	fa02 f303 	lsl.w	r3, r2, r3
 800545a:	43da      	mvns	r2, r3
 800545c:	68bb      	ldr	r3, [r7, #8]
 800545e:	401a      	ands	r2, r3
 8005460:	697b      	ldr	r3, [r7, #20]
 8005462:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005464:	f04f 31ff 	mov.w	r1, #4294967295
 8005468:	697b      	ldr	r3, [r7, #20]
 800546a:	fa01 f303 	lsl.w	r3, r1, r3
 800546e:	43d9      	mvns	r1, r3
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005474:	4313      	orrs	r3, r2
         );
}
 8005476:	4618      	mov	r0, r3
 8005478:	3724      	adds	r7, #36	; 0x24
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005482:	b580      	push	{r7, lr}
 8005484:	b082      	sub	sp, #8
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7ff ff4c 	bl	8005328 <__NVIC_SetPriorityGrouping>
}
 8005490:	bf00      	nop
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005498:	b580      	push	{r7, lr}
 800549a:	b086      	sub	sp, #24
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	60b9      	str	r1, [r7, #8]
 80054a2:	607a      	str	r2, [r7, #4]
 80054a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80054a6:	2300      	movs	r3, #0
 80054a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80054aa:	f7ff ff61 	bl	8005370 <__NVIC_GetPriorityGrouping>
 80054ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80054b0:	687a      	ldr	r2, [r7, #4]
 80054b2:	68b9      	ldr	r1, [r7, #8]
 80054b4:	6978      	ldr	r0, [r7, #20]
 80054b6:	f7ff ffb1 	bl	800541c <NVIC_EncodePriority>
 80054ba:	4602      	mov	r2, r0
 80054bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80054c0:	4611      	mov	r1, r2
 80054c2:	4618      	mov	r0, r3
 80054c4:	f7ff ff80 	bl	80053c8 <__NVIC_SetPriority>
}
 80054c8:	bf00      	nop
 80054ca:	3718      	adds	r7, #24
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80054d0:	b580      	push	{r7, lr}
 80054d2:	b082      	sub	sp, #8
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	4603      	mov	r3, r0
 80054d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80054da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054de:	4618      	mov	r0, r3
 80054e0:	f7ff ff54 	bl	800538c <__NVIC_EnableIRQ>
}
 80054e4:	bf00      	nop
 80054e6:	3708      	adds	r7, #8
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d101      	bne.n	80054fe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80054fa:	2301      	movs	r3, #1
 80054fc:	e014      	b.n	8005528 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	791b      	ldrb	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	2b00      	cmp	r3, #0
 8005506:	d105      	bne.n	8005514 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2200      	movs	r2, #0
 800550c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f7fe fd5e 	bl	8003fd0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	2202      	movs	r2, #2
 8005518:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	2201      	movs	r2, #1
 8005524:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3708      	adds	r7, #8
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}

08005530 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b082      	sub	sp, #8
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800553e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005542:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005546:	d118      	bne.n	800557a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2204      	movs	r2, #4
 800554c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f043 0201 	orr.w	r2, r3, #1
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005562:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005572:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f825 	bl	80055c4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005580:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005584:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005588:	d118      	bne.n	80055bc <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2204      	movs	r2, #4
 800558e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	f043 0202 	orr.w	r2, r3, #2
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80055a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681a      	ldr	r2, [r3, #0]
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80055b4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80055b6:	6878      	ldr	r0, [r7, #4]
 80055b8:	f000 f85b 	bl	8005672 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80055bc:	bf00      	nop
 80055be:	3708      	adds	r7, #8
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80055d8:	b480      	push	{r7}
 80055da:	b087      	sub	sp, #28
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80055e4:	2300      	movs	r3, #0
 80055e6:	617b      	str	r3, [r7, #20]
 80055e8:	2300      	movs	r3, #0
 80055ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	795b      	ldrb	r3, [r3, #5]
 80055f0:	2b01      	cmp	r3, #1
 80055f2:	d101      	bne.n	80055f8 <HAL_DAC_ConfigChannel+0x20>
 80055f4:	2302      	movs	r3, #2
 80055f6:	e036      	b.n	8005666 <HAL_DAC_ConfigChannel+0x8e>
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	2201      	movs	r2, #1
 80055fc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	2202      	movs	r2, #2
 8005602:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800560c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	fa02 f303 	lsl.w	r3, r2, r3
 8005616:	43db      	mvns	r3, r3
 8005618:	697a      	ldr	r2, [r7, #20]
 800561a:	4013      	ands	r3, r2
 800561c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	681a      	ldr	r2, [r3, #0]
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	685b      	ldr	r3, [r3, #4]
 8005626:	4313      	orrs	r3, r2
 8005628:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800562a:	693a      	ldr	r2, [r7, #16]
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	fa02 f303 	lsl.w	r3, r2, r3
 8005632:	697a      	ldr	r2, [r7, #20]
 8005634:	4313      	orrs	r3, r2
 8005636:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	6819      	ldr	r1, [r3, #0]
 8005646:	22c0      	movs	r2, #192	; 0xc0
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	fa02 f303 	lsl.w	r3, r2, r3
 800564e:	43da      	mvns	r2, r3
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	400a      	ands	r2, r1
 8005656:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	2201      	movs	r2, #1
 800565c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	2200      	movs	r2, #0
 8005662:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005664:	2300      	movs	r3, #0
}
 8005666:	4618      	mov	r0, r3
 8005668:	371c      	adds	r7, #28
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005672:	b480      	push	{r7}
 8005674:	b083      	sub	sp, #12
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800567a:	bf00      	nop
 800567c:	370c      	adds	r7, #12
 800567e:	46bd      	mov	sp, r7
 8005680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005684:	4770      	bx	lr
	...

08005688 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005688:	b580      	push	{r7, lr}
 800568a:	b086      	sub	sp, #24
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005690:	2300      	movs	r3, #0
 8005692:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005694:	f7ff fa40 	bl	8004b18 <HAL_GetTick>
 8005698:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	2b00      	cmp	r3, #0
 800569e:	d101      	bne.n	80056a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80056a0:	2301      	movs	r3, #1
 80056a2:	e099      	b.n	80057d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	2202      	movs	r2, #2
 80056b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	681a      	ldr	r2, [r3, #0]
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f022 0201 	bic.w	r2, r2, #1
 80056c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056c4:	e00f      	b.n	80056e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80056c6:	f7ff fa27 	bl	8004b18 <HAL_GetTick>
 80056ca:	4602      	mov	r2, r0
 80056cc:	693b      	ldr	r3, [r7, #16]
 80056ce:	1ad3      	subs	r3, r2, r3
 80056d0:	2b05      	cmp	r3, #5
 80056d2:	d908      	bls.n	80056e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2220      	movs	r2, #32
 80056d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	2203      	movs	r2, #3
 80056de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80056e2:	2303      	movs	r3, #3
 80056e4:	e078      	b.n	80057d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f003 0301 	and.w	r3, r3, #1
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d1e8      	bne.n	80056c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80056fc:	697a      	ldr	r2, [r7, #20]
 80056fe:	4b38      	ldr	r3, [pc, #224]	; (80057e0 <HAL_DMA_Init+0x158>)
 8005700:	4013      	ands	r3, r2
 8005702:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	685a      	ldr	r2, [r3, #4]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005712:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	691b      	ldr	r3, [r3, #16]
 8005718:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800571e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	699b      	ldr	r3, [r3, #24]
 8005724:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800572a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6a1b      	ldr	r3, [r3, #32]
 8005730:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005732:	697a      	ldr	r2, [r7, #20]
 8005734:	4313      	orrs	r3, r2
 8005736:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800573c:	2b04      	cmp	r3, #4
 800573e:	d107      	bne.n	8005750 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005748:	4313      	orrs	r3, r2
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	697a      	ldr	r2, [r7, #20]
 8005756:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	695b      	ldr	r3, [r3, #20]
 800575e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005760:	697b      	ldr	r3, [r7, #20]
 8005762:	f023 0307 	bic.w	r3, r3, #7
 8005766:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	697a      	ldr	r2, [r7, #20]
 800576e:	4313      	orrs	r3, r2
 8005770:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	2b04      	cmp	r3, #4
 8005778:	d117      	bne.n	80057aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800577e:	697a      	ldr	r2, [r7, #20]
 8005780:	4313      	orrs	r3, r2
 8005782:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005788:	2b00      	cmp	r3, #0
 800578a:	d00e      	beq.n	80057aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f8df 	bl	8005950 <DMA_CheckFifoParam>
 8005792:	4603      	mov	r3, r0
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2240      	movs	r2, #64	; 0x40
 800579c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80057a6:	2301      	movs	r3, #1
 80057a8:	e016      	b.n	80057d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	697a      	ldr	r2, [r7, #20]
 80057b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80057b2:	6878      	ldr	r0, [r7, #4]
 80057b4:	f000 f896 	bl	80058e4 <DMA_CalcBaseAndBitshift>
 80057b8:	4603      	mov	r3, r0
 80057ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057c0:	223f      	movs	r2, #63	; 0x3f
 80057c2:	409a      	lsls	r2, r3
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	2201      	movs	r2, #1
 80057d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80057d6:	2300      	movs	r3, #0
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3718      	adds	r7, #24
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	f010803f 	.word	0xf010803f

080057e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	b084      	sub	sp, #16
 80057e8:	af00      	add	r7, sp, #0
 80057ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2b00      	cmp	r3, #0
 80057f0:	d101      	bne.n	80057f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	e050      	b.n	8005898 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80057fc:	b2db      	uxtb	r3, r3
 80057fe:	2b02      	cmp	r3, #2
 8005800:	d101      	bne.n	8005806 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005802:	2302      	movs	r3, #2
 8005804:	e048      	b.n	8005898 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	681a      	ldr	r2, [r3, #0]
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f022 0201 	bic.w	r2, r2, #1
 8005814:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	2200      	movs	r2, #0
 800581c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	2200      	movs	r2, #0
 8005824:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	2200      	movs	r2, #0
 800582c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2200      	movs	r2, #0
 8005834:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	2200      	movs	r2, #0
 800583c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	2221      	movs	r2, #33	; 0x21
 8005844:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005846:	6878      	ldr	r0, [r7, #4]
 8005848:	f000 f84c 	bl	80058e4 <DMA_CalcBaseAndBitshift>
 800584c:	4603      	mov	r3, r0
 800584e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005854:	223f      	movs	r2, #63	; 0x3f
 8005856:	409a      	lsls	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	2200      	movs	r2, #0
 8005866:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2200      	movs	r2, #0
 800586c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	2200      	movs	r2, #0
 8005872:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2200      	movs	r2, #0
 800587e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	2200      	movs	r2, #0
 8005892:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005896:	2300      	movs	r3, #0
}
 8005898:	4618      	mov	r0, r3
 800589a:	3710      	adds	r7, #16
 800589c:	46bd      	mov	sp, r7
 800589e:	bd80      	pop	{r7, pc}

080058a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b083      	sub	sp, #12
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80058ae:	b2db      	uxtb	r3, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d004      	beq.n	80058be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2280      	movs	r2, #128	; 0x80
 80058b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80058ba:	2301      	movs	r3, #1
 80058bc:	e00c      	b.n	80058d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2205      	movs	r2, #5
 80058c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f022 0201 	bic.w	r2, r2, #1
 80058d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80058d6:	2300      	movs	r3, #0
}
 80058d8:	4618      	mov	r0, r3
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b085      	sub	sp, #20
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	b2db      	uxtb	r3, r3
 80058f2:	3b10      	subs	r3, #16
 80058f4:	4a13      	ldr	r2, [pc, #76]	; (8005944 <DMA_CalcBaseAndBitshift+0x60>)
 80058f6:	fba2 2303 	umull	r2, r3, r2, r3
 80058fa:	091b      	lsrs	r3, r3, #4
 80058fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80058fe:	4a12      	ldr	r2, [pc, #72]	; (8005948 <DMA_CalcBaseAndBitshift+0x64>)
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	461a      	mov	r2, r3
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	2b03      	cmp	r3, #3
 8005910:	d908      	bls.n	8005924 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	461a      	mov	r2, r3
 8005918:	4b0c      	ldr	r3, [pc, #48]	; (800594c <DMA_CalcBaseAndBitshift+0x68>)
 800591a:	4013      	ands	r3, r2
 800591c:	1d1a      	adds	r2, r3, #4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	659a      	str	r2, [r3, #88]	; 0x58
 8005922:	e006      	b.n	8005932 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	461a      	mov	r2, r3
 800592a:	4b08      	ldr	r3, [pc, #32]	; (800594c <DMA_CalcBaseAndBitshift+0x68>)
 800592c:	4013      	ands	r3, r2
 800592e:	687a      	ldr	r2, [r7, #4]
 8005930:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005936:	4618      	mov	r0, r3
 8005938:	3714      	adds	r7, #20
 800593a:	46bd      	mov	sp, r7
 800593c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005940:	4770      	bx	lr
 8005942:	bf00      	nop
 8005944:	aaaaaaab 	.word	0xaaaaaaab
 8005948:	080106ec 	.word	0x080106ec
 800594c:	fffffc00 	.word	0xfffffc00

08005950 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005950:	b480      	push	{r7}
 8005952:	b085      	sub	sp, #20
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005960:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	699b      	ldr	r3, [r3, #24]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d11f      	bne.n	80059aa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	2b03      	cmp	r3, #3
 800596e:	d855      	bhi.n	8005a1c <DMA_CheckFifoParam+0xcc>
 8005970:	a201      	add	r2, pc, #4	; (adr r2, 8005978 <DMA_CheckFifoParam+0x28>)
 8005972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005976:	bf00      	nop
 8005978:	08005989 	.word	0x08005989
 800597c:	0800599b 	.word	0x0800599b
 8005980:	08005989 	.word	0x08005989
 8005984:	08005a1d 	.word	0x08005a1d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800598c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005990:	2b00      	cmp	r3, #0
 8005992:	d045      	beq.n	8005a20 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8005994:	2301      	movs	r3, #1
 8005996:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005998:	e042      	b.n	8005a20 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059a2:	d13f      	bne.n	8005a24 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80059a4:	2301      	movs	r3, #1
 80059a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059a8:	e03c      	b.n	8005a24 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	699b      	ldr	r3, [r3, #24]
 80059ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80059b2:	d121      	bne.n	80059f8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80059b4:	68bb      	ldr	r3, [r7, #8]
 80059b6:	2b03      	cmp	r3, #3
 80059b8:	d836      	bhi.n	8005a28 <DMA_CheckFifoParam+0xd8>
 80059ba:	a201      	add	r2, pc, #4	; (adr r2, 80059c0 <DMA_CheckFifoParam+0x70>)
 80059bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059c0:	080059d1 	.word	0x080059d1
 80059c4:	080059d7 	.word	0x080059d7
 80059c8:	080059d1 	.word	0x080059d1
 80059cc:	080059e9 	.word	0x080059e9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80059d0:	2301      	movs	r3, #1
 80059d2:	73fb      	strb	r3, [r7, #15]
      break;
 80059d4:	e02f      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d024      	beq.n	8005a2c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80059e2:	2301      	movs	r3, #1
 80059e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80059e6:	e021      	b.n	8005a2c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80059f0:	d11e      	bne.n	8005a30 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80059f2:	2301      	movs	r3, #1
 80059f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80059f6:	e01b      	b.n	8005a30 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d902      	bls.n	8005a04 <DMA_CheckFifoParam+0xb4>
 80059fe:	2b03      	cmp	r3, #3
 8005a00:	d003      	beq.n	8005a0a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005a02:	e018      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8005a04:	2301      	movs	r3, #1
 8005a06:	73fb      	strb	r3, [r7, #15]
      break;
 8005a08:	e015      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d00e      	beq.n	8005a34 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	73fb      	strb	r3, [r7, #15]
      break;
 8005a1a:	e00b      	b.n	8005a34 <DMA_CheckFifoParam+0xe4>
      break;
 8005a1c:	bf00      	nop
 8005a1e:	e00a      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;
 8005a20:	bf00      	nop
 8005a22:	e008      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;
 8005a24:	bf00      	nop
 8005a26:	e006      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;
 8005a28:	bf00      	nop
 8005a2a:	e004      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;
 8005a2c:	bf00      	nop
 8005a2e:	e002      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;   
 8005a30:	bf00      	nop
 8005a32:	e000      	b.n	8005a36 <DMA_CheckFifoParam+0xe6>
      break;
 8005a34:	bf00      	nop
    }
  } 
  
  return status; 
 8005a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b082      	sub	sp, #8
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d101      	bne.n	8005a56 <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005a52:	2301      	movs	r3, #1
 8005a54:	e039      	b.n	8005aca <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005a5c:	b2db      	uxtb	r3, r3
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d106      	bne.n	8005a70 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8005a6a:	6878      	ldr	r0, [r7, #4]
 8005a6c:	f7fe faf8 	bl	8004060 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	685a      	ldr	r2, [r3, #4]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	430a      	orrs	r2, r1
 8005a8c:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a94:	f023 0107 	bic.w	r1, r3, #7
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	689a      	ldr	r2, [r3, #8]
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	430a      	orrs	r2, r1
 8005aa2:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aaa:	4b0a      	ldr	r3, [pc, #40]	; (8005ad4 <HAL_DMA2D_Init+0x90>)
 8005aac:	4013      	ands	r3, r2
 8005aae:	687a      	ldr	r2, [r7, #4]
 8005ab0:	68d1      	ldr	r1, [r2, #12]
 8005ab2:	687a      	ldr	r2, [r7, #4]
 8005ab4:	6812      	ldr	r2, [r2, #0]
 8005ab6:	430b      	orrs	r3, r1
 8005ab8:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2201      	movs	r2, #1
 8005ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3708      	adds	r7, #8
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	bd80      	pop	{r7, pc}
 8005ad2:	bf00      	nop
 8005ad4:	ffffc000 	.word	0xffffc000

08005ad8 <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b086      	sub	sp, #24
 8005adc:	af02      	add	r7, sp, #8
 8005ade:	60f8      	str	r0, [r7, #12]
 8005ae0:	60b9      	str	r1, [r7, #8]
 8005ae2:	607a      	str	r2, [r7, #4]
 8005ae4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d101      	bne.n	8005af4 <HAL_DMA2D_Start+0x1c>
 8005af0:	2302      	movs	r3, #2
 8005af2:	e018      	b.n	8005b26 <HAL_DMA2D_Start+0x4e>
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2202      	movs	r2, #2
 8005b00:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005b04:	69bb      	ldr	r3, [r7, #24]
 8005b06:	9300      	str	r3, [sp, #0]
 8005b08:	683b      	ldr	r3, [r7, #0]
 8005b0a:	687a      	ldr	r2, [r7, #4]
 8005b0c:	68b9      	ldr	r1, [r7, #8]
 8005b0e:	68f8      	ldr	r0, [r7, #12]
 8005b10:	f000 f988 	bl	8005e24 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f042 0201 	orr.w	r2, r2, #1
 8005b22:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005b24:	2300      	movs	r3, #0
}
 8005b26:	4618      	mov	r0, r3
 8005b28:	3710      	adds	r7, #16
 8005b2a:	46bd      	mov	sp, r7
 8005b2c:	bd80      	pop	{r7, pc}

08005b2e <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005b2e:	b580      	push	{r7, lr}
 8005b30:	b086      	sub	sp, #24
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	f003 0301 	and.w	r3, r3, #1
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d056      	beq.n	8005bf8 <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 8005b4a:	f7fe ffe5 	bl	8004b18 <HAL_GetTick>
 8005b4e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005b50:	e04b      	b.n	8005bea <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d023      	beq.n	8005bac <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	f003 0320 	and.w	r3, r3, #32
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d005      	beq.n	8005b7a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b72:	f043 0202 	orr.w	r2, r3, #2
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f003 0301 	and.w	r3, r3, #1
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d005      	beq.n	8005b90 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b88:	f043 0201 	orr.w	r2, r3, #1
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2221      	movs	r2, #33	; 0x21
 8005b96:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2204      	movs	r2, #4
 8005b9c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e0a5      	b.n	8005cf8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bb2:	d01a      	beq.n	8005bea <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005bb4:	f7fe ffb0 	bl	8004b18 <HAL_GetTick>
 8005bb8:	4602      	mov	r2, r0
 8005bba:	697b      	ldr	r3, [r7, #20]
 8005bbc:	1ad3      	subs	r3, r2, r3
 8005bbe:	683a      	ldr	r2, [r7, #0]
 8005bc0:	429a      	cmp	r2, r3
 8005bc2:	d302      	bcc.n	8005bca <HAL_DMA2D_PollForTransfer+0x9c>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d10f      	bne.n	8005bea <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bce:	f043 0220 	orr.w	r2, r3, #32
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2203      	movs	r2, #3
 8005bda:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005be6:	2303      	movs	r3, #3
 8005be8:	e086      	b.n	8005cf8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	685b      	ldr	r3, [r3, #4]
 8005bf0:	f003 0302 	and.w	r3, r3, #2
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d0ac      	beq.n	8005b52 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	69db      	ldr	r3, [r3, #28]
 8005bfe:	f003 0320 	and.w	r3, r3, #32
 8005c02:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c0a:	f003 0320 	and.w	r3, r3, #32
 8005c0e:	693a      	ldr	r2, [r7, #16]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005c14:	693b      	ldr	r3, [r7, #16]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d061      	beq.n	8005cde <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005c1a:	f7fe ff7d 	bl	8004b18 <HAL_GetTick>
 8005c1e:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005c20:	e056      	b.n	8005cd0 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d02e      	beq.n	8005c92 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f003 0308 	and.w	r3, r3, #8
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d005      	beq.n	8005c4a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c42:	f043 0204 	orr.w	r2, r3, #4
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f003 0320 	and.w	r3, r3, #32
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d005      	beq.n	8005c60 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c58:	f043 0202 	orr.w	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f003 0301 	and.w	r3, r3, #1
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d005      	beq.n	8005c76 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005c6e:	f043 0201 	orr.w	r2, r3, #1
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	2229      	movs	r2, #41	; 0x29
 8005c7c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	2204      	movs	r2, #4
 8005c82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e032      	b.n	8005cf8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c98:	d01a      	beq.n	8005cd0 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005c9a:	f7fe ff3d 	bl	8004b18 <HAL_GetTick>
 8005c9e:	4602      	mov	r2, r0
 8005ca0:	697b      	ldr	r3, [r7, #20]
 8005ca2:	1ad3      	subs	r3, r2, r3
 8005ca4:	683a      	ldr	r2, [r7, #0]
 8005ca6:	429a      	cmp	r2, r3
 8005ca8:	d302      	bcc.n	8005cb0 <HAL_DMA2D_PollForTransfer+0x182>
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d10f      	bne.n	8005cd0 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cb4:	f043 0220 	orr.w	r2, r3, #32
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2203      	movs	r2, #3
 8005cc0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ccc:	2303      	movs	r3, #3
 8005cce:	e013      	b.n	8005cf8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f003 0310 	and.w	r3, r3, #16
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d0a1      	beq.n	8005c22 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	2212      	movs	r2, #18
 8005ce4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2201      	movs	r2, #1
 8005cea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005cf6:	2300      	movs	r3, #0
}
 8005cf8:	4618      	mov	r0, r3
 8005cfa:	3718      	adds	r7, #24
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}

08005d00 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b087      	sub	sp, #28
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
 8005d08:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	685b      	ldr	r3, [r3, #4]
 8005d0e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d18:	2b01      	cmp	r3, #1
 8005d1a:	d101      	bne.n	8005d20 <HAL_DMA2D_ConfigLayer+0x20>
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e079      	b.n	8005e14 <HAL_DMA2D_ConfigLayer+0x114>
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2202      	movs	r2, #2
 8005d2c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005d30:	683b      	ldr	r3, [r7, #0]
 8005d32:	011b      	lsls	r3, r3, #4
 8005d34:	3318      	adds	r3, #24
 8005d36:	687a      	ldr	r2, [r7, #4]
 8005d38:	4413      	add	r3, r2
 8005d3a:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005d3c:	693b      	ldr	r3, [r7, #16]
 8005d3e:	685a      	ldr	r2, [r3, #4]
 8005d40:	693b      	ldr	r3, [r7, #16]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	041b      	lsls	r3, r3, #16
 8005d46:	4313      	orrs	r3, r2
 8005d48:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005d4a:	4b35      	ldr	r3, [pc, #212]	; (8005e20 <HAL_DMA2D_ConfigLayer+0x120>)
 8005d4c:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	685b      	ldr	r3, [r3, #4]
 8005d52:	2b0a      	cmp	r3, #10
 8005d54:	d003      	beq.n	8005d5e <HAL_DMA2D_ConfigLayer+0x5e>
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	685b      	ldr	r3, [r3, #4]
 8005d5a:	2b09      	cmp	r3, #9
 8005d5c:	d107      	bne.n	8005d6e <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005d5e:	693b      	ldr	r3, [r7, #16]
 8005d60:	68db      	ldr	r3, [r3, #12]
 8005d62:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005d66:	697a      	ldr	r2, [r7, #20]
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	e005      	b.n	8005d7a <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005d6e:	693b      	ldr	r3, [r7, #16]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	697a      	ldr	r2, [r7, #20]
 8005d76:	4313      	orrs	r3, r2
 8005d78:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005d7a:	683b      	ldr	r3, [r7, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d120      	bne.n	8005dc2 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	43db      	mvns	r3, r3
 8005d8a:	ea02 0103 	and.w	r1, r2, r3
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	697a      	ldr	r2, [r7, #20]
 8005d94:	430a      	orrs	r2, r1
 8005d96:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	693a      	ldr	r2, [r7, #16]
 8005d9e:	6812      	ldr	r2, [r2, #0]
 8005da0:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	685b      	ldr	r3, [r3, #4]
 8005da6:	2b0a      	cmp	r3, #10
 8005da8:	d003      	beq.n	8005db2 <HAL_DMA2D_ConfigLayer+0xb2>
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	685b      	ldr	r3, [r3, #4]
 8005dae:	2b09      	cmp	r3, #9
 8005db0:	d127      	bne.n	8005e02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005db2:	693b      	ldr	r3, [r7, #16]
 8005db4:	68da      	ldr	r2, [r3, #12]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005dbe:	629a      	str	r2, [r3, #40]	; 0x28
 8005dc0:	e01f      	b.n	8005e02 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	69da      	ldr	r2, [r3, #28]
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	43db      	mvns	r3, r3
 8005dcc:	ea02 0103 	and.w	r1, r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	697a      	ldr	r2, [r7, #20]
 8005dd6:	430a      	orrs	r2, r1
 8005dd8:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	693a      	ldr	r2, [r7, #16]
 8005de0:	6812      	ldr	r2, [r2, #0]
 8005de2:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	2b0a      	cmp	r3, #10
 8005dea:	d003      	beq.n	8005df4 <HAL_DMA2D_ConfigLayer+0xf4>
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	685b      	ldr	r3, [r3, #4]
 8005df0:	2b09      	cmp	r3, #9
 8005df2:	d106      	bne.n	8005e02 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005df4:	693b      	ldr	r3, [r7, #16]
 8005df6:	68da      	ldr	r2, [r3, #12]
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005e00:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2201      	movs	r2, #1
 8005e06:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005e12:	2300      	movs	r3, #0
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	371c      	adds	r7, #28
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e1e:	4770      	bx	lr
 8005e20:	ff03000f 	.word	0xff03000f

08005e24 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005e24:	b480      	push	{r7}
 8005e26:	b08b      	sub	sp, #44	; 0x2c
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
 8005e30:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e38:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	041a      	lsls	r2, r3, #16
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	431a      	orrs	r2, r3
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	430a      	orrs	r2, r1
 8005e4a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	687a      	ldr	r2, [r7, #4]
 8005e52:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	685b      	ldr	r3, [r3, #4]
 8005e58:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005e5c:	d174      	bne.n	8005f48 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005e5e:	68bb      	ldr	r3, [r7, #8]
 8005e60:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005e64:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005e66:	68bb      	ldr	r3, [r7, #8]
 8005e68:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005e6c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005e6e:	68bb      	ldr	r3, [r7, #8]
 8005e70:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005e74:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	b2db      	uxtb	r3, r3
 8005e7a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	689b      	ldr	r3, [r3, #8]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d108      	bne.n	8005e96 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005e84:	69ba      	ldr	r2, [r7, #24]
 8005e86:	69fb      	ldr	r3, [r7, #28]
 8005e88:	431a      	orrs	r2, r3
 8005e8a:	6a3b      	ldr	r3, [r7, #32]
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	697a      	ldr	r2, [r7, #20]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	627b      	str	r3, [r7, #36]	; 0x24
 8005e94:	e053      	b.n	8005f3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	2b01      	cmp	r3, #1
 8005e9c:	d106      	bne.n	8005eac <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005e9e:	69ba      	ldr	r2, [r7, #24]
 8005ea0:	69fb      	ldr	r3, [r7, #28]
 8005ea2:	4313      	orrs	r3, r2
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	627b      	str	r3, [r7, #36]	; 0x24
 8005eaa:	e048      	b.n	8005f3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005eac:	68fb      	ldr	r3, [r7, #12]
 8005eae:	689b      	ldr	r3, [r3, #8]
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d111      	bne.n	8005ed8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005eb4:	69fb      	ldr	r3, [r7, #28]
 8005eb6:	0cdb      	lsrs	r3, r3, #19
 8005eb8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005eba:	69bb      	ldr	r3, [r7, #24]
 8005ebc:	0a9b      	lsrs	r3, r3, #10
 8005ebe:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005ec0:	697b      	ldr	r3, [r7, #20]
 8005ec2:	08db      	lsrs	r3, r3, #3
 8005ec4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005ec6:	69bb      	ldr	r3, [r7, #24]
 8005ec8:	015a      	lsls	r2, r3, #5
 8005eca:	69fb      	ldr	r3, [r7, #28]
 8005ecc:	02db      	lsls	r3, r3, #11
 8005ece:	4313      	orrs	r3, r2
 8005ed0:	697a      	ldr	r2, [r7, #20]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8005ed6:	e032      	b.n	8005f3e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	689b      	ldr	r3, [r3, #8]
 8005edc:	2b03      	cmp	r3, #3
 8005ede:	d117      	bne.n	8005f10 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ee0:	6a3b      	ldr	r3, [r7, #32]
 8005ee2:	0fdb      	lsrs	r3, r3, #31
 8005ee4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005ee6:	69fb      	ldr	r3, [r7, #28]
 8005ee8:	0cdb      	lsrs	r3, r3, #19
 8005eea:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005eec:	69bb      	ldr	r3, [r7, #24]
 8005eee:	0adb      	lsrs	r3, r3, #11
 8005ef0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005ef2:	697b      	ldr	r3, [r7, #20]
 8005ef4:	08db      	lsrs	r3, r3, #3
 8005ef6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005ef8:	69bb      	ldr	r3, [r7, #24]
 8005efa:	015a      	lsls	r2, r3, #5
 8005efc:	69fb      	ldr	r3, [r7, #28]
 8005efe:	029b      	lsls	r3, r3, #10
 8005f00:	431a      	orrs	r2, r3
 8005f02:	6a3b      	ldr	r3, [r7, #32]
 8005f04:	03db      	lsls	r3, r3, #15
 8005f06:	4313      	orrs	r3, r2
 8005f08:	697a      	ldr	r2, [r7, #20]
 8005f0a:	4313      	orrs	r3, r2
 8005f0c:	627b      	str	r3, [r7, #36]	; 0x24
 8005f0e:	e016      	b.n	8005f3e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005f10:	6a3b      	ldr	r3, [r7, #32]
 8005f12:	0f1b      	lsrs	r3, r3, #28
 8005f14:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005f16:	69fb      	ldr	r3, [r7, #28]
 8005f18:	0d1b      	lsrs	r3, r3, #20
 8005f1a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005f1c:	69bb      	ldr	r3, [r7, #24]
 8005f1e:	0b1b      	lsrs	r3, r3, #12
 8005f20:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005f22:	697b      	ldr	r3, [r7, #20]
 8005f24:	091b      	lsrs	r3, r3, #4
 8005f26:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005f28:	69bb      	ldr	r3, [r7, #24]
 8005f2a:	011a      	lsls	r2, r3, #4
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	021b      	lsls	r3, r3, #8
 8005f30:	431a      	orrs	r2, r3
 8005f32:	6a3b      	ldr	r3, [r7, #32]
 8005f34:	031b      	lsls	r3, r3, #12
 8005f36:	4313      	orrs	r3, r2
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f44:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005f46:	e003      	b.n	8005f50 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	68ba      	ldr	r2, [r7, #8]
 8005f4e:	60da      	str	r2, [r3, #12]
}
 8005f50:	bf00      	nop
 8005f52:	372c      	adds	r7, #44	; 0x2c
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b089      	sub	sp, #36	; 0x24
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005f6a:	2300      	movs	r3, #0
 8005f6c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005f72:	2300      	movs	r3, #0
 8005f74:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005f76:	2300      	movs	r3, #0
 8005f78:	61fb      	str	r3, [r7, #28]
 8005f7a:	e175      	b.n	8006268 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005f7c:	2201      	movs	r2, #1
 8005f7e:	69fb      	ldr	r3, [r7, #28]
 8005f80:	fa02 f303 	lsl.w	r3, r2, r3
 8005f84:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	697a      	ldr	r2, [r7, #20]
 8005f8c:	4013      	ands	r3, r2
 8005f8e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005f90:	693a      	ldr	r2, [r7, #16]
 8005f92:	697b      	ldr	r3, [r7, #20]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	f040 8164 	bne.w	8006262 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005f9a:	683b      	ldr	r3, [r7, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	2b01      	cmp	r3, #1
 8005fa0:	d00b      	beq.n	8005fba <HAL_GPIO_Init+0x5e>
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	685b      	ldr	r3, [r3, #4]
 8005fa6:	2b02      	cmp	r3, #2
 8005fa8:	d007      	beq.n	8005fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005fae:	2b11      	cmp	r3, #17
 8005fb0:	d003      	beq.n	8005fba <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b12      	cmp	r3, #18
 8005fb8:	d130      	bne.n	800601c <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005fc0:	69fb      	ldr	r3, [r7, #28]
 8005fc2:	005b      	lsls	r3, r3, #1
 8005fc4:	2203      	movs	r2, #3
 8005fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8005fca:	43db      	mvns	r3, r3
 8005fcc:	69ba      	ldr	r2, [r7, #24]
 8005fce:	4013      	ands	r3, r2
 8005fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005fd2:	683b      	ldr	r3, [r7, #0]
 8005fd4:	68da      	ldr	r2, [r3, #12]
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	005b      	lsls	r3, r3, #1
 8005fda:	fa02 f303 	lsl.w	r3, r2, r3
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	69ba      	ldr	r2, [r7, #24]
 8005fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	685b      	ldr	r3, [r3, #4]
 8005fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005ff0:	2201      	movs	r2, #1
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ff8:	43db      	mvns	r3, r3
 8005ffa:	69ba      	ldr	r2, [r7, #24]
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	685b      	ldr	r3, [r3, #4]
 8006004:	091b      	lsrs	r3, r3, #4
 8006006:	f003 0201 	and.w	r2, r3, #1
 800600a:	69fb      	ldr	r3, [r7, #28]
 800600c:	fa02 f303 	lsl.w	r3, r2, r3
 8006010:	69ba      	ldr	r2, [r7, #24]
 8006012:	4313      	orrs	r3, r2
 8006014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	69ba      	ldr	r2, [r7, #24]
 800601a:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	68db      	ldr	r3, [r3, #12]
 8006020:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006022:	69fb      	ldr	r3, [r7, #28]
 8006024:	005b      	lsls	r3, r3, #1
 8006026:	2203      	movs	r2, #3
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	43db      	mvns	r3, r3
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	4013      	ands	r3, r2
 8006032:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	69fb      	ldr	r3, [r7, #28]
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	69ba      	ldr	r2, [r7, #24]
 8006042:	4313      	orrs	r3, r2
 8006044:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69ba      	ldr	r2, [r7, #24]
 800604a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	2b02      	cmp	r3, #2
 8006052:	d003      	beq.n	800605c <HAL_GPIO_Init+0x100>
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	685b      	ldr	r3, [r3, #4]
 8006058:	2b12      	cmp	r3, #18
 800605a:	d123      	bne.n	80060a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800605c:	69fb      	ldr	r3, [r7, #28]
 800605e:	08da      	lsrs	r2, r3, #3
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	3208      	adds	r2, #8
 8006064:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800606a:	69fb      	ldr	r3, [r7, #28]
 800606c:	f003 0307 	and.w	r3, r3, #7
 8006070:	009b      	lsls	r3, r3, #2
 8006072:	220f      	movs	r2, #15
 8006074:	fa02 f303 	lsl.w	r3, r2, r3
 8006078:	43db      	mvns	r3, r3
 800607a:	69ba      	ldr	r2, [r7, #24]
 800607c:	4013      	ands	r3, r2
 800607e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	691a      	ldr	r2, [r3, #16]
 8006084:	69fb      	ldr	r3, [r7, #28]
 8006086:	f003 0307 	and.w	r3, r3, #7
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	69ba      	ldr	r2, [r7, #24]
 8006092:	4313      	orrs	r3, r2
 8006094:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006096:	69fb      	ldr	r3, [r7, #28]
 8006098:	08da      	lsrs	r2, r3, #3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	3208      	adds	r2, #8
 800609e:	69b9      	ldr	r1, [r7, #24]
 80060a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80060aa:	69fb      	ldr	r3, [r7, #28]
 80060ac:	005b      	lsls	r3, r3, #1
 80060ae:	2203      	movs	r2, #3
 80060b0:	fa02 f303 	lsl.w	r3, r2, r3
 80060b4:	43db      	mvns	r3, r3
 80060b6:	69ba      	ldr	r2, [r7, #24]
 80060b8:	4013      	ands	r3, r2
 80060ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	685b      	ldr	r3, [r3, #4]
 80060c0:	f003 0203 	and.w	r2, r3, #3
 80060c4:	69fb      	ldr	r3, [r7, #28]
 80060c6:	005b      	lsls	r3, r3, #1
 80060c8:	fa02 f303 	lsl.w	r3, r2, r3
 80060cc:	69ba      	ldr	r2, [r7, #24]
 80060ce:	4313      	orrs	r3, r2
 80060d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	69ba      	ldr	r2, [r7, #24]
 80060d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	f000 80be 	beq.w	8006262 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80060e6:	4b65      	ldr	r3, [pc, #404]	; (800627c <HAL_GPIO_Init+0x320>)
 80060e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060ea:	4a64      	ldr	r2, [pc, #400]	; (800627c <HAL_GPIO_Init+0x320>)
 80060ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80060f0:	6453      	str	r3, [r2, #68]	; 0x44
 80060f2:	4b62      	ldr	r3, [pc, #392]	; (800627c <HAL_GPIO_Init+0x320>)
 80060f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060fa:	60fb      	str	r3, [r7, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80060fe:	4a60      	ldr	r2, [pc, #384]	; (8006280 <HAL_GPIO_Init+0x324>)
 8006100:	69fb      	ldr	r3, [r7, #28]
 8006102:	089b      	lsrs	r3, r3, #2
 8006104:	3302      	adds	r3, #2
 8006106:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800610a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800610c:	69fb      	ldr	r3, [r7, #28]
 800610e:	f003 0303 	and.w	r3, r3, #3
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	220f      	movs	r2, #15
 8006116:	fa02 f303 	lsl.w	r3, r2, r3
 800611a:	43db      	mvns	r3, r3
 800611c:	69ba      	ldr	r2, [r7, #24]
 800611e:	4013      	ands	r3, r2
 8006120:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a57      	ldr	r2, [pc, #348]	; (8006284 <HAL_GPIO_Init+0x328>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d037      	beq.n	800619a <HAL_GPIO_Init+0x23e>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a56      	ldr	r2, [pc, #344]	; (8006288 <HAL_GPIO_Init+0x32c>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d031      	beq.n	8006196 <HAL_GPIO_Init+0x23a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a55      	ldr	r2, [pc, #340]	; (800628c <HAL_GPIO_Init+0x330>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d02b      	beq.n	8006192 <HAL_GPIO_Init+0x236>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a54      	ldr	r2, [pc, #336]	; (8006290 <HAL_GPIO_Init+0x334>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d025      	beq.n	800618e <HAL_GPIO_Init+0x232>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a53      	ldr	r2, [pc, #332]	; (8006294 <HAL_GPIO_Init+0x338>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d01f      	beq.n	800618a <HAL_GPIO_Init+0x22e>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a52      	ldr	r2, [pc, #328]	; (8006298 <HAL_GPIO_Init+0x33c>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d019      	beq.n	8006186 <HAL_GPIO_Init+0x22a>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a51      	ldr	r2, [pc, #324]	; (800629c <HAL_GPIO_Init+0x340>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d013      	beq.n	8006182 <HAL_GPIO_Init+0x226>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a50      	ldr	r2, [pc, #320]	; (80062a0 <HAL_GPIO_Init+0x344>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d00d      	beq.n	800617e <HAL_GPIO_Init+0x222>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	4a4f      	ldr	r2, [pc, #316]	; (80062a4 <HAL_GPIO_Init+0x348>)
 8006166:	4293      	cmp	r3, r2
 8006168:	d007      	beq.n	800617a <HAL_GPIO_Init+0x21e>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	4a4e      	ldr	r2, [pc, #312]	; (80062a8 <HAL_GPIO_Init+0x34c>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d101      	bne.n	8006176 <HAL_GPIO_Init+0x21a>
 8006172:	2309      	movs	r3, #9
 8006174:	e012      	b.n	800619c <HAL_GPIO_Init+0x240>
 8006176:	230a      	movs	r3, #10
 8006178:	e010      	b.n	800619c <HAL_GPIO_Init+0x240>
 800617a:	2308      	movs	r3, #8
 800617c:	e00e      	b.n	800619c <HAL_GPIO_Init+0x240>
 800617e:	2307      	movs	r3, #7
 8006180:	e00c      	b.n	800619c <HAL_GPIO_Init+0x240>
 8006182:	2306      	movs	r3, #6
 8006184:	e00a      	b.n	800619c <HAL_GPIO_Init+0x240>
 8006186:	2305      	movs	r3, #5
 8006188:	e008      	b.n	800619c <HAL_GPIO_Init+0x240>
 800618a:	2304      	movs	r3, #4
 800618c:	e006      	b.n	800619c <HAL_GPIO_Init+0x240>
 800618e:	2303      	movs	r3, #3
 8006190:	e004      	b.n	800619c <HAL_GPIO_Init+0x240>
 8006192:	2302      	movs	r3, #2
 8006194:	e002      	b.n	800619c <HAL_GPIO_Init+0x240>
 8006196:	2301      	movs	r3, #1
 8006198:	e000      	b.n	800619c <HAL_GPIO_Init+0x240>
 800619a:	2300      	movs	r3, #0
 800619c:	69fa      	ldr	r2, [r7, #28]
 800619e:	f002 0203 	and.w	r2, r2, #3
 80061a2:	0092      	lsls	r2, r2, #2
 80061a4:	4093      	lsls	r3, r2
 80061a6:	69ba      	ldr	r2, [r7, #24]
 80061a8:	4313      	orrs	r3, r2
 80061aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 80061ac:	4934      	ldr	r1, [pc, #208]	; (8006280 <HAL_GPIO_Init+0x324>)
 80061ae:	69fb      	ldr	r3, [r7, #28]
 80061b0:	089b      	lsrs	r3, r3, #2
 80061b2:	3302      	adds	r3, #2
 80061b4:	69ba      	ldr	r2, [r7, #24]
 80061b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80061ba:	4b3c      	ldr	r3, [pc, #240]	; (80062ac <HAL_GPIO_Init+0x350>)
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061c0:	693b      	ldr	r3, [r7, #16]
 80061c2:	43db      	mvns	r3, r3
 80061c4:	69ba      	ldr	r2, [r7, #24]
 80061c6:	4013      	ands	r3, r2
 80061c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d003      	beq.n	80061de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80061d6:	69ba      	ldr	r2, [r7, #24]
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4313      	orrs	r3, r2
 80061dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80061de:	4a33      	ldr	r2, [pc, #204]	; (80062ac <HAL_GPIO_Init+0x350>)
 80061e0:	69bb      	ldr	r3, [r7, #24]
 80061e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80061e4:	4b31      	ldr	r3, [pc, #196]	; (80062ac <HAL_GPIO_Init+0x350>)
 80061e6:	685b      	ldr	r3, [r3, #4]
 80061e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	43db      	mvns	r3, r3
 80061ee:	69ba      	ldr	r2, [r7, #24]
 80061f0:	4013      	ands	r3, r2
 80061f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80061f4:	683b      	ldr	r3, [r7, #0]
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006200:	69ba      	ldr	r2, [r7, #24]
 8006202:	693b      	ldr	r3, [r7, #16]
 8006204:	4313      	orrs	r3, r2
 8006206:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006208:	4a28      	ldr	r2, [pc, #160]	; (80062ac <HAL_GPIO_Init+0x350>)
 800620a:	69bb      	ldr	r3, [r7, #24]
 800620c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800620e:	4b27      	ldr	r3, [pc, #156]	; (80062ac <HAL_GPIO_Init+0x350>)
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006214:	693b      	ldr	r3, [r7, #16]
 8006216:	43db      	mvns	r3, r3
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	4013      	ands	r3, r2
 800621c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006226:	2b00      	cmp	r3, #0
 8006228:	d003      	beq.n	8006232 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800622a:	69ba      	ldr	r2, [r7, #24]
 800622c:	693b      	ldr	r3, [r7, #16]
 800622e:	4313      	orrs	r3, r2
 8006230:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006232:	4a1e      	ldr	r2, [pc, #120]	; (80062ac <HAL_GPIO_Init+0x350>)
 8006234:	69bb      	ldr	r3, [r7, #24]
 8006236:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006238:	4b1c      	ldr	r3, [pc, #112]	; (80062ac <HAL_GPIO_Init+0x350>)
 800623a:	68db      	ldr	r3, [r3, #12]
 800623c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	43db      	mvns	r3, r3
 8006242:	69ba      	ldr	r2, [r7, #24]
 8006244:	4013      	ands	r3, r2
 8006246:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	685b      	ldr	r3, [r3, #4]
 800624c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006250:	2b00      	cmp	r3, #0
 8006252:	d003      	beq.n	800625c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006254:	69ba      	ldr	r2, [r7, #24]
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	4313      	orrs	r3, r2
 800625a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800625c:	4a13      	ldr	r2, [pc, #76]	; (80062ac <HAL_GPIO_Init+0x350>)
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006262:	69fb      	ldr	r3, [r7, #28]
 8006264:	3301      	adds	r3, #1
 8006266:	61fb      	str	r3, [r7, #28]
 8006268:	69fb      	ldr	r3, [r7, #28]
 800626a:	2b0f      	cmp	r3, #15
 800626c:	f67f ae86 	bls.w	8005f7c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006270:	bf00      	nop
 8006272:	3724      	adds	r7, #36	; 0x24
 8006274:	46bd      	mov	sp, r7
 8006276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627a:	4770      	bx	lr
 800627c:	40023800 	.word	0x40023800
 8006280:	40013800 	.word	0x40013800
 8006284:	40020000 	.word	0x40020000
 8006288:	40020400 	.word	0x40020400
 800628c:	40020800 	.word	0x40020800
 8006290:	40020c00 	.word	0x40020c00
 8006294:	40021000 	.word	0x40021000
 8006298:	40021400 	.word	0x40021400
 800629c:	40021800 	.word	0x40021800
 80062a0:	40021c00 	.word	0x40021c00
 80062a4:	40022000 	.word	0x40022000
 80062a8:	40022400 	.word	0x40022400
 80062ac:	40013c00 	.word	0x40013c00

080062b0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b087      	sub	sp, #28
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
 80062b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80062ba:	2300      	movs	r3, #0
 80062bc:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80062c2:	2300      	movs	r3, #0
 80062c4:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
 80062ca:	e0d9      	b.n	8006480 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80062cc:	2201      	movs	r2, #1
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	fa02 f303 	lsl.w	r3, r2, r3
 80062d4:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80062d6:	683a      	ldr	r2, [r7, #0]
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	4013      	ands	r3, r2
 80062dc:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80062de:	68fa      	ldr	r2, [r7, #12]
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	f040 80c9 	bne.w	800647a <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80062e8:	4a6a      	ldr	r2, [pc, #424]	; (8006494 <HAL_GPIO_DeInit+0x1e4>)
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	089b      	lsrs	r3, r3, #2
 80062ee:	3302      	adds	r3, #2
 80062f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062f4:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80062f6:	697b      	ldr	r3, [r7, #20]
 80062f8:	f003 0303 	and.w	r3, r3, #3
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	220f      	movs	r2, #15
 8006300:	fa02 f303 	lsl.w	r3, r2, r3
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	4013      	ands	r3, r2
 8006308:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a62      	ldr	r2, [pc, #392]	; (8006498 <HAL_GPIO_DeInit+0x1e8>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d037      	beq.n	8006382 <HAL_GPIO_DeInit+0xd2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a61      	ldr	r2, [pc, #388]	; (800649c <HAL_GPIO_DeInit+0x1ec>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d031      	beq.n	800637e <HAL_GPIO_DeInit+0xce>
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	4a60      	ldr	r2, [pc, #384]	; (80064a0 <HAL_GPIO_DeInit+0x1f0>)
 800631e:	4293      	cmp	r3, r2
 8006320:	d02b      	beq.n	800637a <HAL_GPIO_DeInit+0xca>
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	4a5f      	ldr	r2, [pc, #380]	; (80064a4 <HAL_GPIO_DeInit+0x1f4>)
 8006326:	4293      	cmp	r3, r2
 8006328:	d025      	beq.n	8006376 <HAL_GPIO_DeInit+0xc6>
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	4a5e      	ldr	r2, [pc, #376]	; (80064a8 <HAL_GPIO_DeInit+0x1f8>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d01f      	beq.n	8006372 <HAL_GPIO_DeInit+0xc2>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a5d      	ldr	r2, [pc, #372]	; (80064ac <HAL_GPIO_DeInit+0x1fc>)
 8006336:	4293      	cmp	r3, r2
 8006338:	d019      	beq.n	800636e <HAL_GPIO_DeInit+0xbe>
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	4a5c      	ldr	r2, [pc, #368]	; (80064b0 <HAL_GPIO_DeInit+0x200>)
 800633e:	4293      	cmp	r3, r2
 8006340:	d013      	beq.n	800636a <HAL_GPIO_DeInit+0xba>
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	4a5b      	ldr	r2, [pc, #364]	; (80064b4 <HAL_GPIO_DeInit+0x204>)
 8006346:	4293      	cmp	r3, r2
 8006348:	d00d      	beq.n	8006366 <HAL_GPIO_DeInit+0xb6>
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	4a5a      	ldr	r2, [pc, #360]	; (80064b8 <HAL_GPIO_DeInit+0x208>)
 800634e:	4293      	cmp	r3, r2
 8006350:	d007      	beq.n	8006362 <HAL_GPIO_DeInit+0xb2>
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	4a59      	ldr	r2, [pc, #356]	; (80064bc <HAL_GPIO_DeInit+0x20c>)
 8006356:	4293      	cmp	r3, r2
 8006358:	d101      	bne.n	800635e <HAL_GPIO_DeInit+0xae>
 800635a:	2309      	movs	r3, #9
 800635c:	e012      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800635e:	230a      	movs	r3, #10
 8006360:	e010      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006362:	2308      	movs	r3, #8
 8006364:	e00e      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006366:	2307      	movs	r3, #7
 8006368:	e00c      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800636a:	2306      	movs	r3, #6
 800636c:	e00a      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800636e:	2305      	movs	r3, #5
 8006370:	e008      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006372:	2304      	movs	r3, #4
 8006374:	e006      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006376:	2303      	movs	r3, #3
 8006378:	e004      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800637a:	2302      	movs	r3, #2
 800637c:	e002      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 800637e:	2301      	movs	r3, #1
 8006380:	e000      	b.n	8006384 <HAL_GPIO_DeInit+0xd4>
 8006382:	2300      	movs	r3, #0
 8006384:	697a      	ldr	r2, [r7, #20]
 8006386:	f002 0203 	and.w	r2, r2, #3
 800638a:	0092      	lsls	r2, r2, #2
 800638c:	4093      	lsls	r3, r2
 800638e:	68ba      	ldr	r2, [r7, #8]
 8006390:	429a      	cmp	r2, r3
 8006392:	d132      	bne.n	80063fa <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8006394:	4b4a      	ldr	r3, [pc, #296]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 8006396:	681a      	ldr	r2, [r3, #0]
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	43db      	mvns	r3, r3
 800639c:	4948      	ldr	r1, [pc, #288]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 800639e:	4013      	ands	r3, r2
 80063a0:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80063a2:	4b47      	ldr	r3, [pc, #284]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063a4:	685a      	ldr	r2, [r3, #4]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	43db      	mvns	r3, r3
 80063aa:	4945      	ldr	r1, [pc, #276]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063ac:	4013      	ands	r3, r2
 80063ae:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80063b0:	4b43      	ldr	r3, [pc, #268]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063b2:	689a      	ldr	r2, [r3, #8]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	43db      	mvns	r3, r3
 80063b8:	4941      	ldr	r1, [pc, #260]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063ba:	4013      	ands	r3, r2
 80063bc:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80063be:	4b40      	ldr	r3, [pc, #256]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063c0:	68da      	ldr	r2, [r3, #12]
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	43db      	mvns	r3, r3
 80063c6:	493e      	ldr	r1, [pc, #248]	; (80064c0 <HAL_GPIO_DeInit+0x210>)
 80063c8:	4013      	ands	r3, r2
 80063ca:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80063cc:	697b      	ldr	r3, [r7, #20]
 80063ce:	f003 0303 	and.w	r3, r3, #3
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	220f      	movs	r2, #15
 80063d6:	fa02 f303 	lsl.w	r3, r2, r3
 80063da:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80063dc:	4a2d      	ldr	r2, [pc, #180]	; (8006494 <HAL_GPIO_DeInit+0x1e4>)
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	089b      	lsrs	r3, r3, #2
 80063e2:	3302      	adds	r3, #2
 80063e4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	43da      	mvns	r2, r3
 80063ec:	4829      	ldr	r0, [pc, #164]	; (8006494 <HAL_GPIO_DeInit+0x1e4>)
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	089b      	lsrs	r3, r3, #2
 80063f2:	400a      	ands	r2, r1
 80063f4:	3302      	adds	r3, #2
 80063f6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	005b      	lsls	r3, r3, #1
 8006402:	2103      	movs	r1, #3
 8006404:	fa01 f303 	lsl.w	r3, r1, r3
 8006408:	43db      	mvns	r3, r3
 800640a:	401a      	ands	r2, r3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	08da      	lsrs	r2, r3, #3
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	3208      	adds	r2, #8
 8006418:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	220f      	movs	r2, #15
 8006426:	fa02 f303 	lsl.w	r3, r2, r3
 800642a:	43db      	mvns	r3, r3
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	08d2      	lsrs	r2, r2, #3
 8006430:	4019      	ands	r1, r3
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	3208      	adds	r2, #8
 8006436:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	68da      	ldr	r2, [r3, #12]
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	005b      	lsls	r3, r3, #1
 8006442:	2103      	movs	r1, #3
 8006444:	fa01 f303 	lsl.w	r3, r1, r3
 8006448:	43db      	mvns	r3, r3
 800644a:	401a      	ands	r2, r3
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685a      	ldr	r2, [r3, #4]
 8006454:	2101      	movs	r1, #1
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	fa01 f303 	lsl.w	r3, r1, r3
 800645c:	43db      	mvns	r3, r3
 800645e:	401a      	ands	r2, r3
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	689a      	ldr	r2, [r3, #8]
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	005b      	lsls	r3, r3, #1
 800646c:	2103      	movs	r1, #3
 800646e:	fa01 f303 	lsl.w	r3, r1, r3
 8006472:	43db      	mvns	r3, r3
 8006474:	401a      	ands	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 800647a:	697b      	ldr	r3, [r7, #20]
 800647c:	3301      	adds	r3, #1
 800647e:	617b      	str	r3, [r7, #20]
 8006480:	697b      	ldr	r3, [r7, #20]
 8006482:	2b0f      	cmp	r3, #15
 8006484:	f67f af22 	bls.w	80062cc <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006488:	bf00      	nop
 800648a:	371c      	adds	r7, #28
 800648c:	46bd      	mov	sp, r7
 800648e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006492:	4770      	bx	lr
 8006494:	40013800 	.word	0x40013800
 8006498:	40020000 	.word	0x40020000
 800649c:	40020400 	.word	0x40020400
 80064a0:	40020800 	.word	0x40020800
 80064a4:	40020c00 	.word	0x40020c00
 80064a8:	40021000 	.word	0x40021000
 80064ac:	40021400 	.word	0x40021400
 80064b0:	40021800 	.word	0x40021800
 80064b4:	40021c00 	.word	0x40021c00
 80064b8:	40022000 	.word	0x40022000
 80064bc:	40022400 	.word	0x40022400
 80064c0:	40013c00 	.word	0x40013c00

080064c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b085      	sub	sp, #20
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
 80064cc:	460b      	mov	r3, r1
 80064ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	691a      	ldr	r2, [r3, #16]
 80064d4:	887b      	ldrh	r3, [r7, #2]
 80064d6:	4013      	ands	r3, r2
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d002      	beq.n	80064e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80064dc:	2301      	movs	r3, #1
 80064de:	73fb      	strb	r3, [r7, #15]
 80064e0:	e001      	b.n	80064e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80064e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80064e8:	4618      	mov	r0, r3
 80064ea:	3714      	adds	r7, #20
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	807b      	strh	r3, [r7, #2]
 8006500:	4613      	mov	r3, r2
 8006502:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006504:	787b      	ldrb	r3, [r7, #1]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d003      	beq.n	8006512 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800650a:	887a      	ldrh	r2, [r7, #2]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006510:	e003      	b.n	800651a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006512:	887b      	ldrh	r3, [r7, #2]
 8006514:	041a      	lsls	r2, r3, #16
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	619a      	str	r2, [r3, #24]
}
 800651a:	bf00      	nop
 800651c:	370c      	adds	r7, #12
 800651e:	46bd      	mov	sp, r7
 8006520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006524:	4770      	bx	lr
	...

08006528 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b082      	sub	sp, #8
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	2b00      	cmp	r3, #0
 8006534:	d101      	bne.n	800653a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006536:	2301      	movs	r3, #1
 8006538:	e07f      	b.n	800663a <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006540:	b2db      	uxtb	r3, r3
 8006542:	2b00      	cmp	r3, #0
 8006544:	d106      	bne.n	8006554 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fd fda6 	bl	80040a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	2224      	movs	r2, #36	; 0x24
 8006558:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0201 	bic.w	r2, r2, #1
 800656a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	685a      	ldr	r2, [r3, #4]
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006578:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689a      	ldr	r2, [r3, #8]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006588:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	2b01      	cmp	r3, #1
 8006590:	d107      	bne.n	80065a2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	689a      	ldr	r2, [r3, #8]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800659e:	609a      	str	r2, [r3, #8]
 80065a0:	e006      	b.n	80065b0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	689a      	ldr	r2, [r3, #8]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80065ae:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	68db      	ldr	r3, [r3, #12]
 80065b4:	2b02      	cmp	r3, #2
 80065b6:	d104      	bne.n	80065c2 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80065c0:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	6859      	ldr	r1, [r3, #4]
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	4b1d      	ldr	r3, [pc, #116]	; (8006644 <HAL_I2C_Init+0x11c>)
 80065ce:	430b      	orrs	r3, r1
 80065d0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68da      	ldr	r2, [r3, #12]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80065e0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	691a      	ldr	r2, [r3, #16]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	ea42 0103 	orr.w	r1, r2, r3
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	021a      	lsls	r2, r3, #8
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	69d9      	ldr	r1, [r3, #28]
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	6a1a      	ldr	r2, [r3, #32]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	430a      	orrs	r2, r1
 800660a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2200      	movs	r2, #0
 8006620:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	2220      	movs	r2, #32
 8006626:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2200      	movs	r2, #0
 800662e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3708      	adds	r7, #8
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}
 8006642:	bf00      	nop
 8006644:	02008000 	.word	0x02008000

08006648 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b082      	sub	sp, #8
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d101      	bne.n	800665a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006656:	2301      	movs	r3, #1
 8006658:	e021      	b.n	800669e <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	2224      	movs	r2, #36	; 0x24
 800665e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	681a      	ldr	r2, [r3, #0]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f022 0201 	bic.w	r2, r2, #1
 8006670:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8006672:	6878      	ldr	r0, [r7, #4]
 8006674:	f7fd fd8c 	bl	8004190 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2200      	movs	r2, #0
 8006682:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2200      	movs	r2, #0
 8006690:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 800669c:	2300      	movs	r3, #0
}
 800669e:	4618      	mov	r0, r3
 80066a0:	3708      	adds	r7, #8
 80066a2:	46bd      	mov	sp, r7
 80066a4:	bd80      	pop	{r7, pc}
	...

080066a8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af02      	add	r7, sp, #8
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	4608      	mov	r0, r1
 80066b2:	4611      	mov	r1, r2
 80066b4:	461a      	mov	r2, r3
 80066b6:	4603      	mov	r3, r0
 80066b8:	817b      	strh	r3, [r7, #10]
 80066ba:	460b      	mov	r3, r1
 80066bc:	813b      	strh	r3, [r7, #8]
 80066be:	4613      	mov	r3, r2
 80066c0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b20      	cmp	r3, #32
 80066cc:	f040 80f9 	bne.w	80068c2 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	6a3b      	ldr	r3, [r7, #32]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_I2C_Mem_Write+0x34>
 80066d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d105      	bne.n	80066e8 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e2:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e0ed      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ee:	2b01      	cmp	r3, #1
 80066f0:	d101      	bne.n	80066f6 <HAL_I2C_Mem_Write+0x4e>
 80066f2:	2302      	movs	r3, #2
 80066f4:	e0e6      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2201      	movs	r2, #1
 80066fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80066fe:	f7fe fa0b 	bl	8004b18 <HAL_GetTick>
 8006702:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	9300      	str	r3, [sp, #0]
 8006708:	2319      	movs	r3, #25
 800670a:	2201      	movs	r2, #1
 800670c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f000 fad1 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006716:	4603      	mov	r3, r0
 8006718:	2b00      	cmp	r3, #0
 800671a:	d001      	beq.n	8006720 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800671c:	2301      	movs	r3, #1
 800671e:	e0d1      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	2221      	movs	r2, #33	; 0x21
 8006724:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2240      	movs	r2, #64	; 0x40
 800672c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	2200      	movs	r2, #0
 8006734:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	6a3a      	ldr	r2, [r7, #32]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006740:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006748:	88f8      	ldrh	r0, [r7, #6]
 800674a:	893a      	ldrh	r2, [r7, #8]
 800674c:	8979      	ldrh	r1, [r7, #10]
 800674e:	697b      	ldr	r3, [r7, #20]
 8006750:	9301      	str	r3, [sp, #4]
 8006752:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	4603      	mov	r3, r0
 8006758:	68f8      	ldr	r0, [r7, #12]
 800675a:	f000 f9e1 	bl	8006b20 <I2C_RequestMemoryWrite>
 800675e:	4603      	mov	r3, r0
 8006760:	2b00      	cmp	r3, #0
 8006762:	d005      	beq.n	8006770 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	e0a9      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006774:	b29b      	uxth	r3, r3
 8006776:	2bff      	cmp	r3, #255	; 0xff
 8006778:	d90e      	bls.n	8006798 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	22ff      	movs	r2, #255	; 0xff
 800677e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006784:	b2da      	uxtb	r2, r3
 8006786:	8979      	ldrh	r1, [r7, #10]
 8006788:	2300      	movs	r3, #0
 800678a:	9300      	str	r3, [sp, #0]
 800678c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006790:	68f8      	ldr	r0, [r7, #12]
 8006792:	f000 fbb3 	bl	8006efc <I2C_TransferConfig>
 8006796:	e00f      	b.n	80067b8 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800679c:	b29a      	uxth	r2, r3
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	8979      	ldrh	r1, [r7, #10]
 80067aa:	2300      	movs	r3, #0
 80067ac:	9300      	str	r3, [sp, #0]
 80067ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 fba2 	bl	8006efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80067b8:	697a      	ldr	r2, [r7, #20]
 80067ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80067bc:	68f8      	ldr	r0, [r7, #12]
 80067be:	f000 fabb 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d001      	beq.n	80067cc <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80067c8:	2301      	movs	r3, #1
 80067ca:	e07b      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067d0:	781a      	ldrb	r2, [r3, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067dc:	1c5a      	adds	r2, r3, #1
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067e6:	b29b      	uxth	r3, r3
 80067e8:	3b01      	subs	r3, #1
 80067ea:	b29a      	uxth	r2, r3
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067f4:	3b01      	subs	r3, #1
 80067f6:	b29a      	uxth	r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006800:	b29b      	uxth	r3, r3
 8006802:	2b00      	cmp	r3, #0
 8006804:	d034      	beq.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d130      	bne.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	9300      	str	r3, [sp, #0]
 8006812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006814:	2200      	movs	r2, #0
 8006816:	2180      	movs	r1, #128	; 0x80
 8006818:	68f8      	ldr	r0, [r7, #12]
 800681a:	f000 fa4d 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 800681e:	4603      	mov	r3, r0
 8006820:	2b00      	cmp	r3, #0
 8006822:	d001      	beq.n	8006828 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006824:	2301      	movs	r3, #1
 8006826:	e04d      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682c:	b29b      	uxth	r3, r3
 800682e:	2bff      	cmp	r3, #255	; 0xff
 8006830:	d90e      	bls.n	8006850 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	22ff      	movs	r2, #255	; 0xff
 8006836:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800683c:	b2da      	uxtb	r2, r3
 800683e:	8979      	ldrh	r1, [r7, #10]
 8006840:	2300      	movs	r3, #0
 8006842:	9300      	str	r3, [sp, #0]
 8006844:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb57 	bl	8006efc <I2C_TransferConfig>
 800684e:	e00f      	b.n	8006870 <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006854:	b29a      	uxth	r2, r3
 8006856:	68fb      	ldr	r3, [r7, #12]
 8006858:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800685e:	b2da      	uxtb	r2, r3
 8006860:	8979      	ldrh	r1, [r7, #10]
 8006862:	2300      	movs	r3, #0
 8006864:	9300      	str	r3, [sp, #0]
 8006866:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 fb46 	bl	8006efc <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006874:	b29b      	uxth	r3, r3
 8006876:	2b00      	cmp	r3, #0
 8006878:	d19e      	bne.n	80067b8 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800687a:	697a      	ldr	r2, [r7, #20]
 800687c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800687e:	68f8      	ldr	r0, [r7, #12]
 8006880:	f000 fa9a 	bl	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006884:	4603      	mov	r3, r0
 8006886:	2b00      	cmp	r3, #0
 8006888:	d001      	beq.n	800688e <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e01a      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	2220      	movs	r2, #32
 8006894:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	6859      	ldr	r1, [r3, #4]
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	681a      	ldr	r2, [r3, #0]
 80068a0:	4b0a      	ldr	r3, [pc, #40]	; (80068cc <HAL_I2C_Mem_Write+0x224>)
 80068a2:	400b      	ands	r3, r1
 80068a4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	2220      	movs	r2, #32
 80068aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2200      	movs	r2, #0
 80068b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2200      	movs	r2, #0
 80068ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068be:	2300      	movs	r3, #0
 80068c0:	e000      	b.n	80068c4 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80068c2:	2302      	movs	r3, #2
  }
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	fe00e800 	.word	0xfe00e800

080068d0 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b088      	sub	sp, #32
 80068d4:	af02      	add	r7, sp, #8
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	4608      	mov	r0, r1
 80068da:	4611      	mov	r1, r2
 80068dc:	461a      	mov	r2, r3
 80068de:	4603      	mov	r3, r0
 80068e0:	817b      	strh	r3, [r7, #10]
 80068e2:	460b      	mov	r3, r1
 80068e4:	813b      	strh	r3, [r7, #8]
 80068e6:	4613      	mov	r3, r2
 80068e8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068f0:	b2db      	uxtb	r3, r3
 80068f2:	2b20      	cmp	r3, #32
 80068f4:	f040 80fd 	bne.w	8006af2 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80068f8:	6a3b      	ldr	r3, [r7, #32]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <HAL_I2C_Mem_Read+0x34>
 80068fe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006900:	2b00      	cmp	r3, #0
 8006902:	d105      	bne.n	8006910 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	f44f 7200 	mov.w	r2, #512	; 0x200
 800690a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800690c:	2301      	movs	r3, #1
 800690e:	e0f1      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006916:	2b01      	cmp	r3, #1
 8006918:	d101      	bne.n	800691e <HAL_I2C_Mem_Read+0x4e>
 800691a:	2302      	movs	r3, #2
 800691c:	e0ea      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2201      	movs	r2, #1
 8006922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006926:	f7fe f8f7 	bl	8004b18 <HAL_GetTick>
 800692a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800692c:	697b      	ldr	r3, [r7, #20]
 800692e:	9300      	str	r3, [sp, #0]
 8006930:	2319      	movs	r3, #25
 8006932:	2201      	movs	r2, #1
 8006934:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006938:	68f8      	ldr	r0, [r7, #12]
 800693a:	f000 f9bd 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 800693e:	4603      	mov	r3, r0
 8006940:	2b00      	cmp	r3, #0
 8006942:	d001      	beq.n	8006948 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006944:	2301      	movs	r3, #1
 8006946:	e0d5      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006948:	68fb      	ldr	r3, [r7, #12]
 800694a:	2222      	movs	r2, #34	; 0x22
 800694c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	2240      	movs	r2, #64	; 0x40
 8006954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	2200      	movs	r2, #0
 800695c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6a3a      	ldr	r2, [r7, #32]
 8006962:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006968:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2200      	movs	r2, #0
 800696e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006970:	88f8      	ldrh	r0, [r7, #6]
 8006972:	893a      	ldrh	r2, [r7, #8]
 8006974:	8979      	ldrh	r1, [r7, #10]
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	9301      	str	r3, [sp, #4]
 800697a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	4603      	mov	r3, r0
 8006980:	68f8      	ldr	r0, [r7, #12]
 8006982:	f000 f921 	bl	8006bc8 <I2C_RequestMemoryRead>
 8006986:	4603      	mov	r3, r0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d005      	beq.n	8006998 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	2200      	movs	r2, #0
 8006990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	e0ad      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800699c:	b29b      	uxth	r3, r3
 800699e:	2bff      	cmp	r3, #255	; 0xff
 80069a0:	d90e      	bls.n	80069c0 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	22ff      	movs	r2, #255	; 0xff
 80069a6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ac:	b2da      	uxtb	r2, r3
 80069ae:	8979      	ldrh	r1, [r7, #10]
 80069b0:	4b52      	ldr	r3, [pc, #328]	; (8006afc <HAL_I2C_Mem_Read+0x22c>)
 80069b2:	9300      	str	r3, [sp, #0]
 80069b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	f000 fa9f 	bl	8006efc <I2C_TransferConfig>
 80069be:	e00f      	b.n	80069e0 <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069c4:	b29a      	uxth	r2, r3
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ce:	b2da      	uxtb	r2, r3
 80069d0:	8979      	ldrh	r1, [r7, #10]
 80069d2:	4b4a      	ldr	r3, [pc, #296]	; (8006afc <HAL_I2C_Mem_Read+0x22c>)
 80069d4:	9300      	str	r3, [sp, #0]
 80069d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069da:	68f8      	ldr	r0, [r7, #12]
 80069dc:	f000 fa8e 	bl	8006efc <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80069e0:	697b      	ldr	r3, [r7, #20]
 80069e2:	9300      	str	r3, [sp, #0]
 80069e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80069e6:	2200      	movs	r2, #0
 80069e8:	2104      	movs	r1, #4
 80069ea:	68f8      	ldr	r0, [r7, #12]
 80069ec:	f000 f964 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 80069f0:	4603      	mov	r3, r0
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d001      	beq.n	80069fa <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80069f6:	2301      	movs	r3, #1
 80069f8:	e07c      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a04:	b2d2      	uxtb	r2, r2
 8006a06:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0c:	1c5a      	adds	r2, r3, #1
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a16:	3b01      	subs	r3, #1
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	3b01      	subs	r3, #1
 8006a26:	b29a      	uxth	r2, r3
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d034      	beq.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d130      	bne.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006a3e:	697b      	ldr	r3, [r7, #20]
 8006a40:	9300      	str	r3, [sp, #0]
 8006a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a44:	2200      	movs	r2, #0
 8006a46:	2180      	movs	r1, #128	; 0x80
 8006a48:	68f8      	ldr	r0, [r7, #12]
 8006a4a:	f000 f935 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006a4e:	4603      	mov	r3, r0
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d001      	beq.n	8006a58 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006a54:	2301      	movs	r3, #1
 8006a56:	e04d      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a5c:	b29b      	uxth	r3, r3
 8006a5e:	2bff      	cmp	r3, #255	; 0xff
 8006a60:	d90e      	bls.n	8006a80 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	22ff      	movs	r2, #255	; 0xff
 8006a66:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6c:	b2da      	uxtb	r2, r3
 8006a6e:	8979      	ldrh	r1, [r7, #10]
 8006a70:	2300      	movs	r3, #0
 8006a72:	9300      	str	r3, [sp, #0]
 8006a74:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006a78:	68f8      	ldr	r0, [r7, #12]
 8006a7a:	f000 fa3f 	bl	8006efc <I2C_TransferConfig>
 8006a7e:	e00f      	b.n	8006aa0 <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a84:	b29a      	uxth	r2, r3
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006a8a:	68fb      	ldr	r3, [r7, #12]
 8006a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a8e:	b2da      	uxtb	r2, r3
 8006a90:	8979      	ldrh	r1, [r7, #10]
 8006a92:	2300      	movs	r3, #0
 8006a94:	9300      	str	r3, [sp, #0]
 8006a96:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006a9a:	68f8      	ldr	r0, [r7, #12]
 8006a9c:	f000 fa2e 	bl	8006efc <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa4:	b29b      	uxth	r3, r3
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d19a      	bne.n	80069e0 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006aaa:	697a      	ldr	r2, [r7, #20]
 8006aac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006aae:	68f8      	ldr	r0, [r7, #12]
 8006ab0:	f000 f982 	bl	8006db8 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8006aba:	2301      	movs	r3, #1
 8006abc:	e01a      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2220      	movs	r2, #32
 8006ac4:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	6859      	ldr	r1, [r3, #4]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <HAL_I2C_Mem_Read+0x230>)
 8006ad2:	400b      	ands	r3, r1
 8006ad4:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2220      	movs	r2, #32
 8006ada:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	e000      	b.n	8006af4 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8006af2:	2302      	movs	r3, #2
  }
}
 8006af4:	4618      	mov	r0, r3
 8006af6:	3718      	adds	r7, #24
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	80002400 	.word	0x80002400
 8006b00:	fe00e800 	.word	0xfe00e800

08006b04 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b480      	push	{r7}
 8006b06:	b083      	sub	sp, #12
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006b12:	b2db      	uxtb	r3, r3
}
 8006b14:	4618      	mov	r0, r3
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr

08006b20 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006b20:	b580      	push	{r7, lr}
 8006b22:	b086      	sub	sp, #24
 8006b24:	af02      	add	r7, sp, #8
 8006b26:	60f8      	str	r0, [r7, #12]
 8006b28:	4608      	mov	r0, r1
 8006b2a:	4611      	mov	r1, r2
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4603      	mov	r3, r0
 8006b30:	817b      	strh	r3, [r7, #10]
 8006b32:	460b      	mov	r3, r1
 8006b34:	813b      	strh	r3, [r7, #8]
 8006b36:	4613      	mov	r3, r2
 8006b38:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006b3a:	88fb      	ldrh	r3, [r7, #6]
 8006b3c:	b2da      	uxtb	r2, r3
 8006b3e:	8979      	ldrh	r1, [r7, #10]
 8006b40:	4b20      	ldr	r3, [pc, #128]	; (8006bc4 <I2C_RequestMemoryWrite+0xa4>)
 8006b42:	9300      	str	r3, [sp, #0]
 8006b44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006b48:	68f8      	ldr	r0, [r7, #12]
 8006b4a:	f000 f9d7 	bl	8006efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b4e:	69fa      	ldr	r2, [r7, #28]
 8006b50:	69b9      	ldr	r1, [r7, #24]
 8006b52:	68f8      	ldr	r0, [r7, #12]
 8006b54:	f000 f8f0 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b58:	4603      	mov	r3, r0
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d001      	beq.n	8006b62 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	e02c      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006b62:	88fb      	ldrh	r3, [r7, #6]
 8006b64:	2b01      	cmp	r3, #1
 8006b66:	d105      	bne.n	8006b74 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b68:	893b      	ldrh	r3, [r7, #8]
 8006b6a:	b2da      	uxtb	r2, r3
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	629a      	str	r2, [r3, #40]	; 0x28
 8006b72:	e015      	b.n	8006ba0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006b74:	893b      	ldrh	r3, [r7, #8]
 8006b76:	0a1b      	lsrs	r3, r3, #8
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	b2da      	uxtb	r2, r3
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b82:	69fa      	ldr	r2, [r7, #28]
 8006b84:	69b9      	ldr	r1, [r7, #24]
 8006b86:	68f8      	ldr	r0, [r7, #12]
 8006b88:	f000 f8d6 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006b8c:	4603      	mov	r3, r0
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d001      	beq.n	8006b96 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e012      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006b96:	893b      	ldrh	r3, [r7, #8]
 8006b98:	b2da      	uxtb	r2, r3
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8006ba0:	69fb      	ldr	r3, [r7, #28]
 8006ba2:	9300      	str	r3, [sp, #0]
 8006ba4:	69bb      	ldr	r3, [r7, #24]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2180      	movs	r1, #128	; 0x80
 8006baa:	68f8      	ldr	r0, [r7, #12]
 8006bac:	f000 f884 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006bb0:	4603      	mov	r3, r0
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d001      	beq.n	8006bba <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e000      	b.n	8006bbc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}
 8006bc4:	80002000 	.word	0x80002000

08006bc8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b086      	sub	sp, #24
 8006bcc:	af02      	add	r7, sp, #8
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	4608      	mov	r0, r1
 8006bd2:	4611      	mov	r1, r2
 8006bd4:	461a      	mov	r2, r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	817b      	strh	r3, [r7, #10]
 8006bda:	460b      	mov	r3, r1
 8006bdc:	813b      	strh	r3, [r7, #8]
 8006bde:	4613      	mov	r3, r2
 8006be0:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8006be2:	88fb      	ldrh	r3, [r7, #6]
 8006be4:	b2da      	uxtb	r2, r3
 8006be6:	8979      	ldrh	r1, [r7, #10]
 8006be8:	4b20      	ldr	r3, [pc, #128]	; (8006c6c <I2C_RequestMemoryRead+0xa4>)
 8006bea:	9300      	str	r3, [sp, #0]
 8006bec:	2300      	movs	r3, #0
 8006bee:	68f8      	ldr	r0, [r7, #12]
 8006bf0:	f000 f984 	bl	8006efc <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bf4:	69fa      	ldr	r2, [r7, #28]
 8006bf6:	69b9      	ldr	r1, [r7, #24]
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f89d 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006bfe:	4603      	mov	r3, r0
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d001      	beq.n	8006c08 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006c04:	2301      	movs	r3, #1
 8006c06:	e02c      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006c08:	88fb      	ldrh	r3, [r7, #6]
 8006c0a:	2b01      	cmp	r3, #1
 8006c0c:	d105      	bne.n	8006c1a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c0e:	893b      	ldrh	r3, [r7, #8]
 8006c10:	b2da      	uxtb	r2, r3
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	629a      	str	r2, [r3, #40]	; 0x28
 8006c18:	e015      	b.n	8006c46 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006c1a:	893b      	ldrh	r3, [r7, #8]
 8006c1c:	0a1b      	lsrs	r3, r3, #8
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	b2da      	uxtb	r2, r3
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006c28:	69fa      	ldr	r2, [r7, #28]
 8006c2a:	69b9      	ldr	r1, [r7, #24]
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f883 	bl	8006d38 <I2C_WaitOnTXISFlagUntilTimeout>
 8006c32:	4603      	mov	r3, r0
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d001      	beq.n	8006c3c <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e012      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006c3c:	893b      	ldrh	r3, [r7, #8]
 8006c3e:	b2da      	uxtb	r2, r3
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006c46:	69fb      	ldr	r3, [r7, #28]
 8006c48:	9300      	str	r3, [sp, #0]
 8006c4a:	69bb      	ldr	r3, [r7, #24]
 8006c4c:	2200      	movs	r2, #0
 8006c4e:	2140      	movs	r1, #64	; 0x40
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f831 	bl	8006cb8 <I2C_WaitOnFlagUntilTimeout>
 8006c56:	4603      	mov	r3, r0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d001      	beq.n	8006c60 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006c5c:	2301      	movs	r3, #1
 8006c5e:	e000      	b.n	8006c62 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006c60:	2300      	movs	r3, #0
}
 8006c62:	4618      	mov	r0, r3
 8006c64:	3710      	adds	r7, #16
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	80002000 	.word	0x80002000

08006c70 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b083      	sub	sp, #12
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	699b      	ldr	r3, [r3, #24]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d103      	bne.n	8006c8e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	699b      	ldr	r3, [r3, #24]
 8006c94:	f003 0301 	and.w	r3, r3, #1
 8006c98:	2b01      	cmp	r3, #1
 8006c9a:	d007      	beq.n	8006cac <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	699a      	ldr	r2, [r3, #24]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	f042 0201 	orr.w	r2, r2, #1
 8006caa:	619a      	str	r2, [r3, #24]
  }
}
 8006cac:	bf00      	nop
 8006cae:	370c      	adds	r7, #12
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr

08006cb8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b084      	sub	sp, #16
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	603b      	str	r3, [r7, #0]
 8006cc4:	4613      	mov	r3, r2
 8006cc6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006cc8:	e022      	b.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd0:	d01e      	beq.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cd2:	f7fd ff21 	bl	8004b18 <HAL_GetTick>
 8006cd6:	4602      	mov	r2, r0
 8006cd8:	69bb      	ldr	r3, [r7, #24]
 8006cda:	1ad3      	subs	r3, r2, r3
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d302      	bcc.n	8006ce8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d113      	bne.n	8006d10 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cec:	f043 0220 	orr.w	r2, r3, #32
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	2200      	movs	r2, #0
 8006d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e00f      	b.n	8006d30 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	699a      	ldr	r2, [r3, #24]
 8006d16:	68bb      	ldr	r3, [r7, #8]
 8006d18:	4013      	ands	r3, r2
 8006d1a:	68ba      	ldr	r2, [r7, #8]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	bf0c      	ite	eq
 8006d20:	2301      	moveq	r3, #1
 8006d22:	2300      	movne	r3, #0
 8006d24:	b2db      	uxtb	r3, r3
 8006d26:	461a      	mov	r2, r3
 8006d28:	79fb      	ldrb	r3, [r7, #7]
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d0cd      	beq.n	8006cca <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d2e:	2300      	movs	r3, #0
}
 8006d30:	4618      	mov	r0, r3
 8006d32:	3710      	adds	r7, #16
 8006d34:	46bd      	mov	sp, r7
 8006d36:	bd80      	pop	{r7, pc}

08006d38 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006d38:	b580      	push	{r7, lr}
 8006d3a:	b084      	sub	sp, #16
 8006d3c:	af00      	add	r7, sp, #0
 8006d3e:	60f8      	str	r0, [r7, #12]
 8006d40:	60b9      	str	r1, [r7, #8]
 8006d42:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006d44:	e02c      	b.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006d46:	687a      	ldr	r2, [r7, #4]
 8006d48:	68b9      	ldr	r1, [r7, #8]
 8006d4a:	68f8      	ldr	r0, [r7, #12]
 8006d4c:	f000 f870 	bl	8006e30 <I2C_IsAcknowledgeFailed>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d001      	beq.n	8006d5a <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e02a      	b.n	8006db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d5a:	68bb      	ldr	r3, [r7, #8]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d01e      	beq.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006d62:	f7fd fed9 	bl	8004b18 <HAL_GetTick>
 8006d66:	4602      	mov	r2, r0
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	1ad3      	subs	r3, r2, r3
 8006d6c:	68ba      	ldr	r2, [r7, #8]
 8006d6e:	429a      	cmp	r2, r3
 8006d70:	d302      	bcc.n	8006d78 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006d72:	68bb      	ldr	r3, [r7, #8]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d113      	bne.n	8006da0 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d7c:	f043 0220 	orr.w	r2, r3, #32
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	2220      	movs	r2, #32
 8006d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	2200      	movs	r2, #0
 8006d98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006d9c:	2301      	movs	r3, #1
 8006d9e:	e007      	b.n	8006db0 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	699b      	ldr	r3, [r3, #24]
 8006da6:	f003 0302 	and.w	r3, r3, #2
 8006daa:	2b02      	cmp	r3, #2
 8006dac:	d1cb      	bne.n	8006d46 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006dae:	2300      	movs	r3, #0
}
 8006db0:	4618      	mov	r0, r3
 8006db2:	3710      	adds	r7, #16
 8006db4:	46bd      	mov	sp, r7
 8006db6:	bd80      	pop	{r7, pc}

08006db8 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	60b9      	str	r1, [r7, #8]
 8006dc2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006dc4:	e028      	b.n	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006dc6:	687a      	ldr	r2, [r7, #4]
 8006dc8:	68b9      	ldr	r1, [r7, #8]
 8006dca:	68f8      	ldr	r0, [r7, #12]
 8006dcc:	f000 f830 	bl	8006e30 <I2C_IsAcknowledgeFailed>
 8006dd0:	4603      	mov	r3, r0
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d001      	beq.n	8006dda <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006dd6:	2301      	movs	r3, #1
 8006dd8:	e026      	b.n	8006e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006dda:	f7fd fe9d 	bl	8004b18 <HAL_GetTick>
 8006dde:	4602      	mov	r2, r0
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	1ad3      	subs	r3, r2, r3
 8006de4:	68ba      	ldr	r2, [r7, #8]
 8006de6:	429a      	cmp	r2, r3
 8006de8:	d302      	bcc.n	8006df0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d113      	bne.n	8006e18 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df4:	f043 0220 	orr.w	r2, r3, #32
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	2220      	movs	r2, #32
 8006e00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2200      	movs	r2, #0
 8006e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2200      	movs	r2, #0
 8006e10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006e14:	2301      	movs	r3, #1
 8006e16:	e007      	b.n	8006e28 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	f003 0320 	and.w	r3, r3, #32
 8006e22:	2b20      	cmp	r3, #32
 8006e24:	d1cf      	bne.n	8006dc6 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	60f8      	str	r0, [r7, #12]
 8006e38:	60b9      	str	r1, [r7, #8]
 8006e3a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699b      	ldr	r3, [r3, #24]
 8006e42:	f003 0310 	and.w	r3, r3, #16
 8006e46:	2b10      	cmp	r3, #16
 8006e48:	d151      	bne.n	8006eee <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e4a:	e022      	b.n	8006e92 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e52:	d01e      	beq.n	8006e92 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006e54:	f7fd fe60 	bl	8004b18 <HAL_GetTick>
 8006e58:	4602      	mov	r2, r0
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	1ad3      	subs	r3, r2, r3
 8006e5e:	68ba      	ldr	r2, [r7, #8]
 8006e60:	429a      	cmp	r2, r3
 8006e62:	d302      	bcc.n	8006e6a <I2C_IsAcknowledgeFailed+0x3a>
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	d113      	bne.n	8006e92 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e6e:	f043 0220 	orr.w	r2, r3, #32
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	2220      	movs	r2, #32
 8006e7a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006e8e:	2301      	movs	r3, #1
 8006e90:	e02e      	b.n	8006ef0 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	f003 0320 	and.w	r3, r3, #32
 8006e9c:	2b20      	cmp	r3, #32
 8006e9e:	d1d5      	bne.n	8006e4c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	2210      	movs	r2, #16
 8006ea6:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	2220      	movs	r2, #32
 8006eae:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006eb0:	68f8      	ldr	r0, [r7, #12]
 8006eb2:	f7ff fedd 	bl	8006c70 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	6859      	ldr	r1, [r3, #4]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681a      	ldr	r2, [r3, #0]
 8006ec0:	4b0d      	ldr	r3, [pc, #52]	; (8006ef8 <I2C_IsAcknowledgeFailed+0xc8>)
 8006ec2:	400b      	ands	r3, r1
 8006ec4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006eca:	f043 0204 	orr.w	r2, r3, #4
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	2220      	movs	r2, #32
 8006ed6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006eea:	2301      	movs	r3, #1
 8006eec:	e000      	b.n	8006ef0 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006eee:	2300      	movs	r3, #0
}
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	3710      	adds	r7, #16
 8006ef4:	46bd      	mov	sp, r7
 8006ef6:	bd80      	pop	{r7, pc}
 8006ef8:	fe00e800 	.word	0xfe00e800

08006efc <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006efc:	b480      	push	{r7}
 8006efe:	b085      	sub	sp, #20
 8006f00:	af00      	add	r7, sp, #0
 8006f02:	60f8      	str	r0, [r7, #12]
 8006f04:	607b      	str	r3, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	817b      	strh	r3, [r7, #10]
 8006f0a:	4613      	mov	r3, r2
 8006f0c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	685a      	ldr	r2, [r3, #4]
 8006f14:	69bb      	ldr	r3, [r7, #24]
 8006f16:	0d5b      	lsrs	r3, r3, #21
 8006f18:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006f1c:	4b0d      	ldr	r3, [pc, #52]	; (8006f54 <I2C_TransferConfig+0x58>)
 8006f1e:	430b      	orrs	r3, r1
 8006f20:	43db      	mvns	r3, r3
 8006f22:	ea02 0103 	and.w	r1, r2, r3
 8006f26:	897b      	ldrh	r3, [r7, #10]
 8006f28:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006f2c:	7a7b      	ldrb	r3, [r7, #9]
 8006f2e:	041b      	lsls	r3, r3, #16
 8006f30:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006f34:	431a      	orrs	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	431a      	orrs	r2, r3
 8006f3a:	69bb      	ldr	r3, [r7, #24]
 8006f3c:	431a      	orrs	r2, r3
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	430a      	orrs	r2, r1
 8006f44:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006f46:	bf00      	nop
 8006f48:	3714      	adds	r7, #20
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr
 8006f52:	bf00      	nop
 8006f54:	03ff63ff 	.word	0x03ff63ff

08006f58 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b083      	sub	sp, #12
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
 8006f60:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f68:	b2db      	uxtb	r3, r3
 8006f6a:	2b20      	cmp	r3, #32
 8006f6c:	d138      	bne.n	8006fe0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d101      	bne.n	8006f7c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006f78:	2302      	movs	r3, #2
 8006f7a:	e032      	b.n	8006fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	2201      	movs	r2, #1
 8006f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	2224      	movs	r2, #36	; 0x24
 8006f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f022 0201 	bic.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	681a      	ldr	r2, [r3, #0]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006faa:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	6819      	ldr	r1, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	683a      	ldr	r2, [r7, #0]
 8006fb8:	430a      	orrs	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	f042 0201 	orr.w	r2, r2, #1
 8006fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2220      	movs	r2, #32
 8006fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
 8006fde:	e000      	b.n	8006fe2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006fe0:	2302      	movs	r3, #2
  }
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	370c      	adds	r7, #12
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fec:	4770      	bx	lr

08006fee <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006fee:	b480      	push	{r7}
 8006ff0:	b085      	sub	sp, #20
 8006ff2:	af00      	add	r7, sp, #0
 8006ff4:	6078      	str	r0, [r7, #4]
 8006ff6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	2b20      	cmp	r3, #32
 8007002:	d139      	bne.n	8007078 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800700a:	2b01      	cmp	r3, #1
 800700c:	d101      	bne.n	8007012 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800700e:	2302      	movs	r3, #2
 8007010:	e033      	b.n	800707a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	2201      	movs	r2, #1
 8007016:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	2224      	movs	r2, #36	; 0x24
 800701e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	681a      	ldr	r2, [r3, #0]
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	f022 0201 	bic.w	r2, r2, #1
 8007030:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8007040:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	021b      	lsls	r3, r3, #8
 8007046:	68fa      	ldr	r2, [r7, #12]
 8007048:	4313      	orrs	r3, r2
 800704a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68fa      	ldr	r2, [r7, #12]
 8007052:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	681a      	ldr	r2, [r3, #0]
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	f042 0201 	orr.w	r2, r2, #1
 8007062:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007074:	2300      	movs	r3, #0
 8007076:	e000      	b.n	800707a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007078:	2302      	movs	r3, #2
  }
}
 800707a:	4618      	mov	r0, r3
 800707c:	3714      	adds	r7, #20
 800707e:	46bd      	mov	sp, r7
 8007080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007084:	4770      	bx	lr
	...

08007088 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	b084      	sub	sp, #16
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d101      	bne.n	800709a <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	e0bf      	b.n	800721a <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 80070a0:	b2db      	uxtb	r3, r3
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d106      	bne.n	80070b4 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	2200      	movs	r2, #0
 80070aa:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 80070ae:	6878      	ldr	r0, [r7, #4]
 80070b0:	f7fd f8aa 	bl	8004208 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2202      	movs	r2, #2
 80070b8:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	699a      	ldr	r2, [r3, #24]
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 80070ca:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	6999      	ldr	r1, [r3, #24]
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685a      	ldr	r2, [r3, #4]
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	689b      	ldr	r3, [r3, #8]
 80070da:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070e0:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	691b      	ldr	r3, [r3, #16]
 80070e6:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	430a      	orrs	r2, r1
 80070ee:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	6899      	ldr	r1, [r3, #8]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	4b4a      	ldr	r3, [pc, #296]	; (8007224 <HAL_LTDC_Init+0x19c>)
 80070fc:	400b      	ands	r3, r1
 80070fe:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	695b      	ldr	r3, [r3, #20]
 8007104:	041b      	lsls	r3, r3, #16
 8007106:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	6899      	ldr	r1, [r3, #8]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	431a      	orrs	r2, r3
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	430a      	orrs	r2, r1
 800711c:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	68d9      	ldr	r1, [r3, #12]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681a      	ldr	r2, [r3, #0]
 8007128:	4b3e      	ldr	r3, [pc, #248]	; (8007224 <HAL_LTDC_Init+0x19c>)
 800712a:	400b      	ands	r3, r1
 800712c:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	69db      	ldr	r3, [r3, #28]
 8007132:	041b      	lsls	r3, r3, #16
 8007134:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	68d9      	ldr	r1, [r3, #12]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6a1a      	ldr	r2, [r3, #32]
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	431a      	orrs	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	430a      	orrs	r2, r1
 800714a:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	6919      	ldr	r1, [r3, #16]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681a      	ldr	r2, [r3, #0]
 8007156:	4b33      	ldr	r3, [pc, #204]	; (8007224 <HAL_LTDC_Init+0x19c>)
 8007158:	400b      	ands	r3, r1
 800715a:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007160:	041b      	lsls	r3, r3, #16
 8007162:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	6919      	ldr	r1, [r3, #16]
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	431a      	orrs	r2, r3
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	430a      	orrs	r2, r1
 8007178:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	6959      	ldr	r1, [r3, #20]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681a      	ldr	r2, [r3, #0]
 8007184:	4b27      	ldr	r3, [pc, #156]	; (8007224 <HAL_LTDC_Init+0x19c>)
 8007186:	400b      	ands	r3, r1
 8007188:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800718e:	041b      	lsls	r3, r3, #16
 8007190:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	6959      	ldr	r1, [r3, #20]
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	431a      	orrs	r2, r3
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	430a      	orrs	r2, r1
 80071a6:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80071ae:	021b      	lsls	r3, r3, #8
 80071b0:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 80071b8:	041b      	lsls	r3, r3, #16
 80071ba:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 80071ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80071d2:	68ba      	ldr	r2, [r7, #8]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	687a      	ldr	r2, [r7, #4]
 80071da:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 80071de:	431a      	orrs	r2, r3
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	430a      	orrs	r2, r1
 80071e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0206 	orr.w	r2, r2, #6
 80071f6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	699a      	ldr	r2, [r3, #24]
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	f042 0201 	orr.w	r2, r2, #1
 8007206:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2200      	movs	r2, #0
 800720c:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	f000f800 	.word	0xf000f800

08007228 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b084      	sub	sp, #16
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007236:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800723e:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	f003 0304 	and.w	r3, r3, #4
 8007246:	2b00      	cmp	r3, #0
 8007248:	d023      	beq.n	8007292 <HAL_LTDC_IRQHandler+0x6a>
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	f003 0304 	and.w	r3, r3, #4
 8007250:	2b00      	cmp	r3, #0
 8007252:	d01e      	beq.n	8007292 <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f022 0204 	bic.w	r2, r2, #4
 8007262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	2204      	movs	r2, #4
 800726a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8007272:	f043 0201 	orr.w	r2, r3, #1
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2204      	movs	r2, #4
 8007280:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	2200      	movs	r2, #0
 8007288:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 f86f 	bl	8007370 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	f003 0302 	and.w	r3, r3, #2
 8007298:	2b00      	cmp	r3, #0
 800729a:	d023      	beq.n	80072e4 <HAL_LTDC_IRQHandler+0xbc>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	f003 0302 	and.w	r3, r3, #2
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d01e      	beq.n	80072e4 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	f022 0202 	bic.w	r2, r2, #2
 80072b4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	2202      	movs	r2, #2
 80072bc:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80072c4:	f043 0202 	orr.w	r2, r3, #2
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	2204      	movs	r2, #4
 80072d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	2200      	movs	r2, #0
 80072da:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f000 f846 	bl	8007370 <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	f003 0301 	and.w	r3, r3, #1
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d01b      	beq.n	8007326 <HAL_LTDC_IRQHandler+0xfe>
 80072ee:	68bb      	ldr	r3, [r7, #8]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d016      	beq.n	8007326 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f022 0201 	bic.w	r2, r2, #1
 8007306:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	2201      	movs	r2, #1
 800730e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2200      	movs	r2, #0
 800731c:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f82f 	bl	8007384 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	f003 0308 	and.w	r3, r3, #8
 800732c:	2b00      	cmp	r3, #0
 800732e:	d01b      	beq.n	8007368 <HAL_LTDC_IRQHandler+0x140>
 8007330:	68bb      	ldr	r3, [r7, #8]
 8007332:	f003 0308 	and.w	r3, r3, #8
 8007336:	2b00      	cmp	r3, #0
 8007338:	d016      	beq.n	8007368 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	f022 0208 	bic.w	r2, r2, #8
 8007348:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	2208      	movs	r2, #8
 8007350:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2201      	movs	r2, #1
 8007356:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2200      	movs	r2, #0
 800735e:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 8007362:	6878      	ldr	r0, [r7, #4]
 8007364:	f000 f818 	bl	8007398 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007368:	bf00      	nop
 800736a:	3710      	adds	r7, #16
 800736c:	46bd      	mov	sp, r7
 800736e:	bd80      	pop	{r7, pc}

08007370 <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 8007370:	b480      	push	{r7}
 8007372:	b083      	sub	sp, #12
 8007374:	af00      	add	r7, sp, #0
 8007376:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007378:	bf00      	nop
 800737a:	370c      	adds	r7, #12
 800737c:	46bd      	mov	sp, r7
 800737e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007382:	4770      	bx	lr

08007384 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007384:	b480      	push	{r7}
 8007386:	b083      	sub	sp, #12
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 800738c:	bf00      	nop
 800738e:	370c      	adds	r7, #12
 8007390:	46bd      	mov	sp, r7
 8007392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007396:	4770      	bx	lr

08007398 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007398:	b480      	push	{r7}
 800739a:	b083      	sub	sp, #12
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr

080073ac <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80073ac:	b5b0      	push	{r4, r5, r7, lr}
 80073ae:	b084      	sub	sp, #16
 80073b0:	af00      	add	r7, sp, #0
 80073b2:	60f8      	str	r0, [r7, #12]
 80073b4:	60b9      	str	r1, [r7, #8]
 80073b6:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d101      	bne.n	80073c6 <HAL_LTDC_ConfigLayer+0x1a>
 80073c2:	2302      	movs	r3, #2
 80073c4:	e02c      	b.n	8007420 <HAL_LTDC_ConfigLayer+0x74>
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	2201      	movs	r2, #1
 80073ca:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	2202      	movs	r2, #2
 80073d2:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80073d6:	68fa      	ldr	r2, [r7, #12]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2134      	movs	r1, #52	; 0x34
 80073dc:	fb01 f303 	mul.w	r3, r1, r3
 80073e0:	4413      	add	r3, r2
 80073e2:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80073e6:	68bb      	ldr	r3, [r7, #8]
 80073e8:	4614      	mov	r4, r2
 80073ea:	461d      	mov	r5, r3
 80073ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80073f6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80073f8:	682b      	ldr	r3, [r5, #0]
 80073fa:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 80073fc:	687a      	ldr	r2, [r7, #4]
 80073fe:	68b9      	ldr	r1, [r7, #8]
 8007400:	68f8      	ldr	r0, [r7, #12]
 8007402:	f000 f81f 	bl	8007444 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007406:	68fb      	ldr	r3, [r7, #12]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2201      	movs	r2, #1
 800740c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	2201      	movs	r2, #1
 8007412:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	2200      	movs	r2, #0
 800741a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800741e:	2300      	movs	r3, #0
}
 8007420:	4618      	mov	r0, r3
 8007422:	3710      	adds	r7, #16
 8007424:	46bd      	mov	sp, r7
 8007426:	bdb0      	pop	{r4, r5, r7, pc}

08007428 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007428:	b480      	push	{r7}
 800742a:	b083      	sub	sp, #12
 800742c:	af00      	add	r7, sp, #0
 800742e:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007436:	b2db      	uxtb	r3, r3
}
 8007438:	4618      	mov	r0, r3
 800743a:	370c      	adds	r7, #12
 800743c:	46bd      	mov	sp, r7
 800743e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007442:	4770      	bx	lr

08007444 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007444:	b480      	push	{r7}
 8007446:	b089      	sub	sp, #36	; 0x24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8007450:	68bb      	ldr	r3, [r7, #8]
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	68db      	ldr	r3, [r3, #12]
 800745a:	0c1b      	lsrs	r3, r3, #16
 800745c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007460:	4413      	add	r3, r2
 8007462:	041b      	lsls	r3, r3, #16
 8007464:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	01db      	lsls	r3, r3, #7
 8007470:	4413      	add	r3, r2
 8007472:	3384      	adds	r3, #132	; 0x84
 8007474:	685b      	ldr	r3, [r3, #4]
 8007476:	68fa      	ldr	r2, [r7, #12]
 8007478:	6812      	ldr	r2, [r2, #0]
 800747a:	4611      	mov	r1, r2
 800747c:	687a      	ldr	r2, [r7, #4]
 800747e:	01d2      	lsls	r2, r2, #7
 8007480:	440a      	add	r2, r1
 8007482:	3284      	adds	r2, #132	; 0x84
 8007484:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007488:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	68db      	ldr	r3, [r3, #12]
 8007494:	0c1b      	lsrs	r3, r3, #16
 8007496:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800749a:	4413      	add	r3, r2
 800749c:	1c5a      	adds	r2, r3, #1
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4619      	mov	r1, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	01db      	lsls	r3, r3, #7
 80074a8:	440b      	add	r3, r1
 80074aa:	3384      	adds	r3, #132	; 0x84
 80074ac:	4619      	mov	r1, r3
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	68da      	ldr	r2, [r3, #12]
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	68db      	ldr	r3, [r3, #12]
 80074be:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074c2:	4413      	add	r3, r2
 80074c4:	041b      	lsls	r3, r3, #16
 80074c6:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	461a      	mov	r2, r3
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	01db      	lsls	r3, r3, #7
 80074d2:	4413      	add	r3, r2
 80074d4:	3384      	adds	r3, #132	; 0x84
 80074d6:	689b      	ldr	r3, [r3, #8]
 80074d8:	68fa      	ldr	r2, [r7, #12]
 80074da:	6812      	ldr	r2, [r2, #0]
 80074dc:	4611      	mov	r1, r2
 80074de:	687a      	ldr	r2, [r7, #4]
 80074e0:	01d2      	lsls	r2, r2, #7
 80074e2:	440a      	add	r2, r1
 80074e4:	3284      	adds	r2, #132	; 0x84
 80074e6:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80074ea:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	689a      	ldr	r2, [r3, #8]
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	68db      	ldr	r3, [r3, #12]
 80074f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074fa:	4413      	add	r3, r2
 80074fc:	1c5a      	adds	r2, r3, #1
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	4619      	mov	r1, r3
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	01db      	lsls	r3, r3, #7
 8007508:	440b      	add	r3, r1
 800750a:	3384      	adds	r3, #132	; 0x84
 800750c:	4619      	mov	r1, r3
 800750e:	69fb      	ldr	r3, [r7, #28]
 8007510:	4313      	orrs	r3, r2
 8007512:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	01db      	lsls	r3, r3, #7
 800751e:	4413      	add	r3, r2
 8007520:	3384      	adds	r3, #132	; 0x84
 8007522:	691b      	ldr	r3, [r3, #16]
 8007524:	68fa      	ldr	r2, [r7, #12]
 8007526:	6812      	ldr	r2, [r2, #0]
 8007528:	4611      	mov	r1, r2
 800752a:	687a      	ldr	r2, [r7, #4]
 800752c:	01d2      	lsls	r2, r2, #7
 800752e:	440a      	add	r2, r1
 8007530:	3284      	adds	r2, #132	; 0x84
 8007532:	f023 0307 	bic.w	r3, r3, #7
 8007536:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	461a      	mov	r2, r3
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	01db      	lsls	r3, r3, #7
 8007542:	4413      	add	r3, r2
 8007544:	3384      	adds	r3, #132	; 0x84
 8007546:	461a      	mov	r2, r3
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	691b      	ldr	r3, [r3, #16]
 800754c:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800754e:	68bb      	ldr	r3, [r7, #8]
 8007550:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007554:	021b      	lsls	r3, r3, #8
 8007556:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800755e:	041b      	lsls	r3, r3, #16
 8007560:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	061b      	lsls	r3, r3, #24
 8007568:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	01db      	lsls	r3, r3, #7
 8007574:	4413      	add	r3, r2
 8007576:	3384      	adds	r3, #132	; 0x84
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	461a      	mov	r2, r3
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	01db      	lsls	r3, r3, #7
 8007584:	4413      	add	r3, r2
 8007586:	3384      	adds	r3, #132	; 0x84
 8007588:	461a      	mov	r2, r3
 800758a:	2300      	movs	r3, #0
 800758c:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800758e:	68bb      	ldr	r3, [r7, #8]
 8007590:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007594:	461a      	mov	r2, r3
 8007596:	69fb      	ldr	r3, [r7, #28]
 8007598:	431a      	orrs	r2, r3
 800759a:	69bb      	ldr	r3, [r7, #24]
 800759c:	431a      	orrs	r2, r3
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4619      	mov	r1, r3
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	01db      	lsls	r3, r3, #7
 80075a8:	440b      	add	r3, r1
 80075aa:	3384      	adds	r3, #132	; 0x84
 80075ac:	4619      	mov	r1, r3
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	4313      	orrs	r3, r2
 80075b2:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	461a      	mov	r2, r3
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	01db      	lsls	r3, r3, #7
 80075be:	4413      	add	r3, r2
 80075c0:	3384      	adds	r3, #132	; 0x84
 80075c2:	695b      	ldr	r3, [r3, #20]
 80075c4:	68fa      	ldr	r2, [r7, #12]
 80075c6:	6812      	ldr	r2, [r2, #0]
 80075c8:	4611      	mov	r1, r2
 80075ca:	687a      	ldr	r2, [r7, #4]
 80075cc:	01d2      	lsls	r2, r2, #7
 80075ce:	440a      	add	r2, r1
 80075d0:	3284      	adds	r2, #132	; 0x84
 80075d2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80075d6:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	461a      	mov	r2, r3
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	01db      	lsls	r3, r3, #7
 80075e2:	4413      	add	r3, r2
 80075e4:	3384      	adds	r3, #132	; 0x84
 80075e6:	461a      	mov	r2, r3
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	695b      	ldr	r3, [r3, #20]
 80075ec:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	461a      	mov	r2, r3
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	01db      	lsls	r3, r3, #7
 80075f8:	4413      	add	r3, r2
 80075fa:	3384      	adds	r3, #132	; 0x84
 80075fc:	69da      	ldr	r2, [r3, #28]
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	4619      	mov	r1, r3
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	01db      	lsls	r3, r3, #7
 8007608:	440b      	add	r3, r1
 800760a:	3384      	adds	r3, #132	; 0x84
 800760c:	4619      	mov	r1, r3
 800760e:	4b58      	ldr	r3, [pc, #352]	; (8007770 <LTDC_SetConfig+0x32c>)
 8007610:	4013      	ands	r3, r2
 8007612:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	69da      	ldr	r2, [r3, #28]
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6a1b      	ldr	r3, [r3, #32]
 800761c:	68f9      	ldr	r1, [r7, #12]
 800761e:	6809      	ldr	r1, [r1, #0]
 8007620:	4608      	mov	r0, r1
 8007622:	6879      	ldr	r1, [r7, #4]
 8007624:	01c9      	lsls	r1, r1, #7
 8007626:	4401      	add	r1, r0
 8007628:	3184      	adds	r1, #132	; 0x84
 800762a:	4313      	orrs	r3, r2
 800762c:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	461a      	mov	r2, r3
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	01db      	lsls	r3, r3, #7
 8007638:	4413      	add	r3, r2
 800763a:	3384      	adds	r3, #132	; 0x84
 800763c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	461a      	mov	r2, r3
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	01db      	lsls	r3, r3, #7
 8007648:	4413      	add	r3, r2
 800764a:	3384      	adds	r3, #132	; 0x84
 800764c:	461a      	mov	r2, r3
 800764e:	2300      	movs	r3, #0
 8007650:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	461a      	mov	r2, r3
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	01db      	lsls	r3, r3, #7
 800765c:	4413      	add	r3, r2
 800765e:	3384      	adds	r3, #132	; 0x84
 8007660:	461a      	mov	r2, r3
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007666:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	691b      	ldr	r3, [r3, #16]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d102      	bne.n	8007676 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 8007670:	2304      	movs	r3, #4
 8007672:	61fb      	str	r3, [r7, #28]
 8007674:	e01b      	b.n	80076ae <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	691b      	ldr	r3, [r3, #16]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d102      	bne.n	8007684 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800767e:	2303      	movs	r3, #3
 8007680:	61fb      	str	r3, [r7, #28]
 8007682:	e014      	b.n	80076ae <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	691b      	ldr	r3, [r3, #16]
 8007688:	2b04      	cmp	r3, #4
 800768a:	d00b      	beq.n	80076a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007690:	2b02      	cmp	r3, #2
 8007692:	d007      	beq.n	80076a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007698:	2b03      	cmp	r3, #3
 800769a:	d003      	beq.n	80076a4 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800769c:	68bb      	ldr	r3, [r7, #8]
 800769e:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80076a0:	2b07      	cmp	r3, #7
 80076a2:	d102      	bne.n	80076aa <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80076a4:	2302      	movs	r3, #2
 80076a6:	61fb      	str	r3, [r7, #28]
 80076a8:	e001      	b.n	80076ae <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80076aa:	2301      	movs	r3, #1
 80076ac:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	461a      	mov	r2, r3
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	01db      	lsls	r3, r3, #7
 80076b8:	4413      	add	r3, r2
 80076ba:	3384      	adds	r3, #132	; 0x84
 80076bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076be:	68fa      	ldr	r2, [r7, #12]
 80076c0:	6812      	ldr	r2, [r2, #0]
 80076c2:	4611      	mov	r1, r2
 80076c4:	687a      	ldr	r2, [r7, #4]
 80076c6:	01d2      	lsls	r2, r2, #7
 80076c8:	440a      	add	r2, r1
 80076ca:	3284      	adds	r2, #132	; 0x84
 80076cc:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80076d0:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80076d2:	68bb      	ldr	r3, [r7, #8]
 80076d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d6:	69fa      	ldr	r2, [r7, #28]
 80076d8:	fb02 f303 	mul.w	r3, r2, r3
 80076dc:	041a      	lsls	r2, r3, #16
 80076de:	68bb      	ldr	r3, [r7, #8]
 80076e0:	6859      	ldr	r1, [r3, #4]
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	1acb      	subs	r3, r1, r3
 80076e8:	69f9      	ldr	r1, [r7, #28]
 80076ea:	fb01 f303 	mul.w	r3, r1, r3
 80076ee:	3303      	adds	r3, #3
 80076f0:	68f9      	ldr	r1, [r7, #12]
 80076f2:	6809      	ldr	r1, [r1, #0]
 80076f4:	4608      	mov	r0, r1
 80076f6:	6879      	ldr	r1, [r7, #4]
 80076f8:	01c9      	lsls	r1, r1, #7
 80076fa:	4401      	add	r1, r0
 80076fc:	3184      	adds	r1, #132	; 0x84
 80076fe:	4313      	orrs	r3, r2
 8007700:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	461a      	mov	r2, r3
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	01db      	lsls	r3, r3, #7
 800770c:	4413      	add	r3, r2
 800770e:	3384      	adds	r3, #132	; 0x84
 8007710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	4619      	mov	r1, r3
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	01db      	lsls	r3, r3, #7
 800771c:	440b      	add	r3, r1
 800771e:	3384      	adds	r3, #132	; 0x84
 8007720:	4619      	mov	r1, r3
 8007722:	4b14      	ldr	r3, [pc, #80]	; (8007774 <LTDC_SetConfig+0x330>)
 8007724:	4013      	ands	r3, r2
 8007726:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	461a      	mov	r2, r3
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	01db      	lsls	r3, r3, #7
 8007732:	4413      	add	r3, r2
 8007734:	3384      	adds	r3, #132	; 0x84
 8007736:	461a      	mov	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800773c:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	01db      	lsls	r3, r3, #7
 8007748:	4413      	add	r3, r2
 800774a:	3384      	adds	r3, #132	; 0x84
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68fa      	ldr	r2, [r7, #12]
 8007750:	6812      	ldr	r2, [r2, #0]
 8007752:	4611      	mov	r1, r2
 8007754:	687a      	ldr	r2, [r7, #4]
 8007756:	01d2      	lsls	r2, r2, #7
 8007758:	440a      	add	r2, r1
 800775a:	3284      	adds	r2, #132	; 0x84
 800775c:	f043 0301 	orr.w	r3, r3, #1
 8007760:	6013      	str	r3, [r2, #0]
}
 8007762:	bf00      	nop
 8007764:	3724      	adds	r7, #36	; 0x24
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	fffff8f8 	.word	0xfffff8f8
 8007774:	fffff800 	.word	0xfffff800

08007778 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007778:	b480      	push	{r7}
 800777a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800777c:	4b05      	ldr	r3, [pc, #20]	; (8007794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a04      	ldr	r2, [pc, #16]	; (8007794 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8007782:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007786:	6013      	str	r3, [r2, #0]
}
 8007788:	bf00      	nop
 800778a:	46bd      	mov	sp, r7
 800778c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007790:	4770      	bx	lr
 8007792:	bf00      	nop
 8007794:	40007000 	.word	0x40007000

08007798 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b082      	sub	sp, #8
 800779c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800779e:	2300      	movs	r3, #0
 80077a0:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80077a2:	4b23      	ldr	r3, [pc, #140]	; (8007830 <HAL_PWREx_EnableOverDrive+0x98>)
 80077a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077a6:	4a22      	ldr	r2, [pc, #136]	; (8007830 <HAL_PWREx_EnableOverDrive+0x98>)
 80077a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80077ac:	6413      	str	r3, [r2, #64]	; 0x40
 80077ae:	4b20      	ldr	r3, [pc, #128]	; (8007830 <HAL_PWREx_EnableOverDrive+0x98>)
 80077b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80077ba:	4b1e      	ldr	r3, [pc, #120]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a1d      	ldr	r2, [pc, #116]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077c4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077c6:	f7fd f9a7 	bl	8004b18 <HAL_GetTick>
 80077ca:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077cc:	e009      	b.n	80077e2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80077ce:	f7fd f9a3 	bl	8004b18 <HAL_GetTick>
 80077d2:	4602      	mov	r2, r0
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	1ad3      	subs	r3, r2, r3
 80077d8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80077dc:	d901      	bls.n	80077e2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80077de:	2303      	movs	r3, #3
 80077e0:	e022      	b.n	8007828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80077e2:	4b14      	ldr	r3, [pc, #80]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077e4:	685b      	ldr	r3, [r3, #4]
 80077e6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ee:	d1ee      	bne.n	80077ce <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80077f0:	4b10      	ldr	r3, [pc, #64]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a0f      	ldr	r2, [pc, #60]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 80077f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80077fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077fc:	f7fd f98c 	bl	8004b18 <HAL_GetTick>
 8007800:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007802:	e009      	b.n	8007818 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007804:	f7fd f988 	bl	8004b18 <HAL_GetTick>
 8007808:	4602      	mov	r2, r0
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	1ad3      	subs	r3, r2, r3
 800780e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007812:	d901      	bls.n	8007818 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007814:	2303      	movs	r3, #3
 8007816:	e007      	b.n	8007828 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007818:	4b06      	ldr	r3, [pc, #24]	; (8007834 <HAL_PWREx_EnableOverDrive+0x9c>)
 800781a:	685b      	ldr	r3, [r3, #4]
 800781c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007820:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007824:	d1ee      	bne.n	8007804 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007826:	2300      	movs	r3, #0
}
 8007828:	4618      	mov	r0, r3
 800782a:	3708      	adds	r7, #8
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}
 8007830:	40023800 	.word	0x40023800
 8007834:	40007000 	.word	0x40007000

08007838 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007838:	b580      	push	{r7, lr}
 800783a:	b086      	sub	sp, #24
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8007840:	2300      	movs	r3, #0
 8007842:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2b00      	cmp	r3, #0
 8007848:	d101      	bne.n	800784e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800784a:	2301      	movs	r3, #1
 800784c:	e291      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	f000 8087 	beq.w	800796a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800785c:	4b96      	ldr	r3, [pc, #600]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 800785e:	689b      	ldr	r3, [r3, #8]
 8007860:	f003 030c 	and.w	r3, r3, #12
 8007864:	2b04      	cmp	r3, #4
 8007866:	d00c      	beq.n	8007882 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007868:	4b93      	ldr	r3, [pc, #588]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 800786a:	689b      	ldr	r3, [r3, #8]
 800786c:	f003 030c 	and.w	r3, r3, #12
 8007870:	2b08      	cmp	r3, #8
 8007872:	d112      	bne.n	800789a <HAL_RCC_OscConfig+0x62>
 8007874:	4b90      	ldr	r3, [pc, #576]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007876:	685b      	ldr	r3, [r3, #4]
 8007878:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007880:	d10b      	bne.n	800789a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007882:	4b8d      	ldr	r3, [pc, #564]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800788a:	2b00      	cmp	r3, #0
 800788c:	d06c      	beq.n	8007968 <HAL_RCC_OscConfig+0x130>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	685b      	ldr	r3, [r3, #4]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d168      	bne.n	8007968 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e26b      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	685b      	ldr	r3, [r3, #4]
 800789e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078a2:	d106      	bne.n	80078b2 <HAL_RCC_OscConfig+0x7a>
 80078a4:	4b84      	ldr	r3, [pc, #528]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	4a83      	ldr	r2, [pc, #524]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078ae:	6013      	str	r3, [r2, #0]
 80078b0:	e02e      	b.n	8007910 <HAL_RCC_OscConfig+0xd8>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	685b      	ldr	r3, [r3, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d10c      	bne.n	80078d4 <HAL_RCC_OscConfig+0x9c>
 80078ba:	4b7f      	ldr	r3, [pc, #508]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	4a7e      	ldr	r2, [pc, #504]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078c0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80078c4:	6013      	str	r3, [r2, #0]
 80078c6:	4b7c      	ldr	r3, [pc, #496]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	4a7b      	ldr	r2, [pc, #492]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80078d0:	6013      	str	r3, [r2, #0]
 80078d2:	e01d      	b.n	8007910 <HAL_RCC_OscConfig+0xd8>
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCC_OscConfig+0xc0>
 80078de:	4b76      	ldr	r3, [pc, #472]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	4a75      	ldr	r2, [pc, #468]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80078e8:	6013      	str	r3, [r2, #0]
 80078ea:	4b73      	ldr	r3, [pc, #460]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	4a72      	ldr	r2, [pc, #456]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80078f4:	6013      	str	r3, [r2, #0]
 80078f6:	e00b      	b.n	8007910 <HAL_RCC_OscConfig+0xd8>
 80078f8:	4b6f      	ldr	r3, [pc, #444]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	4a6e      	ldr	r2, [pc, #440]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80078fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007902:	6013      	str	r3, [r2, #0]
 8007904:	4b6c      	ldr	r3, [pc, #432]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4a6b      	ldr	r2, [pc, #428]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 800790a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800790e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	685b      	ldr	r3, [r3, #4]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d013      	beq.n	8007940 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007918:	f7fd f8fe 	bl	8004b18 <HAL_GetTick>
 800791c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800791e:	e008      	b.n	8007932 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007920:	f7fd f8fa 	bl	8004b18 <HAL_GetTick>
 8007924:	4602      	mov	r2, r0
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	2b64      	cmp	r3, #100	; 0x64
 800792c:	d901      	bls.n	8007932 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800792e:	2303      	movs	r3, #3
 8007930:	e21f      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007932:	4b61      	ldr	r3, [pc, #388]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800793a:	2b00      	cmp	r3, #0
 800793c:	d0f0      	beq.n	8007920 <HAL_RCC_OscConfig+0xe8>
 800793e:	e014      	b.n	800796a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007940:	f7fd f8ea 	bl	8004b18 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007948:	f7fd f8e6 	bl	8004b18 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b64      	cmp	r3, #100	; 0x64
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e20b      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800795a:	4b57      	ldr	r3, [pc, #348]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007962:	2b00      	cmp	r3, #0
 8007964:	d1f0      	bne.n	8007948 <HAL_RCC_OscConfig+0x110>
 8007966:	e000      	b.n	800796a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007968:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	f003 0302 	and.w	r3, r3, #2
 8007972:	2b00      	cmp	r3, #0
 8007974:	d069      	beq.n	8007a4a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007976:	4b50      	ldr	r3, [pc, #320]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007978:	689b      	ldr	r3, [r3, #8]
 800797a:	f003 030c 	and.w	r3, r3, #12
 800797e:	2b00      	cmp	r3, #0
 8007980:	d00b      	beq.n	800799a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007982:	4b4d      	ldr	r3, [pc, #308]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007984:	689b      	ldr	r3, [r3, #8]
 8007986:	f003 030c 	and.w	r3, r3, #12
 800798a:	2b08      	cmp	r3, #8
 800798c:	d11c      	bne.n	80079c8 <HAL_RCC_OscConfig+0x190>
 800798e:	4b4a      	ldr	r3, [pc, #296]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007990:	685b      	ldr	r3, [r3, #4]
 8007992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d116      	bne.n	80079c8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800799a:	4b47      	ldr	r3, [pc, #284]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 0302 	and.w	r3, r3, #2
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d005      	beq.n	80079b2 <HAL_RCC_OscConfig+0x17a>
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	68db      	ldr	r3, [r3, #12]
 80079aa:	2b01      	cmp	r3, #1
 80079ac:	d001      	beq.n	80079b2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80079ae:	2301      	movs	r3, #1
 80079b0:	e1df      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80079b2:	4b41      	ldr	r3, [pc, #260]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	691b      	ldr	r3, [r3, #16]
 80079be:	00db      	lsls	r3, r3, #3
 80079c0:	493d      	ldr	r1, [pc, #244]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80079c2:	4313      	orrs	r3, r2
 80079c4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80079c6:	e040      	b.n	8007a4a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	68db      	ldr	r3, [r3, #12]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d023      	beq.n	8007a18 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80079d0:	4b39      	ldr	r3, [pc, #228]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a38      	ldr	r2, [pc, #224]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80079d6:	f043 0301 	orr.w	r3, r3, #1
 80079da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80079dc:	f7fd f89c 	bl	8004b18 <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80079e4:	f7fd f898 	bl	8004b18 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e1bd      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079f6:	4b30      	ldr	r3, [pc, #192]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 0302 	and.w	r3, r3, #2
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d0f0      	beq.n	80079e4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007a02:	4b2d      	ldr	r3, [pc, #180]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	691b      	ldr	r3, [r3, #16]
 8007a0e:	00db      	lsls	r3, r3, #3
 8007a10:	4929      	ldr	r1, [pc, #164]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a12:	4313      	orrs	r3, r2
 8007a14:	600b      	str	r3, [r1, #0]
 8007a16:	e018      	b.n	8007a4a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007a18:	4b27      	ldr	r3, [pc, #156]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	4a26      	ldr	r2, [pc, #152]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a1e:	f023 0301 	bic.w	r3, r3, #1
 8007a22:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a24:	f7fd f878 	bl	8004b18 <HAL_GetTick>
 8007a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a2a:	e008      	b.n	8007a3e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007a2c:	f7fd f874 	bl	8004b18 <HAL_GetTick>
 8007a30:	4602      	mov	r2, r0
 8007a32:	693b      	ldr	r3, [r7, #16]
 8007a34:	1ad3      	subs	r3, r2, r3
 8007a36:	2b02      	cmp	r3, #2
 8007a38:	d901      	bls.n	8007a3e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007a3a:	2303      	movs	r3, #3
 8007a3c:	e199      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007a3e:	4b1e      	ldr	r3, [pc, #120]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f003 0302 	and.w	r3, r3, #2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d1f0      	bne.n	8007a2c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	f003 0308 	and.w	r3, r3, #8
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d038      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	695b      	ldr	r3, [r3, #20]
 8007a5a:	2b00      	cmp	r3, #0
 8007a5c:	d019      	beq.n	8007a92 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007a5e:	4b16      	ldr	r3, [pc, #88]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a62:	4a15      	ldr	r2, [pc, #84]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a64:	f043 0301 	orr.w	r3, r3, #1
 8007a68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a6a:	f7fd f855 	bl	8004b18 <HAL_GetTick>
 8007a6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a70:	e008      	b.n	8007a84 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007a72:	f7fd f851 	bl	8004b18 <HAL_GetTick>
 8007a76:	4602      	mov	r2, r0
 8007a78:	693b      	ldr	r3, [r7, #16]
 8007a7a:	1ad3      	subs	r3, r2, r3
 8007a7c:	2b02      	cmp	r3, #2
 8007a7e:	d901      	bls.n	8007a84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e176      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007a84:	4b0c      	ldr	r3, [pc, #48]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d0f0      	beq.n	8007a72 <HAL_RCC_OscConfig+0x23a>
 8007a90:	e01a      	b.n	8007ac8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007a92:	4b09      	ldr	r3, [pc, #36]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a94:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a96:	4a08      	ldr	r2, [pc, #32]	; (8007ab8 <HAL_RCC_OscConfig+0x280>)
 8007a98:	f023 0301 	bic.w	r3, r3, #1
 8007a9c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a9e:	f7fd f83b 	bl	8004b18 <HAL_GetTick>
 8007aa2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007aa4:	e00a      	b.n	8007abc <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007aa6:	f7fd f837 	bl	8004b18 <HAL_GetTick>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	693b      	ldr	r3, [r7, #16]
 8007aae:	1ad3      	subs	r3, r2, r3
 8007ab0:	2b02      	cmp	r3, #2
 8007ab2:	d903      	bls.n	8007abc <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8007ab4:	2303      	movs	r3, #3
 8007ab6:	e15c      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
 8007ab8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007abc:	4b91      	ldr	r3, [pc, #580]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007abe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007ac0:	f003 0302 	and.w	r3, r3, #2
 8007ac4:	2b00      	cmp	r3, #0
 8007ac6:	d1ee      	bne.n	8007aa6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f003 0304 	and.w	r3, r3, #4
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80a4 	beq.w	8007c1e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007ad6:	4b8b      	ldr	r3, [pc, #556]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d10d      	bne.n	8007afe <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8007ae2:	4b88      	ldr	r3, [pc, #544]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae6:	4a87      	ldr	r2, [pc, #540]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007aec:	6413      	str	r3, [r2, #64]	; 0x40
 8007aee:	4b85      	ldr	r3, [pc, #532]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007af6:	60bb      	str	r3, [r7, #8]
 8007af8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007afa:	2301      	movs	r3, #1
 8007afc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007afe:	4b82      	ldr	r3, [pc, #520]	; (8007d08 <HAL_RCC_OscConfig+0x4d0>)
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b06:	2b00      	cmp	r3, #0
 8007b08:	d118      	bne.n	8007b3c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007b0a:	4b7f      	ldr	r3, [pc, #508]	; (8007d08 <HAL_RCC_OscConfig+0x4d0>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	4a7e      	ldr	r2, [pc, #504]	; (8007d08 <HAL_RCC_OscConfig+0x4d0>)
 8007b10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b14:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007b16:	f7fc ffff 	bl	8004b18 <HAL_GetTick>
 8007b1a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b1c:	e008      	b.n	8007b30 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007b1e:	f7fc fffb 	bl	8004b18 <HAL_GetTick>
 8007b22:	4602      	mov	r2, r0
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	1ad3      	subs	r3, r2, r3
 8007b28:	2b64      	cmp	r3, #100	; 0x64
 8007b2a:	d901      	bls.n	8007b30 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007b2c:	2303      	movs	r3, #3
 8007b2e:	e120      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007b30:	4b75      	ldr	r3, [pc, #468]	; (8007d08 <HAL_RCC_OscConfig+0x4d0>)
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d0f0      	beq.n	8007b1e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	689b      	ldr	r3, [r3, #8]
 8007b40:	2b01      	cmp	r3, #1
 8007b42:	d106      	bne.n	8007b52 <HAL_RCC_OscConfig+0x31a>
 8007b44:	4b6f      	ldr	r3, [pc, #444]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b48:	4a6e      	ldr	r2, [pc, #440]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b4a:	f043 0301 	orr.w	r3, r3, #1
 8007b4e:	6713      	str	r3, [r2, #112]	; 0x70
 8007b50:	e02d      	b.n	8007bae <HAL_RCC_OscConfig+0x376>
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	689b      	ldr	r3, [r3, #8]
 8007b56:	2b00      	cmp	r3, #0
 8007b58:	d10c      	bne.n	8007b74 <HAL_RCC_OscConfig+0x33c>
 8007b5a:	4b6a      	ldr	r3, [pc, #424]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b5e:	4a69      	ldr	r2, [pc, #420]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b60:	f023 0301 	bic.w	r3, r3, #1
 8007b64:	6713      	str	r3, [r2, #112]	; 0x70
 8007b66:	4b67      	ldr	r3, [pc, #412]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b6a:	4a66      	ldr	r2, [pc, #408]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b6c:	f023 0304 	bic.w	r3, r3, #4
 8007b70:	6713      	str	r3, [r2, #112]	; 0x70
 8007b72:	e01c      	b.n	8007bae <HAL_RCC_OscConfig+0x376>
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	689b      	ldr	r3, [r3, #8]
 8007b78:	2b05      	cmp	r3, #5
 8007b7a:	d10c      	bne.n	8007b96 <HAL_RCC_OscConfig+0x35e>
 8007b7c:	4b61      	ldr	r3, [pc, #388]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b80:	4a60      	ldr	r2, [pc, #384]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b82:	f043 0304 	orr.w	r3, r3, #4
 8007b86:	6713      	str	r3, [r2, #112]	; 0x70
 8007b88:	4b5e      	ldr	r3, [pc, #376]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8c:	4a5d      	ldr	r2, [pc, #372]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b8e:	f043 0301 	orr.w	r3, r3, #1
 8007b92:	6713      	str	r3, [r2, #112]	; 0x70
 8007b94:	e00b      	b.n	8007bae <HAL_RCC_OscConfig+0x376>
 8007b96:	4b5b      	ldr	r3, [pc, #364]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b9a:	4a5a      	ldr	r2, [pc, #360]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007b9c:	f023 0301 	bic.w	r3, r3, #1
 8007ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8007ba2:	4b58      	ldr	r3, [pc, #352]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ba6:	4a57      	ldr	r2, [pc, #348]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ba8:	f023 0304 	bic.w	r3, r3, #4
 8007bac:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	689b      	ldr	r3, [r3, #8]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d015      	beq.n	8007be2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bb6:	f7fc ffaf 	bl	8004b18 <HAL_GetTick>
 8007bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bbc:	e00a      	b.n	8007bd4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bbe:	f7fc ffab 	bl	8004b18 <HAL_GetTick>
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	693b      	ldr	r3, [r7, #16]
 8007bc6:	1ad3      	subs	r3, r2, r3
 8007bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bcc:	4293      	cmp	r3, r2
 8007bce:	d901      	bls.n	8007bd4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8007bd0:	2303      	movs	r3, #3
 8007bd2:	e0ce      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007bd4:	4b4b      	ldr	r3, [pc, #300]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007bd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d0ee      	beq.n	8007bbe <HAL_RCC_OscConfig+0x386>
 8007be0:	e014      	b.n	8007c0c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007be2:	f7fc ff99 	bl	8004b18 <HAL_GetTick>
 8007be6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007be8:	e00a      	b.n	8007c00 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007bea:	f7fc ff95 	bl	8004b18 <HAL_GetTick>
 8007bee:	4602      	mov	r2, r0
 8007bf0:	693b      	ldr	r3, [r7, #16]
 8007bf2:	1ad3      	subs	r3, r2, r3
 8007bf4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bf8:	4293      	cmp	r3, r2
 8007bfa:	d901      	bls.n	8007c00 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007bfc:	2303      	movs	r3, #3
 8007bfe:	e0b8      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007c00:	4b40      	ldr	r3, [pc, #256]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d1ee      	bne.n	8007bea <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007c0c:	7dfb      	ldrb	r3, [r7, #23]
 8007c0e:	2b01      	cmp	r3, #1
 8007c10:	d105      	bne.n	8007c1e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007c12:	4b3c      	ldr	r3, [pc, #240]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c16:	4a3b      	ldr	r2, [pc, #236]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c18:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	f000 80a4 	beq.w	8007d70 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c28:	4b36      	ldr	r3, [pc, #216]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c2a:	689b      	ldr	r3, [r3, #8]
 8007c2c:	f003 030c 	and.w	r3, r3, #12
 8007c30:	2b08      	cmp	r3, #8
 8007c32:	d06b      	beq.n	8007d0c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b02      	cmp	r3, #2
 8007c3a:	d149      	bne.n	8007cd0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c3c:	4b31      	ldr	r3, [pc, #196]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	4a30      	ldr	r2, [pc, #192]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c48:	f7fc ff66 	bl	8004b18 <HAL_GetTick>
 8007c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c4e:	e008      	b.n	8007c62 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007c50:	f7fc ff62 	bl	8004b18 <HAL_GetTick>
 8007c54:	4602      	mov	r2, r0
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	1ad3      	subs	r3, r2, r3
 8007c5a:	2b02      	cmp	r3, #2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e087      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c62:	4b28      	ldr	r3, [pc, #160]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1f0      	bne.n	8007c50 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	69da      	ldr	r2, [r3, #28]
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a1b      	ldr	r3, [r3, #32]
 8007c76:	431a      	orrs	r2, r3
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c7c:	019b      	lsls	r3, r3, #6
 8007c7e:	431a      	orrs	r2, r3
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c84:	085b      	lsrs	r3, r3, #1
 8007c86:	3b01      	subs	r3, #1
 8007c88:	041b      	lsls	r3, r3, #16
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c90:	061b      	lsls	r3, r3, #24
 8007c92:	4313      	orrs	r3, r2
 8007c94:	4a1b      	ldr	r2, [pc, #108]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c96:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007c9a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007c9c:	4b19      	ldr	r3, [pc, #100]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	4a18      	ldr	r2, [pc, #96]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007ca2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ca6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ca8:	f7fc ff36 	bl	8004b18 <HAL_GetTick>
 8007cac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cae:	e008      	b.n	8007cc2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007cb0:	f7fc ff32 	bl	8004b18 <HAL_GetTick>
 8007cb4:	4602      	mov	r2, r0
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	1ad3      	subs	r3, r2, r3
 8007cba:	2b02      	cmp	r3, #2
 8007cbc:	d901      	bls.n	8007cc2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007cbe:	2303      	movs	r3, #3
 8007cc0:	e057      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cc2:	4b10      	ldr	r3, [pc, #64]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d0f0      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x478>
 8007cce:	e04f      	b.n	8007d70 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007cd0:	4b0c      	ldr	r3, [pc, #48]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	4a0b      	ldr	r2, [pc, #44]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007cd6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007cda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cdc:	f7fc ff1c 	bl	8004b18 <HAL_GetTick>
 8007ce0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ce2:	e008      	b.n	8007cf6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ce4:	f7fc ff18 	bl	8004b18 <HAL_GetTick>
 8007ce8:	4602      	mov	r2, r0
 8007cea:	693b      	ldr	r3, [r7, #16]
 8007cec:	1ad3      	subs	r3, r2, r3
 8007cee:	2b02      	cmp	r3, #2
 8007cf0:	d901      	bls.n	8007cf6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007cf2:	2303      	movs	r3, #3
 8007cf4:	e03d      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007cf6:	4b03      	ldr	r3, [pc, #12]	; (8007d04 <HAL_RCC_OscConfig+0x4cc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1f0      	bne.n	8007ce4 <HAL_RCC_OscConfig+0x4ac>
 8007d02:	e035      	b.n	8007d70 <HAL_RCC_OscConfig+0x538>
 8007d04:	40023800 	.word	0x40023800
 8007d08:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007d0c:	4b1b      	ldr	r3, [pc, #108]	; (8007d7c <HAL_RCC_OscConfig+0x544>)
 8007d0e:	685b      	ldr	r3, [r3, #4]
 8007d10:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	2b01      	cmp	r3, #1
 8007d18:	d028      	beq.n	8007d6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d1a:	68fb      	ldr	r3, [r7, #12]
 8007d1c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007d24:	429a      	cmp	r2, r3
 8007d26:	d121      	bne.n	8007d6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007d32:	429a      	cmp	r2, r3
 8007d34:	d11a      	bne.n	8007d6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d36:	68fa      	ldr	r2, [r7, #12]
 8007d38:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007d3c:	4013      	ands	r3, r2
 8007d3e:	687a      	ldr	r2, [r7, #4]
 8007d40:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007d42:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d111      	bne.n	8007d6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d52:	085b      	lsrs	r3, r3, #1
 8007d54:	3b01      	subs	r3, #1
 8007d56:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007d58:	429a      	cmp	r2, r3
 8007d5a:	d107      	bne.n	8007d6c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d66:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007d68:	429a      	cmp	r2, r3
 8007d6a:	d001      	beq.n	8007d70 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007d6c:	2301      	movs	r3, #1
 8007d6e:	e000      	b.n	8007d72 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	40023800 	.word	0x40023800

08007d80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b084      	sub	sp, #16
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
 8007d88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007d8a:	2300      	movs	r3, #0
 8007d8c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	2b00      	cmp	r3, #0
 8007d92:	d101      	bne.n	8007d98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007d94:	2301      	movs	r3, #1
 8007d96:	e0d0      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007d98:	4b6a      	ldr	r3, [pc, #424]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f003 030f 	and.w	r3, r3, #15
 8007da0:	683a      	ldr	r2, [r7, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d910      	bls.n	8007dc8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007da6:	4b67      	ldr	r3, [pc, #412]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f023 020f 	bic.w	r2, r3, #15
 8007dae:	4965      	ldr	r1, [pc, #404]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007db0:	683b      	ldr	r3, [r7, #0]
 8007db2:	4313      	orrs	r3, r2
 8007db4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007db6:	4b63      	ldr	r3, [pc, #396]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f003 030f 	and.w	r3, r3, #15
 8007dbe:	683a      	ldr	r2, [r7, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d001      	beq.n	8007dc8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	e0b8      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	681b      	ldr	r3, [r3, #0]
 8007dcc:	f003 0302 	and.w	r3, r3, #2
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	d020      	beq.n	8007e16 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	f003 0304 	and.w	r3, r3, #4
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d005      	beq.n	8007dec <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007de0:	4b59      	ldr	r3, [pc, #356]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	4a58      	ldr	r2, [pc, #352]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007de6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007dea:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	f003 0308 	and.w	r3, r3, #8
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d005      	beq.n	8007e04 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007df8:	4b53      	ldr	r3, [pc, #332]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007dfa:	689b      	ldr	r3, [r3, #8]
 8007dfc:	4a52      	ldr	r2, [pc, #328]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007dfe:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007e02:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007e04:	4b50      	ldr	r3, [pc, #320]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	689b      	ldr	r3, [r3, #8]
 8007e10:	494d      	ldr	r1, [pc, #308]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e12:	4313      	orrs	r3, r2
 8007e14:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	f003 0301 	and.w	r3, r3, #1
 8007e1e:	2b00      	cmp	r3, #0
 8007e20:	d040      	beq.n	8007ea4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b01      	cmp	r3, #1
 8007e28:	d107      	bne.n	8007e3a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007e2a:	4b47      	ldr	r3, [pc, #284]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e2c:	681b      	ldr	r3, [r3, #0]
 8007e2e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d115      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e36:	2301      	movs	r3, #1
 8007e38:	e07f      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	2b02      	cmp	r3, #2
 8007e40:	d107      	bne.n	8007e52 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e42:	4b41      	ldr	r3, [pc, #260]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d109      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e4e:	2301      	movs	r3, #1
 8007e50:	e073      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007e52:	4b3d      	ldr	r3, [pc, #244]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f003 0302 	and.w	r3, r3, #2
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d101      	bne.n	8007e62 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007e5e:	2301      	movs	r3, #1
 8007e60:	e06b      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007e62:	4b39      	ldr	r3, [pc, #228]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e64:	689b      	ldr	r3, [r3, #8]
 8007e66:	f023 0203 	bic.w	r2, r3, #3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	685b      	ldr	r3, [r3, #4]
 8007e6e:	4936      	ldr	r1, [pc, #216]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e70:	4313      	orrs	r3, r2
 8007e72:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e74:	f7fc fe50 	bl	8004b18 <HAL_GetTick>
 8007e78:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e7a:	e00a      	b.n	8007e92 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007e7c:	f7fc fe4c 	bl	8004b18 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68fb      	ldr	r3, [r7, #12]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e8a:	4293      	cmp	r3, r2
 8007e8c:	d901      	bls.n	8007e92 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007e8e:	2303      	movs	r3, #3
 8007e90:	e053      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007e92:	4b2d      	ldr	r3, [pc, #180]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007e94:	689b      	ldr	r3, [r3, #8]
 8007e96:	f003 020c 	and.w	r2, r3, #12
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	685b      	ldr	r3, [r3, #4]
 8007e9e:	009b      	lsls	r3, r3, #2
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d1eb      	bne.n	8007e7c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007ea4:	4b27      	ldr	r3, [pc, #156]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	f003 030f 	and.w	r3, r3, #15
 8007eac:	683a      	ldr	r2, [r7, #0]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d210      	bcs.n	8007ed4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eb2:	4b24      	ldr	r3, [pc, #144]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f023 020f 	bic.w	r2, r3, #15
 8007eba:	4922      	ldr	r1, [pc, #136]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ec2:	4b20      	ldr	r3, [pc, #128]	; (8007f44 <HAL_RCC_ClockConfig+0x1c4>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	683a      	ldr	r2, [r7, #0]
 8007ecc:	429a      	cmp	r2, r3
 8007ece:	d001      	beq.n	8007ed4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	e032      	b.n	8007f3a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f003 0304 	and.w	r3, r3, #4
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d008      	beq.n	8007ef2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007ee0:	4b19      	ldr	r3, [pc, #100]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007ee2:	689b      	ldr	r3, [r3, #8]
 8007ee4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	68db      	ldr	r3, [r3, #12]
 8007eec:	4916      	ldr	r1, [pc, #88]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007eee:	4313      	orrs	r3, r2
 8007ef0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 0308 	and.w	r3, r3, #8
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d009      	beq.n	8007f12 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007efe:	4b12      	ldr	r3, [pc, #72]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007f00:	689b      	ldr	r3, [r3, #8]
 8007f02:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	691b      	ldr	r3, [r3, #16]
 8007f0a:	00db      	lsls	r3, r3, #3
 8007f0c:	490e      	ldr	r1, [pc, #56]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007f0e:	4313      	orrs	r3, r2
 8007f10:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007f12:	f000 f821 	bl	8007f58 <HAL_RCC_GetSysClockFreq>
 8007f16:	4601      	mov	r1, r0
 8007f18:	4b0b      	ldr	r3, [pc, #44]	; (8007f48 <HAL_RCC_ClockConfig+0x1c8>)
 8007f1a:	689b      	ldr	r3, [r3, #8]
 8007f1c:	091b      	lsrs	r3, r3, #4
 8007f1e:	f003 030f 	and.w	r3, r3, #15
 8007f22:	4a0a      	ldr	r2, [pc, #40]	; (8007f4c <HAL_RCC_ClockConfig+0x1cc>)
 8007f24:	5cd3      	ldrb	r3, [r2, r3]
 8007f26:	fa21 f303 	lsr.w	r3, r1, r3
 8007f2a:	4a09      	ldr	r2, [pc, #36]	; (8007f50 <HAL_RCC_ClockConfig+0x1d0>)
 8007f2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007f2e:	4b09      	ldr	r3, [pc, #36]	; (8007f54 <HAL_RCC_ClockConfig+0x1d4>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4618      	mov	r0, r3
 8007f34:	f7fc fcca 	bl	80048cc <HAL_InitTick>

  return HAL_OK;
 8007f38:	2300      	movs	r3, #0
}
 8007f3a:	4618      	mov	r0, r3
 8007f3c:	3710      	adds	r7, #16
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	bd80      	pop	{r7, pc}
 8007f42:	bf00      	nop
 8007f44:	40023c00 	.word	0x40023c00
 8007f48:	40023800 	.word	0x40023800
 8007f4c:	080106d4 	.word	0x080106d4
 8007f50:	20000050 	.word	0x20000050
 8007f54:	20000054 	.word	0x20000054

08007f58 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007f58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	607b      	str	r3, [r7, #4]
 8007f62:	2300      	movs	r3, #0
 8007f64:	60fb      	str	r3, [r7, #12]
 8007f66:	2300      	movs	r3, #0
 8007f68:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007f6a:	2300      	movs	r3, #0
 8007f6c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007f6e:	4b50      	ldr	r3, [pc, #320]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f70:	689b      	ldr	r3, [r3, #8]
 8007f72:	f003 030c 	and.w	r3, r3, #12
 8007f76:	2b04      	cmp	r3, #4
 8007f78:	d007      	beq.n	8007f8a <HAL_RCC_GetSysClockFreq+0x32>
 8007f7a:	2b08      	cmp	r3, #8
 8007f7c:	d008      	beq.n	8007f90 <HAL_RCC_GetSysClockFreq+0x38>
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	f040 808d 	bne.w	800809e <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007f84:	4b4b      	ldr	r3, [pc, #300]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 8007f86:	60bb      	str	r3, [r7, #8]
      break;
 8007f88:	e08c      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007f8a:	4b4b      	ldr	r3, [pc, #300]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007f8c:	60bb      	str	r3, [r7, #8]
      break;
 8007f8e:	e089      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007f90:	4b47      	ldr	r3, [pc, #284]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f92:	685b      	ldr	r3, [r3, #4]
 8007f94:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007f98:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007f9a:	4b45      	ldr	r3, [pc, #276]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d023      	beq.n	8007fee <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fa6:	4b42      	ldr	r3, [pc, #264]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007fa8:	685b      	ldr	r3, [r3, #4]
 8007faa:	099b      	lsrs	r3, r3, #6
 8007fac:	f04f 0400 	mov.w	r4, #0
 8007fb0:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007fb4:	f04f 0200 	mov.w	r2, #0
 8007fb8:	ea03 0501 	and.w	r5, r3, r1
 8007fbc:	ea04 0602 	and.w	r6, r4, r2
 8007fc0:	4a3d      	ldr	r2, [pc, #244]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fc2:	fb02 f106 	mul.w	r1, r2, r6
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	fb02 f205 	mul.w	r2, r2, r5
 8007fcc:	440a      	add	r2, r1
 8007fce:	493a      	ldr	r1, [pc, #232]	; (80080b8 <HAL_RCC_GetSysClockFreq+0x160>)
 8007fd0:	fba5 0101 	umull	r0, r1, r5, r1
 8007fd4:	1853      	adds	r3, r2, r1
 8007fd6:	4619      	mov	r1, r3
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	f04f 0400 	mov.w	r4, #0
 8007fde:	461a      	mov	r2, r3
 8007fe0:	4623      	mov	r3, r4
 8007fe2:	f7f8 f965 	bl	80002b0 <__aeabi_uldivmod>
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	460c      	mov	r4, r1
 8007fea:	60fb      	str	r3, [r7, #12]
 8007fec:	e049      	b.n	8008082 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007fee:	4b30      	ldr	r3, [pc, #192]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8007ff0:	685b      	ldr	r3, [r3, #4]
 8007ff2:	099b      	lsrs	r3, r3, #6
 8007ff4:	f04f 0400 	mov.w	r4, #0
 8007ff8:	f240 11ff 	movw	r1, #511	; 0x1ff
 8007ffc:	f04f 0200 	mov.w	r2, #0
 8008000:	ea03 0501 	and.w	r5, r3, r1
 8008004:	ea04 0602 	and.w	r6, r4, r2
 8008008:	4629      	mov	r1, r5
 800800a:	4632      	mov	r2, r6
 800800c:	f04f 0300 	mov.w	r3, #0
 8008010:	f04f 0400 	mov.w	r4, #0
 8008014:	0154      	lsls	r4, r2, #5
 8008016:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800801a:	014b      	lsls	r3, r1, #5
 800801c:	4619      	mov	r1, r3
 800801e:	4622      	mov	r2, r4
 8008020:	1b49      	subs	r1, r1, r5
 8008022:	eb62 0206 	sbc.w	r2, r2, r6
 8008026:	f04f 0300 	mov.w	r3, #0
 800802a:	f04f 0400 	mov.w	r4, #0
 800802e:	0194      	lsls	r4, r2, #6
 8008030:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008034:	018b      	lsls	r3, r1, #6
 8008036:	1a5b      	subs	r3, r3, r1
 8008038:	eb64 0402 	sbc.w	r4, r4, r2
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	00e2      	lsls	r2, r4, #3
 8008046:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800804a:	00d9      	lsls	r1, r3, #3
 800804c:	460b      	mov	r3, r1
 800804e:	4614      	mov	r4, r2
 8008050:	195b      	adds	r3, r3, r5
 8008052:	eb44 0406 	adc.w	r4, r4, r6
 8008056:	f04f 0100 	mov.w	r1, #0
 800805a:	f04f 0200 	mov.w	r2, #0
 800805e:	02a2      	lsls	r2, r4, #10
 8008060:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008064:	0299      	lsls	r1, r3, #10
 8008066:	460b      	mov	r3, r1
 8008068:	4614      	mov	r4, r2
 800806a:	4618      	mov	r0, r3
 800806c:	4621      	mov	r1, r4
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	f04f 0400 	mov.w	r4, #0
 8008074:	461a      	mov	r2, r3
 8008076:	4623      	mov	r3, r4
 8008078:	f7f8 f91a 	bl	80002b0 <__aeabi_uldivmod>
 800807c:	4603      	mov	r3, r0
 800807e:	460c      	mov	r4, r1
 8008080:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008082:	4b0b      	ldr	r3, [pc, #44]	; (80080b0 <HAL_RCC_GetSysClockFreq+0x158>)
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	0c1b      	lsrs	r3, r3, #16
 8008088:	f003 0303 	and.w	r3, r3, #3
 800808c:	3301      	adds	r3, #1
 800808e:	005b      	lsls	r3, r3, #1
 8008090:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8008092:	68fa      	ldr	r2, [r7, #12]
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	fbb2 f3f3 	udiv	r3, r2, r3
 800809a:	60bb      	str	r3, [r7, #8]
      break;
 800809c:	e002      	b.n	80080a4 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800809e:	4b05      	ldr	r3, [pc, #20]	; (80080b4 <HAL_RCC_GetSysClockFreq+0x15c>)
 80080a0:	60bb      	str	r3, [r7, #8]
      break;
 80080a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80080a4:	68bb      	ldr	r3, [r7, #8]
}
 80080a6:	4618      	mov	r0, r3
 80080a8:	3714      	adds	r7, #20
 80080aa:	46bd      	mov	sp, r7
 80080ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80080ae:	bf00      	nop
 80080b0:	40023800 	.word	0x40023800
 80080b4:	00f42400 	.word	0x00f42400
 80080b8:	017d7840 	.word	0x017d7840

080080bc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80080c0:	4b03      	ldr	r3, [pc, #12]	; (80080d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80080c2:	681b      	ldr	r3, [r3, #0]
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	46bd      	mov	sp, r7
 80080c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080cc:	4770      	bx	lr
 80080ce:	bf00      	nop
 80080d0:	20000050 	.word	0x20000050

080080d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80080d8:	f7ff fff0 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 80080dc:	4601      	mov	r1, r0
 80080de:	4b05      	ldr	r3, [pc, #20]	; (80080f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80080e0:	689b      	ldr	r3, [r3, #8]
 80080e2:	0a9b      	lsrs	r3, r3, #10
 80080e4:	f003 0307 	and.w	r3, r3, #7
 80080e8:	4a03      	ldr	r2, [pc, #12]	; (80080f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80080ea:	5cd3      	ldrb	r3, [r2, r3]
 80080ec:	fa21 f303 	lsr.w	r3, r1, r3
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	bd80      	pop	{r7, pc}
 80080f4:	40023800 	.word	0x40023800
 80080f8:	080106e4 	.word	0x080106e4

080080fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80080fc:	b580      	push	{r7, lr}
 80080fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008100:	f7ff ffdc 	bl	80080bc <HAL_RCC_GetHCLKFreq>
 8008104:	4601      	mov	r1, r0
 8008106:	4b05      	ldr	r3, [pc, #20]	; (800811c <HAL_RCC_GetPCLK2Freq+0x20>)
 8008108:	689b      	ldr	r3, [r3, #8]
 800810a:	0b5b      	lsrs	r3, r3, #13
 800810c:	f003 0307 	and.w	r3, r3, #7
 8008110:	4a03      	ldr	r2, [pc, #12]	; (8008120 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008112:	5cd3      	ldrb	r3, [r2, r3]
 8008114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008118:	4618      	mov	r0, r3
 800811a:	bd80      	pop	{r7, pc}
 800811c:	40023800 	.word	0x40023800
 8008120:	080106e4 	.word	0x080106e4

08008124 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008124:	b480      	push	{r7}
 8008126:	b083      	sub	sp, #12
 8008128:	af00      	add	r7, sp, #0
 800812a:	6078      	str	r0, [r7, #4]
 800812c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	220f      	movs	r2, #15
 8008132:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008134:	4b12      	ldr	r3, [pc, #72]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f003 0203 	and.w	r2, r3, #3
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008140:	4b0f      	ldr	r3, [pc, #60]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 8008142:	689b      	ldr	r3, [r3, #8]
 8008144:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800814c:	4b0c      	ldr	r3, [pc, #48]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008158:	4b09      	ldr	r3, [pc, #36]	; (8008180 <HAL_RCC_GetClockConfig+0x5c>)
 800815a:	689b      	ldr	r3, [r3, #8]
 800815c:	08db      	lsrs	r3, r3, #3
 800815e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008166:	4b07      	ldr	r3, [pc, #28]	; (8008184 <HAL_RCC_GetClockConfig+0x60>)
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	f003 020f 	and.w	r2, r3, #15
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	601a      	str	r2, [r3, #0]
}
 8008172:	bf00      	nop
 8008174:	370c      	adds	r7, #12
 8008176:	46bd      	mov	sp, r7
 8008178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817c:	4770      	bx	lr
 800817e:	bf00      	nop
 8008180:	40023800 	.word	0x40023800
 8008184:	40023c00 	.word	0x40023c00

08008188 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008188:	b580      	push	{r7, lr}
 800818a:	b088      	sub	sp, #32
 800818c:	af00      	add	r7, sp, #0
 800818e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008190:	2300      	movs	r3, #0
 8008192:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008194:	2300      	movs	r3, #0
 8008196:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008198:	2300      	movs	r3, #0
 800819a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800819c:	2300      	movs	r3, #0
 800819e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80081a0:	2300      	movs	r3, #0
 80081a2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	f003 0301 	and.w	r3, r3, #1
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d012      	beq.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80081b0:	4b69      	ldr	r3, [pc, #420]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b2:	689b      	ldr	r3, [r3, #8]
 80081b4:	4a68      	ldr	r2, [pc, #416]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081b6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80081ba:	6093      	str	r3, [r2, #8]
 80081bc:	4b66      	ldr	r3, [pc, #408]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081be:	689a      	ldr	r2, [r3, #8]
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081c4:	4964      	ldr	r1, [pc, #400]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081c6:	4313      	orrs	r3, r2
 80081c8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081ce:	2b00      	cmp	r3, #0
 80081d0:	d101      	bne.n	80081d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80081d2:	2301      	movs	r3, #1
 80081d4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80081de:	2b00      	cmp	r3, #0
 80081e0:	d017      	beq.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80081e2:	4b5d      	ldr	r3, [pc, #372]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081f0:	4959      	ldr	r1, [pc, #356]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80081f2:	4313      	orrs	r3, r2
 80081f4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80081fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008200:	d101      	bne.n	8008206 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008202:	2301      	movs	r3, #1
 8008204:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800820a:	2b00      	cmp	r3, #0
 800820c:	d101      	bne.n	8008212 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800820e:	2301      	movs	r3, #1
 8008210:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800821a:	2b00      	cmp	r3, #0
 800821c:	d017      	beq.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800821e:	4b4e      	ldr	r3, [pc, #312]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008220:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008224:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800822c:	494a      	ldr	r1, [pc, #296]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800822e:	4313      	orrs	r3, r2
 8008230:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008238:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800823c:	d101      	bne.n	8008242 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800823e:	2301      	movs	r3, #1
 8008240:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008246:	2b00      	cmp	r3, #0
 8008248:	d101      	bne.n	800824e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800824a:	2301      	movs	r3, #1
 800824c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008256:	2b00      	cmp	r3, #0
 8008258:	d001      	beq.n	800825e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800825a:	2301      	movs	r3, #1
 800825c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	f003 0320 	and.w	r3, r3, #32
 8008266:	2b00      	cmp	r3, #0
 8008268:	f000 808b 	beq.w	8008382 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800826c:	4b3a      	ldr	r3, [pc, #232]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800826e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008270:	4a39      	ldr	r2, [pc, #228]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008272:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008276:	6413      	str	r3, [r2, #64]	; 0x40
 8008278:	4b37      	ldr	r3, [pc, #220]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800827a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800827c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008280:	60bb      	str	r3, [r7, #8]
 8008282:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008284:	4b35      	ldr	r3, [pc, #212]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	4a34      	ldr	r2, [pc, #208]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800828a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800828e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008290:	f7fc fc42 	bl	8004b18 <HAL_GetTick>
 8008294:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8008296:	e008      	b.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008298:	f7fc fc3e 	bl	8004b18 <HAL_GetTick>
 800829c:	4602      	mov	r2, r0
 800829e:	697b      	ldr	r3, [r7, #20]
 80082a0:	1ad3      	subs	r3, r2, r3
 80082a2:	2b64      	cmp	r3, #100	; 0x64
 80082a4:	d901      	bls.n	80082aa <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80082a6:	2303      	movs	r3, #3
 80082a8:	e355      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80082aa:	4b2c      	ldr	r3, [pc, #176]	; (800835c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082b2:	2b00      	cmp	r3, #0
 80082b4:	d0f0      	beq.n	8008298 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80082b6:	4b28      	ldr	r3, [pc, #160]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082be:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80082c0:	693b      	ldr	r3, [r7, #16]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d035      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80082ce:	693a      	ldr	r2, [r7, #16]
 80082d0:	429a      	cmp	r2, r3
 80082d2:	d02e      	beq.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80082d4:	4b20      	ldr	r3, [pc, #128]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082dc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80082de:	4b1e      	ldr	r3, [pc, #120]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082e2:	4a1d      	ldr	r2, [pc, #116]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80082e8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80082ea:	4b1b      	ldr	r3, [pc, #108]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80082ee:	4a1a      	ldr	r2, [pc, #104]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80082f4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80082f6:	4a18      	ldr	r2, [pc, #96]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082f8:	693b      	ldr	r3, [r7, #16]
 80082fa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80082fc:	4b16      	ldr	r3, [pc, #88]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80082fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008300:	f003 0301 	and.w	r3, r3, #1
 8008304:	2b01      	cmp	r3, #1
 8008306:	d114      	bne.n	8008332 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008308:	f7fc fc06 	bl	8004b18 <HAL_GetTick>
 800830c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800830e:	e00a      	b.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008310:	f7fc fc02 	bl	8004b18 <HAL_GetTick>
 8008314:	4602      	mov	r2, r0
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	1ad3      	subs	r3, r2, r3
 800831a:	f241 3288 	movw	r2, #5000	; 0x1388
 800831e:	4293      	cmp	r3, r2
 8008320:	d901      	bls.n	8008326 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008322:	2303      	movs	r3, #3
 8008324:	e317      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008326:	4b0c      	ldr	r3, [pc, #48]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008328:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800832a:	f003 0302 	and.w	r3, r3, #2
 800832e:	2b00      	cmp	r3, #0
 8008330:	d0ee      	beq.n	8008310 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008336:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800833a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800833e:	d111      	bne.n	8008364 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008340:	4b05      	ldr	r3, [pc, #20]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800834c:	4b04      	ldr	r3, [pc, #16]	; (8008360 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800834e:	400b      	ands	r3, r1
 8008350:	4901      	ldr	r1, [pc, #4]	; (8008358 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008352:	4313      	orrs	r3, r2
 8008354:	608b      	str	r3, [r1, #8]
 8008356:	e00b      	b.n	8008370 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8008358:	40023800 	.word	0x40023800
 800835c:	40007000 	.word	0x40007000
 8008360:	0ffffcff 	.word	0x0ffffcff
 8008364:	4bb0      	ldr	r3, [pc, #704]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008366:	689b      	ldr	r3, [r3, #8]
 8008368:	4aaf      	ldr	r2, [pc, #700]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800836a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800836e:	6093      	str	r3, [r2, #8]
 8008370:	4bad      	ldr	r3, [pc, #692]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008372:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008378:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800837c:	49aa      	ldr	r1, [pc, #680]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800837e:	4313      	orrs	r3, r2
 8008380:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	f003 0310 	and.w	r3, r3, #16
 800838a:	2b00      	cmp	r3, #0
 800838c:	d010      	beq.n	80083b0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800838e:	4ba6      	ldr	r3, [pc, #664]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008394:	4aa4      	ldr	r2, [pc, #656]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008396:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800839a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800839e:	4ba2      	ldr	r3, [pc, #648]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083a0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083a8:	499f      	ldr	r1, [pc, #636]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083aa:	4313      	orrs	r3, r2
 80083ac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d00a      	beq.n	80083d2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80083bc:	4b9a      	ldr	r3, [pc, #616]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083c2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80083ca:	4997      	ldr	r1, [pc, #604]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083cc:	4313      	orrs	r3, r2
 80083ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083da:	2b00      	cmp	r3, #0
 80083dc:	d00a      	beq.n	80083f4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80083de:	4b92      	ldr	r3, [pc, #584]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083e4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80083ec:	498e      	ldr	r1, [pc, #568]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ee:	4313      	orrs	r3, r2
 80083f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80083fc:	2b00      	cmp	r3, #0
 80083fe:	d00a      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008400:	4b89      	ldr	r3, [pc, #548]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008406:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800840e:	4986      	ldr	r1, [pc, #536]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008410:	4313      	orrs	r3, r2
 8008412:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800841e:	2b00      	cmp	r3, #0
 8008420:	d00a      	beq.n	8008438 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008422:	4b81      	ldr	r3, [pc, #516]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008424:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008428:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008430:	497d      	ldr	r1, [pc, #500]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008432:	4313      	orrs	r3, r2
 8008434:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008440:	2b00      	cmp	r3, #0
 8008442:	d00a      	beq.n	800845a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008444:	4b78      	ldr	r3, [pc, #480]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008446:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800844a:	f023 0203 	bic.w	r2, r3, #3
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008452:	4975      	ldr	r1, [pc, #468]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008454:	4313      	orrs	r3, r2
 8008456:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008462:	2b00      	cmp	r3, #0
 8008464:	d00a      	beq.n	800847c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008466:	4b70      	ldr	r3, [pc, #448]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008468:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800846c:	f023 020c 	bic.w	r2, r3, #12
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008474:	496c      	ldr	r1, [pc, #432]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008476:	4313      	orrs	r3, r2
 8008478:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008484:	2b00      	cmp	r3, #0
 8008486:	d00a      	beq.n	800849e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8008488:	4b67      	ldr	r3, [pc, #412]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800848a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800848e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008496:	4964      	ldr	r1, [pc, #400]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008498:	4313      	orrs	r3, r2
 800849a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d00a      	beq.n	80084c0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80084aa:	4b5f      	ldr	r3, [pc, #380]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084b0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084b8:	495b      	ldr	r1, [pc, #364]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ba:	4313      	orrs	r3, r2
 80084bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d00a      	beq.n	80084e2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80084cc:	4b56      	ldr	r3, [pc, #344]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084d2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80084da:	4953      	ldr	r1, [pc, #332]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084dc:	4313      	orrs	r3, r2
 80084de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	681b      	ldr	r3, [r3, #0]
 80084e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00a      	beq.n	8008504 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80084ee:	4b4e      	ldr	r3, [pc, #312]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80084f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084fc:	494a      	ldr	r1, [pc, #296]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800850c:	2b00      	cmp	r3, #0
 800850e:	d00a      	beq.n	8008526 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008510:	4b45      	ldr	r3, [pc, #276]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008516:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800851e:	4942      	ldr	r1, [pc, #264]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008520:	4313      	orrs	r3, r2
 8008522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800852e:	2b00      	cmp	r3, #0
 8008530:	d00a      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008532:	4b3d      	ldr	r3, [pc, #244]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008538:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008540:	4939      	ldr	r1, [pc, #228]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008542:	4313      	orrs	r3, r2
 8008544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008554:	4b34      	ldr	r3, [pc, #208]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800855a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008562:	4931      	ldr	r1, [pc, #196]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008564:	4313      	orrs	r3, r2
 8008566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008572:	2b00      	cmp	r3, #0
 8008574:	d011      	beq.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8008576:	4b2c      	ldr	r3, [pc, #176]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800857c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008584:	4928      	ldr	r1, [pc, #160]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008586:	4313      	orrs	r3, r2
 8008588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008590:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008594:	d101      	bne.n	800859a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8008596:	2301      	movs	r3, #1
 8008598:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f003 0308 	and.w	r3, r3, #8
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	d001      	beq.n	80085aa <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80085a6:	2301      	movs	r3, #1
 80085a8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00a      	beq.n	80085cc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80085b6:	4b1c      	ldr	r3, [pc, #112]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085bc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80085c4:	4918      	ldr	r1, [pc, #96]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085c6:	4313      	orrs	r3, r2
 80085c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80085d4:	2b00      	cmp	r3, #0
 80085d6:	d00b      	beq.n	80085f0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80085d8:	4b13      	ldr	r3, [pc, #76]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80085de:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085e8:	490f      	ldr	r1, [pc, #60]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80085ea:	4313      	orrs	r3, r2
 80085ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80085f0:	69fb      	ldr	r3, [r7, #28]
 80085f2:	2b01      	cmp	r3, #1
 80085f4:	d005      	beq.n	8008602 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80085fe:	f040 80d8 	bne.w	80087b2 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008602:	4b09      	ldr	r3, [pc, #36]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a08      	ldr	r2, [pc, #32]	; (8008628 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008608:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800860c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800860e:	f7fc fa83 	bl	8004b18 <HAL_GetTick>
 8008612:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008614:	e00a      	b.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008616:	f7fc fa7f 	bl	8004b18 <HAL_GetTick>
 800861a:	4602      	mov	r2, r0
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	1ad3      	subs	r3, r2, r3
 8008620:	2b64      	cmp	r3, #100	; 0x64
 8008622:	d903      	bls.n	800862c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008624:	2303      	movs	r3, #3
 8008626:	e196      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 8008628:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800862c:	4b6c      	ldr	r3, [pc, #432]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008634:	2b00      	cmp	r3, #0
 8008636:	d1ee      	bne.n	8008616 <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	f003 0301 	and.w	r3, r3, #1
 8008640:	2b00      	cmp	r3, #0
 8008642:	d021      	beq.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008648:	2b00      	cmp	r3, #0
 800864a:	d11d      	bne.n	8008688 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800864c:	4b64      	ldr	r3, [pc, #400]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800864e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008652:	0c1b      	lsrs	r3, r3, #16
 8008654:	f003 0303 	and.w	r3, r3, #3
 8008658:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800865a:	4b61      	ldr	r3, [pc, #388]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800865c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008660:	0e1b      	lsrs	r3, r3, #24
 8008662:	f003 030f 	and.w	r3, r3, #15
 8008666:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	685b      	ldr	r3, [r3, #4]
 800866c:	019a      	lsls	r2, r3, #6
 800866e:	693b      	ldr	r3, [r7, #16]
 8008670:	041b      	lsls	r3, r3, #16
 8008672:	431a      	orrs	r2, r3
 8008674:	68fb      	ldr	r3, [r7, #12]
 8008676:	061b      	lsls	r3, r3, #24
 8008678:	431a      	orrs	r2, r3
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	689b      	ldr	r3, [r3, #8]
 800867e:	071b      	lsls	r3, r3, #28
 8008680:	4957      	ldr	r1, [pc, #348]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008682:	4313      	orrs	r3, r2
 8008684:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008690:	2b00      	cmp	r3, #0
 8008692:	d004      	beq.n	800869e <HAL_RCCEx_PeriphCLKConfig+0x516>
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008698:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800869c:	d00a      	beq.n	80086b4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d02e      	beq.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086ae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80086b2:	d129      	bne.n	8008708 <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80086b4:	4b4a      	ldr	r3, [pc, #296]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086ba:	0c1b      	lsrs	r3, r3, #16
 80086bc:	f003 0303 	and.w	r3, r3, #3
 80086c0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80086c2:	4b47      	ldr	r3, [pc, #284]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086c4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80086c8:	0f1b      	lsrs	r3, r3, #28
 80086ca:	f003 0307 	and.w	r3, r3, #7
 80086ce:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	685b      	ldr	r3, [r3, #4]
 80086d4:	019a      	lsls	r2, r3, #6
 80086d6:	693b      	ldr	r3, [r7, #16]
 80086d8:	041b      	lsls	r3, r3, #16
 80086da:	431a      	orrs	r2, r3
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	68db      	ldr	r3, [r3, #12]
 80086e0:	061b      	lsls	r3, r3, #24
 80086e2:	431a      	orrs	r2, r3
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	071b      	lsls	r3, r3, #28
 80086e8:	493d      	ldr	r1, [pc, #244]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086ea:	4313      	orrs	r3, r2
 80086ec:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80086f0:	4b3b      	ldr	r3, [pc, #236]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80086f2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80086f6:	f023 021f 	bic.w	r2, r3, #31
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80086fe:	3b01      	subs	r3, #1
 8008700:	4937      	ldr	r1, [pc, #220]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008702:	4313      	orrs	r3, r2
 8008704:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	681b      	ldr	r3, [r3, #0]
 800870c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008710:	2b00      	cmp	r3, #0
 8008712:	d01d      	beq.n	8008750 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008714:	4b32      	ldr	r3, [pc, #200]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008716:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800871a:	0e1b      	lsrs	r3, r3, #24
 800871c:	f003 030f 	and.w	r3, r3, #15
 8008720:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008722:	4b2f      	ldr	r3, [pc, #188]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008724:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008728:	0f1b      	lsrs	r3, r3, #28
 800872a:	f003 0307 	and.w	r3, r3, #7
 800872e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685b      	ldr	r3, [r3, #4]
 8008734:	019a      	lsls	r2, r3, #6
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	691b      	ldr	r3, [r3, #16]
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	431a      	orrs	r2, r3
 800873e:	693b      	ldr	r3, [r7, #16]
 8008740:	061b      	lsls	r3, r3, #24
 8008742:	431a      	orrs	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	071b      	lsls	r3, r3, #28
 8008748:	4925      	ldr	r1, [pc, #148]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800874a:	4313      	orrs	r3, r2
 800874c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008758:	2b00      	cmp	r3, #0
 800875a:	d011      	beq.n	8008780 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	685b      	ldr	r3, [r3, #4]
 8008760:	019a      	lsls	r2, r3, #6
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	691b      	ldr	r3, [r3, #16]
 8008766:	041b      	lsls	r3, r3, #16
 8008768:	431a      	orrs	r2, r3
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	68db      	ldr	r3, [r3, #12]
 800876e:	061b      	lsls	r3, r3, #24
 8008770:	431a      	orrs	r2, r3
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	689b      	ldr	r3, [r3, #8]
 8008776:	071b      	lsls	r3, r3, #28
 8008778:	4919      	ldr	r1, [pc, #100]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800877a:	4313      	orrs	r3, r2
 800877c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008780:	4b17      	ldr	r3, [pc, #92]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	4a16      	ldr	r2, [pc, #88]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008786:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800878a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800878c:	f7fc f9c4 	bl	8004b18 <HAL_GetTick>
 8008790:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008792:	e008      	b.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8008794:	f7fc f9c0 	bl	8004b18 <HAL_GetTick>
 8008798:	4602      	mov	r2, r0
 800879a:	697b      	ldr	r3, [r7, #20]
 800879c:	1ad3      	subs	r3, r2, r3
 800879e:	2b64      	cmp	r3, #100	; 0x64
 80087a0:	d901      	bls.n	80087a6 <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087a2:	2303      	movs	r3, #3
 80087a4:	e0d7      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80087a6:	4b0e      	ldr	r3, [pc, #56]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d0f0      	beq.n	8008794 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80087b2:	69bb      	ldr	r3, [r7, #24]
 80087b4:	2b01      	cmp	r3, #1
 80087b6:	f040 80cd 	bne.w	8008954 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a08      	ldr	r2, [pc, #32]	; (80087e0 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80087c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80087c6:	f7fc f9a7 	bl	8004b18 <HAL_GetTick>
 80087ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087cc:	e00a      	b.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80087ce:	f7fc f9a3 	bl	8004b18 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b64      	cmp	r3, #100	; 0x64
 80087da:	d903      	bls.n	80087e4 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e0ba      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80087e0:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80087e4:	4b5e      	ldr	r3, [pc, #376]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80087ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80087f0:	d0ed      	beq.n	80087ce <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d003      	beq.n	8008806 <HAL_RCCEx_PeriphCLKConfig+0x67e>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008802:	2b00      	cmp	r3, #0
 8008804:	d009      	beq.n	800881a <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800880e:	2b00      	cmp	r3, #0
 8008810:	d02e      	beq.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008816:	2b00      	cmp	r3, #0
 8008818:	d12a      	bne.n	8008870 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800881a:	4b51      	ldr	r3, [pc, #324]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800881c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008820:	0c1b      	lsrs	r3, r3, #16
 8008822:	f003 0303 	and.w	r3, r3, #3
 8008826:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008828:	4b4d      	ldr	r3, [pc, #308]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800882a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800882e:	0f1b      	lsrs	r3, r3, #28
 8008830:	f003 0307 	and.w	r3, r3, #7
 8008834:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	695b      	ldr	r3, [r3, #20]
 800883a:	019a      	lsls	r2, r3, #6
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	041b      	lsls	r3, r3, #16
 8008840:	431a      	orrs	r2, r3
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	699b      	ldr	r3, [r3, #24]
 8008846:	061b      	lsls	r3, r3, #24
 8008848:	431a      	orrs	r2, r3
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	071b      	lsls	r3, r3, #28
 800884e:	4944      	ldr	r1, [pc, #272]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008850:	4313      	orrs	r3, r2
 8008852:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8008856:	4b42      	ldr	r3, [pc, #264]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008858:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800885c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008864:	3b01      	subs	r3, #1
 8008866:	021b      	lsls	r3, r3, #8
 8008868:	493d      	ldr	r1, [pc, #244]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800886a:	4313      	orrs	r3, r2
 800886c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008878:	2b00      	cmp	r3, #0
 800887a:	d022      	beq.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008880:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008884:	d11d      	bne.n	80088c2 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8008886:	4b36      	ldr	r3, [pc, #216]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008888:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800888c:	0e1b      	lsrs	r3, r3, #24
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8008894:	4b32      	ldr	r3, [pc, #200]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800889a:	0f1b      	lsrs	r3, r3, #28
 800889c:	f003 0307 	and.w	r3, r3, #7
 80088a0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	695b      	ldr	r3, [r3, #20]
 80088a6:	019a      	lsls	r2, r3, #6
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6a1b      	ldr	r3, [r3, #32]
 80088ac:	041b      	lsls	r3, r3, #16
 80088ae:	431a      	orrs	r2, r3
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	061b      	lsls	r3, r3, #24
 80088b4:	431a      	orrs	r2, r3
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	071b      	lsls	r3, r3, #28
 80088ba:	4929      	ldr	r1, [pc, #164]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088bc:	4313      	orrs	r3, r2
 80088be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f003 0308 	and.w	r3, r3, #8
 80088ca:	2b00      	cmp	r3, #0
 80088cc:	d028      	beq.n	8008920 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80088ce:	4b24      	ldr	r3, [pc, #144]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088d4:	0e1b      	lsrs	r3, r3, #24
 80088d6:	f003 030f 	and.w	r3, r3, #15
 80088da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80088dc:	4b20      	ldr	r3, [pc, #128]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80088de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e2:	0c1b      	lsrs	r3, r3, #16
 80088e4:	f003 0303 	and.w	r3, r3, #3
 80088e8:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	695b      	ldr	r3, [r3, #20]
 80088ee:	019a      	lsls	r2, r3, #6
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	041b      	lsls	r3, r3, #16
 80088f4:	431a      	orrs	r2, r3
 80088f6:	693b      	ldr	r3, [r7, #16]
 80088f8:	061b      	lsls	r3, r3, #24
 80088fa:	431a      	orrs	r2, r3
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	69db      	ldr	r3, [r3, #28]
 8008900:	071b      	lsls	r3, r3, #28
 8008902:	4917      	ldr	r1, [pc, #92]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008904:	4313      	orrs	r3, r2
 8008906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800890a:	4b15      	ldr	r3, [pc, #84]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800890c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008910:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	4911      	ldr	r1, [pc, #68]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800891a:	4313      	orrs	r3, r2
 800891c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008920:	4b0f      	ldr	r3, [pc, #60]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	4a0e      	ldr	r2, [pc, #56]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800892a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800892c:	f7fc f8f4 	bl	8004b18 <HAL_GetTick>
 8008930:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008932:	e008      	b.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008934:	f7fc f8f0 	bl	8004b18 <HAL_GetTick>
 8008938:	4602      	mov	r2, r0
 800893a:	697b      	ldr	r3, [r7, #20]
 800893c:	1ad3      	subs	r3, r2, r3
 800893e:	2b64      	cmp	r3, #100	; 0x64
 8008940:	d901      	bls.n	8008946 <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008942:	2303      	movs	r3, #3
 8008944:	e007      	b.n	8008956 <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008946:	4b06      	ldr	r3, [pc, #24]	; (8008960 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800894e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008952:	d1ef      	bne.n	8008934 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008954:	2300      	movs	r3, #0
}
 8008956:	4618      	mov	r0, r3
 8008958:	3720      	adds	r7, #32
 800895a:	46bd      	mov	sp, r7
 800895c:	bd80      	pop	{r7, pc}
 800895e:	bf00      	nop
 8008960:	40023800 	.word	0x40023800

08008964 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b082      	sub	sp, #8
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	2b00      	cmp	r3, #0
 8008970:	d101      	bne.n	8008976 <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008972:	2301      	movs	r3, #1
 8008974:	e06b      	b.n	8008a4e <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	7f5b      	ldrb	r3, [r3, #29]
 800897a:	b2db      	uxtb	r3, r3
 800897c:	2b00      	cmp	r3, #0
 800897e:	d105      	bne.n	800898c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2200      	movs	r2, #0
 8008984:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8008986:	6878      	ldr	r0, [r7, #4]
 8008988:	f7fb fd06 	bl	8004398 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	2202      	movs	r2, #2
 8008990:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	22ca      	movs	r2, #202	; 0xca
 8008998:	625a      	str	r2, [r3, #36]	; 0x24
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	681b      	ldr	r3, [r3, #0]
 800899e:	2253      	movs	r2, #83	; 0x53
 80089a0:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80089a2:	6878      	ldr	r0, [r7, #4]
 80089a4:	f000 fbae 	bl	8009104 <RTC_EnterInitMode>
 80089a8:	4603      	mov	r3, r0
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d008      	beq.n	80089c0 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	22ff      	movs	r2, #255	; 0xff
 80089b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80089bc:	2301      	movs	r3, #1
 80089be:	e046      	b.n	8008a4e <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	681b      	ldr	r3, [r3, #0]
 80089c4:	6899      	ldr	r1, [r3, #8]
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681a      	ldr	r2, [r3, #0]
 80089ca:	4b23      	ldr	r3, [pc, #140]	; (8008a58 <HAL_RTC_Init+0xf4>)
 80089cc:	400b      	ands	r3, r1
 80089ce:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	6899      	ldr	r1, [r3, #8]
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	685a      	ldr	r2, [r3, #4]
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	691b      	ldr	r3, [r3, #16]
 80089de:	431a      	orrs	r2, r3
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	695b      	ldr	r3, [r3, #20]
 80089e4:	431a      	orrs	r2, r3
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	430a      	orrs	r2, r1
 80089ec:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	687a      	ldr	r2, [r7, #4]
 80089f4:	68d2      	ldr	r2, [r2, #12]
 80089f6:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	6919      	ldr	r1, [r3, #16]
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	689b      	ldr	r3, [r3, #8]
 8008a02:	041a      	lsls	r2, r3, #16
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	430a      	orrs	r2, r1
 8008a0a:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	68da      	ldr	r2, [r3, #12]
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a1a:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f022 0208 	bic.w	r2, r2, #8
 8008a2a:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	699a      	ldr	r2, [r3, #24]
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	681b      	ldr	r3, [r3, #0]
 8008a3a:	430a      	orrs	r2, r1
 8008a3c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	681b      	ldr	r3, [r3, #0]
 8008a42:	22ff      	movs	r2, #255	; 0xff
 8008a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	2201      	movs	r2, #1
 8008a4a:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008a4c:	2300      	movs	r3, #0
  }
}
 8008a4e:	4618      	mov	r0, r3
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
 8008a56:	bf00      	nop
 8008a58:	ff8fffbf 	.word	0xff8fffbf

08008a5c <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008a5c:	b590      	push	{r4, r7, lr}
 8008a5e:	b087      	sub	sp, #28
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008a68:	2300      	movs	r3, #0
 8008a6a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	7f1b      	ldrb	r3, [r3, #28]
 8008a70:	2b01      	cmp	r3, #1
 8008a72:	d101      	bne.n	8008a78 <HAL_RTC_SetTime+0x1c>
 8008a74:	2302      	movs	r3, #2
 8008a76:	e0a8      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	2202      	movs	r2, #2
 8008a82:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d126      	bne.n	8008ad8 <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	689b      	ldr	r3, [r3, #8]
 8008a90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a94:	2b00      	cmp	r3, #0
 8008a96:	d102      	bne.n	8008a9e <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008a98:	68bb      	ldr	r3, [r7, #8]
 8008a9a:	2200      	movs	r2, #0
 8008a9c:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008a9e:	68bb      	ldr	r3, [r7, #8]
 8008aa0:	781b      	ldrb	r3, [r3, #0]
 8008aa2:	4618      	mov	r0, r3
 8008aa4:	f000 fb5a 	bl	800915c <RTC_ByteToBcd2>
 8008aa8:	4603      	mov	r3, r0
 8008aaa:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	785b      	ldrb	r3, [r3, #1]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	f000 fb53 	bl	800915c <RTC_ByteToBcd2>
 8008ab6:	4603      	mov	r3, r0
 8008ab8:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008aba:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8008abc:	68bb      	ldr	r3, [r7, #8]
 8008abe:	789b      	ldrb	r3, [r3, #2]
 8008ac0:	4618      	mov	r0, r3
 8008ac2:	f000 fb4b 	bl	800915c <RTC_ByteToBcd2>
 8008ac6:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 8008ac8:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	7b1b      	ldrb	r3, [r3, #12]
 8008ad0:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 8008ad2:	4313      	orrs	r3, r2
 8008ad4:	617b      	str	r3, [r7, #20]
 8008ad6:	e018      	b.n	8008b0a <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	689b      	ldr	r3, [r3, #8]
 8008ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d102      	bne.n	8008aec <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008af2:	68bb      	ldr	r3, [r7, #8]
 8008af4:	785b      	ldrb	r3, [r3, #1]
 8008af6:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008af8:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8008afa:	68ba      	ldr	r2, [r7, #8]
 8008afc:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008afe:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008b00:	68bb      	ldr	r3, [r7, #8]
 8008b02:	7b1b      	ldrb	r3, [r3, #12]
 8008b04:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	22ca      	movs	r2, #202	; 0xca
 8008b10:	625a      	str	r2, [r3, #36]	; 0x24
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	2253      	movs	r2, #83	; 0x53
 8008b18:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008b1a:	68f8      	ldr	r0, [r7, #12]
 8008b1c:	f000 faf2 	bl	8009104 <RTC_EnterInitMode>
 8008b20:	4603      	mov	r3, r0
 8008b22:	2b00      	cmp	r3, #0
 8008b24:	d00b      	beq.n	8008b3e <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	22ff      	movs	r2, #255	; 0xff
 8008b2c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	2204      	movs	r2, #4
 8008b32:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	2200      	movs	r2, #0
 8008b38:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e045      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008b3e:	68fb      	ldr	r3, [r7, #12]
 8008b40:	681a      	ldr	r2, [r3, #0]
 8008b42:	6979      	ldr	r1, [r7, #20]
 8008b44:	4b23      	ldr	r3, [pc, #140]	; (8008bd4 <HAL_RTC_SetTime+0x178>)
 8008b46:	400b      	ands	r3, r1
 8008b48:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	689a      	ldr	r2, [r3, #8]
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008b58:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	681b      	ldr	r3, [r3, #0]
 8008b5e:	6899      	ldr	r1, [r3, #8]
 8008b60:	68bb      	ldr	r3, [r7, #8]
 8008b62:	691a      	ldr	r2, [r3, #16]
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	695b      	ldr	r3, [r3, #20]
 8008b68:	431a      	orrs	r2, r3
 8008b6a:	68fb      	ldr	r3, [r7, #12]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	430a      	orrs	r2, r1
 8008b70:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	68da      	ldr	r2, [r3, #12]
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008b80:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008b82:	68fb      	ldr	r3, [r7, #12]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f003 0320 	and.w	r3, r3, #32
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d111      	bne.n	8008bb4 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008b90:	68f8      	ldr	r0, [r7, #12]
 8008b92:	f000 fa8f 	bl	80090b4 <HAL_RTC_WaitForSynchro>
 8008b96:	4603      	mov	r3, r0
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d00b      	beq.n	8008bb4 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	22ff      	movs	r2, #255	; 0xff
 8008ba2:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ba4:	68fb      	ldr	r3, [r7, #12]
 8008ba6:	2204      	movs	r2, #4
 8008ba8:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008baa:	68fb      	ldr	r3, [r7, #12]
 8008bac:	2200      	movs	r2, #0
 8008bae:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008bb0:	2301      	movs	r3, #1
 8008bb2:	e00a      	b.n	8008bca <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	22ff      	movs	r2, #255	; 0xff
 8008bba:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 8008bc8:	2300      	movs	r3, #0
  }
}
 8008bca:	4618      	mov	r0, r3
 8008bcc:	371c      	adds	r7, #28
 8008bce:	46bd      	mov	sp, r7
 8008bd0:	bd90      	pop	{r4, r7, pc}
 8008bd2:	bf00      	nop
 8008bd4:	007f7f7f 	.word	0x007f7f7f

08008bd8 <HAL_RTC_GetTime>:
  *        Reading RTC current time locks the values in calendar shadow registers until Current date is read
  *        to ensure consistency between the time and date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008bd8:	b580      	push	{r7, lr}
 8008bda:	b086      	sub	sp, #24
 8008bdc:	af00      	add	r7, sp, #0
 8008bde:	60f8      	str	r0, [r7, #12]
 8008be0:	60b9      	str	r1, [r7, #8]
 8008be2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008be4:	2300      	movs	r3, #0
 8008be6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds values from the correspondent registers*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bee:	68bb      	ldr	r3, [r7, #8]
 8008bf0:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	691b      	ldr	r3, [r3, #16]
 8008bf8:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008c00:	68fb      	ldr	r3, [r7, #12]
 8008c02:	681b      	ldr	r3, [r3, #0]
 8008c04:	681a      	ldr	r2, [r3, #0]
 8008c06:	4b22      	ldr	r3, [pc, #136]	; (8008c90 <HAL_RTC_GetTime+0xb8>)
 8008c08:	4013      	ands	r3, r2
 8008c0a:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> 16);
 8008c0c:	697b      	ldr	r3, [r7, #20]
 8008c0e:	0c1b      	lsrs	r3, r3, #16
 8008c10:	b2db      	uxtb	r3, r3
 8008c12:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c16:	b2da      	uxtb	r2, r3
 8008c18:	68bb      	ldr	r3, [r7, #8]
 8008c1a:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >>8);
 8008c1c:	697b      	ldr	r3, [r7, #20]
 8008c1e:	0a1b      	lsrs	r3, r3, #8
 8008c20:	b2db      	uxtb	r3, r3
 8008c22:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	68bb      	ldr	r3, [r7, #8]
 8008c2a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)(tmpreg & (RTC_TR_ST | RTC_TR_SU));
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c34:	b2da      	uxtb	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> 16);
 8008c3a:	697b      	ldr	r3, [r7, #20]
 8008c3c:	0c1b      	lsrs	r3, r3, #16
 8008c3e:	b2db      	uxtb	r3, r3
 8008c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c44:	b2da      	uxtb	r2, r3
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	731a      	strb	r2, [r3, #12]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	2b00      	cmp	r3, #0
 8008c4e:	d11a      	bne.n	8008c86 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8008c50:	68bb      	ldr	r3, [r7, #8]
 8008c52:	781b      	ldrb	r3, [r3, #0]
 8008c54:	4618      	mov	r0, r3
 8008c56:	f000 fa9f 	bl	8009198 <RTC_Bcd2ToByte>
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	461a      	mov	r2, r3
 8008c5e:	68bb      	ldr	r3, [r7, #8]
 8008c60:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008c62:	68bb      	ldr	r3, [r7, #8]
 8008c64:	785b      	ldrb	r3, [r3, #1]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 fa96 	bl	8009198 <RTC_Bcd2ToByte>
 8008c6c:	4603      	mov	r3, r0
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68bb      	ldr	r3, [r7, #8]
 8008c72:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008c74:	68bb      	ldr	r3, [r7, #8]
 8008c76:	789b      	ldrb	r3, [r3, #2]
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f000 fa8d 	bl	8009198 <RTC_Bcd2ToByte>
 8008c7e:	4603      	mov	r3, r0
 8008c80:	461a      	mov	r2, r3
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008c86:	2300      	movs	r3, #0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3718      	adds	r7, #24
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	007f7f7f 	.word	0x007f7f7f

08008c94 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008c94:	b590      	push	{r4, r7, lr}
 8008c96:	b087      	sub	sp, #28
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	60f8      	str	r0, [r7, #12]
 8008c9c:	60b9      	str	r1, [r7, #8]
 8008c9e:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008ca0:	2300      	movs	r3, #0
 8008ca2:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	7f1b      	ldrb	r3, [r3, #28]
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d101      	bne.n	8008cb0 <HAL_RTC_SetDate+0x1c>
 8008cac:	2302      	movs	r3, #2
 8008cae:	e092      	b.n	8008dd6 <HAL_RTC_SetDate+0x142>
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	2201      	movs	r2, #1
 8008cb4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	2202      	movs	r2, #2
 8008cba:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2b00      	cmp	r3, #0
 8008cc0:	d10e      	bne.n	8008ce0 <HAL_RTC_SetDate+0x4c>
 8008cc2:	68bb      	ldr	r3, [r7, #8]
 8008cc4:	785b      	ldrb	r3, [r3, #1]
 8008cc6:	f003 0310 	and.w	r3, r3, #16
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d008      	beq.n	8008ce0 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008cce:	68bb      	ldr	r3, [r7, #8]
 8008cd0:	785b      	ldrb	r3, [r3, #1]
 8008cd2:	f023 0310 	bic.w	r3, r3, #16
 8008cd6:	b2db      	uxtb	r3, r3
 8008cd8:	330a      	adds	r3, #10
 8008cda:	b2da      	uxtb	r2, r3
 8008cdc:	68bb      	ldr	r3, [r7, #8]
 8008cde:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	2b00      	cmp	r3, #0
 8008ce4:	d11c      	bne.n	8008d20 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008ce6:	68bb      	ldr	r3, [r7, #8]
 8008ce8:	78db      	ldrb	r3, [r3, #3]
 8008cea:	4618      	mov	r0, r3
 8008cec:	f000 fa36 	bl	800915c <RTC_ByteToBcd2>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008cf4:	68bb      	ldr	r3, [r7, #8]
 8008cf6:	785b      	ldrb	r3, [r3, #1]
 8008cf8:	4618      	mov	r0, r3
 8008cfa:	f000 fa2f 	bl	800915c <RTC_ByteToBcd2>
 8008cfe:	4603      	mov	r3, r0
 8008d00:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d02:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	789b      	ldrb	r3, [r3, #2]
 8008d08:	4618      	mov	r0, r3
 8008d0a:	f000 fa27 	bl	800915c <RTC_ByteToBcd2>
 8008d0e:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008d10:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008d14:	68bb      	ldr	r3, [r7, #8]
 8008d16:	781b      	ldrb	r3, [r3, #0]
 8008d18:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008d1a:	4313      	orrs	r3, r2
 8008d1c:	617b      	str	r3, [r7, #20]
 8008d1e:	e00e      	b.n	8008d3e <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d20:	68bb      	ldr	r3, [r7, #8]
 8008d22:	78db      	ldrb	r3, [r3, #3]
 8008d24:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008d26:	68bb      	ldr	r3, [r7, #8]
 8008d28:	785b      	ldrb	r3, [r3, #1]
 8008d2a:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d2c:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008d2e:	68ba      	ldr	r2, [r7, #8]
 8008d30:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008d32:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008d34:	68bb      	ldr	r3, [r7, #8]
 8008d36:	781b      	ldrb	r3, [r3, #0]
 8008d38:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008d3a:	4313      	orrs	r3, r2
 8008d3c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	22ca      	movs	r2, #202	; 0xca
 8008d44:	625a      	str	r2, [r3, #36]	; 0x24
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	2253      	movs	r2, #83	; 0x53
 8008d4c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008d4e:	68f8      	ldr	r0, [r7, #12]
 8008d50:	f000 f9d8 	bl	8009104 <RTC_EnterInitMode>
 8008d54:	4603      	mov	r3, r0
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d00b      	beq.n	8008d72 <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	22ff      	movs	r2, #255	; 0xff
 8008d60:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008d62:	68fb      	ldr	r3, [r7, #12]
 8008d64:	2204      	movs	r2, #4
 8008d66:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008d68:	68fb      	ldr	r3, [r7, #12]
 8008d6a:	2200      	movs	r2, #0
 8008d6c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008d6e:	2301      	movs	r3, #1
 8008d70:	e031      	b.n	8008dd6 <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	681a      	ldr	r2, [r3, #0]
 8008d76:	6979      	ldr	r1, [r7, #20]
 8008d78:	4b19      	ldr	r3, [pc, #100]	; (8008de0 <HAL_RTC_SetDate+0x14c>)
 8008d7a:	400b      	ands	r3, r1
 8008d7c:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008d7e:	68fb      	ldr	r3, [r7, #12]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	68da      	ldr	r2, [r3, #12]
 8008d84:	68fb      	ldr	r3, [r7, #12]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008d8c:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008d8e:	68fb      	ldr	r3, [r7, #12]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	689b      	ldr	r3, [r3, #8]
 8008d94:	f003 0320 	and.w	r3, r3, #32
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	d111      	bne.n	8008dc0 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008d9c:	68f8      	ldr	r0, [r7, #12]
 8008d9e:	f000 f989 	bl	80090b4 <HAL_RTC_WaitForSynchro>
 8008da2:	4603      	mov	r3, r0
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d00b      	beq.n	8008dc0 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	22ff      	movs	r2, #255	; 0xff
 8008dae:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	2204      	movs	r2, #4
 8008db4:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	e00a      	b.n	8008dd6 <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	681b      	ldr	r3, [r3, #0]
 8008dc4:	22ff      	movs	r2, #255	; 0xff
 8008dc6:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	2201      	movs	r2, #1
 8008dcc:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008dce:	68fb      	ldr	r3, [r7, #12]
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008dd4:	2300      	movs	r3, #0
  }
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	371c      	adds	r7, #28
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	bd90      	pop	{r4, r7, pc}
 8008dde:	bf00      	nop
 8008de0:	00ffff3f 	.word	0x00ffff3f

08008de4 <HAL_RTC_GetDate>:
  * in the higher-order calendar shadow registers to ensure consistency between the time and date values.
  * Reading RTC current time locks the values in calendar shadow registers until Current date is read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008de4:	b580      	push	{r7, lr}
 8008de6:	b086      	sub	sp, #24
 8008de8:	af00      	add	r7, sp, #0
 8008dea:	60f8      	str	r0, [r7, #12]
 8008dec:	60b9      	str	r1, [r7, #8]
 8008dee:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 8008df0:	2300      	movs	r3, #0
 8008df2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008df4:	68fb      	ldr	r3, [r7, #12]
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	685a      	ldr	r2, [r3, #4]
 8008dfa:	4b21      	ldr	r3, [pc, #132]	; (8008e80 <HAL_RTC_GetDate+0x9c>)
 8008dfc:	4013      	ands	r3, r2
 8008dfe:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> 16);
 8008e00:	697b      	ldr	r3, [r7, #20]
 8008e02:	0c1b      	lsrs	r3, r3, #16
 8008e04:	b2da      	uxtb	r2, r3
 8008e06:	68bb      	ldr	r3, [r7, #8]
 8008e08:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> 8);
 8008e0a:	697b      	ldr	r3, [r7, #20]
 8008e0c:	0a1b      	lsrs	r3, r3, #8
 8008e0e:	b2db      	uxtb	r3, r3
 8008e10:	f003 031f 	and.w	r3, r3, #31
 8008e14:	b2da      	uxtb	r2, r3
 8008e16:	68bb      	ldr	r3, [r7, #8]
 8008e18:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)(datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008e1a:	697b      	ldr	r3, [r7, #20]
 8008e1c:	b2db      	uxtb	r3, r3
 8008e1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008e22:	b2da      	uxtb	r2, r3
 8008e24:	68bb      	ldr	r3, [r7, #8]
 8008e26:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> 13);
 8008e28:	697b      	ldr	r3, [r7, #20]
 8008e2a:	0b5b      	lsrs	r3, r3, #13
 8008e2c:	b2db      	uxtb	r3, r3
 8008e2e:	f003 0307 	and.w	r3, r3, #7
 8008e32:	b2da      	uxtb	r2, r3
 8008e34:	68bb      	ldr	r3, [r7, #8]
 8008e36:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if(Format == RTC_FORMAT_BIN)
 8008e38:	687b      	ldr	r3, [r7, #4]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d11a      	bne.n	8008e74 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	78db      	ldrb	r3, [r3, #3]
 8008e42:	4618      	mov	r0, r3
 8008e44:	f000 f9a8 	bl	8009198 <RTC_Bcd2ToByte>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	461a      	mov	r2, r3
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	4618      	mov	r0, r3
 8008e56:	f000 f99f 	bl	8009198 <RTC_Bcd2ToByte>
 8008e5a:	4603      	mov	r3, r0
 8008e5c:	461a      	mov	r2, r3
 8008e5e:	68bb      	ldr	r3, [r7, #8]
 8008e60:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008e62:	68bb      	ldr	r3, [r7, #8]
 8008e64:	789b      	ldrb	r3, [r3, #2]
 8008e66:	4618      	mov	r0, r3
 8008e68:	f000 f996 	bl	8009198 <RTC_Bcd2ToByte>
 8008e6c:	4603      	mov	r3, r0
 8008e6e:	461a      	mov	r2, r3
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008e74:	2300      	movs	r3, #0
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	3718      	adds	r7, #24
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	bd80      	pop	{r7, pc}
 8008e7e:	bf00      	nop
 8008e80:	00ffff3f 	.word	0x00ffff3f

08008e84 <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008e84:	b590      	push	{r4, r7, lr}
 8008e86:	b089      	sub	sp, #36	; 0x24
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	60f8      	str	r0, [r7, #12]
 8008e8c:	60b9      	str	r1, [r7, #8]
 8008e8e:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008e90:	2300      	movs	r3, #0
 8008e92:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008e94:	2300      	movs	r3, #0
 8008e96:	61fb      	str	r3, [r7, #28]
 8008e98:	2300      	movs	r3, #0
 8008e9a:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	7f1b      	ldrb	r3, [r3, #28]
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d101      	bne.n	8008ea8 <HAL_RTC_SetAlarm+0x24>
 8008ea4:	2302      	movs	r3, #2
 8008ea6:	e101      	b.n	80090ac <HAL_RTC_SetAlarm+0x228>
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2201      	movs	r2, #1
 8008eac:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d137      	bne.n	8008f2a <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d102      	bne.n	8008ece <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008ec8:	68bb      	ldr	r3, [r7, #8]
 8008eca:	2200      	movs	r2, #0
 8008ecc:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008ece:	68bb      	ldr	r3, [r7, #8]
 8008ed0:	781b      	ldrb	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	f000 f942 	bl	800915c <RTC_ByteToBcd2>
 8008ed8:	4603      	mov	r3, r0
 8008eda:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008edc:	68bb      	ldr	r3, [r7, #8]
 8008ede:	785b      	ldrb	r3, [r3, #1]
 8008ee0:	4618      	mov	r0, r3
 8008ee2:	f000 f93b 	bl	800915c <RTC_ByteToBcd2>
 8008ee6:	4603      	mov	r3, r0
 8008ee8:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008eea:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008eec:	68bb      	ldr	r3, [r7, #8]
 8008eee:	789b      	ldrb	r3, [r3, #2]
 8008ef0:	4618      	mov	r0, r3
 8008ef2:	f000 f933 	bl	800915c <RTC_ByteToBcd2>
 8008ef6:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008ef8:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008efc:	68bb      	ldr	r3, [r7, #8]
 8008efe:	7b1b      	ldrb	r3, [r3, #12]
 8008f00:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008f02:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f06:	68bb      	ldr	r3, [r7, #8]
 8008f08:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f0c:	4618      	mov	r0, r3
 8008f0e:	f000 f925 	bl	800915c <RTC_ByteToBcd2>
 8008f12:	4603      	mov	r3, r0
 8008f14:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f16:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f1a:	68bb      	ldr	r3, [r7, #8]
 8008f1c:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f1e:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008f24:	4313      	orrs	r3, r2
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	e023      	b.n	8008f72 <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	2200      	movs	r2, #0
 8008f3c:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f3e:	68bb      	ldr	r3, [r7, #8]
 8008f40:	781b      	ldrb	r3, [r3, #0]
 8008f42:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f44:	68bb      	ldr	r3, [r7, #8]
 8008f46:	785b      	ldrb	r3, [r3, #1]
 8008f48:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f4a:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008f4c:	68ba      	ldr	r2, [r7, #8]
 8008f4e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008f50:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f52:	68bb      	ldr	r3, [r7, #8]
 8008f54:	7b1b      	ldrb	r3, [r3, #12]
 8008f56:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008f58:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f5a:	68bb      	ldr	r3, [r7, #8]
 8008f5c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008f60:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008f62:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008f64:	68bb      	ldr	r3, [r7, #8]
 8008f66:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008f68:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008f6a:	68bb      	ldr	r3, [r7, #8]
 8008f6c:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008f72:	68bb      	ldr	r3, [r7, #8]
 8008f74:	685a      	ldr	r2, [r3, #4]
 8008f76:	68bb      	ldr	r3, [r7, #8]
 8008f78:	69db      	ldr	r3, [r3, #28]
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	22ca      	movs	r2, #202	; 0xca
 8008f84:	625a      	str	r2, [r3, #36]	; 0x24
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	2253      	movs	r2, #83	; 0x53
 8008f8c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008f8e:	68bb      	ldr	r3, [r7, #8]
 8008f90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008f92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f96:	d13f      	bne.n	8009018 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008f98:	68fb      	ldr	r3, [r7, #12]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	689a      	ldr	r2, [r3, #8]
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008fa6:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	689a      	ldr	r2, [r3, #8]
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008fb6:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008fb8:	f7fb fdae 	bl	8004b18 <HAL_GetTick>
 8008fbc:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008fbe:	e013      	b.n	8008fe8 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008fc0:	f7fb fdaa 	bl	8004b18 <HAL_GetTick>
 8008fc4:	4602      	mov	r2, r0
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	1ad3      	subs	r3, r2, r3
 8008fca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008fce:	d90b      	bls.n	8008fe8 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	22ff      	movs	r2, #255	; 0xff
 8008fd6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2203      	movs	r2, #3
 8008fdc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008fe4:	2303      	movs	r3, #3
 8008fe6:	e061      	b.n	80090ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	68db      	ldr	r3, [r3, #12]
 8008fee:	f003 0301 	and.w	r3, r3, #1
 8008ff2:	2b00      	cmp	r3, #0
 8008ff4:	d0e4      	beq.n	8008fc0 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008ff6:	68fb      	ldr	r3, [r7, #12]
 8008ff8:	681b      	ldr	r3, [r3, #0]
 8008ffa:	69fa      	ldr	r2, [r7, #28]
 8008ffc:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681b      	ldr	r3, [r3, #0]
 8009002:	697a      	ldr	r2, [r7, #20]
 8009004:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8009006:	68fb      	ldr	r3, [r7, #12]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	689a      	ldr	r2, [r3, #8]
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009014:	609a      	str	r2, [r3, #8]
 8009016:	e03e      	b.n	8009096 <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	689a      	ldr	r2, [r3, #8]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8009026:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8009028:	68fb      	ldr	r3, [r7, #12]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	689a      	ldr	r2, [r3, #8]
 800902e:	68fb      	ldr	r3, [r7, #12]
 8009030:	681b      	ldr	r3, [r3, #0]
 8009032:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009036:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009038:	f7fb fd6e 	bl	8004b18 <HAL_GetTick>
 800903c:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 800903e:	e013      	b.n	8009068 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009040:	f7fb fd6a 	bl	8004b18 <HAL_GetTick>
 8009044:	4602      	mov	r2, r0
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	1ad3      	subs	r3, r2, r3
 800904a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800904e:	d90b      	bls.n	8009068 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009050:	68fb      	ldr	r3, [r7, #12]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	22ff      	movs	r2, #255	; 0xff
 8009056:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8009058:	68fb      	ldr	r3, [r7, #12]
 800905a:	2203      	movs	r2, #3
 800905c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 800905e:	68fb      	ldr	r3, [r7, #12]
 8009060:	2200      	movs	r2, #0
 8009062:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8009064:	2303      	movs	r3, #3
 8009066:	e021      	b.n	80090ac <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8009068:	68fb      	ldr	r3, [r7, #12]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	68db      	ldr	r3, [r3, #12]
 800906e:	f003 0302 	and.w	r3, r3, #2
 8009072:	2b00      	cmp	r3, #0
 8009074:	d0e4      	beq.n	8009040 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8009076:	68fb      	ldr	r3, [r7, #12]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	69fa      	ldr	r2, [r7, #28]
 800907c:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	697a      	ldr	r2, [r7, #20]
 8009084:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8009086:	68fb      	ldr	r3, [r7, #12]
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	689a      	ldr	r2, [r3, #8]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009094:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009096:	68fb      	ldr	r3, [r7, #12]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	22ff      	movs	r2, #255	; 0xff
 800909c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2201      	movs	r2, #1
 80090a2:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80090a4:	68fb      	ldr	r3, [r7, #12]
 80090a6:	2200      	movs	r2, #0
 80090a8:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 80090aa:	2300      	movs	r3, #0
}
 80090ac:	4618      	mov	r0, r3
 80090ae:	3724      	adds	r7, #36	; 0x24
 80090b0:	46bd      	mov	sp, r7
 80090b2:	bd90      	pop	{r4, r7, pc}

080090b4 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 80090b4:	b580      	push	{r7, lr}
 80090b6:	b084      	sub	sp, #16
 80090b8:	af00      	add	r7, sp, #0
 80090ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80090bc:	2300      	movs	r3, #0
 80090be:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80090c0:	687b      	ldr	r3, [r7, #4]
 80090c2:	681b      	ldr	r3, [r3, #0]
 80090c4:	68da      	ldr	r2, [r3, #12]
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80090ce:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80090d0:	f7fb fd22 	bl	8004b18 <HAL_GetTick>
 80090d4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090d6:	e009      	b.n	80090ec <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 80090d8:	f7fb fd1e 	bl	8004b18 <HAL_GetTick>
 80090dc:	4602      	mov	r2, r0
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	1ad3      	subs	r3, r2, r3
 80090e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80090e6:	d901      	bls.n	80090ec <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e007      	b.n	80090fc <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f003 0320 	and.w	r3, r3, #32
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d0ee      	beq.n	80090d8 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 80090fa:	2300      	movs	r3, #0
}
 80090fc:	4618      	mov	r0, r3
 80090fe:	3710      	adds	r7, #16
 8009100:	46bd      	mov	sp, r7
 8009102:	bd80      	pop	{r7, pc}

08009104 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8009104:	b580      	push	{r7, lr}
 8009106:	b084      	sub	sp, #16
 8009108:	af00      	add	r7, sp, #0
 800910a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800910c:	2300      	movs	r3, #0
 800910e:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	68db      	ldr	r3, [r3, #12]
 8009116:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800911a:	2b00      	cmp	r3, #0
 800911c:	d119      	bne.n	8009152 <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	681b      	ldr	r3, [r3, #0]
 8009122:	f04f 32ff 	mov.w	r2, #4294967295
 8009126:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8009128:	f7fb fcf6 	bl	8004b18 <HAL_GetTick>
 800912c:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 800912e:	e009      	b.n	8009144 <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8009130:	f7fb fcf2 	bl	8004b18 <HAL_GetTick>
 8009134:	4602      	mov	r2, r0
 8009136:	68fb      	ldr	r3, [r7, #12]
 8009138:	1ad3      	subs	r3, r2, r3
 800913a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800913e:	d901      	bls.n	8009144 <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8009140:	2303      	movs	r3, #3
 8009142:	e007      	b.n	8009154 <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	68db      	ldr	r3, [r3, #12]
 800914a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800914e:	2b00      	cmp	r3, #0
 8009150:	d0ee      	beq.n	8009130 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8009152:	2300      	movs	r3, #0
}
 8009154:	4618      	mov	r0, r3
 8009156:	3710      	adds	r7, #16
 8009158:	46bd      	mov	sp, r7
 800915a:	bd80      	pop	{r7, pc}

0800915c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800915c:	b480      	push	{r7}
 800915e:	b085      	sub	sp, #20
 8009160:	af00      	add	r7, sp, #0
 8009162:	4603      	mov	r3, r0
 8009164:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8009166:	2300      	movs	r3, #0
 8009168:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 800916a:	e005      	b.n	8009178 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800916c:	68fb      	ldr	r3, [r7, #12]
 800916e:	3301      	adds	r3, #1
 8009170:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8009172:	79fb      	ldrb	r3, [r7, #7]
 8009174:	3b0a      	subs	r3, #10
 8009176:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8009178:	79fb      	ldrb	r3, [r7, #7]
 800917a:	2b09      	cmp	r3, #9
 800917c:	d8f6      	bhi.n	800916c <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	b2db      	uxtb	r3, r3
 8009182:	011b      	lsls	r3, r3, #4
 8009184:	b2da      	uxtb	r2, r3
 8009186:	79fb      	ldrb	r3, [r7, #7]
 8009188:	4313      	orrs	r3, r2
 800918a:	b2db      	uxtb	r3, r3
}
 800918c:	4618      	mov	r0, r3
 800918e:	3714      	adds	r7, #20
 8009190:	46bd      	mov	sp, r7
 8009192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009196:	4770      	bx	lr

08009198 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8009198:	b480      	push	{r7}
 800919a:	b085      	sub	sp, #20
 800919c:	af00      	add	r7, sp, #0
 800919e:	4603      	mov	r3, r0
 80091a0:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 80091a2:	2300      	movs	r3, #0
 80091a4:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 80091a6:	79fb      	ldrb	r3, [r7, #7]
 80091a8:	091b      	lsrs	r3, r3, #4
 80091aa:	b2db      	uxtb	r3, r3
 80091ac:	461a      	mov	r2, r3
 80091ae:	4613      	mov	r3, r2
 80091b0:	009b      	lsls	r3, r3, #2
 80091b2:	4413      	add	r3, r2
 80091b4:	005b      	lsls	r3, r3, #1
 80091b6:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80091b8:	79fb      	ldrb	r3, [r7, #7]
 80091ba:	f003 030f 	and.w	r3, r3, #15
 80091be:	b2da      	uxtb	r2, r3
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	b2db      	uxtb	r3, r3
 80091c4:	4413      	add	r3, r2
 80091c6:	b2db      	uxtb	r3, r3
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3714      	adds	r7, #20
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 80091d4:	b480      	push	{r7}
 80091d6:	b087      	sub	sp, #28
 80091d8:	af00      	add	r7, sp, #0
 80091da:	60f8      	str	r0, [r7, #12]
 80091dc:	60b9      	str	r1, [r7, #8]
 80091de:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 80091e0:	2300      	movs	r3, #0
 80091e2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	7f1b      	ldrb	r3, [r3, #28]
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	d101      	bne.n	80091f0 <HAL_RTCEx_SetTimeStamp+0x1c>
 80091ec:	2302      	movs	r3, #2
 80091ee:	e03e      	b.n	800926e <HAL_RTCEx_SetTimeStamp+0x9a>
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	2201      	movs	r2, #1
 80091f4:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	2202      	movs	r2, #2
 80091fa:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	689a      	ldr	r2, [r3, #8]
 8009202:	4b1e      	ldr	r3, [pc, #120]	; (800927c <HAL_RTCEx_SetTimeStamp+0xa8>)
 8009204:	4013      	ands	r3, r2
 8009206:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8009208:	697a      	ldr	r2, [r7, #20]
 800920a:	68bb      	ldr	r3, [r7, #8]
 800920c:	4313      	orrs	r3, r2
 800920e:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	22ca      	movs	r2, #202	; 0xca
 8009216:	625a      	str	r2, [r3, #36]	; 0x24
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	2253      	movs	r2, #83	; 0x53
 800921e:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8009226:	68fb      	ldr	r3, [r7, #12]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	f022 0206 	bic.w	r2, r2, #6
 800922e:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8009236:	68fb      	ldr	r3, [r7, #12]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	687a      	ldr	r2, [r7, #4]
 800923c:	430a      	orrs	r2, r1
 800923e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8009240:	68fb      	ldr	r3, [r7, #12]
 8009242:	681b      	ldr	r3, [r3, #0]
 8009244:	697a      	ldr	r2, [r7, #20]
 8009246:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8009248:	68fb      	ldr	r3, [r7, #12]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	689a      	ldr	r2, [r3, #8]
 800924e:	68fb      	ldr	r3, [r7, #12]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009256:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	22ff      	movs	r2, #255	; 0xff
 800925e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	2201      	movs	r2, #1
 8009264:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	2200      	movs	r2, #0
 800926a:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 800926c:	2300      	movs	r3, #0
}
 800926e:	4618      	mov	r0, r3
 8009270:	371c      	adds	r7, #28
 8009272:	46bd      	mov	sp, r7
 8009274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop
 800927c:	fffff7f7 	.word	0xfffff7f7

08009280 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8009280:	b580      	push	{r7, lr}
 8009282:	b082      	sub	sp, #8
 8009284:	af00      	add	r7, sp, #0
 8009286:	6078      	str	r0, [r7, #4]
 8009288:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	2b00      	cmp	r3, #0
 800928e:	d101      	bne.n	8009294 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	e025      	b.n	80092e0 <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800929a:	b2db      	uxtb	r3, r3
 800929c:	2b00      	cmp	r3, #0
 800929e:	d106      	bne.n	80092ae <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	2200      	movs	r2, #0
 80092a4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 80092a8:	6878      	ldr	r0, [r7, #4]
 80092aa:	f7fb fb05 	bl	80048b8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2202      	movs	r2, #2
 80092b2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	3304      	adds	r3, #4
 80092be:	4619      	mov	r1, r3
 80092c0:	4610      	mov	r0, r2
 80092c2:	f002 f93f 	bl	800b544 <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	6818      	ldr	r0, [r3, #0]
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	461a      	mov	r2, r3
 80092d0:	6839      	ldr	r1, [r7, #0]
 80092d2:	f002 f9a9 	bl	800b628 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 80092de:	2300      	movs	r3, #0
}
 80092e0:	4618      	mov	r0, r3
 80092e2:	3708      	adds	r7, #8
 80092e4:	46bd      	mov	sp, r7
 80092e6:	bd80      	pop	{r7, pc}

080092e8 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b084      	sub	sp, #16
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	60f8      	str	r0, [r7, #12]
 80092f0:	60b9      	str	r1, [r7, #8]
 80092f2:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80092fa:	b2db      	uxtb	r3, r3
 80092fc:	2b02      	cmp	r3, #2
 80092fe:	d101      	bne.n	8009304 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8009300:	2302      	movs	r3, #2
 8009302:	e018      	b.n	8009336 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009304:	68fb      	ldr	r3, [r7, #12]
 8009306:	2202      	movs	r2, #2
 8009308:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	687a      	ldr	r2, [r7, #4]
 8009312:	68b9      	ldr	r1, [r7, #8]
 8009314:	4618      	mov	r0, r3
 8009316:	f002 fa07 	bl	800b728 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	2b02      	cmp	r3, #2
 8009320:	d104      	bne.n	800932c <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8009322:	68fb      	ldr	r3, [r7, #12]
 8009324:	2205      	movs	r2, #5
 8009326:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 800932a:	e003      	b.n	8009334 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2201      	movs	r2, #1
 8009330:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8009334:	2300      	movs	r3, #0
}
 8009336:	4618      	mov	r0, r3
 8009338:	3710      	adds	r7, #16
 800933a:	46bd      	mov	sp, r7
 800933c:	bd80      	pop	{r7, pc}

0800933e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800933e:	b580      	push	{r7, lr}
 8009340:	b082      	sub	sp, #8
 8009342:	af00      	add	r7, sp, #0
 8009344:	6078      	str	r0, [r7, #4]
 8009346:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 800934e:	b2db      	uxtb	r3, r3
 8009350:	2b02      	cmp	r3, #2
 8009352:	d101      	bne.n	8009358 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8009354:	2302      	movs	r3, #2
 8009356:	e00e      	b.n	8009376 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	2202      	movs	r2, #2
 800935c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8009360:	687b      	ldr	r3, [r7, #4]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	6839      	ldr	r1, [r7, #0]
 8009366:	4618      	mov	r0, r3
 8009368:	f002 f9ff 	bl	800b76a <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	2201      	movs	r2, #1
 8009370:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8009374:	2300      	movs	r3, #0
}
 8009376:	4618      	mov	r0, r3
 8009378:	3708      	adds	r7, #8
 800937a:	46bd      	mov	sp, r7
 800937c:	bd80      	pop	{r7, pc}

0800937e <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800937e:	b580      	push	{r7, lr}
 8009380:	b084      	sub	sp, #16
 8009382:	af00      	add	r7, sp, #0
 8009384:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	2b00      	cmp	r3, #0
 800938a:	d101      	bne.n	8009390 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800938c:	2301      	movs	r3, #1
 800938e:	e084      	b.n	800949a <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2200      	movs	r2, #0
 8009394:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800939c:	b2db      	uxtb	r3, r3
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d106      	bne.n	80093b0 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	2200      	movs	r2, #0
 80093a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093aa:	6878      	ldr	r0, [r7, #4]
 80093ac:	f7fb f80e 	bl	80043cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	2202      	movs	r2, #2
 80093b4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	681a      	ldr	r2, [r3, #0]
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093c6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80093c8:	687b      	ldr	r3, [r7, #4]
 80093ca:	68db      	ldr	r3, [r3, #12]
 80093cc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093d0:	d902      	bls.n	80093d8 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80093d2:	2300      	movs	r3, #0
 80093d4:	60fb      	str	r3, [r7, #12]
 80093d6:	e002      	b.n	80093de <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80093d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80093dc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	68db      	ldr	r3, [r3, #12]
 80093e2:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80093e6:	d007      	beq.n	80093f8 <HAL_SPI_Init+0x7a>
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	68db      	ldr	r3, [r3, #12]
 80093ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80093f0:	d002      	beq.n	80093f8 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	2200      	movs	r2, #0
 80093f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80093fc:	2b00      	cmp	r3, #0
 80093fe:	d10b      	bne.n	8009418 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	68db      	ldr	r3, [r3, #12]
 8009404:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009408:	d903      	bls.n	8009412 <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	2202      	movs	r2, #2
 800940e:	631a      	str	r2, [r3, #48]	; 0x30
 8009410:	e002      	b.n	8009418 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	2201      	movs	r2, #1
 8009416:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009418:	687b      	ldr	r3, [r7, #4]
 800941a:	685a      	ldr	r2, [r3, #4]
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	689b      	ldr	r3, [r3, #8]
 8009420:	431a      	orrs	r2, r3
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	691b      	ldr	r3, [r3, #16]
 8009426:	431a      	orrs	r2, r3
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	695b      	ldr	r3, [r3, #20]
 800942c:	431a      	orrs	r2, r3
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	699b      	ldr	r3, [r3, #24]
 8009432:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009436:	431a      	orrs	r2, r3
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	69db      	ldr	r3, [r3, #28]
 800943c:	431a      	orrs	r2, r3
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	6a1b      	ldr	r3, [r3, #32]
 8009442:	ea42 0103 	orr.w	r1, r2, r3
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	430a      	orrs	r2, r1
 8009450:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	699b      	ldr	r3, [r3, #24]
 8009456:	0c1b      	lsrs	r3, r3, #16
 8009458:	f003 0204 	and.w	r2, r3, #4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009460:	431a      	orrs	r2, r3
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009466:	431a      	orrs	r2, r3
 8009468:	687b      	ldr	r3, [r7, #4]
 800946a:	68db      	ldr	r3, [r3, #12]
 800946c:	ea42 0103 	orr.w	r1, r2, r3
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	68fa      	ldr	r2, [r7, #12]
 8009476:	430a      	orrs	r2, r1
 8009478:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	69da      	ldr	r2, [r3, #28]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009488:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2200      	movs	r2, #0
 800948e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	2201      	movs	r2, #1
 8009494:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009498:	2300      	movs	r3, #0
}
 800949a:	4618      	mov	r0, r3
 800949c:	3710      	adds	r7, #16
 800949e:	46bd      	mov	sp, r7
 80094a0:	bd80      	pop	{r7, pc}

080094a2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80094a2:	b580      	push	{r7, lr}
 80094a4:	b082      	sub	sp, #8
 80094a6:	af00      	add	r7, sp, #0
 80094a8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d101      	bne.n	80094b4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80094b0:	2301      	movs	r3, #1
 80094b2:	e01d      	b.n	80094f0 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80094ba:	b2db      	uxtb	r3, r3
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d106      	bne.n	80094ce <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80094c0:	687b      	ldr	r3, [r7, #4]
 80094c2:	2200      	movs	r2, #0
 80094c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80094c8:	6878      	ldr	r0, [r7, #4]
 80094ca:	f7fa fff1 	bl	80044b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2202      	movs	r2, #2
 80094d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681a      	ldr	r2, [r3, #0]
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	3304      	adds	r3, #4
 80094de:	4619      	mov	r1, r3
 80094e0:	4610      	mov	r0, r2
 80094e2:	f000 fbc3 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	2201      	movs	r2, #1
 80094ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80094ee:	2300      	movs	r3, #0
}
 80094f0:	4618      	mov	r0, r3
 80094f2:	3708      	adds	r7, #8
 80094f4:	46bd      	mov	sp, r7
 80094f6:	bd80      	pop	{r7, pc}

080094f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80094f8:	b480      	push	{r7}
 80094fa:	b085      	sub	sp, #20
 80094fc:	af00      	add	r7, sp, #0
 80094fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	68da      	ldr	r2, [r3, #12]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	689a      	ldr	r2, [r3, #8]
 8009516:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <HAL_TIM_Base_Start_IT+0x50>)
 8009518:	4013      	ands	r3, r2
 800951a:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800951c:	68fb      	ldr	r3, [r7, #12]
 800951e:	2b06      	cmp	r3, #6
 8009520:	d00b      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x42>
 8009522:	68fb      	ldr	r3, [r7, #12]
 8009524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009528:	d007      	beq.n	800953a <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	681a      	ldr	r2, [r3, #0]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0201 	orr.w	r2, r2, #1
 8009538:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800953a:	2300      	movs	r3, #0
}
 800953c:	4618      	mov	r0, r3
 800953e:	3714      	adds	r7, #20
 8009540:	46bd      	mov	sp, r7
 8009542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009546:	4770      	bx	lr
 8009548:	00010007 	.word	0x00010007

0800954c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800954c:	b580      	push	{r7, lr}
 800954e:	b082      	sub	sp, #8
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	2b00      	cmp	r3, #0
 8009558:	d101      	bne.n	800955e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800955a:	2301      	movs	r3, #1
 800955c:	e01d      	b.n	800959a <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009564:	b2db      	uxtb	r3, r3
 8009566:	2b00      	cmp	r3, #0
 8009568:	d106      	bne.n	8009578 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009572:	6878      	ldr	r0, [r7, #4]
 8009574:	f000 f815 	bl	80095a2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	2202      	movs	r2, #2
 800957c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	681a      	ldr	r2, [r3, #0]
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	3304      	adds	r3, #4
 8009588:	4619      	mov	r1, r3
 800958a:	4610      	mov	r0, r2
 800958c:	f000 fb6e 	bl	8009c6c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	2201      	movs	r2, #1
 8009594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3708      	adds	r7, #8
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}

080095a2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80095a2:	b480      	push	{r7}
 80095a4:	b083      	sub	sp, #12
 80095a6:	af00      	add	r7, sp, #0
 80095a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80095aa:	bf00      	nop
 80095ac:	370c      	adds	r7, #12
 80095ae:	46bd      	mov	sp, r7
 80095b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095b4:	4770      	bx	lr

080095b6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80095b6:	b580      	push	{r7, lr}
 80095b8:	b082      	sub	sp, #8
 80095ba:	af00      	add	r7, sp, #0
 80095bc:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	691b      	ldr	r3, [r3, #16]
 80095c4:	f003 0302 	and.w	r3, r3, #2
 80095c8:	2b02      	cmp	r3, #2
 80095ca:	d122      	bne.n	8009612 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	68db      	ldr	r3, [r3, #12]
 80095d2:	f003 0302 	and.w	r3, r3, #2
 80095d6:	2b02      	cmp	r3, #2
 80095d8:	d11b      	bne.n	8009612 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	f06f 0202 	mvn.w	r2, #2
 80095e2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	2201      	movs	r2, #1
 80095e8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	699b      	ldr	r3, [r3, #24]
 80095f0:	f003 0303 	and.w	r3, r3, #3
 80095f4:	2b00      	cmp	r3, #0
 80095f6:	d003      	beq.n	8009600 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80095f8:	6878      	ldr	r0, [r7, #4]
 80095fa:	f000 fb19 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80095fe:	e005      	b.n	800960c <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009600:	6878      	ldr	r0, [r7, #4]
 8009602:	f000 fb0b 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009606:	6878      	ldr	r0, [r7, #4]
 8009608:	f000 fb1c 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	2200      	movs	r2, #0
 8009610:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	691b      	ldr	r3, [r3, #16]
 8009618:	f003 0304 	and.w	r3, r3, #4
 800961c:	2b04      	cmp	r3, #4
 800961e:	d122      	bne.n	8009666 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	68db      	ldr	r3, [r3, #12]
 8009626:	f003 0304 	and.w	r3, r3, #4
 800962a:	2b04      	cmp	r3, #4
 800962c:	d11b      	bne.n	8009666 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	f06f 0204 	mvn.w	r2, #4
 8009636:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	2202      	movs	r2, #2
 800963c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	681b      	ldr	r3, [r3, #0]
 8009642:	699b      	ldr	r3, [r3, #24]
 8009644:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009648:	2b00      	cmp	r3, #0
 800964a:	d003      	beq.n	8009654 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800964c:	6878      	ldr	r0, [r7, #4]
 800964e:	f000 faef 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 8009652:	e005      	b.n	8009660 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009654:	6878      	ldr	r0, [r7, #4]
 8009656:	f000 fae1 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800965a:	6878      	ldr	r0, [r7, #4]
 800965c:	f000 faf2 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	2200      	movs	r2, #0
 8009664:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009666:	687b      	ldr	r3, [r7, #4]
 8009668:	681b      	ldr	r3, [r3, #0]
 800966a:	691b      	ldr	r3, [r3, #16]
 800966c:	f003 0308 	and.w	r3, r3, #8
 8009670:	2b08      	cmp	r3, #8
 8009672:	d122      	bne.n	80096ba <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68db      	ldr	r3, [r3, #12]
 800967a:	f003 0308 	and.w	r3, r3, #8
 800967e:	2b08      	cmp	r3, #8
 8009680:	d11b      	bne.n	80096ba <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f06f 0208 	mvn.w	r2, #8
 800968a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	2204      	movs	r2, #4
 8009690:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	69db      	ldr	r3, [r3, #28]
 8009698:	f003 0303 	and.w	r3, r3, #3
 800969c:	2b00      	cmp	r3, #0
 800969e:	d003      	beq.n	80096a8 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096a0:	6878      	ldr	r0, [r7, #4]
 80096a2:	f000 fac5 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80096a6:	e005      	b.n	80096b4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096a8:	6878      	ldr	r0, [r7, #4]
 80096aa:	f000 fab7 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80096ae:	6878      	ldr	r0, [r7, #4]
 80096b0:	f000 fac8 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	2200      	movs	r2, #0
 80096b8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	691b      	ldr	r3, [r3, #16]
 80096c0:	f003 0310 	and.w	r3, r3, #16
 80096c4:	2b10      	cmp	r3, #16
 80096c6:	d122      	bne.n	800970e <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	68db      	ldr	r3, [r3, #12]
 80096ce:	f003 0310 	and.w	r3, r3, #16
 80096d2:	2b10      	cmp	r3, #16
 80096d4:	d11b      	bne.n	800970e <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	f06f 0210 	mvn.w	r2, #16
 80096de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	2208      	movs	r2, #8
 80096e4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80096e6:	687b      	ldr	r3, [r7, #4]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	69db      	ldr	r3, [r3, #28]
 80096ec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096f0:	2b00      	cmp	r3, #0
 80096f2:	d003      	beq.n	80096fc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80096f4:	6878      	ldr	r0, [r7, #4]
 80096f6:	f000 fa9b 	bl	8009c30 <HAL_TIM_IC_CaptureCallback>
 80096fa:	e005      	b.n	8009708 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80096fc:	6878      	ldr	r0, [r7, #4]
 80096fe:	f000 fa8d 	bl	8009c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009702:	6878      	ldr	r0, [r7, #4]
 8009704:	f000 fa9e 	bl	8009c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	691b      	ldr	r3, [r3, #16]
 8009714:	f003 0301 	and.w	r3, r3, #1
 8009718:	2b01      	cmp	r3, #1
 800971a:	d10e      	bne.n	800973a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	68db      	ldr	r3, [r3, #12]
 8009722:	f003 0301 	and.w	r3, r3, #1
 8009726:	2b01      	cmp	r3, #1
 8009728:	d107      	bne.n	800973a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800972a:	687b      	ldr	r3, [r7, #4]
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	f06f 0201 	mvn.w	r2, #1
 8009732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	f7f8 fe1b 	bl	8002370 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	691b      	ldr	r3, [r3, #16]
 8009740:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009744:	2b80      	cmp	r3, #128	; 0x80
 8009746:	d10e      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68db      	ldr	r3, [r3, #12]
 800974e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009752:	2b80      	cmp	r3, #128	; 0x80
 8009754:	d107      	bne.n	8009766 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800975e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009760:	6878      	ldr	r0, [r7, #4]
 8009762:	f000 ffb9 	bl	800a6d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	691b      	ldr	r3, [r3, #16]
 800976c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009774:	d10e      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	68db      	ldr	r3, [r3, #12]
 800977c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009780:	2b80      	cmp	r3, #128	; 0x80
 8009782:	d107      	bne.n	8009794 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800978c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800978e:	6878      	ldr	r0, [r7, #4]
 8009790:	f000 ffac 	bl	800a6ec <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800979e:	2b40      	cmp	r3, #64	; 0x40
 80097a0:	d10e      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	68db      	ldr	r3, [r3, #12]
 80097a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097ac:	2b40      	cmp	r3, #64	; 0x40
 80097ae:	d107      	bne.n	80097c0 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80097b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80097ba:	6878      	ldr	r0, [r7, #4]
 80097bc:	f000 fa4c 	bl	8009c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	691b      	ldr	r3, [r3, #16]
 80097c6:	f003 0320 	and.w	r3, r3, #32
 80097ca:	2b20      	cmp	r3, #32
 80097cc:	d10e      	bne.n	80097ec <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	f003 0320 	and.w	r3, r3, #32
 80097d8:	2b20      	cmp	r3, #32
 80097da:	d107      	bne.n	80097ec <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f06f 0220 	mvn.w	r2, #32
 80097e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80097e6:	6878      	ldr	r0, [r7, #4]
 80097e8:	f000 ff6c 	bl	800a6c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80097ec:	bf00      	nop
 80097ee:	3708      	adds	r7, #8
 80097f0:	46bd      	mov	sp, r7
 80097f2:	bd80      	pop	{r7, pc}

080097f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b084      	sub	sp, #16
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	60f8      	str	r0, [r7, #12]
 80097fc:	60b9      	str	r1, [r7, #8]
 80097fe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009806:	2b01      	cmp	r3, #1
 8009808:	d101      	bne.n	800980e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800980a:	2302      	movs	r3, #2
 800980c:	e105      	b.n	8009a1a <HAL_TIM_PWM_ConfigChannel+0x226>
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	2202      	movs	r2, #2
 800981a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	2b14      	cmp	r3, #20
 8009822:	f200 80f0 	bhi.w	8009a06 <HAL_TIM_PWM_ConfigChannel+0x212>
 8009826:	a201      	add	r2, pc, #4	; (adr r2, 800982c <HAL_TIM_PWM_ConfigChannel+0x38>)
 8009828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800982c:	08009881 	.word	0x08009881
 8009830:	08009a07 	.word	0x08009a07
 8009834:	08009a07 	.word	0x08009a07
 8009838:	08009a07 	.word	0x08009a07
 800983c:	080098c1 	.word	0x080098c1
 8009840:	08009a07 	.word	0x08009a07
 8009844:	08009a07 	.word	0x08009a07
 8009848:	08009a07 	.word	0x08009a07
 800984c:	08009903 	.word	0x08009903
 8009850:	08009a07 	.word	0x08009a07
 8009854:	08009a07 	.word	0x08009a07
 8009858:	08009a07 	.word	0x08009a07
 800985c:	08009943 	.word	0x08009943
 8009860:	08009a07 	.word	0x08009a07
 8009864:	08009a07 	.word	0x08009a07
 8009868:	08009a07 	.word	0x08009a07
 800986c:	08009985 	.word	0x08009985
 8009870:	08009a07 	.word	0x08009a07
 8009874:	08009a07 	.word	0x08009a07
 8009878:	08009a07 	.word	0x08009a07
 800987c:	080099c5 	.word	0x080099c5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68b9      	ldr	r1, [r7, #8]
 8009886:	4618      	mov	r0, r3
 8009888:	f000 fa90 	bl	8009dac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	699a      	ldr	r2, [r3, #24]
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	f042 0208 	orr.w	r2, r2, #8
 800989a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	699a      	ldr	r2, [r3, #24]
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	681b      	ldr	r3, [r3, #0]
 80098a6:	f022 0204 	bic.w	r2, r2, #4
 80098aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80098ac:	68fb      	ldr	r3, [r7, #12]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	6999      	ldr	r1, [r3, #24]
 80098b2:	68bb      	ldr	r3, [r7, #8]
 80098b4:	691a      	ldr	r2, [r3, #16]
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	430a      	orrs	r2, r1
 80098bc:	619a      	str	r2, [r3, #24]
      break;
 80098be:	e0a3      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	681b      	ldr	r3, [r3, #0]
 80098c4:	68b9      	ldr	r1, [r7, #8]
 80098c6:	4618      	mov	r0, r3
 80098c8:	f000 fae2 	bl	8009e90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80098cc:	68fb      	ldr	r3, [r7, #12]
 80098ce:	681b      	ldr	r3, [r3, #0]
 80098d0:	699a      	ldr	r2, [r3, #24]
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	699a      	ldr	r2, [r3, #24]
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	681b      	ldr	r3, [r3, #0]
 80098e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	6999      	ldr	r1, [r3, #24]
 80098f2:	68bb      	ldr	r3, [r7, #8]
 80098f4:	691b      	ldr	r3, [r3, #16]
 80098f6:	021a      	lsls	r2, r3, #8
 80098f8:	68fb      	ldr	r3, [r7, #12]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	430a      	orrs	r2, r1
 80098fe:	619a      	str	r2, [r3, #24]
      break;
 8009900:	e082      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	68b9      	ldr	r1, [r7, #8]
 8009908:	4618      	mov	r0, r3
 800990a:	f000 fb39 	bl	8009f80 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800990e:	68fb      	ldr	r3, [r7, #12]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	69da      	ldr	r2, [r3, #28]
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f042 0208 	orr.w	r2, r2, #8
 800991c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	69da      	ldr	r2, [r3, #28]
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	681b      	ldr	r3, [r3, #0]
 8009928:	f022 0204 	bic.w	r2, r2, #4
 800992c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	681b      	ldr	r3, [r3, #0]
 8009932:	69d9      	ldr	r1, [r3, #28]
 8009934:	68bb      	ldr	r3, [r7, #8]
 8009936:	691a      	ldr	r2, [r3, #16]
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	430a      	orrs	r2, r1
 800993e:	61da      	str	r2, [r3, #28]
      break;
 8009940:	e062      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	68b9      	ldr	r1, [r7, #8]
 8009948:	4618      	mov	r0, r3
 800994a:	f000 fb8f 	bl	800a06c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800994e:	68fb      	ldr	r3, [r7, #12]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	69da      	ldr	r2, [r3, #28]
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800995c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681b      	ldr	r3, [r3, #0]
 8009962:	69da      	ldr	r2, [r3, #28]
 8009964:	68fb      	ldr	r3, [r7, #12]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800996c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	69d9      	ldr	r1, [r3, #28]
 8009974:	68bb      	ldr	r3, [r7, #8]
 8009976:	691b      	ldr	r3, [r3, #16]
 8009978:	021a      	lsls	r2, r3, #8
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681b      	ldr	r3, [r3, #0]
 800997e:	430a      	orrs	r2, r1
 8009980:	61da      	str	r2, [r3, #28]
      break;
 8009982:	e041      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009984:	68fb      	ldr	r3, [r7, #12]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	68b9      	ldr	r1, [r7, #8]
 800998a:	4618      	mov	r0, r3
 800998c:	f000 fbc6 	bl	800a11c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8009990:	68fb      	ldr	r3, [r7, #12]
 8009992:	681b      	ldr	r3, [r3, #0]
 8009994:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	681b      	ldr	r3, [r3, #0]
 800999a:	f042 0208 	orr.w	r2, r2, #8
 800999e:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099a6:	68fb      	ldr	r3, [r7, #12]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	f022 0204 	bic.w	r2, r2, #4
 80099ae:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099b6:	68bb      	ldr	r3, [r7, #8]
 80099b8:	691a      	ldr	r2, [r3, #16]
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	430a      	orrs	r2, r1
 80099c0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80099c2:	e021      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	68b9      	ldr	r1, [r7, #8]
 80099ca:	4618      	mov	r0, r3
 80099cc:	f000 fbf8 	bl	800a1c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099d6:	68fb      	ldr	r3, [r7, #12]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80099de:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	681b      	ldr	r3, [r3, #0]
 80099e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80099ee:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80099f0:	68fb      	ldr	r3, [r7, #12]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80099f6:	68bb      	ldr	r3, [r7, #8]
 80099f8:	691b      	ldr	r3, [r3, #16]
 80099fa:	021a      	lsls	r2, r3, #8
 80099fc:	68fb      	ldr	r3, [r7, #12]
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	430a      	orrs	r2, r1
 8009a02:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009a04:	e000      	b.n	8009a08 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009a06:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009a08:	68fb      	ldr	r3, [r7, #12]
 8009a0a:	2201      	movs	r2, #1
 8009a0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	2200      	movs	r2, #0
 8009a14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	3710      	adds	r7, #16
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd80      	pop	{r7, pc}
 8009a22:	bf00      	nop

08009a24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009a24:	b580      	push	{r7, lr}
 8009a26:	b084      	sub	sp, #16
 8009a28:	af00      	add	r7, sp, #0
 8009a2a:	6078      	str	r0, [r7, #4]
 8009a2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009a2e:	687b      	ldr	r3, [r7, #4]
 8009a30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a34:	2b01      	cmp	r3, #1
 8009a36:	d101      	bne.n	8009a3c <HAL_TIM_ConfigClockSource+0x18>
 8009a38:	2302      	movs	r3, #2
 8009a3a:	e0a6      	b.n	8009b8a <HAL_TIM_ConfigClockSource+0x166>
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	2202      	movs	r2, #2
 8009a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	681b      	ldr	r3, [r3, #0]
 8009a50:	689b      	ldr	r3, [r3, #8]
 8009a52:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009a54:	68fa      	ldr	r2, [r7, #12]
 8009a56:	4b4f      	ldr	r3, [pc, #316]	; (8009b94 <HAL_TIM_ConfigClockSource+0x170>)
 8009a58:	4013      	ands	r3, r2
 8009a5a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a62:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009a6c:	683b      	ldr	r3, [r7, #0]
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	2b40      	cmp	r3, #64	; 0x40
 8009a72:	d067      	beq.n	8009b44 <HAL_TIM_ConfigClockSource+0x120>
 8009a74:	2b40      	cmp	r3, #64	; 0x40
 8009a76:	d80b      	bhi.n	8009a90 <HAL_TIM_ConfigClockSource+0x6c>
 8009a78:	2b10      	cmp	r3, #16
 8009a7a:	d073      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
 8009a7c:	2b10      	cmp	r3, #16
 8009a7e:	d802      	bhi.n	8009a86 <HAL_TIM_ConfigClockSource+0x62>
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d06f      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009a84:	e078      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a86:	2b20      	cmp	r3, #32
 8009a88:	d06c      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
 8009a8a:	2b30      	cmp	r3, #48	; 0x30
 8009a8c:	d06a      	beq.n	8009b64 <HAL_TIM_ConfigClockSource+0x140>
      break;
 8009a8e:	e073      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009a90:	2b70      	cmp	r3, #112	; 0x70
 8009a92:	d00d      	beq.n	8009ab0 <HAL_TIM_ConfigClockSource+0x8c>
 8009a94:	2b70      	cmp	r3, #112	; 0x70
 8009a96:	d804      	bhi.n	8009aa2 <HAL_TIM_ConfigClockSource+0x7e>
 8009a98:	2b50      	cmp	r3, #80	; 0x50
 8009a9a:	d033      	beq.n	8009b04 <HAL_TIM_ConfigClockSource+0xe0>
 8009a9c:	2b60      	cmp	r3, #96	; 0x60
 8009a9e:	d041      	beq.n	8009b24 <HAL_TIM_ConfigClockSource+0x100>
      break;
 8009aa0:	e06a      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8009aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009aa6:	d066      	beq.n	8009b76 <HAL_TIM_ConfigClockSource+0x152>
 8009aa8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009aac:	d017      	beq.n	8009ade <HAL_TIM_ConfigClockSource+0xba>
      break;
 8009aae:	e063      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6818      	ldr	r0, [r3, #0]
 8009ab4:	683b      	ldr	r3, [r7, #0]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	683b      	ldr	r3, [r7, #0]
 8009aba:	685a      	ldr	r2, [r3, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	f000 fcd4 	bl	800a46c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	689b      	ldr	r3, [r3, #8]
 8009aca:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009acc:	68fb      	ldr	r3, [r7, #12]
 8009ace:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009ad2:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	68fa      	ldr	r2, [r7, #12]
 8009ada:	609a      	str	r2, [r3, #8]
      break;
 8009adc:	e04c      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6818      	ldr	r0, [r3, #0]
 8009ae2:	683b      	ldr	r3, [r7, #0]
 8009ae4:	6899      	ldr	r1, [r3, #8]
 8009ae6:	683b      	ldr	r3, [r7, #0]
 8009ae8:	685a      	ldr	r2, [r3, #4]
 8009aea:	683b      	ldr	r3, [r7, #0]
 8009aec:	68db      	ldr	r3, [r3, #12]
 8009aee:	f000 fcbd 	bl	800a46c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	689a      	ldr	r2, [r3, #8]
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009b00:	609a      	str	r2, [r3, #8]
      break;
 8009b02:	e039      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	6818      	ldr	r0, [r3, #0]
 8009b08:	683b      	ldr	r3, [r7, #0]
 8009b0a:	6859      	ldr	r1, [r3, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	68db      	ldr	r3, [r3, #12]
 8009b10:	461a      	mov	r2, r3
 8009b12:	f000 fc31 	bl	800a378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	681b      	ldr	r3, [r3, #0]
 8009b1a:	2150      	movs	r1, #80	; 0x50
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 fc8a 	bl	800a436 <TIM_ITRx_SetConfig>
      break;
 8009b22:	e029      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6818      	ldr	r0, [r3, #0]
 8009b28:	683b      	ldr	r3, [r7, #0]
 8009b2a:	6859      	ldr	r1, [r3, #4]
 8009b2c:	683b      	ldr	r3, [r7, #0]
 8009b2e:	68db      	ldr	r3, [r3, #12]
 8009b30:	461a      	mov	r2, r3
 8009b32:	f000 fc50 	bl	800a3d6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	2160      	movs	r1, #96	; 0x60
 8009b3c:	4618      	mov	r0, r3
 8009b3e:	f000 fc7a 	bl	800a436 <TIM_ITRx_SetConfig>
      break;
 8009b42:	e019      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6818      	ldr	r0, [r3, #0]
 8009b48:	683b      	ldr	r3, [r7, #0]
 8009b4a:	6859      	ldr	r1, [r3, #4]
 8009b4c:	683b      	ldr	r3, [r7, #0]
 8009b4e:	68db      	ldr	r3, [r3, #12]
 8009b50:	461a      	mov	r2, r3
 8009b52:	f000 fc11 	bl	800a378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	681b      	ldr	r3, [r3, #0]
 8009b5a:	2140      	movs	r1, #64	; 0x40
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	f000 fc6a 	bl	800a436 <TIM_ITRx_SetConfig>
      break;
 8009b62:	e009      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681a      	ldr	r2, [r3, #0]
 8009b68:	683b      	ldr	r3, [r7, #0]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	4619      	mov	r1, r3
 8009b6e:	4610      	mov	r0, r2
 8009b70:	f000 fc61 	bl	800a436 <TIM_ITRx_SetConfig>
      break;
 8009b74:	e000      	b.n	8009b78 <HAL_TIM_ConfigClockSource+0x154>
      break;
 8009b76:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	2200      	movs	r2, #0
 8009b84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b88:	2300      	movs	r3, #0
}
 8009b8a:	4618      	mov	r0, r3
 8009b8c:	3710      	adds	r7, #16
 8009b8e:	46bd      	mov	sp, r7
 8009b90:	bd80      	pop	{r7, pc}
 8009b92:	bf00      	nop
 8009b94:	fffeff88 	.word	0xfffeff88

08009b98 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009b98:	b580      	push	{r7, lr}
 8009b9a:	b082      	sub	sp, #8
 8009b9c:	af00      	add	r7, sp, #0
 8009b9e:	6078      	str	r0, [r7, #4]
 8009ba0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009ba8:	2b01      	cmp	r3, #1
 8009baa:	d101      	bne.n	8009bb0 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009bac:	2302      	movs	r3, #2
 8009bae:	e031      	b.n	8009c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	2201      	movs	r2, #1
 8009bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2202      	movs	r2, #2
 8009bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009bc0:	6839      	ldr	r1, [r7, #0]
 8009bc2:	6878      	ldr	r0, [r7, #4]
 8009bc4:	f000 fb50 	bl	800a268 <TIM_SlaveTimer_SetConfig>
 8009bc8:	4603      	mov	r3, r0
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d009      	beq.n	8009be2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009bce:	687b      	ldr	r3, [r7, #4]
 8009bd0:	2201      	movs	r2, #1
 8009bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 8009bd6:	687b      	ldr	r3, [r7, #4]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009bde:	2301      	movs	r3, #1
 8009be0:	e018      	b.n	8009c14 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	681b      	ldr	r3, [r3, #0]
 8009be6:	68da      	ldr	r2, [r3, #12]
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009bf0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	681b      	ldr	r3, [r3, #0]
 8009bf6:	68da      	ldr	r2, [r3, #12]
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009c00:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009c12:	2300      	movs	r3, #0
}
 8009c14:	4618      	mov	r0, r3
 8009c16:	3708      	adds	r7, #8
 8009c18:	46bd      	mov	sp, r7
 8009c1a:	bd80      	pop	{r7, pc}

08009c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009c1c:	b480      	push	{r7}
 8009c1e:	b083      	sub	sp, #12
 8009c20:	af00      	add	r7, sp, #0
 8009c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009c24:	bf00      	nop
 8009c26:	370c      	adds	r7, #12
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c2e:	4770      	bx	lr

08009c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009c30:	b480      	push	{r7}
 8009c32:	b083      	sub	sp, #12
 8009c34:	af00      	add	r7, sp, #0
 8009c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009c38:	bf00      	nop
 8009c3a:	370c      	adds	r7, #12
 8009c3c:	46bd      	mov	sp, r7
 8009c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c42:	4770      	bx	lr

08009c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009c44:	b480      	push	{r7}
 8009c46:	b083      	sub	sp, #12
 8009c48:	af00      	add	r7, sp, #0
 8009c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009c4c:	bf00      	nop
 8009c4e:	370c      	adds	r7, #12
 8009c50:	46bd      	mov	sp, r7
 8009c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c56:	4770      	bx	lr

08009c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009c58:	b480      	push	{r7}
 8009c5a:	b083      	sub	sp, #12
 8009c5c:	af00      	add	r7, sp, #0
 8009c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009c60:	bf00      	nop
 8009c62:	370c      	adds	r7, #12
 8009c64:	46bd      	mov	sp, r7
 8009c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c6a:	4770      	bx	lr

08009c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
 8009c72:	6078      	str	r0, [r7, #4]
 8009c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8009c76:	687b      	ldr	r3, [r7, #4]
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	4a40      	ldr	r2, [pc, #256]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d013      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c8a:	d00f      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c8c:	687b      	ldr	r3, [r7, #4]
 8009c8e:	4a3d      	ldr	r2, [pc, #244]	; (8009d84 <TIM_Base_SetConfig+0x118>)
 8009c90:	4293      	cmp	r3, r2
 8009c92:	d00b      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	4a3c      	ldr	r2, [pc, #240]	; (8009d88 <TIM_Base_SetConfig+0x11c>)
 8009c98:	4293      	cmp	r3, r2
 8009c9a:	d007      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	4a3b      	ldr	r2, [pc, #236]	; (8009d8c <TIM_Base_SetConfig+0x120>)
 8009ca0:	4293      	cmp	r3, r2
 8009ca2:	d003      	beq.n	8009cac <TIM_Base_SetConfig+0x40>
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	4a3a      	ldr	r2, [pc, #232]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d108      	bne.n	8009cbe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009cb4:	683b      	ldr	r3, [r7, #0]
 8009cb6:	685b      	ldr	r3, [r3, #4]
 8009cb8:	68fa      	ldr	r2, [r7, #12]
 8009cba:	4313      	orrs	r3, r2
 8009cbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	4a2f      	ldr	r2, [pc, #188]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009cc2:	4293      	cmp	r3, r2
 8009cc4:	d02b      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ccc:	d027      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	4a2c      	ldr	r2, [pc, #176]	; (8009d84 <TIM_Base_SetConfig+0x118>)
 8009cd2:	4293      	cmp	r3, r2
 8009cd4:	d023      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	4a2b      	ldr	r2, [pc, #172]	; (8009d88 <TIM_Base_SetConfig+0x11c>)
 8009cda:	4293      	cmp	r3, r2
 8009cdc:	d01f      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	4a2a      	ldr	r2, [pc, #168]	; (8009d8c <TIM_Base_SetConfig+0x120>)
 8009ce2:	4293      	cmp	r3, r2
 8009ce4:	d01b      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009ce6:	687b      	ldr	r3, [r7, #4]
 8009ce8:	4a29      	ldr	r2, [pc, #164]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009cea:	4293      	cmp	r3, r2
 8009cec:	d017      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	4a28      	ldr	r2, [pc, #160]	; (8009d94 <TIM_Base_SetConfig+0x128>)
 8009cf2:	4293      	cmp	r3, r2
 8009cf4:	d013      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	4a27      	ldr	r2, [pc, #156]	; (8009d98 <TIM_Base_SetConfig+0x12c>)
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	d00f      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	4a26      	ldr	r2, [pc, #152]	; (8009d9c <TIM_Base_SetConfig+0x130>)
 8009d02:	4293      	cmp	r3, r2
 8009d04:	d00b      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	4a25      	ldr	r2, [pc, #148]	; (8009da0 <TIM_Base_SetConfig+0x134>)
 8009d0a:	4293      	cmp	r3, r2
 8009d0c:	d007      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	4a24      	ldr	r2, [pc, #144]	; (8009da4 <TIM_Base_SetConfig+0x138>)
 8009d12:	4293      	cmp	r3, r2
 8009d14:	d003      	beq.n	8009d1e <TIM_Base_SetConfig+0xb2>
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	4a23      	ldr	r2, [pc, #140]	; (8009da8 <TIM_Base_SetConfig+0x13c>)
 8009d1a:	4293      	cmp	r3, r2
 8009d1c:	d108      	bne.n	8009d30 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009d26:	683b      	ldr	r3, [r7, #0]
 8009d28:	68db      	ldr	r3, [r3, #12]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	4313      	orrs	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009d36:	683b      	ldr	r3, [r7, #0]
 8009d38:	695b      	ldr	r3, [r3, #20]
 8009d3a:	4313      	orrs	r3, r2
 8009d3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009d44:	683b      	ldr	r3, [r7, #0]
 8009d46:	689a      	ldr	r2, [r3, #8]
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	681a      	ldr	r2, [r3, #0]
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	4a0a      	ldr	r2, [pc, #40]	; (8009d80 <TIM_Base_SetConfig+0x114>)
 8009d58:	4293      	cmp	r3, r2
 8009d5a:	d003      	beq.n	8009d64 <TIM_Base_SetConfig+0xf8>
 8009d5c:	687b      	ldr	r3, [r7, #4]
 8009d5e:	4a0c      	ldr	r2, [pc, #48]	; (8009d90 <TIM_Base_SetConfig+0x124>)
 8009d60:	4293      	cmp	r3, r2
 8009d62:	d103      	bne.n	8009d6c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009d64:	683b      	ldr	r3, [r7, #0]
 8009d66:	691a      	ldr	r2, [r3, #16]
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009d6c:	687b      	ldr	r3, [r7, #4]
 8009d6e:	2201      	movs	r2, #1
 8009d70:	615a      	str	r2, [r3, #20]
}
 8009d72:	bf00      	nop
 8009d74:	3714      	adds	r7, #20
 8009d76:	46bd      	mov	sp, r7
 8009d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7c:	4770      	bx	lr
 8009d7e:	bf00      	nop
 8009d80:	40010000 	.word	0x40010000
 8009d84:	40000400 	.word	0x40000400
 8009d88:	40000800 	.word	0x40000800
 8009d8c:	40000c00 	.word	0x40000c00
 8009d90:	40010400 	.word	0x40010400
 8009d94:	40014000 	.word	0x40014000
 8009d98:	40014400 	.word	0x40014400
 8009d9c:	40014800 	.word	0x40014800
 8009da0:	40001800 	.word	0x40001800
 8009da4:	40001c00 	.word	0x40001c00
 8009da8:	40002000 	.word	0x40002000

08009dac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009dac:	b480      	push	{r7}
 8009dae:	b087      	sub	sp, #28
 8009db0:	af00      	add	r7, sp, #0
 8009db2:	6078      	str	r0, [r7, #4]
 8009db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	6a1b      	ldr	r3, [r3, #32]
 8009dba:	f023 0201 	bic.w	r2, r3, #1
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	6a1b      	ldr	r3, [r3, #32]
 8009dc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dc8:	687b      	ldr	r3, [r7, #4]
 8009dca:	685b      	ldr	r3, [r3, #4]
 8009dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009dce:	687b      	ldr	r3, [r7, #4]
 8009dd0:	699b      	ldr	r3, [r3, #24]
 8009dd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009dd4:	68fa      	ldr	r2, [r7, #12]
 8009dd6:	4b2b      	ldr	r3, [pc, #172]	; (8009e84 <TIM_OC1_SetConfig+0xd8>)
 8009dd8:	4013      	ands	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009ddc:	68fb      	ldr	r3, [r7, #12]
 8009dde:	f023 0303 	bic.w	r3, r3, #3
 8009de2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de4:	683b      	ldr	r3, [r7, #0]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	68fa      	ldr	r2, [r7, #12]
 8009dea:	4313      	orrs	r3, r2
 8009dec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009dee:	697b      	ldr	r3, [r7, #20]
 8009df0:	f023 0302 	bic.w	r3, r3, #2
 8009df4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009df6:	683b      	ldr	r3, [r7, #0]
 8009df8:	689b      	ldr	r3, [r3, #8]
 8009dfa:	697a      	ldr	r2, [r7, #20]
 8009dfc:	4313      	orrs	r3, r2
 8009dfe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4a21      	ldr	r2, [pc, #132]	; (8009e88 <TIM_OC1_SetConfig+0xdc>)
 8009e04:	4293      	cmp	r3, r2
 8009e06:	d003      	beq.n	8009e10 <TIM_OC1_SetConfig+0x64>
 8009e08:	687b      	ldr	r3, [r7, #4]
 8009e0a:	4a20      	ldr	r2, [pc, #128]	; (8009e8c <TIM_OC1_SetConfig+0xe0>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d10c      	bne.n	8009e2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009e10:	697b      	ldr	r3, [r7, #20]
 8009e12:	f023 0308 	bic.w	r3, r3, #8
 8009e16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009e18:	683b      	ldr	r3, [r7, #0]
 8009e1a:	68db      	ldr	r3, [r3, #12]
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009e22:	697b      	ldr	r3, [r7, #20]
 8009e24:	f023 0304 	bic.w	r3, r3, #4
 8009e28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	4a16      	ldr	r2, [pc, #88]	; (8009e88 <TIM_OC1_SetConfig+0xdc>)
 8009e2e:	4293      	cmp	r3, r2
 8009e30:	d003      	beq.n	8009e3a <TIM_OC1_SetConfig+0x8e>
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	4a15      	ldr	r2, [pc, #84]	; (8009e8c <TIM_OC1_SetConfig+0xe0>)
 8009e36:	4293      	cmp	r3, r2
 8009e38:	d111      	bne.n	8009e5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009e3a:	693b      	ldr	r3, [r7, #16]
 8009e3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009e42:	693b      	ldr	r3, [r7, #16]
 8009e44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009e4a:	683b      	ldr	r3, [r7, #0]
 8009e4c:	695b      	ldr	r3, [r3, #20]
 8009e4e:	693a      	ldr	r2, [r7, #16]
 8009e50:	4313      	orrs	r3, r2
 8009e52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009e54:	683b      	ldr	r3, [r7, #0]
 8009e56:	699b      	ldr	r3, [r3, #24]
 8009e58:	693a      	ldr	r2, [r7, #16]
 8009e5a:	4313      	orrs	r3, r2
 8009e5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	693a      	ldr	r2, [r7, #16]
 8009e62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	68fa      	ldr	r2, [r7, #12]
 8009e68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009e6a:	683b      	ldr	r3, [r7, #0]
 8009e6c:	685a      	ldr	r2, [r3, #4]
 8009e6e:	687b      	ldr	r3, [r7, #4]
 8009e70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	697a      	ldr	r2, [r7, #20]
 8009e76:	621a      	str	r2, [r3, #32]
}
 8009e78:	bf00      	nop
 8009e7a:	371c      	adds	r7, #28
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr
 8009e84:	fffeff8f 	.word	0xfffeff8f
 8009e88:	40010000 	.word	0x40010000
 8009e8c:	40010400 	.word	0x40010400

08009e90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009e90:	b480      	push	{r7}
 8009e92:	b087      	sub	sp, #28
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	6078      	str	r0, [r7, #4]
 8009e98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6a1b      	ldr	r3, [r3, #32]
 8009e9e:	f023 0210 	bic.w	r2, r3, #16
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	6a1b      	ldr	r3, [r3, #32]
 8009eaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	685b      	ldr	r3, [r3, #4]
 8009eb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009eb2:	687b      	ldr	r3, [r7, #4]
 8009eb4:	699b      	ldr	r3, [r3, #24]
 8009eb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009eb8:	68fa      	ldr	r2, [r7, #12]
 8009eba:	4b2e      	ldr	r3, [pc, #184]	; (8009f74 <TIM_OC2_SetConfig+0xe4>)
 8009ebc:	4013      	ands	r3, r2
 8009ebe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ec6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009ec8:	683b      	ldr	r3, [r7, #0]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	021b      	lsls	r3, r3, #8
 8009ece:	68fa      	ldr	r2, [r7, #12]
 8009ed0:	4313      	orrs	r3, r2
 8009ed2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009ed4:	697b      	ldr	r3, [r7, #20]
 8009ed6:	f023 0320 	bic.w	r3, r3, #32
 8009eda:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	011b      	lsls	r3, r3, #4
 8009ee2:	697a      	ldr	r2, [r7, #20]
 8009ee4:	4313      	orrs	r3, r2
 8009ee6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009ee8:	687b      	ldr	r3, [r7, #4]
 8009eea:	4a23      	ldr	r2, [pc, #140]	; (8009f78 <TIM_OC2_SetConfig+0xe8>)
 8009eec:	4293      	cmp	r3, r2
 8009eee:	d003      	beq.n	8009ef8 <TIM_OC2_SetConfig+0x68>
 8009ef0:	687b      	ldr	r3, [r7, #4]
 8009ef2:	4a22      	ldr	r2, [pc, #136]	; (8009f7c <TIM_OC2_SetConfig+0xec>)
 8009ef4:	4293      	cmp	r3, r2
 8009ef6:	d10d      	bne.n	8009f14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009ef8:	697b      	ldr	r3, [r7, #20]
 8009efa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009efe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009f00:	683b      	ldr	r3, [r7, #0]
 8009f02:	68db      	ldr	r3, [r3, #12]
 8009f04:	011b      	lsls	r3, r3, #4
 8009f06:	697a      	ldr	r2, [r7, #20]
 8009f08:	4313      	orrs	r3, r2
 8009f0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009f14:	687b      	ldr	r3, [r7, #4]
 8009f16:	4a18      	ldr	r2, [pc, #96]	; (8009f78 <TIM_OC2_SetConfig+0xe8>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d003      	beq.n	8009f24 <TIM_OC2_SetConfig+0x94>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	4a17      	ldr	r2, [pc, #92]	; (8009f7c <TIM_OC2_SetConfig+0xec>)
 8009f20:	4293      	cmp	r3, r2
 8009f22:	d113      	bne.n	8009f4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009f24:	693b      	ldr	r3, [r7, #16]
 8009f26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009f2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009f2c:	693b      	ldr	r3, [r7, #16]
 8009f2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009f32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009f34:	683b      	ldr	r3, [r7, #0]
 8009f36:	695b      	ldr	r3, [r3, #20]
 8009f38:	009b      	lsls	r3, r3, #2
 8009f3a:	693a      	ldr	r2, [r7, #16]
 8009f3c:	4313      	orrs	r3, r2
 8009f3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009f40:	683b      	ldr	r3, [r7, #0]
 8009f42:	699b      	ldr	r3, [r3, #24]
 8009f44:	009b      	lsls	r3, r3, #2
 8009f46:	693a      	ldr	r2, [r7, #16]
 8009f48:	4313      	orrs	r3, r2
 8009f4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	693a      	ldr	r2, [r7, #16]
 8009f50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009f52:	687b      	ldr	r3, [r7, #4]
 8009f54:	68fa      	ldr	r2, [r7, #12]
 8009f56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009f58:	683b      	ldr	r3, [r7, #0]
 8009f5a:	685a      	ldr	r2, [r3, #4]
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	697a      	ldr	r2, [r7, #20]
 8009f64:	621a      	str	r2, [r3, #32]
}
 8009f66:	bf00      	nop
 8009f68:	371c      	adds	r7, #28
 8009f6a:	46bd      	mov	sp, r7
 8009f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	feff8fff 	.word	0xfeff8fff
 8009f78:	40010000 	.word	0x40010000
 8009f7c:	40010400 	.word	0x40010400

08009f80 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6a1b      	ldr	r3, [r3, #32]
 8009f8e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6a1b      	ldr	r3, [r3, #32]
 8009f9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009f9c:	687b      	ldr	r3, [r7, #4]
 8009f9e:	685b      	ldr	r3, [r3, #4]
 8009fa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	69db      	ldr	r3, [r3, #28]
 8009fa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009fa8:	68fa      	ldr	r2, [r7, #12]
 8009faa:	4b2d      	ldr	r3, [pc, #180]	; (800a060 <TIM_OC3_SetConfig+0xe0>)
 8009fac:	4013      	ands	r3, r2
 8009fae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009fb0:	68fb      	ldr	r3, [r7, #12]
 8009fb2:	f023 0303 	bic.w	r3, r3, #3
 8009fb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009fb8:	683b      	ldr	r3, [r7, #0]
 8009fba:	681b      	ldr	r3, [r3, #0]
 8009fbc:	68fa      	ldr	r2, [r7, #12]
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009fc2:	697b      	ldr	r3, [r7, #20]
 8009fc4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009fc8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	689b      	ldr	r3, [r3, #8]
 8009fce:	021b      	lsls	r3, r3, #8
 8009fd0:	697a      	ldr	r2, [r7, #20]
 8009fd2:	4313      	orrs	r3, r2
 8009fd4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	4a22      	ldr	r2, [pc, #136]	; (800a064 <TIM_OC3_SetConfig+0xe4>)
 8009fda:	4293      	cmp	r3, r2
 8009fdc:	d003      	beq.n	8009fe6 <TIM_OC3_SetConfig+0x66>
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	4a21      	ldr	r2, [pc, #132]	; (800a068 <TIM_OC3_SetConfig+0xe8>)
 8009fe2:	4293      	cmp	r3, r2
 8009fe4:	d10d      	bne.n	800a002 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009fe6:	697b      	ldr	r3, [r7, #20]
 8009fe8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009fec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009fee:	683b      	ldr	r3, [r7, #0]
 8009ff0:	68db      	ldr	r3, [r3, #12]
 8009ff2:	021b      	lsls	r3, r3, #8
 8009ff4:	697a      	ldr	r2, [r7, #20]
 8009ff6:	4313      	orrs	r3, r2
 8009ff8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009ffa:	697b      	ldr	r3, [r7, #20]
 8009ffc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a000:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a002:	687b      	ldr	r3, [r7, #4]
 800a004:	4a17      	ldr	r2, [pc, #92]	; (800a064 <TIM_OC3_SetConfig+0xe4>)
 800a006:	4293      	cmp	r3, r2
 800a008:	d003      	beq.n	800a012 <TIM_OC3_SetConfig+0x92>
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	4a16      	ldr	r2, [pc, #88]	; (800a068 <TIM_OC3_SetConfig+0xe8>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d113      	bne.n	800a03a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a01a:	693b      	ldr	r3, [r7, #16]
 800a01c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a022:	683b      	ldr	r3, [r7, #0]
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	011b      	lsls	r3, r3, #4
 800a028:	693a      	ldr	r2, [r7, #16]
 800a02a:	4313      	orrs	r3, r2
 800a02c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a02e:	683b      	ldr	r3, [r7, #0]
 800a030:	699b      	ldr	r3, [r3, #24]
 800a032:	011b      	lsls	r3, r3, #4
 800a034:	693a      	ldr	r2, [r7, #16]
 800a036:	4313      	orrs	r3, r2
 800a038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	693a      	ldr	r2, [r7, #16]
 800a03e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	68fa      	ldr	r2, [r7, #12]
 800a044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a046:	683b      	ldr	r3, [r7, #0]
 800a048:	685a      	ldr	r2, [r3, #4]
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	697a      	ldr	r2, [r7, #20]
 800a052:	621a      	str	r2, [r3, #32]
}
 800a054:	bf00      	nop
 800a056:	371c      	adds	r7, #28
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	fffeff8f 	.word	0xfffeff8f
 800a064:	40010000 	.word	0x40010000
 800a068:	40010400 	.word	0x40010400

0800a06c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a06c:	b480      	push	{r7}
 800a06e:	b087      	sub	sp, #28
 800a070:	af00      	add	r7, sp, #0
 800a072:	6078      	str	r0, [r7, #4]
 800a074:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a1b      	ldr	r3, [r3, #32]
 800a07a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	6a1b      	ldr	r3, [r3, #32]
 800a086:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	685b      	ldr	r3, [r3, #4]
 800a08c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	69db      	ldr	r3, [r3, #28]
 800a092:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a094:	68fa      	ldr	r2, [r7, #12]
 800a096:	4b1e      	ldr	r3, [pc, #120]	; (800a110 <TIM_OC4_SetConfig+0xa4>)
 800a098:	4013      	ands	r3, r2
 800a09a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	681b      	ldr	r3, [r3, #0]
 800a0a8:	021b      	lsls	r3, r3, #8
 800a0aa:	68fa      	ldr	r2, [r7, #12]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a0b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a0b8:	683b      	ldr	r3, [r7, #0]
 800a0ba:	689b      	ldr	r3, [r3, #8]
 800a0bc:	031b      	lsls	r3, r3, #12
 800a0be:	693a      	ldr	r2, [r7, #16]
 800a0c0:	4313      	orrs	r3, r2
 800a0c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	4a13      	ldr	r2, [pc, #76]	; (800a114 <TIM_OC4_SetConfig+0xa8>)
 800a0c8:	4293      	cmp	r3, r2
 800a0ca:	d003      	beq.n	800a0d4 <TIM_OC4_SetConfig+0x68>
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	4a12      	ldr	r2, [pc, #72]	; (800a118 <TIM_OC4_SetConfig+0xac>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d109      	bne.n	800a0e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a0d4:	697b      	ldr	r3, [r7, #20]
 800a0d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a0dc:	683b      	ldr	r3, [r7, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	019b      	lsls	r3, r3, #6
 800a0e2:	697a      	ldr	r2, [r7, #20]
 800a0e4:	4313      	orrs	r3, r2
 800a0e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	697a      	ldr	r2, [r7, #20]
 800a0ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	68fa      	ldr	r2, [r7, #12]
 800a0f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a0f4:	683b      	ldr	r3, [r7, #0]
 800a0f6:	685a      	ldr	r2, [r3, #4]
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	693a      	ldr	r2, [r7, #16]
 800a100:	621a      	str	r2, [r3, #32]
}
 800a102:	bf00      	nop
 800a104:	371c      	adds	r7, #28
 800a106:	46bd      	mov	sp, r7
 800a108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10c:	4770      	bx	lr
 800a10e:	bf00      	nop
 800a110:	feff8fff 	.word	0xfeff8fff
 800a114:	40010000 	.word	0x40010000
 800a118:	40010400 	.word	0x40010400

0800a11c <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a11c:	b480      	push	{r7}
 800a11e:	b087      	sub	sp, #28
 800a120:	af00      	add	r7, sp, #0
 800a122:	6078      	str	r0, [r7, #4]
 800a124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	6a1b      	ldr	r3, [r3, #32]
 800a12a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800a12e:	687b      	ldr	r3, [r7, #4]
 800a130:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	6a1b      	ldr	r3, [r3, #32]
 800a136:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	685b      	ldr	r3, [r3, #4]
 800a13c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a13e:	687b      	ldr	r3, [r7, #4]
 800a140:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800a144:	68fa      	ldr	r2, [r7, #12]
 800a146:	4b1b      	ldr	r3, [pc, #108]	; (800a1b4 <TIM_OC5_SetConfig+0x98>)
 800a148:	4013      	ands	r3, r2
 800a14a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a14c:	683b      	ldr	r3, [r7, #0]
 800a14e:	681b      	ldr	r3, [r3, #0]
 800a150:	68fa      	ldr	r2, [r7, #12]
 800a152:	4313      	orrs	r3, r2
 800a154:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800a156:	693b      	ldr	r3, [r7, #16]
 800a158:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800a15c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800a15e:	683b      	ldr	r3, [r7, #0]
 800a160:	689b      	ldr	r3, [r3, #8]
 800a162:	041b      	lsls	r3, r3, #16
 800a164:	693a      	ldr	r2, [r7, #16]
 800a166:	4313      	orrs	r3, r2
 800a168:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	4a12      	ldr	r2, [pc, #72]	; (800a1b8 <TIM_OC5_SetConfig+0x9c>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d003      	beq.n	800a17a <TIM_OC5_SetConfig+0x5e>
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	4a11      	ldr	r2, [pc, #68]	; (800a1bc <TIM_OC5_SetConfig+0xa0>)
 800a176:	4293      	cmp	r3, r2
 800a178:	d109      	bne.n	800a18e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800a17a:	697b      	ldr	r3, [r7, #20]
 800a17c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a180:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800a182:	683b      	ldr	r3, [r7, #0]
 800a184:	695b      	ldr	r3, [r3, #20]
 800a186:	021b      	lsls	r3, r3, #8
 800a188:	697a      	ldr	r2, [r7, #20]
 800a18a:	4313      	orrs	r3, r2
 800a18c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	697a      	ldr	r2, [r7, #20]
 800a192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	68fa      	ldr	r2, [r7, #12]
 800a198:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800a19a:	683b      	ldr	r3, [r7, #0]
 800a19c:	685a      	ldr	r2, [r3, #4]
 800a19e:	687b      	ldr	r3, [r7, #4]
 800a1a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	693a      	ldr	r2, [r7, #16]
 800a1a6:	621a      	str	r2, [r3, #32]
}
 800a1a8:	bf00      	nop
 800a1aa:	371c      	adds	r7, #28
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1b2:	4770      	bx	lr
 800a1b4:	fffeff8f 	.word	0xfffeff8f
 800a1b8:	40010000 	.word	0x40010000
 800a1bc:	40010400 	.word	0x40010400

0800a1c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 800a1c0:	b480      	push	{r7}
 800a1c2:	b087      	sub	sp, #28
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
 800a1c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800a1ca:	687b      	ldr	r3, [r7, #4]
 800a1cc:	6a1b      	ldr	r3, [r3, #32]
 800a1ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	6a1b      	ldr	r3, [r3, #32]
 800a1da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	685b      	ldr	r3, [r3, #4]
 800a1e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800a1e2:	687b      	ldr	r3, [r7, #4]
 800a1e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a1e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800a1e8:	68fa      	ldr	r2, [r7, #12]
 800a1ea:	4b1c      	ldr	r3, [pc, #112]	; (800a25c <TIM_OC6_SetConfig+0x9c>)
 800a1ec:	4013      	ands	r3, r2
 800a1ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a1f0:	683b      	ldr	r3, [r7, #0]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	021b      	lsls	r3, r3, #8
 800a1f6:	68fa      	ldr	r2, [r7, #12]
 800a1f8:	4313      	orrs	r3, r2
 800a1fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 800a1fc:	693b      	ldr	r3, [r7, #16]
 800a1fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800a202:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800a204:	683b      	ldr	r3, [r7, #0]
 800a206:	689b      	ldr	r3, [r3, #8]
 800a208:	051b      	lsls	r3, r3, #20
 800a20a:	693a      	ldr	r2, [r7, #16]
 800a20c:	4313      	orrs	r3, r2
 800a20e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	4a13      	ldr	r2, [pc, #76]	; (800a260 <TIM_OC6_SetConfig+0xa0>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d003      	beq.n	800a220 <TIM_OC6_SetConfig+0x60>
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	4a12      	ldr	r2, [pc, #72]	; (800a264 <TIM_OC6_SetConfig+0xa4>)
 800a21c:	4293      	cmp	r3, r2
 800a21e:	d109      	bne.n	800a234 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800a220:	697b      	ldr	r3, [r7, #20]
 800a222:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a226:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800a228:	683b      	ldr	r3, [r7, #0]
 800a22a:	695b      	ldr	r3, [r3, #20]
 800a22c:	029b      	lsls	r3, r3, #10
 800a22e:	697a      	ldr	r2, [r7, #20]
 800a230:	4313      	orrs	r3, r2
 800a232:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	68fa      	ldr	r2, [r7, #12]
 800a23e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	685a      	ldr	r2, [r3, #4]
 800a244:	687b      	ldr	r3, [r7, #4]
 800a246:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	693a      	ldr	r2, [r7, #16]
 800a24c:	621a      	str	r2, [r3, #32]
}
 800a24e:	bf00      	nop
 800a250:	371c      	adds	r7, #28
 800a252:	46bd      	mov	sp, r7
 800a254:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a258:	4770      	bx	lr
 800a25a:	bf00      	nop
 800a25c:	feff8fff 	.word	0xfeff8fff
 800a260:	40010000 	.word	0x40010000
 800a264:	40010400 	.word	0x40010400

0800a268 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
 800a270:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a272:	687b      	ldr	r3, [r7, #4]
 800a274:	681b      	ldr	r3, [r3, #0]
 800a276:	689b      	ldr	r3, [r3, #8]
 800a278:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a27a:	697b      	ldr	r3, [r7, #20]
 800a27c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a280:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 800a282:	683b      	ldr	r3, [r7, #0]
 800a284:	685b      	ldr	r3, [r3, #4]
 800a286:	697a      	ldr	r2, [r7, #20]
 800a288:	4313      	orrs	r3, r2
 800a28a:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800a28c:	697a      	ldr	r2, [r7, #20]
 800a28e:	4b39      	ldr	r3, [pc, #228]	; (800a374 <TIM_SlaveTimer_SetConfig+0x10c>)
 800a290:	4013      	ands	r3, r2
 800a292:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 800a294:	683b      	ldr	r3, [r7, #0]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	697a      	ldr	r2, [r7, #20]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800a29e:	687b      	ldr	r3, [r7, #4]
 800a2a0:	681b      	ldr	r3, [r3, #0]
 800a2a2:	697a      	ldr	r2, [r7, #20]
 800a2a4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 800a2a6:	683b      	ldr	r3, [r7, #0]
 800a2a8:	685b      	ldr	r3, [r3, #4]
 800a2aa:	2b30      	cmp	r3, #48	; 0x30
 800a2ac:	d05c      	beq.n	800a368 <TIM_SlaveTimer_SetConfig+0x100>
 800a2ae:	2b30      	cmp	r3, #48	; 0x30
 800a2b0:	d806      	bhi.n	800a2c0 <TIM_SlaveTimer_SetConfig+0x58>
 800a2b2:	2b10      	cmp	r3, #16
 800a2b4:	d058      	beq.n	800a368 <TIM_SlaveTimer_SetConfig+0x100>
 800a2b6:	2b20      	cmp	r3, #32
 800a2b8:	d056      	beq.n	800a368 <TIM_SlaveTimer_SetConfig+0x100>
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	d054      	beq.n	800a368 <TIM_SlaveTimer_SetConfig+0x100>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 800a2be:	e054      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a2c0:	2b50      	cmp	r3, #80	; 0x50
 800a2c2:	d03d      	beq.n	800a340 <TIM_SlaveTimer_SetConfig+0xd8>
 800a2c4:	2b50      	cmp	r3, #80	; 0x50
 800a2c6:	d802      	bhi.n	800a2ce <TIM_SlaveTimer_SetConfig+0x66>
 800a2c8:	2b40      	cmp	r3, #64	; 0x40
 800a2ca:	d010      	beq.n	800a2ee <TIM_SlaveTimer_SetConfig+0x86>
      break;
 800a2cc:	e04d      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
  switch (sSlaveConfig->InputTrigger)
 800a2ce:	2b60      	cmp	r3, #96	; 0x60
 800a2d0:	d040      	beq.n	800a354 <TIM_SlaveTimer_SetConfig+0xec>
 800a2d2:	2b70      	cmp	r3, #112	; 0x70
 800a2d4:	d000      	beq.n	800a2d8 <TIM_SlaveTimer_SetConfig+0x70>
      break;
 800a2d6:	e048      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_ETR_SetConfig(htim->Instance,
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	6818      	ldr	r0, [r3, #0]
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	68d9      	ldr	r1, [r3, #12]
 800a2e0:	683b      	ldr	r3, [r7, #0]
 800a2e2:	689a      	ldr	r2, [r3, #8]
 800a2e4:	683b      	ldr	r3, [r7, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	f000 f8c0 	bl	800a46c <TIM_ETR_SetConfig>
      break;
 800a2ec:	e03d      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800a2ee:	683b      	ldr	r3, [r7, #0]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	2b05      	cmp	r3, #5
 800a2f4:	d101      	bne.n	800a2fa <TIM_SlaveTimer_SetConfig+0x92>
        return HAL_ERROR;
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e038      	b.n	800a36c <TIM_SlaveTimer_SetConfig+0x104>
      tmpccer = htim->Instance->CCER;
 800a2fa:	687b      	ldr	r3, [r7, #4]
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	6a1b      	ldr	r3, [r3, #32]
 800a300:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	6a1a      	ldr	r2, [r3, #32]
 800a308:	687b      	ldr	r3, [r7, #4]
 800a30a:	681b      	ldr	r3, [r3, #0]
 800a30c:	f022 0201 	bic.w	r2, r2, #1
 800a310:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800a312:	687b      	ldr	r3, [r7, #4]
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	699b      	ldr	r3, [r3, #24]
 800a318:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a31a:	68fb      	ldr	r3, [r7, #12]
 800a31c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a320:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	691b      	ldr	r3, [r3, #16]
 800a326:	011b      	lsls	r3, r3, #4
 800a328:	68fa      	ldr	r2, [r7, #12]
 800a32a:	4313      	orrs	r3, r2
 800a32c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 800a32e:	687b      	ldr	r3, [r7, #4]
 800a330:	681b      	ldr	r3, [r3, #0]
 800a332:	68fa      	ldr	r2, [r7, #12]
 800a334:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	693a      	ldr	r2, [r7, #16]
 800a33c:	621a      	str	r2, [r3, #32]
      break;
 800a33e:	e014      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	6818      	ldr	r0, [r3, #0]
 800a344:	683b      	ldr	r3, [r7, #0]
 800a346:	6899      	ldr	r1, [r3, #8]
 800a348:	683b      	ldr	r3, [r7, #0]
 800a34a:	691b      	ldr	r3, [r3, #16]
 800a34c:	461a      	mov	r2, r3
 800a34e:	f000 f813 	bl	800a378 <TIM_TI1_ConfigInputStage>
      break;
 800a352:	e00a      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	6818      	ldr	r0, [r3, #0]
 800a358:	683b      	ldr	r3, [r7, #0]
 800a35a:	6899      	ldr	r1, [r3, #8]
 800a35c:	683b      	ldr	r3, [r7, #0]
 800a35e:	691b      	ldr	r3, [r3, #16]
 800a360:	461a      	mov	r2, r3
 800a362:	f000 f838 	bl	800a3d6 <TIM_TI2_ConfigInputStage>
      break;
 800a366:	e000      	b.n	800a36a <TIM_SlaveTimer_SetConfig+0x102>
      break;
 800a368:	bf00      	nop
  }
  return HAL_OK;
 800a36a:	2300      	movs	r3, #0
}
 800a36c:	4618      	mov	r0, r3
 800a36e:	3718      	adds	r7, #24
 800a370:	46bd      	mov	sp, r7
 800a372:	bd80      	pop	{r7, pc}
 800a374:	fffefff8 	.word	0xfffefff8

0800a378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a378:	b480      	push	{r7}
 800a37a:	b087      	sub	sp, #28
 800a37c:	af00      	add	r7, sp, #0
 800a37e:	60f8      	str	r0, [r7, #12]
 800a380:	60b9      	str	r1, [r7, #8]
 800a382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	6a1b      	ldr	r3, [r3, #32]
 800a388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	6a1b      	ldr	r3, [r3, #32]
 800a38e:	f023 0201 	bic.w	r2, r3, #1
 800a392:	68fb      	ldr	r3, [r7, #12]
 800a394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	699b      	ldr	r3, [r3, #24]
 800a39a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a39c:	693b      	ldr	r3, [r7, #16]
 800a39e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a3a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a3a4:	687b      	ldr	r3, [r7, #4]
 800a3a6:	011b      	lsls	r3, r3, #4
 800a3a8:	693a      	ldr	r2, [r7, #16]
 800a3aa:	4313      	orrs	r3, r2
 800a3ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a3ae:	697b      	ldr	r3, [r7, #20]
 800a3b0:	f023 030a 	bic.w	r3, r3, #10
 800a3b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a3b6:	697a      	ldr	r2, [r7, #20]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	4313      	orrs	r3, r2
 800a3bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a3be:	68fb      	ldr	r3, [r7, #12]
 800a3c0:	693a      	ldr	r2, [r7, #16]
 800a3c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	697a      	ldr	r2, [r7, #20]
 800a3c8:	621a      	str	r2, [r3, #32]
}
 800a3ca:	bf00      	nop
 800a3cc:	371c      	adds	r7, #28
 800a3ce:	46bd      	mov	sp, r7
 800a3d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3d4:	4770      	bx	lr

0800a3d6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a3d6:	b480      	push	{r7}
 800a3d8:	b087      	sub	sp, #28
 800a3da:	af00      	add	r7, sp, #0
 800a3dc:	60f8      	str	r0, [r7, #12]
 800a3de:	60b9      	str	r1, [r7, #8]
 800a3e0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	6a1b      	ldr	r3, [r3, #32]
 800a3e6:	f023 0210 	bic.w	r2, r3, #16
 800a3ea:	68fb      	ldr	r3, [r7, #12]
 800a3ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	699b      	ldr	r3, [r3, #24]
 800a3f2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a3f4:	68fb      	ldr	r3, [r7, #12]
 800a3f6:	6a1b      	ldr	r3, [r3, #32]
 800a3f8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a3fa:	697b      	ldr	r3, [r7, #20]
 800a3fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a400:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a402:	687b      	ldr	r3, [r7, #4]
 800a404:	031b      	lsls	r3, r3, #12
 800a406:	697a      	ldr	r2, [r7, #20]
 800a408:	4313      	orrs	r3, r2
 800a40a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a40c:	693b      	ldr	r3, [r7, #16]
 800a40e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a412:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a414:	68bb      	ldr	r3, [r7, #8]
 800a416:	011b      	lsls	r3, r3, #4
 800a418:	693a      	ldr	r2, [r7, #16]
 800a41a:	4313      	orrs	r3, r2
 800a41c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	697a      	ldr	r2, [r7, #20]
 800a422:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	693a      	ldr	r2, [r7, #16]
 800a428:	621a      	str	r2, [r3, #32]
}
 800a42a:	bf00      	nop
 800a42c:	371c      	adds	r7, #28
 800a42e:	46bd      	mov	sp, r7
 800a430:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a434:	4770      	bx	lr

0800a436 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a436:	b480      	push	{r7}
 800a438:	b085      	sub	sp, #20
 800a43a:	af00      	add	r7, sp, #0
 800a43c:	6078      	str	r0, [r7, #4]
 800a43e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	689b      	ldr	r3, [r3, #8]
 800a444:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a44c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a44e:	683a      	ldr	r2, [r7, #0]
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	4313      	orrs	r3, r2
 800a454:	f043 0307 	orr.w	r3, r3, #7
 800a458:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	68fa      	ldr	r2, [r7, #12]
 800a45e:	609a      	str	r2, [r3, #8]
}
 800a460:	bf00      	nop
 800a462:	3714      	adds	r7, #20
 800a464:	46bd      	mov	sp, r7
 800a466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46a:	4770      	bx	lr

0800a46c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a46c:	b480      	push	{r7}
 800a46e:	b087      	sub	sp, #28
 800a470:	af00      	add	r7, sp, #0
 800a472:	60f8      	str	r0, [r7, #12]
 800a474:	60b9      	str	r1, [r7, #8]
 800a476:	607a      	str	r2, [r7, #4]
 800a478:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a47a:	68fb      	ldr	r3, [r7, #12]
 800a47c:	689b      	ldr	r3, [r3, #8]
 800a47e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a480:	697b      	ldr	r3, [r7, #20]
 800a482:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a486:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a488:	683b      	ldr	r3, [r7, #0]
 800a48a:	021a      	lsls	r2, r3, #8
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	431a      	orrs	r2, r3
 800a490:	68bb      	ldr	r3, [r7, #8]
 800a492:	4313      	orrs	r3, r2
 800a494:	697a      	ldr	r2, [r7, #20]
 800a496:	4313      	orrs	r3, r2
 800a498:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	697a      	ldr	r2, [r7, #20]
 800a49e:	609a      	str	r2, [r3, #8]
}
 800a4a0:	bf00      	nop
 800a4a2:	371c      	adds	r7, #28
 800a4a4:	46bd      	mov	sp, r7
 800a4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4aa:	4770      	bx	lr

0800a4ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b085      	sub	sp, #20
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
 800a4b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a4b6:	687b      	ldr	r3, [r7, #4]
 800a4b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a4bc:	2b01      	cmp	r3, #1
 800a4be:	d101      	bne.n	800a4c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a4c0:	2302      	movs	r3, #2
 800a4c2:	e06d      	b.n	800a5a0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2201      	movs	r2, #1
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	2202      	movs	r2, #2
 800a4d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	681b      	ldr	r3, [r3, #0]
 800a4d8:	685b      	ldr	r3, [r3, #4]
 800a4da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	689b      	ldr	r3, [r3, #8]
 800a4e2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a4e4:	687b      	ldr	r3, [r7, #4]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	4a30      	ldr	r2, [pc, #192]	; (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a4ea:	4293      	cmp	r3, r2
 800a4ec:	d004      	beq.n	800a4f8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	4a2f      	ldr	r2, [pc, #188]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a4f4:	4293      	cmp	r3, r2
 800a4f6:	d108      	bne.n	800a50a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a4fe:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a500:	683b      	ldr	r3, [r7, #0]
 800a502:	685b      	ldr	r3, [r3, #4]
 800a504:	68fa      	ldr	r2, [r7, #12]
 800a506:	4313      	orrs	r3, r2
 800a508:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a510:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	681b      	ldr	r3, [r3, #0]
 800a516:	68fa      	ldr	r2, [r7, #12]
 800a518:	4313      	orrs	r3, r2
 800a51a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	68fa      	ldr	r2, [r7, #12]
 800a522:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	4a20      	ldr	r2, [pc, #128]	; (800a5ac <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	d022      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	681b      	ldr	r3, [r3, #0]
 800a532:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a536:	d01d      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	4a1d      	ldr	r2, [pc, #116]	; (800a5b4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a53e:	4293      	cmp	r3, r2
 800a540:	d018      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a542:	687b      	ldr	r3, [r7, #4]
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	4a1c      	ldr	r2, [pc, #112]	; (800a5b8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a548:	4293      	cmp	r3, r2
 800a54a:	d013      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	4a1a      	ldr	r2, [pc, #104]	; (800a5bc <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a552:	4293      	cmp	r3, r2
 800a554:	d00e      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a556:	687b      	ldr	r3, [r7, #4]
 800a558:	681b      	ldr	r3, [r3, #0]
 800a55a:	4a15      	ldr	r2, [pc, #84]	; (800a5b0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d009      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	4a16      	ldr	r2, [pc, #88]	; (800a5c0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a566:	4293      	cmp	r3, r2
 800a568:	d004      	beq.n	800a574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	4a15      	ldr	r2, [pc, #84]	; (800a5c4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a570:	4293      	cmp	r3, r2
 800a572:	d10c      	bne.n	800a58e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a574:	68bb      	ldr	r3, [r7, #8]
 800a576:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a57a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a57c:	683b      	ldr	r3, [r7, #0]
 800a57e:	689b      	ldr	r3, [r3, #8]
 800a580:	68ba      	ldr	r2, [r7, #8]
 800a582:	4313      	orrs	r3, r2
 800a584:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	68ba      	ldr	r2, [r7, #8]
 800a58c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	2200      	movs	r2, #0
 800a59a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a59e:	2300      	movs	r3, #0
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3714      	adds	r7, #20
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5aa:	4770      	bx	lr
 800a5ac:	40010000 	.word	0x40010000
 800a5b0:	40010400 	.word	0x40010400
 800a5b4:	40000400 	.word	0x40000400
 800a5b8:	40000800 	.word	0x40000800
 800a5bc:	40000c00 	.word	0x40000c00
 800a5c0:	40014000 	.word	0x40014000
 800a5c4:	40001800 	.word	0x40001800

0800a5c8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a5c8:	b480      	push	{r7}
 800a5ca:	b085      	sub	sp, #20
 800a5cc:	af00      	add	r7, sp, #0
 800a5ce:	6078      	str	r0, [r7, #4]
 800a5d0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a5d2:	2300      	movs	r3, #0
 800a5d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a5dc:	2b01      	cmp	r3, #1
 800a5de:	d101      	bne.n	800a5e4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a5e0:	2302      	movs	r3, #2
 800a5e2:	e065      	b.n	800a6b0 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a5e4:	687b      	ldr	r3, [r7, #4]
 800a5e6:	2201      	movs	r2, #1
 800a5e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	689b      	ldr	r3, [r3, #8]
 800a604:	4313      	orrs	r3, r2
 800a606:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a60e:	683b      	ldr	r3, [r7, #0]
 800a610:	685b      	ldr	r3, [r3, #4]
 800a612:	4313      	orrs	r3, r2
 800a614:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a61c:	683b      	ldr	r3, [r7, #0]
 800a61e:	681b      	ldr	r3, [r3, #0]
 800a620:	4313      	orrs	r3, r2
 800a622:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a624:	68fb      	ldr	r3, [r7, #12]
 800a626:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a62a:	683b      	ldr	r3, [r7, #0]
 800a62c:	691b      	ldr	r3, [r3, #16]
 800a62e:	4313      	orrs	r3, r2
 800a630:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a638:	683b      	ldr	r3, [r7, #0]
 800a63a:	695b      	ldr	r3, [r3, #20]
 800a63c:	4313      	orrs	r3, r2
 800a63e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a646:	683b      	ldr	r3, [r7, #0]
 800a648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64a:	4313      	orrs	r3, r2
 800a64c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a654:	683b      	ldr	r3, [r7, #0]
 800a656:	699b      	ldr	r3, [r3, #24]
 800a658:	041b      	lsls	r3, r3, #16
 800a65a:	4313      	orrs	r3, r2
 800a65c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	4a16      	ldr	r2, [pc, #88]	; (800a6bc <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a664:	4293      	cmp	r3, r2
 800a666:	d004      	beq.n	800a672 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	681b      	ldr	r3, [r3, #0]
 800a66c:	4a14      	ldr	r2, [pc, #80]	; (800a6c0 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a66e:	4293      	cmp	r3, r2
 800a670:	d115      	bne.n	800a69e <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a672:	68fb      	ldr	r3, [r7, #12]
 800a674:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a678:	683b      	ldr	r3, [r7, #0]
 800a67a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a67c:	051b      	lsls	r3, r3, #20
 800a67e:	4313      	orrs	r3, r2
 800a680:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a682:	68fb      	ldr	r3, [r7, #12]
 800a684:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a688:	683b      	ldr	r3, [r7, #0]
 800a68a:	69db      	ldr	r3, [r3, #28]
 800a68c:	4313      	orrs	r3, r2
 800a68e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a696:	683b      	ldr	r3, [r7, #0]
 800a698:	6a1b      	ldr	r3, [r3, #32]
 800a69a:	4313      	orrs	r3, r2
 800a69c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	68fa      	ldr	r2, [r7, #12]
 800a6a4:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	2200      	movs	r2, #0
 800a6aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a6ae:	2300      	movs	r3, #0
}
 800a6b0:	4618      	mov	r0, r3
 800a6b2:	3714      	adds	r7, #20
 800a6b4:	46bd      	mov	sp, r7
 800a6b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ba:	4770      	bx	lr
 800a6bc:	40010000 	.word	0x40010000
 800a6c0:	40010400 	.word	0x40010400

0800a6c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a6c4:	b480      	push	{r7}
 800a6c6:	b083      	sub	sp, #12
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a6cc:	bf00      	nop
 800a6ce:	370c      	adds	r7, #12
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d6:	4770      	bx	lr

0800a6d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a6d8:	b480      	push	{r7}
 800a6da:	b083      	sub	sp, #12
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a6e0:	bf00      	nop
 800a6e2:	370c      	adds	r7, #12
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ea:	4770      	bx	lr

0800a6ec <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a6ec:	b480      	push	{r7}
 800a6ee:	b083      	sub	sp, #12
 800a6f0:	af00      	add	r7, sp, #0
 800a6f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a6f4:	bf00      	nop
 800a6f6:	370c      	adds	r7, #12
 800a6f8:	46bd      	mov	sp, r7
 800a6fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6fe:	4770      	bx	lr

0800a700 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a700:	b580      	push	{r7, lr}
 800a702:	b082      	sub	sp, #8
 800a704:	af00      	add	r7, sp, #0
 800a706:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d101      	bne.n	800a712 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a70e:	2301      	movs	r3, #1
 800a710:	e040      	b.n	800a794 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a716:	2b00      	cmp	r3, #0
 800a718:	d106      	bne.n	800a728 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	2200      	movs	r2, #0
 800a71e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a722:	6878      	ldr	r0, [r7, #4]
 800a724:	f7f9 ff6a 	bl	80045fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	2224      	movs	r2, #36	; 0x24
 800a72c:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	681a      	ldr	r2, [r3, #0]
 800a734:	687b      	ldr	r3, [r7, #4]
 800a736:	681b      	ldr	r3, [r3, #0]
 800a738:	f022 0201 	bic.w	r2, r2, #1
 800a73c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a73e:	6878      	ldr	r0, [r7, #4]
 800a740:	f000 fa14 	bl	800ab6c <UART_SetConfig>
 800a744:	4603      	mov	r3, r0
 800a746:	2b01      	cmp	r3, #1
 800a748:	d101      	bne.n	800a74e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a74a:	2301      	movs	r3, #1
 800a74c:	e022      	b.n	800a794 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a752:	2b00      	cmp	r3, #0
 800a754:	d002      	beq.n	800a75c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a756:	6878      	ldr	r0, [r7, #4]
 800a758:	f000 fcb2 	bl	800b0c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a76a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	689a      	ldr	r2, [r3, #8]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	681b      	ldr	r3, [r3, #0]
 800a776:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a77a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a77c:	687b      	ldr	r3, [r7, #4]
 800a77e:	681b      	ldr	r3, [r3, #0]
 800a780:	681a      	ldr	r2, [r3, #0]
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	681b      	ldr	r3, [r3, #0]
 800a786:	f042 0201 	orr.w	r2, r2, #1
 800a78a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a78c:	6878      	ldr	r0, [r7, #4]
 800a78e:	f000 fd39 	bl	800b204 <UART_CheckIdleState>
 800a792:	4603      	mov	r3, r0
}
 800a794:	4618      	mov	r0, r3
 800a796:	3708      	adds	r7, #8
 800a798:	46bd      	mov	sp, r7
 800a79a:	bd80      	pop	{r7, pc}

0800a79c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a79c:	b480      	push	{r7}
 800a79e:	b085      	sub	sp, #20
 800a7a0:	af00      	add	r7, sp, #0
 800a7a2:	60f8      	str	r0, [r7, #12]
 800a7a4:	60b9      	str	r1, [r7, #8]
 800a7a6:	4613      	mov	r3, r2
 800a7a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a7aa:	68fb      	ldr	r3, [r7, #12]
 800a7ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a7ae:	2b20      	cmp	r3, #32
 800a7b0:	f040 808a 	bne.w	800a8c8 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a7b4:	68bb      	ldr	r3, [r7, #8]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d002      	beq.n	800a7c0 <HAL_UART_Receive_IT+0x24>
 800a7ba:	88fb      	ldrh	r3, [r7, #6]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d101      	bne.n	800a7c4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	e082      	b.n	800a8ca <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a7c4:	68fb      	ldr	r3, [r7, #12]
 800a7c6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a7ca:	2b01      	cmp	r3, #1
 800a7cc:	d101      	bne.n	800a7d2 <HAL_UART_Receive_IT+0x36>
 800a7ce:	2302      	movs	r3, #2
 800a7d0:	e07b      	b.n	800a8ca <HAL_UART_Receive_IT+0x12e>
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	2201      	movs	r2, #1
 800a7d6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	68ba      	ldr	r2, [r7, #8]
 800a7de:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a7e0:	68fb      	ldr	r3, [r7, #12]
 800a7e2:	88fa      	ldrh	r2, [r7, #6]
 800a7e4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a7e8:	68fb      	ldr	r3, [r7, #12]
 800a7ea:	88fa      	ldrh	r2, [r7, #6]
 800a7ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a7f0:	68fb      	ldr	r3, [r7, #12]
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a7f6:	68fb      	ldr	r3, [r7, #12]
 800a7f8:	689b      	ldr	r3, [r3, #8]
 800a7fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a7fe:	d10e      	bne.n	800a81e <HAL_UART_Receive_IT+0x82>
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	691b      	ldr	r3, [r3, #16]
 800a804:	2b00      	cmp	r3, #0
 800a806:	d105      	bne.n	800a814 <HAL_UART_Receive_IT+0x78>
 800a808:	68fb      	ldr	r3, [r7, #12]
 800a80a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a80e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a812:	e02d      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a814:	68fb      	ldr	r3, [r7, #12]
 800a816:	22ff      	movs	r2, #255	; 0xff
 800a818:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a81c:	e028      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a81e:	68fb      	ldr	r3, [r7, #12]
 800a820:	689b      	ldr	r3, [r3, #8]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d10d      	bne.n	800a842 <HAL_UART_Receive_IT+0xa6>
 800a826:	68fb      	ldr	r3, [r7, #12]
 800a828:	691b      	ldr	r3, [r3, #16]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d104      	bne.n	800a838 <HAL_UART_Receive_IT+0x9c>
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	22ff      	movs	r2, #255	; 0xff
 800a832:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a836:	e01b      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a838:	68fb      	ldr	r3, [r7, #12]
 800a83a:	227f      	movs	r2, #127	; 0x7f
 800a83c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a840:	e016      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a842:	68fb      	ldr	r3, [r7, #12]
 800a844:	689b      	ldr	r3, [r3, #8]
 800a846:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a84a:	d10d      	bne.n	800a868 <HAL_UART_Receive_IT+0xcc>
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	691b      	ldr	r3, [r3, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d104      	bne.n	800a85e <HAL_UART_Receive_IT+0xc2>
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	227f      	movs	r2, #127	; 0x7f
 800a858:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a85c:	e008      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	223f      	movs	r2, #63	; 0x3f
 800a862:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a866:	e003      	b.n	800a870 <HAL_UART_Receive_IT+0xd4>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	2200      	movs	r2, #0
 800a874:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	2222      	movs	r2, #34	; 0x22
 800a87a:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a87c:	68fb      	ldr	r3, [r7, #12]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	689a      	ldr	r2, [r3, #8]
 800a882:	68fb      	ldr	r3, [r7, #12]
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	f042 0201 	orr.w	r2, r2, #1
 800a88a:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a894:	d107      	bne.n	800a8a6 <HAL_UART_Receive_IT+0x10a>
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	691b      	ldr	r3, [r3, #16]
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d103      	bne.n	800a8a6 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a89e:	68fb      	ldr	r3, [r7, #12]
 800a8a0:	4a0d      	ldr	r2, [pc, #52]	; (800a8d8 <HAL_UART_Receive_IT+0x13c>)
 800a8a2:	661a      	str	r2, [r3, #96]	; 0x60
 800a8a4:	e002      	b.n	800a8ac <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a8a6:	68fb      	ldr	r3, [r7, #12]
 800a8a8:	4a0c      	ldr	r2, [pc, #48]	; (800a8dc <HAL_UART_Receive_IT+0x140>)
 800a8aa:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a8ac:	68fb      	ldr	r3, [r7, #12]
 800a8ae:	2200      	movs	r2, #0
 800a8b0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	681a      	ldr	r2, [r3, #0]
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a8c2:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	e000      	b.n	800a8ca <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a8c8:	2302      	movs	r3, #2
  }
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3714      	adds	r7, #20
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8d4:	4770      	bx	lr
 800a8d6:	bf00      	nop
 800a8d8:	0800b49d 	.word	0x0800b49d
 800a8dc:	0800b3f7 	.word	0x0800b3f7

0800a8e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b088      	sub	sp, #32
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	69db      	ldr	r3, [r3, #28]
 800a8ee:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	681b      	ldr	r3, [r3, #0]
 800a8f4:	681b      	ldr	r3, [r3, #0]
 800a8f6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a8f8:	687b      	ldr	r3, [r7, #4]
 800a8fa:	681b      	ldr	r3, [r3, #0]
 800a8fc:	689b      	ldr	r3, [r3, #8]
 800a8fe:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a900:	69fa      	ldr	r2, [r7, #28]
 800a902:	f640 030f 	movw	r3, #2063	; 0x80f
 800a906:	4013      	ands	r3, r2
 800a908:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a90a:	693b      	ldr	r3, [r7, #16]
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d113      	bne.n	800a938 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a910:	69fb      	ldr	r3, [r7, #28]
 800a912:	f003 0320 	and.w	r3, r3, #32
 800a916:	2b00      	cmp	r3, #0
 800a918:	d00e      	beq.n	800a938 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	f003 0320 	and.w	r3, r3, #32
 800a920:	2b00      	cmp	r3, #0
 800a922:	d009      	beq.n	800a938 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a928:	2b00      	cmp	r3, #0
 800a92a:	f000 8100 	beq.w	800ab2e <HAL_UART_IRQHandler+0x24e>
      {
        huart->RxISR(huart);
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a932:	6878      	ldr	r0, [r7, #4]
 800a934:	4798      	blx	r3
      }
      return;
 800a936:	e0fa      	b.n	800ab2e <HAL_UART_IRQHandler+0x24e>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a938:	693b      	ldr	r3, [r7, #16]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	f000 80d5 	beq.w	800aaea <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a940:	697b      	ldr	r3, [r7, #20]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	2b00      	cmp	r3, #0
 800a948:	d105      	bne.n	800a956 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a94a:	69bb      	ldr	r3, [r7, #24]
 800a94c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a950:	2b00      	cmp	r3, #0
 800a952:	f000 80ca 	beq.w	800aaea <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a956:	69fb      	ldr	r3, [r7, #28]
 800a958:	f003 0301 	and.w	r3, r3, #1
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	d00e      	beq.n	800a97e <HAL_UART_IRQHandler+0x9e>
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a966:	2b00      	cmp	r3, #0
 800a968:	d009      	beq.n	800a97e <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	2201      	movs	r2, #1
 800a970:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a976:	f043 0201 	orr.w	r2, r3, #1
 800a97a:	687b      	ldr	r3, [r7, #4]
 800a97c:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a97e:	69fb      	ldr	r3, [r7, #28]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d00e      	beq.n	800a9a6 <HAL_UART_IRQHandler+0xc6>
 800a988:	697b      	ldr	r3, [r7, #20]
 800a98a:	f003 0301 	and.w	r3, r3, #1
 800a98e:	2b00      	cmp	r3, #0
 800a990:	d009      	beq.n	800a9a6 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a992:	687b      	ldr	r3, [r7, #4]
 800a994:	681b      	ldr	r3, [r3, #0]
 800a996:	2202      	movs	r2, #2
 800a998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a99e:	f043 0204 	orr.w	r2, r3, #4
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	f003 0304 	and.w	r3, r3, #4
 800a9ac:	2b00      	cmp	r3, #0
 800a9ae:	d00e      	beq.n	800a9ce <HAL_UART_IRQHandler+0xee>
 800a9b0:	697b      	ldr	r3, [r7, #20]
 800a9b2:	f003 0301 	and.w	r3, r3, #1
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d009      	beq.n	800a9ce <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a9ba:	687b      	ldr	r3, [r7, #4]
 800a9bc:	681b      	ldr	r3, [r3, #0]
 800a9be:	2204      	movs	r2, #4
 800a9c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9c6:	f043 0202 	orr.w	r2, r3, #2
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a9ce:	69fb      	ldr	r3, [r7, #28]
 800a9d0:	f003 0308 	and.w	r3, r3, #8
 800a9d4:	2b00      	cmp	r3, #0
 800a9d6:	d013      	beq.n	800aa00 <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	f003 0320 	and.w	r3, r3, #32
 800a9de:	2b00      	cmp	r3, #0
 800a9e0:	d104      	bne.n	800a9ec <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a9e2:	697b      	ldr	r3, [r7, #20]
 800a9e4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a9e8:	2b00      	cmp	r3, #0
 800a9ea:	d009      	beq.n	800aa00 <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a9ec:	687b      	ldr	r3, [r7, #4]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	2208      	movs	r2, #8
 800a9f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a9f8:	f043 0208 	orr.w	r2, r3, #8
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800aa00:	69fb      	ldr	r3, [r7, #28]
 800aa02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d00f      	beq.n	800aa2a <HAL_UART_IRQHandler+0x14a>
 800aa0a:	69bb      	ldr	r3, [r7, #24]
 800aa0c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800aa1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa22:	f043 0220 	orr.w	r2, r3, #32
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa2e:	2b00      	cmp	r3, #0
 800aa30:	d07f      	beq.n	800ab32 <HAL_UART_IRQHandler+0x252>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800aa32:	69fb      	ldr	r3, [r7, #28]
 800aa34:	f003 0320 	and.w	r3, r3, #32
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	d00c      	beq.n	800aa56 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800aa3c:	69bb      	ldr	r3, [r7, #24]
 800aa3e:	f003 0320 	and.w	r3, r3, #32
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d007      	beq.n	800aa56 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa4a:	2b00      	cmp	r3, #0
 800aa4c:	d003      	beq.n	800aa56 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800aa4e:	687b      	ldr	r3, [r7, #4]
 800aa50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa52:	6878      	ldr	r0, [r7, #4]
 800aa54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800aa5a:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	689b      	ldr	r3, [r3, #8]
 800aa62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa66:	2b40      	cmp	r3, #64	; 0x40
 800aa68:	d004      	beq.n	800aa74 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800aa6a:	68fb      	ldr	r3, [r7, #12]
 800aa6c:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d031      	beq.n	800aad8 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800aa74:	6878      	ldr	r0, [r7, #4]
 800aa76:	f000 fc6f 	bl	800b358 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	689b      	ldr	r3, [r3, #8]
 800aa80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa84:	2b40      	cmp	r3, #64	; 0x40
 800aa86:	d123      	bne.n	800aad0 <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	689a      	ldr	r2, [r3, #8]
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa96:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aa9c:	2b00      	cmp	r3, #0
 800aa9e:	d013      	beq.n	800aac8 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaa4:	4a26      	ldr	r2, [pc, #152]	; (800ab40 <HAL_UART_IRQHandler+0x260>)
 800aaa6:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aaac:	4618      	mov	r0, r3
 800aaae:	f7fa fef7 	bl	80058a0 <HAL_DMA_Abort_IT>
 800aab2:	4603      	mov	r3, r0
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d016      	beq.n	800aae6 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800aabc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aabe:	687a      	ldr	r2, [r7, #4]
 800aac0:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800aac2:	4610      	mov	r0, r2
 800aac4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aac6:	e00e      	b.n	800aae6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800aac8:	6878      	ldr	r0, [r7, #4]
 800aaca:	f000 f845 	bl	800ab58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aace:	e00a      	b.n	800aae6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800aad0:	6878      	ldr	r0, [r7, #4]
 800aad2:	f000 f841 	bl	800ab58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aad6:	e006      	b.n	800aae6 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800aad8:	6878      	ldr	r0, [r7, #4]
 800aada:	f000 f83d 	bl	800ab58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2200      	movs	r2, #0
 800aae2:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800aae4:	e025      	b.n	800ab32 <HAL_UART_IRQHandler+0x252>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800aae6:	bf00      	nop
    return;
 800aae8:	e023      	b.n	800ab32 <HAL_UART_IRQHandler+0x252>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800aaea:	69fb      	ldr	r3, [r7, #28]
 800aaec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d00d      	beq.n	800ab10 <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800aaf4:	69bb      	ldr	r3, [r7, #24]
 800aaf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d008      	beq.n	800ab10 <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800aafe:	687b      	ldr	r3, [r7, #4]
 800ab00:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d017      	beq.n	800ab36 <HAL_UART_IRQHandler+0x256>
    {
      huart->TxISR(huart);
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ab0a:	6878      	ldr	r0, [r7, #4]
 800ab0c:	4798      	blx	r3
    }
    return;
 800ab0e:	e012      	b.n	800ab36 <HAL_UART_IRQHandler+0x256>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800ab10:	69fb      	ldr	r3, [r7, #28]
 800ab12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab16:	2b00      	cmp	r3, #0
 800ab18:	d00e      	beq.n	800ab38 <HAL_UART_IRQHandler+0x258>
 800ab1a:	69bb      	ldr	r3, [r7, #24]
 800ab1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ab20:	2b00      	cmp	r3, #0
 800ab22:	d009      	beq.n	800ab38 <HAL_UART_IRQHandler+0x258>
  {
    UART_EndTransmit_IT(huart);
 800ab24:	6878      	ldr	r0, [r7, #4]
 800ab26:	f000 fc4d 	bl	800b3c4 <UART_EndTransmit_IT>
    return;
 800ab2a:	bf00      	nop
 800ab2c:	e004      	b.n	800ab38 <HAL_UART_IRQHandler+0x258>
      return;
 800ab2e:	bf00      	nop
 800ab30:	e002      	b.n	800ab38 <HAL_UART_IRQHandler+0x258>
    return;
 800ab32:	bf00      	nop
 800ab34:	e000      	b.n	800ab38 <HAL_UART_IRQHandler+0x258>
    return;
 800ab36:	bf00      	nop
  }

}
 800ab38:	3720      	adds	r7, #32
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	bd80      	pop	{r7, pc}
 800ab3e:	bf00      	nop
 800ab40:	0800b399 	.word	0x0800b399

0800ab44 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800ab44:	b480      	push	{r7}
 800ab46:	b083      	sub	sp, #12
 800ab48:	af00      	add	r7, sp, #0
 800ab4a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800ab4c:	bf00      	nop
 800ab4e:	370c      	adds	r7, #12
 800ab50:	46bd      	mov	sp, r7
 800ab52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab56:	4770      	bx	lr

0800ab58 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800ab58:	b480      	push	{r7}
 800ab5a:	b083      	sub	sp, #12
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ab60:	bf00      	nop
 800ab62:	370c      	adds	r7, #12
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr

0800ab6c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ab6c:	b580      	push	{r7, lr}
 800ab6e:	b088      	sub	sp, #32
 800ab70:	af00      	add	r7, sp, #0
 800ab72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800ab74:	2300      	movs	r3, #0
 800ab76:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800ab78:	2300      	movs	r3, #0
 800ab7a:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	689a      	ldr	r2, [r3, #8]
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	691b      	ldr	r3, [r3, #16]
 800ab84:	431a      	orrs	r2, r3
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	695b      	ldr	r3, [r3, #20]
 800ab8a:	431a      	orrs	r2, r3
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	69db      	ldr	r3, [r3, #28]
 800ab90:	4313      	orrs	r3, r2
 800ab92:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	681b      	ldr	r3, [r3, #0]
 800ab98:	681a      	ldr	r2, [r3, #0]
 800ab9a:	4bb1      	ldr	r3, [pc, #708]	; (800ae60 <UART_SetConfig+0x2f4>)
 800ab9c:	4013      	ands	r3, r2
 800ab9e:	687a      	ldr	r2, [r7, #4]
 800aba0:	6812      	ldr	r2, [r2, #0]
 800aba2:	6939      	ldr	r1, [r7, #16]
 800aba4:	430b      	orrs	r3, r1
 800aba6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	685b      	ldr	r3, [r3, #4]
 800abae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	68da      	ldr	r2, [r3, #12]
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	430a      	orrs	r2, r1
 800abbc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	6a1b      	ldr	r3, [r3, #32]
 800abc8:	693a      	ldr	r2, [r7, #16]
 800abca:	4313      	orrs	r3, r2
 800abcc:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681b      	ldr	r3, [r3, #0]
 800abdc:	693a      	ldr	r2, [r7, #16]
 800abde:	430a      	orrs	r2, r1
 800abe0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a9f      	ldr	r2, [pc, #636]	; (800ae64 <UART_SetConfig+0x2f8>)
 800abe8:	4293      	cmp	r3, r2
 800abea:	d121      	bne.n	800ac30 <UART_SetConfig+0xc4>
 800abec:	4b9e      	ldr	r3, [pc, #632]	; (800ae68 <UART_SetConfig+0x2fc>)
 800abee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abf2:	f003 0303 	and.w	r3, r3, #3
 800abf6:	2b03      	cmp	r3, #3
 800abf8:	d816      	bhi.n	800ac28 <UART_SetConfig+0xbc>
 800abfa:	a201      	add	r2, pc, #4	; (adr r2, 800ac00 <UART_SetConfig+0x94>)
 800abfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac00:	0800ac11 	.word	0x0800ac11
 800ac04:	0800ac1d 	.word	0x0800ac1d
 800ac08:	0800ac17 	.word	0x0800ac17
 800ac0c:	0800ac23 	.word	0x0800ac23
 800ac10:	2301      	movs	r3, #1
 800ac12:	77fb      	strb	r3, [r7, #31]
 800ac14:	e151      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac16:	2302      	movs	r3, #2
 800ac18:	77fb      	strb	r3, [r7, #31]
 800ac1a:	e14e      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac1c:	2304      	movs	r3, #4
 800ac1e:	77fb      	strb	r3, [r7, #31]
 800ac20:	e14b      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac22:	2308      	movs	r3, #8
 800ac24:	77fb      	strb	r3, [r7, #31]
 800ac26:	e148      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac28:	2310      	movs	r3, #16
 800ac2a:	77fb      	strb	r3, [r7, #31]
 800ac2c:	bf00      	nop
 800ac2e:	e144      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a8d      	ldr	r2, [pc, #564]	; (800ae6c <UART_SetConfig+0x300>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d134      	bne.n	800aca4 <UART_SetConfig+0x138>
 800ac3a:	4b8b      	ldr	r3, [pc, #556]	; (800ae68 <UART_SetConfig+0x2fc>)
 800ac3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ac40:	f003 030c 	and.w	r3, r3, #12
 800ac44:	2b0c      	cmp	r3, #12
 800ac46:	d829      	bhi.n	800ac9c <UART_SetConfig+0x130>
 800ac48:	a201      	add	r2, pc, #4	; (adr r2, 800ac50 <UART_SetConfig+0xe4>)
 800ac4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac4e:	bf00      	nop
 800ac50:	0800ac85 	.word	0x0800ac85
 800ac54:	0800ac9d 	.word	0x0800ac9d
 800ac58:	0800ac9d 	.word	0x0800ac9d
 800ac5c:	0800ac9d 	.word	0x0800ac9d
 800ac60:	0800ac91 	.word	0x0800ac91
 800ac64:	0800ac9d 	.word	0x0800ac9d
 800ac68:	0800ac9d 	.word	0x0800ac9d
 800ac6c:	0800ac9d 	.word	0x0800ac9d
 800ac70:	0800ac8b 	.word	0x0800ac8b
 800ac74:	0800ac9d 	.word	0x0800ac9d
 800ac78:	0800ac9d 	.word	0x0800ac9d
 800ac7c:	0800ac9d 	.word	0x0800ac9d
 800ac80:	0800ac97 	.word	0x0800ac97
 800ac84:	2300      	movs	r3, #0
 800ac86:	77fb      	strb	r3, [r7, #31]
 800ac88:	e117      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac8a:	2302      	movs	r3, #2
 800ac8c:	77fb      	strb	r3, [r7, #31]
 800ac8e:	e114      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac90:	2304      	movs	r3, #4
 800ac92:	77fb      	strb	r3, [r7, #31]
 800ac94:	e111      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac96:	2308      	movs	r3, #8
 800ac98:	77fb      	strb	r3, [r7, #31]
 800ac9a:	e10e      	b.n	800aeba <UART_SetConfig+0x34e>
 800ac9c:	2310      	movs	r3, #16
 800ac9e:	77fb      	strb	r3, [r7, #31]
 800aca0:	bf00      	nop
 800aca2:	e10a      	b.n	800aeba <UART_SetConfig+0x34e>
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	4a71      	ldr	r2, [pc, #452]	; (800ae70 <UART_SetConfig+0x304>)
 800acaa:	4293      	cmp	r3, r2
 800acac:	d120      	bne.n	800acf0 <UART_SetConfig+0x184>
 800acae:	4b6e      	ldr	r3, [pc, #440]	; (800ae68 <UART_SetConfig+0x2fc>)
 800acb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800acb4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800acb8:	2b10      	cmp	r3, #16
 800acba:	d00f      	beq.n	800acdc <UART_SetConfig+0x170>
 800acbc:	2b10      	cmp	r3, #16
 800acbe:	d802      	bhi.n	800acc6 <UART_SetConfig+0x15a>
 800acc0:	2b00      	cmp	r3, #0
 800acc2:	d005      	beq.n	800acd0 <UART_SetConfig+0x164>
 800acc4:	e010      	b.n	800ace8 <UART_SetConfig+0x17c>
 800acc6:	2b20      	cmp	r3, #32
 800acc8:	d005      	beq.n	800acd6 <UART_SetConfig+0x16a>
 800acca:	2b30      	cmp	r3, #48	; 0x30
 800accc:	d009      	beq.n	800ace2 <UART_SetConfig+0x176>
 800acce:	e00b      	b.n	800ace8 <UART_SetConfig+0x17c>
 800acd0:	2300      	movs	r3, #0
 800acd2:	77fb      	strb	r3, [r7, #31]
 800acd4:	e0f1      	b.n	800aeba <UART_SetConfig+0x34e>
 800acd6:	2302      	movs	r3, #2
 800acd8:	77fb      	strb	r3, [r7, #31]
 800acda:	e0ee      	b.n	800aeba <UART_SetConfig+0x34e>
 800acdc:	2304      	movs	r3, #4
 800acde:	77fb      	strb	r3, [r7, #31]
 800ace0:	e0eb      	b.n	800aeba <UART_SetConfig+0x34e>
 800ace2:	2308      	movs	r3, #8
 800ace4:	77fb      	strb	r3, [r7, #31]
 800ace6:	e0e8      	b.n	800aeba <UART_SetConfig+0x34e>
 800ace8:	2310      	movs	r3, #16
 800acea:	77fb      	strb	r3, [r7, #31]
 800acec:	bf00      	nop
 800acee:	e0e4      	b.n	800aeba <UART_SetConfig+0x34e>
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	681b      	ldr	r3, [r3, #0]
 800acf4:	4a5f      	ldr	r2, [pc, #380]	; (800ae74 <UART_SetConfig+0x308>)
 800acf6:	4293      	cmp	r3, r2
 800acf8:	d120      	bne.n	800ad3c <UART_SetConfig+0x1d0>
 800acfa:	4b5b      	ldr	r3, [pc, #364]	; (800ae68 <UART_SetConfig+0x2fc>)
 800acfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad00:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800ad04:	2b40      	cmp	r3, #64	; 0x40
 800ad06:	d00f      	beq.n	800ad28 <UART_SetConfig+0x1bc>
 800ad08:	2b40      	cmp	r3, #64	; 0x40
 800ad0a:	d802      	bhi.n	800ad12 <UART_SetConfig+0x1a6>
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d005      	beq.n	800ad1c <UART_SetConfig+0x1b0>
 800ad10:	e010      	b.n	800ad34 <UART_SetConfig+0x1c8>
 800ad12:	2b80      	cmp	r3, #128	; 0x80
 800ad14:	d005      	beq.n	800ad22 <UART_SetConfig+0x1b6>
 800ad16:	2bc0      	cmp	r3, #192	; 0xc0
 800ad18:	d009      	beq.n	800ad2e <UART_SetConfig+0x1c2>
 800ad1a:	e00b      	b.n	800ad34 <UART_SetConfig+0x1c8>
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	77fb      	strb	r3, [r7, #31]
 800ad20:	e0cb      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad22:	2302      	movs	r3, #2
 800ad24:	77fb      	strb	r3, [r7, #31]
 800ad26:	e0c8      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad28:	2304      	movs	r3, #4
 800ad2a:	77fb      	strb	r3, [r7, #31]
 800ad2c:	e0c5      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad2e:	2308      	movs	r3, #8
 800ad30:	77fb      	strb	r3, [r7, #31]
 800ad32:	e0c2      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad34:	2310      	movs	r3, #16
 800ad36:	77fb      	strb	r3, [r7, #31]
 800ad38:	bf00      	nop
 800ad3a:	e0be      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	4a4d      	ldr	r2, [pc, #308]	; (800ae78 <UART_SetConfig+0x30c>)
 800ad42:	4293      	cmp	r3, r2
 800ad44:	d124      	bne.n	800ad90 <UART_SetConfig+0x224>
 800ad46:	4b48      	ldr	r3, [pc, #288]	; (800ae68 <UART_SetConfig+0x2fc>)
 800ad48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ad4c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ad50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad54:	d012      	beq.n	800ad7c <UART_SetConfig+0x210>
 800ad56:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ad5a:	d802      	bhi.n	800ad62 <UART_SetConfig+0x1f6>
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d007      	beq.n	800ad70 <UART_SetConfig+0x204>
 800ad60:	e012      	b.n	800ad88 <UART_SetConfig+0x21c>
 800ad62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ad66:	d006      	beq.n	800ad76 <UART_SetConfig+0x20a>
 800ad68:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800ad6c:	d009      	beq.n	800ad82 <UART_SetConfig+0x216>
 800ad6e:	e00b      	b.n	800ad88 <UART_SetConfig+0x21c>
 800ad70:	2300      	movs	r3, #0
 800ad72:	77fb      	strb	r3, [r7, #31]
 800ad74:	e0a1      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad76:	2302      	movs	r3, #2
 800ad78:	77fb      	strb	r3, [r7, #31]
 800ad7a:	e09e      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad7c:	2304      	movs	r3, #4
 800ad7e:	77fb      	strb	r3, [r7, #31]
 800ad80:	e09b      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad82:	2308      	movs	r3, #8
 800ad84:	77fb      	strb	r3, [r7, #31]
 800ad86:	e098      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad88:	2310      	movs	r3, #16
 800ad8a:	77fb      	strb	r3, [r7, #31]
 800ad8c:	bf00      	nop
 800ad8e:	e094      	b.n	800aeba <UART_SetConfig+0x34e>
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	4a39      	ldr	r2, [pc, #228]	; (800ae7c <UART_SetConfig+0x310>)
 800ad96:	4293      	cmp	r3, r2
 800ad98:	d124      	bne.n	800ade4 <UART_SetConfig+0x278>
 800ad9a:	4b33      	ldr	r3, [pc, #204]	; (800ae68 <UART_SetConfig+0x2fc>)
 800ad9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ada0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800ada4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ada8:	d012      	beq.n	800add0 <UART_SetConfig+0x264>
 800adaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800adae:	d802      	bhi.n	800adb6 <UART_SetConfig+0x24a>
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d007      	beq.n	800adc4 <UART_SetConfig+0x258>
 800adb4:	e012      	b.n	800addc <UART_SetConfig+0x270>
 800adb6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adba:	d006      	beq.n	800adca <UART_SetConfig+0x25e>
 800adbc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800adc0:	d009      	beq.n	800add6 <UART_SetConfig+0x26a>
 800adc2:	e00b      	b.n	800addc <UART_SetConfig+0x270>
 800adc4:	2301      	movs	r3, #1
 800adc6:	77fb      	strb	r3, [r7, #31]
 800adc8:	e077      	b.n	800aeba <UART_SetConfig+0x34e>
 800adca:	2302      	movs	r3, #2
 800adcc:	77fb      	strb	r3, [r7, #31]
 800adce:	e074      	b.n	800aeba <UART_SetConfig+0x34e>
 800add0:	2304      	movs	r3, #4
 800add2:	77fb      	strb	r3, [r7, #31]
 800add4:	e071      	b.n	800aeba <UART_SetConfig+0x34e>
 800add6:	2308      	movs	r3, #8
 800add8:	77fb      	strb	r3, [r7, #31]
 800adda:	e06e      	b.n	800aeba <UART_SetConfig+0x34e>
 800addc:	2310      	movs	r3, #16
 800adde:	77fb      	strb	r3, [r7, #31]
 800ade0:	bf00      	nop
 800ade2:	e06a      	b.n	800aeba <UART_SetConfig+0x34e>
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a25      	ldr	r2, [pc, #148]	; (800ae80 <UART_SetConfig+0x314>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d124      	bne.n	800ae38 <UART_SetConfig+0x2cc>
 800adee:	4b1e      	ldr	r3, [pc, #120]	; (800ae68 <UART_SetConfig+0x2fc>)
 800adf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800adf4:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800adf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adfc:	d012      	beq.n	800ae24 <UART_SetConfig+0x2b8>
 800adfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ae02:	d802      	bhi.n	800ae0a <UART_SetConfig+0x29e>
 800ae04:	2b00      	cmp	r3, #0
 800ae06:	d007      	beq.n	800ae18 <UART_SetConfig+0x2ac>
 800ae08:	e012      	b.n	800ae30 <UART_SetConfig+0x2c4>
 800ae0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ae0e:	d006      	beq.n	800ae1e <UART_SetConfig+0x2b2>
 800ae10:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ae14:	d009      	beq.n	800ae2a <UART_SetConfig+0x2be>
 800ae16:	e00b      	b.n	800ae30 <UART_SetConfig+0x2c4>
 800ae18:	2300      	movs	r3, #0
 800ae1a:	77fb      	strb	r3, [r7, #31]
 800ae1c:	e04d      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae1e:	2302      	movs	r3, #2
 800ae20:	77fb      	strb	r3, [r7, #31]
 800ae22:	e04a      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae24:	2304      	movs	r3, #4
 800ae26:	77fb      	strb	r3, [r7, #31]
 800ae28:	e047      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae2a:	2308      	movs	r3, #8
 800ae2c:	77fb      	strb	r3, [r7, #31]
 800ae2e:	e044      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae30:	2310      	movs	r3, #16
 800ae32:	77fb      	strb	r3, [r7, #31]
 800ae34:	bf00      	nop
 800ae36:	e040      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	4a11      	ldr	r2, [pc, #68]	; (800ae84 <UART_SetConfig+0x318>)
 800ae3e:	4293      	cmp	r3, r2
 800ae40:	d139      	bne.n	800aeb6 <UART_SetConfig+0x34a>
 800ae42:	4b09      	ldr	r3, [pc, #36]	; (800ae68 <UART_SetConfig+0x2fc>)
 800ae44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ae48:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800ae4c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae50:	d027      	beq.n	800aea2 <UART_SetConfig+0x336>
 800ae52:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800ae56:	d817      	bhi.n	800ae88 <UART_SetConfig+0x31c>
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	d01c      	beq.n	800ae96 <UART_SetConfig+0x32a>
 800ae5c:	e027      	b.n	800aeae <UART_SetConfig+0x342>
 800ae5e:	bf00      	nop
 800ae60:	efff69f3 	.word	0xefff69f3
 800ae64:	40011000 	.word	0x40011000
 800ae68:	40023800 	.word	0x40023800
 800ae6c:	40004400 	.word	0x40004400
 800ae70:	40004800 	.word	0x40004800
 800ae74:	40004c00 	.word	0x40004c00
 800ae78:	40005000 	.word	0x40005000
 800ae7c:	40011400 	.word	0x40011400
 800ae80:	40007800 	.word	0x40007800
 800ae84:	40007c00 	.word	0x40007c00
 800ae88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ae8c:	d006      	beq.n	800ae9c <UART_SetConfig+0x330>
 800ae8e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ae92:	d009      	beq.n	800aea8 <UART_SetConfig+0x33c>
 800ae94:	e00b      	b.n	800aeae <UART_SetConfig+0x342>
 800ae96:	2300      	movs	r3, #0
 800ae98:	77fb      	strb	r3, [r7, #31]
 800ae9a:	e00e      	b.n	800aeba <UART_SetConfig+0x34e>
 800ae9c:	2302      	movs	r3, #2
 800ae9e:	77fb      	strb	r3, [r7, #31]
 800aea0:	e00b      	b.n	800aeba <UART_SetConfig+0x34e>
 800aea2:	2304      	movs	r3, #4
 800aea4:	77fb      	strb	r3, [r7, #31]
 800aea6:	e008      	b.n	800aeba <UART_SetConfig+0x34e>
 800aea8:	2308      	movs	r3, #8
 800aeaa:	77fb      	strb	r3, [r7, #31]
 800aeac:	e005      	b.n	800aeba <UART_SetConfig+0x34e>
 800aeae:	2310      	movs	r3, #16
 800aeb0:	77fb      	strb	r3, [r7, #31]
 800aeb2:	bf00      	nop
 800aeb4:	e001      	b.n	800aeba <UART_SetConfig+0x34e>
 800aeb6:	2310      	movs	r3, #16
 800aeb8:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	69db      	ldr	r3, [r3, #28]
 800aebe:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aec2:	d17f      	bne.n	800afc4 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800aec4:	7ffb      	ldrb	r3, [r7, #31]
 800aec6:	2b08      	cmp	r3, #8
 800aec8:	d85c      	bhi.n	800af84 <UART_SetConfig+0x418>
 800aeca:	a201      	add	r2, pc, #4	; (adr r2, 800aed0 <UART_SetConfig+0x364>)
 800aecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aed0:	0800aef5 	.word	0x0800aef5
 800aed4:	0800af15 	.word	0x0800af15
 800aed8:	0800af35 	.word	0x0800af35
 800aedc:	0800af85 	.word	0x0800af85
 800aee0:	0800af4d 	.word	0x0800af4d
 800aee4:	0800af85 	.word	0x0800af85
 800aee8:	0800af85 	.word	0x0800af85
 800aeec:	0800af85 	.word	0x0800af85
 800aef0:	0800af6d 	.word	0x0800af6d
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aef4:	f7fd f8ee 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 800aef8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	005a      	lsls	r2, r3, #1
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	085b      	lsrs	r3, r3, #1
 800af04:	441a      	add	r2, r3
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	685b      	ldr	r3, [r3, #4]
 800af0a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af0e:	b29b      	uxth	r3, r3
 800af10:	61bb      	str	r3, [r7, #24]
        break;
 800af12:	e03a      	b.n	800af8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800af14:	f7fd f8f2 	bl	80080fc <HAL_RCC_GetPCLK2Freq>
 800af18:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af1a:	68fb      	ldr	r3, [r7, #12]
 800af1c:	005a      	lsls	r2, r3, #1
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	085b      	lsrs	r3, r3, #1
 800af24:	441a      	add	r2, r3
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	685b      	ldr	r3, [r3, #4]
 800af2a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af2e:	b29b      	uxth	r3, r3
 800af30:	61bb      	str	r3, [r7, #24]
        break;
 800af32:	e02a      	b.n	800af8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	685b      	ldr	r3, [r3, #4]
 800af38:	085a      	lsrs	r2, r3, #1
 800af3a:	4b5f      	ldr	r3, [pc, #380]	; (800b0b8 <UART_SetConfig+0x54c>)
 800af3c:	4413      	add	r3, r2
 800af3e:	687a      	ldr	r2, [r7, #4]
 800af40:	6852      	ldr	r2, [r2, #4]
 800af42:	fbb3 f3f2 	udiv	r3, r3, r2
 800af46:	b29b      	uxth	r3, r3
 800af48:	61bb      	str	r3, [r7, #24]
        break;
 800af4a:	e01e      	b.n	800af8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800af4c:	f7fd f804 	bl	8007f58 <HAL_RCC_GetSysClockFreq>
 800af50:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	005a      	lsls	r2, r3, #1
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	085b      	lsrs	r3, r3, #1
 800af5c:	441a      	add	r2, r3
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	685b      	ldr	r3, [r3, #4]
 800af62:	fbb2 f3f3 	udiv	r3, r2, r3
 800af66:	b29b      	uxth	r3, r3
 800af68:	61bb      	str	r3, [r7, #24]
        break;
 800af6a:	e00e      	b.n	800af8a <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	685b      	ldr	r3, [r3, #4]
 800af70:	085b      	lsrs	r3, r3, #1
 800af72:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800af76:	687b      	ldr	r3, [r7, #4]
 800af78:	685b      	ldr	r3, [r3, #4]
 800af7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800af7e:	b29b      	uxth	r3, r3
 800af80:	61bb      	str	r3, [r7, #24]
        break;
 800af82:	e002      	b.n	800af8a <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800af84:	2301      	movs	r3, #1
 800af86:	75fb      	strb	r3, [r7, #23]
        break;
 800af88:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800af8a:	69bb      	ldr	r3, [r7, #24]
 800af8c:	2b0f      	cmp	r3, #15
 800af8e:	d916      	bls.n	800afbe <UART_SetConfig+0x452>
 800af90:	69bb      	ldr	r3, [r7, #24]
 800af92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800af96:	d212      	bcs.n	800afbe <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800af98:	69bb      	ldr	r3, [r7, #24]
 800af9a:	b29b      	uxth	r3, r3
 800af9c:	f023 030f 	bic.w	r3, r3, #15
 800afa0:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800afa2:	69bb      	ldr	r3, [r7, #24]
 800afa4:	085b      	lsrs	r3, r3, #1
 800afa6:	b29b      	uxth	r3, r3
 800afa8:	f003 0307 	and.w	r3, r3, #7
 800afac:	b29a      	uxth	r2, r3
 800afae:	897b      	ldrh	r3, [r7, #10]
 800afb0:	4313      	orrs	r3, r2
 800afb2:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	897a      	ldrh	r2, [r7, #10]
 800afba:	60da      	str	r2, [r3, #12]
 800afbc:	e070      	b.n	800b0a0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800afbe:	2301      	movs	r3, #1
 800afc0:	75fb      	strb	r3, [r7, #23]
 800afc2:	e06d      	b.n	800b0a0 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800afc4:	7ffb      	ldrb	r3, [r7, #31]
 800afc6:	2b08      	cmp	r3, #8
 800afc8:	d859      	bhi.n	800b07e <UART_SetConfig+0x512>
 800afca:	a201      	add	r2, pc, #4	; (adr r2, 800afd0 <UART_SetConfig+0x464>)
 800afcc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800afd0:	0800aff5 	.word	0x0800aff5
 800afd4:	0800b013 	.word	0x0800b013
 800afd8:	0800b031 	.word	0x0800b031
 800afdc:	0800b07f 	.word	0x0800b07f
 800afe0:	0800b049 	.word	0x0800b049
 800afe4:	0800b07f 	.word	0x0800b07f
 800afe8:	0800b07f 	.word	0x0800b07f
 800afec:	0800b07f 	.word	0x0800b07f
 800aff0:	0800b067 	.word	0x0800b067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800aff4:	f7fd f86e 	bl	80080d4 <HAL_RCC_GetPCLK1Freq>
 800aff8:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	685b      	ldr	r3, [r3, #4]
 800affe:	085a      	lsrs	r2, r3, #1
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	441a      	add	r2, r3
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	685b      	ldr	r3, [r3, #4]
 800b008:	fbb2 f3f3 	udiv	r3, r2, r3
 800b00c:	b29b      	uxth	r3, r3
 800b00e:	61bb      	str	r3, [r7, #24]
        break;
 800b010:	e038      	b.n	800b084 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b012:	f7fd f873 	bl	80080fc <HAL_RCC_GetPCLK2Freq>
 800b016:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	685b      	ldr	r3, [r3, #4]
 800b01c:	085a      	lsrs	r2, r3, #1
 800b01e:	68fb      	ldr	r3, [r7, #12]
 800b020:	441a      	add	r2, r3
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	685b      	ldr	r3, [r3, #4]
 800b026:	fbb2 f3f3 	udiv	r3, r2, r3
 800b02a:	b29b      	uxth	r3, r3
 800b02c:	61bb      	str	r3, [r7, #24]
        break;
 800b02e:	e029      	b.n	800b084 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	685b      	ldr	r3, [r3, #4]
 800b034:	085a      	lsrs	r2, r3, #1
 800b036:	4b21      	ldr	r3, [pc, #132]	; (800b0bc <UART_SetConfig+0x550>)
 800b038:	4413      	add	r3, r2
 800b03a:	687a      	ldr	r2, [r7, #4]
 800b03c:	6852      	ldr	r2, [r2, #4]
 800b03e:	fbb3 f3f2 	udiv	r3, r3, r2
 800b042:	b29b      	uxth	r3, r3
 800b044:	61bb      	str	r3, [r7, #24]
        break;
 800b046:	e01d      	b.n	800b084 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b048:	f7fc ff86 	bl	8007f58 <HAL_RCC_GetSysClockFreq>
 800b04c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b04e:	687b      	ldr	r3, [r7, #4]
 800b050:	685b      	ldr	r3, [r3, #4]
 800b052:	085a      	lsrs	r2, r3, #1
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	441a      	add	r2, r3
 800b058:	687b      	ldr	r3, [r7, #4]
 800b05a:	685b      	ldr	r3, [r3, #4]
 800b05c:	fbb2 f3f3 	udiv	r3, r2, r3
 800b060:	b29b      	uxth	r3, r3
 800b062:	61bb      	str	r3, [r7, #24]
        break;
 800b064:	e00e      	b.n	800b084 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	685b      	ldr	r3, [r3, #4]
 800b06a:	085b      	lsrs	r3, r3, #1
 800b06c:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	685b      	ldr	r3, [r3, #4]
 800b074:	fbb2 f3f3 	udiv	r3, r2, r3
 800b078:	b29b      	uxth	r3, r3
 800b07a:	61bb      	str	r3, [r7, #24]
        break;
 800b07c:	e002      	b.n	800b084 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800b07e:	2301      	movs	r3, #1
 800b080:	75fb      	strb	r3, [r7, #23]
        break;
 800b082:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b084:	69bb      	ldr	r3, [r7, #24]
 800b086:	2b0f      	cmp	r3, #15
 800b088:	d908      	bls.n	800b09c <UART_SetConfig+0x530>
 800b08a:	69bb      	ldr	r3, [r7, #24]
 800b08c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b090:	d204      	bcs.n	800b09c <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	681b      	ldr	r3, [r3, #0]
 800b096:	69ba      	ldr	r2, [r7, #24]
 800b098:	60da      	str	r2, [r3, #12]
 800b09a:	e001      	b.n	800b0a0 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800b09c:	2301      	movs	r3, #1
 800b09e:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	2200      	movs	r2, #0
 800b0a4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800b0ac:	7dfb      	ldrb	r3, [r7, #23]
}
 800b0ae:	4618      	mov	r0, r3
 800b0b0:	3720      	adds	r7, #32
 800b0b2:	46bd      	mov	sp, r7
 800b0b4:	bd80      	pop	{r7, pc}
 800b0b6:	bf00      	nop
 800b0b8:	01e84800 	.word	0x01e84800
 800b0bc:	00f42400 	.word	0x00f42400

0800b0c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b0c0:	b480      	push	{r7}
 800b0c2:	b083      	sub	sp, #12
 800b0c4:	af00      	add	r7, sp, #0
 800b0c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b0c8:	687b      	ldr	r3, [r7, #4]
 800b0ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0cc:	f003 0301 	and.w	r3, r3, #1
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d00a      	beq.n	800b0ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	681b      	ldr	r3, [r3, #0]
 800b0d8:	685b      	ldr	r3, [r3, #4]
 800b0da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b0de:	687b      	ldr	r3, [r7, #4]
 800b0e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	430a      	orrs	r2, r1
 800b0e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0ee:	f003 0302 	and.w	r3, r3, #2
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d00a      	beq.n	800b10c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b0f6:	687b      	ldr	r3, [r7, #4]
 800b0f8:	681b      	ldr	r3, [r3, #0]
 800b0fa:	685b      	ldr	r3, [r3, #4]
 800b0fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	681b      	ldr	r3, [r3, #0]
 800b108:	430a      	orrs	r2, r1
 800b10a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b110:	f003 0304 	and.w	r3, r3, #4
 800b114:	2b00      	cmp	r3, #0
 800b116:	d00a      	beq.n	800b12e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	681b      	ldr	r3, [r3, #0]
 800b11c:	685b      	ldr	r3, [r3, #4]
 800b11e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b122:	687b      	ldr	r3, [r7, #4]
 800b124:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	681b      	ldr	r3, [r3, #0]
 800b12a:	430a      	orrs	r2, r1
 800b12c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b132:	f003 0308 	and.w	r3, r3, #8
 800b136:	2b00      	cmp	r3, #0
 800b138:	d00a      	beq.n	800b150 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b13a:	687b      	ldr	r3, [r7, #4]
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	685b      	ldr	r3, [r3, #4]
 800b140:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	430a      	orrs	r2, r1
 800b14e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b154:	f003 0310 	and.w	r3, r3, #16
 800b158:	2b00      	cmp	r3, #0
 800b15a:	d00a      	beq.n	800b172 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	689b      	ldr	r3, [r3, #8]
 800b162:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b166:	687b      	ldr	r3, [r7, #4]
 800b168:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	430a      	orrs	r2, r1
 800b170:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b172:	687b      	ldr	r3, [r7, #4]
 800b174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b176:	f003 0320 	and.w	r3, r3, #32
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d00a      	beq.n	800b194 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	689b      	ldr	r3, [r3, #8]
 800b184:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681b      	ldr	r3, [r3, #0]
 800b190:	430a      	orrs	r2, r1
 800b192:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b198:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d01a      	beq.n	800b1d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	681b      	ldr	r3, [r3, #0]
 800b1a4:	685b      	ldr	r3, [r3, #4]
 800b1a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	430a      	orrs	r2, r1
 800b1b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b1ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1be:	d10a      	bne.n	800b1d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	685b      	ldr	r3, [r3, #4]
 800b1c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d00a      	beq.n	800b1f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	685b      	ldr	r3, [r3, #4]
 800b1e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	430a      	orrs	r2, r1
 800b1f6:	605a      	str	r2, [r3, #4]
  }
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b204:	b580      	push	{r7, lr}
 800b206:	b086      	sub	sp, #24
 800b208:	af02      	add	r7, sp, #8
 800b20a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b20c:	687b      	ldr	r3, [r7, #4]
 800b20e:	2200      	movs	r2, #0
 800b210:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800b212:	f7f9 fc81 	bl	8004b18 <HAL_GetTick>
 800b216:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b218:	687b      	ldr	r3, [r7, #4]
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	f003 0308 	and.w	r3, r3, #8
 800b222:	2b08      	cmp	r3, #8
 800b224:	d10e      	bne.n	800b244 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b226:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b22a:	9300      	str	r3, [sp, #0]
 800b22c:	68fb      	ldr	r3, [r7, #12]
 800b22e:	2200      	movs	r2, #0
 800b230:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b234:	6878      	ldr	r0, [r7, #4]
 800b236:	f000 f814 	bl	800b262 <UART_WaitOnFlagUntilTimeout>
 800b23a:	4603      	mov	r3, r0
 800b23c:	2b00      	cmp	r3, #0
 800b23e:	d001      	beq.n	800b244 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b240:	2303      	movs	r3, #3
 800b242:	e00a      	b.n	800b25a <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2220      	movs	r2, #32
 800b248:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2220      	movs	r2, #32
 800b24e:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	2200      	movs	r2, #0
 800b254:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800b258:	2300      	movs	r3, #0
}
 800b25a:	4618      	mov	r0, r3
 800b25c:	3710      	adds	r7, #16
 800b25e:	46bd      	mov	sp, r7
 800b260:	bd80      	pop	{r7, pc}

0800b262 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800b262:	b580      	push	{r7, lr}
 800b264:	b084      	sub	sp, #16
 800b266:	af00      	add	r7, sp, #0
 800b268:	60f8      	str	r0, [r7, #12]
 800b26a:	60b9      	str	r1, [r7, #8]
 800b26c:	603b      	str	r3, [r7, #0]
 800b26e:	4613      	mov	r3, r2
 800b270:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b272:	e05d      	b.n	800b330 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b274:	69bb      	ldr	r3, [r7, #24]
 800b276:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b27a:	d059      	beq.n	800b330 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b27c:	f7f9 fc4c 	bl	8004b18 <HAL_GetTick>
 800b280:	4602      	mov	r2, r0
 800b282:	683b      	ldr	r3, [r7, #0]
 800b284:	1ad3      	subs	r3, r2, r3
 800b286:	69ba      	ldr	r2, [r7, #24]
 800b288:	429a      	cmp	r2, r3
 800b28a:	d302      	bcc.n	800b292 <UART_WaitOnFlagUntilTimeout+0x30>
 800b28c:	69bb      	ldr	r3, [r7, #24]
 800b28e:	2b00      	cmp	r3, #0
 800b290:	d11b      	bne.n	800b2ca <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b292:	68fb      	ldr	r3, [r7, #12]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	681a      	ldr	r2, [r3, #0]
 800b298:	68fb      	ldr	r3, [r7, #12]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b2a0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2a2:	68fb      	ldr	r3, [r7, #12]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	689a      	ldr	r2, [r3, #8]
 800b2a8:	68fb      	ldr	r3, [r7, #12]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	f022 0201 	bic.w	r2, r2, #1
 800b2b0:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b2b2:	68fb      	ldr	r3, [r7, #12]
 800b2b4:	2220      	movs	r2, #32
 800b2b6:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2220      	movs	r2, #32
 800b2bc:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	2200      	movs	r2, #0
 800b2c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b2c6:	2303      	movs	r3, #3
 800b2c8:	e042      	b.n	800b350 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	f003 0304 	and.w	r3, r3, #4
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d02b      	beq.n	800b330 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	69db      	ldr	r3, [r3, #28]
 800b2de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b2e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2e6:	d123      	bne.n	800b330 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b2e8:	68fb      	ldr	r3, [r7, #12]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b2f0:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	681b      	ldr	r3, [r3, #0]
 800b2f6:	681a      	ldr	r2, [r3, #0]
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b300:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	681b      	ldr	r3, [r3, #0]
 800b306:	689a      	ldr	r2, [r3, #8]
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	681b      	ldr	r3, [r3, #0]
 800b30c:	f022 0201 	bic.w	r2, r2, #1
 800b310:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b312:	68fb      	ldr	r3, [r7, #12]
 800b314:	2220      	movs	r2, #32
 800b316:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b318:	68fb      	ldr	r3, [r7, #12]
 800b31a:	2220      	movs	r2, #32
 800b31c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2220      	movs	r2, #32
 800b322:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	2200      	movs	r2, #0
 800b328:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b32c:	2303      	movs	r3, #3
 800b32e:	e00f      	b.n	800b350 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b330:	68fb      	ldr	r3, [r7, #12]
 800b332:	681b      	ldr	r3, [r3, #0]
 800b334:	69da      	ldr	r2, [r3, #28]
 800b336:	68bb      	ldr	r3, [r7, #8]
 800b338:	4013      	ands	r3, r2
 800b33a:	68ba      	ldr	r2, [r7, #8]
 800b33c:	429a      	cmp	r2, r3
 800b33e:	bf0c      	ite	eq
 800b340:	2301      	moveq	r3, #1
 800b342:	2300      	movne	r3, #0
 800b344:	b2db      	uxtb	r3, r3
 800b346:	461a      	mov	r2, r3
 800b348:	79fb      	ldrb	r3, [r7, #7]
 800b34a:	429a      	cmp	r2, r3
 800b34c:	d092      	beq.n	800b274 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b34e:	2300      	movs	r3, #0
}
 800b350:	4618      	mov	r0, r3
 800b352:	3710      	adds	r7, #16
 800b354:	46bd      	mov	sp, r7
 800b356:	bd80      	pop	{r7, pc}

0800b358 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b358:	b480      	push	{r7}
 800b35a:	b083      	sub	sp, #12
 800b35c:	af00      	add	r7, sp, #0
 800b35e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	681a      	ldr	r2, [r3, #0]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b36e:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	689a      	ldr	r2, [r3, #8]
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	681b      	ldr	r3, [r3, #0]
 800b37a:	f022 0201 	bic.w	r2, r2, #1
 800b37e:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	2220      	movs	r2, #32
 800b384:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b386:	687b      	ldr	r3, [r7, #4]
 800b388:	2200      	movs	r2, #0
 800b38a:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b38c:	bf00      	nop
 800b38e:	370c      	adds	r7, #12
 800b390:	46bd      	mov	sp, r7
 800b392:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b396:	4770      	bx	lr

0800b398 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b398:	b580      	push	{r7, lr}
 800b39a:	b084      	sub	sp, #16
 800b39c:	af00      	add	r7, sp, #0
 800b39e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b3a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b3a6:	68fb      	ldr	r3, [r7, #12]
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	2200      	movs	r2, #0
 800b3b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b3b6:	68f8      	ldr	r0, [r7, #12]
 800b3b8:	f7ff fbce 	bl	800ab58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3bc:	bf00      	nop
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}

0800b3c4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b3c4:	b580      	push	{r7, lr}
 800b3c6:	b082      	sub	sp, #8
 800b3c8:	af00      	add	r7, sp, #0
 800b3ca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b3da:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	2200      	movs	r2, #0
 800b3e6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b3e8:	6878      	ldr	r0, [r7, #4]
 800b3ea:	f7ff fbab 	bl	800ab44 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b3ee:	bf00      	nop
 800b3f0:	3708      	adds	r7, #8
 800b3f2:	46bd      	mov	sp, r7
 800b3f4:	bd80      	pop	{r7, pc}

0800b3f6 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b3f6:	b580      	push	{r7, lr}
 800b3f8:	b084      	sub	sp, #16
 800b3fa:	af00      	add	r7, sp, #0
 800b3fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b404:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b40a:	2b22      	cmp	r3, #34	; 0x22
 800b40c:	d13a      	bne.n	800b484 <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b414:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b416:	89bb      	ldrh	r3, [r7, #12]
 800b418:	b2d9      	uxtb	r1, r3
 800b41a:	89fb      	ldrh	r3, [r7, #14]
 800b41c:	b2da      	uxtb	r2, r3
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b422:	400a      	ands	r2, r1
 800b424:	b2d2      	uxtb	r2, r2
 800b426:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b42c:	1c5a      	adds	r2, r3, #1
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b438:	b29b      	uxth	r3, r3
 800b43a:	3b01      	subs	r3, #1
 800b43c:	b29a      	uxth	r2, r3
 800b43e:	687b      	ldr	r3, [r7, #4]
 800b440:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b44a:	b29b      	uxth	r3, r3
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d121      	bne.n	800b494 <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	681b      	ldr	r3, [r3, #0]
 800b454:	681a      	ldr	r2, [r3, #0]
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	681b      	ldr	r3, [r3, #0]
 800b45a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b45e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b460:	687b      	ldr	r3, [r7, #4]
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	689a      	ldr	r2, [r3, #8]
 800b466:	687b      	ldr	r3, [r7, #4]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	f022 0201 	bic.w	r2, r2, #1
 800b46e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	2220      	movs	r2, #32
 800b474:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	2200      	movs	r2, #0
 800b47a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7f6 fc1f 	bl	8001cc0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b482:	e007      	b.n	800b494 <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	699a      	ldr	r2, [r3, #24]
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	f042 0208 	orr.w	r2, r2, #8
 800b492:	619a      	str	r2, [r3, #24]
}
 800b494:	bf00      	nop
 800b496:	3710      	adds	r7, #16
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b084      	sub	sp, #16
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b4aa:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b4ac:	687b      	ldr	r3, [r7, #4]
 800b4ae:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b4b0:	2b22      	cmp	r3, #34	; 0x22
 800b4b2:	d13a      	bne.n	800b52a <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ba:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4c0:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b4c2:	89ba      	ldrh	r2, [r7, #12]
 800b4c4:	89fb      	ldrh	r3, [r7, #14]
 800b4c6:	4013      	ands	r3, r2
 800b4c8:	b29a      	uxth	r2, r3
 800b4ca:	68bb      	ldr	r3, [r7, #8]
 800b4cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b4d2:	1c9a      	adds	r2, r3, #2
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	3b01      	subs	r3, #1
 800b4e2:	b29a      	uxth	r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	2b00      	cmp	r3, #0
 800b4f4:	d121      	bne.n	800b53a <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	681a      	ldr	r2, [r3, #0]
 800b4fc:	687b      	ldr	r3, [r7, #4]
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b504:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b506:	687b      	ldr	r3, [r7, #4]
 800b508:	681b      	ldr	r3, [r3, #0]
 800b50a:	689a      	ldr	r2, [r3, #8]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	681b      	ldr	r3, [r3, #0]
 800b510:	f022 0201 	bic.w	r2, r2, #1
 800b514:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2220      	movs	r2, #32
 800b51a:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b51c:	687b      	ldr	r3, [r7, #4]
 800b51e:	2200      	movs	r2, #0
 800b520:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b522:	6878      	ldr	r0, [r7, #4]
 800b524:	f7f6 fbcc 	bl	8001cc0 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b528:	e007      	b.n	800b53a <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b52a:	687b      	ldr	r3, [r7, #4]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	699a      	ldr	r2, [r3, #24]
 800b530:	687b      	ldr	r3, [r7, #4]
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	f042 0208 	orr.w	r2, r2, #8
 800b538:	619a      	str	r2, [r3, #24]
}
 800b53a:	bf00      	nop
 800b53c:	3710      	adds	r7, #16
 800b53e:	46bd      	mov	sp, r7
 800b540:	bd80      	pop	{r7, pc}
	...

0800b544 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b544:	b480      	push	{r7}
 800b546:	b085      	sub	sp, #20
 800b548:	af00      	add	r7, sp, #0
 800b54a:	6078      	str	r0, [r7, #4]
 800b54c:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b54e:	2300      	movs	r3, #0
 800b550:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b552:	2300      	movs	r3, #0
 800b554:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b556:	683b      	ldr	r3, [r7, #0]
 800b558:	681b      	ldr	r3, [r3, #0]
 800b55a:	2b01      	cmp	r3, #1
 800b55c:	d027      	beq.n	800b5ae <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	681b      	ldr	r3, [r3, #0]
 800b562:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b564:	68fa      	ldr	r2, [r7, #12]
 800b566:	4b2f      	ldr	r3, [pc, #188]	; (800b624 <FMC_SDRAM_Init+0xe0>)
 800b568:	4013      	ands	r3, r2
 800b56a:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b56c:	683b      	ldr	r3, [r7, #0]
 800b56e:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b570:	683b      	ldr	r3, [r7, #0]
 800b572:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b574:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b576:	683b      	ldr	r3, [r7, #0]
 800b578:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b57a:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b580:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b586:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b588:	683b      	ldr	r3, [r7, #0]
 800b58a:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b58c:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b592:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b594:	683b      	ldr	r3, [r7, #0]
 800b596:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b598:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b59a:	683b      	ldr	r3, [r7, #0]
 800b59c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b59e:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4313      	orrs	r3, r2
 800b5a4:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b5a6:	687b      	ldr	r3, [r7, #4]
 800b5a8:	68fa      	ldr	r2, [r7, #12]
 800b5aa:	601a      	str	r2, [r3, #0]
 800b5ac:	e032      	b.n	800b614 <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b5b4:	68fb      	ldr	r3, [r7, #12]
 800b5b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b5ba:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b5bc:	683b      	ldr	r3, [r7, #0]
 800b5be:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b5c4:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b5c6:	683b      	ldr	r3, [r7, #0]
 800b5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b5ca:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b5cc:	68fa      	ldr	r2, [r7, #12]
 800b5ce:	4313      	orrs	r3, r2
 800b5d0:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b5d2:	687b      	ldr	r3, [r7, #4]
 800b5d4:	685b      	ldr	r3, [r3, #4]
 800b5d6:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b5d8:	68ba      	ldr	r2, [r7, #8]
 800b5da:	4b12      	ldr	r3, [pc, #72]	; (800b624 <FMC_SDRAM_Init+0xe0>)
 800b5dc:	4013      	ands	r3, r2
 800b5de:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5e0:	683b      	ldr	r3, [r7, #0]
 800b5e2:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b5e4:	683b      	ldr	r3, [r7, #0]
 800b5e6:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b5e8:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b5ee:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b5f0:	683b      	ldr	r3, [r7, #0]
 800b5f2:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b5f4:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b5f6:	683b      	ldr	r3, [r7, #0]
 800b5f8:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b5fa:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b5fc:	683b      	ldr	r3, [r7, #0]
 800b5fe:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b600:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	4313      	orrs	r3, r2
 800b606:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b608:	687b      	ldr	r3, [r7, #4]
 800b60a:	68fa      	ldr	r2, [r7, #12]
 800b60c:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	68ba      	ldr	r2, [r7, #8]
 800b612:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b614:	2300      	movs	r3, #0
}
 800b616:	4618      	mov	r0, r3
 800b618:	3714      	adds	r7, #20
 800b61a:	46bd      	mov	sp, r7
 800b61c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b620:	4770      	bx	lr
 800b622:	bf00      	nop
 800b624:	ffff8000 	.word	0xffff8000

0800b628 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b628:	b480      	push	{r7}
 800b62a:	b087      	sub	sp, #28
 800b62c:	af00      	add	r7, sp, #0
 800b62e:	60f8      	str	r0, [r7, #12]
 800b630:	60b9      	str	r1, [r7, #8]
 800b632:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b634:	2300      	movs	r3, #0
 800b636:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b638:	2300      	movs	r3, #0
 800b63a:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	2b01      	cmp	r3, #1
 800b640:	d02e      	beq.n	800b6a0 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b642:	68fb      	ldr	r3, [r7, #12]
 800b644:	689b      	ldr	r3, [r3, #8]
 800b646:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b648:	697b      	ldr	r3, [r7, #20]
 800b64a:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b64e:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b650:	68bb      	ldr	r3, [r7, #8]
 800b652:	681b      	ldr	r3, [r3, #0]
 800b654:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b656:	68bb      	ldr	r3, [r7, #8]
 800b658:	685b      	ldr	r3, [r3, #4]
 800b65a:	3b01      	subs	r3, #1
 800b65c:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b65e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b660:	68bb      	ldr	r3, [r7, #8]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	3b01      	subs	r3, #1
 800b666:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b668:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	68db      	ldr	r3, [r3, #12]
 800b66e:	3b01      	subs	r3, #1
 800b670:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b672:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	3b01      	subs	r3, #1
 800b67a:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b67c:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b67e:	68bb      	ldr	r3, [r7, #8]
 800b680:	695b      	ldr	r3, [r3, #20]
 800b682:	3b01      	subs	r3, #1
 800b684:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b686:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b688:	68bb      	ldr	r3, [r7, #8]
 800b68a:	699b      	ldr	r3, [r3, #24]
 800b68c:	3b01      	subs	r3, #1
 800b68e:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b690:	4313      	orrs	r3, r2
 800b692:	697a      	ldr	r2, [r7, #20]
 800b694:	4313      	orrs	r3, r2
 800b696:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	697a      	ldr	r2, [r7, #20]
 800b69c:	609a      	str	r2, [r3, #8]
 800b69e:	e039      	b.n	800b714 <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	689b      	ldr	r3, [r3, #8]
 800b6a4:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b6a6:	697a      	ldr	r2, [r7, #20]
 800b6a8:	4b1e      	ldr	r3, [pc, #120]	; (800b724 <FMC_SDRAM_Timing_Init+0xfc>)
 800b6aa:	4013      	ands	r3, r2
 800b6ac:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b6ae:	68bb      	ldr	r3, [r7, #8]
 800b6b0:	68db      	ldr	r3, [r3, #12]
 800b6b2:	3b01      	subs	r3, #1
 800b6b4:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	695b      	ldr	r3, [r3, #20]
 800b6ba:	3b01      	subs	r3, #1
 800b6bc:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	697a      	ldr	r2, [r7, #20]
 800b6c2:	4313      	orrs	r3, r2
 800b6c4:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b6c6:	68fb      	ldr	r3, [r7, #12]
 800b6c8:	68db      	ldr	r3, [r3, #12]
 800b6ca:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b6cc:	693b      	ldr	r3, [r7, #16]
 800b6ce:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b6d2:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	681b      	ldr	r3, [r3, #0]
 800b6d8:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	685b      	ldr	r3, [r3, #4]
 800b6de:	3b01      	subs	r3, #1
 800b6e0:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b6e2:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b6e4:	68bb      	ldr	r3, [r7, #8]
 800b6e6:	689b      	ldr	r3, [r3, #8]
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b6ec:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	691b      	ldr	r3, [r3, #16]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b6f6:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b6f8:	68bb      	ldr	r3, [r7, #8]
 800b6fa:	699b      	ldr	r3, [r3, #24]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b700:	4313      	orrs	r3, r2
 800b702:	693a      	ldr	r2, [r7, #16]
 800b704:	4313      	orrs	r3, r2
 800b706:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b708:	68fb      	ldr	r3, [r7, #12]
 800b70a:	697a      	ldr	r2, [r7, #20]
 800b70c:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b70e:	68fb      	ldr	r3, [r7, #12]
 800b710:	693a      	ldr	r2, [r7, #16]
 800b712:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	371c      	adds	r7, #28
 800b71a:	46bd      	mov	sp, r7
 800b71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b720:	4770      	bx	lr
 800b722:	bf00      	nop
 800b724:	ff0f0fff 	.word	0xff0f0fff

0800b728 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b728:	b480      	push	{r7}
 800b72a:	b087      	sub	sp, #28
 800b72c:	af00      	add	r7, sp, #0
 800b72e:	60f8      	str	r0, [r7, #12]
 800b730:	60b9      	str	r1, [r7, #8]
 800b732:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b734:	2300      	movs	r3, #0
 800b736:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b738:	68bb      	ldr	r3, [r7, #8]
 800b73a:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b73c:	68bb      	ldr	r3, [r7, #8]
 800b73e:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b740:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b742:	68bb      	ldr	r3, [r7, #8]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	3b01      	subs	r3, #1
 800b748:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b74a:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b74c:	68bb      	ldr	r3, [r7, #8]
 800b74e:	68db      	ldr	r3, [r3, #12]
 800b750:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b752:	4313      	orrs	r3, r2
 800b754:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b756:	697a      	ldr	r2, [r7, #20]
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b75c:	2300      	movs	r3, #0
}
 800b75e:	4618      	mov	r0, r3
 800b760:	371c      	adds	r7, #28
 800b762:	46bd      	mov	sp, r7
 800b764:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b768:	4770      	bx	lr

0800b76a <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b76a:	b480      	push	{r7}
 800b76c:	b083      	sub	sp, #12
 800b76e:	af00      	add	r7, sp, #0
 800b770:	6078      	str	r0, [r7, #4]
 800b772:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b774:	687b      	ldr	r3, [r7, #4]
 800b776:	695a      	ldr	r2, [r3, #20]
 800b778:	683b      	ldr	r3, [r7, #0]
 800b77a:	005b      	lsls	r3, r3, #1
 800b77c:	431a      	orrs	r2, r3
 800b77e:	687b      	ldr	r3, [r7, #4]
 800b780:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b782:	2300      	movs	r3, #0
}
 800b784:	4618      	mov	r0, r3
 800b786:	370c      	adds	r7, #12
 800b788:	46bd      	mov	sp, r7
 800b78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b78e:	4770      	bx	lr

0800b790 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b790:	b480      	push	{r7}
 800b792:	b085      	sub	sp, #20
 800b794:	af00      	add	r7, sp, #0
 800b796:	4603      	mov	r3, r0
 800b798:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b79a:	2300      	movs	r3, #0
 800b79c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b79e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b7a2:	2b84      	cmp	r3, #132	; 0x84
 800b7a4:	d005      	beq.n	800b7b2 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b7a6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b7aa:	68fb      	ldr	r3, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	3303      	adds	r3, #3
 800b7b0:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b7b2:	68fb      	ldr	r3, [r7, #12]
}
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	3714      	adds	r7, #20
 800b7b8:	46bd      	mov	sp, r7
 800b7ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7be:	4770      	bx	lr

0800b7c0 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b7c0:	b580      	push	{r7, lr}
 800b7c2:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b7c4:	f001 f8ec 	bl	800c9a0 <vTaskStartScheduler>
  
  return osOK;
 800b7c8:	2300      	movs	r3, #0
}
 800b7ca:	4618      	mov	r0, r3
 800b7cc:	bd80      	pop	{r7, pc}

0800b7ce <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b7ce:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b7d0:	b089      	sub	sp, #36	; 0x24
 800b7d2:	af04      	add	r7, sp, #16
 800b7d4:	6078      	str	r0, [r7, #4]
 800b7d6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b7d8:	687b      	ldr	r3, [r7, #4]
 800b7da:	695b      	ldr	r3, [r3, #20]
 800b7dc:	2b00      	cmp	r3, #0
 800b7de:	d020      	beq.n	800b822 <osThreadCreate+0x54>
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	699b      	ldr	r3, [r3, #24]
 800b7e4:	2b00      	cmp	r3, #0
 800b7e6:	d01c      	beq.n	800b822 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	685c      	ldr	r4, [r3, #4]
 800b7ec:	687b      	ldr	r3, [r7, #4]
 800b7ee:	681d      	ldr	r5, [r3, #0]
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	691e      	ldr	r6, [r3, #16]
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b7fa:	4618      	mov	r0, r3
 800b7fc:	f7ff ffc8 	bl	800b790 <makeFreeRtosPriority>
 800b800:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b802:	687b      	ldr	r3, [r7, #4]
 800b804:	695b      	ldr	r3, [r3, #20]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b80a:	9202      	str	r2, [sp, #8]
 800b80c:	9301      	str	r3, [sp, #4]
 800b80e:	9100      	str	r1, [sp, #0]
 800b810:	683b      	ldr	r3, [r7, #0]
 800b812:	4632      	mov	r2, r6
 800b814:	4629      	mov	r1, r5
 800b816:	4620      	mov	r0, r4
 800b818:	f000 fdd6 	bl	800c3c8 <xTaskCreateStatic>
 800b81c:	4603      	mov	r3, r0
 800b81e:	60fb      	str	r3, [r7, #12]
 800b820:	e01c      	b.n	800b85c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	685c      	ldr	r4, [r3, #4]
 800b826:	687b      	ldr	r3, [r7, #4]
 800b828:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b82a:	687b      	ldr	r3, [r7, #4]
 800b82c:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b82e:	b29e      	uxth	r6, r3
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b836:	4618      	mov	r0, r3
 800b838:	f7ff ffaa 	bl	800b790 <makeFreeRtosPriority>
 800b83c:	4602      	mov	r2, r0
 800b83e:	f107 030c 	add.w	r3, r7, #12
 800b842:	9301      	str	r3, [sp, #4]
 800b844:	9200      	str	r2, [sp, #0]
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	4632      	mov	r2, r6
 800b84a:	4629      	mov	r1, r5
 800b84c:	4620      	mov	r0, r4
 800b84e:	f000 fe1b 	bl	800c488 <xTaskCreate>
 800b852:	4603      	mov	r3, r0
 800b854:	2b01      	cmp	r3, #1
 800b856:	d001      	beq.n	800b85c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b858:	2300      	movs	r3, #0
 800b85a:	e000      	b.n	800b85e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b85c:	68fb      	ldr	r3, [r7, #12]
}
 800b85e:	4618      	mov	r0, r3
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b866 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b866:	b580      	push	{r7, lr}
 800b868:	b084      	sub	sp, #16
 800b86a:	af00      	add	r7, sp, #0
 800b86c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d001      	beq.n	800b87c <osDelay+0x16>
 800b878:	68fb      	ldr	r3, [r7, #12]
 800b87a:	e000      	b.n	800b87e <osDelay+0x18>
 800b87c:	2301      	movs	r3, #1
 800b87e:	4618      	mov	r0, r3
 800b880:	f000 ffc4 	bl	800c80c <vTaskDelay>
  
  return osOK;
 800b884:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b886:	4618      	mov	r0, r3
 800b888:	3710      	adds	r7, #16
 800b88a:	46bd      	mov	sp, r7
 800b88c:	bd80      	pop	{r7, pc}

0800b88e <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b88e:	b580      	push	{r7, lr}
 800b890:	b082      	sub	sp, #8
 800b892:	af00      	add	r7, sp, #0
 800b894:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	2b00      	cmp	r3, #0
 800b89c:	d007      	beq.n	800b8ae <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	685b      	ldr	r3, [r3, #4]
 800b8a2:	4619      	mov	r1, r3
 800b8a4:	2001      	movs	r0, #1
 800b8a6:	f000 fa60 	bl	800bd6a <xQueueCreateMutexStatic>
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	e003      	b.n	800b8b6 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b8ae:	2001      	movs	r0, #1
 800b8b0:	f000 fa43 	bl	800bd3a <xQueueCreateMutex>
 800b8b4:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b8b6:	4618      	mov	r0, r3
 800b8b8:	3708      	adds	r7, #8
 800b8ba:	46bd      	mov	sp, r7
 800b8bc:	bd80      	pop	{r7, pc}

0800b8be <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b8be:	b590      	push	{r4, r7, lr}
 800b8c0:	b085      	sub	sp, #20
 800b8c2:	af02      	add	r7, sp, #8
 800b8c4:	6078      	str	r0, [r7, #4]
 800b8c6:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b8c8:	687b      	ldr	r3, [r7, #4]
 800b8ca:	689b      	ldr	r3, [r3, #8]
 800b8cc:	2b00      	cmp	r3, #0
 800b8ce:	d012      	beq.n	800b8f6 <osMessageCreate+0x38>
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	68db      	ldr	r3, [r3, #12]
 800b8d4:	2b00      	cmp	r3, #0
 800b8d6:	d00e      	beq.n	800b8f6 <osMessageCreate+0x38>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6818      	ldr	r0, [r3, #0]
 800b8dc:	687b      	ldr	r3, [r7, #4]
 800b8de:	6859      	ldr	r1, [r3, #4]
 800b8e0:	687b      	ldr	r3, [r7, #4]
 800b8e2:	689a      	ldr	r2, [r3, #8]
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	68dc      	ldr	r4, [r3, #12]
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	9300      	str	r3, [sp, #0]
 800b8ec:	4623      	mov	r3, r4
 800b8ee:	f000 f92d 	bl	800bb4c <xQueueGenericCreateStatic>
 800b8f2:	4603      	mov	r3, r0
 800b8f4:	e008      	b.n	800b908 <osMessageCreate+0x4a>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	6818      	ldr	r0, [r3, #0]
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	685b      	ldr	r3, [r3, #4]
 800b8fe:	2200      	movs	r2, #0
 800b900:	4619      	mov	r1, r3
 800b902:	f000 f9a0 	bl	800bc46 <xQueueGenericCreate>
 800b906:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b908:	4618      	mov	r0, r3
 800b90a:	370c      	adds	r7, #12
 800b90c:	46bd      	mov	sp, r7
 800b90e:	bd90      	pop	{r4, r7, pc}

0800b910 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b910:	b480      	push	{r7}
 800b912:	b083      	sub	sp, #12
 800b914:	af00      	add	r7, sp, #0
 800b916:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b918:	687b      	ldr	r3, [r7, #4]
 800b91a:	f103 0208 	add.w	r2, r3, #8
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b922:	687b      	ldr	r3, [r7, #4]
 800b924:	f04f 32ff 	mov.w	r2, #4294967295
 800b928:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b92a:	687b      	ldr	r3, [r7, #4]
 800b92c:	f103 0208 	add.w	r2, r3, #8
 800b930:	687b      	ldr	r3, [r7, #4]
 800b932:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f103 0208 	add.w	r2, r3, #8
 800b93a:	687b      	ldr	r3, [r7, #4]
 800b93c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2200      	movs	r2, #0
 800b942:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b944:	bf00      	nop
 800b946:	370c      	adds	r7, #12
 800b948:	46bd      	mov	sp, r7
 800b94a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b94e:	4770      	bx	lr

0800b950 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b950:	b480      	push	{r7}
 800b952:	b083      	sub	sp, #12
 800b954:	af00      	add	r7, sp, #0
 800b956:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	2200      	movs	r2, #0
 800b95c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b95e:	bf00      	nop
 800b960:	370c      	adds	r7, #12
 800b962:	46bd      	mov	sp, r7
 800b964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b968:	4770      	bx	lr

0800b96a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b96a:	b480      	push	{r7}
 800b96c:	b085      	sub	sp, #20
 800b96e:	af00      	add	r7, sp, #0
 800b970:	6078      	str	r0, [r7, #4]
 800b972:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	685b      	ldr	r3, [r3, #4]
 800b978:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b97a:	683b      	ldr	r3, [r7, #0]
 800b97c:	68fa      	ldr	r2, [r7, #12]
 800b97e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b980:	68fb      	ldr	r3, [r7, #12]
 800b982:	689a      	ldr	r2, [r3, #8]
 800b984:	683b      	ldr	r3, [r7, #0]
 800b986:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	689b      	ldr	r3, [r3, #8]
 800b98c:	683a      	ldr	r2, [r7, #0]
 800b98e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b996:	683b      	ldr	r3, [r7, #0]
 800b998:	687a      	ldr	r2, [r7, #4]
 800b99a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	601a      	str	r2, [r3, #0]
}
 800b9a6:	bf00      	nop
 800b9a8:	3714      	adds	r7, #20
 800b9aa:	46bd      	mov	sp, r7
 800b9ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b9b0:	4770      	bx	lr

0800b9b2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b9b2:	b480      	push	{r7}
 800b9b4:	b085      	sub	sp, #20
 800b9b6:	af00      	add	r7, sp, #0
 800b9b8:	6078      	str	r0, [r7, #4]
 800b9ba:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b9bc:	683b      	ldr	r3, [r7, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9c8:	d103      	bne.n	800b9d2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	691b      	ldr	r3, [r3, #16]
 800b9ce:	60fb      	str	r3, [r7, #12]
 800b9d0:	e00c      	b.n	800b9ec <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	60fb      	str	r3, [r7, #12]
 800b9d8:	e002      	b.n	800b9e0 <vListInsert+0x2e>
 800b9da:	68fb      	ldr	r3, [r7, #12]
 800b9dc:	685b      	ldr	r3, [r3, #4]
 800b9de:	60fb      	str	r3, [r7, #12]
 800b9e0:	68fb      	ldr	r3, [r7, #12]
 800b9e2:	685b      	ldr	r3, [r3, #4]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	68ba      	ldr	r2, [r7, #8]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d2f6      	bcs.n	800b9da <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	685a      	ldr	r2, [r3, #4]
 800b9f0:	683b      	ldr	r3, [r7, #0]
 800b9f2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	685b      	ldr	r3, [r3, #4]
 800b9f8:	683a      	ldr	r2, [r7, #0]
 800b9fa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	68fa      	ldr	r2, [r7, #12]
 800ba00:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	683a      	ldr	r2, [r7, #0]
 800ba06:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800ba08:	683b      	ldr	r3, [r7, #0]
 800ba0a:	687a      	ldr	r2, [r7, #4]
 800ba0c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ba0e:	687b      	ldr	r3, [r7, #4]
 800ba10:	681b      	ldr	r3, [r3, #0]
 800ba12:	1c5a      	adds	r2, r3, #1
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	601a      	str	r2, [r3, #0]
}
 800ba18:	bf00      	nop
 800ba1a:	3714      	adds	r7, #20
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba22:	4770      	bx	lr

0800ba24 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b085      	sub	sp, #20
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	691b      	ldr	r3, [r3, #16]
 800ba30:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	685b      	ldr	r3, [r3, #4]
 800ba36:	687a      	ldr	r2, [r7, #4]
 800ba38:	6892      	ldr	r2, [r2, #8]
 800ba3a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	689b      	ldr	r3, [r3, #8]
 800ba40:	687a      	ldr	r2, [r7, #4]
 800ba42:	6852      	ldr	r2, [r2, #4]
 800ba44:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	685b      	ldr	r3, [r3, #4]
 800ba4a:	687a      	ldr	r2, [r7, #4]
 800ba4c:	429a      	cmp	r2, r3
 800ba4e:	d103      	bne.n	800ba58 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800ba50:	687b      	ldr	r3, [r7, #4]
 800ba52:	689a      	ldr	r2, [r3, #8]
 800ba54:	68fb      	ldr	r3, [r7, #12]
 800ba56:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	2200      	movs	r2, #0
 800ba5c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	1e5a      	subs	r2, r3, #1
 800ba64:	68fb      	ldr	r3, [r7, #12]
 800ba66:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681b      	ldr	r3, [r3, #0]
}
 800ba6c:	4618      	mov	r0, r3
 800ba6e:	3714      	adds	r7, #20
 800ba70:	46bd      	mov	sp, r7
 800ba72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba76:	4770      	bx	lr

0800ba78 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800ba78:	b580      	push	{r7, lr}
 800ba7a:	b084      	sub	sp, #16
 800ba7c:	af00      	add	r7, sp, #0
 800ba7e:	6078      	str	r0, [r7, #4]
 800ba80:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800ba82:	687b      	ldr	r3, [r7, #4]
 800ba84:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800ba86:	68fb      	ldr	r3, [r7, #12]
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d10b      	bne.n	800baa4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800ba8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba90:	b672      	cpsid	i
 800ba92:	f383 8811 	msr	BASEPRI, r3
 800ba96:	f3bf 8f6f 	isb	sy
 800ba9a:	f3bf 8f4f 	dsb	sy
 800ba9e:	b662      	cpsie	i
 800baa0:	60bb      	str	r3, [r7, #8]
 800baa2:	e7fe      	b.n	800baa2 <xQueueGenericReset+0x2a>

	taskENTER_CRITICAL();
 800baa4:	f001 ff00 	bl	800d8a8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baa8:	68fb      	ldr	r3, [r7, #12]
 800baaa:	681a      	ldr	r2, [r3, #0]
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bab0:	68f9      	ldr	r1, [r7, #12]
 800bab2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bab4:	fb01 f303 	mul.w	r3, r1, r3
 800bab8:	441a      	add	r2, r3
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800babe:	68fb      	ldr	r3, [r7, #12]
 800bac0:	2200      	movs	r2, #0
 800bac2:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	681a      	ldr	r2, [r3, #0]
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	681a      	ldr	r2, [r3, #0]
 800bad0:	68fb      	ldr	r3, [r7, #12]
 800bad2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bad4:	3b01      	subs	r3, #1
 800bad6:	68f9      	ldr	r1, [r7, #12]
 800bad8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bada:	fb01 f303 	mul.w	r3, r1, r3
 800bade:	441a      	add	r2, r3
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bae4:	68fb      	ldr	r3, [r7, #12]
 800bae6:	22ff      	movs	r2, #255	; 0xff
 800bae8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	22ff      	movs	r2, #255	; 0xff
 800baf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800baf4:	683b      	ldr	r3, [r7, #0]
 800baf6:	2b00      	cmp	r3, #0
 800baf8:	d114      	bne.n	800bb24 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	691b      	ldr	r3, [r3, #16]
 800bafe:	2b00      	cmp	r3, #0
 800bb00:	d01a      	beq.n	800bb38 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bb02:	68fb      	ldr	r3, [r7, #12]
 800bb04:	3310      	adds	r3, #16
 800bb06:	4618      	mov	r0, r3
 800bb08:	f001 f9ca 	bl	800cea0 <xTaskRemoveFromEventList>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d012      	beq.n	800bb38 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bb12:	4b0d      	ldr	r3, [pc, #52]	; (800bb48 <xQueueGenericReset+0xd0>)
 800bb14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bb18:	601a      	str	r2, [r3, #0]
 800bb1a:	f3bf 8f4f 	dsb	sy
 800bb1e:	f3bf 8f6f 	isb	sy
 800bb22:	e009      	b.n	800bb38 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bb24:	68fb      	ldr	r3, [r7, #12]
 800bb26:	3310      	adds	r3, #16
 800bb28:	4618      	mov	r0, r3
 800bb2a:	f7ff fef1 	bl	800b910 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bb2e:	68fb      	ldr	r3, [r7, #12]
 800bb30:	3324      	adds	r3, #36	; 0x24
 800bb32:	4618      	mov	r0, r3
 800bb34:	f7ff feec 	bl	800b910 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bb38:	f001 fee8 	bl	800d90c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bb3c:	2301      	movs	r3, #1
}
 800bb3e:	4618      	mov	r0, r3
 800bb40:	3710      	adds	r7, #16
 800bb42:	46bd      	mov	sp, r7
 800bb44:	bd80      	pop	{r7, pc}
 800bb46:	bf00      	nop
 800bb48:	e000ed04 	.word	0xe000ed04

0800bb4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	b08e      	sub	sp, #56	; 0x38
 800bb50:	af02      	add	r7, sp, #8
 800bb52:	60f8      	str	r0, [r7, #12]
 800bb54:	60b9      	str	r1, [r7, #8]
 800bb56:	607a      	str	r2, [r7, #4]
 800bb58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bb5a:	68fb      	ldr	r3, [r7, #12]
 800bb5c:	2b00      	cmp	r3, #0
 800bb5e:	d10b      	bne.n	800bb78 <xQueueGenericCreateStatic+0x2c>
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	b672      	cpsid	i
 800bb66:	f383 8811 	msr	BASEPRI, r3
 800bb6a:	f3bf 8f6f 	isb	sy
 800bb6e:	f3bf 8f4f 	dsb	sy
 800bb72:	b662      	cpsie	i
 800bb74:	62bb      	str	r3, [r7, #40]	; 0x28
 800bb76:	e7fe      	b.n	800bb76 <xQueueGenericCreateStatic+0x2a>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bb78:	683b      	ldr	r3, [r7, #0]
 800bb7a:	2b00      	cmp	r3, #0
 800bb7c:	d10b      	bne.n	800bb96 <xQueueGenericCreateStatic+0x4a>
 800bb7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb82:	b672      	cpsid	i
 800bb84:	f383 8811 	msr	BASEPRI, r3
 800bb88:	f3bf 8f6f 	isb	sy
 800bb8c:	f3bf 8f4f 	dsb	sy
 800bb90:	b662      	cpsie	i
 800bb92:	627b      	str	r3, [r7, #36]	; 0x24
 800bb94:	e7fe      	b.n	800bb94 <xQueueGenericCreateStatic+0x48>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	2b00      	cmp	r3, #0
 800bb9a:	d002      	beq.n	800bba2 <xQueueGenericCreateStatic+0x56>
 800bb9c:	68bb      	ldr	r3, [r7, #8]
 800bb9e:	2b00      	cmp	r3, #0
 800bba0:	d001      	beq.n	800bba6 <xQueueGenericCreateStatic+0x5a>
 800bba2:	2301      	movs	r3, #1
 800bba4:	e000      	b.n	800bba8 <xQueueGenericCreateStatic+0x5c>
 800bba6:	2300      	movs	r3, #0
 800bba8:	2b00      	cmp	r3, #0
 800bbaa:	d10b      	bne.n	800bbc4 <xQueueGenericCreateStatic+0x78>
 800bbac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbb0:	b672      	cpsid	i
 800bbb2:	f383 8811 	msr	BASEPRI, r3
 800bbb6:	f3bf 8f6f 	isb	sy
 800bbba:	f3bf 8f4f 	dsb	sy
 800bbbe:	b662      	cpsie	i
 800bbc0:	623b      	str	r3, [r7, #32]
 800bbc2:	e7fe      	b.n	800bbc2 <xQueueGenericCreateStatic+0x76>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	d102      	bne.n	800bbd0 <xQueueGenericCreateStatic+0x84>
 800bbca:	68bb      	ldr	r3, [r7, #8]
 800bbcc:	2b00      	cmp	r3, #0
 800bbce:	d101      	bne.n	800bbd4 <xQueueGenericCreateStatic+0x88>
 800bbd0:	2301      	movs	r3, #1
 800bbd2:	e000      	b.n	800bbd6 <xQueueGenericCreateStatic+0x8a>
 800bbd4:	2300      	movs	r3, #0
 800bbd6:	2b00      	cmp	r3, #0
 800bbd8:	d10b      	bne.n	800bbf2 <xQueueGenericCreateStatic+0xa6>
 800bbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbde:	b672      	cpsid	i
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	b662      	cpsie	i
 800bbee:	61fb      	str	r3, [r7, #28]
 800bbf0:	e7fe      	b.n	800bbf0 <xQueueGenericCreateStatic+0xa4>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800bbf2:	2348      	movs	r3, #72	; 0x48
 800bbf4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800bbf6:	697b      	ldr	r3, [r7, #20]
 800bbf8:	2b48      	cmp	r3, #72	; 0x48
 800bbfa:	d00b      	beq.n	800bc14 <xQueueGenericCreateStatic+0xc8>
 800bbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc00:	b672      	cpsid	i
 800bc02:	f383 8811 	msr	BASEPRI, r3
 800bc06:	f3bf 8f6f 	isb	sy
 800bc0a:	f3bf 8f4f 	dsb	sy
 800bc0e:	b662      	cpsie	i
 800bc10:	61bb      	str	r3, [r7, #24]
 800bc12:	e7fe      	b.n	800bc12 <xQueueGenericCreateStatic+0xc6>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800bc14:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800bc16:	683b      	ldr	r3, [r7, #0]
 800bc18:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800bc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d00d      	beq.n	800bc3c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800bc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc22:	2201      	movs	r2, #1
 800bc24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bc28:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800bc2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bc2e:	9300      	str	r3, [sp, #0]
 800bc30:	4613      	mov	r3, r2
 800bc32:	687a      	ldr	r2, [r7, #4]
 800bc34:	68b9      	ldr	r1, [r7, #8]
 800bc36:	68f8      	ldr	r0, [r7, #12]
 800bc38:	f000 f846 	bl	800bcc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bc3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800bc3e:	4618      	mov	r0, r3
 800bc40:	3730      	adds	r7, #48	; 0x30
 800bc42:	46bd      	mov	sp, r7
 800bc44:	bd80      	pop	{r7, pc}

0800bc46 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800bc46:	b580      	push	{r7, lr}
 800bc48:	b08a      	sub	sp, #40	; 0x28
 800bc4a:	af02      	add	r7, sp, #8
 800bc4c:	60f8      	str	r0, [r7, #12]
 800bc4e:	60b9      	str	r1, [r7, #8]
 800bc50:	4613      	mov	r3, r2
 800bc52:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bc54:	68fb      	ldr	r3, [r7, #12]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d10b      	bne.n	800bc72 <xQueueGenericCreate+0x2c>
 800bc5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc5e:	b672      	cpsid	i
 800bc60:	f383 8811 	msr	BASEPRI, r3
 800bc64:	f3bf 8f6f 	isb	sy
 800bc68:	f3bf 8f4f 	dsb	sy
 800bc6c:	b662      	cpsie	i
 800bc6e:	613b      	str	r3, [r7, #16]
 800bc70:	e7fe      	b.n	800bc70 <xQueueGenericCreate+0x2a>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bc72:	68bb      	ldr	r3, [r7, #8]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	d102      	bne.n	800bc7e <xQueueGenericCreate+0x38>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bc78:	2300      	movs	r3, #0
 800bc7a:	61fb      	str	r3, [r7, #28]
 800bc7c:	e004      	b.n	800bc88 <xQueueGenericCreate+0x42>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bc7e:	68fb      	ldr	r3, [r7, #12]
 800bc80:	68ba      	ldr	r2, [r7, #8]
 800bc82:	fb02 f303 	mul.w	r3, r2, r3
 800bc86:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800bc88:	69fb      	ldr	r3, [r7, #28]
 800bc8a:	3348      	adds	r3, #72	; 0x48
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	f001 feeb 	bl	800da68 <pvPortMalloc>
 800bc92:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bc94:	69bb      	ldr	r3, [r7, #24]
 800bc96:	2b00      	cmp	r3, #0
 800bc98:	d011      	beq.n	800bcbe <xQueueGenericCreate+0x78>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800bc9a:	69bb      	ldr	r3, [r7, #24]
 800bc9c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bc9e:	697b      	ldr	r3, [r7, #20]
 800bca0:	3348      	adds	r3, #72	; 0x48
 800bca2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800bca4:	69bb      	ldr	r3, [r7, #24]
 800bca6:	2200      	movs	r2, #0
 800bca8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bcac:	79fa      	ldrb	r2, [r7, #7]
 800bcae:	69bb      	ldr	r3, [r7, #24]
 800bcb0:	9300      	str	r3, [sp, #0]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	697a      	ldr	r2, [r7, #20]
 800bcb6:	68b9      	ldr	r1, [r7, #8]
 800bcb8:	68f8      	ldr	r0, [r7, #12]
 800bcba:	f000 f805 	bl	800bcc8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bcbe:	69bb      	ldr	r3, [r7, #24]
	}
 800bcc0:	4618      	mov	r0, r3
 800bcc2:	3720      	adds	r7, #32
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	bd80      	pop	{r7, pc}

0800bcc8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bcc8:	b580      	push	{r7, lr}
 800bcca:	b084      	sub	sp, #16
 800bccc:	af00      	add	r7, sp, #0
 800bcce:	60f8      	str	r0, [r7, #12]
 800bcd0:	60b9      	str	r1, [r7, #8]
 800bcd2:	607a      	str	r2, [r7, #4]
 800bcd4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bcd6:	68bb      	ldr	r3, [r7, #8]
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d103      	bne.n	800bce4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bcdc:	69bb      	ldr	r3, [r7, #24]
 800bcde:	69ba      	ldr	r2, [r7, #24]
 800bce0:	601a      	str	r2, [r3, #0]
 800bce2:	e002      	b.n	800bcea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bce4:	69bb      	ldr	r3, [r7, #24]
 800bce6:	687a      	ldr	r2, [r7, #4]
 800bce8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bcea:	69bb      	ldr	r3, [r7, #24]
 800bcec:	68fa      	ldr	r2, [r7, #12]
 800bcee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bcf0:	69bb      	ldr	r3, [r7, #24]
 800bcf2:	68ba      	ldr	r2, [r7, #8]
 800bcf4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bcf6:	2101      	movs	r1, #1
 800bcf8:	69b8      	ldr	r0, [r7, #24]
 800bcfa:	f7ff febd 	bl	800ba78 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bcfe:	bf00      	nop
 800bd00:	3710      	adds	r7, #16
 800bd02:	46bd      	mov	sp, r7
 800bd04:	bd80      	pop	{r7, pc}

0800bd06 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bd06:	b580      	push	{r7, lr}
 800bd08:	b082      	sub	sp, #8
 800bd0a:	af00      	add	r7, sp, #0
 800bd0c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bd0e:	687b      	ldr	r3, [r7, #4]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d00e      	beq.n	800bd32 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	2200      	movs	r2, #0
 800bd18:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	2200      	movs	r2, #0
 800bd1e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bd26:	2300      	movs	r3, #0
 800bd28:	2200      	movs	r2, #0
 800bd2a:	2100      	movs	r1, #0
 800bd2c:	6878      	ldr	r0, [r7, #4]
 800bd2e:	f000 f837 	bl	800bda0 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bd32:	bf00      	nop
 800bd34:	3708      	adds	r7, #8
 800bd36:	46bd      	mov	sp, r7
 800bd38:	bd80      	pop	{r7, pc}

0800bd3a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bd3a:	b580      	push	{r7, lr}
 800bd3c:	b086      	sub	sp, #24
 800bd3e:	af00      	add	r7, sp, #0
 800bd40:	4603      	mov	r3, r0
 800bd42:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd44:	2301      	movs	r3, #1
 800bd46:	617b      	str	r3, [r7, #20]
 800bd48:	2300      	movs	r3, #0
 800bd4a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bd4c:	79fb      	ldrb	r3, [r7, #7]
 800bd4e:	461a      	mov	r2, r3
 800bd50:	6939      	ldr	r1, [r7, #16]
 800bd52:	6978      	ldr	r0, [r7, #20]
 800bd54:	f7ff ff77 	bl	800bc46 <xQueueGenericCreate>
 800bd58:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd5a:	68f8      	ldr	r0, [r7, #12]
 800bd5c:	f7ff ffd3 	bl	800bd06 <prvInitialiseMutex>

		return xNewQueue;
 800bd60:	68fb      	ldr	r3, [r7, #12]
	}
 800bd62:	4618      	mov	r0, r3
 800bd64:	3718      	adds	r7, #24
 800bd66:	46bd      	mov	sp, r7
 800bd68:	bd80      	pop	{r7, pc}

0800bd6a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bd6a:	b580      	push	{r7, lr}
 800bd6c:	b088      	sub	sp, #32
 800bd6e:	af02      	add	r7, sp, #8
 800bd70:	4603      	mov	r3, r0
 800bd72:	6039      	str	r1, [r7, #0]
 800bd74:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bd76:	2301      	movs	r3, #1
 800bd78:	617b      	str	r3, [r7, #20]
 800bd7a:	2300      	movs	r3, #0
 800bd7c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bd7e:	79fb      	ldrb	r3, [r7, #7]
 800bd80:	9300      	str	r3, [sp, #0]
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	2200      	movs	r2, #0
 800bd86:	6939      	ldr	r1, [r7, #16]
 800bd88:	6978      	ldr	r0, [r7, #20]
 800bd8a:	f7ff fedf 	bl	800bb4c <xQueueGenericCreateStatic>
 800bd8e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bd90:	68f8      	ldr	r0, [r7, #12]
 800bd92:	f7ff ffb8 	bl	800bd06 <prvInitialiseMutex>

		return xNewQueue;
 800bd96:	68fb      	ldr	r3, [r7, #12]
	}
 800bd98:	4618      	mov	r0, r3
 800bd9a:	3718      	adds	r7, #24
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}

0800bda0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bda0:	b580      	push	{r7, lr}
 800bda2:	b08e      	sub	sp, #56	; 0x38
 800bda4:	af00      	add	r7, sp, #0
 800bda6:	60f8      	str	r0, [r7, #12]
 800bda8:	60b9      	str	r1, [r7, #8]
 800bdaa:	607a      	str	r2, [r7, #4]
 800bdac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bdb2:	68fb      	ldr	r3, [r7, #12]
 800bdb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bdb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d10b      	bne.n	800bdd4 <xQueueGenericSend+0x34>
 800bdbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc0:	b672      	cpsid	i
 800bdc2:	f383 8811 	msr	BASEPRI, r3
 800bdc6:	f3bf 8f6f 	isb	sy
 800bdca:	f3bf 8f4f 	dsb	sy
 800bdce:	b662      	cpsie	i
 800bdd0:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdd2:	e7fe      	b.n	800bdd2 <xQueueGenericSend+0x32>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bdd4:	68bb      	ldr	r3, [r7, #8]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d103      	bne.n	800bde2 <xQueueGenericSend+0x42>
 800bdda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d101      	bne.n	800bde6 <xQueueGenericSend+0x46>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueGenericSend+0x48>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d10b      	bne.n	800be04 <xQueueGenericSend+0x64>
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	b672      	cpsid	i
 800bdf2:	f383 8811 	msr	BASEPRI, r3
 800bdf6:	f3bf 8f6f 	isb	sy
 800bdfa:	f3bf 8f4f 	dsb	sy
 800bdfe:	b662      	cpsie	i
 800be00:	627b      	str	r3, [r7, #36]	; 0x24
 800be02:	e7fe      	b.n	800be02 <xQueueGenericSend+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2b02      	cmp	r3, #2
 800be08:	d103      	bne.n	800be12 <xQueueGenericSend+0x72>
 800be0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be0e:	2b01      	cmp	r3, #1
 800be10:	d101      	bne.n	800be16 <xQueueGenericSend+0x76>
 800be12:	2301      	movs	r3, #1
 800be14:	e000      	b.n	800be18 <xQueueGenericSend+0x78>
 800be16:	2300      	movs	r3, #0
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10b      	bne.n	800be34 <xQueueGenericSend+0x94>
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	b672      	cpsid	i
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	b662      	cpsie	i
 800be30:	623b      	str	r3, [r7, #32]
 800be32:	e7fe      	b.n	800be32 <xQueueGenericSend+0x92>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be34:	f001 f9f4 	bl	800d220 <xTaskGetSchedulerState>
 800be38:	4603      	mov	r3, r0
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d102      	bne.n	800be44 <xQueueGenericSend+0xa4>
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	2b00      	cmp	r3, #0
 800be42:	d101      	bne.n	800be48 <xQueueGenericSend+0xa8>
 800be44:	2301      	movs	r3, #1
 800be46:	e000      	b.n	800be4a <xQueueGenericSend+0xaa>
 800be48:	2300      	movs	r3, #0
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d10b      	bne.n	800be66 <xQueueGenericSend+0xc6>
 800be4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be52:	b672      	cpsid	i
 800be54:	f383 8811 	msr	BASEPRI, r3
 800be58:	f3bf 8f6f 	isb	sy
 800be5c:	f3bf 8f4f 	dsb	sy
 800be60:	b662      	cpsie	i
 800be62:	61fb      	str	r3, [r7, #28]
 800be64:	e7fe      	b.n	800be64 <xQueueGenericSend+0xc4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be66:	f001 fd1f 	bl	800d8a8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800be6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800be6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800be72:	429a      	cmp	r2, r3
 800be74:	d302      	bcc.n	800be7c <xQueueGenericSend+0xdc>
 800be76:	683b      	ldr	r3, [r7, #0]
 800be78:	2b02      	cmp	r3, #2
 800be7a:	d129      	bne.n	800bed0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800be7c:	683a      	ldr	r2, [r7, #0]
 800be7e:	68b9      	ldr	r1, [r7, #8]
 800be80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800be82:	f000 f9b7 	bl	800c1f4 <prvCopyDataToQueue>
 800be86:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d010      	beq.n	800beb2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be92:	3324      	adds	r3, #36	; 0x24
 800be94:	4618      	mov	r0, r3
 800be96:	f001 f803 	bl	800cea0 <xTaskRemoveFromEventList>
 800be9a:	4603      	mov	r3, r0
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d013      	beq.n	800bec8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bea0:	4b3f      	ldr	r3, [pc, #252]	; (800bfa0 <xQueueGenericSend+0x200>)
 800bea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bea6:	601a      	str	r2, [r3, #0]
 800bea8:	f3bf 8f4f 	dsb	sy
 800beac:	f3bf 8f6f 	isb	sy
 800beb0:	e00a      	b.n	800bec8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	2b00      	cmp	r3, #0
 800beb6:	d007      	beq.n	800bec8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800beb8:	4b39      	ldr	r3, [pc, #228]	; (800bfa0 <xQueueGenericSend+0x200>)
 800beba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bebe:	601a      	str	r2, [r3, #0]
 800bec0:	f3bf 8f4f 	dsb	sy
 800bec4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bec8:	f001 fd20 	bl	800d90c <vPortExitCritical>
				return pdPASS;
 800becc:	2301      	movs	r3, #1
 800bece:	e063      	b.n	800bf98 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d103      	bne.n	800bede <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bed6:	f001 fd19 	bl	800d90c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800beda:	2300      	movs	r3, #0
 800bedc:	e05c      	b.n	800bf98 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bede:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d106      	bne.n	800bef2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bee4:	f107 0314 	add.w	r3, r7, #20
 800bee8:	4618      	mov	r0, r3
 800beea:	f001 f83d 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800beee:	2301      	movs	r3, #1
 800bef0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bef2:	f001 fd0b 	bl	800d90c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bef6:	f000 fdb5 	bl	800ca64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800befa:	f001 fcd5 	bl	800d8a8 <vPortEnterCritical>
 800befe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf00:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf04:	b25b      	sxtb	r3, r3
 800bf06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf0a:	d103      	bne.n	800bf14 <xQueueGenericSend+0x174>
 800bf0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf0e:	2200      	movs	r2, #0
 800bf10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf16:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf1a:	b25b      	sxtb	r3, r3
 800bf1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf20:	d103      	bne.n	800bf2a <xQueueGenericSend+0x18a>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	2200      	movs	r2, #0
 800bf26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf2a:	f001 fcef 	bl	800d90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf2e:	1d3a      	adds	r2, r7, #4
 800bf30:	f107 0314 	add.w	r3, r7, #20
 800bf34:	4611      	mov	r1, r2
 800bf36:	4618      	mov	r0, r3
 800bf38:	f001 f82c 	bl	800cf94 <xTaskCheckForTimeOut>
 800bf3c:	4603      	mov	r3, r0
 800bf3e:	2b00      	cmp	r3, #0
 800bf40:	d124      	bne.n	800bf8c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bf42:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf44:	f000 fa28 	bl	800c398 <prvIsQueueFull>
 800bf48:	4603      	mov	r3, r0
 800bf4a:	2b00      	cmp	r3, #0
 800bf4c:	d018      	beq.n	800bf80 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf50:	3310      	adds	r3, #16
 800bf52:	687a      	ldr	r2, [r7, #4]
 800bf54:	4611      	mov	r1, r2
 800bf56:	4618      	mov	r0, r3
 800bf58:	f000 ff7c 	bl	800ce54 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bf5c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf5e:	f000 f9b3 	bl	800c2c8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bf62:	f000 fd8d 	bl	800ca80 <xTaskResumeAll>
 800bf66:	4603      	mov	r3, r0
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	f47f af7c 	bne.w	800be66 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800bf6e:	4b0c      	ldr	r3, [pc, #48]	; (800bfa0 <xQueueGenericSend+0x200>)
 800bf70:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bf74:	601a      	str	r2, [r3, #0]
 800bf76:	f3bf 8f4f 	dsb	sy
 800bf7a:	f3bf 8f6f 	isb	sy
 800bf7e:	e772      	b.n	800be66 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bf80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf82:	f000 f9a1 	bl	800c2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bf86:	f000 fd7b 	bl	800ca80 <xTaskResumeAll>
 800bf8a:	e76c      	b.n	800be66 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf8e:	f000 f99b 	bl	800c2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf92:	f000 fd75 	bl	800ca80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf96:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf98:	4618      	mov	r0, r3
 800bf9a:	3738      	adds	r7, #56	; 0x38
 800bf9c:	46bd      	mov	sp, r7
 800bf9e:	bd80      	pop	{r7, pc}
 800bfa0:	e000ed04 	.word	0xe000ed04

0800bfa4 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800bfa4:	b580      	push	{r7, lr}
 800bfa6:	b08e      	sub	sp, #56	; 0x38
 800bfa8:	af00      	add	r7, sp, #0
 800bfaa:	6078      	str	r0, [r7, #4]
 800bfac:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800bfae:	2300      	movs	r3, #0
 800bfb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800bfb6:	2300      	movs	r3, #0
 800bfb8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800bfba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d10b      	bne.n	800bfd8 <xQueueSemaphoreTake+0x34>
 800bfc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfc4:	b672      	cpsid	i
 800bfc6:	f383 8811 	msr	BASEPRI, r3
 800bfca:	f3bf 8f6f 	isb	sy
 800bfce:	f3bf 8f4f 	dsb	sy
 800bfd2:	b662      	cpsie	i
 800bfd4:	623b      	str	r3, [r7, #32]
 800bfd6:	e7fe      	b.n	800bfd6 <xQueueSemaphoreTake+0x32>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d00b      	beq.n	800bff8 <xQueueSemaphoreTake+0x54>
 800bfe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfe4:	b672      	cpsid	i
 800bfe6:	f383 8811 	msr	BASEPRI, r3
 800bfea:	f3bf 8f6f 	isb	sy
 800bfee:	f3bf 8f4f 	dsb	sy
 800bff2:	b662      	cpsie	i
 800bff4:	61fb      	str	r3, [r7, #28]
 800bff6:	e7fe      	b.n	800bff6 <xQueueSemaphoreTake+0x52>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bff8:	f001 f912 	bl	800d220 <xTaskGetSchedulerState>
 800bffc:	4603      	mov	r3, r0
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d102      	bne.n	800c008 <xQueueSemaphoreTake+0x64>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d101      	bne.n	800c00c <xQueueSemaphoreTake+0x68>
 800c008:	2301      	movs	r3, #1
 800c00a:	e000      	b.n	800c00e <xQueueSemaphoreTake+0x6a>
 800c00c:	2300      	movs	r3, #0
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d10b      	bne.n	800c02a <xQueueSemaphoreTake+0x86>
 800c012:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c016:	b672      	cpsid	i
 800c018:	f383 8811 	msr	BASEPRI, r3
 800c01c:	f3bf 8f6f 	isb	sy
 800c020:	f3bf 8f4f 	dsb	sy
 800c024:	b662      	cpsie	i
 800c026:	61bb      	str	r3, [r7, #24]
 800c028:	e7fe      	b.n	800c028 <xQueueSemaphoreTake+0x84>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c02a:	f001 fc3d 	bl	800d8a8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c032:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c036:	2b00      	cmp	r3, #0
 800c038:	d024      	beq.n	800c084 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c03a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c03c:	1e5a      	subs	r2, r3, #1
 800c03e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c040:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c044:	681b      	ldr	r3, [r3, #0]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d104      	bne.n	800c054 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c04a:	f001 faab 	bl	800d5a4 <pvTaskIncrementMutexHeldCount>
 800c04e:	4602      	mov	r2, r0
 800c050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c052:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	691b      	ldr	r3, [r3, #16]
 800c058:	2b00      	cmp	r3, #0
 800c05a:	d00f      	beq.n	800c07c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c05c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05e:	3310      	adds	r3, #16
 800c060:	4618      	mov	r0, r3
 800c062:	f000 ff1d 	bl	800cea0 <xTaskRemoveFromEventList>
 800c066:	4603      	mov	r3, r0
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d007      	beq.n	800c07c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c06c:	4b54      	ldr	r3, [pc, #336]	; (800c1c0 <xQueueSemaphoreTake+0x21c>)
 800c06e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c072:	601a      	str	r2, [r3, #0]
 800c074:	f3bf 8f4f 	dsb	sy
 800c078:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c07c:	f001 fc46 	bl	800d90c <vPortExitCritical>
				return pdPASS;
 800c080:	2301      	movs	r3, #1
 800c082:	e098      	b.n	800c1b6 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	2b00      	cmp	r3, #0
 800c088:	d112      	bne.n	800c0b0 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c08a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c08c:	2b00      	cmp	r3, #0
 800c08e:	d00b      	beq.n	800c0a8 <xQueueSemaphoreTake+0x104>
 800c090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c094:	b672      	cpsid	i
 800c096:	f383 8811 	msr	BASEPRI, r3
 800c09a:	f3bf 8f6f 	isb	sy
 800c09e:	f3bf 8f4f 	dsb	sy
 800c0a2:	b662      	cpsie	i
 800c0a4:	617b      	str	r3, [r7, #20]
 800c0a6:	e7fe      	b.n	800c0a6 <xQueueSemaphoreTake+0x102>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c0a8:	f001 fc30 	bl	800d90c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c0ac:	2300      	movs	r3, #0
 800c0ae:	e082      	b.n	800c1b6 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c0b2:	2b00      	cmp	r3, #0
 800c0b4:	d106      	bne.n	800c0c4 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c0b6:	f107 030c 	add.w	r3, r7, #12
 800c0ba:	4618      	mov	r0, r3
 800c0bc:	f000 ff54 	bl	800cf68 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c0c0:	2301      	movs	r3, #1
 800c0c2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c0c4:	f001 fc22 	bl	800d90c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c0c8:	f000 fccc 	bl	800ca64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c0cc:	f001 fbec 	bl	800d8a8 <vPortEnterCritical>
 800c0d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0d2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c0d6:	b25b      	sxtb	r3, r3
 800c0d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0dc:	d103      	bne.n	800c0e6 <xQueueSemaphoreTake+0x142>
 800c0de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c0e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c0ec:	b25b      	sxtb	r3, r3
 800c0ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c0f2:	d103      	bne.n	800c0fc <xQueueSemaphoreTake+0x158>
 800c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c0fc:	f001 fc06 	bl	800d90c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c100:	463a      	mov	r2, r7
 800c102:	f107 030c 	add.w	r3, r7, #12
 800c106:	4611      	mov	r1, r2
 800c108:	4618      	mov	r0, r3
 800c10a:	f000 ff43 	bl	800cf94 <xTaskCheckForTimeOut>
 800c10e:	4603      	mov	r3, r0
 800c110:	2b00      	cmp	r3, #0
 800c112:	d132      	bne.n	800c17a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c114:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c116:	f000 f929 	bl	800c36c <prvIsQueueEmpty>
 800c11a:	4603      	mov	r3, r0
 800c11c:	2b00      	cmp	r3, #0
 800c11e:	d026      	beq.n	800c16e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	2b00      	cmp	r3, #0
 800c126:	d109      	bne.n	800c13c <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800c128:	f001 fbbe 	bl	800d8a8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c12c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c12e:	689b      	ldr	r3, [r3, #8]
 800c130:	4618      	mov	r0, r3
 800c132:	f001 f893 	bl	800d25c <xTaskPriorityInherit>
 800c136:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c138:	f001 fbe8 	bl	800d90c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c13c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c13e:	3324      	adds	r3, #36	; 0x24
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	4611      	mov	r1, r2
 800c144:	4618      	mov	r0, r3
 800c146:	f000 fe85 	bl	800ce54 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c14a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c14c:	f000 f8bc 	bl	800c2c8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c150:	f000 fc96 	bl	800ca80 <xTaskResumeAll>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	f47f af67 	bne.w	800c02a <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800c15c:	4b18      	ldr	r3, [pc, #96]	; (800c1c0 <xQueueSemaphoreTake+0x21c>)
 800c15e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c162:	601a      	str	r2, [r3, #0]
 800c164:	f3bf 8f4f 	dsb	sy
 800c168:	f3bf 8f6f 	isb	sy
 800c16c:	e75d      	b.n	800c02a <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c16e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c170:	f000 f8aa 	bl	800c2c8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c174:	f000 fc84 	bl	800ca80 <xTaskResumeAll>
 800c178:	e757      	b.n	800c02a <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c17a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c17c:	f000 f8a4 	bl	800c2c8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c180:	f000 fc7e 	bl	800ca80 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c184:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c186:	f000 f8f1 	bl	800c36c <prvIsQueueEmpty>
 800c18a:	4603      	mov	r3, r0
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	f43f af4c 	beq.w	800c02a <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c194:	2b00      	cmp	r3, #0
 800c196:	d00d      	beq.n	800c1b4 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800c198:	f001 fb86 	bl	800d8a8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c19c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c19e:	f000 f811 	bl	800c1c4 <prvGetDisinheritPriorityAfterTimeout>
 800c1a2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c1a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1a6:	689b      	ldr	r3, [r3, #8]
 800c1a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	f001 f95e 	bl	800d46c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c1b0:	f001 fbac 	bl	800d90c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c1b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3738      	adds	r7, #56	; 0x38
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	bd80      	pop	{r7, pc}
 800c1be:	bf00      	nop
 800c1c0:	e000ed04 	.word	0xe000ed04

0800c1c4 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c1c4:	b480      	push	{r7}
 800c1c6:	b085      	sub	sp, #20
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d006      	beq.n	800c1e2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	f1c3 0307 	rsb	r3, r3, #7
 800c1de:	60fb      	str	r3, [r7, #12]
 800c1e0:	e001      	b.n	800c1e6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c1e2:	2300      	movs	r3, #0
 800c1e4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c1e6:	68fb      	ldr	r3, [r7, #12]
	}
 800c1e8:	4618      	mov	r0, r3
 800c1ea:	3714      	adds	r7, #20
 800c1ec:	46bd      	mov	sp, r7
 800c1ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1f2:	4770      	bx	lr

0800c1f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	b086      	sub	sp, #24
 800c1f8:	af00      	add	r7, sp, #0
 800c1fa:	60f8      	str	r0, [r7, #12]
 800c1fc:	60b9      	str	r1, [r7, #8]
 800c1fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c200:	2300      	movs	r3, #0
 800c202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c204:	68fb      	ldr	r3, [r7, #12]
 800c206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c20a:	68fb      	ldr	r3, [r7, #12]
 800c20c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d10d      	bne.n	800c22e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d14d      	bne.n	800c2b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	689b      	ldr	r3, [r3, #8]
 800c21e:	4618      	mov	r0, r3
 800c220:	f001 f89c 	bl	800d35c <xTaskPriorityDisinherit>
 800c224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	2200      	movs	r2, #0
 800c22a:	609a      	str	r2, [r3, #8]
 800c22c:	e043      	b.n	800c2b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b00      	cmp	r3, #0
 800c232:	d119      	bne.n	800c268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c234:	68fb      	ldr	r3, [r7, #12]
 800c236:	6858      	ldr	r0, [r3, #4]
 800c238:	68fb      	ldr	r3, [r7, #12]
 800c23a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c23c:	461a      	mov	r2, r3
 800c23e:	68b9      	ldr	r1, [r7, #8]
 800c240:	f001 fe20 	bl	800de84 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c244:	68fb      	ldr	r3, [r7, #12]
 800c246:	685a      	ldr	r2, [r3, #4]
 800c248:	68fb      	ldr	r3, [r7, #12]
 800c24a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c24c:	441a      	add	r2, r3
 800c24e:	68fb      	ldr	r3, [r7, #12]
 800c250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c252:	68fb      	ldr	r3, [r7, #12]
 800c254:	685a      	ldr	r2, [r3, #4]
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	689b      	ldr	r3, [r3, #8]
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d32b      	bcc.n	800c2b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c25e:	68fb      	ldr	r3, [r7, #12]
 800c260:	681a      	ldr	r2, [r3, #0]
 800c262:	68fb      	ldr	r3, [r7, #12]
 800c264:	605a      	str	r2, [r3, #4]
 800c266:	e026      	b.n	800c2b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	68d8      	ldr	r0, [r3, #12]
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c270:	461a      	mov	r2, r3
 800c272:	68b9      	ldr	r1, [r7, #8]
 800c274:	f001 fe06 	bl	800de84 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c278:	68fb      	ldr	r3, [r7, #12]
 800c27a:	68da      	ldr	r2, [r3, #12]
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c280:	425b      	negs	r3, r3
 800c282:	441a      	add	r2, r3
 800c284:	68fb      	ldr	r3, [r7, #12]
 800c286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	68da      	ldr	r2, [r3, #12]
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	681b      	ldr	r3, [r3, #0]
 800c290:	429a      	cmp	r2, r3
 800c292:	d207      	bcs.n	800c2a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c294:	68fb      	ldr	r3, [r7, #12]
 800c296:	689a      	ldr	r2, [r3, #8]
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29c:	425b      	negs	r3, r3
 800c29e:	441a      	add	r2, r3
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c2a4:	687b      	ldr	r3, [r7, #4]
 800c2a6:	2b02      	cmp	r3, #2
 800c2a8:	d105      	bne.n	800c2b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c2aa:	693b      	ldr	r3, [r7, #16]
 800c2ac:	2b00      	cmp	r3, #0
 800c2ae:	d002      	beq.n	800c2b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c2b0:	693b      	ldr	r3, [r7, #16]
 800c2b2:	3b01      	subs	r3, #1
 800c2b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c2b6:	693b      	ldr	r3, [r7, #16]
 800c2b8:	1c5a      	adds	r2, r3, #1
 800c2ba:	68fb      	ldr	r3, [r7, #12]
 800c2bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c2be:	697b      	ldr	r3, [r7, #20]
}
 800c2c0:	4618      	mov	r0, r3
 800c2c2:	3718      	adds	r7, #24
 800c2c4:	46bd      	mov	sp, r7
 800c2c6:	bd80      	pop	{r7, pc}

0800c2c8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c2c8:	b580      	push	{r7, lr}
 800c2ca:	b084      	sub	sp, #16
 800c2cc:	af00      	add	r7, sp, #0
 800c2ce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c2d0:	f001 faea 	bl	800d8a8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c2d4:	687b      	ldr	r3, [r7, #4]
 800c2d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2da:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c2dc:	e011      	b.n	800c302 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c2de:	687b      	ldr	r3, [r7, #4]
 800c2e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d012      	beq.n	800c30c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c2e6:	687b      	ldr	r3, [r7, #4]
 800c2e8:	3324      	adds	r3, #36	; 0x24
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	f000 fdd8 	bl	800cea0 <xTaskRemoveFromEventList>
 800c2f0:	4603      	mov	r3, r0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d001      	beq.n	800c2fa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c2f6:	f000 feb1 	bl	800d05c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c2fa:	7bfb      	ldrb	r3, [r7, #15]
 800c2fc:	3b01      	subs	r3, #1
 800c2fe:	b2db      	uxtb	r3, r3
 800c300:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c302:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c306:	2b00      	cmp	r3, #0
 800c308:	dce9      	bgt.n	800c2de <prvUnlockQueue+0x16>
 800c30a:	e000      	b.n	800c30e <prvUnlockQueue+0x46>
					break;
 800c30c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	22ff      	movs	r2, #255	; 0xff
 800c312:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c316:	f001 faf9 	bl	800d90c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c31a:	f001 fac5 	bl	800d8a8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c324:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c326:	e011      	b.n	800c34c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	691b      	ldr	r3, [r3, #16]
 800c32c:	2b00      	cmp	r3, #0
 800c32e:	d012      	beq.n	800c356 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	3310      	adds	r3, #16
 800c334:	4618      	mov	r0, r3
 800c336:	f000 fdb3 	bl	800cea0 <xTaskRemoveFromEventList>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d001      	beq.n	800c344 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c340:	f000 fe8c 	bl	800d05c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c344:	7bbb      	ldrb	r3, [r7, #14]
 800c346:	3b01      	subs	r3, #1
 800c348:	b2db      	uxtb	r3, r3
 800c34a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c34c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c350:	2b00      	cmp	r3, #0
 800c352:	dce9      	bgt.n	800c328 <prvUnlockQueue+0x60>
 800c354:	e000      	b.n	800c358 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c356:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	22ff      	movs	r2, #255	; 0xff
 800c35c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c360:	f001 fad4 	bl	800d90c <vPortExitCritical>
}
 800c364:	bf00      	nop
 800c366:	3710      	adds	r7, #16
 800c368:	46bd      	mov	sp, r7
 800c36a:	bd80      	pop	{r7, pc}

0800c36c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c374:	f001 fa98 	bl	800d8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d102      	bne.n	800c386 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c380:	2301      	movs	r3, #1
 800c382:	60fb      	str	r3, [r7, #12]
 800c384:	e001      	b.n	800c38a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c386:	2300      	movs	r3, #0
 800c388:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c38a:	f001 fabf 	bl	800d90c <vPortExitCritical>

	return xReturn;
 800c38e:	68fb      	ldr	r3, [r7, #12]
}
 800c390:	4618      	mov	r0, r3
 800c392:	3710      	adds	r7, #16
 800c394:	46bd      	mov	sp, r7
 800c396:	bd80      	pop	{r7, pc}

0800c398 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c398:	b580      	push	{r7, lr}
 800c39a:	b084      	sub	sp, #16
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c3a0:	f001 fa82 	bl	800d8a8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c3a4:	687b      	ldr	r3, [r7, #4]
 800c3a6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c3a8:	687b      	ldr	r3, [r7, #4]
 800c3aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c3ac:	429a      	cmp	r2, r3
 800c3ae:	d102      	bne.n	800c3b6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c3b0:	2301      	movs	r3, #1
 800c3b2:	60fb      	str	r3, [r7, #12]
 800c3b4:	e001      	b.n	800c3ba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c3b6:	2300      	movs	r3, #0
 800c3b8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c3ba:	f001 faa7 	bl	800d90c <vPortExitCritical>

	return xReturn;
 800c3be:	68fb      	ldr	r3, [r7, #12]
}
 800c3c0:	4618      	mov	r0, r3
 800c3c2:	3710      	adds	r7, #16
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	bd80      	pop	{r7, pc}

0800c3c8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c3c8:	b580      	push	{r7, lr}
 800c3ca:	b08e      	sub	sp, #56	; 0x38
 800c3cc:	af04      	add	r7, sp, #16
 800c3ce:	60f8      	str	r0, [r7, #12]
 800c3d0:	60b9      	str	r1, [r7, #8]
 800c3d2:	607a      	str	r2, [r7, #4]
 800c3d4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c3d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c3d8:	2b00      	cmp	r3, #0
 800c3da:	d10b      	bne.n	800c3f4 <xTaskCreateStatic+0x2c>
 800c3dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3e0:	b672      	cpsid	i
 800c3e2:	f383 8811 	msr	BASEPRI, r3
 800c3e6:	f3bf 8f6f 	isb	sy
 800c3ea:	f3bf 8f4f 	dsb	sy
 800c3ee:	b662      	cpsie	i
 800c3f0:	623b      	str	r3, [r7, #32]
 800c3f2:	e7fe      	b.n	800c3f2 <xTaskCreateStatic+0x2a>
		configASSERT( pxTaskBuffer != NULL );
 800c3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d10b      	bne.n	800c412 <xTaskCreateStatic+0x4a>
 800c3fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3fe:	b672      	cpsid	i
 800c400:	f383 8811 	msr	BASEPRI, r3
 800c404:	f3bf 8f6f 	isb	sy
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	b662      	cpsie	i
 800c40e:	61fb      	str	r3, [r7, #28]
 800c410:	e7fe      	b.n	800c410 <xTaskCreateStatic+0x48>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c412:	2358      	movs	r3, #88	; 0x58
 800c414:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c416:	693b      	ldr	r3, [r7, #16]
 800c418:	2b58      	cmp	r3, #88	; 0x58
 800c41a:	d00b      	beq.n	800c434 <xTaskCreateStatic+0x6c>
 800c41c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c420:	b672      	cpsid	i
 800c422:	f383 8811 	msr	BASEPRI, r3
 800c426:	f3bf 8f6f 	isb	sy
 800c42a:	f3bf 8f4f 	dsb	sy
 800c42e:	b662      	cpsie	i
 800c430:	61bb      	str	r3, [r7, #24]
 800c432:	e7fe      	b.n	800c432 <xTaskCreateStatic+0x6a>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c434:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c438:	2b00      	cmp	r3, #0
 800c43a:	d01e      	beq.n	800c47a <xTaskCreateStatic+0xb2>
 800c43c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d01b      	beq.n	800c47a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c444:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c448:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c44a:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c44c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c44e:	2202      	movs	r2, #2
 800c450:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c454:	2300      	movs	r3, #0
 800c456:	9303      	str	r3, [sp, #12]
 800c458:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c45a:	9302      	str	r3, [sp, #8]
 800c45c:	f107 0314 	add.w	r3, r7, #20
 800c460:	9301      	str	r3, [sp, #4]
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	9300      	str	r3, [sp, #0]
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	687a      	ldr	r2, [r7, #4]
 800c46a:	68b9      	ldr	r1, [r7, #8]
 800c46c:	68f8      	ldr	r0, [r7, #12]
 800c46e:	f000 f850 	bl	800c512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c472:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c474:	f000 f8e0 	bl	800c638 <prvAddNewTaskToReadyList>
 800c478:	e001      	b.n	800c47e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800c47a:	2300      	movs	r3, #0
 800c47c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c47e:	697b      	ldr	r3, [r7, #20]
	}
 800c480:	4618      	mov	r0, r3
 800c482:	3728      	adds	r7, #40	; 0x28
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}

0800c488 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b08c      	sub	sp, #48	; 0x30
 800c48c:	af04      	add	r7, sp, #16
 800c48e:	60f8      	str	r0, [r7, #12]
 800c490:	60b9      	str	r1, [r7, #8]
 800c492:	603b      	str	r3, [r7, #0]
 800c494:	4613      	mov	r3, r2
 800c496:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c498:	88fb      	ldrh	r3, [r7, #6]
 800c49a:	009b      	lsls	r3, r3, #2
 800c49c:	4618      	mov	r0, r3
 800c49e:	f001 fae3 	bl	800da68 <pvPortMalloc>
 800c4a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c4a4:	697b      	ldr	r3, [r7, #20]
 800c4a6:	2b00      	cmp	r3, #0
 800c4a8:	d00e      	beq.n	800c4c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c4aa:	2058      	movs	r0, #88	; 0x58
 800c4ac:	f001 fadc 	bl	800da68 <pvPortMalloc>
 800c4b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c4b2:	69fb      	ldr	r3, [r7, #28]
 800c4b4:	2b00      	cmp	r3, #0
 800c4b6:	d003      	beq.n	800c4c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c4b8:	69fb      	ldr	r3, [r7, #28]
 800c4ba:	697a      	ldr	r2, [r7, #20]
 800c4bc:	631a      	str	r2, [r3, #48]	; 0x30
 800c4be:	e005      	b.n	800c4cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c4c0:	6978      	ldr	r0, [r7, #20]
 800c4c2:	f001 fb9d 	bl	800dc00 <vPortFree>
 800c4c6:	e001      	b.n	800c4cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d017      	beq.n	800c502 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c4d2:	69fb      	ldr	r3, [r7, #28]
 800c4d4:	2200      	movs	r2, #0
 800c4d6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c4da:	88fa      	ldrh	r2, [r7, #6]
 800c4dc:	2300      	movs	r3, #0
 800c4de:	9303      	str	r3, [sp, #12]
 800c4e0:	69fb      	ldr	r3, [r7, #28]
 800c4e2:	9302      	str	r3, [sp, #8]
 800c4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4e6:	9301      	str	r3, [sp, #4]
 800c4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4ea:	9300      	str	r3, [sp, #0]
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	68b9      	ldr	r1, [r7, #8]
 800c4f0:	68f8      	ldr	r0, [r7, #12]
 800c4f2:	f000 f80e 	bl	800c512 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c4f6:	69f8      	ldr	r0, [r7, #28]
 800c4f8:	f000 f89e 	bl	800c638 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c4fc:	2301      	movs	r3, #1
 800c4fe:	61bb      	str	r3, [r7, #24]
 800c500:	e002      	b.n	800c508 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c502:	f04f 33ff 	mov.w	r3, #4294967295
 800c506:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c508:	69bb      	ldr	r3, [r7, #24]
	}
 800c50a:	4618      	mov	r0, r3
 800c50c:	3720      	adds	r7, #32
 800c50e:	46bd      	mov	sp, r7
 800c510:	bd80      	pop	{r7, pc}

0800c512 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c512:	b580      	push	{r7, lr}
 800c514:	b088      	sub	sp, #32
 800c516:	af00      	add	r7, sp, #0
 800c518:	60f8      	str	r0, [r7, #12]
 800c51a:	60b9      	str	r1, [r7, #8]
 800c51c:	607a      	str	r2, [r7, #4]
 800c51e:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c522:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	009b      	lsls	r3, r3, #2
 800c528:	461a      	mov	r2, r3
 800c52a:	21a5      	movs	r1, #165	; 0xa5
 800c52c:	f001 fcb5 	bl	800de9a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c532:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c534:	6879      	ldr	r1, [r7, #4]
 800c536:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c53a:	440b      	add	r3, r1
 800c53c:	009b      	lsls	r3, r3, #2
 800c53e:	4413      	add	r3, r2
 800c540:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c542:	69bb      	ldr	r3, [r7, #24]
 800c544:	f023 0307 	bic.w	r3, r3, #7
 800c548:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c54a:	69bb      	ldr	r3, [r7, #24]
 800c54c:	f003 0307 	and.w	r3, r3, #7
 800c550:	2b00      	cmp	r3, #0
 800c552:	d00b      	beq.n	800c56c <prvInitialiseNewTask+0x5a>
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	b672      	cpsid	i
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	b662      	cpsie	i
 800c568:	617b      	str	r3, [r7, #20]
 800c56a:	e7fe      	b.n	800c56a <prvInitialiseNewTask+0x58>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c56c:	68bb      	ldr	r3, [r7, #8]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d01f      	beq.n	800c5b2 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c572:	2300      	movs	r3, #0
 800c574:	61fb      	str	r3, [r7, #28]
 800c576:	e012      	b.n	800c59e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c578:	68ba      	ldr	r2, [r7, #8]
 800c57a:	69fb      	ldr	r3, [r7, #28]
 800c57c:	4413      	add	r3, r2
 800c57e:	7819      	ldrb	r1, [r3, #0]
 800c580:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c582:	69fb      	ldr	r3, [r7, #28]
 800c584:	4413      	add	r3, r2
 800c586:	3334      	adds	r3, #52	; 0x34
 800c588:	460a      	mov	r2, r1
 800c58a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c58c:	68ba      	ldr	r2, [r7, #8]
 800c58e:	69fb      	ldr	r3, [r7, #28]
 800c590:	4413      	add	r3, r2
 800c592:	781b      	ldrb	r3, [r3, #0]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d006      	beq.n	800c5a6 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c598:	69fb      	ldr	r3, [r7, #28]
 800c59a:	3301      	adds	r3, #1
 800c59c:	61fb      	str	r3, [r7, #28]
 800c59e:	69fb      	ldr	r3, [r7, #28]
 800c5a0:	2b0f      	cmp	r3, #15
 800c5a2:	d9e9      	bls.n	800c578 <prvInitialiseNewTask+0x66>
 800c5a4:	e000      	b.n	800c5a8 <prvInitialiseNewTask+0x96>
			{
				break;
 800c5a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c5a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c5b0:	e003      	b.n	800c5ba <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c5b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5b4:	2200      	movs	r2, #0
 800c5b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5bc:	2b06      	cmp	r3, #6
 800c5be:	d901      	bls.n	800c5c4 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c5c0:	2306      	movs	r3, #6
 800c5c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c5c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c5ce:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c5d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d2:	2200      	movs	r2, #0
 800c5d4:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c5d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5d8:	3304      	adds	r3, #4
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7ff f9b8 	bl	800b950 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	3318      	adds	r3, #24
 800c5e4:	4618      	mov	r0, r3
 800c5e6:	f7ff f9b3 	bl	800b950 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c5ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5f2:	f1c3 0207 	rsb	r2, r3, #7
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c5fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c602:	2200      	movs	r2, #0
 800c604:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c606:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c608:	2200      	movs	r2, #0
 800c60a:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c60c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c60e:	2200      	movs	r2, #0
 800c610:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c614:	683a      	ldr	r2, [r7, #0]
 800c616:	68f9      	ldr	r1, [r7, #12]
 800c618:	69b8      	ldr	r0, [r7, #24]
 800c61a:	f001 f83d 	bl	800d698 <pxPortInitialiseStack>
 800c61e:	4602      	mov	r2, r0
 800c620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c622:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c624:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c626:	2b00      	cmp	r3, #0
 800c628:	d002      	beq.n	800c630 <prvInitialiseNewTask+0x11e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c62a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c62c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c62e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c630:	bf00      	nop
 800c632:	3720      	adds	r7, #32
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}

0800c638 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c638:	b580      	push	{r7, lr}
 800c63a:	b082      	sub	sp, #8
 800c63c:	af00      	add	r7, sp, #0
 800c63e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c640:	f001 f932 	bl	800d8a8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c644:	4b2a      	ldr	r3, [pc, #168]	; (800c6f0 <prvAddNewTaskToReadyList+0xb8>)
 800c646:	681b      	ldr	r3, [r3, #0]
 800c648:	3301      	adds	r3, #1
 800c64a:	4a29      	ldr	r2, [pc, #164]	; (800c6f0 <prvAddNewTaskToReadyList+0xb8>)
 800c64c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c64e:	4b29      	ldr	r3, [pc, #164]	; (800c6f4 <prvAddNewTaskToReadyList+0xbc>)
 800c650:	681b      	ldr	r3, [r3, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d109      	bne.n	800c66a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c656:	4a27      	ldr	r2, [pc, #156]	; (800c6f4 <prvAddNewTaskToReadyList+0xbc>)
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c65c:	4b24      	ldr	r3, [pc, #144]	; (800c6f0 <prvAddNewTaskToReadyList+0xb8>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	2b01      	cmp	r3, #1
 800c662:	d110      	bne.n	800c686 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c664:	f000 fd20 	bl	800d0a8 <prvInitialiseTaskLists>
 800c668:	e00d      	b.n	800c686 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c66a:	4b23      	ldr	r3, [pc, #140]	; (800c6f8 <prvAddNewTaskToReadyList+0xc0>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d109      	bne.n	800c686 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c672:	4b20      	ldr	r3, [pc, #128]	; (800c6f4 <prvAddNewTaskToReadyList+0xbc>)
 800c674:	681b      	ldr	r3, [r3, #0]
 800c676:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c67c:	429a      	cmp	r2, r3
 800c67e:	d802      	bhi.n	800c686 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c680:	4a1c      	ldr	r2, [pc, #112]	; (800c6f4 <prvAddNewTaskToReadyList+0xbc>)
 800c682:	687b      	ldr	r3, [r7, #4]
 800c684:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c686:	4b1d      	ldr	r3, [pc, #116]	; (800c6fc <prvAddNewTaskToReadyList+0xc4>)
 800c688:	681b      	ldr	r3, [r3, #0]
 800c68a:	3301      	adds	r3, #1
 800c68c:	4a1b      	ldr	r2, [pc, #108]	; (800c6fc <prvAddNewTaskToReadyList+0xc4>)
 800c68e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c694:	2201      	movs	r2, #1
 800c696:	409a      	lsls	r2, r3
 800c698:	4b19      	ldr	r3, [pc, #100]	; (800c700 <prvAddNewTaskToReadyList+0xc8>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	4313      	orrs	r3, r2
 800c69e:	4a18      	ldr	r2, [pc, #96]	; (800c700 <prvAddNewTaskToReadyList+0xc8>)
 800c6a0:	6013      	str	r3, [r2, #0]
 800c6a2:	687b      	ldr	r3, [r7, #4]
 800c6a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6a6:	4613      	mov	r3, r2
 800c6a8:	009b      	lsls	r3, r3, #2
 800c6aa:	4413      	add	r3, r2
 800c6ac:	009b      	lsls	r3, r3, #2
 800c6ae:	4a15      	ldr	r2, [pc, #84]	; (800c704 <prvAddNewTaskToReadyList+0xcc>)
 800c6b0:	441a      	add	r2, r3
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	3304      	adds	r3, #4
 800c6b6:	4619      	mov	r1, r3
 800c6b8:	4610      	mov	r0, r2
 800c6ba:	f7ff f956 	bl	800b96a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c6be:	f001 f925 	bl	800d90c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c6c2:	4b0d      	ldr	r3, [pc, #52]	; (800c6f8 <prvAddNewTaskToReadyList+0xc0>)
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d00e      	beq.n	800c6e8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c6ca:	4b0a      	ldr	r3, [pc, #40]	; (800c6f4 <prvAddNewTaskToReadyList+0xbc>)
 800c6cc:	681b      	ldr	r3, [r3, #0]
 800c6ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c6d4:	429a      	cmp	r2, r3
 800c6d6:	d207      	bcs.n	800c6e8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c6d8:	4b0b      	ldr	r3, [pc, #44]	; (800c708 <prvAddNewTaskToReadyList+0xd0>)
 800c6da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6de:	601a      	str	r2, [r3, #0]
 800c6e0:	f3bf 8f4f 	dsb	sy
 800c6e4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c6e8:	bf00      	nop
 800c6ea:	3708      	adds	r7, #8
 800c6ec:	46bd      	mov	sp, r7
 800c6ee:	bd80      	pop	{r7, pc}
 800c6f0:	2000060c 	.word	0x2000060c
 800c6f4:	2000050c 	.word	0x2000050c
 800c6f8:	20000618 	.word	0x20000618
 800c6fc:	20000628 	.word	0x20000628
 800c700:	20000614 	.word	0x20000614
 800c704:	20000510 	.word	0x20000510
 800c708:	e000ed04 	.word	0xe000ed04

0800c70c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08a      	sub	sp, #40	; 0x28
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c716:	2300      	movs	r3, #0
 800c718:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d10b      	bne.n	800c738 <vTaskDelayUntil+0x2c>
 800c720:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c724:	b672      	cpsid	i
 800c726:	f383 8811 	msr	BASEPRI, r3
 800c72a:	f3bf 8f6f 	isb	sy
 800c72e:	f3bf 8f4f 	dsb	sy
 800c732:	b662      	cpsie	i
 800c734:	617b      	str	r3, [r7, #20]
 800c736:	e7fe      	b.n	800c736 <vTaskDelayUntil+0x2a>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c738:	683b      	ldr	r3, [r7, #0]
 800c73a:	2b00      	cmp	r3, #0
 800c73c:	d10b      	bne.n	800c756 <vTaskDelayUntil+0x4a>
 800c73e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c742:	b672      	cpsid	i
 800c744:	f383 8811 	msr	BASEPRI, r3
 800c748:	f3bf 8f6f 	isb	sy
 800c74c:	f3bf 8f4f 	dsb	sy
 800c750:	b662      	cpsie	i
 800c752:	613b      	str	r3, [r7, #16]
 800c754:	e7fe      	b.n	800c754 <vTaskDelayUntil+0x48>
		configASSERT( uxSchedulerSuspended == 0 );
 800c756:	4b2a      	ldr	r3, [pc, #168]	; (800c800 <vTaskDelayUntil+0xf4>)
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d00b      	beq.n	800c776 <vTaskDelayUntil+0x6a>
 800c75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c762:	b672      	cpsid	i
 800c764:	f383 8811 	msr	BASEPRI, r3
 800c768:	f3bf 8f6f 	isb	sy
 800c76c:	f3bf 8f4f 	dsb	sy
 800c770:	b662      	cpsie	i
 800c772:	60fb      	str	r3, [r7, #12]
 800c774:	e7fe      	b.n	800c774 <vTaskDelayUntil+0x68>

		vTaskSuspendAll();
 800c776:	f000 f975 	bl	800ca64 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c77a:	4b22      	ldr	r3, [pc, #136]	; (800c804 <vTaskDelayUntil+0xf8>)
 800c77c:	681b      	ldr	r3, [r3, #0]
 800c77e:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	683a      	ldr	r2, [r7, #0]
 800c786:	4413      	add	r3, r2
 800c788:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	6a3a      	ldr	r2, [r7, #32]
 800c790:	429a      	cmp	r2, r3
 800c792:	d20b      	bcs.n	800c7ac <vTaskDelayUntil+0xa0>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	681b      	ldr	r3, [r3, #0]
 800c798:	69fa      	ldr	r2, [r7, #28]
 800c79a:	429a      	cmp	r2, r3
 800c79c:	d211      	bcs.n	800c7c2 <vTaskDelayUntil+0xb6>
 800c79e:	69fa      	ldr	r2, [r7, #28]
 800c7a0:	6a3b      	ldr	r3, [r7, #32]
 800c7a2:	429a      	cmp	r2, r3
 800c7a4:	d90d      	bls.n	800c7c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c7a6:	2301      	movs	r3, #1
 800c7a8:	627b      	str	r3, [r7, #36]	; 0x24
 800c7aa:	e00a      	b.n	800c7c2 <vTaskDelayUntil+0xb6>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	69fa      	ldr	r2, [r7, #28]
 800c7b2:	429a      	cmp	r2, r3
 800c7b4:	d303      	bcc.n	800c7be <vTaskDelayUntil+0xb2>
 800c7b6:	69fa      	ldr	r2, [r7, #28]
 800c7b8:	6a3b      	ldr	r3, [r7, #32]
 800c7ba:	429a      	cmp	r2, r3
 800c7bc:	d901      	bls.n	800c7c2 <vTaskDelayUntil+0xb6>
				{
					xShouldDelay = pdTRUE;
 800c7be:	2301      	movs	r3, #1
 800c7c0:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	69fa      	ldr	r2, [r7, #28]
 800c7c6:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c7ca:	2b00      	cmp	r3, #0
 800c7cc:	d006      	beq.n	800c7dc <vTaskDelayUntil+0xd0>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c7ce:	69fa      	ldr	r2, [r7, #28]
 800c7d0:	6a3b      	ldr	r3, [r7, #32]
 800c7d2:	1ad3      	subs	r3, r2, r3
 800c7d4:	2100      	movs	r1, #0
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	f000 fef8 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c7dc:	f000 f950 	bl	800ca80 <xTaskResumeAll>
 800c7e0:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d107      	bne.n	800c7f8 <vTaskDelayUntil+0xec>
		{
			portYIELD_WITHIN_API();
 800c7e8:	4b07      	ldr	r3, [pc, #28]	; (800c808 <vTaskDelayUntil+0xfc>)
 800c7ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c7ee:	601a      	str	r2, [r3, #0]
 800c7f0:	f3bf 8f4f 	dsb	sy
 800c7f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c7f8:	bf00      	nop
 800c7fa:	3728      	adds	r7, #40	; 0x28
 800c7fc:	46bd      	mov	sp, r7
 800c7fe:	bd80      	pop	{r7, pc}
 800c800:	20000634 	.word	0x20000634
 800c804:	20000610 	.word	0x20000610
 800c808:	e000ed04 	.word	0xe000ed04

0800c80c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c80c:	b580      	push	{r7, lr}
 800c80e:	b084      	sub	sp, #16
 800c810:	af00      	add	r7, sp, #0
 800c812:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c814:	2300      	movs	r3, #0
 800c816:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c818:	687b      	ldr	r3, [r7, #4]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d018      	beq.n	800c850 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c81e:	4b14      	ldr	r3, [pc, #80]	; (800c870 <vTaskDelay+0x64>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d00b      	beq.n	800c83e <vTaskDelay+0x32>
 800c826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c82a:	b672      	cpsid	i
 800c82c:	f383 8811 	msr	BASEPRI, r3
 800c830:	f3bf 8f6f 	isb	sy
 800c834:	f3bf 8f4f 	dsb	sy
 800c838:	b662      	cpsie	i
 800c83a:	60bb      	str	r3, [r7, #8]
 800c83c:	e7fe      	b.n	800c83c <vTaskDelay+0x30>
			vTaskSuspendAll();
 800c83e:	f000 f911 	bl	800ca64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c842:	2100      	movs	r1, #0
 800c844:	6878      	ldr	r0, [r7, #4]
 800c846:	f000 fec1 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c84a:	f000 f919 	bl	800ca80 <xTaskResumeAll>
 800c84e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c850:	68fb      	ldr	r3, [r7, #12]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d107      	bne.n	800c866 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800c856:	4b07      	ldr	r3, [pc, #28]	; (800c874 <vTaskDelay+0x68>)
 800c858:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c85c:	601a      	str	r2, [r3, #0]
 800c85e:	f3bf 8f4f 	dsb	sy
 800c862:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c866:	bf00      	nop
 800c868:	3710      	adds	r7, #16
 800c86a:	46bd      	mov	sp, r7
 800c86c:	bd80      	pop	{r7, pc}
 800c86e:	bf00      	nop
 800c870:	20000634 	.word	0x20000634
 800c874:	e000ed04 	.word	0xe000ed04

0800c878 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 800c878:	b580      	push	{r7, lr}
 800c87a:	b084      	sub	sp, #16
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800c880:	f001 f812 	bl	800d8a8 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d102      	bne.n	800c890 <vTaskSuspend+0x18>
 800c88a:	4b3d      	ldr	r3, [pc, #244]	; (800c980 <vTaskSuspend+0x108>)
 800c88c:	681b      	ldr	r3, [r3, #0]
 800c88e:	e000      	b.n	800c892 <vTaskSuspend+0x1a>
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c894:	68fb      	ldr	r3, [r7, #12]
 800c896:	3304      	adds	r3, #4
 800c898:	4618      	mov	r0, r3
 800c89a:	f7ff f8c3 	bl	800ba24 <uxListRemove>
 800c89e:	4603      	mov	r3, r0
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d115      	bne.n	800c8d0 <vTaskSuspend+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800c8a4:	68fb      	ldr	r3, [r7, #12]
 800c8a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c8a8:	4936      	ldr	r1, [pc, #216]	; (800c984 <vTaskSuspend+0x10c>)
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	009b      	lsls	r3, r3, #2
 800c8ae:	4413      	add	r3, r2
 800c8b0:	009b      	lsls	r3, r3, #2
 800c8b2:	440b      	add	r3, r1
 800c8b4:	681b      	ldr	r3, [r3, #0]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d10a      	bne.n	800c8d0 <vTaskSuspend+0x58>
 800c8ba:	68fb      	ldr	r3, [r7, #12]
 800c8bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c8be:	2201      	movs	r2, #1
 800c8c0:	fa02 f303 	lsl.w	r3, r2, r3
 800c8c4:	43da      	mvns	r2, r3
 800c8c6:	4b30      	ldr	r3, [pc, #192]	; (800c988 <vTaskSuspend+0x110>)
 800c8c8:	681b      	ldr	r3, [r3, #0]
 800c8ca:	4013      	ands	r3, r2
 800c8cc:	4a2e      	ldr	r2, [pc, #184]	; (800c988 <vTaskSuspend+0x110>)
 800c8ce:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d004      	beq.n	800c8e2 <vTaskSuspend+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	3318      	adds	r3, #24
 800c8dc:	4618      	mov	r0, r3
 800c8de:	f7ff f8a1 	bl	800ba24 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 800c8e2:	68fb      	ldr	r3, [r7, #12]
 800c8e4:	3304      	adds	r3, #4
 800c8e6:	4619      	mov	r1, r3
 800c8e8:	4828      	ldr	r0, [pc, #160]	; (800c98c <vTaskSuspend+0x114>)
 800c8ea:	f7ff f83e 	bl	800b96a <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b01      	cmp	r3, #1
 800c8f8:	d103      	bne.n	800c902 <vTaskSuspend+0x8a>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 800c902:	f001 f803 	bl	800d90c <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800c906:	4b22      	ldr	r3, [pc, #136]	; (800c990 <vTaskSuspend+0x118>)
 800c908:	681b      	ldr	r3, [r3, #0]
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	d005      	beq.n	800c91a <vTaskSuspend+0xa2>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800c90e:	f000 ffcb 	bl	800d8a8 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 800c912:	f000 fc65 	bl	800d1e0 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800c916:	f000 fff9 	bl	800d90c <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 800c91a:	4b19      	ldr	r3, [pc, #100]	; (800c980 <vTaskSuspend+0x108>)
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	68fa      	ldr	r2, [r7, #12]
 800c920:	429a      	cmp	r2, r3
 800c922:	d128      	bne.n	800c976 <vTaskSuspend+0xfe>
		{
			if( xSchedulerRunning != pdFALSE )
 800c924:	4b1a      	ldr	r3, [pc, #104]	; (800c990 <vTaskSuspend+0x118>)
 800c926:	681b      	ldr	r3, [r3, #0]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d018      	beq.n	800c95e <vTaskSuspend+0xe6>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800c92c:	4b19      	ldr	r3, [pc, #100]	; (800c994 <vTaskSuspend+0x11c>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	2b00      	cmp	r3, #0
 800c932:	d00b      	beq.n	800c94c <vTaskSuspend+0xd4>
 800c934:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c938:	b672      	cpsid	i
 800c93a:	f383 8811 	msr	BASEPRI, r3
 800c93e:	f3bf 8f6f 	isb	sy
 800c942:	f3bf 8f4f 	dsb	sy
 800c946:	b662      	cpsie	i
 800c948:	60bb      	str	r3, [r7, #8]
 800c94a:	e7fe      	b.n	800c94a <vTaskSuspend+0xd2>
				portYIELD_WITHIN_API();
 800c94c:	4b12      	ldr	r3, [pc, #72]	; (800c998 <vTaskSuspend+0x120>)
 800c94e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c952:	601a      	str	r2, [r3, #0]
 800c954:	f3bf 8f4f 	dsb	sy
 800c958:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c95c:	e00b      	b.n	800c976 <vTaskSuspend+0xfe>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800c95e:	4b0b      	ldr	r3, [pc, #44]	; (800c98c <vTaskSuspend+0x114>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b0e      	ldr	r3, [pc, #56]	; (800c99c <vTaskSuspend+0x124>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d103      	bne.n	800c972 <vTaskSuspend+0xfa>
					pxCurrentTCB = NULL;
 800c96a:	4b05      	ldr	r3, [pc, #20]	; (800c980 <vTaskSuspend+0x108>)
 800c96c:	2200      	movs	r2, #0
 800c96e:	601a      	str	r2, [r3, #0]
	}
 800c970:	e001      	b.n	800c976 <vTaskSuspend+0xfe>
					vTaskSwitchContext();
 800c972:	f000 f9ed 	bl	800cd50 <vTaskSwitchContext>
	}
 800c976:	bf00      	nop
 800c978:	3710      	adds	r7, #16
 800c97a:	46bd      	mov	sp, r7
 800c97c:	bd80      	pop	{r7, pc}
 800c97e:	bf00      	nop
 800c980:	2000050c 	.word	0x2000050c
 800c984:	20000510 	.word	0x20000510
 800c988:	20000614 	.word	0x20000614
 800c98c:	200005f8 	.word	0x200005f8
 800c990:	20000618 	.word	0x20000618
 800c994:	20000634 	.word	0x20000634
 800c998:	e000ed04 	.word	0xe000ed04
 800c99c:	2000060c 	.word	0x2000060c

0800c9a0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c9a0:	b580      	push	{r7, lr}
 800c9a2:	b08a      	sub	sp, #40	; 0x28
 800c9a4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c9a6:	2300      	movs	r3, #0
 800c9a8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c9aa:	2300      	movs	r3, #0
 800c9ac:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c9ae:	463a      	mov	r2, r7
 800c9b0:	1d39      	adds	r1, r7, #4
 800c9b2:	f107 0308 	add.w	r3, r7, #8
 800c9b6:	4618      	mov	r0, r3
 800c9b8:	f7f3 fe14 	bl	80005e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c9bc:	6839      	ldr	r1, [r7, #0]
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	68ba      	ldr	r2, [r7, #8]
 800c9c2:	9202      	str	r2, [sp, #8]
 800c9c4:	9301      	str	r3, [sp, #4]
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	9300      	str	r3, [sp, #0]
 800c9ca:	2300      	movs	r3, #0
 800c9cc:	460a      	mov	r2, r1
 800c9ce:	491f      	ldr	r1, [pc, #124]	; (800ca4c <vTaskStartScheduler+0xac>)
 800c9d0:	481f      	ldr	r0, [pc, #124]	; (800ca50 <vTaskStartScheduler+0xb0>)
 800c9d2:	f7ff fcf9 	bl	800c3c8 <xTaskCreateStatic>
 800c9d6:	4602      	mov	r2, r0
 800c9d8:	4b1e      	ldr	r3, [pc, #120]	; (800ca54 <vTaskStartScheduler+0xb4>)
 800c9da:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c9dc:	4b1d      	ldr	r3, [pc, #116]	; (800ca54 <vTaskStartScheduler+0xb4>)
 800c9de:	681b      	ldr	r3, [r3, #0]
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d002      	beq.n	800c9ea <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	617b      	str	r3, [r7, #20]
 800c9e8:	e001      	b.n	800c9ee <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c9ea:	2300      	movs	r3, #0
 800c9ec:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	2b01      	cmp	r3, #1
 800c9f2:	d117      	bne.n	800ca24 <vTaskStartScheduler+0x84>
 800c9f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9f8:	b672      	cpsid	i
 800c9fa:	f383 8811 	msr	BASEPRI, r3
 800c9fe:	f3bf 8f6f 	isb	sy
 800ca02:	f3bf 8f4f 	dsb	sy
 800ca06:	b662      	cpsie	i
 800ca08:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca0a:	4b13      	ldr	r3, [pc, #76]	; (800ca58 <vTaskStartScheduler+0xb8>)
 800ca0c:	f04f 32ff 	mov.w	r2, #4294967295
 800ca10:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca12:	4b12      	ldr	r3, [pc, #72]	; (800ca5c <vTaskStartScheduler+0xbc>)
 800ca14:	2201      	movs	r2, #1
 800ca16:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca18:	4b11      	ldr	r3, [pc, #68]	; (800ca60 <vTaskStartScheduler+0xc0>)
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca1e:	f000 fec7 	bl	800d7b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca22:	e00f      	b.n	800ca44 <vTaskStartScheduler+0xa4>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca24:	697b      	ldr	r3, [r7, #20]
 800ca26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ca2a:	d10b      	bne.n	800ca44 <vTaskStartScheduler+0xa4>
 800ca2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca30:	b672      	cpsid	i
 800ca32:	f383 8811 	msr	BASEPRI, r3
 800ca36:	f3bf 8f6f 	isb	sy
 800ca3a:	f3bf 8f4f 	dsb	sy
 800ca3e:	b662      	cpsie	i
 800ca40:	60fb      	str	r3, [r7, #12]
 800ca42:	e7fe      	b.n	800ca42 <vTaskStartScheduler+0xa2>
}
 800ca44:	bf00      	nop
 800ca46:	3718      	adds	r7, #24
 800ca48:	46bd      	mov	sp, r7
 800ca4a:	bd80      	pop	{r7, pc}
 800ca4c:	0800e7a0 	.word	0x0800e7a0
 800ca50:	0800d075 	.word	0x0800d075
 800ca54:	20000630 	.word	0x20000630
 800ca58:	2000062c 	.word	0x2000062c
 800ca5c:	20000618 	.word	0x20000618
 800ca60:	20000610 	.word	0x20000610

0800ca64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ca64:	b480      	push	{r7}
 800ca66:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800ca68:	4b04      	ldr	r3, [pc, #16]	; (800ca7c <vTaskSuspendAll+0x18>)
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	3301      	adds	r3, #1
 800ca6e:	4a03      	ldr	r2, [pc, #12]	; (800ca7c <vTaskSuspendAll+0x18>)
 800ca70:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800ca72:	bf00      	nop
 800ca74:	46bd      	mov	sp, r7
 800ca76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca7a:	4770      	bx	lr
 800ca7c:	20000634 	.word	0x20000634

0800ca80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800ca80:	b580      	push	{r7, lr}
 800ca82:	b084      	sub	sp, #16
 800ca84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800ca86:	2300      	movs	r3, #0
 800ca88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800ca8e:	4b42      	ldr	r3, [pc, #264]	; (800cb98 <xTaskResumeAll+0x118>)
 800ca90:	681b      	ldr	r3, [r3, #0]
 800ca92:	2b00      	cmp	r3, #0
 800ca94:	d10b      	bne.n	800caae <xTaskResumeAll+0x2e>
 800ca96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca9a:	b672      	cpsid	i
 800ca9c:	f383 8811 	msr	BASEPRI, r3
 800caa0:	f3bf 8f6f 	isb	sy
 800caa4:	f3bf 8f4f 	dsb	sy
 800caa8:	b662      	cpsie	i
 800caaa:	603b      	str	r3, [r7, #0]
 800caac:	e7fe      	b.n	800caac <xTaskResumeAll+0x2c>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800caae:	f000 fefb 	bl	800d8a8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cab2:	4b39      	ldr	r3, [pc, #228]	; (800cb98 <xTaskResumeAll+0x118>)
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	3b01      	subs	r3, #1
 800cab8:	4a37      	ldr	r2, [pc, #220]	; (800cb98 <xTaskResumeAll+0x118>)
 800caba:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cabc:	4b36      	ldr	r3, [pc, #216]	; (800cb98 <xTaskResumeAll+0x118>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	2b00      	cmp	r3, #0
 800cac2:	d161      	bne.n	800cb88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cac4:	4b35      	ldr	r3, [pc, #212]	; (800cb9c <xTaskResumeAll+0x11c>)
 800cac6:	681b      	ldr	r3, [r3, #0]
 800cac8:	2b00      	cmp	r3, #0
 800caca:	d05d      	beq.n	800cb88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cacc:	e02e      	b.n	800cb2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cace:	4b34      	ldr	r3, [pc, #208]	; (800cba0 <xTaskResumeAll+0x120>)
 800cad0:	68db      	ldr	r3, [r3, #12]
 800cad2:	68db      	ldr	r3, [r3, #12]
 800cad4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cad6:	68fb      	ldr	r3, [r7, #12]
 800cad8:	3318      	adds	r3, #24
 800cada:	4618      	mov	r0, r3
 800cadc:	f7fe ffa2 	bl	800ba24 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cae0:	68fb      	ldr	r3, [r7, #12]
 800cae2:	3304      	adds	r3, #4
 800cae4:	4618      	mov	r0, r3
 800cae6:	f7fe ff9d 	bl	800ba24 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caee:	2201      	movs	r2, #1
 800caf0:	409a      	lsls	r2, r3
 800caf2:	4b2c      	ldr	r3, [pc, #176]	; (800cba4 <xTaskResumeAll+0x124>)
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	4313      	orrs	r3, r2
 800caf8:	4a2a      	ldr	r2, [pc, #168]	; (800cba4 <xTaskResumeAll+0x124>)
 800cafa:	6013      	str	r3, [r2, #0]
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb00:	4613      	mov	r3, r2
 800cb02:	009b      	lsls	r3, r3, #2
 800cb04:	4413      	add	r3, r2
 800cb06:	009b      	lsls	r3, r3, #2
 800cb08:	4a27      	ldr	r2, [pc, #156]	; (800cba8 <xTaskResumeAll+0x128>)
 800cb0a:	441a      	add	r2, r3
 800cb0c:	68fb      	ldr	r3, [r7, #12]
 800cb0e:	3304      	adds	r3, #4
 800cb10:	4619      	mov	r1, r3
 800cb12:	4610      	mov	r0, r2
 800cb14:	f7fe ff29 	bl	800b96a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb1c:	4b23      	ldr	r3, [pc, #140]	; (800cbac <xTaskResumeAll+0x12c>)
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb22:	429a      	cmp	r2, r3
 800cb24:	d302      	bcc.n	800cb2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800cb26:	4b22      	ldr	r3, [pc, #136]	; (800cbb0 <xTaskResumeAll+0x130>)
 800cb28:	2201      	movs	r2, #1
 800cb2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb2c:	4b1c      	ldr	r3, [pc, #112]	; (800cba0 <xTaskResumeAll+0x120>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d1cc      	bne.n	800cace <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cb34:	68fb      	ldr	r3, [r7, #12]
 800cb36:	2b00      	cmp	r3, #0
 800cb38:	d001      	beq.n	800cb3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cb3a:	f000 fb51 	bl	800d1e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cb3e:	4b1d      	ldr	r3, [pc, #116]	; (800cbb4 <xTaskResumeAll+0x134>)
 800cb40:	681b      	ldr	r3, [r3, #0]
 800cb42:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	2b00      	cmp	r3, #0
 800cb48:	d010      	beq.n	800cb6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cb4a:	f000 f847 	bl	800cbdc <xTaskIncrementTick>
 800cb4e:	4603      	mov	r3, r0
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	d002      	beq.n	800cb5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800cb54:	4b16      	ldr	r3, [pc, #88]	; (800cbb0 <xTaskResumeAll+0x130>)
 800cb56:	2201      	movs	r2, #1
 800cb58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	3b01      	subs	r3, #1
 800cb5e:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d1f1      	bne.n	800cb4a <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 800cb66:	4b13      	ldr	r3, [pc, #76]	; (800cbb4 <xTaskResumeAll+0x134>)
 800cb68:	2200      	movs	r2, #0
 800cb6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cb6c:	4b10      	ldr	r3, [pc, #64]	; (800cbb0 <xTaskResumeAll+0x130>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	d009      	beq.n	800cb88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cb74:	2301      	movs	r3, #1
 800cb76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cb78:	4b0f      	ldr	r3, [pc, #60]	; (800cbb8 <xTaskResumeAll+0x138>)
 800cb7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cb7e:	601a      	str	r2, [r3, #0]
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cb88:	f000 fec0 	bl	800d90c <vPortExitCritical>

	return xAlreadyYielded;
 800cb8c:	68bb      	ldr	r3, [r7, #8]
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3710      	adds	r7, #16
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	20000634 	.word	0x20000634
 800cb9c:	2000060c 	.word	0x2000060c
 800cba0:	200005cc 	.word	0x200005cc
 800cba4:	20000614 	.word	0x20000614
 800cba8:	20000510 	.word	0x20000510
 800cbac:	2000050c 	.word	0x2000050c
 800cbb0:	20000620 	.word	0x20000620
 800cbb4:	2000061c 	.word	0x2000061c
 800cbb8:	e000ed04 	.word	0xe000ed04

0800cbbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cbbc:	b480      	push	{r7}
 800cbbe:	b083      	sub	sp, #12
 800cbc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cbc2:	4b05      	ldr	r3, [pc, #20]	; (800cbd8 <xTaskGetTickCount+0x1c>)
 800cbc4:	681b      	ldr	r3, [r3, #0]
 800cbc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cbc8:	687b      	ldr	r3, [r7, #4]
}
 800cbca:	4618      	mov	r0, r3
 800cbcc:	370c      	adds	r7, #12
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbd4:	4770      	bx	lr
 800cbd6:	bf00      	nop
 800cbd8:	20000610 	.word	0x20000610

0800cbdc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cbdc:	b580      	push	{r7, lr}
 800cbde:	b086      	sub	sp, #24
 800cbe0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cbe6:	4b4f      	ldr	r3, [pc, #316]	; (800cd24 <xTaskIncrementTick+0x148>)
 800cbe8:	681b      	ldr	r3, [r3, #0]
 800cbea:	2b00      	cmp	r3, #0
 800cbec:	f040 8089 	bne.w	800cd02 <xTaskIncrementTick+0x126>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cbf0:	4b4d      	ldr	r3, [pc, #308]	; (800cd28 <xTaskIncrementTick+0x14c>)
 800cbf2:	681b      	ldr	r3, [r3, #0]
 800cbf4:	3301      	adds	r3, #1
 800cbf6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cbf8:	4a4b      	ldr	r2, [pc, #300]	; (800cd28 <xTaskIncrementTick+0x14c>)
 800cbfa:	693b      	ldr	r3, [r7, #16]
 800cbfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cbfe:	693b      	ldr	r3, [r7, #16]
 800cc00:	2b00      	cmp	r3, #0
 800cc02:	d121      	bne.n	800cc48 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc04:	4b49      	ldr	r3, [pc, #292]	; (800cd2c <xTaskIncrementTick+0x150>)
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	681b      	ldr	r3, [r3, #0]
 800cc0a:	2b00      	cmp	r3, #0
 800cc0c:	d00b      	beq.n	800cc26 <xTaskIncrementTick+0x4a>
 800cc0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc12:	b672      	cpsid	i
 800cc14:	f383 8811 	msr	BASEPRI, r3
 800cc18:	f3bf 8f6f 	isb	sy
 800cc1c:	f3bf 8f4f 	dsb	sy
 800cc20:	b662      	cpsie	i
 800cc22:	603b      	str	r3, [r7, #0]
 800cc24:	e7fe      	b.n	800cc24 <xTaskIncrementTick+0x48>
 800cc26:	4b41      	ldr	r3, [pc, #260]	; (800cd2c <xTaskIncrementTick+0x150>)
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	60fb      	str	r3, [r7, #12]
 800cc2c:	4b40      	ldr	r3, [pc, #256]	; (800cd30 <xTaskIncrementTick+0x154>)
 800cc2e:	681b      	ldr	r3, [r3, #0]
 800cc30:	4a3e      	ldr	r2, [pc, #248]	; (800cd2c <xTaskIncrementTick+0x150>)
 800cc32:	6013      	str	r3, [r2, #0]
 800cc34:	4a3e      	ldr	r2, [pc, #248]	; (800cd30 <xTaskIncrementTick+0x154>)
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	6013      	str	r3, [r2, #0]
 800cc3a:	4b3e      	ldr	r3, [pc, #248]	; (800cd34 <xTaskIncrementTick+0x158>)
 800cc3c:	681b      	ldr	r3, [r3, #0]
 800cc3e:	3301      	adds	r3, #1
 800cc40:	4a3c      	ldr	r2, [pc, #240]	; (800cd34 <xTaskIncrementTick+0x158>)
 800cc42:	6013      	str	r3, [r2, #0]
 800cc44:	f000 facc 	bl	800d1e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800cc48:	4b3b      	ldr	r3, [pc, #236]	; (800cd38 <xTaskIncrementTick+0x15c>)
 800cc4a:	681b      	ldr	r3, [r3, #0]
 800cc4c:	693a      	ldr	r2, [r7, #16]
 800cc4e:	429a      	cmp	r2, r3
 800cc50:	d348      	bcc.n	800cce4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cc52:	4b36      	ldr	r3, [pc, #216]	; (800cd2c <xTaskIncrementTick+0x150>)
 800cc54:	681b      	ldr	r3, [r3, #0]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d104      	bne.n	800cc66 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc5c:	4b36      	ldr	r3, [pc, #216]	; (800cd38 <xTaskIncrementTick+0x15c>)
 800cc5e:	f04f 32ff 	mov.w	r2, #4294967295
 800cc62:	601a      	str	r2, [r3, #0]
					break;
 800cc64:	e03e      	b.n	800cce4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cc66:	4b31      	ldr	r3, [pc, #196]	; (800cd2c <xTaskIncrementTick+0x150>)
 800cc68:	681b      	ldr	r3, [r3, #0]
 800cc6a:	68db      	ldr	r3, [r3, #12]
 800cc6c:	68db      	ldr	r3, [r3, #12]
 800cc6e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800cc70:	68bb      	ldr	r3, [r7, #8]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cc76:	693a      	ldr	r2, [r7, #16]
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	429a      	cmp	r2, r3
 800cc7c:	d203      	bcs.n	800cc86 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800cc7e:	4a2e      	ldr	r2, [pc, #184]	; (800cd38 <xTaskIncrementTick+0x15c>)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800cc84:	e02e      	b.n	800cce4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	3304      	adds	r3, #4
 800cc8a:	4618      	mov	r0, r3
 800cc8c:	f7fe feca 	bl	800ba24 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800cc90:	68bb      	ldr	r3, [r7, #8]
 800cc92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d004      	beq.n	800cca2 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cc98:	68bb      	ldr	r3, [r7, #8]
 800cc9a:	3318      	adds	r3, #24
 800cc9c:	4618      	mov	r0, r3
 800cc9e:	f7fe fec1 	bl	800ba24 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cca2:	68bb      	ldr	r3, [r7, #8]
 800cca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cca6:	2201      	movs	r2, #1
 800cca8:	409a      	lsls	r2, r3
 800ccaa:	4b24      	ldr	r3, [pc, #144]	; (800cd3c <xTaskIncrementTick+0x160>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	4313      	orrs	r3, r2
 800ccb0:	4a22      	ldr	r2, [pc, #136]	; (800cd3c <xTaskIncrementTick+0x160>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	68bb      	ldr	r3, [r7, #8]
 800ccb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccb8:	4613      	mov	r3, r2
 800ccba:	009b      	lsls	r3, r3, #2
 800ccbc:	4413      	add	r3, r2
 800ccbe:	009b      	lsls	r3, r3, #2
 800ccc0:	4a1f      	ldr	r2, [pc, #124]	; (800cd40 <xTaskIncrementTick+0x164>)
 800ccc2:	441a      	add	r2, r3
 800ccc4:	68bb      	ldr	r3, [r7, #8]
 800ccc6:	3304      	adds	r3, #4
 800ccc8:	4619      	mov	r1, r3
 800ccca:	4610      	mov	r0, r2
 800cccc:	f7fe fe4d 	bl	800b96a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ccd0:	68bb      	ldr	r3, [r7, #8]
 800ccd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccd4:	4b1b      	ldr	r3, [pc, #108]	; (800cd44 <xTaskIncrementTick+0x168>)
 800ccd6:	681b      	ldr	r3, [r3, #0]
 800ccd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccda:	429a      	cmp	r2, r3
 800ccdc:	d3b9      	bcc.n	800cc52 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800ccde:	2301      	movs	r3, #1
 800cce0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cce2:	e7b6      	b.n	800cc52 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cce4:	4b17      	ldr	r3, [pc, #92]	; (800cd44 <xTaskIncrementTick+0x168>)
 800cce6:	681b      	ldr	r3, [r3, #0]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	4915      	ldr	r1, [pc, #84]	; (800cd40 <xTaskIncrementTick+0x164>)
 800ccec:	4613      	mov	r3, r2
 800ccee:	009b      	lsls	r3, r3, #2
 800ccf0:	4413      	add	r3, r2
 800ccf2:	009b      	lsls	r3, r3, #2
 800ccf4:	440b      	add	r3, r1
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	2b01      	cmp	r3, #1
 800ccfa:	d907      	bls.n	800cd0c <xTaskIncrementTick+0x130>
			{
				xSwitchRequired = pdTRUE;
 800ccfc:	2301      	movs	r3, #1
 800ccfe:	617b      	str	r3, [r7, #20]
 800cd00:	e004      	b.n	800cd0c <xTaskIncrementTick+0x130>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd02:	4b11      	ldr	r3, [pc, #68]	; (800cd48 <xTaskIncrementTick+0x16c>)
 800cd04:	681b      	ldr	r3, [r3, #0]
 800cd06:	3301      	adds	r3, #1
 800cd08:	4a0f      	ldr	r2, [pc, #60]	; (800cd48 <xTaskIncrementTick+0x16c>)
 800cd0a:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd0c:	4b0f      	ldr	r3, [pc, #60]	; (800cd4c <xTaskIncrementTick+0x170>)
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d001      	beq.n	800cd18 <xTaskIncrementTick+0x13c>
		{
			xSwitchRequired = pdTRUE;
 800cd14:	2301      	movs	r3, #1
 800cd16:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd18:	697b      	ldr	r3, [r7, #20]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	20000634 	.word	0x20000634
 800cd28:	20000610 	.word	0x20000610
 800cd2c:	200005c4 	.word	0x200005c4
 800cd30:	200005c8 	.word	0x200005c8
 800cd34:	20000624 	.word	0x20000624
 800cd38:	2000062c 	.word	0x2000062c
 800cd3c:	20000614 	.word	0x20000614
 800cd40:	20000510 	.word	0x20000510
 800cd44:	2000050c 	.word	0x2000050c
 800cd48:	2000061c 	.word	0x2000061c
 800cd4c:	20000620 	.word	0x20000620

0800cd50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cd50:	b580      	push	{r7, lr}
 800cd52:	b088      	sub	sp, #32
 800cd54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cd56:	4b3a      	ldr	r3, [pc, #232]	; (800ce40 <vTaskSwitchContext+0xf0>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	2b00      	cmp	r3, #0
 800cd5c:	d003      	beq.n	800cd66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cd5e:	4b39      	ldr	r3, [pc, #228]	; (800ce44 <vTaskSwitchContext+0xf4>)
 800cd60:	2201      	movs	r2, #1
 800cd62:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cd64:	e067      	b.n	800ce36 <vTaskSwitchContext+0xe6>
		xYieldPending = pdFALSE;
 800cd66:	4b37      	ldr	r3, [pc, #220]	; (800ce44 <vTaskSwitchContext+0xf4>)
 800cd68:	2200      	movs	r2, #0
 800cd6a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cd6c:	4b36      	ldr	r3, [pc, #216]	; (800ce48 <vTaskSwitchContext+0xf8>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cd72:	61fb      	str	r3, [r7, #28]
 800cd74:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cd78:	61bb      	str	r3, [r7, #24]
 800cd7a:	69fb      	ldr	r3, [r7, #28]
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	69ba      	ldr	r2, [r7, #24]
 800cd80:	429a      	cmp	r2, r3
 800cd82:	d111      	bne.n	800cda8 <vTaskSwitchContext+0x58>
 800cd84:	69fb      	ldr	r3, [r7, #28]
 800cd86:	3304      	adds	r3, #4
 800cd88:	681b      	ldr	r3, [r3, #0]
 800cd8a:	69ba      	ldr	r2, [r7, #24]
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d10b      	bne.n	800cda8 <vTaskSwitchContext+0x58>
 800cd90:	69fb      	ldr	r3, [r7, #28]
 800cd92:	3308      	adds	r3, #8
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	69ba      	ldr	r2, [r7, #24]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d105      	bne.n	800cda8 <vTaskSwitchContext+0x58>
 800cd9c:	69fb      	ldr	r3, [r7, #28]
 800cd9e:	330c      	adds	r3, #12
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	69ba      	ldr	r2, [r7, #24]
 800cda4:	429a      	cmp	r2, r3
 800cda6:	d008      	beq.n	800cdba <vTaskSwitchContext+0x6a>
 800cda8:	4b27      	ldr	r3, [pc, #156]	; (800ce48 <vTaskSwitchContext+0xf8>)
 800cdaa:	681a      	ldr	r2, [r3, #0]
 800cdac:	4b26      	ldr	r3, [pc, #152]	; (800ce48 <vTaskSwitchContext+0xf8>)
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	3334      	adds	r3, #52	; 0x34
 800cdb2:	4619      	mov	r1, r3
 800cdb4:	4610      	mov	r0, r2
 800cdb6:	f7f3 fc02 	bl	80005be <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdba:	4b24      	ldr	r3, [pc, #144]	; (800ce4c <vTaskSwitchContext+0xfc>)
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	fab3 f383 	clz	r3, r3
 800cdc6:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cdc8:	7afb      	ldrb	r3, [r7, #11]
 800cdca:	f1c3 031f 	rsb	r3, r3, #31
 800cdce:	617b      	str	r3, [r7, #20]
 800cdd0:	491f      	ldr	r1, [pc, #124]	; (800ce50 <vTaskSwitchContext+0x100>)
 800cdd2:	697a      	ldr	r2, [r7, #20]
 800cdd4:	4613      	mov	r3, r2
 800cdd6:	009b      	lsls	r3, r3, #2
 800cdd8:	4413      	add	r3, r2
 800cdda:	009b      	lsls	r3, r3, #2
 800cddc:	440b      	add	r3, r1
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	2b00      	cmp	r3, #0
 800cde2:	d10b      	bne.n	800cdfc <vTaskSwitchContext+0xac>
	__asm volatile
 800cde4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cde8:	b672      	cpsid	i
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	b662      	cpsie	i
 800cdf8:	607b      	str	r3, [r7, #4]
 800cdfa:	e7fe      	b.n	800cdfa <vTaskSwitchContext+0xaa>
 800cdfc:	697a      	ldr	r2, [r7, #20]
 800cdfe:	4613      	mov	r3, r2
 800ce00:	009b      	lsls	r3, r3, #2
 800ce02:	4413      	add	r3, r2
 800ce04:	009b      	lsls	r3, r3, #2
 800ce06:	4a12      	ldr	r2, [pc, #72]	; (800ce50 <vTaskSwitchContext+0x100>)
 800ce08:	4413      	add	r3, r2
 800ce0a:	613b      	str	r3, [r7, #16]
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	685b      	ldr	r3, [r3, #4]
 800ce10:	685a      	ldr	r2, [r3, #4]
 800ce12:	693b      	ldr	r3, [r7, #16]
 800ce14:	605a      	str	r2, [r3, #4]
 800ce16:	693b      	ldr	r3, [r7, #16]
 800ce18:	685a      	ldr	r2, [r3, #4]
 800ce1a:	693b      	ldr	r3, [r7, #16]
 800ce1c:	3308      	adds	r3, #8
 800ce1e:	429a      	cmp	r2, r3
 800ce20:	d104      	bne.n	800ce2c <vTaskSwitchContext+0xdc>
 800ce22:	693b      	ldr	r3, [r7, #16]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	685a      	ldr	r2, [r3, #4]
 800ce28:	693b      	ldr	r3, [r7, #16]
 800ce2a:	605a      	str	r2, [r3, #4]
 800ce2c:	693b      	ldr	r3, [r7, #16]
 800ce2e:	685b      	ldr	r3, [r3, #4]
 800ce30:	68db      	ldr	r3, [r3, #12]
 800ce32:	4a05      	ldr	r2, [pc, #20]	; (800ce48 <vTaskSwitchContext+0xf8>)
 800ce34:	6013      	str	r3, [r2, #0]
}
 800ce36:	bf00      	nop
 800ce38:	3720      	adds	r7, #32
 800ce3a:	46bd      	mov	sp, r7
 800ce3c:	bd80      	pop	{r7, pc}
 800ce3e:	bf00      	nop
 800ce40:	20000634 	.word	0x20000634
 800ce44:	20000620 	.word	0x20000620
 800ce48:	2000050c 	.word	0x2000050c
 800ce4c:	20000614 	.word	0x20000614
 800ce50:	20000510 	.word	0x20000510

0800ce54 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	d10b      	bne.n	800ce7c <vTaskPlaceOnEventList+0x28>
 800ce64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce68:	b672      	cpsid	i
 800ce6a:	f383 8811 	msr	BASEPRI, r3
 800ce6e:	f3bf 8f6f 	isb	sy
 800ce72:	f3bf 8f4f 	dsb	sy
 800ce76:	b662      	cpsie	i
 800ce78:	60fb      	str	r3, [r7, #12]
 800ce7a:	e7fe      	b.n	800ce7a <vTaskPlaceOnEventList+0x26>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce7c:	4b07      	ldr	r3, [pc, #28]	; (800ce9c <vTaskPlaceOnEventList+0x48>)
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	3318      	adds	r3, #24
 800ce82:	4619      	mov	r1, r3
 800ce84:	6878      	ldr	r0, [r7, #4]
 800ce86:	f7fe fd94 	bl	800b9b2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ce8a:	2101      	movs	r1, #1
 800ce8c:	6838      	ldr	r0, [r7, #0]
 800ce8e:	f000 fb9d 	bl	800d5cc <prvAddCurrentTaskToDelayedList>
}
 800ce92:	bf00      	nop
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	2000050c 	.word	0x2000050c

0800cea0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cea0:	b580      	push	{r7, lr}
 800cea2:	b086      	sub	sp, #24
 800cea4:	af00      	add	r7, sp, #0
 800cea6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	68db      	ldr	r3, [r3, #12]
 800ceac:	68db      	ldr	r3, [r3, #12]
 800ceae:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ceb0:	693b      	ldr	r3, [r7, #16]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d10b      	bne.n	800cece <xTaskRemoveFromEventList+0x2e>
 800ceb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceba:	b672      	cpsid	i
 800cebc:	f383 8811 	msr	BASEPRI, r3
 800cec0:	f3bf 8f6f 	isb	sy
 800cec4:	f3bf 8f4f 	dsb	sy
 800cec8:	b662      	cpsie	i
 800ceca:	60fb      	str	r3, [r7, #12]
 800cecc:	e7fe      	b.n	800cecc <xTaskRemoveFromEventList+0x2c>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cece:	693b      	ldr	r3, [r7, #16]
 800ced0:	3318      	adds	r3, #24
 800ced2:	4618      	mov	r0, r3
 800ced4:	f7fe fda6 	bl	800ba24 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ced8:	4b1d      	ldr	r3, [pc, #116]	; (800cf50 <xTaskRemoveFromEventList+0xb0>)
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	2b00      	cmp	r3, #0
 800cede:	d11c      	bne.n	800cf1a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cee0:	693b      	ldr	r3, [r7, #16]
 800cee2:	3304      	adds	r3, #4
 800cee4:	4618      	mov	r0, r3
 800cee6:	f7fe fd9d 	bl	800ba24 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ceea:	693b      	ldr	r3, [r7, #16]
 800ceec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ceee:	2201      	movs	r2, #1
 800cef0:	409a      	lsls	r2, r3
 800cef2:	4b18      	ldr	r3, [pc, #96]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800cef4:	681b      	ldr	r3, [r3, #0]
 800cef6:	4313      	orrs	r3, r2
 800cef8:	4a16      	ldr	r2, [pc, #88]	; (800cf54 <xTaskRemoveFromEventList+0xb4>)
 800cefa:	6013      	str	r3, [r2, #0]
 800cefc:	693b      	ldr	r3, [r7, #16]
 800cefe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf00:	4613      	mov	r3, r2
 800cf02:	009b      	lsls	r3, r3, #2
 800cf04:	4413      	add	r3, r2
 800cf06:	009b      	lsls	r3, r3, #2
 800cf08:	4a13      	ldr	r2, [pc, #76]	; (800cf58 <xTaskRemoveFromEventList+0xb8>)
 800cf0a:	441a      	add	r2, r3
 800cf0c:	693b      	ldr	r3, [r7, #16]
 800cf0e:	3304      	adds	r3, #4
 800cf10:	4619      	mov	r1, r3
 800cf12:	4610      	mov	r0, r2
 800cf14:	f7fe fd29 	bl	800b96a <vListInsertEnd>
 800cf18:	e005      	b.n	800cf26 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf1a:	693b      	ldr	r3, [r7, #16]
 800cf1c:	3318      	adds	r3, #24
 800cf1e:	4619      	mov	r1, r3
 800cf20:	480e      	ldr	r0, [pc, #56]	; (800cf5c <xTaskRemoveFromEventList+0xbc>)
 800cf22:	f7fe fd22 	bl	800b96a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf26:	693b      	ldr	r3, [r7, #16]
 800cf28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf2a:	4b0d      	ldr	r3, [pc, #52]	; (800cf60 <xTaskRemoveFromEventList+0xc0>)
 800cf2c:	681b      	ldr	r3, [r3, #0]
 800cf2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf30:	429a      	cmp	r2, r3
 800cf32:	d905      	bls.n	800cf40 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cf34:	2301      	movs	r3, #1
 800cf36:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cf38:	4b0a      	ldr	r3, [pc, #40]	; (800cf64 <xTaskRemoveFromEventList+0xc4>)
 800cf3a:	2201      	movs	r2, #1
 800cf3c:	601a      	str	r2, [r3, #0]
 800cf3e:	e001      	b.n	800cf44 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cf44:	697b      	ldr	r3, [r7, #20]
}
 800cf46:	4618      	mov	r0, r3
 800cf48:	3718      	adds	r7, #24
 800cf4a:	46bd      	mov	sp, r7
 800cf4c:	bd80      	pop	{r7, pc}
 800cf4e:	bf00      	nop
 800cf50:	20000634 	.word	0x20000634
 800cf54:	20000614 	.word	0x20000614
 800cf58:	20000510 	.word	0x20000510
 800cf5c:	200005cc 	.word	0x200005cc
 800cf60:	2000050c 	.word	0x2000050c
 800cf64:	20000620 	.word	0x20000620

0800cf68 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cf68:	b480      	push	{r7}
 800cf6a:	b083      	sub	sp, #12
 800cf6c:	af00      	add	r7, sp, #0
 800cf6e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cf70:	4b06      	ldr	r3, [pc, #24]	; (800cf8c <vTaskInternalSetTimeOutState+0x24>)
 800cf72:	681a      	ldr	r2, [r3, #0]
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cf78:	4b05      	ldr	r3, [pc, #20]	; (800cf90 <vTaskInternalSetTimeOutState+0x28>)
 800cf7a:	681a      	ldr	r2, [r3, #0]
 800cf7c:	687b      	ldr	r3, [r7, #4]
 800cf7e:	605a      	str	r2, [r3, #4]
}
 800cf80:	bf00      	nop
 800cf82:	370c      	adds	r7, #12
 800cf84:	46bd      	mov	sp, r7
 800cf86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf8a:	4770      	bx	lr
 800cf8c:	20000624 	.word	0x20000624
 800cf90:	20000610 	.word	0x20000610

0800cf94 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b088      	sub	sp, #32
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
 800cf9c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800cf9e:	687b      	ldr	r3, [r7, #4]
 800cfa0:	2b00      	cmp	r3, #0
 800cfa2:	d10b      	bne.n	800cfbc <xTaskCheckForTimeOut+0x28>
 800cfa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfa8:	b672      	cpsid	i
 800cfaa:	f383 8811 	msr	BASEPRI, r3
 800cfae:	f3bf 8f6f 	isb	sy
 800cfb2:	f3bf 8f4f 	dsb	sy
 800cfb6:	b662      	cpsie	i
 800cfb8:	613b      	str	r3, [r7, #16]
 800cfba:	e7fe      	b.n	800cfba <xTaskCheckForTimeOut+0x26>
	configASSERT( pxTicksToWait );
 800cfbc:	683b      	ldr	r3, [r7, #0]
 800cfbe:	2b00      	cmp	r3, #0
 800cfc0:	d10b      	bne.n	800cfda <xTaskCheckForTimeOut+0x46>
 800cfc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfc6:	b672      	cpsid	i
 800cfc8:	f383 8811 	msr	BASEPRI, r3
 800cfcc:	f3bf 8f6f 	isb	sy
 800cfd0:	f3bf 8f4f 	dsb	sy
 800cfd4:	b662      	cpsie	i
 800cfd6:	60fb      	str	r3, [r7, #12]
 800cfd8:	e7fe      	b.n	800cfd8 <xTaskCheckForTimeOut+0x44>

	taskENTER_CRITICAL();
 800cfda:	f000 fc65 	bl	800d8a8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cfde:	4b1d      	ldr	r3, [pc, #116]	; (800d054 <xTaskCheckForTimeOut+0xc0>)
 800cfe0:	681b      	ldr	r3, [r3, #0]
 800cfe2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	685b      	ldr	r3, [r3, #4]
 800cfe8:	69ba      	ldr	r2, [r7, #24]
 800cfea:	1ad3      	subs	r3, r2, r3
 800cfec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cfee:	683b      	ldr	r3, [r7, #0]
 800cff0:	681b      	ldr	r3, [r3, #0]
 800cff2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cff6:	d102      	bne.n	800cffe <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cff8:	2300      	movs	r3, #0
 800cffa:	61fb      	str	r3, [r7, #28]
 800cffc:	e023      	b.n	800d046 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cffe:	687b      	ldr	r3, [r7, #4]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4b15      	ldr	r3, [pc, #84]	; (800d058 <xTaskCheckForTimeOut+0xc4>)
 800d004:	681b      	ldr	r3, [r3, #0]
 800d006:	429a      	cmp	r2, r3
 800d008:	d007      	beq.n	800d01a <xTaskCheckForTimeOut+0x86>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	685b      	ldr	r3, [r3, #4]
 800d00e:	69ba      	ldr	r2, [r7, #24]
 800d010:	429a      	cmp	r2, r3
 800d012:	d302      	bcc.n	800d01a <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d014:	2301      	movs	r3, #1
 800d016:	61fb      	str	r3, [r7, #28]
 800d018:	e015      	b.n	800d046 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d01a:	683b      	ldr	r3, [r7, #0]
 800d01c:	681b      	ldr	r3, [r3, #0]
 800d01e:	697a      	ldr	r2, [r7, #20]
 800d020:	429a      	cmp	r2, r3
 800d022:	d20b      	bcs.n	800d03c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	681a      	ldr	r2, [r3, #0]
 800d028:	697b      	ldr	r3, [r7, #20]
 800d02a:	1ad2      	subs	r2, r2, r3
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d030:	6878      	ldr	r0, [r7, #4]
 800d032:	f7ff ff99 	bl	800cf68 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d036:	2300      	movs	r3, #0
 800d038:	61fb      	str	r3, [r7, #28]
 800d03a:	e004      	b.n	800d046 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	2200      	movs	r2, #0
 800d040:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d042:	2301      	movs	r3, #1
 800d044:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d046:	f000 fc61 	bl	800d90c <vPortExitCritical>

	return xReturn;
 800d04a:	69fb      	ldr	r3, [r7, #28]
}
 800d04c:	4618      	mov	r0, r3
 800d04e:	3720      	adds	r7, #32
 800d050:	46bd      	mov	sp, r7
 800d052:	bd80      	pop	{r7, pc}
 800d054:	20000610 	.word	0x20000610
 800d058:	20000624 	.word	0x20000624

0800d05c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d05c:	b480      	push	{r7}
 800d05e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d060:	4b03      	ldr	r3, [pc, #12]	; (800d070 <vTaskMissedYield+0x14>)
 800d062:	2201      	movs	r2, #1
 800d064:	601a      	str	r2, [r3, #0]
}
 800d066:	bf00      	nop
 800d068:	46bd      	mov	sp, r7
 800d06a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d06e:	4770      	bx	lr
 800d070:	20000620 	.word	0x20000620

0800d074 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b082      	sub	sp, #8
 800d078:	af00      	add	r7, sp, #0
 800d07a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d07c:	f000 f854 	bl	800d128 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d080:	4b07      	ldr	r3, [pc, #28]	; (800d0a0 <prvIdleTask+0x2c>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	2b01      	cmp	r3, #1
 800d086:	d907      	bls.n	800d098 <prvIdleTask+0x24>
			{
				taskYIELD();
 800d088:	4b06      	ldr	r3, [pc, #24]	; (800d0a4 <prvIdleTask+0x30>)
 800d08a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d08e:	601a      	str	r2, [r3, #0]
 800d090:	f3bf 8f4f 	dsb	sy
 800d094:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800d098:	f7f3 fa8a 	bl	80005b0 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800d09c:	e7ee      	b.n	800d07c <prvIdleTask+0x8>
 800d09e:	bf00      	nop
 800d0a0:	20000510 	.word	0x20000510
 800d0a4:	e000ed04 	.word	0xe000ed04

0800d0a8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b082      	sub	sp, #8
 800d0ac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	607b      	str	r3, [r7, #4]
 800d0b2:	e00c      	b.n	800d0ce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d0b4:	687a      	ldr	r2, [r7, #4]
 800d0b6:	4613      	mov	r3, r2
 800d0b8:	009b      	lsls	r3, r3, #2
 800d0ba:	4413      	add	r3, r2
 800d0bc:	009b      	lsls	r3, r3, #2
 800d0be:	4a12      	ldr	r2, [pc, #72]	; (800d108 <prvInitialiseTaskLists+0x60>)
 800d0c0:	4413      	add	r3, r2
 800d0c2:	4618      	mov	r0, r3
 800d0c4:	f7fe fc24 	bl	800b910 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	3301      	adds	r3, #1
 800d0cc:	607b      	str	r3, [r7, #4]
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	2b06      	cmp	r3, #6
 800d0d2:	d9ef      	bls.n	800d0b4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d0d4:	480d      	ldr	r0, [pc, #52]	; (800d10c <prvInitialiseTaskLists+0x64>)
 800d0d6:	f7fe fc1b 	bl	800b910 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d0da:	480d      	ldr	r0, [pc, #52]	; (800d110 <prvInitialiseTaskLists+0x68>)
 800d0dc:	f7fe fc18 	bl	800b910 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d0e0:	480c      	ldr	r0, [pc, #48]	; (800d114 <prvInitialiseTaskLists+0x6c>)
 800d0e2:	f7fe fc15 	bl	800b910 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d0e6:	480c      	ldr	r0, [pc, #48]	; (800d118 <prvInitialiseTaskLists+0x70>)
 800d0e8:	f7fe fc12 	bl	800b910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d0ec:	480b      	ldr	r0, [pc, #44]	; (800d11c <prvInitialiseTaskLists+0x74>)
 800d0ee:	f7fe fc0f 	bl	800b910 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d0f2:	4b0b      	ldr	r3, [pc, #44]	; (800d120 <prvInitialiseTaskLists+0x78>)
 800d0f4:	4a05      	ldr	r2, [pc, #20]	; (800d10c <prvInitialiseTaskLists+0x64>)
 800d0f6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d0f8:	4b0a      	ldr	r3, [pc, #40]	; (800d124 <prvInitialiseTaskLists+0x7c>)
 800d0fa:	4a05      	ldr	r2, [pc, #20]	; (800d110 <prvInitialiseTaskLists+0x68>)
 800d0fc:	601a      	str	r2, [r3, #0]
}
 800d0fe:	bf00      	nop
 800d100:	3708      	adds	r7, #8
 800d102:	46bd      	mov	sp, r7
 800d104:	bd80      	pop	{r7, pc}
 800d106:	bf00      	nop
 800d108:	20000510 	.word	0x20000510
 800d10c:	2000059c 	.word	0x2000059c
 800d110:	200005b0 	.word	0x200005b0
 800d114:	200005cc 	.word	0x200005cc
 800d118:	200005e0 	.word	0x200005e0
 800d11c:	200005f8 	.word	0x200005f8
 800d120:	200005c4 	.word	0x200005c4
 800d124:	200005c8 	.word	0x200005c8

0800d128 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d128:	b580      	push	{r7, lr}
 800d12a:	b082      	sub	sp, #8
 800d12c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d12e:	e019      	b.n	800d164 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d130:	f000 fbba 	bl	800d8a8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d134:	4b0f      	ldr	r3, [pc, #60]	; (800d174 <prvCheckTasksWaitingTermination+0x4c>)
 800d136:	68db      	ldr	r3, [r3, #12]
 800d138:	68db      	ldr	r3, [r3, #12]
 800d13a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d13c:	687b      	ldr	r3, [r7, #4]
 800d13e:	3304      	adds	r3, #4
 800d140:	4618      	mov	r0, r3
 800d142:	f7fe fc6f 	bl	800ba24 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d146:	4b0c      	ldr	r3, [pc, #48]	; (800d178 <prvCheckTasksWaitingTermination+0x50>)
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	3b01      	subs	r3, #1
 800d14c:	4a0a      	ldr	r2, [pc, #40]	; (800d178 <prvCheckTasksWaitingTermination+0x50>)
 800d14e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d150:	4b0a      	ldr	r3, [pc, #40]	; (800d17c <prvCheckTasksWaitingTermination+0x54>)
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	3b01      	subs	r3, #1
 800d156:	4a09      	ldr	r2, [pc, #36]	; (800d17c <prvCheckTasksWaitingTermination+0x54>)
 800d158:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d15a:	f000 fbd7 	bl	800d90c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d15e:	6878      	ldr	r0, [r7, #4]
 800d160:	f000 f80e 	bl	800d180 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d164:	4b05      	ldr	r3, [pc, #20]	; (800d17c <prvCheckTasksWaitingTermination+0x54>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d1e1      	bne.n	800d130 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d16c:	bf00      	nop
 800d16e:	3708      	adds	r7, #8
 800d170:	46bd      	mov	sp, r7
 800d172:	bd80      	pop	{r7, pc}
 800d174:	200005e0 	.word	0x200005e0
 800d178:	2000060c 	.word	0x2000060c
 800d17c:	200005f4 	.word	0x200005f4

0800d180 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d180:	b580      	push	{r7, lr}
 800d182:	b084      	sub	sp, #16
 800d184:	af00      	add	r7, sp, #0
 800d186:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d188:	687b      	ldr	r3, [r7, #4]
 800d18a:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d108      	bne.n	800d1a4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d196:	4618      	mov	r0, r3
 800d198:	f000 fd32 	bl	800dc00 <vPortFree>
				vPortFree( pxTCB );
 800d19c:	6878      	ldr	r0, [r7, #4]
 800d19e:	f000 fd2f 	bl	800dc00 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d1a2:	e019      	b.n	800d1d8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d1aa:	2b01      	cmp	r3, #1
 800d1ac:	d103      	bne.n	800d1b6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d1ae:	6878      	ldr	r0, [r7, #4]
 800d1b0:	f000 fd26 	bl	800dc00 <vPortFree>
	}
 800d1b4:	e010      	b.n	800d1d8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800d1bc:	2b02      	cmp	r3, #2
 800d1be:	d00b      	beq.n	800d1d8 <prvDeleteTCB+0x58>
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	b672      	cpsid	i
 800d1c6:	f383 8811 	msr	BASEPRI, r3
 800d1ca:	f3bf 8f6f 	isb	sy
 800d1ce:	f3bf 8f4f 	dsb	sy
 800d1d2:	b662      	cpsie	i
 800d1d4:	60fb      	str	r3, [r7, #12]
 800d1d6:	e7fe      	b.n	800d1d6 <prvDeleteTCB+0x56>
	}
 800d1d8:	bf00      	nop
 800d1da:	3710      	adds	r7, #16
 800d1dc:	46bd      	mov	sp, r7
 800d1de:	bd80      	pop	{r7, pc}

0800d1e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d1e0:	b480      	push	{r7}
 800d1e2:	b083      	sub	sp, #12
 800d1e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d1e6:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <prvResetNextTaskUnblockTime+0x38>)
 800d1e8:	681b      	ldr	r3, [r3, #0]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	2b00      	cmp	r3, #0
 800d1ee:	d104      	bne.n	800d1fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d1f0:	4b0a      	ldr	r3, [pc, #40]	; (800d21c <prvResetNextTaskUnblockTime+0x3c>)
 800d1f2:	f04f 32ff 	mov.w	r2, #4294967295
 800d1f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d1f8:	e008      	b.n	800d20c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1fa:	4b07      	ldr	r3, [pc, #28]	; (800d218 <prvResetNextTaskUnblockTime+0x38>)
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	68db      	ldr	r3, [r3, #12]
 800d200:	68db      	ldr	r3, [r3, #12]
 800d202:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	685b      	ldr	r3, [r3, #4]
 800d208:	4a04      	ldr	r2, [pc, #16]	; (800d21c <prvResetNextTaskUnblockTime+0x3c>)
 800d20a:	6013      	str	r3, [r2, #0]
}
 800d20c:	bf00      	nop
 800d20e:	370c      	adds	r7, #12
 800d210:	46bd      	mov	sp, r7
 800d212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d216:	4770      	bx	lr
 800d218:	200005c4 	.word	0x200005c4
 800d21c:	2000062c 	.word	0x2000062c

0800d220 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d220:	b480      	push	{r7}
 800d222:	b083      	sub	sp, #12
 800d224:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d226:	4b0b      	ldr	r3, [pc, #44]	; (800d254 <xTaskGetSchedulerState+0x34>)
 800d228:	681b      	ldr	r3, [r3, #0]
 800d22a:	2b00      	cmp	r3, #0
 800d22c:	d102      	bne.n	800d234 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d22e:	2301      	movs	r3, #1
 800d230:	607b      	str	r3, [r7, #4]
 800d232:	e008      	b.n	800d246 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d234:	4b08      	ldr	r3, [pc, #32]	; (800d258 <xTaskGetSchedulerState+0x38>)
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	2b00      	cmp	r3, #0
 800d23a:	d102      	bne.n	800d242 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d23c:	2302      	movs	r3, #2
 800d23e:	607b      	str	r3, [r7, #4]
 800d240:	e001      	b.n	800d246 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d242:	2300      	movs	r3, #0
 800d244:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d246:	687b      	ldr	r3, [r7, #4]
	}
 800d248:	4618      	mov	r0, r3
 800d24a:	370c      	adds	r7, #12
 800d24c:	46bd      	mov	sp, r7
 800d24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d252:	4770      	bx	lr
 800d254:	20000618 	.word	0x20000618
 800d258:	20000634 	.word	0x20000634

0800d25c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d25c:	b580      	push	{r7, lr}
 800d25e:	b084      	sub	sp, #16
 800d260:	af00      	add	r7, sp, #0
 800d262:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d264:	687b      	ldr	r3, [r7, #4]
 800d266:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d268:	2300      	movs	r3, #0
 800d26a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d26c:	687b      	ldr	r3, [r7, #4]
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d069      	beq.n	800d346 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d272:	68bb      	ldr	r3, [r7, #8]
 800d274:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d276:	4b36      	ldr	r3, [pc, #216]	; (800d350 <xTaskPriorityInherit+0xf4>)
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d27c:	429a      	cmp	r2, r3
 800d27e:	d259      	bcs.n	800d334 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d280:	68bb      	ldr	r3, [r7, #8]
 800d282:	699b      	ldr	r3, [r3, #24]
 800d284:	2b00      	cmp	r3, #0
 800d286:	db06      	blt.n	800d296 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d288:	4b31      	ldr	r3, [pc, #196]	; (800d350 <xTaskPriorityInherit+0xf4>)
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d28e:	f1c3 0207 	rsb	r2, r3, #7
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d296:	68bb      	ldr	r3, [r7, #8]
 800d298:	6959      	ldr	r1, [r3, #20]
 800d29a:	68bb      	ldr	r3, [r7, #8]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	4613      	mov	r3, r2
 800d2a0:	009b      	lsls	r3, r3, #2
 800d2a2:	4413      	add	r3, r2
 800d2a4:	009b      	lsls	r3, r3, #2
 800d2a6:	4a2b      	ldr	r2, [pc, #172]	; (800d354 <xTaskPriorityInherit+0xf8>)
 800d2a8:	4413      	add	r3, r2
 800d2aa:	4299      	cmp	r1, r3
 800d2ac:	d13a      	bne.n	800d324 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d2ae:	68bb      	ldr	r3, [r7, #8]
 800d2b0:	3304      	adds	r3, #4
 800d2b2:	4618      	mov	r0, r3
 800d2b4:	f7fe fbb6 	bl	800ba24 <uxListRemove>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d115      	bne.n	800d2ea <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d2be:	68bb      	ldr	r3, [r7, #8]
 800d2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2c2:	4924      	ldr	r1, [pc, #144]	; (800d354 <xTaskPriorityInherit+0xf8>)
 800d2c4:	4613      	mov	r3, r2
 800d2c6:	009b      	lsls	r3, r3, #2
 800d2c8:	4413      	add	r3, r2
 800d2ca:	009b      	lsls	r3, r3, #2
 800d2cc:	440b      	add	r3, r1
 800d2ce:	681b      	ldr	r3, [r3, #0]
 800d2d0:	2b00      	cmp	r3, #0
 800d2d2:	d10a      	bne.n	800d2ea <xTaskPriorityInherit+0x8e>
 800d2d4:	68bb      	ldr	r3, [r7, #8]
 800d2d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2d8:	2201      	movs	r2, #1
 800d2da:	fa02 f303 	lsl.w	r3, r2, r3
 800d2de:	43da      	mvns	r2, r3
 800d2e0:	4b1d      	ldr	r3, [pc, #116]	; (800d358 <xTaskPriorityInherit+0xfc>)
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	4013      	ands	r3, r2
 800d2e6:	4a1c      	ldr	r2, [pc, #112]	; (800d358 <xTaskPriorityInherit+0xfc>)
 800d2e8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d2ea:	4b19      	ldr	r3, [pc, #100]	; (800d350 <xTaskPriorityInherit+0xf4>)
 800d2ec:	681b      	ldr	r3, [r3, #0]
 800d2ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2f0:	68bb      	ldr	r3, [r7, #8]
 800d2f2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d2f4:	68bb      	ldr	r3, [r7, #8]
 800d2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2f8:	2201      	movs	r2, #1
 800d2fa:	409a      	lsls	r2, r3
 800d2fc:	4b16      	ldr	r3, [pc, #88]	; (800d358 <xTaskPriorityInherit+0xfc>)
 800d2fe:	681b      	ldr	r3, [r3, #0]
 800d300:	4313      	orrs	r3, r2
 800d302:	4a15      	ldr	r2, [pc, #84]	; (800d358 <xTaskPriorityInherit+0xfc>)
 800d304:	6013      	str	r3, [r2, #0]
 800d306:	68bb      	ldr	r3, [r7, #8]
 800d308:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d30a:	4613      	mov	r3, r2
 800d30c:	009b      	lsls	r3, r3, #2
 800d30e:	4413      	add	r3, r2
 800d310:	009b      	lsls	r3, r3, #2
 800d312:	4a10      	ldr	r2, [pc, #64]	; (800d354 <xTaskPriorityInherit+0xf8>)
 800d314:	441a      	add	r2, r3
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	3304      	adds	r3, #4
 800d31a:	4619      	mov	r1, r3
 800d31c:	4610      	mov	r0, r2
 800d31e:	f7fe fb24 	bl	800b96a <vListInsertEnd>
 800d322:	e004      	b.n	800d32e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d324:	4b0a      	ldr	r3, [pc, #40]	; (800d350 <xTaskPriorityInherit+0xf4>)
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d32a:	68bb      	ldr	r3, [r7, #8]
 800d32c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d32e:	2301      	movs	r3, #1
 800d330:	60fb      	str	r3, [r7, #12]
 800d332:	e008      	b.n	800d346 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d334:	68bb      	ldr	r3, [r7, #8]
 800d336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d338:	4b05      	ldr	r3, [pc, #20]	; (800d350 <xTaskPriorityInherit+0xf4>)
 800d33a:	681b      	ldr	r3, [r3, #0]
 800d33c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33e:	429a      	cmp	r2, r3
 800d340:	d201      	bcs.n	800d346 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d342:	2301      	movs	r3, #1
 800d344:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d346:	68fb      	ldr	r3, [r7, #12]
	}
 800d348:	4618      	mov	r0, r3
 800d34a:	3710      	adds	r7, #16
 800d34c:	46bd      	mov	sp, r7
 800d34e:	bd80      	pop	{r7, pc}
 800d350:	2000050c 	.word	0x2000050c
 800d354:	20000510 	.word	0x20000510
 800d358:	20000614 	.word	0x20000614

0800d35c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d35c:	b580      	push	{r7, lr}
 800d35e:	b086      	sub	sp, #24
 800d360:	af00      	add	r7, sp, #0
 800d362:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d364:	687b      	ldr	r3, [r7, #4]
 800d366:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d368:	2300      	movs	r3, #0
 800d36a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d070      	beq.n	800d454 <xTaskPriorityDisinherit+0xf8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d372:	4b3b      	ldr	r3, [pc, #236]	; (800d460 <xTaskPriorityDisinherit+0x104>)
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	693a      	ldr	r2, [r7, #16]
 800d378:	429a      	cmp	r2, r3
 800d37a:	d00b      	beq.n	800d394 <xTaskPriorityDisinherit+0x38>
 800d37c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d380:	b672      	cpsid	i
 800d382:	f383 8811 	msr	BASEPRI, r3
 800d386:	f3bf 8f6f 	isb	sy
 800d38a:	f3bf 8f4f 	dsb	sy
 800d38e:	b662      	cpsie	i
 800d390:	60fb      	str	r3, [r7, #12]
 800d392:	e7fe      	b.n	800d392 <xTaskPriorityDisinherit+0x36>
			configASSERT( pxTCB->uxMutexesHeld );
 800d394:	693b      	ldr	r3, [r7, #16]
 800d396:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d10b      	bne.n	800d3b4 <xTaskPriorityDisinherit+0x58>
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	b672      	cpsid	i
 800d3a2:	f383 8811 	msr	BASEPRI, r3
 800d3a6:	f3bf 8f6f 	isb	sy
 800d3aa:	f3bf 8f4f 	dsb	sy
 800d3ae:	b662      	cpsie	i
 800d3b0:	60bb      	str	r3, [r7, #8]
 800d3b2:	e7fe      	b.n	800d3b2 <xTaskPriorityDisinherit+0x56>
			( pxTCB->uxMutexesHeld )--;
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3b8:	1e5a      	subs	r2, r3, #1
 800d3ba:	693b      	ldr	r3, [r7, #16]
 800d3bc:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d3be:	693b      	ldr	r3, [r7, #16]
 800d3c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3c2:	693b      	ldr	r3, [r7, #16]
 800d3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d044      	beq.n	800d454 <xTaskPriorityDisinherit+0xf8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d3ca:	693b      	ldr	r3, [r7, #16]
 800d3cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d3ce:	2b00      	cmp	r3, #0
 800d3d0:	d140      	bne.n	800d454 <xTaskPriorityDisinherit+0xf8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3d2:	693b      	ldr	r3, [r7, #16]
 800d3d4:	3304      	adds	r3, #4
 800d3d6:	4618      	mov	r0, r3
 800d3d8:	f7fe fb24 	bl	800ba24 <uxListRemove>
 800d3dc:	4603      	mov	r3, r0
 800d3de:	2b00      	cmp	r3, #0
 800d3e0:	d115      	bne.n	800d40e <xTaskPriorityDisinherit+0xb2>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d3e2:	693b      	ldr	r3, [r7, #16]
 800d3e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d3e6:	491f      	ldr	r1, [pc, #124]	; (800d464 <xTaskPriorityDisinherit+0x108>)
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	009b      	lsls	r3, r3, #2
 800d3f0:	440b      	add	r3, r1
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2b00      	cmp	r3, #0
 800d3f6:	d10a      	bne.n	800d40e <xTaskPriorityDisinherit+0xb2>
 800d3f8:	693b      	ldr	r3, [r7, #16]
 800d3fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d3fc:	2201      	movs	r2, #1
 800d3fe:	fa02 f303 	lsl.w	r3, r2, r3
 800d402:	43da      	mvns	r2, r3
 800d404:	4b18      	ldr	r3, [pc, #96]	; (800d468 <xTaskPriorityDisinherit+0x10c>)
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	4013      	ands	r3, r2
 800d40a:	4a17      	ldr	r2, [pc, #92]	; (800d468 <xTaskPriorityDisinherit+0x10c>)
 800d40c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d40e:	693b      	ldr	r3, [r7, #16]
 800d410:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d412:	693b      	ldr	r3, [r7, #16]
 800d414:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d416:	693b      	ldr	r3, [r7, #16]
 800d418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d41a:	f1c3 0207 	rsb	r2, r3, #7
 800d41e:	693b      	ldr	r3, [r7, #16]
 800d420:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d422:	693b      	ldr	r3, [r7, #16]
 800d424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d426:	2201      	movs	r2, #1
 800d428:	409a      	lsls	r2, r3
 800d42a:	4b0f      	ldr	r3, [pc, #60]	; (800d468 <xTaskPriorityDisinherit+0x10c>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	4313      	orrs	r3, r2
 800d430:	4a0d      	ldr	r2, [pc, #52]	; (800d468 <xTaskPriorityDisinherit+0x10c>)
 800d432:	6013      	str	r3, [r2, #0]
 800d434:	693b      	ldr	r3, [r7, #16]
 800d436:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d438:	4613      	mov	r3, r2
 800d43a:	009b      	lsls	r3, r3, #2
 800d43c:	4413      	add	r3, r2
 800d43e:	009b      	lsls	r3, r3, #2
 800d440:	4a08      	ldr	r2, [pc, #32]	; (800d464 <xTaskPriorityDisinherit+0x108>)
 800d442:	441a      	add	r2, r3
 800d444:	693b      	ldr	r3, [r7, #16]
 800d446:	3304      	adds	r3, #4
 800d448:	4619      	mov	r1, r3
 800d44a:	4610      	mov	r0, r2
 800d44c:	f7fe fa8d 	bl	800b96a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d450:	2301      	movs	r3, #1
 800d452:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d454:	697b      	ldr	r3, [r7, #20]
	}
 800d456:	4618      	mov	r0, r3
 800d458:	3718      	adds	r7, #24
 800d45a:	46bd      	mov	sp, r7
 800d45c:	bd80      	pop	{r7, pc}
 800d45e:	bf00      	nop
 800d460:	2000050c 	.word	0x2000050c
 800d464:	20000510 	.word	0x20000510
 800d468:	20000614 	.word	0x20000614

0800d46c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d46c:	b580      	push	{r7, lr}
 800d46e:	b088      	sub	sp, #32
 800d470:	af00      	add	r7, sp, #0
 800d472:	6078      	str	r0, [r7, #4]
 800d474:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d476:	687b      	ldr	r3, [r7, #4]
 800d478:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d47a:	2301      	movs	r3, #1
 800d47c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d47e:	687b      	ldr	r3, [r7, #4]
 800d480:	2b00      	cmp	r3, #0
 800d482:	f000 8085 	beq.w	800d590 <vTaskPriorityDisinheritAfterTimeout+0x124>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d486:	69bb      	ldr	r3, [r7, #24]
 800d488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10b      	bne.n	800d4a6 <vTaskPriorityDisinheritAfterTimeout+0x3a>
 800d48e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d492:	b672      	cpsid	i
 800d494:	f383 8811 	msr	BASEPRI, r3
 800d498:	f3bf 8f6f 	isb	sy
 800d49c:	f3bf 8f4f 	dsb	sy
 800d4a0:	b662      	cpsie	i
 800d4a2:	60fb      	str	r3, [r7, #12]
 800d4a4:	e7fe      	b.n	800d4a4 <vTaskPriorityDisinheritAfterTimeout+0x38>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d4a6:	69bb      	ldr	r3, [r7, #24]
 800d4a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4aa:	683a      	ldr	r2, [r7, #0]
 800d4ac:	429a      	cmp	r2, r3
 800d4ae:	d902      	bls.n	800d4b6 <vTaskPriorityDisinheritAfterTimeout+0x4a>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	61fb      	str	r3, [r7, #28]
 800d4b4:	e002      	b.n	800d4bc <vTaskPriorityDisinheritAfterTimeout+0x50>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d4b6:	69bb      	ldr	r3, [r7, #24]
 800d4b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ba:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d4bc:	69bb      	ldr	r3, [r7, #24]
 800d4be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4c0:	69fa      	ldr	r2, [r7, #28]
 800d4c2:	429a      	cmp	r2, r3
 800d4c4:	d064      	beq.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x124>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d4c6:	69bb      	ldr	r3, [r7, #24]
 800d4c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d4ca:	697a      	ldr	r2, [r7, #20]
 800d4cc:	429a      	cmp	r2, r3
 800d4ce:	d15f      	bne.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x124>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d4d0:	4b31      	ldr	r3, [pc, #196]	; (800d598 <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 800d4d2:	681b      	ldr	r3, [r3, #0]
 800d4d4:	69ba      	ldr	r2, [r7, #24]
 800d4d6:	429a      	cmp	r2, r3
 800d4d8:	d10b      	bne.n	800d4f2 <vTaskPriorityDisinheritAfterTimeout+0x86>
 800d4da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4de:	b672      	cpsid	i
 800d4e0:	f383 8811 	msr	BASEPRI, r3
 800d4e4:	f3bf 8f6f 	isb	sy
 800d4e8:	f3bf 8f4f 	dsb	sy
 800d4ec:	b662      	cpsie	i
 800d4ee:	60bb      	str	r3, [r7, #8]
 800d4f0:	e7fe      	b.n	800d4f0 <vTaskPriorityDisinheritAfterTimeout+0x84>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d4f2:	69bb      	ldr	r3, [r7, #24]
 800d4f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d4f6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d4f8:	69bb      	ldr	r3, [r7, #24]
 800d4fa:	69fa      	ldr	r2, [r7, #28]
 800d4fc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d4fe:	69bb      	ldr	r3, [r7, #24]
 800d500:	699b      	ldr	r3, [r3, #24]
 800d502:	2b00      	cmp	r3, #0
 800d504:	db04      	blt.n	800d510 <vTaskPriorityDisinheritAfterTimeout+0xa4>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d506:	69fb      	ldr	r3, [r7, #28]
 800d508:	f1c3 0207 	rsb	r2, r3, #7
 800d50c:	69bb      	ldr	r3, [r7, #24]
 800d50e:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d510:	69bb      	ldr	r3, [r7, #24]
 800d512:	6959      	ldr	r1, [r3, #20]
 800d514:	693a      	ldr	r2, [r7, #16]
 800d516:	4613      	mov	r3, r2
 800d518:	009b      	lsls	r3, r3, #2
 800d51a:	4413      	add	r3, r2
 800d51c:	009b      	lsls	r3, r3, #2
 800d51e:	4a1f      	ldr	r2, [pc, #124]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d520:	4413      	add	r3, r2
 800d522:	4299      	cmp	r1, r3
 800d524:	d134      	bne.n	800d590 <vTaskPriorityDisinheritAfterTimeout+0x124>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d526:	69bb      	ldr	r3, [r7, #24]
 800d528:	3304      	adds	r3, #4
 800d52a:	4618      	mov	r0, r3
 800d52c:	f7fe fa7a 	bl	800ba24 <uxListRemove>
 800d530:	4603      	mov	r3, r0
 800d532:	2b00      	cmp	r3, #0
 800d534:	d115      	bne.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xf6>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d536:	69bb      	ldr	r3, [r7, #24]
 800d538:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d53a:	4918      	ldr	r1, [pc, #96]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d53c:	4613      	mov	r3, r2
 800d53e:	009b      	lsls	r3, r3, #2
 800d540:	4413      	add	r3, r2
 800d542:	009b      	lsls	r3, r3, #2
 800d544:	440b      	add	r3, r1
 800d546:	681b      	ldr	r3, [r3, #0]
 800d548:	2b00      	cmp	r3, #0
 800d54a:	d10a      	bne.n	800d562 <vTaskPriorityDisinheritAfterTimeout+0xf6>
 800d54c:	69bb      	ldr	r3, [r7, #24]
 800d54e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d550:	2201      	movs	r2, #1
 800d552:	fa02 f303 	lsl.w	r3, r2, r3
 800d556:	43da      	mvns	r2, r3
 800d558:	4b11      	ldr	r3, [pc, #68]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d55a:	681b      	ldr	r3, [r3, #0]
 800d55c:	4013      	ands	r3, r2
 800d55e:	4a10      	ldr	r2, [pc, #64]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d560:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d562:	69bb      	ldr	r3, [r7, #24]
 800d564:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d566:	2201      	movs	r2, #1
 800d568:	409a      	lsls	r2, r3
 800d56a:	4b0d      	ldr	r3, [pc, #52]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	4313      	orrs	r3, r2
 800d570:	4a0b      	ldr	r2, [pc, #44]	; (800d5a0 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d572:	6013      	str	r3, [r2, #0]
 800d574:	69bb      	ldr	r3, [r7, #24]
 800d576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d578:	4613      	mov	r3, r2
 800d57a:	009b      	lsls	r3, r3, #2
 800d57c:	4413      	add	r3, r2
 800d57e:	009b      	lsls	r3, r3, #2
 800d580:	4a06      	ldr	r2, [pc, #24]	; (800d59c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d582:	441a      	add	r2, r3
 800d584:	69bb      	ldr	r3, [r7, #24]
 800d586:	3304      	adds	r3, #4
 800d588:	4619      	mov	r1, r3
 800d58a:	4610      	mov	r0, r2
 800d58c:	f7fe f9ed 	bl	800b96a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d590:	bf00      	nop
 800d592:	3720      	adds	r7, #32
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	2000050c 	.word	0x2000050c
 800d59c:	20000510 	.word	0x20000510
 800d5a0:	20000614 	.word	0x20000614

0800d5a4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d5a4:	b480      	push	{r7}
 800d5a6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d5a8:	4b07      	ldr	r3, [pc, #28]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	2b00      	cmp	r3, #0
 800d5ae:	d004      	beq.n	800d5ba <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d5b0:	4b05      	ldr	r3, [pc, #20]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5b2:	681b      	ldr	r3, [r3, #0]
 800d5b4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5b6:	3201      	adds	r2, #1
 800d5b8:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d5ba:	4b03      	ldr	r3, [pc, #12]	; (800d5c8 <pvTaskIncrementMutexHeldCount+0x24>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
	}
 800d5be:	4618      	mov	r0, r3
 800d5c0:	46bd      	mov	sp, r7
 800d5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5c6:	4770      	bx	lr
 800d5c8:	2000050c 	.word	0x2000050c

0800d5cc <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5cc:	b580      	push	{r7, lr}
 800d5ce:	b084      	sub	sp, #16
 800d5d0:	af00      	add	r7, sp, #0
 800d5d2:	6078      	str	r0, [r7, #4]
 800d5d4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5d6:	4b29      	ldr	r3, [pc, #164]	; (800d67c <prvAddCurrentTaskToDelayedList+0xb0>)
 800d5d8:	681b      	ldr	r3, [r3, #0]
 800d5da:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5dc:	4b28      	ldr	r3, [pc, #160]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5de:	681b      	ldr	r3, [r3, #0]
 800d5e0:	3304      	adds	r3, #4
 800d5e2:	4618      	mov	r0, r3
 800d5e4:	f7fe fa1e 	bl	800ba24 <uxListRemove>
 800d5e8:	4603      	mov	r3, r0
 800d5ea:	2b00      	cmp	r3, #0
 800d5ec:	d10b      	bne.n	800d606 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d5ee:	4b24      	ldr	r3, [pc, #144]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d5f0:	681b      	ldr	r3, [r3, #0]
 800d5f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d5f4:	2201      	movs	r2, #1
 800d5f6:	fa02 f303 	lsl.w	r3, r2, r3
 800d5fa:	43da      	mvns	r2, r3
 800d5fc:	4b21      	ldr	r3, [pc, #132]	; (800d684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	4013      	ands	r3, r2
 800d602:	4a20      	ldr	r2, [pc, #128]	; (800d684 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d604:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d606:	687b      	ldr	r3, [r7, #4]
 800d608:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d60c:	d10a      	bne.n	800d624 <prvAddCurrentTaskToDelayedList+0x58>
 800d60e:	683b      	ldr	r3, [r7, #0]
 800d610:	2b00      	cmp	r3, #0
 800d612:	d007      	beq.n	800d624 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d614:	4b1a      	ldr	r3, [pc, #104]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d616:	681b      	ldr	r3, [r3, #0]
 800d618:	3304      	adds	r3, #4
 800d61a:	4619      	mov	r1, r3
 800d61c:	481a      	ldr	r0, [pc, #104]	; (800d688 <prvAddCurrentTaskToDelayedList+0xbc>)
 800d61e:	f7fe f9a4 	bl	800b96a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d622:	e026      	b.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d624:	68fa      	ldr	r2, [r7, #12]
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	4413      	add	r3, r2
 800d62a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d62c:	4b14      	ldr	r3, [pc, #80]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d62e:	681b      	ldr	r3, [r3, #0]
 800d630:	68ba      	ldr	r2, [r7, #8]
 800d632:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d634:	68ba      	ldr	r2, [r7, #8]
 800d636:	68fb      	ldr	r3, [r7, #12]
 800d638:	429a      	cmp	r2, r3
 800d63a:	d209      	bcs.n	800d650 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d63c:	4b13      	ldr	r3, [pc, #76]	; (800d68c <prvAddCurrentTaskToDelayedList+0xc0>)
 800d63e:	681a      	ldr	r2, [r3, #0]
 800d640:	4b0f      	ldr	r3, [pc, #60]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	3304      	adds	r3, #4
 800d646:	4619      	mov	r1, r3
 800d648:	4610      	mov	r0, r2
 800d64a:	f7fe f9b2 	bl	800b9b2 <vListInsert>
}
 800d64e:	e010      	b.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d650:	4b0f      	ldr	r3, [pc, #60]	; (800d690 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d652:	681a      	ldr	r2, [r3, #0]
 800d654:	4b0a      	ldr	r3, [pc, #40]	; (800d680 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d656:	681b      	ldr	r3, [r3, #0]
 800d658:	3304      	adds	r3, #4
 800d65a:	4619      	mov	r1, r3
 800d65c:	4610      	mov	r0, r2
 800d65e:	f7fe f9a8 	bl	800b9b2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d662:	4b0c      	ldr	r3, [pc, #48]	; (800d694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d664:	681b      	ldr	r3, [r3, #0]
 800d666:	68ba      	ldr	r2, [r7, #8]
 800d668:	429a      	cmp	r2, r3
 800d66a:	d202      	bcs.n	800d672 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d66c:	4a09      	ldr	r2, [pc, #36]	; (800d694 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d66e:	68bb      	ldr	r3, [r7, #8]
 800d670:	6013      	str	r3, [r2, #0]
}
 800d672:	bf00      	nop
 800d674:	3710      	adds	r7, #16
 800d676:	46bd      	mov	sp, r7
 800d678:	bd80      	pop	{r7, pc}
 800d67a:	bf00      	nop
 800d67c:	20000610 	.word	0x20000610
 800d680:	2000050c 	.word	0x2000050c
 800d684:	20000614 	.word	0x20000614
 800d688:	200005f8 	.word	0x200005f8
 800d68c:	200005c8 	.word	0x200005c8
 800d690:	200005c4 	.word	0x200005c4
 800d694:	2000062c 	.word	0x2000062c

0800d698 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d698:	b480      	push	{r7}
 800d69a:	b085      	sub	sp, #20
 800d69c:	af00      	add	r7, sp, #0
 800d69e:	60f8      	str	r0, [r7, #12]
 800d6a0:	60b9      	str	r1, [r7, #8]
 800d6a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	3b04      	subs	r3, #4
 800d6a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d6b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6b2:	68fb      	ldr	r3, [r7, #12]
 800d6b4:	3b04      	subs	r3, #4
 800d6b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d6b8:	68bb      	ldr	r3, [r7, #8]
 800d6ba:	f023 0201 	bic.w	r2, r3, #1
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d6c2:	68fb      	ldr	r3, [r7, #12]
 800d6c4:	3b04      	subs	r3, #4
 800d6c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d6c8:	4a0c      	ldr	r2, [pc, #48]	; (800d6fc <pxPortInitialiseStack+0x64>)
 800d6ca:	68fb      	ldr	r3, [r7, #12]
 800d6cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	3b14      	subs	r3, #20
 800d6d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d6d4:	687a      	ldr	r2, [r7, #4]
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d6da:	68fb      	ldr	r3, [r7, #12]
 800d6dc:	3b04      	subs	r3, #4
 800d6de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f06f 0202 	mvn.w	r2, #2
 800d6e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d6e8:	68fb      	ldr	r3, [r7, #12]
 800d6ea:	3b20      	subs	r3, #32
 800d6ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
}
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	3714      	adds	r7, #20
 800d6f4:	46bd      	mov	sp, r7
 800d6f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6fa:	4770      	bx	lr
 800d6fc:	0800d701 	.word	0x0800d701

0800d700 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d700:	b480      	push	{r7}
 800d702:	b085      	sub	sp, #20
 800d704:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d706:	2300      	movs	r3, #0
 800d708:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d70a:	4b13      	ldr	r3, [pc, #76]	; (800d758 <prvTaskExitError+0x58>)
 800d70c:	681b      	ldr	r3, [r3, #0]
 800d70e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d712:	d00b      	beq.n	800d72c <prvTaskExitError+0x2c>
 800d714:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d718:	b672      	cpsid	i
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	b662      	cpsie	i
 800d728:	60fb      	str	r3, [r7, #12]
 800d72a:	e7fe      	b.n	800d72a <prvTaskExitError+0x2a>
 800d72c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d730:	b672      	cpsid	i
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	b662      	cpsie	i
 800d740:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d742:	bf00      	nop
 800d744:	687b      	ldr	r3, [r7, #4]
 800d746:	2b00      	cmp	r3, #0
 800d748:	d0fc      	beq.n	800d744 <prvTaskExitError+0x44>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d74a:	bf00      	nop
 800d74c:	3714      	adds	r7, #20
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
 800d756:	bf00      	nop
 800d758:	2000005c 	.word	0x2000005c
 800d75c:	00000000 	.word	0x00000000

0800d760 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d760:	4b07      	ldr	r3, [pc, #28]	; (800d780 <pxCurrentTCBConst2>)
 800d762:	6819      	ldr	r1, [r3, #0]
 800d764:	6808      	ldr	r0, [r1, #0]
 800d766:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d76a:	f380 8809 	msr	PSP, r0
 800d76e:	f3bf 8f6f 	isb	sy
 800d772:	f04f 0000 	mov.w	r0, #0
 800d776:	f380 8811 	msr	BASEPRI, r0
 800d77a:	4770      	bx	lr
 800d77c:	f3af 8000 	nop.w

0800d780 <pxCurrentTCBConst2>:
 800d780:	2000050c 	.word	0x2000050c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d784:	bf00      	nop
 800d786:	bf00      	nop

0800d788 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d788:	4808      	ldr	r0, [pc, #32]	; (800d7ac <prvPortStartFirstTask+0x24>)
 800d78a:	6800      	ldr	r0, [r0, #0]
 800d78c:	6800      	ldr	r0, [r0, #0]
 800d78e:	f380 8808 	msr	MSP, r0
 800d792:	f04f 0000 	mov.w	r0, #0
 800d796:	f380 8814 	msr	CONTROL, r0
 800d79a:	b662      	cpsie	i
 800d79c:	b661      	cpsie	f
 800d79e:	f3bf 8f4f 	dsb	sy
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	df00      	svc	0
 800d7a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d7aa:	bf00      	nop
 800d7ac:	e000ed08 	.word	0xe000ed08

0800d7b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d7b0:	b580      	push	{r7, lr}
 800d7b2:	b084      	sub	sp, #16
 800d7b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d7b6:	4b36      	ldr	r3, [pc, #216]	; (800d890 <xPortStartScheduler+0xe0>)
 800d7b8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	781b      	ldrb	r3, [r3, #0]
 800d7be:	b2db      	uxtb	r3, r3
 800d7c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d7c2:	68fb      	ldr	r3, [r7, #12]
 800d7c4:	22ff      	movs	r2, #255	; 0xff
 800d7c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d7c8:	68fb      	ldr	r3, [r7, #12]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	b2db      	uxtb	r3, r3
 800d7ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d7d0:	78fb      	ldrb	r3, [r7, #3]
 800d7d2:	b2db      	uxtb	r3, r3
 800d7d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d7d8:	b2da      	uxtb	r2, r3
 800d7da:	4b2e      	ldr	r3, [pc, #184]	; (800d894 <xPortStartScheduler+0xe4>)
 800d7dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d7de:	4b2e      	ldr	r3, [pc, #184]	; (800d898 <xPortStartScheduler+0xe8>)
 800d7e0:	2207      	movs	r2, #7
 800d7e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7e4:	e009      	b.n	800d7fa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d7e6:	4b2c      	ldr	r3, [pc, #176]	; (800d898 <xPortStartScheduler+0xe8>)
 800d7e8:	681b      	ldr	r3, [r3, #0]
 800d7ea:	3b01      	subs	r3, #1
 800d7ec:	4a2a      	ldr	r2, [pc, #168]	; (800d898 <xPortStartScheduler+0xe8>)
 800d7ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d7f0:	78fb      	ldrb	r3, [r7, #3]
 800d7f2:	b2db      	uxtb	r3, r3
 800d7f4:	005b      	lsls	r3, r3, #1
 800d7f6:	b2db      	uxtb	r3, r3
 800d7f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d7fa:	78fb      	ldrb	r3, [r7, #3]
 800d7fc:	b2db      	uxtb	r3, r3
 800d7fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d802:	2b80      	cmp	r3, #128	; 0x80
 800d804:	d0ef      	beq.n	800d7e6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d806:	4b24      	ldr	r3, [pc, #144]	; (800d898 <xPortStartScheduler+0xe8>)
 800d808:	681b      	ldr	r3, [r3, #0]
 800d80a:	f1c3 0307 	rsb	r3, r3, #7
 800d80e:	2b04      	cmp	r3, #4
 800d810:	d00b      	beq.n	800d82a <xPortStartScheduler+0x7a>
 800d812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d816:	b672      	cpsid	i
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
 800d824:	b662      	cpsie	i
 800d826:	60bb      	str	r3, [r7, #8]
 800d828:	e7fe      	b.n	800d828 <xPortStartScheduler+0x78>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d82a:	4b1b      	ldr	r3, [pc, #108]	; (800d898 <xPortStartScheduler+0xe8>)
 800d82c:	681b      	ldr	r3, [r3, #0]
 800d82e:	021b      	lsls	r3, r3, #8
 800d830:	4a19      	ldr	r2, [pc, #100]	; (800d898 <xPortStartScheduler+0xe8>)
 800d832:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d834:	4b18      	ldr	r3, [pc, #96]	; (800d898 <xPortStartScheduler+0xe8>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d83c:	4a16      	ldr	r2, [pc, #88]	; (800d898 <xPortStartScheduler+0xe8>)
 800d83e:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	b2da      	uxtb	r2, r3
 800d844:	68fb      	ldr	r3, [r7, #12]
 800d846:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d848:	4b14      	ldr	r3, [pc, #80]	; (800d89c <xPortStartScheduler+0xec>)
 800d84a:	681b      	ldr	r3, [r3, #0]
 800d84c:	4a13      	ldr	r2, [pc, #76]	; (800d89c <xPortStartScheduler+0xec>)
 800d84e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d852:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d854:	4b11      	ldr	r3, [pc, #68]	; (800d89c <xPortStartScheduler+0xec>)
 800d856:	681b      	ldr	r3, [r3, #0]
 800d858:	4a10      	ldr	r2, [pc, #64]	; (800d89c <xPortStartScheduler+0xec>)
 800d85a:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d85e:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d860:	f000 f8d4 	bl	800da0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d864:	4b0e      	ldr	r3, [pc, #56]	; (800d8a0 <xPortStartScheduler+0xf0>)
 800d866:	2200      	movs	r2, #0
 800d868:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d86a:	f000 f8f3 	bl	800da54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d86e:	4b0d      	ldr	r3, [pc, #52]	; (800d8a4 <xPortStartScheduler+0xf4>)
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	4a0c      	ldr	r2, [pc, #48]	; (800d8a4 <xPortStartScheduler+0xf4>)
 800d874:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d878:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d87a:	f7ff ff85 	bl	800d788 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d87e:	f7ff fa67 	bl	800cd50 <vTaskSwitchContext>
	prvTaskExitError();
 800d882:	f7ff ff3d 	bl	800d700 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d886:	2300      	movs	r3, #0
}
 800d888:	4618      	mov	r0, r3
 800d88a:	3710      	adds	r7, #16
 800d88c:	46bd      	mov	sp, r7
 800d88e:	bd80      	pop	{r7, pc}
 800d890:	e000e400 	.word	0xe000e400
 800d894:	20000638 	.word	0x20000638
 800d898:	2000063c 	.word	0x2000063c
 800d89c:	e000ed20 	.word	0xe000ed20
 800d8a0:	2000005c 	.word	0x2000005c
 800d8a4:	e000ef34 	.word	0xe000ef34

0800d8a8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d8a8:	b480      	push	{r7}
 800d8aa:	b083      	sub	sp, #12
 800d8ac:	af00      	add	r7, sp, #0
 800d8ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8b2:	b672      	cpsid	i
 800d8b4:	f383 8811 	msr	BASEPRI, r3
 800d8b8:	f3bf 8f6f 	isb	sy
 800d8bc:	f3bf 8f4f 	dsb	sy
 800d8c0:	b662      	cpsie	i
 800d8c2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d8c4:	4b0f      	ldr	r3, [pc, #60]	; (800d904 <vPortEnterCritical+0x5c>)
 800d8c6:	681b      	ldr	r3, [r3, #0]
 800d8c8:	3301      	adds	r3, #1
 800d8ca:	4a0e      	ldr	r2, [pc, #56]	; (800d904 <vPortEnterCritical+0x5c>)
 800d8cc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d8ce:	4b0d      	ldr	r3, [pc, #52]	; (800d904 <vPortEnterCritical+0x5c>)
 800d8d0:	681b      	ldr	r3, [r3, #0]
 800d8d2:	2b01      	cmp	r3, #1
 800d8d4:	d110      	bne.n	800d8f8 <vPortEnterCritical+0x50>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d8d6:	4b0c      	ldr	r3, [pc, #48]	; (800d908 <vPortEnterCritical+0x60>)
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	b2db      	uxtb	r3, r3
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <vPortEnterCritical+0x50>
 800d8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e4:	b672      	cpsid	i
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	b662      	cpsie	i
 800d8f4:	603b      	str	r3, [r7, #0]
 800d8f6:	e7fe      	b.n	800d8f6 <vPortEnterCritical+0x4e>
	}
}
 800d8f8:	bf00      	nop
 800d8fa:	370c      	adds	r7, #12
 800d8fc:	46bd      	mov	sp, r7
 800d8fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d902:	4770      	bx	lr
 800d904:	2000005c 	.word	0x2000005c
 800d908:	e000ed04 	.word	0xe000ed04

0800d90c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d90c:	b480      	push	{r7}
 800d90e:	b083      	sub	sp, #12
 800d910:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d912:	4b12      	ldr	r3, [pc, #72]	; (800d95c <vPortExitCritical+0x50>)
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d10b      	bne.n	800d932 <vPortExitCritical+0x26>
 800d91a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d91e:	b672      	cpsid	i
 800d920:	f383 8811 	msr	BASEPRI, r3
 800d924:	f3bf 8f6f 	isb	sy
 800d928:	f3bf 8f4f 	dsb	sy
 800d92c:	b662      	cpsie	i
 800d92e:	607b      	str	r3, [r7, #4]
 800d930:	e7fe      	b.n	800d930 <vPortExitCritical+0x24>
	uxCriticalNesting--;
 800d932:	4b0a      	ldr	r3, [pc, #40]	; (800d95c <vPortExitCritical+0x50>)
 800d934:	681b      	ldr	r3, [r3, #0]
 800d936:	3b01      	subs	r3, #1
 800d938:	4a08      	ldr	r2, [pc, #32]	; (800d95c <vPortExitCritical+0x50>)
 800d93a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d93c:	4b07      	ldr	r3, [pc, #28]	; (800d95c <vPortExitCritical+0x50>)
 800d93e:	681b      	ldr	r3, [r3, #0]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d104      	bne.n	800d94e <vPortExitCritical+0x42>
 800d944:	2300      	movs	r3, #0
 800d946:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d948:	683b      	ldr	r3, [r7, #0]
 800d94a:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800d94e:	bf00      	nop
 800d950:	370c      	adds	r7, #12
 800d952:	46bd      	mov	sp, r7
 800d954:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d958:	4770      	bx	lr
 800d95a:	bf00      	nop
 800d95c:	2000005c 	.word	0x2000005c

0800d960 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d960:	f3ef 8009 	mrs	r0, PSP
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	4b15      	ldr	r3, [pc, #84]	; (800d9c0 <pxCurrentTCBConst>)
 800d96a:	681a      	ldr	r2, [r3, #0]
 800d96c:	f01e 0f10 	tst.w	lr, #16
 800d970:	bf08      	it	eq
 800d972:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d976:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d97a:	6010      	str	r0, [r2, #0]
 800d97c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d980:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d984:	b672      	cpsid	i
 800d986:	f380 8811 	msr	BASEPRI, r0
 800d98a:	f3bf 8f4f 	dsb	sy
 800d98e:	f3bf 8f6f 	isb	sy
 800d992:	b662      	cpsie	i
 800d994:	f7ff f9dc 	bl	800cd50 <vTaskSwitchContext>
 800d998:	f04f 0000 	mov.w	r0, #0
 800d99c:	f380 8811 	msr	BASEPRI, r0
 800d9a0:	bc09      	pop	{r0, r3}
 800d9a2:	6819      	ldr	r1, [r3, #0]
 800d9a4:	6808      	ldr	r0, [r1, #0]
 800d9a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d9aa:	f01e 0f10 	tst.w	lr, #16
 800d9ae:	bf08      	it	eq
 800d9b0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d9b4:	f380 8809 	msr	PSP, r0
 800d9b8:	f3bf 8f6f 	isb	sy
 800d9bc:	4770      	bx	lr
 800d9be:	bf00      	nop

0800d9c0 <pxCurrentTCBConst>:
 800d9c0:	2000050c 	.word	0x2000050c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d9c4:	bf00      	nop
 800d9c6:	bf00      	nop

0800d9c8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d9c8:	b580      	push	{r7, lr}
 800d9ca:	b082      	sub	sp, #8
 800d9cc:	af00      	add	r7, sp, #0
	__asm volatile
 800d9ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9d2:	b672      	cpsid	i
 800d9d4:	f383 8811 	msr	BASEPRI, r3
 800d9d8:	f3bf 8f6f 	isb	sy
 800d9dc:	f3bf 8f4f 	dsb	sy
 800d9e0:	b662      	cpsie	i
 800d9e2:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d9e4:	f7ff f8fa 	bl	800cbdc <xTaskIncrementTick>
 800d9e8:	4603      	mov	r3, r0
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d003      	beq.n	800d9f6 <SysTick_Handler+0x2e>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d9ee:	4b06      	ldr	r3, [pc, #24]	; (800da08 <SysTick_Handler+0x40>)
 800d9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d9f4:	601a      	str	r2, [r3, #0]
 800d9f6:	2300      	movs	r3, #0
 800d9f8:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d9fa:	683b      	ldr	r3, [r7, #0]
 800d9fc:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800da00:	bf00      	nop
 800da02:	3708      	adds	r7, #8
 800da04:	46bd      	mov	sp, r7
 800da06:	bd80      	pop	{r7, pc}
 800da08:	e000ed04 	.word	0xe000ed04

0800da0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800da0c:	b480      	push	{r7}
 800da0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800da10:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <vPortSetupTimerInterrupt+0x34>)
 800da12:	2200      	movs	r2, #0
 800da14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800da16:	4b0b      	ldr	r3, [pc, #44]	; (800da44 <vPortSetupTimerInterrupt+0x38>)
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800da1c:	4b0a      	ldr	r3, [pc, #40]	; (800da48 <vPortSetupTimerInterrupt+0x3c>)
 800da1e:	681b      	ldr	r3, [r3, #0]
 800da20:	4a0a      	ldr	r2, [pc, #40]	; (800da4c <vPortSetupTimerInterrupt+0x40>)
 800da22:	fba2 2303 	umull	r2, r3, r2, r3
 800da26:	099b      	lsrs	r3, r3, #6
 800da28:	4a09      	ldr	r2, [pc, #36]	; (800da50 <vPortSetupTimerInterrupt+0x44>)
 800da2a:	3b01      	subs	r3, #1
 800da2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800da2e:	4b04      	ldr	r3, [pc, #16]	; (800da40 <vPortSetupTimerInterrupt+0x34>)
 800da30:	2207      	movs	r2, #7
 800da32:	601a      	str	r2, [r3, #0]
}
 800da34:	bf00      	nop
 800da36:	46bd      	mov	sp, r7
 800da38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da3c:	4770      	bx	lr
 800da3e:	bf00      	nop
 800da40:	e000e010 	.word	0xe000e010
 800da44:	e000e018 	.word	0xe000e018
 800da48:	20000050 	.word	0x20000050
 800da4c:	10624dd3 	.word	0x10624dd3
 800da50:	e000e014 	.word	0xe000e014

0800da54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800da54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800da64 <vPortEnableVFP+0x10>
 800da58:	6801      	ldr	r1, [r0, #0]
 800da5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800da5e:	6001      	str	r1, [r0, #0]
 800da60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800da62:	bf00      	nop
 800da64:	e000ed88 	.word	0xe000ed88

0800da68 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800da68:	b580      	push	{r7, lr}
 800da6a:	b08a      	sub	sp, #40	; 0x28
 800da6c:	af00      	add	r7, sp, #0
 800da6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800da70:	2300      	movs	r3, #0
 800da72:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800da74:	f7fe fff6 	bl	800ca64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800da78:	4b5c      	ldr	r3, [pc, #368]	; (800dbec <pvPortMalloc+0x184>)
 800da7a:	681b      	ldr	r3, [r3, #0]
 800da7c:	2b00      	cmp	r3, #0
 800da7e:	d101      	bne.n	800da84 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800da80:	f000 f91a 	bl	800dcb8 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800da84:	4b5a      	ldr	r3, [pc, #360]	; (800dbf0 <pvPortMalloc+0x188>)
 800da86:	681a      	ldr	r2, [r3, #0]
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4013      	ands	r3, r2
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	f040 8090 	bne.w	800dbb2 <pvPortMalloc+0x14a>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	2b00      	cmp	r3, #0
 800da96:	d01e      	beq.n	800dad6 <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800da98:	2208      	movs	r2, #8
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4413      	add	r3, r2
 800da9e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f003 0307 	and.w	r3, r3, #7
 800daa6:	2b00      	cmp	r3, #0
 800daa8:	d015      	beq.n	800dad6 <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	f023 0307 	bic.w	r3, r3, #7
 800dab0:	3308      	adds	r3, #8
 800dab2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f003 0307 	and.w	r3, r3, #7
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d00b      	beq.n	800dad6 <pvPortMalloc+0x6e>
	__asm volatile
 800dabe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dac2:	b672      	cpsid	i
 800dac4:	f383 8811 	msr	BASEPRI, r3
 800dac8:	f3bf 8f6f 	isb	sy
 800dacc:	f3bf 8f4f 	dsb	sy
 800dad0:	b662      	cpsie	i
 800dad2:	617b      	str	r3, [r7, #20]
 800dad4:	e7fe      	b.n	800dad4 <pvPortMalloc+0x6c>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d06a      	beq.n	800dbb2 <pvPortMalloc+0x14a>
 800dadc:	4b45      	ldr	r3, [pc, #276]	; (800dbf4 <pvPortMalloc+0x18c>)
 800dade:	681b      	ldr	r3, [r3, #0]
 800dae0:	687a      	ldr	r2, [r7, #4]
 800dae2:	429a      	cmp	r2, r3
 800dae4:	d865      	bhi.n	800dbb2 <pvPortMalloc+0x14a>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dae6:	4b44      	ldr	r3, [pc, #272]	; (800dbf8 <pvPortMalloc+0x190>)
 800dae8:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800daea:	4b43      	ldr	r3, [pc, #268]	; (800dbf8 <pvPortMalloc+0x190>)
 800daec:	681b      	ldr	r3, [r3, #0]
 800daee:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800daf0:	e004      	b.n	800dafc <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800daf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf4:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800daf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daf8:	681b      	ldr	r3, [r3, #0]
 800dafa:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	429a      	cmp	r2, r3
 800db04:	d903      	bls.n	800db0e <pvPortMalloc+0xa6>
 800db06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db08:	681b      	ldr	r3, [r3, #0]
 800db0a:	2b00      	cmp	r3, #0
 800db0c:	d1f1      	bne.n	800daf2 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800db0e:	4b37      	ldr	r3, [pc, #220]	; (800dbec <pvPortMalloc+0x184>)
 800db10:	681b      	ldr	r3, [r3, #0]
 800db12:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db14:	429a      	cmp	r2, r3
 800db16:	d04c      	beq.n	800dbb2 <pvPortMalloc+0x14a>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800db18:	6a3b      	ldr	r3, [r7, #32]
 800db1a:	681b      	ldr	r3, [r3, #0]
 800db1c:	2208      	movs	r2, #8
 800db1e:	4413      	add	r3, r2
 800db20:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800db22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db24:	681a      	ldr	r2, [r3, #0]
 800db26:	6a3b      	ldr	r3, [r7, #32]
 800db28:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800db2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db2c:	685a      	ldr	r2, [r3, #4]
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	1ad2      	subs	r2, r2, r3
 800db32:	2308      	movs	r3, #8
 800db34:	005b      	lsls	r3, r3, #1
 800db36:	429a      	cmp	r2, r3
 800db38:	d920      	bls.n	800db7c <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800db3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	4413      	add	r3, r2
 800db40:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800db42:	69bb      	ldr	r3, [r7, #24]
 800db44:	f003 0307 	and.w	r3, r3, #7
 800db48:	2b00      	cmp	r3, #0
 800db4a:	d00b      	beq.n	800db64 <pvPortMalloc+0xfc>
 800db4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db50:	b672      	cpsid	i
 800db52:	f383 8811 	msr	BASEPRI, r3
 800db56:	f3bf 8f6f 	isb	sy
 800db5a:	f3bf 8f4f 	dsb	sy
 800db5e:	b662      	cpsie	i
 800db60:	613b      	str	r3, [r7, #16]
 800db62:	e7fe      	b.n	800db62 <pvPortMalloc+0xfa>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800db64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db66:	685a      	ldr	r2, [r3, #4]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	1ad2      	subs	r2, r2, r3
 800db6c:	69bb      	ldr	r3, [r7, #24]
 800db6e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800db70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db72:	687a      	ldr	r2, [r7, #4]
 800db74:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800db76:	69b8      	ldr	r0, [r7, #24]
 800db78:	f000 f900 	bl	800dd7c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800db7c:	4b1d      	ldr	r3, [pc, #116]	; (800dbf4 <pvPortMalloc+0x18c>)
 800db7e:	681a      	ldr	r2, [r3, #0]
 800db80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db82:	685b      	ldr	r3, [r3, #4]
 800db84:	1ad3      	subs	r3, r2, r3
 800db86:	4a1b      	ldr	r2, [pc, #108]	; (800dbf4 <pvPortMalloc+0x18c>)
 800db88:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800db8a:	4b1a      	ldr	r3, [pc, #104]	; (800dbf4 <pvPortMalloc+0x18c>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	4b1b      	ldr	r3, [pc, #108]	; (800dbfc <pvPortMalloc+0x194>)
 800db90:	681b      	ldr	r3, [r3, #0]
 800db92:	429a      	cmp	r2, r3
 800db94:	d203      	bcs.n	800db9e <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800db96:	4b17      	ldr	r3, [pc, #92]	; (800dbf4 <pvPortMalloc+0x18c>)
 800db98:	681b      	ldr	r3, [r3, #0]
 800db9a:	4a18      	ldr	r2, [pc, #96]	; (800dbfc <pvPortMalloc+0x194>)
 800db9c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800db9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dba0:	685a      	ldr	r2, [r3, #4]
 800dba2:	4b13      	ldr	r3, [pc, #76]	; (800dbf0 <pvPortMalloc+0x188>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	431a      	orrs	r2, r3
 800dba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbaa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbae:	2200      	movs	r2, #0
 800dbb0:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800dbb2:	f7fe ff65 	bl	800ca80 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800dbb6:	69fb      	ldr	r3, [r7, #28]
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d101      	bne.n	800dbc0 <pvPortMalloc+0x158>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800dbbc:	f7f2 fd0a 	bl	80005d4 <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800dbc0:	69fb      	ldr	r3, [r7, #28]
 800dbc2:	f003 0307 	and.w	r3, r3, #7
 800dbc6:	2b00      	cmp	r3, #0
 800dbc8:	d00b      	beq.n	800dbe2 <pvPortMalloc+0x17a>
 800dbca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbce:	b672      	cpsid	i
 800dbd0:	f383 8811 	msr	BASEPRI, r3
 800dbd4:	f3bf 8f6f 	isb	sy
 800dbd8:	f3bf 8f4f 	dsb	sy
 800dbdc:	b662      	cpsie	i
 800dbde:	60fb      	str	r3, [r7, #12]
 800dbe0:	e7fe      	b.n	800dbe0 <pvPortMalloc+0x178>
	return pvReturn;
 800dbe2:	69fb      	ldr	r3, [r7, #28]
}
 800dbe4:	4618      	mov	r0, r3
 800dbe6:	3728      	adds	r7, #40	; 0x28
 800dbe8:	46bd      	mov	sp, r7
 800dbea:	bd80      	pop	{r7, pc}
 800dbec:	20008648 	.word	0x20008648
 800dbf0:	20008654 	.word	0x20008654
 800dbf4:	2000864c 	.word	0x2000864c
 800dbf8:	20008640 	.word	0x20008640
 800dbfc:	20008650 	.word	0x20008650

0800dc00 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800dc00:	b580      	push	{r7, lr}
 800dc02:	b086      	sub	sp, #24
 800dc04:	af00      	add	r7, sp, #0
 800dc06:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800dc08:	687b      	ldr	r3, [r7, #4]
 800dc0a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	d04a      	beq.n	800dca8 <vPortFree+0xa8>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800dc12:	2308      	movs	r3, #8
 800dc14:	425b      	negs	r3, r3
 800dc16:	697a      	ldr	r2, [r7, #20]
 800dc18:	4413      	add	r3, r2
 800dc1a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800dc20:	693b      	ldr	r3, [r7, #16]
 800dc22:	685a      	ldr	r2, [r3, #4]
 800dc24:	4b22      	ldr	r3, [pc, #136]	; (800dcb0 <vPortFree+0xb0>)
 800dc26:	681b      	ldr	r3, [r3, #0]
 800dc28:	4013      	ands	r3, r2
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d10b      	bne.n	800dc46 <vPortFree+0x46>
 800dc2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc32:	b672      	cpsid	i
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	b662      	cpsie	i
 800dc42:	60fb      	str	r3, [r7, #12]
 800dc44:	e7fe      	b.n	800dc44 <vPortFree+0x44>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800dc46:	693b      	ldr	r3, [r7, #16]
 800dc48:	681b      	ldr	r3, [r3, #0]
 800dc4a:	2b00      	cmp	r3, #0
 800dc4c:	d00b      	beq.n	800dc66 <vPortFree+0x66>
 800dc4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc52:	b672      	cpsid	i
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	b662      	cpsie	i
 800dc62:	60bb      	str	r3, [r7, #8]
 800dc64:	e7fe      	b.n	800dc64 <vPortFree+0x64>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800dc66:	693b      	ldr	r3, [r7, #16]
 800dc68:	685a      	ldr	r2, [r3, #4]
 800dc6a:	4b11      	ldr	r3, [pc, #68]	; (800dcb0 <vPortFree+0xb0>)
 800dc6c:	681b      	ldr	r3, [r3, #0]
 800dc6e:	4013      	ands	r3, r2
 800dc70:	2b00      	cmp	r3, #0
 800dc72:	d019      	beq.n	800dca8 <vPortFree+0xa8>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800dc74:	693b      	ldr	r3, [r7, #16]
 800dc76:	681b      	ldr	r3, [r3, #0]
 800dc78:	2b00      	cmp	r3, #0
 800dc7a:	d115      	bne.n	800dca8 <vPortFree+0xa8>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800dc7c:	693b      	ldr	r3, [r7, #16]
 800dc7e:	685a      	ldr	r2, [r3, #4]
 800dc80:	4b0b      	ldr	r3, [pc, #44]	; (800dcb0 <vPortFree+0xb0>)
 800dc82:	681b      	ldr	r3, [r3, #0]
 800dc84:	43db      	mvns	r3, r3
 800dc86:	401a      	ands	r2, r3
 800dc88:	693b      	ldr	r3, [r7, #16]
 800dc8a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800dc8c:	f7fe feea 	bl	800ca64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800dc90:	693b      	ldr	r3, [r7, #16]
 800dc92:	685a      	ldr	r2, [r3, #4]
 800dc94:	4b07      	ldr	r3, [pc, #28]	; (800dcb4 <vPortFree+0xb4>)
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4413      	add	r3, r2
 800dc9a:	4a06      	ldr	r2, [pc, #24]	; (800dcb4 <vPortFree+0xb4>)
 800dc9c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800dc9e:	6938      	ldr	r0, [r7, #16]
 800dca0:	f000 f86c 	bl	800dd7c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800dca4:	f7fe feec 	bl	800ca80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800dca8:	bf00      	nop
 800dcaa:	3718      	adds	r7, #24
 800dcac:	46bd      	mov	sp, r7
 800dcae:	bd80      	pop	{r7, pc}
 800dcb0:	20008654 	.word	0x20008654
 800dcb4:	2000864c 	.word	0x2000864c

0800dcb8 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b085      	sub	sp, #20
 800dcbc:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dcbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800dcc2:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800dcc4:	4b27      	ldr	r3, [pc, #156]	; (800dd64 <prvHeapInit+0xac>)
 800dcc6:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcc8:	68fb      	ldr	r3, [r7, #12]
 800dcca:	f003 0307 	and.w	r3, r3, #7
 800dcce:	2b00      	cmp	r3, #0
 800dcd0:	d00c      	beq.n	800dcec <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcd2:	68fb      	ldr	r3, [r7, #12]
 800dcd4:	3307      	adds	r3, #7
 800dcd6:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dcd8:	68fb      	ldr	r3, [r7, #12]
 800dcda:	f023 0307 	bic.w	r3, r3, #7
 800dcde:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	68fb      	ldr	r3, [r7, #12]
 800dce4:	1ad3      	subs	r3, r2, r3
 800dce6:	4a1f      	ldr	r2, [pc, #124]	; (800dd64 <prvHeapInit+0xac>)
 800dce8:	4413      	add	r3, r2
 800dcea:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcf0:	4a1d      	ldr	r2, [pc, #116]	; (800dd68 <prvHeapInit+0xb0>)
 800dcf2:	687b      	ldr	r3, [r7, #4]
 800dcf4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800dcf6:	4b1c      	ldr	r3, [pc, #112]	; (800dd68 <prvHeapInit+0xb0>)
 800dcf8:	2200      	movs	r2, #0
 800dcfa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	68ba      	ldr	r2, [r7, #8]
 800dd00:	4413      	add	r3, r2
 800dd02:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800dd04:	2208      	movs	r2, #8
 800dd06:	68fb      	ldr	r3, [r7, #12]
 800dd08:	1a9b      	subs	r3, r3, r2
 800dd0a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd0c:	68fb      	ldr	r3, [r7, #12]
 800dd0e:	f023 0307 	bic.w	r3, r3, #7
 800dd12:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800dd14:	68fb      	ldr	r3, [r7, #12]
 800dd16:	4a15      	ldr	r2, [pc, #84]	; (800dd6c <prvHeapInit+0xb4>)
 800dd18:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800dd1a:	4b14      	ldr	r3, [pc, #80]	; (800dd6c <prvHeapInit+0xb4>)
 800dd1c:	681b      	ldr	r3, [r3, #0]
 800dd1e:	2200      	movs	r2, #0
 800dd20:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dd22:	4b12      	ldr	r3, [pc, #72]	; (800dd6c <prvHeapInit+0xb4>)
 800dd24:	681b      	ldr	r3, [r3, #0]
 800dd26:	2200      	movs	r2, #0
 800dd28:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd2e:	683b      	ldr	r3, [r7, #0]
 800dd30:	68fa      	ldr	r2, [r7, #12]
 800dd32:	1ad2      	subs	r2, r2, r3
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd38:	4b0c      	ldr	r3, [pc, #48]	; (800dd6c <prvHeapInit+0xb4>)
 800dd3a:	681a      	ldr	r2, [r3, #0]
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd40:	683b      	ldr	r3, [r7, #0]
 800dd42:	685b      	ldr	r3, [r3, #4]
 800dd44:	4a0a      	ldr	r2, [pc, #40]	; (800dd70 <prvHeapInit+0xb8>)
 800dd46:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd48:	683b      	ldr	r3, [r7, #0]
 800dd4a:	685b      	ldr	r3, [r3, #4]
 800dd4c:	4a09      	ldr	r2, [pc, #36]	; (800dd74 <prvHeapInit+0xbc>)
 800dd4e:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd50:	4b09      	ldr	r3, [pc, #36]	; (800dd78 <prvHeapInit+0xc0>)
 800dd52:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dd56:	601a      	str	r2, [r3, #0]
}
 800dd58:	bf00      	nop
 800dd5a:	3714      	adds	r7, #20
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd62:	4770      	bx	lr
 800dd64:	20000640 	.word	0x20000640
 800dd68:	20008640 	.word	0x20008640
 800dd6c:	20008648 	.word	0x20008648
 800dd70:	20008650 	.word	0x20008650
 800dd74:	2000864c 	.word	0x2000864c
 800dd78:	20008654 	.word	0x20008654

0800dd7c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800dd7c:	b480      	push	{r7}
 800dd7e:	b085      	sub	sp, #20
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dd84:	4b28      	ldr	r3, [pc, #160]	; (800de28 <prvInsertBlockIntoFreeList+0xac>)
 800dd86:	60fb      	str	r3, [r7, #12]
 800dd88:	e002      	b.n	800dd90 <prvInsertBlockIntoFreeList+0x14>
 800dd8a:	68fb      	ldr	r3, [r7, #12]
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	60fb      	str	r3, [r7, #12]
 800dd90:	68fb      	ldr	r3, [r7, #12]
 800dd92:	681b      	ldr	r3, [r3, #0]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	429a      	cmp	r2, r3
 800dd98:	d8f7      	bhi.n	800dd8a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dd9e:	68fb      	ldr	r3, [r7, #12]
 800dda0:	685b      	ldr	r3, [r3, #4]
 800dda2:	68ba      	ldr	r2, [r7, #8]
 800dda4:	4413      	add	r3, r2
 800dda6:	687a      	ldr	r2, [r7, #4]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d108      	bne.n	800ddbe <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	685a      	ldr	r2, [r3, #4]
 800ddb0:	687b      	ldr	r3, [r7, #4]
 800ddb2:	685b      	ldr	r3, [r3, #4]
 800ddb4:	441a      	add	r2, r3
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ddbe:	687b      	ldr	r3, [r7, #4]
 800ddc0:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ddc2:	687b      	ldr	r3, [r7, #4]
 800ddc4:	685b      	ldr	r3, [r3, #4]
 800ddc6:	68ba      	ldr	r2, [r7, #8]
 800ddc8:	441a      	add	r2, r3
 800ddca:	68fb      	ldr	r3, [r7, #12]
 800ddcc:	681b      	ldr	r3, [r3, #0]
 800ddce:	429a      	cmp	r2, r3
 800ddd0:	d118      	bne.n	800de04 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	681a      	ldr	r2, [r3, #0]
 800ddd6:	4b15      	ldr	r3, [pc, #84]	; (800de2c <prvInsertBlockIntoFreeList+0xb0>)
 800ddd8:	681b      	ldr	r3, [r3, #0]
 800ddda:	429a      	cmp	r2, r3
 800dddc:	d00d      	beq.n	800ddfa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	685a      	ldr	r2, [r3, #4]
 800dde2:	68fb      	ldr	r3, [r7, #12]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	685b      	ldr	r3, [r3, #4]
 800dde8:	441a      	add	r2, r3
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ddee:	68fb      	ldr	r3, [r7, #12]
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	681a      	ldr	r2, [r3, #0]
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	601a      	str	r2, [r3, #0]
 800ddf8:	e008      	b.n	800de0c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ddfa:	4b0c      	ldr	r3, [pc, #48]	; (800de2c <prvInsertBlockIntoFreeList+0xb0>)
 800ddfc:	681a      	ldr	r2, [r3, #0]
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	601a      	str	r2, [r3, #0]
 800de02:	e003      	b.n	800de0c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800de0c:	68fa      	ldr	r2, [r7, #12]
 800de0e:	687b      	ldr	r3, [r7, #4]
 800de10:	429a      	cmp	r2, r3
 800de12:	d002      	beq.n	800de1a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	687a      	ldr	r2, [r7, #4]
 800de18:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de1a:	bf00      	nop
 800de1c:	3714      	adds	r7, #20
 800de1e:	46bd      	mov	sp, r7
 800de20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de24:	4770      	bx	lr
 800de26:	bf00      	nop
 800de28:	20008640 	.word	0x20008640
 800de2c:	20008648 	.word	0x20008648

0800de30 <__errno>:
 800de30:	4b01      	ldr	r3, [pc, #4]	; (800de38 <__errno+0x8>)
 800de32:	6818      	ldr	r0, [r3, #0]
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop
 800de38:	20000060 	.word	0x20000060

0800de3c <__libc_init_array>:
 800de3c:	b570      	push	{r4, r5, r6, lr}
 800de3e:	4e0d      	ldr	r6, [pc, #52]	; (800de74 <__libc_init_array+0x38>)
 800de40:	4c0d      	ldr	r4, [pc, #52]	; (800de78 <__libc_init_array+0x3c>)
 800de42:	1ba4      	subs	r4, r4, r6
 800de44:	10a4      	asrs	r4, r4, #2
 800de46:	2500      	movs	r5, #0
 800de48:	42a5      	cmp	r5, r4
 800de4a:	d109      	bne.n	800de60 <__libc_init_array+0x24>
 800de4c:	4e0b      	ldr	r6, [pc, #44]	; (800de7c <__libc_init_array+0x40>)
 800de4e:	4c0c      	ldr	r4, [pc, #48]	; (800de80 <__libc_init_array+0x44>)
 800de50:	f000 fc28 	bl	800e6a4 <_init>
 800de54:	1ba4      	subs	r4, r4, r6
 800de56:	10a4      	asrs	r4, r4, #2
 800de58:	2500      	movs	r5, #0
 800de5a:	42a5      	cmp	r5, r4
 800de5c:	d105      	bne.n	800de6a <__libc_init_array+0x2e>
 800de5e:	bd70      	pop	{r4, r5, r6, pc}
 800de60:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de64:	4798      	blx	r3
 800de66:	3501      	adds	r5, #1
 800de68:	e7ee      	b.n	800de48 <__libc_init_array+0xc>
 800de6a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800de6e:	4798      	blx	r3
 800de70:	3501      	adds	r5, #1
 800de72:	e7f2      	b.n	800de5a <__libc_init_array+0x1e>
 800de74:	08010730 	.word	0x08010730
 800de78:	08010730 	.word	0x08010730
 800de7c:	08010730 	.word	0x08010730
 800de80:	08010734 	.word	0x08010734

0800de84 <memcpy>:
 800de84:	b510      	push	{r4, lr}
 800de86:	1e43      	subs	r3, r0, #1
 800de88:	440a      	add	r2, r1
 800de8a:	4291      	cmp	r1, r2
 800de8c:	d100      	bne.n	800de90 <memcpy+0xc>
 800de8e:	bd10      	pop	{r4, pc}
 800de90:	f811 4b01 	ldrb.w	r4, [r1], #1
 800de94:	f803 4f01 	strb.w	r4, [r3, #1]!
 800de98:	e7f7      	b.n	800de8a <memcpy+0x6>

0800de9a <memset>:
 800de9a:	4402      	add	r2, r0
 800de9c:	4603      	mov	r3, r0
 800de9e:	4293      	cmp	r3, r2
 800dea0:	d100      	bne.n	800dea4 <memset+0xa>
 800dea2:	4770      	bx	lr
 800dea4:	f803 1b01 	strb.w	r1, [r3], #1
 800dea8:	e7f9      	b.n	800de9e <memset+0x4>
	...

0800deac <siprintf>:
 800deac:	b40e      	push	{r1, r2, r3}
 800deae:	b500      	push	{lr}
 800deb0:	b09c      	sub	sp, #112	; 0x70
 800deb2:	ab1d      	add	r3, sp, #116	; 0x74
 800deb4:	9002      	str	r0, [sp, #8]
 800deb6:	9006      	str	r0, [sp, #24]
 800deb8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800debc:	4809      	ldr	r0, [pc, #36]	; (800dee4 <siprintf+0x38>)
 800debe:	9107      	str	r1, [sp, #28]
 800dec0:	9104      	str	r1, [sp, #16]
 800dec2:	4909      	ldr	r1, [pc, #36]	; (800dee8 <siprintf+0x3c>)
 800dec4:	f853 2b04 	ldr.w	r2, [r3], #4
 800dec8:	9105      	str	r1, [sp, #20]
 800deca:	6800      	ldr	r0, [r0, #0]
 800decc:	9301      	str	r3, [sp, #4]
 800dece:	a902      	add	r1, sp, #8
 800ded0:	f000 f866 	bl	800dfa0 <_svfiprintf_r>
 800ded4:	9b02      	ldr	r3, [sp, #8]
 800ded6:	2200      	movs	r2, #0
 800ded8:	701a      	strb	r2, [r3, #0]
 800deda:	b01c      	add	sp, #112	; 0x70
 800dedc:	f85d eb04 	ldr.w	lr, [sp], #4
 800dee0:	b003      	add	sp, #12
 800dee2:	4770      	bx	lr
 800dee4:	20000060 	.word	0x20000060
 800dee8:	ffff0208 	.word	0xffff0208

0800deec <__ssputs_r>:
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800def0:	688e      	ldr	r6, [r1, #8]
 800def2:	429e      	cmp	r6, r3
 800def4:	4682      	mov	sl, r0
 800def6:	460c      	mov	r4, r1
 800def8:	4690      	mov	r8, r2
 800defa:	4699      	mov	r9, r3
 800defc:	d837      	bhi.n	800df6e <__ssputs_r+0x82>
 800defe:	898a      	ldrh	r2, [r1, #12]
 800df00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800df04:	d031      	beq.n	800df6a <__ssputs_r+0x7e>
 800df06:	6825      	ldr	r5, [r4, #0]
 800df08:	6909      	ldr	r1, [r1, #16]
 800df0a:	1a6f      	subs	r7, r5, r1
 800df0c:	6965      	ldr	r5, [r4, #20]
 800df0e:	2302      	movs	r3, #2
 800df10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800df14:	fb95 f5f3 	sdiv	r5, r5, r3
 800df18:	f109 0301 	add.w	r3, r9, #1
 800df1c:	443b      	add	r3, r7
 800df1e:	429d      	cmp	r5, r3
 800df20:	bf38      	it	cc
 800df22:	461d      	movcc	r5, r3
 800df24:	0553      	lsls	r3, r2, #21
 800df26:	d530      	bpl.n	800df8a <__ssputs_r+0x9e>
 800df28:	4629      	mov	r1, r5
 800df2a:	f000 fb21 	bl	800e570 <_malloc_r>
 800df2e:	4606      	mov	r6, r0
 800df30:	b950      	cbnz	r0, 800df48 <__ssputs_r+0x5c>
 800df32:	230c      	movs	r3, #12
 800df34:	f8ca 3000 	str.w	r3, [sl]
 800df38:	89a3      	ldrh	r3, [r4, #12]
 800df3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df3e:	81a3      	strh	r3, [r4, #12]
 800df40:	f04f 30ff 	mov.w	r0, #4294967295
 800df44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800df48:	463a      	mov	r2, r7
 800df4a:	6921      	ldr	r1, [r4, #16]
 800df4c:	f7ff ff9a 	bl	800de84 <memcpy>
 800df50:	89a3      	ldrh	r3, [r4, #12]
 800df52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800df56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800df5a:	81a3      	strh	r3, [r4, #12]
 800df5c:	6126      	str	r6, [r4, #16]
 800df5e:	6165      	str	r5, [r4, #20]
 800df60:	443e      	add	r6, r7
 800df62:	1bed      	subs	r5, r5, r7
 800df64:	6026      	str	r6, [r4, #0]
 800df66:	60a5      	str	r5, [r4, #8]
 800df68:	464e      	mov	r6, r9
 800df6a:	454e      	cmp	r6, r9
 800df6c:	d900      	bls.n	800df70 <__ssputs_r+0x84>
 800df6e:	464e      	mov	r6, r9
 800df70:	4632      	mov	r2, r6
 800df72:	4641      	mov	r1, r8
 800df74:	6820      	ldr	r0, [r4, #0]
 800df76:	f000 fa93 	bl	800e4a0 <memmove>
 800df7a:	68a3      	ldr	r3, [r4, #8]
 800df7c:	1b9b      	subs	r3, r3, r6
 800df7e:	60a3      	str	r3, [r4, #8]
 800df80:	6823      	ldr	r3, [r4, #0]
 800df82:	441e      	add	r6, r3
 800df84:	6026      	str	r6, [r4, #0]
 800df86:	2000      	movs	r0, #0
 800df88:	e7dc      	b.n	800df44 <__ssputs_r+0x58>
 800df8a:	462a      	mov	r2, r5
 800df8c:	f000 fb4a 	bl	800e624 <_realloc_r>
 800df90:	4606      	mov	r6, r0
 800df92:	2800      	cmp	r0, #0
 800df94:	d1e2      	bne.n	800df5c <__ssputs_r+0x70>
 800df96:	6921      	ldr	r1, [r4, #16]
 800df98:	4650      	mov	r0, sl
 800df9a:	f000 fa9b 	bl	800e4d4 <_free_r>
 800df9e:	e7c8      	b.n	800df32 <__ssputs_r+0x46>

0800dfa0 <_svfiprintf_r>:
 800dfa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfa4:	461d      	mov	r5, r3
 800dfa6:	898b      	ldrh	r3, [r1, #12]
 800dfa8:	061f      	lsls	r7, r3, #24
 800dfaa:	b09d      	sub	sp, #116	; 0x74
 800dfac:	4680      	mov	r8, r0
 800dfae:	460c      	mov	r4, r1
 800dfb0:	4616      	mov	r6, r2
 800dfb2:	d50f      	bpl.n	800dfd4 <_svfiprintf_r+0x34>
 800dfb4:	690b      	ldr	r3, [r1, #16]
 800dfb6:	b96b      	cbnz	r3, 800dfd4 <_svfiprintf_r+0x34>
 800dfb8:	2140      	movs	r1, #64	; 0x40
 800dfba:	f000 fad9 	bl	800e570 <_malloc_r>
 800dfbe:	6020      	str	r0, [r4, #0]
 800dfc0:	6120      	str	r0, [r4, #16]
 800dfc2:	b928      	cbnz	r0, 800dfd0 <_svfiprintf_r+0x30>
 800dfc4:	230c      	movs	r3, #12
 800dfc6:	f8c8 3000 	str.w	r3, [r8]
 800dfca:	f04f 30ff 	mov.w	r0, #4294967295
 800dfce:	e0c8      	b.n	800e162 <_svfiprintf_r+0x1c2>
 800dfd0:	2340      	movs	r3, #64	; 0x40
 800dfd2:	6163      	str	r3, [r4, #20]
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	9309      	str	r3, [sp, #36]	; 0x24
 800dfd8:	2320      	movs	r3, #32
 800dfda:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dfde:	2330      	movs	r3, #48	; 0x30
 800dfe0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dfe4:	9503      	str	r5, [sp, #12]
 800dfe6:	f04f 0b01 	mov.w	fp, #1
 800dfea:	4637      	mov	r7, r6
 800dfec:	463d      	mov	r5, r7
 800dfee:	f815 3b01 	ldrb.w	r3, [r5], #1
 800dff2:	b10b      	cbz	r3, 800dff8 <_svfiprintf_r+0x58>
 800dff4:	2b25      	cmp	r3, #37	; 0x25
 800dff6:	d13e      	bne.n	800e076 <_svfiprintf_r+0xd6>
 800dff8:	ebb7 0a06 	subs.w	sl, r7, r6
 800dffc:	d00b      	beq.n	800e016 <_svfiprintf_r+0x76>
 800dffe:	4653      	mov	r3, sl
 800e000:	4632      	mov	r2, r6
 800e002:	4621      	mov	r1, r4
 800e004:	4640      	mov	r0, r8
 800e006:	f7ff ff71 	bl	800deec <__ssputs_r>
 800e00a:	3001      	adds	r0, #1
 800e00c:	f000 80a4 	beq.w	800e158 <_svfiprintf_r+0x1b8>
 800e010:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e012:	4453      	add	r3, sl
 800e014:	9309      	str	r3, [sp, #36]	; 0x24
 800e016:	783b      	ldrb	r3, [r7, #0]
 800e018:	2b00      	cmp	r3, #0
 800e01a:	f000 809d 	beq.w	800e158 <_svfiprintf_r+0x1b8>
 800e01e:	2300      	movs	r3, #0
 800e020:	f04f 32ff 	mov.w	r2, #4294967295
 800e024:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e028:	9304      	str	r3, [sp, #16]
 800e02a:	9307      	str	r3, [sp, #28]
 800e02c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e030:	931a      	str	r3, [sp, #104]	; 0x68
 800e032:	462f      	mov	r7, r5
 800e034:	2205      	movs	r2, #5
 800e036:	f817 1b01 	ldrb.w	r1, [r7], #1
 800e03a:	4850      	ldr	r0, [pc, #320]	; (800e17c <_svfiprintf_r+0x1dc>)
 800e03c:	f7f2 f8e8 	bl	8000210 <memchr>
 800e040:	9b04      	ldr	r3, [sp, #16]
 800e042:	b9d0      	cbnz	r0, 800e07a <_svfiprintf_r+0xda>
 800e044:	06d9      	lsls	r1, r3, #27
 800e046:	bf44      	itt	mi
 800e048:	2220      	movmi	r2, #32
 800e04a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e04e:	071a      	lsls	r2, r3, #28
 800e050:	bf44      	itt	mi
 800e052:	222b      	movmi	r2, #43	; 0x2b
 800e054:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800e058:	782a      	ldrb	r2, [r5, #0]
 800e05a:	2a2a      	cmp	r2, #42	; 0x2a
 800e05c:	d015      	beq.n	800e08a <_svfiprintf_r+0xea>
 800e05e:	9a07      	ldr	r2, [sp, #28]
 800e060:	462f      	mov	r7, r5
 800e062:	2000      	movs	r0, #0
 800e064:	250a      	movs	r5, #10
 800e066:	4639      	mov	r1, r7
 800e068:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e06c:	3b30      	subs	r3, #48	; 0x30
 800e06e:	2b09      	cmp	r3, #9
 800e070:	d94d      	bls.n	800e10e <_svfiprintf_r+0x16e>
 800e072:	b1b8      	cbz	r0, 800e0a4 <_svfiprintf_r+0x104>
 800e074:	e00f      	b.n	800e096 <_svfiprintf_r+0xf6>
 800e076:	462f      	mov	r7, r5
 800e078:	e7b8      	b.n	800dfec <_svfiprintf_r+0x4c>
 800e07a:	4a40      	ldr	r2, [pc, #256]	; (800e17c <_svfiprintf_r+0x1dc>)
 800e07c:	1a80      	subs	r0, r0, r2
 800e07e:	fa0b f000 	lsl.w	r0, fp, r0
 800e082:	4318      	orrs	r0, r3
 800e084:	9004      	str	r0, [sp, #16]
 800e086:	463d      	mov	r5, r7
 800e088:	e7d3      	b.n	800e032 <_svfiprintf_r+0x92>
 800e08a:	9a03      	ldr	r2, [sp, #12]
 800e08c:	1d11      	adds	r1, r2, #4
 800e08e:	6812      	ldr	r2, [r2, #0]
 800e090:	9103      	str	r1, [sp, #12]
 800e092:	2a00      	cmp	r2, #0
 800e094:	db01      	blt.n	800e09a <_svfiprintf_r+0xfa>
 800e096:	9207      	str	r2, [sp, #28]
 800e098:	e004      	b.n	800e0a4 <_svfiprintf_r+0x104>
 800e09a:	4252      	negs	r2, r2
 800e09c:	f043 0302 	orr.w	r3, r3, #2
 800e0a0:	9207      	str	r2, [sp, #28]
 800e0a2:	9304      	str	r3, [sp, #16]
 800e0a4:	783b      	ldrb	r3, [r7, #0]
 800e0a6:	2b2e      	cmp	r3, #46	; 0x2e
 800e0a8:	d10c      	bne.n	800e0c4 <_svfiprintf_r+0x124>
 800e0aa:	787b      	ldrb	r3, [r7, #1]
 800e0ac:	2b2a      	cmp	r3, #42	; 0x2a
 800e0ae:	d133      	bne.n	800e118 <_svfiprintf_r+0x178>
 800e0b0:	9b03      	ldr	r3, [sp, #12]
 800e0b2:	1d1a      	adds	r2, r3, #4
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	9203      	str	r2, [sp, #12]
 800e0b8:	2b00      	cmp	r3, #0
 800e0ba:	bfb8      	it	lt
 800e0bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800e0c0:	3702      	adds	r7, #2
 800e0c2:	9305      	str	r3, [sp, #20]
 800e0c4:	4d2e      	ldr	r5, [pc, #184]	; (800e180 <_svfiprintf_r+0x1e0>)
 800e0c6:	7839      	ldrb	r1, [r7, #0]
 800e0c8:	2203      	movs	r2, #3
 800e0ca:	4628      	mov	r0, r5
 800e0cc:	f7f2 f8a0 	bl	8000210 <memchr>
 800e0d0:	b138      	cbz	r0, 800e0e2 <_svfiprintf_r+0x142>
 800e0d2:	2340      	movs	r3, #64	; 0x40
 800e0d4:	1b40      	subs	r0, r0, r5
 800e0d6:	fa03 f000 	lsl.w	r0, r3, r0
 800e0da:	9b04      	ldr	r3, [sp, #16]
 800e0dc:	4303      	orrs	r3, r0
 800e0de:	3701      	adds	r7, #1
 800e0e0:	9304      	str	r3, [sp, #16]
 800e0e2:	7839      	ldrb	r1, [r7, #0]
 800e0e4:	4827      	ldr	r0, [pc, #156]	; (800e184 <_svfiprintf_r+0x1e4>)
 800e0e6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e0ea:	2206      	movs	r2, #6
 800e0ec:	1c7e      	adds	r6, r7, #1
 800e0ee:	f7f2 f88f 	bl	8000210 <memchr>
 800e0f2:	2800      	cmp	r0, #0
 800e0f4:	d038      	beq.n	800e168 <_svfiprintf_r+0x1c8>
 800e0f6:	4b24      	ldr	r3, [pc, #144]	; (800e188 <_svfiprintf_r+0x1e8>)
 800e0f8:	bb13      	cbnz	r3, 800e140 <_svfiprintf_r+0x1a0>
 800e0fa:	9b03      	ldr	r3, [sp, #12]
 800e0fc:	3307      	adds	r3, #7
 800e0fe:	f023 0307 	bic.w	r3, r3, #7
 800e102:	3308      	adds	r3, #8
 800e104:	9303      	str	r3, [sp, #12]
 800e106:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e108:	444b      	add	r3, r9
 800e10a:	9309      	str	r3, [sp, #36]	; 0x24
 800e10c:	e76d      	b.n	800dfea <_svfiprintf_r+0x4a>
 800e10e:	fb05 3202 	mla	r2, r5, r2, r3
 800e112:	2001      	movs	r0, #1
 800e114:	460f      	mov	r7, r1
 800e116:	e7a6      	b.n	800e066 <_svfiprintf_r+0xc6>
 800e118:	2300      	movs	r3, #0
 800e11a:	3701      	adds	r7, #1
 800e11c:	9305      	str	r3, [sp, #20]
 800e11e:	4619      	mov	r1, r3
 800e120:	250a      	movs	r5, #10
 800e122:	4638      	mov	r0, r7
 800e124:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e128:	3a30      	subs	r2, #48	; 0x30
 800e12a:	2a09      	cmp	r2, #9
 800e12c:	d903      	bls.n	800e136 <_svfiprintf_r+0x196>
 800e12e:	2b00      	cmp	r3, #0
 800e130:	d0c8      	beq.n	800e0c4 <_svfiprintf_r+0x124>
 800e132:	9105      	str	r1, [sp, #20]
 800e134:	e7c6      	b.n	800e0c4 <_svfiprintf_r+0x124>
 800e136:	fb05 2101 	mla	r1, r5, r1, r2
 800e13a:	2301      	movs	r3, #1
 800e13c:	4607      	mov	r7, r0
 800e13e:	e7f0      	b.n	800e122 <_svfiprintf_r+0x182>
 800e140:	ab03      	add	r3, sp, #12
 800e142:	9300      	str	r3, [sp, #0]
 800e144:	4622      	mov	r2, r4
 800e146:	4b11      	ldr	r3, [pc, #68]	; (800e18c <_svfiprintf_r+0x1ec>)
 800e148:	a904      	add	r1, sp, #16
 800e14a:	4640      	mov	r0, r8
 800e14c:	f3af 8000 	nop.w
 800e150:	f1b0 3fff 	cmp.w	r0, #4294967295
 800e154:	4681      	mov	r9, r0
 800e156:	d1d6      	bne.n	800e106 <_svfiprintf_r+0x166>
 800e158:	89a3      	ldrh	r3, [r4, #12]
 800e15a:	065b      	lsls	r3, r3, #25
 800e15c:	f53f af35 	bmi.w	800dfca <_svfiprintf_r+0x2a>
 800e160:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e162:	b01d      	add	sp, #116	; 0x74
 800e164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e168:	ab03      	add	r3, sp, #12
 800e16a:	9300      	str	r3, [sp, #0]
 800e16c:	4622      	mov	r2, r4
 800e16e:	4b07      	ldr	r3, [pc, #28]	; (800e18c <_svfiprintf_r+0x1ec>)
 800e170:	a904      	add	r1, sp, #16
 800e172:	4640      	mov	r0, r8
 800e174:	f000 f882 	bl	800e27c <_printf_i>
 800e178:	e7ea      	b.n	800e150 <_svfiprintf_r+0x1b0>
 800e17a:	bf00      	nop
 800e17c:	080106f4 	.word	0x080106f4
 800e180:	080106fa 	.word	0x080106fa
 800e184:	080106fe 	.word	0x080106fe
 800e188:	00000000 	.word	0x00000000
 800e18c:	0800deed 	.word	0x0800deed

0800e190 <_printf_common>:
 800e190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e194:	4691      	mov	r9, r2
 800e196:	461f      	mov	r7, r3
 800e198:	688a      	ldr	r2, [r1, #8]
 800e19a:	690b      	ldr	r3, [r1, #16]
 800e19c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800e1a0:	4293      	cmp	r3, r2
 800e1a2:	bfb8      	it	lt
 800e1a4:	4613      	movlt	r3, r2
 800e1a6:	f8c9 3000 	str.w	r3, [r9]
 800e1aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800e1ae:	4606      	mov	r6, r0
 800e1b0:	460c      	mov	r4, r1
 800e1b2:	b112      	cbz	r2, 800e1ba <_printf_common+0x2a>
 800e1b4:	3301      	adds	r3, #1
 800e1b6:	f8c9 3000 	str.w	r3, [r9]
 800e1ba:	6823      	ldr	r3, [r4, #0]
 800e1bc:	0699      	lsls	r1, r3, #26
 800e1be:	bf42      	ittt	mi
 800e1c0:	f8d9 3000 	ldrmi.w	r3, [r9]
 800e1c4:	3302      	addmi	r3, #2
 800e1c6:	f8c9 3000 	strmi.w	r3, [r9]
 800e1ca:	6825      	ldr	r5, [r4, #0]
 800e1cc:	f015 0506 	ands.w	r5, r5, #6
 800e1d0:	d107      	bne.n	800e1e2 <_printf_common+0x52>
 800e1d2:	f104 0a19 	add.w	sl, r4, #25
 800e1d6:	68e3      	ldr	r3, [r4, #12]
 800e1d8:	f8d9 2000 	ldr.w	r2, [r9]
 800e1dc:	1a9b      	subs	r3, r3, r2
 800e1de:	42ab      	cmp	r3, r5
 800e1e0:	dc28      	bgt.n	800e234 <_printf_common+0xa4>
 800e1e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800e1e6:	6822      	ldr	r2, [r4, #0]
 800e1e8:	3300      	adds	r3, #0
 800e1ea:	bf18      	it	ne
 800e1ec:	2301      	movne	r3, #1
 800e1ee:	0692      	lsls	r2, r2, #26
 800e1f0:	d42d      	bmi.n	800e24e <_printf_common+0xbe>
 800e1f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800e1f6:	4639      	mov	r1, r7
 800e1f8:	4630      	mov	r0, r6
 800e1fa:	47c0      	blx	r8
 800e1fc:	3001      	adds	r0, #1
 800e1fe:	d020      	beq.n	800e242 <_printf_common+0xb2>
 800e200:	6823      	ldr	r3, [r4, #0]
 800e202:	68e5      	ldr	r5, [r4, #12]
 800e204:	f8d9 2000 	ldr.w	r2, [r9]
 800e208:	f003 0306 	and.w	r3, r3, #6
 800e20c:	2b04      	cmp	r3, #4
 800e20e:	bf08      	it	eq
 800e210:	1aad      	subeq	r5, r5, r2
 800e212:	68a3      	ldr	r3, [r4, #8]
 800e214:	6922      	ldr	r2, [r4, #16]
 800e216:	bf0c      	ite	eq
 800e218:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800e21c:	2500      	movne	r5, #0
 800e21e:	4293      	cmp	r3, r2
 800e220:	bfc4      	itt	gt
 800e222:	1a9b      	subgt	r3, r3, r2
 800e224:	18ed      	addgt	r5, r5, r3
 800e226:	f04f 0900 	mov.w	r9, #0
 800e22a:	341a      	adds	r4, #26
 800e22c:	454d      	cmp	r5, r9
 800e22e:	d11a      	bne.n	800e266 <_printf_common+0xd6>
 800e230:	2000      	movs	r0, #0
 800e232:	e008      	b.n	800e246 <_printf_common+0xb6>
 800e234:	2301      	movs	r3, #1
 800e236:	4652      	mov	r2, sl
 800e238:	4639      	mov	r1, r7
 800e23a:	4630      	mov	r0, r6
 800e23c:	47c0      	blx	r8
 800e23e:	3001      	adds	r0, #1
 800e240:	d103      	bne.n	800e24a <_printf_common+0xba>
 800e242:	f04f 30ff 	mov.w	r0, #4294967295
 800e246:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e24a:	3501      	adds	r5, #1
 800e24c:	e7c3      	b.n	800e1d6 <_printf_common+0x46>
 800e24e:	18e1      	adds	r1, r4, r3
 800e250:	1c5a      	adds	r2, r3, #1
 800e252:	2030      	movs	r0, #48	; 0x30
 800e254:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800e258:	4422      	add	r2, r4
 800e25a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800e25e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800e262:	3302      	adds	r3, #2
 800e264:	e7c5      	b.n	800e1f2 <_printf_common+0x62>
 800e266:	2301      	movs	r3, #1
 800e268:	4622      	mov	r2, r4
 800e26a:	4639      	mov	r1, r7
 800e26c:	4630      	mov	r0, r6
 800e26e:	47c0      	blx	r8
 800e270:	3001      	adds	r0, #1
 800e272:	d0e6      	beq.n	800e242 <_printf_common+0xb2>
 800e274:	f109 0901 	add.w	r9, r9, #1
 800e278:	e7d8      	b.n	800e22c <_printf_common+0x9c>
	...

0800e27c <_printf_i>:
 800e27c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e280:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 800e284:	460c      	mov	r4, r1
 800e286:	7e09      	ldrb	r1, [r1, #24]
 800e288:	b085      	sub	sp, #20
 800e28a:	296e      	cmp	r1, #110	; 0x6e
 800e28c:	4617      	mov	r7, r2
 800e28e:	4606      	mov	r6, r0
 800e290:	4698      	mov	r8, r3
 800e292:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e294:	f000 80b3 	beq.w	800e3fe <_printf_i+0x182>
 800e298:	d822      	bhi.n	800e2e0 <_printf_i+0x64>
 800e29a:	2963      	cmp	r1, #99	; 0x63
 800e29c:	d036      	beq.n	800e30c <_printf_i+0x90>
 800e29e:	d80a      	bhi.n	800e2b6 <_printf_i+0x3a>
 800e2a0:	2900      	cmp	r1, #0
 800e2a2:	f000 80b9 	beq.w	800e418 <_printf_i+0x19c>
 800e2a6:	2958      	cmp	r1, #88	; 0x58
 800e2a8:	f000 8083 	beq.w	800e3b2 <_printf_i+0x136>
 800e2ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e2b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800e2b4:	e032      	b.n	800e31c <_printf_i+0xa0>
 800e2b6:	2964      	cmp	r1, #100	; 0x64
 800e2b8:	d001      	beq.n	800e2be <_printf_i+0x42>
 800e2ba:	2969      	cmp	r1, #105	; 0x69
 800e2bc:	d1f6      	bne.n	800e2ac <_printf_i+0x30>
 800e2be:	6820      	ldr	r0, [r4, #0]
 800e2c0:	6813      	ldr	r3, [r2, #0]
 800e2c2:	0605      	lsls	r5, r0, #24
 800e2c4:	f103 0104 	add.w	r1, r3, #4
 800e2c8:	d52a      	bpl.n	800e320 <_printf_i+0xa4>
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	6011      	str	r1, [r2, #0]
 800e2ce:	2b00      	cmp	r3, #0
 800e2d0:	da03      	bge.n	800e2da <_printf_i+0x5e>
 800e2d2:	222d      	movs	r2, #45	; 0x2d
 800e2d4:	425b      	negs	r3, r3
 800e2d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800e2da:	486f      	ldr	r0, [pc, #444]	; (800e498 <_printf_i+0x21c>)
 800e2dc:	220a      	movs	r2, #10
 800e2de:	e039      	b.n	800e354 <_printf_i+0xd8>
 800e2e0:	2973      	cmp	r1, #115	; 0x73
 800e2e2:	f000 809d 	beq.w	800e420 <_printf_i+0x1a4>
 800e2e6:	d808      	bhi.n	800e2fa <_printf_i+0x7e>
 800e2e8:	296f      	cmp	r1, #111	; 0x6f
 800e2ea:	d020      	beq.n	800e32e <_printf_i+0xb2>
 800e2ec:	2970      	cmp	r1, #112	; 0x70
 800e2ee:	d1dd      	bne.n	800e2ac <_printf_i+0x30>
 800e2f0:	6823      	ldr	r3, [r4, #0]
 800e2f2:	f043 0320 	orr.w	r3, r3, #32
 800e2f6:	6023      	str	r3, [r4, #0]
 800e2f8:	e003      	b.n	800e302 <_printf_i+0x86>
 800e2fa:	2975      	cmp	r1, #117	; 0x75
 800e2fc:	d017      	beq.n	800e32e <_printf_i+0xb2>
 800e2fe:	2978      	cmp	r1, #120	; 0x78
 800e300:	d1d4      	bne.n	800e2ac <_printf_i+0x30>
 800e302:	2378      	movs	r3, #120	; 0x78
 800e304:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800e308:	4864      	ldr	r0, [pc, #400]	; (800e49c <_printf_i+0x220>)
 800e30a:	e055      	b.n	800e3b8 <_printf_i+0x13c>
 800e30c:	6813      	ldr	r3, [r2, #0]
 800e30e:	1d19      	adds	r1, r3, #4
 800e310:	681b      	ldr	r3, [r3, #0]
 800e312:	6011      	str	r1, [r2, #0]
 800e314:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e318:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e31c:	2301      	movs	r3, #1
 800e31e:	e08c      	b.n	800e43a <_printf_i+0x1be>
 800e320:	681b      	ldr	r3, [r3, #0]
 800e322:	6011      	str	r1, [r2, #0]
 800e324:	f010 0f40 	tst.w	r0, #64	; 0x40
 800e328:	bf18      	it	ne
 800e32a:	b21b      	sxthne	r3, r3
 800e32c:	e7cf      	b.n	800e2ce <_printf_i+0x52>
 800e32e:	6813      	ldr	r3, [r2, #0]
 800e330:	6825      	ldr	r5, [r4, #0]
 800e332:	1d18      	adds	r0, r3, #4
 800e334:	6010      	str	r0, [r2, #0]
 800e336:	0628      	lsls	r0, r5, #24
 800e338:	d501      	bpl.n	800e33e <_printf_i+0xc2>
 800e33a:	681b      	ldr	r3, [r3, #0]
 800e33c:	e002      	b.n	800e344 <_printf_i+0xc8>
 800e33e:	0668      	lsls	r0, r5, #25
 800e340:	d5fb      	bpl.n	800e33a <_printf_i+0xbe>
 800e342:	881b      	ldrh	r3, [r3, #0]
 800e344:	4854      	ldr	r0, [pc, #336]	; (800e498 <_printf_i+0x21c>)
 800e346:	296f      	cmp	r1, #111	; 0x6f
 800e348:	bf14      	ite	ne
 800e34a:	220a      	movne	r2, #10
 800e34c:	2208      	moveq	r2, #8
 800e34e:	2100      	movs	r1, #0
 800e350:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800e354:	6865      	ldr	r5, [r4, #4]
 800e356:	60a5      	str	r5, [r4, #8]
 800e358:	2d00      	cmp	r5, #0
 800e35a:	f2c0 8095 	blt.w	800e488 <_printf_i+0x20c>
 800e35e:	6821      	ldr	r1, [r4, #0]
 800e360:	f021 0104 	bic.w	r1, r1, #4
 800e364:	6021      	str	r1, [r4, #0]
 800e366:	2b00      	cmp	r3, #0
 800e368:	d13d      	bne.n	800e3e6 <_printf_i+0x16a>
 800e36a:	2d00      	cmp	r5, #0
 800e36c:	f040 808e 	bne.w	800e48c <_printf_i+0x210>
 800e370:	4665      	mov	r5, ip
 800e372:	2a08      	cmp	r2, #8
 800e374:	d10b      	bne.n	800e38e <_printf_i+0x112>
 800e376:	6823      	ldr	r3, [r4, #0]
 800e378:	07db      	lsls	r3, r3, #31
 800e37a:	d508      	bpl.n	800e38e <_printf_i+0x112>
 800e37c:	6923      	ldr	r3, [r4, #16]
 800e37e:	6862      	ldr	r2, [r4, #4]
 800e380:	429a      	cmp	r2, r3
 800e382:	bfde      	ittt	le
 800e384:	2330      	movle	r3, #48	; 0x30
 800e386:	f805 3c01 	strble.w	r3, [r5, #-1]
 800e38a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800e38e:	ebac 0305 	sub.w	r3, ip, r5
 800e392:	6123      	str	r3, [r4, #16]
 800e394:	f8cd 8000 	str.w	r8, [sp]
 800e398:	463b      	mov	r3, r7
 800e39a:	aa03      	add	r2, sp, #12
 800e39c:	4621      	mov	r1, r4
 800e39e:	4630      	mov	r0, r6
 800e3a0:	f7ff fef6 	bl	800e190 <_printf_common>
 800e3a4:	3001      	adds	r0, #1
 800e3a6:	d14d      	bne.n	800e444 <_printf_i+0x1c8>
 800e3a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e3ac:	b005      	add	sp, #20
 800e3ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e3b2:	4839      	ldr	r0, [pc, #228]	; (800e498 <_printf_i+0x21c>)
 800e3b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800e3b8:	6813      	ldr	r3, [r2, #0]
 800e3ba:	6821      	ldr	r1, [r4, #0]
 800e3bc:	1d1d      	adds	r5, r3, #4
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	6015      	str	r5, [r2, #0]
 800e3c2:	060a      	lsls	r2, r1, #24
 800e3c4:	d50b      	bpl.n	800e3de <_printf_i+0x162>
 800e3c6:	07ca      	lsls	r2, r1, #31
 800e3c8:	bf44      	itt	mi
 800e3ca:	f041 0120 	orrmi.w	r1, r1, #32
 800e3ce:	6021      	strmi	r1, [r4, #0]
 800e3d0:	b91b      	cbnz	r3, 800e3da <_printf_i+0x15e>
 800e3d2:	6822      	ldr	r2, [r4, #0]
 800e3d4:	f022 0220 	bic.w	r2, r2, #32
 800e3d8:	6022      	str	r2, [r4, #0]
 800e3da:	2210      	movs	r2, #16
 800e3dc:	e7b7      	b.n	800e34e <_printf_i+0xd2>
 800e3de:	064d      	lsls	r5, r1, #25
 800e3e0:	bf48      	it	mi
 800e3e2:	b29b      	uxthmi	r3, r3
 800e3e4:	e7ef      	b.n	800e3c6 <_printf_i+0x14a>
 800e3e6:	4665      	mov	r5, ip
 800e3e8:	fbb3 f1f2 	udiv	r1, r3, r2
 800e3ec:	fb02 3311 	mls	r3, r2, r1, r3
 800e3f0:	5cc3      	ldrb	r3, [r0, r3]
 800e3f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800e3f6:	460b      	mov	r3, r1
 800e3f8:	2900      	cmp	r1, #0
 800e3fa:	d1f5      	bne.n	800e3e8 <_printf_i+0x16c>
 800e3fc:	e7b9      	b.n	800e372 <_printf_i+0xf6>
 800e3fe:	6813      	ldr	r3, [r2, #0]
 800e400:	6825      	ldr	r5, [r4, #0]
 800e402:	6961      	ldr	r1, [r4, #20]
 800e404:	1d18      	adds	r0, r3, #4
 800e406:	6010      	str	r0, [r2, #0]
 800e408:	0628      	lsls	r0, r5, #24
 800e40a:	681b      	ldr	r3, [r3, #0]
 800e40c:	d501      	bpl.n	800e412 <_printf_i+0x196>
 800e40e:	6019      	str	r1, [r3, #0]
 800e410:	e002      	b.n	800e418 <_printf_i+0x19c>
 800e412:	066a      	lsls	r2, r5, #25
 800e414:	d5fb      	bpl.n	800e40e <_printf_i+0x192>
 800e416:	8019      	strh	r1, [r3, #0]
 800e418:	2300      	movs	r3, #0
 800e41a:	6123      	str	r3, [r4, #16]
 800e41c:	4665      	mov	r5, ip
 800e41e:	e7b9      	b.n	800e394 <_printf_i+0x118>
 800e420:	6813      	ldr	r3, [r2, #0]
 800e422:	1d19      	adds	r1, r3, #4
 800e424:	6011      	str	r1, [r2, #0]
 800e426:	681d      	ldr	r5, [r3, #0]
 800e428:	6862      	ldr	r2, [r4, #4]
 800e42a:	2100      	movs	r1, #0
 800e42c:	4628      	mov	r0, r5
 800e42e:	f7f1 feef 	bl	8000210 <memchr>
 800e432:	b108      	cbz	r0, 800e438 <_printf_i+0x1bc>
 800e434:	1b40      	subs	r0, r0, r5
 800e436:	6060      	str	r0, [r4, #4]
 800e438:	6863      	ldr	r3, [r4, #4]
 800e43a:	6123      	str	r3, [r4, #16]
 800e43c:	2300      	movs	r3, #0
 800e43e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800e442:	e7a7      	b.n	800e394 <_printf_i+0x118>
 800e444:	6923      	ldr	r3, [r4, #16]
 800e446:	462a      	mov	r2, r5
 800e448:	4639      	mov	r1, r7
 800e44a:	4630      	mov	r0, r6
 800e44c:	47c0      	blx	r8
 800e44e:	3001      	adds	r0, #1
 800e450:	d0aa      	beq.n	800e3a8 <_printf_i+0x12c>
 800e452:	6823      	ldr	r3, [r4, #0]
 800e454:	079b      	lsls	r3, r3, #30
 800e456:	d413      	bmi.n	800e480 <_printf_i+0x204>
 800e458:	68e0      	ldr	r0, [r4, #12]
 800e45a:	9b03      	ldr	r3, [sp, #12]
 800e45c:	4298      	cmp	r0, r3
 800e45e:	bfb8      	it	lt
 800e460:	4618      	movlt	r0, r3
 800e462:	e7a3      	b.n	800e3ac <_printf_i+0x130>
 800e464:	2301      	movs	r3, #1
 800e466:	464a      	mov	r2, r9
 800e468:	4639      	mov	r1, r7
 800e46a:	4630      	mov	r0, r6
 800e46c:	47c0      	blx	r8
 800e46e:	3001      	adds	r0, #1
 800e470:	d09a      	beq.n	800e3a8 <_printf_i+0x12c>
 800e472:	3501      	adds	r5, #1
 800e474:	68e3      	ldr	r3, [r4, #12]
 800e476:	9a03      	ldr	r2, [sp, #12]
 800e478:	1a9b      	subs	r3, r3, r2
 800e47a:	42ab      	cmp	r3, r5
 800e47c:	dcf2      	bgt.n	800e464 <_printf_i+0x1e8>
 800e47e:	e7eb      	b.n	800e458 <_printf_i+0x1dc>
 800e480:	2500      	movs	r5, #0
 800e482:	f104 0919 	add.w	r9, r4, #25
 800e486:	e7f5      	b.n	800e474 <_printf_i+0x1f8>
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d1ac      	bne.n	800e3e6 <_printf_i+0x16a>
 800e48c:	7803      	ldrb	r3, [r0, #0]
 800e48e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800e492:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800e496:	e76c      	b.n	800e372 <_printf_i+0xf6>
 800e498:	08010705 	.word	0x08010705
 800e49c:	08010716 	.word	0x08010716

0800e4a0 <memmove>:
 800e4a0:	4288      	cmp	r0, r1
 800e4a2:	b510      	push	{r4, lr}
 800e4a4:	eb01 0302 	add.w	r3, r1, r2
 800e4a8:	d807      	bhi.n	800e4ba <memmove+0x1a>
 800e4aa:	1e42      	subs	r2, r0, #1
 800e4ac:	4299      	cmp	r1, r3
 800e4ae:	d00a      	beq.n	800e4c6 <memmove+0x26>
 800e4b0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e4b4:	f802 4f01 	strb.w	r4, [r2, #1]!
 800e4b8:	e7f8      	b.n	800e4ac <memmove+0xc>
 800e4ba:	4283      	cmp	r3, r0
 800e4bc:	d9f5      	bls.n	800e4aa <memmove+0xa>
 800e4be:	1881      	adds	r1, r0, r2
 800e4c0:	1ad2      	subs	r2, r2, r3
 800e4c2:	42d3      	cmn	r3, r2
 800e4c4:	d100      	bne.n	800e4c8 <memmove+0x28>
 800e4c6:	bd10      	pop	{r4, pc}
 800e4c8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e4cc:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800e4d0:	e7f7      	b.n	800e4c2 <memmove+0x22>
	...

0800e4d4 <_free_r>:
 800e4d4:	b538      	push	{r3, r4, r5, lr}
 800e4d6:	4605      	mov	r5, r0
 800e4d8:	2900      	cmp	r1, #0
 800e4da:	d045      	beq.n	800e568 <_free_r+0x94>
 800e4dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e4e0:	1f0c      	subs	r4, r1, #4
 800e4e2:	2b00      	cmp	r3, #0
 800e4e4:	bfb8      	it	lt
 800e4e6:	18e4      	addlt	r4, r4, r3
 800e4e8:	f000 f8d2 	bl	800e690 <__malloc_lock>
 800e4ec:	4a1f      	ldr	r2, [pc, #124]	; (800e56c <_free_r+0x98>)
 800e4ee:	6813      	ldr	r3, [r2, #0]
 800e4f0:	4610      	mov	r0, r2
 800e4f2:	b933      	cbnz	r3, 800e502 <_free_r+0x2e>
 800e4f4:	6063      	str	r3, [r4, #4]
 800e4f6:	6014      	str	r4, [r2, #0]
 800e4f8:	4628      	mov	r0, r5
 800e4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4fe:	f000 b8c8 	b.w	800e692 <__malloc_unlock>
 800e502:	42a3      	cmp	r3, r4
 800e504:	d90c      	bls.n	800e520 <_free_r+0x4c>
 800e506:	6821      	ldr	r1, [r4, #0]
 800e508:	1862      	adds	r2, r4, r1
 800e50a:	4293      	cmp	r3, r2
 800e50c:	bf04      	itt	eq
 800e50e:	681a      	ldreq	r2, [r3, #0]
 800e510:	685b      	ldreq	r3, [r3, #4]
 800e512:	6063      	str	r3, [r4, #4]
 800e514:	bf04      	itt	eq
 800e516:	1852      	addeq	r2, r2, r1
 800e518:	6022      	streq	r2, [r4, #0]
 800e51a:	6004      	str	r4, [r0, #0]
 800e51c:	e7ec      	b.n	800e4f8 <_free_r+0x24>
 800e51e:	4613      	mov	r3, r2
 800e520:	685a      	ldr	r2, [r3, #4]
 800e522:	b10a      	cbz	r2, 800e528 <_free_r+0x54>
 800e524:	42a2      	cmp	r2, r4
 800e526:	d9fa      	bls.n	800e51e <_free_r+0x4a>
 800e528:	6819      	ldr	r1, [r3, #0]
 800e52a:	1858      	adds	r0, r3, r1
 800e52c:	42a0      	cmp	r0, r4
 800e52e:	d10b      	bne.n	800e548 <_free_r+0x74>
 800e530:	6820      	ldr	r0, [r4, #0]
 800e532:	4401      	add	r1, r0
 800e534:	1858      	adds	r0, r3, r1
 800e536:	4282      	cmp	r2, r0
 800e538:	6019      	str	r1, [r3, #0]
 800e53a:	d1dd      	bne.n	800e4f8 <_free_r+0x24>
 800e53c:	6810      	ldr	r0, [r2, #0]
 800e53e:	6852      	ldr	r2, [r2, #4]
 800e540:	605a      	str	r2, [r3, #4]
 800e542:	4401      	add	r1, r0
 800e544:	6019      	str	r1, [r3, #0]
 800e546:	e7d7      	b.n	800e4f8 <_free_r+0x24>
 800e548:	d902      	bls.n	800e550 <_free_r+0x7c>
 800e54a:	230c      	movs	r3, #12
 800e54c:	602b      	str	r3, [r5, #0]
 800e54e:	e7d3      	b.n	800e4f8 <_free_r+0x24>
 800e550:	6820      	ldr	r0, [r4, #0]
 800e552:	1821      	adds	r1, r4, r0
 800e554:	428a      	cmp	r2, r1
 800e556:	bf04      	itt	eq
 800e558:	6811      	ldreq	r1, [r2, #0]
 800e55a:	6852      	ldreq	r2, [r2, #4]
 800e55c:	6062      	str	r2, [r4, #4]
 800e55e:	bf04      	itt	eq
 800e560:	1809      	addeq	r1, r1, r0
 800e562:	6021      	streq	r1, [r4, #0]
 800e564:	605c      	str	r4, [r3, #4]
 800e566:	e7c7      	b.n	800e4f8 <_free_r+0x24>
 800e568:	bd38      	pop	{r3, r4, r5, pc}
 800e56a:	bf00      	nop
 800e56c:	20008658 	.word	0x20008658

0800e570 <_malloc_r>:
 800e570:	b570      	push	{r4, r5, r6, lr}
 800e572:	1ccd      	adds	r5, r1, #3
 800e574:	f025 0503 	bic.w	r5, r5, #3
 800e578:	3508      	adds	r5, #8
 800e57a:	2d0c      	cmp	r5, #12
 800e57c:	bf38      	it	cc
 800e57e:	250c      	movcc	r5, #12
 800e580:	2d00      	cmp	r5, #0
 800e582:	4606      	mov	r6, r0
 800e584:	db01      	blt.n	800e58a <_malloc_r+0x1a>
 800e586:	42a9      	cmp	r1, r5
 800e588:	d903      	bls.n	800e592 <_malloc_r+0x22>
 800e58a:	230c      	movs	r3, #12
 800e58c:	6033      	str	r3, [r6, #0]
 800e58e:	2000      	movs	r0, #0
 800e590:	bd70      	pop	{r4, r5, r6, pc}
 800e592:	f000 f87d 	bl	800e690 <__malloc_lock>
 800e596:	4a21      	ldr	r2, [pc, #132]	; (800e61c <_malloc_r+0xac>)
 800e598:	6814      	ldr	r4, [r2, #0]
 800e59a:	4621      	mov	r1, r4
 800e59c:	b991      	cbnz	r1, 800e5c4 <_malloc_r+0x54>
 800e59e:	4c20      	ldr	r4, [pc, #128]	; (800e620 <_malloc_r+0xb0>)
 800e5a0:	6823      	ldr	r3, [r4, #0]
 800e5a2:	b91b      	cbnz	r3, 800e5ac <_malloc_r+0x3c>
 800e5a4:	4630      	mov	r0, r6
 800e5a6:	f000 f863 	bl	800e670 <_sbrk_r>
 800e5aa:	6020      	str	r0, [r4, #0]
 800e5ac:	4629      	mov	r1, r5
 800e5ae:	4630      	mov	r0, r6
 800e5b0:	f000 f85e 	bl	800e670 <_sbrk_r>
 800e5b4:	1c43      	adds	r3, r0, #1
 800e5b6:	d124      	bne.n	800e602 <_malloc_r+0x92>
 800e5b8:	230c      	movs	r3, #12
 800e5ba:	6033      	str	r3, [r6, #0]
 800e5bc:	4630      	mov	r0, r6
 800e5be:	f000 f868 	bl	800e692 <__malloc_unlock>
 800e5c2:	e7e4      	b.n	800e58e <_malloc_r+0x1e>
 800e5c4:	680b      	ldr	r3, [r1, #0]
 800e5c6:	1b5b      	subs	r3, r3, r5
 800e5c8:	d418      	bmi.n	800e5fc <_malloc_r+0x8c>
 800e5ca:	2b0b      	cmp	r3, #11
 800e5cc:	d90f      	bls.n	800e5ee <_malloc_r+0x7e>
 800e5ce:	600b      	str	r3, [r1, #0]
 800e5d0:	50cd      	str	r5, [r1, r3]
 800e5d2:	18cc      	adds	r4, r1, r3
 800e5d4:	4630      	mov	r0, r6
 800e5d6:	f000 f85c 	bl	800e692 <__malloc_unlock>
 800e5da:	f104 000b 	add.w	r0, r4, #11
 800e5de:	1d23      	adds	r3, r4, #4
 800e5e0:	f020 0007 	bic.w	r0, r0, #7
 800e5e4:	1ac3      	subs	r3, r0, r3
 800e5e6:	d0d3      	beq.n	800e590 <_malloc_r+0x20>
 800e5e8:	425a      	negs	r2, r3
 800e5ea:	50e2      	str	r2, [r4, r3]
 800e5ec:	e7d0      	b.n	800e590 <_malloc_r+0x20>
 800e5ee:	428c      	cmp	r4, r1
 800e5f0:	684b      	ldr	r3, [r1, #4]
 800e5f2:	bf16      	itet	ne
 800e5f4:	6063      	strne	r3, [r4, #4]
 800e5f6:	6013      	streq	r3, [r2, #0]
 800e5f8:	460c      	movne	r4, r1
 800e5fa:	e7eb      	b.n	800e5d4 <_malloc_r+0x64>
 800e5fc:	460c      	mov	r4, r1
 800e5fe:	6849      	ldr	r1, [r1, #4]
 800e600:	e7cc      	b.n	800e59c <_malloc_r+0x2c>
 800e602:	1cc4      	adds	r4, r0, #3
 800e604:	f024 0403 	bic.w	r4, r4, #3
 800e608:	42a0      	cmp	r0, r4
 800e60a:	d005      	beq.n	800e618 <_malloc_r+0xa8>
 800e60c:	1a21      	subs	r1, r4, r0
 800e60e:	4630      	mov	r0, r6
 800e610:	f000 f82e 	bl	800e670 <_sbrk_r>
 800e614:	3001      	adds	r0, #1
 800e616:	d0cf      	beq.n	800e5b8 <_malloc_r+0x48>
 800e618:	6025      	str	r5, [r4, #0]
 800e61a:	e7db      	b.n	800e5d4 <_malloc_r+0x64>
 800e61c:	20008658 	.word	0x20008658
 800e620:	2000865c 	.word	0x2000865c

0800e624 <_realloc_r>:
 800e624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e626:	4607      	mov	r7, r0
 800e628:	4614      	mov	r4, r2
 800e62a:	460e      	mov	r6, r1
 800e62c:	b921      	cbnz	r1, 800e638 <_realloc_r+0x14>
 800e62e:	4611      	mov	r1, r2
 800e630:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800e634:	f7ff bf9c 	b.w	800e570 <_malloc_r>
 800e638:	b922      	cbnz	r2, 800e644 <_realloc_r+0x20>
 800e63a:	f7ff ff4b 	bl	800e4d4 <_free_r>
 800e63e:	4625      	mov	r5, r4
 800e640:	4628      	mov	r0, r5
 800e642:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e644:	f000 f826 	bl	800e694 <_malloc_usable_size_r>
 800e648:	42a0      	cmp	r0, r4
 800e64a:	d20f      	bcs.n	800e66c <_realloc_r+0x48>
 800e64c:	4621      	mov	r1, r4
 800e64e:	4638      	mov	r0, r7
 800e650:	f7ff ff8e 	bl	800e570 <_malloc_r>
 800e654:	4605      	mov	r5, r0
 800e656:	2800      	cmp	r0, #0
 800e658:	d0f2      	beq.n	800e640 <_realloc_r+0x1c>
 800e65a:	4631      	mov	r1, r6
 800e65c:	4622      	mov	r2, r4
 800e65e:	f7ff fc11 	bl	800de84 <memcpy>
 800e662:	4631      	mov	r1, r6
 800e664:	4638      	mov	r0, r7
 800e666:	f7ff ff35 	bl	800e4d4 <_free_r>
 800e66a:	e7e9      	b.n	800e640 <_realloc_r+0x1c>
 800e66c:	4635      	mov	r5, r6
 800e66e:	e7e7      	b.n	800e640 <_realloc_r+0x1c>

0800e670 <_sbrk_r>:
 800e670:	b538      	push	{r3, r4, r5, lr}
 800e672:	4c06      	ldr	r4, [pc, #24]	; (800e68c <_sbrk_r+0x1c>)
 800e674:	2300      	movs	r3, #0
 800e676:	4605      	mov	r5, r0
 800e678:	4608      	mov	r0, r1
 800e67a:	6023      	str	r3, [r4, #0]
 800e67c:	f7f6 f9b6 	bl	80049ec <_sbrk>
 800e680:	1c43      	adds	r3, r0, #1
 800e682:	d102      	bne.n	800e68a <_sbrk_r+0x1a>
 800e684:	6823      	ldr	r3, [r4, #0]
 800e686:	b103      	cbz	r3, 800e68a <_sbrk_r+0x1a>
 800e688:	602b      	str	r3, [r5, #0]
 800e68a:	bd38      	pop	{r3, r4, r5, pc}
 800e68c:	20008d44 	.word	0x20008d44

0800e690 <__malloc_lock>:
 800e690:	4770      	bx	lr

0800e692 <__malloc_unlock>:
 800e692:	4770      	bx	lr

0800e694 <_malloc_usable_size_r>:
 800e694:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e698:	1f18      	subs	r0, r3, #4
 800e69a:	2b00      	cmp	r3, #0
 800e69c:	bfbc      	itt	lt
 800e69e:	580b      	ldrlt	r3, [r1, r0]
 800e6a0:	18c0      	addlt	r0, r0, r3
 800e6a2:	4770      	bx	lr

0800e6a4 <_init>:
 800e6a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6a6:	bf00      	nop
 800e6a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6aa:	bc08      	pop	{r3}
 800e6ac:	469e      	mov	lr, r3
 800e6ae:	4770      	bx	lr

0800e6b0 <_fini>:
 800e6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e6b2:	bf00      	nop
 800e6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e6b6:	bc08      	pop	{r3}
 800e6b8:	469e      	mov	lr, r3
 800e6ba:	4770      	bx	lr

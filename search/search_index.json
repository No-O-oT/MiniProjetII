{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mini-Projet microcontr\u00f4leur STM32 : Pong 2D en r\u00e9seau Ce projet a \u00e9t\u00e9 r\u00e9alis\u00e9 par Timoth\u00e9 Corre et Nicolas Trosino, deux \u00e9l\u00e8ves du M1 E3A de l'ENS Paris-Saclay, dans le cadre de l'UE d'Informatique Industrielle. Le sujet est relativement libre et a vocation \u00e0 refl\u00e9ter les notions d'Informatique vues dans l'ann\u00e9e. Par soucis de compatibilit\u00e9, le projet entier est sur le d\u00e9p\u00f4t et pas seulement les sources, ce qui permet de le faire fonctionner directement apr\u00e8s un simple copier-coller Ce mini-projet a pour objectif de prendre en main un syst\u00e8me d'exploitation temps r\u00e9el (ici FreeRTOS) sur un microcontr\u00f4leur 32 bits (ici une carte STM32). Nous avons choisi de revisiter l'un des jeux les plus symboliques et historiques de l'informatique : le Pong. Nous proposons une sorte de \"air-hockey\" num\u00e9rique et sans fil : un pong en 2D donc. Les joueurs s'affrontent chacun sur une carte STM32 et ne voient que leur moiti\u00e9 de jeu : leur raquette et la balle ou une indication lorsqu'elle est hors de l'\u00e9cran. Compte tenu de la port\u00e9e de la liaison Bluetooth, les joueurs doivent \u00eatre \u00e0 proximit\u00e9, mais ils ne sont pas n\u00e9cessairement dans la m\u00eame pi\u00e8ce, et capables de voir le jeu de l'adversaire. C'est en cela que r\u00e9side la principale valeur ajout\u00e9e : la communication entre 2 microcontr\u00f4leurs (UART dans un premier temps, Bluetooth enfin), qui doivent s'\u00e9changer les informations afin de permettre \u00e0 chaque joueur de jouer sur sa propre carte. On trouvera sur ce d\u00e9p\u00f4t : - Le dossier avec le programme Master, qui g\u00e8re le jeu ; - Le dossier avec le programme Slave, qui est t\u00e9l\u00e9vers\u00e9 sur la carte de l'adversaire. L'ordre des cartes est compl\u00e8tement interchangeable, et sans influence sur le d\u00e9roulement du jeu, \u00e0 la vue pr\u00e8s (gauche pour le Master, droite pour le Slave) L'utilisation du Pong2DBT Pour l'heure, les fonctionnalit\u00e9s impl\u00e9ment\u00e9es sont les suivantes : Deux raquettes, une sur chaque carte, contr\u00f4l\u00e9es en 2 dimensions \u00e0 l'aide du joystick pr\u00e9sent sur la carte ENS accompagnant la carte STM32. Ces derni\u00e8res : Contr\u00f4lent les rebonds en fonction de la position relative de la balle par rapport \u00e0 la raquette Calculent l'angle de rebond de la balle sur la raquette en fonction de la position d'impact sur la raquette (la position d'impact \u00e9tant l'ordonn\u00e9e lors du rebond, pouvant se situer \u00e0 l'interieur de la raquette si la balle est rapide) Une balle faisant des allers-retours d'une carte \u00e0 l'autre jusqu'\u00e0 sortir du terrain horizontalement, les bords sup\u00e9rieur et inf\u00e9rieur \u00e9tant des fronti\u00e8res de rebond. Cette balle : Contr\u00f4le sa propre vitesse en l'incr\u00e9mentant \u00e0 chaque rebond pour limiter la dur\u00e9e des parties et rendre une partie un peu plus piment\u00e9e Permet de relancer le jeu apr\u00e8s la perte d'un des joueurs et un appui sur BP2 Communication entre les cartes possible via : Liaison sans-fil Bluetooth \u00e0 l'aide de modules RN42 \u00e0 brancher en suppl\u00e9ment (voir page Bluetooth), la connexion \u00e9tant automatique apr\u00e8s configuration ; Liaison s\u00e9rie asynchrone UART direct entre les cartes \u00e0 l'aide de trois fils. Une petite vid\u00e9o d\u00e9mo montrant une partie, depuis le d\u00e9marrage des cartes, est pr\u00e9sent\u00e9e ci-dessous. (https://youtu.be/ZiN9ByJ4qZM)","title":"Pr\u00e9sentation"},{"location":"#mini-projet-microcontroleur-stm32-pong-2d-en-reseau","text":"Ce projet a \u00e9t\u00e9 r\u00e9alis\u00e9 par Timoth\u00e9 Corre et Nicolas Trosino, deux \u00e9l\u00e8ves du M1 E3A de l'ENS Paris-Saclay, dans le cadre de l'UE d'Informatique Industrielle. Le sujet est relativement libre et a vocation \u00e0 refl\u00e9ter les notions d'Informatique vues dans l'ann\u00e9e. Par soucis de compatibilit\u00e9, le projet entier est sur le d\u00e9p\u00f4t et pas seulement les sources, ce qui permet de le faire fonctionner directement apr\u00e8s un simple copier-coller Ce mini-projet a pour objectif de prendre en main un syst\u00e8me d'exploitation temps r\u00e9el (ici FreeRTOS) sur un microcontr\u00f4leur 32 bits (ici une carte STM32). Nous avons choisi de revisiter l'un des jeux les plus symboliques et historiques de l'informatique : le Pong. Nous proposons une sorte de \"air-hockey\" num\u00e9rique et sans fil : un pong en 2D donc. Les joueurs s'affrontent chacun sur une carte STM32 et ne voient que leur moiti\u00e9 de jeu : leur raquette et la balle ou une indication lorsqu'elle est hors de l'\u00e9cran. Compte tenu de la port\u00e9e de la liaison Bluetooth, les joueurs doivent \u00eatre \u00e0 proximit\u00e9, mais ils ne sont pas n\u00e9cessairement dans la m\u00eame pi\u00e8ce, et capables de voir le jeu de l'adversaire. C'est en cela que r\u00e9side la principale valeur ajout\u00e9e : la communication entre 2 microcontr\u00f4leurs (UART dans un premier temps, Bluetooth enfin), qui doivent s'\u00e9changer les informations afin de permettre \u00e0 chaque joueur de jouer sur sa propre carte. On trouvera sur ce d\u00e9p\u00f4t : - Le dossier avec le programme Master, qui g\u00e8re le jeu ; - Le dossier avec le programme Slave, qui est t\u00e9l\u00e9vers\u00e9 sur la carte de l'adversaire. L'ordre des cartes est compl\u00e8tement interchangeable, et sans influence sur le d\u00e9roulement du jeu, \u00e0 la vue pr\u00e8s (gauche pour le Master, droite pour le Slave)","title":"Mini-Projet microcontr\u00f4leur STM32 : Pong 2D en r\u00e9seau"},{"location":"#lutilisation-du-pong2dbt","text":"Pour l'heure, les fonctionnalit\u00e9s impl\u00e9ment\u00e9es sont les suivantes : Deux raquettes, une sur chaque carte, contr\u00f4l\u00e9es en 2 dimensions \u00e0 l'aide du joystick pr\u00e9sent sur la carte ENS accompagnant la carte STM32. Ces derni\u00e8res : Contr\u00f4lent les rebonds en fonction de la position relative de la balle par rapport \u00e0 la raquette Calculent l'angle de rebond de la balle sur la raquette en fonction de la position d'impact sur la raquette (la position d'impact \u00e9tant l'ordonn\u00e9e lors du rebond, pouvant se situer \u00e0 l'interieur de la raquette si la balle est rapide) Une balle faisant des allers-retours d'une carte \u00e0 l'autre jusqu'\u00e0 sortir du terrain horizontalement, les bords sup\u00e9rieur et inf\u00e9rieur \u00e9tant des fronti\u00e8res de rebond. Cette balle : Contr\u00f4le sa propre vitesse en l'incr\u00e9mentant \u00e0 chaque rebond pour limiter la dur\u00e9e des parties et rendre une partie un peu plus piment\u00e9e Permet de relancer le jeu apr\u00e8s la perte d'un des joueurs et un appui sur BP2 Communication entre les cartes possible via : Liaison sans-fil Bluetooth \u00e0 l'aide de modules RN42 \u00e0 brancher en suppl\u00e9ment (voir page Bluetooth), la connexion \u00e9tant automatique apr\u00e8s configuration ; Liaison s\u00e9rie asynchrone UART direct entre les cartes \u00e0 l'aide de trois fils. Une petite vid\u00e9o d\u00e9mo montrant une partie, depuis le d\u00e9marrage des cartes, est pr\u00e9sent\u00e9e ci-dessous. (https://youtu.be/ZiN9ByJ4qZM)","title":"L'utilisation du Pong2DBT"},{"location":"bluetooth/","text":"Pr\u00e9sentation et utilisation des modules bluetooth RN42 Les modules bluetooth RN42 sont faits pour faciliter l'utilisation du bluetooth, ceux-ci sont capables de prendre en entr\u00e9e un format UART et de directement transmettre le contenu via bluetooth. Cependant, il faut tout de m\u00eame leur sp\u00e9cifier quelques param\u00e8tres pour pouvoir les interconnecter. Pour acc\u00e9der \u00e0 la configuration d'un RN42, il faut lui envoyer $$$ par UART. Le module est alors cens\u00e9 r\u00e9pondre par CMD . A partir de ce moment, on peut lui envoyer des instructions suivies d'un retour \u00e0 la ligne. L'instruction --- permet de sortir du mode commande. L'instruction X demande au module d'afficher sa configuration actuelle, par exemple : On remarque alors que ce module est configur\u00e9 en 9600 Baud, qu'il est en mode Slave et que son adresse BT est 0006666C5B8F . Voil\u00e0 les seuls param\u00e8tres qui seront utiles dans notre cas. Par d\u00e9faut, les modules sont livr\u00e9s avec la vitesse de 115200 Baud. Cette vitesse \u00e9tant trop elev\u00e9e pour transmettre sans erreurs dans le cadre de notre projet, il est donc important de configurer le module en 9600 Baud . Un r\u00e9sum\u00e9 des param\u00e8tres \u00e0 \u00e9diter pour pouvoir utiliser ces modules dans le cadre du Pong2DBT est fourni ci-dessous. Configuration initiale des RN42 Les modules doivent \u00eatre configur\u00e9s selon les crit\u00e8res suivants. Pour rappel, l'acc\u00e8s au mode configuration se fait en envoyant $$$ (115200 Baud pour un module neuf, 9600 Baud apr\u00e8s configuration), et les commandes sont ensuites valid\u00e9es avec un retour \u00e0 la ligne. Pour sortir, la commande est --- En mode configuration, la LED int\u00e9gr\u00e9e clignote rapidement. Pour la configuration, il faudra avoir recours \u00e0 un terminal s\u00e9rie sur un PC (par ex TeraTerm, en 115200 Baud). Le branchement au RN42 peut se faire soit par dongle UART, soit en utilisant la branche command-interface est une version suspendue du programme qui fait l'interface avec un terminal s\u00e9rie USB sur le PC et l'UART7 du STM32. Module pour la carte Master 9600 Baud SU,96 Mode Auto (3) SM,3 Adresse du Slave pr\u00e9-enregistr\u00e9e (registre R) IN5 (recherche des adresses environnantes) C,<addresse> (connexion et enregistrement \u00e0 l'adresse) Module pour la carte Slave 9600 Baud SU,96 Mode Slave (0) SM,0 Utilisation dans le cadre du Pong 2DBT Une fois la configuration initiale faite, les modules enregistrent celle-ci et le mode Auto permet d'initier la connexion automatiquement d\u00e8s leur alimentation. Attention, il faut cependant veiller \u00e0 brancher les bons modules sur la bonne carte. Un avantage de ce fonctionnement automatique est que les programmes faits peuvent \u00e0 la fois communiquer via les modules bluetooth ou directement en UART via c\u00e2bles, sans n\u00e9cessiter la moindre modification au niveau du code ou d'options bien cach\u00e9es dans le jeu. Le sch\u00e9ma de c\u00e2blage sur l'UART7 depuis la carte de l'ENS se fait comme suit : En cas de difficult\u00e9s avec le Bluetooth et/ou les modules RN42, il est donc possible d'avoir recours au bon vieux mais toujours fiable fil \u00e9lectrique (n'est ce pas dans les vieux pots que l'on fait les meilleurs soupes ?).","title":"Bluetooth"},{"location":"bluetooth/#presentation-et-utilisation-des-modules-bluetooth-rn42","text":"Les modules bluetooth RN42 sont faits pour faciliter l'utilisation du bluetooth, ceux-ci sont capables de prendre en entr\u00e9e un format UART et de directement transmettre le contenu via bluetooth. Cependant, il faut tout de m\u00eame leur sp\u00e9cifier quelques param\u00e8tres pour pouvoir les interconnecter. Pour acc\u00e9der \u00e0 la configuration d'un RN42, il faut lui envoyer $$$ par UART. Le module est alors cens\u00e9 r\u00e9pondre par CMD . A partir de ce moment, on peut lui envoyer des instructions suivies d'un retour \u00e0 la ligne. L'instruction --- permet de sortir du mode commande. L'instruction X demande au module d'afficher sa configuration actuelle, par exemple : On remarque alors que ce module est configur\u00e9 en 9600 Baud, qu'il est en mode Slave et que son adresse BT est 0006666C5B8F . Voil\u00e0 les seuls param\u00e8tres qui seront utiles dans notre cas. Par d\u00e9faut, les modules sont livr\u00e9s avec la vitesse de 115200 Baud. Cette vitesse \u00e9tant trop elev\u00e9e pour transmettre sans erreurs dans le cadre de notre projet, il est donc important de configurer le module en 9600 Baud . Un r\u00e9sum\u00e9 des param\u00e8tres \u00e0 \u00e9diter pour pouvoir utiliser ces modules dans le cadre du Pong2DBT est fourni ci-dessous.","title":"Pr\u00e9sentation et utilisation des modules bluetooth RN42"},{"location":"bluetooth/#configuration-initiale-des-rn42","text":"Les modules doivent \u00eatre configur\u00e9s selon les crit\u00e8res suivants. Pour rappel, l'acc\u00e8s au mode configuration se fait en envoyant $$$ (115200 Baud pour un module neuf, 9600 Baud apr\u00e8s configuration), et les commandes sont ensuites valid\u00e9es avec un retour \u00e0 la ligne. Pour sortir, la commande est --- En mode configuration, la LED int\u00e9gr\u00e9e clignote rapidement. Pour la configuration, il faudra avoir recours \u00e0 un terminal s\u00e9rie sur un PC (par ex TeraTerm, en 115200 Baud). Le branchement au RN42 peut se faire soit par dongle UART, soit en utilisant la branche command-interface est une version suspendue du programme qui fait l'interface avec un terminal s\u00e9rie USB sur le PC et l'UART7 du STM32.","title":"Configuration initiale des RN42"},{"location":"bluetooth/#module-pour-la-carte-master","text":"9600 Baud SU,96 Mode Auto (3) SM,3 Adresse du Slave pr\u00e9-enregistr\u00e9e (registre R) IN5 (recherche des adresses environnantes) C,<addresse> (connexion et enregistrement \u00e0 l'adresse)","title":"Module pour la carte Master"},{"location":"bluetooth/#module-pour-la-carte-slave","text":"9600 Baud SU,96 Mode Slave (0) SM,0","title":"Module pour la carte Slave"},{"location":"bluetooth/#utilisation-dans-le-cadre-du-pong-2dbt","text":"Une fois la configuration initiale faite, les modules enregistrent celle-ci et le mode Auto permet d'initier la connexion automatiquement d\u00e8s leur alimentation. Attention, il faut cependant veiller \u00e0 brancher les bons modules sur la bonne carte. Un avantage de ce fonctionnement automatique est que les programmes faits peuvent \u00e0 la fois communiquer via les modules bluetooth ou directement en UART via c\u00e2bles, sans n\u00e9cessiter la moindre modification au niveau du code ou d'options bien cach\u00e9es dans le jeu. Le sch\u00e9ma de c\u00e2blage sur l'UART7 depuis la carte de l'ENS se fait comme suit : En cas de difficult\u00e9s avec le Bluetooth et/ou les modules RN42, il est donc possible d'avoir recours au bon vieux mais toujours fiable fil \u00e9lectrique (n'est ce pas dans les vieux pots que l'on fait les meilleurs soupes ?).","title":"Utilisation dans le cadre du Pong 2DBT"},{"location":"prog/","text":"Fonctionnement des programmes Pour fonctionner sur deux cartes, nous avons fait le choix de d\u00e9velopper deux versions distinctes d'un m\u00eame programme : la version Master et la version Slave, bien que ces d\u00e9signations soient plus que jamais remises en causes. Il conviendra de compiler chacune des deux versions sur un des cartes utilis\u00e9es pour jouer au Pong2BT. Programme Master La carte qui se voit attribuer ce programme a pour responsabilit\u00e9 de g\u00e9rer le d\u00e9roulement du jeu, de transmettre les informations du jeu \u00e0 la carte slave et de recevoir des informations de cette derni\u00e8re. Elle est donc en charge de diriger la balle, et de g\u00e9rer les rebonds sur les raquettes. Son \u00e9cran affiche toujours la partie gauche du terrain de jeu. Liste des t\u00e2ches LRacket Ball BgChanger Transmit HAL_UART_RxCpltCallback Lost LRacket Lit les valeurs renvoy\u00e9es par le joystick et fait afficher le mouvement de la raquette gauche Interaction Blackboard Lit sa position actuelle Ecrit sa nouvelle position Affiche la nouvelle position de la raquette et d\u00e9truit l'ancienne (Mutex pour l'\u00e9cran) Ball Initie le mouvement de la balle de mani\u00e8re al\u00e9atoire 2D dans une fen\u00eatre rectangulaire de d\u00e9part, et dans un sens al\u00e9atoire Met \u00e0 jour la position de la balle p\u00e9riodiquement Affiche la nouvelle position et d\u00e9truit la derni\u00e8re Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che G\u00e8re les collisions, les rebonds sur les bords sup\u00e9rieur et inf\u00e9rieur de l'\u00e9cran Interaction Blackboard Lit la position actuelle de la balle Ecrit la nouvelle position Change l'\u00e9tat de la variable perdu si la balle est perdue (game over) Lorsque la balle est perdue : Affiche un message de fin de partie D\u00e9truit la t\u00e2che LRacket S'autod\u00e9truit BgChanger Attend une impulsion sur le bouton pour changer la couleur. Cette fonction est un peu sensible compte tenu de sa faible priorit\u00e9, il faut donc possiblement rester un peu plus longtemps que ce que l'on ferait normalement pour mener \u00e0 bien l'inversion des couleurs. Transmit Envoie p\u00e9riodiquement les informations sur le jeu en UART. Que la transmission soit finalement UART ou sans-fil Bluetooth, rien ne change ici : seul le cablage sera modifi\u00e9. Les donn\u00e9es envoy\u00e9es sont : Les coordonn\u00e9es de la balle, le rayon de la balle L'\u00e9tat du jeu (perdu ou en cours) HAL_UART_RxCpltCallback Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence. Donn\u00e9es re\u00e7ues (\u00e9mises par la carte slave) : Position de la raquette droite Lost Relance la balle lors de l'appui du bouton BP2 apr\u00e8s avoir perdu (permet de jouer \u00e0 l'infini sans appui sur reset) : Recr\u00e9e les t\u00e2ches Ball et LRacket qui se sont d\u00e9truites \u00e0 la fin de la partie pr\u00e9c\u00e9dente Programme Slave La carte qui se voit attribuer ce programme doit recevoir les donn\u00e9es de jeu \u00e9mises par la premi\u00e8re carte (programme Master) pour afficher la partie relative \u00e0 son \u00e9cran, et doit envoyer en retour la position de sa raquette. Son \u00e9cran affiche toujours la partie droite du terrain de jeu. Liste des t\u00e2ches RRacket BallDisplay BgChanger HAL_UART_RxCpltCallback RRacket Lit les valeurs renvoy\u00e9es par le joystick et fait afficher le mouvement de la raquette gauche Lecture du blackboard Envoie les informations sur la position de la raquette droite par UART \u00e0 chaque d\u00e9placement de la raquette BallDisplay Affiche la nouvelle position de la balle et d\u00e9truit l'ancienne p\u00e9riodiquement Lecture du blackboard Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che BgChanger Attend une impulsion sur le bouton pour changer la couleur HAL_UART_RxCpltCallback Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la balle Etat de la variable perdu Rayon de la balle Utilisation de sections critiques et de Mutexes Mutex pour le LCD Notre pong communique avec les joueurs via la seule interface qu'est l'\u00e9cran, il faut donc le partager intelligemment entre des t\u00e2ches qui se r\u00e9alisent en m\u00eame temps et qui peuvent s'interrompre les unes les autres. Pour \u00e9viter des soucis d'affichage particuli\u00e8rement emb\u00eatants (notament ceux qui impliquent des couleurs donc bgchanger), on utilise un mutex pour l'\u00e9cran (d\u00e9nomm\u00e9 myMutex_LCD et d\u00e9clar\u00e9 en ligne 91, cr\u00e9\u00e9 en lignes 252-253). Lorsqu'une t\u00e2che s'accapare le mutex, elle ne peut pas \u00eatre interrompue par une t\u00e2che utilisant le m\u00eame mutex avant la lib\u00e9ration de la ressource. Par exemple, voici la liste des t\u00e2ches du programme Master utilisant le mutex myMutex_LCD : * Horloge (lignes 1529 \u00e0 1535 de Starhorloge) * LRacket (lignes 1599 \u00e0 1611 de StartLRacket) * Ball (lignes 1705 \u00e0 1711 puis 1734 \u00e0 1740 et enfin 1749 \u00e0 1786 de StartBall) * BgChanger (lignes 1827 \u00e0 1835 puis 1839 \u00e0 1847 de StartBgChanger) Section critique pour les coordonn\u00e9es On utilise \u00e9galement des sections critiques pour pouvoir r\u00e9duire les risques de mauvaise lecture d'une ou plusieurs coordonn\u00e9es (de la balle, d'une raquette ou bien des deux). En effet, lors de la r\u00e9ception des coordonn\u00e9es, si une t\u00e2che \"auteur\" est interrompue par une t\u00e2che \"lecteur\", les valeurs lues par la t\u00e2che lecteur ne seront pas forc\u00e9ment celles que la t\u00e2che aurait d\u00fb lire. On peut voir un exemple de l'emploi d'une section critique entre les lignes 1879 et 1889 du programme main de la carte dot\u00e9e du programme Master, dans StartTransmit. Entre les deux balises (d\u00e9but et fin de la t\u00e2che critique), le programme ne peut \u00eatre interrompu par une autre t\u00e2che, m\u00eame de priorit\u00e9 sup\u00e9rieure.","title":"Fonctionnement"},{"location":"prog/#fonctionnement-des-programmes","text":"Pour fonctionner sur deux cartes, nous avons fait le choix de d\u00e9velopper deux versions distinctes d'un m\u00eame programme : la version Master et la version Slave, bien que ces d\u00e9signations soient plus que jamais remises en causes. Il conviendra de compiler chacune des deux versions sur un des cartes utilis\u00e9es pour jouer au Pong2BT.","title":"Fonctionnement des programmes"},{"location":"prog/#programme-master","text":"La carte qui se voit attribuer ce programme a pour responsabilit\u00e9 de g\u00e9rer le d\u00e9roulement du jeu, de transmettre les informations du jeu \u00e0 la carte slave et de recevoir des informations de cette derni\u00e8re. Elle est donc en charge de diriger la balle, et de g\u00e9rer les rebonds sur les raquettes. Son \u00e9cran affiche toujours la partie gauche du terrain de jeu.","title":"Programme Master"},{"location":"prog/#liste-des-taches","text":"LRacket Ball BgChanger Transmit HAL_UART_RxCpltCallback Lost","title":"Liste des t\u00e2ches"},{"location":"prog/#lracket","text":"Lit les valeurs renvoy\u00e9es par le joystick et fait afficher le mouvement de la raquette gauche Interaction Blackboard Lit sa position actuelle Ecrit sa nouvelle position Affiche la nouvelle position de la raquette et d\u00e9truit l'ancienne (Mutex pour l'\u00e9cran)","title":"LRacket"},{"location":"prog/#ball","text":"Initie le mouvement de la balle de mani\u00e8re al\u00e9atoire 2D dans une fen\u00eatre rectangulaire de d\u00e9part, et dans un sens al\u00e9atoire Met \u00e0 jour la position de la balle p\u00e9riodiquement Affiche la nouvelle position et d\u00e9truit la derni\u00e8re Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che G\u00e8re les collisions, les rebonds sur les bords sup\u00e9rieur et inf\u00e9rieur de l'\u00e9cran Interaction Blackboard Lit la position actuelle de la balle Ecrit la nouvelle position Change l'\u00e9tat de la variable perdu si la balle est perdue (game over) Lorsque la balle est perdue : Affiche un message de fin de partie D\u00e9truit la t\u00e2che LRacket S'autod\u00e9truit","title":"Ball"},{"location":"prog/#bgchanger","text":"Attend une impulsion sur le bouton pour changer la couleur. Cette fonction est un peu sensible compte tenu de sa faible priorit\u00e9, il faut donc possiblement rester un peu plus longtemps que ce que l'on ferait normalement pour mener \u00e0 bien l'inversion des couleurs.","title":"BgChanger"},{"location":"prog/#transmit","text":"Envoie p\u00e9riodiquement les informations sur le jeu en UART. Que la transmission soit finalement UART ou sans-fil Bluetooth, rien ne change ici : seul le cablage sera modifi\u00e9. Les donn\u00e9es envoy\u00e9es sont : Les coordonn\u00e9es de la balle, le rayon de la balle L'\u00e9tat du jeu (perdu ou en cours)","title":"Transmit"},{"location":"prog/#hal_uart_rxcpltcallback","text":"Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence. Donn\u00e9es re\u00e7ues (\u00e9mises par la carte slave) : Position de la raquette droite","title":"HAL_UART_RxCpltCallback"},{"location":"prog/#lost","text":"Relance la balle lors de l'appui du bouton BP2 apr\u00e8s avoir perdu (permet de jouer \u00e0 l'infini sans appui sur reset) : Recr\u00e9e les t\u00e2ches Ball et LRacket qui se sont d\u00e9truites \u00e0 la fin de la partie pr\u00e9c\u00e9dente","title":"Lost"},{"location":"prog/#programme-slave","text":"La carte qui se voit attribuer ce programme doit recevoir les donn\u00e9es de jeu \u00e9mises par la premi\u00e8re carte (programme Master) pour afficher la partie relative \u00e0 son \u00e9cran, et doit envoyer en retour la position de sa raquette. Son \u00e9cran affiche toujours la partie droite du terrain de jeu.","title":"Programme Slave"},{"location":"prog/#liste-des-taches_1","text":"RRacket BallDisplay BgChanger HAL_UART_RxCpltCallback","title":"Liste des t\u00e2ches"},{"location":"prog/#rracket","text":"Lit les valeurs renvoy\u00e9es par le joystick et fait afficher le mouvement de la raquette gauche Lecture du blackboard Envoie les informations sur la position de la raquette droite par UART \u00e0 chaque d\u00e9placement de la raquette","title":"RRacket"},{"location":"prog/#balldisplay","text":"Affiche la nouvelle position de la balle et d\u00e9truit l'ancienne p\u00e9riodiquement Lecture du blackboard Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che","title":"BallDisplay"},{"location":"prog/#bgchanger_1","text":"Attend une impulsion sur le bouton pour changer la couleur","title":"BgChanger"},{"location":"prog/#hal_uart_rxcpltcallback_1","text":"Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la balle Etat de la variable perdu Rayon de la balle","title":"HAL_UART_RxCpltCallback"},{"location":"prog/#utilisation-de-sections-critiques-et-de-mutexes","text":"","title":"Utilisation de sections critiques et de Mutexes"},{"location":"prog/#mutex-pour-le-lcd","text":"Notre pong communique avec les joueurs via la seule interface qu'est l'\u00e9cran, il faut donc le partager intelligemment entre des t\u00e2ches qui se r\u00e9alisent en m\u00eame temps et qui peuvent s'interrompre les unes les autres. Pour \u00e9viter des soucis d'affichage particuli\u00e8rement emb\u00eatants (notament ceux qui impliquent des couleurs donc bgchanger), on utilise un mutex pour l'\u00e9cran (d\u00e9nomm\u00e9 myMutex_LCD et d\u00e9clar\u00e9 en ligne 91, cr\u00e9\u00e9 en lignes 252-253). Lorsqu'une t\u00e2che s'accapare le mutex, elle ne peut pas \u00eatre interrompue par une t\u00e2che utilisant le m\u00eame mutex avant la lib\u00e9ration de la ressource. Par exemple, voici la liste des t\u00e2ches du programme Master utilisant le mutex myMutex_LCD : * Horloge (lignes 1529 \u00e0 1535 de Starhorloge) * LRacket (lignes 1599 \u00e0 1611 de StartLRacket) * Ball (lignes 1705 \u00e0 1711 puis 1734 \u00e0 1740 et enfin 1749 \u00e0 1786 de StartBall) * BgChanger (lignes 1827 \u00e0 1835 puis 1839 \u00e0 1847 de StartBgChanger)","title":"Mutex pour le LCD"},{"location":"prog/#section-critique-pour-les-coordonnees","text":"On utilise \u00e9galement des sections critiques pour pouvoir r\u00e9duire les risques de mauvaise lecture d'une ou plusieurs coordonn\u00e9es (de la balle, d'une raquette ou bien des deux). En effet, lors de la r\u00e9ception des coordonn\u00e9es, si une t\u00e2che \"auteur\" est interrompue par une t\u00e2che \"lecteur\", les valeurs lues par la t\u00e2che lecteur ne seront pas forc\u00e9ment celles que la t\u00e2che aurait d\u00fb lire. On peut voir un exemple de l'emploi d'une section critique entre les lignes 1879 et 1889 du programme main de la carte dot\u00e9e du programme Master, dans StartTransmit. Entre les deux balises (d\u00e9but et fin de la t\u00e2che critique), le programme ne peut \u00eatre interrompu par une autre t\u00e2che, m\u00eame de priorit\u00e9 sup\u00e9rieure.","title":"Section critique pour les coordonn\u00e9es"}]}
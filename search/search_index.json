{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Mini-Projet microcontr\u00f4leur STM32 : Pong 2D en r\u00e9seau Ce projet a \u00e9t\u00e9 r\u00e9alis\u00e9 par Timoth\u00e9 Corre et Nicolas Trosino, deux \u00e9l\u00e8ves du M1 E3A de l'ENS Paris-Saclay, dans le cadre de l'UE d'Informatique Industrielle. Le sujet est relativement libre et a vocation a refl\u00e9ter les notions vues dans l'ann\u00e9es. Les fonctionnalit\u00e9s pr\u00e9vues par la suite et celles effectivement impl\u00e9ment\u00e9es sont dans l'onglets Issues Par soucis de compatibilit\u00e9, le projet entier est sur le d\u00e9p\u00f4t et pas seulement les sources, ce qui permet de le faire fonctionner directement avec copier-coller Le but est de prendre en main l'utilisation d'un syst\u00e8me d'exploitation temps r\u00e9el (FreeRTOS) sur un microcontr\u00f4leur 32 bits (STM32). Nous avons choisi de revisiter l'un des jeux les plus symboliques et historique de l'informatique : le pong. Nous proposons une sorte de \"air-hockey\" num\u00e9rique, un pong en 2D donc. Les joueurs s'affrontent chacun sur leur carte STM32 et ne voient que leur moiti\u00e9 de jeu : leur raquette et la balle ou une indication lorsqu'elle est hors de l'\u00e9cran. La valeur ajout\u00e9e r\u00e9side alors dans la communication entre 2 microcontr\u00f4leurs (UART ou Bluetooth), qui devront s'\u00e9changer les informations afin que chaque joueur puisse jouer sur sa propre carte et ait une vue diff\u00e9rente du terrain. On trouvera sur ce d\u00e9p\u00f4t : - Le dossier avec le programme Master, qui g\u00e8re le jeu ; - Le dossier avec le programme Slave, qui est t\u00e9l\u00e9vers\u00e9 sur la carte de l'adversaire. L'utilisation du Pong2DBT Une petite vid\u00e9o d\u00e9mo montrant une partie est pr\u00e9sent\u00e9e ci-dessous. Pour l'heure, les fonctionnalit\u00e9s impl\u00e9ment\u00e9es sont les suivantes : 2 Raquettes, une sur chaque carte, contr\u00f4l\u00e9es en 2 dimensions gr\u00e2ce au joystick de la carte ENS. Contr\u00f4lent les rebonds L'angle de rebond de la balle sur la raquette est contr\u00f4lable en fonction de la position d'impact sur la raquette Une balle faisant des allers-retours d'une carte \u00e0 une autre jusqu'\u00e0 sortir du terrain Vitesse de la balle incr\u00e9ment\u00e9e \u00e0 chaque rebond pour limiter la dur\u00e9e des parties Relance possible de la balle lorsqu'elle sort du jeu, avec appui sur BP2 Communication d'une carte \u00e0 l'autre Bluetooth avec modules RN42, voir page Bluetooth ou UART direct","title":"Pr\u00e9sentation"},{"location":"#mini-projet-microcontroleur-stm32-pong-2d-en-reseau","text":"Ce projet a \u00e9t\u00e9 r\u00e9alis\u00e9 par Timoth\u00e9 Corre et Nicolas Trosino, deux \u00e9l\u00e8ves du M1 E3A de l'ENS Paris-Saclay, dans le cadre de l'UE d'Informatique Industrielle. Le sujet est relativement libre et a vocation a refl\u00e9ter les notions vues dans l'ann\u00e9es. Les fonctionnalit\u00e9s pr\u00e9vues par la suite et celles effectivement impl\u00e9ment\u00e9es sont dans l'onglets Issues Par soucis de compatibilit\u00e9, le projet entier est sur le d\u00e9p\u00f4t et pas seulement les sources, ce qui permet de le faire fonctionner directement avec copier-coller Le but est de prendre en main l'utilisation d'un syst\u00e8me d'exploitation temps r\u00e9el (FreeRTOS) sur un microcontr\u00f4leur 32 bits (STM32). Nous avons choisi de revisiter l'un des jeux les plus symboliques et historique de l'informatique : le pong. Nous proposons une sorte de \"air-hockey\" num\u00e9rique, un pong en 2D donc. Les joueurs s'affrontent chacun sur leur carte STM32 et ne voient que leur moiti\u00e9 de jeu : leur raquette et la balle ou une indication lorsqu'elle est hors de l'\u00e9cran. La valeur ajout\u00e9e r\u00e9side alors dans la communication entre 2 microcontr\u00f4leurs (UART ou Bluetooth), qui devront s'\u00e9changer les informations afin que chaque joueur puisse jouer sur sa propre carte et ait une vue diff\u00e9rente du terrain. On trouvera sur ce d\u00e9p\u00f4t : - Le dossier avec le programme Master, qui g\u00e8re le jeu ; - Le dossier avec le programme Slave, qui est t\u00e9l\u00e9vers\u00e9 sur la carte de l'adversaire.","title":"Mini-Projet microcontr\u00f4leur STM32 : Pong 2D en r\u00e9seau"},{"location":"#lutilisation-du-pong2dbt","text":"Une petite vid\u00e9o d\u00e9mo montrant une partie est pr\u00e9sent\u00e9e ci-dessous. Pour l'heure, les fonctionnalit\u00e9s impl\u00e9ment\u00e9es sont les suivantes : 2 Raquettes, une sur chaque carte, contr\u00f4l\u00e9es en 2 dimensions gr\u00e2ce au joystick de la carte ENS. Contr\u00f4lent les rebonds L'angle de rebond de la balle sur la raquette est contr\u00f4lable en fonction de la position d'impact sur la raquette Une balle faisant des allers-retours d'une carte \u00e0 une autre jusqu'\u00e0 sortir du terrain Vitesse de la balle incr\u00e9ment\u00e9e \u00e0 chaque rebond pour limiter la dur\u00e9e des parties Relance possible de la balle lorsqu'elle sort du jeu, avec appui sur BP2 Communication d'une carte \u00e0 l'autre Bluetooth avec modules RN42, voir page Bluetooth ou UART direct","title":"L'utilisation du Pong2DBT"},{"location":"bluetooth/","text":"Pr\u00e9sentation et utilisation des modules bluetooth RN42 Les modules bluetooth RN42 sont faits pour faciliter l'utilisation du bluetooth, ceux-ci sont capables de prendre en entr\u00e9e un format UART et de directement transmettre le contenu via bluetooth. Cependant, il faut tout de m\u00eame leur sp\u00e9cifier quelques param\u00e8tres pour pouvoir les interconnecter. Pour acc\u00e9der \u00e0 la configuration d'un RN42, il faut lui envoyer $$$ par UART. Le module est alors cens\u00e9 r\u00e9pondre par CMD . A partir de ce moment, on peut lui envoyer des instructions suivies d'un retour \u00e0 la ligne. L'instruction --- permet de sortir du mode commande. L'instruction X demande au module d'afficher sa configuration actuelle, par exemple : On remarque alors que ce module est configur\u00e9 en 9600 Baud, qu'il est en mode Slave et que son adresse BT est 0006666C5B8F . Voil\u00e0 les seuls param\u00e8tres qui seront utiles dans notre cadre. Par d\u00e9faut, les modules sont livr\u00e9s avec la vitesse de 115200 Baud. Cette vitesse \u00e9tait trop elev\u00e9e pour transmettre sans erreurs dans notre cas, il est donc important de configurer le module en 9600 Baud . Un r\u00e9sum\u00e9 des param\u00e8tres \u00e0 \u00e9diter pour pouvoir utiliser ces modules dans le cadre du Pong2DBT est fourni ci-dessous. Configuration initiale des RN42 Les modules doivent \u00eatre configur\u00e9s selon les crit\u00e8res suivants. Pour rappel, l'acc\u00e8s au mode configuration se fait en envoyant $$$ (115200 Baud pour un module neuf, 9600 Baud apr\u00e8s configuration), et les commandes sont ensuites valid\u00e9es avec un retour \u00e0 la ligne. Pour sortir, la commande est --- En mode configuration, la LED int\u00e9gr\u00e9e clignote rapidement. Pour la configuration, il faudra avoir recours \u00e0 un terminal s\u00e9rie sur un PC (par ex TeraTerm, en 115200 Baud). Le branchement au RN42 peut se faire soit par dongle UART, soit en utilisant la branche command-interface est une version suspendue du programme qui fait l'interface avec un terminal s\u00e9rie USB sur le PC et l'UART7 du STM32. Module pour la carte Master 9600 Baud SU,96 Mode Auto (3) SM,3 Adresse du Slave pr\u00e9-enregistr\u00e9e (registre R) IN5 (recherche des adresses environnantes) C,<addresse> (connexion et enregistrement \u00e0 l'adresse) Module pour la carte Slave 9600 Baud SU,96 Mode Slave (0) SM,0 Utilisation dans le cadre du Pong 2DBT Une fois la configuration initiale faite, les modules enregistrent celle-ci et le mode Auto permet d'initier la connexion automatiquement d\u00e8s leur alimentation. Attention, il faut cependant veiller \u00e0 brancher les bons modules sur la bonne carte. Un avantage de ce fonctionnement automatique est que les programmes faits peuvent \u00e0 la fois communiquer via les modules bluetooth ou directement en UART via c\u00e2bles, sans n\u00e9cessiter la moindre modification. Le sch\u00e9ma de c\u00e2blage sur l'UART7 depuis la carte de l'ENS se fait comme suit En cas de difficult\u00e9s avec les RN42, il est donc possible d'avoir recours au bon vieux mais fiable fil \u00e9lectrique.","title":"Bluetooth"},{"location":"bluetooth/#presentation-et-utilisation-des-modules-bluetooth-rn42","text":"Les modules bluetooth RN42 sont faits pour faciliter l'utilisation du bluetooth, ceux-ci sont capables de prendre en entr\u00e9e un format UART et de directement transmettre le contenu via bluetooth. Cependant, il faut tout de m\u00eame leur sp\u00e9cifier quelques param\u00e8tres pour pouvoir les interconnecter. Pour acc\u00e9der \u00e0 la configuration d'un RN42, il faut lui envoyer $$$ par UART. Le module est alors cens\u00e9 r\u00e9pondre par CMD . A partir de ce moment, on peut lui envoyer des instructions suivies d'un retour \u00e0 la ligne. L'instruction --- permet de sortir du mode commande. L'instruction X demande au module d'afficher sa configuration actuelle, par exemple : On remarque alors que ce module est configur\u00e9 en 9600 Baud, qu'il est en mode Slave et que son adresse BT est 0006666C5B8F . Voil\u00e0 les seuls param\u00e8tres qui seront utiles dans notre cadre. Par d\u00e9faut, les modules sont livr\u00e9s avec la vitesse de 115200 Baud. Cette vitesse \u00e9tait trop elev\u00e9e pour transmettre sans erreurs dans notre cas, il est donc important de configurer le module en 9600 Baud . Un r\u00e9sum\u00e9 des param\u00e8tres \u00e0 \u00e9diter pour pouvoir utiliser ces modules dans le cadre du Pong2DBT est fourni ci-dessous.","title":"Pr\u00e9sentation et utilisation des modules bluetooth RN42"},{"location":"bluetooth/#configuration-initiale-des-rn42","text":"Les modules doivent \u00eatre configur\u00e9s selon les crit\u00e8res suivants. Pour rappel, l'acc\u00e8s au mode configuration se fait en envoyant $$$ (115200 Baud pour un module neuf, 9600 Baud apr\u00e8s configuration), et les commandes sont ensuites valid\u00e9es avec un retour \u00e0 la ligne. Pour sortir, la commande est --- En mode configuration, la LED int\u00e9gr\u00e9e clignote rapidement. Pour la configuration, il faudra avoir recours \u00e0 un terminal s\u00e9rie sur un PC (par ex TeraTerm, en 115200 Baud). Le branchement au RN42 peut se faire soit par dongle UART, soit en utilisant la branche command-interface est une version suspendue du programme qui fait l'interface avec un terminal s\u00e9rie USB sur le PC et l'UART7 du STM32.","title":"Configuration initiale des RN42"},{"location":"bluetooth/#module-pour-la-carte-master","text":"9600 Baud SU,96 Mode Auto (3) SM,3 Adresse du Slave pr\u00e9-enregistr\u00e9e (registre R) IN5 (recherche des adresses environnantes) C,<addresse> (connexion et enregistrement \u00e0 l'adresse)","title":"Module pour la carte Master"},{"location":"bluetooth/#module-pour-la-carte-slave","text":"9600 Baud SU,96 Mode Slave (0) SM,0","title":"Module pour la carte Slave"},{"location":"bluetooth/#utilisation-dans-le-cadre-du-pong-2dbt","text":"Une fois la configuration initiale faite, les modules enregistrent celle-ci et le mode Auto permet d'initier la connexion automatiquement d\u00e8s leur alimentation. Attention, il faut cependant veiller \u00e0 brancher les bons modules sur la bonne carte. Un avantage de ce fonctionnement automatique est que les programmes faits peuvent \u00e0 la fois communiquer via les modules bluetooth ou directement en UART via c\u00e2bles, sans n\u00e9cessiter la moindre modification. Le sch\u00e9ma de c\u00e2blage sur l'UART7 depuis la carte de l'ENS se fait comme suit En cas de difficult\u00e9s avec les RN42, il est donc possible d'avoir recours au bon vieux mais fiable fil \u00e9lectrique.","title":"Utilisation dans le cadre du Pong 2DBT"},{"location":"prog/","text":"Fonctionnement des programmes Pour fonctionner sur deux cartes, nous avons choisi de d\u00e9velopper deux versions d'un m\u00eame programme : Master et Slave. Il conviendra de compiler l'un de chaque sur deux cartes diff\u00e9rentes pour pouvoir utiliser le Pong. Programme Master La carte qui se voit attribuer ce programme a pour responsabilit\u00e9 de g\u00e9rer le d\u00e9roulement du jeu, de transmettre les informations du jeu \u00e0 la carte slave et de recevoir des informations de cette derni\u00e8re. Elle est donc en charge de diriger la balle, et de g\u00e9rer les rebonds sur les raquettes. Son \u00e9cran affiche la partie gauche du terrain de jeu. Liste des t\u00e2ches LRacket Ball BgChanger Transmit HAL_UART_RxCpltCallback Lost LRacket Lit les valeurs renvoy\u00e9es par le joystick et pr\u00e9voit le mouvement de la raquette gauche Interaction Blackboard Lit sa position actuelle Ecrit sa nouvelle position Affiche la nouvelle position de la raquette et d\u00e9truit l'ancienne (Mutex pour l'\u00e9cran) Ball Met \u00e0 jour la position de la balle p\u00e9riodiquement Affiche la nouvelle position et d\u00e9truit la derni\u00e8re Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che G\u00e8re les collisions, les rebonds Interaction Blackboard Lit la position actuelle de la balle Ecrit la nouvelle position Change l'\u00e9tat de la variable perdu si la balle est perdue (game over) Lorsque la balle est perdue : Affiche un message de perte D\u00e9truit la t\u00e2che LRacket S'autod\u00e9truit BgChanger Attend une impulsion sur le bouton pour changer la couleur Transmit Envoie p\u00e9riodiquement les informations sur le jeu en UART/Bluetooth Coordonn\u00e9es de la balle, rayon de la balle Etat du jeu (perdu) HAL_UART_RxCpltCallback Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la raquette droite Lost Relance la balle sur appui du bouton apr\u00e8s avoir perdu (\u00e0 l'infini) Recr\u00e9e les t\u00e2ches Ball et LRacket pour cela Programme Slave La carte qui se voit attribuer ce programme doit recevoir les donn\u00e9es de jeu du Master pour afficher la partie relative \u00e0 son \u00e9cran, et doit envoyer au master la position de sa raquette. Son \u00e9cran affiche la partie droite du terrain de jeu Liste des t\u00e2ches RRacket BallDisplay BgChanger HAL_UART_RxCpltCallback RRacket Lit les valeurs renvoy\u00e9es par le joystick et pr\u00e9voit le mouvement de la raquette gauche Lecture du blackboard Envoie les informations sur la position de la raquette droite par UART \u00e0 chaque d\u00e9placement de la raquette BallDisplay Affiche la nouvelle position de la balle et d\u00e9truit l'ancienne p\u00e9riodiquement Lecture du blackboard Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che BgChanger Attend une impulsion sur le bouton pour changer la couleur HAL_UART_RxCpltCallback Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la balle Etat perdu Rayon de la balle","title":"Fonctionnement"},{"location":"prog/#fonctionnement-des-programmes","text":"Pour fonctionner sur deux cartes, nous avons choisi de d\u00e9velopper deux versions d'un m\u00eame programme : Master et Slave. Il conviendra de compiler l'un de chaque sur deux cartes diff\u00e9rentes pour pouvoir utiliser le Pong.","title":"Fonctionnement des programmes"},{"location":"prog/#programme-master","text":"La carte qui se voit attribuer ce programme a pour responsabilit\u00e9 de g\u00e9rer le d\u00e9roulement du jeu, de transmettre les informations du jeu \u00e0 la carte slave et de recevoir des informations de cette derni\u00e8re. Elle est donc en charge de diriger la balle, et de g\u00e9rer les rebonds sur les raquettes. Son \u00e9cran affiche la partie gauche du terrain de jeu.","title":"Programme Master"},{"location":"prog/#liste-des-taches","text":"LRacket Ball BgChanger Transmit HAL_UART_RxCpltCallback Lost","title":"Liste des t\u00e2ches"},{"location":"prog/#lracket","text":"Lit les valeurs renvoy\u00e9es par le joystick et pr\u00e9voit le mouvement de la raquette gauche Interaction Blackboard Lit sa position actuelle Ecrit sa nouvelle position Affiche la nouvelle position de la raquette et d\u00e9truit l'ancienne (Mutex pour l'\u00e9cran)","title":"LRacket"},{"location":"prog/#ball","text":"Met \u00e0 jour la position de la balle p\u00e9riodiquement Affiche la nouvelle position et d\u00e9truit la derni\u00e8re Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che G\u00e8re les collisions, les rebonds Interaction Blackboard Lit la position actuelle de la balle Ecrit la nouvelle position Change l'\u00e9tat de la variable perdu si la balle est perdue (game over) Lorsque la balle est perdue : Affiche un message de perte D\u00e9truit la t\u00e2che LRacket S'autod\u00e9truit","title":"Ball"},{"location":"prog/#bgchanger","text":"Attend une impulsion sur le bouton pour changer la couleur","title":"BgChanger"},{"location":"prog/#transmit","text":"Envoie p\u00e9riodiquement les informations sur le jeu en UART/Bluetooth Coordonn\u00e9es de la balle, rayon de la balle Etat du jeu (perdu)","title":"Transmit"},{"location":"prog/#hal_uart_rxcpltcallback","text":"Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la raquette droite","title":"HAL_UART_RxCpltCallback"},{"location":"prog/#lost","text":"Relance la balle sur appui du bouton apr\u00e8s avoir perdu (\u00e0 l'infini) Recr\u00e9e les t\u00e2ches Ball et LRacket pour cela","title":"Lost"},{"location":"prog/#programme-slave","text":"La carte qui se voit attribuer ce programme doit recevoir les donn\u00e9es de jeu du Master pour afficher la partie relative \u00e0 son \u00e9cran, et doit envoyer au master la position de sa raquette. Son \u00e9cran affiche la partie droite du terrain de jeu","title":"Programme Slave"},{"location":"prog/#liste-des-taches_1","text":"RRacket BallDisplay BgChanger HAL_UART_RxCpltCallback","title":"Liste des t\u00e2ches"},{"location":"prog/#rracket","text":"Lit les valeurs renvoy\u00e9es par le joystick et pr\u00e9voit le mouvement de la raquette gauche Lecture du blackboard Envoie les informations sur la position de la raquette droite par UART \u00e0 chaque d\u00e9placement de la raquette","title":"RRacket"},{"location":"prog/#balldisplay","text":"Affiche la nouvelle position de la balle et d\u00e9truit l'ancienne p\u00e9riodiquement Lecture du blackboard Si la balle est sur l'autre \u00e9cran, affichage d'une fl\u00e8che","title":"BallDisplay"},{"location":"prog/#bgchanger_1","text":"Attend une impulsion sur le bouton pour changer la couleur","title":"BgChanger"},{"location":"prog/#hal_uart_rxcpltcallback_1","text":"Re\u00e7oit par interruption les valeurs re\u00e7ues par l'UART7 et modifie le blackboard en cons\u00e9quence Position de la balle Etat perdu Rayon de la balle","title":"HAL_UART_RxCpltCallback"}]}

prog_Mini-projSlave.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000da7c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002018  0800dc4c  0800dc4c  0001dc4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fc64  0800fc64  00020058  2**0
                  CONTENTS
  4 .ARM          00000008  0800fc64  0800fc64  0001fc64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fc6c  0800fc6c  00020058  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fc6c  0800fc6c  0001fc6c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fc70  0800fc70  0001fc70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000058  20000000  0800fc74  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008c7c  20000058  0800fccc  00020058  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20008cd4  0800fccc  00028cd4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020058  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e42e  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005ac2  00000000  00000000  0004e4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000025d0  00000000  00000000  00053f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002348  00000000  00000000  00056548  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002dfb0  00000000  00000000  00058890  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002a1c7  00000000  00000000  00086840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00114863  00000000  00000000  000b0a07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001c526a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a028  00000000  00000000  001c52c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000058 	.word	0x20000058
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800dc34 	.word	0x0800dc34

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000005c 	.word	0x2000005c
 800020c:	0800dc34 	.word	0x0800dc34

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b96e 	b.w	8000504 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9d08      	ldr	r5, [sp, #32]
 8000246:	4604      	mov	r4, r0
 8000248:	468c      	mov	ip, r1
 800024a:	2b00      	cmp	r3, #0
 800024c:	f040 8083 	bne.w	8000356 <__udivmoddi4+0x116>
 8000250:	428a      	cmp	r2, r1
 8000252:	4617      	mov	r7, r2
 8000254:	d947      	bls.n	80002e6 <__udivmoddi4+0xa6>
 8000256:	fab2 f282 	clz	r2, r2
 800025a:	b142      	cbz	r2, 800026e <__udivmoddi4+0x2e>
 800025c:	f1c2 0020 	rsb	r0, r2, #32
 8000260:	fa24 f000 	lsr.w	r0, r4, r0
 8000264:	4091      	lsls	r1, r2
 8000266:	4097      	lsls	r7, r2
 8000268:	ea40 0c01 	orr.w	ip, r0, r1
 800026c:	4094      	lsls	r4, r2
 800026e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000272:	0c23      	lsrs	r3, r4, #16
 8000274:	fbbc f6f8 	udiv	r6, ip, r8
 8000278:	fa1f fe87 	uxth.w	lr, r7
 800027c:	fb08 c116 	mls	r1, r8, r6, ip
 8000280:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000284:	fb06 f10e 	mul.w	r1, r6, lr
 8000288:	4299      	cmp	r1, r3
 800028a:	d909      	bls.n	80002a0 <__udivmoddi4+0x60>
 800028c:	18fb      	adds	r3, r7, r3
 800028e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000292:	f080 8119 	bcs.w	80004c8 <__udivmoddi4+0x288>
 8000296:	4299      	cmp	r1, r3
 8000298:	f240 8116 	bls.w	80004c8 <__udivmoddi4+0x288>
 800029c:	3e02      	subs	r6, #2
 800029e:	443b      	add	r3, r7
 80002a0:	1a5b      	subs	r3, r3, r1
 80002a2:	b2a4      	uxth	r4, r4
 80002a4:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a8:	fb08 3310 	mls	r3, r8, r0, r3
 80002ac:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002b0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002b4:	45a6      	cmp	lr, r4
 80002b6:	d909      	bls.n	80002cc <__udivmoddi4+0x8c>
 80002b8:	193c      	adds	r4, r7, r4
 80002ba:	f100 33ff 	add.w	r3, r0, #4294967295
 80002be:	f080 8105 	bcs.w	80004cc <__udivmoddi4+0x28c>
 80002c2:	45a6      	cmp	lr, r4
 80002c4:	f240 8102 	bls.w	80004cc <__udivmoddi4+0x28c>
 80002c8:	3802      	subs	r0, #2
 80002ca:	443c      	add	r4, r7
 80002cc:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002d0:	eba4 040e 	sub.w	r4, r4, lr
 80002d4:	2600      	movs	r6, #0
 80002d6:	b11d      	cbz	r5, 80002e0 <__udivmoddi4+0xa0>
 80002d8:	40d4      	lsrs	r4, r2
 80002da:	2300      	movs	r3, #0
 80002dc:	e9c5 4300 	strd	r4, r3, [r5]
 80002e0:	4631      	mov	r1, r6
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	b902      	cbnz	r2, 80002ea <__udivmoddi4+0xaa>
 80002e8:	deff      	udf	#255	; 0xff
 80002ea:	fab2 f282 	clz	r2, r2
 80002ee:	2a00      	cmp	r2, #0
 80002f0:	d150      	bne.n	8000394 <__udivmoddi4+0x154>
 80002f2:	1bcb      	subs	r3, r1, r7
 80002f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f8:	fa1f f887 	uxth.w	r8, r7
 80002fc:	2601      	movs	r6, #1
 80002fe:	fbb3 fcfe 	udiv	ip, r3, lr
 8000302:	0c21      	lsrs	r1, r4, #16
 8000304:	fb0e 331c 	mls	r3, lr, ip, r3
 8000308:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800030c:	fb08 f30c 	mul.w	r3, r8, ip
 8000310:	428b      	cmp	r3, r1
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0xe4>
 8000314:	1879      	adds	r1, r7, r1
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0xe2>
 800031c:	428b      	cmp	r3, r1
 800031e:	f200 80e9 	bhi.w	80004f4 <__udivmoddi4+0x2b4>
 8000322:	4684      	mov	ip, r0
 8000324:	1ac9      	subs	r1, r1, r3
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1110 	mls	r1, lr, r0, r1
 8000330:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x10c>
 800033c:	193c      	adds	r4, r7, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x10a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80d9 	bhi.w	80004fc <__udivmoddi4+0x2bc>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e7bf      	b.n	80002d6 <__udivmoddi4+0x96>
 8000356:	428b      	cmp	r3, r1
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x12e>
 800035a:	2d00      	cmp	r5, #0
 800035c:	f000 80b1 	beq.w	80004c2 <__udivmoddi4+0x282>
 8000360:	2600      	movs	r6, #0
 8000362:	e9c5 0100 	strd	r0, r1, [r5]
 8000366:	4630      	mov	r0, r6
 8000368:	4631      	mov	r1, r6
 800036a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036e:	fab3 f683 	clz	r6, r3
 8000372:	2e00      	cmp	r6, #0
 8000374:	d14a      	bne.n	800040c <__udivmoddi4+0x1cc>
 8000376:	428b      	cmp	r3, r1
 8000378:	d302      	bcc.n	8000380 <__udivmoddi4+0x140>
 800037a:	4282      	cmp	r2, r0
 800037c:	f200 80b8 	bhi.w	80004f0 <__udivmoddi4+0x2b0>
 8000380:	1a84      	subs	r4, r0, r2
 8000382:	eb61 0103 	sbc.w	r1, r1, r3
 8000386:	2001      	movs	r0, #1
 8000388:	468c      	mov	ip, r1
 800038a:	2d00      	cmp	r5, #0
 800038c:	d0a8      	beq.n	80002e0 <__udivmoddi4+0xa0>
 800038e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0xa0>
 8000394:	f1c2 0320 	rsb	r3, r2, #32
 8000398:	fa20 f603 	lsr.w	r6, r0, r3
 800039c:	4097      	lsls	r7, r2
 800039e:	fa01 f002 	lsl.w	r0, r1, r2
 80003a2:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a6:	40d9      	lsrs	r1, r3
 80003a8:	4330      	orrs	r0, r6
 80003aa:	0c03      	lsrs	r3, r0, #16
 80003ac:	fbb1 f6fe 	udiv	r6, r1, lr
 80003b0:	fa1f f887 	uxth.w	r8, r7
 80003b4:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b8:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003bc:	fb06 f108 	mul.w	r1, r6, r8
 80003c0:	4299      	cmp	r1, r3
 80003c2:	fa04 f402 	lsl.w	r4, r4, r2
 80003c6:	d909      	bls.n	80003dc <__udivmoddi4+0x19c>
 80003c8:	18fb      	adds	r3, r7, r3
 80003ca:	f106 3cff 	add.w	ip, r6, #4294967295
 80003ce:	f080 808d 	bcs.w	80004ec <__udivmoddi4+0x2ac>
 80003d2:	4299      	cmp	r1, r3
 80003d4:	f240 808a 	bls.w	80004ec <__udivmoddi4+0x2ac>
 80003d8:	3e02      	subs	r6, #2
 80003da:	443b      	add	r3, r7
 80003dc:	1a5b      	subs	r3, r3, r1
 80003de:	b281      	uxth	r1, r0
 80003e0:	fbb3 f0fe 	udiv	r0, r3, lr
 80003e4:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003ec:	fb00 f308 	mul.w	r3, r0, r8
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x1c4>
 80003f4:	1879      	adds	r1, r7, r1
 80003f6:	f100 3cff 	add.w	ip, r0, #4294967295
 80003fa:	d273      	bcs.n	80004e4 <__udivmoddi4+0x2a4>
 80003fc:	428b      	cmp	r3, r1
 80003fe:	d971      	bls.n	80004e4 <__udivmoddi4+0x2a4>
 8000400:	3802      	subs	r0, #2
 8000402:	4439      	add	r1, r7
 8000404:	1acb      	subs	r3, r1, r3
 8000406:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800040a:	e778      	b.n	80002fe <__udivmoddi4+0xbe>
 800040c:	f1c6 0c20 	rsb	ip, r6, #32
 8000410:	fa03 f406 	lsl.w	r4, r3, r6
 8000414:	fa22 f30c 	lsr.w	r3, r2, ip
 8000418:	431c      	orrs	r4, r3
 800041a:	fa20 f70c 	lsr.w	r7, r0, ip
 800041e:	fa01 f306 	lsl.w	r3, r1, r6
 8000422:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000426:	fa21 f10c 	lsr.w	r1, r1, ip
 800042a:	431f      	orrs	r7, r3
 800042c:	0c3b      	lsrs	r3, r7, #16
 800042e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000432:	fa1f f884 	uxth.w	r8, r4
 8000436:	fb0e 1119 	mls	r1, lr, r9, r1
 800043a:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800043e:	fb09 fa08 	mul.w	sl, r9, r8
 8000442:	458a      	cmp	sl, r1
 8000444:	fa02 f206 	lsl.w	r2, r2, r6
 8000448:	fa00 f306 	lsl.w	r3, r0, r6
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x220>
 800044e:	1861      	adds	r1, r4, r1
 8000450:	f109 30ff 	add.w	r0, r9, #4294967295
 8000454:	d248      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 8000456:	458a      	cmp	sl, r1
 8000458:	d946      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 800045a:	f1a9 0902 	sub.w	r9, r9, #2
 800045e:	4421      	add	r1, r4
 8000460:	eba1 010a 	sub.w	r1, r1, sl
 8000464:	b2bf      	uxth	r7, r7
 8000466:	fbb1 f0fe 	udiv	r0, r1, lr
 800046a:	fb0e 1110 	mls	r1, lr, r0, r1
 800046e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000472:	fb00 f808 	mul.w	r8, r0, r8
 8000476:	45b8      	cmp	r8, r7
 8000478:	d907      	bls.n	800048a <__udivmoddi4+0x24a>
 800047a:	19e7      	adds	r7, r4, r7
 800047c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000480:	d22e      	bcs.n	80004e0 <__udivmoddi4+0x2a0>
 8000482:	45b8      	cmp	r8, r7
 8000484:	d92c      	bls.n	80004e0 <__udivmoddi4+0x2a0>
 8000486:	3802      	subs	r0, #2
 8000488:	4427      	add	r7, r4
 800048a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800048e:	eba7 0708 	sub.w	r7, r7, r8
 8000492:	fba0 8902 	umull	r8, r9, r0, r2
 8000496:	454f      	cmp	r7, r9
 8000498:	46c6      	mov	lr, r8
 800049a:	4649      	mov	r1, r9
 800049c:	d31a      	bcc.n	80004d4 <__udivmoddi4+0x294>
 800049e:	d017      	beq.n	80004d0 <__udivmoddi4+0x290>
 80004a0:	b15d      	cbz	r5, 80004ba <__udivmoddi4+0x27a>
 80004a2:	ebb3 020e 	subs.w	r2, r3, lr
 80004a6:	eb67 0701 	sbc.w	r7, r7, r1
 80004aa:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004ae:	40f2      	lsrs	r2, r6
 80004b0:	ea4c 0202 	orr.w	r2, ip, r2
 80004b4:	40f7      	lsrs	r7, r6
 80004b6:	e9c5 2700 	strd	r2, r7, [r5]
 80004ba:	2600      	movs	r6, #0
 80004bc:	4631      	mov	r1, r6
 80004be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c2:	462e      	mov	r6, r5
 80004c4:	4628      	mov	r0, r5
 80004c6:	e70b      	b.n	80002e0 <__udivmoddi4+0xa0>
 80004c8:	4606      	mov	r6, r0
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0x60>
 80004cc:	4618      	mov	r0, r3
 80004ce:	e6fd      	b.n	80002cc <__udivmoddi4+0x8c>
 80004d0:	4543      	cmp	r3, r8
 80004d2:	d2e5      	bcs.n	80004a0 <__udivmoddi4+0x260>
 80004d4:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d8:	eb69 0104 	sbc.w	r1, r9, r4
 80004dc:	3801      	subs	r0, #1
 80004de:	e7df      	b.n	80004a0 <__udivmoddi4+0x260>
 80004e0:	4608      	mov	r0, r1
 80004e2:	e7d2      	b.n	800048a <__udivmoddi4+0x24a>
 80004e4:	4660      	mov	r0, ip
 80004e6:	e78d      	b.n	8000404 <__udivmoddi4+0x1c4>
 80004e8:	4681      	mov	r9, r0
 80004ea:	e7b9      	b.n	8000460 <__udivmoddi4+0x220>
 80004ec:	4666      	mov	r6, ip
 80004ee:	e775      	b.n	80003dc <__udivmoddi4+0x19c>
 80004f0:	4630      	mov	r0, r6
 80004f2:	e74a      	b.n	800038a <__udivmoddi4+0x14a>
 80004f4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f8:	4439      	add	r1, r7
 80004fa:	e713      	b.n	8000324 <__udivmoddi4+0xe4>
 80004fc:	3802      	subs	r0, #2
 80004fe:	443c      	add	r4, r7
 8000500:	e724      	b.n	800034c <__udivmoddi4+0x10c>
 8000502:	bf00      	nop

08000504 <__aeabi_idiv0>:
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop

08000508 <vApplicationIdleHook>:
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);
void vApplicationMallocFailedHook(void);

/* USER CODE BEGIN 2 */
__weak void vApplicationIdleHook( void )
{
 8000508:	b480      	push	{r7}
 800050a:	af00      	add	r7, sp, #0
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
}
 800050c:	bf00      	nop
 800050e:	46bd      	mov	sp, r7
 8000510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000514:	4770      	bx	lr

08000516 <vApplicationStackOverflowHook>:
/* USER CODE END 2 */

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 8000516:	b480      	push	{r7}
 8000518:	b083      	sub	sp, #12
 800051a:	af00      	add	r7, sp, #0
 800051c:	6078      	str	r0, [r7, #4]
 800051e:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr

0800052c <vApplicationMallocFailedHook>:
/* USER CODE END 4 */

/* USER CODE BEGIN 5 */
__weak void vApplicationMallocFailedHook(void)
{
 800052c:	b480      	push	{r7}
 800052e:	af00      	add	r7, sp, #0
   demo application. If heap_1.c or heap_2.c are used, then the size of the
   heap available to pvPortMalloc() is defined by configTOTAL_HEAP_SIZE in
   FreeRTOSConfig.h, and the xPortGetFreeHeapSize() API function can be used
   to query the size of free heap space that remains (although it does not
   provide information on how the remaining heap might be fragmented). */
}
 8000530:	bf00      	nop
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr
	...

0800053c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800053c:	b480      	push	{r7}
 800053e:	b085      	sub	sp, #20
 8000540:	af00      	add	r7, sp, #0
 8000542:	60f8      	str	r0, [r7, #12]
 8000544:	60b9      	str	r1, [r7, #8]
 8000546:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000548:	68fb      	ldr	r3, [r7, #12]
 800054a:	4a07      	ldr	r2, [pc, #28]	; (8000568 <vApplicationGetIdleTaskMemory+0x2c>)
 800054c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800054e:	68bb      	ldr	r3, [r7, #8]
 8000550:	4a06      	ldr	r2, [pc, #24]	; (800056c <vApplicationGetIdleTaskMemory+0x30>)
 8000552:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800055a:	bf00      	nop
 800055c:	3714      	adds	r7, #20
 800055e:	46bd      	mov	sp, r7
 8000560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000564:	4770      	bx	lr
 8000566:	bf00      	nop
 8000568:	20000074 	.word	0x20000074
 800056c:	200000cc 	.word	0x200000cc

08000570 <ft5336_Init>:
  *         from MCU to FT5336 : ie I2C channel initialization (if required).
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Init(uint16_t DeviceAddr)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b082      	sub	sp, #8
 8000574:	af00      	add	r7, sp, #0
 8000576:	4603      	mov	r3, r0
 8000578:	80fb      	strh	r3, [r7, #6]
  /* Wait at least 200ms after power up before accessing registers
   * Trsi timing (Time of starting to report point after resetting) from FT5336GQQ datasheet */
  TS_IO_Delay(200);
 800057a:	20c8      	movs	r0, #200	; 0xc8
 800057c:	f001 ffc4 	bl	8002508 <TS_IO_Delay>

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 8000580:	f000 f9b4 	bl	80008ec <ft5336_I2C_InitializeIfRequired>
}
 8000584:	bf00      	nop
 8000586:	3708      	adds	r7, #8
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <ft5336_Reset>:
  *         @note : Not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_Reset(uint16_t DeviceAddr)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	4603      	mov	r3, r0
 8000594:	80fb      	strh	r3, [r7, #6]
  /* Do nothing */
  /* No software reset sequence available in FT5336 IC */
}
 8000596:	bf00      	nop
 8000598:	370c      	adds	r7, #12
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <ft5336_ReadID>:
  *         able to read the FT5336 device ID, and verify this is a FT5336.
  * @param  DeviceAddr: I2C FT5336 Slave address.
  * @retval The Device ID (two bytes).
  */
uint16_t ft5336_ReadID(uint16_t DeviceAddr)
{
 80005a2:	b580      	push	{r7, lr}
 80005a4:	b084      	sub	sp, #16
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	4603      	mov	r3, r0
 80005aa:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t ucReadId = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	737b      	strb	r3, [r7, #13]
  uint8_t nbReadAttempts = 0;
 80005b0:	2300      	movs	r3, #0
 80005b2:	73fb      	strb	r3, [r7, #15]
  uint8_t bFoundDevice = 0; /* Device not found by default */
 80005b4:	2300      	movs	r3, #0
 80005b6:	73bb      	strb	r3, [r7, #14]

  /* Initialize I2C link if needed */
  ft5336_I2C_InitializeIfRequired();
 80005b8:	f000 f998 	bl	80008ec <ft5336_I2C_InitializeIfRequired>

  /* At maximum 4 attempts to read ID : exit at first finding of the searched device ID */
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005bc:	2300      	movs	r3, #0
 80005be:	73fb      	strb	r3, [r7, #15]
 80005c0:	e010      	b.n	80005e4 <ft5336_ReadID+0x42>
  {
    /* Read register FT5336_CHIP_ID_REG as DeviceID detection */
    ucReadId = TS_IO_Read(DeviceAddr, FT5336_CHIP_ID_REG);
 80005c2:	88fb      	ldrh	r3, [r7, #6]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	21a8      	movs	r1, #168	; 0xa8
 80005c8:	4618      	mov	r0, r3
 80005ca:	f001 ff7f 	bl	80024cc <TS_IO_Read>
 80005ce:	4603      	mov	r3, r0
 80005d0:	737b      	strb	r3, [r7, #13]

    /* Found the searched device ID ? */
    if(ucReadId == FT5336_ID_VALUE)
 80005d2:	7b7b      	ldrb	r3, [r7, #13]
 80005d4:	b2db      	uxtb	r3, r3
 80005d6:	2b51      	cmp	r3, #81	; 0x51
 80005d8:	d101      	bne.n	80005de <ft5336_ReadID+0x3c>
    {
      /* Set device as found */
      bFoundDevice = 1;
 80005da:	2301      	movs	r3, #1
 80005dc:	73bb      	strb	r3, [r7, #14]
  for(nbReadAttempts = 0; ((nbReadAttempts < 3) && !(bFoundDevice)); nbReadAttempts++)
 80005de:	7bfb      	ldrb	r3, [r7, #15]
 80005e0:	3301      	adds	r3, #1
 80005e2:	73fb      	strb	r3, [r7, #15]
 80005e4:	7bfb      	ldrb	r3, [r7, #15]
 80005e6:	2b02      	cmp	r3, #2
 80005e8:	d802      	bhi.n	80005f0 <ft5336_ReadID+0x4e>
 80005ea:	7bbb      	ldrb	r3, [r7, #14]
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0e8      	beq.n	80005c2 <ft5336_ReadID+0x20>
    }
  }

  /* Return the device ID value */
  return (ucReadId);
 80005f0:	7b7b      	ldrb	r3, [r7, #13]
 80005f2:	b2db      	uxtb	r3, r3
 80005f4:	b29b      	uxth	r3, r3
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <ft5336_TS_Start>:
  * @brief  Configures the touch Screen IC device to start detecting touches
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address).
  * @retval None.
  */
void ft5336_TS_Start(uint16_t DeviceAddr)
{
 80005fe:	b580      	push	{r7, lr}
 8000600:	b082      	sub	sp, #8
 8000602:	af00      	add	r7, sp, #0
 8000604:	4603      	mov	r3, r0
 8000606:	80fb      	strh	r3, [r7, #6]
  /* Minimum static configuration of FT5336 */
  FT5336_ASSERT(ft5336_TS_Configure(DeviceAddr));
 8000608:	88fb      	ldrh	r3, [r7, #6]
 800060a:	4618      	mov	r0, r3
 800060c:	f000 f97e 	bl	800090c <ft5336_TS_Configure>

  /* By default set FT5336 IC in Polling mode : no INT generation on FT5336 for new touch available */
  /* Note TS_INT is active low                                                                      */
  ft5336_TS_DisableIT(DeviceAddr);
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4618      	mov	r0, r3
 8000614:	f000 f932 	bl	800087c <ft5336_TS_DisableIT>
}
 8000618:	bf00      	nop
 800061a:	3708      	adds	r7, #8
 800061c:	46bd      	mov	sp, r7
 800061e:	bd80      	pop	{r7, pc}

08000620 <ft5336_TS_DetectTouch>:
  *         variables).
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval : Number of active touches detected (can be 0, 1 or 2).
  */
uint8_t ft5336_TS_DetectTouch(uint16_t DeviceAddr)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b084      	sub	sp, #16
 8000624:	af00      	add	r7, sp, #0
 8000626:	4603      	mov	r3, r0
 8000628:	80fb      	strh	r3, [r7, #6]
  volatile uint8_t nbTouch = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	73fb      	strb	r3, [r7, #15]

  /* Read register FT5336_TD_STAT_REG to check number of touches detection */
  nbTouch = TS_IO_Read(DeviceAddr, FT5336_TD_STAT_REG);
 800062e:	88fb      	ldrh	r3, [r7, #6]
 8000630:	b2db      	uxtb	r3, r3
 8000632:	2102      	movs	r1, #2
 8000634:	4618      	mov	r0, r3
 8000636:	f001 ff49 	bl	80024cc <TS_IO_Read>
 800063a:	4603      	mov	r3, r0
 800063c:	73fb      	strb	r3, [r7, #15]
  nbTouch &= FT5336_TD_STAT_MASK;
 800063e:	7bfb      	ldrb	r3, [r7, #15]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	f003 030f 	and.w	r3, r3, #15
 8000646:	b2db      	uxtb	r3, r3
 8000648:	73fb      	strb	r3, [r7, #15]

  if(nbTouch > FT5336_MAX_DETECTABLE_TOUCH)
 800064a:	7bfb      	ldrb	r3, [r7, #15]
 800064c:	b2db      	uxtb	r3, r3
 800064e:	2b05      	cmp	r3, #5
 8000650:	d901      	bls.n	8000656 <ft5336_TS_DetectTouch+0x36>
  {
    /* If invalid number of touch detected, set it to zero */
    nbTouch = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]
  }

  /* Update ft5336 driver internal global : current number of active touches */
  ft5336_handle.currActiveTouchNb = nbTouch;
 8000656:	7bfb      	ldrb	r3, [r7, #15]
 8000658:	b2da      	uxtb	r2, r3
 800065a:	4b05      	ldr	r3, [pc, #20]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 800065c:	705a      	strb	r2, [r3, #1]

  /* Reset current active touch index on which to work on */
  ft5336_handle.currActiveTouchIdx = 0;
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <ft5336_TS_DetectTouch+0x50>)
 8000660:	2200      	movs	r2, #0
 8000662:	709a      	strb	r2, [r3, #2]

  return(nbTouch);
 8000664:	7bfb      	ldrb	r3, [r7, #15]
 8000666:	b2db      	uxtb	r3, r3
}
 8000668:	4618      	mov	r0, r3
 800066a:	3710      	adds	r7, #16
 800066c:	46bd      	mov	sp, r7
 800066e:	bd80      	pop	{r7, pc}
 8000670:	200002cc 	.word	0x200002cc

08000674 <ft5336_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value
  * @retval None.
  */
void ft5336_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b086      	sub	sp, #24
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	60b9      	str	r1, [r7, #8]
 800067e:	607a      	str	r2, [r7, #4]
 8000680:	81fb      	strh	r3, [r7, #14]
  volatile uint8_t ucReadData = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	74fb      	strb	r3, [r7, #19]
  static uint16_t coord;
  uint8_t regAddressXLow = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	75fb      	strb	r3, [r7, #23]
  uint8_t regAddressXHigh = 0;
 800068a:	2300      	movs	r3, #0
 800068c:	75bb      	strb	r3, [r7, #22]
  uint8_t regAddressYLow = 0;
 800068e:	2300      	movs	r3, #0
 8000690:	757b      	strb	r3, [r7, #21]
  uint8_t regAddressYHigh = 0;
 8000692:	2300      	movs	r3, #0
 8000694:	753b      	strb	r3, [r7, #20]

  if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb)
 8000696:	4b6d      	ldr	r3, [pc, #436]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000698:	789a      	ldrb	r2, [r3, #2]
 800069a:	4b6c      	ldr	r3, [pc, #432]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 800069c:	785b      	ldrb	r3, [r3, #1]
 800069e:	429a      	cmp	r2, r3
 80006a0:	f080 80cf 	bcs.w	8000842 <ft5336_TS_GetXY+0x1ce>
  {
    switch(ft5336_handle.currActiveTouchIdx)
 80006a4:	4b69      	ldr	r3, [pc, #420]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 80006a6:	789b      	ldrb	r3, [r3, #2]
 80006a8:	2b09      	cmp	r3, #9
 80006aa:	d871      	bhi.n	8000790 <ft5336_TS_GetXY+0x11c>
 80006ac:	a201      	add	r2, pc, #4	; (adr r2, 80006b4 <ft5336_TS_GetXY+0x40>)
 80006ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006b2:	bf00      	nop
 80006b4:	080006dd 	.word	0x080006dd
 80006b8:	080006ef 	.word	0x080006ef
 80006bc:	08000701 	.word	0x08000701
 80006c0:	08000713 	.word	0x08000713
 80006c4:	08000725 	.word	0x08000725
 80006c8:	08000737 	.word	0x08000737
 80006cc:	08000749 	.word	0x08000749
 80006d0:	0800075b 	.word	0x0800075b
 80006d4:	0800076d 	.word	0x0800076d
 80006d8:	0800077f 	.word	0x0800077f
    {
    case 0 :
      regAddressXLow  = FT5336_P1_XL_REG;
 80006dc:	2304      	movs	r3, #4
 80006de:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P1_XH_REG;
 80006e0:	2303      	movs	r3, #3
 80006e2:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P1_YL_REG;
 80006e4:	2306      	movs	r3, #6
 80006e6:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P1_YH_REG;
 80006e8:	2305      	movs	r3, #5
 80006ea:	753b      	strb	r3, [r7, #20]
      break;
 80006ec:	e051      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 1 :
      regAddressXLow  = FT5336_P2_XL_REG;
 80006ee:	230a      	movs	r3, #10
 80006f0:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P2_XH_REG;
 80006f2:	2309      	movs	r3, #9
 80006f4:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P2_YL_REG;
 80006f6:	230c      	movs	r3, #12
 80006f8:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P2_YH_REG;
 80006fa:	230b      	movs	r3, #11
 80006fc:	753b      	strb	r3, [r7, #20]
      break;
 80006fe:	e048      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 2 :
      regAddressXLow  = FT5336_P3_XL_REG;
 8000700:	2310      	movs	r3, #16
 8000702:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P3_XH_REG;
 8000704:	230f      	movs	r3, #15
 8000706:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P3_YL_REG;
 8000708:	2312      	movs	r3, #18
 800070a:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P3_YH_REG;
 800070c:	2311      	movs	r3, #17
 800070e:	753b      	strb	r3, [r7, #20]
      break;
 8000710:	e03f      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 3 :
      regAddressXLow  = FT5336_P4_XL_REG;
 8000712:	2316      	movs	r3, #22
 8000714:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P4_XH_REG;
 8000716:	2315      	movs	r3, #21
 8000718:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P4_YL_REG;
 800071a:	2318      	movs	r3, #24
 800071c:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P4_YH_REG;
 800071e:	2317      	movs	r3, #23
 8000720:	753b      	strb	r3, [r7, #20]
      break;
 8000722:	e036      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 4 :
      regAddressXLow  = FT5336_P5_XL_REG;
 8000724:	231c      	movs	r3, #28
 8000726:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P5_XH_REG;
 8000728:	231b      	movs	r3, #27
 800072a:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P5_YL_REG;
 800072c:	231e      	movs	r3, #30
 800072e:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P5_YH_REG;
 8000730:	231d      	movs	r3, #29
 8000732:	753b      	strb	r3, [r7, #20]
      break;
 8000734:	e02d      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 5 :
      regAddressXLow  = FT5336_P6_XL_REG;
 8000736:	2322      	movs	r3, #34	; 0x22
 8000738:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P6_XH_REG;
 800073a:	2321      	movs	r3, #33	; 0x21
 800073c:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P6_YL_REG;
 800073e:	2324      	movs	r3, #36	; 0x24
 8000740:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P6_YH_REG;
 8000742:	2323      	movs	r3, #35	; 0x23
 8000744:	753b      	strb	r3, [r7, #20]
      break;
 8000746:	e024      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 6 :
      regAddressXLow  = FT5336_P7_XL_REG;
 8000748:	2328      	movs	r3, #40	; 0x28
 800074a:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P7_XH_REG;
 800074c:	2327      	movs	r3, #39	; 0x27
 800074e:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P7_YL_REG;
 8000750:	232a      	movs	r3, #42	; 0x2a
 8000752:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P7_YH_REG;
 8000754:	2329      	movs	r3, #41	; 0x29
 8000756:	753b      	strb	r3, [r7, #20]
      break;
 8000758:	e01b      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 7 :
      regAddressXLow  = FT5336_P8_XL_REG;
 800075a:	232e      	movs	r3, #46	; 0x2e
 800075c:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P8_XH_REG;
 800075e:	232d      	movs	r3, #45	; 0x2d
 8000760:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P8_YL_REG;
 8000762:	2330      	movs	r3, #48	; 0x30
 8000764:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P8_YH_REG;
 8000766:	232f      	movs	r3, #47	; 0x2f
 8000768:	753b      	strb	r3, [r7, #20]
      break;
 800076a:	e012      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 8 :
      regAddressXLow  = FT5336_P9_XL_REG;
 800076c:	2334      	movs	r3, #52	; 0x34
 800076e:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P9_XH_REG;
 8000770:	2333      	movs	r3, #51	; 0x33
 8000772:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P9_YL_REG;
 8000774:	2336      	movs	r3, #54	; 0x36
 8000776:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P9_YH_REG;
 8000778:	2335      	movs	r3, #53	; 0x35
 800077a:	753b      	strb	r3, [r7, #20]
      break;
 800077c:	e009      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    case 9 :
      regAddressXLow  = FT5336_P10_XL_REG;
 800077e:	233a      	movs	r3, #58	; 0x3a
 8000780:	75fb      	strb	r3, [r7, #23]
      regAddressXHigh = FT5336_P10_XH_REG;
 8000782:	2339      	movs	r3, #57	; 0x39
 8000784:	75bb      	strb	r3, [r7, #22]
      regAddressYLow  = FT5336_P10_YL_REG;
 8000786:	233c      	movs	r3, #60	; 0x3c
 8000788:	757b      	strb	r3, [r7, #21]
      regAddressYHigh = FT5336_P10_YH_REG;
 800078a:	233b      	movs	r3, #59	; 0x3b
 800078c:	753b      	strb	r3, [r7, #20]
      break;
 800078e:	e000      	b.n	8000792 <ft5336_TS_GetXY+0x11e>

    default :
      break;
 8000790:	bf00      	nop

    } /* end switch(ft5336_handle.currActiveTouchIdx) */

    /* Read low part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXLow);
 8000792:	89fb      	ldrh	r3, [r7, #14]
 8000794:	b2db      	uxtb	r3, r3
 8000796:	7dfa      	ldrb	r2, [r7, #23]
 8000798:	4611      	mov	r1, r2
 800079a:	4618      	mov	r0, r3
 800079c:	f001 fe96 	bl	80024cc <TS_IO_Read>
 80007a0:	4603      	mov	r3, r0
 80007a2:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007a4:	7cfb      	ldrb	r3, [r7, #19]
 80007a6:	b2db      	uxtb	r3, r3
 80007a8:	b29a      	uxth	r2, r3
 80007aa:	4b29      	ldr	r3, [pc, #164]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ac:	801a      	strh	r2, [r3, #0]

    /* Read high part of X position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressXHigh);
 80007ae:	89fb      	ldrh	r3, [r7, #14]
 80007b0:	b2db      	uxtb	r3, r3
 80007b2:	7dba      	ldrb	r2, [r7, #22]
 80007b4:	4611      	mov	r1, r2
 80007b6:	4618      	mov	r0, r3
 80007b8:	f001 fe88 	bl	80024cc <TS_IO_Read>
 80007bc:	4603      	mov	r3, r0
 80007be:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 80007c0:	7cfb      	ldrb	r3, [r7, #19]
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	021b      	lsls	r3, r3, #8
 80007c6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80007ca:	b21a      	sxth	r2, r3
 80007cc:	4b20      	ldr	r3, [pc, #128]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007ce:	881b      	ldrh	r3, [r3, #0]
 80007d0:	b21b      	sxth	r3, r3
 80007d2:	4313      	orrs	r3, r2
 80007d4:	b21b      	sxth	r3, r3
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007da:	801a      	strh	r2, [r3, #0]

    /* Send back ready X position to caller */
    *X = coord;
 80007dc:	4b1c      	ldr	r3, [pc, #112]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007de:	881a      	ldrh	r2, [r3, #0]
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	801a      	strh	r2, [r3, #0]

    /* Read low part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYLow);
 80007e4:	89fb      	ldrh	r3, [r7, #14]
 80007e6:	b2db      	uxtb	r3, r3
 80007e8:	7d7a      	ldrb	r2, [r7, #21]
 80007ea:	4611      	mov	r1, r2
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fe6d 	bl	80024cc <TS_IO_Read>
 80007f2:	4603      	mov	r3, r0
 80007f4:	74fb      	strb	r3, [r7, #19]
    coord = (ucReadData & FT5336_TOUCH_POS_LSB_MASK) >> FT5336_TOUCH_POS_LSB_SHIFT;
 80007f6:	7cfb      	ldrb	r3, [r7, #19]
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	b29a      	uxth	r2, r3
 80007fc:	4b14      	ldr	r3, [pc, #80]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 80007fe:	801a      	strh	r2, [r3, #0]

    /* Read high part of Y position */
    ucReadData = TS_IO_Read(DeviceAddr, regAddressYHigh);
 8000800:	89fb      	ldrh	r3, [r7, #14]
 8000802:	b2db      	uxtb	r3, r3
 8000804:	7d3a      	ldrb	r2, [r7, #20]
 8000806:	4611      	mov	r1, r2
 8000808:	4618      	mov	r0, r3
 800080a:	f001 fe5f 	bl	80024cc <TS_IO_Read>
 800080e:	4603      	mov	r3, r0
 8000810:	74fb      	strb	r3, [r7, #19]
    coord |= ((ucReadData & FT5336_TOUCH_POS_MSB_MASK) >> FT5336_TOUCH_POS_MSB_SHIFT) << 8;
 8000812:	7cfb      	ldrb	r3, [r7, #19]
 8000814:	b2db      	uxtb	r3, r3
 8000816:	021b      	lsls	r3, r3, #8
 8000818:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800081c:	b21a      	sxth	r2, r3
 800081e:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000820:	881b      	ldrh	r3, [r3, #0]
 8000822:	b21b      	sxth	r3, r3
 8000824:	4313      	orrs	r3, r2
 8000826:	b21b      	sxth	r3, r3
 8000828:	b29a      	uxth	r2, r3
 800082a:	4b09      	ldr	r3, [pc, #36]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 800082c:	801a      	strh	r2, [r3, #0]

    /* Send back ready Y position to caller */
    *Y = coord;
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <ft5336_TS_GetXY+0x1dc>)
 8000830:	881a      	ldrh	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	801a      	strh	r2, [r3, #0]

    ft5336_handle.currActiveTouchIdx++; /* next call will work on next touch */
 8000836:	4b05      	ldr	r3, [pc, #20]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000838:	789b      	ldrb	r3, [r3, #2]
 800083a:	3301      	adds	r3, #1
 800083c:	b2da      	uxtb	r2, r3
 800083e:	4b03      	ldr	r3, [pc, #12]	; (800084c <ft5336_TS_GetXY+0x1d8>)
 8000840:	709a      	strb	r2, [r3, #2]

  } /* of if(ft5336_handle.currActiveTouchIdx < ft5336_handle.currActiveTouchNb) */
}
 8000842:	bf00      	nop
 8000844:	3718      	adds	r7, #24
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	200002cc 	.word	0x200002cc
 8000850:	200002d0 	.word	0x200002d0

08000854 <ft5336_TS_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_EnableIT(uint16_t DeviceAddr)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b084      	sub	sp, #16
 8000858:	af00      	add	r7, sp, #0
 800085a:	4603      	mov	r3, r0
 800085c:	80fb      	strh	r3, [r7, #6]
   uint8_t regValue = 0;
 800085e:	2300      	movs	r3, #0
 8000860:	73fb      	strb	r3, [r7, #15]
   regValue = (FT5336_G_MODE_INTERRUPT_TRIGGER & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 8000862:	2301      	movs	r3, #1
 8000864:	73fb      	strb	r3, [r7, #15]

   /* Set interrupt trigger mode in FT5336_GMODE_REG */
   TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 8000866:	88fb      	ldrh	r3, [r7, #6]
 8000868:	b2db      	uxtb	r3, r3
 800086a:	7bfa      	ldrb	r2, [r7, #15]
 800086c:	21a4      	movs	r1, #164	; 0xa4
 800086e:	4618      	mov	r0, r3
 8000870:	f001 fe12 	bl	8002498 <TS_IO_Write>
}
 8000874:	bf00      	nop
 8000876:	3710      	adds	r7, #16
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <ft5336_TS_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  DeviceAddr: Device address on communication Bus (Slave I2C address of FT5336).
  * @retval None
  */
void ft5336_TS_DisableIT(uint16_t DeviceAddr)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af00      	add	r7, sp, #0
 8000882:	4603      	mov	r3, r0
 8000884:	80fb      	strh	r3, [r7, #6]
  uint8_t regValue = 0;
 8000886:	2300      	movs	r3, #0
 8000888:	73fb      	strb	r3, [r7, #15]
  regValue = (FT5336_G_MODE_INTERRUPT_POLLING & (FT5336_G_MODE_INTERRUPT_MASK >> FT5336_G_MODE_INTERRUPT_SHIFT)) << FT5336_G_MODE_INTERRUPT_SHIFT;
 800088a:	2300      	movs	r3, #0
 800088c:	73fb      	strb	r3, [r7, #15]

  /* Set interrupt polling mode in FT5336_GMODE_REG */
  TS_IO_Write(DeviceAddr, FT5336_GMODE_REG, regValue);
 800088e:	88fb      	ldrh	r3, [r7, #6]
 8000890:	b2db      	uxtb	r3, r3
 8000892:	7bfa      	ldrb	r2, [r7, #15]
 8000894:	21a4      	movs	r1, #164	; 0xa4
 8000896:	4618      	mov	r0, r3
 8000898:	f001 fdfe 	bl	8002498 <TS_IO_Write>
}
 800089c:	bf00      	nop
 800089e:	3710      	adds	r7, #16
 80008a0:	46bd      	mov	sp, r7
 80008a2:	bd80      	pop	{r7, pc}

080008a4 <ft5336_TS_ITStatus>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval TS interrupts status : always return 0 here
  */
uint8_t ft5336_TS_ITStatus(uint16_t DeviceAddr)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	4603      	mov	r3, r0
 80008ac:	80fb      	strh	r3, [r7, #6]
  /* Always return 0 as feature not applicable to FT5336 */
  return 0;
 80008ae:	2300      	movs	r3, #0
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	370c      	adds	r7, #12
 80008b4:	46bd      	mov	sp, r7
 80008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ba:	4770      	bx	lr

080008bc <ft5336_TS_ClearIT>:
  *         @note : This feature is not applicable to FT5336.
  * @param  DeviceAddr: Device address on communication Bus (I2C slave address of FT5336).
  * @retval None
  */
void ft5336_TS_ClearIT(uint16_t DeviceAddr)
{
 80008bc:	b480      	push	{r7}
 80008be:	b083      	sub	sp, #12
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	4603      	mov	r3, r0
 80008c4:	80fb      	strh	r3, [r7, #6]
  /* Nothing to be done here for FT5336 */
}
 80008c6:	bf00      	nop
 80008c8:	370c      	adds	r7, #12
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
	...

080008d4 <ft5336_Get_I2C_InitializedStatus>:
  * @brief  Return the status of I2C was initialized or not.
  * @param  None.
  * @retval : I2C initialization status.
  */
static uint8_t ft5336_Get_I2C_InitializedStatus(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  return(ft5336_handle.i2cInitialized);
 80008d8:	4b03      	ldr	r3, [pc, #12]	; (80008e8 <ft5336_Get_I2C_InitializedStatus+0x14>)
 80008da:	781b      	ldrb	r3, [r3, #0]
}
 80008dc:	4618      	mov	r0, r3
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	200002cc 	.word	0x200002cc

080008ec <ft5336_I2C_InitializeIfRequired>:
  * @brief  I2C initialize if needed.
  * @param  None.
  * @retval : None.
  */
static void ft5336_I2C_InitializeIfRequired(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  if(ft5336_Get_I2C_InitializedStatus() == FT5336_I2C_NOT_INITIALIZED)
 80008f0:	f7ff fff0 	bl	80008d4 <ft5336_Get_I2C_InitializedStatus>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d104      	bne.n	8000904 <ft5336_I2C_InitializeIfRequired+0x18>
  {
    /* Initialize TS IO BUS layer (I2C) */
    TS_IO_Init();
 80008fa:	f001 fdc3 	bl	8002484 <TS_IO_Init>

    /* Set state to initialized */
    ft5336_handle.i2cInitialized = FT5336_I2C_INITIALIZED;
 80008fe:	4b02      	ldr	r3, [pc, #8]	; (8000908 <ft5336_I2C_InitializeIfRequired+0x1c>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
  }
}
 8000904:	bf00      	nop
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200002cc 	.word	0x200002cc

0800090c <ft5336_TS_Configure>:
  * @brief  Basic static configuration of TouchScreen
  * @param  DeviceAddr: FT5336 Device address for communication on I2C Bus.
  * @retval Status FT5336_STATUS_OK or FT5336_STATUS_NOT_OK.
  */
static uint32_t ft5336_TS_Configure(uint16_t DeviceAddr)
{
 800090c:	b480      	push	{r7}
 800090e:	b085      	sub	sp, #20
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]
  uint32_t status = FT5336_STATUS_OK;
 8000916:	2300      	movs	r3, #0
 8000918:	60fb      	str	r3, [r7, #12]

  /* Nothing special to be done for FT5336 */

  return(status);
 800091a:	68fb      	ldr	r3, [r7, #12]
}
 800091c:	4618      	mov	r0, r3
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000928:	b5b0      	push	{r4, r5, r7, lr}
 800092a:	b0a2      	sub	sp, #136	; 0x88
 800092c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800092e:	f003 ffd0 	bl	80048d2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000932:	f000 f8e7 	bl	8000b04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000936:	f000 ff59 	bl	80017ec <MX_GPIO_Init>
  MX_I2C1_Init();
 800093a:	f000 fa93 	bl	8000e64 <MX_I2C1_Init>
  MX_I2C3_Init();
 800093e:	f000 fad1 	bl	8000ee4 <MX_I2C3_Init>
  MX_LTDC_Init();
 8000942:	f000 fb0f 	bl	8000f64 <MX_LTDC_Init>
  MX_RTC_Init();
 8000946:	f000 fb8f 	bl	8001068 <MX_RTC_Init>
  MX_SPI2_Init();
 800094a:	f000 fc33 	bl	80011b4 <MX_SPI2_Init>
  MX_TIM1_Init();
 800094e:	f000 fc6f 	bl	8001230 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000952:	f000 fcc1 	bl	80012d8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000956:	f000 fd0d 	bl	8001374 <MX_TIM3_Init>
  MX_TIM5_Init();
 800095a:	f000 fd71 	bl	8001440 <MX_TIM5_Init>
  MX_TIM8_Init();
 800095e:	f000 fdbd 	bl	80014dc <MX_TIM8_Init>
  MX_USART1_UART_Init();
 8000962:	f000 fe95 	bl	8001690 <MX_USART1_UART_Init>
  MX_USART6_UART_Init();
 8000966:	f000 fec3 	bl	80016f0 <MX_USART6_UART_Init>
  MX_ADC1_Init();
 800096a:	f000 f97b 	bl	8000c64 <MX_ADC1_Init>
  MX_DAC_Init();
 800096e:	f000 fa1d 	bl	8000dac <MX_DAC_Init>
  MX_UART7_Init();
 8000972:	f000 fe5d 	bl	8001630 <MX_UART7_Init>
  MX_FMC_Init();
 8000976:	f000 feeb 	bl	8001750 <MX_FMC_Init>
  MX_DMA2D_Init();
 800097a:	f000 fa41 	bl	8000e00 <MX_DMA2D_Init>
  MX_ADC3_Init();
 800097e:	f000 f9c3 	bl	8000d08 <MX_ADC3_Init>
  /* USER CODE BEGIN 2 */
	BSP_LCD_Init();
 8000982:	f001 fdcd 	bl	8002520 <BSP_LCD_Init>
	BSP_LCD_LayerDefaultInit(0, LCD_FB_START_ADDRESS);
 8000986:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
 800098a:	2000      	movs	r0, #0
 800098c:	f001 fe60 	bl	8002650 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_LayerDefaultInit(1,
			LCD_FB_START_ADDRESS + BSP_LCD_GetXSize() * BSP_LCD_GetYSize() * 4);
 8000990:	f001 fe36 	bl	8002600 <BSP_LCD_GetXSize>
 8000994:	4604      	mov	r4, r0
 8000996:	f001 fe47 	bl	8002628 <BSP_LCD_GetYSize>
 800099a:	4603      	mov	r3, r0
 800099c:	fb03 f304 	mul.w	r3, r3, r4
 80009a0:	f103 5340 	add.w	r3, r3, #805306368	; 0x30000000
	BSP_LCD_LayerDefaultInit(1,
 80009a4:	009b      	lsls	r3, r3, #2
 80009a6:	4619      	mov	r1, r3
 80009a8:	2001      	movs	r0, #1
 80009aa:	f001 fe51 	bl	8002650 <BSP_LCD_LayerDefaultInit>
	BSP_LCD_DisplayOn();
 80009ae:	f002 fcc7 	bl	8003340 <BSP_LCD_DisplayOn>
	BSP_LCD_SelectLayer(1);
 80009b2:	2001      	movs	r0, #1
 80009b4:	f001 feac 	bl	8002710 <BSP_LCD_SelectLayer>
	BSP_LCD_Clear(LCD_COLOR_BLACK);
 80009b8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009bc:	f001 ff1a 	bl	80027f4 <BSP_LCD_Clear>
	BSP_LCD_SetFont(&Font12);
 80009c0:	4842      	ldr	r0, [pc, #264]	; (8000acc <main+0x1a4>)
 80009c2:	f001 fee7 	bl	8002794 <BSP_LCD_SetFont>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80009c6:	f04f 30ff 	mov.w	r0, #4294967295
 80009ca:	f001 feb1 	bl	8002730 <BSP_LCD_SetTextColor>
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 80009ce:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80009d2:	f001 fec5 	bl	8002760 <BSP_LCD_SetBackColor>

	BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 80009d6:	f001 fe13 	bl	8002600 <BSP_LCD_GetXSize>
 80009da:	4603      	mov	r3, r0
 80009dc:	b29c      	uxth	r4, r3
 80009de:	f001 fe23 	bl	8002628 <BSP_LCD_GetYSize>
 80009e2:	4603      	mov	r3, r0
 80009e4:	b29b      	uxth	r3, r3
 80009e6:	4619      	mov	r1, r3
 80009e8:	4620      	mov	r0, r4
 80009ea:	f003 f937 	bl	8003c5c <BSP_TS_Init>
	HAL_UART_Receive_IT(&huart7,rxbuffer,6);
 80009ee:	2206      	movs	r2, #6
 80009f0:	4937      	ldr	r1, [pc, #220]	; (8000ad0 <main+0x1a8>)
 80009f2:	4838      	ldr	r0, [pc, #224]	; (8000ad4 <main+0x1ac>)
 80009f4:	f009 fd80 	bl	800a4f8 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Create the mutex(es) */
  /* definition and creation of myMutex_LCD */
  osMutexDef(myMutex_LCD);
 80009f8:	2300      	movs	r3, #0
 80009fa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80009fe:	2300      	movs	r3, #0
 8000a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  myMutex_LCDHandle = osMutexCreate(osMutex(myMutex_LCD));
 8000a04:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f00a fe64 	bl	800b6d6 <osMutexCreate>
 8000a0e:	4603      	mov	r3, r0
 8000a10:	4a31      	ldr	r2, [pc, #196]	; (8000ad8 <main+0x1b0>)
 8000a12:	6013      	str	r3, [r2, #0]
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* definition and creation of myQueueU2H */
  osMessageQDef(myQueueU2H, 1, uint8_t);
 8000a14:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x1b4>)
 8000a16:	f107 0470 	add.w	r4, r7, #112	; 0x70
 8000a1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a1c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  myQueueU2HHandle = osMessageCreate(osMessageQ(myQueueU2H), NULL);
 8000a20:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000a24:	2100      	movs	r1, #0
 8000a26:	4618      	mov	r0, r3
 8000a28:	f00a fe6d 	bl	800b706 <osMessageCreate>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ae0 <main+0x1b8>)
 8000a30:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityIdle, 0, 128);
 8000a32:	4b2c      	ldr	r3, [pc, #176]	; (8000ae4 <main+0x1bc>)
 8000a34:	f107 0454 	add.w	r4, r7, #84	; 0x54
 8000a38:	461d      	mov	r5, r3
 8000a3a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a3c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a3e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a42:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000a46:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f00a fde2 	bl	800b616 <osThreadCreate>
 8000a52:	4603      	mov	r3, r0
 8000a54:	4a24      	ldr	r2, [pc, #144]	; (8000ae8 <main+0x1c0>)
 8000a56:	6013      	str	r3, [r2, #0]

  /* definition and creation of RRacket */
  osThreadDef(RRacket, StartRRacket, osPriorityAboveNormal, 0, 1024);
 8000a58:	4b24      	ldr	r3, [pc, #144]	; (8000aec <main+0x1c4>)
 8000a5a:	f107 0438 	add.w	r4, r7, #56	; 0x38
 8000a5e:	461d      	mov	r5, r3
 8000a60:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a62:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a64:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a68:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  RRacketHandle = osThreadCreate(osThread(RRacket), NULL);
 8000a6c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000a70:	2100      	movs	r1, #0
 8000a72:	4618      	mov	r0, r3
 8000a74:	f00a fdcf 	bl	800b616 <osThreadCreate>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	4a1d      	ldr	r2, [pc, #116]	; (8000af0 <main+0x1c8>)
 8000a7c:	6013      	str	r3, [r2, #0]

  /* definition and creation of BallDisplay */
  osThreadDef(BallDisplay, StartBall, osPriorityHigh, 0, 1024);
 8000a7e:	4b1d      	ldr	r3, [pc, #116]	; (8000af4 <main+0x1cc>)
 8000a80:	f107 041c 	add.w	r4, r7, #28
 8000a84:	461d      	mov	r5, r3
 8000a86:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a88:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a8a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000a8e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BallDisplayHandle = osThreadCreate(osThread(BallDisplay), NULL);
 8000a92:	f107 031c 	add.w	r3, r7, #28
 8000a96:	2100      	movs	r1, #0
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f00a fdbc 	bl	800b616 <osThreadCreate>
 8000a9e:	4603      	mov	r3, r0
 8000aa0:	4a15      	ldr	r2, [pc, #84]	; (8000af8 <main+0x1d0>)
 8000aa2:	6013      	str	r3, [r2, #0]

  /* definition and creation of BgChanger */
  osThreadDef(BgChanger, StartBgChanger, osPriorityBelowNormal, 0, 1024);
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <main+0x1d4>)
 8000aa6:	463c      	mov	r4, r7
 8000aa8:	461d      	mov	r5, r3
 8000aaa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000aac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000aae:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ab2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  BgChangerHandle = osThreadCreate(osThread(BgChanger), NULL);
 8000ab6:	463b      	mov	r3, r7
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f00a fdab 	bl	800b616 <osThreadCreate>
 8000ac0:	4603      	mov	r3, r0
 8000ac2:	4a0f      	ldr	r2, [pc, #60]	; (8000b00 <main+0x1d8>)
 8000ac4:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000ac6:	f00a fd9f 	bl	800b608 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8000aca:	e7fe      	b.n	8000aca <main+0x1a2>
 8000acc:	2000003c 	.word	0x2000003c
 8000ad0:	20008ba0 	.word	0x20008ba0
 8000ad4:	2000869c 	.word	0x2000869c
 8000ad8:	20008b9c 	.word	0x20008b9c
 8000adc:	0800dc78 	.word	0x0800dc78
 8000ae0:	20008bb0 	.word	0x20008bb0
 8000ae4:	0800dc88 	.word	0x0800dc88
 8000ae8:	200085e8 	.word	0x200085e8
 8000aec:	0800dca4 	.word	0x0800dca4
 8000af0:	20008a18 	.word	0x20008a18
 8000af4:	0800dcc0 	.word	0x0800dcc0
 8000af8:	20008bac 	.word	0x20008bac
 8000afc:	0800dcdc 	.word	0x0800dcdc
 8000b00:	20008960 	.word	0x20008960

08000b04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0b4      	sub	sp, #208	; 0xd0
 8000b08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b0a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000b0e:	2230      	movs	r2, #48	; 0x30
 8000b10:	2100      	movs	r1, #0
 8000b12:	4618      	mov	r0, r3
 8000b14:	f00d f886 	bl	800dc24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b18:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]
 8000b22:	609a      	str	r2, [r3, #8]
 8000b24:	60da      	str	r2, [r3, #12]
 8000b26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	2284      	movs	r2, #132	; 0x84
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4618      	mov	r0, r3
 8000b32:	f00d f877 	bl	800dc24 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000b36:	f006 fd25 	bl	8007584 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <SystemClock_Config+0x154>)
 8000b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b3e:	4a46      	ldr	r2, [pc, #280]	; (8000c58 <SystemClock_Config+0x154>)
 8000b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b44:	6413      	str	r3, [r2, #64]	; 0x40
 8000b46:	4b44      	ldr	r3, [pc, #272]	; (8000c58 <SystemClock_Config+0x154>)
 8000b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b4e:	607b      	str	r3, [r7, #4]
 8000b50:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b52:	4b42      	ldr	r3, [pc, #264]	; (8000c5c <SystemClock_Config+0x158>)
 8000b54:	681b      	ldr	r3, [r3, #0]
 8000b56:	4a41      	ldr	r2, [pc, #260]	; (8000c5c <SystemClock_Config+0x158>)
 8000b58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000b5c:	6013      	str	r3, [r2, #0]
 8000b5e:	4b3f      	ldr	r3, [pc, #252]	; (8000c5c <SystemClock_Config+0x158>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b66:	603b      	str	r3, [r7, #0]
 8000b68:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8000b6a:	2309      	movs	r3, #9
 8000b6c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b74:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7e:	2302      	movs	r3, #2
 8000b80:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b84:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b88:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 25;
 8000b8c:	2319      	movs	r3, #25
 8000b8e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 400;
 8000b92:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000b96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000ba0:	2309      	movs	r3, #9
 8000ba2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fd4a 	bl	8007644 <HAL_RCC_OscConfig>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8000bb6:	f001 fb09 	bl	80021cc <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000bba:	f006 fcf3 	bl	80075a4 <HAL_PWREx_EnableOverDrive>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bc4:	f001 fb02 	bl	80021cc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bc8:	230f      	movs	r3, #15
 8000bca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bd4:	2300      	movs	r3, #0
 8000bd6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bda:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bde:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000be2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000be6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8000bea:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000bee:	2106      	movs	r1, #6
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f006 ffcb 	bl	8007b8c <HAL_RCC_ClockConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0xfc>
  {
    Error_Handler();
 8000bfc:	f001 fae6 	bl	80021cc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC|RCC_PERIPHCLK_RTC
 8000c00:	4b17      	ldr	r3, [pc, #92]	; (8000c60 <SystemClock_Config+0x15c>)
 8000c02:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART6
                              |RCC_PERIPHCLK_UART7|RCC_PERIPHCLK_I2C1
                              |RCC_PERIPHCLK_I2C3;
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 384;
 8000c04:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000c08:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 5;
 8000c0a:	2305      	movs	r3, #5
 8000c0c:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8000c0e:	2302      	movs	r3, #2
 8000c10:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV8;
 8000c12:	2303      	movs	r3, #3
 8000c14:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8000c16:	2301      	movs	r3, #1
 8000c18:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8000c1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c1e:	637b      	str	r3, [r7, #52]	; 0x34
  PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000c20:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000c24:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000c26:	2300      	movs	r3, #0
 8000c28:	64fb      	str	r3, [r7, #76]	; 0x4c
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	663b      	str	r3, [r7, #96]	; 0x60
  PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c32:	2300      	movs	r3, #0
 8000c34:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 8000c36:	2300      	movs	r3, #0
 8000c38:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c3a:	f107 0308 	add.w	r3, r7, #8
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f007 f9ac 	bl	8007f9c <HAL_RCCEx_PeriphCLKConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000c4a:	f001 fabf 	bl	80021cc <Error_Handler>
  }
}
 8000c4e:	bf00      	nop
 8000c50:	37d0      	adds	r7, #208	; 0xd0
 8000c52:	46bd      	mov	sp, r7
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	40023800 	.word	0x40023800
 8000c5c:	40007000 	.word	0x40007000
 8000c60:	00015868 	.word	0x00015868

08000c64 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	601a      	str	r2, [r3, #0]
 8000c70:	605a      	str	r2, [r3, #4]
 8000c72:	609a      	str	r2, [r3, #8]
 8000c74:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c76:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c78:	4a21      	ldr	r2, [pc, #132]	; (8000d00 <MX_ADC1_Init+0x9c>)
 8000c7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c7c:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000c82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c84:	4b1d      	ldr	r3, [pc, #116]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c8a:	4b1c      	ldr	r3, [pc, #112]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c90:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c9e:	4b17      	ldr	r3, [pc, #92]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ca4:	4b15      	ldr	r3, [pc, #84]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ca6:	4a17      	ldr	r2, [pc, #92]	; (8000d04 <MX_ADC1_Init+0xa0>)
 8000ca8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000caa:	4b14      	ldr	r3, [pc, #80]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb2:	2201      	movs	r2, #1
 8000cb4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000cb6:	4b11      	ldr	r3, [pc, #68]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc0:	2201      	movs	r2, #1
 8000cc2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc4:	480d      	ldr	r0, [pc, #52]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000cc6:	f003 fe55 	bl	8004974 <HAL_ADC_Init>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000cd0:	f001 fa7c 	bl	80021cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ce0:	463b      	mov	r3, r7
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4805      	ldr	r0, [pc, #20]	; (8000cfc <MX_ADC1_Init+0x98>)
 8000ce6:	f003 ffdb 	bl	8004ca0 <HAL_ADC_ConfigChannel>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cf0:	f001 fa6c 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cf4:	bf00      	nop
 8000cf6:	3710      	adds	r7, #16
 8000cf8:	46bd      	mov	sp, r7
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	200088d0 	.word	0x200088d0
 8000d00:	40012000 	.word	0x40012000
 8000d04:	0f000001 	.word	0x0f000001

08000d08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b084      	sub	sp, #16
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000d1a:	4b21      	ldr	r3, [pc, #132]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d1c:	4a21      	ldr	r2, [pc, #132]	; (8000da4 <MX_ADC3_Init+0x9c>)
 8000d1e:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d20:	4b1f      	ldr	r3, [pc, #124]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d22:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000d26:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000d28:	4b1d      	ldr	r3, [pc, #116]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000d2e:	4b1c      	ldr	r3, [pc, #112]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000d34:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000d3a:	4b19      	ldr	r3, [pc, #100]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d42:	4b17      	ldr	r3, [pc, #92]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d48:	4b15      	ldr	r3, [pc, #84]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d4a:	4a17      	ldr	r2, [pc, #92]	; (8000da8 <MX_ADC3_Init+0xa0>)
 8000d4c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d4e:	4b14      	ldr	r3, [pc, #80]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d50:	2200      	movs	r2, #0
 8000d52:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000d54:	4b12      	ldr	r3, [pc, #72]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d56:	2201      	movs	r2, #1
 8000d58:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000d5a:	4b11      	ldr	r3, [pc, #68]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d64:	2201      	movs	r2, #1
 8000d66:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000d68:	480d      	ldr	r0, [pc, #52]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d6a:	f003 fe03 	bl	8004974 <HAL_ADC_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000d74:	f001 fa2a 	bl	80021cc <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000d7c:	2301      	movs	r3, #1
 8000d7e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d80:	2300      	movs	r3, #0
 8000d82:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000d84:	463b      	mov	r3, r7
 8000d86:	4619      	mov	r1, r3
 8000d88:	4805      	ldr	r0, [pc, #20]	; (8000da0 <MX_ADC3_Init+0x98>)
 8000d8a:	f003 ff89 	bl	8004ca0 <HAL_ADC_ConfigChannel>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d001      	beq.n	8000d98 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000d94:	f001 fa1a 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000d98:	bf00      	nop
 8000d9a:	3710      	adds	r7, #16
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	20008918 	.word	0x20008918
 8000da4:	40012200 	.word	0x40012200
 8000da8:	0f000001 	.word	0x0f000001

08000dac <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000db2:	463b      	mov	r3, r7
 8000db4:	2200      	movs	r2, #0
 8000db6:	601a      	str	r2, [r3, #0]
 8000db8:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000dba:	4b0f      	ldr	r3, [pc, #60]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dbc:	4a0f      	ldr	r2, [pc, #60]	; (8000dfc <MX_DAC_Init+0x50>)
 8000dbe:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000dc0:	480d      	ldr	r0, [pc, #52]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000dc2:	f004 fa93 	bl	80052ec <HAL_DAC_Init>
 8000dc6:	4603      	mov	r3, r0
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d001      	beq.n	8000dd0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000dcc:	f001 f9fe 	bl	80021cc <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000dd8:	463b      	mov	r3, r7
 8000dda:	2200      	movs	r2, #0
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4806      	ldr	r0, [pc, #24]	; (8000df8 <MX_DAC_Init+0x4c>)
 8000de0:	f004 fafa 	bl	80053d8 <HAL_DAC_ConfigChannel>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000dea:	f001 f9ef 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200089e4 	.word	0x200089e4
 8000dfc:	40007400 	.word	0x40007400

08000e00 <MX_DMA2D_Init>:
  * @brief DMA2D Initialization Function
  * @param None
  * @retval None
  */
static void MX_DMA2D_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE END DMA2D_Init 0 */

  /* USER CODE BEGIN DMA2D_Init 1 */

  /* USER CODE END DMA2D_Init 1 */
  hdma2d.Instance = DMA2D;
 8000e04:	4b15      	ldr	r3, [pc, #84]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e06:	4a16      	ldr	r2, [pc, #88]	; (8000e60 <MX_DMA2D_Init+0x60>)
 8000e08:	601a      	str	r2, [r3, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8000e0a:	4b14      	ldr	r3, [pc, #80]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	605a      	str	r2, [r3, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8000e10:	4b12      	ldr	r3, [pc, #72]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  hdma2d.Init.OutputOffset = 0;
 8000e16:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  hdma2d.LayerCfg[1].InputOffset = 0;
 8000e1c:	4b0f      	ldr	r3, [pc, #60]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	629a      	str	r2, [r3, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 8000e22:	4b0e      	ldr	r3, [pc, #56]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	62da      	str	r2, [r3, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8000e28:	4b0c      	ldr	r3, [pc, #48]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8000e2e:	4b0b      	ldr	r3, [pc, #44]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000e34:	4809      	ldr	r0, [pc, #36]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e36:	f004 fd07 	bl	8005848 <HAL_DMA2D_Init>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d001      	beq.n	8000e44 <MX_DMA2D_Init+0x44>
  {
    Error_Handler();
 8000e40:	f001 f9c4 	bl	80021cc <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8000e44:	2101      	movs	r1, #1
 8000e46:	4805      	ldr	r0, [pc, #20]	; (8000e5c <MX_DMA2D_Init+0x5c>)
 8000e48:	f004 fe5c 	bl	8005b04 <HAL_DMA2D_ConfigLayer>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_DMA2D_Init+0x56>
  {
    Error_Handler();
 8000e52:	f001 f9bb 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN DMA2D_Init 2 */

  /* USER CODE END DMA2D_Init 2 */

}
 8000e56:	bf00      	nop
 8000e58:	bd80      	pop	{r7, pc}
 8000e5a:	bf00      	nop
 8000e5c:	20008ae8 	.word	0x20008ae8
 8000e60:	4002b000 	.word	0x4002b000

08000e64 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000e68:	4b1b      	ldr	r3, [pc, #108]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e6a:	4a1c      	ldr	r2, [pc, #112]	; (8000edc <MX_I2C1_Init+0x78>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000e6e:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e70:	4a1b      	ldr	r2, [pc, #108]	; (8000ee0 <MX_I2C1_Init+0x7c>)
 8000e72:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000e74:	4b18      	ldr	r3, [pc, #96]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e82:	2200      	movs	r2, #0
 8000e84:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000e86:	4b14      	ldr	r3, [pc, #80]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e8c:	4b12      	ldr	r3, [pc, #72]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e92:	4b11      	ldr	r3, [pc, #68]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e98:	4b0f      	ldr	r3, [pc, #60]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000e9e:	480e      	ldr	r0, [pc, #56]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ea0:	f005 fa48 	bl	8006334 <HAL_I2C_Init>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000eaa:	f001 f98f 	bl	80021cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000eae:	2100      	movs	r1, #0
 8000eb0:	4809      	ldr	r0, [pc, #36]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000eb2:	f005 ff57 	bl	8006d64 <HAL_I2CEx_ConfigAnalogFilter>
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	d001      	beq.n	8000ec0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000ebc:	f001 f986 	bl	80021cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4805      	ldr	r0, [pc, #20]	; (8000ed8 <MX_I2C1_Init+0x74>)
 8000ec4:	f005 ff99 	bl	8006dfa <HAL_I2CEx_ConfigDigitalFilter>
 8000ec8:	4603      	mov	r3, r0
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d001      	beq.n	8000ed2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000ece:	f001 f97d 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	2000875c 	.word	0x2000875c
 8000edc:	40005400 	.word	0x40005400
 8000ee0:	00c0eaff 	.word	0x00c0eaff

08000ee4 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000ee8:	4b1b      	ldr	r3, [pc, #108]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000eea:	4a1c      	ldr	r2, [pc, #112]	; (8000f5c <MX_I2C3_Init+0x78>)
 8000eec:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x00C0EAFF;
 8000eee:	4b1a      	ldr	r3, [pc, #104]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef0:	4a1b      	ldr	r2, [pc, #108]	; (8000f60 <MX_I2C3_Init+0x7c>)
 8000ef2:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000ef4:	4b18      	ldr	r3, [pc, #96]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000efa:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000efc:	2201      	movs	r2, #1
 8000efe:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b15      	ldr	r3, [pc, #84]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000f06:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f0c:	4b12      	ldr	r3, [pc, #72]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f12:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000f1e:	480e      	ldr	r0, [pc, #56]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f20:	f005 fa08 	bl	8006334 <HAL_I2C_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000f2a:	f001 f94f 	bl	80021cc <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f2e:	2100      	movs	r1, #0
 8000f30:	4809      	ldr	r0, [pc, #36]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f32:	f005 ff17 	bl	8006d64 <HAL_I2CEx_ConfigAnalogFilter>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000f3c:	f001 f946 	bl	80021cc <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000f40:	2100      	movs	r1, #0
 8000f42:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_I2C3_Init+0x74>)
 8000f44:	f005 ff59 	bl	8006dfa <HAL_I2CEx_ConfigDigitalFilter>
 8000f48:	4603      	mov	r3, r0
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d001      	beq.n	8000f52 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000f4e:	f001 f93d 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000f52:	bf00      	nop
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	bf00      	nop
 8000f58:	200085ec 	.word	0x200085ec
 8000f5c:	40005c00 	.word	0x40005c00
 8000f60:	00c0eaff 	.word	0x00c0eaff

08000f64 <MX_LTDC_Init>:
  * @brief LTDC Initialization Function
  * @param None
  * @retval None
  */
static void MX_LTDC_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b08e      	sub	sp, #56	; 0x38
 8000f68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN LTDC_Init 0 */

  /* USER CODE END LTDC_Init 0 */

  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2234      	movs	r2, #52	; 0x34
 8000f6e:	2100      	movs	r1, #0
 8000f70:	4618      	mov	r0, r3
 8000f72:	f00c fe57 	bl	800dc24 <memset>

  /* USER CODE BEGIN LTDC_Init 1 */

  /* USER CODE END LTDC_Init 1 */
  hltdc.Instance = LTDC;
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f78:	4a3a      	ldr	r2, [pc, #232]	; (8001064 <MX_LTDC_Init+0x100>)
 8000f7a:	601a      	str	r2, [r3, #0]
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8000f7c:	4b38      	ldr	r3, [pc, #224]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	605a      	str	r2, [r3, #4]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8000f82:	4b37      	ldr	r3, [pc, #220]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	609a      	str	r2, [r3, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000f88:	4b35      	ldr	r3, [pc, #212]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	60da      	str	r2, [r3, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8000f8e:	4b34      	ldr	r3, [pc, #208]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f90:	2200      	movs	r2, #0
 8000f92:	611a      	str	r2, [r3, #16]
  hltdc.Init.HorizontalSync = 40;
 8000f94:	4b32      	ldr	r3, [pc, #200]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f96:	2228      	movs	r2, #40	; 0x28
 8000f98:	615a      	str	r2, [r3, #20]
  hltdc.Init.VerticalSync = 9;
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000f9c:	2209      	movs	r2, #9
 8000f9e:	619a      	str	r2, [r3, #24]
  hltdc.Init.AccumulatedHBP = 53;
 8000fa0:	4b2f      	ldr	r3, [pc, #188]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa2:	2235      	movs	r2, #53	; 0x35
 8000fa4:	61da      	str	r2, [r3, #28]
  hltdc.Init.AccumulatedVBP = 11;
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fa8:	220b      	movs	r2, #11
 8000faa:	621a      	str	r2, [r3, #32]
  hltdc.Init.AccumulatedActiveW = 533;
 8000fac:	4b2c      	ldr	r3, [pc, #176]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fae:	f240 2215 	movw	r2, #533	; 0x215
 8000fb2:	625a      	str	r2, [r3, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 283;
 8000fb4:	4b2a      	ldr	r3, [pc, #168]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fb6:	f240 121b 	movw	r2, #283	; 0x11b
 8000fba:	629a      	str	r2, [r3, #40]	; 0x28
  hltdc.Init.TotalWidth = 565;
 8000fbc:	4b28      	ldr	r3, [pc, #160]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fbe:	f240 2235 	movw	r2, #565	; 0x235
 8000fc2:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 285;
 8000fc4:	4b26      	ldr	r3, [pc, #152]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fc6:	f240 121d 	movw	r2, #285	; 0x11d
 8000fca:	631a      	str	r2, [r3, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8000fcc:	4b24      	ldr	r3, [pc, #144]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8000fd4:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8000fdc:	4b20      	ldr	r3, [pc, #128]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000fe4:	481e      	ldr	r0, [pc, #120]	; (8001060 <MX_LTDC_Init+0xfc>)
 8000fe6:	f005 ff55 	bl	8006e94 <HAL_LTDC_Init>
 8000fea:	4603      	mov	r3, r0
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d001      	beq.n	8000ff4 <MX_LTDC_Init+0x90>
  {
    Error_Handler();
 8000ff0:	f001 f8ec 	bl	80021cc <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	607b      	str	r3, [r7, #4]
  pLayerCfg.WindowX1 = 480;
 8000ff8:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000ffc:	60bb      	str	r3, [r7, #8]
  pLayerCfg.WindowY0 = 0;
 8000ffe:	2300      	movs	r3, #0
 8001000:	60fb      	str	r3, [r7, #12]
  pLayerCfg.WindowY1 = 272;
 8001002:	f44f 7388 	mov.w	r3, #272	; 0x110
 8001006:	613b      	str	r3, [r7, #16]
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8001008:	2302      	movs	r3, #2
 800100a:	617b      	str	r3, [r7, #20]
  pLayerCfg.Alpha = 255;
 800100c:	23ff      	movs	r3, #255	; 0xff
 800100e:	61bb      	str	r3, [r7, #24]
  pLayerCfg.Alpha0 = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	61fb      	str	r3, [r7, #28]
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8001014:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001018:	623b      	str	r3, [r7, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800101a:	2307      	movs	r3, #7
 800101c:	627b      	str	r3, [r7, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xC0000000;
 800101e:	f04f 4340 	mov.w	r3, #3221225472	; 0xc0000000
 8001022:	62bb      	str	r3, [r7, #40]	; 0x28
  pLayerCfg.ImageWidth = 480;
 8001024:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8001028:	62fb      	str	r3, [r7, #44]	; 0x2c
  pLayerCfg.ImageHeight = 272;
 800102a:	f44f 7388 	mov.w	r3, #272	; 0x110
 800102e:	633b      	str	r3, [r7, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8001036:	2300      	movs	r3, #0
 8001038:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8001042:	1d3b      	adds	r3, r7, #4
 8001044:	2200      	movs	r2, #0
 8001046:	4619      	mov	r1, r3
 8001048:	4805      	ldr	r0, [pc, #20]	; (8001060 <MX_LTDC_Init+0xfc>)
 800104a:	f006 f8b5 	bl	80071b8 <HAL_LTDC_ConfigLayer>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_LTDC_Init+0xf4>
  {
    Error_Handler();
 8001054:	f001 f8ba 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN LTDC_Init 2 */

  /* USER CODE END LTDC_Init 2 */

}
 8001058:	bf00      	nop
 800105a:	3738      	adds	r7, #56	; 0x38
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	20008828 	.word	0x20008828
 8001064:	40016800 	.word	0x40016800

08001068 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b092      	sub	sp, #72	; 0x48
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800106e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001072:	2200      	movs	r2, #0
 8001074:	601a      	str	r2, [r3, #0]
 8001076:	605a      	str	r2, [r3, #4]
 8001078:	609a      	str	r2, [r3, #8]
 800107a:	60da      	str	r2, [r3, #12]
 800107c:	611a      	str	r2, [r3, #16]
 800107e:	615a      	str	r2, [r3, #20]
  RTC_DateTypeDef sDate = {0};
 8001080:	2300      	movs	r3, #0
 8001082:	62fb      	str	r3, [r7, #44]	; 0x2c
  RTC_AlarmTypeDef sAlarm = {0};
 8001084:	463b      	mov	r3, r7
 8001086:	222c      	movs	r2, #44	; 0x2c
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f00c fdca 	bl	800dc24 <memset>
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001090:	4b46      	ldr	r3, [pc, #280]	; (80011ac <MX_RTC_Init+0x144>)
 8001092:	4a47      	ldr	r2, [pc, #284]	; (80011b0 <MX_RTC_Init+0x148>)
 8001094:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001096:	4b45      	ldr	r3, [pc, #276]	; (80011ac <MX_RTC_Init+0x144>)
 8001098:	2200      	movs	r2, #0
 800109a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800109c:	4b43      	ldr	r3, [pc, #268]	; (80011ac <MX_RTC_Init+0x144>)
 800109e:	227f      	movs	r2, #127	; 0x7f
 80010a0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80010a2:	4b42      	ldr	r3, [pc, #264]	; (80011ac <MX_RTC_Init+0x144>)
 80010a4:	22ff      	movs	r2, #255	; 0xff
 80010a6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80010a8:	4b40      	ldr	r3, [pc, #256]	; (80011ac <MX_RTC_Init+0x144>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80010ae:	4b3f      	ldr	r3, [pc, #252]	; (80011ac <MX_RTC_Init+0x144>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80010b4:	4b3d      	ldr	r3, [pc, #244]	; (80011ac <MX_RTC_Init+0x144>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80010ba:	483c      	ldr	r0, [pc, #240]	; (80011ac <MX_RTC_Init+0x144>)
 80010bc:	f007 fb5c 	bl	8008778 <HAL_RTC_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_RTC_Init+0x62>
  {
    Error_Handler();
 80010c6:	f001 f881 	bl	80021cc <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  sTime.Minutes = 0x0;
 80010d0:	2300      	movs	r3, #0
 80010d2:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
  sTime.Seconds = 0x0;
 80010d6:	2300      	movs	r3, #0
 80010d8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80010dc:	2300      	movs	r3, #0
 80010de:	643b      	str	r3, [r7, #64]	; 0x40
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80010e0:	2300      	movs	r3, #0
 80010e2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80010e4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010e8:	2201      	movs	r2, #1
 80010ea:	4619      	mov	r1, r3
 80010ec:	482f      	ldr	r0, [pc, #188]	; (80011ac <MX_RTC_Init+0x144>)
 80010ee:	f007 fbbf 	bl	8008870 <HAL_RTC_SetTime>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_RTC_Init+0x94>
  {
    Error_Handler();
 80010f8:	f001 f868 	bl	80021cc <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80010fc:	2301      	movs	r3, #1
 80010fe:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  sDate.Month = RTC_MONTH_JANUARY;
 8001102:	2301      	movs	r3, #1
 8001104:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  sDate.Date = 0x1;
 8001108:	2301      	movs	r3, #1
 800110a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
  sDate.Year = 0x0;
 800110e:	2300      	movs	r3, #0
 8001110:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001114:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001118:	2201      	movs	r2, #1
 800111a:	4619      	mov	r1, r3
 800111c:	4823      	ldr	r0, [pc, #140]	; (80011ac <MX_RTC_Init+0x144>)
 800111e:	f007 fc65 	bl	80089ec <HAL_RTC_SetDate>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_RTC_Init+0xc4>
  {
    Error_Handler();
 8001128:	f001 f850 	bl	80021cc <Error_Handler>
  }
  /** Enable the Alarm A
  */
  sAlarm.AlarmTime.Hours = 0x0;
 800112c:	2300      	movs	r3, #0
 800112e:	703b      	strb	r3, [r7, #0]
  sAlarm.AlarmTime.Minutes = 0x0;
 8001130:	2300      	movs	r3, #0
 8001132:	707b      	strb	r3, [r7, #1]
  sAlarm.AlarmTime.Seconds = 0x0;
 8001134:	2300      	movs	r3, #0
 8001136:	70bb      	strb	r3, [r7, #2]
  sAlarm.AlarmTime.SubSeconds = 0x0;
 8001138:	2300      	movs	r3, #0
 800113a:	607b      	str	r3, [r7, #4]
  sAlarm.AlarmTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  sAlarm.AlarmTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  sAlarm.AlarmMask = RTC_ALARMMASK_NONE;
 8001144:	2300      	movs	r3, #0
 8001146:	61bb      	str	r3, [r7, #24]
  sAlarm.AlarmSubSecondMask = RTC_ALARMSUBSECONDMASK_ALL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
  sAlarm.AlarmDateWeekDaySel = RTC_ALARMDATEWEEKDAYSEL_DATE;
 800114c:	2300      	movs	r3, #0
 800114e:	623b      	str	r3, [r7, #32]
  sAlarm.AlarmDateWeekDay = 0x1;
 8001150:	2301      	movs	r3, #1
 8001152:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  sAlarm.Alarm = RTC_ALARM_A;
 8001156:	f44f 7380 	mov.w	r3, #256	; 0x100
 800115a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 800115c:	463b      	mov	r3, r7
 800115e:	2201      	movs	r2, #1
 8001160:	4619      	mov	r1, r3
 8001162:	4812      	ldr	r0, [pc, #72]	; (80011ac <MX_RTC_Init+0x144>)
 8001164:	f007 fcea 	bl	8008b3c <HAL_RTC_SetAlarm>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	d001      	beq.n	8001172 <MX_RTC_Init+0x10a>
  {
    Error_Handler();
 800116e:	f001 f82d 	bl	80021cc <Error_Handler>
  }
  /** Enable the Alarm B
  */
  sAlarm.Alarm = RTC_ALARM_B;
 8001172:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001176:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_RTC_SetAlarm(&hrtc, &sAlarm, RTC_FORMAT_BCD) != HAL_OK)
 8001178:	463b      	mov	r3, r7
 800117a:	2201      	movs	r2, #1
 800117c:	4619      	mov	r1, r3
 800117e:	480b      	ldr	r0, [pc, #44]	; (80011ac <MX_RTC_Init+0x144>)
 8001180:	f007 fcdc 	bl	8008b3c <HAL_RTC_SetAlarm>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <MX_RTC_Init+0x126>
  {
    Error_Handler();
 800118a:	f001 f81f 	bl	80021cc <Error_Handler>
  }
  /** Enable the TimeStamp
  */
  if (HAL_RTCEx_SetTimeStamp(&hrtc, RTC_TIMESTAMPEDGE_RISING, RTC_TIMESTAMPPIN_POS1) != HAL_OK)
 800118e:	2202      	movs	r2, #2
 8001190:	2100      	movs	r1, #0
 8001192:	4806      	ldr	r0, [pc, #24]	; (80011ac <MX_RTC_Init+0x144>)
 8001194:	f007 fe5c 	bl	8008e50 <HAL_RTCEx_SetTimeStamp>
 8001198:	4603      	mov	r3, r0
 800119a:	2b00      	cmp	r3, #0
 800119c:	d001      	beq.n	80011a2 <MX_RTC_Init+0x13a>
  {
    Error_Handler();
 800119e:	f001 f815 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011a2:	bf00      	nop
 80011a4:	3748      	adds	r7, #72	; 0x48
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200089f8 	.word	0x200089f8
 80011b0:	40002800 	.word	0x40002800

080011b4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80011b8:	4b1b      	ldr	r3, [pc, #108]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ba:	4a1c      	ldr	r2, [pc, #112]	; (800122c <MX_SPI2_Init+0x78>)
 80011bc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011be:	4b1a      	ldr	r3, [pc, #104]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	4b18      	ldr	r3, [pc, #96]	; (8001228 <MX_SPI2_Init+0x74>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 80011cc:	4b16      	ldr	r3, [pc, #88]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ce:	f44f 7240 	mov.w	r2, #768	; 0x300
 80011d2:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011d4:	4b14      	ldr	r3, [pc, #80]	; (8001228 <MX_SPI2_Init+0x74>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011da:	4b13      	ldr	r3, [pc, #76]	; (8001228 <MX_SPI2_Init+0x74>)
 80011dc:	2200      	movs	r2, #0
 80011de:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80011e0:	4b11      	ldr	r3, [pc, #68]	; (8001228 <MX_SPI2_Init+0x74>)
 80011e2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80011e6:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e8:	4b0f      	ldr	r3, [pc, #60]	; (8001228 <MX_SPI2_Init+0x74>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80011f4:	4b0c      	ldr	r3, [pc, #48]	; (8001228 <MX_SPI2_Init+0x74>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011fa:	4b0b      	ldr	r3, [pc, #44]	; (8001228 <MX_SPI2_Init+0x74>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <MX_SPI2_Init+0x74>)
 8001202:	2207      	movs	r2, #7
 8001204:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001206:	4b08      	ldr	r3, [pc, #32]	; (8001228 <MX_SPI2_Init+0x74>)
 8001208:	2200      	movs	r2, #0
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800120c:	4b06      	ldr	r3, [pc, #24]	; (8001228 <MX_SPI2_Init+0x74>)
 800120e:	2208      	movs	r2, #8
 8001210:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001212:	4805      	ldr	r0, [pc, #20]	; (8001228 <MX_SPI2_Init+0x74>)
 8001214:	f007 fef1 	bl	8008ffa <HAL_SPI_Init>
 8001218:	4603      	mov	r3, r0
 800121a:	2b00      	cmp	r3, #0
 800121c:	d001      	beq.n	8001222 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800121e:	f000 ffd5 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001222:	bf00      	nop
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	20008638 	.word	0x20008638
 800122c:	40003800 	.word	0x40003800

08001230 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b088      	sub	sp, #32
 8001234:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001236:	f107 0310 	add.w	r3, r7, #16
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
 800123e:	605a      	str	r2, [r3, #4]
 8001240:	609a      	str	r2, [r3, #8]
 8001242:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001244:	1d3b      	adds	r3, r7, #4
 8001246:	2200      	movs	r2, #0
 8001248:	601a      	str	r2, [r3, #0]
 800124a:	605a      	str	r2, [r3, #4]
 800124c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800124e:	4b20      	ldr	r3, [pc, #128]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001250:	4a20      	ldr	r2, [pc, #128]	; (80012d4 <MX_TIM1_Init+0xa4>)
 8001252:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001254:	4b1e      	ldr	r3, [pc, #120]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800125a:	4b1d      	ldr	r3, [pc, #116]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800125c:	2200      	movs	r2, #0
 800125e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001260:	4b1b      	ldr	r3, [pc, #108]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001262:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001266:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001268:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800126a:	2200      	movs	r2, #0
 800126c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001270:	2200      	movs	r2, #0
 8001272:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001274:	4b16      	ldr	r3, [pc, #88]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001276:	2200      	movs	r2, #0
 8001278:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800127a:	4815      	ldr	r0, [pc, #84]	; (80012d0 <MX_TIM1_Init+0xa0>)
 800127c:	f007 ff4f 	bl	800911e <HAL_TIM_Base_Init>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001286:	f000 ffa1 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800128a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800128e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001290:	f107 0310 	add.w	r3, r7, #16
 8001294:	4619      	mov	r1, r3
 8001296:	480e      	ldr	r0, [pc, #56]	; (80012d0 <MX_TIM1_Init+0xa0>)
 8001298:	f008 fa02 	bl	80096a0 <HAL_TIM_ConfigClockSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80012a2:	f000 ff93 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80012aa:	2300      	movs	r3, #0
 80012ac:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012ae:	2300      	movs	r3, #0
 80012b0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012b2:	1d3b      	adds	r3, r7, #4
 80012b4:	4619      	mov	r1, r3
 80012b6:	4806      	ldr	r0, [pc, #24]	; (80012d0 <MX_TIM1_Init+0xa0>)
 80012b8:	f008 ff4a 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012c2:	f000 ff83 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80012c6:	bf00      	nop
 80012c8:	3720      	adds	r7, #32
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20008a1c 	.word	0x20008a1c
 80012d4:	40010000 	.word	0x40010000

080012d8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b088      	sub	sp, #32
 80012dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012de:	f107 0310 	add.w	r3, r7, #16
 80012e2:	2200      	movs	r2, #0
 80012e4:	601a      	str	r2, [r3, #0]
 80012e6:	605a      	str	r2, [r3, #4]
 80012e8:	609a      	str	r2, [r3, #8]
 80012ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012f6:	4b1e      	ldr	r3, [pc, #120]	; (8001370 <MX_TIM2_Init+0x98>)
 80012f8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80012fc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012fe:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <MX_TIM2_Init+0x98>)
 8001300:	2200      	movs	r2, #0
 8001302:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001304:	4b1a      	ldr	r3, [pc, #104]	; (8001370 <MX_TIM2_Init+0x98>)
 8001306:	2200      	movs	r2, #0
 8001308:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800130a:	4b19      	ldr	r3, [pc, #100]	; (8001370 <MX_TIM2_Init+0x98>)
 800130c:	f04f 32ff 	mov.w	r2, #4294967295
 8001310:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001312:	4b17      	ldr	r3, [pc, #92]	; (8001370 <MX_TIM2_Init+0x98>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001318:	4b15      	ldr	r3, [pc, #84]	; (8001370 <MX_TIM2_Init+0x98>)
 800131a:	2200      	movs	r2, #0
 800131c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800131e:	4814      	ldr	r0, [pc, #80]	; (8001370 <MX_TIM2_Init+0x98>)
 8001320:	f007 fefd 	bl	800911e <HAL_TIM_Base_Init>
 8001324:	4603      	mov	r3, r0
 8001326:	2b00      	cmp	r3, #0
 8001328:	d001      	beq.n	800132e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800132a:	f000 ff4f 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800132e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001332:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	480d      	ldr	r0, [pc, #52]	; (8001370 <MX_TIM2_Init+0x98>)
 800133c:	f008 f9b0 	bl	80096a0 <HAL_TIM_ConfigClockSource>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001346:	f000 ff41 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800134a:	2300      	movs	r3, #0
 800134c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800134e:	2300      	movs	r3, #0
 8001350:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	4619      	mov	r1, r3
 8001356:	4806      	ldr	r0, [pc, #24]	; (8001370 <MX_TIM2_Init+0x98>)
 8001358:	f008 fefa 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 800135c:	4603      	mov	r3, r0
 800135e:	2b00      	cmp	r3, #0
 8001360:	d001      	beq.n	8001366 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8001362:	f000 ff33 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001366:	bf00      	nop
 8001368:	3720      	adds	r7, #32
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	20008b28 	.word	0x20008b28

08001374 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800137a:	f107 0320 	add.w	r3, r7, #32
 800137e:	2200      	movs	r2, #0
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	605a      	str	r2, [r3, #4]
 8001384:	609a      	str	r2, [r3, #8]
 8001386:	60da      	str	r2, [r3, #12]
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001388:	f107 030c 	add.w	r3, r7, #12
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
 8001390:	605a      	str	r2, [r3, #4]
 8001392:	609a      	str	r2, [r3, #8]
 8001394:	60da      	str	r2, [r3, #12]
 8001396:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013a2:	4b25      	ldr	r3, [pc, #148]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013a4:	4a25      	ldr	r2, [pc, #148]	; (800143c <MX_TIM3_Init+0xc8>)
 80013a6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013a8:	4b23      	ldr	r3, [pc, #140]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ae:	4b22      	ldr	r3, [pc, #136]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013b4:	4b20      	ldr	r3, [pc, #128]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013b6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013bc:	4b1e      	ldr	r3, [pc, #120]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013be:	2200      	movs	r2, #0
 80013c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013c8:	481b      	ldr	r0, [pc, #108]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013ca:	f007 fea8 	bl	800911e <HAL_TIM_Base_Init>
 80013ce:	4603      	mov	r3, r0
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d001      	beq.n	80013d8 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80013d4:	f000 fefa 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013dc:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013de:	f107 0320 	add.w	r3, r7, #32
 80013e2:	4619      	mov	r1, r3
 80013e4:	4814      	ldr	r0, [pc, #80]	; (8001438 <MX_TIM3_Init+0xc4>)
 80013e6:	f008 f95b 	bl	80096a0 <HAL_TIM_ConfigClockSource>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d001      	beq.n	80013f4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80013f0:	f000 feec 	bl	80021cc <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_DISABLE;
 80013f4:	2300      	movs	r3, #0
 80013f6:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 80013f8:	2300      	movs	r3, #0
 80013fa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013fc:	f107 030c 	add.w	r3, r7, #12
 8001400:	4619      	mov	r1, r3
 8001402:	480d      	ldr	r0, [pc, #52]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001404:	f008 fa12 	bl	800982c <HAL_TIM_SlaveConfigSynchro>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <MX_TIM3_Init+0x9e>
  {
    Error_Handler();
 800140e:	f000 fedd 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001412:	2300      	movs	r3, #0
 8001414:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001416:	2300      	movs	r3, #0
 8001418:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141a:	463b      	mov	r3, r7
 800141c:	4619      	mov	r1, r3
 800141e:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_TIM3_Init+0xc4>)
 8001420:	f008 fe96 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0xba>
  {
    Error_Handler();
 800142a:	f000 fecf 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800142e:	bf00      	nop
 8001430:	3730      	adds	r7, #48	; 0x30
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	200087e8 	.word	0x200087e8
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b088      	sub	sp, #32
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001446:	f107 0310 	add.w	r3, r7, #16
 800144a:	2200      	movs	r2, #0
 800144c:	601a      	str	r2, [r3, #0]
 800144e:	605a      	str	r2, [r3, #4]
 8001450:	609a      	str	r2, [r3, #8]
 8001452:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001454:	1d3b      	adds	r3, r7, #4
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800145e:	4b1d      	ldr	r3, [pc, #116]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001460:	4a1d      	ldr	r2, [pc, #116]	; (80014d8 <MX_TIM5_Init+0x98>)
 8001462:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001464:	4b1b      	ldr	r3, [pc, #108]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001466:	2200      	movs	r2, #0
 8001468:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800146a:	4b1a      	ldr	r3, [pc, #104]	; (80014d4 <MX_TIM5_Init+0x94>)
 800146c:	2200      	movs	r2, #0
 800146e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001470:	4b18      	ldr	r3, [pc, #96]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001472:	f04f 32ff 	mov.w	r2, #4294967295
 8001476:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001478:	4b16      	ldr	r3, [pc, #88]	; (80014d4 <MX_TIM5_Init+0x94>)
 800147a:	2200      	movs	r2, #0
 800147c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001480:	2200      	movs	r2, #0
 8001482:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001484:	4813      	ldr	r0, [pc, #76]	; (80014d4 <MX_TIM5_Init+0x94>)
 8001486:	f007 fe4a 	bl	800911e <HAL_TIM_Base_Init>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001490:	f000 fe9c 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001494:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001498:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800149a:	f107 0310 	add.w	r3, r7, #16
 800149e:	4619      	mov	r1, r3
 80014a0:	480c      	ldr	r0, [pc, #48]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014a2:	f008 f8fd 	bl	80096a0 <HAL_TIM_ConfigClockSource>
 80014a6:	4603      	mov	r3, r0
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d001      	beq.n	80014b0 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80014ac:	f000 fe8e 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014b0:	2300      	movs	r3, #0
 80014b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014b4:	2300      	movs	r3, #0
 80014b6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	4619      	mov	r1, r3
 80014bc:	4805      	ldr	r0, [pc, #20]	; (80014d4 <MX_TIM5_Init+0x94>)
 80014be:	f008 fe47 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 80014c2:	4603      	mov	r3, r0
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d001      	beq.n	80014cc <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 80014c8:	f000 fe80 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80014cc:	bf00      	nop
 80014ce:	3720      	adds	r7, #32
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	200087a8 	.word	0x200087a8
 80014d8:	40000c00 	.word	0x40000c00

080014dc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b09a      	sub	sp, #104	; 0x68
 80014e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014e2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]
 80014ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014f0:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80014f4:	2200      	movs	r2, #0
 80014f6:	601a      	str	r2, [r3, #0]
 80014f8:	605a      	str	r2, [r3, #4]
 80014fa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001500:	2200      	movs	r2, #0
 8001502:	601a      	str	r2, [r3, #0]
 8001504:	605a      	str	r2, [r3, #4]
 8001506:	609a      	str	r2, [r3, #8]
 8001508:	60da      	str	r2, [r3, #12]
 800150a:	611a      	str	r2, [r3, #16]
 800150c:	615a      	str	r2, [r3, #20]
 800150e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001510:	1d3b      	adds	r3, r7, #4
 8001512:	222c      	movs	r2, #44	; 0x2c
 8001514:	2100      	movs	r1, #0
 8001516:	4618      	mov	r0, r3
 8001518:	f00c fb84 	bl	800dc24 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800151c:	4b42      	ldr	r3, [pc, #264]	; (8001628 <MX_TIM8_Init+0x14c>)
 800151e:	4a43      	ldr	r2, [pc, #268]	; (800162c <MX_TIM8_Init+0x150>)
 8001520:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001522:	4b41      	ldr	r3, [pc, #260]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001524:	2200      	movs	r2, #0
 8001526:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001528:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <MX_TIM8_Init+0x14c>)
 800152a:	2200      	movs	r2, #0
 800152c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 800152e:	4b3e      	ldr	r3, [pc, #248]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001530:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001534:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001536:	4b3c      	ldr	r3, [pc, #240]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001538:	2200      	movs	r2, #0
 800153a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800153c:	4b3a      	ldr	r3, [pc, #232]	; (8001628 <MX_TIM8_Init+0x14c>)
 800153e:	2200      	movs	r2, #0
 8001540:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001542:	4b39      	ldr	r3, [pc, #228]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001544:	2200      	movs	r2, #0
 8001546:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001548:	4837      	ldr	r0, [pc, #220]	; (8001628 <MX_TIM8_Init+0x14c>)
 800154a:	f007 fde8 	bl	800911e <HAL_TIM_Base_Init>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001554:	f000 fe3a 	bl	80021cc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001558:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800155c:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800155e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001562:	4619      	mov	r1, r3
 8001564:	4830      	ldr	r0, [pc, #192]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001566:	f008 f89b 	bl	80096a0 <HAL_TIM_ConfigClockSource>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001570:	f000 fe2c 	bl	80021cc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001574:	482c      	ldr	r0, [pc, #176]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001576:	f007 fe27 	bl	80091c8 <HAL_TIM_PWM_Init>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d001      	beq.n	8001584 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001580:	f000 fe24 	bl	80021cc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001584:	2300      	movs	r3, #0
 8001586:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001588:	2300      	movs	r3, #0
 800158a:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800158c:	2300      	movs	r3, #0
 800158e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001590:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001594:	4619      	mov	r1, r3
 8001596:	4824      	ldr	r0, [pc, #144]	; (8001628 <MX_TIM8_Init+0x14c>)
 8001598:	f008 fdda 	bl	800a150 <HAL_TIMEx_MasterConfigSynchronization>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_TIM8_Init+0xca>
  {
    Error_Handler();
 80015a2:	f000 fe13 	bl	80021cc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015a6:	2360      	movs	r3, #96	; 0x60
 80015a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 80015aa:	2300      	movs	r3, #0
 80015ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015ae:	2300      	movs	r3, #0
 80015b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80015b6:	2300      	movs	r3, #0
 80015b8:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80015ba:	2300      	movs	r3, #0
 80015bc:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80015be:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80015c2:	220c      	movs	r2, #12
 80015c4:	4619      	mov	r1, r3
 80015c6:	4818      	ldr	r0, [pc, #96]	; (8001628 <MX_TIM8_Init+0x14c>)
 80015c8:	f007 ff52 	bl	8009470 <HAL_TIM_PWM_ConfigChannel>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80015d2:	f000 fdfb 	bl	80021cc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80015d6:	2300      	movs	r3, #0
 80015d8:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80015de:	2300      	movs	r3, #0
 80015e0:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80015e2:	2300      	movs	r3, #0
 80015e4:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80015ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015ee:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80015f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80015fc:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001602:	2300      	movs	r3, #0
 8001604:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	4619      	mov	r1, r3
 800160a:	4807      	ldr	r0, [pc, #28]	; (8001628 <MX_TIM8_Init+0x14c>)
 800160c:	f008 fe2e 	bl	800a26c <HAL_TIMEx_ConfigBreakDeadTime>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM8_Init+0x13e>
  {
    Error_Handler();
 8001616:	f000 fdd9 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800161a:	4803      	ldr	r0, [pc, #12]	; (8001628 <MX_TIM8_Init+0x14c>)
 800161c:	f002 fed2 	bl	80043c4 <HAL_TIM_MspPostInit>

}
 8001620:	bf00      	nop
 8001622:	3768      	adds	r7, #104	; 0x68
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}
 8001628:	2000871c 	.word	0x2000871c
 800162c:	40010400 	.word	0x40010400

08001630 <MX_UART7_Init>:
  * @brief UART7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART7_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8001634:	4b14      	ldr	r3, [pc, #80]	; (8001688 <MX_UART7_Init+0x58>)
 8001636:	4a15      	ldr	r2, [pc, #84]	; (800168c <MX_UART7_Init+0x5c>)
 8001638:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 9600;
 800163a:	4b13      	ldr	r3, [pc, #76]	; (8001688 <MX_UART7_Init+0x58>)
 800163c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001640:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8001642:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_UART7_Init+0x58>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <MX_UART7_Init+0x58>)
 800164a:	2200      	movs	r2, #0
 800164c:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_UART7_Init+0x58>)
 8001650:	2200      	movs	r2, #0
 8001652:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_UART7_Init+0x58>)
 8001656:	220c      	movs	r2, #12
 8001658:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_UART7_Init+0x58>)
 800165c:	2200      	movs	r2, #0
 800165e:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_UART7_Init+0x58>)
 8001662:	2200      	movs	r2, #0
 8001664:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_UART7_Init+0x58>)
 8001668:	2200      	movs	r2, #0
 800166a:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_UART7_Init+0x58>)
 800166e:	2200      	movs	r2, #0
 8001670:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_UART7_Init+0x58>)
 8001674:	f008 fe96 	bl	800a3a4 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 800167e:	f000 fda5 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000869c 	.word	0x2000869c
 800168c:	40007800 	.word	0x40007800

08001690 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001694:	4b14      	ldr	r3, [pc, #80]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <MX_USART1_UART_Init+0x5c>)
 8001698:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800169a:	4b13      	ldr	r3, [pc, #76]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b11      	ldr	r3, [pc, #68]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0f      	ldr	r3, [pc, #60]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0e      	ldr	r3, [pc, #56]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b0b      	ldr	r3, [pc, #44]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b09      	ldr	r3, [pc, #36]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016c6:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016cc:	4b06      	ldr	r3, [pc, #24]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80016d2:	4805      	ldr	r0, [pc, #20]	; (80016e8 <MX_USART1_UART_Init+0x58>)
 80016d4:	f008 fe66 	bl	800a3a4 <HAL_UART_Init>
 80016d8:	4603      	mov	r3, r0
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d001      	beq.n	80016e2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80016de:	f000 fd75 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80016e2:	bf00      	nop
 80016e4:	bd80      	pop	{r7, pc}
 80016e6:	bf00      	nop
 80016e8:	20008964 	.word	0x20008964
 80016ec:	40011000 	.word	0x40011000

080016f0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016f6:	4a15      	ldr	r2, [pc, #84]	; (800174c <MX_USART6_UART_Init+0x5c>)
 80016f8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80016fa:	4b13      	ldr	r3, [pc, #76]	; (8001748 <MX_USART6_UART_Init+0x58>)
 80016fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001700:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001702:	4b11      	ldr	r3, [pc, #68]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001708:	4b0f      	ldr	r3, [pc, #60]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800170a:	2200      	movs	r2, #0
 800170c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800170e:	4b0e      	ldr	r3, [pc, #56]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001710:	2200      	movs	r2, #0
 8001712:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001714:	4b0c      	ldr	r3, [pc, #48]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001716:	220c      	movs	r2, #12
 8001718:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800171a:	4b0b      	ldr	r3, [pc, #44]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800171c:	2200      	movs	r2, #0
 800171e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001720:	4b09      	ldr	r3, [pc, #36]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001722:	2200      	movs	r2, #0
 8001724:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001726:	4b08      	ldr	r3, [pc, #32]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001728:	2200      	movs	r2, #0
 800172a:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800172c:	4b06      	ldr	r3, [pc, #24]	; (8001748 <MX_USART6_UART_Init+0x58>)
 800172e:	2200      	movs	r2, #0
 8001730:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001732:	4805      	ldr	r0, [pc, #20]	; (8001748 <MX_USART6_UART_Init+0x58>)
 8001734:	f008 fe36 	bl	800a3a4 <HAL_UART_Init>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 800173e:	f000 fd45 	bl	80021cc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001742:	bf00      	nop
 8001744:	bd80      	pop	{r7, pc}
 8001746:	bf00      	nop
 8001748:	20008a68 	.word	0x20008a68
 800174c:	40011400 	.word	0x40011400

08001750 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8001756:	1d3b      	adds	r3, r7, #4
 8001758:	2200      	movs	r2, #0
 800175a:	601a      	str	r2, [r3, #0]
 800175c:	605a      	str	r2, [r3, #4]
 800175e:	609a      	str	r2, [r3, #8]
 8001760:	60da      	str	r2, [r3, #12]
 8001762:	611a      	str	r2, [r3, #16]
 8001764:	615a      	str	r2, [r3, #20]
 8001766:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001768:	4b1e      	ldr	r3, [pc, #120]	; (80017e4 <MX_FMC_Init+0x94>)
 800176a:	4a1f      	ldr	r2, [pc, #124]	; (80017e8 <MX_FMC_Init+0x98>)
 800176c:	601a      	str	r2, [r3, #0]
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK1;
 800176e:	4b1d      	ldr	r3, [pc, #116]	; (80017e4 <MX_FMC_Init+0x94>)
 8001770:	2200      	movs	r2, #0
 8001772:	605a      	str	r2, [r3, #4]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8001774:	4b1b      	ldr	r3, [pc, #108]	; (80017e4 <MX_FMC_Init+0x94>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 800177a:	4b1a      	ldr	r3, [pc, #104]	; (80017e4 <MX_FMC_Init+0x94>)
 800177c:	2204      	movs	r2, #4
 800177e:	60da      	str	r2, [r3, #12]
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 8001780:	4b18      	ldr	r3, [pc, #96]	; (80017e4 <MX_FMC_Init+0x94>)
 8001782:	2210      	movs	r2, #16
 8001784:	611a      	str	r2, [r3, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001786:	4b17      	ldr	r3, [pc, #92]	; (80017e4 <MX_FMC_Init+0x94>)
 8001788:	2240      	movs	r2, #64	; 0x40
 800178a:	615a      	str	r2, [r3, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 800178c:	4b15      	ldr	r3, [pc, #84]	; (80017e4 <MX_FMC_Init+0x94>)
 800178e:	2280      	movs	r2, #128	; 0x80
 8001790:	619a      	str	r2, [r3, #24]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001792:	4b14      	ldr	r3, [pc, #80]	; (80017e4 <MX_FMC_Init+0x94>)
 8001794:	2200      	movs	r2, #0
 8001796:	61da      	str	r2, [r3, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8001798:	4b12      	ldr	r3, [pc, #72]	; (80017e4 <MX_FMC_Init+0x94>)
 800179a:	2200      	movs	r2, #0
 800179c:	621a      	str	r2, [r3, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 80017a4:	4b0f      	ldr	r3, [pc, #60]	; (80017e4 <MX_FMC_Init+0x94>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 80017aa:	2310      	movs	r3, #16
 80017ac:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 80017ae:	2310      	movs	r3, #16
 80017b0:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 80017b2:	2310      	movs	r3, #16
 80017b4:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 80017b6:	2310      	movs	r3, #16
 80017b8:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 80017ba:	2310      	movs	r3, #16
 80017bc:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 80017be:	2310      	movs	r3, #16
 80017c0:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 80017c2:	2310      	movs	r3, #16
 80017c4:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80017c6:	1d3b      	adds	r3, r7, #4
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	; (80017e4 <MX_FMC_Init+0x94>)
 80017cc:	f007 fb96 	bl	8008efc <HAL_SDRAM_Init>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 80017d6:	f000 fcf9 	bl	80021cc <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 80017da:	bf00      	nop
 80017dc:	3720      	adds	r7, #32
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20008b68 	.word	0x20008b68
 80017e8:	a0000140 	.word	0xa0000140

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b090      	sub	sp, #64	; 0x40
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
 8001800:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001802:	4bb0      	ldr	r3, [pc, #704]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001806:	4aaf      	ldr	r2, [pc, #700]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001808:	f043 0310 	orr.w	r3, r3, #16
 800180c:	6313      	str	r3, [r2, #48]	; 0x30
 800180e:	4bad      	ldr	r3, [pc, #692]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001812:	f003 0310 	and.w	r3, r3, #16
 8001816:	62bb      	str	r3, [r7, #40]	; 0x28
 8001818:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	4baa      	ldr	r3, [pc, #680]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800181c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800181e:	4aa9      	ldr	r2, [pc, #676]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6313      	str	r3, [r2, #48]	; 0x30
 8001826:	4ba7      	ldr	r3, [pc, #668]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	627b      	str	r3, [r7, #36]	; 0x24
 8001830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001832:	4ba4      	ldr	r3, [pc, #656]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001836:	4aa3      	ldr	r2, [pc, #652]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001838:	f043 0301 	orr.w	r3, r3, #1
 800183c:	6313      	str	r3, [r2, #48]	; 0x30
 800183e:	4ba1      	ldr	r3, [pc, #644]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001842:	f003 0301 	and.w	r3, r3, #1
 8001846:	623b      	str	r3, [r7, #32]
 8001848:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800184a:	4b9e      	ldr	r3, [pc, #632]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800184e:	4a9d      	ldr	r2, [pc, #628]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001854:	6313      	str	r3, [r2, #48]	; 0x30
 8001856:	4b9b      	ldr	r3, [pc, #620]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800185a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185e:	61fb      	str	r3, [r7, #28]
 8001860:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001862:	4b98      	ldr	r3, [pc, #608]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001866:	4a97      	ldr	r2, [pc, #604]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001868:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800186c:	6313      	str	r3, [r2, #48]	; 0x30
 800186e:	4b95      	ldr	r3, [pc, #596]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001876:	61bb      	str	r3, [r7, #24]
 8001878:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800187a:	4b92      	ldr	r3, [pc, #584]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a91      	ldr	r2, [pc, #580]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001880:	f043 0308 	orr.w	r3, r3, #8
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b8f      	ldr	r3, [pc, #572]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0308 	and.w	r3, r3, #8
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001892:	4b8c      	ldr	r3, [pc, #560]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a8b      	ldr	r2, [pc, #556]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001898:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b89      	ldr	r3, [pc, #548]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80018a6:	613b      	str	r3, [r7, #16]
 80018a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 80018aa:	4b86      	ldr	r3, [pc, #536]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ae:	4a85      	ldr	r2, [pc, #532]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018b4:	6313      	str	r3, [r2, #48]	; 0x30
 80018b6:	4b83      	ldr	r3, [pc, #524]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018be:	60fb      	str	r3, [r7, #12]
 80018c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018c2:	4b80      	ldr	r3, [pc, #512]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c6:	4a7f      	ldr	r2, [pc, #508]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018c8:	f043 0304 	orr.w	r3, r3, #4
 80018cc:	6313      	str	r3, [r2, #48]	; 0x30
 80018ce:	4b7d      	ldr	r3, [pc, #500]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	f003 0304 	and.w	r3, r3, #4
 80018d6:	60bb      	str	r3, [r7, #8]
 80018d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80018da:	4b7a      	ldr	r3, [pc, #488]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	4a79      	ldr	r2, [pc, #484]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e0:	f043 0320 	orr.w	r3, r3, #32
 80018e4:	6313      	str	r3, [r2, #48]	; 0x30
 80018e6:	4b77      	ldr	r3, [pc, #476]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ea:	f003 0320 	and.w	r3, r3, #32
 80018ee:	607b      	str	r3, [r7, #4]
 80018f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018f2:	4b74      	ldr	r3, [pc, #464]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a73      	ldr	r2, [pc, #460]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b71      	ldr	r3, [pc, #452]	; (8001ac4 <MX_GPIO_Init+0x2d8>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800190a:	2200      	movs	r2, #0
 800190c:	2110      	movs	r1, #16
 800190e:	486e      	ldr	r0, [pc, #440]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 8001910:	f004 fcf6 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED14_Pin|LED15_Pin, GPIO_PIN_RESET);
 8001914:	2200      	movs	r2, #0
 8001916:	2160      	movs	r1, #96	; 0x60
 8001918:	486c      	ldr	r0, [pc, #432]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800191a:	f004 fcf1 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800191e:	2201      	movs	r2, #1
 8001920:	2120      	movs	r1, #32
 8001922:	486b      	ldr	r0, [pc, #428]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001924:	f004 fcec 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED16_GPIO_Port, LED16_Pin, GPIO_PIN_RESET);
 8001928:	2200      	movs	r2, #0
 800192a:	2108      	movs	r1, #8
 800192c:	4868      	ldr	r0, [pc, #416]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 800192e:	f004 fce7 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED3_GPIO_Port, LED3_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	2108      	movs	r1, #8
 8001936:	4867      	ldr	r0, [pc, #412]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001938:	f004 fce2 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_Port, LCD_BL_CTRL_Pin, GPIO_PIN_SET);
 800193c:	2201      	movs	r2, #1
 800193e:	2108      	movs	r1, #8
 8001940:	4865      	ldr	r0, [pc, #404]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001942:	f004 fcdd 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_Port, LCD_DISP_Pin, GPIO_PIN_SET);
 8001946:	2201      	movs	r2, #1
 8001948:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800194c:	4861      	ldr	r0, [pc, #388]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 800194e:	f004 fcd7 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOH, LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001952:	2200      	movs	r2, #0
 8001954:	f645 6140 	movw	r1, #24128	; 0x5e40
 8001958:	4860      	ldr	r0, [pc, #384]	; (8001adc <MX_GPIO_Init+0x2f0>)
 800195a:	f004 fcd1 	bl	8006300 <HAL_GPIO_WritePin>
                          |LED2_Pin|LED18_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(EXT_RST_GPIO_Port, EXT_RST_Pin, GPIO_PIN_RESET);
 800195e:	2200      	movs	r2, #0
 8001960:	2108      	movs	r1, #8
 8001962:	485f      	ldr	r0, [pc, #380]	; (8001ae0 <MX_GPIO_Init+0x2f4>)
 8001964:	f004 fccc 	bl	8006300 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001968:	2308      	movs	r3, #8
 800196a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001974:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001978:	4619      	mov	r1, r3
 800197a:	4854      	ldr	r0, [pc, #336]	; (8001acc <MX_GPIO_Init+0x2e0>)
 800197c:	f004 f9f0 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_D7_Pin ULPI_D6_Pin ULPI_D5_Pin ULPI_D2_Pin
                           ULPI_D1_Pin ULPI_D4_Pin */
  GPIO_InitStruct.Pin = ULPI_D7_Pin|ULPI_D6_Pin|ULPI_D5_Pin|ULPI_D2_Pin
 8001980:	f643 0323 	movw	r3, #14371	; 0x3823
 8001984:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |ULPI_D1_Pin|ULPI_D4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800198e:	2303      	movs	r3, #3
 8001990:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001992:	230a      	movs	r3, #10
 8001994:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001996:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800199a:	4619      	mov	r1, r3
 800199c:	484a      	ldr	r0, [pc, #296]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 800199e:	f004 f9df 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80019a2:	2310      	movs	r3, #16
 80019a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a6:	2301      	movs	r3, #1
 80019a8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80019b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019b6:	4619      	mov	r1, r3
 80019b8:	4843      	ldr	r0, [pc, #268]	; (8001ac8 <MX_GPIO_Init+0x2dc>)
 80019ba:	f004 f9d1 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP2_Pin BP1_Pin */
  GPIO_InitStruct.Pin = BP2_Pin|BP1_Pin;
 80019be:	f44f 4301 	mov.w	r3, #33024	; 0x8100
 80019c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019c4:	2300      	movs	r3, #0
 80019c6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c8:	2300      	movs	r3, #0
 80019ca:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019cc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019d0:	4619      	mov	r1, r3
 80019d2:	4844      	ldr	r0, [pc, #272]	; (8001ae4 <MX_GPIO_Init+0x2f8>)
 80019d4:	f004 f9c4 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED14_Pin LED15_Pin */
  GPIO_InitStruct.Pin = LED14_Pin|LED15_Pin;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019dc:	2301      	movs	r3, #1
 80019de:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e4:	2300      	movs	r3, #0
 80019e6:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80019ec:	4619      	mov	r1, r3
 80019ee:	4837      	ldr	r0, [pc, #220]	; (8001acc <MX_GPIO_Init+0x2e0>)
 80019f0:	f004 f9b6 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_VBUS_Pin;
 80019f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fa:	2300      	movs	r3, #0
 80019fc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fe:	2300      	movs	r3, #0
 8001a00:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a02:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a06:	4619      	mov	r1, r3
 8001a08:	4837      	ldr	r0, [pc, #220]	; (8001ae8 <MX_GPIO_Init+0x2fc>)
 8001a0a:	f004 f9a9 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_INT_Pin */
  GPIO_InitStruct.Pin = Audio_INT_Pin;
 8001a0e:	2340      	movs	r3, #64	; 0x40
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001a12:	4b36      	ldr	r3, [pc, #216]	; (8001aec <MX_GPIO_Init+0x300>)
 8001a14:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(Audio_INT_GPIO_Port, &GPIO_InitStruct);
 8001a1a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a1e:	4619      	mov	r1, r3
 8001a20:	482b      	ldr	r0, [pc, #172]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a22:	f004 f99d 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin LED16_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|LED16_Pin;
 8001a26:	2328      	movs	r3, #40	; 0x28
 8001a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2e:	2300      	movs	r3, #0
 8001a30:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a32:	2300      	movs	r3, #0
 8001a34:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a36:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	4824      	ldr	r0, [pc, #144]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001a3e:	f004 f98f 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED3_Pin LCD_DISP_Pin */
  GPIO_InitStruct.Pin = LED3_Pin|LCD_DISP_Pin;
 8001a42:	f241 0308 	movw	r3, #4104	; 0x1008
 8001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a48:	2301      	movs	r3, #1
 8001a4a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a50:	2300      	movs	r3, #0
 8001a52:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	481e      	ldr	r0, [pc, #120]	; (8001ad4 <MX_GPIO_Init+0x2e8>)
 8001a5c:	f004 f980 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : uSD_Detect_Pin */
  GPIO_InitStruct.Pin = uSD_Detect_Pin;
 8001a60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a66:	2300      	movs	r3, #0
 8001a68:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(uSD_Detect_GPIO_Port, &GPIO_InitStruct);
 8001a6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a72:	4619      	mov	r1, r3
 8001a74:	481e      	ldr	r0, [pc, #120]	; (8001af0 <MX_GPIO_Init+0x304>)
 8001a76:	f004 f973 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_CTRL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_CTRL_Pin;
 8001a7a:	2308      	movs	r3, #8
 8001a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a7e:	2301      	movs	r3, #1
 8001a80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a82:	2300      	movs	r3, #0
 8001a84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a86:	2300      	movs	r3, #0
 8001a88:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_Port, &GPIO_InitStruct);
 8001a8a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001a8e:	4619      	mov	r1, r3
 8001a90:	4811      	ldr	r0, [pc, #68]	; (8001ad8 <MX_GPIO_Init+0x2ec>)
 8001a92:	f004 f965 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8001a96:	2310      	movs	r3, #16
 8001a98:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001aa2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4809      	ldr	r0, [pc, #36]	; (8001ad0 <MX_GPIO_Init+0x2e4>)
 8001aaa:	f004 f959 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : TP3_Pin NC2_Pin */
  GPIO_InitStruct.Pin = TP3_Pin|NC2_Pin;
 8001aae:	f248 0304 	movw	r3, #32772	; 0x8004
 8001ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001abc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	e017      	b.n	8001af4 <MX_GPIO_Init+0x308>
 8001ac4:	40023800 	.word	0x40023800
 8001ac8:	40020400 	.word	0x40020400
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40020c00 	.word	0x40020c00
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40022800 	.word	0x40022800
 8001adc:	40021c00 	.word	0x40021c00
 8001ae0:	40021800 	.word	0x40021800
 8001ae4:	40020000 	.word	0x40020000
 8001ae8:	40022400 	.word	0x40022400
 8001aec:	10120000 	.word	0x10120000
 8001af0:	40020800 	.word	0x40020800
 8001af4:	4836      	ldr	r0, [pc, #216]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001af6:	f004 f933 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED13_Pin LED17_Pin LED11_Pin LED12_Pin
                           LED2_Pin LED18_Pin */
  GPIO_InitStruct.Pin = LED13_Pin|LED17_Pin|LED11_Pin|LED12_Pin
 8001afa:	f645 6340 	movw	r3, #24128	; 0x5e40
 8001afe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |LED2_Pin|LED18_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b00:	2301      	movs	r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b04:	2300      	movs	r3, #0
 8001b06:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001b0c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b10:	4619      	mov	r1, r3
 8001b12:	482f      	ldr	r0, [pc, #188]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b14:	f004 f924 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 8001b18:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001b1e:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <MX_GPIO_Init+0x3e8>)
 8001b20:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 8001b26:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	482a      	ldr	r0, [pc, #168]	; (8001bd8 <MX_GPIO_Init+0x3ec>)
 8001b2e:	f004 f917 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : ULPI_NXT_Pin */
  GPIO_InitStruct.Pin = ULPI_NXT_Pin;
 8001b32:	2310      	movs	r3, #16
 8001b34:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b36:	2302      	movs	r3, #2
 8001b38:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b42:	230a      	movs	r3, #10
 8001b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(ULPI_NXT_GPIO_Port, &GPIO_InitStruct);
 8001b46:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b4a:	4619      	mov	r1, r3
 8001b4c:	4820      	ldr	r0, [pc, #128]	; (8001bd0 <MX_GPIO_Init+0x3e4>)
 8001b4e:	f004 f907 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : BP_JOYSTICK_Pin RMII_RXER_Pin */
  GPIO_InitStruct.Pin = BP_JOYSTICK_Pin|RMII_RXER_Pin;
 8001b52:	2384      	movs	r3, #132	; 0x84
 8001b54:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001b56:	2300      	movs	r3, #0
 8001b58:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001b5e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b62:	4619      	mov	r1, r3
 8001b64:	481d      	ldr	r0, [pc, #116]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001b66:	f004 f8fb 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_STP_Pin ULPI_DIR_Pin */
  GPIO_InitStruct.Pin = ULPI_STP_Pin|ULPI_DIR_Pin;
 8001b6a:	2305      	movs	r3, #5
 8001b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b6e:	2302      	movs	r3, #2
 8001b70:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b72:	2300      	movs	r3, #0
 8001b74:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b76:	2303      	movs	r3, #3
 8001b78:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001b7a:	230a      	movs	r3, #10
 8001b7c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b7e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b82:	4619      	mov	r1, r3
 8001b84:	4816      	ldr	r0, [pc, #88]	; (8001be0 <MX_GPIO_Init+0x3f4>)
 8001b86:	f004 f8eb 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pin : EXT_RST_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin;
 8001b8a:	2308      	movs	r3, #8
 8001b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b92:	2300      	movs	r3, #0
 8001b94:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b96:	2300      	movs	r3, #0
 8001b98:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(EXT_RST_GPIO_Port, &GPIO_InitStruct);
 8001b9a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	480e      	ldr	r0, [pc, #56]	; (8001bdc <MX_GPIO_Init+0x3f0>)
 8001ba2:	f004 f8dd 	bl	8005d60 <HAL_GPIO_Init>

  /*Configure GPIO pins : ULPI_CLK_Pin ULPI_D0_Pin */
  GPIO_InitStruct.Pin = ULPI_CLK_Pin|ULPI_D0_Pin;
 8001ba6:	2328      	movs	r3, #40	; 0x28
 8001ba8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001baa:	2302      	movs	r3, #2
 8001bac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001bb2:	2303      	movs	r3, #3
 8001bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8001bb6:	230a      	movs	r3, #10
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bba:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bbe:	4619      	mov	r1, r3
 8001bc0:	4808      	ldr	r0, [pc, #32]	; (8001be4 <MX_GPIO_Init+0x3f8>)
 8001bc2:	f004 f8cd 	bl	8005d60 <HAL_GPIO_Init>

}
 8001bc6:	bf00      	nop
 8001bc8:	3740      	adds	r7, #64	; 0x40
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	bd80      	pop	{r7, pc}
 8001bce:	bf00      	nop
 8001bd0:	40021c00 	.word	0x40021c00
 8001bd4:	10120000 	.word	0x10120000
 8001bd8:	40022000 	.word	0x40022000
 8001bdc:	40021800 	.word	0x40021800
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020000 	.word	0x40020000

08001be8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b084      	sub	sp, #16
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
	uint16_t x_ballemaster;
	//Réception du rayon de la balle, des coordonnées de la balle, du drapeau de perte
	r_balle = rxbuffer[0];
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b29a      	uxth	r2, r3
 8001bf6:	4b19      	ldr	r3, [pc, #100]	; (8001c5c <HAL_UART_RxCpltCallback+0x74>)
 8001bf8:	801a      	strh	r2, [r3, #0]
	x_ballemaster = (((uint16_t)rxbuffer[1] << 8) | rxbuffer[2]);
 8001bfa:	4b17      	ldr	r3, [pc, #92]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001bfc:	785b      	ldrb	r3, [r3, #1]
 8001bfe:	021b      	lsls	r3, r3, #8
 8001c00:	b21a      	sxth	r2, r3
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c04:	789b      	ldrb	r3, [r3, #2]
 8001c06:	b21b      	sxth	r3, r3
 8001c08:	4313      	orrs	r3, r2
 8001c0a:	b21b      	sxth	r3, r3
 8001c0c:	81fb      	strh	r3, [r7, #14]
	y_balle = (((uint16_t)rxbuffer[3] << 8) | rxbuffer[4]);
 8001c0e:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c10:	78db      	ldrb	r3, [r3, #3]
 8001c12:	021b      	lsls	r3, r3, #8
 8001c14:	b21a      	sxth	r2, r3
 8001c16:	4b10      	ldr	r3, [pc, #64]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c18:	791b      	ldrb	r3, [r3, #4]
 8001c1a:	b21b      	sxth	r3, r3
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	b29a      	uxth	r2, r3
 8001c22:	4b0f      	ldr	r3, [pc, #60]	; (8001c60 <HAL_UART_RxCpltCallback+0x78>)
 8001c24:	801a      	strh	r2, [r3, #0]
	lost = rxbuffer[5];
 8001c26:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c28:	795b      	ldrb	r3, [r3, #5]
 8001c2a:	b25a      	sxtb	r2, r3
 8001c2c:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <HAL_UART_RxCpltCallback+0x7c>)
 8001c2e:	701a      	strb	r2, [r3, #0]

	//Offset et cadrage des coordonées de la raquette droite
	x_balle = x_ballemaster-480;
 8001c30:	89fb      	ldrh	r3, [r7, #14]
 8001c32:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c36:	b29b      	uxth	r3, r3
 8001c38:	b21a      	sxth	r2, r3
 8001c3a:	4b0b      	ldr	r3, [pc, #44]	; (8001c68 <HAL_UART_RxCpltCallback+0x80>)
 8001c3c:	801a      	strh	r2, [r3, #0]
	r_balle = 8; //Forçage temporaire
 8001c3e:	4b07      	ldr	r3, [pc, #28]	; (8001c5c <HAL_UART_RxCpltCallback+0x74>)
 8001c40:	2208      	movs	r2, #8
 8001c42:	801a      	strh	r2, [r3, #0]

	//Attente d'une nouvelle réception sur interruption
	HAL_UART_Receive_IT(&huart7, rxbuffer, 6);
 8001c44:	2206      	movs	r2, #6
 8001c46:	4904      	ldr	r1, [pc, #16]	; (8001c58 <HAL_UART_RxCpltCallback+0x70>)
 8001c48:	4808      	ldr	r0, [pc, #32]	; (8001c6c <HAL_UART_RxCpltCallback+0x84>)
 8001c4a:	f008 fc55 	bl	800a4f8 <HAL_UART_Receive_IT>

}
 8001c4e:	bf00      	nop
 8001c50:	3710      	adds	r7, #16
 8001c52:	46bd      	mov	sp, r7
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	20008ba0 	.word	0x20008ba0
 8001c5c:	20000030 	.word	0x20000030
 8001c60:	2000002e 	.word	0x2000002e
 8001c64:	200002d2 	.word	0x200002d2
 8001c68:	2000002c 	.word	0x2000002c
 8001c6c:	2000869c 	.word	0x2000869c

08001c70 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(200);
 8001c78:	20c8      	movs	r0, #200	; 0xc8
 8001c7a:	f009 fd18 	bl	800b6ae <osDelay>
 8001c7e:	e7fb      	b.n	8001c78 <StartDefaultTask+0x8>

08001c80 <StartRRacket>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartRRacket */
void StartRRacket(void const * argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b08a      	sub	sp, #40	; 0x28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartRRacket */

	//Initialisation des variables pour le joystick
	int32_t joystick_h, joystick_v;
	joystick_h = 0;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	623b      	str	r3, [r7, #32]
	joystick_v = 0;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	61fb      	str	r3, [r7, #28]

	//Initialisation du stockage des coordonnées de la raquette droite
	int16_t x_RRacket_hold =479-50-width_rackets/2;
 8001c90:	f240 13a9 	movw	r3, #425	; 0x1a9
 8001c94:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t y_RRacket_hold = 136-height_rackets/2;
 8001c96:	236f      	movs	r3, #111	; 0x6f
 8001c98:	84bb      	strh	r3, [r7, #36]	; 0x24

	//Initialisation du CAN du joystick (ADC_CHANNEL_8)
	ADC_ChannelConfTypeDef sConfig = { 0 };
 8001c9a:	f107 030c 	add.w	r3, r7, #12
 8001c9e:	2200      	movs	r2, #0
 8001ca0:	601a      	str	r2, [r3, #0]
 8001ca2:	605a      	str	r2, [r3, #4]
 8001ca4:	609a      	str	r2, [r3, #8]
 8001ca6:	60da      	str	r2, [r3, #12]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	613b      	str	r3, [r7, #16]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001cac:	2300      	movs	r3, #0
 8001cae:	617b      	str	r3, [r7, #20]
	HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cb0:	f107 030c 	add.w	r3, r7, #12
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	4871      	ldr	r0, [pc, #452]	; (8001e7c <StartRRacket+0x1fc>)
 8001cb8:	f002 fff2 	bl	8004ca0 <HAL_ADC_ConfigChannel>

	/* Infinite loop */
	for(;;){
		//Capture des valeurs des joysticks sur ADC_CHANNEL_8
		sConfig.Channel = ADC_CHANNEL_8;
 8001cbc:	2308      	movs	r3, #8
 8001cbe:	60fb      	str	r3, [r7, #12]
		HAL_ADC_ConfigChannel(&hadc3, &sConfig);
 8001cc0:	f107 030c 	add.w	r3, r7, #12
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	486d      	ldr	r0, [pc, #436]	; (8001e7c <StartRRacket+0x1fc>)
 8001cc8:	f002 ffea 	bl	8004ca0 <HAL_ADC_ConfigChannel>
		HAL_ADC_Start(&hadc3);
 8001ccc:	486b      	ldr	r0, [pc, #428]	; (8001e7c <StartRRacket+0x1fc>)
 8001cce:	f002 fe95 	bl	80049fc <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc3, 100) != HAL_OK)
 8001cd2:	bf00      	nop
 8001cd4:	2164      	movs	r1, #100	; 0x64
 8001cd6:	4869      	ldr	r0, [pc, #420]	; (8001e7c <StartRRacket+0x1fc>)
 8001cd8:	f002 ff50 	bl	8004b7c <HAL_ADC_PollForConversion>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d1f8      	bne.n	8001cd4 <StartRRacket+0x54>
			;
		joystick_v = HAL_ADC_GetValue(&hadc3);
 8001ce2:	4866      	ldr	r0, [pc, #408]	; (8001e7c <StartRRacket+0x1fc>)
 8001ce4:	f002 ffce 	bl	8004c84 <HAL_ADC_GetValue>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	61fb      	str	r3, [r7, #28]
		HAL_ADC_Start(&hadc1);
 8001cec:	4864      	ldr	r0, [pc, #400]	; (8001e80 <StartRRacket+0x200>)
 8001cee:	f002 fe85 	bl	80049fc <HAL_ADC_Start>
		while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK)
 8001cf2:	bf00      	nop
 8001cf4:	2164      	movs	r1, #100	; 0x64
 8001cf6:	4862      	ldr	r0, [pc, #392]	; (8001e80 <StartRRacket+0x200>)
 8001cf8:	f002 ff40 	bl	8004b7c <HAL_ADC_PollForConversion>
 8001cfc:	4603      	mov	r3, r0
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d1f8      	bne.n	8001cf4 <StartRRacket+0x74>
			;
		joystick_h = HAL_ADC_GetValue(&hadc1);
 8001d02:	485f      	ldr	r0, [pc, #380]	; (8001e80 <StartRRacket+0x200>)
 8001d04:	f002 ffbe 	bl	8004c84 <HAL_ADC_GetValue>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	623b      	str	r3, [r7, #32]

		//Actualisation des coordonnées de la raquette droite, le joystick
		//horizontal nécessite une corrcetion pour ne pas dériver
		x_RRacket -= (joystick_h - 2018)/250;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	f2a3 73e2 	subw	r3, r3, #2018	; 0x7e2
 8001d12:	4a5c      	ldr	r2, [pc, #368]	; (8001e84 <StartRRacket+0x204>)
 8001d14:	fb82 1203 	smull	r1, r2, r2, r3
 8001d18:	1112      	asrs	r2, r2, #4
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	1a9b      	subs	r3, r3, r2
 8001d1e:	b29a      	uxth	r2, r3
 8001d20:	4b59      	ldr	r3, [pc, #356]	; (8001e88 <StartRRacket+0x208>)
 8001d22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d26:	b29b      	uxth	r3, r3
 8001d28:	4413      	add	r3, r2
 8001d2a:	b29b      	uxth	r3, r3
 8001d2c:	b21a      	sxth	r2, r3
 8001d2e:	4b56      	ldr	r3, [pc, #344]	; (8001e88 <StartRRacket+0x208>)
 8001d30:	801a      	strh	r2, [r3, #0]
		y_RRacket -= (joystick_v - 2080)/150;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	f5a3 6302 	sub.w	r3, r3, #2080	; 0x820
 8001d38:	4a54      	ldr	r2, [pc, #336]	; (8001e8c <StartRRacket+0x20c>)
 8001d3a:	fb82 1203 	smull	r1, r2, r2, r3
 8001d3e:	1112      	asrs	r2, r2, #4
 8001d40:	17db      	asrs	r3, r3, #31
 8001d42:	1a9b      	subs	r3, r3, r2
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b52      	ldr	r3, [pc, #328]	; (8001e90 <StartRRacket+0x210>)
 8001d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	4413      	add	r3, r2
 8001d50:	b29b      	uxth	r3, r3
 8001d52:	b21a      	sxth	r2, r3
 8001d54:	4b4e      	ldr	r3, [pc, #312]	; (8001e90 <StartRRacket+0x210>)
 8001d56:	801a      	strh	r2, [r3, #0]

		// Cadrage des coordonnées RRacket
		if (x_RRacket <= 240) x_RRacket = 240;
 8001d58:	4b4b      	ldr	r3, [pc, #300]	; (8001e88 <StartRRacket+0x208>)
 8001d5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d5e:	2bf0      	cmp	r3, #240	; 0xf0
 8001d60:	dc02      	bgt.n	8001d68 <StartRRacket+0xe8>
 8001d62:	4b49      	ldr	r3, [pc, #292]	; (8001e88 <StartRRacket+0x208>)
 8001d64:	22f0      	movs	r2, #240	; 0xf0
 8001d66:	801a      	strh	r2, [r3, #0]
		if (x_RRacket >= 479 - width_rackets) x_RRacket = 479 - width_rackets;
 8001d68:	4b47      	ldr	r3, [pc, #284]	; (8001e88 <StartRRacket+0x208>)
 8001d6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d6e:	f5b3 7feb 	cmp.w	r3, #470	; 0x1d6
 8001d72:	dd03      	ble.n	8001d7c <StartRRacket+0xfc>
 8001d74:	4b44      	ldr	r3, [pc, #272]	; (8001e88 <StartRRacket+0x208>)
 8001d76:	f240 12d7 	movw	r2, #471	; 0x1d7
 8001d7a:	801a      	strh	r2, [r3, #0]
		if (y_RRacket <= 0) y_RRacket = 0;
 8001d7c:	4b44      	ldr	r3, [pc, #272]	; (8001e90 <StartRRacket+0x210>)
 8001d7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	dc02      	bgt.n	8001d8c <StartRRacket+0x10c>
 8001d86:	4b42      	ldr	r3, [pc, #264]	; (8001e90 <StartRRacket+0x210>)
 8001d88:	2200      	movs	r2, #0
 8001d8a:	801a      	strh	r2, [r3, #0]
		if (y_RRacket + height_rackets >= 272) y_RRacket = 272 - height_rackets;
 8001d8c:	4b40      	ldr	r3, [pc, #256]	; (8001e90 <StartRRacket+0x210>)
 8001d8e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d92:	2bdd      	cmp	r3, #221	; 0xdd
 8001d94:	dd02      	ble.n	8001d9c <StartRRacket+0x11c>
 8001d96:	4b3e      	ldr	r3, [pc, #248]	; (8001e90 <StartRRacket+0x210>)
 8001d98:	22de      	movs	r2, #222	; 0xde
 8001d9a:	801a      	strh	r2, [r3, #0]

		//Tracé de RRacket
		//Accaparement de la ressource
		xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001d9c:	4b3d      	ldr	r3, [pc, #244]	; (8001e94 <StartRRacket+0x214>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	f04f 31ff 	mov.w	r1, #4294967295
 8001da4:	4618      	mov	r0, r3
 8001da6:	f00a f82b 	bl	800be00 <xQueueSemaphoreTake>

		//Effaçage du précedent rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001daa:	4b3b      	ldr	r3, [pc, #236]	; (8001e98 <StartRRacket+0x218>)
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d102      	bne.n	8001db8 <StartRRacket+0x138>
 8001db2:	f04f 33ff 	mov.w	r3, #4294967295
 8001db6:	e001      	b.n	8001dbc <StartRRacket+0x13c>
 8001db8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f000 fcb7 	bl	8002730 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket_hold, y_RRacket_hold, width_rackets,
 8001dc2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8001dc4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001dc6:	2332      	movs	r3, #50	; 0x32
 8001dc8:	2208      	movs	r2, #8
 8001dca:	f001 f8bb 	bl	8002f44 <BSP_LCD_FillRect>
				height_rackets);

		//Création du nouveau rectangle
		BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001dce:	4b32      	ldr	r3, [pc, #200]	; (8001e98 <StartRRacket+0x218>)
 8001dd0:	781b      	ldrb	r3, [r3, #0]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d102      	bne.n	8001ddc <StartRRacket+0x15c>
 8001dd6:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001dda:	e001      	b.n	8001de0 <StartRRacket+0x160>
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	4618      	mov	r0, r3
 8001de2:	f000 fca5 	bl	8002730 <BSP_LCD_SetTextColor>
		BSP_LCD_FillRect(x_RRacket, y_RRacket, width_rackets, height_rackets);
 8001de6:	4b28      	ldr	r3, [pc, #160]	; (8001e88 <StartRRacket+0x208>)
 8001de8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dec:	b298      	uxth	r0, r3
 8001dee:	4b28      	ldr	r3, [pc, #160]	; (8001e90 <StartRRacket+0x210>)
 8001df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001df4:	b299      	uxth	r1, r3
 8001df6:	2332      	movs	r3, #50	; 0x32
 8001df8:	2208      	movs	r2, #8
 8001dfa:	f001 f8a3 	bl	8002f44 <BSP_LCD_FillRect>

		//Libération de la ressource
		xSemaphoreGive(myMutex_LCDHandle);
 8001dfe:	4b25      	ldr	r3, [pc, #148]	; (8001e94 <StartRRacket+0x214>)
 8001e00:	6818      	ldr	r0, [r3, #0]
 8001e02:	2300      	movs	r3, #0
 8001e04:	2200      	movs	r2, #0
 8001e06:	2100      	movs	r1, #0
 8001e08:	f009 fef4 	bl	800bbf4 <xQueueGenericSend>

		if((x_RRacket!=x_RRacket_hold) || (y_RRacket!=y_RRacket_hold)){
 8001e0c:	4b1e      	ldr	r3, [pc, #120]	; (8001e88 <StartRRacket+0x208>)
 8001e0e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e12:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	; 0x26
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d106      	bne.n	8001e28 <StartRRacket+0x1a8>
 8001e1a:	4b1d      	ldr	r3, [pc, #116]	; (8001e90 <StartRRacket+0x210>)
 8001e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e20:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	; 0x24
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d01e      	beq.n	8001e66 <StartRRacket+0x1e6>
			//Si la raquette a bougé, on envoie les nouvelles coordonnées par liaison série
			txbuffer[0]=(x_RRacket & 0xFF00) >> 8;
 8001e28:	4b17      	ldr	r3, [pc, #92]	; (8001e88 <StartRRacket+0x208>)
 8001e2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2e:	121b      	asrs	r3, r3, #8
 8001e30:	b2da      	uxtb	r2, r3
 8001e32:	4b1a      	ldr	r3, [pc, #104]	; (8001e9c <StartRRacket+0x21c>)
 8001e34:	701a      	strb	r2, [r3, #0]
			txbuffer[1]= x_RRacket & 0x00FF;
 8001e36:	4b14      	ldr	r3, [pc, #80]	; (8001e88 <StartRRacket+0x208>)
 8001e38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e3c:	b2da      	uxtb	r2, r3
 8001e3e:	4b17      	ldr	r3, [pc, #92]	; (8001e9c <StartRRacket+0x21c>)
 8001e40:	705a      	strb	r2, [r3, #1]
			txbuffer[2]=(y_RRacket & 0xFF00) >> 8;
 8001e42:	4b13      	ldr	r3, [pc, #76]	; (8001e90 <StartRRacket+0x210>)
 8001e44:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e48:	121b      	asrs	r3, r3, #8
 8001e4a:	b2da      	uxtb	r2, r3
 8001e4c:	4b13      	ldr	r3, [pc, #76]	; (8001e9c <StartRRacket+0x21c>)
 8001e4e:	709a      	strb	r2, [r3, #2]
			txbuffer[3]=y_RRacket & 0x00FF;
 8001e50:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <StartRRacket+0x210>)
 8001e52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e56:	b2da      	uxtb	r2, r3
 8001e58:	4b10      	ldr	r3, [pc, #64]	; (8001e9c <StartRRacket+0x21c>)
 8001e5a:	70da      	strb	r2, [r3, #3]

			HAL_UART_Transmit_IT(&huart7,txbuffer,4);
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	490f      	ldr	r1, [pc, #60]	; (8001e9c <StartRRacket+0x21c>)
 8001e60:	480f      	ldr	r0, [pc, #60]	; (8001ea0 <StartRRacket+0x220>)
 8001e62:	f008 faed 	bl	800a440 <HAL_UART_Transmit_IT>
		}


		//Stockage des dernières coordonnées de la raquette droite
		x_RRacket_hold = x_RRacket;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <StartRRacket+0x208>)
 8001e68:	881b      	ldrh	r3, [r3, #0]
 8001e6a:	84fb      	strh	r3, [r7, #38]	; 0x26
		y_RRacket_hold = y_RRacket;
 8001e6c:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <StartRRacket+0x210>)
 8001e6e:	881b      	ldrh	r3, [r3, #0]
 8001e70:	84bb      	strh	r3, [r7, #36]	; 0x24
		osDelay(40);
 8001e72:	2028      	movs	r0, #40	; 0x28
 8001e74:	f009 fc1b 	bl	800b6ae <osDelay>
		sConfig.Channel = ADC_CHANNEL_8;
 8001e78:	e720      	b.n	8001cbc <StartRRacket+0x3c>
 8001e7a:	bf00      	nop
 8001e7c:	20008918 	.word	0x20008918
 8001e80:	200088d0 	.word	0x200088d0
 8001e84:	10624dd3 	.word	0x10624dd3
 8001e88:	20000028 	.word	0x20000028
 8001e8c:	1b4e81b5 	.word	0x1b4e81b5
 8001e90:	2000002a 	.word	0x2000002a
 8001e94:	20008b9c 	.word	0x20008b9c
 8001e98:	20000032 	.word	0x20000032
 8001e9c:	20008a5c 	.word	0x20008a5c
 8001ea0:	2000869c 	.word	0x2000869c

08001ea4 <StartBall>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBall */
void StartBall(void const * argument)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b092      	sub	sp, #72	; 0x48
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBall */

	//Initialisation de la régularité de lancement de la tache
	TickType_t xFrequency=15;
 8001eac:	230f      	movs	r3, #15
 8001eae:	643b      	str	r3, [r7, #64]	; 0x40
	TickType_t xLastWakeTime=xTaskGetTickCount();
 8001eb0:	f00a fd2c 	bl	800c90c <xTaskGetTickCount>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	63fb      	str	r3, [r7, #60]	; 0x3c

	//Initialisation des anciennes coordonnées de la balle
	int16_t x_balle_hold = 8;
 8001eb8:	2308      	movs	r3, #8
 8001eba:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	int16_t y_balle_hold = 136;
 8001ebe:	2388      	movs	r3, #136	; 0x88
 8001ec0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
  /* Infinite loop */
  for(;;)
  {
	  if(lost != 0){
 8001ec4:	4b73      	ldr	r3, [pc, #460]	; (8002094 <StartBall+0x1f0>)
 8001ec6:	f993 3000 	ldrsb.w	r3, [r3]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d020      	beq.n	8001f10 <StartBall+0x6c>
		  //Si la balle touche le bord gauche de l'écran, on a perdu
		  //Capture de la ressource
		  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001ece:	4b72      	ldr	r3, [pc, #456]	; (8002098 <StartBall+0x1f4>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f04f 31ff 	mov.w	r1, #4294967295
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f009 ff92 	bl	800be00 <xQueueSemaphoreTake>

		  //Affichage du message de perte sous le chronomètre
		  if(lost==1)
 8001edc:	4b6d      	ldr	r3, [pc, #436]	; (8002094 <StartBall+0x1f0>)
 8001ede:	f993 3000 	ldrsb.w	r3, [r3]
 8001ee2:	2b01      	cmp	r3, #1
 8001ee4:	d103      	bne.n	8001eee <StartBall+0x4a>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Perdu");
 8001ee6:	496d      	ldr	r1, [pc, #436]	; (800209c <StartBall+0x1f8>)
 8001ee8:	2002      	movs	r0, #2
 8001eea:	f000 fdb7 	bl	8002a5c <BSP_LCD_DisplayStringAtLine>
		  if(lost==2)
 8001eee:	4b69      	ldr	r3, [pc, #420]	; (8002094 <StartBall+0x1f0>)
 8001ef0:	f993 3000 	ldrsb.w	r3, [r3]
 8001ef4:	2b02      	cmp	r3, #2
 8001ef6:	d103      	bne.n	8001f00 <StartBall+0x5c>
			  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "Gagne");
 8001ef8:	4969      	ldr	r1, [pc, #420]	; (80020a0 <StartBall+0x1fc>)
 8001efa:	2002      	movs	r0, #2
 8001efc:	f000 fdae 	bl	8002a5c <BSP_LCD_DisplayStringAtLine>

		  //Libération de la ressource
		  xSemaphoreGive(myMutex_LCDHandle);
 8001f00:	4b65      	ldr	r3, [pc, #404]	; (8002098 <StartBall+0x1f4>)
 8001f02:	6818      	ldr	r0, [r3, #0]
 8001f04:	2300      	movs	r3, #0
 8001f06:	2200      	movs	r2, #0
 8001f08:	2100      	movs	r1, #0
 8001f0a:	f009 fe73 	bl	800bbf4 <xQueueGenericSend>
 8001f0e:	e011      	b.n	8001f34 <StartBall+0x90>
	  }
	  else {
		  //Capture de la ressource
		  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f10:	4b61      	ldr	r3, [pc, #388]	; (8002098 <StartBall+0x1f4>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f04f 31ff 	mov.w	r1, #4294967295
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f009 ff71 	bl	800be00 <xQueueSemaphoreTake>

		  //Effaçage
		  BSP_LCD_DisplayStringAtLine(2, (uint8_t*) "     ");
 8001f1e:	4961      	ldr	r1, [pc, #388]	; (80020a4 <StartBall+0x200>)
 8001f20:	2002      	movs	r0, #2
 8001f22:	f000 fd9b 	bl	8002a5c <BSP_LCD_DisplayStringAtLine>

		  //Libération de la ressource
		  xSemaphoreGive(myMutex_LCDHandle);
 8001f26:	4b5c      	ldr	r3, [pc, #368]	; (8002098 <StartBall+0x1f4>)
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	2100      	movs	r1, #0
 8001f30:	f009 fe60 	bl	800bbf4 <xQueueGenericSend>
	  }

	  //Capture de la ressource
	  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8001f34:	4b58      	ldr	r3, [pc, #352]	; (8002098 <StartBall+0x1f4>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f04f 31ff 	mov.w	r1, #4294967295
 8001f3c:	4618      	mov	r0, r3
 8001f3e:	f009 ff5f 	bl	800be00 <xQueueSemaphoreTake>

	  //Effaçage des anciens dessins
	  if(x_balle_hold >= 0){
 8001f42:	f9b7 3046 	ldrsh.w	r3, [r7, #70]	; 0x46
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	db15      	blt.n	8001f76 <StartBall+0xd2>
		  //Effaçage de l'ancienne balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f4a:	4b57      	ldr	r3, [pc, #348]	; (80020a8 <StartBall+0x204>)
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d102      	bne.n	8001f58 <StartBall+0xb4>
 8001f52:	f04f 33ff 	mov.w	r3, #4294967295
 8001f56:	e001      	b.n	8001f5c <StartBall+0xb8>
 8001f58:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f5c:	4618      	mov	r0, r3
 8001f5e:	f000 fbe7 	bl	8002730 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle_hold, y_balle_hold, r_balle);
 8001f62:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8001f66:	f8b7 1044 	ldrh.w	r1, [r7, #68]	; 0x44
 8001f6a:	4a50      	ldr	r2, [pc, #320]	; (80020ac <StartBall+0x208>)
 8001f6c:	8812      	ldrh	r2, [r2, #0]
 8001f6e:	4618      	mov	r0, r3
 8001f70:	f001 f862 	bl	8003038 <BSP_LCD_FillCircle>
 8001f74:	e02c      	b.n	8001fd0 <StartBall+0x12c>
	  }
	  else{
		  //Effaçage de l'ancien triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_WHITE:LCD_COLOR_BLACK);
 8001f76:	4b4c      	ldr	r3, [pc, #304]	; (80020a8 <StartBall+0x204>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d102      	bne.n	8001f84 <StartBall+0xe0>
 8001f7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f82:	e001      	b.n	8001f88 <StartBall+0xe4>
 8001f84:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001f88:	4618      	mov	r0, r3
 8001f8a:	f000 fbd1 	bl	8002730 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle_hold+3};
 8001f8e:	2306      	movs	r3, #6
 8001f90:	873b      	strh	r3, [r7, #56]	; 0x38
 8001f92:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001f96:	3303      	adds	r3, #3
 8001f98:	b29b      	uxth	r3, r3
 8001f9a:	b21b      	sxth	r3, r3
 8001f9c:	877b      	strh	r3, [r7, #58]	; 0x3a
		  Point Point2 = {0,y_balle_hold};
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	86bb      	strh	r3, [r7, #52]	; 0x34
 8001fa2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fa6:	86fb      	strh	r3, [r7, #54]	; 0x36
		  Point Point3 = {6,y_balle_hold-3};
 8001fa8:	2306      	movs	r3, #6
 8001faa:	863b      	strh	r3, [r7, #48]	; 0x30
 8001fac:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8001fb0:	3b03      	subs	r3, #3
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	867b      	strh	r3, [r7, #50]	; 0x32

		  Point Points[3] = {Point1, Point2, Point3};
 8001fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
 8001fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001fc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
		  BSP_LCD_FillPolygon(Points,3);
 8001fc4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc8:	2103      	movs	r1, #3
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f001 f8d4 	bl	8003178 <BSP_LCD_FillPolygon>
	  }

	  //Affichage des nouveaux dessins
	  if(x_balle >= 0){
 8001fd0:	4b37      	ldr	r3, [pc, #220]	; (80020b0 <StartBall+0x20c>)
 8001fd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	db17      	blt.n	800200a <StartBall+0x166>
		  //Affichage de la nouvelle balle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 8001fda:	4b33      	ldr	r3, [pc, #204]	; (80020a8 <StartBall+0x204>)
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d102      	bne.n	8001fe8 <StartBall+0x144>
 8001fe2:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8001fe6:	e001      	b.n	8001fec <StartBall+0x148>
 8001fe8:	f04f 33ff 	mov.w	r3, #4294967295
 8001fec:	4618      	mov	r0, r3
 8001fee:	f000 fb9f 	bl	8002730 <BSP_LCD_SetTextColor>
		  BSP_LCD_FillCircle(x_balle, y_balle, r_balle);
 8001ff2:	4b2f      	ldr	r3, [pc, #188]	; (80020b0 <StartBall+0x20c>)
 8001ff4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ff8:	b29b      	uxth	r3, r3
 8001ffa:	4a2e      	ldr	r2, [pc, #184]	; (80020b4 <StartBall+0x210>)
 8001ffc:	8811      	ldrh	r1, [r2, #0]
 8001ffe:	4a2b      	ldr	r2, [pc, #172]	; (80020ac <StartBall+0x208>)
 8002000:	8812      	ldrh	r2, [r2, #0]
 8002002:	4618      	mov	r0, r3
 8002004:	f001 f818 	bl	8003038 <BSP_LCD_FillCircle>
 8002008:	e02d      	b.n	8002066 <StartBall+0x1c2>
	  }
	  else{
		  //Affichage du nouveau triangle
		  BSP_LCD_SetTextColor(couleur==0?LCD_COLOR_BLACK:LCD_COLOR_WHITE);
 800200a:	4b27      	ldr	r3, [pc, #156]	; (80020a8 <StartBall+0x204>)
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d102      	bne.n	8002018 <StartBall+0x174>
 8002012:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8002016:	e001      	b.n	800201c <StartBall+0x178>
 8002018:	f04f 33ff 	mov.w	r3, #4294967295
 800201c:	4618      	mov	r0, r3
 800201e:	f000 fb87 	bl	8002730 <BSP_LCD_SetTextColor>
		  Point Point1 = {6,y_balle+3};
 8002022:	2306      	movs	r3, #6
 8002024:	843b      	strh	r3, [r7, #32]
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <StartBall+0x210>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	3303      	adds	r3, #3
 800202c:	b29b      	uxth	r3, r3
 800202e:	b21b      	sxth	r3, r3
 8002030:	847b      	strh	r3, [r7, #34]	; 0x22
		  Point Point2 = {0,y_balle};
 8002032:	2300      	movs	r3, #0
 8002034:	83bb      	strh	r3, [r7, #28]
 8002036:	4b1f      	ldr	r3, [pc, #124]	; (80020b4 <StartBall+0x210>)
 8002038:	881b      	ldrh	r3, [r3, #0]
 800203a:	b21b      	sxth	r3, r3
 800203c:	83fb      	strh	r3, [r7, #30]
		  Point Point3 = {6,y_balle-3};
 800203e:	2306      	movs	r3, #6
 8002040:	833b      	strh	r3, [r7, #24]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <StartBall+0x210>)
 8002044:	881b      	ldrh	r3, [r3, #0]
 8002046:	3b03      	subs	r3, #3
 8002048:	b29b      	uxth	r3, r3
 800204a:	b21b      	sxth	r3, r3
 800204c:	837b      	strh	r3, [r7, #26]

		  Point Points[3] = {Point1, Point2, Point3};
 800204e:	6a3b      	ldr	r3, [r7, #32]
 8002050:	60fb      	str	r3, [r7, #12]
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	69bb      	ldr	r3, [r7, #24]
 8002058:	617b      	str	r3, [r7, #20]
		  BSP_LCD_FillPolygon(Points,3);
 800205a:	f107 030c 	add.w	r3, r7, #12
 800205e:	2103      	movs	r1, #3
 8002060:	4618      	mov	r0, r3
 8002062:	f001 f889 	bl	8003178 <BSP_LCD_FillPolygon>
	  }

	  //Libération de la ressource
	 xSemaphoreGive(myMutex_LCDHandle);
 8002066:	4b0c      	ldr	r3, [pc, #48]	; (8002098 <StartBall+0x1f4>)
 8002068:	6818      	ldr	r0, [r3, #0]
 800206a:	2300      	movs	r3, #0
 800206c:	2200      	movs	r2, #0
 800206e:	2100      	movs	r1, #0
 8002070:	f009 fdc0 	bl	800bbf4 <xQueueGenericSend>

	 //Stockage du dernier emplacement de dessin
	 x_balle_hold=x_balle;
 8002074:	4b0e      	ldr	r3, [pc, #56]	; (80020b0 <StartBall+0x20c>)
 8002076:	881b      	ldrh	r3, [r3, #0]
 8002078:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	 y_balle_hold=y_balle;
 800207c:	4b0d      	ldr	r3, [pc, #52]	; (80020b4 <StartBall+0x210>)
 800207e:	881b      	ldrh	r3, [r3, #0]
 8002080:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44


	 vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8002084:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002088:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800208a:	4618      	mov	r0, r3
 800208c:	f00a fa74 	bl	800c578 <vTaskDelayUntil>
	  if(lost != 0){
 8002090:	e718      	b.n	8001ec4 <StartBall+0x20>
 8002092:	bf00      	nop
 8002094:	200002d2 	.word	0x200002d2
 8002098:	20008b9c 	.word	0x20008b9c
 800209c:	0800dcf8 	.word	0x0800dcf8
 80020a0:	0800dd00 	.word	0x0800dd00
 80020a4:	0800dd08 	.word	0x0800dd08
 80020a8:	20000032 	.word	0x20000032
 80020ac:	20000030 	.word	0x20000030
 80020b0:	2000002c 	.word	0x2000002c
 80020b4:	2000002e 	.word	0x2000002e

080020b8 <StartBgChanger>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartBgChanger */
void StartBgChanger(void const * argument)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartBgChanger */
	//Initialisation de l'état de BP1 et de l'état
	uint8_t BP1=1;
 80020c0:	2301      	movs	r3, #1
 80020c2:	73bb      	strb	r3, [r7, #14]
	uint8_t state=0;
 80020c4:	2300      	movs	r3, #0
 80020c6:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	  //Lecture de l'état du BP1
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 80020c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020cc:	4833      	ldr	r0, [pc, #204]	; (800219c <StartBgChanger+0xe4>)
 80020ce:	f004 f8ff 	bl	80062d0 <HAL_GPIO_ReadPin>
 80020d2:	4603      	mov	r3, r0
 80020d4:	73bb      	strb	r3, [r7, #14]

	  //Machine à états
	  switch(state){
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	2b02      	cmp	r3, #2
 80020da:	d052      	beq.n	8002182 <StartBgChanger+0xca>
 80020dc:	2b02      	cmp	r3, #2
 80020de:	dc59      	bgt.n	8002194 <StartBgChanger+0xdc>
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d002      	beq.n	80020ea <StartBgChanger+0x32>
 80020e4:	2b01      	cmp	r3, #1
 80020e6:	d006      	beq.n	80020f6 <StartBgChanger+0x3e>
 80020e8:	e054      	b.n	8002194 <StartBgChanger+0xdc>
		  case 0:
			  //Attente d'un changement d'état (d'un appui sur BP1)
			  if(!BP1) state = 1;
 80020ea:	7bbb      	ldrb	r3, [r7, #14]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d14e      	bne.n	800218e <StartBgChanger+0xd6>
 80020f0:	2301      	movs	r3, #1
 80020f2:	73fb      	strb	r3, [r7, #15]
			  break;
 80020f4:	e04b      	b.n	800218e <StartBgChanger+0xd6>
		  case 1:
			  //Changement de la couleur
			  couleur = !couleur;
 80020f6:	4b2a      	ldr	r3, [pc, #168]	; (80021a0 <StartBgChanger+0xe8>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	bf0c      	ite	eq
 80020fe:	2301      	moveq	r3, #1
 8002100:	2300      	movne	r3, #0
 8002102:	b2db      	uxtb	r3, r3
 8002104:	461a      	mov	r2, r3
 8002106:	4b26      	ldr	r3, [pc, #152]	; (80021a0 <StartBgChanger+0xe8>)
 8002108:	701a      	strb	r2, [r3, #0]
			  if(couleur==0){
 800210a:	4b25      	ldr	r3, [pc, #148]	; (80021a0 <StartBgChanger+0xe8>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	2b00      	cmp	r3, #0
 8002110:	d11a      	bne.n	8002148 <StartBgChanger+0x90>
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002112:	4b24      	ldr	r3, [pc, #144]	; (80021a4 <StartBgChanger+0xec>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f04f 31ff 	mov.w	r1, #4294967295
 800211a:	4618      	mov	r0, r3
 800211c:	f009 fe70 	bl	800be00 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en noir sur fond blanc
				  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8002120:	f04f 30ff 	mov.w	r0, #4294967295
 8002124:	f000 fb66 	bl	80027f4 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8002128:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800212c:	f000 fb00 	bl	8002730 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8002130:	f04f 30ff 	mov.w	r0, #4294967295
 8002134:	f000 fb14 	bl	8002760 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 8002138:	4b1a      	ldr	r3, [pc, #104]	; (80021a4 <StartBgChanger+0xec>)
 800213a:	6818      	ldr	r0, [r3, #0]
 800213c:	2300      	movs	r3, #0
 800213e:	2200      	movs	r2, #0
 8002140:	2100      	movs	r1, #0
 8002142:	f009 fd57 	bl	800bbf4 <xQueueGenericSend>
 8002146:	e019      	b.n	800217c <StartBgChanger+0xc4>
			  }
			  else{
				  //Capture de la ressource
				  xSemaphoreTake(myMutex_LCDHandle, portMAX_DELAY);
 8002148:	4b16      	ldr	r3, [pc, #88]	; (80021a4 <StartBgChanger+0xec>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f04f 31ff 	mov.w	r1, #4294967295
 8002150:	4618      	mov	r0, r3
 8002152:	f009 fe55 	bl	800be00 <xQueueSemaphoreTake>

				  //Nettoyage et recoloration du LCD en blanc sur fond noir
				  BSP_LCD_Clear(LCD_COLOR_BLACK);
 8002156:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800215a:	f000 fb4b 	bl	80027f4 <BSP_LCD_Clear>
				  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800215e:	f04f 30ff 	mov.w	r0, #4294967295
 8002162:	f000 fae5 	bl	8002730 <BSP_LCD_SetTextColor>
				  BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8002166:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800216a:	f000 faf9 	bl	8002760 <BSP_LCD_SetBackColor>

				  //Libération de la ressource
				  xSemaphoreGive(myMutex_LCDHandle);
 800216e:	4b0d      	ldr	r3, [pc, #52]	; (80021a4 <StartBgChanger+0xec>)
 8002170:	6818      	ldr	r0, [r3, #0]
 8002172:	2300      	movs	r3, #0
 8002174:	2200      	movs	r2, #0
 8002176:	2100      	movs	r1, #0
 8002178:	f009 fd3c 	bl	800bbf4 <xQueueGenericSend>
			  }

			  //Changement d'état
			  state = 2;
 800217c:	2302      	movs	r3, #2
 800217e:	73fb      	strb	r3, [r7, #15]
			  break;
 8002180:	e008      	b.n	8002194 <StartBgChanger+0xdc>
		  case 2:
			  //Attente d'un changement d'état (relachement du bouton BP1)
			  if(BP1) state = 0;
 8002182:	7bbb      	ldrb	r3, [r7, #14]
 8002184:	2b00      	cmp	r3, #0
 8002186:	d004      	beq.n	8002192 <StartBgChanger+0xda>
 8002188:	2300      	movs	r3, #0
 800218a:	73fb      	strb	r3, [r7, #15]
			  break;
 800218c:	e001      	b.n	8002192 <StartBgChanger+0xda>
			  break;
 800218e:	bf00      	nop
 8002190:	e000      	b.n	8002194 <StartBgChanger+0xdc>
			  break;
 8002192:	bf00      	nop
	  }
  osDelay(50);
 8002194:	2032      	movs	r0, #50	; 0x32
 8002196:	f009 fa8a 	bl	800b6ae <osDelay>
	  BP1 = HAL_GPIO_ReadPin(BP1_GPIO_Port, BP1_Pin);
 800219a:	e795      	b.n	80020c8 <StartBgChanger+0x10>
 800219c:	40020000 	.word	0x40020000
 80021a0:	20000032 	.word	0x20000032
 80021a4:	20008b9c 	.word	0x20008b9c

080021a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b082      	sub	sp, #8
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a04      	ldr	r2, [pc, #16]	; (80021c8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80021b6:	4293      	cmp	r3, r2
 80021b8:	d101      	bne.n	80021be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80021ba:	f002 fb97 	bl	80048ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80021be:	bf00      	nop
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40001000 	.word	0x40001000

080021cc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021d0:	b672      	cpsid	i
}
 80021d2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80021d4:	e7fe      	b.n	80021d4 <Error_Handler+0x8>
	...

080021d8 <I2Cx_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_MspInit(I2C_HandleTypeDef *i2c_handler)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b08c      	sub	sp, #48	; 0x30
 80021dc:	af00      	add	r7, sp, #0
 80021de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  
  if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a51      	ldr	r2, [pc, #324]	; (8002328 <I2Cx_MspInit+0x150>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d14d      	bne.n	8002284 <I2Cx_MspInit+0xac>
  {
    /* AUDIO and LCD I2C MSP init */

    /*** Configure the GPIOs ***/
    /* Enable GPIO clock */
    DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 80021e8:	4b50      	ldr	r3, [pc, #320]	; (800232c <I2Cx_MspInit+0x154>)
 80021ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ec:	4a4f      	ldr	r2, [pc, #316]	; (800232c <I2Cx_MspInit+0x154>)
 80021ee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80021f2:	6313      	str	r3, [r2, #48]	; 0x30
 80021f4:	4b4d      	ldr	r3, [pc, #308]	; (800232c <I2Cx_MspInit+0x154>)
 80021f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021fc:	61bb      	str	r3, [r7, #24]
 80021fe:	69bb      	ldr	r3, [r7, #24]

    /* Configure I2C Tx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SCL_PIN;
 8002200:	2380      	movs	r3, #128	; 0x80
 8002202:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 8002204:	2312      	movs	r3, #18
 8002206:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 800220c:	2302      	movs	r3, #2
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_AUDIO_I2Cx_SCL_SDA_AF;
 8002210:	2304      	movs	r3, #4
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4845      	ldr	r0, [pc, #276]	; (8002330 <I2Cx_MspInit+0x158>)
 800221c:	f003 fda0 	bl	8005d60 <HAL_GPIO_Init>

    /* Configure I2C Rx as alternate function */
    gpio_init_structure.Pin = DISCOVERY_AUDIO_I2Cx_SDA_PIN;
 8002220:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002224:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_AUDIO_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	4840      	ldr	r0, [pc, #256]	; (8002330 <I2Cx_MspInit+0x158>)
 800222e:	f003 fd97 	bl	8005d60 <HAL_GPIO_Init>

    /*** Configure the I2C peripheral ***/
    /* Enable I2C clock */
    DISCOVERY_AUDIO_I2Cx_CLK_ENABLE();
 8002232:	4b3e      	ldr	r3, [pc, #248]	; (800232c <I2Cx_MspInit+0x154>)
 8002234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002236:	4a3d      	ldr	r2, [pc, #244]	; (800232c <I2Cx_MspInit+0x154>)
 8002238:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800223c:	6413      	str	r3, [r2, #64]	; 0x40
 800223e:	4b3b      	ldr	r3, [pc, #236]	; (800232c <I2Cx_MspInit+0x154>)
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002246:	617b      	str	r3, [r7, #20]
 8002248:	697b      	ldr	r3, [r7, #20]

    /* Force the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_FORCE_RESET();
 800224a:	4b38      	ldr	r3, [pc, #224]	; (800232c <I2Cx_MspInit+0x154>)
 800224c:	6a1b      	ldr	r3, [r3, #32]
 800224e:	4a37      	ldr	r2, [pc, #220]	; (800232c <I2Cx_MspInit+0x154>)
 8002250:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002254:	6213      	str	r3, [r2, #32]

    /* Release the I2C peripheral clock reset */
    DISCOVERY_AUDIO_I2Cx_RELEASE_RESET();
 8002256:	4b35      	ldr	r3, [pc, #212]	; (800232c <I2Cx_MspInit+0x154>)
 8002258:	6a1b      	ldr	r3, [r3, #32]
 800225a:	4a34      	ldr	r2, [pc, #208]	; (800232c <I2Cx_MspInit+0x154>)
 800225c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002260:	6213      	str	r3, [r2, #32]

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_EV_IRQn, 0x0F, 0);
 8002262:	2200      	movs	r2, #0
 8002264:	210f      	movs	r1, #15
 8002266:	2048      	movs	r0, #72	; 0x48
 8002268:	f003 f816 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_EV_IRQn);
 800226c:	2048      	movs	r0, #72	; 0x48
 800226e:	f003 f82f 	bl	80052d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_AUDIO_I2Cx_ER_IRQn, 0x0F, 0);
 8002272:	2200      	movs	r2, #0
 8002274:	210f      	movs	r1, #15
 8002276:	2049      	movs	r0, #73	; 0x49
 8002278:	f003 f80e 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_AUDIO_I2Cx_ER_IRQn);
 800227c:	2049      	movs	r0, #73	; 0x49
 800227e:	f003 f827 	bl	80052d0 <HAL_NVIC_EnableIRQ>

    /* Enable and set I2Cx Interrupt to a lower priority */
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
  }
}
 8002282:	e04d      	b.n	8002320 <I2Cx_MspInit+0x148>
    DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_CLK_ENABLE();
 8002284:	4b29      	ldr	r3, [pc, #164]	; (800232c <I2Cx_MspInit+0x154>)
 8002286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002288:	4a28      	ldr	r2, [pc, #160]	; (800232c <I2Cx_MspInit+0x154>)
 800228a:	f043 0302 	orr.w	r3, r3, #2
 800228e:	6313      	str	r3, [r2, #48]	; 0x30
 8002290:	4b26      	ldr	r3, [pc, #152]	; (800232c <I2Cx_MspInit+0x154>)
 8002292:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002294:	f003 0302 	and.w	r3, r3, #2
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	693b      	ldr	r3, [r7, #16]
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SCL_PIN;
 800229c:	f44f 7380 	mov.w	r3, #256	; 0x100
 80022a0:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_AF_OD;
 80022a2:	2312      	movs	r3, #18
 80022a4:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull = GPIO_NOPULL;
 80022a6:	2300      	movs	r3, #0
 80022a8:	627b      	str	r3, [r7, #36]	; 0x24
    gpio_init_structure.Speed = GPIO_SPEED_FAST;
 80022aa:	2302      	movs	r3, #2
 80022ac:	62bb      	str	r3, [r7, #40]	; 0x28
    gpio_init_structure.Alternate = DISCOVERY_EXT_I2Cx_SCL_SDA_AF;
 80022ae:	2304      	movs	r3, #4
 80022b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022b2:	f107 031c 	add.w	r3, r7, #28
 80022b6:	4619      	mov	r1, r3
 80022b8:	481e      	ldr	r0, [pc, #120]	; (8002334 <I2Cx_MspInit+0x15c>)
 80022ba:	f003 fd51 	bl	8005d60 <HAL_GPIO_Init>
    gpio_init_structure.Pin = DISCOVERY_EXT_I2Cx_SDA_PIN;
 80022be:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(DISCOVERY_EXT_I2Cx_SCL_SDA_GPIO_PORT, &gpio_init_structure);
 80022c4:	f107 031c 	add.w	r3, r7, #28
 80022c8:	4619      	mov	r1, r3
 80022ca:	481a      	ldr	r0, [pc, #104]	; (8002334 <I2Cx_MspInit+0x15c>)
 80022cc:	f003 fd48 	bl	8005d60 <HAL_GPIO_Init>
    DISCOVERY_EXT_I2Cx_CLK_ENABLE();
 80022d0:	4b16      	ldr	r3, [pc, #88]	; (800232c <I2Cx_MspInit+0x154>)
 80022d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d4:	4a15      	ldr	r2, [pc, #84]	; (800232c <I2Cx_MspInit+0x154>)
 80022d6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022da:	6413      	str	r3, [r2, #64]	; 0x40
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <I2Cx_MspInit+0x154>)
 80022de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022e0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]
    DISCOVERY_EXT_I2Cx_FORCE_RESET();
 80022e8:	4b10      	ldr	r3, [pc, #64]	; (800232c <I2Cx_MspInit+0x154>)
 80022ea:	6a1b      	ldr	r3, [r3, #32]
 80022ec:	4a0f      	ldr	r2, [pc, #60]	; (800232c <I2Cx_MspInit+0x154>)
 80022ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80022f2:	6213      	str	r3, [r2, #32]
    DISCOVERY_EXT_I2Cx_RELEASE_RESET();
 80022f4:	4b0d      	ldr	r3, [pc, #52]	; (800232c <I2Cx_MspInit+0x154>)
 80022f6:	6a1b      	ldr	r3, [r3, #32]
 80022f8:	4a0c      	ldr	r2, [pc, #48]	; (800232c <I2Cx_MspInit+0x154>)
 80022fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022fe:	6213      	str	r3, [r2, #32]
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_EV_IRQn, 0x0F, 0);
 8002300:	2200      	movs	r2, #0
 8002302:	210f      	movs	r1, #15
 8002304:	201f      	movs	r0, #31
 8002306:	f002 ffc7 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_EV_IRQn);
 800230a:	201f      	movs	r0, #31
 800230c:	f002 ffe0 	bl	80052d0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_EXT_I2Cx_ER_IRQn, 0x0F, 0);
 8002310:	2200      	movs	r2, #0
 8002312:	210f      	movs	r1, #15
 8002314:	2020      	movs	r0, #32
 8002316:	f002 ffbf 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_EXT_I2Cx_ER_IRQn);
 800231a:	2020      	movs	r0, #32
 800231c:	f002 ffd8 	bl	80052d0 <HAL_NVIC_EnableIRQ>
}
 8002320:	bf00      	nop
 8002322:	3730      	adds	r7, #48	; 0x30
 8002324:	46bd      	mov	sp, r7
 8002326:	bd80      	pop	{r7, pc}
 8002328:	200002d4 	.word	0x200002d4
 800232c:	40023800 	.word	0x40023800
 8002330:	40021c00 	.word	0x40021c00
 8002334:	40020400 	.word	0x40020400

08002338 <I2Cx_Init>:
  * @brief  Initializes I2C HAL.
  * @param  i2c_handler : I2C handler
  * @retval None
  */
static void I2Cx_Init(I2C_HandleTypeDef *i2c_handler)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  if(HAL_I2C_GetState(i2c_handler) == HAL_I2C_STATE_RESET)
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 fae5 	bl	8006910 <HAL_I2C_GetState>
 8002346:	4603      	mov	r3, r0
 8002348:	2b00      	cmp	r3, #0
 800234a:	d125      	bne.n	8002398 <I2Cx_Init+0x60>
  {
    if (i2c_handler == (I2C_HandleTypeDef*)(&hI2cAudioHandler))
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	4a14      	ldr	r2, [pc, #80]	; (80023a0 <I2Cx_Init+0x68>)
 8002350:	4293      	cmp	r3, r2
 8002352:	d103      	bne.n	800235c <I2Cx_Init+0x24>
    {
      /* Audio and LCD I2C configuration */
      i2c_handler->Instance = DISCOVERY_AUDIO_I2Cx;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	4a13      	ldr	r2, [pc, #76]	; (80023a4 <I2Cx_Init+0x6c>)
 8002358:	601a      	str	r2, [r3, #0]
 800235a:	e002      	b.n	8002362 <I2Cx_Init+0x2a>
    }
    else
    {
      /* External, camera and Arduino connector  I2C configuration */
      i2c_handler->Instance = DISCOVERY_EXT_I2Cx;
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a12      	ldr	r2, [pc, #72]	; (80023a8 <I2Cx_Init+0x70>)
 8002360:	601a      	str	r2, [r3, #0]
    }
    i2c_handler->Init.Timing           = DISCOVERY_I2Cx_TIMING;
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	4a11      	ldr	r2, [pc, #68]	; (80023ac <I2Cx_Init+0x74>)
 8002366:	605a      	str	r2, [r3, #4]
    i2c_handler->Init.OwnAddress1      = 0;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	2200      	movs	r2, #0
 800236c:	609a      	str	r2, [r3, #8]
    i2c_handler->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2201      	movs	r2, #1
 8002372:	60da      	str	r2, [r3, #12]
    i2c_handler->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2200      	movs	r2, #0
 8002378:	611a      	str	r2, [r3, #16]
    i2c_handler->Init.OwnAddress2      = 0;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2200      	movs	r2, #0
 800237e:	615a      	str	r2, [r3, #20]
    i2c_handler->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	2200      	movs	r2, #0
 8002384:	61da      	str	r2, [r3, #28]
    i2c_handler->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	621a      	str	r2, [r3, #32]

    /* Init the I2C */
    I2Cx_MspInit(i2c_handler);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f7ff ff23 	bl	80021d8 <I2Cx_MspInit>
    HAL_I2C_Init(i2c_handler);
 8002392:	6878      	ldr	r0, [r7, #4]
 8002394:	f003 ffce 	bl	8006334 <HAL_I2C_Init>
  }
}
 8002398:	bf00      	nop
 800239a:	3708      	adds	r7, #8
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	200002d4 	.word	0x200002d4
 80023a4:	40005c00 	.word	0x40005c00
 80023a8:	40005400 	.word	0x40005400
 80023ac:	40912732 	.word	0x40912732

080023b0 <I2Cx_ReadMultiple>:
                                           uint8_t Addr,
                                           uint16_t Reg,
                                           uint16_t MemAddress,
                                           uint8_t *Buffer,
                                           uint16_t Length)
{
 80023b0:	b580      	push	{r7, lr}
 80023b2:	b08a      	sub	sp, #40	; 0x28
 80023b4:	af04      	add	r7, sp, #16
 80023b6:	60f8      	str	r0, [r7, #12]
 80023b8:	4608      	mov	r0, r1
 80023ba:	4611      	mov	r1, r2
 80023bc:	461a      	mov	r2, r3
 80023be:	4603      	mov	r3, r0
 80023c0:	72fb      	strb	r3, [r7, #11]
 80023c2:	460b      	mov	r3, r1
 80023c4:	813b      	strh	r3, [r7, #8]
 80023c6:	4613      	mov	r3, r2
 80023c8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	75fb      	strb	r3, [r7, #23]

  status = HAL_I2C_Mem_Read(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 80023ce:	7afb      	ldrb	r3, [r7, #11]
 80023d0:	b299      	uxth	r1, r3
 80023d2:	88f8      	ldrh	r0, [r7, #6]
 80023d4:	893a      	ldrh	r2, [r7, #8]
 80023d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80023da:	9302      	str	r3, [sp, #8]
 80023dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80023de:	9301      	str	r3, [sp, #4]
 80023e0:	6a3b      	ldr	r3, [r7, #32]
 80023e2:	9300      	str	r3, [sp, #0]
 80023e4:	4603      	mov	r3, r0
 80023e6:	68f8      	ldr	r0, [r7, #12]
 80023e8:	f004 f978 	bl	80066dc <HAL_I2C_Mem_Read>
 80023ec:	4603      	mov	r3, r0
 80023ee:	75fb      	strb	r3, [r7, #23]

  /* Check the communication status */
  if(status != HAL_OK)
 80023f0:	7dfb      	ldrb	r3, [r7, #23]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <I2Cx_ReadMultiple+0x50>
  {
    /* I2C error occurred */
    I2Cx_Error(i2c_handler, Addr);
 80023f6:	7afb      	ldrb	r3, [r7, #11]
 80023f8:	4619      	mov	r1, r3
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f000 f832 	bl	8002464 <I2Cx_Error>
  }
  return status;    
 8002400:	7dfb      	ldrb	r3, [r7, #23]
}
 8002402:	4618      	mov	r0, r3
 8002404:	3718      	adds	r7, #24
 8002406:	46bd      	mov	sp, r7
 8002408:	bd80      	pop	{r7, pc}

0800240a <I2Cx_WriteMultiple>:
                                            uint8_t Addr,
                                            uint16_t Reg,
                                            uint16_t MemAddress,
                                            uint8_t *Buffer,
                                            uint16_t Length)
{
 800240a:	b580      	push	{r7, lr}
 800240c:	b08a      	sub	sp, #40	; 0x28
 800240e:	af04      	add	r7, sp, #16
 8002410:	60f8      	str	r0, [r7, #12]
 8002412:	4608      	mov	r0, r1
 8002414:	4611      	mov	r1, r2
 8002416:	461a      	mov	r2, r3
 8002418:	4603      	mov	r3, r0
 800241a:	72fb      	strb	r3, [r7, #11]
 800241c:	460b      	mov	r3, r1
 800241e:	813b      	strh	r3, [r7, #8]
 8002420:	4613      	mov	r3, r2
 8002422:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status = HAL_OK;
 8002424:	2300      	movs	r3, #0
 8002426:	75fb      	strb	r3, [r7, #23]
  
  status = HAL_I2C_Mem_Write(i2c_handler, Addr, (uint16_t)Reg, MemAddress, Buffer, Length, 1000);
 8002428:	7afb      	ldrb	r3, [r7, #11]
 800242a:	b299      	uxth	r1, r3
 800242c:	88f8      	ldrh	r0, [r7, #6]
 800242e:	893a      	ldrh	r2, [r7, #8]
 8002430:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002434:	9302      	str	r3, [sp, #8]
 8002436:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002438:	9301      	str	r3, [sp, #4]
 800243a:	6a3b      	ldr	r3, [r7, #32]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	4603      	mov	r3, r0
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f004 f837 	bl	80064b4 <HAL_I2C_Mem_Write>
 8002446:	4603      	mov	r3, r0
 8002448:	75fb      	strb	r3, [r7, #23]
  
  /* Check the communication status */
  if(status != HAL_OK)
 800244a:	7dfb      	ldrb	r3, [r7, #23]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d004      	beq.n	800245a <I2Cx_WriteMultiple+0x50>
  {
    /* Re-Initiaize the I2C Bus */
    I2Cx_Error(i2c_handler, Addr);
 8002450:	7afb      	ldrb	r3, [r7, #11]
 8002452:	4619      	mov	r1, r3
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f000 f805 	bl	8002464 <I2Cx_Error>
  }
  return status;
 800245a:	7dfb      	ldrb	r3, [r7, #23]
}
 800245c:	4618      	mov	r0, r3
 800245e:	3718      	adds	r7, #24
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}

08002464 <I2Cx_Error>:
  * @param  i2c_handler : I2C handler
  * @param  Addr: I2C Address
  * @retval None
  */
static void I2Cx_Error(I2C_HandleTypeDef *i2c_handler, uint8_t Addr)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b082      	sub	sp, #8
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	460b      	mov	r3, r1
 800246e:	70fb      	strb	r3, [r7, #3]
  /* De-initialize the I2C communication bus */
  HAL_I2C_DeInit(i2c_handler);
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f003 ffef 	bl	8006454 <HAL_I2C_DeInit>
  
  /* Re-Initialize the I2C communication bus */
  I2Cx_Init(i2c_handler);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f7ff ff5e 	bl	8002338 <I2Cx_Init>
}
 800247c:	bf00      	nop
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <TS_IO_Init>:
/**
  * @brief  Initializes Touchscreen low level.
  * @retval None
  */
void TS_IO_Init(void)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	af00      	add	r7, sp, #0
  I2Cx_Init(&hI2cAudioHandler);
 8002488:	4802      	ldr	r0, [pc, #8]	; (8002494 <TS_IO_Init+0x10>)
 800248a:	f7ff ff55 	bl	8002338 <I2Cx_Init>
}
 800248e:	bf00      	nop
 8002490:	bd80      	pop	{r7, pc}
 8002492:	bf00      	nop
 8002494:	200002d4 	.word	0x200002d4

08002498 <TS_IO_Write>:
  * @param  Reg: Reg address
  * @param  Value: Data to be written
  * @retval None
  */
void TS_IO_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af02      	add	r7, sp, #8
 800249e:	4603      	mov	r3, r0
 80024a0:	71fb      	strb	r3, [r7, #7]
 80024a2:	460b      	mov	r3, r1
 80024a4:	71bb      	strb	r3, [r7, #6]
 80024a6:	4613      	mov	r3, r2
 80024a8:	717b      	strb	r3, [r7, #5]
  I2Cx_WriteMultiple(&hI2cAudioHandler, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT,(uint8_t*)&Value, 1);
 80024aa:	79bb      	ldrb	r3, [r7, #6]
 80024ac:	b29a      	uxth	r2, r3
 80024ae:	79f9      	ldrb	r1, [r7, #7]
 80024b0:	2301      	movs	r3, #1
 80024b2:	9301      	str	r3, [sp, #4]
 80024b4:	1d7b      	adds	r3, r7, #5
 80024b6:	9300      	str	r3, [sp, #0]
 80024b8:	2301      	movs	r3, #1
 80024ba:	4803      	ldr	r0, [pc, #12]	; (80024c8 <TS_IO_Write+0x30>)
 80024bc:	f7ff ffa5 	bl	800240a <I2Cx_WriteMultiple>
}
 80024c0:	bf00      	nop
 80024c2:	3708      	adds	r7, #8
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	200002d4 	.word	0x200002d4

080024cc <TS_IO_Read>:
  * @param  Addr: I2C address
  * @param  Reg: Reg address
  * @retval Data to be read
  */
uint8_t TS_IO_Read(uint8_t Addr, uint8_t Reg)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	4603      	mov	r3, r0
 80024d4:	460a      	mov	r2, r1
 80024d6:	71fb      	strb	r3, [r7, #7]
 80024d8:	4613      	mov	r3, r2
 80024da:	71bb      	strb	r3, [r7, #6]
  uint8_t read_value = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	73fb      	strb	r3, [r7, #15]

  I2Cx_ReadMultiple(&hI2cAudioHandler, Addr, Reg, I2C_MEMADD_SIZE_8BIT, (uint8_t*)&read_value, 1);
 80024e0:	79bb      	ldrb	r3, [r7, #6]
 80024e2:	b29a      	uxth	r2, r3
 80024e4:	79f9      	ldrb	r1, [r7, #7]
 80024e6:	2301      	movs	r3, #1
 80024e8:	9301      	str	r3, [sp, #4]
 80024ea:	f107 030f 	add.w	r3, r7, #15
 80024ee:	9300      	str	r3, [sp, #0]
 80024f0:	2301      	movs	r3, #1
 80024f2:	4804      	ldr	r0, [pc, #16]	; (8002504 <TS_IO_Read+0x38>)
 80024f4:	f7ff ff5c 	bl	80023b0 <I2Cx_ReadMultiple>

  return read_value;
 80024f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3710      	adds	r7, #16
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200002d4 	.word	0x200002d4

08002508 <TS_IO_Delay>:
  * @brief  TS delay
  * @param  Delay: Delay in ms
  * @retval None
  */
void TS_IO_Delay(uint32_t Delay)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 8002510:	6878      	ldr	r0, [r7, #4]
 8002512:	f002 fa0b 	bl	800492c <HAL_Delay>
}
 8002516:	bf00      	nop
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}
	...

08002520 <BSP_LCD_Init>:
/**
  * @brief  Initializes the LCD.
  * @retval LCD state
  */
uint8_t BSP_LCD_Init(void)
{    
 8002520:	b580      	push	{r7, lr}
 8002522:	af00      	add	r7, sp, #0
  /* Select the used LCD */

  /* The RK043FN48H LCD 480x272 is selected */
  /* Timing Configuration */
  hLtdcHandler.Init.HorizontalSync = (RK043FN48H_HSYNC - 1);
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002526:	2228      	movs	r2, #40	; 0x28
 8002528:	615a      	str	r2, [r3, #20]
  hLtdcHandler.Init.VerticalSync = (RK043FN48H_VSYNC - 1);
 800252a:	4b30      	ldr	r3, [pc, #192]	; (80025ec <BSP_LCD_Init+0xcc>)
 800252c:	2209      	movs	r2, #9
 800252e:	619a      	str	r2, [r3, #24]
  hLtdcHandler.Init.AccumulatedHBP = (RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002530:	4b2e      	ldr	r3, [pc, #184]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002532:	2235      	movs	r2, #53	; 0x35
 8002534:	61da      	str	r2, [r3, #28]
  hLtdcHandler.Init.AccumulatedVBP = (RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 8002536:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002538:	220b      	movs	r2, #11
 800253a:	621a      	str	r2, [r3, #32]
  hLtdcHandler.Init.AccumulatedActiveH = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP - 1);
 800253c:	4b2b      	ldr	r3, [pc, #172]	; (80025ec <BSP_LCD_Init+0xcc>)
 800253e:	f240 121b 	movw	r2, #283	; 0x11b
 8002542:	629a      	str	r2, [r3, #40]	; 0x28
  hLtdcHandler.Init.AccumulatedActiveW = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP - 1);
 8002544:	4b29      	ldr	r3, [pc, #164]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002546:	f240 2215 	movw	r2, #533	; 0x215
 800254a:	625a      	str	r2, [r3, #36]	; 0x24
  hLtdcHandler.Init.TotalHeigh = (RK043FN48H_HEIGHT + RK043FN48H_VSYNC + RK043FN48H_VBP + RK043FN48H_VFP - 1);
 800254c:	4b27      	ldr	r3, [pc, #156]	; (80025ec <BSP_LCD_Init+0xcc>)
 800254e:	f240 121d 	movw	r2, #285	; 0x11d
 8002552:	631a      	str	r2, [r3, #48]	; 0x30
  hLtdcHandler.Init.TotalWidth = (RK043FN48H_WIDTH + RK043FN48H_HSYNC + RK043FN48H_HBP + RK043FN48H_HFP - 1);
 8002554:	4b25      	ldr	r3, [pc, #148]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002556:	f240 2235 	movw	r2, #565	; 0x235
 800255a:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* LCD clock configuration */
  BSP_LCD_ClockConfig(&hLtdcHandler, NULL);
 800255c:	2100      	movs	r1, #0
 800255e:	4823      	ldr	r0, [pc, #140]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002560:	f000 ffe6 	bl	8003530 <BSP_LCD_ClockConfig>

  /* Initialize the LCD pixel width and pixel height */
  hLtdcHandler.LayerCfg->ImageWidth  = RK043FN48H_WIDTH;
 8002564:	4b21      	ldr	r3, [pc, #132]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002566:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800256a:	661a      	str	r2, [r3, #96]	; 0x60
  hLtdcHandler.LayerCfg->ImageHeight = RK043FN48H_HEIGHT;
 800256c:	4b1f      	ldr	r3, [pc, #124]	; (80025ec <BSP_LCD_Init+0xcc>)
 800256e:	f44f 7288 	mov.w	r2, #272	; 0x110
 8002572:	665a      	str	r2, [r3, #100]	; 0x64

  /* Background value */
  hLtdcHandler.Init.Backcolor.Blue = 0;
 8002574:	4b1d      	ldr	r3, [pc, #116]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hLtdcHandler.Init.Backcolor.Green = 0;
 800257c:	4b1b      	ldr	r3, [pc, #108]	; (80025ec <BSP_LCD_Init+0xcc>)
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  hLtdcHandler.Init.Backcolor.Red = 0;
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002586:	2200      	movs	r2, #0
 8002588:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
  
  /* Polarity */
  hLtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800258c:	4b17      	ldr	r3, [pc, #92]	; (80025ec <BSP_LCD_Init+0xcc>)
 800258e:	2200      	movs	r2, #0
 8002590:	605a      	str	r2, [r3, #4]
  hLtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL; 
 8002592:	4b16      	ldr	r3, [pc, #88]	; (80025ec <BSP_LCD_Init+0xcc>)
 8002594:	2200      	movs	r2, #0
 8002596:	609a      	str	r2, [r3, #8]
  hLtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;  
 8002598:	4b14      	ldr	r3, [pc, #80]	; (80025ec <BSP_LCD_Init+0xcc>)
 800259a:	2200      	movs	r2, #0
 800259c:	60da      	str	r2, [r3, #12]
  hLtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800259e:	4b13      	ldr	r3, [pc, #76]	; (80025ec <BSP_LCD_Init+0xcc>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	611a      	str	r2, [r3, #16]
  hLtdcHandler.Instance = LTDC;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <BSP_LCD_Init+0xcc>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <BSP_LCD_Init+0xd0>)
 80025a8:	601a      	str	r2, [r3, #0]

  if(HAL_LTDC_GetState(&hLtdcHandler) == HAL_LTDC_STATE_RESET)
 80025aa:	4810      	ldr	r0, [pc, #64]	; (80025ec <BSP_LCD_Init+0xcc>)
 80025ac:	f004 fe42 	bl	8007234 <HAL_LTDC_GetState>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <BSP_LCD_Init+0x9e>
  {
    /* Initialize the LCD Msp: this __weak function can be rewritten by the application */
    BSP_LCD_MspInit(&hLtdcHandler, NULL);
 80025b6:	2100      	movs	r1, #0
 80025b8:	480c      	ldr	r0, [pc, #48]	; (80025ec <BSP_LCD_Init+0xcc>)
 80025ba:	f000 fedf 	bl	800337c <BSP_LCD_MspInit>
  }
  HAL_LTDC_Init(&hLtdcHandler);
 80025be:	480b      	ldr	r0, [pc, #44]	; (80025ec <BSP_LCD_Init+0xcc>)
 80025c0:	f004 fc68 	bl	8006e94 <HAL_LTDC_Init>

  /* Assert display enable LCD_DISP pin */
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80025ca:	480a      	ldr	r0, [pc, #40]	; (80025f4 <BSP_LCD_Init+0xd4>)
 80025cc:	f003 fe98 	bl	8006300 <HAL_GPIO_WritePin>

  /* Assert backlight LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 80025d0:	2201      	movs	r2, #1
 80025d2:	2108      	movs	r1, #8
 80025d4:	4808      	ldr	r0, [pc, #32]	; (80025f8 <BSP_LCD_Init+0xd8>)
 80025d6:	f003 fe93 	bl	8006300 <HAL_GPIO_WritePin>

#if !defined(DATA_IN_ExtSDRAM)
  /* Initialize the SDRAM */
  BSP_SDRAM_Init();
 80025da:	f001 f989 	bl	80038f0 <BSP_SDRAM_Init>
#endif
    
  /* Initialize the font */
  BSP_LCD_SetFont(&LCD_DEFAULT_FONT);
 80025de:	4807      	ldr	r0, [pc, #28]	; (80025fc <BSP_LCD_Init+0xdc>)
 80025e0:	f000 f8d8 	bl	8002794 <BSP_LCD_SetFont>
  
  return LCD_OK;
 80025e4:	2300      	movs	r3, #0
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20008bb4 	.word	0x20008bb4
 80025f0:	40016800 	.word	0x40016800
 80025f4:	40022000 	.word	0x40022000
 80025f8:	40022800 	.word	0x40022800
 80025fc:	20000034 	.word	0x20000034

08002600 <BSP_LCD_GetXSize>:
/**
  * @brief  Gets the LCD X size.
  * @retval Used LCD X size
  */
uint32_t BSP_LCD_GetXSize(void)
{
 8002600:	b480      	push	{r7}
 8002602:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageWidth;
 8002604:	4b06      	ldr	r3, [pc, #24]	; (8002620 <BSP_LCD_GetXSize+0x20>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a06      	ldr	r2, [pc, #24]	; (8002624 <BSP_LCD_GetXSize+0x24>)
 800260a:	2134      	movs	r1, #52	; 0x34
 800260c:	fb01 f303 	mul.w	r3, r1, r3
 8002610:	4413      	add	r3, r2
 8002612:	3360      	adds	r3, #96	; 0x60
 8002614:	681b      	ldr	r3, [r3, #0]
}
 8002616:	4618      	mov	r0, r3
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr
 8002620:	20000360 	.word	0x20000360
 8002624:	20008bb4 	.word	0x20008bb4

08002628 <BSP_LCD_GetYSize>:
/**
  * @brief  Gets the LCD Y size.
  * @retval Used LCD Y size
  */
uint32_t BSP_LCD_GetYSize(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  return hLtdcHandler.LayerCfg[ActiveLayer].ImageHeight;
 800262c:	4b06      	ldr	r3, [pc, #24]	; (8002648 <BSP_LCD_GetYSize+0x20>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a06      	ldr	r2, [pc, #24]	; (800264c <BSP_LCD_GetYSize+0x24>)
 8002632:	2134      	movs	r1, #52	; 0x34
 8002634:	fb01 f303 	mul.w	r3, r1, r3
 8002638:	4413      	add	r3, r2
 800263a:	3364      	adds	r3, #100	; 0x64
 800263c:	681b      	ldr	r3, [r3, #0]
}
 800263e:	4618      	mov	r0, r3
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	20000360 	.word	0x20000360
 800264c:	20008bb4 	.word	0x20008bb4

08002650 <BSP_LCD_LayerDefaultInit>:
  * @param  LayerIndex: Layer foreground or background
  * @param  FB_Address: Layer frame buffer
  * @retval None
  */
void BSP_LCD_LayerDefaultInit(uint16_t LayerIndex, uint32_t FB_Address)
{     
 8002650:	b580      	push	{r7, lr}
 8002652:	b090      	sub	sp, #64	; 0x40
 8002654:	af00      	add	r7, sp, #0
 8002656:	4603      	mov	r3, r0
 8002658:	6039      	str	r1, [r7, #0]
 800265a:	80fb      	strh	r3, [r7, #6]
  LCD_LayerCfgTypeDef  layer_cfg;

  /* Layer Init */
  layer_cfg.WindowX0 = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	60fb      	str	r3, [r7, #12]
  layer_cfg.WindowX1 = BSP_LCD_GetXSize();
 8002660:	f7ff ffce 	bl	8002600 <BSP_LCD_GetXSize>
 8002664:	4603      	mov	r3, r0
 8002666:	613b      	str	r3, [r7, #16]
  layer_cfg.WindowY0 = 0;
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]
  layer_cfg.WindowY1 = BSP_LCD_GetYSize(); 
 800266c:	f7ff ffdc 	bl	8002628 <BSP_LCD_GetYSize>
 8002670:	4603      	mov	r3, r0
 8002672:	61bb      	str	r3, [r7, #24]
  layer_cfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8002674:	2300      	movs	r3, #0
 8002676:	61fb      	str	r3, [r7, #28]
  layer_cfg.FBStartAdress = FB_Address;
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	633b      	str	r3, [r7, #48]	; 0x30
  layer_cfg.Alpha = 255;
 800267c:	23ff      	movs	r3, #255	; 0xff
 800267e:	623b      	str	r3, [r7, #32]
  layer_cfg.Alpha0 = 0;
 8002680:	2300      	movs	r3, #0
 8002682:	627b      	str	r3, [r7, #36]	; 0x24
  layer_cfg.Backcolor.Blue = 0;
 8002684:	2300      	movs	r3, #0
 8002686:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  layer_cfg.Backcolor.Green = 0;
 800268a:	2300      	movs	r3, #0
 800268c:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  layer_cfg.Backcolor.Red = 0;
 8002690:	2300      	movs	r3, #0
 8002692:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  layer_cfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8002696:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800269a:	62bb      	str	r3, [r7, #40]	; 0x28
  layer_cfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800269c:	2307      	movs	r3, #7
 800269e:	62fb      	str	r3, [r7, #44]	; 0x2c
  layer_cfg.ImageWidth = BSP_LCD_GetXSize();
 80026a0:	f7ff ffae 	bl	8002600 <BSP_LCD_GetXSize>
 80026a4:	4603      	mov	r3, r0
 80026a6:	637b      	str	r3, [r7, #52]	; 0x34
  layer_cfg.ImageHeight = BSP_LCD_GetYSize();
 80026a8:	f7ff ffbe 	bl	8002628 <BSP_LCD_GetYSize>
 80026ac:	4603      	mov	r3, r0
 80026ae:	63bb      	str	r3, [r7, #56]	; 0x38
  
  HAL_LTDC_ConfigLayer(&hLtdcHandler, &layer_cfg, LayerIndex); 
 80026b0:	88fa      	ldrh	r2, [r7, #6]
 80026b2:	f107 030c 	add.w	r3, r7, #12
 80026b6:	4619      	mov	r1, r3
 80026b8:	4812      	ldr	r0, [pc, #72]	; (8002704 <BSP_LCD_LayerDefaultInit+0xb4>)
 80026ba:	f004 fd7d 	bl	80071b8 <HAL_LTDC_ConfigLayer>

  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 80026be:	88fa      	ldrh	r2, [r7, #6]
 80026c0:	4911      	ldr	r1, [pc, #68]	; (8002708 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026c2:	4613      	mov	r3, r2
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	3304      	adds	r3, #4
 80026ce:	f04f 32ff 	mov.w	r2, #4294967295
 80026d2:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].pFont     = &Font24;
 80026d4:	88fa      	ldrh	r2, [r7, #6]
 80026d6:	490c      	ldr	r1, [pc, #48]	; (8002708 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	440b      	add	r3, r1
 80026e2:	3308      	adds	r3, #8
 80026e4:	4a09      	ldr	r2, [pc, #36]	; (800270c <BSP_LCD_LayerDefaultInit+0xbc>)
 80026e6:	601a      	str	r2, [r3, #0]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 80026e8:	88fa      	ldrh	r2, [r7, #6]
 80026ea:	4907      	ldr	r1, [pc, #28]	; (8002708 <BSP_LCD_LayerDefaultInit+0xb8>)
 80026ec:	4613      	mov	r3, r2
 80026ee:	005b      	lsls	r3, r3, #1
 80026f0:	4413      	add	r3, r2
 80026f2:	009b      	lsls	r3, r3, #2
 80026f4:	440b      	add	r3, r1
 80026f6:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 80026fa:	601a      	str	r2, [r3, #0]
}
 80026fc:	bf00      	nop
 80026fe:	3740      	adds	r7, #64	; 0x40
 8002700:	46bd      	mov	sp, r7
 8002702:	bd80      	pop	{r7, pc}
 8002704:	20008bb4 	.word	0x20008bb4
 8002708:	20000364 	.word	0x20000364
 800270c:	20000034 	.word	0x20000034

08002710 <BSP_LCD_SelectLayer>:
  * @brief  Selects the LCD Layer.
  * @param  LayerIndex: Layer foreground or background
  * @retval None
  */
void BSP_LCD_SelectLayer(uint32_t LayerIndex)
{
 8002710:	b480      	push	{r7}
 8002712:	b083      	sub	sp, #12
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  ActiveLayer = LayerIndex;
 8002718:	4a04      	ldr	r2, [pc, #16]	; (800272c <BSP_LCD_SelectLayer+0x1c>)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6013      	str	r3, [r2, #0]
} 
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	20000360 	.word	0x20000360

08002730 <BSP_LCD_SetTextColor>:
  * @brief  Sets the LCD text color.
  * @param  Color: Text color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetTextColor(uint32_t Color)
{
 8002730:	b480      	push	{r7}
 8002732:	b083      	sub	sp, #12
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].TextColor = Color;
 8002738:	4b07      	ldr	r3, [pc, #28]	; (8002758 <BSP_LCD_SetTextColor+0x28>)
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	4907      	ldr	r1, [pc, #28]	; (800275c <BSP_LCD_SetTextColor+0x2c>)
 800273e:	4613      	mov	r3, r2
 8002740:	005b      	lsls	r3, r3, #1
 8002742:	4413      	add	r3, r2
 8002744:	009b      	lsls	r3, r3, #2
 8002746:	440b      	add	r3, r1
 8002748:	687a      	ldr	r2, [r7, #4]
 800274a:	601a      	str	r2, [r3, #0]
}
 800274c:	bf00      	nop
 800274e:	370c      	adds	r7, #12
 8002750:	46bd      	mov	sp, r7
 8002752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002756:	4770      	bx	lr
 8002758:	20000360 	.word	0x20000360
 800275c:	20000364 	.word	0x20000364

08002760 <BSP_LCD_SetBackColor>:
  * @brief  Sets the LCD background color.
  * @param  Color: Layer background color code ARGB(8-8-8-8)
  * @retval None
  */
void BSP_LCD_SetBackColor(uint32_t Color)
{
 8002760:	b480      	push	{r7}
 8002762:	b083      	sub	sp, #12
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].BackColor = Color;
 8002768:	4b08      	ldr	r3, [pc, #32]	; (800278c <BSP_LCD_SetBackColor+0x2c>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4908      	ldr	r1, [pc, #32]	; (8002790 <BSP_LCD_SetBackColor+0x30>)
 800276e:	4613      	mov	r3, r2
 8002770:	005b      	lsls	r3, r3, #1
 8002772:	4413      	add	r3, r2
 8002774:	009b      	lsls	r3, r3, #2
 8002776:	440b      	add	r3, r1
 8002778:	3304      	adds	r3, #4
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	601a      	str	r2, [r3, #0]
}
 800277e:	bf00      	nop
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002788:	4770      	bx	lr
 800278a:	bf00      	nop
 800278c:	20000360 	.word	0x20000360
 8002790:	20000364 	.word	0x20000364

08002794 <BSP_LCD_SetFont>:
  * @brief  Sets the LCD text font.
  * @param  fonts: Layer font to be used
  * @retval None
  */
void BSP_LCD_SetFont(sFONT *fonts)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  DrawProp[ActiveLayer].pFont = fonts;
 800279c:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <BSP_LCD_SetFont+0x2c>)
 800279e:	681a      	ldr	r2, [r3, #0]
 80027a0:	4908      	ldr	r1, [pc, #32]	; (80027c4 <BSP_LCD_SetFont+0x30>)
 80027a2:	4613      	mov	r3, r2
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	4413      	add	r3, r2
 80027a8:	009b      	lsls	r3, r3, #2
 80027aa:	440b      	add	r3, r1
 80027ac:	3308      	adds	r3, #8
 80027ae:	687a      	ldr	r2, [r7, #4]
 80027b0:	601a      	str	r2, [r3, #0]
}
 80027b2:	bf00      	nop
 80027b4:	370c      	adds	r7, #12
 80027b6:	46bd      	mov	sp, r7
 80027b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027bc:	4770      	bx	lr
 80027be:	bf00      	nop
 80027c0:	20000360 	.word	0x20000360
 80027c4:	20000364 	.word	0x20000364

080027c8 <BSP_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *BSP_LCD_GetFont(void)
{
 80027c8:	b480      	push	{r7}
 80027ca:	af00      	add	r7, sp, #0
  return DrawProp[ActiveLayer].pFont;
 80027cc:	4b07      	ldr	r3, [pc, #28]	; (80027ec <BSP_LCD_GetFont+0x24>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4907      	ldr	r1, [pc, #28]	; (80027f0 <BSP_LCD_GetFont+0x28>)
 80027d2:	4613      	mov	r3, r2
 80027d4:	005b      	lsls	r3, r3, #1
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3308      	adds	r3, #8
 80027de:	681b      	ldr	r3, [r3, #0]
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e8:	4770      	bx	lr
 80027ea:	bf00      	nop
 80027ec:	20000360 	.word	0x20000360
 80027f0:	20000364 	.word	0x20000364

080027f4 <BSP_LCD_Clear>:
  * @brief  Clears the hole LCD.
  * @param  Color: Color of the background
  * @retval None
  */
void BSP_LCD_Clear(uint32_t Color)
{ 
 80027f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027f6:	b085      	sub	sp, #20
 80027f8:	af02      	add	r7, sp, #8
 80027fa:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */ 
  LL_FillBuffer(ActiveLayer, (uint32_t *)(hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 80027fc:	4b0f      	ldr	r3, [pc, #60]	; (800283c <BSP_LCD_Clear+0x48>)
 80027fe:	681c      	ldr	r4, [r3, #0]
 8002800:	4b0e      	ldr	r3, [pc, #56]	; (800283c <BSP_LCD_Clear+0x48>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <BSP_LCD_Clear+0x4c>)
 8002806:	2134      	movs	r1, #52	; 0x34
 8002808:	fb01 f303 	mul.w	r3, r1, r3
 800280c:	4413      	add	r3, r2
 800280e:	335c      	adds	r3, #92	; 0x5c
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	461e      	mov	r6, r3
 8002814:	f7ff fef4 	bl	8002600 <BSP_LCD_GetXSize>
 8002818:	4605      	mov	r5, r0
 800281a:	f7ff ff05 	bl	8002628 <BSP_LCD_GetYSize>
 800281e:	4602      	mov	r2, r0
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	9301      	str	r3, [sp, #4]
 8002824:	2300      	movs	r3, #0
 8002826:	9300      	str	r3, [sp, #0]
 8002828:	4613      	mov	r3, r2
 800282a:	462a      	mov	r2, r5
 800282c:	4631      	mov	r1, r6
 800282e:	4620      	mov	r0, r4
 8002830:	f001 f812 	bl	8003858 <LL_FillBuffer>
}
 8002834:	bf00      	nop
 8002836:	370c      	adds	r7, #12
 8002838:	46bd      	mov	sp, r7
 800283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800283c:	20000360 	.word	0x20000360
 8002840:	20008bb4 	.word	0x20008bb4

08002844 <BSP_LCD_DisplayChar>:
  * @param  Ascii: Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E 
  * @retval None
  */
void BSP_LCD_DisplayChar(uint16_t Xpos, uint16_t Ypos, uint8_t Ascii)
{
 8002844:	b590      	push	{r4, r7, lr}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	4603      	mov	r3, r0
 800284c:	80fb      	strh	r3, [r7, #6]
 800284e:	460b      	mov	r3, r1
 8002850:	80bb      	strh	r3, [r7, #4]
 8002852:	4613      	mov	r3, r2
 8002854:	70fb      	strb	r3, [r7, #3]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <BSP_LCD_DisplayChar+0x80>)
 8002858:	681a      	ldr	r2, [r3, #0]
 800285a:	491b      	ldr	r1, [pc, #108]	; (80028c8 <BSP_LCD_DisplayChar+0x84>)
 800285c:	4613      	mov	r3, r2
 800285e:	005b      	lsls	r3, r3, #1
 8002860:	4413      	add	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	440b      	add	r3, r1
 8002866:	3308      	adds	r3, #8
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6819      	ldr	r1, [r3, #0]
 800286c:	78fb      	ldrb	r3, [r7, #3]
 800286e:	f1a3 0020 	sub.w	r0, r3, #32
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 8002872:	4b14      	ldr	r3, [pc, #80]	; (80028c4 <BSP_LCD_DisplayChar+0x80>)
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	4c14      	ldr	r4, [pc, #80]	; (80028c8 <BSP_LCD_DisplayChar+0x84>)
 8002878:	4613      	mov	r3, r2
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	4413      	add	r3, r2
 800287e:	009b      	lsls	r3, r3, #2
 8002880:	4423      	add	r3, r4
 8002882:	3308      	adds	r3, #8
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	88db      	ldrh	r3, [r3, #6]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 8002888:	fb03 f000 	mul.w	r0, r3, r0
    DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 800288c:	4b0d      	ldr	r3, [pc, #52]	; (80028c4 <BSP_LCD_DisplayChar+0x80>)
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	4c0d      	ldr	r4, [pc, #52]	; (80028c8 <BSP_LCD_DisplayChar+0x84>)
 8002892:	4613      	mov	r3, r2
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	4413      	add	r3, r2
 8002898:	009b      	lsls	r3, r3, #2
 800289a:	4423      	add	r3, r4
 800289c:	3308      	adds	r3, #8
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	889b      	ldrh	r3, [r3, #4]
 80028a2:	3307      	adds	r3, #7
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	da00      	bge.n	80028aa <BSP_LCD_DisplayChar+0x66>
 80028a8:	3307      	adds	r3, #7
 80028aa:	10db      	asrs	r3, r3, #3
 80028ac:	fb03 f300 	mul.w	r3, r3, r0
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80028b0:	18ca      	adds	r2, r1, r3
 80028b2:	88b9      	ldrh	r1, [r7, #4]
 80028b4:	88fb      	ldrh	r3, [r7, #6]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f000 fe56 	bl	8003568 <DrawChar>
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}
 80028c4:	20000360 	.word	0x20000360
 80028c8:	20000364 	.word	0x20000364

080028cc <BSP_LCD_DisplayStringAt>:
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE   
  * @retval None
  */
void BSP_LCD_DisplayStringAt(uint16_t Xpos, uint16_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80028cc:	b5b0      	push	{r4, r5, r7, lr}
 80028ce:	b088      	sub	sp, #32
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	60ba      	str	r2, [r7, #8]
 80028d4:	461a      	mov	r2, r3
 80028d6:	4603      	mov	r3, r0
 80028d8:	81fb      	strh	r3, [r7, #14]
 80028da:	460b      	mov	r3, r1
 80028dc:	81bb      	strh	r3, [r7, #12]
 80028de:	4613      	mov	r3, r2
 80028e0:	71fb      	strb	r3, [r7, #7]
  uint16_t ref_column = 1, i = 0;
 80028e2:	2301      	movs	r3, #1
 80028e4:	83fb      	strh	r3, [r7, #30]
 80028e6:	2300      	movs	r3, #0
 80028e8:	83bb      	strh	r3, [r7, #28]
  uint32_t size = 0, xsize = 0; 
 80028ea:	2300      	movs	r3, #0
 80028ec:	61bb      	str	r3, [r7, #24]
 80028ee:	2300      	movs	r3, #0
 80028f0:	613b      	str	r3, [r7, #16]
  uint8_t  *ptr = Text;
 80028f2:	68bb      	ldr	r3, [r7, #8]
 80028f4:	617b      	str	r3, [r7, #20]
  
  /* Get the text size */
  while (*ptr++) size ++ ;
 80028f6:	e002      	b.n	80028fe <BSP_LCD_DisplayStringAt+0x32>
 80028f8:	69bb      	ldr	r3, [r7, #24]
 80028fa:	3301      	adds	r3, #1
 80028fc:	61bb      	str	r3, [r7, #24]
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	1c5a      	adds	r2, r3, #1
 8002902:	617a      	str	r2, [r7, #20]
 8002904:	781b      	ldrb	r3, [r3, #0]
 8002906:	2b00      	cmp	r3, #0
 8002908:	d1f6      	bne.n	80028f8 <BSP_LCD_DisplayStringAt+0x2c>
  
  /* Characters number per line */
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 800290a:	f7ff fe79 	bl	8002600 <BSP_LCD_GetXSize>
 800290e:	4601      	mov	r1, r0
 8002910:	4b50      	ldr	r3, [pc, #320]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 8002912:	681a      	ldr	r2, [r3, #0]
 8002914:	4850      	ldr	r0, [pc, #320]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8002916:	4613      	mov	r3, r2
 8002918:	005b      	lsls	r3, r3, #1
 800291a:	4413      	add	r3, r2
 800291c:	009b      	lsls	r3, r3, #2
 800291e:	4403      	add	r3, r0
 8002920:	3308      	adds	r3, #8
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	889b      	ldrh	r3, [r3, #4]
 8002926:	fbb1 f3f3 	udiv	r3, r1, r3
 800292a:	613b      	str	r3, [r7, #16]
  
  switch (Mode)
 800292c:	79fb      	ldrb	r3, [r7, #7]
 800292e:	2b03      	cmp	r3, #3
 8002930:	d01c      	beq.n	800296c <BSP_LCD_DisplayStringAt+0xa0>
 8002932:	2b03      	cmp	r3, #3
 8002934:	dc33      	bgt.n	800299e <BSP_LCD_DisplayStringAt+0xd2>
 8002936:	2b01      	cmp	r3, #1
 8002938:	d002      	beq.n	8002940 <BSP_LCD_DisplayStringAt+0x74>
 800293a:	2b02      	cmp	r3, #2
 800293c:	d019      	beq.n	8002972 <BSP_LCD_DisplayStringAt+0xa6>
 800293e:	e02e      	b.n	800299e <BSP_LCD_DisplayStringAt+0xd2>
  {
  case CENTER_MODE:
    {
      ref_column = Xpos + ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8002940:	693a      	ldr	r2, [r7, #16]
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	1ad1      	subs	r1, r2, r3
 8002946:	4b43      	ldr	r3, [pc, #268]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 8002948:	681a      	ldr	r2, [r3, #0]
 800294a:	4843      	ldr	r0, [pc, #268]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 800294c:	4613      	mov	r3, r2
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4413      	add	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4403      	add	r3, r0
 8002956:	3308      	adds	r3, #8
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	889b      	ldrh	r3, [r3, #4]
 800295c:	fb03 f301 	mul.w	r3, r3, r1
 8002960:	085b      	lsrs	r3, r3, #1
 8002962:	b29a      	uxth	r2, r3
 8002964:	89fb      	ldrh	r3, [r7, #14]
 8002966:	4413      	add	r3, r2
 8002968:	83fb      	strh	r3, [r7, #30]
      break;
 800296a:	e01b      	b.n	80029a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case LEFT_MODE:
    {
      ref_column = Xpos;
 800296c:	89fb      	ldrh	r3, [r7, #14]
 800296e:	83fb      	strh	r3, [r7, #30]
      break;
 8002970:	e018      	b.n	80029a4 <BSP_LCD_DisplayStringAt+0xd8>
    }
  case RIGHT_MODE:
    {
      ref_column = - Xpos + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8002972:	693a      	ldr	r2, [r7, #16]
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	1ad3      	subs	r3, r2, r3
 8002978:	b299      	uxth	r1, r3
 800297a:	4b36      	ldr	r3, [pc, #216]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	4836      	ldr	r0, [pc, #216]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8002980:	4613      	mov	r3, r2
 8002982:	005b      	lsls	r3, r3, #1
 8002984:	4413      	add	r3, r2
 8002986:	009b      	lsls	r3, r3, #2
 8002988:	4403      	add	r3, r0
 800298a:	3308      	adds	r3, #8
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	889b      	ldrh	r3, [r3, #4]
 8002990:	fb11 f303 	smulbb	r3, r1, r3
 8002994:	b29a      	uxth	r2, r3
 8002996:	89fb      	ldrh	r3, [r7, #14]
 8002998:	1ad3      	subs	r3, r2, r3
 800299a:	83fb      	strh	r3, [r7, #30]
      break;
 800299c:	e002      	b.n	80029a4 <BSP_LCD_DisplayStringAt+0xd8>
    }    
  default:
    {
      ref_column = Xpos;
 800299e:	89fb      	ldrh	r3, [r7, #14]
 80029a0:	83fb      	strh	r3, [r7, #30]
      break;
 80029a2:	bf00      	nop
    }
  }
  
  /* Check that the Start column is located in the screen */
  if ((ref_column < 1) || (ref_column >= 0x8000))
 80029a4:	8bfb      	ldrh	r3, [r7, #30]
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d003      	beq.n	80029b2 <BSP_LCD_DisplayStringAt+0xe6>
 80029aa:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	da1d      	bge.n	80029ee <BSP_LCD_DisplayStringAt+0x122>
  {
    ref_column = 1;
 80029b2:	2301      	movs	r3, #1
 80029b4:	83fb      	strh	r3, [r7, #30]
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029b6:	e01a      	b.n	80029ee <BSP_LCD_DisplayStringAt+0x122>
  {
    /* Display one character on LCD */
    BSP_LCD_DisplayChar(ref_column, Ypos, *Text);
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	781a      	ldrb	r2, [r3, #0]
 80029bc:	89b9      	ldrh	r1, [r7, #12]
 80029be:	8bfb      	ldrh	r3, [r7, #30]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f7ff ff3f 	bl	8002844 <BSP_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    ref_column += DrawProp[ActiveLayer].pFont->Width;
 80029c6:	4b23      	ldr	r3, [pc, #140]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	4923      	ldr	r1, [pc, #140]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 80029cc:	4613      	mov	r3, r2
 80029ce:	005b      	lsls	r3, r3, #1
 80029d0:	4413      	add	r3, r2
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	440b      	add	r3, r1
 80029d6:	3308      	adds	r3, #8
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	889a      	ldrh	r2, [r3, #4]
 80029dc:	8bfb      	ldrh	r3, [r7, #30]
 80029de:	4413      	add	r3, r2
 80029e0:	83fb      	strh	r3, [r7, #30]
    /* Point on the next character */
    Text++;
 80029e2:	68bb      	ldr	r3, [r7, #8]
 80029e4:	3301      	adds	r3, #1
 80029e6:	60bb      	str	r3, [r7, #8]
    i++;
 80029e8:	8bbb      	ldrh	r3, [r7, #28]
 80029ea:	3301      	adds	r3, #1
 80029ec:	83bb      	strh	r3, [r7, #28]
  while ((*Text != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	781b      	ldrb	r3, [r3, #0]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	bf14      	ite	ne
 80029f6:	2301      	movne	r3, #1
 80029f8:	2300      	moveq	r3, #0
 80029fa:	b2dc      	uxtb	r4, r3
 80029fc:	f7ff fe00 	bl	8002600 <BSP_LCD_GetXSize>
 8002a00:	8bb9      	ldrh	r1, [r7, #28]
 8002a02:	4b14      	ldr	r3, [pc, #80]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 8002a04:	681a      	ldr	r2, [r3, #0]
 8002a06:	4d14      	ldr	r5, [pc, #80]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a08:	4613      	mov	r3, r2
 8002a0a:	005b      	lsls	r3, r3, #1
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	442b      	add	r3, r5
 8002a12:	3308      	adds	r3, #8
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	889b      	ldrh	r3, [r3, #4]
 8002a18:	fb03 f301 	mul.w	r3, r3, r1
 8002a1c:	1ac3      	subs	r3, r0, r3
 8002a1e:	b299      	uxth	r1, r3
 8002a20:	4b0c      	ldr	r3, [pc, #48]	; (8002a54 <BSP_LCD_DisplayStringAt+0x188>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	480c      	ldr	r0, [pc, #48]	; (8002a58 <BSP_LCD_DisplayStringAt+0x18c>)
 8002a26:	4613      	mov	r3, r2
 8002a28:	005b      	lsls	r3, r3, #1
 8002a2a:	4413      	add	r3, r2
 8002a2c:	009b      	lsls	r3, r3, #2
 8002a2e:	4403      	add	r3, r0
 8002a30:	3308      	adds	r3, #8
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	889b      	ldrh	r3, [r3, #4]
 8002a36:	4299      	cmp	r1, r3
 8002a38:	bf2c      	ite	cs
 8002a3a:	2301      	movcs	r3, #1
 8002a3c:	2300      	movcc	r3, #0
 8002a3e:	b2db      	uxtb	r3, r3
 8002a40:	4023      	ands	r3, r4
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d1b7      	bne.n	80029b8 <BSP_LCD_DisplayStringAt+0xec>
  }  
}
 8002a48:	bf00      	nop
 8002a4a:	bf00      	nop
 8002a4c:	3720      	adds	r7, #32
 8002a4e:	46bd      	mov	sp, r7
 8002a50:	bdb0      	pop	{r4, r5, r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000360 	.word	0x20000360
 8002a58:	20000364 	.word	0x20000364

08002a5c <BSP_LCD_DisplayStringAtLine>:
  * @param  Line: Line where to display the character shape
  * @param  ptr: Pointer to string to display on LCD
  * @retval None
  */
void BSP_LCD_DisplayStringAtLine(uint16_t Line, uint8_t *ptr)
{  
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	4603      	mov	r3, r0
 8002a64:	6039      	str	r1, [r7, #0]
 8002a66:	80fb      	strh	r3, [r7, #6]
  BSP_LCD_DisplayStringAt(0, LINE(Line), ptr, LEFT_MODE);
 8002a68:	f7ff feae 	bl	80027c8 <BSP_LCD_GetFont>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	88db      	ldrh	r3, [r3, #6]
 8002a70:	88fa      	ldrh	r2, [r7, #6]
 8002a72:	fb12 f303 	smulbb	r3, r2, r3
 8002a76:	b299      	uxth	r1, r3
 8002a78:	2303      	movs	r3, #3
 8002a7a:	683a      	ldr	r2, [r7, #0]
 8002a7c:	2000      	movs	r0, #0
 8002a7e:	f7ff ff25 	bl	80028cc <BSP_LCD_DisplayStringAt>
}
 8002a82:	bf00      	nop
 8002a84:	3708      	adds	r7, #8
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
	...

08002a8c <BSP_LCD_DrawHLine>:
  * @param  Ypos: Y position
  * @param  Length: Line length
  * @retval None
  */
void BSP_LCD_DrawHLine(uint16_t Xpos, uint16_t Ypos, uint16_t Length)
{
 8002a8c:	b5b0      	push	{r4, r5, r7, lr}
 8002a8e:	b086      	sub	sp, #24
 8002a90:	af02      	add	r7, sp, #8
 8002a92:	4603      	mov	r3, r0
 8002a94:	80fb      	strh	r3, [r7, #6]
 8002a96:	460b      	mov	r3, r1
 8002a98:	80bb      	strh	r3, [r7, #4]
 8002a9a:	4613      	mov	r3, r2
 8002a9c:	807b      	strh	r3, [r7, #2]
  uint32_t  Xaddress = 0;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	60fb      	str	r3, [r7, #12]
  
  /* Get the line address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002aa2:	4b26      	ldr	r3, [pc, #152]	; (8002b3c <BSP_LCD_DrawHLine+0xb0>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a26      	ldr	r2, [pc, #152]	; (8002b40 <BSP_LCD_DrawHLine+0xb4>)
 8002aa8:	2134      	movs	r1, #52	; 0x34
 8002aaa:	fb01 f303 	mul.w	r3, r1, r3
 8002aae:	4413      	add	r3, r2
 8002ab0:	3348      	adds	r3, #72	; 0x48
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	2b02      	cmp	r3, #2
 8002ab6:	d114      	bne.n	8002ae2 <BSP_LCD_DrawHLine+0x56>
  { /* RGB565 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ab8:	4b20      	ldr	r3, [pc, #128]	; (8002b3c <BSP_LCD_DrawHLine+0xb0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	4a20      	ldr	r2, [pc, #128]	; (8002b40 <BSP_LCD_DrawHLine+0xb4>)
 8002abe:	2134      	movs	r1, #52	; 0x34
 8002ac0:	fb01 f303 	mul.w	r3, r1, r3
 8002ac4:	4413      	add	r3, r2
 8002ac6:	335c      	adds	r3, #92	; 0x5c
 8002ac8:	681c      	ldr	r4, [r3, #0]
 8002aca:	f7ff fd99 	bl	8002600 <BSP_LCD_GetXSize>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	88bb      	ldrh	r3, [r7, #4]
 8002ad2:	fb03 f202 	mul.w	r2, r3, r2
 8002ad6:	88fb      	ldrh	r3, [r7, #6]
 8002ad8:	4413      	add	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	4423      	add	r3, r4
 8002ade:	60fb      	str	r3, [r7, #12]
 8002ae0:	e013      	b.n	8002b0a <BSP_LCD_DrawHLine+0x7e>
  }
  else
  { /* ARGB8888 format */
    Xaddress = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002ae2:	4b16      	ldr	r3, [pc, #88]	; (8002b3c <BSP_LCD_DrawHLine+0xb0>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4a16      	ldr	r2, [pc, #88]	; (8002b40 <BSP_LCD_DrawHLine+0xb4>)
 8002ae8:	2134      	movs	r1, #52	; 0x34
 8002aea:	fb01 f303 	mul.w	r3, r1, r3
 8002aee:	4413      	add	r3, r2
 8002af0:	335c      	adds	r3, #92	; 0x5c
 8002af2:	681c      	ldr	r4, [r3, #0]
 8002af4:	f7ff fd84 	bl	8002600 <BSP_LCD_GetXSize>
 8002af8:	4602      	mov	r2, r0
 8002afa:	88bb      	ldrh	r3, [r7, #4]
 8002afc:	fb03 f202 	mul.w	r2, r3, r2
 8002b00:	88fb      	ldrh	r3, [r7, #6]
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	4423      	add	r3, r4
 8002b08:	60fb      	str	r3, [r7, #12]
  }
  
  /* Write line */
  LL_FillBuffer(ActiveLayer, (uint32_t *)Xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 8002b0a:	4b0c      	ldr	r3, [pc, #48]	; (8002b3c <BSP_LCD_DrawHLine+0xb0>)
 8002b0c:	6818      	ldr	r0, [r3, #0]
 8002b0e:	68f9      	ldr	r1, [r7, #12]
 8002b10:	887c      	ldrh	r4, [r7, #2]
 8002b12:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <BSP_LCD_DrawHLine+0xb0>)
 8002b14:	681a      	ldr	r2, [r3, #0]
 8002b16:	4d0b      	ldr	r5, [pc, #44]	; (8002b44 <BSP_LCD_DrawHLine+0xb8>)
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	009b      	lsls	r3, r3, #2
 8002b20:	442b      	add	r3, r5
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	9301      	str	r3, [sp, #4]
 8002b26:	2300      	movs	r3, #0
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	4622      	mov	r2, r4
 8002b2e:	f000 fe93 	bl	8003858 <LL_FillBuffer>
}
 8002b32:	bf00      	nop
 8002b34:	3710      	adds	r7, #16
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bdb0      	pop	{r4, r5, r7, pc}
 8002b3a:	bf00      	nop
 8002b3c:	20000360 	.word	0x20000360
 8002b40:	20008bb4 	.word	0x20008bb4
 8002b44:	20000364 	.word	0x20000364

08002b48 <BSP_LCD_DrawLine>:
  * @param  x2: Point 2 X position
  * @param  y2: Point 2 Y position
  * @retval None
  */
void BSP_LCD_DrawLine(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2)
{
 8002b48:	b590      	push	{r4, r7, lr}
 8002b4a:	b08b      	sub	sp, #44	; 0x2c
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4604      	mov	r4, r0
 8002b50:	4608      	mov	r0, r1
 8002b52:	4611      	mov	r1, r2
 8002b54:	461a      	mov	r2, r3
 8002b56:	4623      	mov	r3, r4
 8002b58:	80fb      	strh	r3, [r7, #6]
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	80bb      	strh	r3, [r7, #4]
 8002b5e:	460b      	mov	r3, r1
 8002b60:	807b      	strh	r3, [r7, #2]
 8002b62:	4613      	mov	r3, r2
 8002b64:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 8002b66:	2300      	movs	r3, #0
 8002b68:	823b      	strh	r3, [r7, #16]
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	81fb      	strh	r3, [r7, #14]
 8002b6e:	2300      	movs	r3, #0
 8002b70:	84fb      	strh	r3, [r7, #38]	; 0x26
 8002b72:	2300      	movs	r3, #0
 8002b74:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002b76:	2300      	movs	r3, #0
 8002b78:	847b      	strh	r3, [r7, #34]	; 0x22
 8002b7a:	2300      	movs	r3, #0
 8002b7c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0, 
 8002b7e:	2300      	movs	r3, #0
 8002b80:	83fb      	strh	r3, [r7, #30]
 8002b82:	2300      	movs	r3, #0
 8002b84:	83bb      	strh	r3, [r7, #28]
 8002b86:	2300      	movs	r3, #0
 8002b88:	837b      	strh	r3, [r7, #26]
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	833b      	strh	r3, [r7, #24]
 8002b8e:	2300      	movs	r3, #0
 8002b90:	82fb      	strh	r3, [r7, #22]
 8002b92:	2300      	movs	r3, #0
 8002b94:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8002b96:	2300      	movs	r3, #0
 8002b98:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 8002b9a:	887a      	ldrh	r2, [r7, #2]
 8002b9c:	88fb      	ldrh	r3, [r7, #6]
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	bfb8      	it	lt
 8002ba4:	425b      	neglt	r3, r3
 8002ba6:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8002ba8:	883a      	ldrh	r2, [r7, #0]
 8002baa:	88bb      	ldrh	r3, [r7, #4]
 8002bac:	1ad3      	subs	r3, r2, r3
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	bfb8      	it	lt
 8002bb2:	425b      	neglt	r3, r3
 8002bb4:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8002bb6:	88fb      	ldrh	r3, [r7, #6]
 8002bb8:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 8002bba:	88bb      	ldrh	r3, [r7, #4]
 8002bbc:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 8002bbe:	887a      	ldrh	r2, [r7, #2]
 8002bc0:	88fb      	ldrh	r3, [r7, #6]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d304      	bcc.n	8002bd0 <BSP_LCD_DrawLine+0x88>
  {
    xinc1 = 1;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	843b      	strh	r3, [r7, #32]
 8002bce:	e005      	b.n	8002bdc <BSP_LCD_DrawLine+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8002bd0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bd4:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8002bd6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bda:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 8002bdc:	883a      	ldrh	r2, [r7, #0]
 8002bde:	88bb      	ldrh	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	d304      	bcc.n	8002bee <BSP_LCD_DrawLine+0xa6>
  {
    yinc1 = 1;
 8002be4:	2301      	movs	r3, #1
 8002be6:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8002be8:	2301      	movs	r3, #1
 8002bea:	83bb      	strh	r3, [r7, #28]
 8002bec:	e005      	b.n	8002bfa <BSP_LCD_DrawLine+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8002bee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf2:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8002bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002bf8:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8002bfa:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002bfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c02:	429a      	cmp	r2, r3
 8002c04:	db11      	blt.n	8002c2a <BSP_LCD_DrawLine+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8002c06:	2300      	movs	r3, #0
 8002c08:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 8002c0e:	8a3b      	ldrh	r3, [r7, #16]
 8002c10:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 8002c12:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	da00      	bge.n	8002c1c <BSP_LCD_DrawLine+0xd4>
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	105b      	asrs	r3, r3, #1
 8002c1e:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 8002c20:	89fb      	ldrh	r3, [r7, #14]
 8002c22:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 8002c24:	8a3b      	ldrh	r3, [r7, #16]
 8002c26:	82bb      	strh	r3, [r7, #20]
 8002c28:	e010      	b.n	8002c4c <BSP_LCD_DrawLine+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8002c2e:	2300      	movs	r3, #0
 8002c30:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 8002c32:	89fb      	ldrh	r3, [r7, #14]
 8002c34:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 8002c36:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	da00      	bge.n	8002c40 <BSP_LCD_DrawLine+0xf8>
 8002c3e:	3301      	adds	r3, #1
 8002c40:	105b      	asrs	r3, r3, #1
 8002c42:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 8002c44:	8a3b      	ldrh	r3, [r7, #16]
 8002c46:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 8002c48:	89fb      	ldrh	r3, [r7, #14]
 8002c4a:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	827b      	strh	r3, [r7, #18]
 8002c50:	e037      	b.n	8002cc2 <BSP_LCD_DrawLine+0x17a>
  {
    BSP_LCD_DrawPixel(x, y, DrawProp[ActiveLayer].TextColor);   /* Draw the current pixel */
 8002c52:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 8002c54:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8002c56:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <BSP_LCD_DrawLine+0x190>)
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	4c20      	ldr	r4, [pc, #128]	; (8002cdc <BSP_LCD_DrawLine+0x194>)
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	009b      	lsls	r3, r3, #2
 8002c64:	4423      	add	r3, r4
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	461a      	mov	r2, r3
 8002c6a:	f000 f923 	bl	8002eb4 <BSP_LCD_DrawPixel>
    num += num_add;                            /* Increase the numerator by the top of the fraction */
 8002c6e:	8b3a      	ldrh	r2, [r7, #24]
 8002c70:	8afb      	ldrh	r3, [r7, #22]
 8002c72:	4413      	add	r3, r2
 8002c74:	b29b      	uxth	r3, r3
 8002c76:	833b      	strh	r3, [r7, #24]
    if (num >= den)                           /* Check if numerator >= denominator */
 8002c78:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002c7c:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	db0e      	blt.n	8002ca2 <BSP_LCD_DrawLine+0x15a>
    {
      num -= den;                             /* Calculate the new numerator value */
 8002c84:	8b3a      	ldrh	r2, [r7, #24]
 8002c86:	8b7b      	ldrh	r3, [r7, #26]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	833b      	strh	r3, [r7, #24]
      x += xinc1;                             /* Change the x as appropriate */
 8002c8e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002c90:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8002c92:	4413      	add	r3, r2
 8002c94:	b29b      	uxth	r3, r3
 8002c96:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;                             /* Change the y as appropriate */
 8002c98:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002c9a:	8bfb      	ldrh	r3, [r7, #30]
 8002c9c:	4413      	add	r3, r2
 8002c9e:	b29b      	uxth	r3, r3
 8002ca0:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                               /* Change the x as appropriate */
 8002ca2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002ca4:	8c3b      	ldrh	r3, [r7, #32]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                               /* Change the y as appropriate */
 8002cac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002cae:	8bbb      	ldrh	r3, [r7, #28]
 8002cb0:	4413      	add	r3, r2
 8002cb2:	b29b      	uxth	r3, r3
 8002cb4:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8002cb6:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	3301      	adds	r3, #1
 8002cbe:	b29b      	uxth	r3, r3
 8002cc0:	827b      	strh	r3, [r7, #18]
 8002cc2:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8002cc6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	ddc1      	ble.n	8002c52 <BSP_LCD_DrawLine+0x10a>
  }
}
 8002cce:	bf00      	nop
 8002cd0:	bf00      	nop
 8002cd2:	372c      	adds	r7, #44	; 0x2c
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	bd90      	pop	{r4, r7, pc}
 8002cd8:	20000360 	.word	0x20000360
 8002cdc:	20000364 	.word	0x20000364

08002ce0 <BSP_LCD_DrawCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_DrawCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8002ce0:	b590      	push	{r4, r7, lr}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	80fb      	strh	r3, [r7, #6]
 8002cea:	460b      	mov	r3, r1
 8002cec:	80bb      	strh	r3, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	807b      	strh	r3, [r7, #2]
  int32_t   decision;    /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 8002cf2:	887b      	ldrh	r3, [r7, #2]
 8002cf4:	005b      	lsls	r3, r3, #1
 8002cf6:	f1c3 0303 	rsb	r3, r3, #3
 8002cfa:	617b      	str	r3, [r7, #20]
  current_x = 0;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8002d00:	887b      	ldrh	r3, [r7, #2]
 8002d02:	60fb      	str	r3, [r7, #12]
  
  while (current_x <= current_y)
 8002d04:	e0c7      	b.n	8002e96 <BSP_LCD_DrawCircle+0x1b6>
  {
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d06:	693b      	ldr	r3, [r7, #16]
 8002d08:	b29a      	uxth	r2, r3
 8002d0a:	88fb      	ldrh	r3, [r7, #6]
 8002d0c:	4413      	add	r3, r2
 8002d0e:	b298      	uxth	r0, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	b29b      	uxth	r3, r3
 8002d14:	88ba      	ldrh	r2, [r7, #4]
 8002d16:	1ad3      	subs	r3, r2, r3
 8002d18:	b299      	uxth	r1, r3
 8002d1a:	4b64      	ldr	r3, [pc, #400]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d1c:	681a      	ldr	r2, [r3, #0]
 8002d1e:	4c64      	ldr	r4, [pc, #400]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	4423      	add	r3, r4
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	461a      	mov	r2, r3
 8002d2e:	f000 f8c1 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos - current_y), DrawProp[ActiveLayer].TextColor);
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	88fa      	ldrh	r2, [r7, #6]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b298      	uxth	r0, r3
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	b29b      	uxth	r3, r3
 8002d40:	88ba      	ldrh	r2, [r7, #4]
 8002d42:	1ad3      	subs	r3, r2, r3
 8002d44:	b299      	uxth	r1, r3
 8002d46:	4b59      	ldr	r3, [pc, #356]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d48:	681a      	ldr	r2, [r3, #0]
 8002d4a:	4c59      	ldr	r4, [pc, #356]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	4423      	add	r3, r4
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	461a      	mov	r2, r3
 8002d5a:	f000 f8ab 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	b29a      	uxth	r2, r3
 8002d62:	88fb      	ldrh	r3, [r7, #6]
 8002d64:	4413      	add	r3, r2
 8002d66:	b298      	uxth	r0, r3
 8002d68:	693b      	ldr	r3, [r7, #16]
 8002d6a:	b29b      	uxth	r3, r3
 8002d6c:	88ba      	ldrh	r2, [r7, #4]
 8002d6e:	1ad3      	subs	r3, r2, r3
 8002d70:	b299      	uxth	r1, r3
 8002d72:	4b4e      	ldr	r3, [pc, #312]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4c4e      	ldr	r4, [pc, #312]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002d78:	4613      	mov	r3, r2
 8002d7a:	005b      	lsls	r3, r3, #1
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	4423      	add	r3, r4
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	461a      	mov	r2, r3
 8002d86:	f000 f895 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos - current_x), DrawProp[ActiveLayer].TextColor);
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	b29b      	uxth	r3, r3
 8002d8e:	88fa      	ldrh	r2, [r7, #6]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	b298      	uxth	r0, r3
 8002d94:	693b      	ldr	r3, [r7, #16]
 8002d96:	b29b      	uxth	r3, r3
 8002d98:	88ba      	ldrh	r2, [r7, #4]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	b299      	uxth	r1, r3
 8002d9e:	4b43      	ldr	r3, [pc, #268]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	4c43      	ldr	r4, [pc, #268]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002da4:	4613      	mov	r3, r2
 8002da6:	005b      	lsls	r3, r3, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	4423      	add	r3, r4
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	461a      	mov	r2, r3
 8002db2:	f000 f87f 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	b29a      	uxth	r2, r3
 8002dba:	88fb      	ldrh	r3, [r7, #6]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	b298      	uxth	r0, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	b29a      	uxth	r2, r3
 8002dc4:	88bb      	ldrh	r3, [r7, #4]
 8002dc6:	4413      	add	r3, r2
 8002dc8:	b299      	uxth	r1, r3
 8002dca:	4b38      	ldr	r3, [pc, #224]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002dcc:	681a      	ldr	r2, [r3, #0]
 8002dce:	4c38      	ldr	r4, [pc, #224]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	005b      	lsls	r3, r3, #1
 8002dd4:	4413      	add	r3, r2
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	4423      	add	r3, r4
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	461a      	mov	r2, r3
 8002dde:	f000 f869 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_x), (Ypos + current_y), DrawProp[ActiveLayer].TextColor);
 8002de2:	693b      	ldr	r3, [r7, #16]
 8002de4:	b29b      	uxth	r3, r3
 8002de6:	88fa      	ldrh	r2, [r7, #6]
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b298      	uxth	r0, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	b29a      	uxth	r2, r3
 8002df0:	88bb      	ldrh	r3, [r7, #4]
 8002df2:	4413      	add	r3, r2
 8002df4:	b299      	uxth	r1, r3
 8002df6:	4b2d      	ldr	r3, [pc, #180]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002df8:	681a      	ldr	r2, [r3, #0]
 8002dfa:	4c2d      	ldr	r4, [pc, #180]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002dfc:	4613      	mov	r3, r2
 8002dfe:	005b      	lsls	r3, r3, #1
 8002e00:	4413      	add	r3, r2
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	4423      	add	r3, r4
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	f000 f853 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos + current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	4413      	add	r3, r2
 8002e16:	b298      	uxth	r0, r3
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	b29a      	uxth	r2, r3
 8002e1c:	88bb      	ldrh	r3, [r7, #4]
 8002e1e:	4413      	add	r3, r2
 8002e20:	b299      	uxth	r1, r3
 8002e22:	4b22      	ldr	r3, [pc, #136]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	4c22      	ldr	r4, [pc, #136]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002e28:	4613      	mov	r3, r2
 8002e2a:	005b      	lsls	r3, r3, #1
 8002e2c:	4413      	add	r3, r2
 8002e2e:	009b      	lsls	r3, r3, #2
 8002e30:	4423      	add	r3, r4
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	461a      	mov	r2, r3
 8002e36:	f000 f83d 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    BSP_LCD_DrawPixel((Xpos - current_y), (Ypos + current_x), DrawProp[ActiveLayer].TextColor);
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	1ad3      	subs	r3, r2, r3
 8002e42:	b298      	uxth	r0, r3
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	b29a      	uxth	r2, r3
 8002e48:	88bb      	ldrh	r3, [r7, #4]
 8002e4a:	4413      	add	r3, r2
 8002e4c:	b299      	uxth	r1, r3
 8002e4e:	4b17      	ldr	r3, [pc, #92]	; (8002eac <BSP_LCD_DrawCircle+0x1cc>)
 8002e50:	681a      	ldr	r2, [r3, #0]
 8002e52:	4c17      	ldr	r4, [pc, #92]	; (8002eb0 <BSP_LCD_DrawCircle+0x1d0>)
 8002e54:	4613      	mov	r3, r2
 8002e56:	005b      	lsls	r3, r3, #1
 8002e58:	4413      	add	r3, r2
 8002e5a:	009b      	lsls	r3, r3, #2
 8002e5c:	4423      	add	r3, r4
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	461a      	mov	r2, r3
 8002e62:	f000 f827 	bl	8002eb4 <BSP_LCD_DrawPixel>
    
    if (decision < 0)
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	da06      	bge.n	8002e7a <BSP_LCD_DrawCircle+0x19a>
    { 
      decision += (current_x << 2) + 6;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	009a      	lsls	r2, r3, #2
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	4413      	add	r3, r2
 8002e74:	3306      	adds	r3, #6
 8002e76:	617b      	str	r3, [r7, #20]
 8002e78:	e00a      	b.n	8002e90 <BSP_LCD_DrawCircle+0x1b0>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8002e7a:	693a      	ldr	r2, [r7, #16]
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	1ad3      	subs	r3, r2, r3
 8002e80:	009a      	lsls	r2, r3, #2
 8002e82:	697b      	ldr	r3, [r7, #20]
 8002e84:	4413      	add	r3, r2
 8002e86:	330a      	adds	r3, #10
 8002e88:	617b      	str	r3, [r7, #20]
      current_y--;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	3b01      	subs	r3, #1
 8002e8e:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	3301      	adds	r3, #1
 8002e94:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	429a      	cmp	r2, r3
 8002e9c:	f67f af33 	bls.w	8002d06 <BSP_LCD_DrawCircle+0x26>
  } 
}
 8002ea0:	bf00      	nop
 8002ea2:	bf00      	nop
 8002ea4:	371c      	adds	r7, #28
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	bd90      	pop	{r4, r7, pc}
 8002eaa:	bf00      	nop
 8002eac:	20000360 	.word	0x20000360
 8002eb0:	20000364 	.word	0x20000364

08002eb4 <BSP_LCD_DrawPixel>:
  * @param  Ypos: Y position
  * @param  RGB_Code: Pixel color in ARGB mode (8-8-8-8)
  * @retval None
  */
void BSP_LCD_DrawPixel(uint16_t Xpos, uint16_t Ypos, uint32_t RGB_Code)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	b082      	sub	sp, #8
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	4603      	mov	r3, r0
 8002ebc:	603a      	str	r2, [r7, #0]
 8002ebe:	80fb      	strh	r3, [r7, #6]
 8002ec0:	460b      	mov	r3, r1
 8002ec2:	80bb      	strh	r3, [r7, #4]
  /* Write data value to all SDRAM memory */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002ec4:	4b1d      	ldr	r3, [pc, #116]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a1d      	ldr	r2, [pc, #116]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002eca:	2134      	movs	r1, #52	; 0x34
 8002ecc:	fb01 f303 	mul.w	r3, r1, r3
 8002ed0:	4413      	add	r3, r2
 8002ed2:	3348      	adds	r3, #72	; 0x48
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	2b02      	cmp	r3, #2
 8002ed8:	d116      	bne.n	8002f08 <BSP_LCD_DrawPixel+0x54>
  { /* RGB565 format */
    *(__IO uint16_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos))) = (uint16_t)RGB_Code;
 8002eda:	4b18      	ldr	r3, [pc, #96]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a18      	ldr	r2, [pc, #96]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002ee0:	2134      	movs	r1, #52	; 0x34
 8002ee2:	fb01 f303 	mul.w	r3, r1, r3
 8002ee6:	4413      	add	r3, r2
 8002ee8:	335c      	adds	r3, #92	; 0x5c
 8002eea:	681c      	ldr	r4, [r3, #0]
 8002eec:	88bd      	ldrh	r5, [r7, #4]
 8002eee:	f7ff fb87 	bl	8002600 <BSP_LCD_GetXSize>
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	fb03 f205 	mul.w	r2, r3, r5
 8002ef8:	88fb      	ldrh	r3, [r7, #6]
 8002efa:	4413      	add	r3, r2
 8002efc:	005b      	lsls	r3, r3, #1
 8002efe:	4423      	add	r3, r4
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	b292      	uxth	r2, r2
 8002f04:	801a      	strh	r2, [r3, #0]
  }
  else
  { /* ARGB8888 format */
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
  }
}
 8002f06:	e015      	b.n	8002f34 <BSP_LCD_DrawPixel+0x80>
    *(__IO uint32_t*) (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 8002f08:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <BSP_LCD_DrawPixel+0x88>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	4a0c      	ldr	r2, [pc, #48]	; (8002f40 <BSP_LCD_DrawPixel+0x8c>)
 8002f0e:	2134      	movs	r1, #52	; 0x34
 8002f10:	fb01 f303 	mul.w	r3, r1, r3
 8002f14:	4413      	add	r3, r2
 8002f16:	335c      	adds	r3, #92	; 0x5c
 8002f18:	681c      	ldr	r4, [r3, #0]
 8002f1a:	88bd      	ldrh	r5, [r7, #4]
 8002f1c:	f7ff fb70 	bl	8002600 <BSP_LCD_GetXSize>
 8002f20:	4603      	mov	r3, r0
 8002f22:	fb03 f205 	mul.w	r2, r3, r5
 8002f26:	88fb      	ldrh	r3, [r7, #6]
 8002f28:	4413      	add	r3, r2
 8002f2a:	009b      	lsls	r3, r3, #2
 8002f2c:	4423      	add	r3, r4
 8002f2e:	461a      	mov	r2, r3
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	6013      	str	r3, [r2, #0]
}
 8002f34:	bf00      	nop
 8002f36:	3708      	adds	r7, #8
 8002f38:	46bd      	mov	sp, r7
 8002f3a:	bdb0      	pop	{r4, r5, r7, pc}
 8002f3c:	20000360 	.word	0x20000360
 8002f40:	20008bb4 	.word	0x20008bb4

08002f44 <BSP_LCD_FillRect>:
  * @param  Width: Rectangle width  
  * @param  Height: Rectangle height
  * @retval None
  */
void BSP_LCD_FillRect(uint16_t Xpos, uint16_t Ypos, uint16_t Width, uint16_t Height)
{
 8002f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f48:	b086      	sub	sp, #24
 8002f4a:	af02      	add	r7, sp, #8
 8002f4c:	4604      	mov	r4, r0
 8002f4e:	4608      	mov	r0, r1
 8002f50:	4611      	mov	r1, r2
 8002f52:	461a      	mov	r2, r3
 8002f54:	4623      	mov	r3, r4
 8002f56:	80fb      	strh	r3, [r7, #6]
 8002f58:	4603      	mov	r3, r0
 8002f5a:	80bb      	strh	r3, [r7, #4]
 8002f5c:	460b      	mov	r3, r1
 8002f5e:	807b      	strh	r3, [r7, #2]
 8002f60:	4613      	mov	r3, r2
 8002f62:	803b      	strh	r3, [r7, #0]
  uint32_t  x_address = 0;
 8002f64:	2300      	movs	r3, #0
 8002f66:	60fb      	str	r3, [r7, #12]
  
  /* Set the text color */
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8002f68:	4b30      	ldr	r3, [pc, #192]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4930      	ldr	r1, [pc, #192]	; (8003030 <BSP_LCD_FillRect+0xec>)
 8002f6e:	4613      	mov	r3, r2
 8002f70:	005b      	lsls	r3, r3, #1
 8002f72:	4413      	add	r3, r2
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	440b      	add	r3, r1
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7ff fbd8 	bl	8002730 <BSP_LCD_SetTextColor>
  
  /* Get the rectangle start address */
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 8002f80:	4b2a      	ldr	r3, [pc, #168]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <BSP_LCD_FillRect+0xf0>)
 8002f86:	2134      	movs	r1, #52	; 0x34
 8002f88:	fb01 f303 	mul.w	r3, r1, r3
 8002f8c:	4413      	add	r3, r2
 8002f8e:	3348      	adds	r3, #72	; 0x48
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d114      	bne.n	8002fc0 <BSP_LCD_FillRect+0x7c>
  { /* RGB565 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 2*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002f96:	4b25      	ldr	r3, [pc, #148]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a26      	ldr	r2, [pc, #152]	; (8003034 <BSP_LCD_FillRect+0xf0>)
 8002f9c:	2134      	movs	r1, #52	; 0x34
 8002f9e:	fb01 f303 	mul.w	r3, r1, r3
 8002fa2:	4413      	add	r3, r2
 8002fa4:	335c      	adds	r3, #92	; 0x5c
 8002fa6:	681c      	ldr	r4, [r3, #0]
 8002fa8:	f7ff fb2a 	bl	8002600 <BSP_LCD_GetXSize>
 8002fac:	4602      	mov	r2, r0
 8002fae:	88bb      	ldrh	r3, [r7, #4]
 8002fb0:	fb03 f202 	mul.w	r2, r3, r2
 8002fb4:	88fb      	ldrh	r3, [r7, #6]
 8002fb6:	4413      	add	r3, r2
 8002fb8:	005b      	lsls	r3, r3, #1
 8002fba:	4423      	add	r3, r4
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	e013      	b.n	8002fe8 <BSP_LCD_FillRect+0xa4>
  }
  else
  { /* ARGB8888 format */
    x_address = (hLtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8002fc0:	4b1a      	ldr	r3, [pc, #104]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a1b      	ldr	r2, [pc, #108]	; (8003034 <BSP_LCD_FillRect+0xf0>)
 8002fc6:	2134      	movs	r1, #52	; 0x34
 8002fc8:	fb01 f303 	mul.w	r3, r1, r3
 8002fcc:	4413      	add	r3, r2
 8002fce:	335c      	adds	r3, #92	; 0x5c
 8002fd0:	681c      	ldr	r4, [r3, #0]
 8002fd2:	f7ff fb15 	bl	8002600 <BSP_LCD_GetXSize>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	88bb      	ldrh	r3, [r7, #4]
 8002fda:	fb03 f202 	mul.w	r2, r3, r2
 8002fde:	88fb      	ldrh	r3, [r7, #6]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	4423      	add	r3, r4
 8002fe6:	60fb      	str	r3, [r7, #12]
  }
  /* Fill the rectangle */
  LL_FillBuffer(ActiveLayer, (uint32_t *)x_address, Width, Height, (BSP_LCD_GetXSize() - Width), DrawProp[ActiveLayer].TextColor);
 8002fe8:	4b10      	ldr	r3, [pc, #64]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8002fea:	681c      	ldr	r4, [r3, #0]
 8002fec:	68fd      	ldr	r5, [r7, #12]
 8002fee:	887e      	ldrh	r6, [r7, #2]
 8002ff0:	f8b7 8000 	ldrh.w	r8, [r7]
 8002ff4:	f7ff fb04 	bl	8002600 <BSP_LCD_GetXSize>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	887b      	ldrh	r3, [r7, #2]
 8002ffc:	1ad1      	subs	r1, r2, r3
 8002ffe:	4b0b      	ldr	r3, [pc, #44]	; (800302c <BSP_LCD_FillRect+0xe8>)
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	480b      	ldr	r0, [pc, #44]	; (8003030 <BSP_LCD_FillRect+0xec>)
 8003004:	4613      	mov	r3, r2
 8003006:	005b      	lsls	r3, r3, #1
 8003008:	4413      	add	r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	4403      	add	r3, r0
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	9301      	str	r3, [sp, #4]
 8003012:	9100      	str	r1, [sp, #0]
 8003014:	4643      	mov	r3, r8
 8003016:	4632      	mov	r2, r6
 8003018:	4629      	mov	r1, r5
 800301a:	4620      	mov	r0, r4
 800301c:	f000 fc1c 	bl	8003858 <LL_FillBuffer>
}
 8003020:	bf00      	nop
 8003022:	3710      	adds	r7, #16
 8003024:	46bd      	mov	sp, r7
 8003026:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800302a:	bf00      	nop
 800302c:	20000360 	.word	0x20000360
 8003030:	20000364 	.word	0x20000364
 8003034:	20008bb4 	.word	0x20008bb4

08003038 <BSP_LCD_FillCircle>:
  * @param  Ypos: Y position
  * @param  Radius: Circle radius
  * @retval None
  */
void BSP_LCD_FillCircle(uint16_t Xpos, uint16_t Ypos, uint16_t Radius)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b086      	sub	sp, #24
 800303c:	af00      	add	r7, sp, #0
 800303e:	4603      	mov	r3, r0
 8003040:	80fb      	strh	r3, [r7, #6]
 8003042:	460b      	mov	r3, r1
 8003044:	80bb      	strh	r3, [r7, #4]
 8003046:	4613      	mov	r3, r2
 8003048:	807b      	strh	r3, [r7, #2]
  int32_t  decision;     /* Decision Variable */ 
  uint32_t  current_x;   /* Current X Value */
  uint32_t  current_y;   /* Current Y Value */
  
  decision = 3 - (Radius << 1);
 800304a:	887b      	ldrh	r3, [r7, #2]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	f1c3 0303 	rsb	r3, r3, #3
 8003052:	617b      	str	r3, [r7, #20]
  
  current_x = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	613b      	str	r3, [r7, #16]
  current_y = Radius;
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	60fb      	str	r3, [r7, #12]
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 800305c:	4b44      	ldr	r3, [pc, #272]	; (8003170 <BSP_LCD_FillCircle+0x138>)
 800305e:	681a      	ldr	r2, [r3, #0]
 8003060:	4944      	ldr	r1, [pc, #272]	; (8003174 <BSP_LCD_FillCircle+0x13c>)
 8003062:	4613      	mov	r3, r2
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4618      	mov	r0, r3
 8003070:	f7ff fb5e 	bl	8002730 <BSP_LCD_SetTextColor>
  
  while (current_x <= current_y)
 8003074:	e061      	b.n	800313a <BSP_LCD_FillCircle+0x102>
  {
    if(current_y > 0) 
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d021      	beq.n	80030c0 <BSP_LCD_FillCircle+0x88>
    {
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	b29b      	uxth	r3, r3
 8003080:	88fa      	ldrh	r2, [r7, #6]
 8003082:	1ad3      	subs	r3, r2, r3
 8003084:	b298      	uxth	r0, r3
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	b29a      	uxth	r2, r3
 800308a:	88bb      	ldrh	r3, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	b299      	uxth	r1, r3
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	b29b      	uxth	r3, r3
 8003094:	005b      	lsls	r3, r3, #1
 8003096:	b29b      	uxth	r3, r3
 8003098:	461a      	mov	r2, r3
 800309a:	f7ff fcf7 	bl	8002a8c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	88fa      	ldrh	r2, [r7, #6]
 80030a4:	1ad3      	subs	r3, r2, r3
 80030a6:	b298      	uxth	r0, r3
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	b29b      	uxth	r3, r3
 80030ac:	88ba      	ldrh	r2, [r7, #4]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	b299      	uxth	r1, r3
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	005b      	lsls	r3, r3, #1
 80030b8:	b29b      	uxth	r3, r3
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7ff fce6 	bl	8002a8c <BSP_LCD_DrawHLine>
    }
    
    if(current_x > 0) 
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d021      	beq.n	800310a <BSP_LCD_FillCircle+0xd2>
    {
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	b29b      	uxth	r3, r3
 80030ca:	88fa      	ldrh	r2, [r7, #6]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	b298      	uxth	r0, r3
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	b29b      	uxth	r3, r3
 80030d4:	88ba      	ldrh	r2, [r7, #4]
 80030d6:	1ad3      	subs	r3, r2, r3
 80030d8:	b299      	uxth	r1, r3
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	b29b      	uxth	r3, r3
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	b29b      	uxth	r3, r3
 80030e2:	461a      	mov	r2, r3
 80030e4:	f7ff fcd2 	bl	8002a8c <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x);
 80030e8:	693b      	ldr	r3, [r7, #16]
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	1ad3      	subs	r3, r2, r3
 80030f0:	b298      	uxth	r0, r3
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	b29a      	uxth	r2, r3
 80030f6:	88bb      	ldrh	r3, [r7, #4]
 80030f8:	4413      	add	r3, r2
 80030fa:	b299      	uxth	r1, r3
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	b29b      	uxth	r3, r3
 8003100:	005b      	lsls	r3, r3, #1
 8003102:	b29b      	uxth	r3, r3
 8003104:	461a      	mov	r2, r3
 8003106:	f7ff fcc1 	bl	8002a8c <BSP_LCD_DrawHLine>
    }
    if (decision < 0)
 800310a:	697b      	ldr	r3, [r7, #20]
 800310c:	2b00      	cmp	r3, #0
 800310e:	da06      	bge.n	800311e <BSP_LCD_FillCircle+0xe6>
    { 
      decision += (current_x << 2) + 6;
 8003110:	693b      	ldr	r3, [r7, #16]
 8003112:	009a      	lsls	r2, r3, #2
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	4413      	add	r3, r2
 8003118:	3306      	adds	r3, #6
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	e00a      	b.n	8003134 <BSP_LCD_FillCircle+0xfc>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 800311e:	693a      	ldr	r2, [r7, #16]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	009a      	lsls	r2, r3, #2
 8003126:	697b      	ldr	r3, [r7, #20]
 8003128:	4413      	add	r3, r2
 800312a:	330a      	adds	r3, #10
 800312c:	617b      	str	r3, [r7, #20]
      current_y--;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	3b01      	subs	r3, #1
 8003132:	60fb      	str	r3, [r7, #12]
    }
    current_x++;
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	3301      	adds	r3, #1
 8003138:	613b      	str	r3, [r7, #16]
  while (current_x <= current_y)
 800313a:	693a      	ldr	r2, [r7, #16]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	429a      	cmp	r2, r3
 8003140:	d999      	bls.n	8003076 <BSP_LCD_FillCircle+0x3e>
  }
  
  BSP_LCD_SetTextColor(DrawProp[ActiveLayer].TextColor);
 8003142:	4b0b      	ldr	r3, [pc, #44]	; (8003170 <BSP_LCD_FillCircle+0x138>)
 8003144:	681a      	ldr	r2, [r3, #0]
 8003146:	490b      	ldr	r1, [pc, #44]	; (8003174 <BSP_LCD_FillCircle+0x13c>)
 8003148:	4613      	mov	r3, r2
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7ff faeb 	bl	8002730 <BSP_LCD_SetTextColor>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 800315a:	887a      	ldrh	r2, [r7, #2]
 800315c:	88b9      	ldrh	r1, [r7, #4]
 800315e:	88fb      	ldrh	r3, [r7, #6]
 8003160:	4618      	mov	r0, r3
 8003162:	f7ff fdbd 	bl	8002ce0 <BSP_LCD_DrawCircle>
}
 8003166:	bf00      	nop
 8003168:	3718      	adds	r7, #24
 800316a:	46bd      	mov	sp, r7
 800316c:	bd80      	pop	{r7, pc}
 800316e:	bf00      	nop
 8003170:	20000360 	.word	0x20000360
 8003174:	20000364 	.word	0x20000364

08003178 <BSP_LCD_FillPolygon>:
  * @param  Points: Pointer to the points array
  * @param  PointCount: Number of points
  * @retval None
  */
void BSP_LCD_FillPolygon(pPoint Points, uint16_t PointCount)
{
 8003178:	b5b0      	push	{r4, r5, r7, lr}
 800317a:	b08c      	sub	sp, #48	; 0x30
 800317c:	af02      	add	r7, sp, #8
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	460b      	mov	r3, r1
 8003182:	807b      	strh	r3, [r7, #2]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, X_center = 0, Y_center = 0, X_first = 0, Y_first = 0, pixelX = 0, pixelY = 0, counter = 0;
 8003184:	2300      	movs	r3, #0
 8003186:	833b      	strh	r3, [r7, #24]
 8003188:	2300      	movs	r3, #0
 800318a:	82fb      	strh	r3, [r7, #22]
 800318c:	2300      	movs	r3, #0
 800318e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003190:	2300      	movs	r3, #0
 8003192:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003194:	2300      	movs	r3, #0
 8003196:	82bb      	strh	r3, [r7, #20]
 8003198:	2300      	movs	r3, #0
 800319a:	827b      	strh	r3, [r7, #18]
 800319c:	2300      	movs	r3, #0
 800319e:	823b      	strh	r3, [r7, #16]
 80031a0:	2300      	movs	r3, #0
 80031a2:	81fb      	strh	r3, [r7, #14]
 80031a4:	2300      	movs	r3, #0
 80031a6:	81bb      	strh	r3, [r7, #12]
 80031a8:	2300      	movs	r3, #0
 80031aa:	817b      	strh	r3, [r7, #10]
 80031ac:	2300      	movs	r3, #0
 80031ae:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 80031b0:	2300      	movs	r3, #0
 80031b2:	843b      	strh	r3, [r7, #32]
 80031b4:	2300      	movs	r3, #0
 80031b6:	83fb      	strh	r3, [r7, #30]
 80031b8:	2300      	movs	r3, #0
 80031ba:	83bb      	strh	r3, [r7, #28]
 80031bc:	2300      	movs	r3, #0
 80031be:	837b      	strh	r3, [r7, #26]
  
  image_left = image_right = Points->X;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80031c6:	83fb      	strh	r3, [r7, #30]
 80031c8:	8bfb      	ldrh	r3, [r7, #30]
 80031ca:	843b      	strh	r3, [r7, #32]
  image_top= image_bottom = Points->Y;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80031d2:	837b      	strh	r3, [r7, #26]
 80031d4:	8b7b      	ldrh	r3, [r7, #26]
 80031d6:	83bb      	strh	r3, [r7, #28]
  
  for(counter = 1; counter < PointCount; counter++)
 80031d8:	2301      	movs	r3, #1
 80031da:	847b      	strh	r3, [r7, #34]	; 0x22
 80031dc:	e02f      	b.n	800323e <BSP_LCD_FillPolygon+0xc6>
  {
    pixelX = POLY_X(counter);
 80031de:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	687a      	ldr	r2, [r7, #4]
 80031e6:	4413      	add	r3, r2
 80031e8:	881b      	ldrh	r3, [r3, #0]
 80031ea:	81bb      	strh	r3, [r7, #12]
    if(pixelX < image_left)
 80031ec:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031f0:	8c3b      	ldrh	r3, [r7, #32]
 80031f2:	429a      	cmp	r2, r3
 80031f4:	da01      	bge.n	80031fa <BSP_LCD_FillPolygon+0x82>
    {
      image_left = pixelX;
 80031f6:	89bb      	ldrh	r3, [r7, #12]
 80031f8:	843b      	strh	r3, [r7, #32]
    }
    if(pixelX > image_right)
 80031fa:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80031fe:	8bfb      	ldrh	r3, [r7, #30]
 8003200:	429a      	cmp	r2, r3
 8003202:	dd01      	ble.n	8003208 <BSP_LCD_FillPolygon+0x90>
    {
      image_right = pixelX;
 8003204:	89bb      	ldrh	r3, [r7, #12]
 8003206:	83fb      	strh	r3, [r7, #30]
    }
    
    pixelY = POLY_Y(counter);
 8003208:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 800320c:	009b      	lsls	r3, r3, #2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	4413      	add	r3, r2
 8003212:	885b      	ldrh	r3, [r3, #2]
 8003214:	817b      	strh	r3, [r7, #10]
    if(pixelY < image_top)
 8003216:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800321a:	8bbb      	ldrh	r3, [r7, #28]
 800321c:	429a      	cmp	r2, r3
 800321e:	da01      	bge.n	8003224 <BSP_LCD_FillPolygon+0xac>
    { 
      image_top = pixelY;
 8003220:	897b      	ldrh	r3, [r7, #10]
 8003222:	83bb      	strh	r3, [r7, #28]
    }
    if(pixelY > image_bottom)
 8003224:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003228:	8b7b      	ldrh	r3, [r7, #26]
 800322a:	429a      	cmp	r2, r3
 800322c:	dd01      	ble.n	8003232 <BSP_LCD_FillPolygon+0xba>
    {
      image_bottom = pixelY;
 800322e:	897b      	ldrh	r3, [r7, #10]
 8003230:	837b      	strh	r3, [r7, #26]
  for(counter = 1; counter < PointCount; counter++)
 8003232:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8003236:	b29b      	uxth	r3, r3
 8003238:	3301      	adds	r3, #1
 800323a:	b29b      	uxth	r3, r3
 800323c:	847b      	strh	r3, [r7, #34]	; 0x22
 800323e:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8003242:	887b      	ldrh	r3, [r7, #2]
 8003244:	429a      	cmp	r2, r3
 8003246:	dbca      	blt.n	80031de <BSP_LCD_FillPolygon+0x66>
    }
  }  
  
  if(PointCount < 2)
 8003248:	887b      	ldrh	r3, [r7, #2]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d974      	bls.n	8003338 <BSP_LCD_FillPolygon+0x1c0>
  {
    return;
  }
  
  X_center = (image_left + image_right)/2;
 800324e:	8c3a      	ldrh	r2, [r7, #32]
 8003250:	8bfb      	ldrh	r3, [r7, #30]
 8003252:	4413      	add	r3, r2
 8003254:	2b00      	cmp	r3, #0
 8003256:	da00      	bge.n	800325a <BSP_LCD_FillPolygon+0xe2>
 8003258:	3301      	adds	r3, #1
 800325a:	105b      	asrs	r3, r3, #1
 800325c:	82bb      	strh	r3, [r7, #20]
  Y_center = (image_bottom + image_top)/2;
 800325e:	8b7a      	ldrh	r2, [r7, #26]
 8003260:	8bbb      	ldrh	r3, [r7, #28]
 8003262:	4413      	add	r3, r2
 8003264:	2b00      	cmp	r3, #0
 8003266:	da00      	bge.n	800326a <BSP_LCD_FillPolygon+0xf2>
 8003268:	3301      	adds	r3, #1
 800326a:	105b      	asrs	r3, r3, #1
 800326c:	827b      	strh	r3, [r7, #18]
  
  X_first = Points->X;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	881b      	ldrh	r3, [r3, #0]
 8003272:	823b      	strh	r3, [r7, #16]
  Y_first = Points->Y;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	885b      	ldrh	r3, [r3, #2]
 8003278:	81fb      	strh	r3, [r7, #14]
  
  while(--PointCount)
 800327a:	e032      	b.n	80032e2 <BSP_LCD_FillPolygon+0x16a>
  {
    X = Points->X;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	881b      	ldrh	r3, [r3, #0]
 8003280:	833b      	strh	r3, [r7, #24]
    Y = Points->Y;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	885b      	ldrh	r3, [r3, #2]
 8003286:	82fb      	strh	r3, [r7, #22]
    Points++;
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	3304      	adds	r3, #4
 800328c:	607b      	str	r3, [r7, #4]
    X2 = Points->X;
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	881b      	ldrh	r3, [r3, #0]
 8003292:	84fb      	strh	r3, [r7, #38]	; 0x26
    Y2 = Points->Y;    
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	885b      	ldrh	r3, [r3, #2]
 8003298:	84bb      	strh	r3, [r7, #36]	; 0x24
    
    FillTriangle(X, X2, X_center, Y, Y2, Y_center);
 800329a:	8b38      	ldrh	r0, [r7, #24]
 800329c:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 800329e:	8abc      	ldrh	r4, [r7, #20]
 80032a0:	8afd      	ldrh	r5, [r7, #22]
 80032a2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032a4:	8a7a      	ldrh	r2, [r7, #18]
 80032a6:	9201      	str	r2, [sp, #4]
 80032a8:	9300      	str	r3, [sp, #0]
 80032aa:	462b      	mov	r3, r5
 80032ac:	4622      	mov	r2, r4
 80032ae:	f000 fa13 	bl	80036d8 <FillTriangle>
    FillTriangle(X, X_center, X2, Y, Y_center, Y2);
 80032b2:	8b38      	ldrh	r0, [r7, #24]
 80032b4:	8ab9      	ldrh	r1, [r7, #20]
 80032b6:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 80032b8:	8afd      	ldrh	r5, [r7, #22]
 80032ba:	8a7b      	ldrh	r3, [r7, #18]
 80032bc:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80032be:	9201      	str	r2, [sp, #4]
 80032c0:	9300      	str	r3, [sp, #0]
 80032c2:	462b      	mov	r3, r5
 80032c4:	4622      	mov	r2, r4
 80032c6:	f000 fa07 	bl	80036d8 <FillTriangle>
    FillTriangle(X_center, X2, X, Y_center, Y2, Y);   
 80032ca:	8ab8      	ldrh	r0, [r7, #20]
 80032cc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032ce:	8b3c      	ldrh	r4, [r7, #24]
 80032d0:	8a7d      	ldrh	r5, [r7, #18]
 80032d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032d4:	8afa      	ldrh	r2, [r7, #22]
 80032d6:	9201      	str	r2, [sp, #4]
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	462b      	mov	r3, r5
 80032dc:	4622      	mov	r2, r4
 80032de:	f000 f9fb 	bl	80036d8 <FillTriangle>
  while(--PointCount)
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	3b01      	subs	r3, #1
 80032e6:	807b      	strh	r3, [r7, #2]
 80032e8:	887b      	ldrh	r3, [r7, #2]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d1c6      	bne.n	800327c <BSP_LCD_FillPolygon+0x104>
  }
  
  FillTriangle(X_first, X2, X_center, Y_first, Y2, Y_center);
 80032ee:	8a38      	ldrh	r0, [r7, #16]
 80032f0:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 80032f2:	8abc      	ldrh	r4, [r7, #20]
 80032f4:	89fd      	ldrh	r5, [r7, #14]
 80032f6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80032f8:	8a7a      	ldrh	r2, [r7, #18]
 80032fa:	9201      	str	r2, [sp, #4]
 80032fc:	9300      	str	r3, [sp, #0]
 80032fe:	462b      	mov	r3, r5
 8003300:	4622      	mov	r2, r4
 8003302:	f000 f9e9 	bl	80036d8 <FillTriangle>
  FillTriangle(X_first, X_center, X2, Y_first, Y_center, Y2);
 8003306:	8a38      	ldrh	r0, [r7, #16]
 8003308:	8ab9      	ldrh	r1, [r7, #20]
 800330a:	8cfc      	ldrh	r4, [r7, #38]	; 0x26
 800330c:	89fd      	ldrh	r5, [r7, #14]
 800330e:	8a7b      	ldrh	r3, [r7, #18]
 8003310:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003312:	9201      	str	r2, [sp, #4]
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	462b      	mov	r3, r5
 8003318:	4622      	mov	r2, r4
 800331a:	f000 f9dd 	bl	80036d8 <FillTriangle>
  FillTriangle(X_center, X2, X_first, Y_center, Y2, Y_first);   
 800331e:	8ab8      	ldrh	r0, [r7, #20]
 8003320:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
 8003322:	8a3c      	ldrh	r4, [r7, #16]
 8003324:	8a7d      	ldrh	r5, [r7, #18]
 8003326:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003328:	89fa      	ldrh	r2, [r7, #14]
 800332a:	9201      	str	r2, [sp, #4]
 800332c:	9300      	str	r3, [sp, #0]
 800332e:	462b      	mov	r3, r5
 8003330:	4622      	mov	r2, r4
 8003332:	f000 f9d1 	bl	80036d8 <FillTriangle>
 8003336:	e000      	b.n	800333a <BSP_LCD_FillPolygon+0x1c2>
    return;
 8003338:	bf00      	nop
}
 800333a:	3728      	adds	r7, #40	; 0x28
 800333c:	46bd      	mov	sp, r7
 800333e:	bdb0      	pop	{r4, r5, r7, pc}

08003340 <BSP_LCD_DisplayOn>:
/**
  * @brief  Enables the display.
  * @retval None
  */
void BSP_LCD_DisplayOn(void)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	af00      	add	r7, sp, #0
  /* Display On */
  __HAL_LTDC_ENABLE(&hLtdcHandler);
 8003344:	4b0a      	ldr	r3, [pc, #40]	; (8003370 <BSP_LCD_DisplayOn+0x30>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	699a      	ldr	r2, [r3, #24]
 800334a:	4b09      	ldr	r3, [pc, #36]	; (8003370 <BSP_LCD_DisplayOn+0x30>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f042 0201 	orr.w	r2, r2, #1
 8003352:	619a      	str	r2, [r3, #24]
  HAL_GPIO_WritePin(LCD_DISP_GPIO_PORT, LCD_DISP_PIN, GPIO_PIN_SET);        /* Assert LCD_DISP pin */
 8003354:	2201      	movs	r2, #1
 8003356:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800335a:	4806      	ldr	r0, [pc, #24]	; (8003374 <BSP_LCD_DisplayOn+0x34>)
 800335c:	f002 ffd0 	bl	8006300 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);  /* Assert LCD_BL_CTRL pin */
 8003360:	2201      	movs	r2, #1
 8003362:	2108      	movs	r1, #8
 8003364:	4804      	ldr	r0, [pc, #16]	; (8003378 <BSP_LCD_DisplayOn+0x38>)
 8003366:	f002 ffcb 	bl	8006300 <HAL_GPIO_WritePin>
}
 800336a:	bf00      	nop
 800336c:	bd80      	pop	{r7, pc}
 800336e:	bf00      	nop
 8003370:	20008bb4 	.word	0x20008bb4
 8003374:	40022000 	.word	0x40022000
 8003378:	40022800 	.word	0x40022800

0800337c <BSP_LCD_MspInit>:
  * @param  hltdc: LTDC handle
  * @param  Params
  * @retval None
  */
__weak void BSP_LCD_MspInit(LTDC_HandleTypeDef *hltdc, void *Params)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b090      	sub	sp, #64	; 0x40
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable the LTDC and DMA2D clocks */
  __HAL_RCC_LTDC_CLK_ENABLE();
 8003386:	4b64      	ldr	r3, [pc, #400]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003388:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800338a:	4a63      	ldr	r2, [pc, #396]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 800338c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003390:	6453      	str	r3, [r2, #68]	; 0x44
 8003392:	4b61      	ldr	r3, [pc, #388]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003394:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003396:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800339a:	62bb      	str	r3, [r7, #40]	; 0x28
 800339c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_DMA2D_CLK_ENABLE();
 800339e:	4b5e      	ldr	r3, [pc, #376]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a2:	4a5d      	ldr	r2, [pc, #372]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033a4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80033a8:	6313      	str	r3, [r2, #48]	; 0x30
 80033aa:	4b5b      	ldr	r3, [pc, #364]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ae:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80033b2:	627b      	str	r3, [r7, #36]	; 0x24
 80033b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  
  /* Enable GPIOs clock */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80033b6:	4b58      	ldr	r3, [pc, #352]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	4a57      	ldr	r2, [pc, #348]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033bc:	f043 0310 	orr.w	r3, r3, #16
 80033c0:	6313      	str	r3, [r2, #48]	; 0x30
 80033c2:	4b55      	ldr	r3, [pc, #340]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c6:	f003 0310 	and.w	r3, r3, #16
 80033ca:	623b      	str	r3, [r7, #32]
 80033cc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80033ce:	4b52      	ldr	r3, [pc, #328]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033d2:	4a51      	ldr	r2, [pc, #324]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033d8:	6313      	str	r3, [r2, #48]	; 0x30
 80033da:	4b4f      	ldr	r3, [pc, #316]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033e2:	61fb      	str	r3, [r7, #28]
 80033e4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 80033e6:	4b4c      	ldr	r3, [pc, #304]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	4a4b      	ldr	r2, [pc, #300]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033f0:	6313      	str	r3, [r2, #48]	; 0x30
 80033f2:	4b49      	ldr	r3, [pc, #292]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 80033f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033fa:	61bb      	str	r3, [r7, #24]
 80033fc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80033fe:	4b46      	ldr	r3, [pc, #280]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a45      	ldr	r2, [pc, #276]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003404:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b43      	ldr	r3, [pc, #268]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003412:	617b      	str	r3, [r7, #20]
 8003414:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8003416:	4b40      	ldr	r3, [pc, #256]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800341a:	4a3f      	ldr	r2, [pc, #252]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 800341c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003420:	6313      	str	r3, [r2, #48]	; 0x30
 8003422:	4b3d      	ldr	r3, [pc, #244]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003424:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003426:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800342a:	613b      	str	r3, [r7, #16]
 800342c:	693b      	ldr	r3, [r7, #16]
  LCD_DISP_GPIO_CLK_ENABLE();
 800342e:	4b3a      	ldr	r3, [pc, #232]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003430:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003432:	4a39      	ldr	r2, [pc, #228]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003434:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003438:	6313      	str	r3, [r2, #48]	; 0x30
 800343a:	4b37      	ldr	r3, [pc, #220]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003442:	60fb      	str	r3, [r7, #12]
 8003444:	68fb      	ldr	r3, [r7, #12]
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8003446:	4b34      	ldr	r3, [pc, #208]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	4a33      	ldr	r2, [pc, #204]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 800344c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003450:	6313      	str	r3, [r2, #48]	; 0x30
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <BSP_LCD_MspInit+0x19c>)
 8003454:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800345a:	60bb      	str	r3, [r7, #8]
 800345c:	68bb      	ldr	r3, [r7, #8]

  /*** LTDC Pins configuration ***/
  /* GPIOE configuration */
  gpio_init_structure.Pin       = GPIO_PIN_4;
 800345e:	2310      	movs	r3, #16
 8003460:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003462:	2302      	movs	r3, #2
 8003464:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8003466:	2300      	movs	r3, #0
 8003468:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 800346a:	2302      	movs	r3, #2
 800346c:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;  
 800346e:	230e      	movs	r3, #14
 8003470:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003472:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003476:	4619      	mov	r1, r3
 8003478:	4828      	ldr	r0, [pc, #160]	; (800351c <BSP_LCD_MspInit+0x1a0>)
 800347a:	f002 fc71 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOG configuration */
  gpio_init_structure.Pin       = GPIO_PIN_12;
 800347e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003482:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003484:	2302      	movs	r3, #2
 8003486:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF9_LTDC;
 8003488:	2309      	movs	r3, #9
 800348a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800348c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003490:	4619      	mov	r1, r3
 8003492:	4823      	ldr	r0, [pc, #140]	; (8003520 <BSP_LCD_MspInit+0x1a4>)
 8003494:	f002 fc64 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOI LTDC alternate configuration */
  gpio_init_structure.Pin       = GPIO_PIN_9 | GPIO_PIN_10 | \
 8003498:	f44f 4366 	mov.w	r3, #58880	; 0xe600
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800349e:	2302      	movs	r3, #2
 80034a0:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034a2:	230e      	movs	r3, #14
 80034a4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80034a6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034aa:	4619      	mov	r1, r3
 80034ac:	481d      	ldr	r0, [pc, #116]	; (8003524 <BSP_LCD_MspInit+0x1a8>)
 80034ae:	f002 fc57 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOJ configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | \
 80034b2:	f64e 73ff 	movw	r3, #61439	; 0xefff
 80034b6:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | \
                                  GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | \
                                  GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034b8:	2302      	movs	r3, #2
 80034ba:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034bc:	230e      	movs	r3, #14
 80034be:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &gpio_init_structure);  
 80034c0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034c4:	4619      	mov	r1, r3
 80034c6:	4818      	ldr	r0, [pc, #96]	; (8003528 <BSP_LCD_MspInit+0x1ac>)
 80034c8:	f002 fc4a 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOK configuration */  
  gpio_init_structure.Pin       = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_4 | \
 80034cc:	23f7      	movs	r3, #247	; 0xf7
 80034ce:	62fb      	str	r3, [r7, #44]	; 0x2c
                                  GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80034d0:	2302      	movs	r3, #2
 80034d2:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Alternate = GPIO_AF14_LTDC;
 80034d4:	230e      	movs	r3, #14
 80034d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &gpio_init_structure);
 80034d8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034dc:	4619      	mov	r1, r3
 80034de:	4813      	ldr	r0, [pc, #76]	; (800352c <BSP_LCD_MspInit+0x1b0>)
 80034e0:	f002 fc3e 	bl	8005d60 <HAL_GPIO_Init>

  /* LCD_DISP GPIO configuration */
  gpio_init_structure.Pin       = LCD_DISP_PIN;     /* LCD_DISP pin has to be manually controlled */
 80034e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_DISP_GPIO_PORT, &gpio_init_structure);
 80034ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80034f2:	4619      	mov	r1, r3
 80034f4:	480b      	ldr	r0, [pc, #44]	; (8003524 <BSP_LCD_MspInit+0x1a8>)
 80034f6:	f002 fc33 	bl	8005d60 <HAL_GPIO_Init>

  /* LCD_BL_CTRL GPIO configuration */
  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;  /* LCD_BL_CTRL pin has to be manually controlled */
 80034fa:	2308      	movs	r3, #8
 80034fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 80034fe:	2301      	movs	r3, #1
 8003500:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8003502:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003506:	4619      	mov	r1, r3
 8003508:	4808      	ldr	r0, [pc, #32]	; (800352c <BSP_LCD_MspInit+0x1b0>)
 800350a:	f002 fc29 	bl	8005d60 <HAL_GPIO_Init>
}
 800350e:	bf00      	nop
 8003510:	3740      	adds	r7, #64	; 0x40
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	40021000 	.word	0x40021000
 8003520:	40021800 	.word	0x40021800
 8003524:	40022000 	.word	0x40022000
 8003528:	40022400 	.word	0x40022400
 800352c:	40022800 	.word	0x40022800

08003530 <BSP_LCD_ClockConfig>:
  * @note   This API is called by BSP_LCD_Init()
  *         Being __weak it can be overwritten by the application
  * @retval None
  */
__weak void BSP_LCD_ClockConfig(LTDC_HandleTypeDef *hltdc, void *Params)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b082      	sub	sp, #8
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  /* RK043FN48H LCD clock configuration */
  /* PLLSAI_VCO Input = HSE_VALUE/PLL_M = 1 Mhz */
  /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN = 192 Mhz */
  /* PLLLCDCLK = PLLSAI_VCO Output/PLLSAIR = 192/5 = 38.4 Mhz */
  /* LTDC clock frequency = PLLLCDCLK / LTDC_PLLSAI_DIVR_4 = 38.4/4 = 9.6Mhz */
  periph_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800353a:	4b0a      	ldr	r3, [pc, #40]	; (8003564 <BSP_LCD_ClockConfig+0x34>)
 800353c:	2208      	movs	r2, #8
 800353e:	601a      	str	r2, [r3, #0]
  periph_clk_init_struct.PLLSAI.PLLSAIN = 192;
 8003540:	4b08      	ldr	r3, [pc, #32]	; (8003564 <BSP_LCD_ClockConfig+0x34>)
 8003542:	22c0      	movs	r2, #192	; 0xc0
 8003544:	615a      	str	r2, [r3, #20]
  periph_clk_init_struct.PLLSAI.PLLSAIR = RK043FN48H_FREQUENCY_DIVIDER;
 8003546:	4b07      	ldr	r3, [pc, #28]	; (8003564 <BSP_LCD_ClockConfig+0x34>)
 8003548:	2205      	movs	r2, #5
 800354a:	61da      	str	r2, [r3, #28]
  periph_clk_init_struct.PLLSAIDivR = RCC_PLLSAIDIVR_4;
 800354c:	4b05      	ldr	r3, [pc, #20]	; (8003564 <BSP_LCD_ClockConfig+0x34>)
 800354e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003552:	62da      	str	r2, [r3, #44]	; 0x2c
  HAL_RCCEx_PeriphCLKConfig(&periph_clk_init_struct);
 8003554:	4803      	ldr	r0, [pc, #12]	; (8003564 <BSP_LCD_ClockConfig+0x34>)
 8003556:	f004 fd21 	bl	8007f9c <HAL_RCCEx_PeriphCLKConfig>
}
 800355a:	bf00      	nop
 800355c:	3708      	adds	r7, #8
 800355e:	46bd      	mov	sp, r7
 8003560:	bd80      	pop	{r7, pc}
 8003562:	bf00      	nop
 8003564:	2000037c 	.word	0x2000037c

08003568 <DrawChar>:
  * @param  Ypos: Start column address
  * @param  c: Pointer to the character data
  * @retval None
  */
static void DrawChar(uint16_t Xpos, uint16_t Ypos, const uint8_t *c)
{
 8003568:	b580      	push	{r7, lr}
 800356a:	b088      	sub	sp, #32
 800356c:	af00      	add	r7, sp, #0
 800356e:	4603      	mov	r3, r0
 8003570:	603a      	str	r2, [r7, #0]
 8003572:	80fb      	strh	r3, [r7, #6]
 8003574:	460b      	mov	r3, r1
 8003576:	80bb      	strh	r3, [r7, #4]
  uint32_t i = 0, j = 0;
 8003578:	2300      	movs	r3, #0
 800357a:	61fb      	str	r3, [r7, #28]
 800357c:	2300      	movs	r3, #0
 800357e:	61bb      	str	r3, [r7, #24]
  uint16_t height, width;
  uint8_t  offset;
  uint8_t  *pchar;
  uint32_t line;
  
  height = DrawProp[ActiveLayer].pFont->Height;
 8003580:	4b53      	ldr	r3, [pc, #332]	; (80036d0 <DrawChar+0x168>)
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	4953      	ldr	r1, [pc, #332]	; (80036d4 <DrawChar+0x16c>)
 8003586:	4613      	mov	r3, r2
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	4413      	add	r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3308      	adds	r3, #8
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	88db      	ldrh	r3, [r3, #6]
 8003596:	827b      	strh	r3, [r7, #18]
  width  = DrawProp[ActiveLayer].pFont->Width;
 8003598:	4b4d      	ldr	r3, [pc, #308]	; (80036d0 <DrawChar+0x168>)
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	494d      	ldr	r1, [pc, #308]	; (80036d4 <DrawChar+0x16c>)
 800359e:	4613      	mov	r3, r2
 80035a0:	005b      	lsls	r3, r3, #1
 80035a2:	4413      	add	r3, r2
 80035a4:	009b      	lsls	r3, r3, #2
 80035a6:	440b      	add	r3, r1
 80035a8:	3308      	adds	r3, #8
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	889b      	ldrh	r3, [r3, #4]
 80035ae:	823b      	strh	r3, [r7, #16]
  
  offset =  8 *((width + 7)/8) -  width ;
 80035b0:	8a3b      	ldrh	r3, [r7, #16]
 80035b2:	3307      	adds	r3, #7
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	da00      	bge.n	80035ba <DrawChar+0x52>
 80035b8:	3307      	adds	r3, #7
 80035ba:	10db      	asrs	r3, r3, #3
 80035bc:	b2db      	uxtb	r3, r3
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	b2da      	uxtb	r2, r3
 80035c2:	8a3b      	ldrh	r3, [r7, #16]
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	1ad3      	subs	r3, r2, r3
 80035c8:	73fb      	strb	r3, [r7, #15]
  
  for(i = 0; i < height; i++)
 80035ca:	2300      	movs	r3, #0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	e076      	b.n	80036be <DrawChar+0x156>
  {
    pchar = ((uint8_t *)c + (width + 7)/8 * i);
 80035d0:	8a3b      	ldrh	r3, [r7, #16]
 80035d2:	3307      	adds	r3, #7
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	da00      	bge.n	80035da <DrawChar+0x72>
 80035d8:	3307      	adds	r3, #7
 80035da:	10db      	asrs	r3, r3, #3
 80035dc:	461a      	mov	r2, r3
 80035de:	69fb      	ldr	r3, [r7, #28]
 80035e0:	fb03 f302 	mul.w	r3, r3, r2
 80035e4:	683a      	ldr	r2, [r7, #0]
 80035e6:	4413      	add	r3, r2
 80035e8:	60bb      	str	r3, [r7, #8]
    
    switch(((width + 7)/8))
 80035ea:	8a3b      	ldrh	r3, [r7, #16]
 80035ec:	3307      	adds	r3, #7
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	da00      	bge.n	80035f4 <DrawChar+0x8c>
 80035f2:	3307      	adds	r3, #7
 80035f4:	10db      	asrs	r3, r3, #3
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d002      	beq.n	8003600 <DrawChar+0x98>
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d004      	beq.n	8003608 <DrawChar+0xa0>
 80035fe:	e00c      	b.n	800361a <DrawChar+0xb2>
    {
      
    case 1:
      line =  pchar[0];      
 8003600:	68bb      	ldr	r3, [r7, #8]
 8003602:	781b      	ldrb	r3, [r3, #0]
 8003604:	617b      	str	r3, [r7, #20]
      break;
 8003606:	e016      	b.n	8003636 <DrawChar+0xce>
      
    case 2:
      line =  (pchar[0]<< 8) | pchar[1];      
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	68ba      	ldr	r2, [r7, #8]
 8003610:	3201      	adds	r2, #1
 8003612:	7812      	ldrb	r2, [r2, #0]
 8003614:	4313      	orrs	r3, r2
 8003616:	617b      	str	r3, [r7, #20]
      break;
 8003618:	e00d      	b.n	8003636 <DrawChar+0xce>
      
    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800361a:	68bb      	ldr	r3, [r7, #8]
 800361c:	781b      	ldrb	r3, [r3, #0]
 800361e:	041a      	lsls	r2, r3, #16
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	3301      	adds	r3, #1
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	021b      	lsls	r3, r3, #8
 8003628:	4313      	orrs	r3, r2
 800362a:	68ba      	ldr	r2, [r7, #8]
 800362c:	3202      	adds	r2, #2
 800362e:	7812      	ldrb	r2, [r2, #0]
 8003630:	4313      	orrs	r3, r2
 8003632:	617b      	str	r3, [r7, #20]
      break;
 8003634:	bf00      	nop
    } 
    
    for (j = 0; j < width; j++)
 8003636:	2300      	movs	r3, #0
 8003638:	61bb      	str	r3, [r7, #24]
 800363a:	e036      	b.n	80036aa <DrawChar+0x142>
    {
      if(line & (1 << (width- j + offset- 1))) 
 800363c:	8a3a      	ldrh	r2, [r7, #16]
 800363e:	69bb      	ldr	r3, [r7, #24]
 8003640:	1ad2      	subs	r2, r2, r3
 8003642:	7bfb      	ldrb	r3, [r7, #15]
 8003644:	4413      	add	r3, r2
 8003646:	3b01      	subs	r3, #1
 8003648:	2201      	movs	r2, #1
 800364a:	fa02 f303 	lsl.w	r3, r2, r3
 800364e:	461a      	mov	r2, r3
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	4013      	ands	r3, r2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d012      	beq.n	800367e <DrawChar+0x116>
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	b29a      	uxth	r2, r3
 800365c:	88fb      	ldrh	r3, [r7, #6]
 800365e:	4413      	add	r3, r2
 8003660:	b298      	uxth	r0, r3
 8003662:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <DrawChar+0x168>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	491b      	ldr	r1, [pc, #108]	; (80036d4 <DrawChar+0x16c>)
 8003668:	4613      	mov	r3, r2
 800366a:	005b      	lsls	r3, r3, #1
 800366c:	4413      	add	r3, r2
 800366e:	009b      	lsls	r3, r3, #2
 8003670:	440b      	add	r3, r1
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	88bb      	ldrh	r3, [r7, #4]
 8003676:	4619      	mov	r1, r3
 8003678:	f7ff fc1c 	bl	8002eb4 <BSP_LCD_DrawPixel>
 800367c:	e012      	b.n	80036a4 <DrawChar+0x13c>
      }
      else
      {
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 800367e:	69bb      	ldr	r3, [r7, #24]
 8003680:	b29a      	uxth	r2, r3
 8003682:	88fb      	ldrh	r3, [r7, #6]
 8003684:	4413      	add	r3, r2
 8003686:	b298      	uxth	r0, r3
 8003688:	4b11      	ldr	r3, [pc, #68]	; (80036d0 <DrawChar+0x168>)
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	4911      	ldr	r1, [pc, #68]	; (80036d4 <DrawChar+0x16c>)
 800368e:	4613      	mov	r3, r2
 8003690:	005b      	lsls	r3, r3, #1
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	3304      	adds	r3, #4
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	88bb      	ldrh	r3, [r7, #4]
 800369e:	4619      	mov	r1, r3
 80036a0:	f7ff fc08 	bl	8002eb4 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 80036a4:	69bb      	ldr	r3, [r7, #24]
 80036a6:	3301      	adds	r3, #1
 80036a8:	61bb      	str	r3, [r7, #24]
 80036aa:	8a3b      	ldrh	r3, [r7, #16]
 80036ac:	69ba      	ldr	r2, [r7, #24]
 80036ae:	429a      	cmp	r2, r3
 80036b0:	d3c4      	bcc.n	800363c <DrawChar+0xd4>
      } 
    }
    Ypos++;
 80036b2:	88bb      	ldrh	r3, [r7, #4]
 80036b4:	3301      	adds	r3, #1
 80036b6:	80bb      	strh	r3, [r7, #4]
  for(i = 0; i < height; i++)
 80036b8:	69fb      	ldr	r3, [r7, #28]
 80036ba:	3301      	adds	r3, #1
 80036bc:	61fb      	str	r3, [r7, #28]
 80036be:	8a7b      	ldrh	r3, [r7, #18]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d384      	bcc.n	80035d0 <DrawChar+0x68>
  }
}
 80036c6:	bf00      	nop
 80036c8:	bf00      	nop
 80036ca:	3720      	adds	r7, #32
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}
 80036d0:	20000360 	.word	0x20000360
 80036d4:	20000364 	.word	0x20000364

080036d8 <FillTriangle>:
  * @param  x3: Point 3 X position
  * @param  y3: Point 3 Y position
  * @retval None
  */
static void FillTriangle(uint16_t x1, uint16_t x2, uint16_t x3, uint16_t y1, uint16_t y2, uint16_t y3)
{ 
 80036d8:	b590      	push	{r4, r7, lr}
 80036da:	b08b      	sub	sp, #44	; 0x2c
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4604      	mov	r4, r0
 80036e0:	4608      	mov	r0, r1
 80036e2:	4611      	mov	r1, r2
 80036e4:	461a      	mov	r2, r3
 80036e6:	4623      	mov	r3, r4
 80036e8:	80fb      	strh	r3, [r7, #6]
 80036ea:	4603      	mov	r3, r0
 80036ec:	80bb      	strh	r3, [r7, #4]
 80036ee:	460b      	mov	r3, r1
 80036f0:	807b      	strh	r3, [r7, #2]
 80036f2:	4613      	mov	r3, r2
 80036f4:	803b      	strh	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0, 
 80036f6:	2300      	movs	r3, #0
 80036f8:	823b      	strh	r3, [r7, #16]
 80036fa:	2300      	movs	r3, #0
 80036fc:	81fb      	strh	r3, [r7, #14]
 80036fe:	2300      	movs	r3, #0
 8003700:	84fb      	strh	r3, [r7, #38]	; 0x26
 8003702:	2300      	movs	r3, #0
 8003704:	84bb      	strh	r3, [r7, #36]	; 0x24
 8003706:	2300      	movs	r3, #0
 8003708:	847b      	strh	r3, [r7, #34]	; 0x22
 800370a:	2300      	movs	r3, #0
 800370c:	843b      	strh	r3, [r7, #32]
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, num_add = 0, num_pixels = 0,
 800370e:	2300      	movs	r3, #0
 8003710:	83fb      	strh	r3, [r7, #30]
 8003712:	2300      	movs	r3, #0
 8003714:	83bb      	strh	r3, [r7, #28]
 8003716:	2300      	movs	r3, #0
 8003718:	837b      	strh	r3, [r7, #26]
 800371a:	2300      	movs	r3, #0
 800371c:	833b      	strh	r3, [r7, #24]
 800371e:	2300      	movs	r3, #0
 8003720:	82fb      	strh	r3, [r7, #22]
 8003722:	2300      	movs	r3, #0
 8003724:	82bb      	strh	r3, [r7, #20]
  curpixel = 0;
 8003726:	2300      	movs	r3, #0
 8003728:	827b      	strh	r3, [r7, #18]
  
  deltax = ABS(x2 - x1);        /* The difference between the x's */
 800372a:	88ba      	ldrh	r2, [r7, #4]
 800372c:	88fb      	ldrh	r3, [r7, #6]
 800372e:	1ad3      	subs	r3, r2, r3
 8003730:	2b00      	cmp	r3, #0
 8003732:	bfb8      	it	lt
 8003734:	425b      	neglt	r3, r3
 8003736:	823b      	strh	r3, [r7, #16]
  deltay = ABS(y2 - y1);        /* The difference between the y's */
 8003738:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800373a:	883b      	ldrh	r3, [r7, #0]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	bfb8      	it	lt
 8003742:	425b      	neglt	r3, r3
 8003744:	81fb      	strh	r3, [r7, #14]
  x = x1;                       /* Start x off at the first pixel */
 8003746:	88fb      	ldrh	r3, [r7, #6]
 8003748:	84fb      	strh	r3, [r7, #38]	; 0x26
  y = y1;                       /* Start y off at the first pixel */
 800374a:	883b      	ldrh	r3, [r7, #0]
 800374c:	84bb      	strh	r3, [r7, #36]	; 0x24
  
  if (x2 >= x1)                 /* The x-values are increasing */
 800374e:	88ba      	ldrh	r2, [r7, #4]
 8003750:	88fb      	ldrh	r3, [r7, #6]
 8003752:	429a      	cmp	r2, r3
 8003754:	d304      	bcc.n	8003760 <FillTriangle+0x88>
  {
    xinc1 = 1;
 8003756:	2301      	movs	r3, #1
 8003758:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = 1;
 800375a:	2301      	movs	r3, #1
 800375c:	843b      	strh	r3, [r7, #32]
 800375e:	e005      	b.n	800376c <FillTriangle+0x94>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8003760:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003764:	847b      	strh	r3, [r7, #34]	; 0x22
    xinc2 = -1;
 8003766:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800376a:	843b      	strh	r3, [r7, #32]
  }
  
  if (y2 >= y1)                 /* The y-values are increasing */
 800376c:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800376e:	883b      	ldrh	r3, [r7, #0]
 8003770:	429a      	cmp	r2, r3
 8003772:	d304      	bcc.n	800377e <FillTriangle+0xa6>
  {
    yinc1 = 1;
 8003774:	2301      	movs	r3, #1
 8003776:	83fb      	strh	r3, [r7, #30]
    yinc2 = 1;
 8003778:	2301      	movs	r3, #1
 800377a:	83bb      	strh	r3, [r7, #28]
 800377c:	e005      	b.n	800378a <FillTriangle+0xb2>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 800377e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003782:	83fb      	strh	r3, [r7, #30]
    yinc2 = -1;
 8003784:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003788:	83bb      	strh	r3, [r7, #28]
  }
  
  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 800378a:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 800378e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003792:	429a      	cmp	r2, r3
 8003794:	db11      	blt.n	80037ba <FillTriangle+0xe2>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8003796:	2300      	movs	r3, #0
 8003798:	847b      	strh	r3, [r7, #34]	; 0x22
    yinc2 = 0;                  /* Don't change the y for every iteration */
 800379a:	2300      	movs	r3, #0
 800379c:	83bb      	strh	r3, [r7, #28]
    den = deltax;
 800379e:	8a3b      	ldrh	r3, [r7, #16]
 80037a0:	837b      	strh	r3, [r7, #26]
    num = deltax / 2;
 80037a2:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	da00      	bge.n	80037ac <FillTriangle+0xd4>
 80037aa:	3301      	adds	r3, #1
 80037ac:	105b      	asrs	r3, r3, #1
 80037ae:	833b      	strh	r3, [r7, #24]
    num_add = deltay;
 80037b0:	89fb      	ldrh	r3, [r7, #14]
 80037b2:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltax;         /* There are more x-values than y-values */
 80037b4:	8a3b      	ldrh	r3, [r7, #16]
 80037b6:	82bb      	strh	r3, [r7, #20]
 80037b8:	e010      	b.n	80037dc <FillTriangle+0x104>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80037ba:	2300      	movs	r3, #0
 80037bc:	843b      	strh	r3, [r7, #32]
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80037be:	2300      	movs	r3, #0
 80037c0:	83fb      	strh	r3, [r7, #30]
    den = deltay;
 80037c2:	89fb      	ldrh	r3, [r7, #14]
 80037c4:	837b      	strh	r3, [r7, #26]
    num = deltay / 2;
 80037c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	da00      	bge.n	80037d0 <FillTriangle+0xf8>
 80037ce:	3301      	adds	r3, #1
 80037d0:	105b      	asrs	r3, r3, #1
 80037d2:	833b      	strh	r3, [r7, #24]
    num_add = deltax;
 80037d4:	8a3b      	ldrh	r3, [r7, #16]
 80037d6:	82fb      	strh	r3, [r7, #22]
    num_pixels = deltay;         /* There are more y-values than x-values */
 80037d8:	89fb      	ldrh	r3, [r7, #14]
 80037da:	82bb      	strh	r3, [r7, #20]
  }
  
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 80037dc:	2300      	movs	r3, #0
 80037de:	827b      	strh	r3, [r7, #18]
 80037e0:	e02f      	b.n	8003842 <FillTriangle+0x16a>
  {
    BSP_LCD_DrawLine(x, y, x3, y3);
 80037e2:	8cf8      	ldrh	r0, [r7, #38]	; 0x26
 80037e4:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80037e6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80037e8:	887a      	ldrh	r2, [r7, #2]
 80037ea:	f7ff f9ad 	bl	8002b48 <BSP_LCD_DrawLine>
    
    num += num_add;              /* Increase the numerator by the top of the fraction */
 80037ee:	8b3a      	ldrh	r2, [r7, #24]
 80037f0:	8afb      	ldrh	r3, [r7, #22]
 80037f2:	4413      	add	r3, r2
 80037f4:	b29b      	uxth	r3, r3
 80037f6:	833b      	strh	r3, [r7, #24]
    if (num >= den)             /* Check if numerator >= denominator */
 80037f8:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 80037fc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8003800:	429a      	cmp	r2, r3
 8003802:	db0e      	blt.n	8003822 <FillTriangle+0x14a>
    {
      num -= den;               /* Calculate the new numerator value */
 8003804:	8b3a      	ldrh	r2, [r7, #24]
 8003806:	8b7b      	ldrh	r3, [r7, #26]
 8003808:	1ad3      	subs	r3, r2, r3
 800380a:	b29b      	uxth	r3, r3
 800380c:	833b      	strh	r3, [r7, #24]
      x += xinc1;               /* Change the x as appropriate */
 800380e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8003812:	4413      	add	r3, r2
 8003814:	b29b      	uxth	r3, r3
 8003816:	84fb      	strh	r3, [r7, #38]	; 0x26
      y += yinc1;               /* Change the y as appropriate */
 8003818:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800381a:	8bfb      	ldrh	r3, [r7, #30]
 800381c:	4413      	add	r3, r2
 800381e:	b29b      	uxth	r3, r3
 8003820:	84bb      	strh	r3, [r7, #36]	; 0x24
    }
    x += xinc2;                 /* Change the x as appropriate */
 8003822:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8003824:	8c3b      	ldrh	r3, [r7, #32]
 8003826:	4413      	add	r3, r2
 8003828:	b29b      	uxth	r3, r3
 800382a:	84fb      	strh	r3, [r7, #38]	; 0x26
    y += yinc2;                 /* Change the y as appropriate */
 800382c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800382e:	8bbb      	ldrh	r3, [r7, #28]
 8003830:	4413      	add	r3, r2
 8003832:	b29b      	uxth	r3, r3
 8003834:	84bb      	strh	r3, [r7, #36]	; 0x24
  for (curpixel = 0; curpixel <= num_pixels; curpixel++)
 8003836:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800383a:	b29b      	uxth	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	b29b      	uxth	r3, r3
 8003840:	827b      	strh	r3, [r7, #18]
 8003842:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003846:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 800384a:	429a      	cmp	r2, r3
 800384c:	ddc9      	ble.n	80037e2 <FillTriangle+0x10a>
  } 
}
 800384e:	bf00      	nop
 8003850:	bf00      	nop
 8003852:	372c      	adds	r7, #44	; 0x2c
 8003854:	46bd      	mov	sp, r7
 8003856:	bd90      	pop	{r4, r7, pc}

08003858 <LL_FillBuffer>:
  * @param  OffLine: Offset
  * @param  ColorIndex: Color index
  * @retval None
  */
static void LL_FillBuffer(uint32_t LayerIndex, void *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b086      	sub	sp, #24
 800385c:	af02      	add	r7, sp, #8
 800385e:	60f8      	str	r0, [r7, #12]
 8003860:	60b9      	str	r1, [r7, #8]
 8003862:	607a      	str	r2, [r7, #4]
 8003864:	603b      	str	r3, [r7, #0]
  /* Register to memory mode with ARGB8888 as color Mode */ 
  hDma2dHandler.Init.Mode         = DMA2D_R2M;
 8003866:	4b1e      	ldr	r3, [pc, #120]	; (80038e0 <LL_FillBuffer+0x88>)
 8003868:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800386c:	605a      	str	r2, [r3, #4]
  if(hLtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565)
 800386e:	4b1d      	ldr	r3, [pc, #116]	; (80038e4 <LL_FillBuffer+0x8c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a1d      	ldr	r2, [pc, #116]	; (80038e8 <LL_FillBuffer+0x90>)
 8003874:	2134      	movs	r1, #52	; 0x34
 8003876:	fb01 f303 	mul.w	r3, r1, r3
 800387a:	4413      	add	r3, r2
 800387c:	3348      	adds	r3, #72	; 0x48
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	2b02      	cmp	r3, #2
 8003882:	d103      	bne.n	800388c <LL_FillBuffer+0x34>
  { /* RGB565 format */ 
    hDma2dHandler.Init.ColorMode    = DMA2D_RGB565;
 8003884:	4b16      	ldr	r3, [pc, #88]	; (80038e0 <LL_FillBuffer+0x88>)
 8003886:	2202      	movs	r2, #2
 8003888:	609a      	str	r2, [r3, #8]
 800388a:	e002      	b.n	8003892 <LL_FillBuffer+0x3a>
  }
  else
  { /* ARGB8888 format */
    hDma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 800388c:	4b14      	ldr	r3, [pc, #80]	; (80038e0 <LL_FillBuffer+0x88>)
 800388e:	2200      	movs	r2, #0
 8003890:	609a      	str	r2, [r3, #8]
  }
  hDma2dHandler.Init.OutputOffset = OffLine;      
 8003892:	4a13      	ldr	r2, [pc, #76]	; (80038e0 <LL_FillBuffer+0x88>)
 8003894:	69bb      	ldr	r3, [r7, #24]
 8003896:	60d3      	str	r3, [r2, #12]
  
  hDma2dHandler.Instance = DMA2D;
 8003898:	4b11      	ldr	r3, [pc, #68]	; (80038e0 <LL_FillBuffer+0x88>)
 800389a:	4a14      	ldr	r2, [pc, #80]	; (80038ec <LL_FillBuffer+0x94>)
 800389c:	601a      	str	r2, [r3, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hDma2dHandler) == HAL_OK) 
 800389e:	4810      	ldr	r0, [pc, #64]	; (80038e0 <LL_FillBuffer+0x88>)
 80038a0:	f001 ffd2 	bl	8005848 <HAL_DMA2D_Init>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d115      	bne.n	80038d6 <LL_FillBuffer+0x7e>
  {
    if(HAL_DMA2D_ConfigLayer(&hDma2dHandler, LayerIndex) == HAL_OK) 
 80038aa:	68f9      	ldr	r1, [r7, #12]
 80038ac:	480c      	ldr	r0, [pc, #48]	; (80038e0 <LL_FillBuffer+0x88>)
 80038ae:	f002 f929 	bl	8005b04 <HAL_DMA2D_ConfigLayer>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d10e      	bne.n	80038d6 <LL_FillBuffer+0x7e>
    {
      if (HAL_DMA2D_Start(&hDma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69f9      	ldr	r1, [r7, #28]
 80038c2:	4807      	ldr	r0, [pc, #28]	; (80038e0 <LL_FillBuffer+0x88>)
 80038c4:	f002 f80a 	bl	80058dc <HAL_DMA2D_Start>
 80038c8:	4603      	mov	r3, r0
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d103      	bne.n	80038d6 <LL_FillBuffer+0x7e>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&hDma2dHandler, 10);
 80038ce:	210a      	movs	r1, #10
 80038d0:	4803      	ldr	r0, [pc, #12]	; (80038e0 <LL_FillBuffer+0x88>)
 80038d2:	f002 f82e 	bl	8005932 <HAL_DMA2D_PollForTransfer>
      }
    }
  } 
}
 80038d6:	bf00      	nop
 80038d8:	3710      	adds	r7, #16
 80038da:	46bd      	mov	sp, r7
 80038dc:	bd80      	pop	{r7, pc}
 80038de:	bf00      	nop
 80038e0:	20000320 	.word	0x20000320
 80038e4:	20000360 	.word	0x20000360
 80038e8:	20008bb4 	.word	0x20008bb4
 80038ec:	4002b000 	.word	0x4002b000

080038f0 <BSP_SDRAM_Init>:
/**
  * @brief  Initializes the SDRAM device.
  * @retval SDRAM status
  */
uint8_t BSP_SDRAM_Init(void)
{ 
 80038f0:	b580      	push	{r7, lr}
 80038f2:	af00      	add	r7, sp, #0
  static uint8_t sdramstatus = SDRAM_ERROR;
  /* SDRAM device configuration */
  sdramHandle.Instance = FMC_SDRAM_DEVICE;
 80038f4:	4b29      	ldr	r3, [pc, #164]	; (800399c <BSP_SDRAM_Init+0xac>)
 80038f6:	4a2a      	ldr	r2, [pc, #168]	; (80039a0 <BSP_SDRAM_Init+0xb0>)
 80038f8:	601a      	str	r2, [r3, #0]
    
  /* Timing configuration for 100Mhz as SD clock frequency (System clock is up to 200Mhz) */
  Timing.LoadToActiveDelay    = 2;
 80038fa:	4b2a      	ldr	r3, [pc, #168]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 80038fc:	2202      	movs	r2, #2
 80038fe:	601a      	str	r2, [r3, #0]
  Timing.ExitSelfRefreshDelay = 7;
 8003900:	4b28      	ldr	r3, [pc, #160]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 8003902:	2207      	movs	r2, #7
 8003904:	605a      	str	r2, [r3, #4]
  Timing.SelfRefreshTime      = 4;
 8003906:	4b27      	ldr	r3, [pc, #156]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 8003908:	2204      	movs	r2, #4
 800390a:	609a      	str	r2, [r3, #8]
  Timing.RowCycleDelay        = 7;
 800390c:	4b25      	ldr	r3, [pc, #148]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 800390e:	2207      	movs	r2, #7
 8003910:	60da      	str	r2, [r3, #12]
  Timing.WriteRecoveryTime    = 2;
 8003912:	4b24      	ldr	r3, [pc, #144]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 8003914:	2202      	movs	r2, #2
 8003916:	611a      	str	r2, [r3, #16]
  Timing.RPDelay              = 2;
 8003918:	4b22      	ldr	r3, [pc, #136]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 800391a:	2202      	movs	r2, #2
 800391c:	615a      	str	r2, [r3, #20]
  Timing.RCDDelay             = 2;
 800391e:	4b21      	ldr	r3, [pc, #132]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 8003920:	2202      	movs	r2, #2
 8003922:	619a      	str	r2, [r3, #24]
  
  sdramHandle.Init.SDBank             = FMC_SDRAM_BANK1;
 8003924:	4b1d      	ldr	r3, [pc, #116]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003926:	2200      	movs	r2, #0
 8003928:	605a      	str	r2, [r3, #4]
  sdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800392a:	4b1c      	ldr	r3, [pc, #112]	; (800399c <BSP_SDRAM_Init+0xac>)
 800392c:	2200      	movs	r2, #0
 800392e:	609a      	str	r2, [r3, #8]
  sdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8003930:	4b1a      	ldr	r3, [pc, #104]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003932:	2204      	movs	r2, #4
 8003934:	60da      	str	r2, [r3, #12]
  sdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8003936:	4b19      	ldr	r3, [pc, #100]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003938:	2210      	movs	r2, #16
 800393a:	611a      	str	r2, [r3, #16]
  sdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800393c:	4b17      	ldr	r3, [pc, #92]	; (800399c <BSP_SDRAM_Init+0xac>)
 800393e:	2240      	movs	r2, #64	; 0x40
 8003940:	615a      	str	r2, [r3, #20]
  sdramHandle.Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_2;
 8003942:	4b16      	ldr	r3, [pc, #88]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003944:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003948:	619a      	str	r2, [r3, #24]
  sdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800394a:	4b14      	ldr	r3, [pc, #80]	; (800399c <BSP_SDRAM_Init+0xac>)
 800394c:	2200      	movs	r2, #0
 800394e:	61da      	str	r2, [r3, #28]
  sdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8003950:	4b12      	ldr	r3, [pc, #72]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003952:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003956:	621a      	str	r2, [r3, #32]
  sdramHandle.Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8003958:	4b10      	ldr	r3, [pc, #64]	; (800399c <BSP_SDRAM_Init+0xac>)
 800395a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800395e:	625a      	str	r2, [r3, #36]	; 0x24
  sdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8003960:	4b0e      	ldr	r3, [pc, #56]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003962:	2200      	movs	r2, #0
 8003964:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* SDRAM controller initialization */

  BSP_SDRAM_MspInit(&sdramHandle, NULL); /* __weak function can be rewritten by the application */
 8003966:	2100      	movs	r1, #0
 8003968:	480c      	ldr	r0, [pc, #48]	; (800399c <BSP_SDRAM_Init+0xac>)
 800396a:	f000 f87f 	bl	8003a6c <BSP_SDRAM_MspInit>

  if(HAL_SDRAM_Init(&sdramHandle, &Timing) != HAL_OK)
 800396e:	490d      	ldr	r1, [pc, #52]	; (80039a4 <BSP_SDRAM_Init+0xb4>)
 8003970:	480a      	ldr	r0, [pc, #40]	; (800399c <BSP_SDRAM_Init+0xac>)
 8003972:	f005 fac3 	bl	8008efc <HAL_SDRAM_Init>
 8003976:	4603      	mov	r3, r0
 8003978:	2b00      	cmp	r3, #0
 800397a:	d003      	beq.n	8003984 <BSP_SDRAM_Init+0x94>
  {
    sdramstatus = SDRAM_ERROR;
 800397c:	4b0a      	ldr	r3, [pc, #40]	; (80039a8 <BSP_SDRAM_Init+0xb8>)
 800397e:	2201      	movs	r2, #1
 8003980:	701a      	strb	r2, [r3, #0]
 8003982:	e002      	b.n	800398a <BSP_SDRAM_Init+0x9a>
  }
  else
  {
    sdramstatus = SDRAM_OK;
 8003984:	4b08      	ldr	r3, [pc, #32]	; (80039a8 <BSP_SDRAM_Init+0xb8>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
  }
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800398a:	f240 6003 	movw	r0, #1539	; 0x603
 800398e:	f000 f80d 	bl	80039ac <BSP_SDRAM_Initialization_sequence>
  
  return sdramstatus;
 8003992:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <BSP_SDRAM_Init+0xb8>)
 8003994:	781b      	ldrb	r3, [r3, #0]
}
 8003996:	4618      	mov	r0, r3
 8003998:	bd80      	pop	{r7, pc}
 800399a:	bf00      	nop
 800399c:	20008c5c 	.word	0x20008c5c
 80039a0:	a0000140 	.word	0xa0000140
 80039a4:	20000400 	.word	0x20000400
 80039a8:	20000044 	.word	0x20000044

080039ac <BSP_SDRAM_Initialization_sequence>:
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  * @retval None
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b084      	sub	sp, #16
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd = 0;
 80039b4:	2300      	movs	r3, #0
 80039b6:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  Command.CommandMode            = FMC_SDRAM_CMD_CLK_ENABLE;
 80039b8:	4b2a      	ldr	r3, [pc, #168]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ba:	2201      	movs	r2, #1
 80039bc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039be:	4b29      	ldr	r3, [pc, #164]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c0:	2210      	movs	r2, #16
 80039c2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039c4:	4b27      	ldr	r3, [pc, #156]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039c6:	2201      	movs	r2, #1
 80039c8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039ca:	4b26      	ldr	r3, [pc, #152]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 80039d0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039d4:	4923      	ldr	r1, [pc, #140]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039d6:	4824      	ldr	r0, [pc, #144]	; (8003a68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 80039d8:	f005 fac4 	bl	8008f64 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 80039dc:	2001      	movs	r0, #1
 80039de:	f000 ffa5 	bl	800492c <HAL_Delay>
    
  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_PALL;
 80039e2:	4b20      	ldr	r3, [pc, #128]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039e4:	2202      	movs	r2, #2
 80039e6:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 80039e8:	4b1e      	ldr	r3, [pc, #120]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039ea:	2210      	movs	r2, #16
 80039ec:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 80039ee:	4b1d      	ldr	r3, [pc, #116]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f0:	2201      	movs	r2, #1
 80039f2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80039f4:	4b1b      	ldr	r3, [pc, #108]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 80039f6:	2200      	movs	r2, #0
 80039f8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);  
 80039fa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80039fe:	4919      	ldr	r1, [pc, #100]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a00:	4819      	ldr	r0, [pc, #100]	; (8003a68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a02:	f005 faaf 	bl	8008f64 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode            = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8003a06:	4b17      	ldr	r3, [pc, #92]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a08:	2203      	movs	r2, #3
 8003a0a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a0c:	4b15      	ldr	r3, [pc, #84]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a0e:	2210      	movs	r2, #16
 8003a10:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 8;
 8003a12:	4b14      	ldr	r3, [pc, #80]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a14:	2208      	movs	r2, #8
 8003a16:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8003a18:	4b12      	ldr	r3, [pc, #72]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a22:	4910      	ldr	r1, [pc, #64]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a24:	4810      	ldr	r0, [pc, #64]	; (8003a68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a26:	f005 fa9d 	bl	8008f64 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |\
 8003a2a:	f44f 7308 	mov.w	r3, #544	; 0x220
 8003a2e:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |\
                     SDRAM_MODEREG_CAS_LATENCY_2           |\
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |\
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode            = FMC_SDRAM_CMD_LOAD_MODE;
 8003a30:	4b0c      	ldr	r3, [pc, #48]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a32:	2204      	movs	r2, #4
 8003a34:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = FMC_SDRAM_CMD_TARGET_BANK1;
 8003a36:	4b0b      	ldr	r3, [pc, #44]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a38:	2210      	movs	r2, #16
 8003a3a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber      = 1;
 8003a3c:	4b09      	ldr	r3, [pc, #36]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a3e:	2201      	movs	r2, #1
 8003a40:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a46:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&sdramHandle, &Command, SDRAM_TIMEOUT);
 8003a48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a4c:	4905      	ldr	r1, [pc, #20]	; (8003a64 <BSP_SDRAM_Initialization_sequence+0xb8>)
 8003a4e:	4806      	ldr	r0, [pc, #24]	; (8003a68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a50:	f005 fa88 	bl	8008f64 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&sdramHandle, RefreshCount); 
 8003a54:	6879      	ldr	r1, [r7, #4]
 8003a56:	4804      	ldr	r0, [pc, #16]	; (8003a68 <BSP_SDRAM_Initialization_sequence+0xbc>)
 8003a58:	f005 faaf 	bl	8008fba <HAL_SDRAM_ProgramRefreshRate>
}
 8003a5c:	bf00      	nop
 8003a5e:	3710      	adds	r7, #16
 8003a60:	46bd      	mov	sp, r7
 8003a62:	bd80      	pop	{r7, pc}
 8003a64:	2000041c 	.word	0x2000041c
 8003a68:	20008c5c 	.word	0x20008c5c

08003a6c <BSP_SDRAM_MspInit>:
  * @param  hsdram: SDRAM handle
  * @param  Params
  * @retval None
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{  
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b090      	sub	sp, #64	; 0x40
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
 8003a74:	6039      	str	r1, [r7, #0]
  static DMA_HandleTypeDef dma_handle;
  GPIO_InitTypeDef gpio_init_structure;
  
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8003a76:	4b70      	ldr	r3, [pc, #448]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a7a:	4a6f      	ldr	r2, [pc, #444]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a7c:	f043 0301 	orr.w	r3, r3, #1
 8003a80:	6393      	str	r3, [r2, #56]	; 0x38
 8003a82:	4b6d      	ldr	r3, [pc, #436]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	f003 0301 	and.w	r3, r3, #1
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
  
  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 8003a8e:	4b6a      	ldr	r3, [pc, #424]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a92:	4a69      	ldr	r2, [pc, #420]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003a98:	6313      	str	r3, [r2, #48]	; 0x30
 8003a9a:	4b67      	ldr	r3, [pc, #412]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aa2:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003aa6:	4b64      	ldr	r3, [pc, #400]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aaa:	4a63      	ldr	r2, [pc, #396]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003aac:	f043 0304 	orr.w	r3, r3, #4
 8003ab0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ab2:	4b61      	ldr	r3, [pc, #388]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ab6:	f003 0304 	and.w	r3, r3, #4
 8003aba:	623b      	str	r3, [r7, #32]
 8003abc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003abe:	4b5e      	ldr	r3, [pc, #376]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac2:	4a5d      	ldr	r2, [pc, #372]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ac4:	f043 0308 	orr.w	r3, r3, #8
 8003ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8003aca:	4b5b      	ldr	r3, [pc, #364]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	f003 0308 	and.w	r3, r3, #8
 8003ad2:	61fb      	str	r3, [r7, #28]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003ad6:	4b58      	ldr	r3, [pc, #352]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ada:	4a57      	ldr	r2, [pc, #348]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003adc:	f043 0310 	orr.w	r3, r3, #16
 8003ae0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ae2:	4b55      	ldr	r3, [pc, #340]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003aee:	4b52      	ldr	r3, [pc, #328]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003af0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af2:	4a51      	ldr	r2, [pc, #324]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003af4:	f043 0320 	orr.w	r3, r3, #32
 8003af8:	6313      	str	r3, [r2, #48]	; 0x30
 8003afa:	4b4f      	ldr	r3, [pc, #316]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003afe:	f003 0320 	and.w	r3, r3, #32
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8003b06:	4b4c      	ldr	r3, [pc, #304]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0a:	4a4b      	ldr	r2, [pc, #300]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003b10:	6313      	str	r3, [r2, #48]	; 0x30
 8003b12:	4b49      	ldr	r3, [pc, #292]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b1a:	613b      	str	r3, [r7, #16]
 8003b1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003b1e:	4b46      	ldr	r3, [pc, #280]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	4a45      	ldr	r2, [pc, #276]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003b28:	6313      	str	r3, [r2, #48]	; 0x30
 8003b2a:	4b43      	ldr	r3, [pc, #268]	; (8003c38 <BSP_SDRAM_MspInit+0x1cc>)
 8003b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	68fb      	ldr	r3, [r7, #12]
  
  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8003b36:	2302      	movs	r3, #2
 8003b38:	633b      	str	r3, [r7, #48]	; 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	637b      	str	r3, [r7, #52]	; 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FAST;
 8003b3e:	2302      	movs	r3, #2
 8003b40:	63bb      	str	r3, [r7, #56]	; 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8003b42:	230c      	movs	r3, #12
 8003b44:	63fb      	str	r3, [r7, #60]	; 0x3c
  
  /* GPIOC configuration */
  gpio_init_structure.Pin   = GPIO_PIN_3;
 8003b46:	2308      	movs	r3, #8
 8003b48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 8003b4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b4e:	4619      	mov	r1, r3
 8003b50:	483a      	ldr	r0, [pc, #232]	; (8003c3c <BSP_SDRAM_MspInit+0x1d0>)
 8003b52:	f002 f905 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8 | GPIO_PIN_9 |
 8003b56:	f24c 7303 	movw	r3, #50947	; 0xc703
 8003b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8003b5c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b60:	4619      	mov	r1, r3
 8003b62:	4837      	ldr	r0, [pc, #220]	; (8003c40 <BSP_SDRAM_MspInit+0x1d4>)
 8003b64:	f002 f8fc 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOE configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8003b68:	f64f 7383 	movw	r3, #65411	; 0xff83
 8003b6c:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8003b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b72:	4619      	mov	r1, r3
 8003b74:	4833      	ldr	r0, [pc, #204]	; (8003c44 <BSP_SDRAM_MspInit+0x1d8>)
 8003b76:	f002 f8f3 	bl	8005d60 <HAL_GPIO_Init>
  
  /* GPIOF configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8003b7a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8003b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8003b80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b84:	4619      	mov	r1, r3
 8003b86:	4830      	ldr	r0, [pc, #192]	; (8003c48 <BSP_SDRAM_MspInit+0x1dc>)
 8003b88:	f002 f8ea 	bl	8005d60 <HAL_GPIO_Init>
  
  /* GPIOG configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4| GPIO_PIN_5 | GPIO_PIN_8 |\
 8003b8c:	f248 1333 	movw	r3, #33075	; 0x8133
 8003b90:	62fb      	str	r3, [r7, #44]	; 0x2c
                              GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8003b92:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003b96:	4619      	mov	r1, r3
 8003b98:	482c      	ldr	r0, [pc, #176]	; (8003c4c <BSP_SDRAM_MspInit+0x1e0>)
 8003b9a:	f002 f8e1 	bl	8005d60 <HAL_GPIO_Init>

  /* GPIOH configuration */  
  gpio_init_structure.Pin   = GPIO_PIN_3 | GPIO_PIN_5;
 8003b9e:	2328      	movs	r3, #40	; 0x28
 8003ba0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOH, &gpio_init_structure); 
 8003ba2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4829      	ldr	r0, [pc, #164]	; (8003c50 <BSP_SDRAM_MspInit+0x1e4>)
 8003baa:	f002 f8d9 	bl	8005d60 <HAL_GPIO_Init>
  
  /* Configure common DMA parameters */
  dma_handle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8003bae:	4b29      	ldr	r3, [pc, #164]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	605a      	str	r2, [r3, #4]
  dma_handle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 8003bb4:	4b27      	ldr	r3, [pc, #156]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bb6:	2280      	movs	r2, #128	; 0x80
 8003bb8:	609a      	str	r2, [r3, #8]
  dma_handle.Init.PeriphInc           = DMA_PINC_ENABLE;
 8003bba:	4b26      	ldr	r3, [pc, #152]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bc0:	60da      	str	r2, [r3, #12]
  dma_handle.Init.MemInc              = DMA_MINC_ENABLE;
 8003bc2:	4b24      	ldr	r3, [pc, #144]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bc4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003bc8:	611a      	str	r2, [r3, #16]
  dma_handle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8003bca:	4b22      	ldr	r3, [pc, #136]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bcc:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003bd0:	615a      	str	r2, [r3, #20]
  dma_handle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8003bd2:	4b20      	ldr	r3, [pc, #128]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bd4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003bd8:	619a      	str	r2, [r3, #24]
  dma_handle.Init.Mode                = DMA_NORMAL;
 8003bda:	4b1e      	ldr	r3, [pc, #120]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	61da      	str	r2, [r3, #28]
  dma_handle.Init.Priority            = DMA_PRIORITY_HIGH;
 8003be0:	4b1c      	ldr	r3, [pc, #112]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003be2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8003be6:	621a      	str	r2, [r3, #32]
  dma_handle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;         
 8003be8:	4b1a      	ldr	r3, [pc, #104]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bea:	2200      	movs	r2, #0
 8003bec:	625a      	str	r2, [r3, #36]	; 0x24
  dma_handle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8003bee:	4b19      	ldr	r3, [pc, #100]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf0:	2203      	movs	r2, #3
 8003bf2:	629a      	str	r2, [r3, #40]	; 0x28
  dma_handle.Init.MemBurst            = DMA_MBURST_SINGLE;
 8003bf4:	4b17      	ldr	r3, [pc, #92]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	62da      	str	r2, [r3, #44]	; 0x2c
  dma_handle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 8003bfa:	4b16      	ldr	r3, [pc, #88]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	631a      	str	r2, [r3, #48]	; 0x30
  
  dma_handle.Instance = SDRAM_DMAx_STREAM;
 8003c00:	4b14      	ldr	r3, [pc, #80]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <BSP_SDRAM_MspInit+0x1ec>)
 8003c04:	601a      	str	r2, [r3, #0]
  
   /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dma_handle);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	4a12      	ldr	r2, [pc, #72]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0a:	631a      	str	r2, [r3, #48]	; 0x30
 8003c0c:	4a11      	ldr	r2, [pc, #68]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dma_handle);
 8003c12:	4810      	ldr	r0, [pc, #64]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003c14:	f001 fce6 	bl	80055e4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dma_handle); 
 8003c18:	480e      	ldr	r0, [pc, #56]	; (8003c54 <BSP_SDRAM_MspInit+0x1e8>)
 8003c1a:	f001 fc35 	bl	8005488 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 8003c1e:	2200      	movs	r2, #0
 8003c20:	210f      	movs	r1, #15
 8003c22:	2038      	movs	r0, #56	; 0x38
 8003c24:	f001 fb38 	bl	8005298 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8003c28:	2038      	movs	r0, #56	; 0x38
 8003c2a:	f001 fb51 	bl	80052d0 <HAL_NVIC_EnableIRQ>
}
 8003c2e:	bf00      	nop
 8003c30:	3740      	adds	r7, #64	; 0x40
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	40023800 	.word	0x40023800
 8003c3c:	40020800 	.word	0x40020800
 8003c40:	40020c00 	.word	0x40020c00
 8003c44:	40021000 	.word	0x40021000
 8003c48:	40021400 	.word	0x40021400
 8003c4c:	40021800 	.word	0x40021800
 8003c50:	40021c00 	.word	0x40021c00
 8003c54:	2000042c 	.word	0x2000042c
 8003c58:	40026410 	.word	0x40026410

08003c5c <BSP_TS_Init>:
  * @param  ts_SizeX: Maximum X size of the TS area on LCD
  * @param  ts_SizeY: Maximum Y size of the TS area on LCD
  * @retval TS_OK if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t ts_SizeX, uint16_t ts_SizeY)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b084      	sub	sp, #16
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	4603      	mov	r3, r0
 8003c64:	460a      	mov	r2, r1
 8003c66:	80fb      	strh	r3, [r7, #6]
 8003c68:	4613      	mov	r3, r2
 8003c6a:	80bb      	strh	r3, [r7, #4]
  uint8_t status = TS_OK;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	73fb      	strb	r3, [r7, #15]
  tsXBoundary = ts_SizeX;
 8003c70:	4a14      	ldr	r2, [pc, #80]	; (8003cc4 <BSP_TS_Init+0x68>)
 8003c72:	88fb      	ldrh	r3, [r7, #6]
 8003c74:	8013      	strh	r3, [r2, #0]
  tsYBoundary = ts_SizeY;
 8003c76:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <BSP_TS_Init+0x6c>)
 8003c78:	88bb      	ldrh	r3, [r7, #4]
 8003c7a:	8013      	strh	r3, [r2, #0]
  
  /* Read ID and verify if the touch screen driver is ready */
  ft5336_ts_drv.Init(TS_I2C_ADDRESS);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <BSP_TS_Init+0x70>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2070      	movs	r0, #112	; 0x70
 8003c82:	4798      	blx	r3
  if(ft5336_ts_drv.ReadID(TS_I2C_ADDRESS) == FT5336_ID_VALUE)
 8003c84:	4b11      	ldr	r3, [pc, #68]	; (8003ccc <BSP_TS_Init+0x70>)
 8003c86:	685b      	ldr	r3, [r3, #4]
 8003c88:	2070      	movs	r0, #112	; 0x70
 8003c8a:	4798      	blx	r3
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b51      	cmp	r3, #81	; 0x51
 8003c90:	d111      	bne.n	8003cb6 <BSP_TS_Init+0x5a>
  { 
    /* Initialize the TS driver structure */
    tsDriver = &ft5336_ts_drv;
 8003c92:	4b0f      	ldr	r3, [pc, #60]	; (8003cd0 <BSP_TS_Init+0x74>)
 8003c94:	4a0d      	ldr	r2, [pc, #52]	; (8003ccc <BSP_TS_Init+0x70>)
 8003c96:	601a      	str	r2, [r3, #0]
    I2cAddress = TS_I2C_ADDRESS;
 8003c98:	4b0e      	ldr	r3, [pc, #56]	; (8003cd4 <BSP_TS_Init+0x78>)
 8003c9a:	2270      	movs	r2, #112	; 0x70
 8003c9c:	701a      	strb	r2, [r3, #0]
    tsOrientation = TS_SWAP_XY;
 8003c9e:	4b0e      	ldr	r3, [pc, #56]	; (8003cd8 <BSP_TS_Init+0x7c>)
 8003ca0:	2208      	movs	r2, #8
 8003ca2:	701a      	strb	r2, [r3, #0]

    /* Initialize the TS driver */
    tsDriver->Start(I2cAddress);
 8003ca4:	4b0a      	ldr	r3, [pc, #40]	; (8003cd0 <BSP_TS_Init+0x74>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	68db      	ldr	r3, [r3, #12]
 8003caa:	4a0a      	ldr	r2, [pc, #40]	; (8003cd4 <BSP_TS_Init+0x78>)
 8003cac:	7812      	ldrb	r2, [r2, #0]
 8003cae:	b292      	uxth	r2, r2
 8003cb0:	4610      	mov	r0, r2
 8003cb2:	4798      	blx	r3
 8003cb4:	e001      	b.n	8003cba <BSP_TS_Init+0x5e>
  }
  else
  {
    status = TS_DEVICE_NOT_FOUND;
 8003cb6:	2303      	movs	r3, #3
 8003cb8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cbc:	4618      	mov	r0, r3
 8003cbe:	3710      	adds	r7, #16
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	bd80      	pop	{r7, pc}
 8003cc4:	20000490 	.word	0x20000490
 8003cc8:	20000492 	.word	0x20000492
 8003ccc:	20000000 	.word	0x20000000
 8003cd0:	2000048c 	.word	0x2000048c
 8003cd4:	20000495 	.word	0x20000495
 8003cd8:	20000494 	.word	0x20000494

08003cdc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b082      	sub	sp, #8
 8003ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8003ce2:	4b11      	ldr	r3, [pc, #68]	; (8003d28 <HAL_MspInit+0x4c>)
 8003ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce6:	4a10      	ldr	r2, [pc, #64]	; (8003d28 <HAL_MspInit+0x4c>)
 8003ce8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cec:	6413      	str	r3, [r2, #64]	; 0x40
 8003cee:	4b0e      	ldr	r3, [pc, #56]	; (8003d28 <HAL_MspInit+0x4c>)
 8003cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cf2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cf6:	607b      	str	r3, [r7, #4]
 8003cf8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cfa:	4b0b      	ldr	r3, [pc, #44]	; (8003d28 <HAL_MspInit+0x4c>)
 8003cfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003cfe:	4a0a      	ldr	r2, [pc, #40]	; (8003d28 <HAL_MspInit+0x4c>)
 8003d00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d04:	6453      	str	r3, [r2, #68]	; 0x44
 8003d06:	4b08      	ldr	r3, [pc, #32]	; (8003d28 <HAL_MspInit+0x4c>)
 8003d08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003d12:	2200      	movs	r2, #0
 8003d14:	210f      	movs	r1, #15
 8003d16:	f06f 0001 	mvn.w	r0, #1
 8003d1a:	f001 fabd 	bl	8005298 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d1e:	bf00      	nop
 8003d20:	3708      	adds	r7, #8
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	40023800 	.word	0x40023800

08003d2c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b08c      	sub	sp, #48	; 0x30
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d34:	f107 031c 	add.w	r3, r7, #28
 8003d38:	2200      	movs	r2, #0
 8003d3a:	601a      	str	r2, [r3, #0]
 8003d3c:	605a      	str	r2, [r3, #4]
 8003d3e:	609a      	str	r2, [r3, #8]
 8003d40:	60da      	str	r2, [r3, #12]
 8003d42:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a2a      	ldr	r2, [pc, #168]	; (8003df4 <HAL_ADC_MspInit+0xc8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d124      	bne.n	8003d98 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003d4e:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d52:	4a29      	ldr	r2, [pc, #164]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003d58:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5a:	4b27      	ldr	r3, [pc, #156]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d66:	4b24      	ldr	r3, [pc, #144]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d6a:	4a23      	ldr	r2, [pc, #140]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d6c:	f043 0301 	orr.w	r3, r3, #1
 8003d70:	6313      	str	r3, [r2, #48]	; 0x30
 8003d72:	4b21      	ldr	r3, [pc, #132]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003d74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d76:	f003 0301 	and.w	r3, r3, #1
 8003d7a:	617b      	str	r3, [r7, #20]
 8003d7c:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0/WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8003d7e:	2301      	movs	r3, #1
 8003d80:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003d82:	2303      	movs	r3, #3
 8003d84:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d86:	2300      	movs	r3, #0
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d8a:	f107 031c 	add.w	r3, r7, #28
 8003d8e:	4619      	mov	r1, r3
 8003d90:	481a      	ldr	r0, [pc, #104]	; (8003dfc <HAL_ADC_MspInit+0xd0>)
 8003d92:	f001 ffe5 	bl	8005d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8003d96:	e029      	b.n	8003dec <HAL_ADC_MspInit+0xc0>
  else if(hadc->Instance==ADC3)
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4a18      	ldr	r2, [pc, #96]	; (8003e00 <HAL_ADC_MspInit+0xd4>)
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d124      	bne.n	8003dec <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8003da2:	4b15      	ldr	r3, [pc, #84]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003da6:	4a14      	ldr	r2, [pc, #80]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003da8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dac:	6453      	str	r3, [r2, #68]	; 0x44
 8003dae:	4b12      	ldr	r3, [pc, #72]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003db2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003db6:	613b      	str	r3, [r7, #16]
 8003db8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8003dba:	4b0f      	ldr	r3, [pc, #60]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbe:	4a0e      	ldr	r2, [pc, #56]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003dc0:	f043 0320 	orr.w	r3, r3, #32
 8003dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003dc6:	4b0c      	ldr	r3, [pc, #48]	; (8003df8 <HAL_ADC_MspInit+0xcc>)
 8003dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dca:	f003 0320 	and.w	r3, r3, #32
 8003dce:	60fb      	str	r3, [r7, #12]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003dd2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ddc:	2300      	movs	r3, #0
 8003dde:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8003de0:	f107 031c 	add.w	r3, r7, #28
 8003de4:	4619      	mov	r1, r3
 8003de6:	4807      	ldr	r0, [pc, #28]	; (8003e04 <HAL_ADC_MspInit+0xd8>)
 8003de8:	f001 ffba 	bl	8005d60 <HAL_GPIO_Init>
}
 8003dec:	bf00      	nop
 8003dee:	3730      	adds	r7, #48	; 0x30
 8003df0:	46bd      	mov	sp, r7
 8003df2:	bd80      	pop	{r7, pc}
 8003df4:	40012000 	.word	0x40012000
 8003df8:	40023800 	.word	0x40023800
 8003dfc:	40020000 	.word	0x40020000
 8003e00:	40012200 	.word	0x40012200
 8003e04:	40021400 	.word	0x40021400

08003e08 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08a      	sub	sp, #40	; 0x28
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 0314 	add.w	r3, r7, #20
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a19      	ldr	r2, [pc, #100]	; (8003e8c <HAL_DAC_MspInit+0x84>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d12b      	bne.n	8003e82 <HAL_DAC_MspInit+0x7a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e2e:	4a18      	ldr	r2, [pc, #96]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e30:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003e34:	6413      	str	r3, [r2, #64]	; 0x40
 8003e36:	4b16      	ldr	r3, [pc, #88]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e3a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003e3e:	613b      	str	r3, [r7, #16]
 8003e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e42:	4b13      	ldr	r3, [pc, #76]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e46:	4a12      	ldr	r2, [pc, #72]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e48:	f043 0301 	orr.w	r3, r3, #1
 8003e4c:	6313      	str	r3, [r2, #48]	; 0x30
 8003e4e:	4b10      	ldr	r3, [pc, #64]	; (8003e90 <HAL_DAC_MspInit+0x88>)
 8003e50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e52:	f003 0301 	and.w	r3, r3, #1
 8003e56:	60fb      	str	r3, [r7, #12]
 8003e58:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003e5a:	2310      	movs	r3, #16
 8003e5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e62:	2300      	movs	r3, #0
 8003e64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e66:	f107 0314 	add.w	r3, r7, #20
 8003e6a:	4619      	mov	r1, r3
 8003e6c:	4809      	ldr	r0, [pc, #36]	; (8003e94 <HAL_DAC_MspInit+0x8c>)
 8003e6e:	f001 ff77 	bl	8005d60 <HAL_GPIO_Init>

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003e72:	2200      	movs	r2, #0
 8003e74:	2100      	movs	r1, #0
 8003e76:	2036      	movs	r0, #54	; 0x36
 8003e78:	f001 fa0e 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003e7c:	2036      	movs	r0, #54	; 0x36
 8003e7e:	f001 fa27 	bl	80052d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8003e82:	bf00      	nop
 8003e84:	3728      	adds	r7, #40	; 0x28
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
 8003e8a:	bf00      	nop
 8003e8c:	40007400 	.word	0x40007400
 8003e90:	40023800 	.word	0x40023800
 8003e94:	40020000 	.word	0x40020000

08003e98 <HAL_DMA2D_MspInit>:
* This function configures the hardware resources used in this example
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance==DMA2D)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <HAL_DMA2D_MspInit+0x38>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d10b      	bne.n	8003ec2 <HAL_DMA2D_MspInit+0x2a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003eaa:	4b0a      	ldr	r3, [pc, #40]	; (8003ed4 <HAL_DMA2D_MspInit+0x3c>)
 8003eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eae:	4a09      	ldr	r2, [pc, #36]	; (8003ed4 <HAL_DMA2D_MspInit+0x3c>)
 8003eb0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8003eb6:	4b07      	ldr	r3, [pc, #28]	; (8003ed4 <HAL_DMA2D_MspInit+0x3c>)
 8003eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003eba:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ebe:	60fb      	str	r3, [r7, #12]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }

}
 8003ec2:	bf00      	nop
 8003ec4:	3714      	adds	r7, #20
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ecc:	4770      	bx	lr
 8003ece:	bf00      	nop
 8003ed0:	4002b000 	.word	0x4002b000
 8003ed4:	40023800 	.word	0x40023800

08003ed8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b08c      	sub	sp, #48	; 0x30
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee0:	f107 031c 	add.w	r3, r7, #28
 8003ee4:	2200      	movs	r2, #0
 8003ee6:	601a      	str	r2, [r3, #0]
 8003ee8:	605a      	str	r2, [r3, #4]
 8003eea:	609a      	str	r2, [r3, #8]
 8003eec:	60da      	str	r2, [r3, #12]
 8003eee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	4a2f      	ldr	r2, [pc, #188]	; (8003fb4 <HAL_I2C_MspInit+0xdc>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d129      	bne.n	8003f4e <HAL_I2C_MspInit+0x76>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003efa:	4b2f      	ldr	r3, [pc, #188]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003efe:	4a2e      	ldr	r2, [pc, #184]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f00:	f043 0302 	orr.w	r3, r3, #2
 8003f04:	6313      	str	r3, [r2, #48]	; 0x30
 8003f06:	4b2c      	ldr	r3, [pc, #176]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f0a:	f003 0302 	and.w	r3, r3, #2
 8003f0e:	61bb      	str	r3, [r7, #24]
 8003f10:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = ARDUINO_SCL_D15_Pin|ARDUINO_SDA_D14_Pin;
 8003f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003f16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f18:	2312      	movs	r3, #18
 8003f1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f1c:	2301      	movs	r3, #1
 8003f1e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f20:	2300      	movs	r3, #0
 8003f22:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003f24:	2304      	movs	r3, #4
 8003f26:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f28:	f107 031c 	add.w	r3, r7, #28
 8003f2c:	4619      	mov	r1, r3
 8003f2e:	4823      	ldr	r0, [pc, #140]	; (8003fbc <HAL_I2C_MspInit+0xe4>)
 8003f30:	f001 ff16 	bl	8005d60 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003f34:	4b20      	ldr	r3, [pc, #128]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f38:	4a1f      	ldr	r2, [pc, #124]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f3a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003f3e:	6413      	str	r3, [r2, #64]	; 0x40
 8003f40:	4b1d      	ldr	r3, [pc, #116]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f44:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f48:	617b      	str	r3, [r7, #20]
 8003f4a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8003f4c:	e02d      	b.n	8003faa <HAL_I2C_MspInit+0xd2>
  else if(hi2c->Instance==I2C3)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4a1b      	ldr	r2, [pc, #108]	; (8003fc0 <HAL_I2C_MspInit+0xe8>)
 8003f54:	4293      	cmp	r3, r2
 8003f56:	d128      	bne.n	8003faa <HAL_I2C_MspInit+0xd2>
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8003f58:	4b17      	ldr	r3, [pc, #92]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f5c:	4a16      	ldr	r2, [pc, #88]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f5e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003f62:	6313      	str	r3, [r2, #48]	; 0x30
 8003f64:	4b14      	ldr	r3, [pc, #80]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f6c:	613b      	str	r3, [r7, #16]
 8003f6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = LCD_SCL_Pin|LCD_SDA_Pin;
 8003f70:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003f74:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f76:	2312      	movs	r3, #18
 8003f78:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8003f82:	2304      	movs	r3, #4
 8003f84:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8003f86:	f107 031c 	add.w	r3, r7, #28
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	480d      	ldr	r0, [pc, #52]	; (8003fc4 <HAL_I2C_MspInit+0xec>)
 8003f8e:	f001 fee7 	bl	8005d60 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8003f92:	4b09      	ldr	r3, [pc, #36]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	4a08      	ldr	r2, [pc, #32]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003f98:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f9e:	4b06      	ldr	r3, [pc, #24]	; (8003fb8 <HAL_I2C_MspInit+0xe0>)
 8003fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003fa6:	60fb      	str	r3, [r7, #12]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
}
 8003faa:	bf00      	nop
 8003fac:	3730      	adds	r7, #48	; 0x30
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	bd80      	pop	{r7, pc}
 8003fb2:	bf00      	nop
 8003fb4:	40005400 	.word	0x40005400
 8003fb8:	40023800 	.word	0x40023800
 8003fbc:	40020400 	.word	0x40020400
 8003fc0:	40005c00 	.word	0x40005c00
 8003fc4:	40021c00 	.word	0x40021c00

08003fc8 <HAL_I2C_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspDeInit(I2C_HandleTypeDef* hi2c)
{
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b082      	sub	sp, #8
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	6078      	str	r0, [r7, #4]
  if(hi2c->Instance==I2C1)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4a15      	ldr	r2, [pc, #84]	; (800402c <HAL_I2C_MspDeInit+0x64>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d110      	bne.n	8003ffc <HAL_I2C_MspDeInit+0x34>
  {
  /* USER CODE BEGIN I2C1_MspDeInit 0 */

  /* USER CODE END I2C1_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C1_CLK_DISABLE();
 8003fda:	4b15      	ldr	r3, [pc, #84]	; (8004030 <HAL_I2C_MspDeInit+0x68>)
 8003fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fde:	4a14      	ldr	r2, [pc, #80]	; (8004030 <HAL_I2C_MspDeInit+0x68>)
 8003fe0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003fe4:	6413      	str	r3, [r2, #64]	; 0x40

    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    HAL_GPIO_DeInit(ARDUINO_SCL_D15_GPIO_Port, ARDUINO_SCL_D15_Pin);
 8003fe6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003fea:	4812      	ldr	r0, [pc, #72]	; (8004034 <HAL_I2C_MspDeInit+0x6c>)
 8003fec:	f002 f864 	bl	80060b8 <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(ARDUINO_SDA_D14_GPIO_Port, ARDUINO_SDA_D14_Pin);
 8003ff0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003ff4:	480f      	ldr	r0, [pc, #60]	; (8004034 <HAL_I2C_MspDeInit+0x6c>)
 8003ff6:	f002 f85f 	bl	80060b8 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }

}
 8003ffa:	e013      	b.n	8004024 <HAL_I2C_MspDeInit+0x5c>
  else if(hi2c->Instance==I2C3)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a0d      	ldr	r2, [pc, #52]	; (8004038 <HAL_I2C_MspDeInit+0x70>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d10e      	bne.n	8004024 <HAL_I2C_MspDeInit+0x5c>
    __HAL_RCC_I2C3_CLK_DISABLE();
 8004006:	4b0a      	ldr	r3, [pc, #40]	; (8004030 <HAL_I2C_MspDeInit+0x68>)
 8004008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800400a:	4a09      	ldr	r2, [pc, #36]	; (8004030 <HAL_I2C_MspDeInit+0x68>)
 800400c:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004010:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(LCD_SCL_GPIO_Port, LCD_SCL_Pin);
 8004012:	2180      	movs	r1, #128	; 0x80
 8004014:	4809      	ldr	r0, [pc, #36]	; (800403c <HAL_I2C_MspDeInit+0x74>)
 8004016:	f002 f84f 	bl	80060b8 <HAL_GPIO_DeInit>
    HAL_GPIO_DeInit(LCD_SDA_GPIO_Port, LCD_SDA_Pin);
 800401a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800401e:	4807      	ldr	r0, [pc, #28]	; (800403c <HAL_I2C_MspDeInit+0x74>)
 8004020:	f002 f84a 	bl	80060b8 <HAL_GPIO_DeInit>
}
 8004024:	bf00      	nop
 8004026:	3708      	adds	r7, #8
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}
 800402c:	40005400 	.word	0x40005400
 8004030:	40023800 	.word	0x40023800
 8004034:	40020400 	.word	0x40020400
 8004038:	40005c00 	.word	0x40005c00
 800403c:	40021c00 	.word	0x40021c00

08004040 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8004040:	b580      	push	{r7, lr}
 8004042:	b08e      	sub	sp, #56	; 0x38
 8004044:	af00      	add	r7, sp, #0
 8004046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004048:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800404c:	2200      	movs	r2, #0
 800404e:	601a      	str	r2, [r3, #0]
 8004050:	605a      	str	r2, [r3, #4]
 8004052:	609a      	str	r2, [r3, #8]
 8004054:	60da      	str	r2, [r3, #12]
 8004056:	611a      	str	r2, [r3, #16]
  if(hltdc->Instance==LTDC)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a55      	ldr	r2, [pc, #340]	; (80041b4 <HAL_LTDC_MspInit+0x174>)
 800405e:	4293      	cmp	r3, r2
 8004060:	f040 80a3 	bne.w	80041aa <HAL_LTDC_MspInit+0x16a>
  {
  /* USER CODE BEGIN LTDC_MspInit 0 */

  /* USER CODE END LTDC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8004064:	4b54      	ldr	r3, [pc, #336]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 8004066:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004068:	4a53      	ldr	r2, [pc, #332]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 800406a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800406e:	6453      	str	r3, [r2, #68]	; 0x44
 8004070:	4b51      	ldr	r3, [pc, #324]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 8004072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004074:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004078:	623b      	str	r3, [r7, #32]
 800407a:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800407c:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 800407e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004080:	4a4d      	ldr	r2, [pc, #308]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 8004082:	f043 0310 	orr.w	r3, r3, #16
 8004086:	6313      	str	r3, [r2, #48]	; 0x30
 8004088:	4b4b      	ldr	r3, [pc, #300]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 800408a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800408c:	f003 0310 	and.w	r3, r3, #16
 8004090:	61fb      	str	r3, [r7, #28]
 8004092:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8004094:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 8004096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004098:	4a47      	ldr	r2, [pc, #284]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 800409a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800409e:	6313      	str	r3, [r2, #48]	; 0x30
 80040a0:	4b45      	ldr	r3, [pc, #276]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040a8:	61bb      	str	r3, [r7, #24]
 80040aa:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOK_CLK_ENABLE();
 80040ac:	4b42      	ldr	r3, [pc, #264]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b0:	4a41      	ldr	r2, [pc, #260]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80040b6:	6313      	str	r3, [r2, #48]	; 0x30
 80040b8:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80040c0:	617b      	str	r3, [r7, #20]
 80040c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80040c4:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	4a3b      	ldr	r2, [pc, #236]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040ca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ce:	6313      	str	r3, [r2, #48]	; 0x30
 80040d0:	4b39      	ldr	r3, [pc, #228]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040d8:	613b      	str	r3, [r7, #16]
 80040da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOI_CLK_ENABLE();
 80040dc:	4b36      	ldr	r3, [pc, #216]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	4a35      	ldr	r2, [pc, #212]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80040e6:	6313      	str	r3, [r2, #48]	; 0x30
 80040e8:	4b33      	ldr	r3, [pc, #204]	; (80041b8 <HAL_LTDC_MspInit+0x178>)
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040f0:	60fb      	str	r3, [r7, #12]
 80040f2:	68fb      	ldr	r3, [r7, #12]
    PJ3     ------> LTDC_R4
    PJ2     ------> LTDC_R3
    PJ0     ------> LTDC_R1
    PJ1     ------> LTDC_R2
    */
    GPIO_InitStruct.Pin = LCD_B0_Pin;
 80040f4:	2310      	movs	r3, #16
 80040f6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040f8:	2302      	movs	r3, #2
 80040fa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004104:	230e      	movs	r3, #14
 8004106:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B0_GPIO_Port, &GPIO_InitStruct);
 8004108:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800410c:	4619      	mov	r1, r3
 800410e:	482b      	ldr	r0, [pc, #172]	; (80041bc <HAL_LTDC_MspInit+0x17c>)
 8004110:	f001 fe26 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B1_Pin|LCD_B2_Pin|LCD_B3_Pin|LCD_G4_Pin
 8004114:	f64e 73ff 	movw	r3, #61439	; 0xefff
 8004118:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G1_Pin|LCD_G3_Pin|LCD_G0_Pin|LCD_G2_Pin
                          |LCD_R7_Pin|LCD_R5_Pin|LCD_R6_Pin|LCD_R4_Pin
                          |LCD_R3_Pin|LCD_R1_Pin|LCD_R2_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800411a:	2302      	movs	r3, #2
 800411c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800411e:	2300      	movs	r3, #0
 8004120:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004122:	2300      	movs	r3, #0
 8004124:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004126:	230e      	movs	r3, #14
 8004128:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800412a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800412e:	4619      	mov	r1, r3
 8004130:	4823      	ldr	r0, [pc, #140]	; (80041c0 <HAL_LTDC_MspInit+0x180>)
 8004132:	f001 fe15 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_DE_Pin|LCD_B7_Pin|LCD_B6_Pin|LCD_B5_Pin
 8004136:	23f7      	movs	r3, #247	; 0xf7
 8004138:	627b      	str	r3, [r7, #36]	; 0x24
                          |LCD_G6_Pin|LCD_G7_Pin|LCD_G5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800413a:	2302      	movs	r3, #2
 800413c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800413e:	2300      	movs	r3, #0
 8004140:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004142:	2300      	movs	r3, #0
 8004144:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8004146:	230e      	movs	r3, #14
 8004148:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 800414a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800414e:	4619      	mov	r1, r3
 8004150:	481c      	ldr	r0, [pc, #112]	; (80041c4 <HAL_LTDC_MspInit+0x184>)
 8004152:	f001 fe05 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_B4_Pin;
 8004156:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800415a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800415c:	2302      	movs	r3, #2
 800415e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004160:	2300      	movs	r3, #0
 8004162:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004164:	2300      	movs	r3, #0
 8004166:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8004168:	2309      	movs	r3, #9
 800416a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(LCD_B4_GPIO_Port, &GPIO_InitStruct);
 800416c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004170:	4619      	mov	r1, r3
 8004172:	4815      	ldr	r0, [pc, #84]	; (80041c8 <HAL_LTDC_MspInit+0x188>)
 8004174:	f001 fdf4 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LCD_HSYNC_Pin|LCD_VSYNC_Pin|LCD_R0_Pin|LCD_CLK_Pin;
 8004178:	f44f 4346 	mov.w	r3, #50688	; 0xc600
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800417e:	2302      	movs	r3, #2
 8004180:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004182:	2300      	movs	r3, #0
 8004184:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004186:	2300      	movs	r3, #0
 8004188:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800418a:	230e      	movs	r3, #14
 800418c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800418e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004192:	4619      	mov	r1, r3
 8004194:	480d      	ldr	r0, [pc, #52]	; (80041cc <HAL_LTDC_MspInit+0x18c>)
 8004196:	f001 fde3 	bl	8005d60 <HAL_GPIO_Init>

    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 5, 0);
 800419a:	2200      	movs	r2, #0
 800419c:	2105      	movs	r1, #5
 800419e:	2058      	movs	r0, #88	; 0x58
 80041a0:	f001 f87a 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80041a4:	2058      	movs	r0, #88	; 0x58
 80041a6:	f001 f893 	bl	80052d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LTDC_MspInit 1 */

  /* USER CODE END LTDC_MspInit 1 */
  }

}
 80041aa:	bf00      	nop
 80041ac:	3738      	adds	r7, #56	; 0x38
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}
 80041b2:	bf00      	nop
 80041b4:	40016800 	.word	0x40016800
 80041b8:	40023800 	.word	0x40023800
 80041bc:	40021000 	.word	0x40021000
 80041c0:	40022400 	.word	0x40022400
 80041c4:	40022800 	.word	0x40022800
 80041c8:	40021800 	.word	0x40021800
 80041cc:	40022000 	.word	0x40022000

080041d0 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4a07      	ldr	r2, [pc, #28]	; (80041fc <HAL_RTC_MspInit+0x2c>)
 80041de:	4293      	cmp	r3, r2
 80041e0:	d105      	bne.n	80041ee <HAL_RTC_MspInit+0x1e>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80041e2:	4b07      	ldr	r3, [pc, #28]	; (8004200 <HAL_RTC_MspInit+0x30>)
 80041e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80041e6:	4a06      	ldr	r2, [pc, #24]	; (8004200 <HAL_RTC_MspInit+0x30>)
 80041e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80041ec:	6713      	str	r3, [r2, #112]	; 0x70
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80041ee:	bf00      	nop
 80041f0:	370c      	adds	r7, #12
 80041f2:	46bd      	mov	sp, r7
 80041f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	40002800 	.word	0x40002800
 8004200:	40023800 	.word	0x40023800

08004204 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b08a      	sub	sp, #40	; 0x28
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800420c:	f107 0314 	add.w	r3, r7, #20
 8004210:	2200      	movs	r2, #0
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	605a      	str	r2, [r3, #4]
 8004216:	609a      	str	r2, [r3, #8]
 8004218:	60da      	str	r2, [r3, #12]
 800421a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a2d      	ldr	r2, [pc, #180]	; (80042d8 <HAL_SPI_MspInit+0xd4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d154      	bne.n	80042d0 <HAL_SPI_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004226:	4b2d      	ldr	r3, [pc, #180]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800422a:	4a2c      	ldr	r2, [pc, #176]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 800422c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004230:	6413      	str	r3, [r2, #64]	; 0x40
 8004232:	4b2a      	ldr	r3, [pc, #168]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOI_CLK_ENABLE();
 800423e:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004240:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004242:	4a26      	ldr	r2, [pc, #152]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6313      	str	r3, [r2, #48]	; 0x30
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 800424c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800424e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004256:	4b21      	ldr	r3, [pc, #132]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800425a:	4a20      	ldr	r2, [pc, #128]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	6313      	str	r3, [r2, #48]	; 0x30
 8004262:	4b1e      	ldr	r3, [pc, #120]	; (80042dc <HAL_SPI_MspInit+0xd8>)
 8004264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004266:	f003 0302 	and.w	r3, r3, #2
 800426a:	60bb      	str	r3, [r7, #8]
 800426c:	68bb      	ldr	r3, [r7, #8]
    PI1     ------> SPI2_SCK
    PI0     ------> SPI2_NSS
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = ARDUINO_SCK_D13_Pin;
 800426e:	2302      	movs	r3, #2
 8004270:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004272:	2302      	movs	r3, #2
 8004274:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004276:	2300      	movs	r3, #0
 8004278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800427a:	2300      	movs	r3, #0
 800427c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800427e:	2305      	movs	r3, #5
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(ARDUINO_SCK_D13_GPIO_Port, &GPIO_InitStruct);
 8004282:	f107 0314 	add.w	r3, r7, #20
 8004286:	4619      	mov	r1, r3
 8004288:	4815      	ldr	r0, [pc, #84]	; (80042e0 <HAL_SPI_MspInit+0xdc>)
 800428a:	f001 fd69 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800428e:	2301      	movs	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004292:	2302      	movs	r3, #2
 8004294:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004296:	2300      	movs	r3, #0
 8004298:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800429a:	2303      	movs	r3, #3
 800429c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800429e:	2305      	movs	r3, #5
 80042a0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80042a2:	f107 0314 	add.w	r3, r7, #20
 80042a6:	4619      	mov	r1, r3
 80042a8:	480d      	ldr	r0, [pc, #52]	; (80042e0 <HAL_SPI_MspInit+0xdc>)
 80042aa:	f001 fd59 	bl	8005d60 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80042ae:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80042b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042b4:	2302      	movs	r3, #2
 80042b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042b8:	2300      	movs	r3, #0
 80042ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80042bc:	2303      	movs	r3, #3
 80042be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80042c0:	2305      	movs	r3, #5
 80042c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80042c4:	f107 0314 	add.w	r3, r7, #20
 80042c8:	4619      	mov	r1, r3
 80042ca:	4806      	ldr	r0, [pc, #24]	; (80042e4 <HAL_SPI_MspInit+0xe0>)
 80042cc:	f001 fd48 	bl	8005d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80042d0:	bf00      	nop
 80042d2:	3728      	adds	r7, #40	; 0x28
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40003800 	.word	0x40003800
 80042dc:	40023800 	.word	0x40023800
 80042e0:	40022000 	.word	0x40022000
 80042e4:	40020400 	.word	0x40020400

080042e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80042e8:	b480      	push	{r7}
 80042ea:	b089      	sub	sp, #36	; 0x24
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a2e      	ldr	r2, [pc, #184]	; (80043b0 <HAL_TIM_Base_MspInit+0xc8>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d10c      	bne.n	8004314 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80042fa:	4b2e      	ldr	r3, [pc, #184]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 80042fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fe:	4a2d      	ldr	r2, [pc, #180]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004300:	f043 0301 	orr.w	r3, r3, #1
 8004304:	6453      	str	r3, [r2, #68]	; 0x44
 8004306:	4b2b      	ldr	r3, [pc, #172]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800430a:	f003 0301 	and.w	r3, r3, #1
 800430e:	61fb      	str	r3, [r7, #28]
 8004310:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8004312:	e046      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM2)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800431c:	d10c      	bne.n	8004338 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800431e:	4b25      	ldr	r3, [pc, #148]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004322:	4a24      	ldr	r2, [pc, #144]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004324:	f043 0301 	orr.w	r3, r3, #1
 8004328:	6413      	str	r3, [r2, #64]	; 0x40
 800432a:	4b22      	ldr	r3, [pc, #136]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 800432c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432e:	f003 0301 	and.w	r3, r3, #1
 8004332:	61bb      	str	r3, [r7, #24]
 8004334:	69bb      	ldr	r3, [r7, #24]
}
 8004336:	e034      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM3)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a1e      	ldr	r2, [pc, #120]	; (80043b8 <HAL_TIM_Base_MspInit+0xd0>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d10c      	bne.n	800435c <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004342:	4b1c      	ldr	r3, [pc, #112]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004346:	4a1b      	ldr	r2, [pc, #108]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004348:	f043 0302 	orr.w	r3, r3, #2
 800434c:	6413      	str	r3, [r2, #64]	; 0x40
 800434e:	4b19      	ldr	r3, [pc, #100]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004350:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004352:	f003 0302 	and.w	r3, r3, #2
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]
}
 800435a:	e022      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM5)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a16      	ldr	r2, [pc, #88]	; (80043bc <HAL_TIM_Base_MspInit+0xd4>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d10c      	bne.n	8004380 <HAL_TIM_Base_MspInit+0x98>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8004366:	4b13      	ldr	r3, [pc, #76]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800436a:	4a12      	ldr	r2, [pc, #72]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 800436c:	f043 0308 	orr.w	r3, r3, #8
 8004370:	6413      	str	r3, [r2, #64]	; 0x40
 8004372:	4b10      	ldr	r3, [pc, #64]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	613b      	str	r3, [r7, #16]
 800437c:	693b      	ldr	r3, [r7, #16]
}
 800437e:	e010      	b.n	80043a2 <HAL_TIM_Base_MspInit+0xba>
  else if(htim_base->Instance==TIM8)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	4a0e      	ldr	r2, [pc, #56]	; (80043c0 <HAL_TIM_Base_MspInit+0xd8>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10b      	bne.n	80043a2 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800438a:	4b0a      	ldr	r3, [pc, #40]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 800438c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800438e:	4a09      	ldr	r2, [pc, #36]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004390:	f043 0302 	orr.w	r3, r3, #2
 8004394:	6453      	str	r3, [r2, #68]	; 0x44
 8004396:	4b07      	ldr	r3, [pc, #28]	; (80043b4 <HAL_TIM_Base_MspInit+0xcc>)
 8004398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800439a:	f003 0302 	and.w	r3, r3, #2
 800439e:	60fb      	str	r3, [r7, #12]
 80043a0:	68fb      	ldr	r3, [r7, #12]
}
 80043a2:	bf00      	nop
 80043a4:	3724      	adds	r7, #36	; 0x24
 80043a6:	46bd      	mov	sp, r7
 80043a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ac:	4770      	bx	lr
 80043ae:	bf00      	nop
 80043b0:	40010000 	.word	0x40010000
 80043b4:	40023800 	.word	0x40023800
 80043b8:	40000400 	.word	0x40000400
 80043bc:	40000c00 	.word	0x40000c00
 80043c0:	40010400 	.word	0x40010400

080043c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80043cc:	f107 030c 	add.w	r3, r7, #12
 80043d0:	2200      	movs	r2, #0
 80043d2:	601a      	str	r2, [r3, #0]
 80043d4:	605a      	str	r2, [r3, #4]
 80043d6:	609a      	str	r2, [r3, #8]
 80043d8:	60da      	str	r2, [r3, #12]
 80043da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a11      	ldr	r2, [pc, #68]	; (8004428 <HAL_TIM_MspPostInit+0x64>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d11b      	bne.n	800441e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */

    __HAL_RCC_GPIOI_CLK_ENABLE();
 80043e6:	4b11      	ldr	r3, [pc, #68]	; (800442c <HAL_TIM_MspPostInit+0x68>)
 80043e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043ea:	4a10      	ldr	r2, [pc, #64]	; (800442c <HAL_TIM_MspPostInit+0x68>)
 80043ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043f0:	6313      	str	r3, [r2, #48]	; 0x30
 80043f2:	4b0e      	ldr	r3, [pc, #56]	; (800442c <HAL_TIM_MspPostInit+0x68>)
 80043f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043fa:	60bb      	str	r3, [r7, #8]
 80043fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM8 GPIO Configuration
    PI2     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80043fe:	2304      	movs	r3, #4
 8004400:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004402:	2302      	movs	r3, #2
 8004404:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004406:	2300      	movs	r3, #0
 8004408:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800440a:	2300      	movs	r3, #0
 800440c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800440e:	2303      	movs	r3, #3
 8004410:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8004412:	f107 030c 	add.w	r3, r7, #12
 8004416:	4619      	mov	r1, r3
 8004418:	4805      	ldr	r0, [pc, #20]	; (8004430 <HAL_TIM_MspPostInit+0x6c>)
 800441a:	f001 fca1 	bl	8005d60 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspPostInit 1 */

  /* USER CODE END TIM8_MspPostInit 1 */
  }

}
 800441e:	bf00      	nop
 8004420:	3720      	adds	r7, #32
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40010400 	.word	0x40010400
 800442c:	40023800 	.word	0x40023800
 8004430:	40022000 	.word	0x40022000

08004434 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b08e      	sub	sp, #56	; 0x38
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800443c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004440:	2200      	movs	r2, #0
 8004442:	601a      	str	r2, [r3, #0]
 8004444:	605a      	str	r2, [r3, #4]
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	60da      	str	r2, [r3, #12]
 800444a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART7)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	4a5b      	ldr	r2, [pc, #364]	; (80045c0 <HAL_UART_MspInit+0x18c>)
 8004452:	4293      	cmp	r3, r2
 8004454:	d130      	bne.n	80044b8 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN UART7_MspInit 0 */

  /* USER CODE END UART7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART7_CLK_ENABLE();
 8004456:	4b5b      	ldr	r3, [pc, #364]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	4a5a      	ldr	r2, [pc, #360]	; (80045c4 <HAL_UART_MspInit+0x190>)
 800445c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004460:	6413      	str	r3, [r2, #64]	; 0x40
 8004462:	4b58      	ldr	r3, [pc, #352]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004466:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800446a:	623b      	str	r3, [r7, #32]
 800446c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800446e:	4b55      	ldr	r3, [pc, #340]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004470:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004472:	4a54      	ldr	r2, [pc, #336]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004474:	f043 0320 	orr.w	r3, r3, #32
 8004478:	6313      	str	r3, [r2, #48]	; 0x30
 800447a:	4b52      	ldr	r3, [pc, #328]	; (80045c4 <HAL_UART_MspInit+0x190>)
 800447c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800447e:	f003 0320 	and.w	r3, r3, #32
 8004482:	61fb      	str	r3, [r7, #28]
 8004484:	69fb      	ldr	r3, [r7, #28]
    /**UART7 GPIO Configuration
    PF7     ------> UART7_TX
    PF6     ------> UART7_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004486:	23c0      	movs	r3, #192	; 0xc0
 8004488:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800448a:	2302      	movs	r3, #2
 800448c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800448e:	2300      	movs	r3, #0
 8004490:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004492:	2303      	movs	r3, #3
 8004494:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8004496:	2308      	movs	r3, #8
 8004498:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800449a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800449e:	4619      	mov	r1, r3
 80044a0:	4849      	ldr	r0, [pc, #292]	; (80045c8 <HAL_UART_MspInit+0x194>)
 80044a2:	f001 fc5d 	bl	8005d60 <HAL_GPIO_Init>

    /* UART7 interrupt Init */
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 80044a6:	2200      	movs	r2, #0
 80044a8:	2105      	movs	r1, #5
 80044aa:	2052      	movs	r0, #82	; 0x52
 80044ac:	f000 fef4 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 80044b0:	2052      	movs	r0, #82	; 0x52
 80044b2:	f000 ff0d 	bl	80052d0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80044b6:	e07f      	b.n	80045b8 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	4a43      	ldr	r2, [pc, #268]	; (80045cc <HAL_UART_MspInit+0x198>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d14d      	bne.n	800455e <HAL_UART_MspInit+0x12a>
    __HAL_RCC_USART1_CLK_ENABLE();
 80044c2:	4b40      	ldr	r3, [pc, #256]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044c6:	4a3f      	ldr	r2, [pc, #252]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044c8:	f043 0310 	orr.w	r3, r3, #16
 80044cc:	6453      	str	r3, [r2, #68]	; 0x44
 80044ce:	4b3d      	ldr	r3, [pc, #244]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044d2:	f003 0310 	and.w	r3, r3, #16
 80044d6:	61bb      	str	r3, [r7, #24]
 80044d8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044da:	4b3a      	ldr	r3, [pc, #232]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044de:	4a39      	ldr	r2, [pc, #228]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044e0:	f043 0302 	orr.w	r3, r3, #2
 80044e4:	6313      	str	r3, [r2, #48]	; 0x30
 80044e6:	4b37      	ldr	r3, [pc, #220]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044ea:	f003 0302 	and.w	r3, r3, #2
 80044ee:	617b      	str	r3, [r7, #20]
 80044f0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044f2:	4b34      	ldr	r3, [pc, #208]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f6:	4a33      	ldr	r2, [pc, #204]	; (80045c4 <HAL_UART_MspInit+0x190>)
 80044f8:	f043 0301 	orr.w	r3, r3, #1
 80044fc:	6313      	str	r3, [r2, #48]	; 0x30
 80044fe:	4b31      	ldr	r3, [pc, #196]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004502:	f003 0301 	and.w	r3, r3, #1
 8004506:	613b      	str	r3, [r7, #16]
 8004508:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800450a:	2380      	movs	r3, #128	; 0x80
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800450e:	2302      	movs	r3, #2
 8004510:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004512:	2300      	movs	r3, #0
 8004514:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004516:	2300      	movs	r3, #0
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800451a:	2307      	movs	r3, #7
 800451c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800451e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004522:	4619      	mov	r1, r3
 8004524:	482a      	ldr	r0, [pc, #168]	; (80045d0 <HAL_UART_MspInit+0x19c>)
 8004526:	f001 fc1b 	bl	8005d60 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800452a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800452e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004530:	2302      	movs	r3, #2
 8004532:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004534:	2300      	movs	r3, #0
 8004536:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004538:	2300      	movs	r3, #0
 800453a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800453c:	2307      	movs	r3, #7
 800453e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8004540:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004544:	4619      	mov	r1, r3
 8004546:	4823      	ldr	r0, [pc, #140]	; (80045d4 <HAL_UART_MspInit+0x1a0>)
 8004548:	f001 fc0a 	bl	8005d60 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 800454c:	2200      	movs	r2, #0
 800454e:	2107      	movs	r1, #7
 8004550:	2025      	movs	r0, #37	; 0x25
 8004552:	f000 fea1 	bl	8005298 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004556:	2025      	movs	r0, #37	; 0x25
 8004558:	f000 feba 	bl	80052d0 <HAL_NVIC_EnableIRQ>
}
 800455c:	e02c      	b.n	80045b8 <HAL_UART_MspInit+0x184>
  else if(huart->Instance==USART6)
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1d      	ldr	r2, [pc, #116]	; (80045d8 <HAL_UART_MspInit+0x1a4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d127      	bne.n	80045b8 <HAL_UART_MspInit+0x184>
    __HAL_RCC_USART6_CLK_ENABLE();
 8004568:	4b16      	ldr	r3, [pc, #88]	; (80045c4 <HAL_UART_MspInit+0x190>)
 800456a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456c:	4a15      	ldr	r2, [pc, #84]	; (80045c4 <HAL_UART_MspInit+0x190>)
 800456e:	f043 0320 	orr.w	r3, r3, #32
 8004572:	6453      	str	r3, [r2, #68]	; 0x44
 8004574:	4b13      	ldr	r3, [pc, #76]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004576:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004578:	f003 0320 	and.w	r3, r3, #32
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004580:	4b10      	ldr	r3, [pc, #64]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004584:	4a0f      	ldr	r2, [pc, #60]	; (80045c4 <HAL_UART_MspInit+0x190>)
 8004586:	f043 0304 	orr.w	r3, r3, #4
 800458a:	6313      	str	r3, [r2, #48]	; 0x30
 800458c:	4b0d      	ldr	r3, [pc, #52]	; (80045c4 <HAL_UART_MspInit+0x190>)
 800458e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004590:	f003 0304 	and.w	r3, r3, #4
 8004594:	60bb      	str	r3, [r7, #8]
 8004596:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 8004598:	23c0      	movs	r3, #192	; 0xc0
 800459a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800459c:	2302      	movs	r3, #2
 800459e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045a0:	2300      	movs	r3, #0
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80045a4:	2303      	movs	r3, #3
 80045a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80045a8:	2308      	movs	r3, #8
 80045aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80045ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045b0:	4619      	mov	r1, r3
 80045b2:	480a      	ldr	r0, [pc, #40]	; (80045dc <HAL_UART_MspInit+0x1a8>)
 80045b4:	f001 fbd4 	bl	8005d60 <HAL_GPIO_Init>
}
 80045b8:	bf00      	nop
 80045ba:	3738      	adds	r7, #56	; 0x38
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40007800 	.word	0x40007800
 80045c4:	40023800 	.word	0x40023800
 80045c8:	40021400 	.word	0x40021400
 80045cc:	40011000 	.word	0x40011000
 80045d0:	40020400 	.word	0x40020400
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40011400 	.word	0x40011400
 80045dc:	40020800 	.word	0x40020800

080045e0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80045e6:	1d3b      	adds	r3, r7, #4
 80045e8:	2200      	movs	r2, #0
 80045ea:	601a      	str	r2, [r3, #0]
 80045ec:	605a      	str	r2, [r3, #4]
 80045ee:	609a      	str	r2, [r3, #8]
 80045f0:	60da      	str	r2, [r3, #12]
 80045f2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80045f4:	4b3a      	ldr	r3, [pc, #232]	; (80046e0 <HAL_FMC_MspInit+0x100>)
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d16d      	bne.n	80046d8 <HAL_FMC_MspInit+0xf8>
    return;
  }
  FMC_Initialized = 1;
 80045fc:	4b38      	ldr	r3, [pc, #224]	; (80046e0 <HAL_FMC_MspInit+0x100>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8004602:	4b38      	ldr	r3, [pc, #224]	; (80046e4 <HAL_FMC_MspInit+0x104>)
 8004604:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004606:	4a37      	ldr	r2, [pc, #220]	; (80046e4 <HAL_FMC_MspInit+0x104>)
 8004608:	f043 0301 	orr.w	r3, r3, #1
 800460c:	6393      	str	r3, [r2, #56]	; 0x38
 800460e:	4b35      	ldr	r3, [pc, #212]	; (80046e4 <HAL_FMC_MspInit+0x104>)
 8004610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004612:	f003 0301 	and.w	r3, r3, #1
 8004616:	603b      	str	r3, [r7, #0]
 8004618:	683b      	ldr	r3, [r7, #0]
  PE10   ------> FMC_D7
  PE12   ------> FMC_D9
  PE15   ------> FMC_D12
  PE13   ------> FMC_D10
  */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_8|GPIO_PIN_9
 800461a:	f64f 7383 	movw	r3, #65411	; 0xff83
 800461e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_14|GPIO_PIN_7|GPIO_PIN_10
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004620:	2302      	movs	r3, #2
 8004622:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004624:	2300      	movs	r3, #0
 8004626:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004628:	2303      	movs	r3, #3
 800462a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800462c:	230c      	movs	r3, #12
 800462e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8004630:	1d3b      	adds	r3, r7, #4
 8004632:	4619      	mov	r1, r3
 8004634:	482c      	ldr	r0, [pc, #176]	; (80046e8 <HAL_FMC_MspInit+0x108>)
 8004636:	f001 fb93 	bl	8005d60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_1|GPIO_PIN_0
 800463a:	f248 1333 	movw	r3, #33075	; 0x8133
 800463e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_5|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004640:	2302      	movs	r3, #2
 8004642:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004644:	2300      	movs	r3, #0
 8004646:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004648:	2303      	movs	r3, #3
 800464a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800464c:	230c      	movs	r3, #12
 800464e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8004650:	1d3b      	adds	r3, r7, #4
 8004652:	4619      	mov	r1, r3
 8004654:	4825      	ldr	r0, [pc, #148]	; (80046ec <HAL_FMC_MspInit+0x10c>)
 8004656:	f001 fb83 	bl	8005d60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_10
 800465a:	f24c 7303 	movw	r3, #50947	; 0xc703
 800465e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004660:	2302      	movs	r3, #2
 8004662:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004664:	2300      	movs	r3, #0
 8004666:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004668:	2303      	movs	r3, #3
 800466a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800466c:	230c      	movs	r3, #12
 800466e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8004670:	1d3b      	adds	r3, r7, #4
 8004672:	4619      	mov	r1, r3
 8004674:	481e      	ldr	r0, [pc, #120]	; (80046f0 <HAL_FMC_MspInit+0x110>)
 8004676:	f001 fb73 	bl	8005d60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800467a:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800467e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_12|GPIO_PIN_15
                          |GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004680:	2302      	movs	r3, #2
 8004682:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004684:	2300      	movs	r3, #0
 8004686:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004688:	2303      	movs	r3, #3
 800468a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800468c:	230c      	movs	r3, #12
 800468e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8004690:	1d3b      	adds	r3, r7, #4
 8004692:	4619      	mov	r1, r3
 8004694:	4817      	ldr	r0, [pc, #92]	; (80046f4 <HAL_FMC_MspInit+0x114>)
 8004696:	f001 fb63 	bl	8005d60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_3;
 800469a:	2328      	movs	r3, #40	; 0x28
 800469c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800469e:	2302      	movs	r3, #2
 80046a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046a6:	2303      	movs	r3, #3
 80046a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046aa:	230c      	movs	r3, #12
 80046ac:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80046ae:	1d3b      	adds	r3, r7, #4
 80046b0:	4619      	mov	r1, r3
 80046b2:	4811      	ldr	r0, [pc, #68]	; (80046f8 <HAL_FMC_MspInit+0x118>)
 80046b4:	f001 fb54 	bl	8005d60 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80046b8:	2308      	movs	r3, #8
 80046ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80046bc:	2302      	movs	r3, #2
 80046be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046c0:	2300      	movs	r3, #0
 80046c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80046c4:	2303      	movs	r3, #3
 80046c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80046c8:	230c      	movs	r3, #12
 80046ca:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80046cc:	1d3b      	adds	r3, r7, #4
 80046ce:	4619      	mov	r1, r3
 80046d0:	480a      	ldr	r0, [pc, #40]	; (80046fc <HAL_FMC_MspInit+0x11c>)
 80046d2:	f001 fb45 	bl	8005d60 <HAL_GPIO_Init>
 80046d6:	e000      	b.n	80046da <HAL_FMC_MspInit+0xfa>
    return;
 80046d8:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 80046da:	3718      	adds	r7, #24
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000498 	.word	0x20000498
 80046e4:	40023800 	.word	0x40023800
 80046e8:	40021000 	.word	0x40021000
 80046ec:	40021800 	.word	0x40021800
 80046f0:	40020c00 	.word	0x40020c00
 80046f4:	40021400 	.word	0x40021400
 80046f8:	40021c00 	.word	0x40021c00
 80046fc:	40020800 	.word	0x40020800

08004700 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 8004700:	b580      	push	{r7, lr}
 8004702:	b082      	sub	sp, #8
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8004708:	f7ff ff6a 	bl	80045e0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 800470c:	bf00      	nop
 800470e:	3708      	adds	r7, #8
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b08c      	sub	sp, #48	; 0x30
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800471c:	2300      	movs	r3, #0
 800471e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8004724:	2200      	movs	r2, #0
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	2036      	movs	r0, #54	; 0x36
 800472a:	f000 fdb5 	bl	8005298 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800472e:	2036      	movs	r0, #54	; 0x36
 8004730:	f000 fdce 	bl	80052d0 <HAL_NVIC_EnableIRQ>
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8004734:	4b1f      	ldr	r3, [pc, #124]	; (80047b4 <HAL_InitTick+0xa0>)
 8004736:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004738:	4a1e      	ldr	r2, [pc, #120]	; (80047b4 <HAL_InitTick+0xa0>)
 800473a:	f043 0310 	orr.w	r3, r3, #16
 800473e:	6413      	str	r3, [r2, #64]	; 0x40
 8004740:	4b1c      	ldr	r3, [pc, #112]	; (80047b4 <HAL_InitTick+0xa0>)
 8004742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004744:	f003 0310 	and.w	r3, r3, #16
 8004748:	60fb      	str	r3, [r7, #12]
 800474a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800474c:	f107 0210 	add.w	r2, r7, #16
 8004750:	f107 0314 	add.w	r3, r7, #20
 8004754:	4611      	mov	r1, r2
 8004756:	4618      	mov	r0, r3
 8004758:	f003 fbee 	bl	8007f38 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800475c:	f003 fbc4 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 8004760:	4603      	mov	r3, r0
 8004762:	005b      	lsls	r3, r3, #1
 8004764:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004768:	4a13      	ldr	r2, [pc, #76]	; (80047b8 <HAL_InitTick+0xa4>)
 800476a:	fba2 2303 	umull	r2, r3, r2, r3
 800476e:	0c9b      	lsrs	r3, r3, #18
 8004770:	3b01      	subs	r3, #1
 8004772:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8004774:	4b11      	ldr	r3, [pc, #68]	; (80047bc <HAL_InitTick+0xa8>)
 8004776:	4a12      	ldr	r2, [pc, #72]	; (80047c0 <HAL_InitTick+0xac>)
 8004778:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800477a:	4b10      	ldr	r3, [pc, #64]	; (80047bc <HAL_InitTick+0xa8>)
 800477c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8004780:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8004782:	4a0e      	ldr	r2, [pc, #56]	; (80047bc <HAL_InitTick+0xa8>)
 8004784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004786:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8004788:	4b0c      	ldr	r3, [pc, #48]	; (80047bc <HAL_InitTick+0xa8>)
 800478a:	2200      	movs	r2, #0
 800478c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800478e:	4b0b      	ldr	r3, [pc, #44]	; (80047bc <HAL_InitTick+0xa8>)
 8004790:	2200      	movs	r2, #0
 8004792:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8004794:	4809      	ldr	r0, [pc, #36]	; (80047bc <HAL_InitTick+0xa8>)
 8004796:	f004 fcc2 	bl	800911e <HAL_TIM_Base_Init>
 800479a:	4603      	mov	r3, r0
 800479c:	2b00      	cmp	r3, #0
 800479e:	d104      	bne.n	80047aa <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80047a0:	4806      	ldr	r0, [pc, #24]	; (80047bc <HAL_InitTick+0xa8>)
 80047a2:	f004 fce7 	bl	8009174 <HAL_TIM_Base_Start_IT>
 80047a6:	4603      	mov	r3, r0
 80047a8:	e000      	b.n	80047ac <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80047aa:	2301      	movs	r3, #1
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3730      	adds	r7, #48	; 0x30
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	40023800 	.word	0x40023800
 80047b8:	431bde83 	.word	0x431bde83
 80047bc:	20008c90 	.word	0x20008c90
 80047c0:	40001000 	.word	0x40001000

080047c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80047c4:	b480      	push	{r7}
 80047c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80047c8:	e7fe      	b.n	80047c8 <NMI_Handler+0x4>

080047ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80047ca:	b480      	push	{r7}
 80047cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80047ce:	e7fe      	b.n	80047ce <HardFault_Handler+0x4>

080047d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80047d0:	b480      	push	{r7}
 80047d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80047d4:	e7fe      	b.n	80047d4 <MemManage_Handler+0x4>

080047d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80047d6:	b480      	push	{r7}
 80047d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80047da:	e7fe      	b.n	80047da <BusFault_Handler+0x4>

080047dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80047dc:	b480      	push	{r7}
 80047de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80047e0:	e7fe      	b.n	80047e0 <UsageFault_Handler+0x4>

080047e2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80047e2:	b480      	push	{r7}
 80047e4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80047e6:	bf00      	nop
 80047e8:	46bd      	mov	sp, r7
 80047ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ee:	4770      	bx	lr

080047f0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80047f0:	b580      	push	{r7, lr}
 80047f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80047f4:	4802      	ldr	r0, [pc, #8]	; (8004800 <USART1_IRQHandler+0x10>)
 80047f6:	f005 ff21 	bl	800a63c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80047fa:	bf00      	nop
 80047fc:	bd80      	pop	{r7, pc}
 80047fe:	bf00      	nop
 8004800:	20008964 	.word	0x20008964

08004804 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8004808:	4b06      	ldr	r3, [pc, #24]	; (8004824 <TIM6_DAC_IRQHandler+0x20>)
 800480a:	791b      	ldrb	r3, [r3, #4]
 800480c:	b2db      	uxtb	r3, r3
 800480e:	2b00      	cmp	r3, #0
 8004810:	d002      	beq.n	8004818 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8004812:	4804      	ldr	r0, [pc, #16]	; (8004824 <TIM6_DAC_IRQHandler+0x20>)
 8004814:	f000 fd8c 	bl	8005330 <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8004818:	4803      	ldr	r0, [pc, #12]	; (8004828 <TIM6_DAC_IRQHandler+0x24>)
 800481a:	f004 fd0a 	bl	8009232 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800481e:	bf00      	nop
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	200089e4 	.word	0x200089e4
 8004828:	20008c90 	.word	0x20008c90

0800482c <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 800482c:	b580      	push	{r7, lr}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 8004830:	4802      	ldr	r0, [pc, #8]	; (800483c <UART7_IRQHandler+0x10>)
 8004832:	f005 ff03 	bl	800a63c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8004836:	bf00      	nop
 8004838:	bd80      	pop	{r7, pc}
 800483a:	bf00      	nop
 800483c:	2000869c 	.word	0x2000869c

08004840 <LTDC_IRQHandler>:

/**
  * @brief This function handles LTDC global interrupt.
  */
void LTDC_IRQHandler(void)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8004844:	4802      	ldr	r0, [pc, #8]	; (8004850 <LTDC_IRQHandler+0x10>)
 8004846:	f002 fbf5 	bl	8007034 <HAL_LTDC_IRQHandler>
  /* USER CODE BEGIN LTDC_IRQn 1 */

  /* USER CODE END LTDC_IRQn 1 */
}
 800484a:	bf00      	nop
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	20008828 	.word	0x20008828

08004854 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004854:	b480      	push	{r7}
 8004856:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004858:	4b08      	ldr	r3, [pc, #32]	; (800487c <SystemInit+0x28>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	4a07      	ldr	r2, [pc, #28]	; (800487c <SystemInit+0x28>)
 8004860:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004864:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004868:	4b04      	ldr	r3, [pc, #16]	; (800487c <SystemInit+0x28>)
 800486a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800486e:	609a      	str	r2, [r3, #8]
#endif
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004878:	4770      	bx	lr
 800487a:	bf00      	nop
 800487c:	e000ed00 	.word	0xe000ed00

08004880 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8004880:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048b8 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004884:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8004886:	e003      	b.n	8004890 <LoopCopyDataInit>

08004888 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8004888:	4b0c      	ldr	r3, [pc, #48]	; (80048bc <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800488a:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 800488c:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800488e:	3104      	adds	r1, #4

08004890 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8004890:	480b      	ldr	r0, [pc, #44]	; (80048c0 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8004892:	4b0c      	ldr	r3, [pc, #48]	; (80048c4 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8004894:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8004896:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8004898:	d3f6      	bcc.n	8004888 <CopyDataInit>
  ldr  r2, =_sbss
 800489a:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 800489c:	e002      	b.n	80048a4 <LoopFillZerobss>

0800489e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800489e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80048a0:	f842 3b04 	str.w	r3, [r2], #4

080048a4 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80048a4:	4b09      	ldr	r3, [pc, #36]	; (80048cc <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80048a6:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80048a8:	d3f9      	bcc.n	800489e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80048aa:	f7ff ffd3 	bl	8004854 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ae:	f009 f987 	bl	800dbc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80048b2:	f7fc f839 	bl	8000928 <main>
  bx  lr    
 80048b6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80048b8:	20050000 	.word	0x20050000
  ldr  r3, =_sidata
 80048bc:	0800fc74 	.word	0x0800fc74
  ldr  r0, =_sdata
 80048c0:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80048c4:	20000058 	.word	0x20000058
  ldr  r2, =_sbss
 80048c8:	20000058 	.word	0x20000058
  ldr  r3, = _ebss
 80048cc:	20008cd4 	.word	0x20008cd4

080048d0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80048d0:	e7fe      	b.n	80048d0 <ADC_IRQHandler>

080048d2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80048d2:	b580      	push	{r7, lr}
 80048d4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80048d6:	2003      	movs	r0, #3
 80048d8:	f000 fcd3 	bl	8005282 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80048dc:	2000      	movs	r0, #0
 80048de:	f7ff ff19 	bl	8004714 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80048e2:	f7ff f9fb 	bl	8003cdc <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80048e6:	2300      	movs	r3, #0
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	bd80      	pop	{r7, pc}

080048ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80048ec:	b480      	push	{r7}
 80048ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80048f0:	4b06      	ldr	r3, [pc, #24]	; (800490c <HAL_IncTick+0x20>)
 80048f2:	781b      	ldrb	r3, [r3, #0]
 80048f4:	461a      	mov	r2, r3
 80048f6:	4b06      	ldr	r3, [pc, #24]	; (8004910 <HAL_IncTick+0x24>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4413      	add	r3, r2
 80048fc:	4a04      	ldr	r2, [pc, #16]	; (8004910 <HAL_IncTick+0x24>)
 80048fe:	6013      	str	r3, [r2, #0]
}
 8004900:	bf00      	nop
 8004902:	46bd      	mov	sp, r7
 8004904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004908:	4770      	bx	lr
 800490a:	bf00      	nop
 800490c:	20000050 	.word	0x20000050
 8004910:	20008cd0 	.word	0x20008cd0

08004914 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004914:	b480      	push	{r7}
 8004916:	af00      	add	r7, sp, #0
  return uwTick;
 8004918:	4b03      	ldr	r3, [pc, #12]	; (8004928 <HAL_GetTick+0x14>)
 800491a:	681b      	ldr	r3, [r3, #0]
}
 800491c:	4618      	mov	r0, r3
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	20008cd0 	.word	0x20008cd0

0800492c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800492c:	b580      	push	{r7, lr}
 800492e:	b084      	sub	sp, #16
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004934:	f7ff ffee 	bl	8004914 <HAL_GetTick>
 8004938:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004944:	d005      	beq.n	8004952 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004946:	4b0a      	ldr	r3, [pc, #40]	; (8004970 <HAL_Delay+0x44>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	4413      	add	r3, r2
 8004950:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004952:	bf00      	nop
 8004954:	f7ff ffde 	bl	8004914 <HAL_GetTick>
 8004958:	4602      	mov	r2, r0
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	1ad3      	subs	r3, r2, r3
 800495e:	68fa      	ldr	r2, [r7, #12]
 8004960:	429a      	cmp	r2, r3
 8004962:	d8f7      	bhi.n	8004954 <HAL_Delay+0x28>
  {
  }
}
 8004964:	bf00      	nop
 8004966:	bf00      	nop
 8004968:	3710      	adds	r7, #16
 800496a:	46bd      	mov	sp, r7
 800496c:	bd80      	pop	{r7, pc}
 800496e:	bf00      	nop
 8004970:	20000050 	.word	0x20000050

08004974 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e031      	b.n	80049ee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004992:	6878      	ldr	r0, [r7, #4]
 8004994:	f7ff f9ca 	bl	8003d2c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049aa:	f003 0310 	and.w	r3, r3, #16
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d116      	bne.n	80049e0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049b6:	4b10      	ldr	r3, [pc, #64]	; (80049f8 <HAL_ADC_Init+0x84>)
 80049b8:	4013      	ands	r3, r2
 80049ba:	f043 0202 	orr.w	r2, r3, #2
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80049c2:	6878      	ldr	r0, [r7, #4]
 80049c4:	f000 fab6 	bl	8004f34 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	2200      	movs	r2, #0
 80049cc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049d2:	f023 0303 	bic.w	r3, r3, #3
 80049d6:	f043 0201 	orr.w	r2, r3, #1
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	641a      	str	r2, [r3, #64]	; 0x40
 80049de:	e001      	b.n	80049e4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80049ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80049ee:	4618      	mov	r0, r3
 80049f0:	3710      	adds	r7, #16
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bd80      	pop	{r7, pc}
 80049f6:	bf00      	nop
 80049f8:	ffffeefd 	.word	0xffffeefd

080049fc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80049fc:	b480      	push	{r7}
 80049fe:	b085      	sub	sp, #20
 8004a00:	af00      	add	r7, sp, #0
 8004a02:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8004a04:	2300      	movs	r3, #0
 8004a06:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a0e:	2b01      	cmp	r3, #1
 8004a10:	d101      	bne.n	8004a16 <HAL_ADC_Start+0x1a>
 8004a12:	2302      	movs	r3, #2
 8004a14:	e0a0      	b.n	8004b58 <HAL_ADC_Start+0x15c>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2201      	movs	r2, #1
 8004a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	f003 0301 	and.w	r3, r3, #1
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d018      	beq.n	8004a5e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	689a      	ldr	r2, [r3, #8]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f042 0201 	orr.w	r2, r2, #1
 8004a3a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004a3c:	4b49      	ldr	r3, [pc, #292]	; (8004b64 <HAL_ADC_Start+0x168>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a49      	ldr	r2, [pc, #292]	; (8004b68 <HAL_ADC_Start+0x16c>)
 8004a42:	fba2 2303 	umull	r2, r3, r2, r3
 8004a46:	0c9a      	lsrs	r2, r3, #18
 8004a48:	4613      	mov	r3, r2
 8004a4a:	005b      	lsls	r3, r3, #1
 8004a4c:	4413      	add	r3, r2
 8004a4e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a50:	e002      	b.n	8004a58 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	3b01      	subs	r3, #1
 8004a56:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1f9      	bne.n	8004a52 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689b      	ldr	r3, [r3, #8]
 8004a64:	f003 0301 	and.w	r3, r3, #1
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d174      	bne.n	8004b56 <HAL_ADC_Start+0x15a>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a70:	4b3e      	ldr	r3, [pc, #248]	; (8004b6c <HAL_ADC_Start+0x170>)
 8004a72:	4013      	ands	r3, r2
 8004a74:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d007      	beq.n	8004a9a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004a92:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a9e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aa6:	d106      	bne.n	8004ab6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004aac:	f023 0206 	bic.w	r2, r3, #6
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	645a      	str	r2, [r3, #68]	; 0x44
 8004ab4:	e002      	b.n	8004abc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2200      	movs	r2, #0
 8004ac0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004acc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8004ace:	4b28      	ldr	r3, [pc, #160]	; (8004b70 <HAL_ADC_Start+0x174>)
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f003 031f 	and.w	r3, r3, #31
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d10f      	bne.n	8004afa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	689b      	ldr	r3, [r3, #8]
 8004ae0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d136      	bne.n	8004b56 <HAL_ADC_Start+0x15a>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	689a      	ldr	r2, [r3, #8]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004af6:	609a      	str	r2, [r3, #8]
 8004af8:	e02d      	b.n	8004b56 <HAL_ADC_Start+0x15a>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	4a1d      	ldr	r2, [pc, #116]	; (8004b74 <HAL_ADC_Start+0x178>)
 8004b00:	4293      	cmp	r3, r2
 8004b02:	d10e      	bne.n	8004b22 <HAL_ADC_Start+0x126>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	689b      	ldr	r3, [r3, #8]
 8004b0a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d107      	bne.n	8004b22 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	689a      	ldr	r2, [r3, #8]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b20:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8004b22:	4b13      	ldr	r3, [pc, #76]	; (8004b70 <HAL_ADC_Start+0x174>)
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	f003 0310 	and.w	r3, r3, #16
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d113      	bne.n	8004b56 <HAL_ADC_Start+0x15a>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a11      	ldr	r2, [pc, #68]	; (8004b78 <HAL_ADC_Start+0x17c>)
 8004b34:	4293      	cmp	r3, r2
 8004b36:	d10e      	bne.n	8004b56 <HAL_ADC_Start+0x15a>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d107      	bne.n	8004b56 <HAL_ADC_Start+0x15a>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	689a      	ldr	r2, [r3, #8]
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004b54:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8004b56:	2300      	movs	r3, #0
}
 8004b58:	4618      	mov	r0, r3
 8004b5a:	3714      	adds	r7, #20
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr
 8004b64:	20000048 	.word	0x20000048
 8004b68:	431bde83 	.word	0x431bde83
 8004b6c:	fffff8fe 	.word	0xfffff8fe
 8004b70:	40012300 	.word	0x40012300
 8004b74:	40012000 	.word	0x40012000
 8004b78:	40012200 	.word	0x40012200

08004b7c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b86:	2300      	movs	r3, #0
 8004b88:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	689b      	ldr	r3, [r3, #8]
 8004b90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b98:	d113      	bne.n	8004bc2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8004ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ba8:	d10b      	bne.n	8004bc2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bae:	f043 0220 	orr.w	r2, r3, #32
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2200      	movs	r2, #0
 8004bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e05c      	b.n	8004c7c <HAL_ADC_PollForConversion+0x100>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 8004bc2:	f7ff fea7 	bl	8004914 <HAL_GetTick>
 8004bc6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004bc8:	e01a      	b.n	8004c00 <HAL_ADC_PollForConversion+0x84>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8004bca:	683b      	ldr	r3, [r7, #0]
 8004bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd0:	d016      	beq.n	8004c00 <HAL_ADC_PollForConversion+0x84>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d007      	beq.n	8004be8 <HAL_ADC_PollForConversion+0x6c>
 8004bd8:	f7ff fe9c 	bl	8004914 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	683a      	ldr	r2, [r7, #0]
 8004be4:	429a      	cmp	r2, r3
 8004be6:	d20b      	bcs.n	8004c00 <HAL_ADC_PollForConversion+0x84>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bec:	f043 0204 	orr.w	r2, r3, #4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	641a      	str	r2, [r3, #64]	; 0x40
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
        
        return HAL_TIMEOUT;
 8004bfc:	2303      	movs	r3, #3
 8004bfe:	e03d      	b.n	8004c7c <HAL_ADC_PollForConversion+0x100>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d1dd      	bne.n	8004bca <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f06f 0212 	mvn.w	r2, #18
 8004c16:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	689b      	ldr	r3, [r3, #8]
 8004c2a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d123      	bne.n	8004c7a <HAL_ADC_PollForConversion+0xfe>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d11f      	bne.n	8004c7a <HAL_ADC_PollForConversion+0xfe>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c40:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d006      	beq.n	8004c56 <HAL_ADC_PollForConversion+0xda>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d111      	bne.n	8004c7a <HAL_ADC_PollForConversion+0xfe>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d105      	bne.n	8004c7a <HAL_ADC_PollForConversion+0xfe>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c72:	f043 0201 	orr.w	r2, r3, #1
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8004c7a:	2300      	movs	r3, #0
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	3710      	adds	r7, #16
 8004c80:	46bd      	mov	sp, r7
 8004c82:	bd80      	pop	{r7, pc}

08004c84 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8004c84:	b480      	push	{r7}
 8004c86:	b083      	sub	sp, #12
 8004c88:	af00      	add	r7, sp, #0
 8004c8a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8004c92:	4618      	mov	r0, r3
 8004c94:	370c      	adds	r7, #12
 8004c96:	46bd      	mov	sp, r7
 8004c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9c:	4770      	bx	lr
	...

08004ca0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004ca0:	b480      	push	{r7}
 8004ca2:	b085      	sub	sp, #20
 8004ca4:	af00      	add	r7, sp, #0
 8004ca6:	6078      	str	r0, [r7, #4]
 8004ca8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8004caa:	2300      	movs	r3, #0
 8004cac:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cb4:	2b01      	cmp	r3, #1
 8004cb6:	d101      	bne.n	8004cbc <HAL_ADC_ConfigChannel+0x1c>
 8004cb8:	2302      	movs	r3, #2
 8004cba:	e12a      	b.n	8004f12 <HAL_ADC_ConfigChannel+0x272>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8004cc4:	683b      	ldr	r3, [r7, #0]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2b09      	cmp	r3, #9
 8004cca:	d93a      	bls.n	8004d42 <HAL_ADC_ConfigChannel+0xa2>
 8004ccc:	683b      	ldr	r3, [r7, #0]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004cd4:	d035      	beq.n	8004d42 <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	68d9      	ldr	r1, [r3, #12]
 8004cdc:	683b      	ldr	r3, [r7, #0]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	b29b      	uxth	r3, r3
 8004ce2:	461a      	mov	r2, r3
 8004ce4:	4613      	mov	r3, r2
 8004ce6:	005b      	lsls	r3, r3, #1
 8004ce8:	4413      	add	r3, r2
 8004cea:	3b1e      	subs	r3, #30
 8004cec:	2207      	movs	r2, #7
 8004cee:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf2:	43da      	mvns	r2, r3
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	400a      	ands	r2, r1
 8004cfa:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4a87      	ldr	r2, [pc, #540]	; (8004f20 <HAL_ADC_ConfigChannel+0x280>)
 8004d02:	4293      	cmp	r3, r2
 8004d04:	d10a      	bne.n	8004d1c <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	68d9      	ldr	r1, [r3, #12]
 8004d0c:	683b      	ldr	r3, [r7, #0]
 8004d0e:	689b      	ldr	r3, [r3, #8]
 8004d10:	061a      	lsls	r2, r3, #24
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	430a      	orrs	r2, r1
 8004d18:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d1a:	e035      	b.n	8004d88 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	68d9      	ldr	r1, [r3, #12]
 8004d22:	683b      	ldr	r3, [r7, #0]
 8004d24:	689a      	ldr	r2, [r3, #8]
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	b29b      	uxth	r3, r3
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	4603      	mov	r3, r0
 8004d30:	005b      	lsls	r3, r3, #1
 8004d32:	4403      	add	r3, r0
 8004d34:	3b1e      	subs	r3, #30
 8004d36:	409a      	lsls	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	430a      	orrs	r2, r1
 8004d3e:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004d40:	e022      	b.n	8004d88 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	6919      	ldr	r1, [r3, #16]
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	461a      	mov	r2, r3
 8004d50:	4613      	mov	r3, r2
 8004d52:	005b      	lsls	r3, r3, #1
 8004d54:	4413      	add	r3, r2
 8004d56:	2207      	movs	r2, #7
 8004d58:	fa02 f303 	lsl.w	r3, r2, r3
 8004d5c:	43da      	mvns	r2, r3
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	400a      	ands	r2, r1
 8004d64:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	6919      	ldr	r1, [r3, #16]
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	689a      	ldr	r2, [r3, #8]
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	4618      	mov	r0, r3
 8004d78:	4603      	mov	r3, r0
 8004d7a:	005b      	lsls	r3, r3, #1
 8004d7c:	4403      	add	r3, r0
 8004d7e:	409a      	lsls	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004d88:	683b      	ldr	r3, [r7, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	2b06      	cmp	r3, #6
 8004d8e:	d824      	bhi.n	8004dda <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004d96:	683b      	ldr	r3, [r7, #0]
 8004d98:	685a      	ldr	r2, [r3, #4]
 8004d9a:	4613      	mov	r3, r2
 8004d9c:	009b      	lsls	r3, r3, #2
 8004d9e:	4413      	add	r3, r2
 8004da0:	3b05      	subs	r3, #5
 8004da2:	221f      	movs	r2, #31
 8004da4:	fa02 f303 	lsl.w	r3, r2, r3
 8004da8:	43da      	mvns	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	400a      	ands	r2, r1
 8004db0:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	4613      	mov	r3, r2
 8004dc6:	009b      	lsls	r3, r3, #2
 8004dc8:	4413      	add	r3, r2
 8004dca:	3b05      	subs	r3, #5
 8004dcc:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	635a      	str	r2, [r3, #52]	; 0x34
 8004dd8:	e04c      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	2b0c      	cmp	r3, #12
 8004de0:	d824      	bhi.n	8004e2c <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	4613      	mov	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4413      	add	r3, r2
 8004df2:	3b23      	subs	r3, #35	; 0x23
 8004df4:	221f      	movs	r2, #31
 8004df6:	fa02 f303 	lsl.w	r3, r2, r3
 8004dfa:	43da      	mvns	r2, r3
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	400a      	ands	r2, r1
 8004e02:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004e0a:	683b      	ldr	r3, [r7, #0]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	b29b      	uxth	r3, r3
 8004e10:	4618      	mov	r0, r3
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	685a      	ldr	r2, [r3, #4]
 8004e16:	4613      	mov	r3, r2
 8004e18:	009b      	lsls	r3, r3, #2
 8004e1a:	4413      	add	r3, r2
 8004e1c:	3b23      	subs	r3, #35	; 0x23
 8004e1e:	fa00 f203 	lsl.w	r2, r0, r3
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	430a      	orrs	r2, r1
 8004e28:	631a      	str	r2, [r3, #48]	; 0x30
 8004e2a:	e023      	b.n	8004e74 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e32:	683b      	ldr	r3, [r7, #0]
 8004e34:	685a      	ldr	r2, [r3, #4]
 8004e36:	4613      	mov	r3, r2
 8004e38:	009b      	lsls	r3, r3, #2
 8004e3a:	4413      	add	r3, r2
 8004e3c:	3b41      	subs	r3, #65	; 0x41
 8004e3e:	221f      	movs	r2, #31
 8004e40:	fa02 f303 	lsl.w	r3, r2, r3
 8004e44:	43da      	mvns	r2, r3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	400a      	ands	r2, r1
 8004e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004e54:	683b      	ldr	r3, [r7, #0]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	b29b      	uxth	r3, r3
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	685a      	ldr	r2, [r3, #4]
 8004e60:	4613      	mov	r3, r2
 8004e62:	009b      	lsls	r3, r3, #2
 8004e64:	4413      	add	r3, r2
 8004e66:	3b41      	subs	r3, #65	; 0x41
 8004e68:	fa00 f203 	lsl.w	r2, r0, r3
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	430a      	orrs	r2, r1
 8004e72:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	4a2a      	ldr	r2, [pc, #168]	; (8004f24 <HAL_ADC_ConfigChannel+0x284>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d10a      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x1f4>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e86:	d105      	bne.n	8004e94 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8004e88:	4b27      	ldr	r3, [pc, #156]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	4a26      	ldr	r2, [pc, #152]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004e8e:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8004e92:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a22      	ldr	r2, [pc, #136]	; (8004f24 <HAL_ADC_ConfigChannel+0x284>)
 8004e9a:	4293      	cmp	r3, r2
 8004e9c:	d109      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x212>
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2b12      	cmp	r3, #18
 8004ea4:	d105      	bne.n	8004eb2 <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 8004ea6:	4b20      	ldr	r3, [pc, #128]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004ea8:	685b      	ldr	r3, [r3, #4]
 8004eaa:	4a1f      	ldr	r2, [pc, #124]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004eac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004eb0:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a1b      	ldr	r2, [pc, #108]	; (8004f24 <HAL_ADC_ConfigChannel+0x284>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d125      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x268>
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	4a17      	ldr	r2, [pc, #92]	; (8004f20 <HAL_ADC_ConfigChannel+0x280>)
 8004ec2:	4293      	cmp	r3, r2
 8004ec4:	d003      	beq.n	8004ece <HAL_ADC_ConfigChannel+0x22e>
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	2b11      	cmp	r3, #17
 8004ecc:	d11c      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8004ece:	4b16      	ldr	r3, [pc, #88]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	4a15      	ldr	r2, [pc, #84]	; (8004f28 <HAL_ADC_ConfigChannel+0x288>)
 8004ed4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ed8:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	4a10      	ldr	r2, [pc, #64]	; (8004f20 <HAL_ADC_ConfigChannel+0x280>)
 8004ee0:	4293      	cmp	r3, r2
 8004ee2:	d111      	bne.n	8004f08 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004ee4:	4b11      	ldr	r3, [pc, #68]	; (8004f2c <HAL_ADC_ConfigChannel+0x28c>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4a11      	ldr	r2, [pc, #68]	; (8004f30 <HAL_ADC_ConfigChannel+0x290>)
 8004eea:	fba2 2303 	umull	r2, r3, r2, r3
 8004eee:	0c9a      	lsrs	r2, r3, #18
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	009b      	lsls	r3, r3, #2
 8004ef4:	4413      	add	r3, r2
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004efa:	e002      	b.n	8004f02 <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3b01      	subs	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f9      	bne.n	8004efc <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	10000012 	.word	0x10000012
 8004f24:	40012000 	.word	0x40012000
 8004f28:	40012300 	.word	0x40012300
 8004f2c:	20000048 	.word	0x20000048
 8004f30:	431bde83 	.word	0x431bde83

08004f34 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004f34:	b480      	push	{r7}
 8004f36:	b083      	sub	sp, #12
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8004f3c:	4b78      	ldr	r3, [pc, #480]	; (8005120 <ADC_Init+0x1ec>)
 8004f3e:	685b      	ldr	r3, [r3, #4]
 8004f40:	4a77      	ldr	r2, [pc, #476]	; (8005120 <ADC_Init+0x1ec>)
 8004f42:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f46:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8004f48:	4b75      	ldr	r3, [pc, #468]	; (8005120 <ADC_Init+0x1ec>)
 8004f4a:	685a      	ldr	r2, [r3, #4]
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	4973      	ldr	r1, [pc, #460]	; (8005120 <ADC_Init+0x1ec>)
 8004f52:	4313      	orrs	r3, r2
 8004f54:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	685a      	ldr	r2, [r3, #4]
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004f64:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	6859      	ldr	r1, [r3, #4]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	021a      	lsls	r2, r3, #8
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	430a      	orrs	r2, r1
 8004f78:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	685a      	ldr	r2, [r3, #4]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004f88:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	6859      	ldr	r1, [r3, #4]
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	689a      	ldr	r2, [r3, #8]
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	430a      	orrs	r2, r1
 8004f9a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689a      	ldr	r2, [r3, #8]
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004faa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	6899      	ldr	r1, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	68da      	ldr	r2, [r3, #12]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	430a      	orrs	r2, r1
 8004fbc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fc2:	4a58      	ldr	r2, [pc, #352]	; (8005124 <ADC_Init+0x1f0>)
 8004fc4:	4293      	cmp	r3, r2
 8004fc6:	d022      	beq.n	800500e <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689a      	ldr	r2, [r3, #8]
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004fd6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	6899      	ldr	r1, [r3, #8]
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	430a      	orrs	r2, r1
 8004fe8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689a      	ldr	r2, [r3, #8]
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004ff8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6899      	ldr	r1, [r3, #8]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	430a      	orrs	r2, r1
 800500a:	609a      	str	r2, [r3, #8]
 800500c:	e00f      	b.n	800502e <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689a      	ldr	r2, [r3, #8]
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800501c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	689a      	ldr	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800502c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	689a      	ldr	r2, [r3, #8]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 0202 	bic.w	r2, r2, #2
 800503c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	6899      	ldr	r1, [r3, #8]
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	699b      	ldr	r3, [r3, #24]
 8005048:	005a      	lsls	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d01b      	beq.n	8005094 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685a      	ldr	r2, [r3, #4]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800506a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685a      	ldr	r2, [r3, #4]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800507a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	6859      	ldr	r1, [r3, #4]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005086:	3b01      	subs	r3, #1
 8005088:	035a      	lsls	r2, r3, #13
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	430a      	orrs	r2, r1
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	e007      	b.n	80050a4 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	685a      	ldr	r2, [r3, #4]
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80050a2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80050b2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	69db      	ldr	r3, [r3, #28]
 80050be:	3b01      	subs	r3, #1
 80050c0:	051a      	lsls	r2, r3, #20
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	430a      	orrs	r2, r1
 80050c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	689a      	ldr	r2, [r3, #8]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80050d8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	6899      	ldr	r1, [r3, #8]
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80050e6:	025a      	lsls	r2, r3, #9
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	430a      	orrs	r2, r1
 80050ee:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	689a      	ldr	r2, [r3, #8]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050fe:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	6899      	ldr	r1, [r3, #8]
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	695b      	ldr	r3, [r3, #20]
 800510a:	029a      	lsls	r2, r3, #10
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	430a      	orrs	r2, r1
 8005112:	609a      	str	r2, [r3, #8]
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr
 8005120:	40012300 	.word	0x40012300
 8005124:	0f000001 	.word	0x0f000001

08005128 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005128:	b480      	push	{r7}
 800512a:	b085      	sub	sp, #20
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	f003 0307 	and.w	r3, r3, #7
 8005136:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005138:	4b0b      	ldr	r3, [pc, #44]	; (8005168 <__NVIC_SetPriorityGrouping+0x40>)
 800513a:	68db      	ldr	r3, [r3, #12]
 800513c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800513e:	68ba      	ldr	r2, [r7, #8]
 8005140:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005144:	4013      	ands	r3, r2
 8005146:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800514c:	68bb      	ldr	r3, [r7, #8]
 800514e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8005150:	4b06      	ldr	r3, [pc, #24]	; (800516c <__NVIC_SetPriorityGrouping+0x44>)
 8005152:	4313      	orrs	r3, r2
 8005154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005156:	4a04      	ldr	r2, [pc, #16]	; (8005168 <__NVIC_SetPriorityGrouping+0x40>)
 8005158:	68bb      	ldr	r3, [r7, #8]
 800515a:	60d3      	str	r3, [r2, #12]
}
 800515c:	bf00      	nop
 800515e:	3714      	adds	r7, #20
 8005160:	46bd      	mov	sp, r7
 8005162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005166:	4770      	bx	lr
 8005168:	e000ed00 	.word	0xe000ed00
 800516c:	05fa0000 	.word	0x05fa0000

08005170 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005170:	b480      	push	{r7}
 8005172:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005174:	4b04      	ldr	r3, [pc, #16]	; (8005188 <__NVIC_GetPriorityGrouping+0x18>)
 8005176:	68db      	ldr	r3, [r3, #12]
 8005178:	0a1b      	lsrs	r3, r3, #8
 800517a:	f003 0307 	and.w	r3, r3, #7
}
 800517e:	4618      	mov	r0, r3
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr
 8005188:	e000ed00 	.word	0xe000ed00

0800518c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	4603      	mov	r3, r0
 8005194:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800519a:	2b00      	cmp	r3, #0
 800519c:	db0b      	blt.n	80051b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800519e:	79fb      	ldrb	r3, [r7, #7]
 80051a0:	f003 021f 	and.w	r2, r3, #31
 80051a4:	4907      	ldr	r1, [pc, #28]	; (80051c4 <__NVIC_EnableIRQ+0x38>)
 80051a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051aa:	095b      	lsrs	r3, r3, #5
 80051ac:	2001      	movs	r0, #1
 80051ae:	fa00 f202 	lsl.w	r2, r0, r2
 80051b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80051b6:	bf00      	nop
 80051b8:	370c      	adds	r7, #12
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	e000e100 	.word	0xe000e100

080051c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	4603      	mov	r3, r0
 80051d0:	6039      	str	r1, [r7, #0]
 80051d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80051d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	db0a      	blt.n	80051f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	b2da      	uxtb	r2, r3
 80051e0:	490c      	ldr	r1, [pc, #48]	; (8005214 <__NVIC_SetPriority+0x4c>)
 80051e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051e6:	0112      	lsls	r2, r2, #4
 80051e8:	b2d2      	uxtb	r2, r2
 80051ea:	440b      	add	r3, r1
 80051ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80051f0:	e00a      	b.n	8005208 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	b2da      	uxtb	r2, r3
 80051f6:	4908      	ldr	r1, [pc, #32]	; (8005218 <__NVIC_SetPriority+0x50>)
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	f003 030f 	and.w	r3, r3, #15
 80051fe:	3b04      	subs	r3, #4
 8005200:	0112      	lsls	r2, r2, #4
 8005202:	b2d2      	uxtb	r2, r2
 8005204:	440b      	add	r3, r1
 8005206:	761a      	strb	r2, [r3, #24]
}
 8005208:	bf00      	nop
 800520a:	370c      	adds	r7, #12
 800520c:	46bd      	mov	sp, r7
 800520e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005212:	4770      	bx	lr
 8005214:	e000e100 	.word	0xe000e100
 8005218:	e000ed00 	.word	0xe000ed00

0800521c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800521c:	b480      	push	{r7}
 800521e:	b089      	sub	sp, #36	; 0x24
 8005220:	af00      	add	r7, sp, #0
 8005222:	60f8      	str	r0, [r7, #12]
 8005224:	60b9      	str	r1, [r7, #8]
 8005226:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	f003 0307 	and.w	r3, r3, #7
 800522e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005230:	69fb      	ldr	r3, [r7, #28]
 8005232:	f1c3 0307 	rsb	r3, r3, #7
 8005236:	2b04      	cmp	r3, #4
 8005238:	bf28      	it	cs
 800523a:	2304      	movcs	r3, #4
 800523c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800523e:	69fb      	ldr	r3, [r7, #28]
 8005240:	3304      	adds	r3, #4
 8005242:	2b06      	cmp	r3, #6
 8005244:	d902      	bls.n	800524c <NVIC_EncodePriority+0x30>
 8005246:	69fb      	ldr	r3, [r7, #28]
 8005248:	3b03      	subs	r3, #3
 800524a:	e000      	b.n	800524e <NVIC_EncodePriority+0x32>
 800524c:	2300      	movs	r3, #0
 800524e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005250:	f04f 32ff 	mov.w	r2, #4294967295
 8005254:	69bb      	ldr	r3, [r7, #24]
 8005256:	fa02 f303 	lsl.w	r3, r2, r3
 800525a:	43da      	mvns	r2, r3
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	401a      	ands	r2, r3
 8005260:	697b      	ldr	r3, [r7, #20]
 8005262:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005264:	f04f 31ff 	mov.w	r1, #4294967295
 8005268:	697b      	ldr	r3, [r7, #20]
 800526a:	fa01 f303 	lsl.w	r3, r1, r3
 800526e:	43d9      	mvns	r1, r3
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005274:	4313      	orrs	r3, r2
         );
}
 8005276:	4618      	mov	r0, r3
 8005278:	3724      	adds	r7, #36	; 0x24
 800527a:	46bd      	mov	sp, r7
 800527c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005280:	4770      	bx	lr

08005282 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005282:	b580      	push	{r7, lr}
 8005284:	b082      	sub	sp, #8
 8005286:	af00      	add	r7, sp, #0
 8005288:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800528a:	6878      	ldr	r0, [r7, #4]
 800528c:	f7ff ff4c 	bl	8005128 <__NVIC_SetPriorityGrouping>
}
 8005290:	bf00      	nop
 8005292:	3708      	adds	r7, #8
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8005298:	b580      	push	{r7, lr}
 800529a:	b086      	sub	sp, #24
 800529c:	af00      	add	r7, sp, #0
 800529e:	4603      	mov	r3, r0
 80052a0:	60b9      	str	r1, [r7, #8]
 80052a2:	607a      	str	r2, [r7, #4]
 80052a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80052a6:	2300      	movs	r3, #0
 80052a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80052aa:	f7ff ff61 	bl	8005170 <__NVIC_GetPriorityGrouping>
 80052ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80052b0:	687a      	ldr	r2, [r7, #4]
 80052b2:	68b9      	ldr	r1, [r7, #8]
 80052b4:	6978      	ldr	r0, [r7, #20]
 80052b6:	f7ff ffb1 	bl	800521c <NVIC_EncodePriority>
 80052ba:	4602      	mov	r2, r0
 80052bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80052c0:	4611      	mov	r1, r2
 80052c2:	4618      	mov	r0, r3
 80052c4:	f7ff ff80 	bl	80051c8 <__NVIC_SetPriority>
}
 80052c8:	bf00      	nop
 80052ca:	3718      	adds	r7, #24
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b082      	sub	sp, #8
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	4603      	mov	r3, r0
 80052d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80052da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff ff54 	bl	800518c <__NVIC_EnableIRQ>
}
 80052e4:	bf00      	nop
 80052e6:	3708      	adds	r7, #8
 80052e8:	46bd      	mov	sp, r7
 80052ea:	bd80      	pop	{r7, pc}

080052ec <HAL_DAC_Init>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80052ec:	b580      	push	{r7, lr}
 80052ee:	b082      	sub	sp, #8
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d101      	bne.n	80052fe <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 80052fa:	2301      	movs	r3, #1
 80052fc:	e014      	b.n	8005328 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	791b      	ldrb	r3, [r3, #4]
 8005302:	b2db      	uxtb	r3, r3
 8005304:	2b00      	cmp	r3, #0
 8005306:	d105      	bne.n	8005314 <HAL_DAC_Init+0x28>
    {
      hdac->MspInitCallback               = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED; 
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2200      	movs	r2, #0
 800530c:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800530e:	6878      	ldr	r0, [r7, #4]
 8005310:	f7fe fd7a 	bl	8003e08 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2202      	movs	r2, #2
 8005318:	711a      	strb	r2, [r3, #4]
  
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2200      	movs	r2, #0
 800531e:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2201      	movs	r2, #1
 8005324:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8005326:	2300      	movs	r3, #0
}
 8005328:	4618      	mov	r0, r3
 800532a:	3708      	adds	r7, #8
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_DAC_IRQHandler>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef* hdac)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  /* Check underrun channel 1 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800533e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005342:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005346:	d118      	bne.n	800537a <HAL_DAC_IRQHandler+0x4a>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2204      	movs	r2, #4
 800534c:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel1 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH1;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	691b      	ldr	r3, [r3, #16]
 8005352:	f043 0201 	orr.w	r2, r3, #1
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005362:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN1;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	681a      	ldr	r2, [r3, #0]
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005372:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
    HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005374:	6878      	ldr	r0, [r7, #4]
 8005376:	f000 f825 	bl	80053c4 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
  /* Check underrun channel 2 flag */
  if(__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005380:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005384:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005388:	d118      	bne.n	80053bc <HAL_DAC_IRQHandler+0x8c>
  {
    /* Change DAC state to error state */
    hdac->State = HAL_DAC_STATE_ERROR;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2204      	movs	r2, #4
 800538e:	711a      	strb	r2, [r3, #4]
    
    /* Set DAC error code to channel2 DMA underrun error */
    hdac->ErrorCode |= HAL_DAC_ERROR_DMAUNDERRUNCH2;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	691b      	ldr	r3, [r3, #16]
 8005394:	f043 0202 	orr.w	r2, r3, #2
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	611a      	str	r2, [r3, #16]
    
    /* Clear the underrun flag */
    __HAL_DAC_CLEAR_FLAG(hdac,DAC_FLAG_DMAUDR2);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80053a4:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Disable the selected DAC channel1 DMA request */
    hdac->Instance->CR &= ~DAC_CR_DMAEN2;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80053b4:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
    HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 f85b 	bl	8005472 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }
}
 80053bc:	bf00      	nop
 80053be:	3708      	adds	r7, #8
 80053c0:	46bd      	mov	sp, r7
 80053c2:	bd80      	pop	{r7, pc}

080053c4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b083      	sub	sp, #12
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80053cc:	bf00      	nop
 80053ce:	370c      	adds	r7, #12
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr

080053d8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 80053d8:	b480      	push	{r7}
 80053da:	b087      	sub	sp, #28
 80053dc:	af00      	add	r7, sp, #0
 80053de:	60f8      	str	r0, [r7, #12]
 80053e0:	60b9      	str	r1, [r7, #8]
 80053e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0, tmpreg2 = 0;
 80053e4:	2300      	movs	r3, #0
 80053e6:	617b      	str	r3, [r7, #20]
 80053e8:	2300      	movs	r3, #0
 80053ea:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	795b      	ldrb	r3, [r3, #5]
 80053f0:	2b01      	cmp	r3, #1
 80053f2:	d101      	bne.n	80053f8 <HAL_DAC_ConfigChannel+0x20>
 80053f4:	2302      	movs	r3, #2
 80053f6:	e036      	b.n	8005466 <HAL_DAC_ConfigChannel+0x8e>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	2201      	movs	r2, #1
 80053fc:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	2202      	movs	r2, #2
 8005402:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800540c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43db      	mvns	r3, r3
 8005418:	697a      	ldr	r2, [r7, #20]
 800541a:	4013      	ands	r3, r2
 800541c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */   
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800541e:	68bb      	ldr	r3, [r7, #8]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68bb      	ldr	r3, [r7, #8]
 8005424:	685b      	ldr	r3, [r3, #4]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	fa02 f303 	lsl.w	r3, r2, r3
 8005432:	697a      	ldr	r2, [r7, #20]
 8005434:	4313      	orrs	r3, r2
 8005436:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	697a      	ldr	r2, [r7, #20]
 800543e:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6819      	ldr	r1, [r3, #0]
 8005446:	22c0      	movs	r2, #192	; 0xc0
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	fa02 f303 	lsl.w	r3, r2, r3
 800544e:	43da      	mvns	r2, r3
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	400a      	ands	r2, r1
 8005456:	601a      	str	r2, [r3, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	2201      	movs	r2, #1
 800545c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	2200      	movs	r2, #0
 8005462:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8005464:	2300      	movs	r3, #0
}
 8005466:	4618      	mov	r0, r3
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr

08005472 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac: pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005472:	b480      	push	{r7}
 8005474:	b083      	sub	sp, #12
 8005476:	af00      	add	r7, sp, #0
 8005478:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);
 
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 800547a:	bf00      	nop
 800547c:	370c      	adds	r7, #12
 800547e:	46bd      	mov	sp, r7
 8005480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005484:	4770      	bx	lr
	...

08005488 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005488:	b580      	push	{r7, lr}
 800548a:	b086      	sub	sp, #24
 800548c:	af00      	add	r7, sp, #0
 800548e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005494:	f7ff fa3e 	bl	8004914 <HAL_GetTick>
 8005498:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	2b00      	cmp	r3, #0
 800549e:	d101      	bne.n	80054a4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80054a0:	2301      	movs	r3, #1
 80054a2:	e099      	b.n	80055d8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2202      	movs	r2, #2
 80054b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	681a      	ldr	r2, [r3, #0]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0201 	bic.w	r2, r2, #1
 80054c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054c4:	e00f      	b.n	80054e6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80054c6:	f7ff fa25 	bl	8004914 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b05      	cmp	r3, #5
 80054d2:	d908      	bls.n	80054e6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2220      	movs	r2, #32
 80054d8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2203      	movs	r2, #3
 80054de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80054e2:	2303      	movs	r3, #3
 80054e4:	e078      	b.n	80055d8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f003 0301 	and.w	r3, r3, #1
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d1e8      	bne.n	80054c6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80054fc:	697a      	ldr	r2, [r7, #20]
 80054fe:	4b38      	ldr	r3, [pc, #224]	; (80055e0 <HAL_DMA_Init+0x158>)
 8005500:	4013      	ands	r3, r2
 8005502:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	689b      	ldr	r3, [r3, #8]
 800550c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005512:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691b      	ldr	r3, [r3, #16]
 8005518:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800551e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800552a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a1b      	ldr	r3, [r3, #32]
 8005530:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005532:	697a      	ldr	r2, [r7, #20]
 8005534:	4313      	orrs	r3, r2
 8005536:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800553c:	2b04      	cmp	r3, #4
 800553e:	d107      	bne.n	8005550 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005548:	4313      	orrs	r3, r2
 800554a:	697a      	ldr	r2, [r7, #20]
 800554c:	4313      	orrs	r3, r2
 800554e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	695b      	ldr	r3, [r3, #20]
 800555e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f023 0307 	bic.w	r3, r3, #7
 8005566:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800556c:	697a      	ldr	r2, [r7, #20]
 800556e:	4313      	orrs	r3, r2
 8005570:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005576:	2b04      	cmp	r3, #4
 8005578:	d117      	bne.n	80055aa <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800557e:	697a      	ldr	r2, [r7, #20]
 8005580:	4313      	orrs	r3, r2
 8005582:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005588:	2b00      	cmp	r3, #0
 800558a:	d00e      	beq.n	80055aa <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800558c:	6878      	ldr	r0, [r7, #4]
 800558e:	f000 f8df 	bl	8005750 <DMA_CheckFifoParam>
 8005592:	4603      	mov	r3, r0
 8005594:	2b00      	cmp	r3, #0
 8005596:	d008      	beq.n	80055aa <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2240      	movs	r2, #64	; 0x40
 800559c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	2201      	movs	r2, #1
 80055a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80055a6:	2301      	movs	r3, #1
 80055a8:	e016      	b.n	80055d8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	697a      	ldr	r2, [r7, #20]
 80055b0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f896 	bl	80056e4 <DMA_CalcBaseAndBitshift>
 80055b8:	4603      	mov	r3, r0
 80055ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80055c0:	223f      	movs	r2, #63	; 0x3f
 80055c2:	409a      	lsls	r2, r3
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2200      	movs	r2, #0
 80055cc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	2201      	movs	r2, #1
 80055d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80055d6:	2300      	movs	r3, #0
}
 80055d8:	4618      	mov	r0, r3
 80055da:	3718      	adds	r7, #24
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	f010803f 	.word	0xf010803f

080055e4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 80055f2:	2301      	movs	r3, #1
 80055f4:	e050      	b.n	8005698 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d101      	bne.n	8005606 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 8005602:	2302      	movs	r3, #2
 8005604:	e048      	b.n	8005698 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	681a      	ldr	r2, [r3, #0]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f022 0201 	bic.w	r2, r2, #1
 8005614:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	2200      	movs	r2, #0
 800561c:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2200      	movs	r2, #0
 8005624:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	2200      	movs	r2, #0
 800562c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	2200      	movs	r2, #0
 8005634:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	2200      	movs	r2, #0
 800563c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = (uint32_t)0x00000021U;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	2221      	movs	r2, #33	; 0x21
 8005644:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f000 f84c 	bl	80056e4 <DMA_CalcBaseAndBitshift>
 800564c:	4603      	mov	r3, r0
 800564e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005654:	223f      	movs	r2, #63	; 0x3f
 8005656:	409a      	lsls	r2, r3
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	609a      	str	r2, [r3, #8]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	2200      	movs	r2, #0
 8005660:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2200      	movs	r2, #0
 8005666:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2200      	movs	r2, #0
 800566c:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2200      	movs	r2, #0
 8005672:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;  
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2200      	movs	r2, #0
 800567e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2200      	movs	r2, #0
 8005684:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	2200      	movs	r2, #0
 8005692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005696:	2300      	movs	r3, #0
}
 8005698:	4618      	mov	r0, r3
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}

080056a0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b083      	sub	sp, #12
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80056ae:	b2db      	uxtb	r3, r3
 80056b0:	2b02      	cmp	r3, #2
 80056b2:	d004      	beq.n	80056be <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2280      	movs	r2, #128	; 0x80
 80056b8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	e00c      	b.n	80056d8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2205      	movs	r2, #5
 80056c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f022 0201 	bic.w	r2, r2, #1
 80056d4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80056d6:	2300      	movs	r3, #0
}
 80056d8:	4618      	mov	r0, r3
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	3b10      	subs	r3, #16
 80056f4:	4a13      	ldr	r2, [pc, #76]	; (8005744 <DMA_CalcBaseAndBitshift+0x60>)
 80056f6:	fba2 2303 	umull	r2, r3, r2, r3
 80056fa:	091b      	lsrs	r3, r3, #4
 80056fc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80056fe:	4a12      	ldr	r2, [pc, #72]	; (8005748 <DMA_CalcBaseAndBitshift+0x64>)
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	4413      	add	r3, r2
 8005704:	781b      	ldrb	r3, [r3, #0]
 8005706:	461a      	mov	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	2b03      	cmp	r3, #3
 8005710:	d908      	bls.n	8005724 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	461a      	mov	r2, r3
 8005718:	4b0c      	ldr	r3, [pc, #48]	; (800574c <DMA_CalcBaseAndBitshift+0x68>)
 800571a:	4013      	ands	r3, r2
 800571c:	1d1a      	adds	r2, r3, #4
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	659a      	str	r2, [r3, #88]	; 0x58
 8005722:	e006      	b.n	8005732 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	461a      	mov	r2, r3
 800572a:	4b08      	ldr	r3, [pc, #32]	; (800574c <DMA_CalcBaseAndBitshift+0x68>)
 800572c:	4013      	ands	r3, r2
 800572e:	687a      	ldr	r2, [r7, #4]
 8005730:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005736:	4618      	mov	r0, r3
 8005738:	3714      	adds	r7, #20
 800573a:	46bd      	mov	sp, r7
 800573c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005740:	4770      	bx	lr
 8005742:	bf00      	nop
 8005744:	aaaaaaab 	.word	0xaaaaaaab
 8005748:	0800fc5c 	.word	0x0800fc5c
 800574c:	fffffc00 	.word	0xfffffc00

08005750 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005750:	b480      	push	{r7}
 8005752:	b085      	sub	sp, #20
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005758:	2300      	movs	r3, #0
 800575a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005760:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	699b      	ldr	r3, [r3, #24]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d11f      	bne.n	80057aa <DMA_CheckFifoParam+0x5a>
 800576a:	68bb      	ldr	r3, [r7, #8]
 800576c:	2b03      	cmp	r3, #3
 800576e:	d856      	bhi.n	800581e <DMA_CheckFifoParam+0xce>
 8005770:	a201      	add	r2, pc, #4	; (adr r2, 8005778 <DMA_CheckFifoParam+0x28>)
 8005772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005776:	bf00      	nop
 8005778:	08005789 	.word	0x08005789
 800577c:	0800579b 	.word	0x0800579b
 8005780:	08005789 	.word	0x08005789
 8005784:	0800581f 	.word	0x0800581f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800578c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005790:	2b00      	cmp	r3, #0
 8005792:	d046      	beq.n	8005822 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005798:	e043      	b.n	8005822 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800579e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057a2:	d140      	bne.n	8005826 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80057a4:	2301      	movs	r3, #1
 80057a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057a8:	e03d      	b.n	8005826 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	699b      	ldr	r3, [r3, #24]
 80057ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057b2:	d121      	bne.n	80057f8 <DMA_CheckFifoParam+0xa8>
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b03      	cmp	r3, #3
 80057b8:	d837      	bhi.n	800582a <DMA_CheckFifoParam+0xda>
 80057ba:	a201      	add	r2, pc, #4	; (adr r2, 80057c0 <DMA_CheckFifoParam+0x70>)
 80057bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057c0:	080057d1 	.word	0x080057d1
 80057c4:	080057d7 	.word	0x080057d7
 80057c8:	080057d1 	.word	0x080057d1
 80057cc:	080057e9 	.word	0x080057e9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80057d0:	2301      	movs	r3, #1
 80057d2:	73fb      	strb	r3, [r7, #15]
      break;
 80057d4:	e030      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057da:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d025      	beq.n	800582e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80057e2:	2301      	movs	r3, #1
 80057e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80057e6:	e022      	b.n	800582e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80057f0:	d11f      	bne.n	8005832 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80057f2:	2301      	movs	r3, #1
 80057f4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80057f6:	e01c      	b.n	8005832 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	2b02      	cmp	r3, #2
 80057fc:	d903      	bls.n	8005806 <DMA_CheckFifoParam+0xb6>
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	2b03      	cmp	r3, #3
 8005802:	d003      	beq.n	800580c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005804:	e018      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005806:	2301      	movs	r3, #1
 8005808:	73fb      	strb	r3, [r7, #15]
      break;
 800580a:	e015      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00e      	beq.n	8005836 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e00b      	b.n	8005836 <DMA_CheckFifoParam+0xe6>
      break;
 800581e:	bf00      	nop
 8005820:	e00a      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005822:	bf00      	nop
 8005824:	e008      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005826:	bf00      	nop
 8005828:	e006      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 800582a:	bf00      	nop
 800582c:	e004      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 800582e:	bf00      	nop
 8005830:	e002      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;   
 8005832:	bf00      	nop
 8005834:	e000      	b.n	8005838 <DMA_CheckFifoParam+0xe8>
      break;
 8005836:	bf00      	nop
    }
  } 
  
  return status; 
 8005838:	7bfb      	ldrb	r3, [r7, #15]
}
 800583a:	4618      	mov	r0, r3
 800583c:	3714      	adds	r7, #20
 800583e:	46bd      	mov	sp, r7
 8005840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005844:	4770      	bx	lr
 8005846:	bf00      	nop

08005848 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b082      	sub	sp, #8
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if(hdma2d == NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2b00      	cmp	r3, #0
 8005854:	d101      	bne.n	800585a <HAL_DMA2D_Init+0x12>
  {
     return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e039      	b.n	80058ce <HAL_DMA2D_Init+0x86>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005860:	b2db      	uxtb	r3, r3
 8005862:	2b00      	cmp	r3, #0
 8005864:	d106      	bne.n	8005874 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	2200      	movs	r2, #0
 800586a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7fe fb12 	bl	8003e98 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2202      	movs	r2, #2
 8005878:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	685a      	ldr	r2, [r3, #4]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	430a      	orrs	r2, r1
 8005890:	601a      	str	r2, [r3, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005898:	f023 0107 	bic.w	r1, r3, #7
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	689a      	ldr	r2, [r3, #8]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	430a      	orrs	r2, r1
 80058a6:	635a      	str	r2, [r3, #52]	; 0x34

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058ae:	4b0a      	ldr	r3, [pc, #40]	; (80058d8 <HAL_DMA2D_Init+0x90>)
 80058b0:	4013      	ands	r3, r2
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	68d1      	ldr	r1, [r2, #12]
 80058b6:	687a      	ldr	r2, [r7, #4]
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	430b      	orrs	r3, r1
 80058bc:	6413      	str	r3, [r2, #64]	; 0x40
  MODIFY_REG(hdma2d->Instance->OPFCCR,(DMA2D_OPFCCR_AI|DMA2D_OPFCCR_RBS), ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2201      	movs	r2, #1
 80058c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}
 80058d6:	bf00      	nop
 80058d8:	ffffc000 	.word	0xffffc000

080058dc <HAL_DMA2D_Start>:
  * @param  Width      The width of data to be transferred from source to destination (expressed in number of pixels per line).
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,  uint32_t Height)
{
 80058dc:	b580      	push	{r7, lr}
 80058de:	b086      	sub	sp, #24
 80058e0:	af02      	add	r7, sp, #8
 80058e2:	60f8      	str	r0, [r7, #12]
 80058e4:	60b9      	str	r1, [r7, #8]
 80058e6:	607a      	str	r2, [r7, #4]
 80058e8:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80058f0:	2b01      	cmp	r3, #1
 80058f2:	d101      	bne.n	80058f8 <HAL_DMA2D_Start+0x1c>
 80058f4:	2302      	movs	r3, #2
 80058f6:	e018      	b.n	800592a <HAL_DMA2D_Start+0x4e>
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	2201      	movs	r2, #1
 80058fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	2202      	movs	r2, #2
 8005904:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8005908:	69bb      	ldr	r3, [r7, #24]
 800590a:	9300      	str	r3, [sp, #0]
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	687a      	ldr	r2, [r7, #4]
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f000 f988 	bl	8005c28 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	3710      	adds	r7, #16
 800592e:	46bd      	mov	sp, r7
 8005930:	bd80      	pop	{r7, pc}

08005932 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8005932:	b580      	push	{r7, lr}
 8005934:	b086      	sub	sp, #24
 8005936:	af00      	add	r7, sp, #0
 8005938:	6078      	str	r0, [r7, #4]
 800593a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800593c:	2300      	movs	r3, #0
 800593e:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 0301 	and.w	r3, r3, #1
 800594a:	2b00      	cmp	r3, #0
 800594c:	d056      	beq.n	80059fc <HAL_DMA2D_PollForTransfer+0xca>
  {
   /* Get tick */
   tickstart = HAL_GetTick();
 800594e:	f7fe ffe1 	bl	8004914 <HAL_GetTick>
 8005952:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8005954:	e04b      	b.n	80059ee <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	685b      	ldr	r3, [r3, #4]
 800595c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	f003 0321 	and.w	r3, r3, #33	; 0x21
 8005964:	2b00      	cmp	r3, #0
 8005966:	d023      	beq.n	80059b0 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	f003 0320 	and.w	r3, r3, #32
 800596e:	2b00      	cmp	r3, #0
 8005970:	d005      	beq.n	800597e <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005976:	f043 0202 	orr.w	r2, r3, #2
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f003 0301 	and.w	r3, r3, #1
 8005984:	2b00      	cmp	r3, #0
 8005986:	d005      	beq.n	8005994 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800598c:	f043 0201 	orr.w	r2, r3, #1
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2221      	movs	r2, #33	; 0x21
 800599a:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2204      	movs	r2, #4
 80059a0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 80059ac:	2301      	movs	r3, #1
 80059ae:	e0a5      	b.n	8005afc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 80059b0:	683b      	ldr	r3, [r7, #0]
 80059b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059b6:	d01a      	beq.n	80059ee <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 80059b8:	f7fe ffac 	bl	8004914 <HAL_GetTick>
 80059bc:	4602      	mov	r2, r0
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	1ad3      	subs	r3, r2, r3
 80059c2:	683a      	ldr	r2, [r7, #0]
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d302      	bcc.n	80059ce <HAL_DMA2D_PollForTransfer+0x9c>
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d10f      	bne.n	80059ee <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	f043 0220 	orr.w	r2, r3, #32
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2203      	movs	r2, #3
 80059de:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2200      	movs	r2, #0
 80059e6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 80059ea:	2303      	movs	r3, #3
 80059ec:	e086      	b.n	8005afc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	685b      	ldr	r3, [r3, #4]
 80059f4:	f003 0302 	and.w	r3, r3, #2
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0ac      	beq.n	8005956 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	69db      	ldr	r3, [r3, #28]
 8005a02:	f003 0320 	and.w	r3, r3, #32
 8005a06:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	f003 0320 	and.w	r3, r3, #32
 8005a12:	693a      	ldr	r2, [r7, #16]
 8005a14:	4313      	orrs	r3, r2
 8005a16:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8005a18:	693b      	ldr	r3, [r7, #16]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d061      	beq.n	8005ae2 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8005a1e:	f7fe ff79 	bl	8004914 <HAL_GetTick>
 8005a22:	6178      	str	r0, [r7, #20]

    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005a24:	e056      	b.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	f003 0329 	and.w	r3, r3, #41	; 0x29
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d02e      	beq.n	8005a96 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f003 0308 	and.w	r3, r3, #8
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d005      	beq.n	8005a4e <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a46:	f043 0204 	orr.w	r2, r3, #4
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f003 0320 	and.w	r3, r3, #32
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d005      	beq.n	8005a64 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a5c:	f043 0202 	orr.w	r2, r3, #2
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f003 0301 	and.w	r3, r3, #1
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d005      	beq.n	8005a7a <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a72:	f043 0201 	orr.w	r2, r3, #1
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	63da      	str	r2, [r3, #60]	; 0x3c
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2229      	movs	r2, #41	; 0x29
 8005a80:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	2204      	movs	r2, #4
 8005a86:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	2200      	movs	r2, #0
 8005a8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e032      	b.n	8005afc <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if(Timeout != HAL_MAX_DELAY)
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a9c:	d01a      	beq.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005a9e:	f7fe ff39 	bl	8004914 <HAL_GetTick>
 8005aa2:	4602      	mov	r2, r0
 8005aa4:	697b      	ldr	r3, [r7, #20]
 8005aa6:	1ad3      	subs	r3, r2, r3
 8005aa8:	683a      	ldr	r2, [r7, #0]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d302      	bcc.n	8005ab4 <HAL_DMA2D_PollForTransfer+0x182>
 8005aae:	683b      	ldr	r3, [r7, #0]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d10f      	bne.n	8005ad4 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	f043 0220 	orr.w	r2, r3, #32
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	63da      	str	r2, [r3, #60]	; 0x3c

          /* Change the DMA2D state */
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2203      	movs	r2, #3
 8005ac4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

          return HAL_TIMEOUT;
 8005ad0:	2303      	movs	r3, #3
 8005ad2:	e013      	b.n	8005afc <HAL_DMA2D_PollForTransfer+0x1ca>
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d0a1      	beq.n	8005a26 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	2212      	movs	r2, #18
 8005ae8:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2201      	movs	r2, #1
 8005aee:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	2200      	movs	r2, #0
 8005af6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005afa:	2300      	movs	r3, #0
}
 8005afc:	4618      	mov	r0, r3
 8005afe:	3718      	adds	r7, #24
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b087      	sub	sp, #28
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	6039      	str	r1, [r7, #0]
  uint32_t regMask, regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if(hdma2d->Init.Mode != DMA2D_R2M)
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	685b      	ldr	r3, [r3, #4]
 8005b12:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005b1c:	2b01      	cmp	r3, #1
 8005b1e:	d101      	bne.n	8005b24 <HAL_DMA2D_ConfigLayer+0x20>
 8005b20:	2302      	movs	r3, #2
 8005b22:	e079      	b.n	8005c18 <HAL_DMA2D_ConfigLayer+0x114>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2202      	movs	r2, #2
 8005b30:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	3318      	adds	r3, #24
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	4413      	add	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
#if defined (DMA2D_ALPHA_INV_RB_SWAP_SUPPORT)
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) |\
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
#else
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 8005b40:	693b      	ldr	r3, [r7, #16]
 8005b42:	685a      	ldr	r2, [r3, #4]
 8005b44:	693b      	ldr	r3, [r7, #16]
 8005b46:	689b      	ldr	r3, [r3, #8]
 8005b48:	041b      	lsls	r3, r3, #16
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	617b      	str	r3, [r7, #20]
  regMask  = DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA;
 8005b4e:	4b35      	ldr	r3, [pc, #212]	; (8005c24 <HAL_DMA2D_ConfigLayer+0x120>)
 8005b50:	60fb      	str	r3, [r7, #12]
#endif /* DMA2D_ALPHA_INV_RB_SWAP_SUPPORT */


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005b52:	693b      	ldr	r3, [r7, #16]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b0a      	cmp	r3, #10
 8005b58:	d003      	beq.n	8005b62 <HAL_DMA2D_ConfigLayer+0x5e>
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b09      	cmp	r3, #9
 8005b60:	d107      	bne.n	8005b72 <HAL_DMA2D_ConfigLayer+0x6e>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8005b62:	693b      	ldr	r3, [r7, #16]
 8005b64:	68db      	ldr	r3, [r3, #12]
 8005b66:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005b6a:	697a      	ldr	r2, [r7, #20]
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	617b      	str	r3, [r7, #20]
 8005b70:	e005      	b.n	8005b7e <HAL_DMA2D_ConfigLayer+0x7a>
  }
  else
  {
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005b72:	693b      	ldr	r3, [r7, #16]
 8005b74:	68db      	ldr	r3, [r3, #12]
 8005b76:	061b      	lsls	r3, r3, #24
 8005b78:	697a      	ldr	r2, [r7, #20]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	617b      	str	r3, [r7, #20]
  }

  /* Configure the background DMA2D layer */
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d120      	bne.n	8005bc6 <HAL_DMA2D_ConfigLayer+0xc2>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	43db      	mvns	r3, r3
 8005b8e:	ea02 0103 	and.w	r1, r2, r3
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	697a      	ldr	r2, [r7, #20]
 8005b98:	430a      	orrs	r2, r1
 8005b9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	693a      	ldr	r2, [r7, #16]
 8005ba2:	6812      	ldr	r2, [r2, #0]
 8005ba4:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	685b      	ldr	r3, [r3, #4]
 8005baa:	2b0a      	cmp	r3, #10
 8005bac:	d003      	beq.n	8005bb6 <HAL_DMA2D_ConfigLayer+0xb2>
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	685b      	ldr	r3, [r3, #4]
 8005bb2:	2b09      	cmp	r3, #9
 8005bb4:	d127      	bne.n	8005c06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005bb6:	693b      	ldr	r3, [r7, #16]
 8005bb8:	68da      	ldr	r2, [r3, #12]
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005bc2:	629a      	str	r2, [r3, #40]	; 0x28
 8005bc4:	e01f      	b.n	8005c06 <HAL_DMA2D_ConfigLayer+0x102>
  else
  {


     /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	69da      	ldr	r2, [r3, #28]
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	43db      	mvns	r3, r3
 8005bd0:	ea02 0103 	and.w	r1, r2, r3
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	697a      	ldr	r2, [r7, #20]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	693a      	ldr	r2, [r7, #16]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	685b      	ldr	r3, [r3, #4]
 8005bec:	2b0a      	cmp	r3, #10
 8005bee:	d003      	beq.n	8005bf8 <HAL_DMA2D_ConfigLayer+0xf4>
 8005bf0:	693b      	ldr	r3, [r7, #16]
 8005bf2:	685b      	ldr	r3, [r3, #4]
 8005bf4:	2b09      	cmp	r3, #9
 8005bf6:	d106      	bne.n	8005c06 <HAL_DMA2D_ConfigLayer+0x102>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005bf8:	693b      	ldr	r3, [r7, #16]
 8005bfa:	68da      	ldr	r2, [r3, #12]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 8005c04:	621a      	str	r2, [r3, #32]
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2201      	movs	r2, #1
 8005c0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8005c16:	2300      	movs	r3, #0
}
 8005c18:	4618      	mov	r0, r3
 8005c1a:	371c      	adds	r7, #28
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c22:	4770      	bx	lr
 8005c24:	ff03000f 	.word	0xff03000f

08005c28 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b08b      	sub	sp, #44	; 0x2c
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
 8005c34:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c3c:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	041a      	lsls	r2, r3, #16
 8005c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c46:	431a      	orrs	r2, r3
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	687a      	ldr	r2, [r7, #4]
 8005c56:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	685b      	ldr	r3, [r3, #4]
 8005c5c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005c60:	d174      	bne.n	8005d4c <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005c68:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8005c70:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8005c72:	68bb      	ldr	r3, [r7, #8]
 8005c74:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005c78:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8005c7a:	68bb      	ldr	r3, [r7, #8]
 8005c7c:	b2db      	uxtb	r3, r3
 8005c7e:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d108      	bne.n	8005c9a <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
 8005c88:	69ba      	ldr	r2, [r7, #24]
 8005c8a:	69fb      	ldr	r3, [r7, #28]
 8005c8c:	431a      	orrs	r2, r3
 8005c8e:	6a3b      	ldr	r3, [r7, #32]
 8005c90:	4313      	orrs	r3, r2
 8005c92:	697a      	ldr	r2, [r7, #20]
 8005c94:	4313      	orrs	r3, r2
 8005c96:	627b      	str	r3, [r7, #36]	; 0x24
 8005c98:	e053      	b.n	8005d42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	689b      	ldr	r3, [r3, #8]
 8005c9e:	2b01      	cmp	r3, #1
 8005ca0:	d106      	bne.n	8005cb0 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8005ca2:	69ba      	ldr	r2, [r7, #24]
 8005ca4:	69fb      	ldr	r3, [r7, #28]
 8005ca6:	4313      	orrs	r3, r2
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	4313      	orrs	r3, r2
 8005cac:	627b      	str	r3, [r7, #36]	; 0x24
 8005cae:	e048      	b.n	8005d42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	2b02      	cmp	r3, #2
 8005cb6:	d111      	bne.n	8005cdc <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 8005cb8:	69fb      	ldr	r3, [r7, #28]
 8005cba:	0cdb      	lsrs	r3, r3, #19
 8005cbc:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 8005cbe:	69bb      	ldr	r3, [r7, #24]
 8005cc0:	0a9b      	lsrs	r3, r3, #10
 8005cc2:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005cc4:	697b      	ldr	r3, [r7, #20]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8005cca:	69bb      	ldr	r3, [r7, #24]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	02db      	lsls	r3, r3, #11
 8005cd2:	4313      	orrs	r3, r2
 8005cd4:	697a      	ldr	r2, [r7, #20]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	627b      	str	r3, [r7, #36]	; 0x24
 8005cda:	e032      	b.n	8005d42 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	689b      	ldr	r3, [r3, #8]
 8005ce0:	2b03      	cmp	r3, #3
 8005ce2:	d117      	bne.n	8005d14 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 8005ce4:	6a3b      	ldr	r3, [r7, #32]
 8005ce6:	0fdb      	lsrs	r3, r3, #31
 8005ce8:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 8005cea:	69fb      	ldr	r3, [r7, #28]
 8005cec:	0cdb      	lsrs	r3, r3, #19
 8005cee:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 8005cf0:	69bb      	ldr	r3, [r7, #24]
 8005cf2:	0adb      	lsrs	r3, r3, #11
 8005cf4:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U );
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	08db      	lsrs	r3, r3, #3
 8005cfa:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8005cfc:	69bb      	ldr	r3, [r7, #24]
 8005cfe:	015a      	lsls	r2, r3, #5
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	029b      	lsls	r3, r3, #10
 8005d04:	431a      	orrs	r2, r3
 8005d06:	6a3b      	ldr	r3, [r7, #32]
 8005d08:	03db      	lsls	r3, r3, #15
 8005d0a:	4313      	orrs	r3, r2
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	4313      	orrs	r3, r2
 8005d10:	627b      	str	r3, [r7, #36]	; 0x24
 8005d12:	e016      	b.n	8005d42 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8005d14:	6a3b      	ldr	r3, [r7, #32]
 8005d16:	0f1b      	lsrs	r3, r3, #28
 8005d18:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	0d1b      	lsrs	r3, r3, #20
 8005d1e:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 8005d20:	69bb      	ldr	r3, [r7, #24]
 8005d22:	0b1b      	lsrs	r3, r3, #12
 8005d24:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U );
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	091b      	lsrs	r3, r3, #4
 8005d2a:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8005d2c:	69bb      	ldr	r3, [r7, #24]
 8005d2e:	011a      	lsls	r2, r3, #4
 8005d30:	69fb      	ldr	r3, [r7, #28]
 8005d32:	021b      	lsls	r3, r3, #8
 8005d34:	431a      	orrs	r2, r3
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	031b      	lsls	r3, r3, #12
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	627b      	str	r3, [r7, #36]	; 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d48:	639a      	str	r2, [r3, #56]	; 0x38
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8005d4a:	e003      	b.n	8005d54 <DMA2D_SetConfig+0x12c>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	60da      	str	r2, [r3, #12]
}
 8005d54:	bf00      	nop
 8005d56:	372c      	adds	r7, #44	; 0x2c
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5e:	4770      	bx	lr

08005d60 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b089      	sub	sp, #36	; 0x24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
 8005d68:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8005d72:	2300      	movs	r3, #0
 8005d74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8005d76:	2300      	movs	r3, #0
 8005d78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	61fb      	str	r3, [r7, #28]
 8005d7e:	e175      	b.n	800606c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8005d80:	2201      	movs	r2, #1
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	fa02 f303 	lsl.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005d8a:	683b      	ldr	r3, [r7, #0]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	697a      	ldr	r2, [r7, #20]
 8005d90:	4013      	ands	r3, r2
 8005d92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8005d94:	693a      	ldr	r2, [r7, #16]
 8005d96:	697b      	ldr	r3, [r7, #20]
 8005d98:	429a      	cmp	r2, r3
 8005d9a:	f040 8164 	bne.w	8006066 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685b      	ldr	r3, [r3, #4]
 8005da2:	2b01      	cmp	r3, #1
 8005da4:	d00b      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	685b      	ldr	r3, [r3, #4]
 8005daa:	2b02      	cmp	r3, #2
 8005dac:	d007      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005db2:	2b11      	cmp	r3, #17
 8005db4:	d003      	beq.n	8005dbe <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005db6:	683b      	ldr	r3, [r7, #0]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	2b12      	cmp	r3, #18
 8005dbc:	d130      	bne.n	8005e20 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	689b      	ldr	r3, [r3, #8]
 8005dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005dc4:	69fb      	ldr	r3, [r7, #28]
 8005dc6:	005b      	lsls	r3, r3, #1
 8005dc8:	2203      	movs	r2, #3
 8005dca:	fa02 f303 	lsl.w	r3, r2, r3
 8005dce:	43db      	mvns	r3, r3
 8005dd0:	69ba      	ldr	r2, [r7, #24]
 8005dd2:	4013      	ands	r3, r2
 8005dd4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	68da      	ldr	r2, [r3, #12]
 8005dda:	69fb      	ldr	r3, [r7, #28]
 8005ddc:	005b      	lsls	r3, r3, #1
 8005dde:	fa02 f303 	lsl.w	r3, r2, r3
 8005de2:	69ba      	ldr	r2, [r7, #24]
 8005de4:	4313      	orrs	r3, r2
 8005de6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	69ba      	ldr	r2, [r7, #24]
 8005dec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	685b      	ldr	r3, [r3, #4]
 8005df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005df4:	2201      	movs	r2, #1
 8005df6:	69fb      	ldr	r3, [r7, #28]
 8005df8:	fa02 f303 	lsl.w	r3, r2, r3
 8005dfc:	43db      	mvns	r3, r3
 8005dfe:	69ba      	ldr	r2, [r7, #24]
 8005e00:	4013      	ands	r3, r2
 8005e02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	685b      	ldr	r3, [r3, #4]
 8005e08:	091b      	lsrs	r3, r3, #4
 8005e0a:	f003 0201 	and.w	r2, r3, #1
 8005e0e:	69fb      	ldr	r3, [r7, #28]
 8005e10:	fa02 f303 	lsl.w	r3, r2, r3
 8005e14:	69ba      	ldr	r2, [r7, #24]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	69ba      	ldr	r2, [r7, #24]
 8005e1e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68db      	ldr	r3, [r3, #12]
 8005e24:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8005e26:	69fb      	ldr	r3, [r7, #28]
 8005e28:	005b      	lsls	r3, r3, #1
 8005e2a:	2203      	movs	r2, #3
 8005e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8005e30:	43db      	mvns	r3, r3
 8005e32:	69ba      	ldr	r2, [r7, #24]
 8005e34:	4013      	ands	r3, r2
 8005e36:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	005b      	lsls	r3, r3, #1
 8005e40:	fa02 f303 	lsl.w	r3, r2, r3
 8005e44:	69ba      	ldr	r2, [r7, #24]
 8005e46:	4313      	orrs	r3, r2
 8005e48:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	69ba      	ldr	r2, [r7, #24]
 8005e4e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	2b02      	cmp	r3, #2
 8005e56:	d003      	beq.n	8005e60 <HAL_GPIO_Init+0x100>
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	685b      	ldr	r3, [r3, #4]
 8005e5c:	2b12      	cmp	r3, #18
 8005e5e:	d123      	bne.n	8005ea8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8005e60:	69fb      	ldr	r3, [r7, #28]
 8005e62:	08da      	lsrs	r2, r3, #3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	3208      	adds	r2, #8
 8005e68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8005e6e:	69fb      	ldr	r3, [r7, #28]
 8005e70:	f003 0307 	and.w	r3, r3, #7
 8005e74:	009b      	lsls	r3, r3, #2
 8005e76:	220f      	movs	r2, #15
 8005e78:	fa02 f303 	lsl.w	r3, r2, r3
 8005e7c:	43db      	mvns	r3, r3
 8005e7e:	69ba      	ldr	r2, [r7, #24]
 8005e80:	4013      	ands	r3, r2
 8005e82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	691a      	ldr	r2, [r3, #16]
 8005e88:	69fb      	ldr	r3, [r7, #28]
 8005e8a:	f003 0307 	and.w	r3, r3, #7
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	fa02 f303 	lsl.w	r3, r2, r3
 8005e94:	69ba      	ldr	r2, [r7, #24]
 8005e96:	4313      	orrs	r3, r2
 8005e98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8005e9a:	69fb      	ldr	r3, [r7, #28]
 8005e9c:	08da      	lsrs	r2, r3, #3
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	3208      	adds	r2, #8
 8005ea2:	69b9      	ldr	r1, [r7, #24]
 8005ea4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8005eae:	69fb      	ldr	r3, [r7, #28]
 8005eb0:	005b      	lsls	r3, r3, #1
 8005eb2:	2203      	movs	r2, #3
 8005eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8005eb8:	43db      	mvns	r3, r3
 8005eba:	69ba      	ldr	r2, [r7, #24]
 8005ebc:	4013      	ands	r3, r2
 8005ebe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	685b      	ldr	r3, [r3, #4]
 8005ec4:	f003 0203 	and.w	r2, r3, #3
 8005ec8:	69fb      	ldr	r3, [r7, #28]
 8005eca:	005b      	lsls	r3, r3, #1
 8005ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8005ed0:	69ba      	ldr	r2, [r7, #24]
 8005ed2:	4313      	orrs	r3, r2
 8005ed4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	69ba      	ldr	r2, [r7, #24]
 8005eda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	685b      	ldr	r3, [r3, #4]
 8005ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 80be 	beq.w	8006066 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005eea:	4b66      	ldr	r3, [pc, #408]	; (8006084 <HAL_GPIO_Init+0x324>)
 8005eec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005eee:	4a65      	ldr	r2, [pc, #404]	; (8006084 <HAL_GPIO_Init+0x324>)
 8005ef0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005ef4:	6453      	str	r3, [r2, #68]	; 0x44
 8005ef6:	4b63      	ldr	r3, [pc, #396]	; (8006084 <HAL_GPIO_Init+0x324>)
 8005ef8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005efa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005efe:	60fb      	str	r3, [r7, #12]
 8005f00:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8005f02:	4a61      	ldr	r2, [pc, #388]	; (8006088 <HAL_GPIO_Init+0x328>)
 8005f04:	69fb      	ldr	r3, [r7, #28]
 8005f06:	089b      	lsrs	r3, r3, #2
 8005f08:	3302      	adds	r3, #2
 8005f0a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005f0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8005f10:	69fb      	ldr	r3, [r7, #28]
 8005f12:	f003 0303 	and.w	r3, r3, #3
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	220f      	movs	r2, #15
 8005f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f1e:	43db      	mvns	r3, r3
 8005f20:	69ba      	ldr	r2, [r7, #24]
 8005f22:	4013      	ands	r3, r2
 8005f24:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4a58      	ldr	r2, [pc, #352]	; (800608c <HAL_GPIO_Init+0x32c>)
 8005f2a:	4293      	cmp	r3, r2
 8005f2c:	d037      	beq.n	8005f9e <HAL_GPIO_Init+0x23e>
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	4a57      	ldr	r2, [pc, #348]	; (8006090 <HAL_GPIO_Init+0x330>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d031      	beq.n	8005f9a <HAL_GPIO_Init+0x23a>
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	4a56      	ldr	r2, [pc, #344]	; (8006094 <HAL_GPIO_Init+0x334>)
 8005f3a:	4293      	cmp	r3, r2
 8005f3c:	d02b      	beq.n	8005f96 <HAL_GPIO_Init+0x236>
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	4a55      	ldr	r2, [pc, #340]	; (8006098 <HAL_GPIO_Init+0x338>)
 8005f42:	4293      	cmp	r3, r2
 8005f44:	d025      	beq.n	8005f92 <HAL_GPIO_Init+0x232>
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	4a54      	ldr	r2, [pc, #336]	; (800609c <HAL_GPIO_Init+0x33c>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d01f      	beq.n	8005f8e <HAL_GPIO_Init+0x22e>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	4a53      	ldr	r2, [pc, #332]	; (80060a0 <HAL_GPIO_Init+0x340>)
 8005f52:	4293      	cmp	r3, r2
 8005f54:	d019      	beq.n	8005f8a <HAL_GPIO_Init+0x22a>
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	4a52      	ldr	r2, [pc, #328]	; (80060a4 <HAL_GPIO_Init+0x344>)
 8005f5a:	4293      	cmp	r3, r2
 8005f5c:	d013      	beq.n	8005f86 <HAL_GPIO_Init+0x226>
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	4a51      	ldr	r2, [pc, #324]	; (80060a8 <HAL_GPIO_Init+0x348>)
 8005f62:	4293      	cmp	r3, r2
 8005f64:	d00d      	beq.n	8005f82 <HAL_GPIO_Init+0x222>
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	4a50      	ldr	r2, [pc, #320]	; (80060ac <HAL_GPIO_Init+0x34c>)
 8005f6a:	4293      	cmp	r3, r2
 8005f6c:	d007      	beq.n	8005f7e <HAL_GPIO_Init+0x21e>
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	4a4f      	ldr	r2, [pc, #316]	; (80060b0 <HAL_GPIO_Init+0x350>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d101      	bne.n	8005f7a <HAL_GPIO_Init+0x21a>
 8005f76:	2309      	movs	r3, #9
 8005f78:	e012      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f7a:	230a      	movs	r3, #10
 8005f7c:	e010      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f7e:	2308      	movs	r3, #8
 8005f80:	e00e      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f82:	2307      	movs	r3, #7
 8005f84:	e00c      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f86:	2306      	movs	r3, #6
 8005f88:	e00a      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f8a:	2305      	movs	r3, #5
 8005f8c:	e008      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f8e:	2304      	movs	r3, #4
 8005f90:	e006      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f92:	2303      	movs	r3, #3
 8005f94:	e004      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f96:	2302      	movs	r3, #2
 8005f98:	e002      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	e000      	b.n	8005fa0 <HAL_GPIO_Init+0x240>
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	69fa      	ldr	r2, [r7, #28]
 8005fa2:	f002 0203 	and.w	r2, r2, #3
 8005fa6:	0092      	lsls	r2, r2, #2
 8005fa8:	4093      	lsls	r3, r2
 8005faa:	69ba      	ldr	r2, [r7, #24]
 8005fac:	4313      	orrs	r3, r2
 8005fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8005fb0:	4935      	ldr	r1, [pc, #212]	; (8006088 <HAL_GPIO_Init+0x328>)
 8005fb2:	69fb      	ldr	r3, [r7, #28]
 8005fb4:	089b      	lsrs	r3, r3, #2
 8005fb6:	3302      	adds	r3, #2
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005fbe:	4b3d      	ldr	r3, [pc, #244]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	43db      	mvns	r3, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4013      	ands	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d003      	beq.n	8005fe2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8005fda:	69ba      	ldr	r2, [r7, #24]
 8005fdc:	693b      	ldr	r3, [r7, #16]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005fe2:	4a34      	ldr	r2, [pc, #208]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8005fe4:	69bb      	ldr	r3, [r7, #24]
 8005fe6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005fe8:	4b32      	ldr	r3, [pc, #200]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8005fea:	685b      	ldr	r3, [r3, #4]
 8005fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005fee:	693b      	ldr	r3, [r7, #16]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	69ba      	ldr	r2, [r7, #24]
 8005ff4:	4013      	ands	r3, r2
 8005ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006004:	69ba      	ldr	r2, [r7, #24]
 8006006:	693b      	ldr	r3, [r7, #16]
 8006008:	4313      	orrs	r3, r2
 800600a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800600c:	4a29      	ldr	r2, [pc, #164]	; (80060b4 <HAL_GPIO_Init+0x354>)
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006012:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8006014:	689b      	ldr	r3, [r3, #8]
 8006016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006018:	693b      	ldr	r3, [r7, #16]
 800601a:	43db      	mvns	r3, r3
 800601c:	69ba      	ldr	r2, [r7, #24]
 800601e:	4013      	ands	r3, r2
 8006020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	685b      	ldr	r3, [r3, #4]
 8006026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800602a:	2b00      	cmp	r3, #0
 800602c:	d003      	beq.n	8006036 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800602e:	69ba      	ldr	r2, [r7, #24]
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	4313      	orrs	r3, r2
 8006034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006036:	4a1f      	ldr	r2, [pc, #124]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8006038:	69bb      	ldr	r3, [r7, #24]
 800603a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800603c:	4b1d      	ldr	r3, [pc, #116]	; (80060b4 <HAL_GPIO_Init+0x354>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006042:	693b      	ldr	r3, [r7, #16]
 8006044:	43db      	mvns	r3, r3
 8006046:	69ba      	ldr	r2, [r7, #24]
 8006048:	4013      	ands	r3, r2
 800604a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006054:	2b00      	cmp	r3, #0
 8006056:	d003      	beq.n	8006060 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006058:	69ba      	ldr	r2, [r7, #24]
 800605a:	693b      	ldr	r3, [r7, #16]
 800605c:	4313      	orrs	r3, r2
 800605e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006060:	4a14      	ldr	r2, [pc, #80]	; (80060b4 <HAL_GPIO_Init+0x354>)
 8006062:	69bb      	ldr	r3, [r7, #24]
 8006064:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006066:	69fb      	ldr	r3, [r7, #28]
 8006068:	3301      	adds	r3, #1
 800606a:	61fb      	str	r3, [r7, #28]
 800606c:	69fb      	ldr	r3, [r7, #28]
 800606e:	2b0f      	cmp	r3, #15
 8006070:	f67f ae86 	bls.w	8005d80 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006074:	bf00      	nop
 8006076:	bf00      	nop
 8006078:	3724      	adds	r7, #36	; 0x24
 800607a:	46bd      	mov	sp, r7
 800607c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006080:	4770      	bx	lr
 8006082:	bf00      	nop
 8006084:	40023800 	.word	0x40023800
 8006088:	40013800 	.word	0x40013800
 800608c:	40020000 	.word	0x40020000
 8006090:	40020400 	.word	0x40020400
 8006094:	40020800 	.word	0x40020800
 8006098:	40020c00 	.word	0x40020c00
 800609c:	40021000 	.word	0x40021000
 80060a0:	40021400 	.word	0x40021400
 80060a4:	40021800 	.word	0x40021800
 80060a8:	40021c00 	.word	0x40021c00
 80060ac:	40022000 	.word	0x40022000
 80060b0:	40022400 	.word	0x40022400
 80060b4:	40013c00 	.word	0x40013c00

080060b8 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b087      	sub	sp, #28
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00;
 80060c2:	2300      	movs	r3, #0
 80060c4:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00;
 80060c6:	2300      	movs	r3, #0
 80060c8:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00;
 80060ca:	2300      	movs	r3, #0
 80060cc:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80060ce:	2300      	movs	r3, #0
 80060d0:	617b      	str	r3, [r7, #20]
 80060d2:	e0d9      	b.n	8006288 <HAL_GPIO_DeInit+0x1d0>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060d4:	2201      	movs	r2, #1
 80060d6:	697b      	ldr	r3, [r7, #20]
 80060d8:	fa02 f303 	lsl.w	r3, r2, r3
 80060dc:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80060de:	683a      	ldr	r2, [r7, #0]
 80060e0:	693b      	ldr	r3, [r7, #16]
 80060e2:	4013      	ands	r3, r2
 80060e4:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	693b      	ldr	r3, [r7, #16]
 80060ea:	429a      	cmp	r2, r3
 80060ec:	f040 80c9 	bne.w	8006282 <HAL_GPIO_DeInit+0x1ca>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2];
 80060f0:	4a6b      	ldr	r2, [pc, #428]	; (80062a0 <HAL_GPIO_DeInit+0x1e8>)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	089b      	lsrs	r3, r3, #2
 80060f6:	3302      	adds	r3, #2
 80060f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80060fc:	60bb      	str	r3, [r7, #8]
      tmp &= (((uint32_t)0x0F) << (4 * (position & 0x03)));
 80060fe:	697b      	ldr	r3, [r7, #20]
 8006100:	f003 0303 	and.w	r3, r3, #3
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	220f      	movs	r2, #15
 8006108:	fa02 f303 	lsl.w	r3, r2, r3
 800610c:	68ba      	ldr	r2, [r7, #8]
 800610e:	4013      	ands	r3, r2
 8006110:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03))))
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	4a63      	ldr	r2, [pc, #396]	; (80062a4 <HAL_GPIO_DeInit+0x1ec>)
 8006116:	4293      	cmp	r3, r2
 8006118:	d037      	beq.n	800618a <HAL_GPIO_DeInit+0xd2>
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	4a62      	ldr	r2, [pc, #392]	; (80062a8 <HAL_GPIO_DeInit+0x1f0>)
 800611e:	4293      	cmp	r3, r2
 8006120:	d031      	beq.n	8006186 <HAL_GPIO_DeInit+0xce>
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	4a61      	ldr	r2, [pc, #388]	; (80062ac <HAL_GPIO_DeInit+0x1f4>)
 8006126:	4293      	cmp	r3, r2
 8006128:	d02b      	beq.n	8006182 <HAL_GPIO_DeInit+0xca>
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	4a60      	ldr	r2, [pc, #384]	; (80062b0 <HAL_GPIO_DeInit+0x1f8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d025      	beq.n	800617e <HAL_GPIO_DeInit+0xc6>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	4a5f      	ldr	r2, [pc, #380]	; (80062b4 <HAL_GPIO_DeInit+0x1fc>)
 8006136:	4293      	cmp	r3, r2
 8006138:	d01f      	beq.n	800617a <HAL_GPIO_DeInit+0xc2>
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4a5e      	ldr	r2, [pc, #376]	; (80062b8 <HAL_GPIO_DeInit+0x200>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d019      	beq.n	8006176 <HAL_GPIO_DeInit+0xbe>
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	4a5d      	ldr	r2, [pc, #372]	; (80062bc <HAL_GPIO_DeInit+0x204>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d013      	beq.n	8006172 <HAL_GPIO_DeInit+0xba>
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a5c      	ldr	r2, [pc, #368]	; (80062c0 <HAL_GPIO_DeInit+0x208>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d00d      	beq.n	800616e <HAL_GPIO_DeInit+0xb6>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	4a5b      	ldr	r2, [pc, #364]	; (80062c4 <HAL_GPIO_DeInit+0x20c>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d007      	beq.n	800616a <HAL_GPIO_DeInit+0xb2>
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	4a5a      	ldr	r2, [pc, #360]	; (80062c8 <HAL_GPIO_DeInit+0x210>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d101      	bne.n	8006166 <HAL_GPIO_DeInit+0xae>
 8006162:	2309      	movs	r3, #9
 8006164:	e012      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 8006166:	230a      	movs	r3, #10
 8006168:	e010      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 800616a:	2308      	movs	r3, #8
 800616c:	e00e      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 800616e:	2307      	movs	r3, #7
 8006170:	e00c      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 8006172:	2306      	movs	r3, #6
 8006174:	e00a      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 8006176:	2305      	movs	r3, #5
 8006178:	e008      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 800617a:	2304      	movs	r3, #4
 800617c:	e006      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 800617e:	2303      	movs	r3, #3
 8006180:	e004      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 8006182:	2302      	movs	r3, #2
 8006184:	e002      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_GPIO_DeInit+0xd4>
 800618a:	2300      	movs	r3, #0
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	f002 0203 	and.w	r2, r2, #3
 8006192:	0092      	lsls	r2, r2, #2
 8006194:	4093      	lsls	r3, r2
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	429a      	cmp	r2, r3
 800619a:	d132      	bne.n	8006202 <HAL_GPIO_DeInit+0x14a>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800619c:	4b4b      	ldr	r3, [pc, #300]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 800619e:	681a      	ldr	r2, [r3, #0]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	43db      	mvns	r3, r3
 80061a4:	4949      	ldr	r1, [pc, #292]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061a6:	4013      	ands	r3, r2
 80061a8:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80061aa:	4b48      	ldr	r3, [pc, #288]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061ac:	685a      	ldr	r2, [r3, #4]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	43db      	mvns	r3, r3
 80061b2:	4946      	ldr	r1, [pc, #280]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061b4:	4013      	ands	r3, r2
 80061b6:	604b      	str	r3, [r1, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80061b8:	4b44      	ldr	r3, [pc, #272]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061ba:	689a      	ldr	r2, [r3, #8]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	43db      	mvns	r3, r3
 80061c0:	4942      	ldr	r1, [pc, #264]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061c2:	4013      	ands	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80061c6:	4b41      	ldr	r3, [pc, #260]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061c8:	68da      	ldr	r2, [r3, #12]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	43db      	mvns	r3, r3
 80061ce:	493f      	ldr	r1, [pc, #252]	; (80062cc <HAL_GPIO_DeInit+0x214>)
 80061d0:	4013      	ands	r3, r2
 80061d2:	60cb      	str	r3, [r1, #12]

        /* Configure the External Interrupt or event for the current IO */
        tmp = ((uint32_t)0x0F) << (4 * (position & 0x03));
 80061d4:	697b      	ldr	r3, [r7, #20]
 80061d6:	f003 0303 	and.w	r3, r3, #3
 80061da:	009b      	lsls	r3, r3, #2
 80061dc:	220f      	movs	r2, #15
 80061de:	fa02 f303 	lsl.w	r3, r2, r3
 80061e2:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2] &= ~tmp;
 80061e4:	4a2e      	ldr	r2, [pc, #184]	; (80062a0 <HAL_GPIO_DeInit+0x1e8>)
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	089b      	lsrs	r3, r3, #2
 80061ea:	3302      	adds	r3, #2
 80061ec:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	43da      	mvns	r2, r3
 80061f4:	482a      	ldr	r0, [pc, #168]	; (80062a0 <HAL_GPIO_DeInit+0x1e8>)
 80061f6:	697b      	ldr	r3, [r7, #20]
 80061f8:	089b      	lsrs	r3, r3, #2
 80061fa:	400a      	ands	r2, r1
 80061fc:	3302      	adds	r3, #2
 80061fe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }
      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681a      	ldr	r2, [r3, #0]
 8006206:	697b      	ldr	r3, [r7, #20]
 8006208:	005b      	lsls	r3, r3, #1
 800620a:	2103      	movs	r1, #3
 800620c:	fa01 f303 	lsl.w	r3, r1, r3
 8006210:	43db      	mvns	r3, r3
 8006212:	401a      	ands	r2, r3
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3] &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006218:	697b      	ldr	r3, [r7, #20]
 800621a:	08da      	lsrs	r2, r3, #3
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	3208      	adds	r2, #8
 8006220:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006224:	697b      	ldr	r3, [r7, #20]
 8006226:	f003 0307 	and.w	r3, r3, #7
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	220f      	movs	r2, #15
 800622e:	fa02 f303 	lsl.w	r3, r2, r3
 8006232:	43db      	mvns	r3, r3
 8006234:	697a      	ldr	r2, [r7, #20]
 8006236:	08d2      	lsrs	r2, r2, #3
 8006238:	4019      	ands	r1, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	3208      	adds	r2, #8
 800623e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	68da      	ldr	r2, [r3, #12]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	005b      	lsls	r3, r3, #1
 800624a:	2103      	movs	r1, #3
 800624c:	fa01 f303 	lsl.w	r3, r1, r3
 8006250:	43db      	mvns	r3, r3
 8006252:	401a      	ands	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	685a      	ldr	r2, [r3, #4]
 800625c:	2101      	movs	r1, #1
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	fa01 f303 	lsl.w	r3, r1, r3
 8006264:	43db      	mvns	r3, r3
 8006266:	401a      	ands	r2, r3
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	697b      	ldr	r3, [r7, #20]
 8006272:	005b      	lsls	r3, r3, #1
 8006274:	2103      	movs	r1, #3
 8006276:	fa01 f303 	lsl.w	r3, r1, r3
 800627a:	43db      	mvns	r3, r3
 800627c:	401a      	ands	r2, r3
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	609a      	str	r2, [r3, #8]
  for(position = 0; position < GPIO_NUMBER; position++)
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	3301      	adds	r3, #1
 8006286:	617b      	str	r3, [r7, #20]
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	2b0f      	cmp	r3, #15
 800628c:	f67f af22 	bls.w	80060d4 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8006290:	bf00      	nop
 8006292:	bf00      	nop
 8006294:	371c      	adds	r7, #28
 8006296:	46bd      	mov	sp, r7
 8006298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629c:	4770      	bx	lr
 800629e:	bf00      	nop
 80062a0:	40013800 	.word	0x40013800
 80062a4:	40020000 	.word	0x40020000
 80062a8:	40020400 	.word	0x40020400
 80062ac:	40020800 	.word	0x40020800
 80062b0:	40020c00 	.word	0x40020c00
 80062b4:	40021000 	.word	0x40021000
 80062b8:	40021400 	.word	0x40021400
 80062bc:	40021800 	.word	0x40021800
 80062c0:	40021c00 	.word	0x40021c00
 80062c4:	40022000 	.word	0x40022000
 80062c8:	40022400 	.word	0x40022400
 80062cc:	40013c00 	.word	0x40013c00

080062d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b085      	sub	sp, #20
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	691a      	ldr	r2, [r3, #16]
 80062e0:	887b      	ldrh	r3, [r7, #2]
 80062e2:	4013      	ands	r3, r2
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d002      	beq.n	80062ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80062e8:	2301      	movs	r3, #1
 80062ea:	73fb      	strb	r3, [r7, #15]
 80062ec:	e001      	b.n	80062f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80062ee:	2300      	movs	r3, #0
 80062f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80062f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3714      	adds	r7, #20
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
 8006308:	460b      	mov	r3, r1
 800630a:	807b      	strh	r3, [r7, #2]
 800630c:	4613      	mov	r3, r2
 800630e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006310:	787b      	ldrb	r3, [r7, #1]
 8006312:	2b00      	cmp	r3, #0
 8006314:	d003      	beq.n	800631e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006316:	887a      	ldrh	r2, [r7, #2]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800631c:	e003      	b.n	8006326 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800631e:	887b      	ldrh	r3, [r7, #2]
 8006320:	041a      	lsls	r2, r3, #16
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	619a      	str	r2, [r3, #24]
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
	...

08006334 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e07f      	b.n	8006446 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fd fdbc 	bl	8003ed8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2224      	movs	r2, #36	; 0x24
 8006364:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	681a      	ldr	r2, [r3, #0]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	685a      	ldr	r2, [r3, #4]
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006384:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	689a      	ldr	r2, [r3, #8]
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006394:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	68db      	ldr	r3, [r3, #12]
 800639a:	2b01      	cmp	r3, #1
 800639c:	d107      	bne.n	80063ae <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	689a      	ldr	r2, [r3, #8]
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063aa:	609a      	str	r2, [r3, #8]
 80063ac:	e006      	b.n	80063bc <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	689a      	ldr	r2, [r3, #8]
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063ba:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d104      	bne.n	80063ce <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063cc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	6859      	ldr	r1, [r3, #4]
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681a      	ldr	r2, [r3, #0]
 80063d8:	4b1d      	ldr	r3, [pc, #116]	; (8006450 <HAL_I2C_Init+0x11c>)
 80063da:	430b      	orrs	r3, r1
 80063dc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68da      	ldr	r2, [r3, #12]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ec:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	691a      	ldr	r2, [r3, #16]
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	695b      	ldr	r3, [r3, #20]
 80063f6:	ea42 0103 	orr.w	r1, r2, r3
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	021a      	lsls	r2, r3, #8
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	430a      	orrs	r2, r1
 8006406:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	69d9      	ldr	r1, [r3, #28]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	6a1a      	ldr	r2, [r3, #32]
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	430a      	orrs	r2, r1
 8006416:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	681a      	ldr	r2, [r3, #0]
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	f042 0201 	orr.w	r2, r2, #1
 8006426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	2220      	movs	r2, #32
 8006432:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	2200      	movs	r2, #0
 800643a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006444:	2300      	movs	r3, #0
}
 8006446:	4618      	mov	r0, r3
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	02008000 	.word	0x02008000

08006454 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d101      	bne.n	8006466 <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 8006462:	2301      	movs	r3, #1
 8006464:	e021      	b.n	80064aa <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2224      	movs	r2, #36	; 0x24
 800646a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	681a      	ldr	r2, [r3, #0]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	f022 0201 	bic.w	r2, r2, #1
 800647c:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f7fd fda2 	bl	8003fc8 <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2200      	movs	r2, #0
 8006488:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	2200      	movs	r2, #0
 800648e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2200      	movs	r2, #0
 800649c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	2200      	movs	r2, #0
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80064a8:	2300      	movs	r3, #0
}
 80064aa:	4618      	mov	r0, r3
 80064ac:	3708      	adds	r7, #8
 80064ae:	46bd      	mov	sp, r7
 80064b0:	bd80      	pop	{r7, pc}
	...

080064b4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b088      	sub	sp, #32
 80064b8:	af02      	add	r7, sp, #8
 80064ba:	60f8      	str	r0, [r7, #12]
 80064bc:	4608      	mov	r0, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	461a      	mov	r2, r3
 80064c2:	4603      	mov	r3, r0
 80064c4:	817b      	strh	r3, [r7, #10]
 80064c6:	460b      	mov	r3, r1
 80064c8:	813b      	strh	r3, [r7, #8]
 80064ca:	4613      	mov	r3, r2
 80064cc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b20      	cmp	r3, #32
 80064d8:	f040 80f9 	bne.w	80066ce <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80064dc:	6a3b      	ldr	r3, [r7, #32]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d002      	beq.n	80064e8 <HAL_I2C_Mem_Write+0x34>
 80064e2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d105      	bne.n	80064f4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	f44f 7200 	mov.w	r2, #512	; 0x200
 80064ee:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80064f0:	2301      	movs	r3, #1
 80064f2:	e0ed      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d101      	bne.n	8006502 <HAL_I2C_Mem_Write+0x4e>
 80064fe:	2302      	movs	r3, #2
 8006500:	e0e6      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	2201      	movs	r2, #1
 8006506:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800650a:	f7fe fa03 	bl	8004914 <HAL_GetTick>
 800650e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	9300      	str	r3, [sp, #0]
 8006514:	2319      	movs	r3, #25
 8006516:	2201      	movs	r2, #1
 8006518:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800651c:	68f8      	ldr	r0, [r7, #12]
 800651e:	f000 fad1 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 8006522:	4603      	mov	r3, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	d001      	beq.n	800652c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8006528:	2301      	movs	r3, #1
 800652a:	e0d1      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2221      	movs	r2, #33	; 0x21
 8006530:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2240      	movs	r2, #64	; 0x40
 8006538:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	2200      	movs	r2, #0
 8006540:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	6a3a      	ldr	r2, [r7, #32]
 8006546:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800654c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	2200      	movs	r2, #0
 8006552:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8006554:	88f8      	ldrh	r0, [r7, #6]
 8006556:	893a      	ldrh	r2, [r7, #8]
 8006558:	8979      	ldrh	r1, [r7, #10]
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	9301      	str	r3, [sp, #4]
 800655e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4603      	mov	r3, r0
 8006564:	68f8      	ldr	r0, [r7, #12]
 8006566:	f000 f9e1 	bl	800692c <I2C_RequestMemoryWrite>
 800656a:	4603      	mov	r3, r0
 800656c:	2b00      	cmp	r3, #0
 800656e:	d005      	beq.n	800657c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8006578:	2301      	movs	r3, #1
 800657a:	e0a9      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006580:	b29b      	uxth	r3, r3
 8006582:	2bff      	cmp	r3, #255	; 0xff
 8006584:	d90e      	bls.n	80065a4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	22ff      	movs	r2, #255	; 0xff
 800658a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006590:	b2da      	uxtb	r2, r3
 8006592:	8979      	ldrh	r1, [r7, #10]
 8006594:	2300      	movs	r3, #0
 8006596:	9300      	str	r3, [sp, #0]
 8006598:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 fbb3 	bl	8006d08 <I2C_TransferConfig>
 80065a2:	e00f      	b.n	80065c4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065a8:	b29a      	uxth	r2, r3
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065b2:	b2da      	uxtb	r2, r3
 80065b4:	8979      	ldrh	r1, [r7, #10]
 80065b6:	2300      	movs	r3, #0
 80065b8:	9300      	str	r3, [sp, #0]
 80065ba:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065be:	68f8      	ldr	r0, [r7, #12]
 80065c0:	f000 fba2 	bl	8006d08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065c4:	697a      	ldr	r2, [r7, #20]
 80065c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80065c8:	68f8      	ldr	r0, [r7, #12]
 80065ca:	f000 fabb 	bl	8006b44 <I2C_WaitOnTXISFlagUntilTimeout>
 80065ce:	4603      	mov	r3, r0
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d001      	beq.n	80065d8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80065d4:	2301      	movs	r3, #1
 80065d6:	e07b      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065dc:	781a      	ldrb	r2, [r3, #0]
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e8:	1c5a      	adds	r2, r3, #1
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	3b01      	subs	r3, #1
 80065f6:	b29a      	uxth	r2, r3
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006600:	3b01      	subs	r3, #1
 8006602:	b29a      	uxth	r2, r3
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660c:	b29b      	uxth	r3, r3
 800660e:	2b00      	cmp	r3, #0
 8006610:	d034      	beq.n	800667c <HAL_I2C_Mem_Write+0x1c8>
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006616:	2b00      	cmp	r3, #0
 8006618:	d130      	bne.n	800667c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	9300      	str	r3, [sp, #0]
 800661e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006620:	2200      	movs	r2, #0
 8006622:	2180      	movs	r1, #128	; 0x80
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f000 fa4d 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 800662a:	4603      	mov	r3, r0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d001      	beq.n	8006634 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
 8006632:	e04d      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006638:	b29b      	uxth	r3, r3
 800663a:	2bff      	cmp	r3, #255	; 0xff
 800663c:	d90e      	bls.n	800665c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	22ff      	movs	r2, #255	; 0xff
 8006642:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006648:	b2da      	uxtb	r2, r3
 800664a:	8979      	ldrh	r1, [r7, #10]
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006654:	68f8      	ldr	r0, [r7, #12]
 8006656:	f000 fb57 	bl	8006d08 <I2C_TransferConfig>
 800665a:	e00f      	b.n	800667c <HAL_I2C_Mem_Write+0x1c8>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006660:	b29a      	uxth	r2, r3
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800666a:	b2da      	uxtb	r2, r3
 800666c:	8979      	ldrh	r1, [r7, #10]
 800666e:	2300      	movs	r3, #0
 8006670:	9300      	str	r3, [sp, #0]
 8006672:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 fb46 	bl	8006d08 <I2C_TransferConfig>
        }
      }

    }
    while (hi2c->XferCount > 0U);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d19e      	bne.n	80065c4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800668a:	68f8      	ldr	r0, [r7, #12]
 800668c:	f000 fa9a 	bl	8006bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006690:	4603      	mov	r3, r0
 8006692:	2b00      	cmp	r3, #0
 8006694:	d001      	beq.n	800669a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8006696:	2301      	movs	r3, #1
 8006698:	e01a      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	2220      	movs	r2, #32
 80066a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	6859      	ldr	r1, [r3, #4]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	4b0a      	ldr	r3, [pc, #40]	; (80066d8 <HAL_I2C_Mem_Write+0x224>)
 80066ae:	400b      	ands	r3, r1
 80066b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2220      	movs	r2, #32
 80066b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	2200      	movs	r2, #0
 80066be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	2200      	movs	r2, #0
 80066c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066ca:	2300      	movs	r3, #0
 80066cc:	e000      	b.n	80066d0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80066ce:	2302      	movs	r3, #2
  }
}
 80066d0:	4618      	mov	r0, r3
 80066d2:	3718      	adds	r7, #24
 80066d4:	46bd      	mov	sp, r7
 80066d6:	bd80      	pop	{r7, pc}
 80066d8:	fe00e800 	.word	0xfe00e800

080066dc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b088      	sub	sp, #32
 80066e0:	af02      	add	r7, sp, #8
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	4608      	mov	r0, r1
 80066e6:	4611      	mov	r1, r2
 80066e8:	461a      	mov	r2, r3
 80066ea:	4603      	mov	r3, r0
 80066ec:	817b      	strh	r3, [r7, #10]
 80066ee:	460b      	mov	r3, r1
 80066f0:	813b      	strh	r3, [r7, #8]
 80066f2:	4613      	mov	r3, r2
 80066f4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066fc:	b2db      	uxtb	r3, r3
 80066fe:	2b20      	cmp	r3, #32
 8006700:	f040 80fd 	bne.w	80068fe <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8006704:	6a3b      	ldr	r3, [r7, #32]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d002      	beq.n	8006710 <HAL_I2C_Mem_Read+0x34>
 800670a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800670c:	2b00      	cmp	r3, #0
 800670e:	d105      	bne.n	800671c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006716:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e0f1      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_I2C_Mem_Read+0x4e>
 8006726:	2302      	movs	r3, #2
 8006728:	e0ea      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006732:	f7fe f8ef 	bl	8004914 <HAL_GetTick>
 8006736:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8006738:	697b      	ldr	r3, [r7, #20]
 800673a:	9300      	str	r3, [sp, #0]
 800673c:	2319      	movs	r3, #25
 800673e:	2201      	movs	r2, #1
 8006740:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006744:	68f8      	ldr	r0, [r7, #12]
 8006746:	f000 f9bd 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 800674a:	4603      	mov	r3, r0
 800674c:	2b00      	cmp	r3, #0
 800674e:	d001      	beq.n	8006754 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8006750:	2301      	movs	r3, #1
 8006752:	e0d5      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8006754:	68fb      	ldr	r3, [r7, #12]
 8006756:	2222      	movs	r2, #34	; 0x22
 8006758:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	2240      	movs	r2, #64	; 0x40
 8006760:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2200      	movs	r2, #0
 8006768:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6a3a      	ldr	r2, [r7, #32]
 800676e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006774:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006776:	68fb      	ldr	r3, [r7, #12]
 8006778:	2200      	movs	r2, #0
 800677a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800677c:	88f8      	ldrh	r0, [r7, #6]
 800677e:	893a      	ldrh	r2, [r7, #8]
 8006780:	8979      	ldrh	r1, [r7, #10]
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	9301      	str	r3, [sp, #4]
 8006786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006788:	9300      	str	r3, [sp, #0]
 800678a:	4603      	mov	r3, r0
 800678c:	68f8      	ldr	r0, [r7, #12]
 800678e:	f000 f921 	bl	80069d4 <I2C_RequestMemoryRead>
 8006792:	4603      	mov	r3, r0
 8006794:	2b00      	cmp	r3, #0
 8006796:	d005      	beq.n	80067a4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e0ad      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067a8:	b29b      	uxth	r3, r3
 80067aa:	2bff      	cmp	r3, #255	; 0xff
 80067ac:	d90e      	bls.n	80067cc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	22ff      	movs	r2, #255	; 0xff
 80067b2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067b8:	b2da      	uxtb	r2, r3
 80067ba:	8979      	ldrh	r1, [r7, #10]
 80067bc:	4b52      	ldr	r3, [pc, #328]	; (8006908 <HAL_I2C_Mem_Read+0x22c>)
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067c4:	68f8      	ldr	r0, [r7, #12]
 80067c6:	f000 fa9f 	bl	8006d08 <I2C_TransferConfig>
 80067ca:	e00f      	b.n	80067ec <HAL_I2C_Mem_Read+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d0:	b29a      	uxth	r2, r3
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067da:	b2da      	uxtb	r2, r3
 80067dc:	8979      	ldrh	r1, [r7, #10]
 80067de:	4b4a      	ldr	r3, [pc, #296]	; (8006908 <HAL_I2C_Mem_Read+0x22c>)
 80067e0:	9300      	str	r3, [sp, #0]
 80067e2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067e6:	68f8      	ldr	r0, [r7, #12]
 80067e8:	f000 fa8e 	bl	8006d08 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	9300      	str	r3, [sp, #0]
 80067f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067f2:	2200      	movs	r2, #0
 80067f4:	2104      	movs	r1, #4
 80067f6:	68f8      	ldr	r0, [r7, #12]
 80067f8:	f000 f964 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 80067fc:	4603      	mov	r3, r0
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d001      	beq.n	8006806 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8006802:	2301      	movs	r3, #1
 8006804:	e07c      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006810:	b2d2      	uxtb	r2, r2
 8006812:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006818:	1c5a      	adds	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006822:	3b01      	subs	r3, #1
 8006824:	b29a      	uxth	r2, r3
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800682e:	b29b      	uxth	r3, r3
 8006830:	3b01      	subs	r3, #1
 8006832:	b29a      	uxth	r2, r3
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800683c:	b29b      	uxth	r3, r3
 800683e:	2b00      	cmp	r3, #0
 8006840:	d034      	beq.n	80068ac <HAL_I2C_Mem_Read+0x1d0>
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006846:	2b00      	cmp	r3, #0
 8006848:	d130      	bne.n	80068ac <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	9300      	str	r3, [sp, #0]
 800684e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006850:	2200      	movs	r2, #0
 8006852:	2180      	movs	r1, #128	; 0x80
 8006854:	68f8      	ldr	r0, [r7, #12]
 8006856:	f000 f935 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 800685a:	4603      	mov	r3, r0
 800685c:	2b00      	cmp	r3, #0
 800685e:	d001      	beq.n	8006864 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8006860:	2301      	movs	r3, #1
 8006862:	e04d      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006868:	b29b      	uxth	r3, r3
 800686a:	2bff      	cmp	r3, #255	; 0xff
 800686c:	d90e      	bls.n	800688c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	22ff      	movs	r2, #255	; 0xff
 8006872:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	b2da      	uxtb	r2, r3
 800687a:	8979      	ldrh	r1, [r7, #10]
 800687c:	2300      	movs	r3, #0
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006884:	68f8      	ldr	r0, [r7, #12]
 8006886:	f000 fa3f 	bl	8006d08 <I2C_TransferConfig>
 800688a:	e00f      	b.n	80068ac <HAL_I2C_Mem_Read+0x1d0>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006890:	b29a      	uxth	r2, r3
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800689a:	b2da      	uxtb	r2, r3
 800689c:	8979      	ldrh	r1, [r7, #10]
 800689e:	2300      	movs	r3, #0
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068a6:	68f8      	ldr	r0, [r7, #12]
 80068a8:	f000 fa2e 	bl	8006d08 <I2C_TransferConfig>
        }
      }
    }
    while (hi2c->XferCount > 0U);
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068b0:	b29b      	uxth	r3, r3
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d19a      	bne.n	80067ec <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80068ba:	68f8      	ldr	r0, [r7, #12]
 80068bc:	f000 f982 	bl	8006bc4 <I2C_WaitOnSTOPFlagUntilTimeout>
 80068c0:	4603      	mov	r3, r0
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d001      	beq.n	80068ca <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80068c6:	2301      	movs	r3, #1
 80068c8:	e01a      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2220      	movs	r2, #32
 80068d0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	6859      	ldr	r1, [r3, #4]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	4b0b      	ldr	r3, [pc, #44]	; (800690c <HAL_I2C_Mem_Read+0x230>)
 80068de:	400b      	ands	r3, r1
 80068e0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	2220      	movs	r2, #32
 80068e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2200      	movs	r2, #0
 80068f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80068fa:	2300      	movs	r3, #0
 80068fc:	e000      	b.n	8006900 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80068fe:	2302      	movs	r3, #2
  }
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	80002400 	.word	0x80002400
 800690c:	fe00e800 	.word	0xfe00e800

08006910 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800691e:	b2db      	uxtb	r3, r3
}
 8006920:	4618      	mov	r0, r3
 8006922:	370c      	adds	r7, #12
 8006924:	46bd      	mov	sp, r7
 8006926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692a:	4770      	bx	lr

0800692c <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800692c:	b580      	push	{r7, lr}
 800692e:	b086      	sub	sp, #24
 8006930:	af02      	add	r7, sp, #8
 8006932:	60f8      	str	r0, [r7, #12]
 8006934:	4608      	mov	r0, r1
 8006936:	4611      	mov	r1, r2
 8006938:	461a      	mov	r2, r3
 800693a:	4603      	mov	r3, r0
 800693c:	817b      	strh	r3, [r7, #10]
 800693e:	460b      	mov	r3, r1
 8006940:	813b      	strh	r3, [r7, #8]
 8006942:	4613      	mov	r3, r2
 8006944:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8006946:	88fb      	ldrh	r3, [r7, #6]
 8006948:	b2da      	uxtb	r2, r3
 800694a:	8979      	ldrh	r1, [r7, #10]
 800694c:	4b20      	ldr	r3, [pc, #128]	; (80069d0 <I2C_RequestMemoryWrite+0xa4>)
 800694e:	9300      	str	r3, [sp, #0]
 8006950:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006954:	68f8      	ldr	r0, [r7, #12]
 8006956:	f000 f9d7 	bl	8006d08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800695a:	69fa      	ldr	r2, [r7, #28]
 800695c:	69b9      	ldr	r1, [r7, #24]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f8f0 	bl	8006b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d001      	beq.n	800696e <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800696a:	2301      	movs	r3, #1
 800696c:	e02c      	b.n	80069c8 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800696e:	88fb      	ldrh	r3, [r7, #6]
 8006970:	2b01      	cmp	r3, #1
 8006972:	d105      	bne.n	8006980 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006974:	893b      	ldrh	r3, [r7, #8]
 8006976:	b2da      	uxtb	r2, r3
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	629a      	str	r2, [r3, #40]	; 0x28
 800697e:	e015      	b.n	80069ac <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006980:	893b      	ldrh	r3, [r7, #8]
 8006982:	0a1b      	lsrs	r3, r3, #8
 8006984:	b29b      	uxth	r3, r3
 8006986:	b2da      	uxtb	r2, r3
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800698e:	69fa      	ldr	r2, [r7, #28]
 8006990:	69b9      	ldr	r1, [r7, #24]
 8006992:	68f8      	ldr	r0, [r7, #12]
 8006994:	f000 f8d6 	bl	8006b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800699e:	2301      	movs	r3, #1
 80069a0:	e012      	b.n	80069c8 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80069a2:	893b      	ldrh	r3, [r7, #8]
 80069a4:	b2da      	uxtb	r2, r3
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80069ac:	69fb      	ldr	r3, [r7, #28]
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	69bb      	ldr	r3, [r7, #24]
 80069b2:	2200      	movs	r2, #0
 80069b4:	2180      	movs	r1, #128	; 0x80
 80069b6:	68f8      	ldr	r0, [r7, #12]
 80069b8:	f000 f884 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 80069bc:	4603      	mov	r3, r0
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d001      	beq.n	80069c6 <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80069c2:	2301      	movs	r3, #1
 80069c4:	e000      	b.n	80069c8 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80069c6:	2300      	movs	r3, #0
}
 80069c8:	4618      	mov	r0, r3
 80069ca:	3710      	adds	r7, #16
 80069cc:	46bd      	mov	sp, r7
 80069ce:	bd80      	pop	{r7, pc}
 80069d0:	80002000 	.word	0x80002000

080069d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b086      	sub	sp, #24
 80069d8:	af02      	add	r7, sp, #8
 80069da:	60f8      	str	r0, [r7, #12]
 80069dc:	4608      	mov	r0, r1
 80069de:	4611      	mov	r1, r2
 80069e0:	461a      	mov	r2, r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	817b      	strh	r3, [r7, #10]
 80069e6:	460b      	mov	r3, r1
 80069e8:	813b      	strh	r3, [r7, #8]
 80069ea:	4613      	mov	r3, r2
 80069ec:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80069ee:	88fb      	ldrh	r3, [r7, #6]
 80069f0:	b2da      	uxtb	r2, r3
 80069f2:	8979      	ldrh	r1, [r7, #10]
 80069f4:	4b20      	ldr	r3, [pc, #128]	; (8006a78 <I2C_RequestMemoryRead+0xa4>)
 80069f6:	9300      	str	r3, [sp, #0]
 80069f8:	2300      	movs	r3, #0
 80069fa:	68f8      	ldr	r0, [r7, #12]
 80069fc:	f000 f984 	bl	8006d08 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a00:	69fa      	ldr	r2, [r7, #28]
 8006a02:	69b9      	ldr	r1, [r7, #24]
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 f89d 	bl	8006b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a0a:	4603      	mov	r3, r0
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d001      	beq.n	8006a14 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8006a10:	2301      	movs	r3, #1
 8006a12:	e02c      	b.n	8006a6e <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006a14:	88fb      	ldrh	r3, [r7, #6]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d105      	bne.n	8006a26 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a1a:	893b      	ldrh	r3, [r7, #8]
 8006a1c:	b2da      	uxtb	r2, r3
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	629a      	str	r2, [r3, #40]	; 0x28
 8006a24:	e015      	b.n	8006a52 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8006a26:	893b      	ldrh	r3, [r7, #8]
 8006a28:	0a1b      	lsrs	r3, r3, #8
 8006a2a:	b29b      	uxth	r3, r3
 8006a2c:	b2da      	uxtb	r2, r3
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006a34:	69fa      	ldr	r2, [r7, #28]
 8006a36:	69b9      	ldr	r1, [r7, #24]
 8006a38:	68f8      	ldr	r0, [r7, #12]
 8006a3a:	f000 f883 	bl	8006b44 <I2C_WaitOnTXISFlagUntilTimeout>
 8006a3e:	4603      	mov	r3, r0
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d001      	beq.n	8006a48 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8006a44:	2301      	movs	r3, #1
 8006a46:	e012      	b.n	8006a6e <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8006a48:	893b      	ldrh	r3, [r7, #8]
 8006a4a:	b2da      	uxtb	r2, r3
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8006a52:	69fb      	ldr	r3, [r7, #28]
 8006a54:	9300      	str	r3, [sp, #0]
 8006a56:	69bb      	ldr	r3, [r7, #24]
 8006a58:	2200      	movs	r2, #0
 8006a5a:	2140      	movs	r1, #64	; 0x40
 8006a5c:	68f8      	ldr	r0, [r7, #12]
 8006a5e:	f000 f831 	bl	8006ac4 <I2C_WaitOnFlagUntilTimeout>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d001      	beq.n	8006a6c <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8006a68:	2301      	movs	r3, #1
 8006a6a:	e000      	b.n	8006a6e <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8006a6c:	2300      	movs	r3, #0
}
 8006a6e:	4618      	mov	r0, r3
 8006a70:	3710      	adds	r7, #16
 8006a72:	46bd      	mov	sp, r7
 8006a74:	bd80      	pop	{r7, pc}
 8006a76:	bf00      	nop
 8006a78:	80002000 	.word	0x80002000

08006a7c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b083      	sub	sp, #12
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	699b      	ldr	r3, [r3, #24]
 8006a8a:	f003 0302 	and.w	r3, r3, #2
 8006a8e:	2b02      	cmp	r3, #2
 8006a90:	d103      	bne.n	8006a9a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	2200      	movs	r2, #0
 8006a98:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	699b      	ldr	r3, [r3, #24]
 8006aa0:	f003 0301 	and.w	r3, r3, #1
 8006aa4:	2b01      	cmp	r3, #1
 8006aa6:	d007      	beq.n	8006ab8 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	699a      	ldr	r2, [r3, #24]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	f042 0201 	orr.w	r2, r2, #1
 8006ab6:	619a      	str	r2, [r3, #24]
  }
}
 8006ab8:	bf00      	nop
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	60f8      	str	r0, [r7, #12]
 8006acc:	60b9      	str	r1, [r7, #8]
 8006ace:	603b      	str	r3, [r7, #0]
 8006ad0:	4613      	mov	r3, r2
 8006ad2:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006ad4:	e022      	b.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006adc:	d01e      	beq.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ade:	f7fd ff19 	bl	8004914 <HAL_GetTick>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	69bb      	ldr	r3, [r7, #24]
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	683a      	ldr	r2, [r7, #0]
 8006aea:	429a      	cmp	r2, r3
 8006aec:	d302      	bcc.n	8006af4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d113      	bne.n	8006b1c <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006af8:	f043 0220 	orr.w	r2, r3, #32
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2220      	movs	r2, #32
 8006b04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	2200      	movs	r2, #0
 8006b14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e00f      	b.n	8006b3c <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	699a      	ldr	r2, [r3, #24]
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	4013      	ands	r3, r2
 8006b26:	68ba      	ldr	r2, [r7, #8]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	bf0c      	ite	eq
 8006b2c:	2301      	moveq	r3, #1
 8006b2e:	2300      	movne	r3, #0
 8006b30:	b2db      	uxtb	r3, r3
 8006b32:	461a      	mov	r2, r3
 8006b34:	79fb      	ldrb	r3, [r7, #7]
 8006b36:	429a      	cmp	r2, r3
 8006b38:	d0cd      	beq.n	8006ad6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006b3a:	2300      	movs	r3, #0
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bd80      	pop	{r7, pc}

08006b44 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b084      	sub	sp, #16
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	60f8      	str	r0, [r7, #12]
 8006b4c:	60b9      	str	r1, [r7, #8]
 8006b4e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006b50:	e02c      	b.n	8006bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	68b9      	ldr	r1, [r7, #8]
 8006b56:	68f8      	ldr	r0, [r7, #12]
 8006b58:	f000 f870 	bl	8006c3c <I2C_IsAcknowledgeFailed>
 8006b5c:	4603      	mov	r3, r0
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d001      	beq.n	8006b66 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006b62:	2301      	movs	r3, #1
 8006b64:	e02a      	b.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006b66:	68bb      	ldr	r3, [r7, #8]
 8006b68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b6c:	d01e      	beq.n	8006bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006b6e:	f7fd fed1 	bl	8004914 <HAL_GetTick>
 8006b72:	4602      	mov	r2, r0
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	1ad3      	subs	r3, r2, r3
 8006b78:	68ba      	ldr	r2, [r7, #8]
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d302      	bcc.n	8006b84 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006b7e:	68bb      	ldr	r3, [r7, #8]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d113      	bne.n	8006bac <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b88:	f043 0220 	orr.w	r2, r3, #32
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	2220      	movs	r2, #32
 8006b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006ba8:	2301      	movs	r3, #1
 8006baa:	e007      	b.n	8006bbc <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	699b      	ldr	r3, [r3, #24]
 8006bb2:	f003 0302 	and.w	r3, r3, #2
 8006bb6:	2b02      	cmp	r3, #2
 8006bb8:	d1cb      	bne.n	8006b52 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006bba:	2300      	movs	r3, #0
}
 8006bbc:	4618      	mov	r0, r3
 8006bbe:	3710      	adds	r7, #16
 8006bc0:	46bd      	mov	sp, r7
 8006bc2:	bd80      	pop	{r7, pc}

08006bc4 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006bc4:	b580      	push	{r7, lr}
 8006bc6:	b084      	sub	sp, #16
 8006bc8:	af00      	add	r7, sp, #0
 8006bca:	60f8      	str	r0, [r7, #12]
 8006bcc:	60b9      	str	r1, [r7, #8]
 8006bce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006bd0:	e028      	b.n	8006c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8006bd2:	687a      	ldr	r2, [r7, #4]
 8006bd4:	68b9      	ldr	r1, [r7, #8]
 8006bd6:	68f8      	ldr	r0, [r7, #12]
 8006bd8:	f000 f830 	bl	8006c3c <I2C_IsAcknowledgeFailed>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d001      	beq.n	8006be6 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8006be2:	2301      	movs	r3, #1
 8006be4:	e026      	b.n	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be6:	f7fd fe95 	bl	8004914 <HAL_GetTick>
 8006bea:	4602      	mov	r2, r0
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	1ad3      	subs	r3, r2, r3
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d302      	bcc.n	8006bfc <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006bf6:	68bb      	ldr	r3, [r7, #8]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d113      	bne.n	8006c24 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c00:	f043 0220 	orr.w	r2, r3, #32
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	2220      	movs	r2, #32
 8006c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	2200      	movs	r2, #0
 8006c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8006c20:	2301      	movs	r3, #1
 8006c22:	e007      	b.n	8006c34 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	699b      	ldr	r3, [r3, #24]
 8006c2a:	f003 0320 	and.w	r3, r3, #32
 8006c2e:	2b20      	cmp	r3, #32
 8006c30:	d1cf      	bne.n	8006bd2 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8006c32:	2300      	movs	r3, #0
}
 8006c34:	4618      	mov	r0, r3
 8006c36:	3710      	adds	r7, #16
 8006c38:	46bd      	mov	sp, r7
 8006c3a:	bd80      	pop	{r7, pc}

08006c3c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	60f8      	str	r0, [r7, #12]
 8006c44:	60b9      	str	r1, [r7, #8]
 8006c46:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006c48:	68fb      	ldr	r3, [r7, #12]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	f003 0310 	and.w	r3, r3, #16
 8006c52:	2b10      	cmp	r3, #16
 8006c54:	d151      	bne.n	8006cfa <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c56:	e022      	b.n	8006c9e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c5e:	d01e      	beq.n	8006c9e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c60:	f7fd fe58 	bl	8004914 <HAL_GetTick>
 8006c64:	4602      	mov	r2, r0
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	1ad3      	subs	r3, r2, r3
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d302      	bcc.n	8006c76 <I2C_IsAcknowledgeFailed+0x3a>
 8006c70:	68bb      	ldr	r3, [r7, #8]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d113      	bne.n	8006c9e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006c7a:	f043 0220 	orr.w	r2, r3, #32
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	2200      	movs	r2, #0
 8006c96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8006c9a:	2301      	movs	r3, #1
 8006c9c:	e02e      	b.n	8006cfc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	f003 0320 	and.w	r3, r3, #32
 8006ca8:	2b20      	cmp	r3, #32
 8006caa:	d1d5      	bne.n	8006c58 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2210      	movs	r2, #16
 8006cb2:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	2220      	movs	r2, #32
 8006cba:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f7ff fedd 	bl	8006a7c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	6859      	ldr	r1, [r3, #4]
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	4b0d      	ldr	r3, [pc, #52]	; (8006d04 <I2C_IsAcknowledgeFailed+0xc8>)
 8006cce:	400b      	ands	r3, r1
 8006cd0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006cd6:	f043 0204 	orr.w	r2, r3, #4
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2220      	movs	r2, #32
 8006ce2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	2200      	movs	r2, #0
 8006cea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2200      	movs	r2, #0
 8006cf2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	e000      	b.n	8006cfc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8006cfa:	2300      	movs	r3, #0
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}
 8006d04:	fe00e800 	.word	0xfe00e800

08006d08 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	60f8      	str	r0, [r7, #12]
 8006d10:	607b      	str	r3, [r7, #4]
 8006d12:	460b      	mov	r3, r1
 8006d14:	817b      	strh	r3, [r7, #10]
 8006d16:	4613      	mov	r3, r2
 8006d18:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	685a      	ldr	r2, [r3, #4]
 8006d20:	69bb      	ldr	r3, [r7, #24]
 8006d22:	0d5b      	lsrs	r3, r3, #21
 8006d24:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006d28:	4b0d      	ldr	r3, [pc, #52]	; (8006d60 <I2C_TransferConfig+0x58>)
 8006d2a:	430b      	orrs	r3, r1
 8006d2c:	43db      	mvns	r3, r3
 8006d2e:	ea02 0103 	and.w	r1, r2, r3
 8006d32:	897b      	ldrh	r3, [r7, #10]
 8006d34:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006d38:	7a7b      	ldrb	r3, [r7, #9]
 8006d3a:	041b      	lsls	r3, r3, #16
 8006d3c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8006d40:	431a      	orrs	r2, r3
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	431a      	orrs	r2, r3
 8006d46:	69bb      	ldr	r3, [r7, #24]
 8006d48:	431a      	orrs	r2, r3
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	430a      	orrs	r2, r1
 8006d50:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8006d52:	bf00      	nop
 8006d54:	3714      	adds	r7, #20
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	03ff63ff 	.word	0x03ff63ff

08006d64 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006d64:	b480      	push	{r7}
 8006d66:	b083      	sub	sp, #12
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	6078      	str	r0, [r7, #4]
 8006d6c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006d74:	b2db      	uxtb	r3, r3
 8006d76:	2b20      	cmp	r3, #32
 8006d78:	d138      	bne.n	8006dec <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006d80:	2b01      	cmp	r3, #1
 8006d82:	d101      	bne.n	8006d88 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006d84:	2302      	movs	r3, #2
 8006d86:	e032      	b.n	8006dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2201      	movs	r2, #1
 8006d8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	2224      	movs	r2, #36	; 0x24
 8006d94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	681a      	ldr	r2, [r3, #0]
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f022 0201 	bic.w	r2, r2, #1
 8006da6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	681a      	ldr	r2, [r3, #0]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006db6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	6819      	ldr	r1, [r3, #0]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	683a      	ldr	r2, [r7, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	681a      	ldr	r2, [r3, #0]
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f042 0201 	orr.w	r2, r2, #1
 8006dd6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006de8:	2300      	movs	r3, #0
 8006dea:	e000      	b.n	8006dee <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006dec:	2302      	movs	r3, #2
  }
}
 8006dee:	4618      	mov	r0, r3
 8006df0:	370c      	adds	r7, #12
 8006df2:	46bd      	mov	sp, r7
 8006df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006df8:	4770      	bx	lr

08006dfa <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006dfa:	b480      	push	{r7}
 8006dfc:	b085      	sub	sp, #20
 8006dfe:	af00      	add	r7, sp, #0
 8006e00:	6078      	str	r0, [r7, #4]
 8006e02:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e0a:	b2db      	uxtb	r3, r3
 8006e0c:	2b20      	cmp	r3, #32
 8006e0e:	d139      	bne.n	8006e84 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006e16:	2b01      	cmp	r3, #1
 8006e18:	d101      	bne.n	8006e1e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006e1a:	2302      	movs	r3, #2
 8006e1c:	e033      	b.n	8006e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2201      	movs	r2, #1
 8006e22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	2224      	movs	r2, #36	; 0x24
 8006e2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f022 0201 	bic.w	r2, r2, #1
 8006e3c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006e4c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006e4e:	683b      	ldr	r3, [r7, #0]
 8006e50:	021b      	lsls	r3, r3, #8
 8006e52:	68fa      	ldr	r2, [r7, #12]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	68fa      	ldr	r2, [r7, #12]
 8006e5e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f042 0201 	orr.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	2220      	movs	r2, #32
 8006e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006e80:	2300      	movs	r3, #0
 8006e82:	e000      	b.n	8006e86 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006e84:	2302      	movs	r3, #2
  }
}
 8006e86:	4618      	mov	r0, r3
 8006e88:	3714      	adds	r7, #20
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr
	...

08006e94 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
  uint32_t tmp, tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d101      	bne.n	8006ea6 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8006ea2:	2301      	movs	r3, #1
 8006ea4:	e0bf      	b.n	8007026 <HAL_LTDC_Init+0x192>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d106      	bne.n	8006ec0 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2200      	movs	r2, #0
 8006eb6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8006eba:	6878      	ldr	r0, [r7, #4]
 8006ebc:	f7fd f8c0 	bl	8004040 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	2202      	movs	r2, #2
 8006ec4:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	699a      	ldr	r2, [r3, #24]
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8006ed6:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	6999      	ldr	r1, [r3, #24]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	685a      	ldr	r2, [r3, #4]
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	689b      	ldr	r3, [r3, #8]
 8006ee6:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006eec:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	691b      	ldr	r3, [r3, #16]
 8006ef2:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	430a      	orrs	r2, r1
 8006efa:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6899      	ldr	r1, [r3, #8]
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	681a      	ldr	r2, [r3, #0]
 8006f06:	4b4a      	ldr	r3, [pc, #296]	; (8007030 <HAL_LTDC_Init+0x19c>)
 8006f08:	400b      	ands	r3, r1
 8006f0a:	6093      	str	r3, [r2, #8]
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	695b      	ldr	r3, [r3, #20]
 8006f10:	041b      	lsls	r3, r3, #16
 8006f12:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	6899      	ldr	r1, [r3, #8]
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	699a      	ldr	r2, [r3, #24]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	431a      	orrs	r2, r3
 8006f22:	687b      	ldr	r3, [r7, #4]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	430a      	orrs	r2, r1
 8006f28:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	681b      	ldr	r3, [r3, #0]
 8006f2e:	68d9      	ldr	r1, [r3, #12]
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681a      	ldr	r2, [r3, #0]
 8006f34:	4b3e      	ldr	r3, [pc, #248]	; (8007030 <HAL_LTDC_Init+0x19c>)
 8006f36:	400b      	ands	r3, r1
 8006f38:	60d3      	str	r3, [r2, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	041b      	lsls	r3, r3, #16
 8006f40:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	68d9      	ldr	r1, [r3, #12]
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	6a1a      	ldr	r2, [r3, #32]
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	431a      	orrs	r2, r3
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	430a      	orrs	r2, r1
 8006f56:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	6919      	ldr	r1, [r3, #16]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	4b33      	ldr	r3, [pc, #204]	; (8007030 <HAL_LTDC_Init+0x19c>)
 8006f64:	400b      	ands	r3, r1
 8006f66:	6113      	str	r3, [r2, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	041b      	lsls	r3, r3, #16
 8006f6e:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	6919      	ldr	r1, [r3, #16]
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	430a      	orrs	r2, r1
 8006f84:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	6959      	ldr	r1, [r3, #20]
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	681a      	ldr	r2, [r3, #0]
 8006f90:	4b27      	ldr	r3, [pc, #156]	; (8007030 <HAL_LTDC_Init+0x19c>)
 8006f92:	400b      	ands	r3, r1
 8006f94:	6153      	str	r3, [r2, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f9a:	041b      	lsls	r3, r3, #16
 8006f9c:	60fb      	str	r3, [r7, #12]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	6959      	ldr	r1, [r3, #20]
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	430a      	orrs	r2, r1
 8006fb2:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fba:	021b      	lsls	r3, r3, #8
 8006fbc:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8006fc4:	041b      	lsls	r3, r3, #16
 8006fc6:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	f002 427f 	and.w	r2, r2, #4278190080	; 0xff000000
 8006fd6:	62da      	str	r2, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8006fde:	68ba      	ldr	r2, [r7, #8]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	4313      	orrs	r3, r2
 8006fe4:	687a      	ldr	r2, [r7, #4]
 8006fe6:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 8006fea:	431a      	orrs	r2, r3
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	430a      	orrs	r2, r1
 8006ff2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f042 0206 	orr.w	r2, r2, #6
 8007002:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	699a      	ldr	r2, [r3, #24]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0201 	orr.w	r2, r2, #1
 8007012:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	2200      	movs	r2, #0
 8007018:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	2201      	movs	r2, #1
 8007020:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  return HAL_OK;
 8007024:	2300      	movs	r3, #0
}
 8007026:	4618      	mov	r0, r3
 8007028:	3710      	adds	r7, #16
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	f000f800 	.word	0xf000f800

08007034 <HAL_LTDC_IRQHandler>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
void HAL_LTDC_IRQHandler(LTDC_HandleTypeDef *hltdc)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007042:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	60bb      	str	r3, [r7, #8]

  /* Transfer Error Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	f003 0304 	and.w	r3, r3, #4
 8007052:	2b00      	cmp	r3, #0
 8007054:	d023      	beq.n	800709e <HAL_LTDC_IRQHandler+0x6a>
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f003 0304 	and.w	r3, r3, #4
 800705c:	2b00      	cmp	r3, #0
 800705e:	d01e      	beq.n	800709e <HAL_LTDC_IRQHandler+0x6a>
  {
    /* Disable the transfer Error interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f022 0204 	bic.w	r2, r2, #4
 800706e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the transfer error flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	2204      	movs	r2, #4
 8007076:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800707e:	f043 0201 	orr.w	r2, r3, #1
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2204      	movs	r2, #4
 800708c:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	2200      	movs	r2, #0
 8007094:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f86f 	bl	800717c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* FIFO underrun Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f003 0302 	and.w	r3, r3, #2
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d023      	beq.n	80070f0 <HAL_LTDC_IRQHandler+0xbc>
 80070a8:	68bb      	ldr	r3, [r7, #8]
 80070aa:	f003 0302 	and.w	r3, r3, #2
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d01e      	beq.n	80070f0 <HAL_LTDC_IRQHandler+0xbc>
  {
    /* Disable the FIFO underrun interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f022 0202 	bic.w	r2, r2, #2
 80070c0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the FIFO underrun flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	2202      	movs	r2, #2
 80070c8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Update error code */
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80070d0:	f043 0202 	orr.w	r2, r3, #2
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	2204      	movs	r2, #4
 80070de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	2200      	movs	r2, #0
 80070e6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered error callback*/
    hltdc->ErrorCallback(hltdc);
#else
    /* Call legacy error callback*/
    HAL_LTDC_ErrorCallback(hltdc);
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 f846 	bl	800717c <HAL_LTDC_ErrorCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Line Interrupt management ************************************************/
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f003 0301 	and.w	r3, r3, #1
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d01b      	beq.n	8007132 <HAL_LTDC_IRQHandler+0xfe>
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f003 0301 	and.w	r3, r3, #1
 8007100:	2b00      	cmp	r3, #0
 8007102:	d016      	beq.n	8007132 <HAL_LTDC_IRQHandler+0xfe>
  {
    /* Disable the Line interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f022 0201 	bic.w	r2, r2, #1
 8007112:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the Line interrupt flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2201      	movs	r2, #1
 800711a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2201      	movs	r2, #1
 8007120:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2200      	movs	r2, #0
 8007128:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered Line Event callback */
    hltdc->LineEventCallback(hltdc);
#else
    /*Call Legacy Line Event callback */
    HAL_LTDC_LineEventCallback(hltdc);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f82f 	bl	8007190 <HAL_LTDC_LineEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }

  /* Register reload Interrupt management ***************************************/
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	f003 0308 	and.w	r3, r3, #8
 8007138:	2b00      	cmp	r3, #0
 800713a:	d01b      	beq.n	8007174 <HAL_LTDC_IRQHandler+0x140>
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f003 0308 	and.w	r3, r3, #8
 8007142:	2b00      	cmp	r3, #0
 8007144:	d016      	beq.n	8007174 <HAL_LTDC_IRQHandler+0x140>
  {
    /* Disable the register reload interrupt */
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	f022 0208 	bic.w	r2, r2, #8
 8007154:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear the register reload flag */
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	2208      	movs	r2, #8
 800715c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change LTDC state */
    hltdc->State = HAL_LTDC_STATE_READY;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	2201      	movs	r2, #1
 8007162:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

    /* Process unlocked */
    __HAL_UNLOCK(hltdc);
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	2200      	movs	r2, #0
 800716a:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0
#if (USE_HAL_LTDC_REGISTER_CALLBACKS == 1)
    /*Call registered reload Event callback */
    hltdc->ReloadEventCallback(hltdc);
#else
    /*Call Legacy Reload Event callback */
    HAL_LTDC_ReloadEventCallback(hltdc);
 800716e:	6878      	ldr	r0, [r7, #4]
 8007170:	f000 f818 	bl	80071a4 <HAL_LTDC_ReloadEventCallback>
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */
  }
}
 8007174:	bf00      	nop
 8007176:	3710      	adds	r7, #16
 8007178:	46bd      	mov	sp, r7
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_LTDC_ErrorCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ErrorCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <HAL_LTDC_LineEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_LineEventCallback could be implemented in the user file
   */
}
 8007198:	bf00      	nop
 800719a:	370c      	adds	r7, #12
 800719c:	46bd      	mov	sp, r7
 800719e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a2:	4770      	bx	lr

080071a4 <HAL_LTDC_ReloadEventCallback>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_ReloadEvenCallback could be implemented in the user file
   */
}
 80071ac:	bf00      	nop
 80071ae:	370c      	adds	r7, #12
 80071b0:	46bd      	mov	sp, r7
 80071b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b6:	4770      	bx	lr

080071b8 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 80071b8:	b5b0      	push	{r4, r5, r7, lr}
 80071ba:	b084      	sub	sp, #16
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 30a0 	ldrb.w	r3, [r3, #160]	; 0xa0
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_LTDC_ConfigLayer+0x1a>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e02c      	b.n	800722c <HAL_LTDC_ConfigLayer+0x74>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2202      	movs	r2, #2
 80071de:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	2134      	movs	r1, #52	; 0x34
 80071e8:	fb01 f303 	mul.w	r3, r1, r3
 80071ec:	4413      	add	r3, r2
 80071ee:	f103 0238 	add.w	r2, r3, #56	; 0x38
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	4614      	mov	r4, r2
 80071f6:	461d      	mov	r5, r3
 80071f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80071fc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80071fe:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007200:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007202:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007204:	682b      	ldr	r3, [r5, #0]
 8007206:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8007208:	687a      	ldr	r2, [r7, #4]
 800720a:	68b9      	ldr	r1, [r7, #8]
 800720c:	68f8      	ldr	r0, [r7, #12]
 800720e:	f000 f81f 	bl	8007250 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	2201      	movs	r2, #1
 8007218:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2201      	movs	r2, #1
 800721e:	f883 20a1 	strb.w	r2, [r3, #161]	; 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	2200      	movs	r2, #0
 8007226:	f883 20a0 	strb.w	r2, [r3, #160]	; 0xa0

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3710      	adds	r7, #16
 8007230:	46bd      	mov	sp, r7
 8007232:	bdb0      	pop	{r4, r5, r7, pc}

08007234 <HAL_LTDC_GetState>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL state
  */
HAL_LTDC_StateTypeDef HAL_LTDC_GetState(LTDC_HandleTypeDef *hltdc)
{
 8007234:	b480      	push	{r7}
 8007236:	b083      	sub	sp, #12
 8007238:	af00      	add	r7, sp, #0
 800723a:	6078      	str	r0, [r7, #4]
  return hltdc->State;
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f893 30a1 	ldrb.w	r3, [r3, #161]	; 0xa1
 8007242:	b2db      	uxtb	r3, r3
}
 8007244:	4618      	mov	r0, r3
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8007250:	b480      	push	{r7}
 8007252:	b089      	sub	sp, #36	; 0x24
 8007254:	af00      	add	r7, sp, #0
 8007256:	60f8      	str	r0, [r7, #12]
 8007258:	60b9      	str	r1, [r7, #8]
 800725a:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	685a      	ldr	r2, [r3, #4]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	68db      	ldr	r3, [r3, #12]
 8007266:	0c1b      	lsrs	r3, r3, #16
 8007268:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800726c:	4413      	add	r3, r2
 800726e:	041b      	lsls	r3, r3, #16
 8007270:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	01db      	lsls	r3, r3, #7
 800727c:	4413      	add	r3, r2
 800727e:	3384      	adds	r3, #132	; 0x84
 8007280:	685b      	ldr	r3, [r3, #4]
 8007282:	68fa      	ldr	r2, [r7, #12]
 8007284:	6812      	ldr	r2, [r2, #0]
 8007286:	4611      	mov	r1, r2
 8007288:	687a      	ldr	r2, [r7, #4]
 800728a:	01d2      	lsls	r2, r2, #7
 800728c:	440a      	add	r2, r1
 800728e:	3284      	adds	r2, #132	; 0x84
 8007290:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 8007294:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8007296:	68bb      	ldr	r3, [r7, #8]
 8007298:	681a      	ldr	r2, [r3, #0]
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	68db      	ldr	r3, [r3, #12]
 80072a0:	0c1b      	lsrs	r3, r3, #16
 80072a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072a6:	4413      	add	r3, r2
 80072a8:	1c5a      	adds	r2, r3, #1
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4619      	mov	r1, r3
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	01db      	lsls	r3, r3, #7
 80072b4:	440b      	add	r3, r1
 80072b6:	3384      	adds	r3, #132	; 0x84
 80072b8:	4619      	mov	r1, r3
 80072ba:	69fb      	ldr	r3, [r7, #28]
 80072bc:	4313      	orrs	r3, r2
 80072be:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	68da      	ldr	r2, [r3, #12]
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	68db      	ldr	r3, [r3, #12]
 80072ca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80072ce:	4413      	add	r3, r2
 80072d0:	041b      	lsls	r3, r3, #16
 80072d2:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	461a      	mov	r2, r3
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	01db      	lsls	r3, r3, #7
 80072de:	4413      	add	r3, r2
 80072e0:	3384      	adds	r3, #132	; 0x84
 80072e2:	689b      	ldr	r3, [r3, #8]
 80072e4:	68fa      	ldr	r2, [r7, #12]
 80072e6:	6812      	ldr	r2, [r2, #0]
 80072e8:	4611      	mov	r1, r2
 80072ea:	687a      	ldr	r2, [r7, #4]
 80072ec:	01d2      	lsls	r2, r2, #7
 80072ee:	440a      	add	r2, r1
 80072f0:	3284      	adds	r2, #132	; 0x84
 80072f2:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
 80072f6:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 80072f8:	68bb      	ldr	r3, [r7, #8]
 80072fa:	689a      	ldr	r2, [r3, #8]
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	68db      	ldr	r3, [r3, #12]
 8007302:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007306:	4413      	add	r3, r2
 8007308:	1c5a      	adds	r2, r3, #1
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4619      	mov	r1, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	01db      	lsls	r3, r3, #7
 8007314:	440b      	add	r3, r1
 8007316:	3384      	adds	r3, #132	; 0x84
 8007318:	4619      	mov	r1, r3
 800731a:	69fb      	ldr	r3, [r7, #28]
 800731c:	4313      	orrs	r3, r2
 800731e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	01db      	lsls	r3, r3, #7
 800732a:	4413      	add	r3, r2
 800732c:	3384      	adds	r3, #132	; 0x84
 800732e:	691b      	ldr	r3, [r3, #16]
 8007330:	68fa      	ldr	r2, [r7, #12]
 8007332:	6812      	ldr	r2, [r2, #0]
 8007334:	4611      	mov	r1, r2
 8007336:	687a      	ldr	r2, [r7, #4]
 8007338:	01d2      	lsls	r2, r2, #7
 800733a:	440a      	add	r2, r1
 800733c:	3284      	adds	r2, #132	; 0x84
 800733e:	f023 0307 	bic.w	r3, r3, #7
 8007342:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	461a      	mov	r2, r3
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	01db      	lsls	r3, r3, #7
 800734e:	4413      	add	r3, r2
 8007350:	3384      	adds	r3, #132	; 0x84
 8007352:	461a      	mov	r2, r3
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	691b      	ldr	r3, [r3, #16]
 8007358:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800735a:	68bb      	ldr	r3, [r7, #8]
 800735c:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 8007360:	021b      	lsls	r3, r3, #8
 8007362:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8007364:	68bb      	ldr	r3, [r7, #8]
 8007366:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800736a:	041b      	lsls	r3, r3, #16
 800736c:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800736e:	68bb      	ldr	r3, [r7, #8]
 8007370:	699b      	ldr	r3, [r3, #24]
 8007372:	061b      	lsls	r3, r3, #24
 8007374:	617b      	str	r3, [r7, #20]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8007376:	68fb      	ldr	r3, [r7, #12]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	461a      	mov	r2, r3
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	01db      	lsls	r3, r3, #7
 8007380:	4413      	add	r3, r2
 8007382:	3384      	adds	r3, #132	; 0x84
 8007384:	699b      	ldr	r3, [r3, #24]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	01db      	lsls	r3, r3, #7
 8007390:	4413      	add	r3, r2
 8007392:	3384      	adds	r3, #132	; 0x84
 8007394:	461a      	mov	r2, r3
 8007396:	2300      	movs	r3, #0
 8007398:	6193      	str	r3, [r2, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 800739a:	68bb      	ldr	r3, [r7, #8]
 800739c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80073a0:	461a      	mov	r2, r3
 80073a2:	69fb      	ldr	r3, [r7, #28]
 80073a4:	431a      	orrs	r2, r3
 80073a6:	69bb      	ldr	r3, [r7, #24]
 80073a8:	431a      	orrs	r2, r3
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4619      	mov	r1, r3
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	01db      	lsls	r3, r3, #7
 80073b4:	440b      	add	r3, r1
 80073b6:	3384      	adds	r3, #132	; 0x84
 80073b8:	4619      	mov	r1, r3
 80073ba:	697b      	ldr	r3, [r7, #20]
 80073bc:	4313      	orrs	r3, r2
 80073be:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	461a      	mov	r2, r3
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	01db      	lsls	r3, r3, #7
 80073ca:	4413      	add	r3, r2
 80073cc:	3384      	adds	r3, #132	; 0x84
 80073ce:	695b      	ldr	r3, [r3, #20]
 80073d0:	68fa      	ldr	r2, [r7, #12]
 80073d2:	6812      	ldr	r2, [r2, #0]
 80073d4:	4611      	mov	r1, r2
 80073d6:	687a      	ldr	r2, [r7, #4]
 80073d8:	01d2      	lsls	r2, r2, #7
 80073da:	440a      	add	r2, r1
 80073dc:	3284      	adds	r2, #132	; 0x84
 80073de:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80073e2:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	01db      	lsls	r3, r3, #7
 80073ee:	4413      	add	r3, r2
 80073f0:	3384      	adds	r3, #132	; 0x84
 80073f2:	461a      	mov	r2, r3
 80073f4:	68bb      	ldr	r3, [r7, #8]
 80073f6:	695b      	ldr	r3, [r3, #20]
 80073f8:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681b      	ldr	r3, [r3, #0]
 80073fe:	461a      	mov	r2, r3
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	01db      	lsls	r3, r3, #7
 8007404:	4413      	add	r3, r2
 8007406:	3384      	adds	r3, #132	; 0x84
 8007408:	69da      	ldr	r2, [r3, #28]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	4619      	mov	r1, r3
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	01db      	lsls	r3, r3, #7
 8007414:	440b      	add	r3, r1
 8007416:	3384      	adds	r3, #132	; 0x84
 8007418:	4619      	mov	r1, r3
 800741a:	4b58      	ldr	r3, [pc, #352]	; (800757c <LTDC_SetConfig+0x32c>)
 800741c:	4013      	ands	r3, r2
 800741e:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8007420:	68bb      	ldr	r3, [r7, #8]
 8007422:	69da      	ldr	r2, [r3, #28]
 8007424:	68bb      	ldr	r3, [r7, #8]
 8007426:	6a1b      	ldr	r3, [r3, #32]
 8007428:	68f9      	ldr	r1, [r7, #12]
 800742a:	6809      	ldr	r1, [r1, #0]
 800742c:	4608      	mov	r0, r1
 800742e:	6879      	ldr	r1, [r7, #4]
 8007430:	01c9      	lsls	r1, r1, #7
 8007432:	4401      	add	r1, r0
 8007434:	3184      	adds	r1, #132	; 0x84
 8007436:	4313      	orrs	r3, r2
 8007438:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	01db      	lsls	r3, r3, #7
 8007444:	4413      	add	r3, r2
 8007446:	3384      	adds	r3, #132	; 0x84
 8007448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	461a      	mov	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	01db      	lsls	r3, r3, #7
 8007454:	4413      	add	r3, r2
 8007456:	3384      	adds	r3, #132	; 0x84
 8007458:	461a      	mov	r2, r3
 800745a:	2300      	movs	r3, #0
 800745c:	6293      	str	r3, [r2, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	461a      	mov	r2, r3
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	01db      	lsls	r3, r3, #7
 8007468:	4413      	add	r3, r2
 800746a:	3384      	adds	r3, #132	; 0x84
 800746c:	461a      	mov	r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007472:	6293      	str	r3, [r2, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8007474:	68bb      	ldr	r3, [r7, #8]
 8007476:	691b      	ldr	r3, [r3, #16]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d102      	bne.n	8007482 <LTDC_SetConfig+0x232>
  {
    tmp = 4U;
 800747c:	2304      	movs	r3, #4
 800747e:	61fb      	str	r3, [r7, #28]
 8007480:	e01b      	b.n	80074ba <LTDC_SetConfig+0x26a>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8007482:	68bb      	ldr	r3, [r7, #8]
 8007484:	691b      	ldr	r3, [r3, #16]
 8007486:	2b01      	cmp	r3, #1
 8007488:	d102      	bne.n	8007490 <LTDC_SetConfig+0x240>
  {
    tmp = 3U;
 800748a:	2303      	movs	r3, #3
 800748c:	61fb      	str	r3, [r7, #28]
 800748e:	e014      	b.n	80074ba <LTDC_SetConfig+0x26a>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8007490:	68bb      	ldr	r3, [r7, #8]
 8007492:	691b      	ldr	r3, [r3, #16]
 8007494:	2b04      	cmp	r3, #4
 8007496:	d00b      	beq.n	80074b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800749c:	2b02      	cmp	r3, #2
 800749e:	d007      	beq.n	80074b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d003      	beq.n	80074b0 <LTDC_SetConfig+0x260>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 80074a8:	68bb      	ldr	r3, [r7, #8]
 80074aa:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 80074ac:	2b07      	cmp	r3, #7
 80074ae:	d102      	bne.n	80074b6 <LTDC_SetConfig+0x266>
  {
    tmp = 2U;
 80074b0:	2302      	movs	r3, #2
 80074b2:	61fb      	str	r3, [r7, #28]
 80074b4:	e001      	b.n	80074ba <LTDC_SetConfig+0x26a>
  }
  else
  {
    tmp = 1U;
 80074b6:	2301      	movs	r3, #1
 80074b8:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	461a      	mov	r2, r3
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	01db      	lsls	r3, r3, #7
 80074c4:	4413      	add	r3, r2
 80074c6:	3384      	adds	r3, #132	; 0x84
 80074c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	6812      	ldr	r2, [r2, #0]
 80074ce:	4611      	mov	r1, r2
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	01d2      	lsls	r2, r2, #7
 80074d4:	440a      	add	r2, r1
 80074d6:	3284      	adds	r2, #132	; 0x84
 80074d8:	f003 23e0 	and.w	r3, r3, #3758153728	; 0xe000e000
 80074dc:	62d3      	str	r3, [r2, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074e2:	69fa      	ldr	r2, [r7, #28]
 80074e4:	fb02 f303 	mul.w	r3, r2, r3
 80074e8:	041a      	lsls	r2, r3, #16
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	6859      	ldr	r1, [r3, #4]
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	1acb      	subs	r3, r1, r3
 80074f4:	69f9      	ldr	r1, [r7, #28]
 80074f6:	fb01 f303 	mul.w	r3, r1, r3
 80074fa:	3303      	adds	r3, #3
 80074fc:	68f9      	ldr	r1, [r7, #12]
 80074fe:	6809      	ldr	r1, [r1, #0]
 8007500:	4608      	mov	r0, r1
 8007502:	6879      	ldr	r1, [r7, #4]
 8007504:	01c9      	lsls	r1, r1, #7
 8007506:	4401      	add	r1, r0
 8007508:	3184      	adds	r1, #132	; 0x84
 800750a:	4313      	orrs	r3, r2
 800750c:	62cb      	str	r3, [r1, #44]	; 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	461a      	mov	r2, r3
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	01db      	lsls	r3, r3, #7
 8007518:	4413      	add	r3, r2
 800751a:	3384      	adds	r3, #132	; 0x84
 800751c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	4619      	mov	r1, r3
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	01db      	lsls	r3, r3, #7
 8007528:	440b      	add	r3, r1
 800752a:	3384      	adds	r3, #132	; 0x84
 800752c:	4619      	mov	r1, r3
 800752e:	4b14      	ldr	r3, [pc, #80]	; (8007580 <LTDC_SetConfig+0x330>)
 8007530:	4013      	ands	r3, r2
 8007532:	630b      	str	r3, [r1, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8007534:	68fb      	ldr	r3, [r7, #12]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	461a      	mov	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	01db      	lsls	r3, r3, #7
 800753e:	4413      	add	r3, r2
 8007540:	3384      	adds	r3, #132	; 0x84
 8007542:	461a      	mov	r2, r3
 8007544:	68bb      	ldr	r3, [r7, #8]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	6313      	str	r3, [r2, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	461a      	mov	r2, r3
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	01db      	lsls	r3, r3, #7
 8007554:	4413      	add	r3, r2
 8007556:	3384      	adds	r3, #132	; 0x84
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	68fa      	ldr	r2, [r7, #12]
 800755c:	6812      	ldr	r2, [r2, #0]
 800755e:	4611      	mov	r1, r2
 8007560:	687a      	ldr	r2, [r7, #4]
 8007562:	01d2      	lsls	r2, r2, #7
 8007564:	440a      	add	r2, r1
 8007566:	3284      	adds	r2, #132	; 0x84
 8007568:	f043 0301 	orr.w	r3, r3, #1
 800756c:	6013      	str	r3, [r2, #0]
}
 800756e:	bf00      	nop
 8007570:	3724      	adds	r7, #36	; 0x24
 8007572:	46bd      	mov	sp, r7
 8007574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007578:	4770      	bx	lr
 800757a:	bf00      	nop
 800757c:	fffff8f8 	.word	0xfffff8f8
 8007580:	fffff800 	.word	0xfffff800

08007584 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8007584:	b480      	push	{r7}
 8007586:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007588:	4b05      	ldr	r3, [pc, #20]	; (80075a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	4a04      	ldr	r2, [pc, #16]	; (80075a0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800758e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007592:	6013      	str	r3, [r2, #0]
}
 8007594:	bf00      	nop
 8007596:	46bd      	mov	sp, r7
 8007598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759c:	4770      	bx	lr
 800759e:	bf00      	nop
 80075a0:	40007000 	.word	0x40007000

080075a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b082      	sub	sp, #8
 80075a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 80075aa:	2300      	movs	r3, #0
 80075ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80075ae:	4b23      	ldr	r3, [pc, #140]	; (800763c <HAL_PWREx_EnableOverDrive+0x98>)
 80075b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075b2:	4a22      	ldr	r2, [pc, #136]	; (800763c <HAL_PWREx_EnableOverDrive+0x98>)
 80075b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b8:	6413      	str	r3, [r2, #64]	; 0x40
 80075ba:	4b20      	ldr	r3, [pc, #128]	; (800763c <HAL_PWREx_EnableOverDrive+0x98>)
 80075bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075c2:	603b      	str	r3, [r7, #0]
 80075c4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80075c6:	4b1e      	ldr	r3, [pc, #120]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	4a1d      	ldr	r2, [pc, #116]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80075d0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80075d2:	f7fd f99f 	bl	8004914 <HAL_GetTick>
 80075d6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075d8:	e009      	b.n	80075ee <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80075da:	f7fd f99b 	bl	8004914 <HAL_GetTick>
 80075de:	4602      	mov	r2, r0
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	1ad3      	subs	r3, r2, r3
 80075e4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80075e8:	d901      	bls.n	80075ee <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80075ea:	2303      	movs	r3, #3
 80075ec:	e022      	b.n	8007634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80075ee:	4b14      	ldr	r3, [pc, #80]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075fa:	d1ee      	bne.n	80075da <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80075fc:	4b10      	ldr	r3, [pc, #64]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	4a0f      	ldr	r2, [pc, #60]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007602:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007606:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007608:	f7fd f984 	bl	8004914 <HAL_GetTick>
 800760c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800760e:	e009      	b.n	8007624 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8007610:	f7fd f980 	bl	8004914 <HAL_GetTick>
 8007614:	4602      	mov	r2, r0
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	1ad3      	subs	r3, r2, r3
 800761a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800761e:	d901      	bls.n	8007624 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8007620:	2303      	movs	r3, #3
 8007622:	e007      	b.n	8007634 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8007624:	4b06      	ldr	r3, [pc, #24]	; (8007640 <HAL_PWREx_EnableOverDrive+0x9c>)
 8007626:	685b      	ldr	r3, [r3, #4]
 8007628:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800762c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8007630:	d1ee      	bne.n	8007610 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8007632:	2300      	movs	r3, #0
}
 8007634:	4618      	mov	r0, r3
 8007636:	3708      	adds	r7, #8
 8007638:	46bd      	mov	sp, r7
 800763a:	bd80      	pop	{r7, pc}
 800763c:	40023800 	.word	0x40023800
 8007640:	40007000 	.word	0x40007000

08007644 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007644:	b580      	push	{r7, lr}
 8007646:	b086      	sub	sp, #24
 8007648:	af00      	add	r7, sp, #0
 800764a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800764c:	2300      	movs	r3, #0
 800764e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2b00      	cmp	r3, #0
 8007654:	d101      	bne.n	800765a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8007656:	2301      	movs	r3, #1
 8007658:	e291      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	f003 0301 	and.w	r3, r3, #1
 8007662:	2b00      	cmp	r3, #0
 8007664:	f000 8087 	beq.w	8007776 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8007668:	4b96      	ldr	r3, [pc, #600]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 030c 	and.w	r3, r3, #12
 8007670:	2b04      	cmp	r3, #4
 8007672:	d00c      	beq.n	800768e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007674:	4b93      	ldr	r3, [pc, #588]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f003 030c 	and.w	r3, r3, #12
 800767c:	2b08      	cmp	r3, #8
 800767e:	d112      	bne.n	80076a6 <HAL_RCC_OscConfig+0x62>
 8007680:	4b90      	ldr	r3, [pc, #576]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007688:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800768c:	d10b      	bne.n	80076a6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800768e:	4b8d      	ldr	r3, [pc, #564]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007696:	2b00      	cmp	r3, #0
 8007698:	d06c      	beq.n	8007774 <HAL_RCC_OscConfig+0x130>
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d168      	bne.n	8007774 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80076a2:	2301      	movs	r3, #1
 80076a4:	e26b      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	685b      	ldr	r3, [r3, #4]
 80076aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80076ae:	d106      	bne.n	80076be <HAL_RCC_OscConfig+0x7a>
 80076b0:	4b84      	ldr	r3, [pc, #528]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	4a83      	ldr	r2, [pc, #524]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80076ba:	6013      	str	r3, [r2, #0]
 80076bc:	e02e      	b.n	800771c <HAL_RCC_OscConfig+0xd8>
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d10c      	bne.n	80076e0 <HAL_RCC_OscConfig+0x9c>
 80076c6:	4b7f      	ldr	r3, [pc, #508]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a7e      	ldr	r2, [pc, #504]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80076d0:	6013      	str	r3, [r2, #0]
 80076d2:	4b7c      	ldr	r3, [pc, #496]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	4a7b      	ldr	r2, [pc, #492]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80076dc:	6013      	str	r3, [r2, #0]
 80076de:	e01d      	b.n	800771c <HAL_RCC_OscConfig+0xd8>
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80076e8:	d10c      	bne.n	8007704 <HAL_RCC_OscConfig+0xc0>
 80076ea:	4b76      	ldr	r3, [pc, #472]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a75      	ldr	r2, [pc, #468]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80076f4:	6013      	str	r3, [r2, #0]
 80076f6:	4b73      	ldr	r3, [pc, #460]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	4a72      	ldr	r2, [pc, #456]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80076fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007700:	6013      	str	r3, [r2, #0]
 8007702:	e00b      	b.n	800771c <HAL_RCC_OscConfig+0xd8>
 8007704:	4b6f      	ldr	r3, [pc, #444]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a6e      	ldr	r2, [pc, #440]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800770a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800770e:	6013      	str	r3, [r2, #0]
 8007710:	4b6c      	ldr	r3, [pc, #432]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a6b      	ldr	r2, [pc, #428]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007716:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800771a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	685b      	ldr	r3, [r3, #4]
 8007720:	2b00      	cmp	r3, #0
 8007722:	d013      	beq.n	800774c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007724:	f7fd f8f6 	bl	8004914 <HAL_GetTick>
 8007728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800772a:	e008      	b.n	800773e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800772c:	f7fd f8f2 	bl	8004914 <HAL_GetTick>
 8007730:	4602      	mov	r2, r0
 8007732:	693b      	ldr	r3, [r7, #16]
 8007734:	1ad3      	subs	r3, r2, r3
 8007736:	2b64      	cmp	r3, #100	; 0x64
 8007738:	d901      	bls.n	800773e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800773a:	2303      	movs	r3, #3
 800773c:	e21f      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800773e:	4b61      	ldr	r3, [pc, #388]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007746:	2b00      	cmp	r3, #0
 8007748:	d0f0      	beq.n	800772c <HAL_RCC_OscConfig+0xe8>
 800774a:	e014      	b.n	8007776 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800774c:	f7fd f8e2 	bl	8004914 <HAL_GetTick>
 8007750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007752:	e008      	b.n	8007766 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007754:	f7fd f8de 	bl	8004914 <HAL_GetTick>
 8007758:	4602      	mov	r2, r0
 800775a:	693b      	ldr	r3, [r7, #16]
 800775c:	1ad3      	subs	r3, r2, r3
 800775e:	2b64      	cmp	r3, #100	; 0x64
 8007760:	d901      	bls.n	8007766 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8007762:	2303      	movs	r3, #3
 8007764:	e20b      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007766:	4b57      	ldr	r3, [pc, #348]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1f0      	bne.n	8007754 <HAL_RCC_OscConfig+0x110>
 8007772:	e000      	b.n	8007776 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007774:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f003 0302 	and.w	r3, r3, #2
 800777e:	2b00      	cmp	r3, #0
 8007780:	d069      	beq.n	8007856 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8007782:	4b50      	ldr	r3, [pc, #320]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007784:	689b      	ldr	r3, [r3, #8]
 8007786:	f003 030c 	and.w	r3, r3, #12
 800778a:	2b00      	cmp	r3, #0
 800778c:	d00b      	beq.n	80077a6 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800778e:	4b4d      	ldr	r3, [pc, #308]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007790:	689b      	ldr	r3, [r3, #8]
 8007792:	f003 030c 	and.w	r3, r3, #12
 8007796:	2b08      	cmp	r3, #8
 8007798:	d11c      	bne.n	80077d4 <HAL_RCC_OscConfig+0x190>
 800779a:	4b4a      	ldr	r3, [pc, #296]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d116      	bne.n	80077d4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077a6:	4b47      	ldr	r3, [pc, #284]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	f003 0302 	and.w	r3, r3, #2
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d005      	beq.n	80077be <HAL_RCC_OscConfig+0x17a>
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	2b01      	cmp	r3, #1
 80077b8:	d001      	beq.n	80077be <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80077ba:	2301      	movs	r3, #1
 80077bc:	e1df      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80077be:	4b41      	ldr	r3, [pc, #260]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	691b      	ldr	r3, [r3, #16]
 80077ca:	00db      	lsls	r3, r3, #3
 80077cc:	493d      	ldr	r1, [pc, #244]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80077ce:	4313      	orrs	r3, r2
 80077d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80077d2:	e040      	b.n	8007856 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	68db      	ldr	r3, [r3, #12]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d023      	beq.n	8007824 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80077dc:	4b39      	ldr	r3, [pc, #228]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a38      	ldr	r2, [pc, #224]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80077e2:	f043 0301 	orr.w	r3, r3, #1
 80077e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80077e8:	f7fd f894 	bl	8004914 <HAL_GetTick>
 80077ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80077ee:	e008      	b.n	8007802 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80077f0:	f7fd f890 	bl	8004914 <HAL_GetTick>
 80077f4:	4602      	mov	r2, r0
 80077f6:	693b      	ldr	r3, [r7, #16]
 80077f8:	1ad3      	subs	r3, r2, r3
 80077fa:	2b02      	cmp	r3, #2
 80077fc:	d901      	bls.n	8007802 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80077fe:	2303      	movs	r3, #3
 8007800:	e1bd      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007802:	4b30      	ldr	r3, [pc, #192]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	f003 0302 	and.w	r3, r3, #2
 800780a:	2b00      	cmp	r3, #0
 800780c:	d0f0      	beq.n	80077f0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800780e:	4b2d      	ldr	r3, [pc, #180]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	00db      	lsls	r3, r3, #3
 800781c:	4929      	ldr	r1, [pc, #164]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800781e:	4313      	orrs	r3, r2
 8007820:	600b      	str	r3, [r1, #0]
 8007822:	e018      	b.n	8007856 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007824:	4b27      	ldr	r3, [pc, #156]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4a26      	ldr	r2, [pc, #152]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800782a:	f023 0301 	bic.w	r3, r3, #1
 800782e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007830:	f7fd f870 	bl	8004914 <HAL_GetTick>
 8007834:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007836:	e008      	b.n	800784a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007838:	f7fd f86c 	bl	8004914 <HAL_GetTick>
 800783c:	4602      	mov	r2, r0
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	1ad3      	subs	r3, r2, r3
 8007842:	2b02      	cmp	r3, #2
 8007844:	d901      	bls.n	800784a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e199      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800784a:	4b1e      	ldr	r3, [pc, #120]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f003 0302 	and.w	r3, r3, #2
 8007852:	2b00      	cmp	r3, #0
 8007854:	d1f0      	bne.n	8007838 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	f003 0308 	and.w	r3, r3, #8
 800785e:	2b00      	cmp	r3, #0
 8007860:	d038      	beq.n	80078d4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	695b      	ldr	r3, [r3, #20]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d019      	beq.n	800789e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800786a:	4b16      	ldr	r3, [pc, #88]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 800786c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800786e:	4a15      	ldr	r2, [pc, #84]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007870:	f043 0301 	orr.w	r3, r3, #1
 8007874:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007876:	f7fd f84d 	bl	8004914 <HAL_GetTick>
 800787a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800787c:	e008      	b.n	8007890 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800787e:	f7fd f849 	bl	8004914 <HAL_GetTick>
 8007882:	4602      	mov	r2, r0
 8007884:	693b      	ldr	r3, [r7, #16]
 8007886:	1ad3      	subs	r3, r2, r3
 8007888:	2b02      	cmp	r3, #2
 800788a:	d901      	bls.n	8007890 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800788c:	2303      	movs	r3, #3
 800788e:	e176      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007890:	4b0c      	ldr	r3, [pc, #48]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 8007892:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007894:	f003 0302 	and.w	r3, r3, #2
 8007898:	2b00      	cmp	r3, #0
 800789a:	d0f0      	beq.n	800787e <HAL_RCC_OscConfig+0x23a>
 800789c:	e01a      	b.n	80078d4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800789e:	4b09      	ldr	r3, [pc, #36]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80078a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078a2:	4a08      	ldr	r2, [pc, #32]	; (80078c4 <HAL_RCC_OscConfig+0x280>)
 80078a4:	f023 0301 	bic.w	r3, r3, #1
 80078a8:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80078aa:	f7fd f833 	bl	8004914 <HAL_GetTick>
 80078ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078b0:	e00a      	b.n	80078c8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80078b2:	f7fd f82f 	bl	8004914 <HAL_GetTick>
 80078b6:	4602      	mov	r2, r0
 80078b8:	693b      	ldr	r3, [r7, #16]
 80078ba:	1ad3      	subs	r3, r2, r3
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d903      	bls.n	80078c8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80078c0:	2303      	movs	r3, #3
 80078c2:	e15c      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
 80078c4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80078c8:	4b91      	ldr	r3, [pc, #580]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80078ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80078cc:	f003 0302 	and.w	r3, r3, #2
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1ee      	bne.n	80078b2 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0304 	and.w	r3, r3, #4
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80a4 	beq.w	8007a2a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80078e2:	4b8b      	ldr	r3, [pc, #556]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80078e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d10d      	bne.n	800790a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80078ee:	4b88      	ldr	r3, [pc, #544]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	4a87      	ldr	r2, [pc, #540]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80078f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078f8:	6413      	str	r3, [r2, #64]	; 0x40
 80078fa:	4b85      	ldr	r3, [pc, #532]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80078fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007902:	60bb      	str	r3, [r7, #8]
 8007904:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007906:	2301      	movs	r3, #1
 8007908:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800790a:	4b82      	ldr	r3, [pc, #520]	; (8007b14 <HAL_RCC_OscConfig+0x4d0>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007912:	2b00      	cmp	r3, #0
 8007914:	d118      	bne.n	8007948 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8007916:	4b7f      	ldr	r3, [pc, #508]	; (8007b14 <HAL_RCC_OscConfig+0x4d0>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	4a7e      	ldr	r2, [pc, #504]	; (8007b14 <HAL_RCC_OscConfig+0x4d0>)
 800791c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007920:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007922:	f7fc fff7 	bl	8004914 <HAL_GetTick>
 8007926:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007928:	e008      	b.n	800793c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800792a:	f7fc fff3 	bl	8004914 <HAL_GetTick>
 800792e:	4602      	mov	r2, r0
 8007930:	693b      	ldr	r3, [r7, #16]
 8007932:	1ad3      	subs	r3, r2, r3
 8007934:	2b64      	cmp	r3, #100	; 0x64
 8007936:	d901      	bls.n	800793c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8007938:	2303      	movs	r3, #3
 800793a:	e120      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800793c:	4b75      	ldr	r3, [pc, #468]	; (8007b14 <HAL_RCC_OscConfig+0x4d0>)
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007944:	2b00      	cmp	r3, #0
 8007946:	d0f0      	beq.n	800792a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	2b01      	cmp	r3, #1
 800794e:	d106      	bne.n	800795e <HAL_RCC_OscConfig+0x31a>
 8007950:	4b6f      	ldr	r3, [pc, #444]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007952:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007954:	4a6e      	ldr	r2, [pc, #440]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007956:	f043 0301 	orr.w	r3, r3, #1
 800795a:	6713      	str	r3, [r2, #112]	; 0x70
 800795c:	e02d      	b.n	80079ba <HAL_RCC_OscConfig+0x376>
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d10c      	bne.n	8007980 <HAL_RCC_OscConfig+0x33c>
 8007966:	4b6a      	ldr	r3, [pc, #424]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007968:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800796a:	4a69      	ldr	r2, [pc, #420]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	6713      	str	r3, [r2, #112]	; 0x70
 8007972:	4b67      	ldr	r3, [pc, #412]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007974:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007976:	4a66      	ldr	r2, [pc, #408]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007978:	f023 0304 	bic.w	r3, r3, #4
 800797c:	6713      	str	r3, [r2, #112]	; 0x70
 800797e:	e01c      	b.n	80079ba <HAL_RCC_OscConfig+0x376>
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	689b      	ldr	r3, [r3, #8]
 8007984:	2b05      	cmp	r3, #5
 8007986:	d10c      	bne.n	80079a2 <HAL_RCC_OscConfig+0x35e>
 8007988:	4b61      	ldr	r3, [pc, #388]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 800798a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800798c:	4a60      	ldr	r2, [pc, #384]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 800798e:	f043 0304 	orr.w	r3, r3, #4
 8007992:	6713      	str	r3, [r2, #112]	; 0x70
 8007994:	4b5e      	ldr	r3, [pc, #376]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007998:	4a5d      	ldr	r2, [pc, #372]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 800799a:	f043 0301 	orr.w	r3, r3, #1
 800799e:	6713      	str	r3, [r2, #112]	; 0x70
 80079a0:	e00b      	b.n	80079ba <HAL_RCC_OscConfig+0x376>
 80079a2:	4b5b      	ldr	r3, [pc, #364]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80079a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079a6:	4a5a      	ldr	r2, [pc, #360]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80079a8:	f023 0301 	bic.w	r3, r3, #1
 80079ac:	6713      	str	r3, [r2, #112]	; 0x70
 80079ae:	4b58      	ldr	r3, [pc, #352]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80079b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079b2:	4a57      	ldr	r2, [pc, #348]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80079b4:	f023 0304 	bic.w	r3, r3, #4
 80079b8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d015      	beq.n	80079ee <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c2:	f7fc ffa7 	bl	8004914 <HAL_GetTick>
 80079c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079c8:	e00a      	b.n	80079e0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079ca:	f7fc ffa3 	bl	8004914 <HAL_GetTick>
 80079ce:	4602      	mov	r2, r0
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	1ad3      	subs	r3, r2, r3
 80079d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d8:	4293      	cmp	r3, r2
 80079da:	d901      	bls.n	80079e0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80079dc:	2303      	movs	r3, #3
 80079de:	e0ce      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80079e0:	4b4b      	ldr	r3, [pc, #300]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 80079e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80079e4:	f003 0302 	and.w	r3, r3, #2
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d0ee      	beq.n	80079ca <HAL_RCC_OscConfig+0x386>
 80079ec:	e014      	b.n	8007a18 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079ee:	f7fc ff91 	bl	8004914 <HAL_GetTick>
 80079f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80079f4:	e00a      	b.n	8007a0c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80079f6:	f7fc ff8d 	bl	8004914 <HAL_GetTick>
 80079fa:	4602      	mov	r2, r0
 80079fc:	693b      	ldr	r3, [r7, #16]
 80079fe:	1ad3      	subs	r3, r2, r3
 8007a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a04:	4293      	cmp	r3, r2
 8007a06:	d901      	bls.n	8007a0c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8007a08:	2303      	movs	r3, #3
 8007a0a:	e0b8      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007a0c:	4b40      	ldr	r3, [pc, #256]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a10:	f003 0302 	and.w	r3, r3, #2
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d1ee      	bne.n	80079f6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007a18:	7dfb      	ldrb	r3, [r7, #23]
 8007a1a:	2b01      	cmp	r3, #1
 8007a1c:	d105      	bne.n	8007a2a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007a1e:	4b3c      	ldr	r3, [pc, #240]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a22:	4a3b      	ldr	r2, [pc, #236]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a24:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a28:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	699b      	ldr	r3, [r3, #24]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	f000 80a4 	beq.w	8007b7c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007a34:	4b36      	ldr	r3, [pc, #216]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a36:	689b      	ldr	r3, [r3, #8]
 8007a38:	f003 030c 	and.w	r3, r3, #12
 8007a3c:	2b08      	cmp	r3, #8
 8007a3e:	d06b      	beq.n	8007b18 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	699b      	ldr	r3, [r3, #24]
 8007a44:	2b02      	cmp	r3, #2
 8007a46:	d149      	bne.n	8007adc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a48:	4b31      	ldr	r3, [pc, #196]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	4a30      	ldr	r2, [pc, #192]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a4e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007a54:	f7fc ff5e 	bl	8004914 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007a5c:	f7fc ff5a 	bl	8004914 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e087      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007a6e:	4b28      	ldr	r3, [pc, #160]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	69da      	ldr	r2, [r3, #28]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6a1b      	ldr	r3, [r3, #32]
 8007a82:	431a      	orrs	r2, r3
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a88:	019b      	lsls	r3, r3, #6
 8007a8a:	431a      	orrs	r2, r3
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a90:	085b      	lsrs	r3, r3, #1
 8007a92:	3b01      	subs	r3, #1
 8007a94:	041b      	lsls	r3, r3, #16
 8007a96:	431a      	orrs	r2, r3
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9c:	061b      	lsls	r3, r3, #24
 8007a9e:	4313      	orrs	r3, r2
 8007aa0:	4a1b      	ldr	r2, [pc, #108]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007aa2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8007aa6:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007aa8:	4b19      	ldr	r3, [pc, #100]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	4a18      	ldr	r2, [pc, #96]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007aae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ab2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ab4:	f7fc ff2e 	bl	8004914 <HAL_GetTick>
 8007ab8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007aba:	e008      	b.n	8007ace <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007abc:	f7fc ff2a 	bl	8004914 <HAL_GetTick>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	693b      	ldr	r3, [r7, #16]
 8007ac4:	1ad3      	subs	r3, r2, r3
 8007ac6:	2b02      	cmp	r3, #2
 8007ac8:	d901      	bls.n	8007ace <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e057      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007ace:	4b10      	ldr	r3, [pc, #64]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d0f0      	beq.n	8007abc <HAL_RCC_OscConfig+0x478>
 8007ada:	e04f      	b.n	8007b7c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007adc:	4b0c      	ldr	r3, [pc, #48]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	4a0b      	ldr	r2, [pc, #44]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007ae2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007ae6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ae8:	f7fc ff14 	bl	8004914 <HAL_GetTick>
 8007aec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007aee:	e008      	b.n	8007b02 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007af0:	f7fc ff10 	bl	8004914 <HAL_GetTick>
 8007af4:	4602      	mov	r2, r0
 8007af6:	693b      	ldr	r3, [r7, #16]
 8007af8:	1ad3      	subs	r3, r2, r3
 8007afa:	2b02      	cmp	r3, #2
 8007afc:	d901      	bls.n	8007b02 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8007afe:	2303      	movs	r3, #3
 8007b00:	e03d      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b02:	4b03      	ldr	r3, [pc, #12]	; (8007b10 <HAL_RCC_OscConfig+0x4cc>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1f0      	bne.n	8007af0 <HAL_RCC_OscConfig+0x4ac>
 8007b0e:	e035      	b.n	8007b7c <HAL_RCC_OscConfig+0x538>
 8007b10:	40023800 	.word	0x40023800
 8007b14:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8007b18:	4b1b      	ldr	r3, [pc, #108]	; (8007b88 <HAL_RCC_OscConfig+0x544>)
 8007b1a:	685b      	ldr	r3, [r3, #4]
 8007b1c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	699b      	ldr	r3, [r3, #24]
 8007b22:	2b01      	cmp	r3, #1
 8007b24:	d028      	beq.n	8007b78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b26:	68fb      	ldr	r3, [r7, #12]
 8007b28:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007b30:	429a      	cmp	r2, r3
 8007b32:	d121      	bne.n	8007b78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d11a      	bne.n	8007b78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b42:	68fa      	ldr	r2, [r7, #12]
 8007b44:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007b48:	4013      	ands	r3, r2
 8007b4a:	687a      	ldr	r2, [r7, #4]
 8007b4c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007b4e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d111      	bne.n	8007b78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b5e:	085b      	lsrs	r3, r3, #1
 8007b60:	3b01      	subs	r3, #1
 8007b62:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d107      	bne.n	8007b78 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b72:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8007b74:	429a      	cmp	r2, r3
 8007b76:	d001      	beq.n	8007b7c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e000      	b.n	8007b7e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	4618      	mov	r0, r3
 8007b80:	3718      	adds	r7, #24
 8007b82:	46bd      	mov	sp, r7
 8007b84:	bd80      	pop	{r7, pc}
 8007b86:	bf00      	nop
 8007b88:	40023800 	.word	0x40023800

08007b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b084      	sub	sp, #16
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
 8007b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8007b96:	2300      	movs	r3, #0
 8007b98:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d101      	bne.n	8007ba4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8007ba0:	2301      	movs	r3, #1
 8007ba2:	e0d0      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ba4:	4b6a      	ldr	r3, [pc, #424]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	f003 030f 	and.w	r3, r3, #15
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	429a      	cmp	r2, r3
 8007bb0:	d910      	bls.n	8007bd4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007bb2:	4b67      	ldr	r3, [pc, #412]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f023 020f 	bic.w	r2, r3, #15
 8007bba:	4965      	ldr	r1, [pc, #404]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	4313      	orrs	r3, r2
 8007bc0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007bc2:	4b63      	ldr	r3, [pc, #396]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	f003 030f 	and.w	r3, r3, #15
 8007bca:	683a      	ldr	r2, [r7, #0]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d001      	beq.n	8007bd4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e0b8      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0302 	and.w	r3, r3, #2
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d020      	beq.n	8007c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	f003 0304 	and.w	r3, r3, #4
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d005      	beq.n	8007bf8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007bec:	4b59      	ldr	r3, [pc, #356]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007bee:	689b      	ldr	r3, [r3, #8]
 8007bf0:	4a58      	ldr	r2, [pc, #352]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007bf2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007bf6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0308 	and.w	r3, r3, #8
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d005      	beq.n	8007c10 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007c04:	4b53      	ldr	r3, [pc, #332]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c06:	689b      	ldr	r3, [r3, #8]
 8007c08:	4a52      	ldr	r2, [pc, #328]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c0a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007c0e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007c10:	4b50      	ldr	r3, [pc, #320]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	689b      	ldr	r3, [r3, #8]
 8007c1c:	494d      	ldr	r1, [pc, #308]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c1e:	4313      	orrs	r3, r2
 8007c20:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	f003 0301 	and.w	r3, r3, #1
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d040      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	685b      	ldr	r3, [r3, #4]
 8007c32:	2b01      	cmp	r3, #1
 8007c34:	d107      	bne.n	8007c46 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007c36:	4b47      	ldr	r3, [pc, #284]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d115      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	e07f      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
 8007c4a:	2b02      	cmp	r3, #2
 8007c4c:	d107      	bne.n	8007c5e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007c4e:	4b41      	ldr	r3, [pc, #260]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d109      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e073      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c5e:	4b3d      	ldr	r3, [pc, #244]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f003 0302 	and.w	r3, r3, #2
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d101      	bne.n	8007c6e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8007c6a:	2301      	movs	r3, #1
 8007c6c:	e06b      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007c6e:	4b39      	ldr	r3, [pc, #228]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c70:	689b      	ldr	r3, [r3, #8]
 8007c72:	f023 0203 	bic.w	r2, r3, #3
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	685b      	ldr	r3, [r3, #4]
 8007c7a:	4936      	ldr	r1, [pc, #216]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007c80:	f7fc fe48 	bl	8004914 <HAL_GetTick>
 8007c84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c86:	e00a      	b.n	8007c9e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c88:	f7fc fe44 	bl	8004914 <HAL_GetTick>
 8007c8c:	4602      	mov	r2, r0
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	1ad3      	subs	r3, r2, r3
 8007c92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c96:	4293      	cmp	r3, r2
 8007c98:	d901      	bls.n	8007c9e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8007c9a:	2303      	movs	r3, #3
 8007c9c:	e053      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007c9e:	4b2d      	ldr	r3, [pc, #180]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007ca0:	689b      	ldr	r3, [r3, #8]
 8007ca2:	f003 020c 	and.w	r2, r3, #12
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	685b      	ldr	r3, [r3, #4]
 8007caa:	009b      	lsls	r3, r3, #2
 8007cac:	429a      	cmp	r2, r3
 8007cae:	d1eb      	bne.n	8007c88 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007cb0:	4b27      	ldr	r3, [pc, #156]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 030f 	and.w	r3, r3, #15
 8007cb8:	683a      	ldr	r2, [r7, #0]
 8007cba:	429a      	cmp	r2, r3
 8007cbc:	d210      	bcs.n	8007ce0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007cbe:	4b24      	ldr	r3, [pc, #144]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	f023 020f 	bic.w	r2, r3, #15
 8007cc6:	4922      	ldr	r1, [pc, #136]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007cc8:	683b      	ldr	r3, [r7, #0]
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cce:	4b20      	ldr	r3, [pc, #128]	; (8007d50 <HAL_RCC_ClockConfig+0x1c4>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 030f 	and.w	r3, r3, #15
 8007cd6:	683a      	ldr	r2, [r7, #0]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d001      	beq.n	8007ce0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8007cdc:	2301      	movs	r3, #1
 8007cde:	e032      	b.n	8007d46 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f003 0304 	and.w	r3, r3, #4
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d008      	beq.n	8007cfe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cec:	4b19      	ldr	r3, [pc, #100]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007cee:	689b      	ldr	r3, [r3, #8]
 8007cf0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	4916      	ldr	r1, [pc, #88]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007cfa:	4313      	orrs	r3, r2
 8007cfc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d009      	beq.n	8007d1e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8007d0a:	4b12      	ldr	r3, [pc, #72]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	691b      	ldr	r3, [r3, #16]
 8007d16:	00db      	lsls	r3, r3, #3
 8007d18:	490e      	ldr	r1, [pc, #56]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007d1a:	4313      	orrs	r3, r2
 8007d1c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8007d1e:	f000 f821 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
 8007d22:	4602      	mov	r2, r0
 8007d24:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <HAL_RCC_ClockConfig+0x1c8>)
 8007d26:	689b      	ldr	r3, [r3, #8]
 8007d28:	091b      	lsrs	r3, r3, #4
 8007d2a:	f003 030f 	and.w	r3, r3, #15
 8007d2e:	490a      	ldr	r1, [pc, #40]	; (8007d58 <HAL_RCC_ClockConfig+0x1cc>)
 8007d30:	5ccb      	ldrb	r3, [r1, r3]
 8007d32:	fa22 f303 	lsr.w	r3, r2, r3
 8007d36:	4a09      	ldr	r2, [pc, #36]	; (8007d5c <HAL_RCC_ClockConfig+0x1d0>)
 8007d38:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8007d3a:	4b09      	ldr	r3, [pc, #36]	; (8007d60 <HAL_RCC_ClockConfig+0x1d4>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	4618      	mov	r0, r3
 8007d40:	f7fc fce8 	bl	8004714 <HAL_InitTick>

  return HAL_OK;
 8007d44:	2300      	movs	r3, #0
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3710      	adds	r7, #16
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40023c00 	.word	0x40023c00
 8007d54:	40023800 	.word	0x40023800
 8007d58:	0800fc44 	.word	0x0800fc44
 8007d5c:	20000048 	.word	0x20000048
 8007d60:	2000004c 	.word	0x2000004c

08007d64 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d64:	b5b0      	push	{r4, r5, r7, lr}
 8007d66:	b084      	sub	sp, #16
 8007d68:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8007d6a:	2100      	movs	r1, #0
 8007d6c:	6079      	str	r1, [r7, #4]
 8007d6e:	2100      	movs	r1, #0
 8007d70:	60f9      	str	r1, [r7, #12]
 8007d72:	2100      	movs	r1, #0
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0;
 8007d76:	2100      	movs	r1, #0
 8007d78:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007d7a:	4952      	ldr	r1, [pc, #328]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007d7c:	6889      	ldr	r1, [r1, #8]
 8007d7e:	f001 010c 	and.w	r1, r1, #12
 8007d82:	2908      	cmp	r1, #8
 8007d84:	d00d      	beq.n	8007da2 <HAL_RCC_GetSysClockFreq+0x3e>
 8007d86:	2908      	cmp	r1, #8
 8007d88:	f200 8094 	bhi.w	8007eb4 <HAL_RCC_GetSysClockFreq+0x150>
 8007d8c:	2900      	cmp	r1, #0
 8007d8e:	d002      	beq.n	8007d96 <HAL_RCC_GetSysClockFreq+0x32>
 8007d90:	2904      	cmp	r1, #4
 8007d92:	d003      	beq.n	8007d9c <HAL_RCC_GetSysClockFreq+0x38>
 8007d94:	e08e      	b.n	8007eb4 <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d96:	4b4c      	ldr	r3, [pc, #304]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007d98:	60bb      	str	r3, [r7, #8]
      break;
 8007d9a:	e08e      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007d9c:	4b4b      	ldr	r3, [pc, #300]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8007d9e:	60bb      	str	r3, [r7, #8]
      break;
 8007da0:	e08b      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007da2:	4948      	ldr	r1, [pc, #288]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007da4:	6849      	ldr	r1, [r1, #4]
 8007da6:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8007daa:	6079      	str	r1, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8007dac:	4945      	ldr	r1, [pc, #276]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007dae:	6849      	ldr	r1, [r1, #4]
 8007db0:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 8007db4:	2900      	cmp	r1, #0
 8007db6:	d024      	beq.n	8007e02 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007db8:	4942      	ldr	r1, [pc, #264]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007dba:	6849      	ldr	r1, [r1, #4]
 8007dbc:	0989      	lsrs	r1, r1, #6
 8007dbe:	4608      	mov	r0, r1
 8007dc0:	f04f 0100 	mov.w	r1, #0
 8007dc4:	f240 14ff 	movw	r4, #511	; 0x1ff
 8007dc8:	f04f 0500 	mov.w	r5, #0
 8007dcc:	ea00 0204 	and.w	r2, r0, r4
 8007dd0:	ea01 0305 	and.w	r3, r1, r5
 8007dd4:	493d      	ldr	r1, [pc, #244]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8007dd6:	fb01 f003 	mul.w	r0, r1, r3
 8007dda:	2100      	movs	r1, #0
 8007ddc:	fb01 f102 	mul.w	r1, r1, r2
 8007de0:	1844      	adds	r4, r0, r1
 8007de2:	493a      	ldr	r1, [pc, #232]	; (8007ecc <HAL_RCC_GetSysClockFreq+0x168>)
 8007de4:	fba2 0101 	umull	r0, r1, r2, r1
 8007de8:	1863      	adds	r3, r4, r1
 8007dea:	4619      	mov	r1, r3
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	461a      	mov	r2, r3
 8007df0:	f04f 0300 	mov.w	r3, #0
 8007df4:	f7f8 fa0c 	bl	8000210 <__aeabi_uldivmod>
 8007df8:	4602      	mov	r2, r0
 8007dfa:	460b      	mov	r3, r1
 8007dfc:	4613      	mov	r3, r2
 8007dfe:	60fb      	str	r3, [r7, #12]
 8007e00:	e04a      	b.n	8007e98 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e02:	4b30      	ldr	r3, [pc, #192]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e04:	685b      	ldr	r3, [r3, #4]
 8007e06:	099b      	lsrs	r3, r3, #6
 8007e08:	461a      	mov	r2, r3
 8007e0a:	f04f 0300 	mov.w	r3, #0
 8007e0e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007e12:	f04f 0100 	mov.w	r1, #0
 8007e16:	ea02 0400 	and.w	r4, r2, r0
 8007e1a:	ea03 0501 	and.w	r5, r3, r1
 8007e1e:	4620      	mov	r0, r4
 8007e20:	4629      	mov	r1, r5
 8007e22:	f04f 0200 	mov.w	r2, #0
 8007e26:	f04f 0300 	mov.w	r3, #0
 8007e2a:	014b      	lsls	r3, r1, #5
 8007e2c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007e30:	0142      	lsls	r2, r0, #5
 8007e32:	4610      	mov	r0, r2
 8007e34:	4619      	mov	r1, r3
 8007e36:	1b00      	subs	r0, r0, r4
 8007e38:	eb61 0105 	sbc.w	r1, r1, r5
 8007e3c:	f04f 0200 	mov.w	r2, #0
 8007e40:	f04f 0300 	mov.w	r3, #0
 8007e44:	018b      	lsls	r3, r1, #6
 8007e46:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007e4a:	0182      	lsls	r2, r0, #6
 8007e4c:	1a12      	subs	r2, r2, r0
 8007e4e:	eb63 0301 	sbc.w	r3, r3, r1
 8007e52:	f04f 0000 	mov.w	r0, #0
 8007e56:	f04f 0100 	mov.w	r1, #0
 8007e5a:	00d9      	lsls	r1, r3, #3
 8007e5c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e60:	00d0      	lsls	r0, r2, #3
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	1912      	adds	r2, r2, r4
 8007e68:	eb45 0303 	adc.w	r3, r5, r3
 8007e6c:	f04f 0000 	mov.w	r0, #0
 8007e70:	f04f 0100 	mov.w	r1, #0
 8007e74:	0299      	lsls	r1, r3, #10
 8007e76:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007e7a:	0290      	lsls	r0, r2, #10
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	460b      	mov	r3, r1
 8007e80:	4610      	mov	r0, r2
 8007e82:	4619      	mov	r1, r3
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	461a      	mov	r2, r3
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	f7f8 f9c0 	bl	8000210 <__aeabi_uldivmod>
 8007e90:	4602      	mov	r2, r0
 8007e92:	460b      	mov	r3, r1
 8007e94:	4613      	mov	r3, r2
 8007e96:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8007e98:	4b0a      	ldr	r3, [pc, #40]	; (8007ec4 <HAL_RCC_GetSysClockFreq+0x160>)
 8007e9a:	685b      	ldr	r3, [r3, #4]
 8007e9c:	0c1b      	lsrs	r3, r3, #16
 8007e9e:	f003 0303 	and.w	r3, r3, #3
 8007ea2:	3301      	adds	r3, #1
 8007ea4:	005b      	lsls	r3, r3, #1
 8007ea6:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8007ea8:	68fa      	ldr	r2, [r7, #12]
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eb0:	60bb      	str	r3, [r7, #8]
      break;
 8007eb2:	e002      	b.n	8007eba <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007eb4:	4b04      	ldr	r3, [pc, #16]	; (8007ec8 <HAL_RCC_GetSysClockFreq+0x164>)
 8007eb6:	60bb      	str	r3, [r7, #8]
      break;
 8007eb8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007eba:	68bb      	ldr	r3, [r7, #8]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	3710      	adds	r7, #16
 8007ec0:	46bd      	mov	sp, r7
 8007ec2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ec4:	40023800 	.word	0x40023800
 8007ec8:	00f42400 	.word	0x00f42400
 8007ecc:	017d7840 	.word	0x017d7840

08007ed0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007ed4:	4b03      	ldr	r3, [pc, #12]	; (8007ee4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007ed6:	681b      	ldr	r3, [r3, #0]
}
 8007ed8:	4618      	mov	r0, r3
 8007eda:	46bd      	mov	sp, r7
 8007edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ee0:	4770      	bx	lr
 8007ee2:	bf00      	nop
 8007ee4:	20000048 	.word	0x20000048

08007ee8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ee8:	b580      	push	{r7, lr}
 8007eea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007eec:	f7ff fff0 	bl	8007ed0 <HAL_RCC_GetHCLKFreq>
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	4b05      	ldr	r3, [pc, #20]	; (8007f08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ef4:	689b      	ldr	r3, [r3, #8]
 8007ef6:	0a9b      	lsrs	r3, r3, #10
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	4903      	ldr	r1, [pc, #12]	; (8007f0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007efe:	5ccb      	ldrb	r3, [r1, r3]
 8007f00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f04:	4618      	mov	r0, r3
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40023800 	.word	0x40023800
 8007f0c:	0800fc54 	.word	0x0800fc54

08007f10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8007f14:	f7ff ffdc 	bl	8007ed0 <HAL_RCC_GetHCLKFreq>
 8007f18:	4602      	mov	r2, r0
 8007f1a:	4b05      	ldr	r3, [pc, #20]	; (8007f30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	0b5b      	lsrs	r3, r3, #13
 8007f20:	f003 0307 	and.w	r3, r3, #7
 8007f24:	4903      	ldr	r1, [pc, #12]	; (8007f34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007f26:	5ccb      	ldrb	r3, [r1, r3]
 8007f28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007f2c:	4618      	mov	r0, r3
 8007f2e:	bd80      	pop	{r7, pc}
 8007f30:	40023800 	.word	0x40023800
 8007f34:	0800fc54 	.word	0x0800fc54

08007f38 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007f38:	b480      	push	{r7}
 8007f3a:	b083      	sub	sp, #12
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	6078      	str	r0, [r7, #4]
 8007f40:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	220f      	movs	r2, #15
 8007f46:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007f48:	4b12      	ldr	r3, [pc, #72]	; (8007f94 <HAL_RCC_GetClockConfig+0x5c>)
 8007f4a:	689b      	ldr	r3, [r3, #8]
 8007f4c:	f003 0203 	and.w	r2, r3, #3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007f54:	4b0f      	ldr	r3, [pc, #60]	; (8007f94 <HAL_RCC_GetClockConfig+0x5c>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8007f60:	4b0c      	ldr	r3, [pc, #48]	; (8007f94 <HAL_RCC_GetClockConfig+0x5c>)
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8007f6c:	4b09      	ldr	r3, [pc, #36]	; (8007f94 <HAL_RCC_GetClockConfig+0x5c>)
 8007f6e:	689b      	ldr	r3, [r3, #8]
 8007f70:	08db      	lsrs	r3, r3, #3
 8007f72:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007f7a:	4b07      	ldr	r3, [pc, #28]	; (8007f98 <HAL_RCC_GetClockConfig+0x60>)
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	f003 020f 	and.w	r2, r3, #15
 8007f82:	683b      	ldr	r3, [r7, #0]
 8007f84:	601a      	str	r2, [r3, #0]
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr
 8007f92:	bf00      	nop
 8007f94:	40023800 	.word	0x40023800
 8007f98:	40023c00 	.word	0x40023c00

08007f9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007f9c:	b580      	push	{r7, lr}
 8007f9e:	b088      	sub	sp, #32
 8007fa0:	af00      	add	r7, sp, #0
 8007fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8007fa4:	2300      	movs	r3, #0
 8007fa6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8007fa8:	2300      	movs	r3, #0
 8007faa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8007fac:	2300      	movs	r3, #0
 8007fae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8007fb0:	2300      	movs	r3, #0
 8007fb2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8007fb4:	2300      	movs	r3, #0
 8007fb6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f003 0301 	and.w	r3, r3, #1
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d012      	beq.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8007fc4:	4b69      	ldr	r3, [pc, #420]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fc6:	689b      	ldr	r3, [r3, #8]
 8007fc8:	4a68      	ldr	r2, [pc, #416]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007fce:	6093      	str	r3, [r2, #8]
 8007fd0:	4b66      	ldr	r3, [pc, #408]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fd2:	689a      	ldr	r2, [r3, #8]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fd8:	4964      	ldr	r1, [pc, #400]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007fe2:	2b00      	cmp	r3, #0
 8007fe4:	d101      	bne.n	8007fea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8007fe6:	2301      	movs	r3, #1
 8007fe8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d017      	beq.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ff6:	4b5d      	ldr	r3, [pc, #372]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8007ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008004:	4959      	ldr	r1, [pc, #356]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008006:	4313      	orrs	r3, r2
 8008008:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008010:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008014:	d101      	bne.n	800801a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008016:	2301      	movs	r3, #1
 8008018:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d101      	bne.n	8008026 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008022:	2301      	movs	r3, #1
 8008024:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800802e:	2b00      	cmp	r3, #0
 8008030:	d017      	beq.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008032:	4b4e      	ldr	r3, [pc, #312]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008038:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008040:	494a      	ldr	r1, [pc, #296]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008042:	4313      	orrs	r3, r2
 8008044:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800804c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008050:	d101      	bne.n	8008056 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008052:	2301      	movs	r3, #1
 8008054:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800805a:	2b00      	cmp	r3, #0
 800805c:	d101      	bne.n	8008062 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800805e:	2301      	movs	r3, #1
 8008060:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800806a:	2b00      	cmp	r3, #0
 800806c:	d001      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800806e:	2301      	movs	r3, #1
 8008070:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f003 0320 	and.w	r3, r3, #32
 800807a:	2b00      	cmp	r3, #0
 800807c:	f000 808b 	beq.w	8008196 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008080:	4b3a      	ldr	r3, [pc, #232]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008082:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008084:	4a39      	ldr	r2, [pc, #228]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008086:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800808a:	6413      	str	r3, [r2, #64]	; 0x40
 800808c:	4b37      	ldr	r3, [pc, #220]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800808e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008090:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008094:	60bb      	str	r3, [r7, #8]
 8008096:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8008098:	4b35      	ldr	r3, [pc, #212]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	4a34      	ldr	r2, [pc, #208]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800809e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80080a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80080a4:	f7fc fc36 	bl	8004914 <HAL_GetTick>
 80080a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080aa:	e008      	b.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80080ac:	f7fc fc32 	bl	8004914 <HAL_GetTick>
 80080b0:	4602      	mov	r2, r0
 80080b2:	697b      	ldr	r3, [r7, #20]
 80080b4:	1ad3      	subs	r3, r2, r3
 80080b6:	2b64      	cmp	r3, #100	; 0x64
 80080b8:	d901      	bls.n	80080be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80080ba:	2303      	movs	r3, #3
 80080bc:	e355      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80080be:	4b2c      	ldr	r3, [pc, #176]	; (8008170 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	d0f0      	beq.n	80080ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80080ca:	4b28      	ldr	r3, [pc, #160]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80080d4:	693b      	ldr	r3, [r7, #16]
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d035      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80080e2:	693a      	ldr	r2, [r7, #16]
 80080e4:	429a      	cmp	r2, r3
 80080e6:	d02e      	beq.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80080e8:	4b20      	ldr	r3, [pc, #128]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80080f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80080f2:	4b1e      	ldr	r3, [pc, #120]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080f6:	4a1d      	ldr	r2, [pc, #116]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80080f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80080fe:	4b1b      	ldr	r3, [pc, #108]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008100:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008102:	4a1a      	ldr	r2, [pc, #104]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008104:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008108:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800810a:	4a18      	ldr	r2, [pc, #96]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8008110:	4b16      	ldr	r3, [pc, #88]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008112:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008114:	f003 0301 	and.w	r3, r3, #1
 8008118:	2b01      	cmp	r3, #1
 800811a:	d114      	bne.n	8008146 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800811c:	f7fc fbfa 	bl	8004914 <HAL_GetTick>
 8008120:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008122:	e00a      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008124:	f7fc fbf6 	bl	8004914 <HAL_GetTick>
 8008128:	4602      	mov	r2, r0
 800812a:	697b      	ldr	r3, [r7, #20]
 800812c:	1ad3      	subs	r3, r2, r3
 800812e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008132:	4293      	cmp	r3, r2
 8008134:	d901      	bls.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8008136:	2303      	movs	r3, #3
 8008138:	e317      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800813a:	4b0c      	ldr	r3, [pc, #48]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800813c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800813e:	f003 0302 	and.w	r3, r3, #2
 8008142:	2b00      	cmp	r3, #0
 8008144:	d0ee      	beq.n	8008124 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800814a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800814e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008152:	d111      	bne.n	8008178 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008156:	689b      	ldr	r3, [r3, #8]
 8008158:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8008160:	4b04      	ldr	r3, [pc, #16]	; (8008174 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8008162:	400b      	ands	r3, r1
 8008164:	4901      	ldr	r1, [pc, #4]	; (800816c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008166:	4313      	orrs	r3, r2
 8008168:	608b      	str	r3, [r1, #8]
 800816a:	e00b      	b.n	8008184 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800816c:	40023800 	.word	0x40023800
 8008170:	40007000 	.word	0x40007000
 8008174:	0ffffcff 	.word	0x0ffffcff
 8008178:	4bb0      	ldr	r3, [pc, #704]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800817a:	689b      	ldr	r3, [r3, #8]
 800817c:	4aaf      	ldr	r2, [pc, #700]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800817e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8008182:	6093      	str	r3, [r2, #8]
 8008184:	4bad      	ldr	r3, [pc, #692]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008186:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800818c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008190:	49aa      	ldr	r1, [pc, #680]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008192:	4313      	orrs	r3, r2
 8008194:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	f003 0310 	and.w	r3, r3, #16
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d010      	beq.n	80081c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80081a2:	4ba6      	ldr	r3, [pc, #664]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a8:	4aa4      	ldr	r2, [pc, #656]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80081b2:	4ba2      	ldr	r3, [pc, #648]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80081bc:	499f      	ldr	r1, [pc, #636]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081be:	4313      	orrs	r3, r2
 80081c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d00a      	beq.n	80081e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80081d0:	4b9a      	ldr	r3, [pc, #616]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80081de:	4997      	ldr	r1, [pc, #604]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081e0:	4313      	orrs	r3, r2
 80081e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d00a      	beq.n	8008208 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80081f2:	4b92      	ldr	r3, [pc, #584]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80081f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80081f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8008200:	498e      	ldr	r1, [pc, #568]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008202:	4313      	orrs	r3, r2
 8008204:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008210:	2b00      	cmp	r3, #0
 8008212:	d00a      	beq.n	800822a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008214:	4b89      	ldr	r3, [pc, #548]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008216:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800821a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008222:	4986      	ldr	r1, [pc, #536]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008224:	4313      	orrs	r3, r2
 8008226:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	681b      	ldr	r3, [r3, #0]
 800822e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00a      	beq.n	800824c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8008236:	4b81      	ldr	r3, [pc, #516]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008238:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800823c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008244:	497d      	ldr	r1, [pc, #500]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008246:	4313      	orrs	r3, r2
 8008248:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008254:	2b00      	cmp	r3, #0
 8008256:	d00a      	beq.n	800826e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008258:	4b78      	ldr	r3, [pc, #480]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800825a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800825e:	f023 0203 	bic.w	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008266:	4975      	ldr	r1, [pc, #468]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008268:	4313      	orrs	r3, r2
 800826a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	681b      	ldr	r3, [r3, #0]
 8008272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00a      	beq.n	8008290 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800827a:	4b70      	ldr	r3, [pc, #448]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800827c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008280:	f023 020c 	bic.w	r2, r3, #12
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8008288:	496c      	ldr	r1, [pc, #432]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800828a:	4313      	orrs	r3, r2
 800828c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008298:	2b00      	cmp	r3, #0
 800829a:	d00a      	beq.n	80082b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800829c:	4b67      	ldr	r3, [pc, #412]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800829e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80082aa:	4964      	ldr	r1, [pc, #400]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ac:	4313      	orrs	r3, r2
 80082ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082ba:	2b00      	cmp	r3, #0
 80082bc:	d00a      	beq.n	80082d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80082be:	4b5f      	ldr	r3, [pc, #380]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80082cc:	495b      	ldr	r1, [pc, #364]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082ce:	4313      	orrs	r3, r2
 80082d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d00a      	beq.n	80082f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80082e0:	4b56      	ldr	r3, [pc, #344]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80082e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082ee:	4953      	ldr	r1, [pc, #332]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80082f0:	4313      	orrs	r3, r2
 80082f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d00a      	beq.n	8008318 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8008302:	4b4e      	ldr	r3, [pc, #312]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008304:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008308:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008310:	494a      	ldr	r1, [pc, #296]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008312:	4313      	orrs	r3, r2
 8008314:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008320:	2b00      	cmp	r3, #0
 8008322:	d00a      	beq.n	800833a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8008324:	4b45      	ldr	r3, [pc, #276]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008326:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800832a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008332:	4942      	ldr	r1, [pc, #264]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008334:	4313      	orrs	r3, r2
 8008336:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800833a:	687b      	ldr	r3, [r7, #4]
 800833c:	681b      	ldr	r3, [r3, #0]
 800833e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008342:	2b00      	cmp	r3, #0
 8008344:	d00a      	beq.n	800835c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8008346:	4b3d      	ldr	r3, [pc, #244]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008348:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800834c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008354:	4939      	ldr	r1, [pc, #228]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008356:	4313      	orrs	r3, r2
 8008358:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008364:	2b00      	cmp	r3, #0
 8008366:	d00a      	beq.n	800837e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8008368:	4b34      	ldr	r3, [pc, #208]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800836a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800836e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008376:	4931      	ldr	r1, [pc, #196]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008378:	4313      	orrs	r3, r2
 800837a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008386:	2b00      	cmp	r3, #0
 8008388:	d011      	beq.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800838a:	4b2c      	ldr	r3, [pc, #176]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800838c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008390:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008398:	4928      	ldr	r1, [pc, #160]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800839a:	4313      	orrs	r3, r2
 800839c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80083a8:	d101      	bne.n	80083ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80083aa:	2301      	movs	r3, #1
 80083ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	681b      	ldr	r3, [r3, #0]
 80083b2:	f003 0308 	and.w	r3, r3, #8
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d001      	beq.n	80083be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80083ba:	2301      	movs	r3, #1
 80083bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d00a      	beq.n	80083e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80083ca:	4b1c      	ldr	r3, [pc, #112]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80083d8:	4918      	ldr	r1, [pc, #96]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083da:	4313      	orrs	r3, r2
 80083dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	d00b      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80083ec:	4b13      	ldr	r3, [pc, #76]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80083f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80083fc:	490f      	ldr	r1, [pc, #60]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80083fe:	4313      	orrs	r3, r2
 8008400:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8008404:	69fb      	ldr	r3, [r7, #28]
 8008406:	2b01      	cmp	r3, #1
 8008408:	d005      	beq.n	8008416 <HAL_RCCEx_PeriphCLKConfig+0x47a>
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008412:	f040 80d8 	bne.w	80085c6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008416:	4b09      	ldr	r3, [pc, #36]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a08      	ldr	r2, [pc, #32]	; (800843c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800841c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008420:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008422:	f7fc fa77 	bl	8004914 <HAL_GetTick>
 8008426:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008428:	e00a      	b.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800842a:	f7fc fa73 	bl	8004914 <HAL_GetTick>
 800842e:	4602      	mov	r2, r0
 8008430:	697b      	ldr	r3, [r7, #20]
 8008432:	1ad3      	subs	r3, r2, r3
 8008434:	2b64      	cmp	r3, #100	; 0x64
 8008436:	d903      	bls.n	8008440 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008438:	2303      	movs	r3, #3
 800843a:	e196      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 800843c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8008440:	4b6c      	ldr	r3, [pc, #432]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008448:	2b00      	cmp	r3, #0
 800844a:	d1ee      	bne.n	800842a <HAL_RCCEx_PeriphCLKConfig+0x48e>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f003 0301 	and.w	r3, r3, #1
 8008454:	2b00      	cmp	r3, #0
 8008456:	d021      	beq.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x500>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800845c:	2b00      	cmp	r3, #0
 800845e:	d11d      	bne.n	800849c <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8008460:	4b64      	ldr	r3, [pc, #400]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008466:	0c1b      	lsrs	r3, r3, #16
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800846e:	4b61      	ldr	r3, [pc, #388]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008474:	0e1b      	lsrs	r3, r3, #24
 8008476:	f003 030f 	and.w	r3, r3, #15
 800847a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	685b      	ldr	r3, [r3, #4]
 8008480:	019a      	lsls	r2, r3, #6
 8008482:	693b      	ldr	r3, [r7, #16]
 8008484:	041b      	lsls	r3, r3, #16
 8008486:	431a      	orrs	r2, r3
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	061b      	lsls	r3, r3, #24
 800848c:	431a      	orrs	r2, r3
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	689b      	ldr	r3, [r3, #8]
 8008492:	071b      	lsls	r3, r3, #28
 8008494:	4957      	ldr	r1, [pc, #348]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008496:	4313      	orrs	r3, r2
 8008498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d004      	beq.n	80084b2 <HAL_RCCEx_PeriphCLKConfig+0x516>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80084ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80084b0:	d00a      	beq.n	80084c8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d02e      	beq.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x580>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084c6:	d129      	bne.n	800851c <HAL_RCCEx_PeriphCLKConfig+0x580>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80084c8:	4b4a      	ldr	r3, [pc, #296]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084ce:	0c1b      	lsrs	r3, r3, #16
 80084d0:	f003 0303 	and.w	r3, r3, #3
 80084d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80084d6:	4b47      	ldr	r3, [pc, #284]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084dc:	0f1b      	lsrs	r3, r3, #28
 80084de:	f003 0307 	and.w	r3, r3, #7
 80084e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	019a      	lsls	r2, r3, #6
 80084ea:	693b      	ldr	r3, [r7, #16]
 80084ec:	041b      	lsls	r3, r3, #16
 80084ee:	431a      	orrs	r2, r3
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	68db      	ldr	r3, [r3, #12]
 80084f4:	061b      	lsls	r3, r3, #24
 80084f6:	431a      	orrs	r2, r3
 80084f8:	68fb      	ldr	r3, [r7, #12]
 80084fa:	071b      	lsls	r3, r3, #28
 80084fc:	493d      	ldr	r1, [pc, #244]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80084fe:	4313      	orrs	r3, r2
 8008500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8008504:	4b3b      	ldr	r3, [pc, #236]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800850a:	f023 021f 	bic.w	r2, r3, #31
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008512:	3b01      	subs	r3, #1
 8008514:	4937      	ldr	r1, [pc, #220]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008524:	2b00      	cmp	r3, #0
 8008526:	d01d      	beq.n	8008564 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8008528:	4b32      	ldr	r3, [pc, #200]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800852a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800852e:	0e1b      	lsrs	r3, r3, #24
 8008530:	f003 030f 	and.w	r3, r3, #15
 8008534:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8008536:	4b2f      	ldr	r3, [pc, #188]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853c:	0f1b      	lsrs	r3, r3, #28
 800853e:	f003 0307 	and.w	r3, r3, #7
 8008542:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	685b      	ldr	r3, [r3, #4]
 8008548:	019a      	lsls	r2, r3, #6
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	691b      	ldr	r3, [r3, #16]
 800854e:	041b      	lsls	r3, r3, #16
 8008550:	431a      	orrs	r2, r3
 8008552:	693b      	ldr	r3, [r7, #16]
 8008554:	061b      	lsls	r3, r3, #24
 8008556:	431a      	orrs	r2, r3
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	071b      	lsls	r3, r3, #28
 800855c:	4925      	ldr	r1, [pc, #148]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800855e:	4313      	orrs	r3, r2
 8008560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800856c:	2b00      	cmp	r3, #0
 800856e:	d011      	beq.n	8008594 <HAL_RCCEx_PeriphCLKConfig+0x5f8>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
 8008574:	019a      	lsls	r2, r3, #6
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	691b      	ldr	r3, [r3, #16]
 800857a:	041b      	lsls	r3, r3, #16
 800857c:	431a      	orrs	r2, r3
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	68db      	ldr	r3, [r3, #12]
 8008582:	061b      	lsls	r3, r3, #24
 8008584:	431a      	orrs	r2, r3
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	689b      	ldr	r3, [r3, #8]
 800858a:	071b      	lsls	r3, r3, #28
 800858c:	4919      	ldr	r1, [pc, #100]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800858e:	4313      	orrs	r3, r2
 8008590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8008594:	4b17      	ldr	r3, [pc, #92]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a16      	ldr	r2, [pc, #88]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 800859a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800859e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085a0:	f7fc f9b8 	bl	8004914 <HAL_GetTick>
 80085a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085a6:	e008      	b.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80085a8:	f7fc f9b4 	bl	8004914 <HAL_GetTick>
 80085ac:	4602      	mov	r2, r0
 80085ae:	697b      	ldr	r3, [r7, #20]
 80085b0:	1ad3      	subs	r3, r2, r3
 80085b2:	2b64      	cmp	r3, #100	; 0x64
 80085b4:	d901      	bls.n	80085ba <HAL_RCCEx_PeriphCLKConfig+0x61e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085b6:	2303      	movs	r3, #3
 80085b8:	e0d7      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80085ba:	4b0e      	ldr	r3, [pc, #56]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	d0f0      	beq.n	80085a8 <HAL_RCCEx_PeriphCLKConfig+0x60c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80085c6:	69bb      	ldr	r3, [r7, #24]
 80085c8:	2b01      	cmp	r3, #1
 80085ca:	f040 80cd 	bne.w	8008768 <HAL_RCCEx_PeriphCLKConfig+0x7cc>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80085ce:	4b09      	ldr	r3, [pc, #36]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a08      	ldr	r2, [pc, #32]	; (80085f4 <HAL_RCCEx_PeriphCLKConfig+0x658>)
 80085d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80085d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80085da:	f7fc f99b 	bl	8004914 <HAL_GetTick>
 80085de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085e0:	e00a      	b.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80085e2:	f7fc f997 	bl	8004914 <HAL_GetTick>
 80085e6:	4602      	mov	r2, r0
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	1ad3      	subs	r3, r2, r3
 80085ec:	2b64      	cmp	r3, #100	; 0x64
 80085ee:	d903      	bls.n	80085f8 <HAL_RCCEx_PeriphCLKConfig+0x65c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80085f0:	2303      	movs	r3, #3
 80085f2:	e0ba      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
 80085f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80085f8:	4b5e      	ldr	r3, [pc, #376]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008604:	d0ed      	beq.n	80085e2 <HAL_RCCEx_PeriphCLKConfig+0x646>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d003      	beq.n	800861a <HAL_RCCEx_PeriphCLKConfig+0x67e>
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008616:	2b00      	cmp	r3, #0
 8008618:	d009      	beq.n	800862e <HAL_RCCEx_PeriphCLKConfig+0x692>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8008622:	2b00      	cmp	r3, #0
 8008624:	d02e      	beq.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800862a:	2b00      	cmp	r3, #0
 800862c:	d12a      	bne.n	8008684 <HAL_RCCEx_PeriphCLKConfig+0x6e8>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800862e:	4b51      	ldr	r3, [pc, #324]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008634:	0c1b      	lsrs	r3, r3, #16
 8008636:	f003 0303 	and.w	r3, r3, #3
 800863a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800863c:	4b4d      	ldr	r3, [pc, #308]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800863e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008642:	0f1b      	lsrs	r3, r3, #28
 8008644:	f003 0307 	and.w	r3, r3, #7
 8008648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	695b      	ldr	r3, [r3, #20]
 800864e:	019a      	lsls	r2, r3, #6
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	041b      	lsls	r3, r3, #16
 8008654:	431a      	orrs	r2, r3
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	699b      	ldr	r3, [r3, #24]
 800865a:	061b      	lsls	r3, r3, #24
 800865c:	431a      	orrs	r2, r3
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	071b      	lsls	r3, r3, #28
 8008662:	4944      	ldr	r1, [pc, #272]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008664:	4313      	orrs	r3, r2
 8008666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800866a:	4b42      	ldr	r3, [pc, #264]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800866c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008678:	3b01      	subs	r3, #1
 800867a:	021b      	lsls	r3, r3, #8
 800867c:	493d      	ldr	r1, [pc, #244]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800867e:	4313      	orrs	r3, r2
 8008680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800868c:	2b00      	cmp	r3, #0
 800868e:	d022      	beq.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008698:	d11d      	bne.n	80086d6 <HAL_RCCEx_PeriphCLKConfig+0x73a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800869a:	4b36      	ldr	r3, [pc, #216]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800869c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086a0:	0e1b      	lsrs	r3, r3, #24
 80086a2:	f003 030f 	and.w	r3, r3, #15
 80086a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80086a8:	4b32      	ldr	r3, [pc, #200]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086ae:	0f1b      	lsrs	r3, r3, #28
 80086b0:	f003 0307 	and.w	r3, r3, #7
 80086b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	695b      	ldr	r3, [r3, #20]
 80086ba:	019a      	lsls	r2, r3, #6
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6a1b      	ldr	r3, [r3, #32]
 80086c0:	041b      	lsls	r3, r3, #16
 80086c2:	431a      	orrs	r2, r3
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	061b      	lsls	r3, r3, #24
 80086c8:	431a      	orrs	r2, r3
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	071b      	lsls	r3, r3, #28
 80086ce:	4929      	ldr	r1, [pc, #164]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086d0:	4313      	orrs	r3, r2
 80086d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f003 0308 	and.w	r3, r3, #8
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d028      	beq.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x798>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80086e2:	4b24      	ldr	r3, [pc, #144]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e8:	0e1b      	lsrs	r3, r3, #24
 80086ea:	f003 030f 	and.w	r3, r3, #15
 80086ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80086f0:	4b20      	ldr	r3, [pc, #128]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 80086f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f6:	0c1b      	lsrs	r3, r3, #16
 80086f8:	f003 0303 	and.w	r3, r3, #3
 80086fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	695b      	ldr	r3, [r3, #20]
 8008702:	019a      	lsls	r2, r3, #6
 8008704:	68fb      	ldr	r3, [r7, #12]
 8008706:	041b      	lsls	r3, r3, #16
 8008708:	431a      	orrs	r2, r3
 800870a:	693b      	ldr	r3, [r7, #16]
 800870c:	061b      	lsls	r3, r3, #24
 800870e:	431a      	orrs	r2, r3
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	69db      	ldr	r3, [r3, #28]
 8008714:	071b      	lsls	r3, r3, #28
 8008716:	4917      	ldr	r1, [pc, #92]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008718:	4313      	orrs	r3, r2
 800871a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800871e:	4b15      	ldr	r3, [pc, #84]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8008728:	687b      	ldr	r3, [r7, #4]
 800872a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800872c:	4911      	ldr	r1, [pc, #68]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800872e:	4313      	orrs	r3, r2
 8008730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008734:	4b0f      	ldr	r3, [pc, #60]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	4a0e      	ldr	r2, [pc, #56]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800873a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800873e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008740:	f7fc f8e8 	bl	8004914 <HAL_GetTick>
 8008744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008746:	e008      	b.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x7be>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8008748:	f7fc f8e4 	bl	8004914 <HAL_GetTick>
 800874c:	4602      	mov	r2, r0
 800874e:	697b      	ldr	r3, [r7, #20]
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	2b64      	cmp	r3, #100	; 0x64
 8008754:	d901      	bls.n	800875a <HAL_RCCEx_PeriphCLKConfig+0x7be>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008756:	2303      	movs	r3, #3
 8008758:	e007      	b.n	800876a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800875a:	4b06      	ldr	r3, [pc, #24]	; (8008774 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008766:	d1ef      	bne.n	8008748 <HAL_RCCEx_PeriphCLKConfig+0x7ac>
      }
    }
  }
  return HAL_OK;
 8008768:	2300      	movs	r3, #0
}
 800876a:	4618      	mov	r0, r3
 800876c:	3720      	adds	r7, #32
 800876e:	46bd      	mov	sp, r7
 8008770:	bd80      	pop	{r7, pc}
 8008772:	bf00      	nop
 8008774:	40023800 	.word	0x40023800

08008778 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b082      	sub	sp, #8
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if(hrtc == NULL)
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d101      	bne.n	800878a <HAL_RTC_Init+0x12>
  {
     return HAL_ERROR;
 8008786:	2301      	movs	r3, #1
 8008788:	e06b      	b.n	8008862 <HAL_RTC_Init+0xea>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if(hrtc->State == HAL_RTC_STATE_RESET)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	7f5b      	ldrb	r3, [r3, #29]
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d105      	bne.n	80087a0 <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2200      	movs	r2, #0
 8008798:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f7fb fd18 	bl	80041d0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2202      	movs	r2, #2
 80087a4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	22ca      	movs	r2, #202	; 0xca
 80087ac:	625a      	str	r2, [r3, #36]	; 0x24
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2253      	movs	r2, #83	; 0x53
 80087b4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 80087b6:	6878      	ldr	r0, [r7, #4]
 80087b8:	f000 fb00 	bl	8008dbc <RTC_EnterInitMode>
 80087bc:	4603      	mov	r3, r0
 80087be:	2b00      	cmp	r3, #0
 80087c0:	d008      	beq.n	80087d4 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	22ff      	movs	r2, #255	; 0xff
 80087c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	2204      	movs	r2, #4
 80087ce:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 80087d0:	2301      	movs	r3, #1
 80087d2:	e046      	b.n	8008862 <HAL_RTC_Init+0xea>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	681b      	ldr	r3, [r3, #0]
 80087d8:	6899      	ldr	r1, [r3, #8]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681a      	ldr	r2, [r3, #0]
 80087de:	4b23      	ldr	r3, [pc, #140]	; (800886c <HAL_RTC_Init+0xf4>)
 80087e0:	400b      	ands	r3, r1
 80087e2:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	6899      	ldr	r1, [r3, #8]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	685a      	ldr	r2, [r3, #4]
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	691b      	ldr	r3, [r3, #16]
 80087f2:	431a      	orrs	r2, r3
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	695b      	ldr	r3, [r3, #20]
 80087f8:	431a      	orrs	r2, r3
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	687a      	ldr	r2, [r7, #4]
 8008808:	68d2      	ldr	r2, [r2, #12]
 800880a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16);
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	6919      	ldr	r1, [r3, #16]
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	689b      	ldr	r3, [r3, #8]
 8008816:	041a      	lsls	r2, r3, #16
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	430a      	orrs	r2, r1
 800881e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	68da      	ldr	r2, [r3, #12]
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800882e:	60da      	str	r2, [r3, #12]

    hrtc->Instance->OR &= (uint32_t)~RTC_OR_ALARMTYPE;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	f022 0208 	bic.w	r2, r2, #8
 800883e:	64da      	str	r2, [r3, #76]	; 0x4c
    hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	699a      	ldr	r2, [r3, #24]
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	22ff      	movs	r2, #255	; 0xff
 8008858:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	2201      	movs	r2, #1
 800885e:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 8008860:	2300      	movs	r3, #0
  }
}
 8008862:	4618      	mov	r0, r3
 8008864:	3708      	adds	r7, #8
 8008866:	46bd      	mov	sp, r7
 8008868:	bd80      	pop	{r7, pc}
 800886a:	bf00      	nop
 800886c:	ff8fffbf 	.word	0xff8fffbf

08008870 <HAL_RTC_SetTime>:
  *            @arg FORMAT_BIN: Binary data format
  *            @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8008870:	b590      	push	{r4, r7, lr}
 8008872:	b087      	sub	sp, #28
 8008874:	af00      	add	r7, sp, #0
 8008876:	60f8      	str	r0, [r7, #12]
 8008878:	60b9      	str	r1, [r7, #8]
 800887a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 800887c:	2300      	movs	r3, #0
 800887e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	7f1b      	ldrb	r3, [r3, #28]
 8008884:	2b01      	cmp	r3, #1
 8008886:	d101      	bne.n	800888c <HAL_RTC_SetTime+0x1c>
 8008888:	2302      	movs	r3, #2
 800888a:	e0a8      	b.n	80089de <HAL_RTC_SetTime+0x16e>
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	2201      	movs	r2, #1
 8008890:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008892:	68fb      	ldr	r3, [r7, #12]
 8008894:	2202      	movs	r2, #2
 8008896:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d126      	bne.n	80088ec <HAL_RTC_SetTime+0x7c>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	d102      	bne.n	80088b2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80088ac:	68bb      	ldr	r3, [r7, #8]
 80088ae:	2200      	movs	r2, #0
 80088b0:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088b2:	68bb      	ldr	r3, [r7, #8]
 80088b4:	781b      	ldrb	r3, [r3, #0]
 80088b6:	4618      	mov	r0, r3
 80088b8:	f000 faac 	bl	8008e14 <RTC_ByteToBcd2>
 80088bc:	4603      	mov	r3, r0
 80088be:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80088c0:	68bb      	ldr	r3, [r7, #8]
 80088c2:	785b      	ldrb	r3, [r3, #1]
 80088c4:	4618      	mov	r0, r3
 80088c6:	f000 faa5 	bl	8008e14 <RTC_ByteToBcd2>
 80088ca:	4603      	mov	r3, r0
 80088cc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088ce:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	789b      	ldrb	r3, [r3, #2]
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 fa9d 	bl	8008e14 <RTC_ByteToBcd2>
 80088da:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8) | \
 80088dc:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16));
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	7b1b      	ldrb	r3, [r3, #12]
 80088e4:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16) | \
 80088e6:	4313      	orrs	r3, r2
 80088e8:	617b      	str	r3, [r7, #20]
 80088ea:	e018      	b.n	800891e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	681b      	ldr	r3, [r3, #0]
 80088f0:	689b      	ldr	r3, [r3, #8]
 80088f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d102      	bne.n	8008900 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00;
 80088fa:	68bb      	ldr	r3, [r7, #8]
 80088fc:	2200      	movs	r2, #0
 80088fe:	731a      	strb	r2, [r3, #12]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 8008900:	68bb      	ldr	r3, [r7, #8]
 8008902:	781b      	ldrb	r3, [r3, #0]
 8008904:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	785b      	ldrb	r3, [r3, #1]
 800890a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800890c:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 800890e:	68ba      	ldr	r2, [r7, #8]
 8008910:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8) | \
 8008912:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16));
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	7b1b      	ldrb	r3, [r3, #12]
 8008918:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16) | \
 800891a:	4313      	orrs	r3, r2
 800891c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	681b      	ldr	r3, [r3, #0]
 8008922:	22ca      	movs	r2, #202	; 0xca
 8008924:	625a      	str	r2, [r3, #36]	; 0x24
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	2253      	movs	r2, #83	; 0x53
 800892c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 800892e:	68f8      	ldr	r0, [r7, #12]
 8008930:	f000 fa44 	bl	8008dbc <RTC_EnterInitMode>
 8008934:	4603      	mov	r3, r0
 8008936:	2b00      	cmp	r3, #0
 8008938:	d00b      	beq.n	8008952 <HAL_RTC_SetTime+0xe2>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	22ff      	movs	r2, #255	; 0xff
 8008940:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	2204      	movs	r2, #4
 8008946:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2200      	movs	r2, #0
 800894c:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e045      	b.n	80089de <HAL_RTC_SetTime+0x16e>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	6979      	ldr	r1, [r7, #20]
 8008958:	4b23      	ldr	r3, [pc, #140]	; (80089e8 <HAL_RTC_SetTime+0x178>)
 800895a:	400b      	ands	r3, r1
 800895c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	681b      	ldr	r3, [r3, #0]
 8008962:	689a      	ldr	r2, [r3, #8]
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800896c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800896e:	68fb      	ldr	r3, [r7, #12]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	6899      	ldr	r1, [r3, #8]
 8008974:	68bb      	ldr	r3, [r7, #8]
 8008976:	691a      	ldr	r2, [r3, #16]
 8008978:	68bb      	ldr	r3, [r7, #8]
 800897a:	695b      	ldr	r3, [r3, #20]
 800897c:	431a      	orrs	r2, r3
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	681b      	ldr	r3, [r3, #0]
 8008982:	430a      	orrs	r2, r1
 8008984:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	68da      	ldr	r2, [r3, #12]
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008994:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	689b      	ldr	r3, [r3, #8]
 800899c:	f003 0320 	and.w	r3, r3, #32
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d111      	bne.n	80089c8 <HAL_RTC_SetTime+0x158>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80089a4:	68f8      	ldr	r0, [r7, #12]
 80089a6:	f000 f9e1 	bl	8008d6c <HAL_RTC_WaitForSynchro>
 80089aa:	4603      	mov	r3, r0
 80089ac:	2b00      	cmp	r3, #0
 80089ae:	d00b      	beq.n	80089c8 <HAL_RTC_SetTime+0x158>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	22ff      	movs	r2, #255	; 0xff
 80089b6:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80089b8:	68fb      	ldr	r3, [r7, #12]
 80089ba:	2204      	movs	r2, #4
 80089bc:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	2200      	movs	r2, #0
 80089c2:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 80089c4:	2301      	movs	r3, #1
 80089c6:	e00a      	b.n	80089de <HAL_RTC_SetTime+0x16e>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80089c8:	68fb      	ldr	r3, [r7, #12]
 80089ca:	681b      	ldr	r3, [r3, #0]
 80089cc:	22ff      	movs	r2, #255	; 0xff
 80089ce:	625a      	str	r2, [r3, #36]	; 0x24

   hrtc->State = HAL_RTC_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2201      	movs	r2, #1
 80089d4:	775a      	strb	r2, [r3, #29]

   __HAL_UNLOCK(hrtc);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	771a      	strb	r2, [r3, #28]

   return HAL_OK;
 80089dc:	2300      	movs	r3, #0
  }
}
 80089de:	4618      	mov	r0, r3
 80089e0:	371c      	adds	r7, #28
 80089e2:	46bd      	mov	sp, r7
 80089e4:	bd90      	pop	{r4, r7, pc}
 80089e6:	bf00      	nop
 80089e8:	007f7f7f 	.word	0x007f7f7f

080089ec <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80089ec:	b590      	push	{r4, r7, lr}
 80089ee:	b087      	sub	sp, #28
 80089f0:	af00      	add	r7, sp, #0
 80089f2:	60f8      	str	r0, [r7, #12]
 80089f4:	60b9      	str	r1, [r7, #8]
 80089f6:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0;
 80089f8:	2300      	movs	r3, #0
 80089fa:	617b      	str	r3, [r7, #20]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	7f1b      	ldrb	r3, [r3, #28]
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d101      	bne.n	8008a08 <HAL_RTC_SetDate+0x1c>
 8008a04:	2302      	movs	r3, #2
 8008a06:	e092      	b.n	8008b2e <HAL_RTC_SetDate+0x142>
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2201      	movs	r2, #1
 8008a0c:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	2202      	movs	r2, #2
 8008a12:	775a      	strb	r2, [r3, #29]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d10e      	bne.n	8008a38 <HAL_RTC_SetDate+0x4c>
 8008a1a:	68bb      	ldr	r3, [r7, #8]
 8008a1c:	785b      	ldrb	r3, [r3, #1]
 8008a1e:	f003 0310 	and.w	r3, r3, #16
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d008      	beq.n	8008a38 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008a26:	68bb      	ldr	r3, [r7, #8]
 8008a28:	785b      	ldrb	r3, [r3, #1]
 8008a2a:	f023 0310 	bic.w	r3, r3, #16
 8008a2e:	b2db      	uxtb	r3, r3
 8008a30:	330a      	adds	r3, #10
 8008a32:	b2da      	uxtb	r2, r3
 8008a34:	68bb      	ldr	r3, [r7, #8]
 8008a36:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d11c      	bne.n	8008a78 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	78db      	ldrb	r3, [r3, #3]
 8008a42:	4618      	mov	r0, r3
 8008a44:	f000 f9e6 	bl	8008e14 <RTC_ByteToBcd2>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a4c:	68bb      	ldr	r3, [r7, #8]
 8008a4e:	785b      	ldrb	r3, [r3, #1]
 8008a50:	4618      	mov	r0, r3
 8008a52:	f000 f9df 	bl	8008e14 <RTC_ByteToBcd2>
 8008a56:	4603      	mov	r3, r0
 8008a58:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a5a:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 8008a5c:	68bb      	ldr	r3, [r7, #8]
 8008a5e:	789b      	ldrb	r3, [r3, #2]
 8008a60:	4618      	mov	r0, r3
 8008a62:	f000 f9d7 	bl	8008e14 <RTC_ByteToBcd2>
 8008a66:	4603      	mov	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8) | \
 8008a68:	ea44 0203 	orr.w	r2, r4, r3
                 ((uint32_t)sDate->WeekDay << 13));
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	781b      	ldrb	r3, [r3, #0]
 8008a70:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16) | \
 8008a72:	4313      	orrs	r3, r2
 8008a74:	617b      	str	r3, [r7, #20]
 8008a76:	e00e      	b.n	8008a96 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a78:	68bb      	ldr	r3, [r7, #8]
 8008a7a:	78db      	ldrb	r3, [r3, #3]
 8008a7c:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8) | \
 8008a7e:	68bb      	ldr	r3, [r7, #8]
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a84:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 8008a86:	68ba      	ldr	r2, [r7, #8]
 8008a88:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8) | \
 8008a8a:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13));
 8008a8c:	68bb      	ldr	r3, [r7, #8]
 8008a8e:	781b      	ldrb	r3, [r3, #0]
 8008a90:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16) | \
 8008a92:	4313      	orrs	r3, r2
 8008a94:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	22ca      	movs	r2, #202	; 0xca
 8008a9c:	625a      	str	r2, [r3, #36]	; 0x24
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	2253      	movs	r2, #83	; 0x53
 8008aa4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if(RTC_EnterInitMode(hrtc) != HAL_OK)
 8008aa6:	68f8      	ldr	r0, [r7, #12]
 8008aa8:	f000 f988 	bl	8008dbc <RTC_EnterInitMode>
 8008aac:	4603      	mov	r3, r0
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d00b      	beq.n	8008aca <HAL_RTC_SetDate+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	22ff      	movs	r2, #255	; 0xff
 8008ab8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	2204      	movs	r2, #4
 8008abe:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	2200      	movs	r2, #0
 8008ac4:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	e031      	b.n	8008b2e <HAL_RTC_SetDate+0x142>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008aca:	68fb      	ldr	r3, [r7, #12]
 8008acc:	681a      	ldr	r2, [r3, #0]
 8008ace:	6979      	ldr	r1, [r7, #20]
 8008ad0:	4b19      	ldr	r3, [pc, #100]	; (8008b38 <HAL_RTC_SetDate+0x14c>)
 8008ad2:	400b      	ands	r3, r1
 8008ad4:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	68da      	ldr	r2, [r3, #12]
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ae4:	60da      	str	r2, [r3, #12]

    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8008ae6:	68fb      	ldr	r3, [r7, #12]
 8008ae8:	681b      	ldr	r3, [r3, #0]
 8008aea:	689b      	ldr	r3, [r3, #8]
 8008aec:	f003 0320 	and.w	r3, r3, #32
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d111      	bne.n	8008b18 <HAL_RTC_SetDate+0x12c>
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008af4:	68f8      	ldr	r0, [r7, #12]
 8008af6:	f000 f939 	bl	8008d6c <HAL_RTC_WaitForSynchro>
 8008afa:	4603      	mov	r3, r0
 8008afc:	2b00      	cmp	r3, #0
 8008afe:	d00b      	beq.n	8008b18 <HAL_RTC_SetDate+0x12c>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	681b      	ldr	r3, [r3, #0]
 8008b04:	22ff      	movs	r2, #255	; 0xff
 8008b06:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	2204      	movs	r2, #4
 8008b0c:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2200      	movs	r2, #0
 8008b12:	771a      	strb	r2, [r3, #28]

        return HAL_ERROR;
 8008b14:	2301      	movs	r3, #1
 8008b16:	e00a      	b.n	8008b2e <HAL_RTC_SetDate+0x142>
      }
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	22ff      	movs	r2, #255	; 0xff
 8008b1e:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	2201      	movs	r2, #1
 8008b24:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2200      	movs	r2, #0
 8008b2a:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8008b2c:	2300      	movs	r3, #0
  }
}
 8008b2e:	4618      	mov	r0, r3
 8008b30:	371c      	adds	r7, #28
 8008b32:	46bd      	mov	sp, r7
 8008b34:	bd90      	pop	{r4, r7, pc}
 8008b36:	bf00      	nop
 8008b38:	00ffff3f 	.word	0x00ffff3f

08008b3c <HAL_RTC_SetAlarm>:
  *             @arg FORMAT_BIN: Binary data format
  *             @arg FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetAlarm(RTC_HandleTypeDef *hrtc, RTC_AlarmTypeDef *sAlarm, uint32_t Format)
{
 8008b3c:	b590      	push	{r4, r7, lr}
 8008b3e:	b089      	sub	sp, #36	; 0x24
 8008b40:	af00      	add	r7, sp, #0
 8008b42:	60f8      	str	r0, [r7, #12]
 8008b44:	60b9      	str	r1, [r7, #8]
 8008b46:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0;
 8008b48:	2300      	movs	r3, #0
 8008b4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpreg = 0, subsecondtmpreg = 0;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	61fb      	str	r3, [r7, #28]
 8008b50:	2300      	movs	r3, #0
 8008b52:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_ALARM_DATE_WEEKDAY_SEL(sAlarm->AlarmDateWeekDaySel));
  assert_param(IS_RTC_ALARM_SUB_SECOND_VALUE(sAlarm->AlarmTime.SubSeconds));
  assert_param(IS_RTC_ALARM_SUB_SECOND_MASK(sAlarm->AlarmSubSecondMask));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	7f1b      	ldrb	r3, [r3, #28]
 8008b58:	2b01      	cmp	r3, #1
 8008b5a:	d101      	bne.n	8008b60 <HAL_RTC_SetAlarm+0x24>
 8008b5c:	2302      	movs	r3, #2
 8008b5e:	e101      	b.n	8008d64 <HAL_RTC_SetAlarm+0x228>
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	2201      	movs	r2, #1
 8008b64:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008b66:	68fb      	ldr	r3, [r7, #12]
 8008b68:	2202      	movs	r2, #2
 8008b6a:	775a      	strb	r2, [r3, #29]

  if(Format == RTC_FORMAT_BIN)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2b00      	cmp	r3, #0
 8008b70:	d137      	bne.n	8008be2 <HAL_RTC_SetAlarm+0xa6>
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008b72:	68fb      	ldr	r3, [r7, #12]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	689b      	ldr	r3, [r3, #8]
 8008b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b7c:	2b00      	cmp	r3, #0
 8008b7e:	d102      	bne.n	8008b86 <HAL_RTC_SetAlarm+0x4a>
      assert_param(IS_RTC_HOUR12(sAlarm->AlarmTime.Hours));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008b80:	68bb      	ldr	r3, [r7, #8]
 8008b82:	2200      	movs	r2, #0
 8008b84:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(sAlarm->AlarmDateWeekDay));
    }

    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	781b      	ldrb	r3, [r3, #0]
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	f000 f942 	bl	8008e14 <RTC_ByteToBcd2>
 8008b90:	4603      	mov	r3, r0
 8008b92:	041c      	lsls	r4, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008b94:	68bb      	ldr	r3, [r7, #8]
 8008b96:	785b      	ldrb	r3, [r3, #1]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	f000 f93b 	bl	8008e14 <RTC_ByteToBcd2>
 8008b9e:	4603      	mov	r3, r0
 8008ba0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008ba2:	431c      	orrs	r4, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	789b      	ldrb	r3, [r3, #2]
 8008ba8:	4618      	mov	r0, r3
 8008baa:	f000 f933 	bl	8008e14 <RTC_ByteToBcd2>
 8008bae:	4603      	mov	r3, r0
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bb0:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	7b1b      	ldrb	r3, [r3, #12]
 8008bb8:	041b      	lsls	r3, r3, #16
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Seconds)) | \
 8008bba:	ea42 0403 	orr.w	r4, r2, r3
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	f000 f925 	bl	8008e14 <RTC_ByteToBcd2>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008bce:	ea44 0203 	orr.w	r2, r4, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008bd2:	68bb      	ldr	r3, [r7, #8]
 8008bd4:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmDateWeekDay) << 24) | \
 8008bd6:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008bd8:	68bb      	ldr	r3, [r7, #8]
 8008bda:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)RTC_ByteToBcd2(sAlarm->AlarmTime.Hours) << 16) | \
 8008bdc:	4313      	orrs	r3, r2
 8008bde:	61fb      	str	r3, [r7, #28]
 8008be0:	e023      	b.n	8008c2a <HAL_RTC_SetAlarm+0xee>
  }
  else
  {
    if((hrtc->Instance->CR & RTC_CR_FMT) != (uint32_t)RESET)
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	689b      	ldr	r3, [r3, #8]
 8008be8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d102      	bne.n	8008bf6 <HAL_RTC_SetAlarm+0xba>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sAlarm->AlarmTime.Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sAlarm->AlarmTime.TimeFormat));
    }
    else
    {
      sAlarm->AlarmTime.TimeFormat = 0x00;
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	731a      	strb	r2, [r3, #12]
    else
    {
      assert_param(IS_RTC_ALARM_DATE_WEEKDAY_WEEKDAY(RTC_Bcd2ToByte(sAlarm->AlarmDateWeekDay)));
    }

    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008bf6:	68bb      	ldr	r3, [r7, #8]
 8008bf8:	781b      	ldrb	r3, [r3, #0]
 8008bfa:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008bfc:	68bb      	ldr	r3, [r7, #8]
 8008bfe:	785b      	ldrb	r3, [r3, #1]
 8008c00:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008c02:	4313      	orrs	r3, r2
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008c04:	68ba      	ldr	r2, [r7, #8]
 8008c06:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sAlarm->AlarmTime.Minutes) << 8) | \
 8008c08:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c0a:	68bb      	ldr	r3, [r7, #8]
 8008c0c:	7b1b      	ldrb	r3, [r3, #12]
 8008c0e:	041b      	lsls	r3, r3, #16
              ((uint32_t) sAlarm->AlarmTime.Seconds) | \
 8008c10:	431a      	orrs	r2, r3
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008c12:	68bb      	ldr	r3, [r7, #8]
 8008c14:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008c18:	061b      	lsls	r3, r3, #24
              ((uint32_t)(sAlarm->AlarmTime.TimeFormat) << 16) | \
 8008c1a:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmDateWeekDaySel) | \
 8008c1c:	68bb      	ldr	r3, [r7, #8]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
              ((uint32_t)(sAlarm->AlarmDateWeekDay) << 24) | \
 8008c20:	431a      	orrs	r2, r3
              ((uint32_t)sAlarm->AlarmMask));
 8008c22:	68bb      	ldr	r3, [r7, #8]
 8008c24:	699b      	ldr	r3, [r3, #24]
    tmpreg = (((uint32_t)(sAlarm->AlarmTime.Hours) << 16) | \
 8008c26:	4313      	orrs	r3, r2
 8008c28:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the Alarm A or Alarm B Sub Second registers */
  subsecondtmpreg = (uint32_t)((uint32_t)(sAlarm->AlarmTime.SubSeconds) | (uint32_t)(sAlarm->AlarmSubSecondMask));
 8008c2a:	68bb      	ldr	r3, [r7, #8]
 8008c2c:	685a      	ldr	r2, [r3, #4]
 8008c2e:	68bb      	ldr	r3, [r7, #8]
 8008c30:	69db      	ldr	r3, [r3, #28]
 8008c32:	4313      	orrs	r3, r2
 8008c34:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	22ca      	movs	r2, #202	; 0xca
 8008c3c:	625a      	str	r2, [r3, #36]	; 0x24
 8008c3e:	68fb      	ldr	r3, [r7, #12]
 8008c40:	681b      	ldr	r3, [r3, #0]
 8008c42:	2253      	movs	r2, #83	; 0x53
 8008c44:	625a      	str	r2, [r3, #36]	; 0x24

  /* Configure the Alarm register */
  if(sAlarm->Alarm == RTC_ALARM_A)
 8008c46:	68bb      	ldr	r3, [r7, #8]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008c4e:	d13f      	bne.n	8008cd0 <HAL_RTC_SetAlarm+0x194>
  {
    /* Disable the Alarm A interrupt */
    __HAL_RTC_ALARMA_DISABLE(hrtc);
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	689a      	ldr	r2, [r3, #8]
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008c5e:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRA);
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	689a      	ldr	r2, [r3, #8]
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008c6e:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008c70:	f7fb fe50 	bl	8004914 <HAL_GetTick>
 8008c74:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRAWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008c76:	e013      	b.n	8008ca0 <HAL_RTC_SetAlarm+0x164>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008c78:	f7fb fe4c 	bl	8004914 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	69bb      	ldr	r3, [r7, #24]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c86:	d90b      	bls.n	8008ca0 <HAL_RTC_SetAlarm+0x164>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	22ff      	movs	r2, #255	; 0xff
 8008c8e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	2203      	movs	r2, #3
 8008c94:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008c96:	68fb      	ldr	r3, [r7, #12]
 8008c98:	2200      	movs	r2, #0
 8008c9a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008c9c:	2303      	movs	r3, #3
 8008c9e:	e061      	b.n	8008d64 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRAWF) == RESET)
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	68db      	ldr	r3, [r3, #12]
 8008ca6:	f003 0301 	and.w	r3, r3, #1
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d0e4      	beq.n	8008c78 <HAL_RTC_SetAlarm+0x13c>
      }
    }

    hrtc->Instance->ALRMAR = (uint32_t)tmpreg;
 8008cae:	68fb      	ldr	r3, [r7, #12]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	69fa      	ldr	r2, [r7, #28]
 8008cb4:	61da      	str	r2, [r3, #28]
    /* Configure the Alarm A Sub Second register */
    hrtc->Instance->ALRMASSR = subsecondtmpreg;
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	697a      	ldr	r2, [r7, #20]
 8008cbc:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMA_ENABLE(hrtc);
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	689a      	ldr	r2, [r3, #8]
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ccc:	609a      	str	r2, [r3, #8]
 8008cce:	e03e      	b.n	8008d4e <HAL_RTC_SetAlarm+0x212>
  }
  else
  {
    /* Disable the Alarm B interrupt */
    __HAL_RTC_ALARMB_DISABLE(hrtc);
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	689a      	ldr	r2, [r3, #8]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	681b      	ldr	r3, [r3, #0]
 8008cda:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8008cde:	609a      	str	r2, [r3, #8]

    /* In case of interrupt mode is used, the interrupt source must disabled */
    __HAL_RTC_ALARM_DISABLE_IT(hrtc, RTC_IT_ALRB);
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	689a      	ldr	r2, [r3, #8]
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008cee:	609a      	str	r2, [r3, #8]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008cf0:	f7fb fe10 	bl	8004914 <HAL_GetTick>
 8008cf4:	61b8      	str	r0, [r7, #24]

    /* Wait till RTC ALRBWF flag is set and if Time out is reached exit */
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008cf6:	e013      	b.n	8008d20 <HAL_RTC_SetAlarm+0x1e4>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008cf8:	f7fb fe0c 	bl	8004914 <HAL_GetTick>
 8008cfc:	4602      	mov	r2, r0
 8008cfe:	69bb      	ldr	r3, [r7, #24]
 8008d00:	1ad3      	subs	r3, r2, r3
 8008d02:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d06:	d90b      	bls.n	8008d20 <HAL_RTC_SetAlarm+0x1e4>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	681b      	ldr	r3, [r3, #0]
 8008d0c:	22ff      	movs	r2, #255	; 0xff
 8008d0e:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2203      	movs	r2, #3
 8008d14:	775a      	strb	r2, [r3, #29]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	771a      	strb	r2, [r3, #28]

        return HAL_TIMEOUT;
 8008d1c:	2303      	movs	r3, #3
 8008d1e:	e021      	b.n	8008d64 <HAL_RTC_SetAlarm+0x228>
    while(__HAL_RTC_ALARM_GET_FLAG(hrtc, RTC_FLAG_ALRBWF) == RESET)
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	68db      	ldr	r3, [r3, #12]
 8008d26:	f003 0302 	and.w	r3, r3, #2
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d0e4      	beq.n	8008cf8 <HAL_RTC_SetAlarm+0x1bc>
      }
    }

    hrtc->Instance->ALRMBR = (uint32_t)tmpreg;
 8008d2e:	68fb      	ldr	r3, [r7, #12]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	69fa      	ldr	r2, [r7, #28]
 8008d34:	621a      	str	r2, [r3, #32]
    /* Configure the Alarm B Sub Second register */
    hrtc->Instance->ALRMBSSR = subsecondtmpreg;
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	697a      	ldr	r2, [r7, #20]
 8008d3c:	649a      	str	r2, [r3, #72]	; 0x48
    /* Configure the Alarm state: Enable Alarm */
    __HAL_RTC_ALARMB_ENABLE(hrtc);
 8008d3e:	68fb      	ldr	r3, [r7, #12]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	689a      	ldr	r2, [r3, #8]
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008d4c:	609a      	str	r2, [r3, #8]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	22ff      	movs	r2, #255	; 0xff
 8008d54:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	2201      	movs	r2, #1
 8008d5a:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	2200      	movs	r2, #0
 8008d60:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008d62:	2300      	movs	r3, #0
}
 8008d64:	4618      	mov	r0, r3
 8008d66:	3724      	adds	r7, #36	; 0x24
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd90      	pop	{r4, r7, pc}

08008d6c <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b084      	sub	sp, #16
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008d74:	2300      	movs	r3, #0
 8008d76:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8008d86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008d88:	f7fb fdc4 	bl	8004914 <HAL_GetTick>
 8008d8c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008d8e:	e009      	b.n	8008da4 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008d90:	f7fb fdc0 	bl	8004914 <HAL_GetTick>
 8008d94:	4602      	mov	r2, r0
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	1ad3      	subs	r3, r2, r3
 8008d9a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d9e:	d901      	bls.n	8008da4 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e007      	b.n	8008db4 <HAL_RTC_WaitForSynchro+0x48>
  while((hrtc->Instance->ISR & RTC_ISR_RSF) == (uint32_t)RESET)
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	68db      	ldr	r3, [r3, #12]
 8008daa:	f003 0320 	and.w	r3, r3, #32
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d0ee      	beq.n	8008d90 <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 8008db2:	2300      	movs	r3, #0
}
 8008db4:	4618      	mov	r0, r3
 8008db6:	3710      	adds	r7, #16
 8008db8:	46bd      	mov	sp, r7
 8008dba:	bd80      	pop	{r7, pc}

08008dbc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	68db      	ldr	r3, [r3, #12]
 8008dce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d119      	bne.n	8008e0a <RTC_EnterInitMode+0x4e>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	f04f 32ff 	mov.w	r2, #4294967295
 8008dde:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008de0:	f7fb fd98 	bl	8004914 <HAL_GetTick>
 8008de4:	60f8      	str	r0, [r7, #12]

    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008de6:	e009      	b.n	8008dfc <RTC_EnterInitMode+0x40>
    {
      if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 8008de8:	f7fb fd94 	bl	8004914 <HAL_GetTick>
 8008dec:	4602      	mov	r2, r0
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	1ad3      	subs	r3, r2, r3
 8008df2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008df6:	d901      	bls.n	8008dfc <RTC_EnterInitMode+0x40>
      {
        return HAL_TIMEOUT;
 8008df8:	2303      	movs	r3, #3
 8008dfa:	e007      	b.n	8008e0c <RTC_EnterInitMode+0x50>
    while((hrtc->Instance->ISR & RTC_ISR_INITF) == (uint32_t)RESET)
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	68db      	ldr	r3, [r3, #12]
 8008e02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e06:	2b00      	cmp	r3, #0
 8008e08:	d0ee      	beq.n	8008de8 <RTC_EnterInitMode+0x2c>
      }
    }
  }

  return HAL_OK;
 8008e0a:	2300      	movs	r3, #0
}
 8008e0c:	4618      	mov	r0, r3
 8008e0e:	3710      	adds	r7, #16
 8008e10:	46bd      	mov	sp, r7
 8008e12:	bd80      	pop	{r7, pc}

08008e14 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8008e14:	b480      	push	{r7}
 8008e16:	b085      	sub	sp, #20
 8008e18:	af00      	add	r7, sp, #0
 8008e1a:	4603      	mov	r3, r0
 8008e1c:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0;
 8008e1e:	2300      	movs	r3, #0
 8008e20:	60fb      	str	r3, [r7, #12]

  while(Value >= 10)
 8008e22:	e005      	b.n	8008e30 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	3301      	adds	r3, #1
 8008e28:	60fb      	str	r3, [r7, #12]
    Value -= 10;
 8008e2a:	79fb      	ldrb	r3, [r7, #7]
 8008e2c:	3b0a      	subs	r3, #10
 8008e2e:	71fb      	strb	r3, [r7, #7]
  while(Value >= 10)
 8008e30:	79fb      	ldrb	r3, [r7, #7]
 8008e32:	2b09      	cmp	r3, #9
 8008e34:	d8f6      	bhi.n	8008e24 <RTC_ByteToBcd2+0x10>
  }

  return  ((uint8_t)(bcdhigh << 4) | Value);
 8008e36:	68fb      	ldr	r3, [r7, #12]
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	011b      	lsls	r3, r3, #4
 8008e3c:	b2da      	uxtb	r2, r3
 8008e3e:	79fb      	ldrb	r3, [r7, #7]
 8008e40:	4313      	orrs	r3, r2
 8008e42:	b2db      	uxtb	r3, r3
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3714      	adds	r7, #20
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4e:	4770      	bx	lr

08008e50 <HAL_RTCEx_SetTimeStamp>:
  *             @arg RTC_TIMESTAMPPIN_PI8: PI8 is selected as RTC TimeStamp Pin.
  *             @arg RTC_TIMESTAMPPIN_PC1: PC1 is selected as RTC TimeStamp Pin.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetTimeStamp(RTC_HandleTypeDef *hrtc, uint32_t TimeStampEdge, uint32_t RTC_TimeStampPin)
{
 8008e50:	b480      	push	{r7}
 8008e52:	b087      	sub	sp, #28
 8008e54:	af00      	add	r7, sp, #0
 8008e56:	60f8      	str	r0, [r7, #12]
 8008e58:	60b9      	str	r1, [r7, #8]
 8008e5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0;
 8008e5c:	2300      	movs	r3, #0
 8008e5e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_TIMESTAMP_EDGE(TimeStampEdge));
  assert_param(IS_RTC_TIMESTAMP_PIN(RTC_TimeStampPin));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	7f1b      	ldrb	r3, [r3, #28]
 8008e64:	2b01      	cmp	r3, #1
 8008e66:	d101      	bne.n	8008e6c <HAL_RTCEx_SetTimeStamp+0x1c>
 8008e68:	2302      	movs	r3, #2
 8008e6a:	e03e      	b.n	8008eea <HAL_RTCEx_SetTimeStamp+0x9a>
 8008e6c:	68fb      	ldr	r3, [r7, #12]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2202      	movs	r2, #2
 8008e76:	775a      	strb	r2, [r3, #29]

  /* Get the RTC_CR register and clear the bits to be configured */
  tmpreg = (uint32_t)(hrtc->Instance->CR & (uint32_t)~(RTC_CR_TSEDGE | RTC_CR_TSE));
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	689a      	ldr	r2, [r3, #8]
 8008e7e:	4b1e      	ldr	r3, [pc, #120]	; (8008ef8 <HAL_RTCEx_SetTimeStamp+0xa8>)
 8008e80:	4013      	ands	r3, r2
 8008e82:	617b      	str	r3, [r7, #20]

  tmpreg|= TimeStampEdge;
 8008e84:	697a      	ldr	r2, [r7, #20]
 8008e86:	68bb      	ldr	r3, [r7, #8]
 8008e88:	4313      	orrs	r3, r2
 8008e8a:	617b      	str	r3, [r7, #20]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	22ca      	movs	r2, #202	; 0xca
 8008e92:	625a      	str	r2, [r3, #36]	; 0x24
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	2253      	movs	r2, #83	; 0x53
 8008e9a:	625a      	str	r2, [r3, #36]	; 0x24

  hrtc->Instance->OR &= (uint32_t)~RTC_OR_TSINSEL;
 8008e9c:	68fb      	ldr	r3, [r7, #12]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f022 0206 	bic.w	r2, r2, #6
 8008eaa:	64da      	str	r2, [r3, #76]	; 0x4c
  hrtc->Instance->OR |= (uint32_t)(RTC_TimeStampPin);
 8008eac:	68fb      	ldr	r3, [r7, #12]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	6cd9      	ldr	r1, [r3, #76]	; 0x4c
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	687a      	ldr	r2, [r7, #4]
 8008eb8:	430a      	orrs	r2, r1
 8008eba:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure the Time Stamp TSEDGE and Enable bits */
  hrtc->Instance->CR = (uint32_t)tmpreg;
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	697a      	ldr	r2, [r7, #20]
 8008ec2:	609a      	str	r2, [r3, #8]

  __HAL_RTC_TIMESTAMP_ENABLE(hrtc);
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	689a      	ldr	r2, [r3, #8]
 8008eca:	68fb      	ldr	r3, [r7, #12]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ed2:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	22ff      	movs	r2, #255	; 0xff
 8008eda:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	2201      	movs	r2, #1
 8008ee0:	775a      	strb	r2, [r3, #29]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	2200      	movs	r2, #0
 8008ee6:	771a      	strb	r2, [r3, #28]

  return HAL_OK;
 8008ee8:	2300      	movs	r3, #0
}
 8008eea:	4618      	mov	r0, r3
 8008eec:	371c      	adds	r7, #28
 8008eee:	46bd      	mov	sp, r7
 8008ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef4:	4770      	bx	lr
 8008ef6:	bf00      	nop
 8008ef8:	fffff7f7 	.word	0xfffff7f7

08008efc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
 8008f04:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d101      	bne.n	8008f10 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8008f0c:	2301      	movs	r3, #1
 8008f0e:	e025      	b.n	8008f5c <HAL_SDRAM_Init+0x60>
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f16:	b2db      	uxtb	r3, r3
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d106      	bne.n	8008f2a <HAL_SDRAM_Init+0x2e>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8008f24:	6878      	ldr	r0, [r7, #4]
 8008f26:	f7fb fbeb 	bl	8004700 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2202      	movs	r2, #2
 8008f2e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681a      	ldr	r2, [r3, #0]
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	3304      	adds	r3, #4
 8008f3a:	4619      	mov	r1, r3
 8008f3c:	4610      	mov	r0, r2
 8008f3e:	f002 fa25 	bl	800b38c <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	6818      	ldr	r0, [r3, #0]
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	685b      	ldr	r3, [r3, #4]
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	6839      	ldr	r1, [r7, #0]
 8008f4e:	f002 fa8f 	bl	800b470 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2201      	movs	r2, #1
 8008f56:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;
 8008f5a:	2300      	movs	r3, #0
}
 8008f5c:	4618      	mov	r0, r3
 8008f5e:	3708      	adds	r7, #8
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}

08008f64 <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8008f64:	b580      	push	{r7, lr}
 8008f66:	b084      	sub	sp, #16
 8008f68:	af00      	add	r7, sp, #0
 8008f6a:	60f8      	str	r0, [r7, #12]
 8008f6c:	60b9      	str	r1, [r7, #8]
 8008f6e:	607a      	str	r2, [r7, #4]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008f76:	b2db      	uxtb	r3, r3
 8008f78:	2b02      	cmp	r3, #2
 8008f7a:	d101      	bne.n	8008f80 <HAL_SDRAM_SendCommand+0x1c>
  {
    return HAL_BUSY;
 8008f7c:	2302      	movs	r3, #2
 8008f7e:	e018      	b.n	8008fb2 <HAL_SDRAM_SendCommand+0x4e>
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	2202      	movs	r2, #2
 8008f84:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	687a      	ldr	r2, [r7, #4]
 8008f8e:	68b9      	ldr	r1, [r7, #8]
 8008f90:	4618      	mov	r0, r3
 8008f92:	f002 faed 	bl	800b570 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	2b02      	cmp	r3, #2
 8008f9c:	d104      	bne.n	8008fa8 <HAL_SDRAM_SendCommand+0x44>
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	2205      	movs	r2, #5
 8008fa2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
 8008fa6:	e003      	b.n	8008fb0 <HAL_SDRAM_SendCommand+0x4c>
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	2201      	movs	r2, #1
 8008fac:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  }
  
  return HAL_OK;  
 8008fb0:	2300      	movs	r3, #0
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3710      	adds	r7, #16
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bd80      	pop	{r7, pc}

08008fba <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 8008fba:	b580      	push	{r7, lr}
 8008fbc:	b082      	sub	sp, #8
 8008fbe:	af00      	add	r7, sp, #0
 8008fc0:	6078      	str	r0, [r7, #4]
 8008fc2:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d101      	bne.n	8008fd4 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8008fd0:	2302      	movs	r3, #2
 8008fd2:	e00e      	b.n	8008ff2 <HAL_SDRAM_ProgramRefreshRate+0x38>
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 8008fdc:	687b      	ldr	r3, [r7, #4]
 8008fde:	681b      	ldr	r3, [r3, #0]
 8008fe0:	6839      	ldr	r1, [r7, #0]
 8008fe2:	4618      	mov	r0, r3
 8008fe4:	f002 fae5 	bl	800b5b2 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	2201      	movs	r2, #1
 8008fec:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  
  return HAL_OK;   
 8008ff0:	2300      	movs	r3, #0
}
 8008ff2:	4618      	mov	r0, r3
 8008ff4:	3708      	adds	r7, #8
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}

08008ffa <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8008ffa:	b580      	push	{r7, lr}
 8008ffc:	b084      	sub	sp, #16
 8008ffe:	af00      	add	r7, sp, #0
 8009000:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2b00      	cmp	r3, #0
 8009006:	d101      	bne.n	800900c <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009008:	2301      	movs	r3, #1
 800900a:	e084      	b.n	8009116 <HAL_SPI_Init+0x11c>
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	2200      	movs	r2, #0
 8009010:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d106      	bne.n	800902c <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	2200      	movs	r2, #0
 8009022:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009026:	6878      	ldr	r0, [r7, #4]
 8009028:	f7fb f8ec 	bl	8004204 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	2202      	movs	r2, #2
 8009030:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	681b      	ldr	r3, [r3, #0]
 8009038:	681a      	ldr	r2, [r3, #0]
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009042:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	68db      	ldr	r3, [r3, #12]
 8009048:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800904c:	d902      	bls.n	8009054 <HAL_SPI_Init+0x5a>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800904e:	2300      	movs	r3, #0
 8009050:	60fb      	str	r3, [r7, #12]
 8009052:	e002      	b.n	800905a <HAL_SPI_Init+0x60>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009054:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009058:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009062:	d007      	beq.n	8009074 <HAL_SPI_Init+0x7a>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	68db      	ldr	r3, [r3, #12]
 8009068:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800906c:	d002      	beq.n	8009074 <HAL_SPI_Init+0x7a>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	2200      	movs	r2, #0
 8009072:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Align the CRC Length on the data size */
  if (hspi->Init.CRCLength == SPI_CRC_LENGTH_DATASIZE)
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009078:	2b00      	cmp	r3, #0
 800907a:	d10b      	bne.n	8009094 <HAL_SPI_Init+0x9a>
  {
    /* CRC Length aligned on the data size : value set by default */
    if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009084:	d903      	bls.n	800908e <HAL_SPI_Init+0x94>
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_16BIT;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2202      	movs	r2, #2
 800908a:	631a      	str	r2, [r3, #48]	; 0x30
 800908c:	e002      	b.n	8009094 <HAL_SPI_Init+0x9a>
    }
    else
    {
      hspi->Init.CRCLength = SPI_CRC_LENGTH_8BIT;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	2201      	movs	r2, #1
 8009092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction |
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	685a      	ldr	r2, [r3, #4]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	431a      	orrs	r2, r3
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	691b      	ldr	r3, [r3, #16]
 80090a2:	431a      	orrs	r2, r3
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	695b      	ldr	r3, [r3, #20]
 80090a8:	431a      	orrs	r2, r3
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	699b      	ldr	r3, [r3, #24]
 80090ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80090b2:	431a      	orrs	r2, r3
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	69db      	ldr	r3, [r3, #28]
 80090b8:	431a      	orrs	r2, r3
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	6a1b      	ldr	r3, [r3, #32]
 80090be:	ea42 0103 	orr.w	r1, r2, r3
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	681b      	ldr	r3, [r3, #0]
 80090ca:	430a      	orrs	r2, r1
 80090cc:	601a      	str	r2, [r3, #0]
    hspi->Instance->CR1 |= SPI_CR1_CRCL;
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode |
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	699b      	ldr	r3, [r3, #24]
 80090d2:	0c1b      	lsrs	r3, r3, #16
 80090d4:	f003 0204 	and.w	r2, r3, #4
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090dc:	431a      	orrs	r2, r3
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	431a      	orrs	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	ea42 0103 	orr.w	r1, r2, r3
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	68fa      	ldr	r2, [r7, #12]
 80090f2:	430a      	orrs	r2, r1
 80090f4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	69da      	ldr	r2, [r3, #28]
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681b      	ldr	r3, [r3, #0]
 8009100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009104:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	2201      	movs	r2, #1
 8009110:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	3710      	adds	r7, #16
 800911a:	46bd      	mov	sp, r7
 800911c:	bd80      	pop	{r7, pc}

0800911e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800911e:	b580      	push	{r7, lr}
 8009120:	b082      	sub	sp, #8
 8009122:	af00      	add	r7, sp, #0
 8009124:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2b00      	cmp	r3, #0
 800912a:	d101      	bne.n	8009130 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e01d      	b.n	800916c <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009136:	b2db      	uxtb	r3, r3
 8009138:	2b00      	cmp	r3, #0
 800913a:	d106      	bne.n	800914a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	2200      	movs	r2, #0
 8009140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009144:	6878      	ldr	r0, [r7, #4]
 8009146:	f7fb f8cf 	bl	80042e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2202      	movs	r2, #2
 800914e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681a      	ldr	r2, [r3, #0]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	3304      	adds	r3, #4
 800915a:	4619      	mov	r1, r3
 800915c:	4610      	mov	r0, r2
 800915e:	f000 fbcf 	bl	8009900 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	2201      	movs	r2, #1
 8009166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800916a:	2300      	movs	r3, #0
}
 800916c:	4618      	mov	r0, r3
 800916e:	3708      	adds	r7, #8
 8009170:	46bd      	mov	sp, r7
 8009172:	bd80      	pop	{r7, pc}

08009174 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009174:	b480      	push	{r7}
 8009176:	b085      	sub	sp, #20
 8009178:	af00      	add	r7, sp, #0
 800917a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	681b      	ldr	r3, [r3, #0]
 8009180:	68da      	ldr	r2, [r3, #12]
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	681b      	ldr	r3, [r3, #0]
 8009186:	f042 0201 	orr.w	r2, r2, #1
 800918a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	689a      	ldr	r2, [r3, #8]
 8009192:	4b0c      	ldr	r3, [pc, #48]	; (80091c4 <HAL_TIM_Base_Start_IT+0x50>)
 8009194:	4013      	ands	r3, r2
 8009196:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009198:	68fb      	ldr	r3, [r7, #12]
 800919a:	2b06      	cmp	r3, #6
 800919c:	d00b      	beq.n	80091b6 <HAL_TIM_Base_Start_IT+0x42>
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80091a4:	d007      	beq.n	80091b6 <HAL_TIM_Base_Start_IT+0x42>
  {
    __HAL_TIM_ENABLE(htim);
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	681b      	ldr	r3, [r3, #0]
 80091aa:	681a      	ldr	r2, [r3, #0]
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	681b      	ldr	r3, [r3, #0]
 80091b0:	f042 0201 	orr.w	r2, r2, #1
 80091b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3714      	adds	r7, #20
 80091bc:	46bd      	mov	sp, r7
 80091be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091c2:	4770      	bx	lr
 80091c4:	00010007 	.word	0x00010007

080091c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80091c8:	b580      	push	{r7, lr}
 80091ca:	b082      	sub	sp, #8
 80091cc:	af00      	add	r7, sp, #0
 80091ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2b00      	cmp	r3, #0
 80091d4:	d101      	bne.n	80091da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	e01d      	b.n	8009216 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80091e0:	b2db      	uxtb	r3, r3
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d106      	bne.n	80091f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	2200      	movs	r2, #0
 80091ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80091ee:	6878      	ldr	r0, [r7, #4]
 80091f0:	f000 f815 	bl	800921e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	2202      	movs	r2, #2
 80091f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	681a      	ldr	r2, [r3, #0]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	3304      	adds	r3, #4
 8009204:	4619      	mov	r1, r3
 8009206:	4610      	mov	r0, r2
 8009208:	f000 fb7a 	bl	8009900 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	2201      	movs	r2, #1
 8009210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009214:	2300      	movs	r3, #0
}
 8009216:	4618      	mov	r0, r3
 8009218:	3708      	adds	r7, #8
 800921a:	46bd      	mov	sp, r7
 800921c:	bd80      	pop	{r7, pc}

0800921e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800921e:	b480      	push	{r7}
 8009220:	b083      	sub	sp, #12
 8009222:	af00      	add	r7, sp, #0
 8009224:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009226:	bf00      	nop
 8009228:	370c      	adds	r7, #12
 800922a:	46bd      	mov	sp, r7
 800922c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009230:	4770      	bx	lr

08009232 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009232:	b580      	push	{r7, lr}
 8009234:	b082      	sub	sp, #8
 8009236:	af00      	add	r7, sp, #0
 8009238:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	691b      	ldr	r3, [r3, #16]
 8009240:	f003 0302 	and.w	r3, r3, #2
 8009244:	2b02      	cmp	r3, #2
 8009246:	d122      	bne.n	800928e <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	68db      	ldr	r3, [r3, #12]
 800924e:	f003 0302 	and.w	r3, r3, #2
 8009252:	2b02      	cmp	r3, #2
 8009254:	d11b      	bne.n	800928e <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009256:	687b      	ldr	r3, [r7, #4]
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	f06f 0202 	mvn.w	r2, #2
 800925e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2201      	movs	r2, #1
 8009264:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	699b      	ldr	r3, [r3, #24]
 800926c:	f003 0303 	and.w	r3, r3, #3
 8009270:	2b00      	cmp	r3, #0
 8009272:	d003      	beq.n	800927c <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f000 fb25 	bl	80098c4 <HAL_TIM_IC_CaptureCallback>
 800927a:	e005      	b.n	8009288 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800927c:	6878      	ldr	r0, [r7, #4]
 800927e:	f000 fb17 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fb28 	bl	80098d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	681b      	ldr	r3, [r3, #0]
 8009292:	691b      	ldr	r3, [r3, #16]
 8009294:	f003 0304 	and.w	r3, r3, #4
 8009298:	2b04      	cmp	r3, #4
 800929a:	d122      	bne.n	80092e2 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	68db      	ldr	r3, [r3, #12]
 80092a2:	f003 0304 	and.w	r3, r3, #4
 80092a6:	2b04      	cmp	r3, #4
 80092a8:	d11b      	bne.n	80092e2 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	f06f 0204 	mvn.w	r2, #4
 80092b2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	2202      	movs	r2, #2
 80092b8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80092ba:	687b      	ldr	r3, [r7, #4]
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	699b      	ldr	r3, [r3, #24]
 80092c0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80092c4:	2b00      	cmp	r3, #0
 80092c6:	d003      	beq.n	80092d0 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80092c8:	6878      	ldr	r0, [r7, #4]
 80092ca:	f000 fafb 	bl	80098c4 <HAL_TIM_IC_CaptureCallback>
 80092ce:	e005      	b.n	80092dc <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f000 faed 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80092d6:	6878      	ldr	r0, [r7, #4]
 80092d8:	f000 fafe 	bl	80098d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2200      	movs	r2, #0
 80092e0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	681b      	ldr	r3, [r3, #0]
 80092e6:	691b      	ldr	r3, [r3, #16]
 80092e8:	f003 0308 	and.w	r3, r3, #8
 80092ec:	2b08      	cmp	r3, #8
 80092ee:	d122      	bne.n	8009336 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	681b      	ldr	r3, [r3, #0]
 80092f4:	68db      	ldr	r3, [r3, #12]
 80092f6:	f003 0308 	and.w	r3, r3, #8
 80092fa:	2b08      	cmp	r3, #8
 80092fc:	d11b      	bne.n	8009336 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f06f 0208 	mvn.w	r2, #8
 8009306:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	2204      	movs	r2, #4
 800930c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	69db      	ldr	r3, [r3, #28]
 8009314:	f003 0303 	and.w	r3, r3, #3
 8009318:	2b00      	cmp	r3, #0
 800931a:	d003      	beq.n	8009324 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800931c:	6878      	ldr	r0, [r7, #4]
 800931e:	f000 fad1 	bl	80098c4 <HAL_TIM_IC_CaptureCallback>
 8009322:	e005      	b.n	8009330 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009324:	6878      	ldr	r0, [r7, #4]
 8009326:	f000 fac3 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800932a:	6878      	ldr	r0, [r7, #4]
 800932c:	f000 fad4 	bl	80098d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	2200      	movs	r2, #0
 8009334:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009336:	687b      	ldr	r3, [r7, #4]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	691b      	ldr	r3, [r3, #16]
 800933c:	f003 0310 	and.w	r3, r3, #16
 8009340:	2b10      	cmp	r3, #16
 8009342:	d122      	bne.n	800938a <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f003 0310 	and.w	r3, r3, #16
 800934e:	2b10      	cmp	r3, #16
 8009350:	d11b      	bne.n	800938a <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	f06f 0210 	mvn.w	r2, #16
 800935a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	2208      	movs	r2, #8
 8009360:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	69db      	ldr	r3, [r3, #28]
 8009368:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800936c:	2b00      	cmp	r3, #0
 800936e:	d003      	beq.n	8009378 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009370:	6878      	ldr	r0, [r7, #4]
 8009372:	f000 faa7 	bl	80098c4 <HAL_TIM_IC_CaptureCallback>
 8009376:	e005      	b.n	8009384 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009378:	6878      	ldr	r0, [r7, #4]
 800937a:	f000 fa99 	bl	80098b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800937e:	6878      	ldr	r0, [r7, #4]
 8009380:	f000 faaa 	bl	80098d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2200      	movs	r2, #0
 8009388:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	691b      	ldr	r3, [r3, #16]
 8009390:	f003 0301 	and.w	r3, r3, #1
 8009394:	2b01      	cmp	r3, #1
 8009396:	d10e      	bne.n	80093b6 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	681b      	ldr	r3, [r3, #0]
 800939c:	68db      	ldr	r3, [r3, #12]
 800939e:	f003 0301 	and.w	r3, r3, #1
 80093a2:	2b01      	cmp	r3, #1
 80093a4:	d107      	bne.n	80093b6 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f06f 0201 	mvn.w	r2, #1
 80093ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80093b0:	6878      	ldr	r0, [r7, #4]
 80093b2:	f7f8 fef9 	bl	80021a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	681b      	ldr	r3, [r3, #0]
 80093ba:	691b      	ldr	r3, [r3, #16]
 80093bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093c0:	2b80      	cmp	r3, #128	; 0x80
 80093c2:	d10e      	bne.n	80093e2 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	68db      	ldr	r3, [r3, #12]
 80093ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093ce:	2b80      	cmp	r3, #128	; 0x80
 80093d0:	d107      	bne.n	80093e2 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80093da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80093dc:	6878      	ldr	r0, [r7, #4]
 80093de:	f000 ffcd 	bl	800a37c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80093ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80093f0:	d10e      	bne.n	8009410 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80093fc:	2b80      	cmp	r3, #128	; 0x80
 80093fe:	d107      	bne.n	8009410 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009408:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800940a:	6878      	ldr	r0, [r7, #4]
 800940c:	f000 ffc0 	bl	800a390 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	691b      	ldr	r3, [r3, #16]
 8009416:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800941a:	2b40      	cmp	r3, #64	; 0x40
 800941c:	d10e      	bne.n	800943c <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	68db      	ldr	r3, [r3, #12]
 8009424:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d107      	bne.n	800943c <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009436:	6878      	ldr	r0, [r7, #4]
 8009438:	f000 fa58 	bl	80098ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	691b      	ldr	r3, [r3, #16]
 8009442:	f003 0320 	and.w	r3, r3, #32
 8009446:	2b20      	cmp	r3, #32
 8009448:	d10e      	bne.n	8009468 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	68db      	ldr	r3, [r3, #12]
 8009450:	f003 0320 	and.w	r3, r3, #32
 8009454:	2b20      	cmp	r3, #32
 8009456:	d107      	bne.n	8009468 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009458:	687b      	ldr	r3, [r7, #4]
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f06f 0220 	mvn.w	r2, #32
 8009460:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009462:	6878      	ldr	r0, [r7, #4]
 8009464:	f000 ff80 	bl	800a368 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009468:	bf00      	nop
 800946a:	3708      	adds	r7, #8
 800946c:	46bd      	mov	sp, r7
 800946e:	bd80      	pop	{r7, pc}

08009470 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8009470:	b580      	push	{r7, lr}
 8009472:	b084      	sub	sp, #16
 8009474:	af00      	add	r7, sp, #0
 8009476:	60f8      	str	r0, [r7, #12]
 8009478:	60b9      	str	r1, [r7, #8]
 800947a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8009486:	2302      	movs	r3, #2
 8009488:	e105      	b.n	8009696 <HAL_TIM_PWM_ConfigChannel+0x226>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009492:	68fb      	ldr	r3, [r7, #12]
 8009494:	2202      	movs	r2, #2
 8009496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b14      	cmp	r3, #20
 800949e:	f200 80f0 	bhi.w	8009682 <HAL_TIM_PWM_ConfigChannel+0x212>
 80094a2:	a201      	add	r2, pc, #4	; (adr r2, 80094a8 <HAL_TIM_PWM_ConfigChannel+0x38>)
 80094a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80094a8:	080094fd 	.word	0x080094fd
 80094ac:	08009683 	.word	0x08009683
 80094b0:	08009683 	.word	0x08009683
 80094b4:	08009683 	.word	0x08009683
 80094b8:	0800953d 	.word	0x0800953d
 80094bc:	08009683 	.word	0x08009683
 80094c0:	08009683 	.word	0x08009683
 80094c4:	08009683 	.word	0x08009683
 80094c8:	0800957f 	.word	0x0800957f
 80094cc:	08009683 	.word	0x08009683
 80094d0:	08009683 	.word	0x08009683
 80094d4:	08009683 	.word	0x08009683
 80094d8:	080095bf 	.word	0x080095bf
 80094dc:	08009683 	.word	0x08009683
 80094e0:	08009683 	.word	0x08009683
 80094e4:	08009683 	.word	0x08009683
 80094e8:	08009601 	.word	0x08009601
 80094ec:	08009683 	.word	0x08009683
 80094f0:	08009683 	.word	0x08009683
 80094f4:	08009683 	.word	0x08009683
 80094f8:	08009641 	.word	0x08009641
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	68b9      	ldr	r1, [r7, #8]
 8009502:	4618      	mov	r0, r3
 8009504:	f000 fa9c 	bl	8009a40 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	699a      	ldr	r2, [r3, #24]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f042 0208 	orr.w	r2, r2, #8
 8009516:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	699a      	ldr	r2, [r3, #24]
 800951e:	68fb      	ldr	r3, [r7, #12]
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	f022 0204 	bic.w	r2, r2, #4
 8009526:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	6999      	ldr	r1, [r3, #24]
 800952e:	68bb      	ldr	r3, [r7, #8]
 8009530:	691a      	ldr	r2, [r3, #16]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	430a      	orrs	r2, r1
 8009538:	619a      	str	r2, [r3, #24]
      break;
 800953a:	e0a3      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68b9      	ldr	r1, [r7, #8]
 8009542:	4618      	mov	r0, r3
 8009544:	f000 faee 	bl	8009b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	699a      	ldr	r2, [r3, #24]
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	681b      	ldr	r3, [r3, #0]
 8009552:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8009556:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	699a      	ldr	r2, [r3, #24]
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009566:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	6999      	ldr	r1, [r3, #24]
 800956e:	68bb      	ldr	r3, [r7, #8]
 8009570:	691b      	ldr	r3, [r3, #16]
 8009572:	021a      	lsls	r2, r3, #8
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	430a      	orrs	r2, r1
 800957a:	619a      	str	r2, [r3, #24]
      break;
 800957c:	e082      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	68b9      	ldr	r1, [r7, #8]
 8009584:	4618      	mov	r0, r3
 8009586:	f000 fb45 	bl	8009c14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	69da      	ldr	r2, [r3, #28]
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f042 0208 	orr.w	r2, r2, #8
 8009598:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800959a:	68fb      	ldr	r3, [r7, #12]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	69da      	ldr	r2, [r3, #28]
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	f022 0204 	bic.w	r2, r2, #4
 80095a8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	681b      	ldr	r3, [r3, #0]
 80095ae:	69d9      	ldr	r1, [r3, #28]
 80095b0:	68bb      	ldr	r3, [r7, #8]
 80095b2:	691a      	ldr	r2, [r3, #16]
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	681b      	ldr	r3, [r3, #0]
 80095b8:	430a      	orrs	r2, r1
 80095ba:	61da      	str	r2, [r3, #28]
      break;
 80095bc:	e062      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	4618      	mov	r0, r3
 80095c6:	f000 fb9b 	bl	8009d00 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	69da      	ldr	r2, [r3, #28]
 80095d0:	68fb      	ldr	r3, [r7, #12]
 80095d2:	681b      	ldr	r3, [r3, #0]
 80095d4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80095d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80095da:	68fb      	ldr	r3, [r7, #12]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	69da      	ldr	r2, [r3, #28]
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681b      	ldr	r3, [r3, #0]
 80095e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80095e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69d9      	ldr	r1, [r3, #28]
 80095f0:	68bb      	ldr	r3, [r7, #8]
 80095f2:	691b      	ldr	r3, [r3, #16]
 80095f4:	021a      	lsls	r2, r3, #8
 80095f6:	68fb      	ldr	r3, [r7, #12]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	430a      	orrs	r2, r1
 80095fc:	61da      	str	r2, [r3, #28]
      break;
 80095fe:	e041      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	68b9      	ldr	r1, [r7, #8]
 8009606:	4618      	mov	r0, r3
 8009608:	f000 fbd2 	bl	8009db0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	681b      	ldr	r3, [r3, #0]
 8009610:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009612:	68fb      	ldr	r3, [r7, #12]
 8009614:	681b      	ldr	r3, [r3, #0]
 8009616:	f042 0208 	orr.w	r2, r2, #8
 800961a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009622:	68fb      	ldr	r3, [r7, #12]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f022 0204 	bic.w	r2, r2, #4
 800962a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009632:	68bb      	ldr	r3, [r7, #8]
 8009634:	691a      	ldr	r2, [r3, #16]
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	430a      	orrs	r2, r1
 800963c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800963e:	e021      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	681b      	ldr	r3, [r3, #0]
 8009644:	68b9      	ldr	r1, [r7, #8]
 8009646:	4618      	mov	r0, r3
 8009648:	f000 fc04 	bl	8009e54 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	681b      	ldr	r3, [r3, #0]
 8009656:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800965a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800966a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8009672:	68bb      	ldr	r3, [r7, #8]
 8009674:	691b      	ldr	r3, [r3, #16]
 8009676:	021a      	lsls	r2, r3, #8
 8009678:	68fb      	ldr	r3, [r7, #12]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	430a      	orrs	r2, r1
 800967e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8009680:	e000      	b.n	8009684 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      break;
 8009682:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	2201      	movs	r2, #1
 8009688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	2200      	movs	r2, #0
 8009690:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009694:	2300      	movs	r3, #0
}
 8009696:	4618      	mov	r0, r3
 8009698:	3710      	adds	r7, #16
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop

080096a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b084      	sub	sp, #16
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80096b0:	2b01      	cmp	r3, #1
 80096b2:	d101      	bne.n	80096b8 <HAL_TIM_ConfigClockSource+0x18>
 80096b4:	2302      	movs	r3, #2
 80096b6:	e0b3      	b.n	8009820 <HAL_TIM_ConfigClockSource+0x180>
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	2201      	movs	r2, #1
 80096bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	2202      	movs	r2, #2
 80096c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	689b      	ldr	r3, [r3, #8]
 80096ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80096d0:	68fa      	ldr	r2, [r7, #12]
 80096d2:	4b55      	ldr	r3, [pc, #340]	; (8009828 <HAL_TIM_ConfigClockSource+0x188>)
 80096d4:	4013      	ands	r3, r2
 80096d6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80096de:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	68fa      	ldr	r2, [r7, #12]
 80096e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80096e8:	683b      	ldr	r3, [r7, #0]
 80096ea:	681b      	ldr	r3, [r3, #0]
 80096ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f0:	d03e      	beq.n	8009770 <HAL_TIM_ConfigClockSource+0xd0>
 80096f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80096f6:	f200 8087 	bhi.w	8009808 <HAL_TIM_ConfigClockSource+0x168>
 80096fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80096fe:	f000 8085 	beq.w	800980c <HAL_TIM_ConfigClockSource+0x16c>
 8009702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009706:	d87f      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009708:	2b70      	cmp	r3, #112	; 0x70
 800970a:	d01a      	beq.n	8009742 <HAL_TIM_ConfigClockSource+0xa2>
 800970c:	2b70      	cmp	r3, #112	; 0x70
 800970e:	d87b      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009710:	2b60      	cmp	r3, #96	; 0x60
 8009712:	d050      	beq.n	80097b6 <HAL_TIM_ConfigClockSource+0x116>
 8009714:	2b60      	cmp	r3, #96	; 0x60
 8009716:	d877      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009718:	2b50      	cmp	r3, #80	; 0x50
 800971a:	d03c      	beq.n	8009796 <HAL_TIM_ConfigClockSource+0xf6>
 800971c:	2b50      	cmp	r3, #80	; 0x50
 800971e:	d873      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009720:	2b40      	cmp	r3, #64	; 0x40
 8009722:	d058      	beq.n	80097d6 <HAL_TIM_ConfigClockSource+0x136>
 8009724:	2b40      	cmp	r3, #64	; 0x40
 8009726:	d86f      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009728:	2b30      	cmp	r3, #48	; 0x30
 800972a:	d064      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x156>
 800972c:	2b30      	cmp	r3, #48	; 0x30
 800972e:	d86b      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009730:	2b20      	cmp	r3, #32
 8009732:	d060      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x156>
 8009734:	2b20      	cmp	r3, #32
 8009736:	d867      	bhi.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
 8009738:	2b00      	cmp	r3, #0
 800973a:	d05c      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x156>
 800973c:	2b10      	cmp	r3, #16
 800973e:	d05a      	beq.n	80097f6 <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8009740:	e062      	b.n	8009808 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6818      	ldr	r0, [r3, #0]
 8009746:	683b      	ldr	r3, [r7, #0]
 8009748:	6899      	ldr	r1, [r3, #8]
 800974a:	683b      	ldr	r3, [r7, #0]
 800974c:	685a      	ldr	r2, [r3, #4]
 800974e:	683b      	ldr	r3, [r7, #0]
 8009750:	68db      	ldr	r3, [r3, #12]
 8009752:	f000 fcdd 	bl	800a110 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800975e:	68fb      	ldr	r3, [r7, #12]
 8009760:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009764:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	681b      	ldr	r3, [r3, #0]
 800976a:	68fa      	ldr	r2, [r7, #12]
 800976c:	609a      	str	r2, [r3, #8]
      break;
 800976e:	e04e      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6818      	ldr	r0, [r3, #0]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	6899      	ldr	r1, [r3, #8]
 8009778:	683b      	ldr	r3, [r7, #0]
 800977a:	685a      	ldr	r2, [r3, #4]
 800977c:	683b      	ldr	r3, [r7, #0]
 800977e:	68db      	ldr	r3, [r3, #12]
 8009780:	f000 fcc6 	bl	800a110 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	689a      	ldr	r2, [r3, #8]
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009792:	609a      	str	r2, [r3, #8]
      break;
 8009794:	e03b      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	6818      	ldr	r0, [r3, #0]
 800979a:	683b      	ldr	r3, [r7, #0]
 800979c:	6859      	ldr	r1, [r3, #4]
 800979e:	683b      	ldr	r3, [r7, #0]
 80097a0:	68db      	ldr	r3, [r3, #12]
 80097a2:	461a      	mov	r2, r3
 80097a4:	f000 fc3a 	bl	800a01c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	2150      	movs	r1, #80	; 0x50
 80097ae:	4618      	mov	r0, r3
 80097b0:	f000 fc93 	bl	800a0da <TIM_ITRx_SetConfig>
      break;
 80097b4:	e02b      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	6818      	ldr	r0, [r3, #0]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	6859      	ldr	r1, [r3, #4]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	68db      	ldr	r3, [r3, #12]
 80097c2:	461a      	mov	r2, r3
 80097c4:	f000 fc59 	bl	800a07a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	2160      	movs	r1, #96	; 0x60
 80097ce:	4618      	mov	r0, r3
 80097d0:	f000 fc83 	bl	800a0da <TIM_ITRx_SetConfig>
      break;
 80097d4:	e01b      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	6818      	ldr	r0, [r3, #0]
 80097da:	683b      	ldr	r3, [r7, #0]
 80097dc:	6859      	ldr	r1, [r3, #4]
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	68db      	ldr	r3, [r3, #12]
 80097e2:	461a      	mov	r2, r3
 80097e4:	f000 fc1a 	bl	800a01c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	2140      	movs	r1, #64	; 0x40
 80097ee:	4618      	mov	r0, r3
 80097f0:	f000 fc73 	bl	800a0da <TIM_ITRx_SetConfig>
      break;
 80097f4:	e00b      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681a      	ldr	r2, [r3, #0]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	4619      	mov	r1, r3
 8009800:	4610      	mov	r0, r2
 8009802:	f000 fc6a 	bl	800a0da <TIM_ITRx_SetConfig>
      break;
 8009806:	e002      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8009808:	bf00      	nop
 800980a:	e000      	b.n	800980e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800980c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	2201      	movs	r2, #1
 8009812:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	2200      	movs	r2, #0
 800981a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800981e:	2300      	movs	r3, #0
}
 8009820:	4618      	mov	r0, r3
 8009822:	3710      	adds	r7, #16
 8009824:	46bd      	mov	sp, r7
 8009826:	bd80      	pop	{r7, pc}
 8009828:	fffeff88 	.word	0xfffeff88

0800982c <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b082      	sub	sp, #8
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
 8009834:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800983c:	2b01      	cmp	r3, #1
 800983e:	d101      	bne.n	8009844 <HAL_TIM_SlaveConfigSynchro+0x18>
 8009840:	2302      	movs	r3, #2
 8009842:	e031      	b.n	80098a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	2201      	movs	r2, #1
 8009848:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	2202      	movs	r2, #2
 8009850:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8009854:	6839      	ldr	r1, [r7, #0]
 8009856:	6878      	ldr	r0, [r7, #4]
 8009858:	f000 fb50 	bl	8009efc <TIM_SlaveTimer_SetConfig>
 800985c:	4603      	mov	r3, r0
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	2201      	movs	r2, #1
 8009866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8009872:	2301      	movs	r3, #1
 8009874:	e018      	b.n	80098a8 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	68da      	ldr	r2, [r3, #12]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	681b      	ldr	r3, [r3, #0]
 8009880:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009884:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	68da      	ldr	r2, [r3, #12]
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009894:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	2201      	movs	r2, #1
 800989a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	2200      	movs	r2, #0
 80098a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80098a6:	2300      	movs	r3, #0
}
 80098a8:	4618      	mov	r0, r3
 80098aa:	3708      	adds	r7, #8
 80098ac:	46bd      	mov	sp, r7
 80098ae:	bd80      	pop	{r7, pc}

080098b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80098b0:	b480      	push	{r7}
 80098b2:	b083      	sub	sp, #12
 80098b4:	af00      	add	r7, sp, #0
 80098b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80098b8:	bf00      	nop
 80098ba:	370c      	adds	r7, #12
 80098bc:	46bd      	mov	sp, r7
 80098be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098c2:	4770      	bx	lr

080098c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80098c4:	b480      	push	{r7}
 80098c6:	b083      	sub	sp, #12
 80098c8:	af00      	add	r7, sp, #0
 80098ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80098cc:	bf00      	nop
 80098ce:	370c      	adds	r7, #12
 80098d0:	46bd      	mov	sp, r7
 80098d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098d6:	4770      	bx	lr

080098d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80098d8:	b480      	push	{r7}
 80098da:	b083      	sub	sp, #12
 80098dc:	af00      	add	r7, sp, #0
 80098de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80098e0:	bf00      	nop
 80098e2:	370c      	adds	r7, #12
 80098e4:	46bd      	mov	sp, r7
 80098e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ea:	4770      	bx	lr

080098ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80098f4:	bf00      	nop
 80098f6:	370c      	adds	r7, #12
 80098f8:	46bd      	mov	sp, r7
 80098fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098fe:	4770      	bx	lr

08009900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009900:	b480      	push	{r7}
 8009902:	b085      	sub	sp, #20
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	681b      	ldr	r3, [r3, #0]
 800990e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4a40      	ldr	r2, [pc, #256]	; (8009a14 <TIM_Base_SetConfig+0x114>)
 8009914:	4293      	cmp	r3, r2
 8009916:	d013      	beq.n	8009940 <TIM_Base_SetConfig+0x40>
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800991e:	d00f      	beq.n	8009940 <TIM_Base_SetConfig+0x40>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	4a3d      	ldr	r2, [pc, #244]	; (8009a18 <TIM_Base_SetConfig+0x118>)
 8009924:	4293      	cmp	r3, r2
 8009926:	d00b      	beq.n	8009940 <TIM_Base_SetConfig+0x40>
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	4a3c      	ldr	r2, [pc, #240]	; (8009a1c <TIM_Base_SetConfig+0x11c>)
 800992c:	4293      	cmp	r3, r2
 800992e:	d007      	beq.n	8009940 <TIM_Base_SetConfig+0x40>
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	4a3b      	ldr	r2, [pc, #236]	; (8009a20 <TIM_Base_SetConfig+0x120>)
 8009934:	4293      	cmp	r3, r2
 8009936:	d003      	beq.n	8009940 <TIM_Base_SetConfig+0x40>
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4a3a      	ldr	r2, [pc, #232]	; (8009a24 <TIM_Base_SetConfig+0x124>)
 800993c:	4293      	cmp	r3, r2
 800993e:	d108      	bne.n	8009952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8009948:	683b      	ldr	r3, [r7, #0]
 800994a:	685b      	ldr	r3, [r3, #4]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	4313      	orrs	r3, r2
 8009950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	4a2f      	ldr	r2, [pc, #188]	; (8009a14 <TIM_Base_SetConfig+0x114>)
 8009956:	4293      	cmp	r3, r2
 8009958:	d02b      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009960:	d027      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	4a2c      	ldr	r2, [pc, #176]	; (8009a18 <TIM_Base_SetConfig+0x118>)
 8009966:	4293      	cmp	r3, r2
 8009968:	d023      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	4a2b      	ldr	r2, [pc, #172]	; (8009a1c <TIM_Base_SetConfig+0x11c>)
 800996e:	4293      	cmp	r3, r2
 8009970:	d01f      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	4a2a      	ldr	r2, [pc, #168]	; (8009a20 <TIM_Base_SetConfig+0x120>)
 8009976:	4293      	cmp	r3, r2
 8009978:	d01b      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	4a29      	ldr	r2, [pc, #164]	; (8009a24 <TIM_Base_SetConfig+0x124>)
 800997e:	4293      	cmp	r3, r2
 8009980:	d017      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	4a28      	ldr	r2, [pc, #160]	; (8009a28 <TIM_Base_SetConfig+0x128>)
 8009986:	4293      	cmp	r3, r2
 8009988:	d013      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	4a27      	ldr	r2, [pc, #156]	; (8009a2c <TIM_Base_SetConfig+0x12c>)
 800998e:	4293      	cmp	r3, r2
 8009990:	d00f      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	4a26      	ldr	r2, [pc, #152]	; (8009a30 <TIM_Base_SetConfig+0x130>)
 8009996:	4293      	cmp	r3, r2
 8009998:	d00b      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	4a25      	ldr	r2, [pc, #148]	; (8009a34 <TIM_Base_SetConfig+0x134>)
 800999e:	4293      	cmp	r3, r2
 80099a0:	d007      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	4a24      	ldr	r2, [pc, #144]	; (8009a38 <TIM_Base_SetConfig+0x138>)
 80099a6:	4293      	cmp	r3, r2
 80099a8:	d003      	beq.n	80099b2 <TIM_Base_SetConfig+0xb2>
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	4a23      	ldr	r2, [pc, #140]	; (8009a3c <TIM_Base_SetConfig+0x13c>)
 80099ae:	4293      	cmp	r3, r2
 80099b0:	d108      	bne.n	80099c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80099ba:	683b      	ldr	r3, [r7, #0]
 80099bc:	68db      	ldr	r3, [r3, #12]
 80099be:	68fa      	ldr	r2, [r7, #12]
 80099c0:	4313      	orrs	r3, r2
 80099c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80099ca:	683b      	ldr	r3, [r7, #0]
 80099cc:	695b      	ldr	r3, [r3, #20]
 80099ce:	4313      	orrs	r3, r2
 80099d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	68fa      	ldr	r2, [r7, #12]
 80099d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	689a      	ldr	r2, [r3, #8]
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80099e0:	683b      	ldr	r3, [r7, #0]
 80099e2:	681a      	ldr	r2, [r3, #0]
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	4a0a      	ldr	r2, [pc, #40]	; (8009a14 <TIM_Base_SetConfig+0x114>)
 80099ec:	4293      	cmp	r3, r2
 80099ee:	d003      	beq.n	80099f8 <TIM_Base_SetConfig+0xf8>
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	4a0c      	ldr	r2, [pc, #48]	; (8009a24 <TIM_Base_SetConfig+0x124>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d103      	bne.n	8009a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80099f8:	683b      	ldr	r3, [r7, #0]
 80099fa:	691a      	ldr	r2, [r3, #16]
 80099fc:	687b      	ldr	r3, [r7, #4]
 80099fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2201      	movs	r2, #1
 8009a04:	615a      	str	r2, [r3, #20]
}
 8009a06:	bf00      	nop
 8009a08:	3714      	adds	r7, #20
 8009a0a:	46bd      	mov	sp, r7
 8009a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a10:	4770      	bx	lr
 8009a12:	bf00      	nop
 8009a14:	40010000 	.word	0x40010000
 8009a18:	40000400 	.word	0x40000400
 8009a1c:	40000800 	.word	0x40000800
 8009a20:	40000c00 	.word	0x40000c00
 8009a24:	40010400 	.word	0x40010400
 8009a28:	40014000 	.word	0x40014000
 8009a2c:	40014400 	.word	0x40014400
 8009a30:	40014800 	.word	0x40014800
 8009a34:	40001800 	.word	0x40001800
 8009a38:	40001c00 	.word	0x40001c00
 8009a3c:	40002000 	.word	0x40002000

08009a40 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009a40:	b480      	push	{r7}
 8009a42:	b087      	sub	sp, #28
 8009a44:	af00      	add	r7, sp, #0
 8009a46:	6078      	str	r0, [r7, #4]
 8009a48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6a1b      	ldr	r3, [r3, #32]
 8009a4e:	f023 0201 	bic.w	r2, r3, #1
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6a1b      	ldr	r3, [r3, #32]
 8009a5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	685b      	ldr	r3, [r3, #4]
 8009a60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	699b      	ldr	r3, [r3, #24]
 8009a66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8009a68:	68fa      	ldr	r2, [r7, #12]
 8009a6a:	4b2b      	ldr	r3, [pc, #172]	; (8009b18 <TIM_OC1_SetConfig+0xd8>)
 8009a6c:	4013      	ands	r3, r2
 8009a6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	f023 0303 	bic.w	r3, r3, #3
 8009a76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	68fa      	ldr	r2, [r7, #12]
 8009a7e:	4313      	orrs	r3, r2
 8009a80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8009a82:	697b      	ldr	r3, [r7, #20]
 8009a84:	f023 0302 	bic.w	r3, r3, #2
 8009a88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8009a8a:	683b      	ldr	r3, [r7, #0]
 8009a8c:	689b      	ldr	r3, [r3, #8]
 8009a8e:	697a      	ldr	r2, [r7, #20]
 8009a90:	4313      	orrs	r3, r2
 8009a92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	4a21      	ldr	r2, [pc, #132]	; (8009b1c <TIM_OC1_SetConfig+0xdc>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <TIM_OC1_SetConfig+0x64>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	4a20      	ldr	r2, [pc, #128]	; (8009b20 <TIM_OC1_SetConfig+0xe0>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d10c      	bne.n	8009abe <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8009aa4:	697b      	ldr	r3, [r7, #20]
 8009aa6:	f023 0308 	bic.w	r3, r3, #8
 8009aaa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8009aac:	683b      	ldr	r3, [r7, #0]
 8009aae:	68db      	ldr	r3, [r3, #12]
 8009ab0:	697a      	ldr	r2, [r7, #20]
 8009ab2:	4313      	orrs	r3, r2
 8009ab4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8009ab6:	697b      	ldr	r3, [r7, #20]
 8009ab8:	f023 0304 	bic.w	r3, r3, #4
 8009abc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	4a16      	ldr	r2, [pc, #88]	; (8009b1c <TIM_OC1_SetConfig+0xdc>)
 8009ac2:	4293      	cmp	r3, r2
 8009ac4:	d003      	beq.n	8009ace <TIM_OC1_SetConfig+0x8e>
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	4a15      	ldr	r2, [pc, #84]	; (8009b20 <TIM_OC1_SetConfig+0xe0>)
 8009aca:	4293      	cmp	r3, r2
 8009acc:	d111      	bne.n	8009af2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8009ace:	693b      	ldr	r3, [r7, #16]
 8009ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009ad4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009adc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8009ade:	683b      	ldr	r3, [r7, #0]
 8009ae0:	695b      	ldr	r3, [r3, #20]
 8009ae2:	693a      	ldr	r2, [r7, #16]
 8009ae4:	4313      	orrs	r3, r2
 8009ae6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8009ae8:	683b      	ldr	r3, [r7, #0]
 8009aea:	699b      	ldr	r3, [r3, #24]
 8009aec:	693a      	ldr	r2, [r7, #16]
 8009aee:	4313      	orrs	r3, r2
 8009af0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009af2:	687b      	ldr	r3, [r7, #4]
 8009af4:	693a      	ldr	r2, [r7, #16]
 8009af6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	68fa      	ldr	r2, [r7, #12]
 8009afc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8009afe:	683b      	ldr	r3, [r7, #0]
 8009b00:	685a      	ldr	r2, [r3, #4]
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	697a      	ldr	r2, [r7, #20]
 8009b0a:	621a      	str	r2, [r3, #32]
}
 8009b0c:	bf00      	nop
 8009b0e:	371c      	adds	r7, #28
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr
 8009b18:	fffeff8f 	.word	0xfffeff8f
 8009b1c:	40010000 	.word	0x40010000
 8009b20:	40010400 	.word	0x40010400

08009b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b087      	sub	sp, #28
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	6078      	str	r0, [r7, #4]
 8009b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	6a1b      	ldr	r3, [r3, #32]
 8009b32:	f023 0210 	bic.w	r2, r3, #16
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	685b      	ldr	r3, [r3, #4]
 8009b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	699b      	ldr	r3, [r3, #24]
 8009b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8009b4c:	68fa      	ldr	r2, [r7, #12]
 8009b4e:	4b2e      	ldr	r3, [pc, #184]	; (8009c08 <TIM_OC2_SetConfig+0xe4>)
 8009b50:	4013      	ands	r3, r2
 8009b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	021b      	lsls	r3, r3, #8
 8009b62:	68fa      	ldr	r2, [r7, #12]
 8009b64:	4313      	orrs	r3, r2
 8009b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009b68:	697b      	ldr	r3, [r7, #20]
 8009b6a:	f023 0320 	bic.w	r3, r3, #32
 8009b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8009b70:	683b      	ldr	r3, [r7, #0]
 8009b72:	689b      	ldr	r3, [r3, #8]
 8009b74:	011b      	lsls	r3, r3, #4
 8009b76:	697a      	ldr	r2, [r7, #20]
 8009b78:	4313      	orrs	r3, r2
 8009b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8009b7c:	687b      	ldr	r3, [r7, #4]
 8009b7e:	4a23      	ldr	r2, [pc, #140]	; (8009c0c <TIM_OC2_SetConfig+0xe8>)
 8009b80:	4293      	cmp	r3, r2
 8009b82:	d003      	beq.n	8009b8c <TIM_OC2_SetConfig+0x68>
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	4a22      	ldr	r2, [pc, #136]	; (8009c10 <TIM_OC2_SetConfig+0xec>)
 8009b88:	4293      	cmp	r3, r2
 8009b8a:	d10d      	bne.n	8009ba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8009b8c:	697b      	ldr	r3, [r7, #20]
 8009b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	68db      	ldr	r3, [r3, #12]
 8009b98:	011b      	lsls	r3, r3, #4
 8009b9a:	697a      	ldr	r2, [r7, #20]
 8009b9c:	4313      	orrs	r3, r2
 8009b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8009ba0:	697b      	ldr	r3, [r7, #20]
 8009ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	4a18      	ldr	r2, [pc, #96]	; (8009c0c <TIM_OC2_SetConfig+0xe8>)
 8009bac:	4293      	cmp	r3, r2
 8009bae:	d003      	beq.n	8009bb8 <TIM_OC2_SetConfig+0x94>
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	4a17      	ldr	r2, [pc, #92]	; (8009c10 <TIM_OC2_SetConfig+0xec>)
 8009bb4:	4293      	cmp	r3, r2
 8009bb6:	d113      	bne.n	8009be0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8009bb8:	693b      	ldr	r3, [r7, #16]
 8009bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8009bc0:	693b      	ldr	r3, [r7, #16]
 8009bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8009bc8:	683b      	ldr	r3, [r7, #0]
 8009bca:	695b      	ldr	r3, [r3, #20]
 8009bcc:	009b      	lsls	r3, r3, #2
 8009bce:	693a      	ldr	r2, [r7, #16]
 8009bd0:	4313      	orrs	r3, r2
 8009bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8009bd4:	683b      	ldr	r3, [r7, #0]
 8009bd6:	699b      	ldr	r3, [r3, #24]
 8009bd8:	009b      	lsls	r3, r3, #2
 8009bda:	693a      	ldr	r2, [r7, #16]
 8009bdc:	4313      	orrs	r3, r2
 8009bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	693a      	ldr	r2, [r7, #16]
 8009be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	68fa      	ldr	r2, [r7, #12]
 8009bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009bec:	683b      	ldr	r3, [r7, #0]
 8009bee:	685a      	ldr	r2, [r3, #4]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	697a      	ldr	r2, [r7, #20]
 8009bf8:	621a      	str	r2, [r3, #32]
}
 8009bfa:	bf00      	nop
 8009bfc:	371c      	adds	r7, #28
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c04:	4770      	bx	lr
 8009c06:	bf00      	nop
 8009c08:	feff8fff 	.word	0xfeff8fff
 8009c0c:	40010000 	.word	0x40010000
 8009c10:	40010400 	.word	0x40010400

08009c14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009c14:	b480      	push	{r7}
 8009c16:	b087      	sub	sp, #28
 8009c18:	af00      	add	r7, sp, #0
 8009c1a:	6078      	str	r0, [r7, #4]
 8009c1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a1b      	ldr	r3, [r3, #32]
 8009c22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	6a1b      	ldr	r3, [r3, #32]
 8009c2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	685b      	ldr	r3, [r3, #4]
 8009c34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	69db      	ldr	r3, [r3, #28]
 8009c3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	4b2d      	ldr	r3, [pc, #180]	; (8009cf4 <TIM_OC3_SetConfig+0xe0>)
 8009c40:	4013      	ands	r3, r2
 8009c42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8009c44:	68fb      	ldr	r3, [r7, #12]
 8009c46:	f023 0303 	bic.w	r3, r3, #3
 8009c4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009c4c:	683b      	ldr	r3, [r7, #0]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	68fa      	ldr	r2, [r7, #12]
 8009c52:	4313      	orrs	r3, r2
 8009c54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8009c56:	697b      	ldr	r3, [r7, #20]
 8009c58:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009c5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009c5e:	683b      	ldr	r3, [r7, #0]
 8009c60:	689b      	ldr	r3, [r3, #8]
 8009c62:	021b      	lsls	r3, r3, #8
 8009c64:	697a      	ldr	r2, [r7, #20]
 8009c66:	4313      	orrs	r3, r2
 8009c68:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	4a22      	ldr	r2, [pc, #136]	; (8009cf8 <TIM_OC3_SetConfig+0xe4>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d003      	beq.n	8009c7a <TIM_OC3_SetConfig+0x66>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	4a21      	ldr	r2, [pc, #132]	; (8009cfc <TIM_OC3_SetConfig+0xe8>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d10d      	bne.n	8009c96 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8009c7a:	697b      	ldr	r3, [r7, #20]
 8009c7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8009c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8009c82:	683b      	ldr	r3, [r7, #0]
 8009c84:	68db      	ldr	r3, [r3, #12]
 8009c86:	021b      	lsls	r3, r3, #8
 8009c88:	697a      	ldr	r2, [r7, #20]
 8009c8a:	4313      	orrs	r3, r2
 8009c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8009c8e:	697b      	ldr	r3, [r7, #20]
 8009c90:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8009c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	4a17      	ldr	r2, [pc, #92]	; (8009cf8 <TIM_OC3_SetConfig+0xe4>)
 8009c9a:	4293      	cmp	r3, r2
 8009c9c:	d003      	beq.n	8009ca6 <TIM_OC3_SetConfig+0x92>
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	4a16      	ldr	r2, [pc, #88]	; (8009cfc <TIM_OC3_SetConfig+0xe8>)
 8009ca2:	4293      	cmp	r3, r2
 8009ca4:	d113      	bne.n	8009cce <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8009ca6:	693b      	ldr	r3, [r7, #16]
 8009ca8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009cac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8009cae:	693b      	ldr	r3, [r7, #16]
 8009cb0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009cb4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	695b      	ldr	r3, [r3, #20]
 8009cba:	011b      	lsls	r3, r3, #4
 8009cbc:	693a      	ldr	r2, [r7, #16]
 8009cbe:	4313      	orrs	r3, r2
 8009cc0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8009cc2:	683b      	ldr	r3, [r7, #0]
 8009cc4:	699b      	ldr	r3, [r3, #24]
 8009cc6:	011b      	lsls	r3, r3, #4
 8009cc8:	693a      	ldr	r2, [r7, #16]
 8009cca:	4313      	orrs	r3, r2
 8009ccc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	693a      	ldr	r2, [r7, #16]
 8009cd2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68fa      	ldr	r2, [r7, #12]
 8009cd8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8009cda:	683b      	ldr	r3, [r7, #0]
 8009cdc:	685a      	ldr	r2, [r3, #4]
 8009cde:	687b      	ldr	r3, [r7, #4]
 8009ce0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	697a      	ldr	r2, [r7, #20]
 8009ce6:	621a      	str	r2, [r3, #32]
}
 8009ce8:	bf00      	nop
 8009cea:	371c      	adds	r7, #28
 8009cec:	46bd      	mov	sp, r7
 8009cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cf2:	4770      	bx	lr
 8009cf4:	fffeff8f 	.word	0xfffeff8f
 8009cf8:	40010000 	.word	0x40010000
 8009cfc:	40010400 	.word	0x40010400

08009d00 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8009d00:	b480      	push	{r7}
 8009d02:	b087      	sub	sp, #28
 8009d04:	af00      	add	r7, sp, #0
 8009d06:	6078      	str	r0, [r7, #4]
 8009d08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009d0a:	687b      	ldr	r3, [r7, #4]
 8009d0c:	6a1b      	ldr	r3, [r3, #32]
 8009d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009d12:	687b      	ldr	r3, [r7, #4]
 8009d14:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	6a1b      	ldr	r3, [r3, #32]
 8009d1a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	685b      	ldr	r3, [r3, #4]
 8009d20:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	69db      	ldr	r3, [r3, #28]
 8009d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8009d28:	68fa      	ldr	r2, [r7, #12]
 8009d2a:	4b1e      	ldr	r3, [pc, #120]	; (8009da4 <TIM_OC4_SetConfig+0xa4>)
 8009d2c:	4013      	ands	r3, r2
 8009d2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8009d30:	68fb      	ldr	r3, [r7, #12]
 8009d32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009d36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009d38:	683b      	ldr	r3, [r7, #0]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	021b      	lsls	r3, r3, #8
 8009d3e:	68fa      	ldr	r2, [r7, #12]
 8009d40:	4313      	orrs	r3, r2
 8009d42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8009d44:	693b      	ldr	r3, [r7, #16]
 8009d46:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009d4a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	689b      	ldr	r3, [r3, #8]
 8009d50:	031b      	lsls	r3, r3, #12
 8009d52:	693a      	ldr	r2, [r7, #16]
 8009d54:	4313      	orrs	r3, r2
 8009d56:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009d58:	687b      	ldr	r3, [r7, #4]
 8009d5a:	4a13      	ldr	r2, [pc, #76]	; (8009da8 <TIM_OC4_SetConfig+0xa8>)
 8009d5c:	4293      	cmp	r3, r2
 8009d5e:	d003      	beq.n	8009d68 <TIM_OC4_SetConfig+0x68>
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	4a12      	ldr	r2, [pc, #72]	; (8009dac <TIM_OC4_SetConfig+0xac>)
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d109      	bne.n	8009d7c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8009d68:	697b      	ldr	r3, [r7, #20]
 8009d6a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d6e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8009d70:	683b      	ldr	r3, [r7, #0]
 8009d72:	695b      	ldr	r3, [r3, #20]
 8009d74:	019b      	lsls	r3, r3, #6
 8009d76:	697a      	ldr	r2, [r7, #20]
 8009d78:	4313      	orrs	r3, r2
 8009d7a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	697a      	ldr	r2, [r7, #20]
 8009d80:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009d82:	687b      	ldr	r3, [r7, #4]
 8009d84:	68fa      	ldr	r2, [r7, #12]
 8009d86:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8009d88:	683b      	ldr	r3, [r7, #0]
 8009d8a:	685a      	ldr	r2, [r3, #4]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	693a      	ldr	r2, [r7, #16]
 8009d94:	621a      	str	r2, [r3, #32]
}
 8009d96:	bf00      	nop
 8009d98:	371c      	adds	r7, #28
 8009d9a:	46bd      	mov	sp, r7
 8009d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da0:	4770      	bx	lr
 8009da2:	bf00      	nop
 8009da4:	feff8fff 	.word	0xfeff8fff
 8009da8:	40010000 	.word	0x40010000
 8009dac:	40010400 	.word	0x40010400

08009db0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009db0:	b480      	push	{r7}
 8009db2:	b087      	sub	sp, #28
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
 8009db8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	6a1b      	ldr	r3, [r3, #32]
 8009dbe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	6a1b      	ldr	r3, [r3, #32]
 8009dca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	685b      	ldr	r3, [r3, #4]
 8009dd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8009dd8:	68fa      	ldr	r2, [r7, #12]
 8009dda:	4b1b      	ldr	r3, [pc, #108]	; (8009e48 <TIM_OC5_SetConfig+0x98>)
 8009ddc:	4013      	ands	r3, r2
 8009dde:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009de0:	683b      	ldr	r3, [r7, #0]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	68fa      	ldr	r2, [r7, #12]
 8009de6:	4313      	orrs	r3, r2
 8009de8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8009dea:	693b      	ldr	r3, [r7, #16]
 8009dec:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8009df0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8009df2:	683b      	ldr	r3, [r7, #0]
 8009df4:	689b      	ldr	r3, [r3, #8]
 8009df6:	041b      	lsls	r3, r3, #16
 8009df8:	693a      	ldr	r2, [r7, #16]
 8009dfa:	4313      	orrs	r3, r2
 8009dfc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	4a12      	ldr	r2, [pc, #72]	; (8009e4c <TIM_OC5_SetConfig+0x9c>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d003      	beq.n	8009e0e <TIM_OC5_SetConfig+0x5e>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	4a11      	ldr	r2, [pc, #68]	; (8009e50 <TIM_OC5_SetConfig+0xa0>)
 8009e0a:	4293      	cmp	r3, r2
 8009e0c:	d109      	bne.n	8009e22 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8009e0e:	697b      	ldr	r3, [r7, #20]
 8009e10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009e14:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8009e16:	683b      	ldr	r3, [r7, #0]
 8009e18:	695b      	ldr	r3, [r3, #20]
 8009e1a:	021b      	lsls	r3, r3, #8
 8009e1c:	697a      	ldr	r2, [r7, #20]
 8009e1e:	4313      	orrs	r3, r2
 8009e20:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009e22:	687b      	ldr	r3, [r7, #4]
 8009e24:	697a      	ldr	r2, [r7, #20]
 8009e26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009e28:	687b      	ldr	r3, [r7, #4]
 8009e2a:	68fa      	ldr	r2, [r7, #12]
 8009e2c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8009e2e:	683b      	ldr	r3, [r7, #0]
 8009e30:	685a      	ldr	r2, [r3, #4]
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009e36:	687b      	ldr	r3, [r7, #4]
 8009e38:	693a      	ldr	r2, [r7, #16]
 8009e3a:	621a      	str	r2, [r3, #32]
}
 8009e3c:	bf00      	nop
 8009e3e:	371c      	adds	r7, #28
 8009e40:	46bd      	mov	sp, r7
 8009e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e46:	4770      	bx	lr
 8009e48:	fffeff8f 	.word	0xfffeff8f
 8009e4c:	40010000 	.word	0x40010000
 8009e50:	40010400 	.word	0x40010400

08009e54 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8009e54:	b480      	push	{r7}
 8009e56:	b087      	sub	sp, #28
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	6a1b      	ldr	r3, [r3, #32]
 8009e62:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a1b      	ldr	r3, [r3, #32]
 8009e6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	685b      	ldr	r3, [r3, #4]
 8009e74:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8009e7c:	68fa      	ldr	r2, [r7, #12]
 8009e7e:	4b1c      	ldr	r3, [pc, #112]	; (8009ef0 <TIM_OC6_SetConfig+0x9c>)
 8009e80:	4013      	ands	r3, r2
 8009e82:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	021b      	lsls	r3, r3, #8
 8009e8a:	68fa      	ldr	r2, [r7, #12]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8009e90:	693b      	ldr	r3, [r7, #16]
 8009e92:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8009e96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8009e98:	683b      	ldr	r3, [r7, #0]
 8009e9a:	689b      	ldr	r3, [r3, #8]
 8009e9c:	051b      	lsls	r3, r3, #20
 8009e9e:	693a      	ldr	r2, [r7, #16]
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	4a13      	ldr	r2, [pc, #76]	; (8009ef4 <TIM_OC6_SetConfig+0xa0>)
 8009ea8:	4293      	cmp	r3, r2
 8009eaa:	d003      	beq.n	8009eb4 <TIM_OC6_SetConfig+0x60>
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	4a12      	ldr	r2, [pc, #72]	; (8009ef8 <TIM_OC6_SetConfig+0xa4>)
 8009eb0:	4293      	cmp	r3, r2
 8009eb2:	d109      	bne.n	8009ec8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8009eb4:	697b      	ldr	r3, [r7, #20]
 8009eb6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8009eba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	695b      	ldr	r3, [r3, #20]
 8009ec0:	029b      	lsls	r3, r3, #10
 8009ec2:	697a      	ldr	r2, [r7, #20]
 8009ec4:	4313      	orrs	r3, r2
 8009ec6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	697a      	ldr	r2, [r7, #20]
 8009ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	68fa      	ldr	r2, [r7, #12]
 8009ed2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	685a      	ldr	r2, [r3, #4]
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	693a      	ldr	r2, [r7, #16]
 8009ee0:	621a      	str	r2, [r3, #32]
}
 8009ee2:	bf00      	nop
 8009ee4:	371c      	adds	r7, #28
 8009ee6:	46bd      	mov	sp, r7
 8009ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eec:	4770      	bx	lr
 8009eee:	bf00      	nop
 8009ef0:	feff8fff 	.word	0xfeff8fff
 8009ef4:	40010000 	.word	0x40010000
 8009ef8:	40010400 	.word	0x40010400

08009efc <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b086      	sub	sp, #24
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
 8009f04:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	689b      	ldr	r3, [r3, #8]
 8009f0c:	617b      	str	r3, [r7, #20]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009f0e:	697b      	ldr	r3, [r7, #20]
 8009f10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f14:	617b      	str	r3, [r7, #20]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8009f16:	683b      	ldr	r3, [r7, #0]
 8009f18:	685b      	ldr	r3, [r3, #4]
 8009f1a:	697a      	ldr	r2, [r7, #20]
 8009f1c:	4313      	orrs	r3, r2
 8009f1e:	617b      	str	r3, [r7, #20]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8009f20:	697a      	ldr	r2, [r7, #20]
 8009f22:	4b3d      	ldr	r3, [pc, #244]	; (800a018 <TIM_SlaveTimer_SetConfig+0x11c>)
 8009f24:	4013      	ands	r3, r2
 8009f26:	617b      	str	r3, [r7, #20]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8009f28:	683b      	ldr	r3, [r7, #0]
 8009f2a:	681b      	ldr	r3, [r3, #0]
 8009f2c:	697a      	ldr	r2, [r7, #20]
 8009f2e:	4313      	orrs	r3, r2
 8009f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	697a      	ldr	r2, [r7, #20]
 8009f38:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8009f3a:	683b      	ldr	r3, [r7, #0]
 8009f3c:	685b      	ldr	r3, [r3, #4]
 8009f3e:	2b70      	cmp	r3, #112	; 0x70
 8009f40:	d01a      	beq.n	8009f78 <TIM_SlaveTimer_SetConfig+0x7c>
 8009f42:	2b70      	cmp	r3, #112	; 0x70
 8009f44:	d860      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f46:	2b60      	cmp	r3, #96	; 0x60
 8009f48:	d054      	beq.n	8009ff4 <TIM_SlaveTimer_SetConfig+0xf8>
 8009f4a:	2b60      	cmp	r3, #96	; 0x60
 8009f4c:	d85c      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f4e:	2b50      	cmp	r3, #80	; 0x50
 8009f50:	d046      	beq.n	8009fe0 <TIM_SlaveTimer_SetConfig+0xe4>
 8009f52:	2b50      	cmp	r3, #80	; 0x50
 8009f54:	d858      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f56:	2b40      	cmp	r3, #64	; 0x40
 8009f58:	d019      	beq.n	8009f8e <TIM_SlaveTimer_SetConfig+0x92>
 8009f5a:	2b40      	cmp	r3, #64	; 0x40
 8009f5c:	d854      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d054      	beq.n	800a00c <TIM_SlaveTimer_SetConfig+0x110>
 8009f62:	2b30      	cmp	r3, #48	; 0x30
 8009f64:	d850      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f66:	2b20      	cmp	r3, #32
 8009f68:	d050      	beq.n	800a00c <TIM_SlaveTimer_SetConfig+0x110>
 8009f6a:	2b20      	cmp	r3, #32
 8009f6c:	d84c      	bhi.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
 8009f6e:	2b00      	cmp	r3, #0
 8009f70:	d04c      	beq.n	800a00c <TIM_SlaveTimer_SetConfig+0x110>
 8009f72:	2b10      	cmp	r3, #16
 8009f74:	d04a      	beq.n	800a00c <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      break;
 8009f76:	e047      	b.n	800a008 <TIM_SlaveTimer_SetConfig+0x10c>
      TIM_ETR_SetConfig(htim->Instance,
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	6818      	ldr	r0, [r3, #0]
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	68d9      	ldr	r1, [r3, #12]
 8009f80:	683b      	ldr	r3, [r7, #0]
 8009f82:	689a      	ldr	r2, [r3, #8]
 8009f84:	683b      	ldr	r3, [r7, #0]
 8009f86:	691b      	ldr	r3, [r3, #16]
 8009f88:	f000 f8c2 	bl	800a110 <TIM_ETR_SetConfig>
      break;
 8009f8c:	e03f      	b.n	800a00e <TIM_SlaveTimer_SetConfig+0x112>
      if(sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8009f8e:	683b      	ldr	r3, [r7, #0]
 8009f90:	681b      	ldr	r3, [r3, #0]
 8009f92:	2b05      	cmp	r3, #5
 8009f94:	d101      	bne.n	8009f9a <TIM_SlaveTimer_SetConfig+0x9e>
        return HAL_ERROR;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e03a      	b.n	800a010 <TIM_SlaveTimer_SetConfig+0x114>
      tmpccer = htim->Instance->CCER;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	681b      	ldr	r3, [r3, #0]
 8009f9e:	6a1b      	ldr	r3, [r3, #32]
 8009fa0:	613b      	str	r3, [r7, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	6a1a      	ldr	r2, [r3, #32]
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f022 0201 	bic.w	r2, r2, #1
 8009fb0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	681b      	ldr	r3, [r3, #0]
 8009fb6:	699b      	ldr	r3, [r3, #24]
 8009fb8:	60fb      	str	r3, [r7, #12]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009fc0:	60fb      	str	r3, [r7, #12]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8009fc2:	683b      	ldr	r3, [r7, #0]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	011b      	lsls	r3, r3, #4
 8009fc8:	68fa      	ldr	r2, [r7, #12]
 8009fca:	4313      	orrs	r3, r2
 8009fcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCMR1 = tmpccmr1;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	68fa      	ldr	r2, [r7, #12]
 8009fd4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	693a      	ldr	r2, [r7, #16]
 8009fdc:	621a      	str	r2, [r3, #32]
      break;
 8009fde:	e016      	b.n	800a00e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	6818      	ldr	r0, [r3, #0]
 8009fe4:	683b      	ldr	r3, [r7, #0]
 8009fe6:	6899      	ldr	r1, [r3, #8]
 8009fe8:	683b      	ldr	r3, [r7, #0]
 8009fea:	691b      	ldr	r3, [r3, #16]
 8009fec:	461a      	mov	r2, r3
 8009fee:	f000 f815 	bl	800a01c <TIM_TI1_ConfigInputStage>
      break;
 8009ff2:	e00c      	b.n	800a00e <TIM_SlaveTimer_SetConfig+0x112>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	6818      	ldr	r0, [r3, #0]
 8009ff8:	683b      	ldr	r3, [r7, #0]
 8009ffa:	6899      	ldr	r1, [r3, #8]
 8009ffc:	683b      	ldr	r3, [r7, #0]
 8009ffe:	691b      	ldr	r3, [r3, #16]
 800a000:	461a      	mov	r2, r3
 800a002:	f000 f83a 	bl	800a07a <TIM_TI2_ConfigInputStage>
      break;
 800a006:	e002      	b.n	800a00e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a008:	bf00      	nop
 800a00a:	e000      	b.n	800a00e <TIM_SlaveTimer_SetConfig+0x112>
      break;
 800a00c:	bf00      	nop
  }
  return HAL_OK;
 800a00e:	2300      	movs	r3, #0
}
 800a010:	4618      	mov	r0, r3
 800a012:	3718      	adds	r7, #24
 800a014:	46bd      	mov	sp, r7
 800a016:	bd80      	pop	{r7, pc}
 800a018:	fffefff8 	.word	0xfffefff8

0800a01c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a01c:	b480      	push	{r7}
 800a01e:	b087      	sub	sp, #28
 800a020:	af00      	add	r7, sp, #0
 800a022:	60f8      	str	r0, [r7, #12]
 800a024:	60b9      	str	r1, [r7, #8]
 800a026:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a028:	68fb      	ldr	r3, [r7, #12]
 800a02a:	6a1b      	ldr	r3, [r3, #32]
 800a02c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a02e:	68fb      	ldr	r3, [r7, #12]
 800a030:	6a1b      	ldr	r3, [r3, #32]
 800a032:	f023 0201 	bic.w	r2, r3, #1
 800a036:	68fb      	ldr	r3, [r7, #12]
 800a038:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a03a:	68fb      	ldr	r3, [r7, #12]
 800a03c:	699b      	ldr	r3, [r3, #24]
 800a03e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a040:	693b      	ldr	r3, [r7, #16]
 800a042:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a046:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	011b      	lsls	r3, r3, #4
 800a04c:	693a      	ldr	r2, [r7, #16]
 800a04e:	4313      	orrs	r3, r2
 800a050:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a052:	697b      	ldr	r3, [r7, #20]
 800a054:	f023 030a 	bic.w	r3, r3, #10
 800a058:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a05a:	697a      	ldr	r2, [r7, #20]
 800a05c:	68bb      	ldr	r3, [r7, #8]
 800a05e:	4313      	orrs	r3, r2
 800a060:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a062:	68fb      	ldr	r3, [r7, #12]
 800a064:	693a      	ldr	r2, [r7, #16]
 800a066:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	697a      	ldr	r2, [r7, #20]
 800a06c:	621a      	str	r2, [r3, #32]
}
 800a06e:	bf00      	nop
 800a070:	371c      	adds	r7, #28
 800a072:	46bd      	mov	sp, r7
 800a074:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a078:	4770      	bx	lr

0800a07a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a07a:	b480      	push	{r7}
 800a07c:	b087      	sub	sp, #28
 800a07e:	af00      	add	r7, sp, #0
 800a080:	60f8      	str	r0, [r7, #12]
 800a082:	60b9      	str	r1, [r7, #8]
 800a084:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	6a1b      	ldr	r3, [r3, #32]
 800a08a:	f023 0210 	bic.w	r2, r3, #16
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	699b      	ldr	r3, [r3, #24]
 800a096:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	6a1b      	ldr	r3, [r3, #32]
 800a09c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a09e:	697b      	ldr	r3, [r7, #20]
 800a0a0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a0a4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	031b      	lsls	r3, r3, #12
 800a0aa:	697a      	ldr	r2, [r7, #20]
 800a0ac:	4313      	orrs	r3, r2
 800a0ae:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a0b0:	693b      	ldr	r3, [r7, #16]
 800a0b2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a0b6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a0b8:	68bb      	ldr	r3, [r7, #8]
 800a0ba:	011b      	lsls	r3, r3, #4
 800a0bc:	693a      	ldr	r2, [r7, #16]
 800a0be:	4313      	orrs	r3, r2
 800a0c0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	697a      	ldr	r2, [r7, #20]
 800a0c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	693a      	ldr	r2, [r7, #16]
 800a0cc:	621a      	str	r2, [r3, #32]
}
 800a0ce:	bf00      	nop
 800a0d0:	371c      	adds	r7, #28
 800a0d2:	46bd      	mov	sp, r7
 800a0d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0d8:	4770      	bx	lr

0800a0da <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a0da:	b480      	push	{r7}
 800a0dc:	b085      	sub	sp, #20
 800a0de:	af00      	add	r7, sp, #0
 800a0e0:	6078      	str	r0, [r7, #4]
 800a0e2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a0e4:	687b      	ldr	r3, [r7, #4]
 800a0e6:	689b      	ldr	r3, [r3, #8]
 800a0e8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a0f2:	683a      	ldr	r2, [r7, #0]
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	4313      	orrs	r3, r2
 800a0f8:	f043 0307 	orr.w	r3, r3, #7
 800a0fc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	68fa      	ldr	r2, [r7, #12]
 800a102:	609a      	str	r2, [r3, #8]
}
 800a104:	bf00      	nop
 800a106:	3714      	adds	r7, #20
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a110:	b480      	push	{r7}
 800a112:	b087      	sub	sp, #28
 800a114:	af00      	add	r7, sp, #0
 800a116:	60f8      	str	r0, [r7, #12]
 800a118:	60b9      	str	r1, [r7, #8]
 800a11a:	607a      	str	r2, [r7, #4]
 800a11c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a11e:	68fb      	ldr	r3, [r7, #12]
 800a120:	689b      	ldr	r3, [r3, #8]
 800a122:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a124:	697b      	ldr	r3, [r7, #20]
 800a126:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a12a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	021a      	lsls	r2, r3, #8
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	431a      	orrs	r2, r3
 800a134:	68bb      	ldr	r3, [r7, #8]
 800a136:	4313      	orrs	r3, r2
 800a138:	697a      	ldr	r2, [r7, #20]
 800a13a:	4313      	orrs	r3, r2
 800a13c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	697a      	ldr	r2, [r7, #20]
 800a142:	609a      	str	r2, [r3, #8]
}
 800a144:	bf00      	nop
 800a146:	371c      	adds	r7, #28
 800a148:	46bd      	mov	sp, r7
 800a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a14e:	4770      	bx	lr

0800a150 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a150:	b480      	push	{r7}
 800a152:	b085      	sub	sp, #20
 800a154:	af00      	add	r7, sp, #0
 800a156:	6078      	str	r0, [r7, #4]
 800a158:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a160:	2b01      	cmp	r3, #1
 800a162:	d101      	bne.n	800a168 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a164:	2302      	movs	r3, #2
 800a166:	e06d      	b.n	800a244 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	2201      	movs	r2, #1
 800a16c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	2202      	movs	r2, #2
 800a174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	685b      	ldr	r3, [r3, #4]
 800a17e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a180:	687b      	ldr	r3, [r7, #4]
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	689b      	ldr	r3, [r3, #8]
 800a186:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	681b      	ldr	r3, [r3, #0]
 800a18c:	4a30      	ldr	r2, [pc, #192]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a18e:	4293      	cmp	r3, r2
 800a190:	d004      	beq.n	800a19c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800a192:	687b      	ldr	r3, [r7, #4]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	4a2f      	ldr	r2, [pc, #188]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a198:	4293      	cmp	r3, r2
 800a19a:	d108      	bne.n	800a1ae <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a1a2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a1a4:	683b      	ldr	r3, [r7, #0]
 800a1a6:	685b      	ldr	r3, [r3, #4]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a1b4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68fa      	ldr	r2, [r7, #12]
 800a1bc:	4313      	orrs	r3, r2
 800a1be:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	68fa      	ldr	r2, [r7, #12]
 800a1c6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a1c8:	687b      	ldr	r3, [r7, #4]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a20      	ldr	r2, [pc, #128]	; (800a250 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d022      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a1da:	d01d      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	681b      	ldr	r3, [r3, #0]
 800a1e0:	4a1d      	ldr	r2, [pc, #116]	; (800a258 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800a1e2:	4293      	cmp	r3, r2
 800a1e4:	d018      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	4a1c      	ldr	r2, [pc, #112]	; (800a25c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800a1ec:	4293      	cmp	r3, r2
 800a1ee:	d013      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	4a1a      	ldr	r2, [pc, #104]	; (800a260 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800a1f6:	4293      	cmp	r3, r2
 800a1f8:	d00e      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a1fa:	687b      	ldr	r3, [r7, #4]
 800a1fc:	681b      	ldr	r3, [r3, #0]
 800a1fe:	4a15      	ldr	r2, [pc, #84]	; (800a254 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800a200:	4293      	cmp	r3, r2
 800a202:	d009      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a204:	687b      	ldr	r3, [r7, #4]
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	4a16      	ldr	r2, [pc, #88]	; (800a264 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800a20a:	4293      	cmp	r3, r2
 800a20c:	d004      	beq.n	800a218 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	4a15      	ldr	r2, [pc, #84]	; (800a268 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800a214:	4293      	cmp	r3, r2
 800a216:	d10c      	bne.n	800a232 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a218:	68bb      	ldr	r3, [r7, #8]
 800a21a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a21e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a220:	683b      	ldr	r3, [r7, #0]
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	68ba      	ldr	r2, [r7, #8]
 800a226:	4313      	orrs	r3, r2
 800a228:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a22a:	687b      	ldr	r3, [r7, #4]
 800a22c:	681b      	ldr	r3, [r3, #0]
 800a22e:	68ba      	ldr	r2, [r7, #8]
 800a230:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	2201      	movs	r2, #1
 800a236:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a23a:	687b      	ldr	r3, [r7, #4]
 800a23c:	2200      	movs	r2, #0
 800a23e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a242:	2300      	movs	r3, #0
}
 800a244:	4618      	mov	r0, r3
 800a246:	3714      	adds	r7, #20
 800a248:	46bd      	mov	sp, r7
 800a24a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24e:	4770      	bx	lr
 800a250:	40010000 	.word	0x40010000
 800a254:	40010400 	.word	0x40010400
 800a258:	40000400 	.word	0x40000400
 800a25c:	40000800 	.word	0x40000800
 800a260:	40000c00 	.word	0x40000c00
 800a264:	40014000 	.word	0x40014000
 800a268:	40001800 	.word	0x40001800

0800a26c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800a26c:	b480      	push	{r7}
 800a26e:	b085      	sub	sp, #20
 800a270:	af00      	add	r7, sp, #0
 800a272:	6078      	str	r0, [r7, #4]
 800a274:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800a276:	2300      	movs	r3, #0
 800a278:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a280:	2b01      	cmp	r3, #1
 800a282:	d101      	bne.n	800a288 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800a284:	2302      	movs	r3, #2
 800a286:	e065      	b.n	800a354 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 800a288:	687b      	ldr	r3, [r7, #4]
 800a28a:	2201      	movs	r2, #1
 800a28c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800a290:	68fb      	ldr	r3, [r7, #12]
 800a292:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800a296:	683b      	ldr	r3, [r7, #0]
 800a298:	68db      	ldr	r3, [r3, #12]
 800a29a:	4313      	orrs	r3, r2
 800a29c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a2a4:	683b      	ldr	r3, [r7, #0]
 800a2a6:	689b      	ldr	r3, [r3, #8]
 800a2a8:	4313      	orrs	r3, r2
 800a2aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800a2b2:	683b      	ldr	r3, [r7, #0]
 800a2b4:	685b      	ldr	r3, [r3, #4]
 800a2b6:	4313      	orrs	r3, r2
 800a2b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800a2ba:	68fb      	ldr	r3, [r7, #12]
 800a2bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800a2c0:	683b      	ldr	r3, [r7, #0]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	4313      	orrs	r3, r2
 800a2c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800a2c8:	68fb      	ldr	r3, [r7, #12]
 800a2ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	691b      	ldr	r3, [r3, #16]
 800a2d2:	4313      	orrs	r3, r2
 800a2d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800a2dc:	683b      	ldr	r3, [r7, #0]
 800a2de:	695b      	ldr	r3, [r3, #20]
 800a2e0:	4313      	orrs	r3, r2
 800a2e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800a2ea:	683b      	ldr	r3, [r7, #0]
 800a2ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a2ee:	4313      	orrs	r3, r2
 800a2f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800a2f8:	683b      	ldr	r3, [r7, #0]
 800a2fa:	699b      	ldr	r3, [r3, #24]
 800a2fc:	041b      	lsls	r3, r3, #16
 800a2fe:	4313      	orrs	r3, r2
 800a300:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	4a16      	ldr	r2, [pc, #88]	; (800a360 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 800a308:	4293      	cmp	r3, r2
 800a30a:	d004      	beq.n	800a316 <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	4a14      	ldr	r2, [pc, #80]	; (800a364 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 800a312:	4293      	cmp	r3, r2
 800a314:	d115      	bne.n	800a342 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800a31c:	683b      	ldr	r3, [r7, #0]
 800a31e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a320:	051b      	lsls	r3, r3, #20
 800a322:	4313      	orrs	r3, r2
 800a324:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800a32c:	683b      	ldr	r3, [r7, #0]
 800a32e:	69db      	ldr	r3, [r3, #28]
 800a330:	4313      	orrs	r3, r2
 800a332:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	6a1b      	ldr	r3, [r3, #32]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	2200      	movs	r2, #0
 800a34e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a352:	2300      	movs	r3, #0
}
 800a354:	4618      	mov	r0, r3
 800a356:	3714      	adds	r7, #20
 800a358:	46bd      	mov	sp, r7
 800a35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35e:	4770      	bx	lr
 800a360:	40010000 	.word	0x40010000
 800a364:	40010400 	.word	0x40010400

0800a368 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a368:	b480      	push	{r7}
 800a36a:	b083      	sub	sp, #12
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a370:	bf00      	nop
 800a372:	370c      	adds	r7, #12
 800a374:	46bd      	mov	sp, r7
 800a376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a37a:	4770      	bx	lr

0800a37c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b083      	sub	sp, #12
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a384:	bf00      	nop
 800a386:	370c      	adds	r7, #12
 800a388:	46bd      	mov	sp, r7
 800a38a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38e:	4770      	bx	lr

0800a390 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a390:	b480      	push	{r7}
 800a392:	b083      	sub	sp, #12
 800a394:	af00      	add	r7, sp, #0
 800a396:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a398:	bf00      	nop
 800a39a:	370c      	adds	r7, #12
 800a39c:	46bd      	mov	sp, r7
 800a39e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a2:	4770      	bx	lr

0800a3a4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3a4:	b580      	push	{r7, lr}
 800a3a6:	b082      	sub	sp, #8
 800a3a8:	af00      	add	r7, sp, #0
 800a3aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	2b00      	cmp	r3, #0
 800a3b0:	d101      	bne.n	800a3b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	e040      	b.n	800a438 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d106      	bne.n	800a3cc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	2200      	movs	r2, #0
 800a3c2:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a3c6:	6878      	ldr	r0, [r7, #4]
 800a3c8:	f7fa f834 	bl	8004434 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	2224      	movs	r2, #36	; 0x24
 800a3d0:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 800a3d2:	687b      	ldr	r3, [r7, #4]
 800a3d4:	681b      	ldr	r3, [r3, #0]
 800a3d6:	681a      	ldr	r2, [r3, #0]
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	681b      	ldr	r3, [r3, #0]
 800a3dc:	f022 0201 	bic.w	r2, r2, #1
 800a3e0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 fa6e 	bl	800a8c4 <UART_SetConfig>
 800a3e8:	4603      	mov	r3, r0
 800a3ea:	2b01      	cmp	r3, #1
 800a3ec:	d101      	bne.n	800a3f2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	e022      	b.n	800a438 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3f6:	2b00      	cmp	r3, #0
 800a3f8:	d002      	beq.n	800a400 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a3fa:	6878      	ldr	r0, [r7, #4]
 800a3fc:	f000 fd0e 	bl	800ae1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	685a      	ldr	r2, [r3, #4]
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a40e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	689a      	ldr	r2, [r3, #8]
 800a416:	687b      	ldr	r3, [r7, #4]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a41e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	681a      	ldr	r2, [r3, #0]
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	f042 0201 	orr.w	r2, r2, #1
 800a42e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a430:	6878      	ldr	r0, [r7, #4]
 800a432:	f000 fd95 	bl	800af60 <UART_CheckIdleState>
 800a436:	4603      	mov	r3, r0
}
 800a438:	4618      	mov	r0, r3
 800a43a:	3708      	adds	r7, #8
 800a43c:	46bd      	mov	sp, r7
 800a43e:	bd80      	pop	{r7, pc}

0800a440 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a440:	b480      	push	{r7}
 800a442:	b085      	sub	sp, #20
 800a444:	af00      	add	r7, sp, #0
 800a446:	60f8      	str	r0, [r7, #12]
 800a448:	60b9      	str	r1, [r7, #8]
 800a44a:	4613      	mov	r3, r2
 800a44c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a452:	2b20      	cmp	r3, #32
 800a454:	d144      	bne.n	800a4e0 <HAL_UART_Transmit_IT+0xa0>
  {
    if ((pData == NULL) || (Size == 0U))
 800a456:	68bb      	ldr	r3, [r7, #8]
 800a458:	2b00      	cmp	r3, #0
 800a45a:	d002      	beq.n	800a462 <HAL_UART_Transmit_IT+0x22>
 800a45c:	88fb      	ldrh	r3, [r7, #6]
 800a45e:	2b00      	cmp	r3, #0
 800a460:	d101      	bne.n	800a466 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800a462:	2301      	movs	r3, #1
 800a464:	e03d      	b.n	800a4e2 <HAL_UART_Transmit_IT+0xa2>
    }

    __HAL_LOCK(huart);
 800a466:	68fb      	ldr	r3, [r7, #12]
 800a468:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a46c:	2b01      	cmp	r3, #1
 800a46e:	d101      	bne.n	800a474 <HAL_UART_Transmit_IT+0x34>
 800a470:	2302      	movs	r3, #2
 800a472:	e036      	b.n	800a4e2 <HAL_UART_Transmit_IT+0xa2>
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2201      	movs	r2, #1
 800a478:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pTxBuffPtr  = pData;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	68ba      	ldr	r2, [r7, #8]
 800a480:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	88fa      	ldrh	r2, [r7, #6]
 800a486:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a48a:	68fb      	ldr	r3, [r7, #12]
 800a48c:	88fa      	ldrh	r2, [r7, #6]
 800a48e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	2200      	movs	r2, #0
 800a496:	665a      	str	r2, [r3, #100]	; 0x64

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a498:	68fb      	ldr	r3, [r7, #12]
 800a49a:	2200      	movs	r2, #0
 800a49c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a49e:	68fb      	ldr	r3, [r7, #12]
 800a4a0:	2221      	movs	r2, #33	; 0x21
 800a4a2:	675a      	str	r2, [r3, #116]	; 0x74

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ac:	d107      	bne.n	800a4be <HAL_UART_Transmit_IT+0x7e>
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	691b      	ldr	r3, [r3, #16]
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d103      	bne.n	800a4be <HAL_UART_Transmit_IT+0x7e>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	4a0d      	ldr	r2, [pc, #52]	; (800a4f0 <HAL_UART_Transmit_IT+0xb0>)
 800a4ba:	665a      	str	r2, [r3, #100]	; 0x64
 800a4bc:	e002      	b.n	800a4c4 <HAL_UART_Transmit_IT+0x84>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800a4be:	68fb      	ldr	r3, [r7, #12]
 800a4c0:	4a0c      	ldr	r2, [pc, #48]	; (800a4f4 <HAL_UART_Transmit_IT+0xb4>)
 800a4c2:	665a      	str	r2, [r3, #100]	; 0x64
    }

    __HAL_UNLOCK(huart);
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the Transmit Data Register Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800a4cc:	68fb      	ldr	r3, [r7, #12]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	681a      	ldr	r2, [r3, #0]
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800a4da:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a4dc:	2300      	movs	r3, #0
 800a4de:	e000      	b.n	800a4e2 <HAL_UART_Transmit_IT+0xa2>
  }
  else
  {
    return HAL_BUSY;
 800a4e0:	2302      	movs	r3, #2
  }
}
 800a4e2:	4618      	mov	r0, r3
 800a4e4:	3714      	adds	r7, #20
 800a4e6:	46bd      	mov	sp, r7
 800a4e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ec:	4770      	bx	lr
 800a4ee:	bf00      	nop
 800a4f0:	0800b193 	.word	0x0800b193
 800a4f4:	0800b121 	.word	0x0800b121

0800a4f8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a4f8:	b480      	push	{r7}
 800a4fa:	b085      	sub	sp, #20
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	60f8      	str	r0, [r7, #12]
 800a500:	60b9      	str	r1, [r7, #8]
 800a502:	4613      	mov	r3, r2
 800a504:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a50a:	2b20      	cmp	r3, #32
 800a50c:	f040 808a 	bne.w	800a624 <HAL_UART_Receive_IT+0x12c>
  {
    if ((pData == NULL) || (Size == 0U))
 800a510:	68bb      	ldr	r3, [r7, #8]
 800a512:	2b00      	cmp	r3, #0
 800a514:	d002      	beq.n	800a51c <HAL_UART_Receive_IT+0x24>
 800a516:	88fb      	ldrh	r3, [r7, #6]
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d101      	bne.n	800a520 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800a51c:	2301      	movs	r3, #1
 800a51e:	e082      	b.n	800a626 <HAL_UART_Receive_IT+0x12e>
    }

    __HAL_LOCK(huart);
 800a520:	68fb      	ldr	r3, [r7, #12]
 800a522:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800a526:	2b01      	cmp	r3, #1
 800a528:	d101      	bne.n	800a52e <HAL_UART_Receive_IT+0x36>
 800a52a:	2302      	movs	r3, #2
 800a52c:	e07b      	b.n	800a626 <HAL_UART_Receive_IT+0x12e>
 800a52e:	68fb      	ldr	r3, [r7, #12]
 800a530:	2201      	movs	r2, #1
 800a532:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->pRxBuffPtr  = pData;
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	68ba      	ldr	r2, [r7, #8]
 800a53a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferSize  = Size;
 800a53c:	68fb      	ldr	r3, [r7, #12]
 800a53e:	88fa      	ldrh	r2, [r7, #6]
 800a540:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	88fa      	ldrh	r2, [r7, #6]
 800a548:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    huart->RxISR       = NULL;
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	2200      	movs	r2, #0
 800a550:	661a      	str	r2, [r3, #96]	; 0x60

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800a552:	68fb      	ldr	r3, [r7, #12]
 800a554:	689b      	ldr	r3, [r3, #8]
 800a556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a55a:	d10e      	bne.n	800a57a <HAL_UART_Receive_IT+0x82>
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	691b      	ldr	r3, [r3, #16]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d105      	bne.n	800a570 <HAL_UART_Receive_IT+0x78>
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	f240 12ff 	movw	r2, #511	; 0x1ff
 800a56a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a56e:	e02d      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a570:	68fb      	ldr	r3, [r7, #12]
 800a572:	22ff      	movs	r2, #255	; 0xff
 800a574:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a578:	e028      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	689b      	ldr	r3, [r3, #8]
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d10d      	bne.n	800a59e <HAL_UART_Receive_IT+0xa6>
 800a582:	68fb      	ldr	r3, [r7, #12]
 800a584:	691b      	ldr	r3, [r3, #16]
 800a586:	2b00      	cmp	r3, #0
 800a588:	d104      	bne.n	800a594 <HAL_UART_Receive_IT+0x9c>
 800a58a:	68fb      	ldr	r3, [r7, #12]
 800a58c:	22ff      	movs	r2, #255	; 0xff
 800a58e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a592:	e01b      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	227f      	movs	r2, #127	; 0x7f
 800a598:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a59c:	e016      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	689b      	ldr	r3, [r3, #8]
 800a5a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a5a6:	d10d      	bne.n	800a5c4 <HAL_UART_Receive_IT+0xcc>
 800a5a8:	68fb      	ldr	r3, [r7, #12]
 800a5aa:	691b      	ldr	r3, [r3, #16]
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d104      	bne.n	800a5ba <HAL_UART_Receive_IT+0xc2>
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	227f      	movs	r2, #127	; 0x7f
 800a5b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5b8:	e008      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a5ba:	68fb      	ldr	r3, [r7, #12]
 800a5bc:	223f      	movs	r2, #63	; 0x3f
 800a5be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800a5c2:	e003      	b.n	800a5cc <HAL_UART_Receive_IT+0xd4>
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	2200      	movs	r2, #0
 800a5c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5cc:	68fb      	ldr	r3, [r7, #12]
 800a5ce:	2200      	movs	r2, #0
 800a5d0:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	2222      	movs	r2, #34	; 0x22
 800a5d6:	679a      	str	r2, [r3, #120]	; 0x78

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	689a      	ldr	r2, [r3, #8]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0201 	orr.w	r2, r2, #1
 800a5e6:	609a      	str	r2, [r3, #8]

    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	689b      	ldr	r3, [r3, #8]
 800a5ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a5f0:	d107      	bne.n	800a602 <HAL_UART_Receive_IT+0x10a>
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	691b      	ldr	r3, [r3, #16]
 800a5f6:	2b00      	cmp	r3, #0
 800a5f8:	d103      	bne.n	800a602 <HAL_UART_Receive_IT+0x10a>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	4a0d      	ldr	r2, [pc, #52]	; (800a634 <HAL_UART_Receive_IT+0x13c>)
 800a5fe:	661a      	str	r2, [r3, #96]	; 0x60
 800a600:	e002      	b.n	800a608 <HAL_UART_Receive_IT+0x110>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	4a0c      	ldr	r2, [pc, #48]	; (800a638 <HAL_UART_Receive_IT+0x140>)
 800a606:	661a      	str	r2, [r3, #96]	; 0x60
    }

    __HAL_UNLOCK(huart);
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	2200      	movs	r2, #0
 800a60c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	681b      	ldr	r3, [r3, #0]
 800a614:	681a      	ldr	r2, [r3, #0]
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 800a61e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800a620:	2300      	movs	r3, #0
 800a622:	e000      	b.n	800a626 <HAL_UART_Receive_IT+0x12e>
  }
  else
  {
    return HAL_BUSY;
 800a624:	2302      	movs	r3, #2
  }
}
 800a626:	4618      	mov	r0, r3
 800a628:	3714      	adds	r7, #20
 800a62a:	46bd      	mov	sp, r7
 800a62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a630:	4770      	bx	lr
 800a632:	bf00      	nop
 800a634:	0800b2e7 	.word	0x0800b2e7
 800a638:	0800b241 	.word	0x0800b241

0800a63c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b088      	sub	sp, #32
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	69db      	ldr	r3, [r3, #28]
 800a64a:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	681b      	ldr	r3, [r3, #0]
 800a650:	681b      	ldr	r3, [r3, #0]
 800a652:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	689b      	ldr	r3, [r3, #8]
 800a65a:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800a65c:	69fa      	ldr	r2, [r7, #28]
 800a65e:	f640 030f 	movw	r3, #2063	; 0x80f
 800a662:	4013      	ands	r3, r2
 800a664:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d113      	bne.n	800a694 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800a66c:	69fb      	ldr	r3, [r7, #28]
 800a66e:	f003 0320 	and.w	r3, r3, #32
 800a672:	2b00      	cmp	r3, #0
 800a674:	d00e      	beq.n	800a694 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a676:	69bb      	ldr	r3, [r7, #24]
 800a678:	f003 0320 	and.w	r3, r3, #32
 800a67c:	2b00      	cmp	r3, #0
 800a67e:	d009      	beq.n	800a694 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a684:	2b00      	cmp	r3, #0
 800a686:	f000 80ff 	beq.w	800a888 <HAL_UART_IRQHandler+0x24c>
      {
        huart->RxISR(huart);
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a68e:	6878      	ldr	r0, [r7, #4]
 800a690:	4798      	blx	r3
      }
      return;
 800a692:	e0f9      	b.n	800a888 <HAL_UART_IRQHandler+0x24c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	2b00      	cmp	r3, #0
 800a698:	f000 80d5 	beq.w	800a846 <HAL_UART_IRQHandler+0x20a>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800a69c:	697b      	ldr	r3, [r7, #20]
 800a69e:	f003 0301 	and.w	r3, r3, #1
 800a6a2:	2b00      	cmp	r3, #0
 800a6a4:	d105      	bne.n	800a6b2 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != 0U)))
 800a6a6:	69bb      	ldr	r3, [r7, #24]
 800a6a8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800a6ac:	2b00      	cmp	r3, #0
 800a6ae:	f000 80ca 	beq.w	800a846 <HAL_UART_IRQHandler+0x20a>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800a6b2:	69fb      	ldr	r3, [r7, #28]
 800a6b4:	f003 0301 	and.w	r3, r3, #1
 800a6b8:	2b00      	cmp	r3, #0
 800a6ba:	d00e      	beq.n	800a6da <HAL_UART_IRQHandler+0x9e>
 800a6bc:	69bb      	ldr	r3, [r7, #24]
 800a6be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6c2:	2b00      	cmp	r3, #0
 800a6c4:	d009      	beq.n	800a6da <HAL_UART_IRQHandler+0x9e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	2201      	movs	r2, #1
 800a6cc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6d2:	f043 0201 	orr.w	r2, r3, #1
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a6da:	69fb      	ldr	r3, [r7, #28]
 800a6dc:	f003 0302 	and.w	r3, r3, #2
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d00e      	beq.n	800a702 <HAL_UART_IRQHandler+0xc6>
 800a6e4:	697b      	ldr	r3, [r7, #20]
 800a6e6:	f003 0301 	and.w	r3, r3, #1
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d009      	beq.n	800a702 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	681b      	ldr	r3, [r3, #0]
 800a6f2:	2202      	movs	r2, #2
 800a6f4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a6fa:	f043 0204 	orr.w	r2, r3, #4
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800a702:	69fb      	ldr	r3, [r7, #28]
 800a704:	f003 0304 	and.w	r3, r3, #4
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d00e      	beq.n	800a72a <HAL_UART_IRQHandler+0xee>
 800a70c:	697b      	ldr	r3, [r7, #20]
 800a70e:	f003 0301 	and.w	r3, r3, #1
 800a712:	2b00      	cmp	r3, #0
 800a714:	d009      	beq.n	800a72a <HAL_UART_IRQHandler+0xee>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800a716:	687b      	ldr	r3, [r7, #4]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	2204      	movs	r2, #4
 800a71c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800a71e:	687b      	ldr	r3, [r7, #4]
 800a720:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a722:	f043 0202 	orr.w	r2, r3, #2
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800a72a:	69fb      	ldr	r3, [r7, #28]
 800a72c:	f003 0308 	and.w	r3, r3, #8
 800a730:	2b00      	cmp	r3, #0
 800a732:	d013      	beq.n	800a75c <HAL_UART_IRQHandler+0x120>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a734:	69bb      	ldr	r3, [r7, #24]
 800a736:	f003 0320 	and.w	r3, r3, #32
 800a73a:	2b00      	cmp	r3, #0
 800a73c:	d104      	bne.n	800a748 <HAL_UART_IRQHandler+0x10c>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800a744:	2b00      	cmp	r3, #0
 800a746:	d009      	beq.n	800a75c <HAL_UART_IRQHandler+0x120>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	681b      	ldr	r3, [r3, #0]
 800a74c:	2208      	movs	r2, #8
 800a74e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a754:	f043 0208 	orr.w	r2, r3, #8
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800a75c:	69fb      	ldr	r3, [r7, #28]
 800a75e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a762:	2b00      	cmp	r3, #0
 800a764:	d00f      	beq.n	800a786 <HAL_UART_IRQHandler+0x14a>
 800a766:	69bb      	ldr	r3, [r7, #24]
 800a768:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d00a      	beq.n	800a786 <HAL_UART_IRQHandler+0x14a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a778:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a77e:	f043 0220 	orr.w	r2, r3, #32
 800a782:	687b      	ldr	r3, [r7, #4]
 800a784:	67da      	str	r2, [r3, #124]	; 0x7c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800a786:	687b      	ldr	r3, [r7, #4]
 800a788:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d07e      	beq.n	800a88c <HAL_UART_IRQHandler+0x250>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800a78e:	69fb      	ldr	r3, [r7, #28]
 800a790:	f003 0320 	and.w	r3, r3, #32
 800a794:	2b00      	cmp	r3, #0
 800a796:	d00c      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x176>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800a798:	69bb      	ldr	r3, [r7, #24]
 800a79a:	f003 0320 	and.w	r3, r3, #32
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d007      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x176>
      {
        if (huart->RxISR != NULL)
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d003      	beq.n	800a7b2 <HAL_UART_IRQHandler+0x176>
        {
          huart->RxISR(huart);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7ae:	6878      	ldr	r0, [r7, #4]
 800a7b0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800a7b6:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7b8:	687b      	ldr	r3, [r7, #4]
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	689b      	ldr	r3, [r3, #8]
 800a7be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7c2:	2b40      	cmp	r3, #64	; 0x40
 800a7c4:	d004      	beq.n	800a7d0 <HAL_UART_IRQHandler+0x194>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800a7c6:	68fb      	ldr	r3, [r7, #12]
 800a7c8:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	d031      	beq.n	800a834 <HAL_UART_IRQHandler+0x1f8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800a7d0:	6878      	ldr	r0, [r7, #4]
 800a7d2:	f000 fc6f 	bl	800b0b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a7d6:	687b      	ldr	r3, [r7, #4]
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	689b      	ldr	r3, [r3, #8]
 800a7dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7e0:	2b40      	cmp	r3, #64	; 0x40
 800a7e2:	d123      	bne.n	800a82c <HAL_UART_IRQHandler+0x1f0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	681b      	ldr	r3, [r3, #0]
 800a7e8:	689a      	ldr	r2, [r3, #8]
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	681b      	ldr	r3, [r3, #0]
 800a7ee:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a7f2:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800a7f4:	687b      	ldr	r3, [r7, #4]
 800a7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d013      	beq.n	800a824 <HAL_UART_IRQHandler+0x1e8>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800a7fc:	687b      	ldr	r3, [r7, #4]
 800a7fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a800:	4a25      	ldr	r2, [pc, #148]	; (800a898 <HAL_UART_IRQHandler+0x25c>)
 800a802:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a808:	4618      	mov	r0, r3
 800a80a:	f7fa ff49 	bl	80056a0 <HAL_DMA_Abort_IT>
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d016      	beq.n	800a842 <HAL_UART_IRQHandler+0x206>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800a818:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a81a:	687a      	ldr	r2, [r7, #4]
 800a81c:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 800a81e:	4610      	mov	r0, r2
 800a820:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a822:	e00e      	b.n	800a842 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800a824:	6878      	ldr	r0, [r7, #4]
 800a826:	f000 f843 	bl	800a8b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a82a:	e00a      	b.n	800a842 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800a82c:	6878      	ldr	r0, [r7, #4]
 800a82e:	f000 f83f 	bl	800a8b0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a832:	e006      	b.n	800a842 <HAL_UART_IRQHandler+0x206>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800a834:	6878      	ldr	r0, [r7, #4]
 800a836:	f000 f83b 	bl	800a8b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	2200      	movs	r2, #0
 800a83e:	67da      	str	r2, [r3, #124]	; 0x7c
      }
    }
    return;
 800a840:	e024      	b.n	800a88c <HAL_UART_IRQHandler+0x250>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a842:	bf00      	nop
    return;
 800a844:	e022      	b.n	800a88c <HAL_UART_IRQHandler+0x250>
    return;
  }
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800a846:	69fb      	ldr	r3, [r7, #28]
 800a848:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d00d      	beq.n	800a86c <HAL_UART_IRQHandler+0x230>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800a850:	69bb      	ldr	r3, [r7, #24]
 800a852:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a856:	2b00      	cmp	r3, #0
 800a858:	d008      	beq.n	800a86c <HAL_UART_IRQHandler+0x230>
  {
    if (huart->TxISR != NULL)
 800a85a:	687b      	ldr	r3, [r7, #4]
 800a85c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d016      	beq.n	800a890 <HAL_UART_IRQHandler+0x254>
    {
      huart->TxISR(huart);
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800a866:	6878      	ldr	r0, [r7, #4]
 800a868:	4798      	blx	r3
    }
    return;
 800a86a:	e011      	b.n	800a890 <HAL_UART_IRQHandler+0x254>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800a86c:	69fb      	ldr	r3, [r7, #28]
 800a86e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a872:	2b00      	cmp	r3, #0
 800a874:	d00d      	beq.n	800a892 <HAL_UART_IRQHandler+0x256>
 800a876:	69bb      	ldr	r3, [r7, #24]
 800a878:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d008      	beq.n	800a892 <HAL_UART_IRQHandler+0x256>
  {
    UART_EndTransmit_IT(huart);
 800a880:	6878      	ldr	r0, [r7, #4]
 800a882:	f000 fcc4 	bl	800b20e <UART_EndTransmit_IT>
    return;
 800a886:	e004      	b.n	800a892 <HAL_UART_IRQHandler+0x256>
      return;
 800a888:	bf00      	nop
 800a88a:	e002      	b.n	800a892 <HAL_UART_IRQHandler+0x256>
    return;
 800a88c:	bf00      	nop
 800a88e:	e000      	b.n	800a892 <HAL_UART_IRQHandler+0x256>
    return;
 800a890:	bf00      	nop
  }

}
 800a892:	3720      	adds	r7, #32
 800a894:	46bd      	mov	sp, r7
 800a896:	bd80      	pop	{r7, pc}
 800a898:	0800b0f5 	.word	0x0800b0f5

0800a89c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b083      	sub	sp, #12
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800a8a4:	bf00      	nop
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800a8b8:	bf00      	nop
 800a8ba:	370c      	adds	r7, #12
 800a8bc:	46bd      	mov	sp, r7
 800a8be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c2:	4770      	bx	lr

0800a8c4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b088      	sub	sp, #32
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800a8cc:	2300      	movs	r3, #0
 800a8ce:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 800a8d0:	2300      	movs	r3, #0
 800a8d2:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	689a      	ldr	r2, [r3, #8]
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	691b      	ldr	r3, [r3, #16]
 800a8dc:	431a      	orrs	r2, r3
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	695b      	ldr	r3, [r3, #20]
 800a8e2:	431a      	orrs	r2, r3
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	69db      	ldr	r3, [r3, #28]
 800a8e8:	4313      	orrs	r3, r2
 800a8ea:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	681a      	ldr	r2, [r3, #0]
 800a8f2:	4ba7      	ldr	r3, [pc, #668]	; (800ab90 <UART_SetConfig+0x2cc>)
 800a8f4:	4013      	ands	r3, r2
 800a8f6:	687a      	ldr	r2, [r7, #4]
 800a8f8:	6812      	ldr	r2, [r2, #0]
 800a8fa:	6939      	ldr	r1, [r7, #16]
 800a8fc:	430b      	orrs	r3, r1
 800a8fe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	681b      	ldr	r3, [r3, #0]
 800a904:	685b      	ldr	r3, [r3, #4]
 800a906:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	68da      	ldr	r2, [r3, #12]
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	681b      	ldr	r3, [r3, #0]
 800a912:	430a      	orrs	r2, r1
 800a914:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a916:	687b      	ldr	r3, [r7, #4]
 800a918:	699b      	ldr	r3, [r3, #24]
 800a91a:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6a1b      	ldr	r3, [r3, #32]
 800a920:	693a      	ldr	r2, [r7, #16]
 800a922:	4313      	orrs	r3, r2
 800a924:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	689b      	ldr	r3, [r3, #8]
 800a92c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a930:	687b      	ldr	r3, [r7, #4]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	693a      	ldr	r2, [r7, #16]
 800a936:	430a      	orrs	r2, r1
 800a938:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a95      	ldr	r2, [pc, #596]	; (800ab94 <UART_SetConfig+0x2d0>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d120      	bne.n	800a986 <UART_SetConfig+0xc2>
 800a944:	4b94      	ldr	r3, [pc, #592]	; (800ab98 <UART_SetConfig+0x2d4>)
 800a946:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a94a:	f003 0303 	and.w	r3, r3, #3
 800a94e:	2b03      	cmp	r3, #3
 800a950:	d816      	bhi.n	800a980 <UART_SetConfig+0xbc>
 800a952:	a201      	add	r2, pc, #4	; (adr r2, 800a958 <UART_SetConfig+0x94>)
 800a954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a958:	0800a969 	.word	0x0800a969
 800a95c:	0800a975 	.word	0x0800a975
 800a960:	0800a96f 	.word	0x0800a96f
 800a964:	0800a97b 	.word	0x0800a97b
 800a968:	2301      	movs	r3, #1
 800a96a:	77fb      	strb	r3, [r7, #31]
 800a96c:	e14f      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a96e:	2302      	movs	r3, #2
 800a970:	77fb      	strb	r3, [r7, #31]
 800a972:	e14c      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a974:	2304      	movs	r3, #4
 800a976:	77fb      	strb	r3, [r7, #31]
 800a978:	e149      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a97a:	2308      	movs	r3, #8
 800a97c:	77fb      	strb	r3, [r7, #31]
 800a97e:	e146      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a980:	2310      	movs	r3, #16
 800a982:	77fb      	strb	r3, [r7, #31]
 800a984:	e143      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	681b      	ldr	r3, [r3, #0]
 800a98a:	4a84      	ldr	r2, [pc, #528]	; (800ab9c <UART_SetConfig+0x2d8>)
 800a98c:	4293      	cmp	r3, r2
 800a98e:	d132      	bne.n	800a9f6 <UART_SetConfig+0x132>
 800a990:	4b81      	ldr	r3, [pc, #516]	; (800ab98 <UART_SetConfig+0x2d4>)
 800a992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a996:	f003 030c 	and.w	r3, r3, #12
 800a99a:	2b0c      	cmp	r3, #12
 800a99c:	d828      	bhi.n	800a9f0 <UART_SetConfig+0x12c>
 800a99e:	a201      	add	r2, pc, #4	; (adr r2, 800a9a4 <UART_SetConfig+0xe0>)
 800a9a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a9a4:	0800a9d9 	.word	0x0800a9d9
 800a9a8:	0800a9f1 	.word	0x0800a9f1
 800a9ac:	0800a9f1 	.word	0x0800a9f1
 800a9b0:	0800a9f1 	.word	0x0800a9f1
 800a9b4:	0800a9e5 	.word	0x0800a9e5
 800a9b8:	0800a9f1 	.word	0x0800a9f1
 800a9bc:	0800a9f1 	.word	0x0800a9f1
 800a9c0:	0800a9f1 	.word	0x0800a9f1
 800a9c4:	0800a9df 	.word	0x0800a9df
 800a9c8:	0800a9f1 	.word	0x0800a9f1
 800a9cc:	0800a9f1 	.word	0x0800a9f1
 800a9d0:	0800a9f1 	.word	0x0800a9f1
 800a9d4:	0800a9eb 	.word	0x0800a9eb
 800a9d8:	2300      	movs	r3, #0
 800a9da:	77fb      	strb	r3, [r7, #31]
 800a9dc:	e117      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a9de:	2302      	movs	r3, #2
 800a9e0:	77fb      	strb	r3, [r7, #31]
 800a9e2:	e114      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a9e4:	2304      	movs	r3, #4
 800a9e6:	77fb      	strb	r3, [r7, #31]
 800a9e8:	e111      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a9ea:	2308      	movs	r3, #8
 800a9ec:	77fb      	strb	r3, [r7, #31]
 800a9ee:	e10e      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a9f0:	2310      	movs	r3, #16
 800a9f2:	77fb      	strb	r3, [r7, #31]
 800a9f4:	e10b      	b.n	800ac0e <UART_SetConfig+0x34a>
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	4a69      	ldr	r2, [pc, #420]	; (800aba0 <UART_SetConfig+0x2dc>)
 800a9fc:	4293      	cmp	r3, r2
 800a9fe:	d120      	bne.n	800aa42 <UART_SetConfig+0x17e>
 800aa00:	4b65      	ldr	r3, [pc, #404]	; (800ab98 <UART_SetConfig+0x2d4>)
 800aa02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800aa0a:	2b30      	cmp	r3, #48	; 0x30
 800aa0c:	d013      	beq.n	800aa36 <UART_SetConfig+0x172>
 800aa0e:	2b30      	cmp	r3, #48	; 0x30
 800aa10:	d814      	bhi.n	800aa3c <UART_SetConfig+0x178>
 800aa12:	2b20      	cmp	r3, #32
 800aa14:	d009      	beq.n	800aa2a <UART_SetConfig+0x166>
 800aa16:	2b20      	cmp	r3, #32
 800aa18:	d810      	bhi.n	800aa3c <UART_SetConfig+0x178>
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d002      	beq.n	800aa24 <UART_SetConfig+0x160>
 800aa1e:	2b10      	cmp	r3, #16
 800aa20:	d006      	beq.n	800aa30 <UART_SetConfig+0x16c>
 800aa22:	e00b      	b.n	800aa3c <UART_SetConfig+0x178>
 800aa24:	2300      	movs	r3, #0
 800aa26:	77fb      	strb	r3, [r7, #31]
 800aa28:	e0f1      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa2a:	2302      	movs	r3, #2
 800aa2c:	77fb      	strb	r3, [r7, #31]
 800aa2e:	e0ee      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa30:	2304      	movs	r3, #4
 800aa32:	77fb      	strb	r3, [r7, #31]
 800aa34:	e0eb      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa36:	2308      	movs	r3, #8
 800aa38:	77fb      	strb	r3, [r7, #31]
 800aa3a:	e0e8      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa3c:	2310      	movs	r3, #16
 800aa3e:	77fb      	strb	r3, [r7, #31]
 800aa40:	e0e5      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	681b      	ldr	r3, [r3, #0]
 800aa46:	4a57      	ldr	r2, [pc, #348]	; (800aba4 <UART_SetConfig+0x2e0>)
 800aa48:	4293      	cmp	r3, r2
 800aa4a:	d120      	bne.n	800aa8e <UART_SetConfig+0x1ca>
 800aa4c:	4b52      	ldr	r3, [pc, #328]	; (800ab98 <UART_SetConfig+0x2d4>)
 800aa4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800aa56:	2bc0      	cmp	r3, #192	; 0xc0
 800aa58:	d013      	beq.n	800aa82 <UART_SetConfig+0x1be>
 800aa5a:	2bc0      	cmp	r3, #192	; 0xc0
 800aa5c:	d814      	bhi.n	800aa88 <UART_SetConfig+0x1c4>
 800aa5e:	2b80      	cmp	r3, #128	; 0x80
 800aa60:	d009      	beq.n	800aa76 <UART_SetConfig+0x1b2>
 800aa62:	2b80      	cmp	r3, #128	; 0x80
 800aa64:	d810      	bhi.n	800aa88 <UART_SetConfig+0x1c4>
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d002      	beq.n	800aa70 <UART_SetConfig+0x1ac>
 800aa6a:	2b40      	cmp	r3, #64	; 0x40
 800aa6c:	d006      	beq.n	800aa7c <UART_SetConfig+0x1b8>
 800aa6e:	e00b      	b.n	800aa88 <UART_SetConfig+0x1c4>
 800aa70:	2300      	movs	r3, #0
 800aa72:	77fb      	strb	r3, [r7, #31]
 800aa74:	e0cb      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa76:	2302      	movs	r3, #2
 800aa78:	77fb      	strb	r3, [r7, #31]
 800aa7a:	e0c8      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa7c:	2304      	movs	r3, #4
 800aa7e:	77fb      	strb	r3, [r7, #31]
 800aa80:	e0c5      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa82:	2308      	movs	r3, #8
 800aa84:	77fb      	strb	r3, [r7, #31]
 800aa86:	e0c2      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa88:	2310      	movs	r3, #16
 800aa8a:	77fb      	strb	r3, [r7, #31]
 800aa8c:	e0bf      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a45      	ldr	r2, [pc, #276]	; (800aba8 <UART_SetConfig+0x2e4>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d125      	bne.n	800aae4 <UART_SetConfig+0x220>
 800aa98:	4b3f      	ldr	r3, [pc, #252]	; (800ab98 <UART_SetConfig+0x2d4>)
 800aa9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aa9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800aaa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaa6:	d017      	beq.n	800aad8 <UART_SetConfig+0x214>
 800aaa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800aaac:	d817      	bhi.n	800aade <UART_SetConfig+0x21a>
 800aaae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab2:	d00b      	beq.n	800aacc <UART_SetConfig+0x208>
 800aab4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800aab8:	d811      	bhi.n	800aade <UART_SetConfig+0x21a>
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d003      	beq.n	800aac6 <UART_SetConfig+0x202>
 800aabe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800aac2:	d006      	beq.n	800aad2 <UART_SetConfig+0x20e>
 800aac4:	e00b      	b.n	800aade <UART_SetConfig+0x21a>
 800aac6:	2300      	movs	r3, #0
 800aac8:	77fb      	strb	r3, [r7, #31]
 800aaca:	e0a0      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aacc:	2302      	movs	r3, #2
 800aace:	77fb      	strb	r3, [r7, #31]
 800aad0:	e09d      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aad2:	2304      	movs	r3, #4
 800aad4:	77fb      	strb	r3, [r7, #31]
 800aad6:	e09a      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aad8:	2308      	movs	r3, #8
 800aada:	77fb      	strb	r3, [r7, #31]
 800aadc:	e097      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aade:	2310      	movs	r3, #16
 800aae0:	77fb      	strb	r3, [r7, #31]
 800aae2:	e094      	b.n	800ac0e <UART_SetConfig+0x34a>
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	681b      	ldr	r3, [r3, #0]
 800aae8:	4a30      	ldr	r2, [pc, #192]	; (800abac <UART_SetConfig+0x2e8>)
 800aaea:	4293      	cmp	r3, r2
 800aaec:	d125      	bne.n	800ab3a <UART_SetConfig+0x276>
 800aaee:	4b2a      	ldr	r3, [pc, #168]	; (800ab98 <UART_SetConfig+0x2d4>)
 800aaf0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800aaf4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800aaf8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800aafc:	d017      	beq.n	800ab2e <UART_SetConfig+0x26a>
 800aafe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800ab02:	d817      	bhi.n	800ab34 <UART_SetConfig+0x270>
 800ab04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab08:	d00b      	beq.n	800ab22 <UART_SetConfig+0x25e>
 800ab0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ab0e:	d811      	bhi.n	800ab34 <UART_SetConfig+0x270>
 800ab10:	2b00      	cmp	r3, #0
 800ab12:	d003      	beq.n	800ab1c <UART_SetConfig+0x258>
 800ab14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab18:	d006      	beq.n	800ab28 <UART_SetConfig+0x264>
 800ab1a:	e00b      	b.n	800ab34 <UART_SetConfig+0x270>
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	77fb      	strb	r3, [r7, #31]
 800ab20:	e075      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab22:	2302      	movs	r3, #2
 800ab24:	77fb      	strb	r3, [r7, #31]
 800ab26:	e072      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab28:	2304      	movs	r3, #4
 800ab2a:	77fb      	strb	r3, [r7, #31]
 800ab2c:	e06f      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab2e:	2308      	movs	r3, #8
 800ab30:	77fb      	strb	r3, [r7, #31]
 800ab32:	e06c      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab34:	2310      	movs	r3, #16
 800ab36:	77fb      	strb	r3, [r7, #31]
 800ab38:	e069      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	681b      	ldr	r3, [r3, #0]
 800ab3e:	4a1c      	ldr	r2, [pc, #112]	; (800abb0 <UART_SetConfig+0x2ec>)
 800ab40:	4293      	cmp	r3, r2
 800ab42:	d137      	bne.n	800abb4 <UART_SetConfig+0x2f0>
 800ab44:	4b14      	ldr	r3, [pc, #80]	; (800ab98 <UART_SetConfig+0x2d4>)
 800ab46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ab4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ab4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab52:	d017      	beq.n	800ab84 <UART_SetConfig+0x2c0>
 800ab54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ab58:	d817      	bhi.n	800ab8a <UART_SetConfig+0x2c6>
 800ab5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab5e:	d00b      	beq.n	800ab78 <UART_SetConfig+0x2b4>
 800ab60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ab64:	d811      	bhi.n	800ab8a <UART_SetConfig+0x2c6>
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d003      	beq.n	800ab72 <UART_SetConfig+0x2ae>
 800ab6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ab6e:	d006      	beq.n	800ab7e <UART_SetConfig+0x2ba>
 800ab70:	e00b      	b.n	800ab8a <UART_SetConfig+0x2c6>
 800ab72:	2300      	movs	r3, #0
 800ab74:	77fb      	strb	r3, [r7, #31]
 800ab76:	e04a      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab78:	2302      	movs	r3, #2
 800ab7a:	77fb      	strb	r3, [r7, #31]
 800ab7c:	e047      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab7e:	2304      	movs	r3, #4
 800ab80:	77fb      	strb	r3, [r7, #31]
 800ab82:	e044      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab84:	2308      	movs	r3, #8
 800ab86:	77fb      	strb	r3, [r7, #31]
 800ab88:	e041      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab8a:	2310      	movs	r3, #16
 800ab8c:	77fb      	strb	r3, [r7, #31]
 800ab8e:	e03e      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ab90:	efff69f3 	.word	0xefff69f3
 800ab94:	40011000 	.word	0x40011000
 800ab98:	40023800 	.word	0x40023800
 800ab9c:	40004400 	.word	0x40004400
 800aba0:	40004800 	.word	0x40004800
 800aba4:	40004c00 	.word	0x40004c00
 800aba8:	40005000 	.word	0x40005000
 800abac:	40011400 	.word	0x40011400
 800abb0:	40007800 	.word	0x40007800
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	4a94      	ldr	r2, [pc, #592]	; (800ae0c <UART_SetConfig+0x548>)
 800abba:	4293      	cmp	r3, r2
 800abbc:	d125      	bne.n	800ac0a <UART_SetConfig+0x346>
 800abbe:	4b94      	ldr	r3, [pc, #592]	; (800ae10 <UART_SetConfig+0x54c>)
 800abc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800abc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800abc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800abcc:	d017      	beq.n	800abfe <UART_SetConfig+0x33a>
 800abce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800abd2:	d817      	bhi.n	800ac04 <UART_SetConfig+0x340>
 800abd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abd8:	d00b      	beq.n	800abf2 <UART_SetConfig+0x32e>
 800abda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800abde:	d811      	bhi.n	800ac04 <UART_SetConfig+0x340>
 800abe0:	2b00      	cmp	r3, #0
 800abe2:	d003      	beq.n	800abec <UART_SetConfig+0x328>
 800abe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800abe8:	d006      	beq.n	800abf8 <UART_SetConfig+0x334>
 800abea:	e00b      	b.n	800ac04 <UART_SetConfig+0x340>
 800abec:	2300      	movs	r3, #0
 800abee:	77fb      	strb	r3, [r7, #31]
 800abf0:	e00d      	b.n	800ac0e <UART_SetConfig+0x34a>
 800abf2:	2302      	movs	r3, #2
 800abf4:	77fb      	strb	r3, [r7, #31]
 800abf6:	e00a      	b.n	800ac0e <UART_SetConfig+0x34a>
 800abf8:	2304      	movs	r3, #4
 800abfa:	77fb      	strb	r3, [r7, #31]
 800abfc:	e007      	b.n	800ac0e <UART_SetConfig+0x34a>
 800abfe:	2308      	movs	r3, #8
 800ac00:	77fb      	strb	r3, [r7, #31]
 800ac02:	e004      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ac04:	2310      	movs	r3, #16
 800ac06:	77fb      	strb	r3, [r7, #31]
 800ac08:	e001      	b.n	800ac0e <UART_SetConfig+0x34a>
 800ac0a:	2310      	movs	r3, #16
 800ac0c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	69db      	ldr	r3, [r3, #28]
 800ac12:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ac16:	d17f      	bne.n	800ad18 <UART_SetConfig+0x454>
  {
    switch (clocksource)
 800ac18:	7ffb      	ldrb	r3, [r7, #31]
 800ac1a:	2b08      	cmp	r3, #8
 800ac1c:	d85c      	bhi.n	800acd8 <UART_SetConfig+0x414>
 800ac1e:	a201      	add	r2, pc, #4	; (adr r2, 800ac24 <UART_SetConfig+0x360>)
 800ac20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ac24:	0800ac49 	.word	0x0800ac49
 800ac28:	0800ac69 	.word	0x0800ac69
 800ac2c:	0800ac89 	.word	0x0800ac89
 800ac30:	0800acd9 	.word	0x0800acd9
 800ac34:	0800aca1 	.word	0x0800aca1
 800ac38:	0800acd9 	.word	0x0800acd9
 800ac3c:	0800acd9 	.word	0x0800acd9
 800ac40:	0800acd9 	.word	0x0800acd9
 800ac44:	0800acc1 	.word	0x0800acc1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ac48:	f7fd f94e 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 800ac4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac4e:	68fb      	ldr	r3, [r7, #12]
 800ac50:	005a      	lsls	r2, r3, #1
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	685b      	ldr	r3, [r3, #4]
 800ac56:	085b      	lsrs	r3, r3, #1
 800ac58:	441a      	add	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	685b      	ldr	r3, [r3, #4]
 800ac5e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac62:	b29b      	uxth	r3, r3
 800ac64:	61bb      	str	r3, [r7, #24]
        break;
 800ac66:	e03a      	b.n	800acde <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ac68:	f7fd f952 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800ac6c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	005a      	lsls	r2, r3, #1
 800ac72:	687b      	ldr	r3, [r7, #4]
 800ac74:	685b      	ldr	r3, [r3, #4]
 800ac76:	085b      	lsrs	r3, r3, #1
 800ac78:	441a      	add	r2, r3
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	685b      	ldr	r3, [r3, #4]
 800ac7e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac82:	b29b      	uxth	r3, r3
 800ac84:	61bb      	str	r3, [r7, #24]
        break;
 800ac86:	e02a      	b.n	800acde <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	085a      	lsrs	r2, r3, #1
 800ac8e:	4b61      	ldr	r3, [pc, #388]	; (800ae14 <UART_SetConfig+0x550>)
 800ac90:	4413      	add	r3, r2
 800ac92:	687a      	ldr	r2, [r7, #4]
 800ac94:	6852      	ldr	r2, [r2, #4]
 800ac96:	fbb3 f3f2 	udiv	r3, r3, r2
 800ac9a:	b29b      	uxth	r3, r3
 800ac9c:	61bb      	str	r3, [r7, #24]
        break;
 800ac9e:	e01e      	b.n	800acde <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800aca0:	f7fd f860 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
 800aca4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800aca6:	68fb      	ldr	r3, [r7, #12]
 800aca8:	005a      	lsls	r2, r3, #1
 800acaa:	687b      	ldr	r3, [r7, #4]
 800acac:	685b      	ldr	r3, [r3, #4]
 800acae:	085b      	lsrs	r3, r3, #1
 800acb0:	441a      	add	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	685b      	ldr	r3, [r3, #4]
 800acb6:	fbb2 f3f3 	udiv	r3, r2, r3
 800acba:	b29b      	uxth	r3, r3
 800acbc:	61bb      	str	r3, [r7, #24]
        break;
 800acbe:	e00e      	b.n	800acde <UART_SetConfig+0x41a>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	685b      	ldr	r3, [r3, #4]
 800acc4:	085b      	lsrs	r3, r3, #1
 800acc6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800acca:	687b      	ldr	r3, [r7, #4]
 800accc:	685b      	ldr	r3, [r3, #4]
 800acce:	fbb2 f3f3 	udiv	r3, r2, r3
 800acd2:	b29b      	uxth	r3, r3
 800acd4:	61bb      	str	r3, [r7, #24]
        break;
 800acd6:	e002      	b.n	800acde <UART_SetConfig+0x41a>
      default:
        ret = HAL_ERROR;
 800acd8:	2301      	movs	r3, #1
 800acda:	75fb      	strb	r3, [r7, #23]
        break;
 800acdc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800acde:	69bb      	ldr	r3, [r7, #24]
 800ace0:	2b0f      	cmp	r3, #15
 800ace2:	d916      	bls.n	800ad12 <UART_SetConfig+0x44e>
 800ace4:	69bb      	ldr	r3, [r7, #24]
 800ace6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800acea:	d212      	bcs.n	800ad12 <UART_SetConfig+0x44e>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800acec:	69bb      	ldr	r3, [r7, #24]
 800acee:	b29b      	uxth	r3, r3
 800acf0:	f023 030f 	bic.w	r3, r3, #15
 800acf4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800acf6:	69bb      	ldr	r3, [r7, #24]
 800acf8:	085b      	lsrs	r3, r3, #1
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	f003 0307 	and.w	r3, r3, #7
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	897b      	ldrh	r3, [r7, #10]
 800ad04:	4313      	orrs	r3, r2
 800ad06:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800ad08:	687b      	ldr	r3, [r7, #4]
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	897a      	ldrh	r2, [r7, #10]
 800ad0e:	60da      	str	r2, [r3, #12]
 800ad10:	e070      	b.n	800adf4 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800ad12:	2301      	movs	r3, #1
 800ad14:	75fb      	strb	r3, [r7, #23]
 800ad16:	e06d      	b.n	800adf4 <UART_SetConfig+0x530>
    }
  }
  else
  {
    switch (clocksource)
 800ad18:	7ffb      	ldrb	r3, [r7, #31]
 800ad1a:	2b08      	cmp	r3, #8
 800ad1c:	d859      	bhi.n	800add2 <UART_SetConfig+0x50e>
 800ad1e:	a201      	add	r2, pc, #4	; (adr r2, 800ad24 <UART_SetConfig+0x460>)
 800ad20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ad24:	0800ad49 	.word	0x0800ad49
 800ad28:	0800ad67 	.word	0x0800ad67
 800ad2c:	0800ad85 	.word	0x0800ad85
 800ad30:	0800add3 	.word	0x0800add3
 800ad34:	0800ad9d 	.word	0x0800ad9d
 800ad38:	0800add3 	.word	0x0800add3
 800ad3c:	0800add3 	.word	0x0800add3
 800ad40:	0800add3 	.word	0x0800add3
 800ad44:	0800adbb 	.word	0x0800adbb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800ad48:	f7fd f8ce 	bl	8007ee8 <HAL_RCC_GetPCLK1Freq>
 800ad4c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	085a      	lsrs	r2, r3, #1
 800ad54:	68fb      	ldr	r3, [r7, #12]
 800ad56:	441a      	add	r2, r3
 800ad58:	687b      	ldr	r3, [r7, #4]
 800ad5a:	685b      	ldr	r3, [r3, #4]
 800ad5c:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad60:	b29b      	uxth	r3, r3
 800ad62:	61bb      	str	r3, [r7, #24]
        break;
 800ad64:	e038      	b.n	800add8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800ad66:	f7fd f8d3 	bl	8007f10 <HAL_RCC_GetPCLK2Freq>
 800ad6a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	685b      	ldr	r3, [r3, #4]
 800ad70:	085a      	lsrs	r2, r3, #1
 800ad72:	68fb      	ldr	r3, [r7, #12]
 800ad74:	441a      	add	r2, r3
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	685b      	ldr	r3, [r3, #4]
 800ad7a:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad7e:	b29b      	uxth	r3, r3
 800ad80:	61bb      	str	r3, [r7, #24]
        break;
 800ad82:	e029      	b.n	800add8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800ad84:	687b      	ldr	r3, [r7, #4]
 800ad86:	685b      	ldr	r3, [r3, #4]
 800ad88:	085a      	lsrs	r2, r3, #1
 800ad8a:	4b23      	ldr	r3, [pc, #140]	; (800ae18 <UART_SetConfig+0x554>)
 800ad8c:	4413      	add	r3, r2
 800ad8e:	687a      	ldr	r2, [r7, #4]
 800ad90:	6852      	ldr	r2, [r2, #4]
 800ad92:	fbb3 f3f2 	udiv	r3, r3, r2
 800ad96:	b29b      	uxth	r3, r3
 800ad98:	61bb      	str	r3, [r7, #24]
        break;
 800ad9a:	e01d      	b.n	800add8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800ad9c:	f7fc ffe2 	bl	8007d64 <HAL_RCC_GetSysClockFreq>
 800ada0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	685b      	ldr	r3, [r3, #4]
 800ada6:	085a      	lsrs	r2, r3, #1
 800ada8:	68fb      	ldr	r3, [r7, #12]
 800adaa:	441a      	add	r2, r3
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	685b      	ldr	r3, [r3, #4]
 800adb0:	fbb2 f3f3 	udiv	r3, r2, r3
 800adb4:	b29b      	uxth	r3, r3
 800adb6:	61bb      	str	r3, [r7, #24]
        break;
 800adb8:	e00e      	b.n	800add8 <UART_SetConfig+0x514>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	685b      	ldr	r3, [r3, #4]
 800adbe:	085b      	lsrs	r3, r3, #1
 800adc0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	685b      	ldr	r3, [r3, #4]
 800adc8:	fbb2 f3f3 	udiv	r3, r2, r3
 800adcc:	b29b      	uxth	r3, r3
 800adce:	61bb      	str	r3, [r7, #24]
        break;
 800add0:	e002      	b.n	800add8 <UART_SetConfig+0x514>
      default:
        ret = HAL_ERROR;
 800add2:	2301      	movs	r3, #1
 800add4:	75fb      	strb	r3, [r7, #23]
        break;
 800add6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800add8:	69bb      	ldr	r3, [r7, #24]
 800adda:	2b0f      	cmp	r3, #15
 800addc:	d908      	bls.n	800adf0 <UART_SetConfig+0x52c>
 800adde:	69bb      	ldr	r3, [r7, #24]
 800ade0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ade4:	d204      	bcs.n	800adf0 <UART_SetConfig+0x52c>
    {
      huart->Instance->BRR = usartdiv;
 800ade6:	687b      	ldr	r3, [r7, #4]
 800ade8:	681b      	ldr	r3, [r3, #0]
 800adea:	69ba      	ldr	r2, [r7, #24]
 800adec:	60da      	str	r2, [r3, #12]
 800adee:	e001      	b.n	800adf4 <UART_SetConfig+0x530>
    }
    else
    {
      ret = HAL_ERROR;
 800adf0:	2301      	movs	r3, #1
 800adf2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	2200      	movs	r2, #0
 800adf8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	2200      	movs	r2, #0
 800adfe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800ae00:	7dfb      	ldrb	r3, [r7, #23]
}
 800ae02:	4618      	mov	r0, r3
 800ae04:	3720      	adds	r7, #32
 800ae06:	46bd      	mov	sp, r7
 800ae08:	bd80      	pop	{r7, pc}
 800ae0a:	bf00      	nop
 800ae0c:	40007c00 	.word	0x40007c00
 800ae10:	40023800 	.word	0x40023800
 800ae14:	01e84800 	.word	0x01e84800
 800ae18:	00f42400 	.word	0x00f42400

0800ae1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800ae1c:	b480      	push	{r7}
 800ae1e:	b083      	sub	sp, #12
 800ae20:	af00      	add	r7, sp, #0
 800ae22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae28:	f003 0301 	and.w	r3, r3, #1
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d00a      	beq.n	800ae46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	685b      	ldr	r3, [r3, #4]
 800ae36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	430a      	orrs	r2, r1
 800ae44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4a:	f003 0302 	and.w	r3, r3, #2
 800ae4e:	2b00      	cmp	r3, #0
 800ae50:	d00a      	beq.n	800ae68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	685b      	ldr	r3, [r3, #4]
 800ae58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	681b      	ldr	r3, [r3, #0]
 800ae64:	430a      	orrs	r2, r1
 800ae66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ae68:	687b      	ldr	r3, [r7, #4]
 800ae6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae6c:	f003 0304 	and.w	r3, r3, #4
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d00a      	beq.n	800ae8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	681b      	ldr	r3, [r3, #0]
 800ae78:	685b      	ldr	r3, [r3, #4]
 800ae7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	681b      	ldr	r3, [r3, #0]
 800ae86:	430a      	orrs	r2, r1
 800ae88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae8e:	f003 0308 	and.w	r3, r3, #8
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00a      	beq.n	800aeac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	685b      	ldr	r3, [r3, #4]
 800ae9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aea0:	687b      	ldr	r3, [r7, #4]
 800aea2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681b      	ldr	r3, [r3, #0]
 800aea8:	430a      	orrs	r2, r1
 800aeaa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aeb0:	f003 0310 	and.w	r3, r3, #16
 800aeb4:	2b00      	cmp	r3, #0
 800aeb6:	d00a      	beq.n	800aece <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	689b      	ldr	r3, [r3, #8]
 800aebe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	430a      	orrs	r2, r1
 800aecc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aed2:	f003 0320 	and.w	r3, r3, #32
 800aed6:	2b00      	cmp	r3, #0
 800aed8:	d00a      	beq.n	800aef0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aeda:	687b      	ldr	r3, [r7, #4]
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	689b      	ldr	r3, [r3, #8]
 800aee0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	430a      	orrs	r2, r1
 800aeee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aef8:	2b00      	cmp	r3, #0
 800aefa:	d01a      	beq.n	800af32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	685b      	ldr	r3, [r3, #4]
 800af02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	430a      	orrs	r2, r1
 800af10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800af16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800af1a:	d10a      	bne.n	800af32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	681b      	ldr	r3, [r3, #0]
 800af20:	685b      	ldr	r3, [r3, #4]
 800af22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800af26:	687b      	ldr	r3, [r7, #4]
 800af28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	681b      	ldr	r3, [r3, #0]
 800af2e:	430a      	orrs	r2, r1
 800af30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800af3a:	2b00      	cmp	r3, #0
 800af3c:	d00a      	beq.n	800af54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	685b      	ldr	r3, [r3, #4]
 800af44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800af48:	687b      	ldr	r3, [r7, #4]
 800af4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	430a      	orrs	r2, r1
 800af52:	605a      	str	r2, [r3, #4]
  }
}
 800af54:	bf00      	nop
 800af56:	370c      	adds	r7, #12
 800af58:	46bd      	mov	sp, r7
 800af5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5e:	4770      	bx	lr

0800af60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800af60:	b580      	push	{r7, lr}
 800af62:	b086      	sub	sp, #24
 800af64:	af02      	add	r7, sp, #8
 800af66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	2200      	movs	r2, #0
 800af6c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800af6e:	f7f9 fcd1 	bl	8004914 <HAL_GetTick>
 800af72:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	f003 0308 	and.w	r3, r3, #8
 800af7e:	2b08      	cmp	r3, #8
 800af80:	d10e      	bne.n	800afa0 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800af82:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800af86:	9300      	str	r3, [sp, #0]
 800af88:	68fb      	ldr	r3, [r7, #12]
 800af8a:	2200      	movs	r2, #0
 800af8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800af90:	6878      	ldr	r0, [r7, #4]
 800af92:	f000 f814 	bl	800afbe <UART_WaitOnFlagUntilTimeout>
 800af96:	4603      	mov	r3, r0
 800af98:	2b00      	cmp	r3, #0
 800af9a:	d001      	beq.n	800afa0 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800af9c:	2303      	movs	r3, #3
 800af9e:	e00a      	b.n	800afb6 <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800afa0:	687b      	ldr	r3, [r7, #4]
 800afa2:	2220      	movs	r2, #32
 800afa4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800afa6:	687b      	ldr	r3, [r7, #4]
 800afa8:	2220      	movs	r2, #32
 800afaa:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	2200      	movs	r2, #0
 800afb0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800afb4:	2300      	movs	r3, #0
}
 800afb6:	4618      	mov	r0, r3
 800afb8:	3710      	adds	r7, #16
 800afba:	46bd      	mov	sp, r7
 800afbc:	bd80      	pop	{r7, pc}

0800afbe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800afbe:	b580      	push	{r7, lr}
 800afc0:	b084      	sub	sp, #16
 800afc2:	af00      	add	r7, sp, #0
 800afc4:	60f8      	str	r0, [r7, #12]
 800afc6:	60b9      	str	r1, [r7, #8]
 800afc8:	603b      	str	r3, [r7, #0]
 800afca:	4613      	mov	r3, r2
 800afcc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800afce:	e05d      	b.n	800b08c <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800afd0:	69bb      	ldr	r3, [r7, #24]
 800afd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800afd6:	d059      	beq.n	800b08c <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800afd8:	f7f9 fc9c 	bl	8004914 <HAL_GetTick>
 800afdc:	4602      	mov	r2, r0
 800afde:	683b      	ldr	r3, [r7, #0]
 800afe0:	1ad3      	subs	r3, r2, r3
 800afe2:	69ba      	ldr	r2, [r7, #24]
 800afe4:	429a      	cmp	r2, r3
 800afe6:	d302      	bcc.n	800afee <UART_WaitOnFlagUntilTimeout+0x30>
 800afe8:	69bb      	ldr	r3, [r7, #24]
 800afea:	2b00      	cmp	r3, #0
 800afec:	d11b      	bne.n	800b026 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	681a      	ldr	r2, [r3, #0]
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	681b      	ldr	r3, [r3, #0]
 800aff8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800affc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800affe:	68fb      	ldr	r3, [r7, #12]
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	689a      	ldr	r2, [r3, #8]
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	681b      	ldr	r3, [r3, #0]
 800b008:	f022 0201 	bic.w	r2, r2, #1
 800b00c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	2220      	movs	r2, #32
 800b012:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2220      	movs	r2, #32
 800b018:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800b01a:	68fb      	ldr	r3, [r7, #12]
 800b01c:	2200      	movs	r2, #0
 800b01e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800b022:	2303      	movs	r3, #3
 800b024:	e042      	b.n	800b0ac <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	f003 0304 	and.w	r3, r3, #4
 800b030:	2b00      	cmp	r3, #0
 800b032:	d02b      	beq.n	800b08c <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	69db      	ldr	r3, [r3, #28]
 800b03a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b03e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b042:	d123      	bne.n	800b08c <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b044:	68fb      	ldr	r3, [r7, #12]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b04c:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	681a      	ldr	r2, [r3, #0]
 800b054:	68fb      	ldr	r3, [r7, #12]
 800b056:	681b      	ldr	r3, [r3, #0]
 800b058:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b05c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b05e:	68fb      	ldr	r3, [r7, #12]
 800b060:	681b      	ldr	r3, [r3, #0]
 800b062:	689a      	ldr	r2, [r3, #8]
 800b064:	68fb      	ldr	r3, [r7, #12]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	f022 0201 	bic.w	r2, r2, #1
 800b06c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800b06e:	68fb      	ldr	r3, [r7, #12]
 800b070:	2220      	movs	r2, #32
 800b072:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800b074:	68fb      	ldr	r3, [r7, #12]
 800b076:	2220      	movs	r2, #32
 800b078:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800b07a:	68fb      	ldr	r3, [r7, #12]
 800b07c:	2220      	movs	r2, #32
 800b07e:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	2200      	movs	r2, #0
 800b084:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800b088:	2303      	movs	r3, #3
 800b08a:	e00f      	b.n	800b0ac <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b08c:	68fb      	ldr	r3, [r7, #12]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	69da      	ldr	r2, [r3, #28]
 800b092:	68bb      	ldr	r3, [r7, #8]
 800b094:	4013      	ands	r3, r2
 800b096:	68ba      	ldr	r2, [r7, #8]
 800b098:	429a      	cmp	r2, r3
 800b09a:	bf0c      	ite	eq
 800b09c:	2301      	moveq	r3, #1
 800b09e:	2300      	movne	r3, #0
 800b0a0:	b2db      	uxtb	r3, r3
 800b0a2:	461a      	mov	r2, r3
 800b0a4:	79fb      	ldrb	r3, [r7, #7]
 800b0a6:	429a      	cmp	r2, r3
 800b0a8:	d092      	beq.n	800afd0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b0aa:	2300      	movs	r3, #0
}
 800b0ac:	4618      	mov	r0, r3
 800b0ae:	3710      	adds	r7, #16
 800b0b0:	46bd      	mov	sp, r7
 800b0b2:	bd80      	pop	{r7, pc}

0800b0b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b0b4:	b480      	push	{r7}
 800b0b6:	b083      	sub	sp, #12
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	681a      	ldr	r2, [r3, #0]
 800b0c2:	687b      	ldr	r3, [r7, #4]
 800b0c4:	681b      	ldr	r3, [r3, #0]
 800b0c6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b0ca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	689a      	ldr	r2, [r3, #8]
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	681b      	ldr	r3, [r3, #0]
 800b0d6:	f022 0201 	bic.w	r2, r2, #1
 800b0da:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	2220      	movs	r2, #32
 800b0e0:	679a      	str	r2, [r3, #120]	; 0x78

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	2200      	movs	r2, #0
 800b0e6:	661a      	str	r2, [r3, #96]	; 0x60
}
 800b0e8:	bf00      	nop
 800b0ea:	370c      	adds	r7, #12
 800b0ec:	46bd      	mov	sp, r7
 800b0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f2:	4770      	bx	lr

0800b0f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b0f4:	b580      	push	{r7, lr}
 800b0f6:	b084      	sub	sp, #16
 800b0f8:	af00      	add	r7, sp, #0
 800b0fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b0fc:	687b      	ldr	r3, [r7, #4]
 800b0fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b100:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800b102:	68fb      	ldr	r3, [r7, #12]
 800b104:	2200      	movs	r2, #0
 800b106:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2200      	movs	r2, #0
 800b10e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b112:	68f8      	ldr	r0, [r7, #12]
 800b114:	f7ff fbcc 	bl	800a8b0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b118:	bf00      	nop
 800b11a:	3710      	adds	r7, #16
 800b11c:	46bd      	mov	sp, r7
 800b11e:	bd80      	pop	{r7, pc}

0800b120 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b120:	b480      	push	{r7}
 800b122:	b083      	sub	sp, #12
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b12c:	2b21      	cmp	r3, #33	; 0x21
 800b12e:	d12a      	bne.n	800b186 <UART_TxISR_8BIT+0x66>
  {
    if (huart->TxXferCount == 0U)
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b136:	b29b      	uxth	r3, r3
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d110      	bne.n	800b15e <UART_TxISR_8BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	681a      	ldr	r2, [r3, #0]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b14a:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	681a      	ldr	r2, [r3, #0]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b15a:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800b15c:	e013      	b.n	800b186 <UART_TxISR_8BIT+0x66>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b162:	781a      	ldrb	r2, [r3, #0]
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	681b      	ldr	r3, [r3, #0]
 800b168:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b16e:	1c5a      	adds	r2, r3, #1
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b17a:	b29b      	uxth	r3, r3
 800b17c:	3b01      	subs	r3, #1
 800b17e:	b29a      	uxth	r2, r3
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b186:	bf00      	nop
 800b188:	370c      	adds	r7, #12
 800b18a:	46bd      	mov	sp, r7
 800b18c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b190:	4770      	bx	lr

0800b192 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b192:	b480      	push	{r7}
 800b194:	b085      	sub	sp, #20
 800b196:	af00      	add	r7, sp, #0
 800b198:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800b19e:	2b21      	cmp	r3, #33	; 0x21
 800b1a0:	d12f      	bne.n	800b202 <UART_TxISR_16BIT+0x70>
  {
    if (huart->TxXferCount == 0U)
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1a8:	b29b      	uxth	r3, r3
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d110      	bne.n	800b1d0 <UART_TxISR_16BIT+0x3e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800b1ae:	687b      	ldr	r3, [r7, #4]
 800b1b0:	681b      	ldr	r3, [r3, #0]
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b1bc:	601a      	str	r2, [r3, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	681a      	ldr	r2, [r3, #0]
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1cc:	601a      	str	r2, [r3, #0]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800b1ce:	e018      	b.n	800b202 <UART_TxISR_16BIT+0x70>
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800b1d6:	68fb      	ldr	r3, [r7, #12]
 800b1d8:	881b      	ldrh	r3, [r3, #0]
 800b1da:	461a      	mov	r2, r3
 800b1dc:	687b      	ldr	r3, [r7, #4]
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b1e4:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800b1e6:	687b      	ldr	r3, [r7, #4]
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	1c9a      	adds	r2, r3, #2
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800b1f0:	687b      	ldr	r3, [r7, #4]
 800b1f2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	3b01      	subs	r3, #1
 800b1fa:	b29a      	uxth	r2, r3
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800b202:	bf00      	nop
 800b204:	3714      	adds	r7, #20
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr

0800b20e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800b20e:	b580      	push	{r7, lr}
 800b210:	b082      	sub	sp, #8
 800b212:	af00      	add	r7, sp, #0
 800b214:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800b216:	687b      	ldr	r3, [r7, #4]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	681a      	ldr	r2, [r3, #0]
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	681b      	ldr	r3, [r3, #0]
 800b220:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b224:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	2220      	movs	r2, #32
 800b22a:	675a      	str	r2, [r3, #116]	; 0x74

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	2200      	movs	r2, #0
 800b230:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800b232:	6878      	ldr	r0, [r7, #4]
 800b234:	f7ff fb32 	bl	800a89c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b238:	bf00      	nop
 800b23a:	3708      	adds	r7, #8
 800b23c:	46bd      	mov	sp, r7
 800b23e:	bd80      	pop	{r7, pc}

0800b240 <UART_RxISR_8BIT>:
  * @brief RX interrrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800b240:	b580      	push	{r7, lr}
 800b242:	b084      	sub	sp, #16
 800b244:	af00      	add	r7, sp, #0
 800b246:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800b248:	687b      	ldr	r3, [r7, #4]
 800b24a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b24e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b250:	687b      	ldr	r3, [r7, #4]
 800b252:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b254:	2b22      	cmp	r3, #34	; 0x22
 800b256:	d13a      	bne.n	800b2ce <UART_RxISR_8BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b258:	687b      	ldr	r3, [r7, #4]
 800b25a:	681b      	ldr	r3, [r3, #0]
 800b25c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b25e:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800b260:	89bb      	ldrh	r3, [r7, #12]
 800b262:	b2d9      	uxtb	r1, r3
 800b264:	89fb      	ldrh	r3, [r7, #14]
 800b266:	b2da      	uxtb	r2, r3
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b26c:	400a      	ands	r2, r1
 800b26e:	b2d2      	uxtb	r2, r2
 800b270:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b276:	1c5a      	adds	r2, r3, #1
 800b278:	687b      	ldr	r3, [r7, #4]
 800b27a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b282:	b29b      	uxth	r3, r3
 800b284:	3b01      	subs	r3, #1
 800b286:	b29a      	uxth	r2, r3
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b294:	b29b      	uxth	r3, r3
 800b296:	2b00      	cmp	r3, #0
 800b298:	d121      	bne.n	800b2de <UART_RxISR_8BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b29a:	687b      	ldr	r3, [r7, #4]
 800b29c:	681b      	ldr	r3, [r3, #0]
 800b29e:	681a      	ldr	r2, [r3, #0]
 800b2a0:	687b      	ldr	r3, [r7, #4]
 800b2a2:	681b      	ldr	r3, [r3, #0]
 800b2a4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b2a8:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	681b      	ldr	r3, [r3, #0]
 800b2ae:	689a      	ldr	r2, [r3, #8]
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	681b      	ldr	r3, [r3, #0]
 800b2b4:	f022 0201 	bic.w	r2, r2, #1
 800b2b8:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b2ba:	687b      	ldr	r3, [r7, #4]
 800b2bc:	2220      	movs	r2, #32
 800b2be:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b2c6:	6878      	ldr	r0, [r7, #4]
 800b2c8:	f7f6 fc8e 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b2cc:	e007      	b.n	800b2de <UART_RxISR_8BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	699a      	ldr	r2, [r3, #24]
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	f042 0208 	orr.w	r2, r2, #8
 800b2dc:	619a      	str	r2, [r3, #24]
}
 800b2de:	bf00      	nop
 800b2e0:	3710      	adds	r7, #16
 800b2e2:	46bd      	mov	sp, r7
 800b2e4:	bd80      	pop	{r7, pc}

0800b2e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800b2e6:	b580      	push	{r7, lr}
 800b2e8:	b084      	sub	sp, #16
 800b2ea:	af00      	add	r7, sp, #0
 800b2ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800b2f4:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2fa:	2b22      	cmp	r3, #34	; 0x22
 800b2fc:	d13a      	bne.n	800b374 <UART_RxISR_16BIT+0x8e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800b2fe:	687b      	ldr	r3, [r7, #4]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800b306:	687b      	ldr	r3, [r7, #4]
 800b308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b30a:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 800b30c:	89ba      	ldrh	r2, [r7, #12]
 800b30e:	89fb      	ldrh	r3, [r7, #14]
 800b310:	4013      	ands	r3, r2
 800b312:	b29a      	uxth	r2, r3
 800b314:	68bb      	ldr	r3, [r7, #8]
 800b316:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b31c:	1c9a      	adds	r2, r3, #2
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800b322:	687b      	ldr	r3, [r7, #4]
 800b324:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b328:	b29b      	uxth	r3, r3
 800b32a:	3b01      	subs	r3, #1
 800b32c:	b29a      	uxth	r2, r3
 800b32e:	687b      	ldr	r3, [r7, #4]
 800b330:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800b33a:	b29b      	uxth	r3, r3
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d121      	bne.n	800b384 <UART_RxISR_16BIT+0x9e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b34e:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	689a      	ldr	r2, [r3, #8]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	681b      	ldr	r3, [r3, #0]
 800b35a:	f022 0201 	bic.w	r2, r2, #1
 800b35e:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2220      	movs	r2, #32
 800b364:	679a      	str	r2, [r3, #120]	; 0x78

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2200      	movs	r2, #0
 800b36a:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f7f6 fc3b 	bl	8001be8 <HAL_UART_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800b372:	e007      	b.n	800b384 <UART_RxISR_16BIT+0x9e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	699a      	ldr	r2, [r3, #24]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	f042 0208 	orr.w	r2, r2, #8
 800b382:	619a      	str	r2, [r3, #24]
}
 800b384:	bf00      	nop
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 800b38c:	b480      	push	{r7}
 800b38e:	b085      	sub	sp, #20
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
 800b394:	6039      	str	r1, [r7, #0]
  uint32_t tmpr1 = 0;
 800b396:	2300      	movs	r3, #0
 800b398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpr2 = 0;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 800b39e:	683b      	ldr	r3, [r7, #0]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	2b01      	cmp	r3, #1
 800b3a4:	d027      	beq.n	800b3f6 <FMC_SDRAM_Init+0x6a>
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	60fb      	str	r3, [r7, #12]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b3ac:	68fa      	ldr	r2, [r7, #12]
 800b3ae:	4b2f      	ldr	r3, [pc, #188]	; (800b46c <FMC_SDRAM_Init+0xe0>)
 800b3b0:	4013      	ands	r3, r2
 800b3b2:	60fb      	str	r3, [r7, #12]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3b4:	683b      	ldr	r3, [r7, #0]
 800b3b6:	685a      	ldr	r2, [r3, #4]
                        Init->RowBitsNumber      |\
 800b3b8:	683b      	ldr	r3, [r7, #0]
 800b3ba:	689b      	ldr	r3, [r3, #8]
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3bc:	431a      	orrs	r2, r3
                        Init->MemoryDataWidth    |\
 800b3be:	683b      	ldr	r3, [r7, #0]
 800b3c0:	68db      	ldr	r3, [r3, #12]
                        Init->RowBitsNumber      |\
 800b3c2:	431a      	orrs	r2, r3
                        Init->InternalBankNumber |\
 800b3c4:	683b      	ldr	r3, [r7, #0]
 800b3c6:	691b      	ldr	r3, [r3, #16]
                        Init->MemoryDataWidth    |\
 800b3c8:	431a      	orrs	r2, r3
                        Init->CASLatency         |\
 800b3ca:	683b      	ldr	r3, [r7, #0]
 800b3cc:	695b      	ldr	r3, [r3, #20]
                        Init->InternalBankNumber |\
 800b3ce:	431a      	orrs	r2, r3
                        Init->WriteProtection    |\
 800b3d0:	683b      	ldr	r3, [r7, #0]
 800b3d2:	699b      	ldr	r3, [r3, #24]
                        Init->CASLatency         |\
 800b3d4:	431a      	orrs	r2, r3
                        Init->SDClockPeriod      |\
 800b3d6:	683b      	ldr	r3, [r7, #0]
 800b3d8:	69db      	ldr	r3, [r3, #28]
                        Init->WriteProtection    |\
 800b3da:	431a      	orrs	r2, r3
                        Init->ReadBurst          |\
 800b3dc:	683b      	ldr	r3, [r7, #0]
 800b3de:	6a1b      	ldr	r3, [r3, #32]
                        Init->SDClockPeriod      |\
 800b3e0:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay
 800b3e2:	683b      	ldr	r3, [r7, #0]
 800b3e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b3e6:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b3e8:	68fa      	ldr	r2, [r7, #12]
 800b3ea:	4313      	orrs	r3, r2
 800b3ec:	60fb      	str	r3, [r7, #12]
                        );                                      
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	68fa      	ldr	r2, [r7, #12]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	e032      	b.n	800b45c <FMC_SDRAM_Init+0xd0>
  }
  else /* FMC_Bank2_SDRAM */                      
  {
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	60fb      	str	r3, [r7, #12]
    
    /* Clear SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 800b3fc:	68fb      	ldr	r3, [r7, #12]
 800b3fe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b402:	60fb      	str	r3, [r7, #12]
    
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b404:	683b      	ldr	r3, [r7, #0]
 800b406:	69da      	ldr	r2, [r3, #28]
                        Init->ReadBurst          |\
 800b408:	683b      	ldr	r3, [r7, #0]
 800b40a:	6a1b      	ldr	r3, [r3, #32]
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b40c:	431a      	orrs	r2, r3
                        Init->ReadPipeDelay);
 800b40e:	683b      	ldr	r3, [r7, #0]
 800b410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        Init->ReadBurst          |\
 800b412:	4313      	orrs	r3, r2
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 800b414:	68fa      	ldr	r2, [r7, #12]
 800b416:	4313      	orrs	r3, r2
 800b418:	60fb      	str	r3, [r7, #12]
    
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	685b      	ldr	r3, [r3, #4]
 800b41e:	60bb      	str	r3, [r7, #8]
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	4b12      	ldr	r3, [pc, #72]	; (800b46c <FMC_SDRAM_Init+0xe0>)
 800b424:	4013      	ands	r3, r2
 800b426:	60bb      	str	r3, [r7, #8]
                          FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP   | \
                          FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));

    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b428:	683b      	ldr	r3, [r7, #0]
 800b42a:	685a      	ldr	r2, [r3, #4]
                       Init->RowBitsNumber       |\
 800b42c:	683b      	ldr	r3, [r7, #0]
 800b42e:	689b      	ldr	r3, [r3, #8]
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b430:	431a      	orrs	r2, r3
                       Init->MemoryDataWidth     |\
 800b432:	683b      	ldr	r3, [r7, #0]
 800b434:	68db      	ldr	r3, [r3, #12]
                       Init->RowBitsNumber       |\
 800b436:	431a      	orrs	r2, r3
                       Init->InternalBankNumber  |\
 800b438:	683b      	ldr	r3, [r7, #0]
 800b43a:	691b      	ldr	r3, [r3, #16]
                       Init->MemoryDataWidth     |\
 800b43c:	431a      	orrs	r2, r3
                       Init->CASLatency          |\
 800b43e:	683b      	ldr	r3, [r7, #0]
 800b440:	695b      	ldr	r3, [r3, #20]
                       Init->InternalBankNumber  |\
 800b442:	431a      	orrs	r2, r3
                       Init->WriteProtection);
 800b444:	683b      	ldr	r3, [r7, #0]
 800b446:	699b      	ldr	r3, [r3, #24]
                       Init->CASLatency          |\
 800b448:	4313      	orrs	r3, r2
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 800b44a:	68ba      	ldr	r2, [r7, #8]
 800b44c:	4313      	orrs	r3, r2
 800b44e:	60bb      	str	r3, [r7, #8]

    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	68fa      	ldr	r2, [r7, #12]
 800b454:	601a      	str	r2, [r3, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	68ba      	ldr	r2, [r7, #8]
 800b45a:	605a      	str	r2, [r3, #4]
  }
  
  return HAL_OK;
 800b45c:	2300      	movs	r3, #0
}
 800b45e:	4618      	mov	r0, r3
 800b460:	3714      	adds	r7, #20
 800b462:	46bd      	mov	sp, r7
 800b464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b468:	4770      	bx	lr
 800b46a:	bf00      	nop
 800b46c:	ffff8000 	.word	0xffff8000

0800b470 <FMC_SDRAM_Timing_Init>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Bank SDRAM bank number   
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	60f8      	str	r0, [r7, #12]
 800b478:	60b9      	str	r1, [r7, #8]
 800b47a:	607a      	str	r2, [r7, #4]
  uint32_t tmpr1 = 0;
 800b47c:	2300      	movs	r3, #0
 800b47e:	617b      	str	r3, [r7, #20]
  uint32_t tmpr2 = 0;
 800b480:	2300      	movs	r3, #0
 800b482:	613b      	str	r3, [r7, #16]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	2b01      	cmp	r3, #1
 800b488:	d02e      	beq.n	800b4e8 <FMC_SDRAM_Timing_Init+0x78>
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	689b      	ldr	r3, [r3, #8]
 800b48e:	617b      	str	r3, [r7, #20]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b490:	697b      	ldr	r3, [r7, #20]
 800b492:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b496:	617b      	str	r3, [r7, #20]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b498:	68bb      	ldr	r3, [r7, #8]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	3b01      	subs	r3, #1
 800b4a4:	011b      	lsls	r3, r3, #4
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4a6:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	689b      	ldr	r3, [r3, #8]
 800b4ac:	3b01      	subs	r3, #1
 800b4ae:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4) |\
 800b4b0:	431a      	orrs	r2, r3
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4b2:	68bb      	ldr	r3, [r7, #8]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	3b01      	subs	r3, #1
 800b4b8:	031b      	lsls	r3, r3, #12
                       (((Timing->SelfRefreshTime)-1) << 8)      |\
 800b4ba:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4bc:	68bb      	ldr	r3, [r7, #8]
 800b4be:	691b      	ldr	r3, [r3, #16]
 800b4c0:	3b01      	subs	r3, #1
 800b4c2:	041b      	lsls	r3, r3, #16
                       (((Timing->RowCycleDelay)-1) << 12)       |\
 800b4c4:	431a      	orrs	r2, r3
                       (((Timing->RPDelay)-1) << 20)             |\
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	695b      	ldr	r3, [r3, #20]
 800b4ca:	3b01      	subs	r3, #1
 800b4cc:	051b      	lsls	r3, r3, #20
                       (((Timing->WriteRecoveryTime)-1) <<16)    |\
 800b4ce:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));
 800b4d0:	68bb      	ldr	r3, [r7, #8]
 800b4d2:	699b      	ldr	r3, [r3, #24]
 800b4d4:	3b01      	subs	r3, #1
 800b4d6:	061b      	lsls	r3, r3, #24
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b4d8:	4313      	orrs	r3, r2
 800b4da:	697a      	ldr	r2, [r7, #20]
 800b4dc:	4313      	orrs	r3, r2
 800b4de:	617b      	str	r3, [r7, #20]
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	697a      	ldr	r2, [r7, #20]
 800b4e4:	609a      	str	r2, [r3, #8]
 800b4e6:	e039      	b.n	800b55c <FMC_SDRAM_Timing_Init+0xec>
  }
  else /* FMC_Bank2_SDRAM */
  {
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	689b      	ldr	r3, [r3, #8]
 800b4ec:	617b      	str	r3, [r7, #20]
    
    /* Clear TRC and TRP bits */
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800b4ee:	697a      	ldr	r2, [r7, #20]
 800b4f0:	4b1e      	ldr	r3, [pc, #120]	; (800b56c <FMC_SDRAM_Timing_Init+0xfc>)
 800b4f2:	4013      	ands	r3, r2
 800b4f4:	617b      	str	r3, [r7, #20]
    
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b4f6:	68bb      	ldr	r3, [r7, #8]
 800b4f8:	68db      	ldr	r3, [r3, #12]
 800b4fa:	3b01      	subs	r3, #1
 800b4fc:	031a      	lsls	r2, r3, #12
                        (((Timing->RPDelay)-1) << 20)); 
 800b4fe:	68bb      	ldr	r3, [r7, #8]
 800b500:	695b      	ldr	r3, [r3, #20]
 800b502:	3b01      	subs	r3, #1
 800b504:	051b      	lsls	r3, r3, #20
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1) << 12)       |\
 800b506:	4313      	orrs	r3, r2
 800b508:	697a      	ldr	r2, [r7, #20]
 800b50a:	4313      	orrs	r3, r2
 800b50c:	617b      	str	r3, [r7, #20]
    
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 800b50e:	68fb      	ldr	r3, [r7, #12]
 800b510:	68db      	ldr	r3, [r3, #12]
 800b512:	613b      	str	r3, [r7, #16]
    
    /* Clear TMRD, TXSR, TRAS, TRC, TWR, TRP and TRCD bits */
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800b514:	693b      	ldr	r3, [r7, #16]
 800b516:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800b51a:	613b      	str	r3, [r7, #16]
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b51c:	68bb      	ldr	r3, [r7, #8]
 800b51e:	681b      	ldr	r3, [r3, #0]
 800b520:	1e5a      	subs	r2, r3, #1
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b522:	68bb      	ldr	r3, [r7, #8]
 800b524:	685b      	ldr	r3, [r3, #4]
 800b526:	3b01      	subs	r3, #1
 800b528:	011b      	lsls	r3, r3, #4
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b52a:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b52c:	68bb      	ldr	r3, [r7, #8]
 800b52e:	689b      	ldr	r3, [r3, #8]
 800b530:	3b01      	subs	r3, #1
 800b532:	021b      	lsls	r3, r3, #8
                       (((Timing->ExitSelfRefreshDelay)-1) << 4)  |\
 800b534:	431a      	orrs	r2, r3
                       (((Timing->WriteRecoveryTime)-1) <<16)     |\
 800b536:	68bb      	ldr	r3, [r7, #8]
 800b538:	691b      	ldr	r3, [r3, #16]
 800b53a:	3b01      	subs	r3, #1
 800b53c:	041b      	lsls	r3, r3, #16
                       (((Timing->SelfRefreshTime)-1) << 8)       |\
 800b53e:	431a      	orrs	r2, r3
                       (((Timing->RCDDelay)-1) << 24));   
 800b540:	68bb      	ldr	r3, [r7, #8]
 800b542:	699b      	ldr	r3, [r3, #24]
 800b544:	3b01      	subs	r3, #1
 800b546:	061b      	lsls	r3, r3, #24
    tmpr2 |= (uint32_t)(((Timing->LoadToActiveDelay)-1)           |\
 800b548:	4313      	orrs	r3, r2
 800b54a:	693a      	ldr	r2, [r7, #16]
 800b54c:	4313      	orrs	r3, r2
 800b54e:	613b      	str	r3, [r7, #16]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 800b550:	68fb      	ldr	r3, [r7, #12]
 800b552:	697a      	ldr	r2, [r7, #20]
 800b554:	609a      	str	r2, [r3, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 800b556:	68fb      	ldr	r3, [r7, #12]
 800b558:	693a      	ldr	r2, [r7, #16]
 800b55a:	60da      	str	r2, [r3, #12]
  }
  
  return HAL_OK;
 800b55c:	2300      	movs	r3, #0
}
 800b55e:	4618      	mov	r0, r3
 800b560:	371c      	adds	r7, #28
 800b562:	46bd      	mov	sp, r7
 800b564:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b568:	4770      	bx	lr
 800b56a:	bf00      	nop
 800b56c:	ff0f0fff 	.word	0xff0f0fff

0800b570 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800b570:	b480      	push	{r7}
 800b572:	b087      	sub	sp, #28
 800b574:	af00      	add	r7, sp, #0
 800b576:	60f8      	str	r0, [r7, #12]
 800b578:	60b9      	str	r1, [r7, #8]
 800b57a:	607a      	str	r2, [r7, #4]
  __IO uint32_t tmpr = 0;
 800b57c:	2300      	movs	r3, #0
 800b57e:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b580:	68bb      	ldr	r3, [r7, #8]
 800b582:	681a      	ldr	r2, [r3, #0]
                    (Command->CommandTarget)                |\
 800b584:	68bb      	ldr	r3, [r7, #8]
 800b586:	685b      	ldr	r3, [r3, #4]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b588:	431a      	orrs	r2, r3
                    (((Command->AutoRefreshNumber)-1) << 5) |\
 800b58a:	68bb      	ldr	r3, [r7, #8]
 800b58c:	689b      	ldr	r3, [r3, #8]
 800b58e:	3b01      	subs	r3, #1
 800b590:	015b      	lsls	r3, r3, #5
                    (Command->CommandTarget)                |\
 800b592:	431a      	orrs	r2, r3
                    ((Command->ModeRegisterDefinition) << 9)
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	68db      	ldr	r3, [r3, #12]
 800b598:	025b      	lsls	r3, r3, #9
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 800b59a:	4313      	orrs	r3, r2
 800b59c:	617b      	str	r3, [r7, #20]
                    );
    
  Device->SDCMR = tmpr;
 800b59e:	697a      	ldr	r2, [r7, #20]
 800b5a0:	68fb      	ldr	r3, [r7, #12]
 800b5a2:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 800b5a4:	2300      	movs	r3, #0
}
 800b5a6:	4618      	mov	r0, r3
 800b5a8:	371c      	adds	r7, #28
 800b5aa:	46bd      	mov	sp, r7
 800b5ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5b0:	4770      	bx	lr

0800b5b2 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance  
  * @param  RefreshRate The SDRAM refresh rate value.       
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 800b5b2:	b480      	push	{r7}
 800b5b4:	b083      	sub	sp, #12
 800b5b6:	af00      	add	r7, sp, #0
 800b5b8:	6078      	str	r0, [r7, #4]
 800b5ba:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1);
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	695a      	ldr	r2, [r3, #20]
 800b5c0:	683b      	ldr	r3, [r7, #0]
 800b5c2:	005b      	lsls	r3, r3, #1
 800b5c4:	431a      	orrs	r2, r3
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	615a      	str	r2, [r3, #20]
  
  return HAL_OK;   
 800b5ca:	2300      	movs	r3, #0
}
 800b5cc:	4618      	mov	r0, r3
 800b5ce:	370c      	adds	r7, #12
 800b5d0:	46bd      	mov	sp, r7
 800b5d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b5d6:	4770      	bx	lr

0800b5d8 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800b5d8:	b480      	push	{r7}
 800b5da:	b085      	sub	sp, #20
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800b5e6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800b5ea:	2b84      	cmp	r3, #132	; 0x84
 800b5ec:	d005      	beq.n	800b5fa <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800b5ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	4413      	add	r3, r2
 800b5f6:	3303      	adds	r3, #3
 800b5f8:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800b5fa:	68fb      	ldr	r3, [r7, #12]
}
 800b5fc:	4618      	mov	r0, r3
 800b5fe:	3714      	adds	r7, #20
 800b600:	46bd      	mov	sp, r7
 800b602:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b606:	4770      	bx	lr

0800b608 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800b608:	b580      	push	{r7, lr}
 800b60a:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800b60c:	f001 f86e 	bl	800c6ec <vTaskStartScheduler>
  
  return osOK;
 800b610:	2300      	movs	r3, #0
}
 800b612:	4618      	mov	r0, r3
 800b614:	bd80      	pop	{r7, pc}

0800b616 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800b616:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b618:	b089      	sub	sp, #36	; 0x24
 800b61a:	af04      	add	r7, sp, #16
 800b61c:	6078      	str	r0, [r7, #4]
 800b61e:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	695b      	ldr	r3, [r3, #20]
 800b624:	2b00      	cmp	r3, #0
 800b626:	d020      	beq.n	800b66a <osThreadCreate+0x54>
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	699b      	ldr	r3, [r3, #24]
 800b62c:	2b00      	cmp	r3, #0
 800b62e:	d01c      	beq.n	800b66a <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b630:	687b      	ldr	r3, [r7, #4]
 800b632:	685c      	ldr	r4, [r3, #4]
 800b634:	687b      	ldr	r3, [r7, #4]
 800b636:	681d      	ldr	r5, [r3, #0]
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	691e      	ldr	r6, [r3, #16]
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b642:	4618      	mov	r0, r3
 800b644:	f7ff ffc8 	bl	800b5d8 <makeFreeRtosPriority>
 800b648:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	695b      	ldr	r3, [r3, #20]
 800b64e:	687a      	ldr	r2, [r7, #4]
 800b650:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b652:	9202      	str	r2, [sp, #8]
 800b654:	9301      	str	r3, [sp, #4]
 800b656:	9100      	str	r1, [sp, #0]
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	4632      	mov	r2, r6
 800b65c:	4629      	mov	r1, r5
 800b65e:	4620      	mov	r0, r4
 800b660:	f000 fde4 	bl	800c22c <xTaskCreateStatic>
 800b664:	4603      	mov	r3, r0
 800b666:	60fb      	str	r3, [r7, #12]
 800b668:	e01c      	b.n	800b6a4 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b66a:	687b      	ldr	r3, [r7, #4]
 800b66c:	685c      	ldr	r4, [r3, #4]
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800b676:	b29e      	uxth	r6, r3
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800b67e:	4618      	mov	r0, r3
 800b680:	f7ff ffaa 	bl	800b5d8 <makeFreeRtosPriority>
 800b684:	4602      	mov	r2, r0
 800b686:	f107 030c 	add.w	r3, r7, #12
 800b68a:	9301      	str	r3, [sp, #4]
 800b68c:	9200      	str	r2, [sp, #0]
 800b68e:	683b      	ldr	r3, [r7, #0]
 800b690:	4632      	mov	r2, r6
 800b692:	4629      	mov	r1, r5
 800b694:	4620      	mov	r0, r4
 800b696:	f000 fe2c 	bl	800c2f2 <xTaskCreate>
 800b69a:	4603      	mov	r3, r0
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d001      	beq.n	800b6a4 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800b6a0:	2300      	movs	r3, #0
 800b6a2:	e000      	b.n	800b6a6 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800b6a4:	68fb      	ldr	r3, [r7, #12]
}
 800b6a6:	4618      	mov	r0, r3
 800b6a8:	3714      	adds	r7, #20
 800b6aa:	46bd      	mov	sp, r7
 800b6ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b6ae <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800b6ae:	b580      	push	{r7, lr}
 800b6b0:	b084      	sub	sp, #16
 800b6b2:	af00      	add	r7, sp, #0
 800b6b4:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800b6b6:	687b      	ldr	r3, [r7, #4]
 800b6b8:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800b6ba:	68fb      	ldr	r3, [r7, #12]
 800b6bc:	2b00      	cmp	r3, #0
 800b6be:	d001      	beq.n	800b6c4 <osDelay+0x16>
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	e000      	b.n	800b6c6 <osDelay+0x18>
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	4618      	mov	r0, r3
 800b6c8:	f000 ffda 	bl	800c680 <vTaskDelay>
  
  return osOK;
 800b6cc:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800b6ce:	4618      	mov	r0, r3
 800b6d0:	3710      	adds	r7, #16
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	685b      	ldr	r3, [r3, #4]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d007      	beq.n	800b6f6 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800b6e6:	687b      	ldr	r3, [r7, #4]
 800b6e8:	685b      	ldr	r3, [r3, #4]
 800b6ea:	4619      	mov	r1, r3
 800b6ec:	2001      	movs	r0, #1
 800b6ee:	f000 fa66 	bl	800bbbe <xQueueCreateMutexStatic>
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	e003      	b.n	800b6fe <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800b6f6:	2001      	movs	r0, #1
 800b6f8:	f000 fa49 	bl	800bb8e <xQueueCreateMutex>
 800b6fc:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800b6fe:	4618      	mov	r0, r3
 800b700:	3708      	adds	r7, #8
 800b702:	46bd      	mov	sp, r7
 800b704:	bd80      	pop	{r7, pc}

0800b706 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800b706:	b590      	push	{r4, r7, lr}
 800b708:	b085      	sub	sp, #20
 800b70a:	af02      	add	r7, sp, #8
 800b70c:	6078      	str	r0, [r7, #4]
 800b70e:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800b710:	687b      	ldr	r3, [r7, #4]
 800b712:	689b      	ldr	r3, [r3, #8]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d011      	beq.n	800b73c <osMessageCreate+0x36>
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	68db      	ldr	r3, [r3, #12]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d00d      	beq.n	800b73c <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	6818      	ldr	r0, [r3, #0]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	6859      	ldr	r1, [r3, #4]
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	689a      	ldr	r2, [r3, #8]
 800b72c:	687b      	ldr	r3, [r7, #4]
 800b72e:	68db      	ldr	r3, [r3, #12]
 800b730:	2400      	movs	r4, #0
 800b732:	9400      	str	r4, [sp, #0]
 800b734:	f000 f92e 	bl	800b994 <xQueueGenericCreateStatic>
 800b738:	4603      	mov	r3, r0
 800b73a:	e008      	b.n	800b74e <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	6818      	ldr	r0, [r3, #0]
 800b740:	687b      	ldr	r3, [r7, #4]
 800b742:	685b      	ldr	r3, [r3, #4]
 800b744:	2200      	movs	r2, #0
 800b746:	4619      	mov	r1, r3
 800b748:	f000 f9a6 	bl	800ba98 <xQueueGenericCreate>
 800b74c:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800b74e:	4618      	mov	r0, r3
 800b750:	370c      	adds	r7, #12
 800b752:	46bd      	mov	sp, r7
 800b754:	bd90      	pop	{r4, r7, pc}

0800b756 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b756:	b480      	push	{r7}
 800b758:	b083      	sub	sp, #12
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b75e:	687b      	ldr	r3, [r7, #4]
 800b760:	f103 0208 	add.w	r2, r3, #8
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	f04f 32ff 	mov.w	r2, #4294967295
 800b76e:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f103 0208 	add.w	r2, r3, #8
 800b776:	687b      	ldr	r3, [r7, #4]
 800b778:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f103 0208 	add.w	r2, r3, #8
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b784:	687b      	ldr	r3, [r7, #4]
 800b786:	2200      	movs	r2, #0
 800b788:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b78a:	bf00      	nop
 800b78c:	370c      	adds	r7, #12
 800b78e:	46bd      	mov	sp, r7
 800b790:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b794:	4770      	bx	lr

0800b796 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b796:	b480      	push	{r7}
 800b798:	b083      	sub	sp, #12
 800b79a:	af00      	add	r7, sp, #0
 800b79c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	2200      	movs	r2, #0
 800b7a2:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b7a4:	bf00      	nop
 800b7a6:	370c      	adds	r7, #12
 800b7a8:	46bd      	mov	sp, r7
 800b7aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7ae:	4770      	bx	lr

0800b7b0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
 800b7b8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	685b      	ldr	r3, [r3, #4]
 800b7be:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b7c0:	683b      	ldr	r3, [r7, #0]
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	689a      	ldr	r2, [r3, #8]
 800b7ca:	683b      	ldr	r3, [r7, #0]
 800b7cc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	689b      	ldr	r3, [r3, #8]
 800b7d2:	683a      	ldr	r2, [r7, #0]
 800b7d4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	683a      	ldr	r2, [r7, #0]
 800b7da:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	687a      	ldr	r2, [r7, #4]
 800b7e0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7e2:	687b      	ldr	r3, [r7, #4]
 800b7e4:	681b      	ldr	r3, [r3, #0]
 800b7e6:	1c5a      	adds	r2, r3, #1
 800b7e8:	687b      	ldr	r3, [r7, #4]
 800b7ea:	601a      	str	r2, [r3, #0]
}
 800b7ec:	bf00      	nop
 800b7ee:	3714      	adds	r7, #20
 800b7f0:	46bd      	mov	sp, r7
 800b7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7f6:	4770      	bx	lr

0800b7f8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b7f8:	b480      	push	{r7}
 800b7fa:	b085      	sub	sp, #20
 800b7fc:	af00      	add	r7, sp, #0
 800b7fe:	6078      	str	r0, [r7, #4]
 800b800:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b802:	683b      	ldr	r3, [r7, #0]
 800b804:	681b      	ldr	r3, [r3, #0]
 800b806:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b808:	68bb      	ldr	r3, [r7, #8]
 800b80a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b80e:	d103      	bne.n	800b818 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b810:	687b      	ldr	r3, [r7, #4]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	60fb      	str	r3, [r7, #12]
 800b816:	e00c      	b.n	800b832 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	3308      	adds	r3, #8
 800b81c:	60fb      	str	r3, [r7, #12]
 800b81e:	e002      	b.n	800b826 <vListInsert+0x2e>
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	685b      	ldr	r3, [r3, #4]
 800b824:	60fb      	str	r3, [r7, #12]
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	685b      	ldr	r3, [r3, #4]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	68ba      	ldr	r2, [r7, #8]
 800b82e:	429a      	cmp	r2, r3
 800b830:	d2f6      	bcs.n	800b820 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	685a      	ldr	r2, [r3, #4]
 800b836:	683b      	ldr	r3, [r7, #0]
 800b838:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b83a:	683b      	ldr	r3, [r7, #0]
 800b83c:	685b      	ldr	r3, [r3, #4]
 800b83e:	683a      	ldr	r2, [r7, #0]
 800b840:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b842:	683b      	ldr	r3, [r7, #0]
 800b844:	68fa      	ldr	r2, [r7, #12]
 800b846:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b848:	68fb      	ldr	r3, [r7, #12]
 800b84a:	683a      	ldr	r2, [r7, #0]
 800b84c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b84e:	683b      	ldr	r3, [r7, #0]
 800b850:	687a      	ldr	r2, [r7, #4]
 800b852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	1c5a      	adds	r2, r3, #1
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	601a      	str	r2, [r3, #0]
}
 800b85e:	bf00      	nop
 800b860:	3714      	adds	r7, #20
 800b862:	46bd      	mov	sp, r7
 800b864:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b868:	4770      	bx	lr

0800b86a <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b86a:	b480      	push	{r7}
 800b86c:	b085      	sub	sp, #20
 800b86e:	af00      	add	r7, sp, #0
 800b870:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	691b      	ldr	r3, [r3, #16]
 800b876:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	685b      	ldr	r3, [r3, #4]
 800b87c:	687a      	ldr	r2, [r7, #4]
 800b87e:	6892      	ldr	r2, [r2, #8]
 800b880:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	689b      	ldr	r3, [r3, #8]
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	6852      	ldr	r2, [r2, #4]
 800b88a:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b88c:	68fb      	ldr	r3, [r7, #12]
 800b88e:	685b      	ldr	r3, [r3, #4]
 800b890:	687a      	ldr	r2, [r7, #4]
 800b892:	429a      	cmp	r2, r3
 800b894:	d103      	bne.n	800b89e <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b896:	687b      	ldr	r3, [r7, #4]
 800b898:	689a      	ldr	r2, [r3, #8]
 800b89a:	68fb      	ldr	r3, [r7, #12]
 800b89c:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b89e:	687b      	ldr	r3, [r7, #4]
 800b8a0:	2200      	movs	r2, #0
 800b8a2:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	681b      	ldr	r3, [r3, #0]
 800b8a8:	1e5a      	subs	r2, r3, #1
 800b8aa:	68fb      	ldr	r3, [r7, #12]
 800b8ac:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681b      	ldr	r3, [r3, #0]
}
 800b8b2:	4618      	mov	r0, r3
 800b8b4:	3714      	adds	r7, #20
 800b8b6:	46bd      	mov	sp, r7
 800b8b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8bc:	4770      	bx	lr
	...

0800b8c0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b8c0:	b580      	push	{r7, lr}
 800b8c2:	b084      	sub	sp, #16
 800b8c4:	af00      	add	r7, sp, #0
 800b8c6:	6078      	str	r0, [r7, #4]
 800b8c8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	2b00      	cmp	r3, #0
 800b8d2:	d10c      	bne.n	800b8ee <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b8d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8d8:	b672      	cpsid	i
 800b8da:	f383 8811 	msr	BASEPRI, r3
 800b8de:	f3bf 8f6f 	isb	sy
 800b8e2:	f3bf 8f4f 	dsb	sy
 800b8e6:	b662      	cpsie	i
 800b8e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b8ea:	bf00      	nop
 800b8ec:	e7fe      	b.n	800b8ec <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800b8ee:	f001 fe95 	bl	800d61c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8f2:	68fb      	ldr	r3, [r7, #12]
 800b8f4:	681a      	ldr	r2, [r3, #0]
 800b8f6:	68fb      	ldr	r3, [r7, #12]
 800b8f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8fa:	68f9      	ldr	r1, [r7, #12]
 800b8fc:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8fe:	fb01 f303 	mul.w	r3, r1, r3
 800b902:	441a      	add	r2, r3
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b908:	68fb      	ldr	r3, [r7, #12]
 800b90a:	2200      	movs	r2, #0
 800b90c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	681a      	ldr	r2, [r3, #0]
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b916:	68fb      	ldr	r3, [r7, #12]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	68fb      	ldr	r3, [r7, #12]
 800b91c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b91e:	3b01      	subs	r3, #1
 800b920:	68f9      	ldr	r1, [r7, #12]
 800b922:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b924:	fb01 f303 	mul.w	r3, r1, r3
 800b928:	441a      	add	r2, r3
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b92e:	68fb      	ldr	r3, [r7, #12]
 800b930:	22ff      	movs	r2, #255	; 0xff
 800b932:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	22ff      	movs	r2, #255	; 0xff
 800b93a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b93e:	683b      	ldr	r3, [r7, #0]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d114      	bne.n	800b96e <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b944:	68fb      	ldr	r3, [r7, #12]
 800b946:	691b      	ldr	r3, [r3, #16]
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d01a      	beq.n	800b982 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b94c:	68fb      	ldr	r3, [r7, #12]
 800b94e:	3310      	adds	r3, #16
 800b950:	4618      	mov	r0, r3
 800b952:	f001 f94d 	bl	800cbf0 <xTaskRemoveFromEventList>
 800b956:	4603      	mov	r3, r0
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d012      	beq.n	800b982 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b95c:	4b0c      	ldr	r3, [pc, #48]	; (800b990 <xQueueGenericReset+0xd0>)
 800b95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b962:	601a      	str	r2, [r3, #0]
 800b964:	f3bf 8f4f 	dsb	sy
 800b968:	f3bf 8f6f 	isb	sy
 800b96c:	e009      	b.n	800b982 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	3310      	adds	r3, #16
 800b972:	4618      	mov	r0, r3
 800b974:	f7ff feef 	bl	800b756 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	3324      	adds	r3, #36	; 0x24
 800b97c:	4618      	mov	r0, r3
 800b97e:	f7ff feea 	bl	800b756 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b982:	f001 fe7f 	bl	800d684 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b986:	2301      	movs	r3, #1
}
 800b988:	4618      	mov	r0, r3
 800b98a:	3710      	adds	r7, #16
 800b98c:	46bd      	mov	sp, r7
 800b98e:	bd80      	pop	{r7, pc}
 800b990:	e000ed04 	.word	0xe000ed04

0800b994 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b994:	b580      	push	{r7, lr}
 800b996:	b08e      	sub	sp, #56	; 0x38
 800b998:	af02      	add	r7, sp, #8
 800b99a:	60f8      	str	r0, [r7, #12]
 800b99c:	60b9      	str	r1, [r7, #8]
 800b99e:	607a      	str	r2, [r7, #4]
 800b9a0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b9a2:	68fb      	ldr	r3, [r7, #12]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d10c      	bne.n	800b9c2 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800b9a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9ac:	b672      	cpsid	i
 800b9ae:	f383 8811 	msr	BASEPRI, r3
 800b9b2:	f3bf 8f6f 	isb	sy
 800b9b6:	f3bf 8f4f 	dsb	sy
 800b9ba:	b662      	cpsie	i
 800b9bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b9be:	bf00      	nop
 800b9c0:	e7fe      	b.n	800b9c0 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b9c2:	683b      	ldr	r3, [r7, #0]
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d10c      	bne.n	800b9e2 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800b9c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9cc:	b672      	cpsid	i
 800b9ce:	f383 8811 	msr	BASEPRI, r3
 800b9d2:	f3bf 8f6f 	isb	sy
 800b9d6:	f3bf 8f4f 	dsb	sy
 800b9da:	b662      	cpsie	i
 800b9dc:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b9de:	bf00      	nop
 800b9e0:	e7fe      	b.n	800b9e0 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b9e2:	687b      	ldr	r3, [r7, #4]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d002      	beq.n	800b9ee <xQueueGenericCreateStatic+0x5a>
 800b9e8:	68bb      	ldr	r3, [r7, #8]
 800b9ea:	2b00      	cmp	r3, #0
 800b9ec:	d001      	beq.n	800b9f2 <xQueueGenericCreateStatic+0x5e>
 800b9ee:	2301      	movs	r3, #1
 800b9f0:	e000      	b.n	800b9f4 <xQueueGenericCreateStatic+0x60>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d10c      	bne.n	800ba12 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800b9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9fc:	b672      	cpsid	i
 800b9fe:	f383 8811 	msr	BASEPRI, r3
 800ba02:	f3bf 8f6f 	isb	sy
 800ba06:	f3bf 8f4f 	dsb	sy
 800ba0a:	b662      	cpsie	i
 800ba0c:	623b      	str	r3, [r7, #32]
}
 800ba0e:	bf00      	nop
 800ba10:	e7fe      	b.n	800ba10 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	d102      	bne.n	800ba1e <xQueueGenericCreateStatic+0x8a>
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d101      	bne.n	800ba22 <xQueueGenericCreateStatic+0x8e>
 800ba1e:	2301      	movs	r3, #1
 800ba20:	e000      	b.n	800ba24 <xQueueGenericCreateStatic+0x90>
 800ba22:	2300      	movs	r3, #0
 800ba24:	2b00      	cmp	r3, #0
 800ba26:	d10c      	bne.n	800ba42 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800ba28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba2c:	b672      	cpsid	i
 800ba2e:	f383 8811 	msr	BASEPRI, r3
 800ba32:	f3bf 8f6f 	isb	sy
 800ba36:	f3bf 8f4f 	dsb	sy
 800ba3a:	b662      	cpsie	i
 800ba3c:	61fb      	str	r3, [r7, #28]
}
 800ba3e:	bf00      	nop
 800ba40:	e7fe      	b.n	800ba40 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800ba42:	2348      	movs	r3, #72	; 0x48
 800ba44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800ba46:	697b      	ldr	r3, [r7, #20]
 800ba48:	2b48      	cmp	r3, #72	; 0x48
 800ba4a:	d00c      	beq.n	800ba66 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba50:	b672      	cpsid	i
 800ba52:	f383 8811 	msr	BASEPRI, r3
 800ba56:	f3bf 8f6f 	isb	sy
 800ba5a:	f3bf 8f4f 	dsb	sy
 800ba5e:	b662      	cpsie	i
 800ba60:	61bb      	str	r3, [r7, #24]
}
 800ba62:	bf00      	nop
 800ba64:	e7fe      	b.n	800ba64 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800ba66:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ba68:	683b      	ldr	r3, [r7, #0]
 800ba6a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800ba6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d00d      	beq.n	800ba8e <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800ba72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba74:	2201      	movs	r2, #1
 800ba76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba7a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	4613      	mov	r3, r2
 800ba84:	687a      	ldr	r2, [r7, #4]
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 f847 	bl	800bb1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3730      	adds	r7, #48	; 0x30
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b08a      	sub	sp, #40	; 0x28
 800ba9c:	af02      	add	r7, sp, #8
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	4613      	mov	r3, r2
 800baa4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10c      	bne.n	800bac6 <xQueueGenericCreate+0x2e>
	__asm volatile
 800baac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab0:	b672      	cpsid	i
 800bab2:	f383 8811 	msr	BASEPRI, r3
 800bab6:	f3bf 8f6f 	isb	sy
 800baba:	f3bf 8f4f 	dsb	sy
 800babe:	b662      	cpsie	i
 800bac0:	613b      	str	r3, [r7, #16]
}
 800bac2:	bf00      	nop
 800bac4:	e7fe      	b.n	800bac4 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	d102      	bne.n	800bad2 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800bacc:	2300      	movs	r3, #0
 800bace:	61fb      	str	r3, [r7, #28]
 800bad0:	e004      	b.n	800badc <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	68ba      	ldr	r2, [r7, #8]
 800bad6:	fb02 f303 	mul.w	r3, r2, r3
 800bada:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800badc:	69fb      	ldr	r3, [r7, #28]
 800bade:	3348      	adds	r3, #72	; 0x48
 800bae0:	4618      	mov	r0, r3
 800bae2:	f001 fe83 	bl	800d7ec <pvPortMalloc>
 800bae6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800bae8:	69bb      	ldr	r3, [r7, #24]
 800baea:	2b00      	cmp	r3, #0
 800baec:	d011      	beq.n	800bb12 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800baee:	69bb      	ldr	r3, [r7, #24]
 800baf0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800baf2:	697b      	ldr	r3, [r7, #20]
 800baf4:	3348      	adds	r3, #72	; 0x48
 800baf6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800baf8:	69bb      	ldr	r3, [r7, #24]
 800bafa:	2200      	movs	r2, #0
 800bafc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800bb00:	79fa      	ldrb	r2, [r7, #7]
 800bb02:	69bb      	ldr	r3, [r7, #24]
 800bb04:	9300      	str	r3, [sp, #0]
 800bb06:	4613      	mov	r3, r2
 800bb08:	697a      	ldr	r2, [r7, #20]
 800bb0a:	68b9      	ldr	r1, [r7, #8]
 800bb0c:	68f8      	ldr	r0, [r7, #12]
 800bb0e:	f000 f805 	bl	800bb1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800bb12:	69bb      	ldr	r3, [r7, #24]
	}
 800bb14:	4618      	mov	r0, r3
 800bb16:	3720      	adds	r7, #32
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	bd80      	pop	{r7, pc}

0800bb1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800bb1c:	b580      	push	{r7, lr}
 800bb1e:	b084      	sub	sp, #16
 800bb20:	af00      	add	r7, sp, #0
 800bb22:	60f8      	str	r0, [r7, #12]
 800bb24:	60b9      	str	r1, [r7, #8]
 800bb26:	607a      	str	r2, [r7, #4]
 800bb28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	2b00      	cmp	r3, #0
 800bb2e:	d103      	bne.n	800bb38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800bb30:	69bb      	ldr	r3, [r7, #24]
 800bb32:	69ba      	ldr	r2, [r7, #24]
 800bb34:	601a      	str	r2, [r3, #0]
 800bb36:	e002      	b.n	800bb3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bb38:	69bb      	ldr	r3, [r7, #24]
 800bb3a:	687a      	ldr	r2, [r7, #4]
 800bb3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800bb3e:	69bb      	ldr	r3, [r7, #24]
 800bb40:	68fa      	ldr	r2, [r7, #12]
 800bb42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	68ba      	ldr	r2, [r7, #8]
 800bb48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bb4a:	2101      	movs	r1, #1
 800bb4c:	69b8      	ldr	r0, [r7, #24]
 800bb4e:	f7ff feb7 	bl	800b8c0 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bb52:	bf00      	nop
 800bb54:	3710      	adds	r7, #16
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}

0800bb5a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bb5a:	b580      	push	{r7, lr}
 800bb5c:	b082      	sub	sp, #8
 800bb5e:	af00      	add	r7, sp, #0
 800bb60:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bb62:	687b      	ldr	r3, [r7, #4]
 800bb64:	2b00      	cmp	r3, #0
 800bb66:	d00e      	beq.n	800bb86 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	2200      	movs	r2, #0
 800bb6c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	2200      	movs	r2, #0
 800bb78:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bb7a:	2300      	movs	r3, #0
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	2100      	movs	r1, #0
 800bb80:	6878      	ldr	r0, [r7, #4]
 800bb82:	f000 f837 	bl	800bbf4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb86:	bf00      	nop
 800bb88:	3708      	adds	r7, #8
 800bb8a:	46bd      	mov	sp, r7
 800bb8c:	bd80      	pop	{r7, pc}

0800bb8e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb8e:	b580      	push	{r7, lr}
 800bb90:	b086      	sub	sp, #24
 800bb92:	af00      	add	r7, sp, #0
 800bb94:	4603      	mov	r3, r0
 800bb96:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb98:	2301      	movs	r3, #1
 800bb9a:	617b      	str	r3, [r7, #20]
 800bb9c:	2300      	movs	r3, #0
 800bb9e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bba0:	79fb      	ldrb	r3, [r7, #7]
 800bba2:	461a      	mov	r2, r3
 800bba4:	6939      	ldr	r1, [r7, #16]
 800bba6:	6978      	ldr	r0, [r7, #20]
 800bba8:	f7ff ff76 	bl	800ba98 <xQueueGenericCreate>
 800bbac:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbae:	68f8      	ldr	r0, [r7, #12]
 800bbb0:	f7ff ffd3 	bl	800bb5a <prvInitialiseMutex>

		return xNewQueue;
 800bbb4:	68fb      	ldr	r3, [r7, #12]
	}
 800bbb6:	4618      	mov	r0, r3
 800bbb8:	3718      	adds	r7, #24
 800bbba:	46bd      	mov	sp, r7
 800bbbc:	bd80      	pop	{r7, pc}

0800bbbe <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bbbe:	b580      	push	{r7, lr}
 800bbc0:	b088      	sub	sp, #32
 800bbc2:	af02      	add	r7, sp, #8
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	6039      	str	r1, [r7, #0]
 800bbc8:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bbca:	2301      	movs	r3, #1
 800bbcc:	617b      	str	r3, [r7, #20]
 800bbce:	2300      	movs	r3, #0
 800bbd0:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bbd2:	79fb      	ldrb	r3, [r7, #7]
 800bbd4:	9300      	str	r3, [sp, #0]
 800bbd6:	683b      	ldr	r3, [r7, #0]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	6939      	ldr	r1, [r7, #16]
 800bbdc:	6978      	ldr	r0, [r7, #20]
 800bbde:	f7ff fed9 	bl	800b994 <xQueueGenericCreateStatic>
 800bbe2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bbe4:	68f8      	ldr	r0, [r7, #12]
 800bbe6:	f7ff ffb8 	bl	800bb5a <prvInitialiseMutex>

		return xNewQueue;
 800bbea:	68fb      	ldr	r3, [r7, #12]
	}
 800bbec:	4618      	mov	r0, r3
 800bbee:	3718      	adds	r7, #24
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b08e      	sub	sp, #56	; 0x38
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	60f8      	str	r0, [r7, #12]
 800bbfc:	60b9      	str	r1, [r7, #8]
 800bbfe:	607a      	str	r2, [r7, #4]
 800bc00:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bc02:	2300      	movs	r3, #0
 800bc04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bc0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d10c      	bne.n	800bc2a <xQueueGenericSend+0x36>
	__asm volatile
 800bc10:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc14:	b672      	cpsid	i
 800bc16:	f383 8811 	msr	BASEPRI, r3
 800bc1a:	f3bf 8f6f 	isb	sy
 800bc1e:	f3bf 8f4f 	dsb	sy
 800bc22:	b662      	cpsie	i
 800bc24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bc26:	bf00      	nop
 800bc28:	e7fe      	b.n	800bc28 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bc2a:	68bb      	ldr	r3, [r7, #8]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	d103      	bne.n	800bc38 <xQueueGenericSend+0x44>
 800bc30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d101      	bne.n	800bc3c <xQueueGenericSend+0x48>
 800bc38:	2301      	movs	r3, #1
 800bc3a:	e000      	b.n	800bc3e <xQueueGenericSend+0x4a>
 800bc3c:	2300      	movs	r3, #0
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d10c      	bne.n	800bc5c <xQueueGenericSend+0x68>
	__asm volatile
 800bc42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc46:	b672      	cpsid	i
 800bc48:	f383 8811 	msr	BASEPRI, r3
 800bc4c:	f3bf 8f6f 	isb	sy
 800bc50:	f3bf 8f4f 	dsb	sy
 800bc54:	b662      	cpsie	i
 800bc56:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bc58:	bf00      	nop
 800bc5a:	e7fe      	b.n	800bc5a <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bc5c:	683b      	ldr	r3, [r7, #0]
 800bc5e:	2b02      	cmp	r3, #2
 800bc60:	d103      	bne.n	800bc6a <xQueueGenericSend+0x76>
 800bc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bc66:	2b01      	cmp	r3, #1
 800bc68:	d101      	bne.n	800bc6e <xQueueGenericSend+0x7a>
 800bc6a:	2301      	movs	r3, #1
 800bc6c:	e000      	b.n	800bc70 <xQueueGenericSend+0x7c>
 800bc6e:	2300      	movs	r3, #0
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	d10c      	bne.n	800bc8e <xQueueGenericSend+0x9a>
	__asm volatile
 800bc74:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc78:	b672      	cpsid	i
 800bc7a:	f383 8811 	msr	BASEPRI, r3
 800bc7e:	f3bf 8f6f 	isb	sy
 800bc82:	f3bf 8f4f 	dsb	sy
 800bc86:	b662      	cpsie	i
 800bc88:	623b      	str	r3, [r7, #32]
}
 800bc8a:	bf00      	nop
 800bc8c:	e7fe      	b.n	800bc8c <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bc8e:	f001 f975 	bl	800cf7c <xTaskGetSchedulerState>
 800bc92:	4603      	mov	r3, r0
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	d102      	bne.n	800bc9e <xQueueGenericSend+0xaa>
 800bc98:	687b      	ldr	r3, [r7, #4]
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d101      	bne.n	800bca2 <xQueueGenericSend+0xae>
 800bc9e:	2301      	movs	r3, #1
 800bca0:	e000      	b.n	800bca4 <xQueueGenericSend+0xb0>
 800bca2:	2300      	movs	r3, #0
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d10c      	bne.n	800bcc2 <xQueueGenericSend+0xce>
	__asm volatile
 800bca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcac:	b672      	cpsid	i
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	b662      	cpsie	i
 800bcbc:	61fb      	str	r3, [r7, #28]
}
 800bcbe:	bf00      	nop
 800bcc0:	e7fe      	b.n	800bcc0 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bcc2:	f001 fcab 	bl	800d61c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bcc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bcca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bccc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcce:	429a      	cmp	r2, r3
 800bcd0:	d302      	bcc.n	800bcd8 <xQueueGenericSend+0xe4>
 800bcd2:	683b      	ldr	r3, [r7, #0]
 800bcd4:	2b02      	cmp	r3, #2
 800bcd6:	d129      	bne.n	800bd2c <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bcd8:	683a      	ldr	r2, [r7, #0]
 800bcda:	68b9      	ldr	r1, [r7, #8]
 800bcdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bcde:	f000 f9bb 	bl	800c058 <prvCopyDataToQueue>
 800bce2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bce4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bce8:	2b00      	cmp	r3, #0
 800bcea:	d010      	beq.n	800bd0e <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bcec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bcee:	3324      	adds	r3, #36	; 0x24
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	f000 ff7d 	bl	800cbf0 <xTaskRemoveFromEventList>
 800bcf6:	4603      	mov	r3, r0
 800bcf8:	2b00      	cmp	r3, #0
 800bcfa:	d013      	beq.n	800bd24 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bcfc:	4b3f      	ldr	r3, [pc, #252]	; (800bdfc <xQueueGenericSend+0x208>)
 800bcfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd02:	601a      	str	r2, [r3, #0]
 800bd04:	f3bf 8f4f 	dsb	sy
 800bd08:	f3bf 8f6f 	isb	sy
 800bd0c:	e00a      	b.n	800bd24 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bd0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d007      	beq.n	800bd24 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bd14:	4b39      	ldr	r3, [pc, #228]	; (800bdfc <xQueueGenericSend+0x208>)
 800bd16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd1a:	601a      	str	r2, [r3, #0]
 800bd1c:	f3bf 8f4f 	dsb	sy
 800bd20:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bd24:	f001 fcae 	bl	800d684 <vPortExitCritical>
				return pdPASS;
 800bd28:	2301      	movs	r3, #1
 800bd2a:	e063      	b.n	800bdf4 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d103      	bne.n	800bd3a <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bd32:	f001 fca7 	bl	800d684 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bd36:	2300      	movs	r3, #0
 800bd38:	e05c      	b.n	800bdf4 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bd3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d106      	bne.n	800bd4e <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bd40:	f107 0314 	add.w	r3, r7, #20
 800bd44:	4618      	mov	r0, r3
 800bd46:	f000 ffb7 	bl	800ccb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bd4a:	2301      	movs	r3, #1
 800bd4c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bd4e:	f001 fc99 	bl	800d684 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bd52:	f000 fd2f 	bl	800c7b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bd56:	f001 fc61 	bl	800d61c <vPortEnterCritical>
 800bd5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bd60:	b25b      	sxtb	r3, r3
 800bd62:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd66:	d103      	bne.n	800bd70 <xQueueGenericSend+0x17c>
 800bd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd6a:	2200      	movs	r2, #0
 800bd6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bd70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bd76:	b25b      	sxtb	r3, r3
 800bd78:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd7c:	d103      	bne.n	800bd86 <xQueueGenericSend+0x192>
 800bd7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd80:	2200      	movs	r2, #0
 800bd82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bd86:	f001 fc7d 	bl	800d684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bd8a:	1d3a      	adds	r2, r7, #4
 800bd8c:	f107 0314 	add.w	r3, r7, #20
 800bd90:	4611      	mov	r1, r2
 800bd92:	4618      	mov	r0, r3
 800bd94:	f000 ffa6 	bl	800cce4 <xTaskCheckForTimeOut>
 800bd98:	4603      	mov	r3, r0
 800bd9a:	2b00      	cmp	r3, #0
 800bd9c:	d124      	bne.n	800bde8 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800bd9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bda0:	f000 fa2c 	bl	800c1fc <prvIsQueueFull>
 800bda4:	4603      	mov	r3, r0
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d018      	beq.n	800bddc <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bdac:	3310      	adds	r3, #16
 800bdae:	687a      	ldr	r2, [r7, #4]
 800bdb0:	4611      	mov	r1, r2
 800bdb2:	4618      	mov	r0, r3
 800bdb4:	f000 fef6 	bl	800cba4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bdb8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdba:	f000 f9b7 	bl	800c12c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800bdbe:	f000 fd07 	bl	800c7d0 <xTaskResumeAll>
 800bdc2:	4603      	mov	r3, r0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	f47f af7c 	bne.w	800bcc2 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800bdca:	4b0c      	ldr	r3, [pc, #48]	; (800bdfc <xQueueGenericSend+0x208>)
 800bdcc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	f3bf 8f4f 	dsb	sy
 800bdd6:	f3bf 8f6f 	isb	sy
 800bdda:	e772      	b.n	800bcc2 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bddc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdde:	f000 f9a5 	bl	800c12c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bde2:	f000 fcf5 	bl	800c7d0 <xTaskResumeAll>
 800bde6:	e76c      	b.n	800bcc2 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bde8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdea:	f000 f99f 	bl	800c12c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bdee:	f000 fcef 	bl	800c7d0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bdf2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bdf4:	4618      	mov	r0, r3
 800bdf6:	3738      	adds	r7, #56	; 0x38
 800bdf8:	46bd      	mov	sp, r7
 800bdfa:	bd80      	pop	{r7, pc}
 800bdfc:	e000ed04 	.word	0xe000ed04

0800be00 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	b08e      	sub	sp, #56	; 0x38
 800be04:	af00      	add	r7, sp, #0
 800be06:	6078      	str	r0, [r7, #4]
 800be08:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800be0a:	2300      	movs	r3, #0
 800be0c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800be12:	2300      	movs	r3, #0
 800be14:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800be16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be18:	2b00      	cmp	r3, #0
 800be1a:	d10c      	bne.n	800be36 <xQueueSemaphoreTake+0x36>
	__asm volatile
 800be1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be20:	b672      	cpsid	i
 800be22:	f383 8811 	msr	BASEPRI, r3
 800be26:	f3bf 8f6f 	isb	sy
 800be2a:	f3bf 8f4f 	dsb	sy
 800be2e:	b662      	cpsie	i
 800be30:	623b      	str	r3, [r7, #32]
}
 800be32:	bf00      	nop
 800be34:	e7fe      	b.n	800be34 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800be36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d00c      	beq.n	800be58 <xQueueSemaphoreTake+0x58>
	__asm volatile
 800be3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be42:	b672      	cpsid	i
 800be44:	f383 8811 	msr	BASEPRI, r3
 800be48:	f3bf 8f6f 	isb	sy
 800be4c:	f3bf 8f4f 	dsb	sy
 800be50:	b662      	cpsie	i
 800be52:	61fb      	str	r3, [r7, #28]
}
 800be54:	bf00      	nop
 800be56:	e7fe      	b.n	800be56 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800be58:	f001 f890 	bl	800cf7c <xTaskGetSchedulerState>
 800be5c:	4603      	mov	r3, r0
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d102      	bne.n	800be68 <xQueueSemaphoreTake+0x68>
 800be62:	683b      	ldr	r3, [r7, #0]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <xQueueSemaphoreTake+0x6c>
 800be68:	2301      	movs	r3, #1
 800be6a:	e000      	b.n	800be6e <xQueueSemaphoreTake+0x6e>
 800be6c:	2300      	movs	r3, #0
 800be6e:	2b00      	cmp	r3, #0
 800be70:	d10c      	bne.n	800be8c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800be72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be76:	b672      	cpsid	i
 800be78:	f383 8811 	msr	BASEPRI, r3
 800be7c:	f3bf 8f6f 	isb	sy
 800be80:	f3bf 8f4f 	dsb	sy
 800be84:	b662      	cpsie	i
 800be86:	61bb      	str	r3, [r7, #24]
}
 800be88:	bf00      	nop
 800be8a:	e7fe      	b.n	800be8a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800be8c:	f001 fbc6 	bl	800d61c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800be90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800be94:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800be96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be98:	2b00      	cmp	r3, #0
 800be9a:	d024      	beq.n	800bee6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800be9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be9e:	1e5a      	subs	r2, r3, #1
 800bea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bea4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d104      	bne.n	800beb6 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800beac:	f001 fa2c 	bl	800d308 <pvTaskIncrementMutexHeldCount>
 800beb0:	4602      	mov	r2, r0
 800beb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800beb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800beb8:	691b      	ldr	r3, [r3, #16]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d00f      	beq.n	800bede <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bec0:	3310      	adds	r3, #16
 800bec2:	4618      	mov	r0, r3
 800bec4:	f000 fe94 	bl	800cbf0 <xTaskRemoveFromEventList>
 800bec8:	4603      	mov	r3, r0
 800beca:	2b00      	cmp	r3, #0
 800becc:	d007      	beq.n	800bede <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800bece:	4b55      	ldr	r3, [pc, #340]	; (800c024 <xQueueSemaphoreTake+0x224>)
 800bed0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	f3bf 8f4f 	dsb	sy
 800beda:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800bede:	f001 fbd1 	bl	800d684 <vPortExitCritical>
				return pdPASS;
 800bee2:	2301      	movs	r3, #1
 800bee4:	e099      	b.n	800c01a <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bee6:	683b      	ldr	r3, [r7, #0]
 800bee8:	2b00      	cmp	r3, #0
 800beea:	d113      	bne.n	800bf14 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800beec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800beee:	2b00      	cmp	r3, #0
 800bef0:	d00c      	beq.n	800bf0c <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800bef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bef6:	b672      	cpsid	i
 800bef8:	f383 8811 	msr	BASEPRI, r3
 800befc:	f3bf 8f6f 	isb	sy
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	b662      	cpsie	i
 800bf06:	617b      	str	r3, [r7, #20]
}
 800bf08:	bf00      	nop
 800bf0a:	e7fe      	b.n	800bf0a <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800bf0c:	f001 fbba 	bl	800d684 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800bf10:	2300      	movs	r3, #0
 800bf12:	e082      	b.n	800c01a <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bf14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d106      	bne.n	800bf28 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bf1a:	f107 030c 	add.w	r3, r7, #12
 800bf1e:	4618      	mov	r0, r3
 800bf20:	f000 feca 	bl	800ccb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bf24:	2301      	movs	r3, #1
 800bf26:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800bf28:	f001 fbac 	bl	800d684 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800bf2c:	f000 fc42 	bl	800c7b4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800bf30:	f001 fb74 	bl	800d61c <vPortEnterCritical>
 800bf34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800bf3a:	b25b      	sxtb	r3, r3
 800bf3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf40:	d103      	bne.n	800bf4a <xQueueSemaphoreTake+0x14a>
 800bf42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf44:	2200      	movs	r2, #0
 800bf46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf4c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bf50:	b25b      	sxtb	r3, r3
 800bf52:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bf56:	d103      	bne.n	800bf60 <xQueueSemaphoreTake+0x160>
 800bf58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf5a:	2200      	movs	r2, #0
 800bf5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf60:	f001 fb90 	bl	800d684 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bf64:	463a      	mov	r2, r7
 800bf66:	f107 030c 	add.w	r3, r7, #12
 800bf6a:	4611      	mov	r1, r2
 800bf6c:	4618      	mov	r0, r3
 800bf6e:	f000 feb9 	bl	800cce4 <xTaskCheckForTimeOut>
 800bf72:	4603      	mov	r3, r0
 800bf74:	2b00      	cmp	r3, #0
 800bf76:	d132      	bne.n	800bfde <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bf78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bf7a:	f000 f929 	bl	800c1d0 <prvIsQueueEmpty>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d026      	beq.n	800bfd2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800bf84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf86:	681b      	ldr	r3, [r3, #0]
 800bf88:	2b00      	cmp	r3, #0
 800bf8a:	d109      	bne.n	800bfa0 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800bf8c:	f001 fb46 	bl	800d61c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800bf90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bf92:	689b      	ldr	r3, [r3, #8]
 800bf94:	4618      	mov	r0, r3
 800bf96:	f001 f80f 	bl	800cfb8 <xTaskPriorityInherit>
 800bf9a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800bf9c:	f001 fb72 	bl	800d684 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800bfa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfa2:	3324      	adds	r3, #36	; 0x24
 800bfa4:	683a      	ldr	r2, [r7, #0]
 800bfa6:	4611      	mov	r1, r2
 800bfa8:	4618      	mov	r0, r3
 800bfaa:	f000 fdfb 	bl	800cba4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800bfae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfb0:	f000 f8bc 	bl	800c12c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800bfb4:	f000 fc0c 	bl	800c7d0 <xTaskResumeAll>
 800bfb8:	4603      	mov	r3, r0
 800bfba:	2b00      	cmp	r3, #0
 800bfbc:	f47f af66 	bne.w	800be8c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800bfc0:	4b18      	ldr	r3, [pc, #96]	; (800c024 <xQueueSemaphoreTake+0x224>)
 800bfc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfc6:	601a      	str	r2, [r3, #0]
 800bfc8:	f3bf 8f4f 	dsb	sy
 800bfcc:	f3bf 8f6f 	isb	sy
 800bfd0:	e75c      	b.n	800be8c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800bfd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfd4:	f000 f8aa 	bl	800c12c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800bfd8:	f000 fbfa 	bl	800c7d0 <xTaskResumeAll>
 800bfdc:	e756      	b.n	800be8c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800bfde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfe0:	f000 f8a4 	bl	800c12c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bfe4:	f000 fbf4 	bl	800c7d0 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800bfe8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800bfea:	f000 f8f1 	bl	800c1d0 <prvIsQueueEmpty>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	f43f af4b 	beq.w	800be8c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800bff6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bff8:	2b00      	cmp	r3, #0
 800bffa:	d00d      	beq.n	800c018 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800bffc:	f001 fb0e 	bl	800d61c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c000:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c002:	f000 f811 	bl	800c028 <prvGetDisinheritPriorityAfterTimeout>
 800c006:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c008:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c00a:	689b      	ldr	r3, [r3, #8]
 800c00c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c00e:	4618      	mov	r0, r3
 800c010:	f001 f8dc 	bl	800d1cc <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c014:	f001 fb36 	bl	800d684 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c018:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c01a:	4618      	mov	r0, r3
 800c01c:	3738      	adds	r7, #56	; 0x38
 800c01e:	46bd      	mov	sp, r7
 800c020:	bd80      	pop	{r7, pc}
 800c022:	bf00      	nop
 800c024:	e000ed04 	.word	0xe000ed04

0800c028 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c028:	b480      	push	{r7}
 800c02a:	b085      	sub	sp, #20
 800c02c:	af00      	add	r7, sp, #0
 800c02e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c030:	687b      	ldr	r3, [r7, #4]
 800c032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	d006      	beq.n	800c046 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c038:	687b      	ldr	r3, [r7, #4]
 800c03a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f1c3 0307 	rsb	r3, r3, #7
 800c042:	60fb      	str	r3, [r7, #12]
 800c044:	e001      	b.n	800c04a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c046:	2300      	movs	r3, #0
 800c048:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c04a:	68fb      	ldr	r3, [r7, #12]
	}
 800c04c:	4618      	mov	r0, r3
 800c04e:	3714      	adds	r7, #20
 800c050:	46bd      	mov	sp, r7
 800c052:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c056:	4770      	bx	lr

0800c058 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c058:	b580      	push	{r7, lr}
 800c05a:	b086      	sub	sp, #24
 800c05c:	af00      	add	r7, sp, #0
 800c05e:	60f8      	str	r0, [r7, #12]
 800c060:	60b9      	str	r1, [r7, #8]
 800c062:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c064:	2300      	movs	r3, #0
 800c066:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c068:	68fb      	ldr	r3, [r7, #12]
 800c06a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c06c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c072:	2b00      	cmp	r3, #0
 800c074:	d10d      	bne.n	800c092 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d14d      	bne.n	800c11a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c07e:	68fb      	ldr	r3, [r7, #12]
 800c080:	689b      	ldr	r3, [r3, #8]
 800c082:	4618      	mov	r0, r3
 800c084:	f001 f818 	bl	800d0b8 <xTaskPriorityDisinherit>
 800c088:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	2200      	movs	r2, #0
 800c08e:	609a      	str	r2, [r3, #8]
 800c090:	e043      	b.n	800c11a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c092:	687b      	ldr	r3, [r7, #4]
 800c094:	2b00      	cmp	r3, #0
 800c096:	d119      	bne.n	800c0cc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c098:	68fb      	ldr	r3, [r7, #12]
 800c09a:	6858      	ldr	r0, [r3, #4]
 800c09c:	68fb      	ldr	r3, [r7, #12]
 800c09e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0a0:	461a      	mov	r2, r3
 800c0a2:	68b9      	ldr	r1, [r7, #8]
 800c0a4:	f001 fdb0 	bl	800dc08 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	68fb      	ldr	r3, [r7, #12]
 800c0ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0b0:	441a      	add	r2, r3
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	685a      	ldr	r2, [r3, #4]
 800c0ba:	68fb      	ldr	r3, [r7, #12]
 800c0bc:	689b      	ldr	r3, [r3, #8]
 800c0be:	429a      	cmp	r2, r3
 800c0c0:	d32b      	bcc.n	800c11a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	681a      	ldr	r2, [r3, #0]
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	605a      	str	r2, [r3, #4]
 800c0ca:	e026      	b.n	800c11a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c0cc:	68fb      	ldr	r3, [r7, #12]
 800c0ce:	68d8      	ldr	r0, [r3, #12]
 800c0d0:	68fb      	ldr	r3, [r7, #12]
 800c0d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0d4:	461a      	mov	r2, r3
 800c0d6:	68b9      	ldr	r1, [r7, #8]
 800c0d8:	f001 fd96 	bl	800dc08 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	68da      	ldr	r2, [r3, #12]
 800c0e0:	68fb      	ldr	r3, [r7, #12]
 800c0e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0e4:	425b      	negs	r3, r3
 800c0e6:	441a      	add	r2, r3
 800c0e8:	68fb      	ldr	r3, [r7, #12]
 800c0ea:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	68da      	ldr	r2, [r3, #12]
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	429a      	cmp	r2, r3
 800c0f6:	d207      	bcs.n	800c108 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c0f8:	68fb      	ldr	r3, [r7, #12]
 800c0fa:	689a      	ldr	r2, [r3, #8]
 800c0fc:	68fb      	ldr	r3, [r7, #12]
 800c0fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c100:	425b      	negs	r3, r3
 800c102:	441a      	add	r2, r3
 800c104:	68fb      	ldr	r3, [r7, #12]
 800c106:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c108:	687b      	ldr	r3, [r7, #4]
 800c10a:	2b02      	cmp	r3, #2
 800c10c:	d105      	bne.n	800c11a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c10e:	693b      	ldr	r3, [r7, #16]
 800c110:	2b00      	cmp	r3, #0
 800c112:	d002      	beq.n	800c11a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c114:	693b      	ldr	r3, [r7, #16]
 800c116:	3b01      	subs	r3, #1
 800c118:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c11a:	693b      	ldr	r3, [r7, #16]
 800c11c:	1c5a      	adds	r2, r3, #1
 800c11e:	68fb      	ldr	r3, [r7, #12]
 800c120:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c122:	697b      	ldr	r3, [r7, #20]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3718      	adds	r7, #24
 800c128:	46bd      	mov	sp, r7
 800c12a:	bd80      	pop	{r7, pc}

0800c12c <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c12c:	b580      	push	{r7, lr}
 800c12e:	b084      	sub	sp, #16
 800c130:	af00      	add	r7, sp, #0
 800c132:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c134:	f001 fa72 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c138:	687b      	ldr	r3, [r7, #4]
 800c13a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c13e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c140:	e011      	b.n	800c166 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c142:	687b      	ldr	r3, [r7, #4]
 800c144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c146:	2b00      	cmp	r3, #0
 800c148:	d012      	beq.n	800c170 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c14a:	687b      	ldr	r3, [r7, #4]
 800c14c:	3324      	adds	r3, #36	; 0x24
 800c14e:	4618      	mov	r0, r3
 800c150:	f000 fd4e 	bl	800cbf0 <xTaskRemoveFromEventList>
 800c154:	4603      	mov	r3, r0
 800c156:	2b00      	cmp	r3, #0
 800c158:	d001      	beq.n	800c15e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c15a:	f000 fe29 	bl	800cdb0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c15e:	7bfb      	ldrb	r3, [r7, #15]
 800c160:	3b01      	subs	r3, #1
 800c162:	b2db      	uxtb	r3, r3
 800c164:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c166:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dce9      	bgt.n	800c142 <prvUnlockQueue+0x16>
 800c16e:	e000      	b.n	800c172 <prvUnlockQueue+0x46>
					break;
 800c170:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	22ff      	movs	r2, #255	; 0xff
 800c176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c17a:	f001 fa83 	bl	800d684 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c17e:	f001 fa4d 	bl	800d61c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c188:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c18a:	e011      	b.n	800c1b0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c18c:	687b      	ldr	r3, [r7, #4]
 800c18e:	691b      	ldr	r3, [r3, #16]
 800c190:	2b00      	cmp	r3, #0
 800c192:	d012      	beq.n	800c1ba <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c194:	687b      	ldr	r3, [r7, #4]
 800c196:	3310      	adds	r3, #16
 800c198:	4618      	mov	r0, r3
 800c19a:	f000 fd29 	bl	800cbf0 <xTaskRemoveFromEventList>
 800c19e:	4603      	mov	r3, r0
 800c1a0:	2b00      	cmp	r3, #0
 800c1a2:	d001      	beq.n	800c1a8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c1a4:	f000 fe04 	bl	800cdb0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c1a8:	7bbb      	ldrb	r3, [r7, #14]
 800c1aa:	3b01      	subs	r3, #1
 800c1ac:	b2db      	uxtb	r3, r3
 800c1ae:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c1b0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c1b4:	2b00      	cmp	r3, #0
 800c1b6:	dce9      	bgt.n	800c18c <prvUnlockQueue+0x60>
 800c1b8:	e000      	b.n	800c1bc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c1ba:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	22ff      	movs	r2, #255	; 0xff
 800c1c0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c1c4:	f001 fa5e 	bl	800d684 <vPortExitCritical>
}
 800c1c8:	bf00      	nop
 800c1ca:	3710      	adds	r7, #16
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}

0800c1d0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c1d0:	b580      	push	{r7, lr}
 800c1d2:	b084      	sub	sp, #16
 800c1d4:	af00      	add	r7, sp, #0
 800c1d6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c1d8:	f001 fa20 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c1dc:	687b      	ldr	r3, [r7, #4]
 800c1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d102      	bne.n	800c1ea <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c1e4:	2301      	movs	r3, #1
 800c1e6:	60fb      	str	r3, [r7, #12]
 800c1e8:	e001      	b.n	800c1ee <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c1ee:	f001 fa49 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800c1f2:	68fb      	ldr	r3, [r7, #12]
}
 800c1f4:	4618      	mov	r0, r3
 800c1f6:	3710      	adds	r7, #16
 800c1f8:	46bd      	mov	sp, r7
 800c1fa:	bd80      	pop	{r7, pc}

0800c1fc <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c1fc:	b580      	push	{r7, lr}
 800c1fe:	b084      	sub	sp, #16
 800c200:	af00      	add	r7, sp, #0
 800c202:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c204:	f001 fa0a 	bl	800d61c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c208:	687b      	ldr	r3, [r7, #4]
 800c20a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c210:	429a      	cmp	r2, r3
 800c212:	d102      	bne.n	800c21a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c214:	2301      	movs	r3, #1
 800c216:	60fb      	str	r3, [r7, #12]
 800c218:	e001      	b.n	800c21e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c21a:	2300      	movs	r3, #0
 800c21c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c21e:	f001 fa31 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800c222:	68fb      	ldr	r3, [r7, #12]
}
 800c224:	4618      	mov	r0, r3
 800c226:	3710      	adds	r7, #16
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b08e      	sub	sp, #56	; 0x38
 800c230:	af04      	add	r7, sp, #16
 800c232:	60f8      	str	r0, [r7, #12]
 800c234:	60b9      	str	r1, [r7, #8]
 800c236:	607a      	str	r2, [r7, #4]
 800c238:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c23a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d10c      	bne.n	800c25a <xTaskCreateStatic+0x2e>
	__asm volatile
 800c240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c244:	b672      	cpsid	i
 800c246:	f383 8811 	msr	BASEPRI, r3
 800c24a:	f3bf 8f6f 	isb	sy
 800c24e:	f3bf 8f4f 	dsb	sy
 800c252:	b662      	cpsie	i
 800c254:	623b      	str	r3, [r7, #32]
}
 800c256:	bf00      	nop
 800c258:	e7fe      	b.n	800c258 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800c25a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d10c      	bne.n	800c27a <xTaskCreateStatic+0x4e>
	__asm volatile
 800c260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c264:	b672      	cpsid	i
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	b662      	cpsie	i
 800c274:	61fb      	str	r3, [r7, #28]
}
 800c276:	bf00      	nop
 800c278:	e7fe      	b.n	800c278 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c27a:	2358      	movs	r3, #88	; 0x58
 800c27c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c27e:	693b      	ldr	r3, [r7, #16]
 800c280:	2b58      	cmp	r3, #88	; 0x58
 800c282:	d00c      	beq.n	800c29e <xTaskCreateStatic+0x72>
	__asm volatile
 800c284:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c288:	b672      	cpsid	i
 800c28a:	f383 8811 	msr	BASEPRI, r3
 800c28e:	f3bf 8f6f 	isb	sy
 800c292:	f3bf 8f4f 	dsb	sy
 800c296:	b662      	cpsie	i
 800c298:	61bb      	str	r3, [r7, #24]
}
 800c29a:	bf00      	nop
 800c29c:	e7fe      	b.n	800c29c <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c29e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c2a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2a2:	2b00      	cmp	r3, #0
 800c2a4:	d01e      	beq.n	800c2e4 <xTaskCreateStatic+0xb8>
 800c2a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2a8:	2b00      	cmp	r3, #0
 800c2aa:	d01b      	beq.n	800c2e4 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c2ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c2ae:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c2b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2b4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c2b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2b8:	2202      	movs	r2, #2
 800c2ba:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c2be:	2300      	movs	r3, #0
 800c2c0:	9303      	str	r3, [sp, #12]
 800c2c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c2c4:	9302      	str	r3, [sp, #8]
 800c2c6:	f107 0314 	add.w	r3, r7, #20
 800c2ca:	9301      	str	r3, [sp, #4]
 800c2cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ce:	9300      	str	r3, [sp, #0]
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	687a      	ldr	r2, [r7, #4]
 800c2d4:	68b9      	ldr	r1, [r7, #8]
 800c2d6:	68f8      	ldr	r0, [r7, #12]
 800c2d8:	f000 f850 	bl	800c37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c2dc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c2de:	f000 f8e1 	bl	800c4a4 <prvAddNewTaskToReadyList>
 800c2e2:	e001      	b.n	800c2e8 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c2e8:	697b      	ldr	r3, [r7, #20]
	}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3728      	adds	r7, #40	; 0x28
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}

0800c2f2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c2f2:	b580      	push	{r7, lr}
 800c2f4:	b08c      	sub	sp, #48	; 0x30
 800c2f6:	af04      	add	r7, sp, #16
 800c2f8:	60f8      	str	r0, [r7, #12]
 800c2fa:	60b9      	str	r1, [r7, #8]
 800c2fc:	603b      	str	r3, [r7, #0]
 800c2fe:	4613      	mov	r3, r2
 800c300:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c302:	88fb      	ldrh	r3, [r7, #6]
 800c304:	009b      	lsls	r3, r3, #2
 800c306:	4618      	mov	r0, r3
 800c308:	f001 fa70 	bl	800d7ec <pvPortMalloc>
 800c30c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c30e:	697b      	ldr	r3, [r7, #20]
 800c310:	2b00      	cmp	r3, #0
 800c312:	d00e      	beq.n	800c332 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c314:	2058      	movs	r0, #88	; 0x58
 800c316:	f001 fa69 	bl	800d7ec <pvPortMalloc>
 800c31a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c31c:	69fb      	ldr	r3, [r7, #28]
 800c31e:	2b00      	cmp	r3, #0
 800c320:	d003      	beq.n	800c32a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c322:	69fb      	ldr	r3, [r7, #28]
 800c324:	697a      	ldr	r2, [r7, #20]
 800c326:	631a      	str	r2, [r3, #48]	; 0x30
 800c328:	e005      	b.n	800c336 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c32a:	6978      	ldr	r0, [r7, #20]
 800c32c:	f001 fb2e 	bl	800d98c <vPortFree>
 800c330:	e001      	b.n	800c336 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c332:	2300      	movs	r3, #0
 800c334:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c336:	69fb      	ldr	r3, [r7, #28]
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d017      	beq.n	800c36c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	2200      	movs	r2, #0
 800c340:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c344:	88fa      	ldrh	r2, [r7, #6]
 800c346:	2300      	movs	r3, #0
 800c348:	9303      	str	r3, [sp, #12]
 800c34a:	69fb      	ldr	r3, [r7, #28]
 800c34c:	9302      	str	r3, [sp, #8]
 800c34e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c350:	9301      	str	r3, [sp, #4]
 800c352:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c354:	9300      	str	r3, [sp, #0]
 800c356:	683b      	ldr	r3, [r7, #0]
 800c358:	68b9      	ldr	r1, [r7, #8]
 800c35a:	68f8      	ldr	r0, [r7, #12]
 800c35c:	f000 f80e 	bl	800c37c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c360:	69f8      	ldr	r0, [r7, #28]
 800c362:	f000 f89f 	bl	800c4a4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c366:	2301      	movs	r3, #1
 800c368:	61bb      	str	r3, [r7, #24]
 800c36a:	e002      	b.n	800c372 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c36c:	f04f 33ff 	mov.w	r3, #4294967295
 800c370:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c372:	69bb      	ldr	r3, [r7, #24]
	}
 800c374:	4618      	mov	r0, r3
 800c376:	3720      	adds	r7, #32
 800c378:	46bd      	mov	sp, r7
 800c37a:	bd80      	pop	{r7, pc}

0800c37c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c37c:	b580      	push	{r7, lr}
 800c37e:	b088      	sub	sp, #32
 800c380:	af00      	add	r7, sp, #0
 800c382:	60f8      	str	r0, [r7, #12]
 800c384:	60b9      	str	r1, [r7, #8]
 800c386:	607a      	str	r2, [r7, #4]
 800c388:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c38c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c38e:	687b      	ldr	r3, [r7, #4]
 800c390:	009b      	lsls	r3, r3, #2
 800c392:	461a      	mov	r2, r3
 800c394:	21a5      	movs	r1, #165	; 0xa5
 800c396:	f001 fc45 	bl	800dc24 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c39a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c39c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c39e:	6879      	ldr	r1, [r7, #4]
 800c3a0:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 800c3a4:	440b      	add	r3, r1
 800c3a6:	009b      	lsls	r3, r3, #2
 800c3a8:	4413      	add	r3, r2
 800c3aa:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c3ac:	69bb      	ldr	r3, [r7, #24]
 800c3ae:	f023 0307 	bic.w	r3, r3, #7
 800c3b2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c3b4:	69bb      	ldr	r3, [r7, #24]
 800c3b6:	f003 0307 	and.w	r3, r3, #7
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d00c      	beq.n	800c3d8 <prvInitialiseNewTask+0x5c>
	__asm volatile
 800c3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c3c2:	b672      	cpsid	i
 800c3c4:	f383 8811 	msr	BASEPRI, r3
 800c3c8:	f3bf 8f6f 	isb	sy
 800c3cc:	f3bf 8f4f 	dsb	sy
 800c3d0:	b662      	cpsie	i
 800c3d2:	617b      	str	r3, [r7, #20]
}
 800c3d4:	bf00      	nop
 800c3d6:	e7fe      	b.n	800c3d6 <prvInitialiseNewTask+0x5a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d01f      	beq.n	800c41e <prvInitialiseNewTask+0xa2>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c3de:	2300      	movs	r3, #0
 800c3e0:	61fb      	str	r3, [r7, #28]
 800c3e2:	e012      	b.n	800c40a <prvInitialiseNewTask+0x8e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c3e4:	68ba      	ldr	r2, [r7, #8]
 800c3e6:	69fb      	ldr	r3, [r7, #28]
 800c3e8:	4413      	add	r3, r2
 800c3ea:	7819      	ldrb	r1, [r3, #0]
 800c3ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c3ee:	69fb      	ldr	r3, [r7, #28]
 800c3f0:	4413      	add	r3, r2
 800c3f2:	3334      	adds	r3, #52	; 0x34
 800c3f4:	460a      	mov	r2, r1
 800c3f6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c3f8:	68ba      	ldr	r2, [r7, #8]
 800c3fa:	69fb      	ldr	r3, [r7, #28]
 800c3fc:	4413      	add	r3, r2
 800c3fe:	781b      	ldrb	r3, [r3, #0]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d006      	beq.n	800c412 <prvInitialiseNewTask+0x96>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c404:	69fb      	ldr	r3, [r7, #28]
 800c406:	3301      	adds	r3, #1
 800c408:	61fb      	str	r3, [r7, #28]
 800c40a:	69fb      	ldr	r3, [r7, #28]
 800c40c:	2b0f      	cmp	r3, #15
 800c40e:	d9e9      	bls.n	800c3e4 <prvInitialiseNewTask+0x68>
 800c410:	e000      	b.n	800c414 <prvInitialiseNewTask+0x98>
			{
				break;
 800c412:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c414:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c416:	2200      	movs	r2, #0
 800c418:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c41c:	e003      	b.n	800c426 <prvInitialiseNewTask+0xaa>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c41e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c420:	2200      	movs	r2, #0
 800c422:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c428:	2b06      	cmp	r3, #6
 800c42a:	d901      	bls.n	800c430 <prvInitialiseNewTask+0xb4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c42c:	2306      	movs	r3, #6
 800c42e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c432:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c434:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c43a:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800c43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c43e:	2200      	movs	r2, #0
 800c440:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c444:	3304      	adds	r3, #4
 800c446:	4618      	mov	r0, r3
 800c448:	f7ff f9a5 	bl	800b796 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c44e:	3318      	adds	r3, #24
 800c450:	4618      	mov	r0, r3
 800c452:	f7ff f9a0 	bl	800b796 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c45a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c45c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c45e:	f1c3 0207 	rsb	r2, r3, #7
 800c462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c464:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c466:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c468:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c46a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif /* portCRITICAL_NESTING_IN_TCB */

	#if ( configUSE_APPLICATION_TASK_TAG == 1 )
	{
		pxNewTCB->pxTaskTag = NULL;
 800c46c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c46e:	2200      	movs	r2, #0
 800c470:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c474:	2200      	movs	r2, #0
 800c476:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c478:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c47a:	2200      	movs	r2, #0
 800c47c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c480:	683a      	ldr	r2, [r7, #0]
 800c482:	68f9      	ldr	r1, [r7, #12]
 800c484:	69b8      	ldr	r0, [r7, #24]
 800c486:	f000 ffb9 	bl	800d3fc <pxPortInitialiseStack>
 800c48a:	4602      	mov	r2, r0
 800c48c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c48e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c490:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c492:	2b00      	cmp	r3, #0
 800c494:	d002      	beq.n	800c49c <prvInitialiseNewTask+0x120>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c496:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c498:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c49a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c49c:	bf00      	nop
 800c49e:	3720      	adds	r7, #32
 800c4a0:	46bd      	mov	sp, r7
 800c4a2:	bd80      	pop	{r7, pc}

0800c4a4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c4a4:	b580      	push	{r7, lr}
 800c4a6:	b082      	sub	sp, #8
 800c4a8:	af00      	add	r7, sp, #0
 800c4aa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c4ac:	f001 f8b6 	bl	800d61c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c4b0:	4b2a      	ldr	r3, [pc, #168]	; (800c55c <prvAddNewTaskToReadyList+0xb8>)
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	3301      	adds	r3, #1
 800c4b6:	4a29      	ldr	r2, [pc, #164]	; (800c55c <prvAddNewTaskToReadyList+0xb8>)
 800c4b8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c4ba:	4b29      	ldr	r3, [pc, #164]	; (800c560 <prvAddNewTaskToReadyList+0xbc>)
 800c4bc:	681b      	ldr	r3, [r3, #0]
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	d109      	bne.n	800c4d6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c4c2:	4a27      	ldr	r2, [pc, #156]	; (800c560 <prvAddNewTaskToReadyList+0xbc>)
 800c4c4:	687b      	ldr	r3, [r7, #4]
 800c4c6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c4c8:	4b24      	ldr	r3, [pc, #144]	; (800c55c <prvAddNewTaskToReadyList+0xb8>)
 800c4ca:	681b      	ldr	r3, [r3, #0]
 800c4cc:	2b01      	cmp	r3, #1
 800c4ce:	d110      	bne.n	800c4f2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c4d0:	f000 fc94 	bl	800cdfc <prvInitialiseTaskLists>
 800c4d4:	e00d      	b.n	800c4f2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c4d6:	4b23      	ldr	r3, [pc, #140]	; (800c564 <prvAddNewTaskToReadyList+0xc0>)
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	2b00      	cmp	r3, #0
 800c4dc:	d109      	bne.n	800c4f2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c4de:	4b20      	ldr	r3, [pc, #128]	; (800c560 <prvAddNewTaskToReadyList+0xbc>)
 800c4e0:	681b      	ldr	r3, [r3, #0]
 800c4e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c4e8:	429a      	cmp	r2, r3
 800c4ea:	d802      	bhi.n	800c4f2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c4ec:	4a1c      	ldr	r2, [pc, #112]	; (800c560 <prvAddNewTaskToReadyList+0xbc>)
 800c4ee:	687b      	ldr	r3, [r7, #4]
 800c4f0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c4f2:	4b1d      	ldr	r3, [pc, #116]	; (800c568 <prvAddNewTaskToReadyList+0xc4>)
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	3301      	adds	r3, #1
 800c4f8:	4a1b      	ldr	r2, [pc, #108]	; (800c568 <prvAddNewTaskToReadyList+0xc4>)
 800c4fa:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c4fc:	687b      	ldr	r3, [r7, #4]
 800c4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c500:	2201      	movs	r2, #1
 800c502:	409a      	lsls	r2, r3
 800c504:	4b19      	ldr	r3, [pc, #100]	; (800c56c <prvAddNewTaskToReadyList+0xc8>)
 800c506:	681b      	ldr	r3, [r3, #0]
 800c508:	4313      	orrs	r3, r2
 800c50a:	4a18      	ldr	r2, [pc, #96]	; (800c56c <prvAddNewTaskToReadyList+0xc8>)
 800c50c:	6013      	str	r3, [r2, #0]
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c512:	4613      	mov	r3, r2
 800c514:	009b      	lsls	r3, r3, #2
 800c516:	4413      	add	r3, r2
 800c518:	009b      	lsls	r3, r3, #2
 800c51a:	4a15      	ldr	r2, [pc, #84]	; (800c570 <prvAddNewTaskToReadyList+0xcc>)
 800c51c:	441a      	add	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	3304      	adds	r3, #4
 800c522:	4619      	mov	r1, r3
 800c524:	4610      	mov	r0, r2
 800c526:	f7ff f943 	bl	800b7b0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c52a:	f001 f8ab 	bl	800d684 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c52e:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <prvAddNewTaskToReadyList+0xc0>)
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	2b00      	cmp	r3, #0
 800c534:	d00e      	beq.n	800c554 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c536:	4b0a      	ldr	r3, [pc, #40]	; (800c560 <prvAddNewTaskToReadyList+0xbc>)
 800c538:	681b      	ldr	r3, [r3, #0]
 800c53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c540:	429a      	cmp	r2, r3
 800c542:	d207      	bcs.n	800c554 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c544:	4b0b      	ldr	r3, [pc, #44]	; (800c574 <prvAddNewTaskToReadyList+0xd0>)
 800c546:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c54a:	601a      	str	r2, [r3, #0]
 800c54c:	f3bf 8f4f 	dsb	sy
 800c550:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c554:	bf00      	nop
 800c556:	3708      	adds	r7, #8
 800c558:	46bd      	mov	sp, r7
 800c55a:	bd80      	pop	{r7, pc}
 800c55c:	2000059c 	.word	0x2000059c
 800c560:	2000049c 	.word	0x2000049c
 800c564:	200005a8 	.word	0x200005a8
 800c568:	200005b8 	.word	0x200005b8
 800c56c:	200005a4 	.word	0x200005a4
 800c570:	200004a0 	.word	0x200004a0
 800c574:	e000ed04 	.word	0xe000ed04

0800c578 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800c578:	b580      	push	{r7, lr}
 800c57a:	b08a      	sub	sp, #40	; 0x28
 800c57c:	af00      	add	r7, sp, #0
 800c57e:	6078      	str	r0, [r7, #4]
 800c580:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800c582:	2300      	movs	r3, #0
 800c584:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d10c      	bne.n	800c5a6 <vTaskDelayUntil+0x2e>
	__asm volatile
 800c58c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c590:	b672      	cpsid	i
 800c592:	f383 8811 	msr	BASEPRI, r3
 800c596:	f3bf 8f6f 	isb	sy
 800c59a:	f3bf 8f4f 	dsb	sy
 800c59e:	b662      	cpsie	i
 800c5a0:	617b      	str	r3, [r7, #20]
}
 800c5a2:	bf00      	nop
 800c5a4:	e7fe      	b.n	800c5a4 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 800c5a6:	683b      	ldr	r3, [r7, #0]
 800c5a8:	2b00      	cmp	r3, #0
 800c5aa:	d10c      	bne.n	800c5c6 <vTaskDelayUntil+0x4e>
	__asm volatile
 800c5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5b0:	b672      	cpsid	i
 800c5b2:	f383 8811 	msr	BASEPRI, r3
 800c5b6:	f3bf 8f6f 	isb	sy
 800c5ba:	f3bf 8f4f 	dsb	sy
 800c5be:	b662      	cpsie	i
 800c5c0:	613b      	str	r3, [r7, #16]
}
 800c5c2:	bf00      	nop
 800c5c4:	e7fe      	b.n	800c5c4 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 800c5c6:	4b2b      	ldr	r3, [pc, #172]	; (800c674 <vTaskDelayUntil+0xfc>)
 800c5c8:	681b      	ldr	r3, [r3, #0]
 800c5ca:	2b00      	cmp	r3, #0
 800c5cc:	d00c      	beq.n	800c5e8 <vTaskDelayUntil+0x70>
	__asm volatile
 800c5ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5d2:	b672      	cpsid	i
 800c5d4:	f383 8811 	msr	BASEPRI, r3
 800c5d8:	f3bf 8f6f 	isb	sy
 800c5dc:	f3bf 8f4f 	dsb	sy
 800c5e0:	b662      	cpsie	i
 800c5e2:	60fb      	str	r3, [r7, #12]
}
 800c5e4:	bf00      	nop
 800c5e6:	e7fe      	b.n	800c5e6 <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 800c5e8:	f000 f8e4 	bl	800c7b4 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800c5ec:	4b22      	ldr	r3, [pc, #136]	; (800c678 <vTaskDelayUntil+0x100>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	683a      	ldr	r2, [r7, #0]
 800c5f8:	4413      	add	r3, r2
 800c5fa:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800c5fc:	687b      	ldr	r3, [r7, #4]
 800c5fe:	681b      	ldr	r3, [r3, #0]
 800c600:	6a3a      	ldr	r2, [r7, #32]
 800c602:	429a      	cmp	r2, r3
 800c604:	d20b      	bcs.n	800c61e <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	681b      	ldr	r3, [r3, #0]
 800c60a:	69fa      	ldr	r2, [r7, #28]
 800c60c:	429a      	cmp	r2, r3
 800c60e:	d211      	bcs.n	800c634 <vTaskDelayUntil+0xbc>
 800c610:	69fa      	ldr	r2, [r7, #28]
 800c612:	6a3b      	ldr	r3, [r7, #32]
 800c614:	429a      	cmp	r2, r3
 800c616:	d90d      	bls.n	800c634 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c618:	2301      	movs	r3, #1
 800c61a:	627b      	str	r3, [r7, #36]	; 0x24
 800c61c:	e00a      	b.n	800c634 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800c61e:	687b      	ldr	r3, [r7, #4]
 800c620:	681b      	ldr	r3, [r3, #0]
 800c622:	69fa      	ldr	r2, [r7, #28]
 800c624:	429a      	cmp	r2, r3
 800c626:	d303      	bcc.n	800c630 <vTaskDelayUntil+0xb8>
 800c628:	69fa      	ldr	r2, [r7, #28]
 800c62a:	6a3b      	ldr	r3, [r7, #32]
 800c62c:	429a      	cmp	r2, r3
 800c62e:	d901      	bls.n	800c634 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 800c630:	2301      	movs	r3, #1
 800c632:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800c634:	687b      	ldr	r3, [r7, #4]
 800c636:	69fa      	ldr	r2, [r7, #28]
 800c638:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800c63a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d006      	beq.n	800c64e <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800c640:	69fa      	ldr	r2, [r7, #28]
 800c642:	6a3b      	ldr	r3, [r7, #32]
 800c644:	1ad3      	subs	r3, r2, r3
 800c646:	2100      	movs	r1, #0
 800c648:	4618      	mov	r0, r3
 800c64a:	f000 fe71 	bl	800d330 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800c64e:	f000 f8bf 	bl	800c7d0 <xTaskResumeAll>
 800c652:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c654:	69bb      	ldr	r3, [r7, #24]
 800c656:	2b00      	cmp	r3, #0
 800c658:	d107      	bne.n	800c66a <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 800c65a:	4b08      	ldr	r3, [pc, #32]	; (800c67c <vTaskDelayUntil+0x104>)
 800c65c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c660:	601a      	str	r2, [r3, #0]
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c66a:	bf00      	nop
 800c66c:	3728      	adds	r7, #40	; 0x28
 800c66e:	46bd      	mov	sp, r7
 800c670:	bd80      	pop	{r7, pc}
 800c672:	bf00      	nop
 800c674:	200005c4 	.word	0x200005c4
 800c678:	200005a0 	.word	0x200005a0
 800c67c:	e000ed04 	.word	0xe000ed04

0800c680 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c680:	b580      	push	{r7, lr}
 800c682:	b084      	sub	sp, #16
 800c684:	af00      	add	r7, sp, #0
 800c686:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c688:	2300      	movs	r3, #0
 800c68a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d019      	beq.n	800c6c6 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c692:	4b14      	ldr	r3, [pc, #80]	; (800c6e4 <vTaskDelay+0x64>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	2b00      	cmp	r3, #0
 800c698:	d00c      	beq.n	800c6b4 <vTaskDelay+0x34>
	__asm volatile
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	b672      	cpsid	i
 800c6a0:	f383 8811 	msr	BASEPRI, r3
 800c6a4:	f3bf 8f6f 	isb	sy
 800c6a8:	f3bf 8f4f 	dsb	sy
 800c6ac:	b662      	cpsie	i
 800c6ae:	60bb      	str	r3, [r7, #8]
}
 800c6b0:	bf00      	nop
 800c6b2:	e7fe      	b.n	800c6b2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 800c6b4:	f000 f87e 	bl	800c7b4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	6878      	ldr	r0, [r7, #4]
 800c6bc:	f000 fe38 	bl	800d330 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c6c0:	f000 f886 	bl	800c7d0 <xTaskResumeAll>
 800c6c4:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c6c6:	68fb      	ldr	r3, [r7, #12]
 800c6c8:	2b00      	cmp	r3, #0
 800c6ca:	d107      	bne.n	800c6dc <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 800c6cc:	4b06      	ldr	r3, [pc, #24]	; (800c6e8 <vTaskDelay+0x68>)
 800c6ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c6d2:	601a      	str	r2, [r3, #0]
 800c6d4:	f3bf 8f4f 	dsb	sy
 800c6d8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c6dc:	bf00      	nop
 800c6de:	3710      	adds	r7, #16
 800c6e0:	46bd      	mov	sp, r7
 800c6e2:	bd80      	pop	{r7, pc}
 800c6e4:	200005c4 	.word	0x200005c4
 800c6e8:	e000ed04 	.word	0xe000ed04

0800c6ec <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800c6ec:	b580      	push	{r7, lr}
 800c6ee:	b08a      	sub	sp, #40	; 0x28
 800c6f0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800c6fa:	463a      	mov	r2, r7
 800c6fc:	1d39      	adds	r1, r7, #4
 800c6fe:	f107 0308 	add.w	r3, r7, #8
 800c702:	4618      	mov	r0, r3
 800c704:	f7f3 ff1a 	bl	800053c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800c708:	6839      	ldr	r1, [r7, #0]
 800c70a:	687b      	ldr	r3, [r7, #4]
 800c70c:	68ba      	ldr	r2, [r7, #8]
 800c70e:	9202      	str	r2, [sp, #8]
 800c710:	9301      	str	r3, [sp, #4]
 800c712:	2300      	movs	r3, #0
 800c714:	9300      	str	r3, [sp, #0]
 800c716:	2300      	movs	r3, #0
 800c718:	460a      	mov	r2, r1
 800c71a:	4920      	ldr	r1, [pc, #128]	; (800c79c <vTaskStartScheduler+0xb0>)
 800c71c:	4820      	ldr	r0, [pc, #128]	; (800c7a0 <vTaskStartScheduler+0xb4>)
 800c71e:	f7ff fd85 	bl	800c22c <xTaskCreateStatic>
 800c722:	4603      	mov	r3, r0
 800c724:	4a1f      	ldr	r2, [pc, #124]	; (800c7a4 <vTaskStartScheduler+0xb8>)
 800c726:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800c728:	4b1e      	ldr	r3, [pc, #120]	; (800c7a4 <vTaskStartScheduler+0xb8>)
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d002      	beq.n	800c736 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800c730:	2301      	movs	r3, #1
 800c732:	617b      	str	r3, [r7, #20]
 800c734:	e001      	b.n	800c73a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800c736:	2300      	movs	r3, #0
 800c738:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800c73a:	697b      	ldr	r3, [r7, #20]
 800c73c:	2b01      	cmp	r3, #1
 800c73e:	d118      	bne.n	800c772 <vTaskStartScheduler+0x86>
	__asm volatile
 800c740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c744:	b672      	cpsid	i
 800c746:	f383 8811 	msr	BASEPRI, r3
 800c74a:	f3bf 8f6f 	isb	sy
 800c74e:	f3bf 8f4f 	dsb	sy
 800c752:	b662      	cpsie	i
 800c754:	613b      	str	r3, [r7, #16]
}
 800c756:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800c758:	4b13      	ldr	r3, [pc, #76]	; (800c7a8 <vTaskStartScheduler+0xbc>)
 800c75a:	f04f 32ff 	mov.w	r2, #4294967295
 800c75e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800c760:	4b12      	ldr	r3, [pc, #72]	; (800c7ac <vTaskStartScheduler+0xc0>)
 800c762:	2201      	movs	r2, #1
 800c764:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800c766:	4b12      	ldr	r3, [pc, #72]	; (800c7b0 <vTaskStartScheduler+0xc4>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800c76c:	f000 fed8 	bl	800d520 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800c770:	e010      	b.n	800c794 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800c772:	697b      	ldr	r3, [r7, #20]
 800c774:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c778:	d10c      	bne.n	800c794 <vTaskStartScheduler+0xa8>
	__asm volatile
 800c77a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77e:	b672      	cpsid	i
 800c780:	f383 8811 	msr	BASEPRI, r3
 800c784:	f3bf 8f6f 	isb	sy
 800c788:	f3bf 8f4f 	dsb	sy
 800c78c:	b662      	cpsie	i
 800c78e:	60fb      	str	r3, [r7, #12]
}
 800c790:	bf00      	nop
 800c792:	e7fe      	b.n	800c792 <vTaskStartScheduler+0xa6>
}
 800c794:	bf00      	nop
 800c796:	3718      	adds	r7, #24
 800c798:	46bd      	mov	sp, r7
 800c79a:	bd80      	pop	{r7, pc}
 800c79c:	0800dd10 	.word	0x0800dd10
 800c7a0:	0800cdc9 	.word	0x0800cdc9
 800c7a4:	200005c0 	.word	0x200005c0
 800c7a8:	200005bc 	.word	0x200005bc
 800c7ac:	200005a8 	.word	0x200005a8
 800c7b0:	200005a0 	.word	0x200005a0

0800c7b4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800c7b4:	b480      	push	{r7}
 800c7b6:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800c7b8:	4b04      	ldr	r3, [pc, #16]	; (800c7cc <vTaskSuspendAll+0x18>)
 800c7ba:	681b      	ldr	r3, [r3, #0]
 800c7bc:	3301      	adds	r3, #1
 800c7be:	4a03      	ldr	r2, [pc, #12]	; (800c7cc <vTaskSuspendAll+0x18>)
 800c7c0:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800c7c2:	bf00      	nop
 800c7c4:	46bd      	mov	sp, r7
 800c7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ca:	4770      	bx	lr
 800c7cc:	200005c4 	.word	0x200005c4

0800c7d0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800c7d0:	b580      	push	{r7, lr}
 800c7d2:	b084      	sub	sp, #16
 800c7d4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800c7d6:	2300      	movs	r3, #0
 800c7d8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800c7da:	2300      	movs	r3, #0
 800c7dc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800c7de:	4b42      	ldr	r3, [pc, #264]	; (800c8e8 <xTaskResumeAll+0x118>)
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d10c      	bne.n	800c800 <xTaskResumeAll+0x30>
	__asm volatile
 800c7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7ea:	b672      	cpsid	i
 800c7ec:	f383 8811 	msr	BASEPRI, r3
 800c7f0:	f3bf 8f6f 	isb	sy
 800c7f4:	f3bf 8f4f 	dsb	sy
 800c7f8:	b662      	cpsie	i
 800c7fa:	603b      	str	r3, [r7, #0]
}
 800c7fc:	bf00      	nop
 800c7fe:	e7fe      	b.n	800c7fe <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800c800:	f000 ff0c 	bl	800d61c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800c804:	4b38      	ldr	r3, [pc, #224]	; (800c8e8 <xTaskResumeAll+0x118>)
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	3b01      	subs	r3, #1
 800c80a:	4a37      	ldr	r2, [pc, #220]	; (800c8e8 <xTaskResumeAll+0x118>)
 800c80c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c80e:	4b36      	ldr	r3, [pc, #216]	; (800c8e8 <xTaskResumeAll+0x118>)
 800c810:	681b      	ldr	r3, [r3, #0]
 800c812:	2b00      	cmp	r3, #0
 800c814:	d161      	bne.n	800c8da <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800c816:	4b35      	ldr	r3, [pc, #212]	; (800c8ec <xTaskResumeAll+0x11c>)
 800c818:	681b      	ldr	r3, [r3, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d05d      	beq.n	800c8da <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c81e:	e02e      	b.n	800c87e <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c820:	4b33      	ldr	r3, [pc, #204]	; (800c8f0 <xTaskResumeAll+0x120>)
 800c822:	68db      	ldr	r3, [r3, #12]
 800c824:	68db      	ldr	r3, [r3, #12]
 800c826:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c828:	68fb      	ldr	r3, [r7, #12]
 800c82a:	3318      	adds	r3, #24
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7ff f81c 	bl	800b86a <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c832:	68fb      	ldr	r3, [r7, #12]
 800c834:	3304      	adds	r3, #4
 800c836:	4618      	mov	r0, r3
 800c838:	f7ff f817 	bl	800b86a <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800c83c:	68fb      	ldr	r3, [r7, #12]
 800c83e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c840:	2201      	movs	r2, #1
 800c842:	409a      	lsls	r2, r3
 800c844:	4b2b      	ldr	r3, [pc, #172]	; (800c8f4 <xTaskResumeAll+0x124>)
 800c846:	681b      	ldr	r3, [r3, #0]
 800c848:	4313      	orrs	r3, r2
 800c84a:	4a2a      	ldr	r2, [pc, #168]	; (800c8f4 <xTaskResumeAll+0x124>)
 800c84c:	6013      	str	r3, [r2, #0]
 800c84e:	68fb      	ldr	r3, [r7, #12]
 800c850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c852:	4613      	mov	r3, r2
 800c854:	009b      	lsls	r3, r3, #2
 800c856:	4413      	add	r3, r2
 800c858:	009b      	lsls	r3, r3, #2
 800c85a:	4a27      	ldr	r2, [pc, #156]	; (800c8f8 <xTaskResumeAll+0x128>)
 800c85c:	441a      	add	r2, r3
 800c85e:	68fb      	ldr	r3, [r7, #12]
 800c860:	3304      	adds	r3, #4
 800c862:	4619      	mov	r1, r3
 800c864:	4610      	mov	r0, r2
 800c866:	f7fe ffa3 	bl	800b7b0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800c86a:	68fb      	ldr	r3, [r7, #12]
 800c86c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c86e:	4b23      	ldr	r3, [pc, #140]	; (800c8fc <xTaskResumeAll+0x12c>)
 800c870:	681b      	ldr	r3, [r3, #0]
 800c872:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c874:	429a      	cmp	r2, r3
 800c876:	d302      	bcc.n	800c87e <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800c878:	4b21      	ldr	r3, [pc, #132]	; (800c900 <xTaskResumeAll+0x130>)
 800c87a:	2201      	movs	r2, #1
 800c87c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800c87e:	4b1c      	ldr	r3, [pc, #112]	; (800c8f0 <xTaskResumeAll+0x120>)
 800c880:	681b      	ldr	r3, [r3, #0]
 800c882:	2b00      	cmp	r3, #0
 800c884:	d1cc      	bne.n	800c820 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800c886:	68fb      	ldr	r3, [r7, #12]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d001      	beq.n	800c890 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800c88c:	f000 fb56 	bl	800cf3c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800c890:	4b1c      	ldr	r3, [pc, #112]	; (800c904 <xTaskResumeAll+0x134>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2b00      	cmp	r3, #0
 800c89a:	d010      	beq.n	800c8be <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800c89c:	f000 f846 	bl	800c92c <xTaskIncrementTick>
 800c8a0:	4603      	mov	r3, r0
 800c8a2:	2b00      	cmp	r3, #0
 800c8a4:	d002      	beq.n	800c8ac <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800c8a6:	4b16      	ldr	r3, [pc, #88]	; (800c900 <xTaskResumeAll+0x130>)
 800c8a8:	2201      	movs	r2, #1
 800c8aa:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800c8ac:	687b      	ldr	r3, [r7, #4]
 800c8ae:	3b01      	subs	r3, #1
 800c8b0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800c8b2:	687b      	ldr	r3, [r7, #4]
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d1f1      	bne.n	800c89c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 800c8b8:	4b12      	ldr	r3, [pc, #72]	; (800c904 <xTaskResumeAll+0x134>)
 800c8ba:	2200      	movs	r2, #0
 800c8bc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800c8be:	4b10      	ldr	r3, [pc, #64]	; (800c900 <xTaskResumeAll+0x130>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d009      	beq.n	800c8da <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800c8c6:	2301      	movs	r3, #1
 800c8c8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800c8ca:	4b0f      	ldr	r3, [pc, #60]	; (800c908 <xTaskResumeAll+0x138>)
 800c8cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8d0:	601a      	str	r2, [r3, #0]
 800c8d2:	f3bf 8f4f 	dsb	sy
 800c8d6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c8da:	f000 fed3 	bl	800d684 <vPortExitCritical>

	return xAlreadyYielded;
 800c8de:	68bb      	ldr	r3, [r7, #8]
}
 800c8e0:	4618      	mov	r0, r3
 800c8e2:	3710      	adds	r7, #16
 800c8e4:	46bd      	mov	sp, r7
 800c8e6:	bd80      	pop	{r7, pc}
 800c8e8:	200005c4 	.word	0x200005c4
 800c8ec:	2000059c 	.word	0x2000059c
 800c8f0:	2000055c 	.word	0x2000055c
 800c8f4:	200005a4 	.word	0x200005a4
 800c8f8:	200004a0 	.word	0x200004a0
 800c8fc:	2000049c 	.word	0x2000049c
 800c900:	200005b0 	.word	0x200005b0
 800c904:	200005ac 	.word	0x200005ac
 800c908:	e000ed04 	.word	0xe000ed04

0800c90c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800c90c:	b480      	push	{r7}
 800c90e:	b083      	sub	sp, #12
 800c910:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800c912:	4b05      	ldr	r3, [pc, #20]	; (800c928 <xTaskGetTickCount+0x1c>)
 800c914:	681b      	ldr	r3, [r3, #0]
 800c916:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800c918:	687b      	ldr	r3, [r7, #4]
}
 800c91a:	4618      	mov	r0, r3
 800c91c:	370c      	adds	r7, #12
 800c91e:	46bd      	mov	sp, r7
 800c920:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c924:	4770      	bx	lr
 800c926:	bf00      	nop
 800c928:	200005a0 	.word	0x200005a0

0800c92c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b086      	sub	sp, #24
 800c930:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800c932:	2300      	movs	r3, #0
 800c934:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c936:	4b4f      	ldr	r3, [pc, #316]	; (800ca74 <xTaskIncrementTick+0x148>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	f040 808a 	bne.w	800ca54 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800c940:	4b4d      	ldr	r3, [pc, #308]	; (800ca78 <xTaskIncrementTick+0x14c>)
 800c942:	681b      	ldr	r3, [r3, #0]
 800c944:	3301      	adds	r3, #1
 800c946:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800c948:	4a4b      	ldr	r2, [pc, #300]	; (800ca78 <xTaskIncrementTick+0x14c>)
 800c94a:	693b      	ldr	r3, [r7, #16]
 800c94c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800c94e:	693b      	ldr	r3, [r7, #16]
 800c950:	2b00      	cmp	r3, #0
 800c952:	d122      	bne.n	800c99a <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 800c954:	4b49      	ldr	r3, [pc, #292]	; (800ca7c <xTaskIncrementTick+0x150>)
 800c956:	681b      	ldr	r3, [r3, #0]
 800c958:	681b      	ldr	r3, [r3, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d00c      	beq.n	800c978 <xTaskIncrementTick+0x4c>
	__asm volatile
 800c95e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c962:	b672      	cpsid	i
 800c964:	f383 8811 	msr	BASEPRI, r3
 800c968:	f3bf 8f6f 	isb	sy
 800c96c:	f3bf 8f4f 	dsb	sy
 800c970:	b662      	cpsie	i
 800c972:	603b      	str	r3, [r7, #0]
}
 800c974:	bf00      	nop
 800c976:	e7fe      	b.n	800c976 <xTaskIncrementTick+0x4a>
 800c978:	4b40      	ldr	r3, [pc, #256]	; (800ca7c <xTaskIncrementTick+0x150>)
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	60fb      	str	r3, [r7, #12]
 800c97e:	4b40      	ldr	r3, [pc, #256]	; (800ca80 <xTaskIncrementTick+0x154>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4a3e      	ldr	r2, [pc, #248]	; (800ca7c <xTaskIncrementTick+0x150>)
 800c984:	6013      	str	r3, [r2, #0]
 800c986:	4a3e      	ldr	r2, [pc, #248]	; (800ca80 <xTaskIncrementTick+0x154>)
 800c988:	68fb      	ldr	r3, [r7, #12]
 800c98a:	6013      	str	r3, [r2, #0]
 800c98c:	4b3d      	ldr	r3, [pc, #244]	; (800ca84 <xTaskIncrementTick+0x158>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	3301      	adds	r3, #1
 800c992:	4a3c      	ldr	r2, [pc, #240]	; (800ca84 <xTaskIncrementTick+0x158>)
 800c994:	6013      	str	r3, [r2, #0]
 800c996:	f000 fad1 	bl	800cf3c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800c99a:	4b3b      	ldr	r3, [pc, #236]	; (800ca88 <xTaskIncrementTick+0x15c>)
 800c99c:	681b      	ldr	r3, [r3, #0]
 800c99e:	693a      	ldr	r2, [r7, #16]
 800c9a0:	429a      	cmp	r2, r3
 800c9a2:	d348      	bcc.n	800ca36 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800c9a4:	4b35      	ldr	r3, [pc, #212]	; (800ca7c <xTaskIncrementTick+0x150>)
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	681b      	ldr	r3, [r3, #0]
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d104      	bne.n	800c9b8 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c9ae:	4b36      	ldr	r3, [pc, #216]	; (800ca88 <xTaskIncrementTick+0x15c>)
 800c9b0:	f04f 32ff 	mov.w	r2, #4294967295
 800c9b4:	601a      	str	r2, [r3, #0]
					break;
 800c9b6:	e03e      	b.n	800ca36 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c9b8:	4b30      	ldr	r3, [pc, #192]	; (800ca7c <xTaskIncrementTick+0x150>)
 800c9ba:	681b      	ldr	r3, [r3, #0]
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	68db      	ldr	r3, [r3, #12]
 800c9c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800c9c2:	68bb      	ldr	r3, [r7, #8]
 800c9c4:	685b      	ldr	r3, [r3, #4]
 800c9c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800c9c8:	693a      	ldr	r2, [r7, #16]
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	429a      	cmp	r2, r3
 800c9ce:	d203      	bcs.n	800c9d8 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800c9d0:	4a2d      	ldr	r2, [pc, #180]	; (800ca88 <xTaskIncrementTick+0x15c>)
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800c9d6:	e02e      	b.n	800ca36 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800c9d8:	68bb      	ldr	r3, [r7, #8]
 800c9da:	3304      	adds	r3, #4
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fe ff44 	bl	800b86a <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800c9e2:	68bb      	ldr	r3, [r7, #8]
 800c9e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d004      	beq.n	800c9f4 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800c9ea:	68bb      	ldr	r3, [r7, #8]
 800c9ec:	3318      	adds	r3, #24
 800c9ee:	4618      	mov	r0, r3
 800c9f0:	f7fe ff3b 	bl	800b86a <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800c9f4:	68bb      	ldr	r3, [r7, #8]
 800c9f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	409a      	lsls	r2, r3
 800c9fc:	4b23      	ldr	r3, [pc, #140]	; (800ca8c <xTaskIncrementTick+0x160>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4313      	orrs	r3, r2
 800ca02:	4a22      	ldr	r2, [pc, #136]	; (800ca8c <xTaskIncrementTick+0x160>)
 800ca04:	6013      	str	r3, [r2, #0]
 800ca06:	68bb      	ldr	r3, [r7, #8]
 800ca08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca0a:	4613      	mov	r3, r2
 800ca0c:	009b      	lsls	r3, r3, #2
 800ca0e:	4413      	add	r3, r2
 800ca10:	009b      	lsls	r3, r3, #2
 800ca12:	4a1f      	ldr	r2, [pc, #124]	; (800ca90 <xTaskIncrementTick+0x164>)
 800ca14:	441a      	add	r2, r3
 800ca16:	68bb      	ldr	r3, [r7, #8]
 800ca18:	3304      	adds	r3, #4
 800ca1a:	4619      	mov	r1, r3
 800ca1c:	4610      	mov	r0, r2
 800ca1e:	f7fe fec7 	bl	800b7b0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ca22:	68bb      	ldr	r3, [r7, #8]
 800ca24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca26:	4b1b      	ldr	r3, [pc, #108]	; (800ca94 <xTaskIncrementTick+0x168>)
 800ca28:	681b      	ldr	r3, [r3, #0]
 800ca2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ca2c:	429a      	cmp	r2, r3
 800ca2e:	d3b9      	bcc.n	800c9a4 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 800ca30:	2301      	movs	r3, #1
 800ca32:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ca34:	e7b6      	b.n	800c9a4 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ca36:	4b17      	ldr	r3, [pc, #92]	; (800ca94 <xTaskIncrementTick+0x168>)
 800ca38:	681b      	ldr	r3, [r3, #0]
 800ca3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ca3c:	4914      	ldr	r1, [pc, #80]	; (800ca90 <xTaskIncrementTick+0x164>)
 800ca3e:	4613      	mov	r3, r2
 800ca40:	009b      	lsls	r3, r3, #2
 800ca42:	4413      	add	r3, r2
 800ca44:	009b      	lsls	r3, r3, #2
 800ca46:	440b      	add	r3, r1
 800ca48:	681b      	ldr	r3, [r3, #0]
 800ca4a:	2b01      	cmp	r3, #1
 800ca4c:	d907      	bls.n	800ca5e <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 800ca4e:	2301      	movs	r3, #1
 800ca50:	617b      	str	r3, [r7, #20]
 800ca52:	e004      	b.n	800ca5e <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800ca54:	4b10      	ldr	r3, [pc, #64]	; (800ca98 <xTaskIncrementTick+0x16c>)
 800ca56:	681b      	ldr	r3, [r3, #0]
 800ca58:	3301      	adds	r3, #1
 800ca5a:	4a0f      	ldr	r2, [pc, #60]	; (800ca98 <xTaskIncrementTick+0x16c>)
 800ca5c:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800ca5e:	4b0f      	ldr	r3, [pc, #60]	; (800ca9c <xTaskIncrementTick+0x170>)
 800ca60:	681b      	ldr	r3, [r3, #0]
 800ca62:	2b00      	cmp	r3, #0
 800ca64:	d001      	beq.n	800ca6a <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 800ca66:	2301      	movs	r3, #1
 800ca68:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800ca6a:	697b      	ldr	r3, [r7, #20]
}
 800ca6c:	4618      	mov	r0, r3
 800ca6e:	3718      	adds	r7, #24
 800ca70:	46bd      	mov	sp, r7
 800ca72:	bd80      	pop	{r7, pc}
 800ca74:	200005c4 	.word	0x200005c4
 800ca78:	200005a0 	.word	0x200005a0
 800ca7c:	20000554 	.word	0x20000554
 800ca80:	20000558 	.word	0x20000558
 800ca84:	200005b4 	.word	0x200005b4
 800ca88:	200005bc 	.word	0x200005bc
 800ca8c:	200005a4 	.word	0x200005a4
 800ca90:	200004a0 	.word	0x200004a0
 800ca94:	2000049c 	.word	0x2000049c
 800ca98:	200005ac 	.word	0x200005ac
 800ca9c:	200005b0 	.word	0x200005b0

0800caa0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800caa0:	b580      	push	{r7, lr}
 800caa2:	b088      	sub	sp, #32
 800caa4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800caa6:	4b3a      	ldr	r3, [pc, #232]	; (800cb90 <vTaskSwitchContext+0xf0>)
 800caa8:	681b      	ldr	r3, [r3, #0]
 800caaa:	2b00      	cmp	r3, #0
 800caac:	d003      	beq.n	800cab6 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800caae:	4b39      	ldr	r3, [pc, #228]	; (800cb94 <vTaskSwitchContext+0xf4>)
 800cab0:	2201      	movs	r2, #1
 800cab2:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cab4:	e068      	b.n	800cb88 <vTaskSwitchContext+0xe8>
		xYieldPending = pdFALSE;
 800cab6:	4b37      	ldr	r3, [pc, #220]	; (800cb94 <vTaskSwitchContext+0xf4>)
 800cab8:	2200      	movs	r2, #0
 800caba:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 800cabc:	4b36      	ldr	r3, [pc, #216]	; (800cb98 <vTaskSwitchContext+0xf8>)
 800cabe:	681b      	ldr	r3, [r3, #0]
 800cac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cac2:	61fb      	str	r3, [r7, #28]
 800cac4:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 800cac8:	61bb      	str	r3, [r7, #24]
 800caca:	69fb      	ldr	r3, [r7, #28]
 800cacc:	681b      	ldr	r3, [r3, #0]
 800cace:	69ba      	ldr	r2, [r7, #24]
 800cad0:	429a      	cmp	r2, r3
 800cad2:	d111      	bne.n	800caf8 <vTaskSwitchContext+0x58>
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	3304      	adds	r3, #4
 800cad8:	681b      	ldr	r3, [r3, #0]
 800cada:	69ba      	ldr	r2, [r7, #24]
 800cadc:	429a      	cmp	r2, r3
 800cade:	d10b      	bne.n	800caf8 <vTaskSwitchContext+0x58>
 800cae0:	69fb      	ldr	r3, [r7, #28]
 800cae2:	3308      	adds	r3, #8
 800cae4:	681b      	ldr	r3, [r3, #0]
 800cae6:	69ba      	ldr	r2, [r7, #24]
 800cae8:	429a      	cmp	r2, r3
 800caea:	d105      	bne.n	800caf8 <vTaskSwitchContext+0x58>
 800caec:	69fb      	ldr	r3, [r7, #28]
 800caee:	330c      	adds	r3, #12
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	69ba      	ldr	r2, [r7, #24]
 800caf4:	429a      	cmp	r2, r3
 800caf6:	d008      	beq.n	800cb0a <vTaskSwitchContext+0x6a>
 800caf8:	4b27      	ldr	r3, [pc, #156]	; (800cb98 <vTaskSwitchContext+0xf8>)
 800cafa:	681a      	ldr	r2, [r3, #0]
 800cafc:	4b26      	ldr	r3, [pc, #152]	; (800cb98 <vTaskSwitchContext+0xf8>)
 800cafe:	681b      	ldr	r3, [r3, #0]
 800cb00:	3334      	adds	r3, #52	; 0x34
 800cb02:	4619      	mov	r1, r3
 800cb04:	4610      	mov	r0, r2
 800cb06:	f7f3 fd06 	bl	8000516 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb0a:	4b24      	ldr	r3, [pc, #144]	; (800cb9c <vTaskSwitchContext+0xfc>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800cb10:	68fb      	ldr	r3, [r7, #12]
 800cb12:	fab3 f383 	clz	r3, r3
 800cb16:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800cb18:	7afb      	ldrb	r3, [r7, #11]
 800cb1a:	f1c3 031f 	rsb	r3, r3, #31
 800cb1e:	617b      	str	r3, [r7, #20]
 800cb20:	491f      	ldr	r1, [pc, #124]	; (800cba0 <vTaskSwitchContext+0x100>)
 800cb22:	697a      	ldr	r2, [r7, #20]
 800cb24:	4613      	mov	r3, r2
 800cb26:	009b      	lsls	r3, r3, #2
 800cb28:	4413      	add	r3, r2
 800cb2a:	009b      	lsls	r3, r3, #2
 800cb2c:	440b      	add	r3, r1
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10c      	bne.n	800cb4e <vTaskSwitchContext+0xae>
	__asm volatile
 800cb34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb38:	b672      	cpsid	i
 800cb3a:	f383 8811 	msr	BASEPRI, r3
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f3bf 8f4f 	dsb	sy
 800cb46:	b662      	cpsie	i
 800cb48:	607b      	str	r3, [r7, #4]
}
 800cb4a:	bf00      	nop
 800cb4c:	e7fe      	b.n	800cb4c <vTaskSwitchContext+0xac>
 800cb4e:	697a      	ldr	r2, [r7, #20]
 800cb50:	4613      	mov	r3, r2
 800cb52:	009b      	lsls	r3, r3, #2
 800cb54:	4413      	add	r3, r2
 800cb56:	009b      	lsls	r3, r3, #2
 800cb58:	4a11      	ldr	r2, [pc, #68]	; (800cba0 <vTaskSwitchContext+0x100>)
 800cb5a:	4413      	add	r3, r2
 800cb5c:	613b      	str	r3, [r7, #16]
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	685b      	ldr	r3, [r3, #4]
 800cb62:	685a      	ldr	r2, [r3, #4]
 800cb64:	693b      	ldr	r3, [r7, #16]
 800cb66:	605a      	str	r2, [r3, #4]
 800cb68:	693b      	ldr	r3, [r7, #16]
 800cb6a:	685a      	ldr	r2, [r3, #4]
 800cb6c:	693b      	ldr	r3, [r7, #16]
 800cb6e:	3308      	adds	r3, #8
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d104      	bne.n	800cb7e <vTaskSwitchContext+0xde>
 800cb74:	693b      	ldr	r3, [r7, #16]
 800cb76:	685b      	ldr	r3, [r3, #4]
 800cb78:	685a      	ldr	r2, [r3, #4]
 800cb7a:	693b      	ldr	r3, [r7, #16]
 800cb7c:	605a      	str	r2, [r3, #4]
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	685b      	ldr	r3, [r3, #4]
 800cb82:	68db      	ldr	r3, [r3, #12]
 800cb84:	4a04      	ldr	r2, [pc, #16]	; (800cb98 <vTaskSwitchContext+0xf8>)
 800cb86:	6013      	str	r3, [r2, #0]
}
 800cb88:	bf00      	nop
 800cb8a:	3720      	adds	r7, #32
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	200005c4 	.word	0x200005c4
 800cb94:	200005b0 	.word	0x200005b0
 800cb98:	2000049c 	.word	0x2000049c
 800cb9c:	200005a4 	.word	0x200005a4
 800cba0:	200004a0 	.word	0x200004a0

0800cba4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800cba4:	b580      	push	{r7, lr}
 800cba6:	b084      	sub	sp, #16
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
 800cbac:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d10c      	bne.n	800cbce <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 800cbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb8:	b672      	cpsid	i
 800cbba:	f383 8811 	msr	BASEPRI, r3
 800cbbe:	f3bf 8f6f 	isb	sy
 800cbc2:	f3bf 8f4f 	dsb	sy
 800cbc6:	b662      	cpsie	i
 800cbc8:	60fb      	str	r3, [r7, #12]
}
 800cbca:	bf00      	nop
 800cbcc:	e7fe      	b.n	800cbcc <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cbce:	4b07      	ldr	r3, [pc, #28]	; (800cbec <vTaskPlaceOnEventList+0x48>)
 800cbd0:	681b      	ldr	r3, [r3, #0]
 800cbd2:	3318      	adds	r3, #24
 800cbd4:	4619      	mov	r1, r3
 800cbd6:	6878      	ldr	r0, [r7, #4]
 800cbd8:	f7fe fe0e 	bl	800b7f8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cbdc:	2101      	movs	r1, #1
 800cbde:	6838      	ldr	r0, [r7, #0]
 800cbe0:	f000 fba6 	bl	800d330 <prvAddCurrentTaskToDelayedList>
}
 800cbe4:	bf00      	nop
 800cbe6:	3710      	adds	r7, #16
 800cbe8:	46bd      	mov	sp, r7
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	2000049c 	.word	0x2000049c

0800cbf0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b086      	sub	sp, #24
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	68db      	ldr	r3, [r3, #12]
 800cbfc:	68db      	ldr	r3, [r3, #12]
 800cbfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cc00:	693b      	ldr	r3, [r7, #16]
 800cc02:	2b00      	cmp	r3, #0
 800cc04:	d10c      	bne.n	800cc20 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 800cc06:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc0a:	b672      	cpsid	i
 800cc0c:	f383 8811 	msr	BASEPRI, r3
 800cc10:	f3bf 8f6f 	isb	sy
 800cc14:	f3bf 8f4f 	dsb	sy
 800cc18:	b662      	cpsie	i
 800cc1a:	60fb      	str	r3, [r7, #12]
}
 800cc1c:	bf00      	nop
 800cc1e:	e7fe      	b.n	800cc1e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cc20:	693b      	ldr	r3, [r7, #16]
 800cc22:	3318      	adds	r3, #24
 800cc24:	4618      	mov	r0, r3
 800cc26:	f7fe fe20 	bl	800b86a <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc2a:	4b1d      	ldr	r3, [pc, #116]	; (800cca0 <xTaskRemoveFromEventList+0xb0>)
 800cc2c:	681b      	ldr	r3, [r3, #0]
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d11c      	bne.n	800cc6c <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cc32:	693b      	ldr	r3, [r7, #16]
 800cc34:	3304      	adds	r3, #4
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7fe fe17 	bl	800b86a <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cc3c:	693b      	ldr	r3, [r7, #16]
 800cc3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc40:	2201      	movs	r2, #1
 800cc42:	409a      	lsls	r2, r3
 800cc44:	4b17      	ldr	r3, [pc, #92]	; (800cca4 <xTaskRemoveFromEventList+0xb4>)
 800cc46:	681b      	ldr	r3, [r3, #0]
 800cc48:	4313      	orrs	r3, r2
 800cc4a:	4a16      	ldr	r2, [pc, #88]	; (800cca4 <xTaskRemoveFromEventList+0xb4>)
 800cc4c:	6013      	str	r3, [r2, #0]
 800cc4e:	693b      	ldr	r3, [r7, #16]
 800cc50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc52:	4613      	mov	r3, r2
 800cc54:	009b      	lsls	r3, r3, #2
 800cc56:	4413      	add	r3, r2
 800cc58:	009b      	lsls	r3, r3, #2
 800cc5a:	4a13      	ldr	r2, [pc, #76]	; (800cca8 <xTaskRemoveFromEventList+0xb8>)
 800cc5c:	441a      	add	r2, r3
 800cc5e:	693b      	ldr	r3, [r7, #16]
 800cc60:	3304      	adds	r3, #4
 800cc62:	4619      	mov	r1, r3
 800cc64:	4610      	mov	r0, r2
 800cc66:	f7fe fda3 	bl	800b7b0 <vListInsertEnd>
 800cc6a:	e005      	b.n	800cc78 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cc6c:	693b      	ldr	r3, [r7, #16]
 800cc6e:	3318      	adds	r3, #24
 800cc70:	4619      	mov	r1, r3
 800cc72:	480e      	ldr	r0, [pc, #56]	; (800ccac <xTaskRemoveFromEventList+0xbc>)
 800cc74:	f7fe fd9c 	bl	800b7b0 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cc78:	693b      	ldr	r3, [r7, #16]
 800cc7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cc7c:	4b0c      	ldr	r3, [pc, #48]	; (800ccb0 <xTaskRemoveFromEventList+0xc0>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc82:	429a      	cmp	r2, r3
 800cc84:	d905      	bls.n	800cc92 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cc86:	2301      	movs	r3, #1
 800cc88:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cc8a:	4b0a      	ldr	r3, [pc, #40]	; (800ccb4 <xTaskRemoveFromEventList+0xc4>)
 800cc8c:	2201      	movs	r2, #1
 800cc8e:	601a      	str	r2, [r3, #0]
 800cc90:	e001      	b.n	800cc96 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800cc92:	2300      	movs	r3, #0
 800cc94:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cc96:	697b      	ldr	r3, [r7, #20]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3718      	adds	r7, #24
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}
 800cca0:	200005c4 	.word	0x200005c4
 800cca4:	200005a4 	.word	0x200005a4
 800cca8:	200004a0 	.word	0x200004a0
 800ccac:	2000055c 	.word	0x2000055c
 800ccb0:	2000049c 	.word	0x2000049c
 800ccb4:	200005b0 	.word	0x200005b0

0800ccb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800ccb8:	b480      	push	{r7}
 800ccba:	b083      	sub	sp, #12
 800ccbc:	af00      	add	r7, sp, #0
 800ccbe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800ccc0:	4b06      	ldr	r3, [pc, #24]	; (800ccdc <vTaskInternalSetTimeOutState+0x24>)
 800ccc2:	681a      	ldr	r2, [r3, #0]
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ccc8:	4b05      	ldr	r3, [pc, #20]	; (800cce0 <vTaskInternalSetTimeOutState+0x28>)
 800ccca:	681a      	ldr	r2, [r3, #0]
 800cccc:	687b      	ldr	r3, [r7, #4]
 800ccce:	605a      	str	r2, [r3, #4]
}
 800ccd0:	bf00      	nop
 800ccd2:	370c      	adds	r7, #12
 800ccd4:	46bd      	mov	sp, r7
 800ccd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ccda:	4770      	bx	lr
 800ccdc:	200005b4 	.word	0x200005b4
 800cce0:	200005a0 	.word	0x200005a0

0800cce4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800cce4:	b580      	push	{r7, lr}
 800cce6:	b088      	sub	sp, #32
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]
 800ccec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d10c      	bne.n	800cd0e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 800ccf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccf8:	b672      	cpsid	i
 800ccfa:	f383 8811 	msr	BASEPRI, r3
 800ccfe:	f3bf 8f6f 	isb	sy
 800cd02:	f3bf 8f4f 	dsb	sy
 800cd06:	b662      	cpsie	i
 800cd08:	613b      	str	r3, [r7, #16]
}
 800cd0a:	bf00      	nop
 800cd0c:	e7fe      	b.n	800cd0c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800cd0e:	683b      	ldr	r3, [r7, #0]
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d10c      	bne.n	800cd2e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 800cd14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd18:	b672      	cpsid	i
 800cd1a:	f383 8811 	msr	BASEPRI, r3
 800cd1e:	f3bf 8f6f 	isb	sy
 800cd22:	f3bf 8f4f 	dsb	sy
 800cd26:	b662      	cpsie	i
 800cd28:	60fb      	str	r3, [r7, #12]
}
 800cd2a:	bf00      	nop
 800cd2c:	e7fe      	b.n	800cd2c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800cd2e:	f000 fc75 	bl	800d61c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800cd32:	4b1d      	ldr	r3, [pc, #116]	; (800cda8 <xTaskCheckForTimeOut+0xc4>)
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	685b      	ldr	r3, [r3, #4]
 800cd3c:	69ba      	ldr	r2, [r7, #24]
 800cd3e:	1ad3      	subs	r3, r2, r3
 800cd40:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800cd42:	683b      	ldr	r3, [r7, #0]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd4a:	d102      	bne.n	800cd52 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800cd4c:	2300      	movs	r3, #0
 800cd4e:	61fb      	str	r3, [r7, #28]
 800cd50:	e023      	b.n	800cd9a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800cd52:	687b      	ldr	r3, [r7, #4]
 800cd54:	681a      	ldr	r2, [r3, #0]
 800cd56:	4b15      	ldr	r3, [pc, #84]	; (800cdac <xTaskCheckForTimeOut+0xc8>)
 800cd58:	681b      	ldr	r3, [r3, #0]
 800cd5a:	429a      	cmp	r2, r3
 800cd5c:	d007      	beq.n	800cd6e <xTaskCheckForTimeOut+0x8a>
 800cd5e:	687b      	ldr	r3, [r7, #4]
 800cd60:	685b      	ldr	r3, [r3, #4]
 800cd62:	69ba      	ldr	r2, [r7, #24]
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d302      	bcc.n	800cd6e <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800cd68:	2301      	movs	r3, #1
 800cd6a:	61fb      	str	r3, [r7, #28]
 800cd6c:	e015      	b.n	800cd9a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800cd6e:	683b      	ldr	r3, [r7, #0]
 800cd70:	681b      	ldr	r3, [r3, #0]
 800cd72:	697a      	ldr	r2, [r7, #20]
 800cd74:	429a      	cmp	r2, r3
 800cd76:	d20b      	bcs.n	800cd90 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800cd78:	683b      	ldr	r3, [r7, #0]
 800cd7a:	681a      	ldr	r2, [r3, #0]
 800cd7c:	697b      	ldr	r3, [r7, #20]
 800cd7e:	1ad2      	subs	r2, r2, r3
 800cd80:	683b      	ldr	r3, [r7, #0]
 800cd82:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800cd84:	6878      	ldr	r0, [r7, #4]
 800cd86:	f7ff ff97 	bl	800ccb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800cd8a:	2300      	movs	r3, #0
 800cd8c:	61fb      	str	r3, [r7, #28]
 800cd8e:	e004      	b.n	800cd9a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 800cd90:	683b      	ldr	r3, [r7, #0]
 800cd92:	2200      	movs	r2, #0
 800cd94:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800cd96:	2301      	movs	r3, #1
 800cd98:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800cd9a:	f000 fc73 	bl	800d684 <vPortExitCritical>

	return xReturn;
 800cd9e:	69fb      	ldr	r3, [r7, #28]
}
 800cda0:	4618      	mov	r0, r3
 800cda2:	3720      	adds	r7, #32
 800cda4:	46bd      	mov	sp, r7
 800cda6:	bd80      	pop	{r7, pc}
 800cda8:	200005a0 	.word	0x200005a0
 800cdac:	200005b4 	.word	0x200005b4

0800cdb0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800cdb0:	b480      	push	{r7}
 800cdb2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800cdb4:	4b03      	ldr	r3, [pc, #12]	; (800cdc4 <vTaskMissedYield+0x14>)
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	601a      	str	r2, [r3, #0]
}
 800cdba:	bf00      	nop
 800cdbc:	46bd      	mov	sp, r7
 800cdbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc2:	4770      	bx	lr
 800cdc4:	200005b0 	.word	0x200005b0

0800cdc8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b082      	sub	sp, #8
 800cdcc:	af00      	add	r7, sp, #0
 800cdce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800cdd0:	f000 f854 	bl	800ce7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800cdd4:	4b07      	ldr	r3, [pc, #28]	; (800cdf4 <prvIdleTask+0x2c>)
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d907      	bls.n	800cdec <prvIdleTask+0x24>
			{
				taskYIELD();
 800cddc:	4b06      	ldr	r3, [pc, #24]	; (800cdf8 <prvIdleTask+0x30>)
 800cdde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cde2:	601a      	str	r2, [r3, #0]
 800cde4:	f3bf 8f4f 	dsb	sy
 800cde8:	f3bf 8f6f 	isb	sy
			/* Call the user defined function from within the idle task.  This
			allows the application designer to add background functionality
			without the overhead of a separate task.
			NOTE: vApplicationIdleHook() MUST NOT, UNDER ANY CIRCUMSTANCES,
			CALL A FUNCTION THAT MIGHT BLOCK. */
			vApplicationIdleHook();
 800cdec:	f7f3 fb8c 	bl	8000508 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800cdf0:	e7ee      	b.n	800cdd0 <prvIdleTask+0x8>
 800cdf2:	bf00      	nop
 800cdf4:	200004a0 	.word	0x200004a0
 800cdf8:	e000ed04 	.word	0xe000ed04

0800cdfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800cdfc:	b580      	push	{r7, lr}
 800cdfe:	b082      	sub	sp, #8
 800ce00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce02:	2300      	movs	r3, #0
 800ce04:	607b      	str	r3, [r7, #4]
 800ce06:	e00c      	b.n	800ce22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	4613      	mov	r3, r2
 800ce0c:	009b      	lsls	r3, r3, #2
 800ce0e:	4413      	add	r3, r2
 800ce10:	009b      	lsls	r3, r3, #2
 800ce12:	4a12      	ldr	r2, [pc, #72]	; (800ce5c <prvInitialiseTaskLists+0x60>)
 800ce14:	4413      	add	r3, r2
 800ce16:	4618      	mov	r0, r3
 800ce18:	f7fe fc9d 	bl	800b756 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	3301      	adds	r3, #1
 800ce20:	607b      	str	r3, [r7, #4]
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b06      	cmp	r3, #6
 800ce26:	d9ef      	bls.n	800ce08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ce28:	480d      	ldr	r0, [pc, #52]	; (800ce60 <prvInitialiseTaskLists+0x64>)
 800ce2a:	f7fe fc94 	bl	800b756 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ce2e:	480d      	ldr	r0, [pc, #52]	; (800ce64 <prvInitialiseTaskLists+0x68>)
 800ce30:	f7fe fc91 	bl	800b756 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ce34:	480c      	ldr	r0, [pc, #48]	; (800ce68 <prvInitialiseTaskLists+0x6c>)
 800ce36:	f7fe fc8e 	bl	800b756 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ce3a:	480c      	ldr	r0, [pc, #48]	; (800ce6c <prvInitialiseTaskLists+0x70>)
 800ce3c:	f7fe fc8b 	bl	800b756 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ce40:	480b      	ldr	r0, [pc, #44]	; (800ce70 <prvInitialiseTaskLists+0x74>)
 800ce42:	f7fe fc88 	bl	800b756 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ce46:	4b0b      	ldr	r3, [pc, #44]	; (800ce74 <prvInitialiseTaskLists+0x78>)
 800ce48:	4a05      	ldr	r2, [pc, #20]	; (800ce60 <prvInitialiseTaskLists+0x64>)
 800ce4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ce4c:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <prvInitialiseTaskLists+0x7c>)
 800ce4e:	4a05      	ldr	r2, [pc, #20]	; (800ce64 <prvInitialiseTaskLists+0x68>)
 800ce50:	601a      	str	r2, [r3, #0]
}
 800ce52:	bf00      	nop
 800ce54:	3708      	adds	r7, #8
 800ce56:	46bd      	mov	sp, r7
 800ce58:	bd80      	pop	{r7, pc}
 800ce5a:	bf00      	nop
 800ce5c:	200004a0 	.word	0x200004a0
 800ce60:	2000052c 	.word	0x2000052c
 800ce64:	20000540 	.word	0x20000540
 800ce68:	2000055c 	.word	0x2000055c
 800ce6c:	20000570 	.word	0x20000570
 800ce70:	20000588 	.word	0x20000588
 800ce74:	20000554 	.word	0x20000554
 800ce78:	20000558 	.word	0x20000558

0800ce7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800ce7c:	b580      	push	{r7, lr}
 800ce7e:	b082      	sub	sp, #8
 800ce80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ce82:	e019      	b.n	800ceb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ce84:	f000 fbca 	bl	800d61c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ce88:	4b10      	ldr	r3, [pc, #64]	; (800cecc <prvCheckTasksWaitingTermination+0x50>)
 800ce8a:	68db      	ldr	r3, [r3, #12]
 800ce8c:	68db      	ldr	r3, [r3, #12]
 800ce8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	3304      	adds	r3, #4
 800ce94:	4618      	mov	r0, r3
 800ce96:	f7fe fce8 	bl	800b86a <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ce9a:	4b0d      	ldr	r3, [pc, #52]	; (800ced0 <prvCheckTasksWaitingTermination+0x54>)
 800ce9c:	681b      	ldr	r3, [r3, #0]
 800ce9e:	3b01      	subs	r3, #1
 800cea0:	4a0b      	ldr	r2, [pc, #44]	; (800ced0 <prvCheckTasksWaitingTermination+0x54>)
 800cea2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800cea4:	4b0b      	ldr	r3, [pc, #44]	; (800ced4 <prvCheckTasksWaitingTermination+0x58>)
 800cea6:	681b      	ldr	r3, [r3, #0]
 800cea8:	3b01      	subs	r3, #1
 800ceaa:	4a0a      	ldr	r2, [pc, #40]	; (800ced4 <prvCheckTasksWaitingTermination+0x58>)
 800ceac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ceae:	f000 fbe9 	bl	800d684 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ceb2:	6878      	ldr	r0, [r7, #4]
 800ceb4:	f000 f810 	bl	800ced8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ceb8:	4b06      	ldr	r3, [pc, #24]	; (800ced4 <prvCheckTasksWaitingTermination+0x58>)
 800ceba:	681b      	ldr	r3, [r3, #0]
 800cebc:	2b00      	cmp	r3, #0
 800cebe:	d1e1      	bne.n	800ce84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800cec0:	bf00      	nop
 800cec2:	bf00      	nop
 800cec4:	3708      	adds	r7, #8
 800cec6:	46bd      	mov	sp, r7
 800cec8:	bd80      	pop	{r7, pc}
 800ceca:	bf00      	nop
 800cecc:	20000570 	.word	0x20000570
 800ced0:	2000059c 	.word	0x2000059c
 800ced4:	20000584 	.word	0x20000584

0800ced8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ced8:	b580      	push	{r7, lr}
 800ceda:	b084      	sub	sp, #16
 800cedc:	af00      	add	r7, sp, #0
 800cede:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	d108      	bne.n	800cefc <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ceee:	4618      	mov	r0, r3
 800cef0:	f000 fd4c 	bl	800d98c <vPortFree>
				vPortFree( pxTCB );
 800cef4:	6878      	ldr	r0, [r7, #4]
 800cef6:	f000 fd49 	bl	800d98c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800cefa:	e01a      	b.n	800cf32 <prvDeleteTCB+0x5a>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800cefc:	687b      	ldr	r3, [r7, #4]
 800cefe:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf02:	2b01      	cmp	r3, #1
 800cf04:	d103      	bne.n	800cf0e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800cf06:	6878      	ldr	r0, [r7, #4]
 800cf08:	f000 fd40 	bl	800d98c <vPortFree>
	}
 800cf0c:	e011      	b.n	800cf32 <prvDeleteTCB+0x5a>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800cf14:	2b02      	cmp	r3, #2
 800cf16:	d00c      	beq.n	800cf32 <prvDeleteTCB+0x5a>
	__asm volatile
 800cf18:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf1c:	b672      	cpsid	i
 800cf1e:	f383 8811 	msr	BASEPRI, r3
 800cf22:	f3bf 8f6f 	isb	sy
 800cf26:	f3bf 8f4f 	dsb	sy
 800cf2a:	b662      	cpsie	i
 800cf2c:	60fb      	str	r3, [r7, #12]
}
 800cf2e:	bf00      	nop
 800cf30:	e7fe      	b.n	800cf30 <prvDeleteTCB+0x58>
	}
 800cf32:	bf00      	nop
 800cf34:	3710      	adds	r7, #16
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
	...

0800cf3c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800cf3c:	b480      	push	{r7}
 800cf3e:	b083      	sub	sp, #12
 800cf40:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cf42:	4b0c      	ldr	r3, [pc, #48]	; (800cf74 <prvResetNextTaskUnblockTime+0x38>)
 800cf44:	681b      	ldr	r3, [r3, #0]
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d104      	bne.n	800cf56 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800cf4c:	4b0a      	ldr	r3, [pc, #40]	; (800cf78 <prvResetNextTaskUnblockTime+0x3c>)
 800cf4e:	f04f 32ff 	mov.w	r2, #4294967295
 800cf52:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800cf54:	e008      	b.n	800cf68 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf56:	4b07      	ldr	r3, [pc, #28]	; (800cf74 <prvResetNextTaskUnblockTime+0x38>)
 800cf58:	681b      	ldr	r3, [r3, #0]
 800cf5a:	68db      	ldr	r3, [r3, #12]
 800cf5c:	68db      	ldr	r3, [r3, #12]
 800cf5e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	685b      	ldr	r3, [r3, #4]
 800cf64:	4a04      	ldr	r2, [pc, #16]	; (800cf78 <prvResetNextTaskUnblockTime+0x3c>)
 800cf66:	6013      	str	r3, [r2, #0]
}
 800cf68:	bf00      	nop
 800cf6a:	370c      	adds	r7, #12
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf72:	4770      	bx	lr
 800cf74:	20000554 	.word	0x20000554
 800cf78:	200005bc 	.word	0x200005bc

0800cf7c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800cf7c:	b480      	push	{r7}
 800cf7e:	b083      	sub	sp, #12
 800cf80:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800cf82:	4b0b      	ldr	r3, [pc, #44]	; (800cfb0 <xTaskGetSchedulerState+0x34>)
 800cf84:	681b      	ldr	r3, [r3, #0]
 800cf86:	2b00      	cmp	r3, #0
 800cf88:	d102      	bne.n	800cf90 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800cf8a:	2301      	movs	r3, #1
 800cf8c:	607b      	str	r3, [r7, #4]
 800cf8e:	e008      	b.n	800cfa2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf90:	4b08      	ldr	r3, [pc, #32]	; (800cfb4 <xTaskGetSchedulerState+0x38>)
 800cf92:	681b      	ldr	r3, [r3, #0]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d102      	bne.n	800cf9e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800cf98:	2302      	movs	r3, #2
 800cf9a:	607b      	str	r3, [r7, #4]
 800cf9c:	e001      	b.n	800cfa2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800cf9e:	2300      	movs	r3, #0
 800cfa0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800cfa2:	687b      	ldr	r3, [r7, #4]
	}
 800cfa4:	4618      	mov	r0, r3
 800cfa6:	370c      	adds	r7, #12
 800cfa8:	46bd      	mov	sp, r7
 800cfaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfae:	4770      	bx	lr
 800cfb0:	200005a8 	.word	0x200005a8
 800cfb4:	200005c4 	.word	0x200005c4

0800cfb8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800cfb8:	b580      	push	{r7, lr}
 800cfba:	b084      	sub	sp, #16
 800cfbc:	af00      	add	r7, sp, #0
 800cfbe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800cfc4:	2300      	movs	r3, #0
 800cfc6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d069      	beq.n	800d0a2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800cfce:	68bb      	ldr	r3, [r7, #8]
 800cfd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cfd2:	4b36      	ldr	r3, [pc, #216]	; (800d0ac <xTaskPriorityInherit+0xf4>)
 800cfd4:	681b      	ldr	r3, [r3, #0]
 800cfd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfd8:	429a      	cmp	r2, r3
 800cfda:	d259      	bcs.n	800d090 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800cfdc:	68bb      	ldr	r3, [r7, #8]
 800cfde:	699b      	ldr	r3, [r3, #24]
 800cfe0:	2b00      	cmp	r3, #0
 800cfe2:	db06      	blt.n	800cff2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cfe4:	4b31      	ldr	r3, [pc, #196]	; (800d0ac <xTaskPriorityInherit+0xf4>)
 800cfe6:	681b      	ldr	r3, [r3, #0]
 800cfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cfea:	f1c3 0207 	rsb	r2, r3, #7
 800cfee:	68bb      	ldr	r3, [r7, #8]
 800cff0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800cff2:	68bb      	ldr	r3, [r7, #8]
 800cff4:	6959      	ldr	r1, [r3, #20]
 800cff6:	68bb      	ldr	r3, [r7, #8]
 800cff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cffa:	4613      	mov	r3, r2
 800cffc:	009b      	lsls	r3, r3, #2
 800cffe:	4413      	add	r3, r2
 800d000:	009b      	lsls	r3, r3, #2
 800d002:	4a2b      	ldr	r2, [pc, #172]	; (800d0b0 <xTaskPriorityInherit+0xf8>)
 800d004:	4413      	add	r3, r2
 800d006:	4299      	cmp	r1, r3
 800d008:	d13a      	bne.n	800d080 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d00a:	68bb      	ldr	r3, [r7, #8]
 800d00c:	3304      	adds	r3, #4
 800d00e:	4618      	mov	r0, r3
 800d010:	f7fe fc2b 	bl	800b86a <uxListRemove>
 800d014:	4603      	mov	r3, r0
 800d016:	2b00      	cmp	r3, #0
 800d018:	d115      	bne.n	800d046 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 800d01a:	68bb      	ldr	r3, [r7, #8]
 800d01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d01e:	4924      	ldr	r1, [pc, #144]	; (800d0b0 <xTaskPriorityInherit+0xf8>)
 800d020:	4613      	mov	r3, r2
 800d022:	009b      	lsls	r3, r3, #2
 800d024:	4413      	add	r3, r2
 800d026:	009b      	lsls	r3, r3, #2
 800d028:	440b      	add	r3, r1
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d10a      	bne.n	800d046 <xTaskPriorityInherit+0x8e>
 800d030:	68bb      	ldr	r3, [r7, #8]
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	2201      	movs	r2, #1
 800d036:	fa02 f303 	lsl.w	r3, r2, r3
 800d03a:	43da      	mvns	r2, r3
 800d03c:	4b1d      	ldr	r3, [pc, #116]	; (800d0b4 <xTaskPriorityInherit+0xfc>)
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	4013      	ands	r3, r2
 800d042:	4a1c      	ldr	r2, [pc, #112]	; (800d0b4 <xTaskPriorityInherit+0xfc>)
 800d044:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d046:	4b19      	ldr	r3, [pc, #100]	; (800d0ac <xTaskPriorityInherit+0xf4>)
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d04c:	68bb      	ldr	r3, [r7, #8]
 800d04e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d050:	68bb      	ldr	r3, [r7, #8]
 800d052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d054:	2201      	movs	r2, #1
 800d056:	409a      	lsls	r2, r3
 800d058:	4b16      	ldr	r3, [pc, #88]	; (800d0b4 <xTaskPriorityInherit+0xfc>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	4313      	orrs	r3, r2
 800d05e:	4a15      	ldr	r2, [pc, #84]	; (800d0b4 <xTaskPriorityInherit+0xfc>)
 800d060:	6013      	str	r3, [r2, #0]
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d066:	4613      	mov	r3, r2
 800d068:	009b      	lsls	r3, r3, #2
 800d06a:	4413      	add	r3, r2
 800d06c:	009b      	lsls	r3, r3, #2
 800d06e:	4a10      	ldr	r2, [pc, #64]	; (800d0b0 <xTaskPriorityInherit+0xf8>)
 800d070:	441a      	add	r2, r3
 800d072:	68bb      	ldr	r3, [r7, #8]
 800d074:	3304      	adds	r3, #4
 800d076:	4619      	mov	r1, r3
 800d078:	4610      	mov	r0, r2
 800d07a:	f7fe fb99 	bl	800b7b0 <vListInsertEnd>
 800d07e:	e004      	b.n	800d08a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d080:	4b0a      	ldr	r3, [pc, #40]	; (800d0ac <xTaskPriorityInherit+0xf4>)
 800d082:	681b      	ldr	r3, [r3, #0]
 800d084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d086:	68bb      	ldr	r3, [r7, #8]
 800d088:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d08a:	2301      	movs	r3, #1
 800d08c:	60fb      	str	r3, [r7, #12]
 800d08e:	e008      	b.n	800d0a2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d090:	68bb      	ldr	r3, [r7, #8]
 800d092:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d094:	4b05      	ldr	r3, [pc, #20]	; (800d0ac <xTaskPriorityInherit+0xf4>)
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d09a:	429a      	cmp	r2, r3
 800d09c:	d201      	bcs.n	800d0a2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d09e:	2301      	movs	r3, #1
 800d0a0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d0a2:	68fb      	ldr	r3, [r7, #12]
	}
 800d0a4:	4618      	mov	r0, r3
 800d0a6:	3710      	adds	r7, #16
 800d0a8:	46bd      	mov	sp, r7
 800d0aa:	bd80      	pop	{r7, pc}
 800d0ac:	2000049c 	.word	0x2000049c
 800d0b0:	200004a0 	.word	0x200004a0
 800d0b4:	200005a4 	.word	0x200005a4

0800d0b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d0b8:	b580      	push	{r7, lr}
 800d0ba:	b086      	sub	sp, #24
 800d0bc:	af00      	add	r7, sp, #0
 800d0be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d0c0:	687b      	ldr	r3, [r7, #4]
 800d0c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d0c8:	687b      	ldr	r3, [r7, #4]
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d072      	beq.n	800d1b4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d0ce:	4b3c      	ldr	r3, [pc, #240]	; (800d1c0 <xTaskPriorityDisinherit+0x108>)
 800d0d0:	681b      	ldr	r3, [r3, #0]
 800d0d2:	693a      	ldr	r2, [r7, #16]
 800d0d4:	429a      	cmp	r2, r3
 800d0d6:	d00c      	beq.n	800d0f2 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 800d0d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0dc:	b672      	cpsid	i
 800d0de:	f383 8811 	msr	BASEPRI, r3
 800d0e2:	f3bf 8f6f 	isb	sy
 800d0e6:	f3bf 8f4f 	dsb	sy
 800d0ea:	b662      	cpsie	i
 800d0ec:	60fb      	str	r3, [r7, #12]
}
 800d0ee:	bf00      	nop
 800d0f0:	e7fe      	b.n	800d0f0 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 800d0f2:	693b      	ldr	r3, [r7, #16]
 800d0f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d10c      	bne.n	800d114 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 800d0fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0fe:	b672      	cpsid	i
 800d100:	f383 8811 	msr	BASEPRI, r3
 800d104:	f3bf 8f6f 	isb	sy
 800d108:	f3bf 8f4f 	dsb	sy
 800d10c:	b662      	cpsie	i
 800d10e:	60bb      	str	r3, [r7, #8]
}
 800d110:	bf00      	nop
 800d112:	e7fe      	b.n	800d112 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 800d114:	693b      	ldr	r3, [r7, #16]
 800d116:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d118:	1e5a      	subs	r2, r3, #1
 800d11a:	693b      	ldr	r3, [r7, #16]
 800d11c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d11e:	693b      	ldr	r3, [r7, #16]
 800d120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d122:	693b      	ldr	r3, [r7, #16]
 800d124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d126:	429a      	cmp	r2, r3
 800d128:	d044      	beq.n	800d1b4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d12a:	693b      	ldr	r3, [r7, #16]
 800d12c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d140      	bne.n	800d1b4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d132:	693b      	ldr	r3, [r7, #16]
 800d134:	3304      	adds	r3, #4
 800d136:	4618      	mov	r0, r3
 800d138:	f7fe fb97 	bl	800b86a <uxListRemove>
 800d13c:	4603      	mov	r3, r0
 800d13e:	2b00      	cmp	r3, #0
 800d140:	d115      	bne.n	800d16e <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d142:	693b      	ldr	r3, [r7, #16]
 800d144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d146:	491f      	ldr	r1, [pc, #124]	; (800d1c4 <xTaskPriorityDisinherit+0x10c>)
 800d148:	4613      	mov	r3, r2
 800d14a:	009b      	lsls	r3, r3, #2
 800d14c:	4413      	add	r3, r2
 800d14e:	009b      	lsls	r3, r3, #2
 800d150:	440b      	add	r3, r1
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d10a      	bne.n	800d16e <xTaskPriorityDisinherit+0xb6>
 800d158:	693b      	ldr	r3, [r7, #16]
 800d15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d15c:	2201      	movs	r2, #1
 800d15e:	fa02 f303 	lsl.w	r3, r2, r3
 800d162:	43da      	mvns	r2, r3
 800d164:	4b18      	ldr	r3, [pc, #96]	; (800d1c8 <xTaskPriorityDisinherit+0x110>)
 800d166:	681b      	ldr	r3, [r3, #0]
 800d168:	4013      	ands	r3, r2
 800d16a:	4a17      	ldr	r2, [pc, #92]	; (800d1c8 <xTaskPriorityDisinherit+0x110>)
 800d16c:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d16e:	693b      	ldr	r3, [r7, #16]
 800d170:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d172:	693b      	ldr	r3, [r7, #16]
 800d174:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d176:	693b      	ldr	r3, [r7, #16]
 800d178:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d17a:	f1c3 0207 	rsb	r2, r3, #7
 800d17e:	693b      	ldr	r3, [r7, #16]
 800d180:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d186:	2201      	movs	r2, #1
 800d188:	409a      	lsls	r2, r3
 800d18a:	4b0f      	ldr	r3, [pc, #60]	; (800d1c8 <xTaskPriorityDisinherit+0x110>)
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	4313      	orrs	r3, r2
 800d190:	4a0d      	ldr	r2, [pc, #52]	; (800d1c8 <xTaskPriorityDisinherit+0x110>)
 800d192:	6013      	str	r3, [r2, #0]
 800d194:	693b      	ldr	r3, [r7, #16]
 800d196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d198:	4613      	mov	r3, r2
 800d19a:	009b      	lsls	r3, r3, #2
 800d19c:	4413      	add	r3, r2
 800d19e:	009b      	lsls	r3, r3, #2
 800d1a0:	4a08      	ldr	r2, [pc, #32]	; (800d1c4 <xTaskPriorityDisinherit+0x10c>)
 800d1a2:	441a      	add	r2, r3
 800d1a4:	693b      	ldr	r3, [r7, #16]
 800d1a6:	3304      	adds	r3, #4
 800d1a8:	4619      	mov	r1, r3
 800d1aa:	4610      	mov	r0, r2
 800d1ac:	f7fe fb00 	bl	800b7b0 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d1b0:	2301      	movs	r3, #1
 800d1b2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d1b4:	697b      	ldr	r3, [r7, #20]
	}
 800d1b6:	4618      	mov	r0, r3
 800d1b8:	3718      	adds	r7, #24
 800d1ba:	46bd      	mov	sp, r7
 800d1bc:	bd80      	pop	{r7, pc}
 800d1be:	bf00      	nop
 800d1c0:	2000049c 	.word	0x2000049c
 800d1c4:	200004a0 	.word	0x200004a0
 800d1c8:	200005a4 	.word	0x200005a4

0800d1cc <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d1cc:	b580      	push	{r7, lr}
 800d1ce:	b088      	sub	sp, #32
 800d1d0:	af00      	add	r7, sp, #0
 800d1d2:	6078      	str	r0, [r7, #4]
 800d1d4:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d1da:	2301      	movs	r3, #1
 800d1dc:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 8087 	beq.w	800d2f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d1e6:	69bb      	ldr	r3, [r7, #24]
 800d1e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d1ea:	2b00      	cmp	r3, #0
 800d1ec:	d10c      	bne.n	800d208 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 800d1ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1f2:	b672      	cpsid	i
 800d1f4:	f383 8811 	msr	BASEPRI, r3
 800d1f8:	f3bf 8f6f 	isb	sy
 800d1fc:	f3bf 8f4f 	dsb	sy
 800d200:	b662      	cpsie	i
 800d202:	60fb      	str	r3, [r7, #12]
}
 800d204:	bf00      	nop
 800d206:	e7fe      	b.n	800d206 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d208:	69bb      	ldr	r3, [r7, #24]
 800d20a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d20c:	683a      	ldr	r2, [r7, #0]
 800d20e:	429a      	cmp	r2, r3
 800d210:	d902      	bls.n	800d218 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d212:	683b      	ldr	r3, [r7, #0]
 800d214:	61fb      	str	r3, [r7, #28]
 800d216:	e002      	b.n	800d21e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d218:	69bb      	ldr	r3, [r7, #24]
 800d21a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d21c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d21e:	69bb      	ldr	r3, [r7, #24]
 800d220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d222:	69fa      	ldr	r2, [r7, #28]
 800d224:	429a      	cmp	r2, r3
 800d226:	d065      	beq.n	800d2f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d228:	69bb      	ldr	r3, [r7, #24]
 800d22a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d22c:	697a      	ldr	r2, [r7, #20]
 800d22e:	429a      	cmp	r2, r3
 800d230:	d160      	bne.n	800d2f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d232:	4b32      	ldr	r3, [pc, #200]	; (800d2fc <vTaskPriorityDisinheritAfterTimeout+0x130>)
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	69ba      	ldr	r2, [r7, #24]
 800d238:	429a      	cmp	r2, r3
 800d23a:	d10c      	bne.n	800d256 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 800d23c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d240:	b672      	cpsid	i
 800d242:	f383 8811 	msr	BASEPRI, r3
 800d246:	f3bf 8f6f 	isb	sy
 800d24a:	f3bf 8f4f 	dsb	sy
 800d24e:	b662      	cpsie	i
 800d250:	60bb      	str	r3, [r7, #8]
}
 800d252:	bf00      	nop
 800d254:	e7fe      	b.n	800d254 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800d256:	69bb      	ldr	r3, [r7, #24]
 800d258:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d25a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800d25c:	69bb      	ldr	r3, [r7, #24]
 800d25e:	69fa      	ldr	r2, [r7, #28]
 800d260:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d262:	69bb      	ldr	r3, [r7, #24]
 800d264:	699b      	ldr	r3, [r3, #24]
 800d266:	2b00      	cmp	r3, #0
 800d268:	db04      	blt.n	800d274 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d26a:	69fb      	ldr	r3, [r7, #28]
 800d26c:	f1c3 0207 	rsb	r2, r3, #7
 800d270:	69bb      	ldr	r3, [r7, #24]
 800d272:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800d274:	69bb      	ldr	r3, [r7, #24]
 800d276:	6959      	ldr	r1, [r3, #20]
 800d278:	693a      	ldr	r2, [r7, #16]
 800d27a:	4613      	mov	r3, r2
 800d27c:	009b      	lsls	r3, r3, #2
 800d27e:	4413      	add	r3, r2
 800d280:	009b      	lsls	r3, r3, #2
 800d282:	4a1f      	ldr	r2, [pc, #124]	; (800d300 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d284:	4413      	add	r3, r2
 800d286:	4299      	cmp	r1, r3
 800d288:	d134      	bne.n	800d2f4 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d28a:	69bb      	ldr	r3, [r7, #24]
 800d28c:	3304      	adds	r3, #4
 800d28e:	4618      	mov	r0, r3
 800d290:	f7fe faeb 	bl	800b86a <uxListRemove>
 800d294:	4603      	mov	r3, r0
 800d296:	2b00      	cmp	r3, #0
 800d298:	d115      	bne.n	800d2c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 800d29a:	69bb      	ldr	r3, [r7, #24]
 800d29c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d29e:	4918      	ldr	r1, [pc, #96]	; (800d300 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d2a0:	4613      	mov	r3, r2
 800d2a2:	009b      	lsls	r3, r3, #2
 800d2a4:	4413      	add	r3, r2
 800d2a6:	009b      	lsls	r3, r3, #2
 800d2a8:	440b      	add	r3, r1
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d10a      	bne.n	800d2c6 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 800d2b0:	69bb      	ldr	r3, [r7, #24]
 800d2b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2b4:	2201      	movs	r2, #1
 800d2b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d2ba:	43da      	mvns	r2, r3
 800d2bc:	4b11      	ldr	r3, [pc, #68]	; (800d304 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	4013      	ands	r3, r2
 800d2c2:	4a10      	ldr	r2, [pc, #64]	; (800d304 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2c4:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800d2c6:	69bb      	ldr	r3, [r7, #24]
 800d2c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d2ca:	2201      	movs	r2, #1
 800d2cc:	409a      	lsls	r2, r3
 800d2ce:	4b0d      	ldr	r3, [pc, #52]	; (800d304 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	4313      	orrs	r3, r2
 800d2d4:	4a0b      	ldr	r2, [pc, #44]	; (800d304 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 800d2d6:	6013      	str	r3, [r2, #0]
 800d2d8:	69bb      	ldr	r3, [r7, #24]
 800d2da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d2dc:	4613      	mov	r3, r2
 800d2de:	009b      	lsls	r3, r3, #2
 800d2e0:	4413      	add	r3, r2
 800d2e2:	009b      	lsls	r3, r3, #2
 800d2e4:	4a06      	ldr	r2, [pc, #24]	; (800d300 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 800d2e6:	441a      	add	r2, r3
 800d2e8:	69bb      	ldr	r3, [r7, #24]
 800d2ea:	3304      	adds	r3, #4
 800d2ec:	4619      	mov	r1, r3
 800d2ee:	4610      	mov	r0, r2
 800d2f0:	f7fe fa5e 	bl	800b7b0 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800d2f4:	bf00      	nop
 800d2f6:	3720      	adds	r7, #32
 800d2f8:	46bd      	mov	sp, r7
 800d2fa:	bd80      	pop	{r7, pc}
 800d2fc:	2000049c 	.word	0x2000049c
 800d300:	200004a0 	.word	0x200004a0
 800d304:	200005a4 	.word	0x200005a4

0800d308 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800d308:	b480      	push	{r7}
 800d30a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800d30c:	4b07      	ldr	r3, [pc, #28]	; (800d32c <pvTaskIncrementMutexHeldCount+0x24>)
 800d30e:	681b      	ldr	r3, [r3, #0]
 800d310:	2b00      	cmp	r3, #0
 800d312:	d004      	beq.n	800d31e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800d314:	4b05      	ldr	r3, [pc, #20]	; (800d32c <pvTaskIncrementMutexHeldCount+0x24>)
 800d316:	681b      	ldr	r3, [r3, #0]
 800d318:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d31a:	3201      	adds	r2, #1
 800d31c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800d31e:	4b03      	ldr	r3, [pc, #12]	; (800d32c <pvTaskIncrementMutexHeldCount+0x24>)
 800d320:	681b      	ldr	r3, [r3, #0]
	}
 800d322:	4618      	mov	r0, r3
 800d324:	46bd      	mov	sp, r7
 800d326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32a:	4770      	bx	lr
 800d32c:	2000049c 	.word	0x2000049c

0800d330 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b084      	sub	sp, #16
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
 800d338:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d33a:	4b29      	ldr	r3, [pc, #164]	; (800d3e0 <prvAddCurrentTaskToDelayedList+0xb0>)
 800d33c:	681b      	ldr	r3, [r3, #0]
 800d33e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d340:	4b28      	ldr	r3, [pc, #160]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d342:	681b      	ldr	r3, [r3, #0]
 800d344:	3304      	adds	r3, #4
 800d346:	4618      	mov	r0, r3
 800d348:	f7fe fa8f 	bl	800b86a <uxListRemove>
 800d34c:	4603      	mov	r3, r0
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d10b      	bne.n	800d36a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800d352:	4b24      	ldr	r3, [pc, #144]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d354:	681b      	ldr	r3, [r3, #0]
 800d356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d358:	2201      	movs	r2, #1
 800d35a:	fa02 f303 	lsl.w	r3, r2, r3
 800d35e:	43da      	mvns	r2, r3
 800d360:	4b21      	ldr	r3, [pc, #132]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	4013      	ands	r3, r2
 800d366:	4a20      	ldr	r2, [pc, #128]	; (800d3e8 <prvAddCurrentTaskToDelayedList+0xb8>)
 800d368:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d370:	d10a      	bne.n	800d388 <prvAddCurrentTaskToDelayedList+0x58>
 800d372:	683b      	ldr	r3, [r7, #0]
 800d374:	2b00      	cmp	r3, #0
 800d376:	d007      	beq.n	800d388 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d378:	4b1a      	ldr	r3, [pc, #104]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d37a:	681b      	ldr	r3, [r3, #0]
 800d37c:	3304      	adds	r3, #4
 800d37e:	4619      	mov	r1, r3
 800d380:	481a      	ldr	r0, [pc, #104]	; (800d3ec <prvAddCurrentTaskToDelayedList+0xbc>)
 800d382:	f7fe fa15 	bl	800b7b0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d386:	e026      	b.n	800d3d6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d388:	68fa      	ldr	r2, [r7, #12]
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	4413      	add	r3, r2
 800d38e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d390:	4b14      	ldr	r3, [pc, #80]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d392:	681b      	ldr	r3, [r3, #0]
 800d394:	68ba      	ldr	r2, [r7, #8]
 800d396:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d398:	68ba      	ldr	r2, [r7, #8]
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	429a      	cmp	r2, r3
 800d39e:	d209      	bcs.n	800d3b4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3a0:	4b13      	ldr	r3, [pc, #76]	; (800d3f0 <prvAddCurrentTaskToDelayedList+0xc0>)
 800d3a2:	681a      	ldr	r2, [r3, #0]
 800d3a4:	4b0f      	ldr	r3, [pc, #60]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3a6:	681b      	ldr	r3, [r3, #0]
 800d3a8:	3304      	adds	r3, #4
 800d3aa:	4619      	mov	r1, r3
 800d3ac:	4610      	mov	r0, r2
 800d3ae:	f7fe fa23 	bl	800b7f8 <vListInsert>
}
 800d3b2:	e010      	b.n	800d3d6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3b4:	4b0f      	ldr	r3, [pc, #60]	; (800d3f4 <prvAddCurrentTaskToDelayedList+0xc4>)
 800d3b6:	681a      	ldr	r2, [r3, #0]
 800d3b8:	4b0a      	ldr	r3, [pc, #40]	; (800d3e4 <prvAddCurrentTaskToDelayedList+0xb4>)
 800d3ba:	681b      	ldr	r3, [r3, #0]
 800d3bc:	3304      	adds	r3, #4
 800d3be:	4619      	mov	r1, r3
 800d3c0:	4610      	mov	r0, r2
 800d3c2:	f7fe fa19 	bl	800b7f8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d3c6:	4b0c      	ldr	r3, [pc, #48]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3c8:	681b      	ldr	r3, [r3, #0]
 800d3ca:	68ba      	ldr	r2, [r7, #8]
 800d3cc:	429a      	cmp	r2, r3
 800d3ce:	d202      	bcs.n	800d3d6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800d3d0:	4a09      	ldr	r2, [pc, #36]	; (800d3f8 <prvAddCurrentTaskToDelayedList+0xc8>)
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	6013      	str	r3, [r2, #0]
}
 800d3d6:	bf00      	nop
 800d3d8:	3710      	adds	r7, #16
 800d3da:	46bd      	mov	sp, r7
 800d3dc:	bd80      	pop	{r7, pc}
 800d3de:	bf00      	nop
 800d3e0:	200005a0 	.word	0x200005a0
 800d3e4:	2000049c 	.word	0x2000049c
 800d3e8:	200005a4 	.word	0x200005a4
 800d3ec:	20000588 	.word	0x20000588
 800d3f0:	20000558 	.word	0x20000558
 800d3f4:	20000554 	.word	0x20000554
 800d3f8:	200005bc 	.word	0x200005bc

0800d3fc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800d3fc:	b480      	push	{r7}
 800d3fe:	b085      	sub	sp, #20
 800d400:	af00      	add	r7, sp, #0
 800d402:	60f8      	str	r0, [r7, #12]
 800d404:	60b9      	str	r1, [r7, #8]
 800d406:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800d408:	68fb      	ldr	r3, [r7, #12]
 800d40a:	3b04      	subs	r3, #4
 800d40c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800d414:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d416:	68fb      	ldr	r3, [r7, #12]
 800d418:	3b04      	subs	r3, #4
 800d41a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800d41c:	68bb      	ldr	r3, [r7, #8]
 800d41e:	f023 0201 	bic.w	r2, r3, #1
 800d422:	68fb      	ldr	r3, [r7, #12]
 800d424:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	3b04      	subs	r3, #4
 800d42a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800d42c:	4a0c      	ldr	r2, [pc, #48]	; (800d460 <pxPortInitialiseStack+0x64>)
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800d432:	68fb      	ldr	r3, [r7, #12]
 800d434:	3b14      	subs	r3, #20
 800d436:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	68fb      	ldr	r3, [r7, #12]
 800d43c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800d43e:	68fb      	ldr	r3, [r7, #12]
 800d440:	3b04      	subs	r3, #4
 800d442:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	f06f 0202 	mvn.w	r2, #2
 800d44a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800d44c:	68fb      	ldr	r3, [r7, #12]
 800d44e:	3b20      	subs	r3, #32
 800d450:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800d452:	68fb      	ldr	r3, [r7, #12]
}
 800d454:	4618      	mov	r0, r3
 800d456:	3714      	adds	r7, #20
 800d458:	46bd      	mov	sp, r7
 800d45a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45e:	4770      	bx	lr
 800d460:	0800d465 	.word	0x0800d465

0800d464 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800d464:	b480      	push	{r7}
 800d466:	b085      	sub	sp, #20
 800d468:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800d46a:	2300      	movs	r3, #0
 800d46c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800d46e:	4b14      	ldr	r3, [pc, #80]	; (800d4c0 <prvTaskExitError+0x5c>)
 800d470:	681b      	ldr	r3, [r3, #0]
 800d472:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d476:	d00c      	beq.n	800d492 <prvTaskExitError+0x2e>
	__asm volatile
 800d478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d47c:	b672      	cpsid	i
 800d47e:	f383 8811 	msr	BASEPRI, r3
 800d482:	f3bf 8f6f 	isb	sy
 800d486:	f3bf 8f4f 	dsb	sy
 800d48a:	b662      	cpsie	i
 800d48c:	60fb      	str	r3, [r7, #12]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <prvTaskExitError+0x2c>
	__asm volatile
 800d492:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d496:	b672      	cpsid	i
 800d498:	f383 8811 	msr	BASEPRI, r3
 800d49c:	f3bf 8f6f 	isb	sy
 800d4a0:	f3bf 8f4f 	dsb	sy
 800d4a4:	b662      	cpsie	i
 800d4a6:	60bb      	str	r3, [r7, #8]
}
 800d4a8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800d4aa:	bf00      	nop
 800d4ac:	687b      	ldr	r3, [r7, #4]
 800d4ae:	2b00      	cmp	r3, #0
 800d4b0:	d0fc      	beq.n	800d4ac <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800d4b2:	bf00      	nop
 800d4b4:	bf00      	nop
 800d4b6:	3714      	adds	r7, #20
 800d4b8:	46bd      	mov	sp, r7
 800d4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4be:	4770      	bx	lr
 800d4c0:	20000054 	.word	0x20000054
	...

0800d4d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800d4d0:	4b07      	ldr	r3, [pc, #28]	; (800d4f0 <pxCurrentTCBConst2>)
 800d4d2:	6819      	ldr	r1, [r3, #0]
 800d4d4:	6808      	ldr	r0, [r1, #0]
 800d4d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4da:	f380 8809 	msr	PSP, r0
 800d4de:	f3bf 8f6f 	isb	sy
 800d4e2:	f04f 0000 	mov.w	r0, #0
 800d4e6:	f380 8811 	msr	BASEPRI, r0
 800d4ea:	4770      	bx	lr
 800d4ec:	f3af 8000 	nop.w

0800d4f0 <pxCurrentTCBConst2>:
 800d4f0:	2000049c 	.word	0x2000049c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800d4f4:	bf00      	nop
 800d4f6:	bf00      	nop

0800d4f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800d4f8:	4808      	ldr	r0, [pc, #32]	; (800d51c <prvPortStartFirstTask+0x24>)
 800d4fa:	6800      	ldr	r0, [r0, #0]
 800d4fc:	6800      	ldr	r0, [r0, #0]
 800d4fe:	f380 8808 	msr	MSP, r0
 800d502:	f04f 0000 	mov.w	r0, #0
 800d506:	f380 8814 	msr	CONTROL, r0
 800d50a:	b662      	cpsie	i
 800d50c:	b661      	cpsie	f
 800d50e:	f3bf 8f4f 	dsb	sy
 800d512:	f3bf 8f6f 	isb	sy
 800d516:	df00      	svc	0
 800d518:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800d51a:	bf00      	nop
 800d51c:	e000ed08 	.word	0xe000ed08

0800d520 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800d520:	b580      	push	{r7, lr}
 800d522:	b084      	sub	sp, #16
 800d524:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800d526:	4b37      	ldr	r3, [pc, #220]	; (800d604 <xPortStartScheduler+0xe4>)
 800d528:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	781b      	ldrb	r3, [r3, #0]
 800d52e:	b2db      	uxtb	r3, r3
 800d530:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	22ff      	movs	r2, #255	; 0xff
 800d536:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d538:	68fb      	ldr	r3, [r7, #12]
 800d53a:	781b      	ldrb	r3, [r3, #0]
 800d53c:	b2db      	uxtb	r3, r3
 800d53e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d540:	78fb      	ldrb	r3, [r7, #3]
 800d542:	b2db      	uxtb	r3, r3
 800d544:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800d548:	b2da      	uxtb	r2, r3
 800d54a:	4b2f      	ldr	r3, [pc, #188]	; (800d608 <xPortStartScheduler+0xe8>)
 800d54c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d54e:	4b2f      	ldr	r3, [pc, #188]	; (800d60c <xPortStartScheduler+0xec>)
 800d550:	2207      	movs	r2, #7
 800d552:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d554:	e009      	b.n	800d56a <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800d556:	4b2d      	ldr	r3, [pc, #180]	; (800d60c <xPortStartScheduler+0xec>)
 800d558:	681b      	ldr	r3, [r3, #0]
 800d55a:	3b01      	subs	r3, #1
 800d55c:	4a2b      	ldr	r2, [pc, #172]	; (800d60c <xPortStartScheduler+0xec>)
 800d55e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d560:	78fb      	ldrb	r3, [r7, #3]
 800d562:	b2db      	uxtb	r3, r3
 800d564:	005b      	lsls	r3, r3, #1
 800d566:	b2db      	uxtb	r3, r3
 800d568:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d56a:	78fb      	ldrb	r3, [r7, #3]
 800d56c:	b2db      	uxtb	r3, r3
 800d56e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d572:	2b80      	cmp	r3, #128	; 0x80
 800d574:	d0ef      	beq.n	800d556 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d576:	4b25      	ldr	r3, [pc, #148]	; (800d60c <xPortStartScheduler+0xec>)
 800d578:	681b      	ldr	r3, [r3, #0]
 800d57a:	f1c3 0307 	rsb	r3, r3, #7
 800d57e:	2b04      	cmp	r3, #4
 800d580:	d00c      	beq.n	800d59c <xPortStartScheduler+0x7c>
	__asm volatile
 800d582:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d586:	b672      	cpsid	i
 800d588:	f383 8811 	msr	BASEPRI, r3
 800d58c:	f3bf 8f6f 	isb	sy
 800d590:	f3bf 8f4f 	dsb	sy
 800d594:	b662      	cpsie	i
 800d596:	60bb      	str	r3, [r7, #8]
}
 800d598:	bf00      	nop
 800d59a:	e7fe      	b.n	800d59a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800d59c:	4b1b      	ldr	r3, [pc, #108]	; (800d60c <xPortStartScheduler+0xec>)
 800d59e:	681b      	ldr	r3, [r3, #0]
 800d5a0:	021b      	lsls	r3, r3, #8
 800d5a2:	4a1a      	ldr	r2, [pc, #104]	; (800d60c <xPortStartScheduler+0xec>)
 800d5a4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d5a6:	4b19      	ldr	r3, [pc, #100]	; (800d60c <xPortStartScheduler+0xec>)
 800d5a8:	681b      	ldr	r3, [r3, #0]
 800d5aa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800d5ae:	4a17      	ldr	r2, [pc, #92]	; (800d60c <xPortStartScheduler+0xec>)
 800d5b0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	b2da      	uxtb	r2, r3
 800d5b6:	68fb      	ldr	r3, [r7, #12]
 800d5b8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d5ba:	4b15      	ldr	r3, [pc, #84]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5bc:	681b      	ldr	r3, [r3, #0]
 800d5be:	4a14      	ldr	r2, [pc, #80]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800d5c4:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d5c6:	4b12      	ldr	r3, [pc, #72]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5c8:	681b      	ldr	r3, [r3, #0]
 800d5ca:	4a11      	ldr	r2, [pc, #68]	; (800d610 <xPortStartScheduler+0xf0>)
 800d5cc:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800d5d0:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800d5d2:	f000 f8dd 	bl	800d790 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800d5d6:	4b0f      	ldr	r3, [pc, #60]	; (800d614 <xPortStartScheduler+0xf4>)
 800d5d8:	2200      	movs	r2, #0
 800d5da:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800d5dc:	f000 f8fc 	bl	800d7d8 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d5e0:	4b0d      	ldr	r3, [pc, #52]	; (800d618 <xPortStartScheduler+0xf8>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	4a0c      	ldr	r2, [pc, #48]	; (800d618 <xPortStartScheduler+0xf8>)
 800d5e6:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800d5ea:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800d5ec:	f7ff ff84 	bl	800d4f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800d5f0:	f7ff fa56 	bl	800caa0 <vTaskSwitchContext>
	prvTaskExitError();
 800d5f4:	f7ff ff36 	bl	800d464 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800d5f8:	2300      	movs	r3, #0
}
 800d5fa:	4618      	mov	r0, r3
 800d5fc:	3710      	adds	r7, #16
 800d5fe:	46bd      	mov	sp, r7
 800d600:	bd80      	pop	{r7, pc}
 800d602:	bf00      	nop
 800d604:	e000e400 	.word	0xe000e400
 800d608:	200005c8 	.word	0x200005c8
 800d60c:	200005cc 	.word	0x200005cc
 800d610:	e000ed20 	.word	0xe000ed20
 800d614:	20000054 	.word	0x20000054
 800d618:	e000ef34 	.word	0xe000ef34

0800d61c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800d61c:	b480      	push	{r7}
 800d61e:	b083      	sub	sp, #12
 800d620:	af00      	add	r7, sp, #0
	__asm volatile
 800d622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d626:	b672      	cpsid	i
 800d628:	f383 8811 	msr	BASEPRI, r3
 800d62c:	f3bf 8f6f 	isb	sy
 800d630:	f3bf 8f4f 	dsb	sy
 800d634:	b662      	cpsie	i
 800d636:	607b      	str	r3, [r7, #4]
}
 800d638:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <vPortEnterCritical+0x60>)
 800d63c:	681b      	ldr	r3, [r3, #0]
 800d63e:	3301      	adds	r3, #1
 800d640:	4a0e      	ldr	r2, [pc, #56]	; (800d67c <vPortEnterCritical+0x60>)
 800d642:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800d644:	4b0d      	ldr	r3, [pc, #52]	; (800d67c <vPortEnterCritical+0x60>)
 800d646:	681b      	ldr	r3, [r3, #0]
 800d648:	2b01      	cmp	r3, #1
 800d64a:	d111      	bne.n	800d670 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800d64c:	4b0c      	ldr	r3, [pc, #48]	; (800d680 <vPortEnterCritical+0x64>)
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	b2db      	uxtb	r3, r3
 800d652:	2b00      	cmp	r3, #0
 800d654:	d00c      	beq.n	800d670 <vPortEnterCritical+0x54>
	__asm volatile
 800d656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d65a:	b672      	cpsid	i
 800d65c:	f383 8811 	msr	BASEPRI, r3
 800d660:	f3bf 8f6f 	isb	sy
 800d664:	f3bf 8f4f 	dsb	sy
 800d668:	b662      	cpsie	i
 800d66a:	603b      	str	r3, [r7, #0]
}
 800d66c:	bf00      	nop
 800d66e:	e7fe      	b.n	800d66e <vPortEnterCritical+0x52>
	}
}
 800d670:	bf00      	nop
 800d672:	370c      	adds	r7, #12
 800d674:	46bd      	mov	sp, r7
 800d676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d67a:	4770      	bx	lr
 800d67c:	20000054 	.word	0x20000054
 800d680:	e000ed04 	.word	0xe000ed04

0800d684 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800d684:	b480      	push	{r7}
 800d686:	b083      	sub	sp, #12
 800d688:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800d68a:	4b13      	ldr	r3, [pc, #76]	; (800d6d8 <vPortExitCritical+0x54>)
 800d68c:	681b      	ldr	r3, [r3, #0]
 800d68e:	2b00      	cmp	r3, #0
 800d690:	d10c      	bne.n	800d6ac <vPortExitCritical+0x28>
	__asm volatile
 800d692:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d696:	b672      	cpsid	i
 800d698:	f383 8811 	msr	BASEPRI, r3
 800d69c:	f3bf 8f6f 	isb	sy
 800d6a0:	f3bf 8f4f 	dsb	sy
 800d6a4:	b662      	cpsie	i
 800d6a6:	607b      	str	r3, [r7, #4]
}
 800d6a8:	bf00      	nop
 800d6aa:	e7fe      	b.n	800d6aa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 800d6ac:	4b0a      	ldr	r3, [pc, #40]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	3b01      	subs	r3, #1
 800d6b2:	4a09      	ldr	r2, [pc, #36]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6b4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800d6b6:	4b08      	ldr	r3, [pc, #32]	; (800d6d8 <vPortExitCritical+0x54>)
 800d6b8:	681b      	ldr	r3, [r3, #0]
 800d6ba:	2b00      	cmp	r3, #0
 800d6bc:	d105      	bne.n	800d6ca <vPortExitCritical+0x46>
 800d6be:	2300      	movs	r3, #0
 800d6c0:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d6c2:	683b      	ldr	r3, [r7, #0]
 800d6c4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d6c8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800d6ca:	bf00      	nop
 800d6cc:	370c      	adds	r7, #12
 800d6ce:	46bd      	mov	sp, r7
 800d6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6d4:	4770      	bx	lr
 800d6d6:	bf00      	nop
 800d6d8:	20000054 	.word	0x20000054
 800d6dc:	00000000 	.word	0x00000000

0800d6e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800d6e0:	f3ef 8009 	mrs	r0, PSP
 800d6e4:	f3bf 8f6f 	isb	sy
 800d6e8:	4b15      	ldr	r3, [pc, #84]	; (800d740 <pxCurrentTCBConst>)
 800d6ea:	681a      	ldr	r2, [r3, #0]
 800d6ec:	f01e 0f10 	tst.w	lr, #16
 800d6f0:	bf08      	it	eq
 800d6f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d6f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fa:	6010      	str	r0, [r2, #0]
 800d6fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d700:	f04f 0050 	mov.w	r0, #80	; 0x50
 800d704:	b672      	cpsid	i
 800d706:	f380 8811 	msr	BASEPRI, r0
 800d70a:	f3bf 8f4f 	dsb	sy
 800d70e:	f3bf 8f6f 	isb	sy
 800d712:	b662      	cpsie	i
 800d714:	f7ff f9c4 	bl	800caa0 <vTaskSwitchContext>
 800d718:	f04f 0000 	mov.w	r0, #0
 800d71c:	f380 8811 	msr	BASEPRI, r0
 800d720:	bc09      	pop	{r0, r3}
 800d722:	6819      	ldr	r1, [r3, #0]
 800d724:	6808      	ldr	r0, [r1, #0]
 800d726:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d72a:	f01e 0f10 	tst.w	lr, #16
 800d72e:	bf08      	it	eq
 800d730:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d734:	f380 8809 	msr	PSP, r0
 800d738:	f3bf 8f6f 	isb	sy
 800d73c:	4770      	bx	lr
 800d73e:	bf00      	nop

0800d740 <pxCurrentTCBConst>:
 800d740:	2000049c 	.word	0x2000049c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800d744:	bf00      	nop
 800d746:	bf00      	nop

0800d748 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800d748:	b580      	push	{r7, lr}
 800d74a:	b082      	sub	sp, #8
 800d74c:	af00      	add	r7, sp, #0
	__asm volatile
 800d74e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d752:	b672      	cpsid	i
 800d754:	f383 8811 	msr	BASEPRI, r3
 800d758:	f3bf 8f6f 	isb	sy
 800d75c:	f3bf 8f4f 	dsb	sy
 800d760:	b662      	cpsie	i
 800d762:	607b      	str	r3, [r7, #4]
}
 800d764:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800d766:	f7ff f8e1 	bl	800c92c <xTaskIncrementTick>
 800d76a:	4603      	mov	r3, r0
 800d76c:	2b00      	cmp	r3, #0
 800d76e:	d003      	beq.n	800d778 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d770:	4b06      	ldr	r3, [pc, #24]	; (800d78c <SysTick_Handler+0x44>)
 800d772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d776:	601a      	str	r2, [r3, #0]
 800d778:	2300      	movs	r3, #0
 800d77a:	603b      	str	r3, [r7, #0]
	__asm volatile
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	f383 8811 	msr	BASEPRI, r3
}
 800d782:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800d784:	bf00      	nop
 800d786:	3708      	adds	r7, #8
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}
 800d78c:	e000ed04 	.word	0xe000ed04

0800d790 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800d790:	b480      	push	{r7}
 800d792:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d794:	4b0b      	ldr	r3, [pc, #44]	; (800d7c4 <vPortSetupTimerInterrupt+0x34>)
 800d796:	2200      	movs	r2, #0
 800d798:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d79a:	4b0b      	ldr	r3, [pc, #44]	; (800d7c8 <vPortSetupTimerInterrupt+0x38>)
 800d79c:	2200      	movs	r2, #0
 800d79e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d7a0:	4b0a      	ldr	r3, [pc, #40]	; (800d7cc <vPortSetupTimerInterrupt+0x3c>)
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	4a0a      	ldr	r2, [pc, #40]	; (800d7d0 <vPortSetupTimerInterrupt+0x40>)
 800d7a6:	fba2 2303 	umull	r2, r3, r2, r3
 800d7aa:	099b      	lsrs	r3, r3, #6
 800d7ac:	4a09      	ldr	r2, [pc, #36]	; (800d7d4 <vPortSetupTimerInterrupt+0x44>)
 800d7ae:	3b01      	subs	r3, #1
 800d7b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d7b2:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <vPortSetupTimerInterrupt+0x34>)
 800d7b4:	2207      	movs	r2, #7
 800d7b6:	601a      	str	r2, [r3, #0]
}
 800d7b8:	bf00      	nop
 800d7ba:	46bd      	mov	sp, r7
 800d7bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c0:	4770      	bx	lr
 800d7c2:	bf00      	nop
 800d7c4:	e000e010 	.word	0xe000e010
 800d7c8:	e000e018 	.word	0xe000e018
 800d7cc:	20000048 	.word	0x20000048
 800d7d0:	10624dd3 	.word	0x10624dd3
 800d7d4:	e000e014 	.word	0xe000e014

0800d7d8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800d7d8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800d7e8 <vPortEnableVFP+0x10>
 800d7dc:	6801      	ldr	r1, [r0, #0]
 800d7de:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800d7e2:	6001      	str	r1, [r0, #0]
 800d7e4:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800d7e6:	bf00      	nop
 800d7e8:	e000ed88 	.word	0xe000ed88

0800d7ec <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800d7ec:	b580      	push	{r7, lr}
 800d7ee:	b08a      	sub	sp, #40	; 0x28
 800d7f0:	af00      	add	r7, sp, #0
 800d7f2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800d7f4:	2300      	movs	r3, #0
 800d7f6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800d7f8:	f7fe ffdc 	bl	800c7b4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800d7fc:	4b5e      	ldr	r3, [pc, #376]	; (800d978 <pvPortMalloc+0x18c>)
 800d7fe:	681b      	ldr	r3, [r3, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d101      	bne.n	800d808 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800d804:	f000 f920 	bl	800da48 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800d808:	4b5c      	ldr	r3, [pc, #368]	; (800d97c <pvPortMalloc+0x190>)
 800d80a:	681a      	ldr	r2, [r3, #0]
 800d80c:	687b      	ldr	r3, [r7, #4]
 800d80e:	4013      	ands	r3, r2
 800d810:	2b00      	cmp	r3, #0
 800d812:	f040 8092 	bne.w	800d93a <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800d816:	687b      	ldr	r3, [r7, #4]
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d01f      	beq.n	800d85c <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 800d81c:	2208      	movs	r2, #8
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	4413      	add	r3, r2
 800d822:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800d824:	687b      	ldr	r3, [r7, #4]
 800d826:	f003 0307 	and.w	r3, r3, #7
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d016      	beq.n	800d85c <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f023 0307 	bic.w	r3, r3, #7
 800d834:	3308      	adds	r3, #8
 800d836:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	f003 0307 	and.w	r3, r3, #7
 800d83e:	2b00      	cmp	r3, #0
 800d840:	d00c      	beq.n	800d85c <pvPortMalloc+0x70>
	__asm volatile
 800d842:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d846:	b672      	cpsid	i
 800d848:	f383 8811 	msr	BASEPRI, r3
 800d84c:	f3bf 8f6f 	isb	sy
 800d850:	f3bf 8f4f 	dsb	sy
 800d854:	b662      	cpsie	i
 800d856:	617b      	str	r3, [r7, #20]
}
 800d858:	bf00      	nop
 800d85a:	e7fe      	b.n	800d85a <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800d85c:	687b      	ldr	r3, [r7, #4]
 800d85e:	2b00      	cmp	r3, #0
 800d860:	d06b      	beq.n	800d93a <pvPortMalloc+0x14e>
 800d862:	4b47      	ldr	r3, [pc, #284]	; (800d980 <pvPortMalloc+0x194>)
 800d864:	681b      	ldr	r3, [r3, #0]
 800d866:	687a      	ldr	r2, [r7, #4]
 800d868:	429a      	cmp	r2, r3
 800d86a:	d866      	bhi.n	800d93a <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800d86c:	4b45      	ldr	r3, [pc, #276]	; (800d984 <pvPortMalloc+0x198>)
 800d86e:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800d870:	4b44      	ldr	r3, [pc, #272]	; (800d984 <pvPortMalloc+0x198>)
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d876:	e004      	b.n	800d882 <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 800d878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87a:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800d87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800d882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d884:	685b      	ldr	r3, [r3, #4]
 800d886:	687a      	ldr	r2, [r7, #4]
 800d888:	429a      	cmp	r2, r3
 800d88a:	d903      	bls.n	800d894 <pvPortMalloc+0xa8>
 800d88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	2b00      	cmp	r3, #0
 800d892:	d1f1      	bne.n	800d878 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800d894:	4b38      	ldr	r3, [pc, #224]	; (800d978 <pvPortMalloc+0x18c>)
 800d896:	681b      	ldr	r3, [r3, #0]
 800d898:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d89a:	429a      	cmp	r2, r3
 800d89c:	d04d      	beq.n	800d93a <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	681b      	ldr	r3, [r3, #0]
 800d8a2:	2208      	movs	r2, #8
 800d8a4:	4413      	add	r3, r2
 800d8a6:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800d8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8aa:	681a      	ldr	r2, [r3, #0]
 800d8ac:	6a3b      	ldr	r3, [r7, #32]
 800d8ae:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800d8b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8b2:	685a      	ldr	r2, [r3, #4]
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	1ad2      	subs	r2, r2, r3
 800d8b8:	2308      	movs	r3, #8
 800d8ba:	005b      	lsls	r3, r3, #1
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d921      	bls.n	800d904 <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800d8c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	4413      	add	r3, r2
 800d8c6:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800d8c8:	69bb      	ldr	r3, [r7, #24]
 800d8ca:	f003 0307 	and.w	r3, r3, #7
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d00c      	beq.n	800d8ec <pvPortMalloc+0x100>
	__asm volatile
 800d8d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8d6:	b672      	cpsid	i
 800d8d8:	f383 8811 	msr	BASEPRI, r3
 800d8dc:	f3bf 8f6f 	isb	sy
 800d8e0:	f3bf 8f4f 	dsb	sy
 800d8e4:	b662      	cpsie	i
 800d8e6:	613b      	str	r3, [r7, #16]
}
 800d8e8:	bf00      	nop
 800d8ea:	e7fe      	b.n	800d8ea <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d8ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8ee:	685a      	ldr	r2, [r3, #4]
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	1ad2      	subs	r2, r2, r3
 800d8f4:	69bb      	ldr	r3, [r7, #24]
 800d8f6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d8f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d8fa:	687a      	ldr	r2, [r7, #4]
 800d8fc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d8fe:	69b8      	ldr	r0, [r7, #24]
 800d900:	f000 f904 	bl	800db0c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d904:	4b1e      	ldr	r3, [pc, #120]	; (800d980 <pvPortMalloc+0x194>)
 800d906:	681a      	ldr	r2, [r3, #0]
 800d908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d90a:	685b      	ldr	r3, [r3, #4]
 800d90c:	1ad3      	subs	r3, r2, r3
 800d90e:	4a1c      	ldr	r2, [pc, #112]	; (800d980 <pvPortMalloc+0x194>)
 800d910:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d912:	4b1b      	ldr	r3, [pc, #108]	; (800d980 <pvPortMalloc+0x194>)
 800d914:	681a      	ldr	r2, [r3, #0]
 800d916:	4b1c      	ldr	r3, [pc, #112]	; (800d988 <pvPortMalloc+0x19c>)
 800d918:	681b      	ldr	r3, [r3, #0]
 800d91a:	429a      	cmp	r2, r3
 800d91c:	d203      	bcs.n	800d926 <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d91e:	4b18      	ldr	r3, [pc, #96]	; (800d980 <pvPortMalloc+0x194>)
 800d920:	681b      	ldr	r3, [r3, #0]
 800d922:	4a19      	ldr	r2, [pc, #100]	; (800d988 <pvPortMalloc+0x19c>)
 800d924:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d928:	685a      	ldr	r2, [r3, #4]
 800d92a:	4b14      	ldr	r3, [pc, #80]	; (800d97c <pvPortMalloc+0x190>)
 800d92c:	681b      	ldr	r3, [r3, #0]
 800d92e:	431a      	orrs	r2, r3
 800d930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d932:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d936:	2200      	movs	r2, #0
 800d938:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d93a:	f7fe ff49 	bl	800c7d0 <xTaskResumeAll>

	#if( configUSE_MALLOC_FAILED_HOOK == 1 )
	{
		if( pvReturn == NULL )
 800d93e:	69fb      	ldr	r3, [r7, #28]
 800d940:	2b00      	cmp	r3, #0
 800d942:	d101      	bne.n	800d948 <pvPortMalloc+0x15c>
		{
			extern void vApplicationMallocFailedHook( void );
			vApplicationMallocFailedHook();
 800d944:	f7f2 fdf2 	bl	800052c <vApplicationMallocFailedHook>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d948:	69fb      	ldr	r3, [r7, #28]
 800d94a:	f003 0307 	and.w	r3, r3, #7
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d00c      	beq.n	800d96c <pvPortMalloc+0x180>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	b672      	cpsid	i
 800d958:	f383 8811 	msr	BASEPRI, r3
 800d95c:	f3bf 8f6f 	isb	sy
 800d960:	f3bf 8f4f 	dsb	sy
 800d964:	b662      	cpsie	i
 800d966:	60fb      	str	r3, [r7, #12]
}
 800d968:	bf00      	nop
 800d96a:	e7fe      	b.n	800d96a <pvPortMalloc+0x17e>
	return pvReturn;
 800d96c:	69fb      	ldr	r3, [r7, #28]
}
 800d96e:	4618      	mov	r0, r3
 800d970:	3728      	adds	r7, #40	; 0x28
 800d972:	46bd      	mov	sp, r7
 800d974:	bd80      	pop	{r7, pc}
 800d976:	bf00      	nop
 800d978:	200085d8 	.word	0x200085d8
 800d97c:	200085e4 	.word	0x200085e4
 800d980:	200085dc 	.word	0x200085dc
 800d984:	200085d0 	.word	0x200085d0
 800d988:	200085e0 	.word	0x200085e0

0800d98c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d98c:	b580      	push	{r7, lr}
 800d98e:	b086      	sub	sp, #24
 800d990:	af00      	add	r7, sp, #0
 800d992:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d04c      	beq.n	800da38 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d99e:	2308      	movs	r3, #8
 800d9a0:	425b      	negs	r3, r3
 800d9a2:	697a      	ldr	r2, [r7, #20]
 800d9a4:	4413      	add	r3, r2
 800d9a6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d9a8:	697b      	ldr	r3, [r7, #20]
 800d9aa:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d9ac:	693b      	ldr	r3, [r7, #16]
 800d9ae:	685a      	ldr	r2, [r3, #4]
 800d9b0:	4b23      	ldr	r3, [pc, #140]	; (800da40 <vPortFree+0xb4>)
 800d9b2:	681b      	ldr	r3, [r3, #0]
 800d9b4:	4013      	ands	r3, r2
 800d9b6:	2b00      	cmp	r3, #0
 800d9b8:	d10c      	bne.n	800d9d4 <vPortFree+0x48>
	__asm volatile
 800d9ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9be:	b672      	cpsid	i
 800d9c0:	f383 8811 	msr	BASEPRI, r3
 800d9c4:	f3bf 8f6f 	isb	sy
 800d9c8:	f3bf 8f4f 	dsb	sy
 800d9cc:	b662      	cpsie	i
 800d9ce:	60fb      	str	r3, [r7, #12]
}
 800d9d0:	bf00      	nop
 800d9d2:	e7fe      	b.n	800d9d2 <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d9d4:	693b      	ldr	r3, [r7, #16]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00c      	beq.n	800d9f6 <vPortFree+0x6a>
	__asm volatile
 800d9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9e0:	b672      	cpsid	i
 800d9e2:	f383 8811 	msr	BASEPRI, r3
 800d9e6:	f3bf 8f6f 	isb	sy
 800d9ea:	f3bf 8f4f 	dsb	sy
 800d9ee:	b662      	cpsie	i
 800d9f0:	60bb      	str	r3, [r7, #8]
}
 800d9f2:	bf00      	nop
 800d9f4:	e7fe      	b.n	800d9f4 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d9f6:	693b      	ldr	r3, [r7, #16]
 800d9f8:	685a      	ldr	r2, [r3, #4]
 800d9fa:	4b11      	ldr	r3, [pc, #68]	; (800da40 <vPortFree+0xb4>)
 800d9fc:	681b      	ldr	r3, [r3, #0]
 800d9fe:	4013      	ands	r3, r2
 800da00:	2b00      	cmp	r3, #0
 800da02:	d019      	beq.n	800da38 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800da04:	693b      	ldr	r3, [r7, #16]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	2b00      	cmp	r3, #0
 800da0a:	d115      	bne.n	800da38 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800da0c:	693b      	ldr	r3, [r7, #16]
 800da0e:	685a      	ldr	r2, [r3, #4]
 800da10:	4b0b      	ldr	r3, [pc, #44]	; (800da40 <vPortFree+0xb4>)
 800da12:	681b      	ldr	r3, [r3, #0]
 800da14:	43db      	mvns	r3, r3
 800da16:	401a      	ands	r2, r3
 800da18:	693b      	ldr	r3, [r7, #16]
 800da1a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800da1c:	f7fe feca 	bl	800c7b4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800da20:	693b      	ldr	r3, [r7, #16]
 800da22:	685a      	ldr	r2, [r3, #4]
 800da24:	4b07      	ldr	r3, [pc, #28]	; (800da44 <vPortFree+0xb8>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4413      	add	r3, r2
 800da2a:	4a06      	ldr	r2, [pc, #24]	; (800da44 <vPortFree+0xb8>)
 800da2c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800da2e:	6938      	ldr	r0, [r7, #16]
 800da30:	f000 f86c 	bl	800db0c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800da34:	f7fe fecc 	bl	800c7d0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800da38:	bf00      	nop
 800da3a:	3718      	adds	r7, #24
 800da3c:	46bd      	mov	sp, r7
 800da3e:	bd80      	pop	{r7, pc}
 800da40:	200085e4 	.word	0x200085e4
 800da44:	200085dc 	.word	0x200085dc

0800da48 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800da48:	b480      	push	{r7}
 800da4a:	b085      	sub	sp, #20
 800da4c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800da4e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800da52:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800da54:	4b27      	ldr	r3, [pc, #156]	; (800daf4 <prvHeapInit+0xac>)
 800da56:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f003 0307 	and.w	r3, r3, #7
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d00c      	beq.n	800da7c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800da62:	68fb      	ldr	r3, [r7, #12]
 800da64:	3307      	adds	r3, #7
 800da66:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	f023 0307 	bic.w	r3, r3, #7
 800da6e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800da70:	68ba      	ldr	r2, [r7, #8]
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	1ad3      	subs	r3, r2, r3
 800da76:	4a1f      	ldr	r2, [pc, #124]	; (800daf4 <prvHeapInit+0xac>)
 800da78:	4413      	add	r3, r2
 800da7a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800da7c:	68fb      	ldr	r3, [r7, #12]
 800da7e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800da80:	4a1d      	ldr	r2, [pc, #116]	; (800daf8 <prvHeapInit+0xb0>)
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800da86:	4b1c      	ldr	r3, [pc, #112]	; (800daf8 <prvHeapInit+0xb0>)
 800da88:	2200      	movs	r2, #0
 800da8a:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	68ba      	ldr	r2, [r7, #8]
 800da90:	4413      	add	r3, r2
 800da92:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800da94:	2208      	movs	r2, #8
 800da96:	68fb      	ldr	r3, [r7, #12]
 800da98:	1a9b      	subs	r3, r3, r2
 800da9a:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800da9c:	68fb      	ldr	r3, [r7, #12]
 800da9e:	f023 0307 	bic.w	r3, r3, #7
 800daa2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800daa4:	68fb      	ldr	r3, [r7, #12]
 800daa6:	4a15      	ldr	r2, [pc, #84]	; (800dafc <prvHeapInit+0xb4>)
 800daa8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800daaa:	4b14      	ldr	r3, [pc, #80]	; (800dafc <prvHeapInit+0xb4>)
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	2200      	movs	r2, #0
 800dab0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800dab2:	4b12      	ldr	r3, [pc, #72]	; (800dafc <prvHeapInit+0xb4>)
 800dab4:	681b      	ldr	r3, [r3, #0]
 800dab6:	2200      	movs	r2, #0
 800dab8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dabe:	683b      	ldr	r3, [r7, #0]
 800dac0:	68fa      	ldr	r2, [r7, #12]
 800dac2:	1ad2      	subs	r2, r2, r3
 800dac4:	683b      	ldr	r3, [r7, #0]
 800dac6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dac8:	4b0c      	ldr	r3, [pc, #48]	; (800dafc <prvHeapInit+0xb4>)
 800daca:	681a      	ldr	r2, [r3, #0]
 800dacc:	683b      	ldr	r3, [r7, #0]
 800dace:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	685b      	ldr	r3, [r3, #4]
 800dad4:	4a0a      	ldr	r2, [pc, #40]	; (800db00 <prvHeapInit+0xb8>)
 800dad6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dad8:	683b      	ldr	r3, [r7, #0]
 800dada:	685b      	ldr	r3, [r3, #4]
 800dadc:	4a09      	ldr	r2, [pc, #36]	; (800db04 <prvHeapInit+0xbc>)
 800dade:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dae0:	4b09      	ldr	r3, [pc, #36]	; (800db08 <prvHeapInit+0xc0>)
 800dae2:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800dae6:	601a      	str	r2, [r3, #0]
}
 800dae8:	bf00      	nop
 800daea:	3714      	adds	r7, #20
 800daec:	46bd      	mov	sp, r7
 800daee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daf2:	4770      	bx	lr
 800daf4:	200005d0 	.word	0x200005d0
 800daf8:	200085d0 	.word	0x200085d0
 800dafc:	200085d8 	.word	0x200085d8
 800db00:	200085e0 	.word	0x200085e0
 800db04:	200085dc 	.word	0x200085dc
 800db08:	200085e4 	.word	0x200085e4

0800db0c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800db0c:	b480      	push	{r7}
 800db0e:	b085      	sub	sp, #20
 800db10:	af00      	add	r7, sp, #0
 800db12:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800db14:	4b28      	ldr	r3, [pc, #160]	; (800dbb8 <prvInsertBlockIntoFreeList+0xac>)
 800db16:	60fb      	str	r3, [r7, #12]
 800db18:	e002      	b.n	800db20 <prvInsertBlockIntoFreeList+0x14>
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	681b      	ldr	r3, [r3, #0]
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	687a      	ldr	r2, [r7, #4]
 800db26:	429a      	cmp	r2, r3
 800db28:	d8f7      	bhi.n	800db1a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	685b      	ldr	r3, [r3, #4]
 800db32:	68ba      	ldr	r2, [r7, #8]
 800db34:	4413      	add	r3, r2
 800db36:	687a      	ldr	r2, [r7, #4]
 800db38:	429a      	cmp	r2, r3
 800db3a:	d108      	bne.n	800db4e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800db3c:	68fb      	ldr	r3, [r7, #12]
 800db3e:	685a      	ldr	r2, [r3, #4]
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	685b      	ldr	r3, [r3, #4]
 800db44:	441a      	add	r2, r3
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	685b      	ldr	r3, [r3, #4]
 800db56:	68ba      	ldr	r2, [r7, #8]
 800db58:	441a      	add	r2, r3
 800db5a:	68fb      	ldr	r3, [r7, #12]
 800db5c:	681b      	ldr	r3, [r3, #0]
 800db5e:	429a      	cmp	r2, r3
 800db60:	d118      	bne.n	800db94 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800db62:	68fb      	ldr	r3, [r7, #12]
 800db64:	681a      	ldr	r2, [r3, #0]
 800db66:	4b15      	ldr	r3, [pc, #84]	; (800dbbc <prvInsertBlockIntoFreeList+0xb0>)
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	429a      	cmp	r2, r3
 800db6c:	d00d      	beq.n	800db8a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	685a      	ldr	r2, [r3, #4]
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	681b      	ldr	r3, [r3, #0]
 800db76:	685b      	ldr	r3, [r3, #4]
 800db78:	441a      	add	r2, r3
 800db7a:	687b      	ldr	r3, [r7, #4]
 800db7c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800db7e:	68fb      	ldr	r3, [r7, #12]
 800db80:	681b      	ldr	r3, [r3, #0]
 800db82:	681a      	ldr	r2, [r3, #0]
 800db84:	687b      	ldr	r3, [r7, #4]
 800db86:	601a      	str	r2, [r3, #0]
 800db88:	e008      	b.n	800db9c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800db8a:	4b0c      	ldr	r3, [pc, #48]	; (800dbbc <prvInsertBlockIntoFreeList+0xb0>)
 800db8c:	681a      	ldr	r2, [r3, #0]
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	601a      	str	r2, [r3, #0]
 800db92:	e003      	b.n	800db9c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800db94:	68fb      	ldr	r3, [r7, #12]
 800db96:	681a      	ldr	r2, [r3, #0]
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800db9c:	68fa      	ldr	r2, [r7, #12]
 800db9e:	687b      	ldr	r3, [r7, #4]
 800dba0:	429a      	cmp	r2, r3
 800dba2:	d002      	beq.n	800dbaa <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dba4:	68fb      	ldr	r3, [r7, #12]
 800dba6:	687a      	ldr	r2, [r7, #4]
 800dba8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dbaa:	bf00      	nop
 800dbac:	3714      	adds	r7, #20
 800dbae:	46bd      	mov	sp, r7
 800dbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbb4:	4770      	bx	lr
 800dbb6:	bf00      	nop
 800dbb8:	200085d0 	.word	0x200085d0
 800dbbc:	200085d8 	.word	0x200085d8

0800dbc0 <__libc_init_array>:
 800dbc0:	b570      	push	{r4, r5, r6, lr}
 800dbc2:	4d0d      	ldr	r5, [pc, #52]	; (800dbf8 <__libc_init_array+0x38>)
 800dbc4:	4c0d      	ldr	r4, [pc, #52]	; (800dbfc <__libc_init_array+0x3c>)
 800dbc6:	1b64      	subs	r4, r4, r5
 800dbc8:	10a4      	asrs	r4, r4, #2
 800dbca:	2600      	movs	r6, #0
 800dbcc:	42a6      	cmp	r6, r4
 800dbce:	d109      	bne.n	800dbe4 <__libc_init_array+0x24>
 800dbd0:	4d0b      	ldr	r5, [pc, #44]	; (800dc00 <__libc_init_array+0x40>)
 800dbd2:	4c0c      	ldr	r4, [pc, #48]	; (800dc04 <__libc_init_array+0x44>)
 800dbd4:	f000 f82e 	bl	800dc34 <_init>
 800dbd8:	1b64      	subs	r4, r4, r5
 800dbda:	10a4      	asrs	r4, r4, #2
 800dbdc:	2600      	movs	r6, #0
 800dbde:	42a6      	cmp	r6, r4
 800dbe0:	d105      	bne.n	800dbee <__libc_init_array+0x2e>
 800dbe2:	bd70      	pop	{r4, r5, r6, pc}
 800dbe4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbe8:	4798      	blx	r3
 800dbea:	3601      	adds	r6, #1
 800dbec:	e7ee      	b.n	800dbcc <__libc_init_array+0xc>
 800dbee:	f855 3b04 	ldr.w	r3, [r5], #4
 800dbf2:	4798      	blx	r3
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	e7f2      	b.n	800dbde <__libc_init_array+0x1e>
 800dbf8:	0800fc6c 	.word	0x0800fc6c
 800dbfc:	0800fc6c 	.word	0x0800fc6c
 800dc00:	0800fc6c 	.word	0x0800fc6c
 800dc04:	0800fc70 	.word	0x0800fc70

0800dc08 <memcpy>:
 800dc08:	440a      	add	r2, r1
 800dc0a:	4291      	cmp	r1, r2
 800dc0c:	f100 33ff 	add.w	r3, r0, #4294967295
 800dc10:	d100      	bne.n	800dc14 <memcpy+0xc>
 800dc12:	4770      	bx	lr
 800dc14:	b510      	push	{r4, lr}
 800dc16:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc1e:	4291      	cmp	r1, r2
 800dc20:	d1f9      	bne.n	800dc16 <memcpy+0xe>
 800dc22:	bd10      	pop	{r4, pc}

0800dc24 <memset>:
 800dc24:	4402      	add	r2, r0
 800dc26:	4603      	mov	r3, r0
 800dc28:	4293      	cmp	r3, r2
 800dc2a:	d100      	bne.n	800dc2e <memset+0xa>
 800dc2c:	4770      	bx	lr
 800dc2e:	f803 1b01 	strb.w	r1, [r3], #1
 800dc32:	e7f9      	b.n	800dc28 <memset+0x4>

0800dc34 <_init>:
 800dc34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc36:	bf00      	nop
 800dc38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc3a:	bc08      	pop	{r3}
 800dc3c:	469e      	mov	lr, r3
 800dc3e:	4770      	bx	lr

0800dc40 <_fini>:
 800dc40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dc42:	bf00      	nop
 800dc44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800dc46:	bc08      	pop	{r3}
 800dc48:	469e      	mov	lr, r3
 800dc4a:	4770      	bx	lr
